begin_unit
comment|'# -*- test-case-name: twisted.test.test_strports -*-'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nPort description language\n\nThis module implements a description mini-language for ports, and provides\nfunctions to parse it and to use it to directly construct appropriate\nnetwork server services or to directly listen on them.\n\nHere are some examples. They assume the following toy resource and factory\ndefinitions::\n    class Simple(resource.Resource):\n        isLeaf = True\n        def render_GET(self, request):\n            return "<html>Hello, world!</html>"\n\n     class FingerProtocol(protocol.Protocol):\n         def connectionMade(self):\n             self.transport.loseConnection()\n\n     class FingerFactory(protocol.ServerFactory):\n         protocol = FingerProtocol\n\nExamples using SSL require a private key and a certificate. If a private key\nfile name (C{privateKey}) isn\'t provided, a "server.pem" file is assumed to\nexist which contains the private key. If the certificate file name (C{certKey})\nisn\'t provided, the private key file is assumed to contain the certificate as\nwell::\n    >>> s=service("80", server.Site(Simple()))\n    >>> s=service("tcp:80", server.Site(Simple()))\n    >>> s=service("tcp:80:interface=127.0.0.1", server.Site(Simple()))\n    >>> s=service("ssl:443", server.Site(Simple()))\n    >>> s=service("ssl:443:privateKey=mykey.pem", server.Site(Simple()))\n    >>> s=service("ssl:443:privateKey=mykey.pem:certKey=cert.pem", server.Site(Simple()))\n    >>> s=service("unix:/var/run/finger", FingerFactory())\n    >>> s=service("unix:/var/run/finger:mode=660", FingerFactory())\n    >>> p=listen("80", server.Site(Simple()))\n    >>> p=listen("tcp:80", server.Site(Simple()))\n    >>> p=listen("tcp:80:interface=127.0.0.1", server.Site(Simple()))\n    >>> p=listen("ssl:443", server.Site(Simple()))\n    >>> p=listen("ssl:443:privateKey=mykey.pem", server.Site(Simple()))\n    >>> p=listen("ssl:443:privateKey=mykey.pem:certKey=cert.pem", server.Site(Simple()))\n    >>> p=listen("unix:/var/run/finger", FingerFactory())\n    >>> p=listen("unix:/var/run/finger:mode=660", FingerFactory())\n    >>> p=listen("unix:/var/run/finger:lockfile=0", FingerFactory())\n\nSee specific function documentation for more information.\n\nMaintainer: Moshe Zadka\n"""'
newline|'\n'
name|'from'
name|'__future__'
name|'import'
name|'generators'
newline|'\n'
nl|'\n'
DECL|function|_parseTCP
name|'def'
name|'_parseTCP'
op|'('
name|'factory'
op|','
name|'port'
op|','
name|'interface'
op|'='
string|'""'
op|','
name|'backlog'
op|'='
number|'50'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'('
name|'int'
op|'('
name|'port'
op|')'
op|','
name|'factory'
op|')'
op|','
op|'{'
string|"'interface'"
op|':'
name|'interface'
op|','
nl|'\n'
string|"'backlog'"
op|':'
name|'int'
op|'('
name|'backlog'
op|')'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_parseUNIX
dedent|''
name|'def'
name|'_parseUNIX'
op|'('
name|'factory'
op|','
name|'address'
op|','
name|'mode'
op|'='
string|"'666'"
op|','
name|'backlog'
op|'='
number|'50'
op|','
name|'lockfile'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'('
nl|'\n'
op|'('
name|'address'
op|','
name|'factory'
op|')'
op|','
nl|'\n'
op|'{'
string|"'mode'"
op|':'
name|'int'
op|'('
name|'mode'
op|','
number|'8'
op|')'
op|','
string|"'backlog'"
op|':'
name|'int'
op|'('
name|'backlog'
op|')'
op|','
nl|'\n'
string|"'wantPID'"
op|':'
name|'bool'
op|'('
name|'int'
op|'('
name|'lockfile'
op|')'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_parseSSL
dedent|''
name|'def'
name|'_parseSSL'
op|'('
name|'factory'
op|','
name|'port'
op|','
name|'privateKey'
op|'='
string|'"server.pem"'
op|','
name|'certKey'
op|'='
name|'None'
op|','
nl|'\n'
name|'sslmethod'
op|'='
name|'None'
op|','
name|'interface'
op|'='
string|"''"
op|','
name|'backlog'
op|'='
number|'50'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'ssl'
newline|'\n'
name|'if'
name|'certKey'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'certKey'
op|'='
name|'privateKey'
newline|'\n'
dedent|''
name|'kw'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'sslmethod'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'kw'
op|'['
string|"'sslmethod'"
op|']'
op|'='
name|'getattr'
op|'('
name|'ssl'
op|'.'
name|'SSL'
op|','
name|'sslmethod'
op|')'
newline|'\n'
dedent|''
name|'cf'
op|'='
name|'ssl'
op|'.'
name|'DefaultOpenSSLContextFactory'
op|'('
name|'privateKey'
op|','
name|'certKey'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'return'
op|'('
op|'('
name|'int'
op|'('
name|'port'
op|')'
op|','
name|'factory'
op|','
name|'cf'
op|')'
op|','
nl|'\n'
op|'{'
string|"'interface'"
op|':'
name|'interface'
op|','
string|"'backlog'"
op|':'
name|'int'
op|'('
name|'backlog'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_funcs
dedent|''
name|'_funcs'
op|'='
op|'{'
string|'"tcp"'
op|':'
name|'_parseTCP'
op|','
nl|'\n'
string|'"unix"'
op|':'
name|'_parseUNIX'
op|','
nl|'\n'
string|'"ssl"'
op|':'
name|'_parseSSL'
op|'}'
newline|'\n'
nl|'\n'
name|'_OP'
op|','
name|'_STRING'
op|'='
name|'range'
op|'('
number|'2'
op|')'
newline|'\n'
DECL|function|_tokenize
name|'def'
name|'_tokenize'
op|'('
name|'description'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'current'
op|'='
string|"''"
newline|'\n'
name|'ops'
op|'='
string|"':='"
newline|'\n'
name|'nextOps'
op|'='
op|'{'
string|"':'"
op|':'
string|"':='"
op|','
string|"'='"
op|':'
string|"':'"
op|'}'
newline|'\n'
name|'description'
op|'='
name|'iter'
op|'('
name|'description'
op|')'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'description'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'n'
name|'in'
name|'ops'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'_STRING'
op|','
name|'current'
newline|'\n'
name|'yield'
name|'_OP'
op|','
name|'n'
newline|'\n'
name|'current'
op|'='
string|"''"
newline|'\n'
name|'ops'
op|'='
name|'nextOps'
op|'['
name|'n'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'n'
op|'=='
string|"'\\\\'"
op|':'
newline|'\n'
indent|'            '
name|'current'
op|'+='
name|'description'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'current'
op|'+='
name|'n'
newline|'\n'
dedent|''
dedent|''
name|'yield'
name|'_STRING'
op|','
name|'current'
newline|'\n'
nl|'\n'
DECL|function|_parse
dedent|''
name|'def'
name|'_parse'
op|'('
name|'description'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'args'
op|','
name|'kw'
op|'='
op|'['
op|']'
op|','
op|'{'
op|'}'
newline|'\n'
DECL|function|add
name|'def'
name|'add'
op|'('
name|'sofar'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'sofar'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'.'
name|'append'
op|'('
name|'sofar'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'kw'
op|'['
name|'sofar'
op|'['
number|'0'
op|']'
op|']'
op|'='
name|'sofar'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'sofar'
op|'='
op|'('
op|')'
newline|'\n'
name|'for'
op|'('
name|'type'
op|','
name|'value'
op|')'
name|'in'
name|'_tokenize'
op|'('
name|'description'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'type'
name|'is'
name|'_STRING'
op|':'
newline|'\n'
indent|'            '
name|'sofar'
op|'+='
op|'('
name|'value'
op|','
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'value'
op|'=='
string|"':'"
op|':'
newline|'\n'
indent|'            '
name|'add'
op|'('
name|'sofar'
op|')'
newline|'\n'
name|'sofar'
op|'='
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'add'
op|'('
name|'sofar'
op|')'
newline|'\n'
name|'return'
name|'args'
op|','
name|'kw'
newline|'\n'
nl|'\n'
DECL|function|parse
dedent|''
name|'def'
name|'parse'
op|'('
name|'description'
op|','
name|'factory'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Parse the description of a reliable virtual circuit server (that is, a\n    TCP port, a UNIX domain socket or an SSL port) and return the data\n    necessary to call the reactor methods to listen on the given socket with\n    the given factory.\n\n    An argument with no colons means a default port. Usually the default\n    type is C{tcp}, but passing a non-C{None} value as C{default} will set\n    that as the default. Otherwise, it is a colon-separated string.  The\n    first part means the type -- currently, it can only be ssl, unix or tcp.\n    After that, comes a list of arguments. Arguments can be positional or\n    keyword, and can be mixed.  Keyword arguments are indicated by\n    C{\'name=value\'}. If a value is supposed to contain a C{\':\'}, a C{\'=\'} or\n    a C{\'\\\\\'}, escape it with a C{\'\\\\\'}.\n\n    For TCP, the arguments are the port (port number) and, optionally the\n    interface (interface on which to listen) and backlog (how many clients\n    to keep in the backlog).\n\n    For UNIX domain sockets, the arguments are address (the file name of the\n    socket) and optionally the mode (the mode bits of the file, as an octal\n    number) and the backlog (how many clients to keep in the backlog).\n\n    For SSL sockets, the arguments are the port (port number) and,\n    optionally, the privateKey (file in which the private key is in),\n    certKey (file in which the certification is in), sslmethod (the name of\n    the SSL method to allow), the interface (interface on which to listen)\n    and the backlog (how many clients to keep in the backlog).\n\n    @type description: C{str}\n    @type factory: L{twisted.internet.interfaces.IProtocolFactory}\n    @type default: C{str} or C{None}\n    @rtype: C{tuple}\n    @return: a tuple of string, tuple and dictionary. The string is the name\n    of the method (sans C{\'listen\'}) to call, and the tuple and dictionary\n    are the arguments and keyword arguments to the method.\n    @raises ValueError: if the string is formatted incorrectly.\n    @raises KeyError: if the type is other than unix, ssl or tcp.\n    """'
newline|'\n'
name|'args'
op|','
name|'kw'
op|'='
name|'_parse'
op|'('
name|'description'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'args'
name|'or'
op|'('
name|'len'
op|'('
name|'args'
op|')'
op|'=='
number|'1'
name|'and'
name|'not'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'['
number|'0'
op|':'
number|'0'
op|']'
op|'='
op|'['
name|'default'
name|'or'
string|"'tcp'"
op|']'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'args'
op|'['
number|'0'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|','
op|')'
op|'+'
name|'_funcs'
op|'['
name|'args'
op|'['
number|'0'
op|']'
op|']'
op|'('
name|'factory'
op|','
op|'*'
name|'args'
op|'['
number|'1'
op|':'
op|']'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|function|service
dedent|''
name|'def'
name|'service'
op|'('
name|'description'
op|','
name|'factory'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the service corresponding to a description\n\n    @type description: C{str}\n    @type factory: L{twisted.internet.interfaces.IProtocolFactory}\n    @type default: C{str} or C{None}\n    @rtype: C{twisted.application.service.IService}\n    @return: the service corresponding to a description of a reliable\n    virtual circuit server.\n\n    See the documentation of the C{parse} function for description\n    of the semantics of the arguments.\n    """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'application'
name|'import'
name|'internet'
newline|'\n'
name|'name'
op|','
name|'args'
op|','
name|'kw'
op|'='
name|'parse'
op|'('
name|'description'
op|','
name|'factory'
op|','
name|'default'
op|')'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'internet'
op|','
name|'name'
op|'+'
string|"'Server'"
op|')'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|function|listen
dedent|''
name|'def'
name|'listen'
op|'('
name|'description'
op|','
name|'factory'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Listen on a port corresponding to a description\n\n    @type description: C{str}\n    @type factory: L{twisted.internet.interfaces.IProtocolFactory}\n    @type default: C{str} or C{None}\n    @rtype: C{twisted.internet.interfaces.IListeningPort}\n    @return: the port corresponding to a description of a reliable\n    virtual circuit server.\n\n    See the documentation of the C{parse} function for description\n    of the semantics of the arguments.\n    """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'name'
op|','
name|'args'
op|','
name|'kw'
op|'='
name|'parse'
op|'('
name|'description'
op|','
name|'factory'
op|','
name|'default'
op|')'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'reactor'
op|','
string|"'listen'"
op|'+'
name|'name'
op|')'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
name|'__all__'
op|'='
op|'['
string|"'parse'"
op|','
string|"'service'"
op|','
string|"'listen'"
op|']'
newline|'\n'
endmarker|''
end_unit

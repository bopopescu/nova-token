begin_unit
comment|'# -*- test-case-name: twisted.test.test_application,twisted.test.test_cooperator -*-'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nReactor-based Services\n\nHere are services to run clients, servers and periodic services using\nthe reactor.\n\nThis module (dynamically) defines various Service subclasses that let\nyou represent clients and servers in a Service hierarchy.\n\nThey are as follows::\n\n  TCPServer, TCPClient,\n  UNIXServer, UNIXClient,\n  SSLServer, SSLClient,\n  UDPServer, UDPClient,\n  UNIXDatagramServer, UNIXDatagramClient,\n  MulticastServer\n\nThese classes take arbitrary arguments in their constructors and pass\nthem straight on to their respective reactor.listenXXX or\nreactor.connectXXX calls.\n\nFor example, the following service starts a web server on port 8080:\nC{TCPServer(8080, server.Site(r))}.  See the documentation for the\nreactor.listen/connect* methods for more information.\n\nMaintainer: Moshe Zadka\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'application'
name|'import'
name|'service'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'task'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_VolatileDataService
name|'class'
name|'_VolatileDataService'
op|'('
name|'service'
op|'.'
name|'Service'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|volatile
indent|'    '
name|'volatile'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|__getstate__
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'service'
op|'.'
name|'Service'
op|'.'
name|'__getstate__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'for'
name|'attr'
name|'in'
name|'self'
op|'.'
name|'volatile'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'attr'
name|'in'
name|'d'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'d'
op|'['
name|'attr'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_AbstractServer
dedent|''
dedent|''
name|'class'
name|'_AbstractServer'
op|'('
name|'_VolatileDataService'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @cvar volatile: list of attribute to remove from pickling.\n    @type volatile: C{list}\n\n    @ivar method: the type of method to call on the reactor, one of B{TCP},\n        B{UDP}, B{SSL} or B{UNIX}.\n    @type method: C{str}\n\n    @ivar reactor: the current running reactor.\n    @type reactor: a provider of C{IReactorTCP}, C{IReactorUDP},\n        C{IReactorSSL} or C{IReactorUnix}.\n\n    @ivar _port: instance of port set when the service is started.\n    @type _port: a provider of C{IListeningPort}.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|volatile
name|'volatile'
op|'='
op|'['
string|"'_port'"
op|']'
newline|'\n'
DECL|variable|method
name|'method'
op|'='
name|'None'
newline|'\n'
DECL|variable|reactor
name|'reactor'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|_port
name|'_port'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
name|'if'
string|"'reactor'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reactor'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|'"reactor"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'kwargs'
op|'='
name|'kwargs'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|privilegedStartService
dedent|''
name|'def'
name|'privilegedStartService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'service'
op|'.'
name|'Service'
op|'.'
name|'privilegedStartService'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_port'
op|'='
name|'self'
op|'.'
name|'_getPort'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|startService
dedent|''
name|'def'
name|'startService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'service'
op|'.'
name|'Service'
op|'.'
name|'startService'
op|'('
name|'self'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_port'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_port'
op|'='
name|'self'
op|'.'
name|'_getPort'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stopService
dedent|''
dedent|''
name|'def'
name|'stopService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'service'
op|'.'
name|'Service'
op|'.'
name|'stopService'
op|'('
name|'self'
op|')'
newline|'\n'
comment|'# TODO: if startup failed, should shutdown skip stopListening?'
nl|'\n'
comment|"# _port won't exist"
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_port'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'_port'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'_port'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getPort
dedent|''
dedent|''
name|'def'
name|'_getPort'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Wrapper around the appropriate listen method of the reactor.\n\n        @return: the port object returned by the listen method.\n        @rtype: an object providing L{IListeningPort}.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'reactor'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'='
name|'self'
op|'.'
name|'reactor'
newline|'\n'
dedent|''
name|'return'
name|'getattr'
op|'('
name|'reactor'
op|','
string|"'listen%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'method'
op|','
op|')'
op|')'
op|'('
nl|'\n'
op|'*'
name|'self'
op|'.'
name|'args'
op|','
op|'**'
name|'self'
op|'.'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_AbstractClient
dedent|''
dedent|''
name|'class'
name|'_AbstractClient'
op|'('
name|'_VolatileDataService'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @cvar volatile: list of attribute to remove from pickling.\n    @type volatile: C{list}\n\n    @ivar method: the type of method to call on the reactor, one of B{TCP},\n        B{UDP}, B{SSL} or B{UNIX}.\n    @type method: C{str}\n\n    @ivar reactor: the current running reactor.\n    @type reactor: a provider of C{IReactorTCP}, C{IReactorUDP},\n        C{IReactorSSL} or C{IReactorUnix}.\n\n    @ivar _connection: instance of connection set when the service is started.\n    @type _connection: a provider of C{IConnector}.\n    """'
newline|'\n'
DECL|variable|volatile
name|'volatile'
op|'='
op|'['
string|"'_connection'"
op|']'
newline|'\n'
DECL|variable|method
name|'method'
op|'='
name|'None'
newline|'\n'
DECL|variable|reactor
name|'reactor'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|_connection
name|'_connection'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
name|'if'
string|"'reactor'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reactor'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|'"reactor"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'kwargs'
op|'='
name|'kwargs'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|startService
dedent|''
name|'def'
name|'startService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'service'
op|'.'
name|'Service'
op|'.'
name|'startService'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_connection'
op|'='
name|'self'
op|'.'
name|'_getConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stopService
dedent|''
name|'def'
name|'stopService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'service'
op|'.'
name|'Service'
op|'.'
name|'stopService'
op|'('
name|'self'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_connection'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_connection'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'_connection'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getConnection
dedent|''
dedent|''
name|'def'
name|'_getConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Wrapper around the appropriate connect method of the reactor.\n\n        @return: the port object returned by the connect method.\n        @rtype: an object providing L{IConnector}.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'reactor'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'='
name|'self'
op|'.'
name|'reactor'
newline|'\n'
dedent|''
name|'return'
name|'getattr'
op|'('
name|'reactor'
op|','
string|"'connect%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'method'
op|','
op|')'
op|')'
op|'('
nl|'\n'
op|'*'
name|'self'
op|'.'
name|'args'
op|','
op|'**'
name|'self'
op|'.'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_doc
dedent|''
dedent|''
name|'_doc'
op|'='
op|'{'
nl|'\n'
string|"'Client'"
op|':'
nl|'\n'
string|'"""Connect to %(tran)s\n\nCall reactor.connect%(method)s when the service starts, with the\narguments given to the constructor.\n"""'
op|','
nl|'\n'
string|"'Server'"
op|':'
nl|'\n'
string|'"""Serve %(tran)s clients\n\nCall reactor.listen%(method)s when the service starts, with the\narguments given to the constructor. When the service stops,\nstop listening. See twisted.internet.interfaces for documentation\non arguments to the reactor method.\n"""'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'import'
name|'new'
newline|'\n'
name|'for'
name|'tran'
name|'in'
string|"'Generic TCP UNIX SSL UDP UNIXDatagram Multicast'"
op|'.'
name|'split'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'side'
name|'in'
string|"'Server Client'"
op|'.'
name|'split'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'tran'
op|'=='
string|'"Multicast"'
name|'and'
name|'side'
op|'=='
string|'"Client"'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'base'
op|'='
name|'globals'
op|'('
op|')'
op|'['
string|"'_Abstract'"
op|'+'
name|'side'
op|']'
newline|'\n'
name|'method'
op|'='
op|'{'
string|"'Generic'"
op|':'
string|"'With'"
op|'}'
op|'.'
name|'get'
op|'('
name|'tran'
op|','
name|'tran'
op|')'
newline|'\n'
name|'doc'
op|'='
name|'_doc'
op|'['
name|'side'
op|']'
op|'%'
name|'vars'
op|'('
op|')'
newline|'\n'
name|'klass'
op|'='
name|'new'
op|'.'
name|'classobj'
op|'('
name|'tran'
op|'+'
name|'side'
op|','
op|'('
name|'base'
op|','
op|')'
op|','
nl|'\n'
op|'{'
string|"'method'"
op|':'
name|'method'
op|','
string|"'__doc__'"
op|':'
name|'doc'
op|'}'
op|')'
newline|'\n'
name|'globals'
op|'('
op|')'
op|'['
name|'tran'
op|'+'
name|'side'
op|']'
op|'='
name|'klass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TimerService
dedent|''
dedent|''
name|'class'
name|'TimerService'
op|'('
name|'_VolatileDataService'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""Service to periodically call a function\n\n    Every C{step} seconds call the given function with the given arguments.\n    The service starts the calls when it starts, and cancels them\n    when it stops.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|volatile
name|'volatile'
op|'='
op|'['
string|"'_loop'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'step'
op|','
name|'callable'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'step'
op|'='
name|'step'
newline|'\n'
name|'self'
op|'.'
name|'call'
op|'='
op|'('
name|'callable'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startService
dedent|''
name|'def'
name|'startService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'service'
op|'.'
name|'Service'
op|'.'
name|'startService'
op|'('
name|'self'
op|')'
newline|'\n'
name|'callable'
op|','
name|'args'
op|','
name|'kwargs'
op|'='
name|'self'
op|'.'
name|'call'
newline|'\n'
comment|"# we have to make a new LoopingCall each time we're started, because"
nl|'\n'
comment|'# an active LoopingCall remains active when serialized. If'
nl|'\n'
comment|"# LoopingCall were a _VolatileDataService, we wouldn't need to do"
nl|'\n'
comment|'# this.'
nl|'\n'
name|'self'
op|'.'
name|'_loop'
op|'='
name|'task'
op|'.'
name|'LoopingCall'
op|'('
name|'callable'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_loop'
op|'.'
name|'start'
op|'('
name|'self'
op|'.'
name|'step'
op|','
name|'now'
op|'='
name|'True'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_failed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_failed
dedent|''
name|'def'
name|'_failed'
op|'('
name|'self'
op|','
name|'why'
op|')'
op|':'
newline|'\n'
comment|"# make a note that the LoopingCall is no longer looping, so we don't"
nl|'\n'
comment|'# try to shut it down a second time in stopService. I think this'
nl|'\n'
comment|'# should be in LoopingCall. -warner'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_loop'
op|'.'
name|'running'
op|'='
name|'False'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'why'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopService
dedent|''
name|'def'
name|'stopService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_loop'
op|'.'
name|'running'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_loop'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'service'
op|'.'
name|'Service'
op|'.'
name|'stopService'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CooperatorService
dedent|''
dedent|''
name|'class'
name|'CooperatorService'
op|'('
name|'service'
op|'.'
name|'Service'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Simple L{service.IService} which starts and stops a L{twisted.internet.task.Cooperator}.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'coop'
op|'='
name|'task'
op|'.'
name|'Cooperator'
op|'('
name|'started'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|coiterate
dedent|''
name|'def'
name|'coiterate'
op|'('
name|'self'
op|','
name|'iterator'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'coop'
op|'.'
name|'coiterate'
op|'('
name|'iterator'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|startService
dedent|''
name|'def'
name|'startService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'coop'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stopService
dedent|''
name|'def'
name|'stopService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'coop'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
name|'__all__'
op|'='
op|'('
op|'['
string|"'TimerService'"
op|','
string|"'CooperatorService'"
op|']'
op|'+'
nl|'\n'
op|'['
name|'tran'
op|'+'
name|'side'
nl|'\n'
name|'for'
name|'tran'
name|'in'
string|"'Generic TCP UNIX SSL UDP UNIXDatagram Multicast'"
op|'.'
name|'split'
op|'('
op|')'
nl|'\n'
name|'for'
name|'side'
name|'in'
string|"'Server Client'"
op|'.'
name|'split'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
endmarker|''
end_unit

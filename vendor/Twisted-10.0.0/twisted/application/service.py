begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nService architecture for Twisted.\n\nServices are arranged in a hierarchy. At the leafs of the hierarchy,\nthe services which actually interact with the outside world are started.\nServices can be named or anonymous -- usually, they will be named if\nthere is need to access them through the hierarchy (from a parent or\na sibling).\n\nMaintainer: Moshe Zadka\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'Interface'
op|','
name|'Attribute'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'reflect'
name|'import'
name|'namedAny'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'components'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'persisted'
name|'import'
name|'sob'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'plugin'
name|'import'
name|'IPlugin'
newline|'\n'
nl|'\n'
DECL|class|IServiceMaker
name|'class'
name|'IServiceMaker'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An object which can be used to construct services in a flexible\n    way.\n\n    This interface should most often be implemented along with\n    L{twisted.plugin.IPlugin}, and will most often be used by the\n    \'twistd\' command.\n    """'
newline|'\n'
DECL|variable|tapname
name|'tapname'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"A short string naming this Twisted plugin, for example \'web\' or "'
nl|'\n'
string|'"\'pencil\'. This name will be used as the subcommand of \'twistd\'."'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|description
name|'description'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"A brief summary of the features provided by this "'
nl|'\n'
string|'"Twisted application plugin."'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|options
name|'options'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"A C{twisted.python.usage.Options} subclass defining the"'
nl|'\n'
string|'"configuration options for this application."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeService
name|'def'
name|'makeService'
op|'('
name|'options'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create and return an object providing\n        L{twisted.application.service.IService}.\n\n        @param options: A mapping (typically a C{dict} or\n        C{twisted.python.usage.Options} instance) of configuration\n        options to desired configuration values.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServiceMaker
dedent|''
dedent|''
name|'class'
name|'ServiceMaker'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Utility class to simplify the definition of L{IServiceMaker} plugins.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IPlugin'
op|','
name|'IServiceMaker'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'module'
op|','
name|'description'
op|','
name|'tapname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'module'
op|'='
name|'module'
newline|'\n'
name|'self'
op|'.'
name|'description'
op|'='
name|'description'
newline|'\n'
name|'self'
op|'.'
name|'tapname'
op|'='
name|'tapname'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|options
dedent|''
name|'def'
name|'options'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|get
indent|'        '
name|'def'
name|'get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'namedAny'
op|'('
name|'self'
op|'.'
name|'module'
op|')'
op|'.'
name|'Options'
newline|'\n'
dedent|''
name|'return'
name|'get'
op|','
newline|'\n'
DECL|variable|options
dedent|''
name|'options'
op|'='
name|'property'
op|'('
op|'*'
name|'options'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeService
name|'def'
name|'makeService'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|get
indent|'        '
name|'def'
name|'get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'namedAny'
op|'('
name|'self'
op|'.'
name|'module'
op|')'
op|'.'
name|'makeService'
newline|'\n'
dedent|''
name|'return'
name|'get'
op|','
newline|'\n'
DECL|variable|makeService
dedent|''
name|'makeService'
op|'='
name|'property'
op|'('
op|'*'
name|'makeService'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IService
dedent|''
name|'class'
name|'IService'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A service.\n\n    Run start-up and shut-down code at the appropriate times.\n\n    @type name:            C{string}\n    @ivar name:            The name of the service (or None)\n    @type running:         C{boolean}\n    @ivar running:         Whether the service is running.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setName
name|'def'
name|'setName'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the name of the service.\n\n        @type name: C{str}\n        @raise RuntimeError: Raised if the service already has a parent.\n        """'
newline|'\n'
nl|'\n'
DECL|member|setServiceParent
dedent|''
name|'def'
name|'setServiceParent'
op|'('
name|'parent'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the parent of the service.\n\n        @type parent: L{IServiceCollection}\n        @raise RuntimeError: Raised if the service already has a parent\n            or if the service has a name and the parent already has a child\n            by that name.\n        """'
newline|'\n'
nl|'\n'
DECL|member|disownServiceParent
dedent|''
name|'def'
name|'disownServiceParent'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Use this API to remove an L{IService} from an L{IServiceCollection}.\n\n        This method is used symmetrically with L{setServiceParent} in that it\n        sets the C{parent} attribute on the child.\n\n        @rtype: L{Deferred}\n        @return: a L{Deferred} which is triggered when the service has\n            finished shutting down. If shutting down is immediate,\n            a value can be returned (usually, C{None}).\n        """'
newline|'\n'
nl|'\n'
DECL|member|startService
dedent|''
name|'def'
name|'startService'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Start the service.\n        """'
newline|'\n'
nl|'\n'
DECL|member|stopService
dedent|''
name|'def'
name|'stopService'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop the service.\n\n        @rtype: L{Deferred}\n        @return: a L{Deferred} which is triggered when the service has\n            finished shutting down. If shutting down is immediate, a\n            value can be returned (usually, C{None}).\n        """'
newline|'\n'
nl|'\n'
DECL|member|privilegedStartService
dedent|''
name|'def'
name|'privilegedStartService'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Do preparation work for starting the service.\n\n        Here things which should be done before changing directory,\n        root or shedding privileges are done.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Service
dedent|''
dedent|''
name|'class'
name|'Service'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Base class for services.\n\n    Most services should inherit from this class. It handles the\n    book-keeping reponsibilities of starting and stopping, as well\n    as not serializing this book-keeping information.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IService'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|running
name|'running'
op|'='
number|'0'
newline|'\n'
DECL|variable|name
name|'name'
op|'='
name|'None'
newline|'\n'
DECL|variable|parent
name|'parent'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__getstate__
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dict'
op|'='
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'if'
name|'dict'
op|'.'
name|'has_key'
op|'('
string|'"running"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'dict'
op|'['
string|"'running'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'dict'
newline|'\n'
nl|'\n'
DECL|member|setName
dedent|''
name|'def'
name|'setName'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'parent'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"cannot change name when parent exists"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
nl|'\n'
DECL|member|setServiceParent
dedent|''
name|'def'
name|'setServiceParent'
op|'('
name|'self'
op|','
name|'parent'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'parent'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'disownServiceParent'
op|'('
op|')'
newline|'\n'
dedent|''
name|'parent'
op|'='
name|'IServiceCollection'
op|'('
name|'parent'
op|','
name|'parent'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parent'
op|'='
name|'parent'
newline|'\n'
name|'self'
op|'.'
name|'parent'
op|'.'
name|'addService'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|disownServiceParent
dedent|''
name|'def'
name|'disownServiceParent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'parent'
op|'.'
name|'removeService'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parent'
op|'='
name|'None'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|privilegedStartService
dedent|''
name|'def'
name|'privilegedStartService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|startService
dedent|''
name|'def'
name|'startService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'running'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|stopService
dedent|''
name|'def'
name|'stopService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'running'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IServiceCollection
dedent|''
dedent|''
name|'class'
name|'IServiceCollection'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Collection of services.\n\n    Contain several services, and manage their start-up/shut-down.\n    Services can be accessed by name if they have a name, and it\n    is always possible to iterate over them.\n    """'
newline|'\n'
nl|'\n'
DECL|member|getServiceNamed
name|'def'
name|'getServiceNamed'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the child service with a given name.\n\n        @type name: C{str}\n        @rtype: L{IService}\n        @raise KeyError: Raised if the service has no child with the\n            given name.\n        """'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get an iterator over all child services.\n        """'
newline|'\n'
nl|'\n'
DECL|member|addService
dedent|''
name|'def'
name|'addService'
op|'('
name|'service'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add a child service.\n\n        @type service: L{IService}\n        @raise RuntimeError: Raised if the service has a child with\n            the given name.\n        """'
newline|'\n'
nl|'\n'
DECL|member|removeService
dedent|''
name|'def'
name|'removeService'
op|'('
name|'service'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove a child service.\n\n        Only implementations of L{IService.disownServiceParent} should\n        use this method.\n\n        @type service: L{IService}\n        @raise ValueError: Raised if the given service is not a child.\n        @rtype: L{Deferred}\n        @return: a L{Deferred} which is triggered when the service has\n            finished shutting down. If shutting down is immediate, a\n            value can be returned (usually, C{None}).\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MultiService
dedent|''
dedent|''
name|'class'
name|'MultiService'
op|'('
name|'Service'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Straightforward Service Container.\n\n    Hold a collection of services, and manage them in a simplistic\n    way. No service will wait for another, but this object itself\n    will not finish shutting down until all of its child services\n    will finish.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IServiceCollection'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'services'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'namedServices'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'parent'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|privilegedStartService
dedent|''
name|'def'
name|'privilegedStartService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Service'
op|'.'
name|'privilegedStartService'
op|'('
name|'self'
op|')'
newline|'\n'
name|'for'
name|'service'
name|'in'
name|'self'
op|':'
newline|'\n'
indent|'            '
name|'service'
op|'.'
name|'privilegedStartService'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|startService
dedent|''
dedent|''
name|'def'
name|'startService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Service'
op|'.'
name|'startService'
op|'('
name|'self'
op|')'
newline|'\n'
name|'for'
name|'service'
name|'in'
name|'self'
op|':'
newline|'\n'
indent|'            '
name|'service'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopService
dedent|''
dedent|''
name|'def'
name|'stopService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Service'
op|'.'
name|'stopService'
op|'('
name|'self'
op|')'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'services'
op|'='
name|'list'
op|'('
name|'self'
op|')'
newline|'\n'
name|'services'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
name|'for'
name|'service'
name|'in'
name|'services'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'.'
name|'append'
op|'('
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'service'
op|'.'
name|'stopService'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'l'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getServiceNamed
dedent|''
name|'def'
name|'getServiceNamed'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'namedServices'
op|'['
name|'name'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'iter'
op|'('
name|'self'
op|'.'
name|'services'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addService
dedent|''
name|'def'
name|'addService'
op|'('
name|'self'
op|','
name|'service'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'service'
op|'.'
name|'name'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'namedServices'
op|'.'
name|'has_key'
op|'('
name|'service'
op|'.'
name|'name'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RuntimeError'
op|'('
string|'"cannot have two services with same name"'
nl|'\n'
string|'" \'%s\'"'
op|'%'
name|'service'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'namedServices'
op|'['
name|'service'
op|'.'
name|'name'
op|']'
op|'='
name|'service'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'services'
op|'.'
name|'append'
op|'('
name|'service'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'running'
op|':'
newline|'\n'
comment|'# It may be too late for that, but we will do our best'
nl|'\n'
indent|'            '
name|'service'
op|'.'
name|'privilegedStartService'
op|'('
op|')'
newline|'\n'
name|'service'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|removeService
dedent|''
dedent|''
name|'def'
name|'removeService'
op|'('
name|'self'
op|','
name|'service'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'service'
op|'.'
name|'name'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'namedServices'
op|'['
name|'service'
op|'.'
name|'name'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'services'
op|'.'
name|'remove'
op|'('
name|'service'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'running'
op|':'
newline|'\n'
comment|'# Returning this so as not to lose information from the'
nl|'\n'
comment|'# MultiService.stopService deferred.'
nl|'\n'
indent|'            '
name|'return'
name|'service'
op|'.'
name|'stopService'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IProcess
dedent|''
dedent|''
dedent|''
name|'class'
name|'IProcess'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Process running parameters.\n\n    Represents parameters for how processes should be run.\n\n    @ivar processName: the name the process should have in ps (or C{None})\n    @type processName: C{str}\n    @ivar uid: the user-id the process should run under.\n    @type uid: C{int}\n    @ivar gid: the group-id the process should run under.\n    @type gid: C{int}\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Process
dedent|''
name|'class'
name|'Process'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Process running parameters.\n\n    Sets up uid/gid in the constructor, and has a default\n    of C{None} as C{processName}.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IProcess'
op|')'
newline|'\n'
DECL|variable|processName
name|'processName'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'uid'
op|'='
name|'None'
op|','
name|'gid'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set uid and gid.\n\n        @param uid: The user ID as whom to execute the process.  If\n            this is C{None}, no attempt will be made to change the UID.\n\n        @param gid: The group ID as whom to execute the process.  If\n            this is C{None}, no attempt will be made to change the GID.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'uid'
op|'='
name|'uid'
newline|'\n'
name|'self'
op|'.'
name|'gid'
op|'='
name|'gid'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|Application
dedent|''
dedent|''
name|'def'
name|'Application'
op|'('
name|'name'
op|','
name|'uid'
op|'='
name|'None'
op|','
name|'gid'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return a compound class.\n\n    Return an object supporting the L{IService}, L{IServiceCollection},\n    L{IProcess} and L{sob.IPersistable} interfaces, with the given\n    parameters. Always access the return value by explicit casting to\n    one of the interfaces.\n    """'
newline|'\n'
name|'ret'
op|'='
name|'components'
op|'.'
name|'Componentized'
op|'('
op|')'
newline|'\n'
name|'for'
name|'comp'
name|'in'
op|'('
name|'MultiService'
op|'('
op|')'
op|','
name|'sob'
op|'.'
name|'Persistent'
op|'('
name|'ret'
op|','
name|'name'
op|')'
op|','
name|'Process'
op|'('
name|'uid'
op|','
name|'gid'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ret'
op|'.'
name|'addComponent'
op|'('
name|'comp'
op|','
name|'ignoreClass'
op|'='
number|'1'
op|')'
newline|'\n'
dedent|''
name|'IService'
op|'('
name|'ret'
op|')'
op|'.'
name|'setName'
op|'('
name|'name'
op|')'
newline|'\n'
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|loadApplication
dedent|''
name|'def'
name|'loadApplication'
op|'('
name|'filename'
op|','
name|'kind'
op|','
name|'passphrase'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Load Application from a given file.\n\n    The serialization format it was saved in should be given as\n    C{kind}, and is one of C{pickle}, C{source}, C{xml} or C{python}. If\n    C{passphrase} is given, the application was encrypted with the\n    given passphrase.\n\n    @type filename: C{str}\n    @type kind: C{str}\n    @type passphrase: C{str}\n    """'
newline|'\n'
name|'if'
name|'kind'
op|'=='
string|"'python'"
op|':'
newline|'\n'
indent|'        '
name|'application'
op|'='
name|'sob'
op|'.'
name|'loadValueFromFile'
op|'('
name|'filename'
op|','
string|"'application'"
op|','
name|'passphrase'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'application'
op|'='
name|'sob'
op|'.'
name|'load'
op|'('
name|'filename'
op|','
name|'kind'
op|','
name|'passphrase'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
name|'__all__'
op|'='
op|'['
string|"'IServiceMaker'"
op|','
string|"'IService'"
op|','
string|"'Service'"
op|','
nl|'\n'
string|"'IServiceCollection'"
op|','
string|"'MultiService'"
op|','
nl|'\n'
string|"'IProcess'"
op|','
string|"'Process'"
op|','
string|"'Application'"
op|','
string|"'loadApplication'"
op|']'
newline|'\n'
endmarker|''
end_unit

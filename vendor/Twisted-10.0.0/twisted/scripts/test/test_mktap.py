begin_unit
comment|'# Copyright (c) 2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.scripts.mktap}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pwd'
op|','
name|'grp'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|pwd
indent|'    '
name|'pwd'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'scripts'
op|'.'
name|'mktap'
name|'import'
name|'run'
op|','
name|'getid'
op|','
name|'loadPlugins'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'application'
op|'.'
name|'service'
name|'import'
name|'IProcess'
op|','
name|'loadApplication'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'test_twistd'
name|'import'
name|'patchUserDatabase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'plugins'
op|'.'
name|'twisted_ftp'
name|'import'
name|'TwistedFTP'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RunTests
name|'class'
name|'RunTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{twisted.scripts.mktap.run}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Save the original value of L{sys.argv} so that tests can change it\n        as necessary.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'argv'
op|'='
name|'sys'
op|'.'
name|'argv'
op|'['
op|':'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Restore the original value of L{sys.argv}.\n        """'
newline|'\n'
name|'sys'
op|'.'
name|'argv'
op|'['
op|':'
op|']'
op|'='
name|'self'
op|'.'
name|'argv'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_saveConfiguredIDTest
dedent|''
name|'def'
name|'_saveConfiguredIDTest'
op|'('
name|'self'
op|','
name|'argv'
op|','
name|'uid'
op|','
name|'gid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that when L{run} is invoked and L{sys.argv} has the given\n        value, the resulting application has the specified UID and GID.\n\n        @type argv: C{list} of C{str}\n        @param argv: The value to which to set L{sys.argv} before calling L{run}.\n\n        @type uid: C{int}\n        @param uid: The expected value for the resulting application\'s\n            L{IProcess.uid}.\n\n        @type gid: C{int}\n        @param gid: The expected value for the resulting application\'s\n            L{IProcess.gid}.\n        """'
newline|'\n'
name|'sys'
op|'.'
name|'argv'
op|'='
name|'argv'
newline|'\n'
name|'run'
op|'('
op|')'
newline|'\n'
name|'app'
op|'='
name|'loadApplication'
op|'('
string|'"ftp.tap"'
op|','
string|'"pickle"'
op|','
name|'None'
op|')'
newline|'\n'
name|'process'
op|'='
name|'IProcess'
op|'('
name|'app'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'process'
op|'.'
name|'uid'
op|','
name|'uid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'process'
op|'.'
name|'gid'
op|','
name|'gid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getNumericID
dedent|''
name|'def'
name|'test_getNumericID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{run} extracts numeric UID and GID information from the command\n        line and persists it with the application object.\n        """'
newline|'\n'
name|'uid'
op|'='
number|'1234'
newline|'\n'
name|'gid'
op|'='
number|'4321'
newline|'\n'
name|'self'
op|'.'
name|'_saveConfiguredIDTest'
op|'('
nl|'\n'
op|'['
string|'"mktap"'
op|','
string|'"--uid"'
op|','
name|'str'
op|'('
name|'uid'
op|')'
op|','
string|'"--gid"'
op|','
name|'str'
op|'('
name|'gid'
op|')'
op|','
string|'"ftp"'
op|']'
op|','
nl|'\n'
name|'uid'
op|','
name|'gid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getNameID
dedent|''
name|'def'
name|'test_getNameID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{run} extracts name UID and GID information from the command\n        line and persists it with the application object.\n        """'
newline|'\n'
name|'user'
op|'='
string|'"foo"'
newline|'\n'
name|'uid'
op|'='
number|'1234'
newline|'\n'
name|'group'
op|'='
string|'"bar"'
newline|'\n'
name|'gid'
op|'='
number|'4321'
newline|'\n'
name|'patchUserDatabase'
op|'('
name|'self'
op|'.'
name|'patch'
op|','
name|'user'
op|','
name|'uid'
op|','
name|'group'
op|','
name|'gid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_saveConfiguredIDTest'
op|'('
nl|'\n'
op|'['
string|'"mktap"'
op|','
string|'"--uid"'
op|','
name|'user'
op|','
string|'"--gid"'
op|','
name|'group'
op|','
string|'"ftp"'
op|']'
op|','
nl|'\n'
name|'uid'
op|','
name|'gid'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'pwd'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'test_getNameID'
op|'.'
name|'skip'
op|'='
op|'('
nl|'\n'
string|'"Username/UID Group name/GID translation requires pwd and grp "'
nl|'\n'
string|'"modules."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|HelperTests
dedent|''
dedent|''
name|'class'
name|'HelperTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for miscellaneous utility functions related to mktap.\n    """'
newline|'\n'
DECL|member|test_getid
name|'def'
name|'test_getid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{getid} returns a two-tuple of integers giving the numeric values of\n        the strings it is passed.\n        """'
newline|'\n'
name|'uid'
op|'='
number|'1234'
newline|'\n'
name|'gid'
op|'='
number|'4321'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'getid'
op|'('
name|'str'
op|'('
name|'uid'
op|')'
op|','
name|'str'
op|'('
name|'gid'
op|')'
op|')'
op|','
op|'('
name|'uid'
op|','
name|'gid'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_loadPlugins
dedent|''
name|'def'
name|'test_loadPlugins'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{loadPlugins} returns a C{dict} mapping tap names to tap plugins.\n        """'
newline|'\n'
name|'plugins'
op|'='
name|'loadPlugins'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'plugins'
op|','
string|'"There should be at least one plugin."'
op|')'
newline|'\n'
comment|'# Make sure the mapping is set up properly.'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'plugins'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'k'
op|','
name|'v'
op|'.'
name|'tapname'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure one of the always-available builtin plugins is there. '
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'plugins'
op|'['
string|"'ftp'"
op|']'
op|','
name|'TwistedFTP'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.trial.test.test_script -*-'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'os'
op|','
name|'random'
op|','
name|'gc'
op|','
name|'time'
op|','
name|'warnings'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'application'
name|'import'
name|'app'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'usage'
op|','
name|'reflect'
op|','
name|'failure'
newline|'\n'
name|'from'
name|'twisted'
name|'import'
name|'plugin'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'spewer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'runner'
op|','
name|'itrial'
op|','
name|'reporter'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Yea, this is stupid.  Leave it for for command-line compatibility for a'
nl|'\n'
comment|'# while, though.'
nl|'\n'
DECL|variable|TBFORMAT_MAP
name|'TBFORMAT_MAP'
op|'='
op|'{'
nl|'\n'
string|"'plain'"
op|':'
string|"'default'"
op|','
nl|'\n'
string|"'default'"
op|':'
string|"'default'"
op|','
nl|'\n'
string|"'emacs'"
op|':'
string|"'brief'"
op|','
nl|'\n'
string|"'brief'"
op|':'
string|"'brief'"
op|','
nl|'\n'
string|"'cgitb'"
op|':'
string|"'verbose'"
op|','
nl|'\n'
string|"'verbose'"
op|':'
string|"'verbose'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_parseLocalVariables
name|'def'
name|'_parseLocalVariables'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Accepts a single line in Emacs local variable declaration format and\n    returns a dict of all the variables {name: value}.\n    Raises ValueError if \'line\' is in the wrong format.\n\n    See http://www.gnu.org/software/emacs/manual/html_node/File-Variables.html\n    """'
newline|'\n'
name|'paren'
op|'='
string|"'-*-'"
newline|'\n'
name|'start'
op|'='
name|'line'
op|'.'
name|'find'
op|'('
name|'paren'
op|')'
op|'+'
name|'len'
op|'('
name|'paren'
op|')'
newline|'\n'
name|'end'
op|'='
name|'line'
op|'.'
name|'rfind'
op|'('
name|'paren'
op|')'
newline|'\n'
name|'if'
name|'start'
op|'=='
op|'-'
number|'1'
name|'or'
name|'end'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|'"%r not a valid local variable declaration"'
op|'%'
op|'('
name|'line'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'items'
op|'='
name|'line'
op|'['
name|'start'
op|':'
name|'end'
op|']'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
newline|'\n'
name|'localVars'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'items'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'item'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'split'
op|'='
name|'item'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'split'
op|')'
op|'!='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"%r contains invalid declaration %r"'
nl|'\n'
op|'%'
op|'('
name|'line'
op|','
name|'item'
op|')'
op|')'
newline|'\n'
dedent|''
name|'localVars'
op|'['
name|'split'
op|'['
number|'0'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
op|'='
name|'split'
op|'['
number|'1'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'localVars'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|loadLocalVariables
dedent|''
name|'def'
name|'loadLocalVariables'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Accepts a filename and attempts to load the Emacs variable declarations\n    from that file, simulating what Emacs does.\n\n    See http://www.gnu.org/software/emacs/manual/html_node/File-Variables.html\n    """'
newline|'\n'
name|'f'
op|'='
name|'file'
op|'('
name|'filename'
op|','
string|'"r"'
op|')'
newline|'\n'
name|'lines'
op|'='
op|'['
name|'f'
op|'.'
name|'readline'
op|'('
op|')'
op|','
name|'f'
op|'.'
name|'readline'
op|'('
op|')'
op|']'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'_parseLocalVariables'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|getTestModules
dedent|''
name|'def'
name|'getTestModules'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'testCaseVar'
op|'='
name|'loadLocalVariables'
op|'('
name|'filename'
op|')'
op|'.'
name|'get'
op|'('
string|"'test-case-name'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'testCaseVar'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'return'
name|'testCaseVar'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|isTestFile
dedent|''
name|'def'
name|'isTestFile'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns true if \'filename\' looks like a file containing unit tests.\n    False otherwise.  Doesn\'t care whether filename exists.\n    """'
newline|'\n'
name|'basename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'return'
op|'('
name|'basename'
op|'.'
name|'startswith'
op|'('
string|"'test_'"
op|')'
nl|'\n'
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'basename'
op|')'
op|'['
number|'1'
op|']'
op|'=='
op|'('
string|"'.py'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_zshReporterAction
dedent|''
name|'def'
name|'_zshReporterAction'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|'"(%s)"'
op|'%'
op|'('
string|'" "'
op|'.'
name|'join'
op|'('
op|'['
name|'p'
op|'.'
name|'longOpt'
name|'for'
name|'p'
name|'in'
name|'plugin'
op|'.'
name|'getPlugins'
op|'('
name|'itrial'
op|'.'
name|'IReporter'
op|')'
op|']'
op|')'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|class|Options
dedent|''
name|'class'
name|'Options'
op|'('
name|'usage'
op|'.'
name|'Options'
op|','
name|'app'
op|'.'
name|'ReactorSelectionMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'synopsis'
op|'='
string|'"""%s [options] [[file|package|module|TestCase|testmethod]...]\n    """'
op|'%'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|')'
op|','
op|')'
newline|'\n'
DECL|variable|longdesc
name|'longdesc'
op|'='
op|'('
string|'"trial loads and executes a suite of unit tests, obtained "'
nl|'\n'
string|'"from modules, packages and files listed on the command line."'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|optFlags
name|'optFlags'
op|'='
op|'['
op|'['
string|'"help"'
op|','
string|'"h"'
op|']'
op|','
nl|'\n'
op|'['
string|'"rterrors"'
op|','
string|'"e"'
op|','
string|'"realtime errors, print out tracebacks as "'
nl|'\n'
string|'"soon as they occur"'
op|']'
op|','
nl|'\n'
op|'['
string|'"debug"'
op|','
string|'"b"'
op|','
string|'"Run tests in the Python debugger. Will load "'
nl|'\n'
string|'"\'.pdbrc\' from current directory if it exists."'
op|']'
op|','
nl|'\n'
op|'['
string|'"debug-stacktraces"'
op|','
string|'"B"'
op|','
string|'"Report Deferred creation and "'
nl|'\n'
string|'"callback stack traces"'
op|']'
op|','
nl|'\n'
op|'['
string|'"nopm"'
op|','
name|'None'
op|','
string|'"don\'t automatically jump into debugger for "'
nl|'\n'
string|'"postmorteming of exceptions"'
op|']'
op|','
nl|'\n'
op|'['
string|'"dry-run"'
op|','
string|"'n'"
op|','
string|'"do everything but run the tests"'
op|']'
op|','
nl|'\n'
op|'['
string|'"force-gc"'
op|','
name|'None'
op|','
string|'"Have Trial run gc.collect() before and "'
nl|'\n'
string|'"after each test case."'
op|']'
op|','
nl|'\n'
op|'['
string|'"profile"'
op|','
name|'None'
op|','
string|'"Run tests under the Python profiler"'
op|']'
op|','
nl|'\n'
op|'['
string|'"unclean-warnings"'
op|','
name|'None'
op|','
nl|'\n'
string|'"Turn dirty reactor errors into warnings"'
op|']'
op|','
nl|'\n'
op|'['
string|'"until-failure"'
op|','
string|'"u"'
op|','
string|'"Repeat test until it fails"'
op|']'
op|','
nl|'\n'
op|'['
string|'"no-recurse"'
op|','
string|'"N"'
op|','
string|'"Don\'t recurse into packages"'
op|']'
op|','
nl|'\n'
op|'['
string|"'help-reporters'"
op|','
name|'None'
op|','
nl|'\n'
string|'"Help on available output plugins (reporters)"'
op|']'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|optParameters
name|'optParameters'
op|'='
op|'['
nl|'\n'
op|'['
string|'"logfile"'
op|','
string|'"l"'
op|','
string|'"test.log"'
op|','
string|'"log file name"'
op|']'
op|','
nl|'\n'
op|'['
string|'"random"'
op|','
string|'"z"'
op|','
name|'None'
op|','
nl|'\n'
string|'"Run tests in random order using the specified seed"'
op|']'
op|','
nl|'\n'
op|'['
string|"'temp-directory'"
op|','
name|'None'
op|','
string|"'_trial_temp'"
op|','
nl|'\n'
string|"'Path to use as working directory for tests.'"
op|']'
op|','
nl|'\n'
op|'['
string|"'reporter'"
op|','
name|'None'
op|','
string|"'verbose'"
op|','
nl|'\n'
string|"'The reporter to use for this test run.  See --help-reporters for '"
nl|'\n'
string|"'more info.'"
op|']'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|zsh_actions
name|'zsh_actions'
op|'='
op|'{'
string|'"tbformat"'
op|':'
string|'"(plain emacs cgitb)"'
op|','
nl|'\n'
string|'"reporter"'
op|':'
name|'_zshReporterAction'
op|'}'
newline|'\n'
DECL|variable|zsh_actionDescr
name|'zsh_actionDescr'
op|'='
op|'{'
string|'"logfile"'
op|':'
string|'"log file name"'
op|','
nl|'\n'
string|'"random"'
op|':'
string|'"random seed"'
op|'}'
newline|'\n'
DECL|variable|zsh_extras
name|'zsh_extras'
op|'='
op|'['
string|'"*:file|module|package|TestCase|testMethod:_files -g \'*.py\'"'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|fallbackReporter
name|'fallbackReporter'
op|'='
name|'reporter'
op|'.'
name|'TreeReporter'
newline|'\n'
DECL|variable|extra
name|'extra'
op|'='
name|'None'
newline|'\n'
DECL|variable|tracer
name|'tracer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'['
string|"'tests'"
op|']'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'usage'
op|'.'
name|'Options'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|opt_coverage
dedent|''
name|'def'
name|'opt_coverage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate coverage information in the _trial_temp/coverage. Requires\n        Python 2.3.3.\n        """'
newline|'\n'
name|'coverdir'
op|'='
string|"'coverage'"
newline|'\n'
name|'print'
string|'"Setting coverage directory to %s."'
op|'%'
op|'('
name|'coverdir'
op|','
op|')'
newline|'\n'
name|'import'
name|'trace'
newline|'\n'
nl|'\n'
comment|'# begin monkey patch ---------------------------'
nl|'\n'
comment|"#   Before Python 2.4, this function asserted that 'filename' had"
nl|'\n'
comment|"#   to end with '.py'  This is wrong for at least two reasons:"
nl|'\n'
comment|'#   1.  We might be wanting to find executable line nos in a script'
nl|'\n'
comment|'#   2.  The implementation should use os.splitext'
nl|'\n'
comment|'#   This monkey patch is the same function as in the stdlib (v2.3)'
nl|'\n'
comment|'#   but with the assertion removed.'
nl|'\n'
DECL|function|find_executable_linenos
name|'def'
name|'find_executable_linenos'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Return dict where keys are line numbers in the line number\n            table.\n            """'
newline|'\n'
comment|"#assert filename.endswith('.py') # YOU BASTARDS"
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'prog'
op|'='
name|'open'
op|'('
name|'filename'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'prog'
op|'='
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'prog'
op|'.'
name|'splitlines'
op|'('
op|')'
op|')'
op|'+'
string|"'\\n'"
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
string|'"Not printing coverage data for %r: %s\\n"'
nl|'\n'
op|'%'
op|'('
name|'filename'
op|','
name|'err'
op|')'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'code'
op|'='
name|'compile'
op|'('
name|'prog'
op|','
name|'filename'
op|','
string|'"exec"'
op|')'
newline|'\n'
name|'strs'
op|'='
name|'trace'
op|'.'
name|'find_strings'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'return'
name|'trace'
op|'.'
name|'find_lines'
op|'('
name|'code'
op|','
name|'strs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'trace'
op|'.'
name|'find_executable_linenos'
op|'='
name|'find_executable_linenos'
newline|'\n'
comment|'# end monkey patch ------------------------------'
nl|'\n'
nl|'\n'
name|'self'
op|'.'
name|'coverdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'['
string|"'temp-directory'"
op|']'
op|','
name|'coverdir'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tracer'
op|'='
name|'trace'
op|'.'
name|'Trace'
op|'('
name|'count'
op|'='
number|'1'
op|','
name|'trace'
op|'='
number|'0'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'settrace'
op|'('
name|'self'
op|'.'
name|'tracer'
op|'.'
name|'globaltrace'
op|')'
newline|'\n'
nl|'\n'
DECL|member|opt_testmodule
dedent|''
name|'def'
name|'opt_testmodule'
op|'('
name|'self'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Filename to grep for test cases (-*- test-case-name)"'
newline|'\n'
comment|'# If the filename passed to this parameter looks like a test module'
nl|'\n'
comment|'# we just add that to the test suite.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# If not, we inspect it for an Emacs buffer local variable called'
nl|'\n'
comment|"# 'test-case-name'.  If that variable is declared, we try to add its"
nl|'\n'
comment|'# value to the test suite as a module.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This parameter allows automated processes (like Buildbot) to pass'
nl|'\n'
comment|'# a list of files to Trial with the general expectation of "these files,'
nl|'\n'
comment|'# whatever they are, will get tested"'
nl|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
string|'"File %r doesn\'t exist\\n"'
op|'%'
op|'('
name|'filename'
op|','
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'if'
name|'isTestFile'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
string|"'tests'"
op|']'
op|'.'
name|'add'
op|'('
name|'filename'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
string|"'tests'"
op|']'
op|'.'
name|'update'
op|'('
name|'getTestModules'
op|'('
name|'filename'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|opt_spew
dedent|''
dedent|''
name|'def'
name|'opt_spew'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Print an insanely verbose log of everything that happens.  Useful\n        when debugging freezes or locks in complex code."""'
newline|'\n'
name|'sys'
op|'.'
name|'settrace'
op|'('
name|'spewer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|opt_help_reporters
dedent|''
name|'def'
name|'opt_help_reporters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'synopsis'
op|'='
op|'('
string|'"Trial\'s output can be customized using plugins called "'
nl|'\n'
string|'"Reporters. You can\\nselect any of the following "'
nl|'\n'
string|'"reporters using --reporter=<foo>\\n"'
op|')'
newline|'\n'
name|'print'
name|'synopsis'
newline|'\n'
name|'for'
name|'p'
name|'in'
name|'plugin'
op|'.'
name|'getPlugins'
op|'('
name|'itrial'
op|'.'
name|'IReporter'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|"'   '"
op|','
name|'p'
op|'.'
name|'longOpt'
op|','
string|"'\\t'"
op|','
name|'p'
op|'.'
name|'description'
newline|'\n'
dedent|''
name|'print'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|opt_disablegc
dedent|''
name|'def'
name|'opt_disablegc'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disable the garbage collector"""'
newline|'\n'
name|'gc'
op|'.'
name|'disable'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|opt_tbformat
dedent|''
name|'def'
name|'opt_tbformat'
op|'('
name|'self'
op|','
name|'opt'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Specify the format to display tracebacks with. Valid formats are\n        \'plain\', \'emacs\', and \'cgitb\' which uses the nicely verbose stdlib\n        cgitb.text function"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
string|"'tbformat'"
op|']'
op|'='
name|'TBFORMAT_MAP'
op|'['
name|'opt'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'usage'
op|'.'
name|'UsageError'
op|'('
nl|'\n'
string|'"tbformat must be \'plain\', \'emacs\', or \'cgitb\'."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|opt_extra
dedent|''
dedent|''
name|'def'
name|'opt_extra'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add an extra argument.  (This is a hack necessary for interfacing with\n        emacs\'s `gud\'.)\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'extra'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'extra'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'extra'
op|'.'
name|'append'
op|'('
name|'arg'
op|')'
newline|'\n'
DECL|variable|opt_x
dedent|''
name|'opt_x'
op|'='
name|'opt_extra'
newline|'\n'
nl|'\n'
DECL|member|opt_recursionlimit
name|'def'
name|'opt_recursionlimit'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""see sys.setrecursionlimit()"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'setrecursionlimit'
op|'('
name|'int'
op|'('
name|'arg'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'ValueError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'usage'
op|'.'
name|'UsageError'
op|'('
nl|'\n'
string|'"argument to recursionlimit must be an integer"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|opt_random
dedent|''
dedent|''
name|'def'
name|'opt_random'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
string|"'random'"
op|']'
op|'='
name|'long'
op|'('
name|'option'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'usage'
op|'.'
name|'UsageError'
op|'('
nl|'\n'
string|'"Argument to --random must be a positive integer"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'['
string|"'random'"
op|']'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'usage'
op|'.'
name|'UsageError'
op|'('
nl|'\n'
string|'"Argument to --random must be a positive integer"'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'['
string|"'random'"
op|']'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'['
string|"'random'"
op|']'
op|'='
name|'long'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'*'
number|'100'
op|')'
newline|'\n'
nl|'\n'
DECL|member|opt_without_module
dedent|''
dedent|''
dedent|''
name|'def'
name|'opt_without_module'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fake the lack of the specified modules, separated with commas.\n        """'
newline|'\n'
name|'for'
name|'module'
name|'in'
name|'option'
op|'.'
name|'split'
op|'('
string|'","'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'module'
name|'in'
name|'sys'
op|'.'
name|'modules'
op|':'
newline|'\n'
indent|'                '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Module \'%s\' already imported, "'
nl|'\n'
string|'"disabling anyway."'
op|'%'
op|'('
name|'module'
op|','
op|')'
op|','
nl|'\n'
name|'category'
op|'='
name|'RuntimeWarning'
op|')'
newline|'\n'
dedent|''
name|'sys'
op|'.'
name|'modules'
op|'['
name|'module'
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|parseArgs
dedent|''
dedent|''
name|'def'
name|'parseArgs'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'['
string|"'tests'"
op|']'
op|'.'
name|'update'
op|'('
name|'args'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'extra'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
string|"'tests'"
op|']'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'extra'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_loadReporterByName
dedent|''
dedent|''
name|'def'
name|'_loadReporterByName'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'p'
name|'in'
name|'plugin'
op|'.'
name|'getPlugins'
op|'('
name|'itrial'
op|'.'
name|'IReporter'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'qual'
op|'='
string|'"%s.%s"'
op|'%'
op|'('
name|'p'
op|'.'
name|'module'
op|','
name|'p'
op|'.'
name|'klass'
op|')'
newline|'\n'
name|'if'
name|'p'
op|'.'
name|'longOpt'
op|'=='
name|'name'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'reflect'
op|'.'
name|'namedAny'
op|'('
name|'qual'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'usage'
op|'.'
name|'UsageError'
op|'('
string|'"Only pass names of Reporter plugins to "'
nl|'\n'
string|'"--reporter. See --help-reporters for "'
nl|'\n'
string|'"more info."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|postOptions
dedent|''
name|'def'
name|'postOptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# Only load reporters now, as opposed to any earlier, to avoid letting'
nl|'\n'
comment|'# application-defined plugins muck up reactor selecting by importing'
nl|'\n'
comment|'# t.i.reactor and causing the default to be installed.'
nl|'\n'
indent|'        '
name|'self'
op|'['
string|"'reporter'"
op|']'
op|'='
name|'self'
op|'.'
name|'_loadReporterByName'
op|'('
name|'self'
op|'['
string|"'reporter'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
string|"'tbformat'"
name|'not'
name|'in'
name|'self'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
string|"'tbformat'"
op|']'
op|'='
string|"'default'"
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'['
string|"'nopm'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'['
string|"'debug'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'usage'
op|'.'
name|'UsageError'
op|'('
string|'"you must specify --debug when using "'
nl|'\n'
string|'"--nopm "'
op|')'
newline|'\n'
dedent|''
name|'failure'
op|'.'
name|'DO_POST_MORTEM'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_initialDebugSetup
dedent|''
dedent|''
dedent|''
name|'def'
name|'_initialDebugSetup'
op|'('
name|'config'
op|')'
op|':'
newline|'\n'
comment|'# do this part of debug setup first for easy debugging of import failures'
nl|'\n'
indent|'    '
name|'if'
name|'config'
op|'['
string|"'debug'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'failure'
op|'.'
name|'startDebugMode'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'config'
op|'['
string|"'debug'"
op|']'
name|'or'
name|'config'
op|'['
string|"'debug-stacktraces'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'defer'
op|'.'
name|'setDebugging'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_getSuite
dedent|''
dedent|''
name|'def'
name|'_getSuite'
op|'('
name|'config'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'loader'
op|'='
name|'_getLoader'
op|'('
name|'config'
op|')'
newline|'\n'
name|'recurse'
op|'='
name|'not'
name|'config'
op|'['
string|"'no-recurse'"
op|']'
newline|'\n'
name|'return'
name|'loader'
op|'.'
name|'loadByNames'
op|'('
name|'config'
op|'['
string|"'tests'"
op|']'
op|','
name|'recurse'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_getLoader
dedent|''
name|'def'
name|'_getLoader'
op|'('
name|'config'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'loader'
op|'='
name|'runner'
op|'.'
name|'TestLoader'
op|'('
op|')'
newline|'\n'
name|'if'
name|'config'
op|'['
string|"'random'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'randomer'
op|'='
name|'random'
op|'.'
name|'Random'
op|'('
op|')'
newline|'\n'
name|'randomer'
op|'.'
name|'seed'
op|'('
name|'config'
op|'['
string|"'random'"
op|']'
op|')'
newline|'\n'
name|'loader'
op|'.'
name|'sorter'
op|'='
name|'lambda'
name|'x'
op|':'
name|'randomer'
op|'.'
name|'random'
op|'('
op|')'
newline|'\n'
name|'print'
string|"'Running tests shuffled with seed %d\\n'"
op|'%'
name|'config'
op|'['
string|"'random'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'config'
op|'['
string|"'until-failure'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'loader'
op|'.'
name|'suiteFactory'
op|'='
name|'runner'
op|'.'
name|'DestructiveTestSuite'
newline|'\n'
dedent|''
name|'return'
name|'loader'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_makeRunner
dedent|''
name|'def'
name|'_makeRunner'
op|'('
name|'config'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'mode'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'config'
op|'['
string|"'debug'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'mode'
op|'='
name|'runner'
op|'.'
name|'TrialRunner'
op|'.'
name|'DEBUG'
newline|'\n'
dedent|''
name|'if'
name|'config'
op|'['
string|"'dry-run'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'mode'
op|'='
name|'runner'
op|'.'
name|'TrialRunner'
op|'.'
name|'DRY_RUN'
newline|'\n'
dedent|''
name|'return'
name|'runner'
op|'.'
name|'TrialRunner'
op|'('
name|'config'
op|'['
string|"'reporter'"
op|']'
op|','
nl|'\n'
name|'mode'
op|'='
name|'mode'
op|','
nl|'\n'
name|'profile'
op|'='
name|'config'
op|'['
string|"'profile'"
op|']'
op|','
nl|'\n'
name|'logfile'
op|'='
name|'config'
op|'['
string|"'logfile'"
op|']'
op|','
nl|'\n'
name|'tracebackFormat'
op|'='
name|'config'
op|'['
string|"'tbformat'"
op|']'
op|','
nl|'\n'
name|'realTimeErrors'
op|'='
name|'config'
op|'['
string|"'rterrors'"
op|']'
op|','
nl|'\n'
name|'uncleanWarnings'
op|'='
name|'config'
op|'['
string|"'unclean-warnings'"
op|']'
op|','
nl|'\n'
name|'workingDirectory'
op|'='
name|'config'
op|'['
string|"'temp-directory'"
op|']'
op|','
nl|'\n'
name|'forceGarbageCollection'
op|'='
name|'config'
op|'['
string|"'force-gc'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|run
dedent|''
name|'def'
name|'run'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'len'
op|'('
name|'sys'
op|'.'
name|'argv'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'argv'
op|'.'
name|'append'
op|'('
string|'"--help"'
op|')'
newline|'\n'
dedent|''
name|'config'
op|'='
name|'Options'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'config'
op|'.'
name|'parseOptions'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'usage'
op|'.'
name|'error'
op|','
name|'ue'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'SystemExit'
op|','
string|'"%s: %s"'
op|'%'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|','
name|'ue'
op|')'
newline|'\n'
dedent|''
name|'_initialDebugSetup'
op|'('
name|'config'
op|')'
newline|'\n'
name|'trialRunner'
op|'='
name|'_makeRunner'
op|'('
name|'config'
op|')'
newline|'\n'
name|'suite'
op|'='
name|'_getSuite'
op|'('
name|'config'
op|')'
newline|'\n'
name|'if'
name|'config'
op|'['
string|"'until-failure'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'test_result'
op|'='
name|'trialRunner'
op|'.'
name|'runUntilFailure'
op|'('
name|'suite'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'test_result'
op|'='
name|'trialRunner'
op|'.'
name|'run'
op|'('
name|'suite'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'config'
op|'.'
name|'tracer'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'settrace'
op|'('
name|'None'
op|')'
newline|'\n'
name|'results'
op|'='
name|'config'
op|'.'
name|'tracer'
op|'.'
name|'results'
op|'('
op|')'
newline|'\n'
name|'results'
op|'.'
name|'write_results'
op|'('
name|'show_missing'
op|'='
number|'1'
op|','
name|'summary'
op|'='
name|'False'
op|','
nl|'\n'
name|'coverdir'
op|'='
name|'config'
op|'.'
name|'coverdir'
op|')'
newline|'\n'
dedent|''
name|'sys'
op|'.'
name|'exit'
op|'('
name|'not'
name|'test_result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
endmarker|''
end_unit

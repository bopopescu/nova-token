begin_unit
comment|'# -*- test-case-name: twisted.test.test_ident -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nIdent protocol implementation.\n\n@author: Jp Calderone\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'generators'
newline|'\n'
nl|'\n'
name|'import'
name|'struct'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'failure'
newline|'\n'
nl|'\n'
DECL|variable|_MIN_PORT
name|'_MIN_PORT'
op|'='
number|'1'
newline|'\n'
DECL|variable|_MAX_PORT
name|'_MAX_PORT'
op|'='
number|'2'
op|'**'
number|'16'
op|'-'
number|'1'
newline|'\n'
nl|'\n'
DECL|class|IdentError
name|'class'
name|'IdentError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Can\'t determine connection owner; reason unknown.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|identDescription
name|'identDescription'
op|'='
string|"'UNKNOWN-ERROR'"
newline|'\n'
nl|'\n'
DECL|member|__str__
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'identDescription'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoUser
dedent|''
dedent|''
name|'class'
name|'NoUser'
op|'('
name|'IdentError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The connection specified by the port pair is not currently in use or\n    currently not owned by an identifiable entity.\n    """'
newline|'\n'
DECL|variable|identDescription
name|'identDescription'
op|'='
string|"'NO-USER'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidPort
dedent|''
name|'class'
name|'InvalidPort'
op|'('
name|'IdentError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Either the local or foreign port was improperly specified. This should\n    be returned if either or both of the port ids were out of range (TCP\n    port numbers are from 1-65535), negative integers, reals or in any\n    fashion not recognized as a non-negative integer.\n    """'
newline|'\n'
DECL|variable|identDescription
name|'identDescription'
op|'='
string|"'INVALID-PORT'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HiddenUser
dedent|''
name|'class'
name|'HiddenUser'
op|'('
name|'IdentError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The server was able to identify the user of this port, but the\n    information was not returned at the request of the user.\n    """'
newline|'\n'
DECL|variable|identDescription
name|'identDescription'
op|'='
string|"'HIDDEN-USER'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IdentServer
dedent|''
name|'class'
name|'IdentServer'
op|'('
name|'basic'
op|'.'
name|'LineOnlyReceiver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The Identification Protocol (a.k.a., "ident", a.k.a., "the Ident\n    Protocol") provides a means to determine the identity of a user of a\n    particular TCP connection. Given a TCP port number pair, it returns a\n    character string which identifies the owner of that connection on the\n    server\'s system.\n\n    Server authors should subclass this class and override the lookup method.\n    The default implementation returns an UNKNOWN-ERROR response for every\n    query.\n    """'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parts'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'!='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'invalidQuery'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'portOnServer'
op|','
name|'portOnClient'
op|'='
name|'map'
op|'('
name|'int'
op|','
name|'parts'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'invalidQuery'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'_MIN_PORT'
op|'<='
name|'portOnServer'
op|'<='
name|'_MAX_PORT'
name|'and'
name|'_MIN_PORT'
op|'<='
name|'portOnClient'
op|'<='
name|'_MAX_PORT'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'validQuery'
op|'('
name|'portOnServer'
op|','
name|'portOnClient'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_ebLookup'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'InvalidPort'
op|'('
op|')'
op|')'
op|','
name|'portOnServer'
op|','
name|'portOnClient'
op|')'
newline|'\n'
nl|'\n'
DECL|member|invalidQuery
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'invalidQuery'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|validQuery
dedent|''
name|'def'
name|'validQuery'
op|'('
name|'self'
op|','
name|'portOnServer'
op|','
name|'portOnClient'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'serverAddr'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|','
name|'portOnServer'
newline|'\n'
name|'clientAddr'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|','
name|'portOnClient'
newline|'\n'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'lookup'
op|','
name|'serverAddr'
op|','
name|'clientAddr'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbLookup'
op|','
name|'portOnServer'
op|','
name|'portOnClient'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebLookup'
op|','
name|'portOnServer'
op|','
name|'portOnClient'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbLookup
dedent|''
name|'def'
name|'_cbLookup'
op|'('
name|'self'
op|','
op|'('
name|'sysName'
op|','
name|'userId'
op|')'
op|','
name|'sport'
op|','
name|'cport'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'%d, %d : USERID : %s : %s'"
op|'%'
op|'('
name|'sport'
op|','
name|'cport'
op|','
name|'sysName'
op|','
name|'userId'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebLookup
dedent|''
name|'def'
name|'_ebLookup'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'sport'
op|','
name|'cport'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'failure'
op|'.'
name|'check'
op|'('
name|'IdentError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'%d, %d : ERROR : %s'"
op|'%'
op|'('
name|'sport'
op|','
name|'cport'
op|','
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'%d, %d : ERROR : %s'"
op|'%'
op|'('
name|'sport'
op|','
name|'cport'
op|','
name|'IdentError'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lookup
dedent|''
dedent|''
name|'def'
name|'lookup'
op|'('
name|'self'
op|','
name|'serverAddress'
op|','
name|'clientAddress'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Lookup user information about the specified address pair.\n\n        Return value should be a two-tuple of system name and username.\n        Acceptable values for the system name may be found online at::\n\n            U{http://www.iana.org/assignments/operating-system-names}\n\n        This method may also raise any IdentError subclass (or IdentError\n        itself) to indicate user information will not be provided for the\n        given query.\n\n        A Deferred may also be returned.\n\n        @param serverAddress: A two-tuple representing the server endpoint\n        of the address being queried.  The first element is a string holding\n        a dotted-quad IP address.  The second element is an integer\n        representing the port.\n\n        @param clientAddress: Like L{serverAddress}, but represents the\n        client endpoint of the address being queried.\n        """'
newline|'\n'
name|'raise'
name|'IdentError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|ProcServerMixin
dedent|''
dedent|''
name|'class'
name|'ProcServerMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""Implements lookup() to grab entries for responses from /proc/net/tcp\n    """'
newline|'\n'
nl|'\n'
DECL|variable|SYSTEM_NAME
name|'SYSTEM_NAME'
op|'='
string|"'LINUX'"
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'pwd'
name|'import'
name|'getpwuid'
newline|'\n'
DECL|member|getUsername
name|'def'
name|'getUsername'
op|'('
name|'self'
op|','
name|'uid'
op|','
name|'getpwuid'
op|'='
name|'getpwuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getpwuid'
op|'('
name|'uid'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'del'
name|'getpwuid'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|member|getUsername
indent|'        '
name|'def'
name|'getUsername'
op|'('
name|'self'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IdentError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|entries
dedent|''
dedent|''
name|'def'
name|'entries'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'file'
op|'('
string|"'/proc/net/tcp'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
name|'for'
name|'L'
name|'in'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'L'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|dottedQuadFromHexString
dedent|''
dedent|''
name|'def'
name|'dottedQuadFromHexString'
op|'('
name|'self'
op|','
name|'hexstr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'.'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'4B'"
op|','
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'=L'"
op|','
name|'int'
op|'('
name|'hexstr'
op|','
number|'16'
op|')'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unpackAddress
dedent|''
name|'def'
name|'unpackAddress'
op|'('
name|'self'
op|','
name|'packed'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'addr'
op|','
name|'port'
op|'='
name|'packed'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'addr'
op|'='
name|'self'
op|'.'
name|'dottedQuadFromHexString'
op|'('
name|'addr'
op|')'
newline|'\n'
name|'port'
op|'='
name|'int'
op|'('
name|'port'
op|','
number|'16'
op|')'
newline|'\n'
name|'return'
name|'addr'
op|','
name|'port'
newline|'\n'
nl|'\n'
DECL|member|parseLine
dedent|''
name|'def'
name|'parseLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parts'
op|'='
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'localAddr'
op|','
name|'localPort'
op|'='
name|'self'
op|'.'
name|'unpackAddress'
op|'('
name|'parts'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'remoteAddr'
op|','
name|'remotePort'
op|'='
name|'self'
op|'.'
name|'unpackAddress'
op|'('
name|'parts'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'uid'
op|'='
name|'int'
op|'('
name|'parts'
op|'['
number|'7'
op|']'
op|')'
newline|'\n'
name|'return'
op|'('
name|'localAddr'
op|','
name|'localPort'
op|')'
op|','
op|'('
name|'remoteAddr'
op|','
name|'remotePort'
op|')'
op|','
name|'uid'
newline|'\n'
nl|'\n'
DECL|member|lookup
dedent|''
name|'def'
name|'lookup'
op|'('
name|'self'
op|','
name|'serverAddress'
op|','
name|'clientAddress'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'ent'
name|'in'
name|'self'
op|'.'
name|'entries'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'localAddr'
op|','
name|'remoteAddr'
op|','
name|'uid'
op|'='
name|'self'
op|'.'
name|'parseLine'
op|'('
name|'ent'
op|')'
newline|'\n'
name|'if'
name|'remoteAddr'
op|'=='
name|'clientAddress'
name|'and'
name|'localAddr'
op|'['
number|'1'
op|']'
op|'=='
name|'serverAddress'
op|'['
number|'1'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'('
name|'self'
op|'.'
name|'SYSTEM_NAME'
op|','
name|'self'
op|'.'
name|'getUsername'
op|'('
name|'uid'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'raise'
name|'NoUser'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IdentClient
dedent|''
dedent|''
name|'class'
name|'IdentClient'
op|'('
name|'basic'
op|'.'
name|'LineOnlyReceiver'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|errorTypes
indent|'    '
name|'errorTypes'
op|'='
op|'('
name|'IdentError'
op|','
name|'NoUser'
op|','
name|'InvalidPort'
op|','
name|'HiddenUser'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'queries'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|lookup
dedent|''
name|'def'
name|'lookup'
op|'('
name|'self'
op|','
name|'portOnServer'
op|','
name|'portOnClient'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Lookup user information about the specified address pair.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'queries'
op|'.'
name|'append'
op|'('
op|'('
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
op|','
name|'portOnServer'
op|','
name|'portOnClient'
op|')'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'queries'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'queries'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'%d, %d'"
op|'%'
op|'('
name|'portOnServer'
op|','
name|'portOnClient'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'queries'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'queries'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Unexpected server response: %r"'
op|'%'
op|'('
name|'line'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'_'
op|','
name|'_'
op|'='
name|'self'
op|'.'
name|'queries'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parseResponse'
op|'('
name|'d'
op|','
name|'line'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'queries'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'%d, %d'"
op|'%'
op|'('
name|'self'
op|'.'
name|'queries'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|','
name|'self'
op|'.'
name|'queries'
op|'['
number|'0'
op|']'
op|'['
number|'2'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
dedent|''
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'q'
name|'in'
name|'self'
op|'.'
name|'queries'
op|':'
newline|'\n'
indent|'            '
name|'q'
op|'['
number|'0'
op|']'
op|'.'
name|'errback'
op|'('
name|'IdentError'
op|'('
name|'reason'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'queries'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|parseResponse
dedent|''
name|'def'
name|'parseResponse'
op|'('
name|'self'
op|','
name|'deferred'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parts'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'2'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'!='
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'IdentError'
op|'('
name|'line'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'ports'
op|','
name|'type'
op|','
name|'addInfo'
op|'='
name|'map'
op|'('
name|'str'
op|'.'
name|'strip'
op|','
name|'parts'
op|')'
newline|'\n'
name|'if'
name|'type'
op|'=='
string|"'ERROR'"
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'et'
name|'in'
name|'self'
op|'.'
name|'errorTypes'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'et'
op|'.'
name|'identDescription'
op|'=='
name|'addInfo'
op|':'
newline|'\n'
indent|'                        '
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'et'
op|'('
name|'line'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'IdentError'
op|'('
name|'line'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'deferred'
op|'.'
name|'callback'
op|'('
op|'('
name|'type'
op|','
name|'addInfo'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
string|"'IdentError'"
op|','
string|"'NoUser'"
op|','
string|"'InvalidPort'"
op|','
string|"'HiddenUser'"
op|','
nl|'\n'
string|"'IdentServer'"
op|','
string|"'IdentClient'"
op|','
nl|'\n'
string|"'ProcServerMixin'"
op|']'
newline|'\n'
endmarker|''
end_unit

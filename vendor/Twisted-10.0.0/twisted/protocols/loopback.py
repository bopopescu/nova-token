begin_unit
comment|'# -*- test-case-name: twisted.test.test_loopback -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTesting support for protocols -- loopback between client and server.\n"""'
newline|'\n'
nl|'\n'
comment|'# system imports'
nl|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
comment|'# Twisted Imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'policies'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'interfaces'
op|','
name|'protocol'
op|','
name|'main'
op|','
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'task'
name|'import'
name|'deferLater'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IAddress'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_LoopbackQueue
name|'class'
name|'_LoopbackQueue'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Trivial wrapper around a list to give it an interface like a queue, which\n    the addition of also sending notifications by way of a Deferred whenever\n    the list has something added to it.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|_notificationDeferred
name|'_notificationDeferred'
op|'='
name|'None'
newline|'\n'
DECL|variable|disconnect
name|'disconnect'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_queue'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|put
dedent|''
name|'def'
name|'put'
op|'('
name|'self'
op|','
name|'v'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_queue'
op|'.'
name|'append'
op|'('
name|'v'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_notificationDeferred'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'self'
op|'.'
name|'_notificationDeferred'
op|'='
name|'self'
op|'.'
name|'_notificationDeferred'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__nonzero__
dedent|''
dedent|''
name|'def'
name|'__nonzero__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'bool'
op|'('
name|'self'
op|'.'
name|'_queue'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_queue'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_LoopbackAddress
dedent|''
dedent|''
name|'class'
name|'_LoopbackAddress'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IAddress'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_LoopbackTransport
dedent|''
name|'class'
name|'_LoopbackTransport'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'ITransport'
op|','
name|'interfaces'
op|'.'
name|'IConsumer'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|disconnecting
name|'disconnecting'
op|'='
name|'False'
newline|'\n'
DECL|variable|producer
name|'producer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# ITransport'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'q'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'q'
op|'='
name|'q'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'q'
op|'.'
name|'put'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'iovec'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'q'
op|'.'
name|'put'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'iovec'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'q'
op|'.'
name|'disconnect'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'q'
op|'.'
name|'put'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getPeer
dedent|''
name|'def'
name|'getPeer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_LoopbackAddress'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_LoopbackAddress'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# IConsumer'
nl|'\n'
DECL|member|registerProducer
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'self'
op|'.'
name|'producer'
name|'is'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'='
name|'producer'
newline|'\n'
name|'self'
op|'.'
name|'streamingProducer'
op|'='
name|'streaming'
newline|'\n'
name|'self'
op|'.'
name|'_pollProducer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'self'
op|'.'
name|'producer'
name|'is'
name|'not'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_pollProducer
dedent|''
name|'def'
name|'_pollProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'producer'
name|'is'
name|'not'
name|'None'
name|'and'
name|'not'
name|'self'
op|'.'
name|'streamingProducer'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|identityPumpPolicy
dedent|''
dedent|''
dedent|''
name|'def'
name|'identityPumpPolicy'
op|'('
name|'queue'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{identityPumpPolicy} is a policy which delivers each chunk of data written\n    to the given queue as-is to the target.\n\n    This isn\'t a particularly realistic policy.\n\n    @see: L{loopbackAsync}\n    """'
newline|'\n'
name|'while'
name|'queue'
op|':'
newline|'\n'
indent|'        '
name|'bytes'
op|'='
name|'queue'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
name|'if'
name|'bytes'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'break'
newline|'\n'
dedent|''
name|'target'
op|'.'
name|'dataReceived'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|collapsingPumpPolicy
dedent|''
dedent|''
name|'def'
name|'collapsingPumpPolicy'
op|'('
name|'queue'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{collapsingPumpPolicy} is a policy which collapses all outstanding chunks\n    into a single string and delivers it to the target.\n\n    @see: L{loopbackAsync}\n    """'
newline|'\n'
name|'bytes'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'queue'
op|':'
newline|'\n'
indent|'        '
name|'chunk'
op|'='
name|'queue'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
name|'if'
name|'chunk'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'break'
newline|'\n'
dedent|''
name|'bytes'
op|'.'
name|'append'
op|'('
name|'chunk'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'bytes'
op|':'
newline|'\n'
indent|'        '
name|'target'
op|'.'
name|'dataReceived'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'bytes'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|loopbackAsync
dedent|''
dedent|''
name|'def'
name|'loopbackAsync'
op|'('
name|'server'
op|','
name|'client'
op|','
name|'pumpPolicy'
op|'='
name|'identityPumpPolicy'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Establish a connection between C{server} and C{client} then transfer data\n    between them until the connection is closed. This is often useful for\n    testing a protocol.\n\n    @param server: The protocol instance representing the server-side of this\n        connection.\n\n    @param client: The protocol instance representing the client-side of this\n        connection.\n\n    @param pumpPolicy: When either C{server} or C{client} writes to its\n        transport, the string passed in is added to a queue of data for the\n        other protocol.  Eventually, C{pumpPolicy} will be called with one such\n        queue and the corresponding protocol object.  The pump policy callable\n        is responsible for emptying the queue and passing the strings it\n        contains to the given protocol\'s C{dataReceived} method.  The signature\n        of C{pumpPolicy} is C{(queue, protocol)}.  C{queue} is an object with a\n        C{get} method which will return the next string written to the\n        transport, or C{None} if the transport has been disconnected, and which\n        evaluates to C{True} if and only if there are more items to be\n        retrieved via C{get}.\n\n    @return: A L{Deferred} which fires when the connection has been closed and\n        both sides have received notification of this.\n    """'
newline|'\n'
name|'serverToClient'
op|'='
name|'_LoopbackQueue'
op|'('
op|')'
newline|'\n'
name|'clientToServer'
op|'='
name|'_LoopbackQueue'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'server'
op|'.'
name|'makeConnection'
op|'('
name|'_LoopbackTransport'
op|'('
name|'serverToClient'
op|')'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'makeConnection'
op|'('
name|'_LoopbackTransport'
op|'('
name|'clientToServer'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'_loopbackAsyncBody'
op|'('
nl|'\n'
name|'server'
op|','
name|'serverToClient'
op|','
name|'client'
op|','
name|'clientToServer'
op|','
name|'pumpPolicy'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_loopbackAsyncBody
dedent|''
name|'def'
name|'_loopbackAsyncBody'
op|'('
name|'server'
op|','
name|'serverToClient'
op|','
name|'client'
op|','
name|'clientToServer'
op|','
nl|'\n'
name|'pumpPolicy'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Transfer bytes from the output queue of each protocol to the input of the other.\n\n    @param server: The protocol instance representing the server-side of this\n    connection.\n\n    @param serverToClient: The L{_LoopbackQueue} holding the server\'s output.\n\n    @param client: The protocol instance representing the client-side of this\n    connection.\n\n    @param clientToServer: The L{_LoopbackQueue} holding the client\'s output.\n\n    @param pumpPolicy: See L{loopbackAsync}.\n\n    @return: A L{Deferred} which fires when the connection has been closed and\n        both sides have received notification of this.\n    """'
newline|'\n'
DECL|function|pump
name|'def'
name|'pump'
op|'('
name|'source'
op|','
name|'q'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sent'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'q'
op|':'
newline|'\n'
indent|'            '
name|'pumpPolicy'
op|'('
name|'q'
op|','
name|'target'
op|')'
newline|'\n'
name|'sent'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'sent'
name|'and'
name|'not'
name|'q'
op|':'
newline|'\n'
comment|'# A write buffer has now been emptied.  Give any producer on that'
nl|'\n'
comment|'# side an opportunity to produce more data.'
nl|'\n'
indent|'            '
name|'source'
op|'.'
name|'transport'
op|'.'
name|'_pollProducer'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'sent'
newline|'\n'
nl|'\n'
dedent|''
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'disconnect'
op|'='
name|'clientSent'
op|'='
name|'serverSent'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# Deliver the data which has been written.'
nl|'\n'
name|'serverSent'
op|'='
name|'pump'
op|'('
name|'server'
op|','
name|'serverToClient'
op|','
name|'client'
op|')'
newline|'\n'
name|'clientSent'
op|'='
name|'pump'
op|'('
name|'client'
op|','
name|'clientToServer'
op|','
name|'server'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'clientSent'
name|'and'
name|'not'
name|'serverSent'
op|':'
newline|'\n'
comment|'# Neither side wrote any data.  Wait for some new data to be added'
nl|'\n'
comment|'# before trying to do anything further.'
nl|'\n'
indent|'            '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'clientToServer'
op|'.'
name|'_notificationDeferred'
op|'='
name|'d'
newline|'\n'
name|'serverToClient'
op|'.'
name|'_notificationDeferred'
op|'='
name|'d'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'_loopbackAsyncContinue'
op|','
nl|'\n'
name|'server'
op|','
name|'serverToClient'
op|','
name|'client'
op|','
name|'clientToServer'
op|','
name|'pumpPolicy'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'if'
name|'serverToClient'
op|'.'
name|'disconnect'
op|':'
newline|'\n'
comment|'# The server wants to drop the connection.  Flush any remaining'
nl|'\n'
comment|'# data it has.'
nl|'\n'
indent|'            '
name|'disconnect'
op|'='
name|'True'
newline|'\n'
name|'pump'
op|'('
name|'server'
op|','
name|'serverToClient'
op|','
name|'client'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'clientToServer'
op|'.'
name|'disconnect'
op|':'
newline|'\n'
comment|'# The client wants to drop the connection.  Flush any remaining'
nl|'\n'
comment|'# data it has.'
nl|'\n'
indent|'            '
name|'disconnect'
op|'='
name|'True'
newline|'\n'
name|'pump'
op|'('
name|'client'
op|','
name|'clientToServer'
op|','
name|'server'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'disconnect'
op|':'
newline|'\n'
comment|'# Someone wanted to disconnect, so okay, the connection is gone.'
nl|'\n'
indent|'            '
name|'server'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'main'
op|'.'
name|'CONNECTION_DONE'
op|')'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'main'
op|'.'
name|'CONNECTION_DONE'
op|')'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_loopbackAsyncContinue
dedent|''
dedent|''
dedent|''
name|'def'
name|'_loopbackAsyncContinue'
op|'('
name|'ignored'
op|','
name|'server'
op|','
name|'serverToClient'
op|','
name|'client'
op|','
nl|'\n'
name|'clientToServer'
op|','
name|'pumpPolicy'
op|')'
op|':'
newline|'\n'
comment|'# Clear the Deferred from each message queue, since it has already fired'
nl|'\n'
comment|'# and cannot be used again.'
nl|'\n'
indent|'    '
name|'clientToServer'
op|'.'
name|'_notificationDeferred'
op|'='
name|'None'
newline|'\n'
name|'serverToClient'
op|'.'
name|'_notificationDeferred'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|"# Schedule some more byte-pushing to happen.  This isn't done"
nl|'\n'
comment|'# synchronously because no actual transport can re-enter dataReceived as'
nl|'\n'
comment|'# a result of calling write, and doing this synchronously could result'
nl|'\n'
comment|'# in that.'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'return'
name|'deferLater'
op|'('
nl|'\n'
name|'reactor'
op|','
number|'0'
op|','
nl|'\n'
name|'_loopbackAsyncBody'
op|','
nl|'\n'
name|'server'
op|','
name|'serverToClient'
op|','
name|'client'
op|','
name|'clientToServer'
op|','
name|'pumpPolicy'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoopbackRelay
dedent|''
name|'class'
name|'LoopbackRelay'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'ITransport'
op|','
name|'interfaces'
op|'.'
name|'IConsumer'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|buffer
name|'buffer'
op|'='
string|"''"
newline|'\n'
DECL|variable|shouldLose
name|'shouldLose'
op|'='
number|'0'
newline|'\n'
DECL|variable|disconnecting
name|'disconnecting'
op|'='
number|'0'
newline|'\n'
DECL|variable|producer
name|'producer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'target'
op|','
name|'logFile'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'target'
op|'='
name|'target'
newline|'\n'
name|'self'
op|'.'
name|'logFile'
op|'='
name|'logFile'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'='
name|'self'
op|'.'
name|'buffer'
op|'+'
name|'data'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'logFile'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logFile'
op|'.'
name|'write'
op|'('
string|'"loopback writing %s\\n"'
op|'%'
name|'repr'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'iovec'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|'""'
op|'.'
name|'join'
op|'('
name|'iovec'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clearBuffer
dedent|''
name|'def'
name|'clearBuffer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'shouldLose'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'producer'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'buffer'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'logFile'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logFile'
op|'.'
name|'write'
op|'('
string|'"loopback receiving %s\\n"'
op|'%'
name|'repr'
op|'('
name|'self'
op|'.'
name|'buffer'
op|')'
op|')'
newline|'\n'
dedent|''
name|'buffer'
op|'='
name|'self'
op|'.'
name|'buffer'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'target'
op|'.'
name|'dataReceived'
op|'('
name|'buffer'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'shouldLose'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'shouldLose'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'target'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'main'
op|'.'
name|'CONNECTION_DONE'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'shouldLose'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'shouldLose'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'loopback'"
newline|'\n'
nl|'\n'
DECL|member|getPeer
dedent|''
name|'def'
name|'getPeer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'loopback'"
newline|'\n'
nl|'\n'
DECL|member|registerProducer
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'producer'
op|'='
name|'producer'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'producer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|logPrefix
dedent|''
name|'def'
name|'logPrefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'Loopback(%r)'"
op|'%'
op|'('
name|'self'
op|'.'
name|'target'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|function|loopback
dedent|''
dedent|''
name|'def'
name|'loopback'
op|'('
name|'server'
op|','
name|'client'
op|','
name|'logFile'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Run session between server and client.\n    DEPRECATED in Twisted 2.5. Use loopbackAsync instead.\n    """'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|"'loopback() is deprecated (since Twisted 2.5). '"
nl|'\n'
string|"'Use loopbackAsync() instead.'"
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'2'
op|','
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'serverToClient'
op|'='
name|'LoopbackRelay'
op|'('
name|'client'
op|','
name|'logFile'
op|')'
newline|'\n'
name|'clientToServer'
op|'='
name|'LoopbackRelay'
op|'('
name|'server'
op|','
name|'logFile'
op|')'
newline|'\n'
name|'server'
op|'.'
name|'makeConnection'
op|'('
name|'serverToClient'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'makeConnection'
op|'('
name|'clientToServer'
op|')'
newline|'\n'
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'reactor'
op|'.'
name|'iterate'
op|'('
number|'0.01'
op|')'
comment|'# this is to clear any deferreds'
newline|'\n'
name|'serverToClient'
op|'.'
name|'clearBuffer'
op|'('
op|')'
newline|'\n'
name|'clientToServer'
op|'.'
name|'clearBuffer'
op|'('
op|')'
newline|'\n'
name|'if'
name|'serverToClient'
op|'.'
name|'shouldLose'
op|':'
newline|'\n'
indent|'            '
name|'serverToClient'
op|'.'
name|'clearBuffer'
op|'('
op|')'
newline|'\n'
name|'server'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'main'
op|'.'
name|'CONNECTION_DONE'
op|')'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'elif'
name|'clientToServer'
op|'.'
name|'shouldLose'
op|':'
newline|'\n'
indent|'            '
name|'client'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'main'
op|'.'
name|'CONNECTION_DONE'
op|')'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'reactor'
op|'.'
name|'iterate'
op|'('
op|')'
comment|'# last gasp before I go away'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoopbackClientFactory
dedent|''
name|'class'
name|'LoopbackClientFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'disconnected'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'protocol'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'protocol'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionLost
dedent|''
name|'def'
name|'clientConnectionLost'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'disconnected'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_FireOnClose
dedent|''
dedent|''
name|'class'
name|'_FireOnClose'
op|'('
name|'policies'
op|'.'
name|'ProtocolWrapper'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'protocol'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policies'
op|'.'
name|'ProtocolWrapper'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'protocol'
op|','
name|'factory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policies'
op|'.'
name|'ProtocolWrapper'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|loopbackTCP
dedent|''
dedent|''
name|'def'
name|'loopbackTCP'
op|'('
name|'server'
op|','
name|'client'
op|','
name|'port'
op|'='
number|'0'
op|','
name|'noisy'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Run session between server and client protocol instances over TCP."""'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'f'
op|'='
name|'policies'
op|'.'
name|'WrappingFactory'
op|'('
name|'protocol'
op|'.'
name|'Factory'
op|'('
op|')'
op|')'
newline|'\n'
name|'serverWrapper'
op|'='
name|'_FireOnClose'
op|'('
name|'f'
op|','
name|'server'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'noisy'
op|'='
name|'noisy'
newline|'\n'
name|'f'
op|'.'
name|'buildProtocol'
op|'='
name|'lambda'
name|'addr'
op|':'
name|'serverWrapper'
newline|'\n'
name|'serverPort'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
name|'port'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'clientF'
op|'='
name|'LoopbackClientFactory'
op|'('
name|'client'
op|')'
newline|'\n'
name|'clientF'
op|'.'
name|'noisy'
op|'='
name|'noisy'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|"'127.0.0.1'"
op|','
name|'serverPort'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
name|'clientF'
op|')'
newline|'\n'
name|'d'
op|'='
name|'clientF'
op|'.'
name|'deferred'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'serverWrapper'
op|'.'
name|'deferred'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'serverPort'
op|'.'
name|'stopListening'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|loopbackUNIX
dedent|''
name|'def'
name|'loopbackUNIX'
op|'('
name|'server'
op|','
name|'client'
op|','
name|'noisy'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Run session between server and client protocol instances over UNIX socket."""'
newline|'\n'
name|'path'
op|'='
name|'tempfile'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'f'
op|'='
name|'policies'
op|'.'
name|'WrappingFactory'
op|'('
name|'protocol'
op|'.'
name|'Factory'
op|'('
op|')'
op|')'
newline|'\n'
name|'serverWrapper'
op|'='
name|'_FireOnClose'
op|'('
name|'f'
op|','
name|'server'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'noisy'
op|'='
name|'noisy'
newline|'\n'
name|'f'
op|'.'
name|'buildProtocol'
op|'='
name|'lambda'
name|'addr'
op|':'
name|'serverWrapper'
newline|'\n'
name|'serverPort'
op|'='
name|'reactor'
op|'.'
name|'listenUNIX'
op|'('
name|'path'
op|','
name|'f'
op|')'
newline|'\n'
name|'clientF'
op|'='
name|'LoopbackClientFactory'
op|'('
name|'client'
op|')'
newline|'\n'
name|'clientF'
op|'.'
name|'noisy'
op|'='
name|'noisy'
newline|'\n'
name|'reactor'
op|'.'
name|'connectUNIX'
op|'('
name|'path'
op|','
name|'clientF'
op|')'
newline|'\n'
name|'d'
op|'='
name|'clientF'
op|'.'
name|'deferred'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'serverWrapper'
op|'.'
name|'deferred'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'serverPort'
op|'.'
name|'stopListening'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""TELNET implementation, with line-oriented command handling.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'warnings'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"As of Twisted 2.1, twisted.protocols.telnet is deprecated.  "'
nl|'\n'
string|'"See twisted.conch.telnet for the current, supported API."'
op|','
nl|'\n'
name|'DeprecationWarning'
op|','
nl|'\n'
DECL|variable|stacklevel
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# System Imports'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'StringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
comment|'# Twisted Imports'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
name|'import'
name|'copyright'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
newline|'\n'
nl|'\n'
comment|'# Some utility chars.'
nl|'\n'
DECL|variable|ESC
name|'ESC'
op|'='
name|'chr'
op|'('
number|'27'
op|')'
comment|'# ESC for doing fanciness'
newline|'\n'
DECL|variable|BOLD_MODE_ON
name|'BOLD_MODE_ON'
op|'='
name|'ESC'
op|'+'
string|'"[1m"'
comment|'# turn bold on'
newline|'\n'
DECL|variable|BOLD_MODE_OFF
name|'BOLD_MODE_OFF'
op|'='
name|'ESC'
op|'+'
string|'"[m"'
comment|'# no char attributes'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Characters gleaned from the various (and conflicting) RFCs.  Not all of these are correct.'
nl|'\n'
nl|'\n'
DECL|variable|NULL
name|'NULL'
op|'='
name|'chr'
op|'('
number|'0'
op|')'
comment|'# No operation.'
newline|'\n'
DECL|variable|LF
name|'LF'
op|'='
name|'chr'
op|'('
number|'10'
op|')'
comment|'# Moves the printer to the'
newline|'\n'
comment|'# next print line, keeping the'
nl|'\n'
comment|'# same horizontal position.'
nl|'\n'
DECL|variable|CR
name|'CR'
op|'='
name|'chr'
op|'('
number|'13'
op|')'
comment|'# Moves the printer to the left'
newline|'\n'
comment|'# margin of the current line.'
nl|'\n'
DECL|variable|BEL
name|'BEL'
op|'='
name|'chr'
op|'('
number|'7'
op|')'
comment|'# Produces an audible or'
newline|'\n'
comment|'# visible signal (which does'
nl|'\n'
comment|'# NOT move the print head).'
nl|'\n'
DECL|variable|BS
name|'BS'
op|'='
name|'chr'
op|'('
number|'8'
op|')'
comment|'# Moves the print head one'
newline|'\n'
comment|'# character position towards'
nl|'\n'
comment|'# the left margin.'
nl|'\n'
DECL|variable|HT
name|'HT'
op|'='
name|'chr'
op|'('
number|'9'
op|')'
comment|'# Moves the printer to the'
newline|'\n'
comment|'# next horizontal tab stop.'
nl|'\n'
comment|'# It remains unspecified how'
nl|'\n'
comment|'# either party determines or'
nl|'\n'
comment|'# establishes where such tab'
nl|'\n'
comment|'# stops are located.'
nl|'\n'
DECL|variable|VT
name|'VT'
op|'='
name|'chr'
op|'('
number|'11'
op|')'
comment|'# Moves the printer to the'
newline|'\n'
comment|'# next vertical tab stop.  It'
nl|'\n'
comment|'# remains unspecified how'
nl|'\n'
comment|'# either party determines or'
nl|'\n'
comment|'# establishes where such tab'
nl|'\n'
comment|'# stops are located.'
nl|'\n'
DECL|variable|FF
name|'FF'
op|'='
name|'chr'
op|'('
number|'12'
op|')'
comment|'# Moves the printer to the top'
newline|'\n'
comment|'# of the next page, keeping'
nl|'\n'
comment|'# the same horizontal position.'
nl|'\n'
DECL|variable|SE
name|'SE'
op|'='
name|'chr'
op|'('
number|'240'
op|')'
comment|'# End of subnegotiation parameters.'
newline|'\n'
DECL|variable|NOP
name|'NOP'
op|'='
name|'chr'
op|'('
number|'241'
op|')'
comment|'# No operation.'
newline|'\n'
DECL|variable|DM
name|'DM'
op|'='
name|'chr'
op|'('
number|'242'
op|')'
comment|'# "Data Mark": The data stream portion'
newline|'\n'
comment|'# of a Synch.  This should always be'
nl|'\n'
comment|'# accompanied by a TCP Urgent'
nl|'\n'
comment|'# notification.'
nl|'\n'
DECL|variable|BRK
name|'BRK'
op|'='
name|'chr'
op|'('
number|'243'
op|')'
comment|'# NVT character Break.'
newline|'\n'
DECL|variable|IP
name|'IP'
op|'='
name|'chr'
op|'('
number|'244'
op|')'
comment|'# The function Interrupt Process.'
newline|'\n'
DECL|variable|AO
name|'AO'
op|'='
name|'chr'
op|'('
number|'245'
op|')'
comment|'# The function Abort Output'
newline|'\n'
DECL|variable|AYT
name|'AYT'
op|'='
name|'chr'
op|'('
number|'246'
op|')'
comment|'# The function Are You There.'
newline|'\n'
DECL|variable|EC
name|'EC'
op|'='
name|'chr'
op|'('
number|'247'
op|')'
comment|'# The function Erase Character.'
newline|'\n'
DECL|variable|EL
name|'EL'
op|'='
name|'chr'
op|'('
number|'248'
op|')'
comment|'# The function Erase Line'
newline|'\n'
DECL|variable|GA
name|'GA'
op|'='
name|'chr'
op|'('
number|'249'
op|')'
comment|'# The Go Ahead signal.'
newline|'\n'
DECL|variable|SB
name|'SB'
op|'='
name|'chr'
op|'('
number|'250'
op|')'
comment|'# Indicates that what follows is'
newline|'\n'
comment|'# subnegotiation of the indicated'
nl|'\n'
comment|'# option.'
nl|'\n'
DECL|variable|WILL
name|'WILL'
op|'='
name|'chr'
op|'('
number|'251'
op|')'
comment|'# Indicates the desire to begin'
newline|'\n'
comment|'# performing, or confirmation that'
nl|'\n'
comment|'# you are now performing, the'
nl|'\n'
comment|'# indicated option.'
nl|'\n'
DECL|variable|WONT
name|'WONT'
op|'='
name|'chr'
op|'('
number|'252'
op|')'
comment|'# Indicates the refusal to perform,'
newline|'\n'
comment|'# or continue performing, the'
nl|'\n'
comment|'# indicated option.'
nl|'\n'
DECL|variable|DO
name|'DO'
op|'='
name|'chr'
op|'('
number|'253'
op|')'
comment|'# Indicates the request that the'
newline|'\n'
comment|'# other party perform, or'
nl|'\n'
comment|'# confirmation that you are expecting'
nl|'\n'
comment|'# the other party to perform, the'
nl|'\n'
comment|'# indicated option.'
nl|'\n'
DECL|variable|DONT
name|'DONT'
op|'='
name|'chr'
op|'('
number|'254'
op|')'
comment|'# Indicates the demand that the'
newline|'\n'
comment|'# other party stop performing,'
nl|'\n'
comment|'# or confirmation that you are no'
nl|'\n'
comment|'# longer expecting the other party'
nl|'\n'
comment|'# to perform, the indicated option.'
nl|'\n'
DECL|variable|IAC
name|'IAC'
op|'='
name|'chr'
op|'('
number|'255'
op|')'
comment|'# Data Byte 255.'
newline|'\n'
nl|'\n'
comment|'# features'
nl|'\n'
nl|'\n'
DECL|variable|ECHO
name|'ECHO'
op|'='
name|'chr'
op|'('
number|'1'
op|')'
comment|'# User-to-Server:  Asks the server to send'
newline|'\n'
comment|'# Echos of the transmitted data.'
nl|'\n'
nl|'\n'
comment|'# Server-to User:  States that the server is'
nl|'\n'
comment|'# sending echos of the transmitted data.'
nl|'\n'
comment|'# Sent only as a reply to ECHO or NO ECHO.'
nl|'\n'
nl|'\n'
DECL|variable|SUPGA
name|'SUPGA'
op|'='
name|'chr'
op|'('
number|'3'
op|')'
comment|'# Supress Go Ahead...? "Modern" telnet servers'
newline|'\n'
comment|'# are supposed to do this.'
nl|'\n'
nl|'\n'
DECL|variable|LINEMODE
name|'LINEMODE'
op|'='
name|'chr'
op|'('
number|'34'
op|')'
comment|"# I don't care that Jon Postel is dead."
newline|'\n'
nl|'\n'
DECL|variable|HIDE
name|'HIDE'
op|'='
name|'chr'
op|'('
number|'133'
op|')'
comment|'# The intention is that a server will send'
newline|'\n'
comment|'# this signal to a user system which is'
nl|'\n'
comment|'# echoing locally (to the user) when the user'
nl|'\n'
comment|'# is about to type something secret (e.g. a'
nl|'\n'
comment|'# password).  In this case, the user system'
nl|'\n'
comment|'# is to suppress local echoing or overprint'
nl|'\n'
comment|'# the input (or something) until the server'
nl|'\n'
comment|'# sends a NOECHO signal.  In situations where'
nl|'\n'
comment|'# the user system is not echoing locally,'
nl|'\n'
comment|'# this signal must not be sent by the server.'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|NOECHO
name|'NOECHO'
op|'='
name|'chr'
op|'('
number|'131'
op|')'
comment|'# User-to-Server:  Asks the server not to'
newline|'\n'
comment|'# return Echos of the transmitted data.'
nl|'\n'
comment|'# '
nl|'\n'
comment|'# Server-to-User:  States that the server is'
nl|'\n'
comment|'# not sending echos of the transmitted data.'
nl|'\n'
comment|'# Sent only as a reply to ECHO or NO ECHO,'
nl|'\n'
comment|'# or to end the hide your input.'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|iacBytes
name|'iacBytes'
op|'='
op|'{'
nl|'\n'
name|'DO'
op|':'
string|"'DO'"
op|','
nl|'\n'
name|'DONT'
op|':'
string|"'DONT'"
op|','
nl|'\n'
name|'WILL'
op|':'
string|"'WILL'"
op|','
nl|'\n'
name|'WONT'
op|':'
string|"'WONT'"
op|','
nl|'\n'
name|'IP'
op|':'
string|"'IP'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|multireplace
name|'def'
name|'multireplace'
op|'('
name|'st'
op|','
name|'dct'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'dct'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'st'
op|'='
name|'st'
op|'.'
name|'replace'
op|'('
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'st'
newline|'\n'
nl|'\n'
DECL|class|Telnet
dedent|''
name|'class'
name|'Telnet'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""I am a Protocol for handling Telnet connections. I have two\n    sets of special methods, telnet_* and iac_*.\n\n    telnet_* methods get called on every line sent to me. The method\n    to call is decided by the current mode. The initial mode is \'User\';\n    this means that telnet_User is the first telnet_* method to be called.\n    All telnet_* methods should return a string which specifies the mode\n    to go into next; thus dictating which telnet_* method to call next.\n    For example, the default telnet_User method returns \'Password\' to go\n    into Password mode, and the default telnet_Password method returns\n    \'Command\' to go into Command mode.\n\n    The iac_* methods are less-used; they are called when an IAC telnet\n    byte is received. You can define iac_DO, iac_DONT, iac_WILL, iac_WONT,\n    and iac_IP methods to do what you want when one of these bytes is\n    received."""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|gotIAC
name|'gotIAC'
op|'='
number|'0'
newline|'\n'
DECL|variable|iacByte
name|'iacByte'
op|'='
name|'None'
newline|'\n'
DECL|variable|lastLine
name|'lastLine'
op|'='
name|'None'
newline|'\n'
DECL|variable|buffer
name|'buffer'
op|'='
string|"''"
newline|'\n'
DECL|variable|echo
name|'echo'
op|'='
number|'0'
newline|'\n'
DECL|variable|delimiters
name|'delimiters'
op|'='
op|'['
string|"'\\r\\n'"
op|','
string|"'\\r\\000'"
op|']'
newline|'\n'
DECL|variable|mode
name|'mode'
op|'='
string|'"User"'
newline|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send the given data over my transport."""'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""I will write a welcomeMessage and loginPrompt to the client."""'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'welcomeMessage'
op|'('
op|')'
op|'+'
name|'self'
op|'.'
name|'loginPrompt'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|welcomeMessage
dedent|''
name|'def'
name|'welcomeMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override me to return a string which will be sent to the client\n        before login."""'
newline|'\n'
name|'x'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'__class__'
newline|'\n'
name|'return'
op|'('
string|'"\\r\\n"'
op|'+'
name|'x'
op|'.'
name|'__module__'
op|'+'
string|"'.'"
op|'+'
name|'x'
op|'.'
name|'__name__'
op|'+'
nl|'\n'
string|"'\\r\\nTwisted %s\\r\\n'"
op|'%'
name|'copyright'
op|'.'
name|'version'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loginPrompt
dedent|''
name|'def'
name|'loginPrompt'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override me to return a \'login:\'-type prompt."""'
newline|'\n'
name|'return'
string|'"username: "'
newline|'\n'
nl|'\n'
DECL|member|iacSBchunk
dedent|''
name|'def'
name|'iacSBchunk'
op|'('
name|'self'
op|','
name|'chunk'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|iac_DO
dedent|''
name|'def'
name|'iac_DO'
op|'('
name|'self'
op|','
name|'feature'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|iac_DONT
dedent|''
name|'def'
name|'iac_DONT'
op|'('
name|'self'
op|','
name|'feature'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|iac_WILL
dedent|''
name|'def'
name|'iac_WILL'
op|'('
name|'self'
op|','
name|'feature'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|iac_WONT
dedent|''
name|'def'
name|'iac_WONT'
op|'('
name|'self'
op|','
name|'feature'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|iac_IP
dedent|''
name|'def'
name|'iac_IP'
op|'('
name|'self'
op|','
name|'feature'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|processLine
dedent|''
name|'def'
name|'processLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""I call a method that looks like \'telnet_*\' where \'*\' is filled\n        in by the current mode. telnet_* methods should return a string which\n        will become the new mode.  If None is returned, the mode will not change.\n        """'
newline|'\n'
name|'mode'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"telnet_"'
op|'+'
name|'self'
op|'.'
name|'mode'
op|')'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'mode'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mode'
op|'='
name|'mode'
newline|'\n'
nl|'\n'
DECL|member|telnet_User
dedent|''
dedent|''
name|'def'
name|'telnet_User'
op|'('
name|'self'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""I take a username, set it to the \'self.username\' attribute,\n        print out a password prompt, and switch to \'Password\' mode. If\n        you want to do something else when the username is received (ie,\n        create a new user if the user doesn\'t exist), override me."""'
newline|'\n'
name|'self'
op|'.'
name|'username'
op|'='
name|'user'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
name|'IAC'
op|'+'
name|'WILL'
op|'+'
name|'ECHO'
op|'+'
string|'"password: "'
op|')'
newline|'\n'
name|'return'
string|'"Password"'
newline|'\n'
nl|'\n'
DECL|member|telnet_Password
dedent|''
name|'def'
name|'telnet_Password'
op|'('
name|'self'
op|','
name|'paswd'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""I accept a password as an argument, and check it with the\n        checkUserAndPass method. If the login is successful, I call\n        loggedIn()."""'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
name|'IAC'
op|'+'
name|'WONT'
op|'+'
name|'ECHO'
op|'+'
string|'"*****\\r\\n"'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'checked'
op|'='
name|'self'
op|'.'
name|'checkUserAndPass'
op|'('
name|'self'
op|'.'
name|'username'
op|','
name|'paswd'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"Done"'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'checked'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"Done"'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'loggedIn'
op|'('
op|')'
newline|'\n'
name|'return'
string|'"Command"'
newline|'\n'
nl|'\n'
DECL|member|telnet_Command
dedent|''
name|'def'
name|'telnet_Command'
op|'('
name|'self'
op|','
name|'cmd'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The default \'command processing\' mode. You probably want to\n        override me."""'
newline|'\n'
name|'return'
string|'"Command"'
newline|'\n'
nl|'\n'
DECL|member|processChunk
dedent|''
name|'def'
name|'processChunk'
op|'('
name|'self'
op|','
name|'chunk'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""I take a chunk of data and delegate out to telnet_* methods\n        by way of processLine. If the current mode is \'Done\', I\'ll close\n        the connection. """'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
name|'self'
op|'.'
name|'buffer'
op|'+'
name|'chunk'
newline|'\n'
nl|'\n'
comment|'#yech.'
nl|'\n'
name|'for'
name|'delim'
name|'in'
name|'self'
op|'.'
name|'delimiters'
op|':'
newline|'\n'
indent|'            '
name|'idx'
op|'='
name|'self'
op|'.'
name|'buffer'
op|'.'
name|'find'
op|'('
name|'delim'
op|')'
newline|'\n'
name|'if'
name|'idx'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'while'
name|'idx'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'buf'
op|','
name|'self'
op|'.'
name|'buffer'
op|'='
name|'self'
op|'.'
name|'buffer'
op|'['
op|':'
name|'idx'
op|']'
op|','
name|'self'
op|'.'
name|'buffer'
op|'['
name|'idx'
op|'+'
number|'2'
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'processLine'
op|'('
name|'buf'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'mode'
op|'=='
string|"'Done'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'delim'
name|'in'
name|'self'
op|'.'
name|'delimiters'
op|':'
newline|'\n'
indent|'                '
name|'idx'
op|'='
name|'self'
op|'.'
name|'buffer'
op|'.'
name|'find'
op|'('
name|'delim'
op|')'
newline|'\n'
name|'if'
name|'idx'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'chunk'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
comment|'# silly little IAC state-machine'
nl|'\n'
name|'for'
name|'char'
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'gotIAC'
op|':'
newline|'\n'
comment|'# working on an IAC request state'
nl|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'iacByte'
op|':'
newline|'\n'
comment|"# we're in SB mode, getting a chunk"
nl|'\n'
indent|'                    '
name|'if'
name|'self'
op|'.'
name|'iacByte'
op|'=='
name|'SB'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'char'
op|'=='
name|'SE'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'iacSBchunk'
op|'('
name|'chunk'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
name|'chunk'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'iacByte'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'gotIAC'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'chunk'
op|'.'
name|'write'
op|'('
name|'char'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# got all I need to know state'
nl|'\n'
indent|'                        '
name|'try'
op|':'
newline|'\n'
indent|'                            '
name|'getattr'
op|'('
name|'self'
op|','
string|"'iac_%s'"
op|'%'
name|'iacBytes'
op|'['
name|'self'
op|'.'
name|'iacByte'
op|']'
op|')'
op|'('
name|'char'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                            '
name|'pass'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'iacByte'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'gotIAC'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# got IAC, this is my W/W/D/D (or perhaps sb)'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'iacByte'
op|'='
name|'char'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'char'
op|'=='
name|'IAC'
op|':'
newline|'\n'
comment|"# Process what I've got so far before going into"
nl|'\n'
comment|"# the IAC state; don't want to process characters"
nl|'\n'
comment|'# in an inconsistent state with what they were'
nl|'\n'
comment|'# received in.'
nl|'\n'
indent|'                '
name|'c'
op|'='
name|'chunk'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'if'
name|'c'
op|':'
newline|'\n'
indent|'                    '
name|'why'
op|'='
name|'self'
op|'.'
name|'processChunk'
op|'('
name|'c'
op|')'
newline|'\n'
name|'if'
name|'why'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'why'
newline|'\n'
dedent|''
name|'chunk'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'gotIAC'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'chunk'
op|'.'
name|'write'
op|'('
name|'char'
op|')'
newline|'\n'
comment|'# chunks are of a relatively indeterminate size.'
nl|'\n'
dedent|''
dedent|''
name|'c'
op|'='
name|'chunk'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'if'
name|'c'
op|':'
newline|'\n'
indent|'            '
name|'why'
op|'='
name|'self'
op|'.'
name|'processChunk'
op|'('
name|'c'
op|')'
newline|'\n'
name|'if'
name|'why'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'why'
newline|'\n'
nl|'\n'
DECL|member|loggedIn
dedent|''
dedent|''
dedent|''
name|'def'
name|'loggedIn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called after the user succesfully logged in.\n        \n        Override in subclasses.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.test.test_policies -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nResource limiting policies.\n\n@seealso: See also L{twisted.protocols.htb} for rate limiting.\n"""'
newline|'\n'
nl|'\n'
comment|'# system imports'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'operator'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'directlyProvides'
op|','
name|'providedBy'
newline|'\n'
nl|'\n'
comment|'# twisted imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'protocol'
name|'import'
name|'ServerFactory'
op|','
name|'Protocol'
op|','
name|'ClientFactory'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProtocolWrapper
name|'class'
name|'ProtocolWrapper'
op|'('
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wraps protocol instances and acts as their transport as well.\n\n    @ivar wrappedProtocol: An L{IProtocol} provider to which L{IProtocol}\n        method calls onto this L{ProtocolWrapper} will be proxied.\n\n    @ivar factory: The L{WrappingFactory} which created this\n        L{ProtocolWrapper}.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|disconnecting
name|'disconnecting'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'factory'
op|','
name|'wrappedProtocol'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'wrappedProtocol'
op|'='
name|'wrappedProtocol'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'='
name|'factory'
newline|'\n'
nl|'\n'
DECL|member|makeConnection
dedent|''
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When a connection is made, register this wrapper with its factory,\n        save the real transport, and connect the wrapped protocol to this\n        L{ProtocolWrapper} to intercept any transport calls it makes.\n        """'
newline|'\n'
name|'directlyProvides'
op|'('
name|'self'
op|','
name|'providedBy'
op|'('
name|'transport'
op|')'
op|')'
newline|'\n'
name|'Protocol'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'registerProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
comment|'# Transport relaying'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'writeSequence'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'disconnecting'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getPeer
dedent|''
name|'def'
name|'getPeer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|registerProducer
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'registerProducer'
op|'('
name|'producer'
op|','
name|'streaming'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopConsuming
dedent|''
name|'def'
name|'stopConsuming'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'stopConsuming'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'transport'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Protocol relaying'
nl|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'dataReceived'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'unregisterProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'connectionLost'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WrappingFactory
dedent|''
dedent|''
name|'class'
name|'WrappingFactory'
op|'('
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wraps a factory and its protocols, and keeps track of them."""'
newline|'\n'
nl|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'ProtocolWrapper'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'wrappedFactory'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'wrappedFactory'
op|'='
name|'wrappedFactory'
newline|'\n'
name|'self'
op|'.'
name|'protocols'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|doStart
dedent|''
name|'def'
name|'doStart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'wrappedFactory'
op|'.'
name|'doStart'
op|'('
op|')'
newline|'\n'
name|'ClientFactory'
op|'.'
name|'doStart'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|doStop
dedent|''
name|'def'
name|'doStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'wrappedFactory'
op|'.'
name|'doStop'
op|'('
op|')'
newline|'\n'
name|'ClientFactory'
op|'.'
name|'doStop'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startedConnecting
dedent|''
name|'def'
name|'startedConnecting'
op|'('
name|'self'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'wrappedFactory'
op|'.'
name|'startedConnecting'
op|'('
name|'connector'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
dedent|''
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'wrappedFactory'
op|'.'
name|'clientConnectionFailed'
op|'('
name|'connector'
op|','
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionLost
dedent|''
name|'def'
name|'clientConnectionLost'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'wrappedFactory'
op|'.'
name|'clientConnectionLost'
op|'('
name|'connector'
op|','
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'protocol'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'wrappedFactory'
op|'.'
name|'buildProtocol'
op|'('
name|'addr'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|registerProtocol
dedent|''
name|'def'
name|'registerProtocol'
op|'('
name|'self'
op|','
name|'p'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called by protocol to register itself."""'
newline|'\n'
name|'self'
op|'.'
name|'protocols'
op|'['
name|'p'
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|unregisterProtocol
dedent|''
name|'def'
name|'unregisterProtocol'
op|'('
name|'self'
op|','
name|'p'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called by protocols when they go away."""'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'protocols'
op|'['
name|'p'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ThrottlingProtocol
dedent|''
dedent|''
name|'class'
name|'ThrottlingProtocol'
op|'('
name|'ProtocolWrapper'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Protocol for ThrottlingFactory."""'
newline|'\n'
nl|'\n'
comment|'# wrap API for tracking bandwidth'
nl|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'registerWritten'
op|'('
name|'len'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
name|'ProtocolWrapper'
op|'.'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'seq'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'registerWritten'
op|'('
name|'reduce'
op|'('
name|'operator'
op|'.'
name|'add'
op|','
name|'map'
op|'('
name|'len'
op|','
name|'seq'
op|')'
op|')'
op|')'
newline|'\n'
name|'ProtocolWrapper'
op|'.'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'seq'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'registerRead'
op|'('
name|'len'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
name|'ProtocolWrapper'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|registerProducer
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'producer'
op|'='
name|'producer'
newline|'\n'
name|'ProtocolWrapper'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'self'
op|'.'
name|'producer'
newline|'\n'
name|'ProtocolWrapper'
op|'.'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|throttleReads
dedent|''
name|'def'
name|'throttleReads'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unthrottleReads
dedent|''
name|'def'
name|'unthrottleReads'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|throttleWrites
dedent|''
name|'def'
name|'throttleWrites'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"producer"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unthrottleWrites
dedent|''
dedent|''
name|'def'
name|'unthrottleWrites'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"producer"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ThrottlingFactory
dedent|''
dedent|''
dedent|''
name|'class'
name|'ThrottlingFactory'
op|'('
name|'WrappingFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Throttles bandwidth and number of connections.\n\n    Write bandwidth will only be throttled if there is a producer\n    registered.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'ThrottlingProtocol'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'wrappedFactory'
op|','
name|'maxConnectionCount'
op|'='
name|'sys'
op|'.'
name|'maxint'
op|','
nl|'\n'
name|'readLimit'
op|'='
name|'None'
op|','
name|'writeLimit'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'WrappingFactory'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'wrappedFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connectionCount'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'maxConnectionCount'
op|'='
name|'maxConnectionCount'
newline|'\n'
name|'self'
op|'.'
name|'readLimit'
op|'='
name|'readLimit'
comment|'# max bytes we should read per second'
newline|'\n'
name|'self'
op|'.'
name|'writeLimit'
op|'='
name|'writeLimit'
comment|'# max bytes we should write per second'
newline|'\n'
name|'self'
op|'.'
name|'readThisSecond'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'writtenThisSecond'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'unthrottleReadsID'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'checkReadBandwidthID'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'unthrottleWritesID'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'checkWriteBandwidthID'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callLater
dedent|''
name|'def'
name|'callLater'
op|'('
name|'self'
op|','
name|'period'
op|','
name|'func'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Wrapper around L{reactor.callLater} for test purpose.\n        """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'return'
name|'reactor'
op|'.'
name|'callLater'
op|'('
name|'period'
op|','
name|'func'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|registerWritten
dedent|''
name|'def'
name|'registerWritten'
op|'('
name|'self'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called by protocol to tell us more bytes were written.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'writtenThisSecond'
op|'+='
name|'length'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|registerRead
dedent|''
name|'def'
name|'registerRead'
op|'('
name|'self'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called by protocol to tell us more bytes were read.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'readThisSecond'
op|'+='
name|'length'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|checkReadBandwidth
dedent|''
name|'def'
name|'checkReadBandwidth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Checks if we\'ve passed bandwidth limits.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'readThisSecond'
op|'>'
name|'self'
op|'.'
name|'readLimit'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'throttleReads'
op|'('
op|')'
newline|'\n'
name|'throttleTime'
op|'='
op|'('
name|'float'
op|'('
name|'self'
op|'.'
name|'readThisSecond'
op|')'
op|'/'
name|'self'
op|'.'
name|'readLimit'
op|')'
op|'-'
number|'1.0'
newline|'\n'
name|'self'
op|'.'
name|'unthrottleReadsID'
op|'='
name|'self'
op|'.'
name|'callLater'
op|'('
name|'throttleTime'
op|','
nl|'\n'
name|'self'
op|'.'
name|'unthrottleReads'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'readThisSecond'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'checkReadBandwidthID'
op|'='
name|'self'
op|'.'
name|'callLater'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'checkReadBandwidth'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|checkWriteBandwidth
dedent|''
name|'def'
name|'checkWriteBandwidth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'writtenThisSecond'
op|'>'
name|'self'
op|'.'
name|'writeLimit'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'throttleWrites'
op|'('
op|')'
newline|'\n'
name|'throttleTime'
op|'='
op|'('
name|'float'
op|'('
name|'self'
op|'.'
name|'writtenThisSecond'
op|')'
op|'/'
name|'self'
op|'.'
name|'writeLimit'
op|')'
op|'-'
number|'1.0'
newline|'\n'
name|'self'
op|'.'
name|'unthrottleWritesID'
op|'='
name|'self'
op|'.'
name|'callLater'
op|'('
name|'throttleTime'
op|','
nl|'\n'
name|'self'
op|'.'
name|'unthrottleWrites'
op|')'
newline|'\n'
comment|'# reset for next round'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'writtenThisSecond'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'checkWriteBandwidthID'
op|'='
name|'self'
op|'.'
name|'callLater'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'checkWriteBandwidth'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|throttleReads
dedent|''
name|'def'
name|'throttleReads'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Throttle reads on all protocols.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Throttling reads on %s"'
op|'%'
name|'self'
op|')'
newline|'\n'
name|'for'
name|'p'
name|'in'
name|'self'
op|'.'
name|'protocols'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'throttleReads'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unthrottleReads
dedent|''
dedent|''
name|'def'
name|'unthrottleReads'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop throttling reads on all protocols.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'unthrottleReadsID'
op|'='
name|'None'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Stopped throttling reads on %s"'
op|'%'
name|'self'
op|')'
newline|'\n'
name|'for'
name|'p'
name|'in'
name|'self'
op|'.'
name|'protocols'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'unthrottleReads'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|throttleWrites
dedent|''
dedent|''
name|'def'
name|'throttleWrites'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Throttle writes on all protocols.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Throttling writes on %s"'
op|'%'
name|'self'
op|')'
newline|'\n'
name|'for'
name|'p'
name|'in'
name|'self'
op|'.'
name|'protocols'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'throttleWrites'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unthrottleWrites
dedent|''
dedent|''
name|'def'
name|'unthrottleWrites'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop throttling writes on all protocols.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'unthrottleWritesID'
op|'='
name|'None'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Stopped throttling writes on %s"'
op|'%'
name|'self'
op|')'
newline|'\n'
name|'for'
name|'p'
name|'in'
name|'self'
op|'.'
name|'protocols'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'unthrottleWrites'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'connectionCount'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'readLimit'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'checkReadBandwidth'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'writeLimit'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'checkWriteBandwidth'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'connectionCount'
op|'<'
name|'self'
op|'.'
name|'maxConnectionCount'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connectionCount'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'WrappingFactory'
op|'.'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Max connection count reached!"'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unregisterProtocol
dedent|''
dedent|''
name|'def'
name|'unregisterProtocol'
op|'('
name|'self'
op|','
name|'p'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'WrappingFactory'
op|'.'
name|'unregisterProtocol'
op|'('
name|'self'
op|','
name|'p'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connectionCount'
op|'-='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'connectionCount'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'unthrottleReadsID'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'unthrottleReadsID'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'checkReadBandwidthID'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'checkReadBandwidthID'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'unthrottleWritesID'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'unthrottleWritesID'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'checkWriteBandwidthID'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'checkWriteBandwidthID'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SpewingProtocol
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'SpewingProtocol'
op|'('
name|'ProtocolWrapper'
op|')'
op|':'
newline|'\n'
DECL|member|dataReceived
indent|'    '
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Received: %r"'
op|'%'
name|'data'
op|')'
newline|'\n'
name|'ProtocolWrapper'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Sending: %r"'
op|'%'
name|'data'
op|')'
newline|'\n'
name|'ProtocolWrapper'
op|'.'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SpewingFactory
dedent|''
dedent|''
name|'class'
name|'SpewingFactory'
op|'('
name|'WrappingFactory'
op|')'
op|':'
newline|'\n'
DECL|variable|protocol
indent|'    '
name|'protocol'
op|'='
name|'SpewingProtocol'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LimitConnectionsByPeer
dedent|''
name|'class'
name|'LimitConnectionsByPeer'
op|'('
name|'WrappingFactory'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|maxConnectionsPerPeer
indent|'    '
name|'maxConnectionsPerPeer'
op|'='
number|'5'
newline|'\n'
nl|'\n'
DECL|member|startFactory
name|'def'
name|'startFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'peerConnections'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'peerHost'
op|'='
name|'addr'
op|'['
number|'0'
op|']'
newline|'\n'
name|'connectionCount'
op|'='
name|'self'
op|'.'
name|'peerConnections'
op|'.'
name|'get'
op|'('
name|'peerHost'
op|','
number|'0'
op|')'
newline|'\n'
name|'if'
name|'connectionCount'
op|'>='
name|'self'
op|'.'
name|'maxConnectionsPerPeer'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'peerConnections'
op|'['
name|'peerHost'
op|']'
op|'='
name|'connectionCount'
op|'+'
number|'1'
newline|'\n'
name|'return'
name|'WrappingFactory'
op|'.'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterProtocol
dedent|''
name|'def'
name|'unregisterProtocol'
op|'('
name|'self'
op|','
name|'p'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'peerHost'
op|'='
name|'p'
op|'.'
name|'getPeer'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'peerConnections'
op|'['
name|'peerHost'
op|']'
op|'-='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'peerConnections'
op|'['
name|'peerHost'
op|']'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'peerConnections'
op|'['
name|'peerHost'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LimitTotalConnectionsFactory
dedent|''
dedent|''
dedent|''
name|'class'
name|'LimitTotalConnectionsFactory'
op|'('
name|'ServerFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Factory that limits the number of simultaneous connections.\n\n    @type connectionCount: C{int}\n    @ivar connectionCount: number of current connections.\n    @type connectionLimit: C{int} or C{None}\n    @cvar connectionLimit: maximum number of connections.\n    @type overflowProtocol: L{Protocol} or C{None}\n    @cvar overflowProtocol: Protocol to use for new connections when\n        connectionLimit is exceeded.  If C{None} (the default value), excess\n        connections will be closed immediately.\n    """'
newline|'\n'
DECL|variable|connectionCount
name|'connectionCount'
op|'='
number|'0'
newline|'\n'
DECL|variable|connectionLimit
name|'connectionLimit'
op|'='
name|'None'
newline|'\n'
DECL|variable|overflowProtocol
name|'overflowProtocol'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'self'
op|'.'
name|'connectionLimit'
name|'is'
name|'None'
name|'or'
nl|'\n'
name|'self'
op|'.'
name|'connectionCount'
op|'<'
name|'self'
op|'.'
name|'connectionLimit'
op|')'
op|':'
newline|'\n'
comment|'# Build the normal protocol'
nl|'\n'
indent|'                '
name|'wrappedProtocol'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'overflowProtocol'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# Just drop the connection'
nl|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Too many connections, so build the overflow protocol'
nl|'\n'
indent|'            '
name|'wrappedProtocol'
op|'='
name|'self'
op|'.'
name|'overflowProtocol'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'wrappedProtocol'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'protocol'
op|'='
name|'ProtocolWrapper'
op|'('
name|'self'
op|','
name|'wrappedProtocol'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connectionCount'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'protocol'
newline|'\n'
nl|'\n'
DECL|member|registerProtocol
dedent|''
name|'def'
name|'registerProtocol'
op|'('
name|'self'
op|','
name|'p'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unregisterProtocol
dedent|''
name|'def'
name|'unregisterProtocol'
op|'('
name|'self'
op|','
name|'p'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connectionCount'
op|'-='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TimeoutProtocol
dedent|''
dedent|''
name|'class'
name|'TimeoutProtocol'
op|'('
name|'ProtocolWrapper'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Protocol that automatically disconnects when the connection is idle.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'factory'
op|','
name|'wrappedProtocol'
op|','
name|'timeoutPeriod'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Constructor.\n\n        @param factory: An L{IFactory}.\n        @param wrappedProtocol: A L{Protocol} to wrapp.\n        @param timeoutPeriod: Number of seconds to wait for activity before\n            timing out.\n        """'
newline|'\n'
name|'ProtocolWrapper'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'factory'
op|','
name|'wrappedProtocol'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'timeoutCall'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'timeoutPeriod'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setTimeout
dedent|''
name|'def'
name|'setTimeout'
op|'('
name|'self'
op|','
name|'timeoutPeriod'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set a timeout.\n\n        This will cancel any existing timeouts.\n\n        @param timeoutPeriod: If not C{None}, change the timeout period.\n            Otherwise, use the existing value.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'cancelTimeout'
op|'('
op|')'
newline|'\n'
name|'if'
name|'timeoutPeriod'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'timeoutPeriod'
op|'='
name|'timeoutPeriod'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'timeoutCall'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'callLater'
op|'('
name|'self'
op|'.'
name|'timeoutPeriod'
op|','
name|'self'
op|'.'
name|'timeoutFunc'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cancelTimeout
dedent|''
name|'def'
name|'cancelTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Cancel the timeout.\n\n        If the timeout was already cancelled, this does nothing.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'timeoutCall'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'timeoutCall'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'error'
op|'.'
name|'AlreadyCalled'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'timeoutCall'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|resetTimeout
dedent|''
dedent|''
name|'def'
name|'resetTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reset the timeout, usually because some activity just happened.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'timeoutCall'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'timeoutCall'
op|'.'
name|'reset'
op|'('
name|'self'
op|'.'
name|'timeoutPeriod'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
name|'ProtocolWrapper'
op|'.'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'seq'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
name|'ProtocolWrapper'
op|'.'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'seq'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
name|'ProtocolWrapper'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cancelTimeout'
op|'('
op|')'
newline|'\n'
name|'ProtocolWrapper'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|timeoutFunc
dedent|''
name|'def'
name|'timeoutFunc'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This method is called when the timeout is triggered.\n\n        By default it calls L{loseConnection}.  Override this if you want\n        something else to happen.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TimeoutFactory
dedent|''
dedent|''
name|'class'
name|'TimeoutFactory'
op|'('
name|'WrappingFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Factory for TimeoutWrapper.\n    """'
newline|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'TimeoutProtocol'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'wrappedFactory'
op|','
name|'timeoutPeriod'
op|'='
number|'30'
op|'*'
number|'60'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'timeoutPeriod'
op|'='
name|'timeoutPeriod'
newline|'\n'
name|'WrappingFactory'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'wrappedFactory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'protocol'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'wrappedFactory'
op|'.'
name|'buildProtocol'
op|'('
name|'addr'
op|')'
op|','
nl|'\n'
name|'timeoutPeriod'
op|'='
name|'self'
op|'.'
name|'timeoutPeriod'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callLater
dedent|''
name|'def'
name|'callLater'
op|'('
name|'self'
op|','
name|'period'
op|','
name|'func'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Wrapper around L{reactor.callLater} for test purpose.\n        """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'return'
name|'reactor'
op|'.'
name|'callLater'
op|'('
name|'period'
op|','
name|'func'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TrafficLoggingProtocol
dedent|''
dedent|''
name|'class'
name|'TrafficLoggingProtocol'
op|'('
name|'ProtocolWrapper'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'factory'
op|','
name|'wrappedProtocol'
op|','
name|'logfile'
op|','
name|'lengthLimit'
op|'='
name|'None'
op|','
nl|'\n'
name|'number'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param factory: factory which created this protocol.\n        @type factory: C{protocol.Factory}.\n        @param wrappedProtocol: the underlying protocol.\n        @type wrappedProtocol: C{protocol.Protocol}.\n        @param logfile: file opened for writing used to write log messages.\n        @type logfile: C{file}\n        @param lengthLimit: maximum size of the datareceived logged.\n        @type lengthLimit: C{int}\n        @param number: identifier of the connection.\n        @type number: C{int}.\n        """'
newline|'\n'
name|'ProtocolWrapper'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'factory'
op|','
name|'wrappedProtocol'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logfile'
op|'='
name|'logfile'
newline|'\n'
name|'self'
op|'.'
name|'lengthLimit'
op|'='
name|'lengthLimit'
newline|'\n'
name|'self'
op|'.'
name|'_number'
op|'='
name|'number'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_log
dedent|''
name|'def'
name|'_log'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'logfile'
op|'.'
name|'write'
op|'('
name|'line'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logfile'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_mungeData
dedent|''
name|'def'
name|'_mungeData'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'lengthLimit'
name|'and'
name|'len'
op|'('
name|'data'
op|')'
op|'>'
name|'self'
op|'.'
name|'lengthLimit'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
name|'data'
op|'['
op|':'
name|'self'
op|'.'
name|'lengthLimit'
op|'-'
number|'12'
op|']'
op|'+'
string|"'<... elided>'"
newline|'\n'
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# IProtocol'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_log'
op|'('
string|"'*'"
op|')'
newline|'\n'
name|'return'
name|'ProtocolWrapper'
op|'.'
name|'connectionMade'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_log'
op|'('
string|"'C %d: %r'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_number'
op|','
name|'self'
op|'.'
name|'_mungeData'
op|'('
name|'data'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'ProtocolWrapper'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_log'
op|'('
string|"'C %d: %r'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_number'
op|','
name|'reason'
op|')'
op|')'
newline|'\n'
name|'return'
name|'ProtocolWrapper'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# ITransport'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_log'
op|'('
string|"'S %d: %r'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_number'
op|','
name|'self'
op|'.'
name|'_mungeData'
op|'('
name|'data'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'ProtocolWrapper'
op|'.'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'iovec'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_log'
op|'('
string|"'SV %d: %r'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_number'
op|','
op|'['
name|'self'
op|'.'
name|'_mungeData'
op|'('
name|'d'
op|')'
name|'for'
name|'d'
name|'in'
name|'iovec'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'ProtocolWrapper'
op|'.'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'iovec'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_log'
op|'('
string|"'S %d: *'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_number'
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'ProtocolWrapper'
op|'.'
name|'loseConnection'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TrafficLoggingFactory
dedent|''
dedent|''
name|'class'
name|'TrafficLoggingFactory'
op|'('
name|'WrappingFactory'
op|')'
op|':'
newline|'\n'
DECL|variable|protocol
indent|'    '
name|'protocol'
op|'='
name|'TrafficLoggingProtocol'
newline|'\n'
nl|'\n'
DECL|variable|_counter
name|'_counter'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'wrappedFactory'
op|','
name|'logfilePrefix'
op|','
name|'lengthLimit'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'logfilePrefix'
op|'='
name|'logfilePrefix'
newline|'\n'
name|'self'
op|'.'
name|'lengthLimit'
op|'='
name|'lengthLimit'
newline|'\n'
name|'WrappingFactory'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'wrappedFactory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|open
dedent|''
name|'def'
name|'open'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'file'
op|'('
name|'name'
op|','
string|"'w'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_counter'
op|'+='
number|'1'
newline|'\n'
name|'logfile'
op|'='
name|'self'
op|'.'
name|'open'
op|'('
name|'self'
op|'.'
name|'logfilePrefix'
op|'+'
string|"'-'"
op|'+'
name|'str'
op|'('
name|'self'
op|'.'
name|'_counter'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'protocol'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'wrappedFactory'
op|'.'
name|'buildProtocol'
op|'('
name|'addr'
op|')'
op|','
nl|'\n'
name|'logfile'
op|','
name|'self'
op|'.'
name|'lengthLimit'
op|','
name|'self'
op|'.'
name|'_counter'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|resetCounter
dedent|''
name|'def'
name|'resetCounter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reset the value of the counter used to identify connections.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_counter'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TimeoutMixin
dedent|''
dedent|''
name|'class'
name|'TimeoutMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""Mixin for protocols which wish to timeout connections\n\n    @cvar timeOut: The number of seconds after which to timeout the connection.\n    """'
newline|'\n'
DECL|variable|timeOut
name|'timeOut'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|__timeoutCall
name|'__timeoutCall'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|callLater
name|'def'
name|'callLater'
op|'('
name|'self'
op|','
name|'period'
op|','
name|'func'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'return'
name|'reactor'
op|'.'
name|'callLater'
op|'('
name|'period'
op|','
name|'func'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|resetTimeout
dedent|''
name|'def'
name|'resetTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset the timeout count down"""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'__timeoutCall'
name|'is'
name|'not'
name|'None'
name|'and'
name|'self'
op|'.'
name|'timeOut'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__timeoutCall'
op|'.'
name|'reset'
op|'('
name|'self'
op|'.'
name|'timeOut'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setTimeout
dedent|''
dedent|''
name|'def'
name|'setTimeout'
op|'('
name|'self'
op|','
name|'period'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Change the timeout period\n\n        @type period: C{int} or C{NoneType}\n        @param period: The period, in seconds, to change the timeout to, or\n        C{None} to disable the timeout.\n        """'
newline|'\n'
name|'prev'
op|'='
name|'self'
op|'.'
name|'timeOut'
newline|'\n'
name|'self'
op|'.'
name|'timeOut'
op|'='
name|'period'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'__timeoutCall'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'period'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'__timeoutCall'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'__timeoutCall'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'__timeoutCall'
op|'.'
name|'reset'
op|'('
name|'period'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'period'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__timeoutCall'
op|'='
name|'self'
op|'.'
name|'callLater'
op|'('
name|'period'
op|','
name|'self'
op|'.'
name|'__timedOut'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'prev'
newline|'\n'
nl|'\n'
DECL|member|__timedOut
dedent|''
name|'def'
name|'__timedOut'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__timeoutCall'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'timeoutConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|timeoutConnection
dedent|''
name|'def'
name|'timeoutConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when the connection times out.\n        Override to define behavior other than dropping the connection.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.test.test_ftp -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nAn FTP protocol implementation\n\n@author: Itamar Shtull-Trauring\n@author: Jp Calderone\n@author: Andrew Bennetts\n"""'
newline|'\n'
nl|'\n'
comment|'# System Imports'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'operator'
newline|'\n'
name|'import'
name|'stat'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'fnmatch'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pwd'
op|','
name|'grp'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'pwd'
op|'='
name|'grp'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'Interface'
op|','
name|'implements'
newline|'\n'
nl|'\n'
comment|'# Twisted Imports'
nl|'\n'
name|'from'
name|'twisted'
name|'import'
name|'copyright'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
op|','
name|'interfaces'
op|','
name|'protocol'
op|','
name|'error'
op|','
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
op|','
name|'policies'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'failure'
op|','
name|'filepath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'reduce'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'error'
name|'as'
name|'cred_error'
op|','
name|'portal'
op|','
name|'credentials'
op|','
name|'checkers'
newline|'\n'
nl|'\n'
comment|'# constants'
nl|'\n'
comment|'# response codes'
nl|'\n'
nl|'\n'
DECL|variable|RESTART_MARKER_REPLY
name|'RESTART_MARKER_REPLY'
op|'='
string|'"100"'
newline|'\n'
DECL|variable|SERVICE_READY_IN_N_MINUTES
name|'SERVICE_READY_IN_N_MINUTES'
op|'='
string|'"120"'
newline|'\n'
DECL|variable|DATA_CNX_ALREADY_OPEN_START_XFR
name|'DATA_CNX_ALREADY_OPEN_START_XFR'
op|'='
string|'"125"'
newline|'\n'
DECL|variable|FILE_STATUS_OK_OPEN_DATA_CNX
name|'FILE_STATUS_OK_OPEN_DATA_CNX'
op|'='
string|'"150"'
newline|'\n'
nl|'\n'
DECL|variable|CMD_OK
name|'CMD_OK'
op|'='
string|'"200.1"'
newline|'\n'
DECL|variable|TYPE_SET_OK
name|'TYPE_SET_OK'
op|'='
string|'"200.2"'
newline|'\n'
DECL|variable|ENTERING_PORT_MODE
name|'ENTERING_PORT_MODE'
op|'='
string|'"200.3"'
newline|'\n'
DECL|variable|CMD_NOT_IMPLMNTD_SUPERFLUOUS
name|'CMD_NOT_IMPLMNTD_SUPERFLUOUS'
op|'='
string|'"202"'
newline|'\n'
DECL|variable|SYS_STATUS_OR_HELP_REPLY
name|'SYS_STATUS_OR_HELP_REPLY'
op|'='
string|'"211"'
newline|'\n'
DECL|variable|DIR_STATUS
name|'DIR_STATUS'
op|'='
string|'"212"'
newline|'\n'
DECL|variable|FILE_STATUS
name|'FILE_STATUS'
op|'='
string|'"213"'
newline|'\n'
DECL|variable|HELP_MSG
name|'HELP_MSG'
op|'='
string|'"214"'
newline|'\n'
DECL|variable|NAME_SYS_TYPE
name|'NAME_SYS_TYPE'
op|'='
string|'"215"'
newline|'\n'
DECL|variable|SVC_READY_FOR_NEW_USER
name|'SVC_READY_FOR_NEW_USER'
op|'='
string|'"220.1"'
newline|'\n'
DECL|variable|WELCOME_MSG
name|'WELCOME_MSG'
op|'='
string|'"220.2"'
newline|'\n'
DECL|variable|SVC_CLOSING_CTRL_CNX
name|'SVC_CLOSING_CTRL_CNX'
op|'='
string|'"221"'
newline|'\n'
DECL|variable|GOODBYE_MSG
name|'GOODBYE_MSG'
op|'='
string|'"221"'
newline|'\n'
DECL|variable|DATA_CNX_OPEN_NO_XFR_IN_PROGRESS
name|'DATA_CNX_OPEN_NO_XFR_IN_PROGRESS'
op|'='
string|'"225"'
newline|'\n'
DECL|variable|CLOSING_DATA_CNX
name|'CLOSING_DATA_CNX'
op|'='
string|'"226"'
newline|'\n'
DECL|variable|TXFR_COMPLETE_OK
name|'TXFR_COMPLETE_OK'
op|'='
string|'"226"'
newline|'\n'
DECL|variable|ENTERING_PASV_MODE
name|'ENTERING_PASV_MODE'
op|'='
string|'"227"'
newline|'\n'
DECL|variable|ENTERING_EPSV_MODE
name|'ENTERING_EPSV_MODE'
op|'='
string|'"229"'
newline|'\n'
DECL|variable|USR_LOGGED_IN_PROCEED
name|'USR_LOGGED_IN_PROCEED'
op|'='
string|'"230.1"'
comment|'# v1 of code 230'
newline|'\n'
DECL|variable|GUEST_LOGGED_IN_PROCEED
name|'GUEST_LOGGED_IN_PROCEED'
op|'='
string|'"230.2"'
comment|'# v2 of code 230'
newline|'\n'
DECL|variable|REQ_FILE_ACTN_COMPLETED_OK
name|'REQ_FILE_ACTN_COMPLETED_OK'
op|'='
string|'"250"'
newline|'\n'
DECL|variable|PWD_REPLY
name|'PWD_REPLY'
op|'='
string|'"257.1"'
newline|'\n'
DECL|variable|MKD_REPLY
name|'MKD_REPLY'
op|'='
string|'"257.2"'
newline|'\n'
nl|'\n'
DECL|variable|USR_NAME_OK_NEED_PASS
name|'USR_NAME_OK_NEED_PASS'
op|'='
string|'"331.1"'
comment|'# v1 of Code 331'
newline|'\n'
DECL|variable|GUEST_NAME_OK_NEED_EMAIL
name|'GUEST_NAME_OK_NEED_EMAIL'
op|'='
string|'"331.2"'
comment|'# v2 of code 331'
newline|'\n'
DECL|variable|NEED_ACCT_FOR_LOGIN
name|'NEED_ACCT_FOR_LOGIN'
op|'='
string|'"332"'
newline|'\n'
DECL|variable|REQ_FILE_ACTN_PENDING_FURTHER_INFO
name|'REQ_FILE_ACTN_PENDING_FURTHER_INFO'
op|'='
string|'"350"'
newline|'\n'
nl|'\n'
DECL|variable|SVC_NOT_AVAIL_CLOSING_CTRL_CNX
name|'SVC_NOT_AVAIL_CLOSING_CTRL_CNX'
op|'='
string|'"421.1"'
newline|'\n'
DECL|variable|TOO_MANY_CONNECTIONS
name|'TOO_MANY_CONNECTIONS'
op|'='
string|'"421.2"'
newline|'\n'
DECL|variable|CANT_OPEN_DATA_CNX
name|'CANT_OPEN_DATA_CNX'
op|'='
string|'"425"'
newline|'\n'
DECL|variable|CNX_CLOSED_TXFR_ABORTED
name|'CNX_CLOSED_TXFR_ABORTED'
op|'='
string|'"426"'
newline|'\n'
DECL|variable|REQ_ACTN_ABRTD_FILE_UNAVAIL
name|'REQ_ACTN_ABRTD_FILE_UNAVAIL'
op|'='
string|'"450"'
newline|'\n'
DECL|variable|REQ_ACTN_ABRTD_LOCAL_ERR
name|'REQ_ACTN_ABRTD_LOCAL_ERR'
op|'='
string|'"451"'
newline|'\n'
DECL|variable|REQ_ACTN_ABRTD_INSUFF_STORAGE
name|'REQ_ACTN_ABRTD_INSUFF_STORAGE'
op|'='
string|'"452"'
newline|'\n'
nl|'\n'
DECL|variable|SYNTAX_ERR
name|'SYNTAX_ERR'
op|'='
string|'"500"'
newline|'\n'
DECL|variable|SYNTAX_ERR_IN_ARGS
name|'SYNTAX_ERR_IN_ARGS'
op|'='
string|'"501"'
newline|'\n'
DECL|variable|CMD_NOT_IMPLMNTD
name|'CMD_NOT_IMPLMNTD'
op|'='
string|'"502"'
newline|'\n'
DECL|variable|BAD_CMD_SEQ
name|'BAD_CMD_SEQ'
op|'='
string|'"503"'
newline|'\n'
DECL|variable|CMD_NOT_IMPLMNTD_FOR_PARAM
name|'CMD_NOT_IMPLMNTD_FOR_PARAM'
op|'='
string|'"504"'
newline|'\n'
DECL|variable|NOT_LOGGED_IN
name|'NOT_LOGGED_IN'
op|'='
string|'"530.1"'
comment|'# v1 of code 530 - please log in'
newline|'\n'
DECL|variable|AUTH_FAILURE
name|'AUTH_FAILURE'
op|'='
string|'"530.2"'
comment|'# v2 of code 530 - authorization failure'
newline|'\n'
DECL|variable|NEED_ACCT_FOR_STOR
name|'NEED_ACCT_FOR_STOR'
op|'='
string|'"532"'
newline|'\n'
DECL|variable|FILE_NOT_FOUND
name|'FILE_NOT_FOUND'
op|'='
string|'"550.1"'
comment|'# no such file or directory'
newline|'\n'
DECL|variable|PERMISSION_DENIED
name|'PERMISSION_DENIED'
op|'='
string|'"550.2"'
comment|'# permission denied'
newline|'\n'
DECL|variable|ANON_USER_DENIED
name|'ANON_USER_DENIED'
op|'='
string|'"550.3"'
comment|"# anonymous users can't alter filesystem"
newline|'\n'
DECL|variable|IS_NOT_A_DIR
name|'IS_NOT_A_DIR'
op|'='
string|'"550.4"'
comment|'# rmd called on a path that is not a directory'
newline|'\n'
DECL|variable|REQ_ACTN_NOT_TAKEN
name|'REQ_ACTN_NOT_TAKEN'
op|'='
string|'"550.5"'
newline|'\n'
DECL|variable|FILE_EXISTS
name|'FILE_EXISTS'
op|'='
string|'"550.6"'
newline|'\n'
DECL|variable|IS_A_DIR
name|'IS_A_DIR'
op|'='
string|'"550.7"'
newline|'\n'
DECL|variable|PAGE_TYPE_UNK
name|'PAGE_TYPE_UNK'
op|'='
string|'"551"'
newline|'\n'
DECL|variable|EXCEEDED_STORAGE_ALLOC
name|'EXCEEDED_STORAGE_ALLOC'
op|'='
string|'"552"'
newline|'\n'
DECL|variable|FILENAME_NOT_ALLOWED
name|'FILENAME_NOT_ALLOWED'
op|'='
string|'"553"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|RESPONSE
name|'RESPONSE'
op|'='
op|'{'
nl|'\n'
comment|"# -- 100's --"
nl|'\n'
name|'RESTART_MARKER_REPLY'
op|':'
string|"'110 MARK yyyy-mmmm'"
op|','
comment|'# TODO: this must be fixed'
nl|'\n'
name|'SERVICE_READY_IN_N_MINUTES'
op|':'
string|"'120 service ready in %s minutes'"
op|','
nl|'\n'
name|'DATA_CNX_ALREADY_OPEN_START_XFR'
op|':'
string|"'125 Data connection already open, starting transfer'"
op|','
nl|'\n'
name|'FILE_STATUS_OK_OPEN_DATA_CNX'
op|':'
string|"'150 File status okay; about to open data connection.'"
op|','
nl|'\n'
nl|'\n'
comment|"# -- 200's --"
nl|'\n'
name|'CMD_OK'
op|':'
string|"'200 Command OK'"
op|','
nl|'\n'
name|'TYPE_SET_OK'
op|':'
string|"'200 Type set to %s.'"
op|','
nl|'\n'
name|'ENTERING_PORT_MODE'
op|':'
string|"'200 PORT OK'"
op|','
nl|'\n'
name|'CMD_NOT_IMPLMNTD_SUPERFLUOUS'
op|':'
string|"'202 Command not implemented, superfluous at this site'"
op|','
nl|'\n'
name|'SYS_STATUS_OR_HELP_REPLY'
op|':'
string|"'211 System status reply'"
op|','
nl|'\n'
name|'DIR_STATUS'
op|':'
string|"'212 %s'"
op|','
nl|'\n'
name|'FILE_STATUS'
op|':'
string|"'213 %s'"
op|','
nl|'\n'
name|'HELP_MSG'
op|':'
string|"'214 help: %s'"
op|','
nl|'\n'
name|'NAME_SYS_TYPE'
op|':'
string|"'215 UNIX Type: L8'"
op|','
nl|'\n'
name|'WELCOME_MSG'
op|':'
string|'"220 %s"'
op|','
nl|'\n'
name|'SVC_READY_FOR_NEW_USER'
op|':'
string|"'220 Service ready'"
op|','
nl|'\n'
name|'GOODBYE_MSG'
op|':'
string|"'221 Goodbye.'"
op|','
nl|'\n'
name|'DATA_CNX_OPEN_NO_XFR_IN_PROGRESS'
op|':'
string|"'225 data connection open, no transfer in progress'"
op|','
nl|'\n'
name|'CLOSING_DATA_CNX'
op|':'
string|"'226 Abort successful'"
op|','
nl|'\n'
name|'TXFR_COMPLETE_OK'
op|':'
string|"'226 Transfer Complete.'"
op|','
nl|'\n'
name|'ENTERING_PASV_MODE'
op|':'
string|"'227 Entering Passive Mode (%s).'"
op|','
nl|'\n'
name|'ENTERING_EPSV_MODE'
op|':'
string|"'229 Entering Extended Passive Mode (|||%s|).'"
op|','
comment|"# where is epsv defined in the rfc's?"
nl|'\n'
name|'USR_LOGGED_IN_PROCEED'
op|':'
string|"'230 User logged in, proceed'"
op|','
nl|'\n'
name|'GUEST_LOGGED_IN_PROCEED'
op|':'
string|"'230 Anonymous login ok, access restrictions apply.'"
op|','
nl|'\n'
name|'REQ_FILE_ACTN_COMPLETED_OK'
op|':'
string|"'250 Requested File Action Completed OK'"
op|','
comment|'#i.e. CWD completed ok'
nl|'\n'
name|'PWD_REPLY'
op|':'
string|'\'257 "%s"\''
op|','
nl|'\n'
name|'MKD_REPLY'
op|':'
string|'\'257 "%s" created\''
op|','
nl|'\n'
nl|'\n'
comment|"# -- 300's --"
nl|'\n'
string|"'userotp'"
op|':'
string|"'331 Response to %s.'"
op|','
comment|'# ???'
nl|'\n'
name|'USR_NAME_OK_NEED_PASS'
op|':'
string|"'331 Password required for %s.'"
op|','
nl|'\n'
name|'GUEST_NAME_OK_NEED_EMAIL'
op|':'
string|"'331 Guest login ok, type your email address as password.'"
op|','
nl|'\n'
nl|'\n'
name|'REQ_FILE_ACTN_PENDING_FURTHER_INFO'
op|':'
string|"'350 Requested file action pending further information.'"
op|','
nl|'\n'
nl|'\n'
comment|"# -- 400's --"
nl|'\n'
name|'SVC_NOT_AVAIL_CLOSING_CTRL_CNX'
op|':'
string|"'421 Service not available, closing control connection.'"
op|','
nl|'\n'
name|'TOO_MANY_CONNECTIONS'
op|':'
string|"'421 Too many users right now, try again in a few minutes.'"
op|','
nl|'\n'
name|'CANT_OPEN_DATA_CNX'
op|':'
string|'"425 Can\'t open data connection."'
op|','
nl|'\n'
name|'CNX_CLOSED_TXFR_ABORTED'
op|':'
string|"'426 Transfer aborted.  Data connection closed.'"
op|','
nl|'\n'
nl|'\n'
name|'REQ_ACTN_ABRTD_LOCAL_ERR'
op|':'
string|"'451 Requested action aborted. Local error in processing.'"
op|','
nl|'\n'
nl|'\n'
nl|'\n'
comment|"# -- 500's --"
nl|'\n'
name|'SYNTAX_ERR'
op|':'
string|'"500 Syntax error: %s"'
op|','
nl|'\n'
name|'SYNTAX_ERR_IN_ARGS'
op|':'
string|"'501 syntax error in argument(s) %s.'"
op|','
nl|'\n'
name|'CMD_NOT_IMPLMNTD'
op|':'
string|'"502 Command \'%s\' not implemented"'
op|','
nl|'\n'
name|'BAD_CMD_SEQ'
op|':'
string|"'503 Incorrect sequence of commands: %s'"
op|','
nl|'\n'
name|'CMD_NOT_IMPLMNTD_FOR_PARAM'
op|':'
string|'"504 Not implemented for parameter \'%s\'."'
op|','
nl|'\n'
name|'NOT_LOGGED_IN'
op|':'
string|"'530 Please login with USER and PASS.'"
op|','
nl|'\n'
name|'AUTH_FAILURE'
op|':'
string|"'530 Sorry, Authentication failed.'"
op|','
nl|'\n'
name|'NEED_ACCT_FOR_STOR'
op|':'
string|"'532 Need an account for storing files'"
op|','
nl|'\n'
name|'FILE_NOT_FOUND'
op|':'
string|"'550 %s: No such file or directory.'"
op|','
nl|'\n'
name|'PERMISSION_DENIED'
op|':'
string|"'550 %s: Permission denied.'"
op|','
nl|'\n'
name|'ANON_USER_DENIED'
op|':'
string|"'550 Anonymous users are forbidden to change the filesystem'"
op|','
nl|'\n'
name|'IS_NOT_A_DIR'
op|':'
string|"'550 Cannot rmd, %s is not a directory'"
op|','
nl|'\n'
name|'FILE_EXISTS'
op|':'
string|"'550 %s: File exists'"
op|','
nl|'\n'
name|'IS_A_DIR'
op|':'
string|"'550 %s: is a directory'"
op|','
nl|'\n'
name|'REQ_ACTN_NOT_TAKEN'
op|':'
string|"'550 Requested action not taken: %s'"
op|','
nl|'\n'
name|'EXCEEDED_STORAGE_ALLOC'
op|':'
string|"'552 Requested file action aborted, exceeded file storage allocation'"
op|','
nl|'\n'
name|'FILENAME_NOT_ALLOWED'
op|':'
string|"'553 Requested action not taken, file name not allowed'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidPath
name|'class'
name|'InvalidPath'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Internal exception used to signify an error during parsing a path.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|toSegments
dedent|''
name|'def'
name|'toSegments'
op|'('
name|'cwd'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Normalize a path, as represented by a list of strings each\n    representing one segment of the path.\n    """'
newline|'\n'
name|'if'
name|'path'
op|'.'
name|'startswith'
op|'('
string|"'/'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'segs'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'segs'
op|'='
name|'cwd'
op|'['
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'s'
name|'in'
name|'path'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'s'
op|'=='
string|"'.'"
name|'or'
name|'s'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'elif'
name|'s'
op|'=='
string|"'..'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'segs'
op|':'
newline|'\n'
indent|'                '
name|'segs'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'InvalidPath'
op|'('
name|'cwd'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
string|"'\\0'"
name|'in'
name|'s'
name|'or'
string|"'/'"
name|'in'
name|'s'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InvalidPath'
op|'('
name|'cwd'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'segs'
op|'.'
name|'append'
op|'('
name|'s'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'segs'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|errnoToFailure
dedent|''
name|'def'
name|'errnoToFailure'
op|'('
name|'e'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Map C{OSError} and C{IOError} to standard FTP errors.\n    """'
newline|'\n'
name|'if'
name|'e'
op|'=='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'FileNotFoundError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'e'
op|'=='
name|'errno'
op|'.'
name|'EACCES'
name|'or'
name|'e'
op|'=='
name|'errno'
op|'.'
name|'EPERM'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'PermissionDeniedError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'e'
op|'=='
name|'errno'
op|'.'
name|'ENOTDIR'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'IsNotADirectoryError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'e'
op|'=='
name|'errno'
op|'.'
name|'EEXIST'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'FileExistsError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'e'
op|'=='
name|'errno'
op|'.'
name|'EISDIR'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'IsADirectoryError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPCmdError
dedent|''
dedent|''
name|'class'
name|'FTPCmdError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Generic exception for FTP commands.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Exception'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'errorMessage'
op|'='
name|'msg'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|response
dedent|''
name|'def'
name|'response'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate a FTP response message for this error.\n        """'
newline|'\n'
name|'return'
name|'RESPONSE'
op|'['
name|'self'
op|'.'
name|'errorCode'
op|']'
op|'%'
name|'self'
op|'.'
name|'errorMessage'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FileNotFoundError
dedent|''
dedent|''
name|'class'
name|'FileNotFoundError'
op|'('
name|'FTPCmdError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when trying to access a non existent file or directory.\n    """'
newline|'\n'
DECL|variable|errorCode
name|'errorCode'
op|'='
name|'FILE_NOT_FOUND'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AnonUserDeniedError
dedent|''
name|'class'
name|'AnonUserDeniedError'
op|'('
name|'FTPCmdError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when an anonymous user issues a command that will alter the\n    filesystem\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# No message'
nl|'\n'
indent|'        '
name|'FTPCmdError'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|errorCode
dedent|''
name|'errorCode'
op|'='
name|'ANON_USER_DENIED'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PermissionDeniedError
dedent|''
name|'class'
name|'PermissionDeniedError'
op|'('
name|'FTPCmdError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when access is attempted to a resource to which access is\n    not allowed.\n    """'
newline|'\n'
DECL|variable|errorCode
name|'errorCode'
op|'='
name|'PERMISSION_DENIED'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IsNotADirectoryError
dedent|''
name|'class'
name|'IsNotADirectoryError'
op|'('
name|'FTPCmdError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when RMD is called on a path that isn\'t a directory.\n    """'
newline|'\n'
DECL|variable|errorCode
name|'errorCode'
op|'='
name|'IS_NOT_A_DIR'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FileExistsError
dedent|''
name|'class'
name|'FileExistsError'
op|'('
name|'FTPCmdError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when attempted to override an existing resource.\n    """'
newline|'\n'
DECL|variable|errorCode
name|'errorCode'
op|'='
name|'FILE_EXISTS'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IsADirectoryError
dedent|''
name|'class'
name|'IsADirectoryError'
op|'('
name|'FTPCmdError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when DELE is called on a path that is a directory.\n    """'
newline|'\n'
DECL|variable|errorCode
name|'errorCode'
op|'='
name|'IS_A_DIR'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CmdSyntaxError
dedent|''
name|'class'
name|'CmdSyntaxError'
op|'('
name|'FTPCmdError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when a command syntax is wrong.\n    """'
newline|'\n'
DECL|variable|errorCode
name|'errorCode'
op|'='
name|'SYNTAX_ERR'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CmdArgSyntaxError
dedent|''
name|'class'
name|'CmdArgSyntaxError'
op|'('
name|'FTPCmdError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when a command is called with wrong value or a wrong number of\n    arguments.\n    """'
newline|'\n'
DECL|variable|errorCode
name|'errorCode'
op|'='
name|'SYNTAX_ERR_IN_ARGS'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CmdNotImplementedError
dedent|''
name|'class'
name|'CmdNotImplementedError'
op|'('
name|'FTPCmdError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when an unimplemented command is given to the server.\n    """'
newline|'\n'
DECL|variable|errorCode
name|'errorCode'
op|'='
name|'CMD_NOT_IMPLMNTD'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CmdNotImplementedForArgError
dedent|''
name|'class'
name|'CmdNotImplementedForArgError'
op|'('
name|'FTPCmdError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when the handling of a parameter for a command is not implemented by\n    the server.\n    """'
newline|'\n'
DECL|variable|errorCode
name|'errorCode'
op|'='
name|'CMD_NOT_IMPLMNTD_FOR_PARAM'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPError
dedent|''
name|'class'
name|'FTPError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PortConnectionError
dedent|''
name|'class'
name|'PortConnectionError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BadCmdSequenceError
dedent|''
name|'class'
name|'BadCmdSequenceError'
op|'('
name|'FTPCmdError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when a client sends a series of commands in an illogical sequence.\n    """'
newline|'\n'
DECL|variable|errorCode
name|'errorCode'
op|'='
name|'BAD_CMD_SEQ'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AuthorizationError
dedent|''
name|'class'
name|'AuthorizationError'
op|'('
name|'FTPCmdError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when client authentication fails.\n    """'
newline|'\n'
DECL|variable|errorCode
name|'errorCode'
op|'='
name|'AUTH_FAILURE'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|debugDeferred
dedent|''
name|'def'
name|'debugDeferred'
op|'('
name|'self'
op|','
op|'*'
name|'_'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'debugDeferred(): %s'"
op|'%'
name|'str'
op|'('
name|'_'
op|')'
op|','
name|'debug'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# -- DTP Protocol --'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_months
dedent|''
name|'_months'
op|'='
op|'['
nl|'\n'
name|'None'
op|','
nl|'\n'
string|"'Jan'"
op|','
string|"'Feb'"
op|','
string|"'Mar'"
op|','
string|"'Apr'"
op|','
string|"'May'"
op|','
string|"'Jun'"
op|','
nl|'\n'
string|"'Jul'"
op|','
string|"'Aug'"
op|','
string|"'Sep'"
op|','
string|"'Oct'"
op|','
string|"'Nov'"
op|','
string|"'Dec'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DTP
name|'class'
name|'DTP'
op|'('
name|'object'
op|','
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'IConsumer'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|isConnected
name|'isConnected'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|variable|_cons
name|'_cons'
op|'='
name|'None'
newline|'\n'
DECL|variable|_onConnLost
name|'_onConnLost'
op|'='
name|'None'
newline|'\n'
DECL|variable|_buffer
name|'_buffer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'isConnected'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_buffer'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'isConnected'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_onConnLost'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_onConnLost'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendLine
dedent|''
dedent|''
name|'def'
name|'sendLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'line'
op|'+'
string|"'\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_formatOneListResponse
dedent|''
name|'def'
name|'_formatOneListResponse'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'size'
op|','
name|'directory'
op|','
name|'permissions'
op|','
name|'hardlinks'
op|','
name|'modified'
op|','
name|'owner'
op|','
name|'group'
op|')'
op|':'
newline|'\n'
DECL|function|formatMode
indent|'        '
name|'def'
name|'formatMode'
op|'('
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'mode'
op|'&'
op|'('
number|'256'
op|'>>'
name|'n'
op|')'
name|'and'
string|"'rwx'"
op|'['
name|'n'
op|'%'
number|'3'
op|']'
name|'or'
string|"'-'"
name|'for'
name|'n'
name|'in'
name|'range'
op|'('
number|'9'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|formatDate
dedent|''
name|'def'
name|'formatDate'
op|'('
name|'mtime'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'now'
op|'='
name|'time'
op|'.'
name|'gmtime'
op|'('
op|')'
newline|'\n'
name|'info'
op|'='
op|'{'
nl|'\n'
string|"'month'"
op|':'
name|'_months'
op|'['
name|'mtime'
op|'.'
name|'tm_mon'
op|']'
op|','
nl|'\n'
string|"'day'"
op|':'
name|'mtime'
op|'.'
name|'tm_mday'
op|','
nl|'\n'
string|"'year'"
op|':'
name|'mtime'
op|'.'
name|'tm_year'
op|','
nl|'\n'
string|"'hour'"
op|':'
name|'mtime'
op|'.'
name|'tm_hour'
op|','
nl|'\n'
string|"'minute'"
op|':'
name|'mtime'
op|'.'
name|'tm_min'
nl|'\n'
op|'}'
newline|'\n'
name|'if'
name|'now'
op|'.'
name|'tm_year'
op|'!='
name|'mtime'
op|'.'
name|'tm_year'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'%(month)s %(day)02d %(year)5d'"
op|'%'
name|'info'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'%(month)s %(day)02d %(hour)02d:%(minute)02d'"
op|'%'
name|'info'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'format'
op|'='
op|'('
string|"'%(directory)s%(permissions)s%(hardlinks)4d '"
nl|'\n'
string|"'%(owner)-9s %(group)-9s %(size)15d %(date)12s '"
nl|'\n'
string|"'%(name)s'"
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'format'
op|'%'
op|'{'
nl|'\n'
string|"'directory'"
op|':'
name|'directory'
name|'and'
string|"'d'"
name|'or'
string|"'-'"
op|','
nl|'\n'
string|"'permissions'"
op|':'
name|'formatMode'
op|'('
name|'permissions'
op|')'
op|','
nl|'\n'
string|"'hardlinks'"
op|':'
name|'hardlinks'
op|','
nl|'\n'
string|"'owner'"
op|':'
name|'owner'
op|'['
op|':'
number|'8'
op|']'
op|','
nl|'\n'
string|"'group'"
op|':'
name|'group'
op|'['
op|':'
number|'8'
op|']'
op|','
nl|'\n'
string|"'size'"
op|':'
name|'size'
op|','
nl|'\n'
string|"'date'"
op|':'
name|'formatDate'
op|'('
name|'time'
op|'.'
name|'gmtime'
op|'('
name|'modified'
op|')'
op|')'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'name'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|sendListResponse
dedent|''
name|'def'
name|'sendListResponse'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'self'
op|'.'
name|'_formatOneListResponse'
op|'('
name|'name'
op|','
op|'*'
name|'response'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Proxy IConsumer to our transport'
nl|'\n'
DECL|member|registerProducer
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'registerProducer'
op|'('
name|'producer'
op|','
name|'streaming'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'isConnected'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'Exception'
op|'('
string|'"Crap damn crap damn crap damn"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Pretend to be a producer, too.'
nl|'\n'
DECL|member|_conswrite
dedent|''
name|'def'
name|'_conswrite'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cons'
op|'.'
name|'write'
op|'('
name|'bytes'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_onConnLost'
op|'.'
name|'errback'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_cons'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_conswrite'
op|'('
name|'bytes'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_buffer'
op|'.'
name|'append'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_unregConsumer
dedent|''
dedent|''
name|'def'
name|'_unregConsumer'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_cons'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cons'
op|'='
name|'None'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'_onConnLost'
newline|'\n'
name|'return'
name|'ignored'
newline|'\n'
nl|'\n'
DECL|member|registerConsumer
dedent|''
name|'def'
name|'registerConsumer'
op|'('
name|'self'
op|','
name|'cons'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'self'
op|'.'
name|'_cons'
name|'is'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_cons'
op|'='
name|'cons'
newline|'\n'
name|'self'
op|'.'
name|'_cons'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'True'
op|')'
newline|'\n'
name|'for'
name|'chunk'
name|'in'
name|'self'
op|'.'
name|'_buffer'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_conswrite'
op|'('
name|'chunk'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_buffer'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'isConnected'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_onConnLost'
op|'='
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'self'
op|'.'
name|'_unregConsumer'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cons'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cons'
op|'='
name|'None'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|pauseProducing
dedent|''
name|'def'
name|'pauseProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopProducing
dedent|''
name|'def'
name|'stopProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'stopProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|DTPFactory
dedent|''
dedent|''
name|'class'
name|'DTPFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Client factory for I{data transfer process} protocols.\n\n    @ivar peerCheck: perform checks to make sure the ftp-pi\'s peer is the same\n        as the dtp\'s\n    @ivar pi: a reference to this factory\'s protocol interpreter\n\n    @ivar _state: Indicates the current state of the DTPFactory.  Initially,\n        this is L{_IN_PROGRESS}.  If the connection fails or times out, it is\n        L{_FAILED}.  If the connection succeeds before the timeout, it is\n        L{_FINISHED}.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|_IN_PROGRESS
name|'_IN_PROGRESS'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
DECL|variable|_FAILED
name|'_FAILED'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
DECL|variable|_FINISHED
name|'_FINISHED'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_state
name|'_state'
op|'='
name|'_IN_PROGRESS'
newline|'\n'
nl|'\n'
comment|'# -- configuration variables --'
nl|'\n'
DECL|variable|peerCheck
name|'peerCheck'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# -- class variables --'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pi'
op|','
name|'peerHost'
op|'='
name|'None'
op|','
name|'reactor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Constructor\n        @param pi: this factory\'s protocol interpreter\n        @param peerHost: if peerCheck is True, this is the tuple that the\n            generated instance will use to perform security checks\n        """'
newline|'\n'
name|'self'
op|'.'
name|'pi'
op|'='
name|'pi'
comment|'# the protocol interpreter that is using this factory'
newline|'\n'
name|'self'
op|'.'
name|'peerHost'
op|'='
name|'peerHost'
comment|'# the from FTP.transport.peerHost()'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
comment|'# deferred will fire when instance is connected'
newline|'\n'
name|'self'
op|'.'
name|'delayedCall'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'reactor'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_reactor'
op|'='
name|'reactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'DTPFactory.buildProtocol'"
op|','
name|'debug'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_state'
name|'is'
name|'not'
name|'self'
op|'.'
name|'_IN_PROGRESS'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_state'
op|'='
name|'self'
op|'.'
name|'_FINISHED'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'cancelTimeout'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'DTP'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'p'
op|'.'
name|'pi'
op|'='
name|'self'
op|'.'
name|'pi'
newline|'\n'
name|'self'
op|'.'
name|'pi'
op|'.'
name|'dtpInstance'
op|'='
name|'p'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stopFactory
dedent|''
name|'def'
name|'stopFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'dtpFactory.stopFactory'"
op|','
name|'debug'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cancelTimeout'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|timeoutFactory
dedent|''
name|'def'
name|'timeoutFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'timed out waiting for DTP connection'"
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_state'
name|'is'
name|'not'
name|'self'
op|'.'
name|'_IN_PROGRESS'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_state'
op|'='
name|'self'
op|'.'
name|'_FAILED'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'deferred'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'errback'
op|'('
nl|'\n'
name|'PortConnectionError'
op|'('
name|'defer'
op|'.'
name|'TimeoutError'
op|'('
string|'"DTPFactory timeout"'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cancelTimeout
dedent|''
name|'def'
name|'cancelTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'delayedCall'
name|'is'
name|'not'
name|'None'
name|'and'
name|'self'
op|'.'
name|'delayedCall'
op|'.'
name|'active'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'cancelling DTP timeout'"
op|','
name|'debug'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'delayedCall'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setTimeout
dedent|''
dedent|''
name|'def'
name|'setTimeout'
op|'('
name|'self'
op|','
name|'seconds'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'DTPFactory.setTimeout set to %s seconds'"
op|'%'
name|'seconds'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'delayedCall'
op|'='
name|'self'
op|'.'
name|'_reactor'
op|'.'
name|'callLater'
op|'('
name|'seconds'
op|','
name|'self'
op|'.'
name|'timeoutFactory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
dedent|''
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_state'
name|'is'
name|'not'
name|'self'
op|'.'
name|'_IN_PROGRESS'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_state'
op|'='
name|'self'
op|'.'
name|'_FAILED'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'deferred'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'errback'
op|'('
name|'PortConnectionError'
op|'('
name|'reason'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# -- FTP-PI (Protocol Interpreter) --'
nl|'\n'
nl|'\n'
DECL|class|ASCIIConsumerWrapper
dedent|''
dedent|''
name|'class'
name|'ASCIIConsumerWrapper'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'cons'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cons'
op|'='
name|'cons'
newline|'\n'
name|'self'
op|'.'
name|'registerProducer'
op|'='
name|'cons'
op|'.'
name|'registerProducer'
newline|'\n'
name|'self'
op|'.'
name|'unregisterProducer'
op|'='
name|'cons'
op|'.'
name|'unregisterProducer'
newline|'\n'
nl|'\n'
name|'assert'
name|'os'
op|'.'
name|'linesep'
op|'=='
string|'"\\r\\n"'
name|'or'
name|'len'
op|'('
name|'os'
op|'.'
name|'linesep'
op|')'
op|'=='
number|'1'
op|','
string|'"Unsupported platform (yea right like this even exists)"'
newline|'\n'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'linesep'
op|'=='
string|'"\\r\\n"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'='
name|'cons'
op|'.'
name|'write'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cons'
op|'.'
name|'write'
op|'('
name|'bytes'
op|'.'
name|'replace'
op|'('
name|'os'
op|'.'
name|'linesep'
op|','
string|'"\\r\\n"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FileConsumer
dedent|''
dedent|''
name|'class'
name|'FileConsumer'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A consumer for FTP input that writes data to a file.\n\n    @ivar fObj: a file object opened for writing, used to write data received.\n    @type fObj: C{file}\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'IConsumer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'fObj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fObj'
op|'='
name|'fObj'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|registerProducer
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'producer'
op|'='
name|'producer'
newline|'\n'
name|'assert'
name|'streaming'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'producer'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'fObj'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fObj'
op|'.'
name|'write'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPOverflowProtocol
dedent|''
dedent|''
name|'class'
name|'FTPOverflowProtocol'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""FTP mini-protocol for when there are too many connections."""'
newline|'\n'
DECL|member|connectionMade
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'RESPONSE'
op|'['
name|'TOO_MANY_CONNECTIONS'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTP
dedent|''
dedent|''
name|'class'
name|'FTP'
op|'('
name|'object'
op|','
name|'basic'
op|'.'
name|'LineReceiver'
op|','
name|'policies'
op|'.'
name|'TimeoutMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Protocol Interpreter for the File Transfer Protocol\n\n    @ivar state: The current server state.  One of L{UNAUTH},\n        L{INAUTH}, L{AUTHED}, L{RENAMING}.\n\n    @ivar shell: The connected avatar\n    @ivar binary: The transfer mode.  If false, ASCII.\n    @ivar dtpFactory: Generates a single DTP for this session\n    @ivar dtpPort: Port returned from listenTCP\n    @ivar listenFactory: A callable with the signature of\n        L{twisted.internet.interfaces.IReactorTCP.listenTCP} which will be used\n        to create Ports for passive connections (mainly for testing).\n\n    @ivar passivePortRange: iterator used as source of passive port numbers.\n    @type passivePortRange: C{iterator}\n    """'
newline|'\n'
nl|'\n'
DECL|variable|disconnected
name|'disconnected'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# States an FTP can be in'
nl|'\n'
name|'UNAUTH'
op|','
name|'INAUTH'
op|','
name|'AUTHED'
op|','
name|'RENAMING'
op|'='
name|'range'
op|'('
number|'4'
op|')'
newline|'\n'
nl|'\n'
comment|'# how long the DTP waits for a connection'
nl|'\n'
DECL|variable|dtpTimeout
name|'dtpTimeout'
op|'='
number|'10'
newline|'\n'
nl|'\n'
DECL|variable|portal
name|'portal'
op|'='
name|'None'
newline|'\n'
DECL|variable|shell
name|'shell'
op|'='
name|'None'
newline|'\n'
DECL|variable|dtpFactory
name|'dtpFactory'
op|'='
name|'None'
newline|'\n'
DECL|variable|dtpPort
name|'dtpPort'
op|'='
name|'None'
newline|'\n'
DECL|variable|dtpInstance
name|'dtpInstance'
op|'='
name|'None'
newline|'\n'
DECL|variable|binary
name|'binary'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|variable|passivePortRange
name|'passivePortRange'
op|'='
name|'xrange'
op|'('
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|listenFactory
name|'listenFactory'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
newline|'\n'
nl|'\n'
DECL|member|reply
name|'def'
name|'reply'
op|'('
name|'self'
op|','
name|'key'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'RESPONSE'
op|'['
name|'key'
op|']'
op|'%'
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'state'
op|'='
name|'self'
op|'.'
name|'UNAUTH'
newline|'\n'
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'timeOut'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reply'
op|'('
name|'WELCOME_MSG'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'welcomeMessage'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
comment|'# if we have a DTP protocol instance running and'
nl|'\n'
comment|"# we lose connection to the client's PI, kill the"
nl|'\n'
comment|'# DTP connection and close the port'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'dtpFactory'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'cleanupDTP'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'shell'
op|','
string|"'logout'"
op|')'
name|'and'
name|'self'
op|'.'
name|'shell'
op|'.'
name|'logout'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'shell'
op|'.'
name|'logout'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'shell'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|timeoutConnection
dedent|''
name|'def'
name|'timeoutConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|processFailed
name|'def'
name|'processFailed'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'err'
op|'.'
name|'check'
op|'('
name|'FTPCmdError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'err'
op|'.'
name|'value'
op|'.'
name|'response'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'err'
op|'.'
name|'check'
op|'('
name|'TypeError'
op|')'
name|'and'
nl|'\n'
name|'err'
op|'.'
name|'value'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|'.'
name|'find'
op|'('
string|"'takes exactly'"
op|')'
op|'!='
op|'-'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reply'
op|'('
name|'SYNTAX_ERR'
op|','
string|'"%s requires an argument."'
op|'%'
op|'('
name|'cmd'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Unexpected FTP error"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'err'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reply'
op|'('
name|'REQ_ACTN_NOT_TAKEN'
op|','
string|'"internal server error"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|processSucceeded
dedent|''
dedent|''
name|'def'
name|'processSucceeded'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'result'
op|','
name|'tuple'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reply'
op|'('
op|'*'
name|'result'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'result'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reply'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|function|allDone
dedent|''
dedent|''
name|'def'
name|'allDone'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'disconnected'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'spaceIndex'
op|'='
name|'line'
op|'.'
name|'find'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'if'
name|'spaceIndex'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
name|'line'
op|'['
op|':'
name|'spaceIndex'
op|']'
newline|'\n'
name|'args'
op|'='
op|'('
name|'line'
op|'['
name|'spaceIndex'
op|'+'
number|'1'
op|':'
op|']'
op|','
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
name|'line'
newline|'\n'
name|'args'
op|'='
op|'('
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'processCommand'
op|','
name|'cmd'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'processSucceeded'
op|','
name|'processFailed'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'log'
op|'.'
name|'err'
op|')'
newline|'\n'
nl|'\n'
comment|'# XXX It burnsss'
nl|'\n'
comment|"# LineReceiver doesn't let you resumeProducing inside"
nl|'\n'
comment|'# lineReceived atm'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'d'
op|'.'
name|'addBoth'
op|','
name|'allDone'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|processCommand
dedent|''
name|'def'
name|'processCommand'
op|'('
name|'self'
op|','
name|'cmd'
op|','
op|'*'
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'='
name|'cmd'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
name|'self'
op|'.'
name|'UNAUTH'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'cmd'
op|'=='
string|"'USER'"
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'ftp_USER'
op|'('
op|'*'
name|'params'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'cmd'
op|'=='
string|"'PASS'"
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'BAD_CMD_SEQ'
op|','
string|'"USER required before PASS"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'NOT_LOGGED_IN'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
name|'self'
op|'.'
name|'INAUTH'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'cmd'
op|'=='
string|"'PASS'"
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'ftp_PASS'
op|'('
op|'*'
name|'params'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'BAD_CMD_SEQ'
op|','
string|'"PASS required after USER"'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
name|'self'
op|'.'
name|'AUTHED'
op|':'
newline|'\n'
indent|'            '
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"ftp_"'
op|'+'
name|'cmd'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'method'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'method'
op|'('
op|'*'
name|'params'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'CmdNotImplementedError'
op|'('
name|'cmd'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
name|'self'
op|'.'
name|'RENAMING'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'cmd'
op|'=='
string|"'RNTO'"
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'ftp_RNTO'
op|'('
op|'*'
name|'params'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'BAD_CMD_SEQ'
op|','
string|'"RNTO required after RNFR"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getDTPPort
dedent|''
dedent|''
dedent|''
name|'def'
name|'getDTPPort'
op|'('
name|'self'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a port for passive access, using C{self.passivePortRange}\n        attribute.\n        """'
newline|'\n'
name|'for'
name|'portn'
name|'in'
name|'self'
op|'.'
name|'passivePortRange'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'dtpPort'
op|'='
name|'self'
op|'.'
name|'listenFactory'
op|'('
name|'portn'
op|','
name|'factory'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'error'
op|'.'
name|'CannotListenError'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'dtpPort'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'error'
op|'.'
name|'CannotListenError'
op|'('
string|"''"
op|','
name|'portn'
op|','
nl|'\n'
string|'"No port available in range %s"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'passivePortRange'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_USER
dedent|''
name|'def'
name|'ftp_USER'
op|'('
name|'self'
op|','
name|'username'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        First part of login.  Get the username the peer wants to\n        authenticate as.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'username'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'CmdSyntaxError'
op|'('
string|"'USER requires an argument'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_user'
op|'='
name|'username'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
name|'self'
op|'.'
name|'INAUTH'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'allowAnonymous'
name|'and'
name|'self'
op|'.'
name|'_user'
op|'=='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'userAnonymous'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'GUEST_NAME_OK_NEED_EMAIL'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'USR_NAME_OK_NEED_PASS'
op|','
name|'username'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO: add max auth try before timeout from ip...'
nl|'\n'
comment|'# TODO: need to implement minimal ABOR command'
nl|'\n'
nl|'\n'
DECL|member|ftp_PASS
dedent|''
dedent|''
name|'def'
name|'ftp_PASS'
op|'('
name|'self'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Second part of login.  Get the password the peer wants to\n        authenticate with.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'allowAnonymous'
name|'and'
name|'self'
op|'.'
name|'_user'
op|'=='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'userAnonymous'
op|':'
newline|'\n'
comment|'# anonymous login'
nl|'\n'
indent|'            '
name|'creds'
op|'='
name|'credentials'
op|'.'
name|'Anonymous'
op|'('
op|')'
newline|'\n'
name|'reply'
op|'='
name|'GUEST_LOGGED_IN_PROCEED'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# user login'
nl|'\n'
indent|'            '
name|'creds'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
name|'self'
op|'.'
name|'_user'
op|','
name|'password'
op|')'
newline|'\n'
name|'reply'
op|'='
name|'USR_LOGGED_IN_PROCEED'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'_user'
newline|'\n'
nl|'\n'
DECL|function|_cbLogin
name|'def'
name|'_cbLogin'
op|'('
op|'('
name|'interface'
op|','
name|'avatar'
op|','
name|'logout'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'assert'
name|'interface'
name|'is'
name|'IFTPShell'
op|','
string|'"The realm is busted, jerk."'
newline|'\n'
name|'self'
op|'.'
name|'shell'
op|'='
name|'avatar'
newline|'\n'
name|'self'
op|'.'
name|'logout'
op|'='
name|'logout'
newline|'\n'
name|'self'
op|'.'
name|'workingDirectory'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
name|'self'
op|'.'
name|'AUTHED'
newline|'\n'
name|'return'
name|'reply'
newline|'\n'
nl|'\n'
DECL|function|_ebLogin
dedent|''
name|'def'
name|'_ebLogin'
op|'('
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'failure'
op|'.'
name|'trap'
op|'('
name|'cred_error'
op|'.'
name|'UnauthorizedLogin'
op|','
name|'cred_error'
op|'.'
name|'UnhandledCredentials'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
name|'self'
op|'.'
name|'UNAUTH'
newline|'\n'
name|'raise'
name|'AuthorizationError'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'portal'
op|'.'
name|'login'
op|'('
name|'creds'
op|','
name|'None'
op|','
name|'IFTPShell'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'_cbLogin'
op|','
name|'_ebLogin'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_PASV
dedent|''
name|'def'
name|'ftp_PASV'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Request for a passive connection\n\n        from the rfc::\n\n            This command requests the server-DTP to \\"listen\\" on a data port\n            (which is not its default data port) and to wait for a connection\n            rather than initiate one upon receipt of a transfer command.  The\n            response to this command includes the host and port address this\n            server is listening on.\n        """'
newline|'\n'
comment|'# if we have a DTP port set up, lose it.'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'dtpFactory'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|"# cleanupDTP sets dtpFactory to none.  Later we'll do"
nl|'\n'
comment|'# cleanup here or something.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'cleanupDTP'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'dtpFactory'
op|'='
name|'DTPFactory'
op|'('
name|'pi'
op|'='
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dtpFactory'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'dtpTimeout'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dtpPort'
op|'='
name|'self'
op|'.'
name|'getDTPPort'
op|'('
name|'self'
op|'.'
name|'dtpFactory'
op|')'
newline|'\n'
nl|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'host'
newline|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'dtpPort'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'reply'
op|'('
name|'ENTERING_PASV_MODE'
op|','
name|'encodeHostPort'
op|'('
name|'host'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'dtpFactory'
op|'.'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ign'
op|':'
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_PORT
dedent|''
name|'def'
name|'ftp_PORT'
op|'('
name|'self'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'addr'
op|'='
name|'map'
op|'('
name|'int'
op|','
name|'address'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|')'
newline|'\n'
name|'ip'
op|'='
string|"'%d.%d.%d.%d'"
op|'%'
name|'tuple'
op|'('
name|'addr'
op|'['
op|':'
number|'4'
op|']'
op|')'
newline|'\n'
name|'port'
op|'='
name|'addr'
op|'['
number|'4'
op|']'
op|'<<'
number|'8'
op|'|'
name|'addr'
op|'['
number|'5'
op|']'
newline|'\n'
nl|'\n'
comment|'# if we have a DTP port set up, lose it.'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'dtpFactory'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'cleanupDTP'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'dtpFactory'
op|'='
name|'DTPFactory'
op|'('
name|'pi'
op|'='
name|'self'
op|','
name|'peerHost'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dtpFactory'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'dtpTimeout'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dtpPort'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
name|'ip'
op|','
name|'port'
op|','
name|'self'
op|'.'
name|'dtpFactory'
op|')'
newline|'\n'
nl|'\n'
DECL|function|connected
name|'def'
name|'connected'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ENTERING_PORT_MODE'
newline|'\n'
DECL|function|connFailed
dedent|''
name|'def'
name|'connFailed'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'err'
op|'.'
name|'trap'
op|'('
name|'PortConnectionError'
op|')'
newline|'\n'
name|'return'
name|'CANT_OPEN_DATA_CNX'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'dtpFactory'
op|'.'
name|'deferred'
op|'.'
name|'addCallbacks'
op|'('
name|'connected'
op|','
name|'connFailed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_LIST
dedent|''
name|'def'
name|'ftp_LIST'
op|'('
name|'self'
op|','
name|'path'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" This command causes a list to be sent from the server to the\n        passive DTP.  If the pathname specifies a directory or other\n        group of files, the server should transfer a list of files\n        in the specified directory.  If the pathname specifies a\n        file then the server should send current information on the\n        file.  A null argument implies the user\'s current working or\n        default directory.\n        """'
newline|'\n'
comment|'# Uh, for now, do this retarded thing.'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'dtpInstance'
name|'is'
name|'None'
name|'or'
name|'not'
name|'self'
op|'.'
name|'dtpInstance'
op|'.'
name|'isConnected'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'BadCmdSequenceError'
op|'('
string|"'must send PORT or PASV before RETR'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# bug in konqueror'
nl|'\n'
dedent|''
name|'if'
name|'path'
op|'=='
string|'"-a"'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
string|"''"
newline|'\n'
comment|'# bug in gFTP 2.0.15'
nl|'\n'
dedent|''
name|'if'
name|'path'
op|'=='
string|'"-aL"'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
string|"''"
newline|'\n'
comment|'# bug in Nautilus 2.10.0'
nl|'\n'
dedent|''
name|'if'
name|'path'
op|'=='
string|'"-L"'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
string|"''"
newline|'\n'
comment|'# bug in ange-ftp'
nl|'\n'
dedent|''
name|'if'
name|'path'
op|'=='
string|'"-la"'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|function|gotListing
dedent|''
name|'def'
name|'gotListing'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reply'
op|'('
name|'DATA_CNX_ALREADY_OPEN_START_XFR'
op|')'
newline|'\n'
name|'for'
op|'('
name|'name'
op|','
name|'attrs'
op|')'
name|'in'
name|'results'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'dtpInstance'
op|'.'
name|'sendListResponse'
op|'('
name|'name'
op|','
name|'attrs'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'dtpInstance'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
op|'('
name|'TXFR_COMPLETE_OK'
op|','
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'segments'
op|'='
name|'toSegments'
op|'('
name|'self'
op|'.'
name|'workingDirectory'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidPath'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'FileNotFoundError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'list'
op|'('
nl|'\n'
name|'segments'
op|','
nl|'\n'
op|'('
string|"'size'"
op|','
string|"'directory'"
op|','
string|"'permissions'"
op|','
string|"'hardlinks'"
op|','
nl|'\n'
string|"'modified'"
op|','
string|"'owner'"
op|','
string|"'group'"
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'gotListing'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_NLST
dedent|''
name|'def'
name|'ftp_NLST'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This command causes a directory listing to be sent from the server to\n        the client. The pathname should specify a directory or other\n        system-specific file group descriptor. An empty path implies the current\n        working directory. If the path is non-existent, send nothing. If the\n        path is to a file, send only the file name.\n\n        @type path: C{str}\n        @param path: The path for which a directory listing should be returned.\n\n        @rtype: L{Deferred}\n        @return: a L{Deferred} which will be fired when the listing request\n            is finished.\n        """'
newline|'\n'
comment|'# XXX: why is this check different from ftp_RETR/ftp_STOR? See #4180'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'dtpInstance'
name|'is'
name|'None'
name|'or'
name|'not'
name|'self'
op|'.'
name|'dtpInstance'
op|'.'
name|'isConnected'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
nl|'\n'
name|'BadCmdSequenceError'
op|'('
string|"'must send PORT or PASV before RETR'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'segments'
op|'='
name|'toSegments'
op|'('
name|'self'
op|'.'
name|'workingDirectory'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidPath'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'FileNotFoundError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbList
dedent|''
name|'def'
name|'cbList'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Send, line by line, each file in the directory listing, and then\n            close the connection.\n\n            @type results: A C{list} of C{tuple}. The first element of each\n                C{tuple} is a C{str} and the second element is a C{list}.\n            @param results: The names of the files in the directory.\n\n            @rtype: C{tuple}\n            @return: A C{tuple} containing the status code for a successful\n                transfer.\n            """'
newline|'\n'
name|'self'
op|'.'
name|'reply'
op|'('
name|'DATA_CNX_ALREADY_OPEN_START_XFR'
op|')'
newline|'\n'
name|'for'
op|'('
name|'name'
op|','
name|'ignored'
op|')'
name|'in'
name|'results'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'dtpInstance'
op|'.'
name|'sendLine'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'dtpInstance'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
op|'('
name|'TXFR_COMPLETE_OK'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbGlob
dedent|''
name|'def'
name|'cbGlob'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reply'
op|'('
name|'DATA_CNX_ALREADY_OPEN_START_XFR'
op|')'
newline|'\n'
name|'for'
op|'('
name|'name'
op|','
name|'ignored'
op|')'
name|'in'
name|'results'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'fnmatch'
op|'.'
name|'fnmatch'
op|'('
name|'name'
op|','
name|'segments'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'dtpInstance'
op|'.'
name|'sendLine'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'dtpInstance'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
op|'('
name|'TXFR_COMPLETE_OK'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|function|listErr
dedent|''
name|'def'
name|'listErr'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            RFC 959 specifies that an NLST request may only return directory\n            listings. Thus, send nothing and just close the connection.\n\n            @type results: L{Failure}\n            @param results: The L{Failure} wrapping a L{FileNotFoundError} that\n                occurred while trying to list the contents of a nonexistent\n                directory.\n\n            @rtype: C{tuple}\n            @returns: A C{tuple} containing the status code for a successful\n                transfer.\n            """'
newline|'\n'
name|'self'
op|'.'
name|'dtpInstance'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
op|'('
name|'TXFR_COMPLETE_OK'
op|','
op|')'
newline|'\n'
nl|'\n'
comment|'# XXX This globbing may be incomplete: see #4181'
nl|'\n'
dedent|''
name|'if'
name|'segments'
name|'and'
op|'('
nl|'\n'
string|"'*'"
name|'in'
name|'segments'
op|'['
op|'-'
number|'1'
op|']'
name|'or'
string|"'?'"
name|'in'
name|'segments'
op|'['
op|'-'
number|'1'
op|']'
name|'or'
nl|'\n'
op|'('
string|"'['"
name|'in'
name|'segments'
op|'['
op|'-'
number|'1'
op|']'
name|'and'
string|"']'"
name|'in'
name|'segments'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'list'
op|'('
name|'segments'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbGlob'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'list'
op|'('
name|'segments'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbList'
op|')'
newline|'\n'
comment|'# self.shell.list will generate an error if the path is invalid'
nl|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'listErr'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_CWD
dedent|''
name|'def'
name|'ftp_CWD'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'segments'
op|'='
name|'toSegments'
op|'('
name|'self'
op|'.'
name|'workingDirectory'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidPath'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# XXX Eh, what to fail with here?'
nl|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'FileNotFoundError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|accessGranted
dedent|''
name|'def'
name|'accessGranted'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'workingDirectory'
op|'='
name|'segments'
newline|'\n'
name|'return'
op|'('
name|'REQ_FILE_ACTN_COMPLETED_OK'
op|','
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'shell'
op|'.'
name|'access'
op|'('
name|'segments'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'accessGranted'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_CDUP
dedent|''
name|'def'
name|'ftp_CDUP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'ftp_CWD'
op|'('
string|"'..'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_PWD
dedent|''
name|'def'
name|'ftp_PWD'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'PWD_REPLY'
op|','
string|"'/'"
op|'+'
string|"'/'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'workingDirectory'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_RETR
dedent|''
name|'def'
name|'ftp_RETR'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'dtpInstance'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'BadCmdSequenceError'
op|'('
string|"'PORT or PASV required before RETR'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'newsegs'
op|'='
name|'toSegments'
op|'('
name|'self'
op|'.'
name|'workingDirectory'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidPath'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'FileNotFoundError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# XXX For now, just disable the timeout.  Later we'll want to"
nl|'\n'
comment|'# leave it active and have the DTP connection reset it'
nl|'\n'
comment|'# periodically.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# Put it back later'
nl|'\n'
DECL|function|enableTimeout
name|'def'
name|'enableTimeout'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'timeOut'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
comment|'# And away she goes'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'binary'
op|':'
newline|'\n'
indent|'            '
name|'cons'
op|'='
name|'ASCIIConsumerWrapper'
op|'('
name|'self'
op|'.'
name|'dtpInstance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'cons'
op|'='
name|'self'
op|'.'
name|'dtpInstance'
newline|'\n'
nl|'\n'
DECL|function|cbSent
dedent|''
name|'def'
name|'cbSent'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'TXFR_COMPLETE_OK'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|function|ebSent
dedent|''
name|'def'
name|'ebSent'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Unexpected error attempting to transmit file to client:"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'err'
op|')'
newline|'\n'
name|'return'
op|'('
name|'CNX_CLOSED_TXFR_ABORTED'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbOpened
dedent|''
name|'def'
name|'cbOpened'
op|'('
name|'file'
op|')'
op|':'
newline|'\n'
comment|'# Tell them what to doooo'
nl|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'dtpInstance'
op|'.'
name|'isConnected'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reply'
op|'('
name|'DATA_CNX_ALREADY_OPEN_START_XFR'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reply'
op|'('
name|'FILE_STATUS_OK_OPEN_DATA_CNX'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'file'
op|'.'
name|'send'
op|'('
name|'cons'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'cbSent'
op|','
name|'ebSent'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|ebOpened
dedent|''
name|'def'
name|'ebOpened'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'err'
op|'.'
name|'check'
op|'('
name|'PermissionDeniedError'
op|','
name|'FileNotFoundError'
op|','
name|'IsNotADirectoryError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Unexpected error attempting to open file for transmission:"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'err'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'err'
op|'.'
name|'check'
op|'('
name|'FTPCmdError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'('
name|'err'
op|'.'
name|'value'
op|'.'
name|'errorCode'
op|','
string|"'/'"
op|'.'
name|'join'
op|'('
name|'newsegs'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'FILE_NOT_FOUND'
op|','
string|"'/'"
op|'.'
name|'join'
op|'('
name|'newsegs'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'openForReading'
op|'('
name|'newsegs'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'cbOpened'
op|','
name|'ebOpened'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'enableTimeout'
op|')'
newline|'\n'
nl|'\n'
comment|'# Pass back Deferred that fires when the transfer is done'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_STOR
dedent|''
name|'def'
name|'ftp_STOR'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'dtpInstance'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'BadCmdSequenceError'
op|'('
string|"'PORT or PASV required before STOR'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'newsegs'
op|'='
name|'toSegments'
op|'('
name|'self'
op|'.'
name|'workingDirectory'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidPath'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'FileNotFoundError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# XXX For now, just disable the timeout.  Later we'll want to"
nl|'\n'
comment|'# leave it active and have the DTP connection reset it'
nl|'\n'
comment|'# periodically.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# Put it back later'
nl|'\n'
DECL|function|enableTimeout
name|'def'
name|'enableTimeout'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'timeOut'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|function|cbSent
dedent|''
name|'def'
name|'cbSent'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'TXFR_COMPLETE_OK'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|function|ebSent
dedent|''
name|'def'
name|'ebSent'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Unexpected error receiving file from client:"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'err'
op|')'
newline|'\n'
name|'return'
op|'('
name|'CNX_CLOSED_TXFR_ABORTED'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbConsumer
dedent|''
name|'def'
name|'cbConsumer'
op|'('
name|'cons'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'binary'
op|':'
newline|'\n'
indent|'                '
name|'cons'
op|'='
name|'ASCIIConsumerWrapper'
op|'('
name|'cons'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'dtpInstance'
op|'.'
name|'registerConsumer'
op|'('
name|'cons'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'cbSent'
op|','
name|'ebSent'
op|')'
newline|'\n'
nl|'\n'
comment|'# Tell them what to doooo'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'dtpInstance'
op|'.'
name|'isConnected'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reply'
op|'('
name|'DATA_CNX_ALREADY_OPEN_START_XFR'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reply'
op|'('
name|'FILE_STATUS_OK_OPEN_DATA_CNX'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|cbOpened
dedent|''
name|'def'
name|'cbOpened'
op|'('
name|'file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'file'
op|'.'
name|'receive'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbConsumer'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|ebOpened
dedent|''
name|'def'
name|'ebOpened'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'err'
op|'.'
name|'check'
op|'('
name|'PermissionDeniedError'
op|','
name|'FileNotFoundError'
op|','
name|'IsNotADirectoryError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Unexpected error attempting to open file for upload:"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'err'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'err'
op|'.'
name|'value'
op|','
name|'FTPCmdError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'('
name|'err'
op|'.'
name|'value'
op|'.'
name|'errorCode'
op|','
string|"'/'"
op|'.'
name|'join'
op|'('
name|'newsegs'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'FILE_NOT_FOUND'
op|','
string|"'/'"
op|'.'
name|'join'
op|'('
name|'newsegs'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'openForWriting'
op|'('
name|'newsegs'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'cbOpened'
op|','
name|'ebOpened'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'enableTimeout'
op|')'
newline|'\n'
nl|'\n'
comment|'# Pass back Deferred that fires when the transfer is done'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_SIZE
dedent|''
name|'def'
name|'ftp_SIZE'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'newsegs'
op|'='
name|'toSegments'
op|'('
name|'self'
op|'.'
name|'workingDirectory'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidPath'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'FileNotFoundError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbStat
dedent|''
name|'def'
name|'cbStat'
op|'('
op|'('
name|'size'
op|','
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'FILE_STATUS'
op|','
name|'str'
op|'('
name|'size'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'shell'
op|'.'
name|'stat'
op|'('
name|'newsegs'
op|','
op|'('
string|"'size'"
op|','
op|')'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbStat'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_MDTM
dedent|''
name|'def'
name|'ftp_MDTM'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'newsegs'
op|'='
name|'toSegments'
op|'('
name|'self'
op|'.'
name|'workingDirectory'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidPath'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'FileNotFoundError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbStat
dedent|''
name|'def'
name|'cbStat'
op|'('
op|'('
name|'modified'
op|','
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'FILE_STATUS'
op|','
name|'time'
op|'.'
name|'strftime'
op|'('
string|"'%Y%m%d%H%M%S'"
op|','
name|'time'
op|'.'
name|'gmtime'
op|'('
name|'modified'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'shell'
op|'.'
name|'stat'
op|'('
name|'newsegs'
op|','
op|'('
string|"'modified'"
op|','
op|')'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbStat'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_TYPE
dedent|''
name|'def'
name|'ftp_TYPE'
op|'('
name|'self'
op|','
name|'type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'type'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'if'
name|'p'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'type_'"
op|'+'
name|'p'
op|'['
number|'0'
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'f'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'f'
op|'('
name|'p'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'type_UNKNOWN'
op|'('
name|'p'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'SYNTAX_ERR'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|type_A
dedent|''
name|'def'
name|'type_A'
op|'('
name|'self'
op|','
name|'code'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'code'
op|'=='
string|"''"
name|'or'
name|'code'
op|'=='
string|"'N'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'binary'
op|'='
name|'False'
newline|'\n'
name|'return'
op|'('
name|'TYPE_SET_OK'
op|','
string|"'A'"
op|'+'
name|'code'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'CmdArgSyntaxError'
op|'('
name|'code'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|type_I
dedent|''
dedent|''
name|'def'
name|'type_I'
op|'('
name|'self'
op|','
name|'code'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'code'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'binary'
op|'='
name|'True'
newline|'\n'
name|'return'
op|'('
name|'TYPE_SET_OK'
op|','
string|"'I'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'CmdArgSyntaxError'
op|'('
name|'code'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|type_UNKNOWN
dedent|''
dedent|''
name|'def'
name|'type_UNKNOWN'
op|'('
name|'self'
op|','
name|'code'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'CmdNotImplementedForArgError'
op|'('
name|'code'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_SYST
dedent|''
name|'def'
name|'ftp_SYST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'NAME_SYS_TYPE'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_STRU
dedent|''
name|'def'
name|'ftp_STRU'
op|'('
name|'self'
op|','
name|'structure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'structure'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'if'
name|'p'
op|'=='
string|"'F'"
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'CMD_OK'
op|','
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'CmdNotImplementedForArgError'
op|'('
name|'structure'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_MODE
dedent|''
name|'def'
name|'ftp_MODE'
op|'('
name|'self'
op|','
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'mode'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'if'
name|'p'
op|'=='
string|"'S'"
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'CMD_OK'
op|','
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'CmdNotImplementedForArgError'
op|'('
name|'mode'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_MKD
dedent|''
name|'def'
name|'ftp_MKD'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'newsegs'
op|'='
name|'toSegments'
op|'('
name|'self'
op|'.'
name|'workingDirectory'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidPath'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'FileNotFoundError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'shell'
op|'.'
name|'makeDirectory'
op|'('
name|'newsegs'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ign'
op|':'
op|'('
name|'MKD_REPLY'
op|','
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_RMD
dedent|''
name|'def'
name|'ftp_RMD'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'newsegs'
op|'='
name|'toSegments'
op|'('
name|'self'
op|'.'
name|'workingDirectory'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidPath'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'FileNotFoundError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'shell'
op|'.'
name|'removeDirectory'
op|'('
name|'newsegs'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ign'
op|':'
op|'('
name|'REQ_FILE_ACTN_COMPLETED_OK'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_DELE
dedent|''
name|'def'
name|'ftp_DELE'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'newsegs'
op|'='
name|'toSegments'
op|'('
name|'self'
op|'.'
name|'workingDirectory'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidPath'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'FileNotFoundError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'shell'
op|'.'
name|'removeFile'
op|'('
name|'newsegs'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ign'
op|':'
op|'('
name|'REQ_FILE_ACTN_COMPLETED_OK'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_NOOP
dedent|''
name|'def'
name|'ftp_NOOP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'CMD_OK'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_RNFR
dedent|''
name|'def'
name|'ftp_RNFR'
op|'('
name|'self'
op|','
name|'fromName'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_fromName'
op|'='
name|'fromName'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
name|'self'
op|'.'
name|'RENAMING'
newline|'\n'
name|'return'
op|'('
name|'REQ_FILE_ACTN_PENDING_FURTHER_INFO'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_RNTO
dedent|''
name|'def'
name|'ftp_RNTO'
op|'('
name|'self'
op|','
name|'toName'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fromName'
op|'='
name|'self'
op|'.'
name|'_fromName'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'_fromName'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
name|'self'
op|'.'
name|'AUTHED'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fromsegs'
op|'='
name|'toSegments'
op|'('
name|'self'
op|'.'
name|'workingDirectory'
op|','
name|'fromName'
op|')'
newline|'\n'
name|'tosegs'
op|'='
name|'toSegments'
op|'('
name|'self'
op|'.'
name|'workingDirectory'
op|','
name|'toName'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidPath'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'FileNotFoundError'
op|'('
name|'fromName'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'shell'
op|'.'
name|'rename'
op|'('
name|'fromsegs'
op|','
name|'tosegs'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ign'
op|':'
op|'('
name|'REQ_FILE_ACTN_COMPLETED_OK'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ftp_QUIT
dedent|''
name|'def'
name|'ftp_QUIT'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reply'
op|'('
name|'GOODBYE_MSG'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'disconnected'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cleanupDTP
dedent|''
name|'def'
name|'cleanupDTP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""call when DTP connection exits\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'cleanupDTP'"
op|','
name|'debug'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
name|'self'
op|'.'
name|'dtpPort'
op|')'
newline|'\n'
name|'dtpPort'
op|','
name|'self'
op|'.'
name|'dtpPort'
op|'='
name|'self'
op|'.'
name|'dtpPort'
op|','
name|'None'
newline|'\n'
name|'if'
name|'interfaces'
op|'.'
name|'IListeningPort'
op|'.'
name|'providedBy'
op|'('
name|'dtpPort'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dtpPort'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'interfaces'
op|'.'
name|'IConnector'
op|'.'
name|'providedBy'
op|'('
name|'dtpPort'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dtpPort'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'assert'
name|'False'
op|','
string|'"dtpPort should be an IListeningPort or IConnector, instead is %r"'
op|'%'
op|'('
name|'dtpPort'
op|','
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'dtpFactory'
op|'.'
name|'stopFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dtpFactory'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'dtpInstance'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'dtpInstance'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPFactory
dedent|''
dedent|''
dedent|''
name|'class'
name|'FTPFactory'
op|'('
name|'policies'
op|'.'
name|'LimitTotalConnectionsFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A factory for producing ftp protocol instances\n\n    @ivar timeOut: the protocol interpreter\'s idle timeout time in seconds,\n        default is 600 seconds.\n\n    @ivar passivePortRange: value forwarded to C{protocol.passivePortRange}.\n    @type passivePortRange: C{iterator}\n    """'
newline|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'FTP'
newline|'\n'
DECL|variable|overflowProtocol
name|'overflowProtocol'
op|'='
name|'FTPOverflowProtocol'
newline|'\n'
DECL|variable|allowAnonymous
name|'allowAnonymous'
op|'='
name|'True'
newline|'\n'
DECL|variable|userAnonymous
name|'userAnonymous'
op|'='
string|"'anonymous'"
newline|'\n'
DECL|variable|timeOut
name|'timeOut'
op|'='
number|'600'
newline|'\n'
nl|'\n'
DECL|variable|welcomeMessage
name|'welcomeMessage'
op|'='
string|'"Twisted %s FTP Server"'
op|'%'
op|'('
name|'copyright'
op|'.'
name|'version'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|variable|passivePortRange
name|'passivePortRange'
op|'='
name|'xrange'
op|'('
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'portal'
op|'='
name|'None'
op|','
name|'userAnonymous'
op|'='
string|"'anonymous'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'portal'
op|'='
name|'portal'
newline|'\n'
name|'self'
op|'.'
name|'userAnonymous'
op|'='
name|'userAnonymous'
newline|'\n'
name|'self'
op|'.'
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'policies'
op|'.'
name|'LimitTotalConnectionsFactory'
op|'.'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
newline|'\n'
name|'if'
name|'p'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'portal'
op|'='
name|'self'
op|'.'
name|'portal'
newline|'\n'
name|'p'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'timeOut'
op|'='
name|'self'
op|'.'
name|'timeOut'
newline|'\n'
name|'p'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'passivePortRange'
op|'='
name|'self'
op|'.'
name|'passivePortRange'
newline|'\n'
dedent|''
name|'return'
name|'p'
newline|'\n'
nl|'\n'
DECL|member|stopFactory
dedent|''
name|'def'
name|'stopFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# make sure ftp instance's timeouts are set to None"
nl|'\n'
comment|'# to avoid reactor complaints'
nl|'\n'
indent|'        '
op|'['
name|'p'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
name|'for'
name|'p'
name|'in'
name|'self'
op|'.'
name|'instances'
name|'if'
name|'p'
op|'.'
name|'timeOut'
name|'is'
name|'not'
name|'None'
op|']'
newline|'\n'
name|'policies'
op|'.'
name|'LimitTotalConnectionsFactory'
op|'.'
name|'stopFactory'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
comment|'# -- Cred Objects --'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IFTPShell
dedent|''
dedent|''
name|'class'
name|'IFTPShell'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An abstraction of the shell commands used by the FTP protocol for\n    a given user account.\n\n    All path names must be absolute.\n    """'
newline|'\n'
nl|'\n'
DECL|member|makeDirectory
name|'def'
name|'makeDirectory'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a directory.\n\n        @param path: The path, as a list of segments, to create\n        @type path: C{list} of C{unicode}\n\n        @return: A Deferred which fires when the directory has been\n        created, or which fails if the directory cannot be created.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeDirectory
dedent|''
name|'def'
name|'removeDirectory'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove a directory.\n\n        @param path: The path, as a list of segments, to remove\n        @type path: C{list} of C{unicode}\n\n        @return: A Deferred which fires when the directory has been\n        removed, or which fails if the directory cannot be removed.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeFile
dedent|''
name|'def'
name|'removeFile'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove a file.\n\n        @param path: The path, as a list of segments, to remove\n        @type path: C{list} of C{unicode}\n\n        @return: A Deferred which fires when the file has been\n        removed, or which fails if the file cannot be removed.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|rename
dedent|''
name|'def'
name|'rename'
op|'('
name|'fromPath'
op|','
name|'toPath'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Rename a file or directory.\n\n        @param fromPath: The current name of the path.\n        @type fromPath: C{list} of C{unicode}\n\n        @param toPath: The desired new name of the path.\n        @type toPath: C{list} of C{unicode}\n\n        @return: A Deferred which fires when the path has been\n        renamed, or which fails if the path cannot be renamed.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|access
dedent|''
name|'def'
name|'access'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Determine whether access to the given path is allowed.\n\n        @param path: The path, as a list of segments\n\n        @return: A Deferred which fires with None if access is allowed\n        or which fails with a specific exception type if access is\n        denied.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stat
dedent|''
name|'def'
name|'stat'
op|'('
name|'path'
op|','
name|'keys'
op|'='
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve information about the given path.\n\n        This is like list, except it will never return results about\n        child paths.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|list
dedent|''
name|'def'
name|'list'
op|'('
name|'path'
op|','
name|'keys'
op|'='
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve information about the given path.\n\n        If the path represents a non-directory, the result list should\n        have only one entry with information about that non-directory.\n        Otherwise, the result list should have an element for each\n        child of the directory.\n\n        @param path: The path, as a list of segments, to list\n        @type path: C{list} of C{unicode}\n\n        @param keys: A tuple of keys desired in the resulting\n        dictionaries.\n\n        @return: A Deferred which fires with a list of (name, list),\n        where the name is the name of the entry as a unicode string\n        and each list contains values corresponding to the requested\n        keys.  The following are possible elements of keys, and the\n        values which should be returned for them:\n\n            - C{\'size\'}: size in bytes, as an integer (this is kinda required)\n\n            - C{\'directory\'}: boolean indicating the type of this entry\n\n            - C{\'permissions\'}: a bitvector (see os.stat(foo).st_mode)\n\n            - C{\'hardlinks\'}: Number of hard links to this entry\n\n            - C{\'modified\'}: number of seconds since the epoch since entry was\n              modified\n\n            - C{\'owner\'}: string indicating the user owner of this entry\n\n            - C{\'group\'}: string indicating the group owner of this entry\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|openForReading
dedent|''
name|'def'
name|'openForReading'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param path: The path, as a list of segments, to open\n        @type path: C{list} of C{unicode}\n\n        @rtype: C{Deferred} which will fire with L{IReadFile}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|openForWriting
dedent|''
name|'def'
name|'openForWriting'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param path: The path, as a list of segments, to open\n        @type path: C{list} of C{unicode}\n\n        @rtype: C{Deferred} which will fire with L{IWriteFile}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IReadFile
dedent|''
dedent|''
name|'class'
name|'IReadFile'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A file out of which bytes may be read.\n    """'
newline|'\n'
nl|'\n'
DECL|member|send
name|'def'
name|'send'
op|'('
name|'consumer'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Produce the contents of the given path to the given consumer.  This\n        method may only be invoked once on each provider.\n\n        @type consumer: C{IConsumer}\n\n        @return: A Deferred which fires when the file has been\n        consumed completely.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IWriteFile
dedent|''
dedent|''
name|'class'
name|'IWriteFile'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A file into which bytes may be written.\n    """'
newline|'\n'
nl|'\n'
DECL|member|receive
name|'def'
name|'receive'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a consumer which will write to this file.  This method may\n        only be invoked once on each provider.\n\n        @rtype: C{Deferred} of C{IConsumer}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_getgroups
dedent|''
dedent|''
name|'def'
name|'_getgroups'
op|'('
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the primary and supplementary groups for the given UID.\n\n    @type uid: C{int}\n    """'
newline|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'pwent'
op|'='
name|'pwd'
op|'.'
name|'getpwuid'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'.'
name|'append'
op|'('
name|'pwent'
op|'.'
name|'pw_gid'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'grent'
name|'in'
name|'grp'
op|'.'
name|'getgrall'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'pwent'
op|'.'
name|'pw_name'
name|'in'
name|'grent'
op|'.'
name|'gr_mem'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'append'
op|'('
name|'grent'
op|'.'
name|'gr_gid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_testPermissions
dedent|''
name|'def'
name|'_testPermissions'
op|'('
name|'uid'
op|','
name|'gid'
op|','
name|'spath'
op|','
name|'mode'
op|'='
string|"'r'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    checks to see if uid has proper permissions to access path with mode\n\n    @type uid: C{int}\n    @param uid: numeric user id\n\n    @type gid: C{int}\n    @param gid: numeric group id\n\n    @type spath: C{str}\n    @param spath: the path on the server to test\n\n    @type mode: C{str}\n    @param mode: \'r\' or \'w\' (read or write)\n\n    @rtype: C{bool}\n    @return: True if the given credentials have the specified form of\n        access to the given path\n    """'
newline|'\n'
name|'if'
name|'mode'
op|'=='
string|"'r'"
op|':'
newline|'\n'
indent|'        '
name|'usr'
op|'='
name|'stat'
op|'.'
name|'S_IRUSR'
newline|'\n'
name|'grp'
op|'='
name|'stat'
op|'.'
name|'S_IRGRP'
newline|'\n'
name|'oth'
op|'='
name|'stat'
op|'.'
name|'S_IROTH'
newline|'\n'
name|'amode'
op|'='
name|'os'
op|'.'
name|'R_OK'
newline|'\n'
dedent|''
name|'elif'
name|'mode'
op|'=='
string|"'w'"
op|':'
newline|'\n'
indent|'        '
name|'usr'
op|'='
name|'stat'
op|'.'
name|'S_IWUSR'
newline|'\n'
name|'grp'
op|'='
name|'stat'
op|'.'
name|'S_IWGRP'
newline|'\n'
name|'oth'
op|'='
name|'stat'
op|'.'
name|'S_IWOTH'
newline|'\n'
name|'amode'
op|'='
name|'os'
op|'.'
name|'W_OK'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|'"Invalid mode %r: must specify \'r\' or \'w\'"'
op|'%'
op|'('
name|'mode'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'access'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'spath'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'uid'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'access'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'spath'
op|')'
newline|'\n'
name|'if'
name|'usr'
op|'&'
name|'s'
op|'.'
name|'st_mode'
name|'and'
name|'uid'
op|'=='
name|'s'
op|'.'
name|'st_uid'
op|':'
newline|'\n'
indent|'                '
name|'access'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'grp'
op|'&'
name|'s'
op|'.'
name|'st_mode'
name|'and'
name|'gid'
name|'in'
name|'_getgroups'
op|'('
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'access'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'oth'
op|'&'
name|'s'
op|'.'
name|'st_mode'
op|':'
newline|'\n'
indent|'                '
name|'access'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'access'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'os'
op|'.'
name|'access'
op|'('
name|'spath'
op|','
name|'amode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'access'
op|'='
name|'False'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Filesystem grants permission to UID %d but it is inaccessible to me running as UID %d"'
op|'%'
op|'('
nl|'\n'
name|'uid'
op|','
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'access'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPAnonymousShell
dedent|''
name|'class'
name|'FTPAnonymousShell'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An anonymous implementation of IFTPShell\n\n    @type filesystemRoot: L{twisted.python.filepath.FilePath}\n    @ivar filesystemRoot: The path which is considered the root of\n    this shell.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IFTPShell'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'filesystemRoot'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'filesystemRoot'
op|'='
name|'filesystemRoot'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_path
dedent|''
name|'def'
name|'_path'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'reduce'
op|'('
name|'filepath'
op|'.'
name|'FilePath'
op|'.'
name|'child'
op|','
name|'path'
op|','
name|'self'
op|'.'
name|'filesystemRoot'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeDirectory
dedent|''
name|'def'
name|'makeDirectory'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'AnonUserDeniedError'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeDirectory
dedent|''
name|'def'
name|'removeDirectory'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'AnonUserDeniedError'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeFile
dedent|''
name|'def'
name|'removeFile'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'AnonUserDeniedError'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|rename
dedent|''
name|'def'
name|'rename'
op|'('
name|'self'
op|','
name|'fromPath'
op|','
name|'toPath'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'AnonUserDeniedError'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|receive
dedent|''
name|'def'
name|'receive'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'='
name|'self'
op|'.'
name|'_path'
op|'('
name|'path'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'AnonUserDeniedError'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|openForReading
dedent|''
name|'def'
name|'openForReading'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'self'
op|'.'
name|'_path'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'p'
op|'.'
name|'isdir'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Normally, we would only check for EISDIR in open, but win32'
nl|'\n'
comment|'# returns EACCES in this case, so we check before'
nl|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'IsADirectoryError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'p'
op|'.'
name|'open'
op|'('
string|"'rb'"
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'IOError'
op|','
name|'OSError'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'errnoToFailure'
op|'('
name|'e'
op|'.'
name|'errno'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'_FileReader'
op|'('
name|'f'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|openForWriting
dedent|''
dedent|''
name|'def'
name|'openForWriting'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reject write attempts by anonymous users with\n        L{PermissionDeniedError}.\n        """'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'PermissionDeniedError'
op|'('
string|'"STOR not allowed"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|access
dedent|''
name|'def'
name|'access'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'self'
op|'.'
name|'_path'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'p'
op|'.'
name|'exists'
op|'('
op|')'
op|':'
newline|'\n'
comment|"# Again, win32 doesn't report a sane error after, so let's fail"
nl|'\n'
comment|'# early if we can'
nl|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'FileNotFoundError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
comment|'# For now, just see if we can os.listdir() it'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'listdir'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'IOError'
op|','
name|'OSError'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'errnoToFailure'
op|'('
name|'e'
op|'.'
name|'errno'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stat
dedent|''
dedent|''
name|'def'
name|'stat'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'keys'
op|'='
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'self'
op|'.'
name|'_path'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'p'
op|'.'
name|'isdir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'statResult'
op|'='
name|'self'
op|'.'
name|'_statNode'
op|'('
name|'p'
op|','
name|'keys'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'IOError'
op|','
name|'OSError'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'errnoToFailure'
op|'('
name|'e'
op|'.'
name|'errno'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'statResult'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'list'
op|'('
name|'path'
op|','
name|'keys'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'res'
op|':'
name|'res'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|list
dedent|''
dedent|''
name|'def'
name|'list'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'keys'
op|'='
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the list of files at given C{path}, adding C{keys} stat\n        informations if specified.\n\n        @param path: the directory or file to check.\n        @type path: C{str}\n\n        @param keys: the list of desired metadata\n        @type keys: C{list} of C{str}\n        """'
newline|'\n'
name|'filePath'
op|'='
name|'self'
op|'.'
name|'_path'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'filePath'
op|'.'
name|'isdir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'entries'
op|'='
name|'filePath'
op|'.'
name|'listdir'
op|'('
op|')'
newline|'\n'
name|'fileEntries'
op|'='
op|'['
name|'filePath'
op|'.'
name|'child'
op|'('
name|'p'
op|')'
name|'for'
name|'p'
name|'in'
name|'entries'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'filePath'
op|'.'
name|'isfile'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'entries'
op|'='
op|'['
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
op|'*'
name|'filePath'
op|'.'
name|'segmentsFrom'
op|'('
name|'self'
op|'.'
name|'filesystemRoot'
op|')'
op|')'
op|']'
newline|'\n'
name|'fileEntries'
op|'='
op|'['
name|'filePath'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'FileNotFoundError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'fileName'
op|','
name|'filePath'
name|'in'
name|'zip'
op|'('
name|'entries'
op|','
name|'fileEntries'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ent'
op|'='
op|'['
op|']'
newline|'\n'
name|'results'
op|'.'
name|'append'
op|'('
op|'('
name|'fileName'
op|','
name|'ent'
op|')'
op|')'
newline|'\n'
name|'if'
name|'keys'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'ent'
op|'.'
name|'extend'
op|'('
name|'self'
op|'.'
name|'_statNode'
op|'('
name|'filePath'
op|','
name|'keys'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'IOError'
op|','
name|'OSError'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'errnoToFailure'
op|'('
name|'e'
op|'.'
name|'errno'
op|','
name|'fileName'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'results'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_statNode
dedent|''
name|'def'
name|'_statNode'
op|'('
name|'self'
op|','
name|'filePath'
op|','
name|'keys'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Shortcut method to get stat info on a node.\n\n        @param filePath: the node to stat.\n        @type filePath: C{filepath.FilePath}\n\n        @param keys: the stat keys to get.\n        @type keys: C{iterable}\n        """'
newline|'\n'
name|'filePath'
op|'.'
name|'restat'
op|'('
op|')'
newline|'\n'
name|'return'
op|'['
name|'getattr'
op|'('
name|'self'
op|','
string|"'_stat_'"
op|'+'
name|'k'
op|')'
op|'('
name|'filePath'
op|'.'
name|'statinfo'
op|')'
name|'for'
name|'k'
name|'in'
name|'keys'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|_stat_size
dedent|''
name|'_stat_size'
op|'='
name|'operator'
op|'.'
name|'attrgetter'
op|'('
string|"'st_size'"
op|')'
newline|'\n'
DECL|variable|_stat_permissions
name|'_stat_permissions'
op|'='
name|'operator'
op|'.'
name|'attrgetter'
op|'('
string|"'st_mode'"
op|')'
newline|'\n'
DECL|variable|_stat_hardlinks
name|'_stat_hardlinks'
op|'='
name|'operator'
op|'.'
name|'attrgetter'
op|'('
string|"'st_nlink'"
op|')'
newline|'\n'
DECL|variable|_stat_modified
name|'_stat_modified'
op|'='
name|'operator'
op|'.'
name|'attrgetter'
op|'('
string|"'st_mtime'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_stat_owner
name|'def'
name|'_stat_owner'
op|'('
name|'self'
op|','
name|'st'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'pwd'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'pwd'
op|'.'
name|'getpwuid'
op|'('
name|'st'
op|'.'
name|'st_uid'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'str'
op|'('
name|'st'
op|'.'
name|'st_uid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_stat_group
dedent|''
name|'def'
name|'_stat_group'
op|'('
name|'self'
op|','
name|'st'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'grp'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'grp'
op|'.'
name|'getgrgid'
op|'('
name|'st'
op|'.'
name|'st_gid'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'str'
op|'('
name|'st'
op|'.'
name|'st_gid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_stat_directory
dedent|''
name|'def'
name|'_stat_directory'
op|'('
name|'self'
op|','
name|'st'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'bool'
op|'('
name|'st'
op|'.'
name|'st_mode'
op|'&'
name|'stat'
op|'.'
name|'S_IFDIR'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_FileReader
dedent|''
dedent|''
name|'class'
name|'_FileReader'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IReadFile'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'fObj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fObj'
op|'='
name|'fObj'
newline|'\n'
name|'self'
op|'.'
name|'_send'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_close
dedent|''
name|'def'
name|'_close'
op|'('
name|'self'
op|','
name|'passthrough'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_send'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'fObj'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'passthrough'
newline|'\n'
nl|'\n'
DECL|member|send
dedent|''
name|'def'
name|'send'
op|'('
name|'self'
op|','
name|'consumer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'not'
name|'self'
op|'.'
name|'_send'
op|','
string|'"Can only call IReadFile.send *once* per instance"'
newline|'\n'
name|'self'
op|'.'
name|'_send'
op|'='
name|'True'
newline|'\n'
name|'d'
op|'='
name|'basic'
op|'.'
name|'FileSender'
op|'('
op|')'
op|'.'
name|'beginFileTransfer'
op|'('
name|'self'
op|'.'
name|'fObj'
op|','
name|'consumer'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'self'
op|'.'
name|'_close'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPShell
dedent|''
dedent|''
name|'class'
name|'FTPShell'
op|'('
name|'FTPAnonymousShell'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An authenticated implementation of L{IFTPShell}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|makeDirectory
name|'def'
name|'makeDirectory'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'self'
op|'.'
name|'_path'
op|'('
name|'path'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'IOError'
op|','
name|'OSError'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'errnoToFailure'
op|'('
name|'e'
op|'.'
name|'errno'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeDirectory
dedent|''
dedent|''
name|'def'
name|'removeDirectory'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'self'
op|'.'
name|'_path'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'p'
op|'.'
name|'isfile'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Win32 returns the wrong errno when rmdir is called on a file'
nl|'\n'
comment|"# instead of a directory, so as we have the info here, let's fail"
nl|'\n'
comment|'# early with a pertinent error'
nl|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'IsNotADirectoryError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'rmdir'
op|'('
name|'p'
op|'.'
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'IOError'
op|','
name|'OSError'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'errnoToFailure'
op|'('
name|'e'
op|'.'
name|'errno'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeFile
dedent|''
dedent|''
name|'def'
name|'removeFile'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'self'
op|'.'
name|'_path'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'p'
op|'.'
name|'isdir'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Win32 returns the wrong errno when remove is called on a'
nl|'\n'
comment|'# directory instead of a file, so as we have the info here,'
nl|'\n'
comment|"# let's fail early with a pertinent error"
nl|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'IsADirectoryError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'remove'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'IOError'
op|','
name|'OSError'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'errnoToFailure'
op|'('
name|'e'
op|'.'
name|'errno'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|rename
dedent|''
dedent|''
name|'def'
name|'rename'
op|'('
name|'self'
op|','
name|'fromPath'
op|','
name|'toPath'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fp'
op|'='
name|'self'
op|'.'
name|'_path'
op|'('
name|'fromPath'
op|')'
newline|'\n'
name|'tp'
op|'='
name|'self'
op|'.'
name|'_path'
op|'('
name|'toPath'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'rename'
op|'('
name|'fp'
op|'.'
name|'path'
op|','
name|'tp'
op|'.'
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'IOError'
op|','
name|'OSError'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'errnoToFailure'
op|'('
name|'e'
op|'.'
name|'errno'
op|','
name|'fromPath'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|openForWriting
dedent|''
dedent|''
name|'def'
name|'openForWriting'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'self'
op|'.'
name|'_path'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'p'
op|'.'
name|'isdir'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Normally, we would only check for EISDIR in open, but win32'
nl|'\n'
comment|'# returns EACCES in this case, so we check before'
nl|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'IsADirectoryError'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fObj'
op|'='
name|'p'
op|'.'
name|'open'
op|'('
string|"'wb'"
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'IOError'
op|','
name|'OSError'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'errnoToFailure'
op|'('
name|'e'
op|'.'
name|'errno'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'_FileWriter'
op|'('
name|'fObj'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_FileWriter
dedent|''
dedent|''
name|'class'
name|'_FileWriter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IWriteFile'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'fObj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fObj'
op|'='
name|'fObj'
newline|'\n'
name|'self'
op|'.'
name|'_receive'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|receive
dedent|''
name|'def'
name|'receive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'not'
name|'self'
op|'.'
name|'_receive'
op|','
string|'"Can only call IWriteFile.receive *once* per instance"'
newline|'\n'
name|'self'
op|'.'
name|'_receive'
op|'='
name|'True'
newline|'\n'
comment|'# FileConsumer will close the file object'
nl|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'FileConsumer'
op|'('
name|'self'
op|'.'
name|'fObj'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPRealm
dedent|''
dedent|''
name|'class'
name|'FTPRealm'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @type anonymousRoot: L{twisted.python.filepath.FilePath}\n    @ivar anonymousRoot: Root of the filesystem to which anonymous\n    users will be granted access.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'portal'
op|'.'
name|'IRealm'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'anonymousRoot'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'anonymousRoot'
op|'='
name|'filepath'
op|'.'
name|'FilePath'
op|'('
name|'anonymousRoot'
op|')'
newline|'\n'
nl|'\n'
DECL|member|requestAvatar
dedent|''
name|'def'
name|'requestAvatar'
op|'('
name|'self'
op|','
name|'avatarId'
op|','
name|'mind'
op|','
op|'*'
name|'interfaces'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'iface'
name|'in'
name|'interfaces'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'iface'
name|'is'
name|'IFTPShell'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'avatarId'
name|'is'
name|'checkers'
op|'.'
name|'ANONYMOUS'
op|':'
newline|'\n'
indent|'                    '
name|'avatar'
op|'='
name|'FTPAnonymousShell'
op|'('
name|'self'
op|'.'
name|'anonymousRoot'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'avatar'
op|'='
name|'FTPShell'
op|'('
name|'filepath'
op|'.'
name|'FilePath'
op|'('
string|'"/home/"'
op|'+'
name|'avatarId'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'IFTPShell'
op|','
name|'avatar'
op|','
name|'getattr'
op|'('
name|'avatar'
op|','
string|"'logout'"
op|','
name|'lambda'
op|':'
name|'None'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'NotImplementedError'
op|'('
string|'"Only IFTPShell interface is supported by this realm"'
op|')'
newline|'\n'
nl|'\n'
comment|'# --- FTP CLIENT  -------------------------------------------------------------'
nl|'\n'
nl|'\n'
comment|'####'
nl|'\n'
comment|'# And now for the client...'
nl|'\n'
nl|'\n'
comment|'# Notes:'
nl|'\n'
comment|'#   * Reference: http://cr.yp.to/ftp.html'
nl|'\n'
comment|'#   * FIXME: Does not support pipelining (which is not supported by all'
nl|'\n'
comment|"#     servers anyway).  This isn't a functionality limitation, just a"
nl|'\n'
comment|'#     small performance issue.'
nl|'\n'
comment|'#   * Only has a rudimentary understanding of FTP response codes (although'
nl|'\n'
comment|'#     the full response is passed to the caller if they so choose).'
nl|'\n'
comment|'#   * Assumes that USER and PASS should always be sent'
nl|'\n'
comment|'#   * Always sets TYPE I  (binary mode)'
nl|'\n'
comment|"#   * Doesn't understand any of the weird, obscure TELNET stuff (\\377...)"
nl|'\n'
comment|"#   * FIXME: Doesn't share any code with the FTPServer"
nl|'\n'
nl|'\n'
DECL|class|ConnectionLost
dedent|''
dedent|''
name|'class'
name|'ConnectionLost'
op|'('
name|'FTPError'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|CommandFailed
dedent|''
name|'class'
name|'CommandFailed'
op|'('
name|'FTPError'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|BadResponse
dedent|''
name|'class'
name|'BadResponse'
op|'('
name|'FTPError'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|UnexpectedResponse
dedent|''
name|'class'
name|'UnexpectedResponse'
op|'('
name|'FTPError'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|UnexpectedData
dedent|''
name|'class'
name|'UnexpectedData'
op|'('
name|'FTPError'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|FTPCommand
dedent|''
name|'class'
name|'FTPCommand'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'text'
op|'='
name|'None'
op|','
name|'public'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'text'
op|'='
name|'text'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ready'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'public'
op|'='
name|'public'
newline|'\n'
name|'self'
op|'.'
name|'transferDeferred'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|fail
dedent|''
name|'def'
name|'fail'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'public'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'failure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProtocolWrapper
dedent|''
dedent|''
dedent|''
name|'class'
name|'ProtocolWrapper'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'original'
op|','
name|'deferred'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'original'
op|'='
name|'original'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'deferred'
newline|'\n'
DECL|member|makeConnection
dedent|''
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'original'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'original'
op|'.'
name|'dataReceived'
op|'('
name|'data'
op|')'
newline|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'original'
op|'.'
name|'connectionLost'
op|'('
name|'reason'
op|')'
newline|'\n'
comment|'# Signal that transfer has completed'
nl|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SenderProtocol
dedent|''
dedent|''
name|'class'
name|'SenderProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'IFinishableConsumer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Fired upon connection'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'connectedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Fired upon disconnection'
nl|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'#Protocol stuff'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'UnexpectedData'
op|'('
nl|'\n'
string|'"Received data from the server on a "'
nl|'\n'
string|'"send-only data-connection"'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|makeConnection
dedent|''
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'protocol'
op|'.'
name|'Protocol'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connectedDeferred'
op|'.'
name|'callback'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'reason'
op|'.'
name|'check'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
string|"'connection done'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
comment|'#IFinishableConsumer stuff'
nl|'\n'
DECL|member|write
dedent|''
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|registerProducer
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Register the given producer with our transport.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'registerProducer'
op|'('
name|'producer'
op|','
name|'streaming'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Unregister the previously registered producer.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish
dedent|''
name|'def'
name|'finish'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|decodeHostPort
dedent|''
dedent|''
name|'def'
name|'decodeHostPort'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decode an FTP response specifying a host and port.\n\n    @return: a 2-tuple of (host, port).\n    """'
newline|'\n'
name|'abcdef'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|"'[^0-9, ]'"
op|','
string|"''"
op|','
name|'line'
op|')'
newline|'\n'
name|'parsed'
op|'='
op|'['
name|'int'
op|'('
name|'p'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
name|'for'
name|'p'
name|'in'
name|'abcdef'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|']'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'parsed'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'x'
op|'<'
number|'0'
name|'or'
name|'x'
op|'>'
number|'255'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Out of range"'
op|','
name|'line'
op|','
name|'x'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'a'
op|','
name|'b'
op|','
name|'c'
op|','
name|'d'
op|','
name|'e'
op|','
name|'f'
op|'='
name|'parsed'
newline|'\n'
name|'host'
op|'='
string|'"%s.%s.%s.%s"'
op|'%'
op|'('
name|'a'
op|','
name|'b'
op|','
name|'c'
op|','
name|'d'
op|')'
newline|'\n'
name|'port'
op|'='
op|'('
name|'int'
op|'('
name|'e'
op|')'
op|'<<'
number|'8'
op|')'
op|'+'
name|'int'
op|'('
name|'f'
op|')'
newline|'\n'
name|'return'
name|'host'
op|','
name|'port'
newline|'\n'
nl|'\n'
DECL|function|encodeHostPort
dedent|''
name|'def'
name|'encodeHostPort'
op|'('
name|'host'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'numbers'
op|'='
name|'host'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'+'
op|'['
name|'str'
op|'('
name|'port'
op|'>>'
number|'8'
op|')'
op|','
name|'str'
op|'('
name|'port'
op|'%'
number|'256'
op|')'
op|']'
newline|'\n'
name|'return'
string|"','"
op|'.'
name|'join'
op|'('
name|'numbers'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_unwrapFirstError
dedent|''
name|'def'
name|'_unwrapFirstError'
op|'('
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'failure'
op|'.'
name|'trap'
op|'('
name|'defer'
op|'.'
name|'FirstError'
op|')'
newline|'\n'
name|'return'
name|'failure'
op|'.'
name|'value'
op|'.'
name|'subFailure'
newline|'\n'
nl|'\n'
DECL|class|FTPDataPortFactory
dedent|''
name|'class'
name|'FTPDataPortFactory'
op|'('
name|'protocol'
op|'.'
name|'ServerFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Factory for data connections that use the PORT command\n\n    (i.e. "active" transfers)\n    """'
newline|'\n'
DECL|variable|noisy
name|'noisy'
op|'='
number|'0'
newline|'\n'
DECL|member|buildProtocol
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
comment|'# This is a bit hackish -- we already have a Protocol instance,'
nl|'\n'
comment|'# so just return it instead of making a new one'
nl|'\n'
comment|'# FIXME: Reject connections from the wrong address/port'
nl|'\n'
comment|'#        (potential security problem)'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'protocol'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPClientBasic
dedent|''
dedent|''
name|'class'
name|'FTPClientBasic'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Foundations of an FTP client.\n    """'
newline|'\n'
DECL|variable|debug
name|'debug'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'actionQueue'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'greeting'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'nextDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cb_greeting'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nextDeferred'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'fail'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'response'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_failed'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|fail
dedent|''
name|'def'
name|'fail'
op|'('
name|'self'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Give an error to any queued deferreds.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_fail'
op|'('
name|'error'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_fail
dedent|''
name|'def'
name|'_fail'
op|'('
name|'self'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Errback all queued deferreds.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_failed'
op|':'
newline|'\n'
comment|"# We're recursing; bail out here for simplicity"
nl|'\n'
indent|'            '
name|'return'
name|'error'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_failed'
op|'='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'nextDeferred'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'nextDeferred'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'ConnectionLost'
op|'('
string|"'FTP connection lost'"
op|','
name|'error'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'defer'
op|'.'
name|'AlreadyCalledError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'ftpCommand'
name|'in'
name|'self'
op|'.'
name|'actionQueue'
op|':'
newline|'\n'
indent|'            '
name|'ftpCommand'
op|'.'
name|'fail'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'ConnectionLost'
op|'('
string|"'FTP connection lost'"
op|','
name|'error'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'error'
newline|'\n'
nl|'\n'
DECL|member|_cb_greeting
dedent|''
name|'def'
name|'_cb_greeting'
op|'('
name|'self'
op|','
name|'greeting'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'greeting'
op|'='
name|'greeting'
newline|'\n'
nl|'\n'
DECL|member|sendLine
dedent|''
name|'def'
name|'sendLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        (Private) Sends a line, unless line is None.\n        """'
newline|'\n'
name|'if'
name|'line'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'basic'
op|'.'
name|'LineReceiver'
op|'.'
name|'sendLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendNextCommand
dedent|''
name|'def'
name|'sendNextCommand'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        (Private) Processes the next command in the queue.\n        """'
newline|'\n'
name|'ftpCommand'
op|'='
name|'self'
op|'.'
name|'popCommandQueue'
op|'('
op|')'
newline|'\n'
name|'if'
name|'ftpCommand'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'nextDeferred'
op|'='
name|'None'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'ftpCommand'
op|'.'
name|'ready'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'actionQueue'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'ftpCommand'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'1.0'
op|','
name|'self'
op|'.'
name|'sendNextCommand'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nextDeferred'
op|'='
name|'None'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|"# FIXME: this if block doesn't belong in FTPClientBasic, it belongs in"
nl|'\n'
comment|'#        FTPClient.'
nl|'\n'
dedent|''
name|'if'
name|'ftpCommand'
op|'.'
name|'text'
op|'=='
string|"'PORT'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'generatePortCommand'
op|'('
name|'ftpCommand'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'debug'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'<-- %s'"
op|'%'
name|'ftpCommand'
op|'.'
name|'text'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'nextDeferred'
op|'='
name|'ftpCommand'
op|'.'
name|'deferred'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'ftpCommand'
op|'.'
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|queueCommand
dedent|''
name|'def'
name|'queueCommand'
op|'('
name|'self'
op|','
name|'ftpCommand'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add an FTPCommand object to the queue.\n\n        If it\'s the only thing in the queue, and we are connected and we aren\'t\n        waiting for a response of an earlier command, the command will be sent\n        immediately.\n\n        @param ftpCommand: an L{FTPCommand}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'actionQueue'
op|'.'
name|'append'
op|'('
name|'ftpCommand'
op|')'
newline|'\n'
name|'if'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'actionQueue'
op|')'
op|'=='
number|'1'
name|'and'
name|'self'
op|'.'
name|'transport'
name|'is'
name|'not'
name|'None'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'nextDeferred'
name|'is'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNextCommand'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|queueStringCommand
dedent|''
dedent|''
name|'def'
name|'queueStringCommand'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'public'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Queues a string to be issued as an FTP command\n\n        @param command: string of an FTP command to queue\n        @param public: a flag intended for internal use by FTPClient.  Don\'t\n            change it unless you know what you\'re doing.\n\n        @return: a L{Deferred} that will be called when the response to the\n            command has been received.\n        """'
newline|'\n'
name|'ftpCommand'
op|'='
name|'FTPCommand'
op|'('
name|'command'
op|','
name|'public'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queueCommand'
op|'('
name|'ftpCommand'
op|')'
newline|'\n'
name|'return'
name|'ftpCommand'
op|'.'
name|'deferred'
newline|'\n'
nl|'\n'
DECL|member|popCommandQueue
dedent|''
name|'def'
name|'popCommandQueue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the front element of the command queue, or None if empty.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'actionQueue'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'actionQueue'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|queueLogin
dedent|''
dedent|''
name|'def'
name|'queueLogin'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Login: send the username, send the password.\n\n        If the password is C{None}, the PASS command won\'t be sent.  Also, if\n        the response to the USER command has a response code of 230 (User logged\n        in), then PASS won\'t be sent either.\n        """'
newline|'\n'
comment|'# Prepare the USER command'
nl|'\n'
name|'deferreds'
op|'='
op|'['
op|']'
newline|'\n'
name|'userDeferred'
op|'='
name|'self'
op|'.'
name|'queueStringCommand'
op|'('
string|"'USER '"
op|'+'
name|'username'
op|','
name|'public'
op|'='
number|'0'
op|')'
newline|'\n'
name|'deferreds'
op|'.'
name|'append'
op|'('
name|'userDeferred'
op|')'
newline|'\n'
nl|'\n'
comment|'# Prepare the PASS command (if a password is given)'
nl|'\n'
name|'if'
name|'password'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'passwordCmd'
op|'='
name|'FTPCommand'
op|'('
string|"'PASS '"
op|'+'
name|'password'
op|','
name|'public'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queueCommand'
op|'('
name|'passwordCmd'
op|')'
newline|'\n'
name|'deferreds'
op|'.'
name|'append'
op|'('
name|'passwordCmd'
op|'.'
name|'deferred'
op|')'
newline|'\n'
nl|'\n'
comment|'# Avoid sending PASS if the response to USER is 230.'
nl|'\n'
comment|'# (ref: http://cr.yp.to/ftp/user.html#user)'
nl|'\n'
DECL|function|cancelPasswordIfNotNeeded
name|'def'
name|'cancelPasswordIfNotNeeded'
op|'('
name|'response'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'response'
op|'['
number|'0'
op|']'
op|'.'
name|'startswith'
op|'('
string|"'230'"
op|')'
op|':'
newline|'\n'
comment|'# No password needed!'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'actionQueue'
op|'.'
name|'remove'
op|'('
name|'passwordCmd'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'response'
newline|'\n'
dedent|''
name|'userDeferred'
op|'.'
name|'addCallback'
op|'('
name|'cancelPasswordIfNotNeeded'
op|')'
newline|'\n'
nl|'\n'
comment|'# Error handling.'
nl|'\n'
dedent|''
name|'for'
name|'deferred'
name|'in'
name|'deferreds'
op|':'
newline|'\n'
comment|'# If something goes wrong, call fail'
nl|'\n'
indent|'            '
name|'deferred'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'fail'
op|')'
newline|'\n'
comment|"# But also swallow the error, so we don't cause spurious errors"
nl|'\n'
name|'deferred'
op|'.'
name|'addErrback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        (Private) Parses the response messages from the FTP server.\n        """'
newline|'\n'
comment|'# Add this line to the current response'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'debug'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'--> %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'response'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
comment|"# Bail out if this isn't the last line of a response"
nl|'\n'
comment|'# The last line of response starts with 3 digits followed by a space'
nl|'\n'
name|'codeIsValid'
op|'='
name|'re'
op|'.'
name|'match'
op|'('
string|"r'\\d{3} '"
op|','
name|'line'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'codeIsValid'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'code'
op|'='
name|'line'
op|'['
number|'0'
op|':'
number|'3'
op|']'
newline|'\n'
nl|'\n'
comment|'# Ignore marks'
nl|'\n'
name|'if'
name|'code'
op|'['
number|'0'
op|']'
op|'=='
string|"'1'"
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# Check that we were expecting a response'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'nextDeferred'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
name|'UnexpectedResponse'
op|'('
name|'self'
op|'.'
name|'response'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|'# Reset the response'
nl|'\n'
dedent|''
name|'response'
op|'='
name|'self'
op|'.'
name|'response'
newline|'\n'
name|'self'
op|'.'
name|'response'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# Look for a success or error code, and call the appropriate callback'
nl|'\n'
name|'if'
name|'code'
op|'['
number|'0'
op|']'
name|'in'
op|'('
string|"'2'"
op|','
string|"'3'"
op|')'
op|':'
newline|'\n'
comment|'# Success'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'nextDeferred'
op|'.'
name|'callback'
op|'('
name|'response'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'code'
op|'['
number|'0'
op|']'
name|'in'
op|'('
string|"'4'"
op|','
string|"'5'"
op|')'
op|':'
newline|'\n'
comment|'# Failure'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'nextDeferred'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'CommandFailed'
op|'('
name|'response'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# This shouldn't happen unless something screwed up."
nl|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'Server sent invalid response code %s'"
op|'%'
op|'('
name|'code'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nextDeferred'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'BadResponse'
op|'('
name|'response'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Run the next command'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'sendNextCommand'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_fail'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_PassiveConnectionFactory
dedent|''
dedent|''
name|'class'
name|'_PassiveConnectionFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
DECL|variable|noisy
indent|'    '
name|'noisy'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'protoInstance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'protoInstance'
op|'='
name|'protoInstance'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'protoInstance'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'protoInstance'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
dedent|''
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'FTPError'
op|'('
string|"'Connection Failed'"
op|','
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protoInstance'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'e'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPClient
dedent|''
dedent|''
name|'class'
name|'FTPClient'
op|'('
name|'FTPClientBasic'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{FTPClient} is a client implementation of the FTP protocol which\n    exposes FTP commands as methods which return L{Deferred}s.\n\n    Each command method returns a L{Deferred} which is called back when a\n    successful response code (2xx or 3xx) is received from the server or\n    which is error backed if an error response code (4xx or 5xx) is received\n    from the server or if a protocol violation occurs.  If an error response\n    code is received, the L{Deferred} fires with a L{Failure} wrapping a\n    L{CommandFailed} instance.  The L{CommandFailed} instance is created\n    with a list of the response lines received from the server.\n\n    See U{RFC 959<http://www.ietf.org/rfc/rfc959.txt>} for error code\n    definitions.\n\n    Both active and passive transfers are supported.\n\n    @ivar passive: See description in __init__.\n    """'
newline|'\n'
DECL|variable|connectFactory
name|'connectFactory'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'username'
op|'='
string|"'anonymous'"
op|','
nl|'\n'
name|'password'
op|'='
string|"'twisted@twistedmatrix.com'"
op|','
nl|'\n'
name|'passive'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Constructor.\n\n        I will login as soon as I receive the welcome message from the server.\n\n        @param username: FTP username\n        @param password: FTP password\n        @param passive: flag that controls if I use active or passive data\n            connections.  You can also change this after construction by\n            assigning to C{self.passive}.\n        """'
newline|'\n'
name|'FTPClientBasic'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queueLogin'
op|'('
name|'username'
op|','
name|'password'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'passive'
op|'='
name|'passive'
newline|'\n'
nl|'\n'
DECL|member|fail
dedent|''
name|'def'
name|'fail'
op|'('
name|'self'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Disconnect, and also give an error to any queued deferreds.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_fail'
op|'('
name|'error'
op|')'
newline|'\n'
nl|'\n'
DECL|member|receiveFromConnection
dedent|''
name|'def'
name|'receiveFromConnection'
op|'('
name|'self'
op|','
name|'commands'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieves a file or listing generated by the given command,\n        feeding it to the given protocol.\n\n        @param commands: list of strings of FTP commands to execute then receive\n            the results of (e.g. C{LIST}, C{RETR})\n        @param protocol: A L{Protocol} B{instance} e.g. an\n            L{FTPFileListProtocol}, or something that can be adapted to one.\n            Typically this will be an L{IConsumer} implementation.\n\n        @return: L{Deferred}.\n        """'
newline|'\n'
name|'protocol'
op|'='
name|'interfaces'
op|'.'
name|'IProtocol'
op|'('
name|'protocol'
op|')'
newline|'\n'
name|'wrapper'
op|'='
name|'ProtocolWrapper'
op|'('
name|'protocol'
op|','
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_openDataConnection'
op|'('
name|'commands'
op|','
name|'wrapper'
op|')'
newline|'\n'
nl|'\n'
DECL|member|queueLogin
dedent|''
name|'def'
name|'queueLogin'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Login: send the username, send the password, and\n        set retrieval mode to binary\n        """'
newline|'\n'
name|'FTPClientBasic'
op|'.'
name|'queueLogin'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'password'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'queueStringCommand'
op|'('
string|"'TYPE I'"
op|','
name|'public'
op|'='
number|'0'
op|')'
newline|'\n'
comment|'# If something goes wrong, call fail'
nl|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'fail'
op|')'
newline|'\n'
comment|"# But also swallow the error, so we don't cause spurious errors"
nl|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendToConnection
dedent|''
name|'def'
name|'sendToConnection'
op|'('
name|'self'
op|','
name|'commands'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        XXX\n\n        @return: A tuple of two L{Deferred}s:\n                  - L{Deferred} L{IFinishableConsumer}. You must call\n                    the C{finish} method on the IFinishableConsumer when the file\n                    is completely transferred.\n                  - L{Deferred} list of control-connection responses.\n        """'
newline|'\n'
name|'s'
op|'='
name|'SenderProtocol'
op|'('
op|')'
newline|'\n'
name|'r'
op|'='
name|'self'
op|'.'
name|'_openDataConnection'
op|'('
name|'commands'
op|','
name|'s'
op|')'
newline|'\n'
name|'return'
op|'('
name|'s'
op|'.'
name|'connectedDeferred'
op|','
name|'r'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_openDataConnection
dedent|''
name|'def'
name|'_openDataConnection'
op|'('
name|'self'
op|','
name|'commands'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This method returns a DeferredList.\n        """'
newline|'\n'
name|'cmds'
op|'='
op|'['
name|'FTPCommand'
op|'('
name|'command'
op|','
name|'public'
op|'='
number|'1'
op|')'
name|'for'
name|'command'
name|'in'
name|'commands'
op|']'
newline|'\n'
name|'cmdsDeferred'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
name|'cmd'
op|'.'
name|'deferred'
name|'for'
name|'cmd'
name|'in'
name|'cmds'
op|']'
op|','
nl|'\n'
name|'fireOnOneErrback'
op|'='
name|'True'
op|','
name|'consumeErrors'
op|'='
name|'True'
op|')'
newline|'\n'
name|'cmdsDeferred'
op|'.'
name|'addErrback'
op|'('
name|'_unwrapFirstError'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'passive'
op|':'
newline|'\n'
comment|'# Hack: use a mutable object to sneak a variable out of the'
nl|'\n'
comment|'# scope of doPassive'
nl|'\n'
indent|'            '
name|'_mutable'
op|'='
op|'['
name|'None'
op|']'
newline|'\n'
DECL|function|doPassive
name|'def'
name|'doPassive'
op|'('
name|'response'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""Connect to the port specified in the response to PASV"""'
newline|'\n'
name|'host'
op|','
name|'port'
op|'='
name|'decodeHostPort'
op|'('
name|'response'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'4'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'_PassiveConnectionFactory'
op|'('
name|'protocol'
op|')'
newline|'\n'
name|'_mutable'
op|'['
number|'0'
op|']'
op|'='
name|'self'
op|'.'
name|'connectFactory'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'pasvCmd'
op|'='
name|'FTPCommand'
op|'('
string|"'PASV'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queueCommand'
op|'('
name|'pasvCmd'
op|')'
newline|'\n'
name|'pasvCmd'
op|'.'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'doPassive'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'fail'
op|')'
newline|'\n'
nl|'\n'
name|'results'
op|'='
op|'['
name|'cmdsDeferred'
op|','
name|'pasvCmd'
op|'.'
name|'deferred'
op|','
name|'protocol'
op|'.'
name|'deferred'
op|']'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'results'
op|','
name|'fireOnOneErrback'
op|'='
name|'True'
op|','
name|'consumeErrors'
op|'='
name|'True'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'_unwrapFirstError'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure the connection is always closed'
nl|'\n'
DECL|function|close
name|'def'
name|'close'
op|'('
name|'x'
op|','
name|'m'
op|'='
name|'_mutable'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'m'
op|'['
number|'0'
op|']'
name|'and'
name|'m'
op|'['
number|'0'
op|']'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'return'
name|'x'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'close'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# We just place a marker command in the queue, and will fill in'
nl|'\n'
comment|'# the host and port numbers later (see generatePortCommand)'
nl|'\n'
indent|'            '
name|'portCmd'
op|'='
name|'FTPCommand'
op|'('
string|"'PORT'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Ok, now we jump through a few hoops here.'
nl|'\n'
comment|'# This is the problem: a transfer is not to be trusted as complete'
nl|'\n'
comment|'# until we get both the "226 Transfer complete" message on the'
nl|'\n'
comment|'# control connection, and the data socket is closed.  Thus, we use'
nl|'\n'
comment|'# a DeferredList to make sure we only fire the callback at the'
nl|'\n'
comment|'# right time.'
nl|'\n'
nl|'\n'
name|'portCmd'
op|'.'
name|'transferDeferred'
op|'='
name|'protocol'
op|'.'
name|'deferred'
newline|'\n'
name|'portCmd'
op|'.'
name|'protocol'
op|'='
name|'protocol'
newline|'\n'
name|'portCmd'
op|'.'
name|'deferred'
op|'.'
name|'addErrback'
op|'('
name|'portCmd'
op|'.'
name|'transferDeferred'
op|'.'
name|'errback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queueCommand'
op|'('
name|'portCmd'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create dummy functions for the next callback to call.'
nl|'\n'
comment|'# These will also be replaced with real functions in'
nl|'\n'
comment|'# generatePortCommand.'
nl|'\n'
name|'portCmd'
op|'.'
name|'loseConnection'
op|'='
name|'lambda'
name|'result'
op|':'
name|'result'
newline|'\n'
name|'portCmd'
op|'.'
name|'fail'
op|'='
name|'lambda'
name|'error'
op|':'
name|'error'
newline|'\n'
nl|'\n'
comment|'# Ensure that the connection always gets closed'
nl|'\n'
name|'cmdsDeferred'
op|'.'
name|'addErrback'
op|'('
name|'lambda'
name|'e'
op|','
name|'pc'
op|'='
name|'portCmd'
op|':'
name|'pc'
op|'.'
name|'fail'
op|'('
name|'e'
op|')'
name|'or'
name|'e'
op|')'
newline|'\n'
nl|'\n'
name|'results'
op|'='
op|'['
name|'cmdsDeferred'
op|','
name|'portCmd'
op|'.'
name|'deferred'
op|','
name|'portCmd'
op|'.'
name|'transferDeferred'
op|']'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'results'
op|','
name|'fireOnOneErrback'
op|'='
name|'True'
op|','
name|'consumeErrors'
op|'='
name|'True'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'_unwrapFirstError'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'cmd'
name|'in'
name|'cmds'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'queueCommand'
op|'('
name|'cmd'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|generatePortCommand
dedent|''
name|'def'
name|'generatePortCommand'
op|'('
name|'self'
op|','
name|'portCmd'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        (Private) Generates the text of a given PORT command.\n        """'
newline|'\n'
nl|'\n'
comment|"# The problem is that we don't create the listening port until we need"
nl|'\n'
comment|'# it for various reasons, and so we have to muck about to figure out'
nl|'\n'
comment|"# what interface and port it's listening on, and then finally we can"
nl|'\n'
comment|'# create the text of the PORT command to send to the FTP server.'
nl|'\n'
nl|'\n'
comment|'# FIXME: This method is far too ugly.'
nl|'\n'
nl|'\n'
comment|'# FIXME: The best solution is probably to only create the data port'
nl|'\n'
comment|'#        once per FTPClient, and just recycle it for each new download.'
nl|'\n'
comment|"#        This should be ok, because we don't pipeline commands."
nl|'\n'
nl|'\n'
comment|'# Start listening on a port'
nl|'\n'
name|'factory'
op|'='
name|'FTPDataPortFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'protocol'
op|'='
name|'portCmd'
op|'.'
name|'protocol'
newline|'\n'
name|'listener'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'factory'
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'port'
op|'='
name|'listener'
newline|'\n'
nl|'\n'
comment|'# Ensure we close the listening port if something goes wrong'
nl|'\n'
DECL|function|listenerFail
name|'def'
name|'listenerFail'
op|'('
name|'error'
op|','
name|'listener'
op|'='
name|'listener'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'listener'
op|'.'
name|'connected'
op|':'
newline|'\n'
indent|'                '
name|'listener'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'error'
newline|'\n'
dedent|''
name|'portCmd'
op|'.'
name|'fail'
op|'='
name|'listenerFail'
newline|'\n'
nl|'\n'
comment|'# Construct crufty FTP magic numbers that represent host & port'
nl|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'host'
newline|'\n'
name|'port'
op|'='
name|'listener'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'portCmd'
op|'.'
name|'text'
op|'='
string|"'PORT '"
op|'+'
name|'encodeHostPort'
op|'('
name|'host'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
DECL|member|escapePath
dedent|''
name|'def'
name|'escapePath'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a FTP escaped path (replace newlines with nulls).\n        """'
newline|'\n'
comment|'# Escape newline characters'
nl|'\n'
name|'return'
name|'path'
op|'.'
name|'replace'
op|'('
string|"'\\n'"
op|','
string|"'\\0'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|retrieveFile
dedent|''
name|'def'
name|'retrieveFile'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'protocol'
op|','
name|'offset'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve a file from the given path\n\n        This method issues the \'RETR\' FTP command.\n\n        The file is fed into the given Protocol instance.  The data connection\n        will be passive if self.passive is set.\n\n        @param path: path to file that you wish to receive.\n        @param protocol: a L{Protocol} instance.\n        @param offset: offset to start downloading from\n\n        @return: L{Deferred}\n        """'
newline|'\n'
name|'cmds'
op|'='
op|'['
string|"'RETR '"
op|'+'
name|'self'
op|'.'
name|'escapePath'
op|'('
name|'path'
op|')'
op|']'
newline|'\n'
name|'if'
name|'offset'
op|':'
newline|'\n'
indent|'            '
name|'cmds'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
op|'('
string|"'REST '"
op|'+'
name|'str'
op|'('
name|'offset'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'receiveFromConnection'
op|'('
name|'cmds'
op|','
name|'protocol'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|retr
dedent|''
name|'retr'
op|'='
name|'retrieveFile'
newline|'\n'
nl|'\n'
DECL|member|storeFile
name|'def'
name|'storeFile'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'offset'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store a file at the given path.\n\n        This method issues the \'STOR\' FTP command.\n\n        @return: A tuple of two L{Deferred}s:\n                  - L{Deferred} L{IFinishableConsumer}. You must call\n                    the C{finish} method on the IFinishableConsumer when the file\n                    is completely transferred.\n                  - L{Deferred} list of control-connection responses.\n        """'
newline|'\n'
name|'cmds'
op|'='
op|'['
string|"'STOR '"
op|'+'
name|'self'
op|'.'
name|'escapePath'
op|'('
name|'path'
op|')'
op|']'
newline|'\n'
name|'if'
name|'offset'
op|':'
newline|'\n'
indent|'            '
name|'cmds'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
op|'('
string|"'REST '"
op|'+'
name|'str'
op|'('
name|'offset'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'sendToConnection'
op|'('
name|'cmds'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|stor
dedent|''
name|'stor'
op|'='
name|'storeFile'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|rename
name|'def'
name|'rename'
op|'('
name|'self'
op|','
name|'pathFrom'
op|','
name|'pathTo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Rename a file.\n\n        This method issues the I{RNFR}/I{RNTO} command sequence to rename\n        C{pathFrom} to C{pathTo}.\n\n        @param: pathFrom: the absolute path to the file to be renamed\n        @type pathFrom: C{str}\n\n        @param: pathTo: the absolute path to rename the file to.\n        @type pathTo: C{str}\n\n        @return: A L{Deferred} which fires when the rename operation has\n            succeeded or failed.  If it succeeds, the L{Deferred} is called\n            back with a two-tuple of lists.  The first list contains the\n            responses to the I{RNFR} command.  The second list contains the\n            responses to the I{RNTO} command.  If either I{RNFR} or I{RNTO}\n            fails, the L{Deferred} is errbacked with L{CommandFailed} or\n            L{BadResponse}.\n        @rtype: L{Deferred}\n\n        @since: 8.2\n        """'
newline|'\n'
name|'renameFrom'
op|'='
name|'self'
op|'.'
name|'queueStringCommand'
op|'('
string|"'RNFR '"
op|'+'
name|'self'
op|'.'
name|'escapePath'
op|'('
name|'pathFrom'
op|')'
op|')'
newline|'\n'
name|'renameTo'
op|'='
name|'self'
op|'.'
name|'queueStringCommand'
op|'('
string|"'RNTO '"
op|'+'
name|'self'
op|'.'
name|'escapePath'
op|'('
name|'pathTo'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'fromResponse'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# Use a separate Deferred for the ultimate result so that Deferred'
nl|'\n'
comment|"# chaining can't interfere with its result."
nl|'\n'
name|'result'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
comment|'# Bundle up all the responses'
nl|'\n'
name|'result'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'toResponse'
op|':'
op|'('
name|'fromResponse'
op|','
name|'toResponse'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|ebFrom
name|'def'
name|'ebFrom'
op|'('
name|'failure'
op|')'
op|':'
newline|'\n'
comment|"# Make sure the RNTO doesn't run if the RNFR failed."
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'popCommandQueue'
op|'('
op|')'
newline|'\n'
name|'result'
op|'.'
name|'errback'
op|'('
name|'failure'
op|')'
newline|'\n'
nl|'\n'
comment|'# Save the RNFR response to pass to the result Deferred later'
nl|'\n'
dedent|''
name|'renameFrom'
op|'.'
name|'addCallbacks'
op|'('
name|'fromResponse'
op|'.'
name|'extend'
op|','
name|'ebFrom'
op|')'
newline|'\n'
nl|'\n'
comment|'# Hook up the RNTO to the result Deferred as well'
nl|'\n'
name|'renameTo'
op|'.'
name|'chainDeferred'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|list
dedent|''
name|'def'
name|'list'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve a file listing into the given protocol instance.\n\n        This method issues the \'LIST\' FTP command.\n\n        @param path: path to get a file listing for.\n        @param protocol: a L{Protocol} instance, probably a\n            L{FTPFileListProtocol} instance.  It can cope with most common file\n            listing formats.\n\n        @return: L{Deferred}\n        """'
newline|'\n'
name|'if'
name|'path'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'receiveFromConnection'
op|'('
op|'['
string|"'LIST '"
op|'+'
name|'self'
op|'.'
name|'escapePath'
op|'('
name|'path'
op|')'
op|']'
op|','
name|'protocol'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|nlst
dedent|''
name|'def'
name|'nlst'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve a short file listing into the given protocol instance.\n\n        This method issues the \'NLST\' FTP command.\n\n        NLST (should) return a list of filenames, one per line.\n\n        @param path: path to get short file listing for.\n        @param protocol: a L{Protocol} instance.\n        """'
newline|'\n'
name|'if'
name|'path'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'receiveFromConnection'
op|'('
op|'['
string|"'NLST '"
op|'+'
name|'self'
op|'.'
name|'escapePath'
op|'('
name|'path'
op|')'
op|']'
op|','
name|'protocol'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cwd
dedent|''
name|'def'
name|'cwd'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Issues the CWD (Change Working Directory) command. It\'s also\n        available as changeDirectory, which parses the result.\n\n        @return: a L{Deferred} that will be called when done.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'queueStringCommand'
op|'('
string|"'CWD '"
op|'+'
name|'self'
op|'.'
name|'escapePath'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|changeDirectory
dedent|''
name|'def'
name|'changeDirectory'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Change the directory on the server and parse the result to determine\n        if it was successful or not.\n\n        @type path: C{str}\n        @param path: The path to which to change.\n\n        @return: a L{Deferred} which will be called back when the directory\n            change has succeeded or errbacked if an error occurrs.\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"FTPClient.changeDirectory is deprecated in Twisted 8.2 and "'
nl|'\n'
string|'"newer.  Use FTPClient.cwd instead."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbResult
name|'def'
name|'cbResult'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'result'
op|'['
op|'-'
number|'1'
op|']'
op|'['
op|':'
number|'3'
op|']'
op|'!='
string|"'250'"
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'CommandFailed'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'cwd'
op|'('
name|'path'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbResult'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeDirectory
dedent|''
name|'def'
name|'makeDirectory'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a directory\n\n        This method issues the MKD command.\n\n        @param path: The path to the directory to create.\n        @type path: C{str}\n\n        @return: A L{Deferred} which fires when the server responds.  If the\n            directory is created, the L{Deferred} is called back with the\n            server response.  If the server response indicates the directory\n            was not created, the L{Deferred} is errbacked with a L{Failure}\n            wrapping L{CommandFailed} or L{BadResponse}.\n        @rtype: L{Deferred}\n\n        @since: 8.2\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'queueStringCommand'
op|'('
string|"'MKD '"
op|'+'
name|'self'
op|'.'
name|'escapePath'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeFile
dedent|''
name|'def'
name|'removeFile'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete a file on the server.\n\n        L{removeFile} issues a I{DELE} command to the server to remove the\n        indicated file.  Note that this command cannot remove a directory.\n\n        @param path: The path to the file to delete. May be relative to the\n            current dir.\n        @type path: C{str}\n\n        @return: A L{Deferred} which fires when the server responds.  On error,\n            it is errbacked with either L{CommandFailed} or L{BadResponse}.  On\n            success, it is called back with a list of response lines.\n        @rtype: L{Deferred}\n\n        @since: 8.2\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'queueStringCommand'
op|'('
string|"'DELE '"
op|'+'
name|'self'
op|'.'
name|'escapePath'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cdup
dedent|''
name|'def'
name|'cdup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Issues the CDUP (Change Directory UP) command.\n\n        @return: a L{Deferred} that will be called when done.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'queueStringCommand'
op|'('
string|"'CDUP'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|pwd
dedent|''
name|'def'
name|'pwd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Issues the PWD (Print Working Directory) command.\n\n        The L{getDirectory} does the same job but automatically parses the\n        result.\n\n        @return: a L{Deferred} that will be called when done.  It is up to the\n            caller to interpret the response, but the L{parsePWDResponse} method\n            in this module should work.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'queueStringCommand'
op|'('
string|"'PWD'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|getDirectory
dedent|''
name|'def'
name|'getDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns the current remote directory.\n\n        @return: a L{Deferred} that will be called back with a C{str} giving\n            the remote directory or which will errback with L{CommandFailed}\n            if an error response is returned.\n        """'
newline|'\n'
DECL|function|cbParse
name|'def'
name|'cbParse'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
comment|'# The only valid code is 257'
nl|'\n'
indent|'                '
name|'if'
name|'int'
op|'('
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
op|')'
op|'!='
number|'257'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ValueError'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'IndexError'
op|','
name|'ValueError'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'CommandFailed'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
dedent|''
name|'path'
op|'='
name|'parsePWDResponse'
op|'('
name|'result'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'path'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'CommandFailed'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'path'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'pwd'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbParse'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|quit
dedent|''
name|'def'
name|'quit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Issues the I{QUIT} command.\n\n        @return: A L{Deferred} that fires when the server acknowledges the\n            I{QUIT} command.  The transport should not be disconnected until\n            this L{Deferred} fires.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'queueStringCommand'
op|'('
string|"'QUIT'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPFileListProtocol
dedent|''
dedent|''
name|'class'
name|'FTPFileListProtocol'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parser for standard FTP file listings\n\n    This is the evil required to match::\n\n        -rw-r--r--   1 root     other        531 Jan 29 03:26 README\n\n    If you need different evil for a wacky FTP server, you can\n    override either C{fileLinePattern} or C{parseDirectoryLine()}.\n\n    It populates the instance attribute self.files, which is a list containing\n    dicts with the following keys (examples from the above line):\n        - filetype:   e.g. \'d\' for directories, or \'-\' for an ordinary file\n        - perms:      e.g. \'rw-r--r--\'\n        - nlinks:     e.g. 1\n        - owner:      e.g. \'root\'\n        - group:      e.g. \'other\'\n        - size:       e.g. 531\n        - date:       e.g. \'Jan 29 03:26\'\n        - filename:   e.g. \'README\'\n        - linktarget: e.g. \'some/file\'\n\n    Note that the \'date\' value will be formatted differently depending on the\n    date.  Check U{http://cr.yp.to/ftp.html} if you really want to try to parse\n    it.\n\n    @ivar files: list of dicts describing the files in this listing\n    """'
newline|'\n'
DECL|variable|fileLinePattern
name|'fileLinePattern'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
nl|'\n'
string|"r'^(?P<filetype>.)(?P<perms>.{9})\\s+(?P<nlinks>\\d*)\\s*'"
nl|'\n'
string|"r'(?P<owner>\\S+)\\s+(?P<group>\\S+)\\s+(?P<size>\\d+)\\s+'"
nl|'\n'
string|"r'(?P<date>...\\s+\\d+\\s+[\\d:]+)\\s+(?P<filename>([^ ]|\\\\ )*?)'"
nl|'\n'
string|"r'( -> (?P<linktarget>[^\\r]*))?\\r?$'"
nl|'\n'
op|')'
newline|'\n'
DECL|variable|delimiter
name|'delimiter'
op|'='
string|"'\\n'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'files'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'parseDirectoryLine'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'d'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unknownLine'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'addFile'
op|'('
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|parseDirectoryLine
dedent|''
dedent|''
name|'def'
name|'parseDirectoryLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a dictionary of fields, or None if line cannot be parsed.\n\n        @param line: line of text expected to contain a directory entry\n        @type line: str\n\n        @return: dict\n        """'
newline|'\n'
name|'match'
op|'='
name|'self'
op|'.'
name|'fileLinePattern'
op|'.'
name|'match'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'match'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'match'
op|'.'
name|'groupdict'
op|'('
op|')'
newline|'\n'
name|'d'
op|'['
string|"'filename'"
op|']'
op|'='
name|'d'
op|'['
string|"'filename'"
op|']'
op|'.'
name|'replace'
op|'('
string|"r'\\ '"
op|','
string|"' '"
op|')'
newline|'\n'
name|'d'
op|'['
string|"'nlinks'"
op|']'
op|'='
name|'int'
op|'('
name|'d'
op|'['
string|"'nlinks'"
op|']'
op|')'
newline|'\n'
name|'d'
op|'['
string|"'size'"
op|']'
op|'='
name|'int'
op|'('
name|'d'
op|'['
string|"'size'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'d'
op|'['
string|"'linktarget'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'['
string|"'linktarget'"
op|']'
op|'='
name|'d'
op|'['
string|"'linktarget'"
op|']'
op|'.'
name|'replace'
op|'('
string|"r'\\ '"
op|','
string|"' '"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|addFile
dedent|''
dedent|''
name|'def'
name|'addFile'
op|'('
name|'self'
op|','
name|'info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Append file information dictionary to the list of known files.\n\n        Subclasses can override or extend this method to handle file\n        information differently without affecting the parsing of data\n        from the server.\n\n        @param info: dictionary containing the parsed representation\n                     of the file information\n        @type info: dict\n        """'
newline|'\n'
name|'self'
op|'.'
name|'files'
op|'.'
name|'append'
op|'('
name|'info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unknownLine
dedent|''
name|'def'
name|'unknownLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deal with received lines which could not be parsed as file\n        information.\n\n        Subclasses can override this to perform any special processing\n        needed.\n\n        @param line: unparsable line as received\n        @type line: str\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|parsePWDResponse
dedent|''
dedent|''
name|'def'
name|'parsePWDResponse'
op|'('
name|'response'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the path from a response to a PWD command.\n\n    Responses typically look like::\n\n        257 "/home/andrew" is current directory.\n\n    For this example, I will return C{\'/home/andrew\'}.\n\n    If I can\'t find the path, I return C{None}.\n    """'
newline|'\n'
name|'match'
op|'='
name|'re'
op|'.'
name|'search'
op|'('
string|'\'"(.*)"\''
op|','
name|'response'
op|')'
newline|'\n'
name|'if'
name|'match'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'match'
op|'.'
name|'groups'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

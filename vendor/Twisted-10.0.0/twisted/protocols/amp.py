begin_unit
comment|'# -*- test-case-name: twisted.test.test_amp -*-'
nl|'\n'
comment|'# Copyright (c) 2005 Divmod, Inc.'
nl|'\n'
comment|'# Copyright (c) 2007-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nThis module implements AMP, the Asynchronous Messaging Protocol.\n\nAMP is a protocol for sending multiple asynchronous request/response pairs over\nthe same connection.  Requests and responses are both collections of key/value\npairs.\n\nAMP is a very simple protocol which is not an application.  This module is a\n"protocol construction kit" of sorts; it attempts to be the simplest wire-level\nimplementation of Deferreds.  AMP provides the following base-level features:\n\n    - Asynchronous request/response handling (hence the name)\n\n    - Requests and responses are both key/value pairs\n\n    - Binary transfer of all data: all data is length-prefixed.  Your\n      application will never need to worry about quoting.\n\n    - Command dispatching (like HTTP Verbs): the protocol is extensible, and\n      multiple AMP sub-protocols can be grouped together easily.\n\nThe protocol implementation also provides a few additional features which are\nnot part of the core wire protocol, but are nevertheless very useful:\n\n    - Tight TLS integration, with an included StartTLS command.\n\n    - Handshaking to other protocols: because AMP has well-defined message\n      boundaries and maintains all incoming and outgoing requests for you, you\n      can start a connection over AMP and then switch to another protocol.\n      This makes it ideal for firewall-traversal applications where you may\n      have only one forwarded port but multiple applications that want to use\n      it.\n\nUsing AMP with Twisted is simple.  Each message is a command, with a response.\nYou begin by defining a command type.  Commands specify their input and output\nin terms of the types that they expect to see in the request and response\nkey-value pairs.  Here\'s an example of a command that adds two integers, \'a\'\nand \'b\'::\n\n    class Sum(amp.Command):\n        arguments = [(\'a\', amp.Integer()),\n                     (\'b\', amp.Integer())]\n        response = [(\'total\', amp.Integer())]\n\nOnce you have specified a command, you need to make it part of a protocol, and\ndefine a responder for it.  Here\'s a \'JustSum\' protocol that includes a\nresponder for our \'Sum\' command::\n\n    class JustSum(amp.AMP):\n        def sum(self, a, b):\n            total = a + b\n            print \'Did a sum: %d + %d = %d\' % (a, b, total)\n            return {\'total\': total}\n        Sum.responder(sum)\n\nLater, when you want to actually do a sum, the following expression will return\na L{Deferred} which will fire with the result::\n\n    ClientCreator(reactor, amp.AMP).connectTCP(...).addCallback(\n        lambda p: p.callRemote(Sum, a=13, b=81)).addCallback(\n            lambda result: result[\'total\'])\n\nYou can also define the propagation of specific errors in AMP.  For example,\nfor the slightly more complicated case of division, we might have to deal with\ndivision by zero::\n\n    class Divide(amp.Command):\n        arguments = [(\'numerator\', amp.Integer()),\n                     (\'denominator\', amp.Integer())]\n        response = [(\'result\', amp.Float())]\n        errors = {ZeroDivisionError: \'ZERO_DIVISION\'}\n\nThe \'errors\' mapping here tells AMP that if a responder to Divide emits a\nL{ZeroDivisionError}, then the other side should be informed that an error of\nthe type \'ZERO_DIVISION\' has occurred.  Writing a responder which takes\nadvantage of this is very simple - just raise your exception normally::\n\n    class JustDivide(amp.AMP):\n        def divide(self, numerator, denominator):\n            result = numerator / denominator\n            print \'Divided: %d / %d = %d\' % (numerator, denominator, total)\n            return {\'result\': result}\n        Divide.responder(divide)\n\nOn the client side, the errors mapping will be used to determine what the\n\'ZERO_DIVISION\' error means, and translated into an asynchronous exception,\nwhich can be handled normally as any L{Deferred} would be::\n\n    def trapZero(result):\n        result.trap(ZeroDivisionError)\n        print "Divided by zero: returning INF"\n        return 1e1000\n    ClientCreator(reactor, amp.AMP).connectTCP(...).addCallback(\n        lambda p: p.callRemote(Divide, numerator=1234,\n                               denominator=0)\n        ).addErrback(trapZero)\n\nFor a complete, runnable example of both of these commands, see the files in\nthe Twisted repository::\n\n    doc/core/examples/ampserver.py\n    doc/core/examples/ampclient.py\n\nOn the wire, AMP is a protocol which uses 2-byte lengths to prefix keys and\nvalues, and empty keys to separate messages::\n\n    <2-byte length><key><2-byte length><value>\n    <2-byte length><key><2-byte length><value>\n    ...\n    <2-byte length><key><2-byte length><value>\n    <NUL><NUL>                  # Empty Key == End of Message\n\nAnd so on.  Because it\'s tedious to refer to lengths and NULs constantly, the\ndocumentation will refer to packets as if they were newline delimited, like\nso::\n\n    C: _command: sum\n    C: _ask: ef639e5c892ccb54\n    C: a: 13\n    C: b: 81\n\n    S: _answer: ef639e5c892ccb54\n    S: total: 94\n\nNotes:\n\nIn general, the order of keys is arbitrary.  Specific uses of AMP may impose an\nordering requirement, but unless this is specified explicitly, any ordering may\nbe generated and any ordering must be accepted.  This applies to the\ncommand-related keys I{_command} and I{_ask} as well as any other keys.\n\nValues are limited to the maximum encodable size in a 16-bit length, 65535\nbytes.\n\nKeys are limited to the maximum encodable size in a 8-bit length, 255 bytes.\nNote that we still use 2-byte lengths to encode keys.  This small redundancy\nhas several features:\n\n    - If an implementation becomes confused and starts emitting corrupt data,\n      or gets keys confused with values, many common errors will be signalled\n      immediately instead of delivering obviously corrupt packets.\n\n    - A single NUL will separate every key, and a double NUL separates\n      messages.  This provides some redundancy when debugging traffic dumps.\n\n    - NULs will be present at regular intervals along the protocol, providing\n      some padding for otherwise braindead C implementations of the protocol,\n      so that <stdio.h> string functions will see the NUL and stop.\n\n    - This makes it possible to run an AMP server on a port also used by a\n      plain-text protocol, and easily distinguish between non-AMP clients (like\n      web browsers) which issue non-NUL as the first byte, and AMP clients,\n      which always issue NUL as the first byte.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|__metaclass__
name|'__metaclass__'
op|'='
name|'type'
newline|'\n'
nl|'\n'
name|'import'
name|'types'
op|','
name|'warnings'
newline|'\n'
nl|'\n'
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
name|'from'
name|'struct'
name|'import'
name|'pack'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'Interface'
op|','
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'unsignedID'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'reflect'
name|'import'
name|'accumulateClassDict'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'failure'
name|'import'
name|'Failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'filepath'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'main'
name|'import'
name|'CONNECTION_LOST'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'PeerVerifyError'
op|','
name|'ConnectionLost'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'ConnectionClosed'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
op|','
name|'maybeDeferred'
op|','
name|'fail'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
op|'.'
name|'basic'
name|'import'
name|'Int16StringReceiver'
op|','
name|'StatefulStringProtocol'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'ssl'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|ssl
indent|'    '
name|'ssl'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ssl'
name|'and'
name|'not'
name|'ssl'
op|'.'
name|'supported'
op|':'
newline|'\n'
DECL|variable|ssl
indent|'    '
name|'ssl'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ssl'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'ssl'
name|'import'
name|'CertificateOptions'
op|','
name|'Certificate'
op|','
name|'DN'
op|','
name|'KeyPair'
newline|'\n'
nl|'\n'
DECL|variable|ASK
dedent|''
name|'ASK'
op|'='
string|"'_ask'"
newline|'\n'
DECL|variable|ANSWER
name|'ANSWER'
op|'='
string|"'_answer'"
newline|'\n'
DECL|variable|COMMAND
name|'COMMAND'
op|'='
string|"'_command'"
newline|'\n'
DECL|variable|ERROR
name|'ERROR'
op|'='
string|"'_error'"
newline|'\n'
DECL|variable|ERROR_CODE
name|'ERROR_CODE'
op|'='
string|"'_error_code'"
newline|'\n'
DECL|variable|ERROR_DESCRIPTION
name|'ERROR_DESCRIPTION'
op|'='
string|"'_error_description'"
newline|'\n'
DECL|variable|UNKNOWN_ERROR_CODE
name|'UNKNOWN_ERROR_CODE'
op|'='
string|"'UNKNOWN'"
newline|'\n'
DECL|variable|UNHANDLED_ERROR_CODE
name|'UNHANDLED_ERROR_CODE'
op|'='
string|"'UNHANDLED'"
newline|'\n'
nl|'\n'
DECL|variable|MAX_KEY_LENGTH
name|'MAX_KEY_LENGTH'
op|'='
number|'0xff'
newline|'\n'
DECL|variable|MAX_VALUE_LENGTH
name|'MAX_VALUE_LENGTH'
op|'='
number|'0xffff'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IArgumentType
name|'class'
name|'IArgumentType'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An L{IArgumentType} can serialize a Python object into an AMP box and\n    deserialize information from an AMP box back into a Python object.\n\n    @since: 9.0\n    """'
newline|'\n'
DECL|member|fromBox
name|'def'
name|'fromBox'
op|'('
name|'name'
op|','
name|'strings'
op|','
name|'objects'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given an argument name and an AMP box containing serialized values,\n        extract one or more Python objects and add them to the C{objects}\n        dictionary.\n\n        @param name: The name associated with this argument.  Most commonly,\n            this is the key which can be used to find a serialized value in\n            C{strings} and which should be used as the key in C{objects} to\n            associate with a structured Python object.\n        @type name: C{str}\n\n        @param strings: The AMP box from which to extract one or more\n            values.\n        @type strings: C{dict}\n\n        @param objects: The output dictionary to populate with the value for\n            this argument.\n        @type objects: C{dict}\n\n        @param proto: The protocol instance which received the AMP box being\n            interpreted.  Most likely this is an instance of L{AMP}, but\n            this is not guaranteed.\n\n        @return: C{None}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|toBox
dedent|''
name|'def'
name|'toBox'
op|'('
name|'name'
op|','
name|'strings'
op|','
name|'objects'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given an argument name and a dictionary containing structured Python\n        objects, serialize values into one or more strings and add them to\n        the C{strings} dictionary.\n\n        @param name: The name associated with this argument.  Most commonly,\n            this is the key which can be used to find an object in\n            C{objects} and which should be used as the key in C{strings} to\n            associate with a C{str} giving the serialized form of that\n            object.\n        @type name: C{str}\n\n        @param strings: The AMP box into which to insert one or more\n            strings.\n        @type strings: C{dict}\n\n        @param objects: The input dictionary from which to extract Python\n            objects to serialize.\n        @type objects: C{dict}\n\n        @param proto: The protocol instance which will send the AMP box once\n            it is fully populated.  Most likely this is an instance of\n            L{AMP}, but this is not guaranteed.\n\n        @return: C{None}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IBoxSender
dedent|''
dedent|''
name|'class'
name|'IBoxSender'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A transport which can send L{AmpBox} objects.\n    """'
newline|'\n'
nl|'\n'
DECL|member|sendBox
name|'def'
name|'sendBox'
op|'('
name|'box'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send an L{AmpBox}.\n\n        @raise ProtocolSwitched: if the underlying protocol has been\n        switched.\n\n        @raise ConnectionLost: if the underlying connection has already been\n        lost.\n        """'
newline|'\n'
nl|'\n'
DECL|member|unhandledError
dedent|''
name|'def'
name|'unhandledError'
op|'('
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An unhandled error occurred in response to a box.  Log it\n        appropriately.\n\n        @param failure: a L{Failure} describing the error that occurred.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IBoxReceiver
dedent|''
dedent|''
name|'class'
name|'IBoxReceiver'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An application object which can receive L{AmpBox} objects and dispatch them\n    appropriately.\n    """'
newline|'\n'
nl|'\n'
DECL|member|startReceivingBoxes
name|'def'
name|'startReceivingBoxes'
op|'('
name|'boxSender'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{ampBoxReceived} method will start being called; boxes may be\n        responded to by responding to the given L{IBoxSender}.\n\n        @param boxSender: an L{IBoxSender} provider.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ampBoxReceived
dedent|''
name|'def'
name|'ampBoxReceived'
op|'('
name|'box'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A box was received from the transport; dispatch it appropriately.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stopReceivingBoxes
dedent|''
name|'def'
name|'stopReceivingBoxes'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        No further boxes will be received on this connection.\n\n        @type reason: L{Failure}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IResponderLocator
dedent|''
dedent|''
name|'class'
name|'IResponderLocator'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An application object which can look up appropriate responder methods for\n    AMP commands.\n    """'
newline|'\n'
nl|'\n'
DECL|member|locateResponder
name|'def'
name|'locateResponder'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Locate a responder method appropriate for the named command.\n\n        @param name: the wire-level name (commandName) of the AMP command to be\n        responded to.\n\n        @return: a 1-argument callable that takes an L{AmpBox} with argument\n        values for the given command, and returns an L{AmpBox} containing\n        argument values for the named command, or a L{Deferred} that fires the\n        same.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AmpError
dedent|''
dedent|''
name|'class'
name|'AmpError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Base class of all Amp-related exceptions.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProtocolSwitched
dedent|''
name|'class'
name|'ProtocolSwitched'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Connections which have been switched to other protocols can no longer\n    accept traffic at the AMP level.  This is raised when you try to send it.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|OnlyOneTLS
dedent|''
name|'class'
name|'OnlyOneTLS'
op|'('
name|'AmpError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This is an implementation limitation; TLS may only be started once per\n    connection.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoEmptyBoxes
dedent|''
name|'class'
name|'NoEmptyBoxes'
op|'('
name|'AmpError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    You can\'t have empty boxes on the connection.  This is raised when you\n    receive or attempt to send one.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidSignature
dedent|''
name|'class'
name|'InvalidSignature'
op|'('
name|'AmpError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    You didn\'t pass all the required arguments.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TooLong
dedent|''
name|'class'
name|'TooLong'
op|'('
name|'AmpError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    One of the protocol\'s length limitations was violated.\n\n    @ivar isKey: true if the string being encoded in a key position, false if\n    it was in a value position.\n\n    @ivar isLocal: Was the string encoded locally, or received too long from\n    the network?  (It\'s only physically possible to encode "too long" values on\n    the network for keys.)\n\n    @ivar value: The string that was too long.\n\n    @ivar keyName: If the string being encoded was in a value position, what\n    key was it being encoded for?\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'isKey'
op|','
name|'isLocal'
op|','
name|'value'
op|','
name|'keyName'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'AmpError'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'isKey'
op|'='
name|'isKey'
newline|'\n'
name|'self'
op|'.'
name|'isLocal'
op|'='
name|'isLocal'
newline|'\n'
name|'self'
op|'.'
name|'value'
op|'='
name|'value'
newline|'\n'
name|'self'
op|'.'
name|'keyName'
op|'='
name|'keyName'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hdr'
op|'='
name|'self'
op|'.'
name|'isKey'
name|'and'
string|'"key"'
name|'or'
string|'"value"'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'isKey'
op|':'
newline|'\n'
indent|'            '
name|'hdr'
op|'+='
string|"' '"
op|'+'
name|'repr'
op|'('
name|'self'
op|'.'
name|'keyName'
op|')'
newline|'\n'
dedent|''
name|'lcl'
op|'='
name|'self'
op|'.'
name|'isLocal'
name|'and'
string|'"local"'
name|'or'
string|'"remote"'
newline|'\n'
name|'return'
string|'"%s %s too long: %d"'
op|'%'
op|'('
name|'lcl'
op|','
name|'hdr'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BadLocalReturn
dedent|''
dedent|''
name|'class'
name|'BadLocalReturn'
op|'('
name|'AmpError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A bad value was returned from a local command; we were unable to coerce it.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'enclosed'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'AmpError'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'message'
op|'='
name|'message'
newline|'\n'
name|'self'
op|'.'
name|'enclosed'
op|'='
name|'enclosed'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'message'
op|'+'
string|'" "'
op|'+'
name|'self'
op|'.'
name|'enclosed'
op|'.'
name|'getBriefTraceback'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|__str__
dedent|''
name|'__str__'
op|'='
name|'__repr__'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|RemoteAmpError
dedent|''
name|'class'
name|'RemoteAmpError'
op|'('
name|'AmpError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This error indicates that something went wrong on the remote end of the\n    connection, and the error was serialized and transmitted to you.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'errorCode'
op|','
name|'description'
op|','
name|'fatal'
op|'='
name|'False'
op|','
name|'local'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a remote error with an error code and description.\n\n        @param errorCode: the AMP error code of this error.\n\n        @param description: some text to show to the user.\n\n        @param fatal: a boolean, true if this error should terminate the\n        connection.\n\n        @param local: a local Failure, if one exists.\n        """'
newline|'\n'
name|'if'
name|'local'
op|':'
newline|'\n'
indent|'            '
name|'localwhat'
op|'='
string|"' (local)'"
newline|'\n'
name|'othertb'
op|'='
name|'local'
op|'.'
name|'getBriefTraceback'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'localwhat'
op|'='
string|"''"
newline|'\n'
name|'othertb'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'Exception'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
string|'"Code<%s>%s: %s%s"'
op|'%'
op|'('
nl|'\n'
name|'errorCode'
op|','
name|'localwhat'
op|','
nl|'\n'
name|'description'
op|','
name|'othertb'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'local'
op|'='
name|'local'
newline|'\n'
name|'self'
op|'.'
name|'errorCode'
op|'='
name|'errorCode'
newline|'\n'
name|'self'
op|'.'
name|'description'
op|'='
name|'description'
newline|'\n'
name|'self'
op|'.'
name|'fatal'
op|'='
name|'fatal'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnknownRemoteError
dedent|''
dedent|''
name|'class'
name|'UnknownRemoteError'
op|'('
name|'RemoteAmpError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This means that an error whose type we can\'t identify was raised from the\n    other side.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'description'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'errorCode'
op|'='
name|'UNKNOWN_ERROR_CODE'
newline|'\n'
name|'RemoteAmpError'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'errorCode'
op|','
name|'description'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MalformedAmpBox
dedent|''
dedent|''
name|'class'
name|'MalformedAmpBox'
op|'('
name|'AmpError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This error indicates that the wire-level protocol was malformed.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnhandledCommand
dedent|''
name|'class'
name|'UnhandledCommand'
op|'('
name|'AmpError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A command received via amp could not be dispatched.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IncompatibleVersions
dedent|''
name|'class'
name|'IncompatibleVersions'
op|'('
name|'AmpError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    It was impossible to negotiate a compatible version of the protocol with\n    the other end of the connection.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|PROTOCOL_ERRORS
dedent|''
name|'PROTOCOL_ERRORS'
op|'='
op|'{'
name|'UNHANDLED_ERROR_CODE'
op|':'
name|'UnhandledCommand'
op|'}'
newline|'\n'
nl|'\n'
DECL|class|AmpBox
name|'class'
name|'AmpBox'
op|'('
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I am a packet in the AMP protocol, much like a regular str:str dictionary.\n    """'
newline|'\n'
DECL|variable|__slots__
name|'__slots__'
op|'='
op|'['
op|']'
comment|"# be like a regular dictionary, don't magically"
newline|'\n'
comment|'# acquire a __dict__...'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|copy
name|'def'
name|'copy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return another AmpBox just like me.\n        """'
newline|'\n'
name|'newBox'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'('
op|')'
newline|'\n'
name|'newBox'
op|'.'
name|'update'
op|'('
name|'self'
op|')'
newline|'\n'
name|'return'
name|'newBox'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|serialize
dedent|''
name|'def'
name|'serialize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convert me into a wire-encoded string.\n\n        @return: a str encoded according to the rules described in the module\n        docstring.\n        """'
newline|'\n'
name|'i'
op|'='
name|'self'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
name|'i'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'w'
op|'='
name|'L'
op|'.'
name|'append'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'i'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'k'
op|')'
op|'>'
name|'MAX_KEY_LENGTH'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'TooLong'
op|'('
name|'True'
op|','
name|'True'
op|','
name|'k'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'v'
op|')'
op|'>'
name|'MAX_VALUE_LENGTH'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'TooLong'
op|'('
name|'False'
op|','
name|'True'
op|','
name|'v'
op|','
name|'k'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'kv'
name|'in'
name|'k'
op|','
name|'v'
op|':'
newline|'\n'
indent|'                '
name|'w'
op|'('
name|'pack'
op|'('
string|'"!H"'
op|','
name|'len'
op|'('
name|'kv'
op|')'
op|')'
op|')'
newline|'\n'
name|'w'
op|'('
name|'kv'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'w'
op|'('
name|'pack'
op|'('
string|'"!H"'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'L'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_sendTo
dedent|''
name|'def'
name|'_sendTo'
op|'('
name|'self'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Serialize and send this box to a Amp instance.  By the time it is being\n        sent, several keys are required.  I must have exactly ONE of::\n\n            _ask\n            _answer\n            _error\n\n        If the \'_ask\' key is set, then the \'_command\' key must also be\n        set.\n\n        @param proto: an AMP instance.\n        """'
newline|'\n'
name|'proto'
op|'.'
name|'sendBox'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'AmpBox(%s)'"
op|'%'
op|'('
name|'dict'
op|'.'
name|'__repr__'
op|'('
name|'self'
op|')'
op|','
op|')'
newline|'\n'
nl|'\n'
comment|'# amp.Box => AmpBox'
nl|'\n'
nl|'\n'
DECL|variable|Box
dedent|''
dedent|''
name|'Box'
op|'='
name|'AmpBox'
newline|'\n'
nl|'\n'
DECL|class|QuitBox
name|'class'
name|'QuitBox'
op|'('
name|'AmpBox'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I am an AmpBox that, upon being sent, terminates the connection.\n    """'
newline|'\n'
DECL|variable|__slots__
name|'__slots__'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'QuitBox(**%s)'"
op|'%'
op|'('
name|'super'
op|'('
name|'QuitBox'
op|','
name|'self'
op|')'
op|'.'
name|'__repr__'
op|'('
op|')'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_sendTo
dedent|''
name|'def'
name|'_sendTo'
op|'('
name|'self'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Immediately call loseConnection after sending.\n        """'
newline|'\n'
name|'super'
op|'('
name|'QuitBox'
op|','
name|'self'
op|')'
op|'.'
name|'_sendTo'
op|'('
name|'proto'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_SwitchBox
dedent|''
dedent|''
name|'class'
name|'_SwitchBox'
op|'('
name|'AmpBox'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Implementation detail of ProtocolSwitchCommand: I am a AmpBox which sets\n    up state for the protocol to switch.\n    """'
newline|'\n'
nl|'\n'
comment|"# DON'T set __slots__ here; we do have an attribute."
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'innerProto'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a _SwitchBox with the protocol to switch to after being sent.\n\n        @param innerProto: the protocol instance to switch to.\n        @type innerProto: an IProtocol provider.\n        """'
newline|'\n'
name|'super'
op|'('
name|'_SwitchBox'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'innerProto'
op|'='
name|'innerProto'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'_SwitchBox(%r, **%s)'"
op|'%'
op|'('
name|'self'
op|'.'
name|'innerProto'
op|','
nl|'\n'
name|'dict'
op|'.'
name|'__repr__'
op|'('
name|'self'
op|')'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_sendTo
dedent|''
name|'def'
name|'_sendTo'
op|'('
name|'self'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send me; I am the last box on the connection.  All further traffic will be\n        over the new protocol.\n        """'
newline|'\n'
name|'super'
op|'('
name|'_SwitchBox'
op|','
name|'self'
op|')'
op|'.'
name|'_sendTo'
op|'('
name|'proto'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'_lockForSwitch'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'_switchTo'
op|'('
name|'self'
op|'.'
name|'innerProto'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BoxDispatcher
dedent|''
dedent|''
name|'class'
name|'BoxDispatcher'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A L{BoxDispatcher} dispatches \'_ask\', \'_answer\', and \'_error\' L{AmpBox}es,\n    both incoming and outgoing, to their appropriate destinations.\n\n    Outgoing commands are converted into L{Deferred}s and outgoing boxes, and\n    associated tracking state to fire those L{Deferred} when \'_answer\' boxes\n    come back.  Incoming \'_answer\' and \'_error\' boxes are converted into\n    callbacks and errbacks on those L{Deferred}s, respectively.\n\n    Incoming \'_ask\' boxes are converted into method calls on a supplied method\n    locator.\n\n    @ivar _outstandingRequests: a dictionary mapping request IDs to\n    L{Deferred}s which were returned for those requests.\n\n    @ivar locator: an object with a L{locateResponder} method that locates a\n    responder function that takes a Box and returns a result (either a Box or a\n    Deferred which fires one).\n\n    @ivar boxSender: an object which can send boxes, via the L{_sendBox}\n    method, such as an L{AMP} instance.\n    @type boxSender: L{IBoxSender}\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IBoxReceiver'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_failAllReason
name|'_failAllReason'
op|'='
name|'None'
newline|'\n'
DECL|variable|_outstandingRequests
name|'_outstandingRequests'
op|'='
name|'None'
newline|'\n'
DECL|variable|_counter
name|'_counter'
op|'='
number|'0L'
newline|'\n'
DECL|variable|boxSender
name|'boxSender'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'locator'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_outstandingRequests'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'locator'
op|'='
name|'locator'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|startReceivingBoxes
dedent|''
name|'def'
name|'startReceivingBoxes'
op|'('
name|'self'
op|','
name|'boxSender'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The given boxSender is going to start calling boxReceived on this\n        L{BoxDispatcher}.\n\n        @param boxSender: The L{IBoxSender} to send command responses to.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'boxSender'
op|'='
name|'boxSender'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stopReceivingBoxes
dedent|''
name|'def'
name|'stopReceivingBoxes'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        No further boxes will be received here.  Terminate all currently\n        oustanding command deferreds with the given reason.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'failAllOutgoing'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|failAllOutgoing
dedent|''
name|'def'
name|'failAllOutgoing'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call the errback on all outstanding requests awaiting responses.\n\n        @param reason: the Failure instance to pass to those errbacks.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_failAllReason'
op|'='
name|'reason'
newline|'\n'
name|'OR'
op|'='
name|'self'
op|'.'
name|'_outstandingRequests'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_outstandingRequests'
op|'='
name|'None'
comment|'# we can never send another request'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'OR'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_nextTag
dedent|''
dedent|''
name|'def'
name|'_nextTag'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate protocol-local serial numbers for _ask keys.\n\n        @return: a string that has not yet been used on this connection.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_counter'
op|'+='
number|'1'
newline|'\n'
name|'return'
string|"'%x'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_counter'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_sendBoxCommand
dedent|''
name|'def'
name|'_sendBoxCommand'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'box'
op|','
name|'requiresAnswer'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a command across the wire with the given C{amp.Box}.\n\n        Mutate the given box to give it any additional keys (_command, _ask)\n        required for the command and request/response machinery, then send it.\n\n        If requiresAnswer is True, returns a C{Deferred} which fires when a\n        response is received. The C{Deferred} is fired with an C{amp.Box} on\n        success, or with an C{amp.RemoteAmpError} if an error is received.\n\n        If the Deferred fails and the error is not handled by the caller of\n        this method, the failure will be logged and the connection dropped.\n\n        @param command: a str, the name of the command to issue.\n\n        @param box: an AmpBox with the arguments for the command.\n\n        @param requiresAnswer: a boolean.  Defaults to True.  If True, return a\n        Deferred which will fire when the other side responds to this command.\n        If False, return None and do not ask the other side for acknowledgement.\n\n        @return: a Deferred which fires the AmpBox that holds the response to\n        this command, or None, as specified by requiresAnswer.\n\n        @raise ProtocolSwitched: if the protocol has been switched.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_failAllReason'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
name|'self'
op|'.'
name|'_failAllReason'
op|')'
newline|'\n'
dedent|''
name|'box'
op|'['
name|'COMMAND'
op|']'
op|'='
name|'command'
newline|'\n'
name|'tag'
op|'='
name|'self'
op|'.'
name|'_nextTag'
op|'('
op|')'
newline|'\n'
name|'if'
name|'requiresAnswer'
op|':'
newline|'\n'
indent|'            '
name|'box'
op|'['
name|'ASK'
op|']'
op|'='
name|'tag'
newline|'\n'
dedent|''
name|'box'
op|'.'
name|'_sendTo'
op|'('
name|'self'
op|'.'
name|'boxSender'
op|')'
newline|'\n'
name|'if'
name|'requiresAnswer'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'self'
op|'.'
name|'_outstandingRequests'
op|'['
name|'tag'
op|']'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callRemoteString
dedent|''
name|'def'
name|'callRemoteString'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'requiresAnswer'
op|'='
name|'True'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This is a low-level API, designed only for optimizing simple messages\n        for which the overhead of parsing is too great.\n\n        @param command: a str naming the command.\n\n        @param kw: arguments to the amp box.\n\n        @param requiresAnswer: a boolean.  Defaults to True.  If True, return a\n        Deferred which will fire when the other side responds to this command.\n        If False, return None and do not ask the other side for acknowledgement.\n\n        @return: a Deferred which fires the AmpBox that holds the response to\n        this command, or None, as specified by requiresAnswer.\n        """'
newline|'\n'
name|'box'
op|'='
name|'Box'
op|'('
name|'kw'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_sendBoxCommand'
op|'('
name|'command'
op|','
name|'box'
op|','
name|'requiresAnswer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callRemote
dedent|''
name|'def'
name|'callRemote'
op|'('
name|'self'
op|','
name|'commandType'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This is the primary high-level API for sending messages via AMP.  Invoke it\n        with a command and appropriate arguments to send a message to this\n        connection\'s peer.\n\n        @param commandType: a subclass of Command.\n        @type commandType: L{type}\n\n        @param a: Positional (special) parameters taken by the command.\n        Positional parameters will typically not be sent over the wire.  The\n        only command included with AMP which uses positional parameters is\n        L{ProtocolSwitchCommand}, which takes the protocol that will be\n        switched to as its first argument.\n\n        @param kw: Keyword arguments taken by the command.  These are the\n        arguments declared in the command\'s \'arguments\' attribute.  They will\n        be encoded and sent to the peer as arguments for the L{commandType}.\n\n        @return: If L{commandType} has a C{requiresAnswer} attribute set to\n        L{False}, then return L{None}.  Otherwise, return a L{Deferred} which\n        fires with a dictionary of objects representing the result of this\n        call.  Additionally, this L{Deferred} may fail with an exception\n        representing a connection failure, with L{UnknownRemoteError} if the\n        other end of the connection fails for an unknown reason, or with any\n        error specified as a key in L{commandType}\'s C{errors} dictionary.\n        """'
newline|'\n'
nl|'\n'
comment|'# XXX this takes command subclasses and not command objects on purpose.'
nl|'\n'
comment|"# There's really no reason to have all this back-and-forth between"
nl|'\n'
comment|'# command objects and the protocol, and the extra object being created'
nl|'\n'
comment|'# (the Command instance) is pointless.  Command is kind of like'
nl|'\n'
comment|'# Interface, and should be more like it.'
nl|'\n'
nl|'\n'
comment|'# In other words, the fact that commandType is instantiated here is an'
nl|'\n'
comment|"# implementation detail.  Don't rely on it."
nl|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'co'
op|'='
name|'commandType'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'co'
op|'.'
name|'_doCommand'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unhandledError
dedent|''
name|'def'
name|'unhandledError'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This is a terminal callback called after application code has had a\n        chance to quash any errors.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'boxSender'
op|'.'
name|'unhandledError'
op|'('
name|'failure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_answerReceived
dedent|''
name|'def'
name|'_answerReceived'
op|'('
name|'self'
op|','
name|'box'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An AMP box was received that answered a command previously sent with\n        L{callRemote}.\n\n        @param box: an AmpBox with a value for its L{ANSWER} key.\n        """'
newline|'\n'
name|'question'
op|'='
name|'self'
op|'.'
name|'_outstandingRequests'
op|'.'
name|'pop'
op|'('
name|'box'
op|'['
name|'ANSWER'
op|']'
op|')'
newline|'\n'
name|'question'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'unhandledError'
op|')'
newline|'\n'
name|'question'
op|'.'
name|'callback'
op|'('
name|'box'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_errorReceived
dedent|''
name|'def'
name|'_errorReceived'
op|'('
name|'self'
op|','
name|'box'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An AMP box was received that answered a command previously sent with\n        L{callRemote}, with an error.\n\n        @param box: an L{AmpBox} with a value for its L{ERROR}, L{ERROR_CODE},\n        and L{ERROR_DESCRIPTION} keys.\n        """'
newline|'\n'
name|'question'
op|'='
name|'self'
op|'.'
name|'_outstandingRequests'
op|'.'
name|'pop'
op|'('
name|'box'
op|'['
name|'ERROR'
op|']'
op|')'
newline|'\n'
name|'question'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'unhandledError'
op|')'
newline|'\n'
name|'errorCode'
op|'='
name|'box'
op|'['
name|'ERROR_CODE'
op|']'
newline|'\n'
name|'description'
op|'='
name|'box'
op|'['
name|'ERROR_DESCRIPTION'
op|']'
newline|'\n'
name|'if'
name|'errorCode'
name|'in'
name|'PROTOCOL_ERRORS'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'PROTOCOL_ERRORS'
op|'['
name|'errorCode'
op|']'
op|'('
name|'errorCode'
op|','
name|'description'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'RemoteAmpError'
op|'('
name|'errorCode'
op|','
name|'description'
op|')'
newline|'\n'
dedent|''
name|'question'
op|'.'
name|'errback'
op|'('
name|'Failure'
op|'('
name|'exc'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_commandReceived
dedent|''
name|'def'
name|'_commandReceived'
op|'('
name|'self'
op|','
name|'box'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param box: an L{AmpBox} with a value for its L{COMMAND} and L{ASK}\n        keys.\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'box'
op|'['
name|'COMMAND'
op|']'
newline|'\n'
DECL|function|formatAnswer
name|'def'
name|'formatAnswer'
op|'('
name|'answerBox'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'answerBox'
op|'['
name|'ANSWER'
op|']'
op|'='
name|'box'
op|'['
name|'ASK'
op|']'
newline|'\n'
name|'return'
name|'answerBox'
newline|'\n'
DECL|function|formatError
dedent|''
name|'def'
name|'formatError'
op|'('
name|'error'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'error'
op|'.'
name|'check'
op|'('
name|'RemoteAmpError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'code'
op|'='
name|'error'
op|'.'
name|'value'
op|'.'
name|'errorCode'
newline|'\n'
name|'desc'
op|'='
name|'error'
op|'.'
name|'value'
op|'.'
name|'description'
newline|'\n'
name|'if'
name|'error'
op|'.'
name|'value'
op|'.'
name|'fatal'
op|':'
newline|'\n'
indent|'                    '
name|'errorBox'
op|'='
name|'QuitBox'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'errorBox'
op|'='
name|'AmpBox'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'errorBox'
op|'='
name|'QuitBox'
op|'('
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'error'
op|')'
comment|'# here is where server-side logging happens'
newline|'\n'
comment|"# if the error isn't handled"
nl|'\n'
name|'code'
op|'='
name|'UNKNOWN_ERROR_CODE'
newline|'\n'
name|'desc'
op|'='
string|'"Unknown Error"'
newline|'\n'
dedent|''
name|'errorBox'
op|'['
name|'ERROR'
op|']'
op|'='
name|'box'
op|'['
name|'ASK'
op|']'
newline|'\n'
name|'errorBox'
op|'['
name|'ERROR_DESCRIPTION'
op|']'
op|'='
name|'desc'
newline|'\n'
name|'errorBox'
op|'['
name|'ERROR_CODE'
op|']'
op|'='
name|'code'
newline|'\n'
name|'return'
name|'errorBox'
newline|'\n'
dedent|''
name|'deferred'
op|'='
name|'self'
op|'.'
name|'dispatchCommand'
op|'('
name|'box'
op|')'
newline|'\n'
name|'if'
name|'ASK'
name|'in'
name|'box'
op|':'
newline|'\n'
indent|'            '
name|'deferred'
op|'.'
name|'addCallbacks'
op|'('
name|'formatAnswer'
op|','
name|'formatError'
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_safeEmit'
op|')'
newline|'\n'
dedent|''
name|'deferred'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'unhandledError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ampBoxReceived
dedent|''
name|'def'
name|'ampBoxReceived'
op|'('
name|'self'
op|','
name|'box'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An AmpBox was received, representing a command, or an answer to a\n        previously issued command (either successful or erroneous).  Respond to\n        it according to its contents.\n\n        @param box: an AmpBox\n\n        @raise NoEmptyBoxes: when a box is received that does not contain an\n        \'_answer\', \'_command\' / \'_ask\', or \'_error\' key; i.e. one which does not\n        fit into the command / response protocol defined by AMP.\n        """'
newline|'\n'
name|'if'
name|'ANSWER'
name|'in'
name|'box'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_answerReceived'
op|'('
name|'box'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'ERROR'
name|'in'
name|'box'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_errorReceived'
op|'('
name|'box'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'COMMAND'
name|'in'
name|'box'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_commandReceived'
op|'('
name|'box'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NoEmptyBoxes'
op|'('
name|'box'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_safeEmit
dedent|''
dedent|''
name|'def'
name|'_safeEmit'
op|'('
name|'self'
op|','
name|'aBox'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Emit a box, ignoring L{ProtocolSwitched} and L{ConnectionLost} errors\n        which cannot be usefully handled.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'aBox'
op|'.'
name|'_sendTo'
op|'('
name|'self'
op|'.'
name|'boxSender'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'ProtocolSwitched'
op|','
name|'ConnectionLost'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dispatchCommand
dedent|''
dedent|''
name|'def'
name|'dispatchCommand'
op|'('
name|'self'
op|','
name|'box'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A box with a _command key was received.\n\n        Dispatch it to a local handler call it.\n\n        @param proto: an AMP instance.\n        @param box: an AmpBox to be dispatched.\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'box'
op|'['
name|'COMMAND'
op|']'
newline|'\n'
name|'responder'
op|'='
name|'self'
op|'.'
name|'locator'
op|'.'
name|'locateResponder'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'if'
name|'responder'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
name|'RemoteAmpError'
op|'('
nl|'\n'
name|'UNHANDLED_ERROR_CODE'
op|','
nl|'\n'
string|'"Unhandled Command: %r"'
op|'%'
op|'('
name|'cmd'
op|','
op|')'
op|','
nl|'\n'
name|'False'
op|','
nl|'\n'
name|'local'
op|'='
name|'Failure'
op|'('
name|'UnhandledCommand'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'maybeDeferred'
op|'('
name|'responder'
op|','
name|'box'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommandLocator
dedent|''
dedent|''
name|'class'
name|'CommandLocator'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A L{CommandLocator} is a collection of responders to AMP L{Command}s, with\n    the help of the L{Command.responder} decorator.\n    """'
newline|'\n'
nl|'\n'
DECL|class|__metaclass__
name|'class'
name|'__metaclass__'
op|'('
name|'type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This metaclass keeps track of all of the Command.responder-decorated\n        methods defined since the last CommandLocator subclass was defined.  It\n        assumes (usually correctly, but unfortunately not necessarily so) that\n        those commands responders were all declared as methods of the class\n        being defined.  Note that this list can be incorrect if users use the\n        Command.responder decorator outside the context of a CommandLocator\n        class declaration.\n\n        The Command.responder decorator explicitly cooperates with this\n        metaclass.\n        """'
newline|'\n'
nl|'\n'
DECL|variable|_currentClassCommands
name|'_currentClassCommands'
op|'='
op|'['
op|']'
newline|'\n'
DECL|member|__new__
name|'def'
name|'__new__'
op|'('
name|'cls'
op|','
name|'name'
op|','
name|'bases'
op|','
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'commands'
op|'='
name|'cls'
op|'.'
name|'_currentClassCommands'
op|'['
op|':'
op|']'
newline|'\n'
name|'cls'
op|'.'
name|'_currentClassCommands'
op|'['
op|':'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'cd'
op|'='
name|'attrs'
op|'['
string|"'_commandDispatch'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'base'
name|'in'
name|'bases'
op|':'
newline|'\n'
indent|'                '
name|'cls'
op|'.'
name|'_grabFromBase'
op|'('
name|'cd'
op|','
name|'base'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'commandClass'
op|','
name|'responderFunc'
name|'in'
name|'commands'
op|':'
newline|'\n'
indent|'                '
name|'cd'
op|'['
name|'commandClass'
op|'.'
name|'commandName'
op|']'
op|'='
op|'('
name|'commandClass'
op|','
name|'responderFunc'
op|')'
newline|'\n'
dedent|''
name|'subcls'
op|'='
name|'type'
op|'.'
name|'__new__'
op|'('
name|'cls'
op|','
name|'name'
op|','
name|'bases'
op|','
name|'attrs'
op|')'
newline|'\n'
name|'if'
op|'('
name|'bases'
name|'and'
op|'('
nl|'\n'
name|'subcls'
op|'.'
name|'lookupFunction'
op|'!='
name|'CommandLocator'
op|'.'
name|'lookupFunction'
op|')'
op|')'
op|':'
newline|'\n'
DECL|function|locateResponder
indent|'                '
name|'def'
name|'locateResponder'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"Override locateResponder, not lookupFunction."'
op|','
nl|'\n'
name|'category'
op|'='
name|'PendingDeprecationWarning'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'lookupFunction'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'subcls'
op|'.'
name|'locateResponder'
op|'='
name|'locateResponder'
newline|'\n'
dedent|''
name|'return'
name|'subcls'
newline|'\n'
nl|'\n'
DECL|member|_grabFromBase
dedent|''
name|'def'
name|'_grabFromBase'
op|'('
name|'cls'
op|','
name|'cd'
op|','
name|'base'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'hasattr'
op|'('
name|'base'
op|','
string|'"_commandDispatch"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'cd'
op|'.'
name|'update'
op|'('
name|'base'
op|'.'
name|'_commandDispatch'
op|')'
newline|'\n'
name|'for'
name|'subbase'
name|'in'
name|'base'
op|'.'
name|'__bases__'
op|':'
newline|'\n'
indent|'                    '
name|'cls'
op|'.'
name|'_grabFromBase'
op|'('
name|'cd'
op|','
name|'subbase'
op|')'
newline|'\n'
DECL|variable|_grabFromBase
dedent|''
dedent|''
dedent|''
name|'_grabFromBase'
op|'='
name|'classmethod'
op|'('
name|'_grabFromBase'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'implements'
op|'('
name|'IResponderLocator'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_wrapWithSerialization
name|'def'
name|'_wrapWithSerialization'
op|'('
name|'self'
op|','
name|'aCallable'
op|','
name|'command'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Wrap aCallable with its command\'s argument de-serialization\n        and result serialization logic.\n\n        @param aCallable: a callable with a \'command\' attribute, designed to be\n        called with keyword arguments.\n\n        @param command: the command class whose serialization to use.\n\n        @return: a 1-arg callable which, when invoked with an AmpBox, will\n        deserialize the argument list and invoke appropriate user code for the\n        callable\'s command, returning a Deferred which fires with the result or\n        fails with an error.\n        """'
newline|'\n'
DECL|function|doit
name|'def'
name|'doit'
op|'('
name|'box'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'kw'
op|'='
name|'command'
op|'.'
name|'parseArguments'
op|'('
name|'box'
op|','
name|'self'
op|')'
newline|'\n'
DECL|function|checkKnownErrors
name|'def'
name|'checkKnownErrors'
op|'('
name|'error'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'key'
op|'='
name|'error'
op|'.'
name|'trap'
op|'('
op|'*'
name|'command'
op|'.'
name|'allErrors'
op|')'
newline|'\n'
name|'code'
op|'='
name|'command'
op|'.'
name|'allErrors'
op|'['
name|'key'
op|']'
newline|'\n'
name|'desc'
op|'='
name|'str'
op|'('
name|'error'
op|'.'
name|'value'
op|')'
newline|'\n'
name|'return'
name|'Failure'
op|'('
name|'RemoteAmpError'
op|'('
nl|'\n'
name|'code'
op|','
name|'desc'
op|','
name|'key'
name|'in'
name|'command'
op|'.'
name|'fatalErrors'
op|','
name|'local'
op|'='
name|'error'
op|')'
op|')'
newline|'\n'
DECL|function|makeResponseFor
dedent|''
name|'def'
name|'makeResponseFor'
op|'('
name|'objects'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'command'
op|'.'
name|'makeResponse'
op|'('
name|'objects'
op|','
name|'self'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
comment|"# let's helpfully log this."
nl|'\n'
indent|'                    '
name|'originalFailure'
op|'='
name|'Failure'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'BadLocalReturn'
op|'('
nl|'\n'
string|'"%r returned %r and %r could not serialize it"'
op|'%'
op|'('
nl|'\n'
name|'aCallable'
op|','
nl|'\n'
name|'objects'
op|','
nl|'\n'
name|'command'
op|')'
op|','
nl|'\n'
name|'originalFailure'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'maybeDeferred'
op|'('
name|'aCallable'
op|','
op|'**'
name|'kw'
op|')'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'makeResponseFor'
op|')'
op|'.'
name|'addErrback'
op|'('
nl|'\n'
name|'checkKnownErrors'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'doit'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|lookupFunction
dedent|''
name|'def'
name|'lookupFunction'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Deprecated synonym for L{locateResponder}\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'lookupFunction'
op|'!='
name|'CommandLocator'
op|'.'
name|'lookupFunction'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'CommandLocator'
op|'.'
name|'locateResponder'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Call locateResponder, not lookupFunction."'
op|','
nl|'\n'
name|'category'
op|'='
name|'PendingDeprecationWarning'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'locateResponder'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|locateResponder
dedent|''
name|'def'
name|'locateResponder'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Locate a callable to invoke when executing the named command.\n\n        @param name: the normalized name (from the wire) of the command.\n\n        @return: a 1-argument function that takes a Box and returns a box or a\n        Deferred which fires a Box, for handling the command identified by the\n        given name, or None, if no appropriate responder can be found.\n        """'
newline|'\n'
comment|"# Try to find a high-level method to invoke, and if we can't find one,"
nl|'\n'
comment|'# fall back to a low-level one.'
nl|'\n'
name|'cd'
op|'='
name|'self'
op|'.'
name|'_commandDispatch'
newline|'\n'
name|'if'
name|'name'
name|'in'
name|'cd'
op|':'
newline|'\n'
indent|'            '
name|'commandClass'
op|','
name|'responderFunc'
op|'='
name|'cd'
op|'['
name|'name'
op|']'
newline|'\n'
name|'responderMethod'
op|'='
name|'types'
op|'.'
name|'MethodType'
op|'('
nl|'\n'
name|'responderFunc'
op|','
name|'self'
op|','
name|'self'
op|'.'
name|'__class__'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_wrapWithSerialization'
op|'('
name|'responderMethod'
op|','
name|'commandClass'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleStringLocator
dedent|''
dedent|''
dedent|''
name|'class'
name|'SimpleStringLocator'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Implement the L{locateResponder} method to do simple, string-based\n    dispatch.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IResponderLocator'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|baseDispatchPrefix
name|'baseDispatchPrefix'
op|'='
string|"'amp_'"
newline|'\n'
nl|'\n'
DECL|member|locateResponder
name|'def'
name|'locateResponder'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Locate a callable to invoke when executing the named command.\n\n        @return: a function with the name C{"amp_" + name} on L{self}, or None\n        if no such function exists.  This function will then be called with the\n        L{AmpBox} itself as an argument.\n\n        @param name: the normalized name (from the wire) of the command.\n        """'
newline|'\n'
name|'fName'
op|'='
name|'self'
op|'.'
name|'baseDispatchPrefix'
op|'+'
op|'('
name|'name'
op|'.'
name|'upper'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'fName'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|PYTHON_KEYWORDS
dedent|''
dedent|''
name|'PYTHON_KEYWORDS'
op|'='
op|'['
nl|'\n'
string|"'and'"
op|','
string|"'del'"
op|','
string|"'for'"
op|','
string|"'is'"
op|','
string|"'raise'"
op|','
string|"'assert'"
op|','
string|"'elif'"
op|','
string|"'from'"
op|','
string|"'lambda'"
op|','
nl|'\n'
string|"'return'"
op|','
string|"'break'"
op|','
string|"'else'"
op|','
string|"'global'"
op|','
string|"'not'"
op|','
string|"'try'"
op|','
string|"'class'"
op|','
string|"'except'"
op|','
nl|'\n'
string|"'if'"
op|','
string|"'or'"
op|','
string|"'while'"
op|','
string|"'continue'"
op|','
string|"'exec'"
op|','
string|"'import'"
op|','
string|"'pass'"
op|','
string|"'yield'"
op|','
nl|'\n'
string|"'def'"
op|','
string|"'finally'"
op|','
string|"'in'"
op|','
string|"'print'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_wireNameToPythonIdentifier
name|'def'
name|'_wireNameToPythonIdentifier'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    (Private) Normalize an argument name from the wire for use with Python\n    code.  If the return value is going to be a python keyword it will be\n    capitalized.  If it contains any dashes they will be replaced with\n    underscores.\n\n    The rationale behind this method is that AMP should be an inherently\n    multi-language protocol, so message keys may contain all manner of bizarre\n    bytes.  This is not a complete solution; there are still forms of arguments\n    that this implementation will be unable to parse.  However, Python\n    identifiers share a huge raft of properties with identifiers from many\n    other languages, so this is a \'good enough\' effort for now.  We deal\n    explicitly with dashes because that is the most likely departure: Lisps\n    commonly use dashes to separate method names, so protocols initially\n    implemented in a lisp amp dialect may use dashes in argument or command\n    names.\n\n    @param key: a str, looking something like \'foo-bar-baz\' or \'from\'\n\n    @return: a str which is a valid python identifier, looking something like\n    \'foo_bar_baz\' or \'From\'.\n    """'
newline|'\n'
name|'lkey'
op|'='
name|'key'
op|'.'
name|'replace'
op|'('
string|'"-"'
op|','
string|'"_"'
op|')'
newline|'\n'
name|'if'
name|'lkey'
name|'in'
name|'PYTHON_KEYWORDS'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'lkey'
op|'.'
name|'title'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'lkey'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Argument
dedent|''
name|'class'
name|'Argument'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Base-class of all objects that take values from Amp packets and convert\n    them into objects for Python functions.\n\n    This implementation of L{IArgumentType} provides several higher-level\n    hooks for subclasses to override.  See L{toString} and L{fromString}\n    which will be used to define the behavior of L{IArgumentType.toBox} and\n    L{IArgumentType.fromBox}, respectively.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IArgumentType'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|optional
name|'optional'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'optional'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create an Argument.\n\n        @param optional: a boolean indicating whether this argument can be\n        omitted in the protocol.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'optional'
op|'='
name|'optional'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|retrieve
dedent|''
name|'def'
name|'retrieve'
op|'('
name|'self'
op|','
name|'d'
op|','
name|'name'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve the given key from the given dictionary, removing it if found.\n\n        @param d: a dictionary.\n\n        @param name: a key in L{d}.\n\n        @param proto: an instance of an AMP.\n\n        @raise KeyError: if I am not optional and no value was found.\n\n        @return: d[name].\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'optional'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'d'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'d'
op|'['
name|'name'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'d'
op|'.'
name|'pop'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fromBox
dedent|''
name|'def'
name|'fromBox'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'strings'
op|','
name|'objects'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Populate an \'out\' dictionary with mapping names to Python values\n        decoded from an \'in\' AmpBox mapping strings to string values.\n\n        @param name: the argument name to retrieve\n        @type name: str\n\n        @param strings: The AmpBox to read string(s) from, a mapping of\n        argument names to string values.\n        @type strings: AmpBox\n\n        @param objects: The dictionary to write object(s) to, a mapping of\n        names to Python objects.\n        @type objects: dict\n\n        @param proto: an AMP instance.\n        """'
newline|'\n'
name|'st'
op|'='
name|'self'
op|'.'
name|'retrieve'
op|'('
name|'strings'
op|','
name|'name'
op|','
name|'proto'
op|')'
newline|'\n'
name|'nk'
op|'='
name|'_wireNameToPythonIdentifier'
op|'('
name|'name'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'optional'
name|'and'
name|'st'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'objects'
op|'['
name|'nk'
op|']'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'objects'
op|'['
name|'nk'
op|']'
op|'='
name|'self'
op|'.'
name|'fromStringProto'
op|'('
name|'st'
op|','
name|'proto'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|toBox
dedent|''
dedent|''
name|'def'
name|'toBox'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'strings'
op|','
name|'objects'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Populate an \'out\' AmpBox with strings encoded from an \'in\' dictionary\n        mapping names to Python values.\n\n        @param name: the argument name to retrieve\n        @type name: str\n\n        @param strings: The AmpBox to write string(s) to, a mapping of\n        argument names to string values.\n        @type strings: AmpBox\n\n        @param objects: The dictionary to read object(s) from, a mapping of\n        names to Python objects.\n\n        @type objects: dict\n\n        @param proto: the protocol we are converting for.\n        @type proto: AMP\n        """'
newline|'\n'
name|'obj'
op|'='
name|'self'
op|'.'
name|'retrieve'
op|'('
name|'objects'
op|','
name|'_wireNameToPythonIdentifier'
op|'('
name|'name'
op|')'
op|','
name|'proto'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'optional'
name|'and'
name|'obj'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# strings[name] = None'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'strings'
op|'['
name|'name'
op|']'
op|'='
name|'self'
op|'.'
name|'toStringProto'
op|'('
name|'obj'
op|','
name|'proto'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fromStringProto
dedent|''
dedent|''
name|'def'
name|'fromStringProto'
op|'('
name|'self'
op|','
name|'inString'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convert a string to a Python value.\n\n        @param inString: the string to convert.\n\n        @param proto: the protocol we are converting for.\n        @type proto: AMP\n\n        @return: a Python object.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'fromString'
op|'('
name|'inString'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|toStringProto
dedent|''
name|'def'
name|'toStringProto'
op|'('
name|'self'
op|','
name|'inObject'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convert a Python object to a string.\n\n        @param inObject: the object to convert.\n\n        @param proto: the protocol we are converting for.\n        @type proto: AMP\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'toString'
op|'('
name|'inObject'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fromString
dedent|''
name|'def'
name|'fromString'
op|'('
name|'self'
op|','
name|'inString'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convert a string to a Python object.  Subclasses must implement this.\n\n        @param inString: the string to convert.\n        @type inString: str\n\n        @return: the decoded value from inString\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|toString
dedent|''
name|'def'
name|'toString'
op|'('
name|'self'
op|','
name|'inObject'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convert a Python object into a string for passing over the network.\n\n        @param inObject: an object of the type that this Argument is intended\n        to deal with.\n\n        @return: the wire encoding of inObject\n        @rtype: str\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Integer
dedent|''
dedent|''
name|'class'
name|'Integer'
op|'('
name|'Argument'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert to and from \'int\'.\n    """'
newline|'\n'
DECL|variable|fromString
name|'fromString'
op|'='
name|'int'
newline|'\n'
DECL|member|toString
name|'def'
name|'toString'
op|'('
name|'self'
op|','
name|'inObject'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'int'
op|'('
name|'inObject'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|String
dedent|''
dedent|''
name|'class'
name|'String'
op|'('
name|'Argument'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Don\'t do any conversion at all; just pass through \'str\'.\n    """'
newline|'\n'
DECL|member|toString
name|'def'
name|'toString'
op|'('
name|'self'
op|','
name|'inObject'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'inObject'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fromString
dedent|''
name|'def'
name|'fromString'
op|'('
name|'self'
op|','
name|'inString'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'inString'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Float
dedent|''
dedent|''
name|'class'
name|'Float'
op|'('
name|'Argument'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Encode floating-point values on the wire as their repr.\n    """'
newline|'\n'
DECL|variable|fromString
name|'fromString'
op|'='
name|'float'
newline|'\n'
DECL|variable|toString
name|'toString'
op|'='
name|'repr'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Boolean
dedent|''
name|'class'
name|'Boolean'
op|'('
name|'Argument'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Encode True or False as "True" or "False" on the wire.\n    """'
newline|'\n'
DECL|member|fromString
name|'def'
name|'fromString'
op|'('
name|'self'
op|','
name|'inString'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'inString'
op|'=='
string|"'True'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'inString'
op|'=='
string|"'False'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|'"Bad boolean value: %r"'
op|'%'
op|'('
name|'inString'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|toString
dedent|''
dedent|''
name|'def'
name|'toString'
op|'('
name|'self'
op|','
name|'inObject'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'inObject'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'True'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'False'"
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Unicode
dedent|''
dedent|''
dedent|''
name|'class'
name|'Unicode'
op|'('
name|'String'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Encode a unicode string on the wire as UTF-8.\n    """'
newline|'\n'
nl|'\n'
DECL|member|toString
name|'def'
name|'toString'
op|'('
name|'self'
op|','
name|'inObject'
op|')'
op|':'
newline|'\n'
comment|'# assert isinstance(inObject, unicode)'
nl|'\n'
indent|'        '
name|'return'
name|'String'
op|'.'
name|'toString'
op|'('
name|'self'
op|','
name|'inObject'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fromString
dedent|''
name|'def'
name|'fromString'
op|'('
name|'self'
op|','
name|'inString'
op|')'
op|':'
newline|'\n'
comment|'# assert isinstance(inString, str)'
nl|'\n'
indent|'        '
name|'return'
name|'String'
op|'.'
name|'fromString'
op|'('
name|'self'
op|','
name|'inString'
op|')'
op|'.'
name|'decode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Path
dedent|''
dedent|''
name|'class'
name|'Path'
op|'('
name|'Unicode'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Encode and decode L{filepath.FilePath} instances as paths on the wire.\n\n    This is really intended for use with subprocess communication tools:\n    exchanging pathnames on different machines over a network is not generally\n    meaningful, but neither is it disallowed; you can use this to communicate\n    about NFS paths, for example.\n    """'
newline|'\n'
DECL|member|fromString
name|'def'
name|'fromString'
op|'('
name|'self'
op|','
name|'inString'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'filepath'
op|'.'
name|'FilePath'
op|'('
name|'Unicode'
op|'.'
name|'fromString'
op|'('
name|'self'
op|','
name|'inString'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|toString
dedent|''
name|'def'
name|'toString'
op|'('
name|'self'
op|','
name|'inObject'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Unicode'
op|'.'
name|'toString'
op|'('
name|'self'
op|','
name|'inObject'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListOf
dedent|''
dedent|''
name|'class'
name|'ListOf'
op|'('
name|'Argument'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Encode and decode lists of instances of a single other argument type.\n\n    For example, if you want to pass::\n\n        [3, 7, 9, 15]\n\n    You can create an argument like this::\n\n        ListOf(Integer())\n\n    The serialized form of the entire list is subject to the limit imposed by\n    L{MAX_VALUE_LENGTH}.  List elements are represented as 16-bit length\n    prefixed strings.  The argument type passed to the L{ListOf} initializer is\n    responsible for producing the serialized form of each element.\n\n    @ivar elementType: The L{Argument} instance used to encode and decode list\n        elements (note, not an arbitrary L{IArgument} implementation:\n        arguments must be implemented using only the C{fromString} and\n        C{toString} methods, not the C{fromBox} and C{toBox} methods).\n\n    @since: 10.0\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'elementType'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'elementType'
op|'='
name|'elementType'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fromString
dedent|''
name|'def'
name|'fromString'
op|'('
name|'self'
op|','
name|'inString'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convert the serialized form of a list of instances of some type back\n        into that list.\n        """'
newline|'\n'
name|'strings'
op|'='
op|'['
op|']'
newline|'\n'
name|'parser'
op|'='
name|'Int16StringReceiver'
op|'('
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'stringReceived'
op|'='
name|'strings'
op|'.'
name|'append'
newline|'\n'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
name|'inString'
op|')'
newline|'\n'
name|'return'
name|'map'
op|'('
name|'self'
op|'.'
name|'elementType'
op|'.'
name|'fromString'
op|','
name|'strings'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|toString
dedent|''
name|'def'
name|'toString'
op|'('
name|'self'
op|','
name|'inObject'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Serialize the given list of objects to a single string.\n        """'
newline|'\n'
name|'strings'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'obj'
name|'in'
name|'inObject'
op|':'
newline|'\n'
indent|'            '
name|'serialized'
op|'='
name|'self'
op|'.'
name|'elementType'
op|'.'
name|'toString'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'strings'
op|'.'
name|'append'
op|'('
name|'pack'
op|'('
string|"'!H'"
op|','
name|'len'
op|'('
name|'serialized'
op|')'
op|')'
op|')'
newline|'\n'
name|'strings'
op|'.'
name|'append'
op|'('
name|'serialized'
op|')'
newline|'\n'
dedent|''
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'strings'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AmpList
dedent|''
dedent|''
name|'class'
name|'AmpList'
op|'('
name|'Argument'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert a list of dictionaries into a list of AMP boxes on the wire.\n\n    For example, if you want to pass::\n\n        [{\'a\': 7, \'b\': u\'hello\'}, {\'a\': 9, \'b\': u\'goodbye\'}]\n\n    You might use an AmpList like this in your arguments or response list::\n\n        AmpList([(\'a\', Integer()),\n                 (\'b\', Unicode())])\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'subargs'
op|','
name|'optional'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create an AmpList.\n\n        @param subargs: a list of 2-tuples of (\'name\', argument) describing the\n        schema of the dictionaries in the sequence of amp boxes.\n\n        @param optional: a boolean indicating whether this argument can be\n        omitted in the protocol.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'subargs'
op|'='
name|'subargs'
newline|'\n'
name|'Argument'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'optional'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fromStringProto
dedent|''
name|'def'
name|'fromStringProto'
op|'('
name|'self'
op|','
name|'inString'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'boxes'
op|'='
name|'parseString'
op|'('
name|'inString'
op|')'
newline|'\n'
name|'values'
op|'='
op|'['
name|'_stringsToObjects'
op|'('
name|'box'
op|','
name|'self'
op|'.'
name|'subargs'
op|','
name|'proto'
op|')'
nl|'\n'
name|'for'
name|'box'
name|'in'
name|'boxes'
op|']'
newline|'\n'
name|'return'
name|'values'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|toStringProto
dedent|''
name|'def'
name|'toStringProto'
op|'('
name|'self'
op|','
name|'inObject'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'_objectsToStrings'
op|'('
nl|'\n'
name|'objects'
op|','
name|'self'
op|'.'
name|'subargs'
op|','
name|'Box'
op|'('
op|')'
op|','
name|'proto'
nl|'\n'
op|')'
op|'.'
name|'serialize'
op|'('
op|')'
name|'for'
name|'objects'
name|'in'
name|'inObject'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|class|Command
dedent|''
dedent|''
name|'class'
name|'Command'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Subclass me to specify an AMP Command.\n\n    @cvar arguments: A list of 2-tuples of (name, Argument-subclass-instance),\n    specifying the names and values of the parameters which are required for\n    this command.\n\n    @cvar response: A list like L{arguments}, but instead used for the return\n    value.\n\n    @cvar errors: A mapping of subclasses of L{Exception} to wire-protocol tags\n    for errors represented as L{str}s.  Responders which raise keys from this\n    dictionary will have the error translated to the corresponding tag on the\n    wire.  Invokers which receive Deferreds from invoking this command with\n    L{AMP.callRemote} will potentially receive Failures with keys from this\n    mapping as their value.  This mapping is inherited; if you declare a\n    command which handles C{FooError} as \'FOO_ERROR\', then subclass it and\n    specify C{BarError} as \'BAR_ERROR\', responders to the subclass may raise\n    either C{FooError} or C{BarError}, and invokers must be able to deal with\n    either of those exceptions.\n\n    @cvar fatalErrors: like \'errors\', but errors in this list will always\n    terminate the connection, despite being of a recognizable error type.\n\n    @cvar commandType: The type of Box used to issue commands; useful only for\n    protocol-modifying behavior like startTLS or protocol switching.  Defaults\n    to a plain vanilla L{Box}.\n\n    @cvar responseType: The type of Box used to respond to this command; only\n    useful for protocol-modifying behavior like startTLS or protocol switching.\n    Defaults to a plain vanilla L{Box}.\n\n    @ivar requiresAnswer: a boolean; defaults to True.  Set it to False on your\n    subclass if you want callRemote to return None.  Note: this is a hint only\n    to the client side of the protocol.  The return-type of a command responder\n    method must always be a dictionary adhering to the contract specified by\n    L{response}, because clients are always free to request a response if they\n    want one.\n    """'
newline|'\n'
nl|'\n'
DECL|class|__metaclass__
name|'class'
name|'__metaclass__'
op|'('
name|'type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Metaclass hack to establish reverse-mappings for \'errors\' and\n        \'fatalErrors\' as class vars.\n        """'
newline|'\n'
DECL|member|__new__
name|'def'
name|'__new__'
op|'('
name|'cls'
op|','
name|'name'
op|','
name|'bases'
op|','
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'re'
op|'='
name|'attrs'
op|'['
string|"'reverseErrors'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'er'
op|'='
name|'attrs'
op|'['
string|"'allErrors'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
string|"'commandName'"
name|'not'
name|'in'
name|'attrs'
op|':'
newline|'\n'
indent|'                '
name|'attrs'
op|'['
string|"'commandName'"
op|']'
op|'='
name|'name'
newline|'\n'
dedent|''
name|'newtype'
op|'='
name|'type'
op|'.'
name|'__new__'
op|'('
name|'cls'
op|','
name|'name'
op|','
name|'bases'
op|','
name|'attrs'
op|')'
newline|'\n'
name|'errors'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'fatalErrors'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'accumulateClassDict'
op|'('
name|'newtype'
op|','
string|"'errors'"
op|','
name|'errors'
op|')'
newline|'\n'
name|'accumulateClassDict'
op|'('
name|'newtype'
op|','
string|"'fatalErrors'"
op|','
name|'fatalErrors'
op|')'
newline|'\n'
name|'for'
name|'v'
op|','
name|'k'
name|'in'
name|'errors'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'re'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
name|'er'
op|'['
name|'v'
op|']'
op|'='
name|'k'
newline|'\n'
dedent|''
name|'for'
name|'v'
op|','
name|'k'
name|'in'
name|'fatalErrors'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'re'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
name|'er'
op|'['
name|'v'
op|']'
op|'='
name|'k'
newline|'\n'
dedent|''
name|'return'
name|'newtype'
newline|'\n'
nl|'\n'
DECL|variable|arguments
dedent|''
dedent|''
name|'arguments'
op|'='
op|'['
op|']'
newline|'\n'
DECL|variable|response
name|'response'
op|'='
op|'['
op|']'
newline|'\n'
DECL|variable|extra
name|'extra'
op|'='
op|'['
op|']'
newline|'\n'
DECL|variable|errors
name|'errors'
op|'='
op|'{'
op|'}'
newline|'\n'
DECL|variable|fatalErrors
name|'fatalErrors'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|commandType
name|'commandType'
op|'='
name|'Box'
newline|'\n'
DECL|variable|responseType
name|'responseType'
op|'='
name|'Box'
newline|'\n'
nl|'\n'
DECL|variable|requiresAnswer
name|'requiresAnswer'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create an instance of this command with specified values for its\n        parameters.\n\n        @param kw: a dict containing an appropriate value for each name\n        specified in the L{arguments} attribute of my class.\n\n        @raise InvalidSignature: if you forgot any required arguments.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'structured'
op|'='
name|'kw'
newline|'\n'
name|'givenArgs'
op|'='
name|'kw'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'forgotten'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'name'
op|','
name|'arg'
name|'in'
name|'self'
op|'.'
name|'arguments'
op|':'
newline|'\n'
indent|'            '
name|'pythonName'
op|'='
name|'_wireNameToPythonIdentifier'
op|'('
name|'name'
op|')'
newline|'\n'
name|'if'
name|'pythonName'
name|'not'
name|'in'
name|'givenArgs'
name|'and'
name|'not'
name|'arg'
op|'.'
name|'optional'
op|':'
newline|'\n'
indent|'                '
name|'forgotten'
op|'.'
name|'append'
op|'('
name|'pythonName'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'forgotten'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InvalidSignature'
op|'('
string|'"forgot %s for %s"'
op|'%'
op|'('
nl|'\n'
string|"', '"
op|'.'
name|'join'
op|'('
name|'forgotten'
op|')'
op|','
name|'self'
op|'.'
name|'commandName'
op|')'
op|')'
newline|'\n'
dedent|''
name|'forgotten'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeResponse
dedent|''
name|'def'
name|'makeResponse'
op|'('
name|'cls'
op|','
name|'objects'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Serialize a mapping of arguments using this L{Command}\'s\n        response schema.\n\n        @param objects: a dict with keys matching the names specified in\n        self.response, having values of the types that the Argument objects in\n        self.response can format.\n\n        @param proto: an L{AMP}.\n\n        @return: an L{AmpBox}.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'responseType'
op|'='
name|'cls'
op|'.'
name|'responseType'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'_objectsToStrings'
op|'('
name|'objects'
op|','
name|'cls'
op|'.'
name|'response'
op|','
name|'responseType'
op|','
name|'proto'
op|')'
newline|'\n'
DECL|variable|makeResponse
dedent|''
name|'makeResponse'
op|'='
name|'classmethod'
op|'('
name|'makeResponse'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeArguments
name|'def'
name|'makeArguments'
op|'('
name|'cls'
op|','
name|'objects'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Serialize a mapping of arguments using this L{Command}\'s\n        argument schema.\n\n        @param objects: a dict with keys similar to the names specified in\n        self.arguments, having values of the types that the Argument objects in\n        self.arguments can parse.\n\n        @param proto: an L{AMP}.\n\n        @return: An instance of this L{Command}\'s C{commandType}.\n        """'
newline|'\n'
name|'allowedNames'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
op|'('
name|'argName'
op|','
name|'ignored'
op|')'
name|'in'
name|'cls'
op|'.'
name|'arguments'
op|':'
newline|'\n'
indent|'            '
name|'allowedNames'
op|'.'
name|'add'
op|'('
name|'_wireNameToPythonIdentifier'
op|'('
name|'argName'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'intendedArg'
name|'in'
name|'objects'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'intendedArg'
name|'not'
name|'in'
name|'allowedNames'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'InvalidSignature'
op|'('
nl|'\n'
string|'"%s is not a valid argument"'
op|'%'
op|'('
name|'intendedArg'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'_objectsToStrings'
op|'('
name|'objects'
op|','
name|'cls'
op|'.'
name|'arguments'
op|','
name|'cls'
op|'.'
name|'commandType'
op|'('
op|')'
op|','
nl|'\n'
name|'proto'
op|')'
newline|'\n'
DECL|variable|makeArguments
dedent|''
name|'makeArguments'
op|'='
name|'classmethod'
op|'('
name|'makeArguments'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|parseResponse
name|'def'
name|'parseResponse'
op|'('
name|'cls'
op|','
name|'box'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse a mapping of serialized arguments using this\n        L{Command}\'s response schema.\n\n        @param box: A mapping of response-argument names to the\n        serialized forms of those arguments.\n        @param protocol: The L{AMP} protocol.\n\n        @return: A mapping of response-argument names to the parsed\n        forms.\n        """'
newline|'\n'
name|'return'
name|'_stringsToObjects'
op|'('
name|'box'
op|','
name|'cls'
op|'.'
name|'response'
op|','
name|'protocol'
op|')'
newline|'\n'
DECL|variable|parseResponse
dedent|''
name|'parseResponse'
op|'='
name|'classmethod'
op|'('
name|'parseResponse'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|parseArguments
name|'def'
name|'parseArguments'
op|'('
name|'cls'
op|','
name|'box'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse a mapping of serialized arguments using this\n        L{Command}\'s argument schema.\n\n        @param box: A mapping of argument names to the seralized forms\n        of those arguments.\n        @param protocol: The L{AMP} protocol.\n\n        @return: A mapping of argument names to the parsed forms.\n        """'
newline|'\n'
name|'return'
name|'_stringsToObjects'
op|'('
name|'box'
op|','
name|'cls'
op|'.'
name|'arguments'
op|','
name|'protocol'
op|')'
newline|'\n'
DECL|variable|parseArguments
dedent|''
name|'parseArguments'
op|'='
name|'classmethod'
op|'('
name|'parseArguments'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|responder
name|'def'
name|'responder'
op|'('
name|'cls'
op|','
name|'methodfunc'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Declare a method to be a responder for a particular command.\n\n        This is a decorator.\n\n        Use like so::\n\n            class MyCommand(Command):\n                arguments = [(\'a\', ...), (\'b\', ...)]\n\n            class MyProto(AMP):\n                def myFunMethod(self, a, b):\n                    ...\n                MyCommand.responder(myFunMethod)\n\n        Notes: Although decorator syntax is not used within Twisted, this\n        function returns its argument and is therefore safe to use with\n        decorator syntax.\n\n        This is not thread safe.  Don\'t declare AMP subclasses in other\n        threads.  Don\'t declare responders outside the scope of AMP subclasses;\n        the behavior is undefined.\n\n        @param methodfunc: A function which will later become a method, which\n        has a keyword signature compatible with this command\'s L{argument} list\n        and returns a dictionary with a set of keys compatible with this\n        command\'s L{response} list.\n\n        @return: the methodfunc parameter.\n        """'
newline|'\n'
name|'CommandLocator'
op|'.'
name|'_currentClassCommands'
op|'.'
name|'append'
op|'('
op|'('
name|'cls'
op|','
name|'methodfunc'
op|')'
op|')'
newline|'\n'
name|'return'
name|'methodfunc'
newline|'\n'
DECL|variable|responder
dedent|''
name|'responder'
op|'='
name|'classmethod'
op|'('
name|'responder'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Our only instance method'
nl|'\n'
DECL|member|_doCommand
name|'def'
name|'_doCommand'
op|'('
name|'self'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Encode and send this Command to the given protocol.\n\n        @param proto: an AMP, representing the connection to send to.\n\n        @return: a Deferred which will fire or error appropriately when the\n        other side responds to the command (or error if the connection is lost\n        before it is responded to).\n        """'
newline|'\n'
nl|'\n'
DECL|function|_massageError
name|'def'
name|'_massageError'
op|'('
name|'error'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'error'
op|'.'
name|'trap'
op|'('
name|'RemoteAmpError'
op|')'
newline|'\n'
name|'rje'
op|'='
name|'error'
op|'.'
name|'value'
newline|'\n'
name|'errorType'
op|'='
name|'self'
op|'.'
name|'reverseErrors'
op|'.'
name|'get'
op|'('
name|'rje'
op|'.'
name|'errorCode'
op|','
nl|'\n'
name|'UnknownRemoteError'
op|')'
newline|'\n'
name|'return'
name|'Failure'
op|'('
name|'errorType'
op|'('
name|'rje'
op|'.'
name|'description'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'proto'
op|'.'
name|'_sendBoxCommand'
op|'('
name|'self'
op|'.'
name|'commandName'
op|','
nl|'\n'
name|'self'
op|'.'
name|'makeArguments'
op|'('
name|'self'
op|'.'
name|'structured'
op|','
name|'proto'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'requiresAnswer'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'requiresAnswer'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'parseResponse'
op|','
name|'proto'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'_massageError'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_NoCertificate
dedent|''
dedent|''
name|'class'
name|'_NoCertificate'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This is for peers which don\'t want to use a local certificate.  Used by\n    AMP because AMP\'s internal language is all about certificates and this\n    duck-types in the appropriate place; this API isn\'t really stable though,\n    so it\'s not exposed anywhere public.\n\n    For clients, it will use ephemeral DH keys, or whatever the default is for\n    certificate-less clients in OpenSSL.  For servers, it will generate a\n    temporary self-signed certificate with garbage values in the DN and use\n    that.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'client'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a _NoCertificate which either is or isn\'t for the client side of\n        the connection.\n\n        @param client: True if we are a client and should truly have no\n        certificate and be anonymous, False if we are a server and actually\n        have to generate a temporary certificate.\n\n        @type client: bool\n        """'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'='
name|'client'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|options
dedent|''
name|'def'
name|'options'
op|'('
name|'self'
op|','
op|'*'
name|'authorities'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Behaves like L{twisted.internet.ssl.PrivateCertificate.options}().\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'client'
op|':'
newline|'\n'
comment|'# do some crud with sslverify to generate a temporary self-signed'
nl|'\n'
comment|'# certificate.  This is SLOOOWWWWW so it is only in the absolute'
nl|'\n'
comment|'# worst, most naive case.'
nl|'\n'
nl|'\n'
comment|'# We have to do this because OpenSSL will not let both the server'
nl|'\n'
comment|'# and client be anonymous.'
nl|'\n'
indent|'            '
name|'sharedDN'
op|'='
name|'DN'
op|'('
name|'CN'
op|'='
string|"'TEMPORARY CERTIFICATE'"
op|')'
newline|'\n'
name|'key'
op|'='
name|'KeyPair'
op|'.'
name|'generate'
op|'('
op|')'
newline|'\n'
name|'cr'
op|'='
name|'key'
op|'.'
name|'certificateRequest'
op|'('
name|'sharedDN'
op|')'
newline|'\n'
name|'sscrd'
op|'='
name|'key'
op|'.'
name|'signCertificateRequest'
op|'('
name|'sharedDN'
op|','
name|'cr'
op|','
name|'lambda'
name|'dn'
op|':'
name|'True'
op|','
number|'1'
op|')'
newline|'\n'
name|'cert'
op|'='
name|'key'
op|'.'
name|'newCertificate'
op|'('
name|'sscrd'
op|')'
newline|'\n'
name|'return'
name|'cert'
op|'.'
name|'options'
op|'('
op|'*'
name|'authorities'
op|')'
newline|'\n'
dedent|''
name|'options'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
name|'if'
name|'authorities'
op|':'
newline|'\n'
indent|'            '
name|'options'
op|'.'
name|'update'
op|'('
name|'dict'
op|'('
name|'verify'
op|'='
name|'True'
op|','
nl|'\n'
name|'requireCertificate'
op|'='
name|'True'
op|','
nl|'\n'
name|'caCerts'
op|'='
op|'['
name|'auth'
op|'.'
name|'original'
name|'for'
name|'auth'
name|'in'
name|'authorities'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'occo'
op|'='
name|'CertificateOptions'
op|'('
op|'**'
name|'options'
op|')'
newline|'\n'
name|'return'
name|'occo'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_TLSBox
dedent|''
dedent|''
name|'class'
name|'_TLSBox'
op|'('
name|'AmpBox'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I am an AmpBox that, upon being sent, initiates a TLS connection.\n    """'
newline|'\n'
DECL|variable|__slots__
name|'__slots__'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'ssl'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RemoteAmpError'
op|'('
string|'"TLS_ERROR"'
op|','
string|'"TLS not available"'
op|')'
newline|'\n'
dedent|''
name|'AmpBox'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_keyprop
dedent|''
name|'def'
name|'_keyprop'
op|'('
name|'k'
op|','
name|'default'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'property'
op|'('
name|'lambda'
name|'self'
op|':'
name|'self'
op|'.'
name|'get'
op|'('
name|'k'
op|','
name|'default'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# These properties are described in startTLS'
nl|'\n'
DECL|variable|certificate
dedent|''
name|'certificate'
op|'='
name|'_keyprop'
op|'('
string|"'tls_localCertificate'"
op|','
name|'_NoCertificate'
op|'('
name|'False'
op|')'
op|')'
newline|'\n'
DECL|variable|verify
name|'verify'
op|'='
name|'_keyprop'
op|'('
string|"'tls_verifyAuthorities'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_sendTo
name|'def'
name|'_sendTo'
op|'('
name|'self'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send my encoded value to the protocol, then initiate TLS.\n        """'
newline|'\n'
name|'ab'
op|'='
name|'AmpBox'
op|'('
name|'self'
op|')'
newline|'\n'
name|'for'
name|'k'
name|'in'
op|'['
string|"'tls_localCertificate'"
op|','
nl|'\n'
string|"'tls_verifyAuthorities'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'ab'
op|'.'
name|'pop'
op|'('
name|'k'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'ab'
op|'.'
name|'_sendTo'
op|'('
name|'proto'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'_startTLS'
op|'('
name|'self'
op|'.'
name|'certificate'
op|','
name|'self'
op|'.'
name|'verify'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_LocalArgument
dedent|''
dedent|''
name|'class'
name|'_LocalArgument'
op|'('
name|'String'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Local arguments are never actually relayed across the wire.  This is just a\n    shim so that StartTLS can pretend to have some arguments: if arguments\n    acquire documentation properties, replace this with something nicer later.\n    """'
newline|'\n'
nl|'\n'
DECL|member|fromBox
name|'def'
name|'fromBox'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'strings'
op|','
name|'objects'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StartTLS
dedent|''
dedent|''
name|'class'
name|'StartTLS'
op|'('
name|'Command'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Use, or subclass, me to implement a command that starts TLS.\n\n    Callers of StartTLS may pass several special arguments, which affect the\n    TLS negotiation:\n\n        - tls_localCertificate: This is a\n        twisted.internet.ssl.PrivateCertificate which will be used to secure\n        the side of the connection it is returned on.\n\n        - tls_verifyAuthorities: This is a list of\n        twisted.internet.ssl.Certificate objects that will be used as the\n        certificate authorities to verify our peer\'s certificate.\n\n    Each of those special parameters may also be present as a key in the\n    response dictionary.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|arguments
name|'arguments'
op|'='
op|'['
op|'('
string|'"tls_localCertificate"'
op|','
name|'_LocalArgument'
op|'('
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|'"tls_verifyAuthorities"'
op|','
name|'_LocalArgument'
op|'('
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|response
name|'response'
op|'='
op|'['
op|'('
string|'"tls_localCertificate"'
op|','
name|'_LocalArgument'
op|'('
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|'"tls_verifyAuthorities"'
op|','
name|'_LocalArgument'
op|'('
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|responseType
name|'responseType'
op|'='
name|'_TLSBox'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a StartTLS command.  (This is private.  Use AMP.callRemote.)\n\n        @param tls_localCertificate: the PrivateCertificate object to use to\n        secure the connection.  If it\'s None, or unspecified, an ephemeral DH\n        key is used instead.\n\n        @param tls_verifyAuthorities: a list of Certificate objects which\n        represent root certificates to verify our peer with.\n        """'
newline|'\n'
name|'if'
name|'ssl'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"TLS not available."'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'certificate'
op|'='
name|'kw'
op|'.'
name|'pop'
op|'('
string|"'tls_localCertificate'"
op|','
name|'_NoCertificate'
op|'('
name|'True'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authorities'
op|'='
name|'kw'
op|'.'
name|'pop'
op|'('
string|"'tls_verifyAuthorities'"
op|','
name|'None'
op|')'
newline|'\n'
name|'Command'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_doCommand
dedent|''
name|'def'
name|'_doCommand'
op|'('
name|'self'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When a StartTLS command is sent, prepare to start TLS, but don\'t actually\n        do it; wait for the acknowledgement, then initiate the TLS handshake.\n        """'
newline|'\n'
name|'d'
op|'='
name|'Command'
op|'.'
name|'_doCommand'
op|'('
name|'self'
op|','
name|'proto'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'_prepareTLS'
op|'('
name|'self'
op|'.'
name|'certificate'
op|','
name|'self'
op|'.'
name|'authorities'
op|')'
newline|'\n'
comment|'# XXX before we get back to user code we are going to start TLS...'
nl|'\n'
DECL|function|actuallystart
name|'def'
name|'actuallystart'
op|'('
name|'response'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'proto'
op|'.'
name|'_startTLS'
op|'('
name|'self'
op|'.'
name|'certificate'
op|','
name|'self'
op|'.'
name|'authorities'
op|')'
newline|'\n'
name|'return'
name|'response'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'actuallystart'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProtocolSwitchCommand
dedent|''
dedent|''
name|'class'
name|'ProtocolSwitchCommand'
op|'('
name|'Command'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Use this command to switch from something Amp-derived to a different\n    protocol mid-connection.  This can be useful to use amp as the\n    connection-startup negotiation phase.  Since TLS is a different layer\n    entirely, you can use Amp to negotiate the security parameters of your\n    connection, then switch to a different protocol, and the connection will\n    remain secured.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'_protoToSwitchToFactory'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a ProtocolSwitchCommand.\n\n        @param _protoToSwitchToFactory: a ProtocolFactory which will generate\n        the Protocol to switch to.\n\n        @param kw: Keyword arguments, encoded and handled normally as\n        L{Command} would.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'protoToSwitchToFactory'
op|'='
name|'_protoToSwitchToFactory'
newline|'\n'
name|'super'
op|'('
name|'ProtocolSwitchCommand'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeResponse
dedent|''
name|'def'
name|'makeResponse'
op|'('
name|'cls'
op|','
name|'innerProto'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_SwitchBox'
op|'('
name|'innerProto'
op|')'
newline|'\n'
DECL|variable|makeResponse
dedent|''
name|'makeResponse'
op|'='
name|'classmethod'
op|'('
name|'makeResponse'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_doCommand
name|'def'
name|'_doCommand'
op|'('
name|'self'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When we emit a ProtocolSwitchCommand, lock the protocol, but don\'t actually\n        switch to the new protocol unless an acknowledgement is received.  If\n        an error is received, switch back.\n        """'
newline|'\n'
name|'d'
op|'='
name|'super'
op|'('
name|'ProtocolSwitchCommand'
op|','
name|'self'
op|')'
op|'.'
name|'_doCommand'
op|'('
name|'proto'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'_lockForSwitch'
op|'('
op|')'
newline|'\n'
DECL|function|switchNow
name|'def'
name|'switchNow'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'innerProto'
op|'='
name|'self'
op|'.'
name|'protoToSwitchToFactory'
op|'.'
name|'buildProtocol'
op|'('
nl|'\n'
name|'proto'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'_switchTo'
op|'('
name|'innerProto'
op|','
name|'self'
op|'.'
name|'protoToSwitchToFactory'
op|')'
newline|'\n'
name|'return'
name|'ign'
newline|'\n'
DECL|function|handle
dedent|''
name|'def'
name|'handle'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'proto'
op|'.'
name|'_unlockFromSwitch'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protoToSwitchToFactory'
op|'.'
name|'clientConnectionFailed'
op|'('
nl|'\n'
name|'None'
op|','
name|'Failure'
op|'('
name|'CONNECTION_LOST'
op|')'
op|')'
newline|'\n'
name|'return'
name|'ign'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'switchNow'
op|','
name|'handle'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BinaryBoxProtocol
dedent|''
dedent|''
name|'class'
name|'BinaryBoxProtocol'
op|'('
name|'StatefulStringProtocol'
op|','
name|'Int16StringReceiver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A protocol for receving L{Box}es - key/value pairs - via length-prefixed\n    strings.  A box is composed of:\n\n        - any number of key-value pairs, described by:\n            - a 2-byte network-endian packed key length (of which the first\n              byte must be null, and the second must be non-null: i.e. the\n              value of the length must be 1-255)\n            - a key, comprised of that many bytes\n            - a 2-byte network-endian unsigned value length (up to the maximum\n              of 65535)\n            - a value, comprised of that many bytes\n        - 2 null bytes\n\n    In other words, an even number of strings prefixed with packed unsigned\n    16-bit integers, and then a 0-length string to indicate the end of the box.\n\n    This protocol also implements 2 extra private bits of functionality related\n    to the byte boundaries between messages; it can start TLS between two given\n    boxes or switch to an entirely different protocol.  However, due to some\n    tricky elements of the implementation, the public interface to this\n    functionality is L{ProtocolSwitchCommand} and L{StartTLS}.\n\n    @ivar _keyLengthLimitExceeded: A flag which is only true when the\n        connection is being closed because a key length prefix which was longer\n        than allowed by the protocol was received.\n\n    @ivar boxReceiver: an L{IBoxReceiver} provider, whose L{ampBoxReceived}\n    method will be invoked for each L{Box} that is received.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IBoxSender'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_justStartedTLS
name|'_justStartedTLS'
op|'='
name|'False'
newline|'\n'
DECL|variable|_startingTLSBuffer
name|'_startingTLSBuffer'
op|'='
name|'None'
newline|'\n'
DECL|variable|_locked
name|'_locked'
op|'='
name|'False'
newline|'\n'
DECL|variable|_currentKey
name|'_currentKey'
op|'='
name|'None'
newline|'\n'
DECL|variable|_currentBox
name|'_currentBox'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|_keyLengthLimitExceeded
name|'_keyLengthLimitExceeded'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|variable|hostCertificate
name|'hostCertificate'
op|'='
name|'None'
newline|'\n'
DECL|variable|noPeerCertificate
name|'noPeerCertificate'
op|'='
name|'False'
comment|'# for tests'
newline|'\n'
DECL|variable|innerProtocol
name|'innerProtocol'
op|'='
name|'None'
newline|'\n'
DECL|variable|innerProtocolClientFactory
name|'innerProtocolClientFactory'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'boxReceiver'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'boxReceiver'
op|'='
name|'boxReceiver'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_switchTo
dedent|''
name|'def'
name|'_switchTo'
op|'('
name|'self'
op|','
name|'newProto'
op|','
name|'clientFactory'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Switch this BinaryBoxProtocol\'s transport to a new protocol.  You need\n        to do this \'simultaneously\' on both ends of a connection; the easiest\n        way to do this is to use a subclass of ProtocolSwitchCommand.\n\n        @param newProto: the new protocol instance to switch to.\n\n        @param clientFactory: the ClientFactory to send the\n        L{clientConnectionLost} notification to.\n        """'
newline|'\n'
comment|'# All the data that Int16Receiver has not yet dealt with belongs to our'
nl|'\n'
comment|"# new protocol: luckily it's keeping that in a handy (although"
nl|'\n'
comment|'# ostensibly internal) variable for us:'
nl|'\n'
name|'newProtoData'
op|'='
name|'self'
op|'.'
name|'recvd'
newline|'\n'
comment|"# We're quite possibly in the middle of a 'dataReceived' loop in"
nl|'\n'
comment|"# Int16StringReceiver: let's make sure that the next iteration, the"
nl|'\n'
comment|"# loop will break and not attempt to look at something that isn't a"
nl|'\n'
comment|'# length prefix.'
nl|'\n'
name|'self'
op|'.'
name|'recvd'
op|'='
string|"''"
newline|'\n'
comment|'# Finally, do the actual work of setting up the protocol and delivering'
nl|'\n'
comment|'# its first chunk of data, if one is available.'
nl|'\n'
name|'self'
op|'.'
name|'innerProtocol'
op|'='
name|'newProto'
newline|'\n'
name|'self'
op|'.'
name|'innerProtocolClientFactory'
op|'='
name|'clientFactory'
newline|'\n'
name|'newProto'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'newProto'
op|'.'
name|'dataReceived'
op|'('
name|'newProtoData'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|sendBox
dedent|''
name|'def'
name|'sendBox'
op|'('
name|'self'
op|','
name|'box'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a amp.Box to my peer.\n\n        Note: transport.write is never called outside of this method.\n\n        @param box: an AmpBox.\n\n        @raise ProtocolSwitched: if the protocol has previously been switched.\n\n        @raise ConnectionLost: if the connection has previously been lost.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_locked'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ProtocolSwitched'
op|'('
nl|'\n'
string|'"This connection has switched: no AMP traffic allowed."'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'transport'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ConnectionLost'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_startingTLSBuffer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_startingTLSBuffer'
op|'.'
name|'append'
op|'('
name|'box'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'box'
op|'.'
name|'serialize'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeConnection
dedent|''
dedent|''
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Notify L{boxReceiver} that it is about to receive boxes from this\n        protocol by invoking L{startReceivingBoxes}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'transport'
newline|'\n'
name|'self'
op|'.'
name|'boxReceiver'
op|'.'
name|'startReceivingBoxes'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Either parse incoming data as L{AmpBox}es or relay it to our nested\n        protocol.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_justStartedTLS'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_justStartedTLS'
op|'='
name|'False'
newline|'\n'
comment|"# If we already have an inner protocol, then we don't deliver data to"
nl|'\n'
comment|'# the protocol parser any more; we just hand it off.'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'innerProtocol'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'innerProtocol'
op|'.'
name|'dataReceived'
op|'('
name|'data'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'return'
name|'Int16StringReceiver'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The connection was lost; notify any nested protocol.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'innerProtocol'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'innerProtocol'
op|'.'
name|'connectionLost'
op|'('
name|'reason'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'innerProtocolClientFactory'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'innerProtocolClientFactory'
op|'.'
name|'clientConnectionLost'
op|'('
name|'None'
op|','
name|'reason'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'_keyLengthLimitExceeded'
op|':'
newline|'\n'
indent|'            '
name|'failReason'
op|'='
name|'Failure'
op|'('
name|'TooLong'
op|'('
name|'True'
op|','
name|'False'
op|','
name|'None'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'reason'
op|'.'
name|'check'
op|'('
name|'ConnectionClosed'
op|')'
name|'and'
name|'self'
op|'.'
name|'_justStartedTLS'
op|':'
newline|'\n'
comment|"# We just started TLS and haven't received any data.  This means"
nl|'\n'
comment|"# the other connection didn't like our cert (although they may not"
nl|'\n'
comment|"# have told us why - later Twisted should make 'reason' into a TLS"
nl|'\n'
comment|'# error.)'
nl|'\n'
indent|'            '
name|'failReason'
op|'='
name|'PeerVerifyError'
op|'('
nl|'\n'
string|'"Peer rejected our certificate for an unknown reason."'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'failReason'
op|'='
name|'reason'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'boxReceiver'
op|'.'
name|'stopReceivingBoxes'
op|'('
name|'failReason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# The longest key allowed'
nl|'\n'
DECL|variable|_MAX_KEY_LENGTH
dedent|''
name|'_MAX_KEY_LENGTH'
op|'='
number|'255'
newline|'\n'
nl|'\n'
comment|'# The longest value allowed (this is somewhat redundant, as longer values'
nl|'\n'
comment|'# cannot be encoded - ah well).'
nl|'\n'
DECL|variable|_MAX_VALUE_LENGTH
name|'_MAX_VALUE_LENGTH'
op|'='
number|'65535'
newline|'\n'
nl|'\n'
comment|'# The first thing received is a key.'
nl|'\n'
DECL|variable|MAX_LENGTH
name|'MAX_LENGTH'
op|'='
name|'_MAX_KEY_LENGTH'
newline|'\n'
nl|'\n'
DECL|member|proto_init
name|'def'
name|'proto_init'
op|'('
name|'self'
op|','
name|'string'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        String received in the \'init\' state.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_currentBox'
op|'='
name|'AmpBox'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'proto_key'
op|'('
name|'string'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|proto_key
dedent|''
name|'def'
name|'proto_key'
op|'('
name|'self'
op|','
name|'string'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        String received in the \'key\' state.  If the key is empty, a complete\n        box has been received.\n        """'
newline|'\n'
name|'if'
name|'string'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_currentKey'
op|'='
name|'string'
newline|'\n'
name|'self'
op|'.'
name|'MAX_LENGTH'
op|'='
name|'self'
op|'.'
name|'_MAX_VALUE_LENGTH'
newline|'\n'
name|'return'
string|"'value'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'boxReceiver'
op|'.'
name|'ampBoxReceived'
op|'('
name|'self'
op|'.'
name|'_currentBox'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_currentBox'
op|'='
name|'None'
newline|'\n'
name|'return'
string|"'init'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|proto_value
dedent|''
dedent|''
name|'def'
name|'proto_value'
op|'('
name|'self'
op|','
name|'string'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        String received in the \'value\' state.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_currentBox'
op|'['
name|'self'
op|'.'
name|'_currentKey'
op|']'
op|'='
name|'string'
newline|'\n'
name|'self'
op|'.'
name|'_currentKey'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'MAX_LENGTH'
op|'='
name|'self'
op|'.'
name|'_MAX_KEY_LENGTH'
newline|'\n'
name|'return'
string|"'key'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|lengthLimitExceeded
dedent|''
name|'def'
name|'lengthLimitExceeded'
op|'('
name|'self'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The key length limit was exceeded.  Disconnect the transport and make\n        sure a meaningful exception is reported.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_keyLengthLimitExceeded'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_lockForSwitch
dedent|''
name|'def'
name|'_lockForSwitch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lock this binary protocol so that no further boxes may be sent.  This\n        is used when sending a request to switch underlying protocols.  You\n        probably want to subclass ProtocolSwitchCommand rather than calling\n        this directly.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_locked'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unlockFromSwitch
dedent|''
name|'def'
name|'_unlockFromSwitch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Unlock this locked binary protocol so that further boxes may be sent\n        again.  This is used after an attempt to switch protocols has failed\n        for some reason.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'innerProtocol'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ProtocolSwitched'
op|'('
string|'"Protocol already switched.  Cannot unlock."'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_locked'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_prepareTLS
dedent|''
name|'def'
name|'_prepareTLS'
op|'('
name|'self'
op|','
name|'certificate'
op|','
name|'verifyAuthorities'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Used by StartTLSCommand to put us into the state where we don\'t\n        actually send things that get sent, instead we buffer them.  see\n        L{_sendBox}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_startingTLSBuffer'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'hostCertificate'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'OnlyOneTLS'
op|'('
nl|'\n'
string|'"Previously authenticated connection between %s and %s "'
nl|'\n'
string|'"is trying to re-establish as %s"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hostCertificate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'peerCertificate'
op|','
nl|'\n'
op|'('
name|'certificate'
op|','
name|'verifyAuthorities'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_startTLS
dedent|''
dedent|''
name|'def'
name|'_startTLS'
op|'('
name|'self'
op|','
name|'certificate'
op|','
name|'verifyAuthorities'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Used by TLSBox to initiate the SSL handshake.\n\n        @param certificate: a L{twisted.internet.ssl.PrivateCertificate} for\n        use locally.\n\n        @param verifyAuthorities: L{twisted.internet.ssl.Certificate} instances\n        representing certificate authorities which will verify our peer.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'hostCertificate'
op|'='
name|'certificate'
newline|'\n'
name|'self'
op|'.'
name|'_justStartedTLS'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'verifyAuthorities'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'verifyAuthorities'
op|'='
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'startTLS'
op|'('
name|'certificate'
op|'.'
name|'options'
op|'('
op|'*'
name|'verifyAuthorities'
op|')'
op|')'
newline|'\n'
name|'stlsb'
op|'='
name|'self'
op|'.'
name|'_startingTLSBuffer'
newline|'\n'
name|'if'
name|'stlsb'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_startingTLSBuffer'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'box'
name|'in'
name|'stlsb'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sendBox'
op|'('
name|'box'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getPeerCertificate
dedent|''
dedent|''
dedent|''
name|'def'
name|'_getPeerCertificate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'noPeerCertificate'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'Certificate'
op|'.'
name|'peerFromTransport'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
DECL|variable|peerCertificate
dedent|''
name|'peerCertificate'
op|'='
name|'property'
op|'('
name|'_getPeerCertificate'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unhandledError
name|'def'
name|'unhandledError'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The buck stops here.  This error was completely unhandled, time to\n        terminate the connection.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Amp server or network failure "'
nl|'\n'
string|'"unhandled by client application:"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
nl|'\n'
string|'"Dropping connection!  "'
nl|'\n'
string|'"To avoid, add errbacks to ALL remote commands!"'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'transport'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_defaultStartTLSResponder
dedent|''
dedent|''
name|'def'
name|'_defaultStartTLSResponder'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The default TLS responder doesn\'t specify any certificate or anything.\n\n        From a security perspective, it\'s little better than a plain-text\n        connection - but it is still a *bit* better, so it\'s included for\n        convenience.\n\n        You probably want to override this by providing your own StartTLS.responder.\n        """'
newline|'\n'
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'StartTLS'
op|'.'
name|'responder'
op|'('
name|'_defaultStartTLSResponder'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'class'
name|'AMP'
op|'('
name|'BinaryBoxProtocol'
op|','
name|'BoxDispatcher'
op|','
nl|'\n'
DECL|class|AMP
name|'CommandLocator'
op|','
name|'SimpleStringLocator'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This protocol is an AMP connection.  See the module docstring for protocol\n    details.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|_ampInitialized
name|'_ampInitialized'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'boxReceiver'
op|'='
name|'None'
op|','
name|'locator'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# For backwards compatibility.  When AMP did not separate parsing logic'
nl|'\n'
comment|'# (L{BinaryBoxProtocol}), request-response logic (L{BoxDispatcher}) and'
nl|'\n'
comment|'# command routing (L{CommandLocator}), it did not have a constructor.'
nl|'\n'
comment|'# Now it does, so old subclasses might have defined their own that did'
nl|'\n'
comment|"# not upcall.  If this flag isn't set, we'll call the constructor in"
nl|'\n'
comment|'# makeConnection before anything actually happens.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_ampInitialized'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'boxReceiver'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'boxReceiver'
op|'='
name|'self'
newline|'\n'
dedent|''
name|'if'
name|'locator'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'locator'
op|'='
name|'self'
newline|'\n'
dedent|''
name|'BoxDispatcher'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'locator'
op|')'
newline|'\n'
name|'BinaryBoxProtocol'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'boxReceiver'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|locateResponder
dedent|''
name|'def'
name|'locateResponder'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Unify the implementations of L{CommandLocator} and\n        L{SimpleStringLocator} to perform both kinds of dispatch, preferring\n        L{CommandLocator}.\n        """'
newline|'\n'
name|'firstResponder'
op|'='
name|'CommandLocator'
op|'.'
name|'locateResponder'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
name|'if'
name|'firstResponder'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'firstResponder'
newline|'\n'
dedent|''
name|'secondResponder'
op|'='
name|'SimpleStringLocator'
op|'.'
name|'locateResponder'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
name|'return'
name|'secondResponder'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A verbose string representation which gives us information about this\n        AMP connection.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'innerProtocol'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'innerRepr'
op|'='
string|"' inner %r'"
op|'%'
op|'('
name|'self'
op|'.'
name|'innerProtocol'
op|','
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'innerRepr'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'return'
string|"'<%s%s at 0x%x>'"
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
name|'innerRepr'
op|','
name|'unsignedID'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeConnection
dedent|''
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Emit a helpful log message when the connection is made.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_ampInitialized'
op|':'
newline|'\n'
comment|'# See comment in the constructor re: backward compatibility.  I'
nl|'\n'
comment|'# should probably emit a deprecation warning here.'
nl|'\n'
indent|'            '
name|'AMP'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
comment|'# Save these so we can emit a similar log message in L{connectionLost}.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_transportPeer'
op|'='
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_transportHost'
op|'='
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"%s connection established (HOST:%s PEER:%s)"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_transportHost'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_transportPeer'
op|')'
op|')'
newline|'\n'
name|'BinaryBoxProtocol'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Emit a helpful log message when the connection is lost.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"%s connection lost (HOST:%s PEER:%s)"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_transportHost'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_transportPeer'
op|')'
op|')'
newline|'\n'
name|'BinaryBoxProtocol'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_ParserHelper
dedent|''
dedent|''
name|'class'
name|'_ParserHelper'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A box receiver which records all boxes received.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'boxes'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPeer
dedent|''
name|'def'
name|'getPeer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'string'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'string'"
newline|'\n'
nl|'\n'
DECL|variable|disconnecting
dedent|''
name|'disconnecting'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|startReceivingBoxes
name|'def'
name|'startReceivingBoxes'
op|'('
name|'self'
op|','
name|'sender'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        No initialization is required.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ampBoxReceived
dedent|''
name|'def'
name|'ampBoxReceived'
op|'('
name|'self'
op|','
name|'box'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'boxes'
op|'.'
name|'append'
op|'('
name|'box'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Synchronous helpers'
nl|'\n'
DECL|member|parse
dedent|''
name|'def'
name|'parse'
op|'('
name|'cls'
op|','
name|'fileObj'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse some amp data stored in a file.\n\n        @param fileObj: a file-like object.\n\n        @return: a list of AmpBoxes encoded in the given file.\n        """'
newline|'\n'
name|'parserHelper'
op|'='
name|'cls'
op|'('
op|')'
newline|'\n'
name|'bbp'
op|'='
name|'BinaryBoxProtocol'
op|'('
name|'boxReceiver'
op|'='
name|'parserHelper'
op|')'
newline|'\n'
name|'bbp'
op|'.'
name|'makeConnection'
op|'('
name|'parserHelper'
op|')'
newline|'\n'
name|'bbp'
op|'.'
name|'dataReceived'
op|'('
name|'fileObj'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'parserHelper'
op|'.'
name|'boxes'
newline|'\n'
DECL|variable|parse
dedent|''
name|'parse'
op|'='
name|'classmethod'
op|'('
name|'parse'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|parseString
name|'def'
name|'parseString'
op|'('
name|'cls'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse some amp data stored in a string.\n\n        @param data: a str holding some amp-encoded data.\n\n        @return: a list of AmpBoxes encoded in the given string.\n        """'
newline|'\n'
name|'return'
name|'cls'
op|'.'
name|'parse'
op|'('
name|'StringIO'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
DECL|variable|parseString
dedent|''
name|'parseString'
op|'='
name|'classmethod'
op|'('
name|'parseString'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|parse
dedent|''
name|'parse'
op|'='
name|'_ParserHelper'
op|'.'
name|'parse'
newline|'\n'
DECL|variable|parseString
name|'parseString'
op|'='
name|'_ParserHelper'
op|'.'
name|'parseString'
newline|'\n'
nl|'\n'
DECL|function|_stringsToObjects
name|'def'
name|'_stringsToObjects'
op|'('
name|'strings'
op|','
name|'arglist'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert an AmpBox to a dictionary of python objects, converting through a\n    given arglist.\n\n    @param strings: an AmpBox (or dict of strings)\n\n    @param arglist: a list of 2-tuples of strings and Argument objects, as\n    described in L{Command.arguments}.\n\n    @param proto: an L{AMP} instance.\n\n    @return: the converted dictionary mapping names to argument objects.\n    """'
newline|'\n'
name|'objects'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'myStrings'
op|'='
name|'strings'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'for'
name|'argname'
op|','
name|'argparser'
name|'in'
name|'arglist'
op|':'
newline|'\n'
indent|'        '
name|'argparser'
op|'.'
name|'fromBox'
op|'('
name|'argname'
op|','
name|'myStrings'
op|','
name|'objects'
op|','
name|'proto'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'objects'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_objectsToStrings
dedent|''
name|'def'
name|'_objectsToStrings'
op|'('
name|'objects'
op|','
name|'arglist'
op|','
name|'strings'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert a dictionary of python objects to an AmpBox, converting through a\n    given arglist.\n\n    @param objects: a dict mapping names to python objects\n\n    @param arglist: a list of 2-tuples of strings and Argument objects, as\n    described in L{Command.arguments}.\n\n    @param strings: [OUT PARAMETER] An object providing the L{dict}\n    interface which will be populated with serialized data.\n\n    @param proto: an L{AMP} instance.\n\n    @return: The converted dictionary mapping names to encoded argument\n    strings (identical to C{strings}).\n    """'
newline|'\n'
name|'myObjects'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
name|'objects'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'myObjects'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'argname'
op|','
name|'argparser'
name|'in'
name|'arglist'
op|':'
newline|'\n'
indent|'        '
name|'argparser'
op|'.'
name|'toBox'
op|'('
name|'argname'
op|','
name|'strings'
op|','
name|'myObjects'
op|','
name|'proto'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'strings'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nDict client protocol implementation.\n\n@author: Pavel Pergamenshchik\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'protocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'StringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
DECL|function|parseParam
name|'def'
name|'parseParam'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Chew one dqstring or atom from beginning of line and return (param, remaningline)"""'
newline|'\n'
name|'if'
name|'line'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'None'
op|','
string|"''"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'line'
op|'['
number|'0'
op|']'
op|'!='
string|'\'"\''
op|':'
comment|'# atom'
newline|'\n'
indent|'        '
name|'mode'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
comment|'# dqstring'
newline|'\n'
indent|'        '
name|'mode'
op|'='
number|'2'
newline|'\n'
dedent|''
name|'res'
op|'='
string|'""'
newline|'\n'
name|'io'
op|'='
name|'StringIO'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'mode'
op|'=='
number|'2'
op|':'
comment|'# skip the opening quote'
newline|'\n'
indent|'        '
name|'io'
op|'.'
name|'read'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'a'
op|'='
name|'io'
op|'.'
name|'read'
op|'('
number|'1'
op|')'
newline|'\n'
name|'if'
name|'a'
op|'=='
string|'\'"\''
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'mode'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'io'
op|'.'
name|'read'
op|'('
number|'1'
op|')'
comment|'# skip the separating space'
newline|'\n'
name|'return'
op|'('
name|'res'
op|','
name|'io'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'a'
op|'=='
string|"'\\\\'"
op|':'
newline|'\n'
indent|'            '
name|'a'
op|'='
name|'io'
op|'.'
name|'read'
op|'('
number|'1'
op|')'
newline|'\n'
name|'if'
name|'a'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'('
name|'None'
op|','
name|'line'
op|')'
comment|'# unexpected end of string'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'a'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'mode'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'('
name|'res'
op|','
name|'io'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'('
name|'None'
op|','
name|'line'
op|')'
comment|'# unexpected end of string'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'a'
op|'=='
string|"' '"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'mode'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'('
name|'res'
op|','
name|'io'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'res'
op|'+='
name|'a'
newline|'\n'
nl|'\n'
DECL|function|makeAtom
dedent|''
dedent|''
name|'def'
name|'makeAtom'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Munch a string into an \'atom\'"""'
newline|'\n'
comment|'# FIXME: proper quoting'
nl|'\n'
name|'return'
name|'filter'
op|'('
name|'lambda'
name|'x'
op|':'
name|'not'
op|'('
name|'x'
name|'in'
name|'map'
op|'('
name|'chr'
op|','
name|'range'
op|'('
number|'33'
op|')'
op|'+'
op|'['
number|'34'
op|','
number|'39'
op|','
number|'92'
op|']'
op|')'
op|')'
op|','
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|function|makeWord
dedent|''
name|'def'
name|'makeWord'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'mustquote'
op|'='
name|'range'
op|'('
number|'33'
op|')'
op|'+'
op|'['
number|'34'
op|','
number|'39'
op|','
number|'92'
op|']'
newline|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'c'
name|'in'
name|'s'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'ord'
op|'('
name|'c'
op|')'
name|'in'
name|'mustquote'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'append'
op|'('
string|'"\\\\"'
op|')'
newline|'\n'
dedent|''
name|'result'
op|'.'
name|'append'
op|'('
name|'c'
op|')'
newline|'\n'
dedent|''
name|'s'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
name|'result'
op|')'
newline|'\n'
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|function|parseText
dedent|''
name|'def'
name|'parseText'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'len'
op|'('
name|'line'
op|')'
op|'=='
number|'1'
name|'and'
name|'line'
op|'=='
string|"'.'"
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'line'
op|')'
op|'>'
number|'1'
name|'and'
name|'line'
op|'['
number|'0'
op|':'
number|'2'
op|']'
op|'=='
string|"'..'"
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
name|'line'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'line'
newline|'\n'
nl|'\n'
DECL|class|Definition
dedent|''
dedent|''
name|'class'
name|'Definition'
op|':'
newline|'\n'
indent|'    '
string|'"""A word definition"""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'db'
op|','
name|'dbdesc'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'='
name|'db'
newline|'\n'
name|'self'
op|'.'
name|'dbdesc'
op|'='
name|'dbdesc'
newline|'\n'
name|'self'
op|'.'
name|'text'
op|'='
name|'text'
comment|'# list of strings not terminated by newline'
newline|'\n'
nl|'\n'
DECL|class|DictClient
dedent|''
dedent|''
name|'class'
name|'DictClient'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""dict (RFC2229) client"""'
newline|'\n'
nl|'\n'
DECL|variable|data
name|'data'
op|'='
name|'None'
comment|'# multiline data'
newline|'\n'
DECL|variable|MAX_LENGTH
name|'MAX_LENGTH'
op|'='
number|'1024'
newline|'\n'
DECL|variable|state
name|'state'
op|'='
name|'None'
newline|'\n'
DECL|variable|mode
name|'mode'
op|'='
name|'None'
newline|'\n'
DECL|variable|result
name|'result'
op|'='
name|'None'
newline|'\n'
DECL|variable|factory
name|'factory'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'state'
op|'='
string|'"conn"'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
string|'"command"'
newline|'\n'
nl|'\n'
DECL|member|sendLine
dedent|''
name|'def'
name|'sendLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Throw up if the line is longer than 1022 characters"""'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'line'
op|')'
op|'>'
name|'self'
op|'.'
name|'MAX_LENGTH'
op|'-'
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"DictClient tried to send a too long line"'
op|')'
newline|'\n'
dedent|''
name|'basic'
op|'.'
name|'LineReceiver'
op|'.'
name|'sendLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
name|'line'
op|'.'
name|'decode'
op|'('
string|'"UTF-8"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeError'
op|':'
comment|'# garbage received, skip'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'mode'
op|'=='
string|'"text"'
op|':'
comment|'# we are receiving textual data'
newline|'\n'
indent|'            '
name|'code'
op|'='
string|'"text"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'line'
op|')'
op|'<'
number|'4'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"DictClient got invalid line from server -- %s"'
op|'%'
name|'line'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocolError'
op|'('
string|'"Invalid line from server"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'LoseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'code'
op|'='
name|'int'
op|'('
name|'line'
op|'['
op|':'
number|'3'
op|']'
op|')'
newline|'\n'
name|'line'
op|'='
name|'line'
op|'['
number|'4'
op|':'
op|']'
newline|'\n'
dedent|''
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'dictCode_%s_%s'"
op|'%'
op|'('
name|'code'
op|','
name|'self'
op|'.'
name|'state'
op|')'
op|','
name|'self'
op|'.'
name|'dictCode_default'
op|')'
newline|'\n'
name|'method'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dictCode_default
dedent|''
name|'def'
name|'dictCode_default'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unkown message"""'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"DictClient got unexpected message from server -- %s"'
op|'%'
name|'line'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocolError'
op|'('
string|'"Unexpected server message"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|dictCode_221_ready
dedent|''
name|'def'
name|'dictCode_221_ready'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""We are about to get kicked off, do nothing"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|dictCode_220_conn
dedent|''
name|'def'
name|'dictCode_220_conn'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Greeting message"""'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|'"ready"'
newline|'\n'
name|'self'
op|'.'
name|'dictConnected'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|dictCode_530_conn
dedent|''
name|'def'
name|'dictCode_530_conn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'protocolError'
op|'('
string|'"Access denied"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|dictCode_420_conn
dedent|''
name|'def'
name|'dictCode_420_conn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'protocolError'
op|'('
string|'"Server temporarily unavailable"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|dictCode_421_conn
dedent|''
name|'def'
name|'dictCode_421_conn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'protocolError'
op|'('
string|'"Server shutting down at operator request"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendDefine
dedent|''
name|'def'
name|'sendDefine'
op|'('
name|'self'
op|','
name|'database'
op|','
name|'word'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a dict DEFINE command"""'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'state'
op|'=='
string|'"ready"'
op|','
string|'"DictClient.sendDefine called when not in ready state"'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'None'
comment|'# these two are just in case. In "ready" state, result and data'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
name|'None'
comment|'# should be None'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|'"define"'
newline|'\n'
name|'command'
op|'='
string|'"DEFINE %s %s"'
op|'%'
op|'('
name|'makeAtom'
op|'('
name|'database'
op|'.'
name|'encode'
op|'('
string|'"UTF-8"'
op|')'
op|')'
op|','
name|'makeWord'
op|'('
name|'word'
op|'.'
name|'encode'
op|'('
string|'"UTF-8"'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'command'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendMatch
dedent|''
name|'def'
name|'sendMatch'
op|'('
name|'self'
op|','
name|'database'
op|','
name|'strategy'
op|','
name|'word'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a dict MATCH command"""'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'state'
op|'=='
string|'"ready"'
op|','
string|'"DictClient.sendMatch called when not in ready state"'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|'"match"'
newline|'\n'
name|'command'
op|'='
string|'"MATCH %s %s %s"'
op|'%'
op|'('
name|'makeAtom'
op|'('
name|'database'
op|')'
op|','
name|'makeAtom'
op|'('
name|'strategy'
op|')'
op|','
name|'makeAtom'
op|'('
name|'word'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'command'
op|'.'
name|'encode'
op|'('
string|'"UTF-8"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dictCode_550_define
dedent|''
name|'def'
name|'dictCode_550_define'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Invalid database"""'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
string|'"ready"'
newline|'\n'
name|'self'
op|'.'
name|'defineFailed'
op|'('
string|'"Invalid database"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dictCode_550_match
dedent|''
name|'def'
name|'dictCode_550_match'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Invalid database"""'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
string|'"ready"'
newline|'\n'
name|'self'
op|'.'
name|'matchFailed'
op|'('
string|'"Invalid database"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dictCode_551_match
dedent|''
name|'def'
name|'dictCode_551_match'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Invalid strategy"""'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
string|'"ready"'
newline|'\n'
name|'self'
op|'.'
name|'matchFailed'
op|'('
string|'"Invalid strategy"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dictCode_552_define
dedent|''
name|'def'
name|'dictCode_552_define'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""No match"""'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
string|'"ready"'
newline|'\n'
name|'self'
op|'.'
name|'defineFailed'
op|'('
string|'"No match"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dictCode_552_match
dedent|''
name|'def'
name|'dictCode_552_match'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""No match"""'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
string|'"ready"'
newline|'\n'
name|'self'
op|'.'
name|'matchFailed'
op|'('
string|'"No match"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dictCode_150_define
dedent|''
name|'def'
name|'dictCode_150_define'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""n definitions retrieved"""'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|dictCode_151_define
dedent|''
name|'def'
name|'dictCode_151_define'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Definition text follows"""'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
string|'"text"'
newline|'\n'
op|'('
name|'word'
op|','
name|'line'
op|')'
op|'='
name|'parseParam'
op|'('
name|'line'
op|')'
newline|'\n'
op|'('
name|'db'
op|','
name|'line'
op|')'
op|'='
name|'parseParam'
op|'('
name|'line'
op|')'
newline|'\n'
op|'('
name|'dbdesc'
op|','
name|'line'
op|')'
op|'='
name|'parseParam'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'not'
op|'('
name|'word'
name|'and'
name|'db'
name|'and'
name|'dbdesc'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'protocolError'
op|'('
string|'"Invalid server response"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'.'
name|'append'
op|'('
name|'Definition'
op|'('
name|'word'
op|','
name|'db'
op|','
name|'dbdesc'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|dictCode_152_match
dedent|''
dedent|''
name|'def'
name|'dictCode_152_match'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""n matches found, text follows"""'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
string|'"text"'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|dictCode_text_define
dedent|''
name|'def'
name|'dictCode_text_define'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A line of definition text received"""'
newline|'\n'
name|'res'
op|'='
name|'parseText'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'res'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mode'
op|'='
string|'"command"'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'text'
op|'='
name|'self'
op|'.'
name|'data'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'data'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dictCode_text_match
dedent|''
dedent|''
name|'def'
name|'dictCode_text_match'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""One line of match text received"""'
newline|'\n'
DECL|function|l
name|'def'
name|'l'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'p1'
op|','
name|'t'
op|'='
name|'parseParam'
op|'('
name|'s'
op|')'
newline|'\n'
name|'p2'
op|','
name|'t'
op|'='
name|'parseParam'
op|'('
name|'t'
op|')'
newline|'\n'
name|'return'
op|'('
name|'p1'
op|','
name|'p2'
op|')'
newline|'\n'
dedent|''
name|'res'
op|'='
name|'parseText'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'res'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mode'
op|'='
string|'"command"'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'map'
op|'('
name|'l'
op|','
name|'self'
op|'.'
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'data'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dictCode_250_define
dedent|''
dedent|''
name|'def'
name|'dictCode_250_define'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""ok"""'
newline|'\n'
name|'t'
op|'='
name|'self'
op|'.'
name|'result'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|'"ready"'
newline|'\n'
name|'self'
op|'.'
name|'defineDone'
op|'('
name|'t'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dictCode_250_match
dedent|''
name|'def'
name|'dictCode_250_match'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""ok"""'
newline|'\n'
name|'t'
op|'='
name|'self'
op|'.'
name|'result'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|'"ready"'
newline|'\n'
name|'self'
op|'.'
name|'matchDone'
op|'('
name|'t'
op|')'
newline|'\n'
nl|'\n'
DECL|member|protocolError
dedent|''
name|'def'
name|'protocolError'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""override to catch unexpected dict protocol conditions"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|dictConnected
dedent|''
name|'def'
name|'dictConnected'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""override to be notified when the server is ready to accept commands"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|defineFailed
dedent|''
name|'def'
name|'defineFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""override to catch reasonable failure responses to DEFINE"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|defineDone
dedent|''
name|'def'
name|'defineDone'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""override to catch succesful DEFINE"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|matchFailed
dedent|''
name|'def'
name|'matchFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""override to catch resonable failure responses to MATCH"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|matchDone
dedent|''
name|'def'
name|'matchDone'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""override to catch succesful MATCH"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidResponse
dedent|''
dedent|''
name|'class'
name|'InvalidResponse'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DictLookup
dedent|''
name|'class'
name|'DictLookup'
op|'('
name|'DictClient'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Utility class for a single dict transaction. To be used with DictLookupFactory"""'
newline|'\n'
nl|'\n'
DECL|member|protocolError
name|'def'
name|'protocolError'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'done'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'errback'
op|'('
name|'InvalidResponse'
op|'('
name|'reason'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'clientDone'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|dictConnected
dedent|''
dedent|''
name|'def'
name|'dictConnected'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'queryType'
op|'=='
string|'"define"'
op|':'
newline|'\n'
indent|'            '
name|'apply'
op|'('
name|'self'
op|'.'
name|'sendDefine'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'param'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'queryType'
op|'=='
string|'"match"'
op|':'
newline|'\n'
indent|'            '
name|'apply'
op|'('
name|'self'
op|'.'
name|'sendMatch'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'param'
op|')'
newline|'\n'
nl|'\n'
DECL|member|defineFailed
dedent|''
dedent|''
name|'def'
name|'defineFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'callback'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'clientDone'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|defineDone
dedent|''
name|'def'
name|'defineDone'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'callback'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'clientDone'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|matchFailed
dedent|''
name|'def'
name|'matchFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'callback'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'clientDone'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|matchDone
dedent|''
name|'def'
name|'matchDone'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'callback'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'clientDone'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DictLookupFactory
dedent|''
dedent|''
name|'class'
name|'DictLookupFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Utility factory for a single dict transaction"""'
newline|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'DictLookup'
newline|'\n'
DECL|variable|done
name|'done'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'queryType'
op|','
name|'param'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'queryType'
op|'='
name|'queryType'
newline|'\n'
name|'self'
op|'.'
name|'param'
op|'='
name|'param'
newline|'\n'
name|'self'
op|'.'
name|'d'
op|'='
name|'d'
newline|'\n'
name|'self'
op|'.'
name|'done'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|clientDone
dedent|''
name|'def'
name|'clientDone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called by client when done."""'
newline|'\n'
name|'self'
op|'.'
name|'done'
op|'='
number|'1'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
dedent|''
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'d'
op|'.'
name|'errback'
op|'('
name|'error'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionLost
dedent|''
name|'def'
name|'clientConnectionLost'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'done'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'d'
op|'.'
name|'errback'
op|'('
name|'error'
op|')'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|define
dedent|''
dedent|''
name|'def'
name|'define'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'database'
op|','
name|'word'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Look up a word using a dict server"""'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'='
name|'DictLookupFactory'
op|'('
string|'"define"'
op|','
op|'('
name|'database'
op|','
name|'word'
op|')'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|match
dedent|''
name|'def'
name|'match'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'database'
op|','
name|'strategy'
op|','
name|'word'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Match a word using a dict server"""'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'='
name|'DictLookupFactory'
op|'('
string|'"match"'
op|','
op|'('
name|'database'
op|','
name|'strategy'
op|','
name|'word'
op|')'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
endmarker|''
end_unit

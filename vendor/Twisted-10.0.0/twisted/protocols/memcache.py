begin_unit
comment|'# -*- test-case-name: twisted.test.test_memcache -*-'
nl|'\n'
comment|'# Copyright (c) 2007-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nMemcache client protocol. Memcached is a caching server, storing data in the\nform of pairs key/value, and memcache is the protocol to talk with it.\n\nTo connect to a server, create a factory for L{MemCacheProtocol}::\n\n    from twisted.internet import reactor, protocol\n    from twisted.protocols.memcache import MemCacheProtocol, DEFAULT_PORT\n    d = protocol.ClientCreator(reactor, MemCacheProtocol\n        ).connectTCP("localhost", DEFAULT_PORT)\n    def doSomething(proto):\n        # Here you call the memcache operations\n        return proto.set("mykey", "a lot of data")\n    d.addCallback(doSomething)\n    reactor.run()\n\nAll the operations of the memcache protocol are present, but\nL{MemCacheProtocol.set} and L{MemCacheProtocol.get} are the more important.\n\nSee U{http://code.sixapart.com/svn/memcached/trunk/server/doc/protocol.txt} for\nmore information about the protocol.\n"""'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'collections'
name|'import'
name|'deque'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|class|deque
indent|'    '
name|'class'
name|'deque'
op|'('
name|'list'
op|')'
op|':'
newline|'\n'
DECL|member|popleft
indent|'        '
name|'def'
name|'popleft'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'protocols'
op|'.'
name|'basic'
name|'import'
name|'LineReceiver'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
op|'.'
name|'policies'
name|'import'
name|'TimeoutMixin'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
op|','
name|'fail'
op|','
name|'TimeoutError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|DEFAULT_PORT
name|'DEFAULT_PORT'
op|'='
number|'11211'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoSuchCommand
name|'class'
name|'NoSuchCommand'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Exception raised when a non existent command is called.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ClientError
dedent|''
name|'class'
name|'ClientError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Error caused by an invalid client call.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServerError
dedent|''
name|'class'
name|'ServerError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Problem happening on the server.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Command
dedent|''
name|'class'
name|'Command'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wrap a client action into an object, that holds the values used in the\n    protocol.\n\n    @ivar _deferred: the L{Deferred} object that will be fired when the result\n        arrives.\n    @type _deferred: L{Deferred}\n\n    @ivar command: name of the command sent to the server.\n    @type command: C{str}\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'command'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a command.\n\n        @param command: the name of the command.\n        @type command: C{str}\n\n        @param kwargs: this values will be stored as attributes of the object\n            for future use\n        """'
newline|'\n'
name|'self'
op|'.'
name|'command'
op|'='
name|'command'
newline|'\n'
name|'self'
op|'.'
name|'_deferred'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'kwargs'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'self'
op|','
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|success
dedent|''
dedent|''
name|'def'
name|'success'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Shortcut method to fire the underlying deferred.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_deferred'
op|'.'
name|'callback'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fail
dedent|''
name|'def'
name|'fail'
op|'('
name|'self'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make the underlying deferred fails.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_deferred'
op|'.'
name|'errback'
op|'('
name|'error'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MemCacheProtocol
dedent|''
dedent|''
name|'class'
name|'MemCacheProtocol'
op|'('
name|'LineReceiver'
op|','
name|'TimeoutMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    MemCache protocol: connect to a memcached server to store/retrieve values.\n\n    @ivar persistentTimeOut: the timeout period used to wait for a response.\n    @type persistentTimeOut: C{int}\n\n    @ivar _current: current list of requests waiting for an answer from the\n        server.\n    @type _current: C{deque} of L{Command}\n\n    @ivar _lenExpected: amount of data expected in raw mode, when reading for\n        a value.\n    @type _lenExpected: C{int}\n\n    @ivar _getBuffer: current buffer of data, used to store temporary data\n        when reading in raw mode.\n    @type _getBuffer: C{list}\n\n    @ivar _bufferLength: the total amount of bytes in C{_getBuffer}.\n    @type _bufferLength: C{int}\n\n    @ivar _disconnected: indicate if the connectionLost has been called or not.\n    @type _disconnected: C{bool}\n    """'
newline|'\n'
DECL|variable|MAX_KEY_LENGTH
name|'MAX_KEY_LENGTH'
op|'='
number|'250'
newline|'\n'
DECL|variable|_disconnected
name|'_disconnected'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'timeOut'
op|'='
number|'60'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create the protocol.\n\n        @param timeOut: the timeout to wait before detecting that the\n            connection is dead and close it. It\'s expressed in seconds.\n        @type timeOut: C{int}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_current'
op|'='
name|'deque'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_lenExpected'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_getBuffer'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_bufferLength'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'persistentTimeOut'
op|'='
name|'self'
op|'.'
name|'timeOut'
op|'='
name|'timeOut'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cancelCommands
dedent|''
name|'def'
name|'_cancelCommands'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Cancel all the outstanding commands, making them fail with C{reason}.\n        """'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'_current'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
name|'self'
op|'.'
name|'_current'
op|'.'
name|'popleft'
op|'('
op|')'
newline|'\n'
name|'cmd'
op|'.'
name|'fail'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|timeoutConnection
dedent|''
dedent|''
name|'def'
name|'timeoutConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close the connection in case of timeout.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_cancelCommands'
op|'('
name|'TimeoutError'
op|'('
string|'"Connection timeout"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Cause any outstanding commands to fail.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_disconnected'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'_cancelCommands'
op|'('
name|'reason'
op|')'
newline|'\n'
name|'LineReceiver'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|sendLine
dedent|''
name|'def'
name|'sendLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override sendLine to add a timeout to response.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_current'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'persistentTimeOut'
op|')'
newline|'\n'
dedent|''
name|'LineReceiver'
op|'.'
name|'sendLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|rawDataReceived
dedent|''
name|'def'
name|'rawDataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Collect data for a get.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_getBuffer'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_bufferLength'
op|'+='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_bufferLength'
op|'>='
name|'self'
op|'.'
name|'_lenExpected'
op|'+'
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'_getBuffer'
op|')'
newline|'\n'
name|'buf'
op|'='
name|'data'
op|'['
op|':'
name|'self'
op|'.'
name|'_lenExpected'
op|']'
newline|'\n'
name|'rem'
op|'='
name|'data'
op|'['
name|'self'
op|'.'
name|'_lenExpected'
op|'+'
number|'2'
op|':'
op|']'
newline|'\n'
name|'val'
op|'='
name|'buf'
newline|'\n'
name|'self'
op|'.'
name|'_lenExpected'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_getBuffer'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_bufferLength'
op|'='
name|'None'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'_current'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'cmd'
op|'.'
name|'multiple'
op|':'
newline|'\n'
indent|'                '
name|'flags'
op|','
name|'cas'
op|'='
name|'cmd'
op|'.'
name|'values'
op|'['
name|'cmd'
op|'.'
name|'currentKey'
op|']'
newline|'\n'
name|'cmd'
op|'.'
name|'values'
op|'['
name|'cmd'
op|'.'
name|'currentKey'
op|']'
op|'='
op|'('
name|'flags'
op|','
name|'cas'
op|','
name|'val'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'cmd'
op|'.'
name|'value'
op|'='
name|'val'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'setLineMode'
op|'('
name|'rem'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cmd_STORED
dedent|''
dedent|''
name|'def'
name|'cmd_STORED'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Manage a success response to a set operation.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_current'
op|'.'
name|'popleft'
op|'('
op|')'
op|'.'
name|'success'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cmd_NOT_STORED
dedent|''
name|'def'
name|'cmd_NOT_STORED'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Manage a specific \'not stored\' response to a set operation: this is not\n        an error, but some condition wasn\'t met.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_current'
op|'.'
name|'popleft'
op|'('
op|')'
op|'.'
name|'success'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cmd_END
dedent|''
name|'def'
name|'cmd_END'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This the end token to a get or a stat operation.\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'_current'
op|'.'
name|'popleft'
op|'('
op|')'
newline|'\n'
name|'if'
name|'cmd'
op|'.'
name|'command'
op|'=='
string|'"get"'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'cmd'
op|'.'
name|'multiple'
op|':'
newline|'\n'
indent|'                '
name|'values'
op|'='
name|'dict'
op|'('
op|'['
op|'('
name|'key'
op|','
name|'val'
op|'['
op|':'
op|':'
number|'2'
op|']'
op|')'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
nl|'\n'
name|'cmd'
op|'.'
name|'values'
op|'.'
name|'iteritems'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'cmd'
op|'.'
name|'success'
op|'('
name|'values'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'cmd'
op|'.'
name|'success'
op|'('
op|'('
name|'cmd'
op|'.'
name|'flags'
op|','
name|'cmd'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'cmd'
op|'.'
name|'command'
op|'=='
string|'"gets"'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'cmd'
op|'.'
name|'multiple'
op|':'
newline|'\n'
indent|'                '
name|'cmd'
op|'.'
name|'success'
op|'('
name|'cmd'
op|'.'
name|'values'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'cmd'
op|'.'
name|'success'
op|'('
op|'('
name|'cmd'
op|'.'
name|'flags'
op|','
name|'cmd'
op|'.'
name|'cas'
op|','
name|'cmd'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'cmd'
op|'.'
name|'command'
op|'=='
string|'"stats"'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'.'
name|'success'
op|'('
name|'cmd'
op|'.'
name|'values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cmd_NOT_FOUND
dedent|''
dedent|''
name|'def'
name|'cmd_NOT_FOUND'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Manage error response for incr/decr/delete.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_current'
op|'.'
name|'popleft'
op|'('
op|')'
op|'.'
name|'success'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cmd_VALUE
dedent|''
name|'def'
name|'cmd_VALUE'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Prepare the reading a value after a get.\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'_current'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'cmd'
op|'.'
name|'command'
op|'=='
string|'"get"'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|','
name|'flags'
op|','
name|'length'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'cas'
op|'='
string|'""'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|','
name|'flags'
op|','
name|'length'
op|','
name|'cas'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_lenExpected'
op|'='
name|'int'
op|'('
name|'length'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_getBuffer'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_bufferLength'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'cmd'
op|'.'
name|'multiple'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'key'
name|'not'
name|'in'
name|'cmd'
op|'.'
name|'keys'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Unexpected commands answer."'
op|')'
newline|'\n'
dedent|''
name|'cmd'
op|'.'
name|'currentKey'
op|'='
name|'key'
newline|'\n'
name|'cmd'
op|'.'
name|'values'
op|'['
name|'key'
op|']'
op|'='
op|'['
name|'int'
op|'('
name|'flags'
op|')'
op|','
name|'cas'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'cmd'
op|'.'
name|'key'
op|'!='
name|'key'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Unexpected commands answer."'
op|')'
newline|'\n'
dedent|''
name|'cmd'
op|'.'
name|'flags'
op|'='
name|'int'
op|'('
name|'flags'
op|')'
newline|'\n'
name|'cmd'
op|'.'
name|'cas'
op|'='
name|'cas'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'setRawMode'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cmd_STAT
dedent|''
name|'def'
name|'cmd_STAT'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reception of one stat line.\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'_current'
op|'['
number|'0'
op|']'
newline|'\n'
name|'key'
op|','
name|'val'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|'" "'
op|','
number|'1'
op|')'
newline|'\n'
name|'cmd'
op|'.'
name|'values'
op|'['
name|'key'
op|']'
op|'='
name|'val'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cmd_VERSION
dedent|''
name|'def'
name|'cmd_VERSION'
op|'('
name|'self'
op|','
name|'versionData'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Read version token.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_current'
op|'.'
name|'popleft'
op|'('
op|')'
op|'.'
name|'success'
op|'('
name|'versionData'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cmd_ERROR
dedent|''
name|'def'
name|'cmd_ERROR'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An non-existent command has been sent.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
string|'"Non-existent command sent."'
op|')'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'_current'
op|'.'
name|'popleft'
op|'('
op|')'
newline|'\n'
name|'cmd'
op|'.'
name|'fail'
op|'('
name|'NoSuchCommand'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cmd_CLIENT_ERROR
dedent|''
name|'def'
name|'cmd_CLIENT_ERROR'
op|'('
name|'self'
op|','
name|'errText'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An invalid input as been sent.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
string|'"Invalid input: %s"'
op|'%'
op|'('
name|'errText'
op|','
op|')'
op|')'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'_current'
op|'.'
name|'popleft'
op|'('
op|')'
newline|'\n'
name|'cmd'
op|'.'
name|'fail'
op|'('
name|'ClientError'
op|'('
name|'errText'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cmd_SERVER_ERROR
dedent|''
name|'def'
name|'cmd_SERVER_ERROR'
op|'('
name|'self'
op|','
name|'errText'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An error has happened server-side.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
string|'"Server error: %s"'
op|'%'
op|'('
name|'errText'
op|','
op|')'
op|')'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'_current'
op|'.'
name|'popleft'
op|'('
op|')'
newline|'\n'
name|'cmd'
op|'.'
name|'fail'
op|'('
name|'ServerError'
op|'('
name|'errText'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cmd_DELETED
dedent|''
name|'def'
name|'cmd_DELETED'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A delete command has completed successfully.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_current'
op|'.'
name|'popleft'
op|'('
op|')'
op|'.'
name|'success'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cmd_OK
dedent|''
name|'def'
name|'cmd_OK'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The last command has been completed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_current'
op|'.'
name|'popleft'
op|'('
op|')'
op|'.'
name|'success'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cmd_EXISTS
dedent|''
name|'def'
name|'cmd_EXISTS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A C{checkAndSet} update has failed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_current'
op|'.'
name|'popleft'
op|'('
op|')'
op|'.'
name|'success'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Receive line commands from the server.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
name|'token'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|'" "'
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
comment|'# First manage standard commands without space'
nl|'\n'
name|'cmd'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"cmd_%s"'
op|'%'
op|'('
name|'token'
op|','
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'cmd'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|'" "'
op|','
number|'1'
op|')'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'if'
name|'args'
op|':'
newline|'\n'
indent|'                '
name|'cmd'
op|'('
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'cmd'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Then manage commands with space in it'
nl|'\n'
indent|'            '
name|'line'
op|'='
name|'line'
op|'.'
name|'replace'
op|'('
string|'" "'
op|','
string|'"_"'
op|')'
newline|'\n'
name|'cmd'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"cmd_%s"'
op|'%'
op|'('
name|'line'
op|','
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'cmd'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'cmd'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Increment/Decrement response'
nl|'\n'
indent|'                '
name|'cmd'
op|'='
name|'self'
op|'.'
name|'_current'
op|'.'
name|'popleft'
op|'('
op|')'
newline|'\n'
name|'val'
op|'='
name|'int'
op|'('
name|'line'
op|')'
newline|'\n'
name|'cmd'
op|'.'
name|'success'
op|'('
name|'val'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'_current'
op|':'
newline|'\n'
comment|'# No pending request, remove timeout'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|increment
dedent|''
dedent|''
name|'def'
name|'increment'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'val'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Increment the value of C{key} by given value (default to 1).\n        C{key} must be consistent with an int. Return the new value.\n\n        @param key: the key to modify.\n        @type key: C{str}\n\n        @param val: the value to increment.\n        @type val: C{int}\n\n        @return: a deferred with will be called back with the new value\n            associated with the key (after the increment).\n        @rtype: L{Deferred}\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_incrdecr'
op|'('
string|'"incr"'
op|','
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decrement
dedent|''
name|'def'
name|'decrement'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'val'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Decrement the value of C{key} by given value (default to 1).\n        C{key} must be consistent with an int. Return the new value, coerced to\n        0 if negative.\n\n        @param key: the key to modify.\n        @type key: C{str}\n\n        @param val: the value to decrement.\n        @type val: C{int}\n\n        @return: a deferred with will be called back with the new value\n            associated with the key (after the decrement).\n        @rtype: L{Deferred}\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_incrdecr'
op|'('
string|'"decr"'
op|','
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_incrdecr
dedent|''
name|'def'
name|'_incrdecr'
op|'('
name|'self'
op|','
name|'cmd'
op|','
name|'key'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Internal wrapper for incr/decr.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_disconnected'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
name|'RuntimeError'
op|'('
string|'"not connected"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'key'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
name|'ClientError'
op|'('
nl|'\n'
string|'"Invalid type for key: %s, expecting a string"'
op|'%'
op|'('
name|'type'
op|'('
name|'key'
op|')'
op|','
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'key'
op|')'
op|'>'
name|'self'
op|'.'
name|'MAX_KEY_LENGTH'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
name|'ClientError'
op|'('
string|'"Key too long"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'fullcmd'
op|'='
string|'"%s %s %d"'
op|'%'
op|'('
name|'cmd'
op|','
name|'key'
op|','
name|'int'
op|'('
name|'val'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'fullcmd'
op|')'
newline|'\n'
name|'cmdObj'
op|'='
name|'Command'
op|'('
name|'cmd'
op|','
name|'key'
op|'='
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_current'
op|'.'
name|'append'
op|'('
name|'cmdObj'
op|')'
newline|'\n'
name|'return'
name|'cmdObj'
op|'.'
name|'_deferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|replace
dedent|''
name|'def'
name|'replace'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'val'
op|','
name|'flags'
op|'='
number|'0'
op|','
name|'expireTime'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Replace the given C{key}. It must already exist in the server.\n\n        @param key: the key to replace.\n        @type key: C{str}\n\n        @param val: the new value associated with the key.\n        @type val: C{str}\n\n        @param flags: the flags to store with the key.\n        @type flags: C{int}\n\n        @param expireTime: if different from 0, the relative time in seconds\n            when the key will be deleted from the store.\n        @type expireTime: C{int}\n\n        @return: a deferred that will fire with C{True} if the operation has\n            succeeded, and C{False} with the key didn\'t previously exist.\n        @rtype: L{Deferred}\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_set'
op|'('
string|'"replace"'
op|','
name|'key'
op|','
name|'val'
op|','
name|'flags'
op|','
name|'expireTime'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|add
dedent|''
name|'def'
name|'add'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'val'
op|','
name|'flags'
op|'='
number|'0'
op|','
name|'expireTime'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add the given C{key}. It must not exist in the server.\n\n        @param key: the key to add.\n        @type key: C{str}\n\n        @param val: the value associated with the key.\n        @type val: C{str}\n\n        @param flags: the flags to store with the key.\n        @type flags: C{int}\n\n        @param expireTime: if different from 0, the relative time in seconds\n            when the key will be deleted from the store.\n        @type expireTime: C{int}\n\n        @return: a deferred that will fire with C{True} if the operation has\n            succeeded, and C{False} with the key already exists.\n        @rtype: L{Deferred}\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_set'
op|'('
string|'"add"'
op|','
name|'key'
op|','
name|'val'
op|','
name|'flags'
op|','
name|'expireTime'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|set
dedent|''
name|'def'
name|'set'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'val'
op|','
name|'flags'
op|'='
number|'0'
op|','
name|'expireTime'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the given C{key}.\n\n        @param key: the key to set.\n        @type key: C{str}\n\n        @param val: the value associated with the key.\n        @type val: C{str}\n\n        @param flags: the flags to store with the key.\n        @type flags: C{int}\n\n        @param expireTime: if different from 0, the relative time in seconds\n            when the key will be deleted from the store.\n        @type expireTime: C{int}\n\n        @return: a deferred that will fire with C{True} if the operation has\n            succeeded.\n        @rtype: L{Deferred}\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_set'
op|'('
string|'"set"'
op|','
name|'key'
op|','
name|'val'
op|','
name|'flags'
op|','
name|'expireTime'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|checkAndSet
dedent|''
name|'def'
name|'checkAndSet'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'val'
op|','
name|'cas'
op|','
name|'flags'
op|'='
number|'0'
op|','
name|'expireTime'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Change the content of C{key} only if the C{cas} value matches the\n        current one associated with the key. Use this to store a value which\n        hasn\'t been modified since last time you fetched it.\n\n        @param key: The key to set.\n        @type key: C{str}\n\n        @param val: The value associated with the key.\n        @type val: C{str}\n\n        @param cas: Unique 64-bit value returned by previous call of C{get}.\n        @type cas: C{str}\n\n        @param flags: The flags to store with the key.\n        @type flags: C{int}\n\n        @param expireTime: If different from 0, the relative time in seconds\n            when the key will be deleted from the store.\n        @type expireTime: C{int}\n\n        @return: A deferred that will fire with C{True} if the operation has\n            succeeded, C{False} otherwise.\n        @rtype: L{Deferred}\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_set'
op|'('
string|'"cas"'
op|','
name|'key'
op|','
name|'val'
op|','
name|'flags'
op|','
name|'expireTime'
op|','
name|'cas'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_set
dedent|''
name|'def'
name|'_set'
op|'('
name|'self'
op|','
name|'cmd'
op|','
name|'key'
op|','
name|'val'
op|','
name|'flags'
op|','
name|'expireTime'
op|','
name|'cas'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Internal wrapper for setting values.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_disconnected'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
name|'RuntimeError'
op|'('
string|'"not connected"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'key'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
name|'ClientError'
op|'('
nl|'\n'
string|'"Invalid type for key: %s, expecting a string"'
op|'%'
op|'('
name|'type'
op|'('
name|'key'
op|')'
op|','
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'key'
op|')'
op|'>'
name|'self'
op|'.'
name|'MAX_KEY_LENGTH'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
name|'ClientError'
op|'('
string|'"Key too long"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'val'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
name|'ClientError'
op|'('
nl|'\n'
string|'"Invalid type for value: %s, expecting a string"'
op|'%'
nl|'\n'
op|'('
name|'type'
op|'('
name|'val'
op|')'
op|','
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'cas'
op|':'
newline|'\n'
indent|'            '
name|'cas'
op|'='
string|'" "'
op|'+'
name|'cas'
newline|'\n'
dedent|''
name|'length'
op|'='
name|'len'
op|'('
name|'val'
op|')'
newline|'\n'
name|'fullcmd'
op|'='
string|'"%s %s %d %d %d%s"'
op|'%'
op|'('
nl|'\n'
name|'cmd'
op|','
name|'key'
op|','
name|'flags'
op|','
name|'expireTime'
op|','
name|'length'
op|','
name|'cas'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'fullcmd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'val'
op|')'
newline|'\n'
name|'cmdObj'
op|'='
name|'Command'
op|'('
name|'cmd'
op|','
name|'key'
op|'='
name|'key'
op|','
name|'flags'
op|'='
name|'flags'
op|','
name|'length'
op|'='
name|'length'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_current'
op|'.'
name|'append'
op|'('
name|'cmdObj'
op|')'
newline|'\n'
name|'return'
name|'cmdObj'
op|'.'
name|'_deferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|append
dedent|''
name|'def'
name|'append'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Append given data to the value of an existing key.\n\n        @param key: The key to modify.\n        @type key: C{str}\n\n        @param val: The value to append to the current value associated with\n            the key.\n        @type val: C{str}\n\n        @return: A deferred that will fire with C{True} if the operation has\n            succeeded, C{False} otherwise.\n        @rtype: L{Deferred}\n        """'
newline|'\n'
comment|'# Even if flags and expTime values are ignored, we have to pass them'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_set'
op|'('
string|'"append"'
op|','
name|'key'
op|','
name|'val'
op|','
number|'0'
op|','
number|'0'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|prepend
dedent|''
name|'def'
name|'prepend'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Prepend given data to the value of an existing key.\n\n        @param key: The key to modify.\n        @type key: C{str}\n\n        @param val: The value to prepend to the current value associated with\n            the key.\n        @type val: C{str}\n\n        @return: A deferred that will fire with C{True} if the operation has\n            succeeded, C{False} otherwise.\n        @rtype: L{Deferred}\n        """'
newline|'\n'
comment|'# Even if flags and expTime values are ignored, we have to pass them'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_set'
op|'('
string|'"prepend"'
op|','
name|'key'
op|','
name|'val'
op|','
number|'0'
op|','
number|'0'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'withIdentifier'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the given C{key}. It doesn\'t support multiple keys. If\n        C{withIdentifier} is set to C{True}, the command issued is a C{gets},\n        that will return the current identifier associated with the value. This\n        identifier has to be used when issuing C{checkAndSet} update later,\n        using the corresponding method.\n\n        @param key: The key to retrieve.\n        @type key: C{str}\n\n        @param withIdentifier: If set to C{True}, retrieve the current\n            identifier along with the value and the flags.\n        @type withIdentifier: C{bool}\n\n        @return: A deferred that will fire with the tuple (flags, value) if\n            C{withIdentifier} is C{False}, or (flags, cas identifier, value)\n            if C{True}.  If the server indicates there is no value\n            associated with C{key}, the returned value will be C{None} and\n            the returned flags will be C{0}.\n        @rtype: L{Deferred}\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_get'
op|'('
op|'['
name|'key'
op|']'
op|','
name|'withIdentifier'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getMultiple
dedent|''
name|'def'
name|'getMultiple'
op|'('
name|'self'
op|','
name|'keys'
op|','
name|'withIdentifier'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the given list of C{keys}.  If C{withIdentifier} is set to C{True},\n        the command issued is a C{gets}, that will return the identifiers\n        associated with each values. This identifier has to be used when\n        issuing C{checkAndSet} update later, using the corresponding method.\n\n        @param keys: The keys to retrieve.\n        @type keys: C{list} of C{str}\n\n        @param withIdentifier: If set to C{True}, retrieve the identifiers\n            along with the values and the flags.\n        @type withIdentifier: C{bool}\n\n        @return: A deferred that will fire with a dictionary with the elements\n            of C{keys} as keys and the tuples (flags, value) as values if\n            C{withIdentifier} is C{False}, or (flags, cas identifier, value) if\n            C{True}.  If the server indicates there is no value associated with\n            C{key}, the returned values will be C{None} and the returned flags\n            will be C{0}.\n        @rtype: L{Deferred}\n\n        @since: 9.0\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_get'
op|'('
name|'keys'
op|','
name|'withIdentifier'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get
dedent|''
name|'def'
name|'_get'
op|'('
name|'self'
op|','
name|'keys'
op|','
name|'withIdentifier'
op|','
name|'multiple'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Helper method for C{get} and C{getMultiple}.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_disconnected'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
name|'RuntimeError'
op|'('
string|'"not connected"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'key'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'key'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'fail'
op|'('
name|'ClientError'
op|'('
nl|'\n'
string|'"Invalid type for key: %s, expecting a string"'
op|'%'
op|'('
name|'type'
op|'('
name|'key'
op|')'
op|','
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'key'
op|')'
op|'>'
name|'self'
op|'.'
name|'MAX_KEY_LENGTH'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'fail'
op|'('
name|'ClientError'
op|'('
string|'"Key too long"'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'withIdentifier'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
string|'"gets"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
string|'"get"'
newline|'\n'
dedent|''
name|'fullcmd'
op|'='
string|'"%s %s"'
op|'%'
op|'('
name|'cmd'
op|','
string|'" "'
op|'.'
name|'join'
op|'('
name|'keys'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'fullcmd'
op|')'
newline|'\n'
name|'if'
name|'multiple'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'='
name|'dict'
op|'('
op|'['
op|'('
name|'key'
op|','
op|'('
number|'0'
op|','
string|'""'
op|','
name|'None'
op|')'
op|')'
name|'for'
name|'key'
name|'in'
name|'keys'
op|']'
op|')'
newline|'\n'
name|'cmdObj'
op|'='
name|'Command'
op|'('
name|'cmd'
op|','
name|'keys'
op|'='
name|'keys'
op|','
name|'values'
op|'='
name|'values'
op|','
name|'multiple'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'cmdObj'
op|'='
name|'Command'
op|'('
name|'cmd'
op|','
name|'key'
op|'='
name|'keys'
op|'['
number|'0'
op|']'
op|','
name|'value'
op|'='
name|'None'
op|','
name|'flags'
op|'='
number|'0'
op|','
name|'cas'
op|'='
string|'""'
op|','
nl|'\n'
name|'multiple'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_current'
op|'.'
name|'append'
op|'('
name|'cmdObj'
op|')'
newline|'\n'
name|'return'
name|'cmdObj'
op|'.'
name|'_deferred'
newline|'\n'
nl|'\n'
DECL|member|stats
dedent|''
name|'def'
name|'stats'
op|'('
name|'self'
op|','
name|'arg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get some stats from the server. It will be available as a dict.\n\n        @param arg: An optional additional string which will be sent along\n            with the I{stats} command.  The interpretation of this value by\n            the server is left undefined by the memcache protocol\n            specification.\n        @type arg: L{NoneType} or L{str}\n\n        @return: a deferred that will fire with a C{dict} of the available\n            statistics.\n        @rtype: L{Deferred}\n        """'
newline|'\n'
name|'if'
name|'arg'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
string|'"stats "'
op|'+'
name|'arg'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
string|'"stats"'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_disconnected'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
name|'RuntimeError'
op|'('
string|'"not connected"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'cmdObj'
op|'='
name|'Command'
op|'('
string|'"stats"'
op|','
name|'values'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_current'
op|'.'
name|'append'
op|'('
name|'cmdObj'
op|')'
newline|'\n'
name|'return'
name|'cmdObj'
op|'.'
name|'_deferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|version
dedent|''
name|'def'
name|'version'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the version of the server.\n\n        @return: a deferred that will fire with the string value of the\n            version.\n        @rtype: L{Deferred}\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_disconnected'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
name|'RuntimeError'
op|'('
string|'"not connected"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"version"'
op|')'
newline|'\n'
name|'cmdObj'
op|'='
name|'Command'
op|'('
string|'"version"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_current'
op|'.'
name|'append'
op|'('
name|'cmdObj'
op|')'
newline|'\n'
name|'return'
name|'cmdObj'
op|'.'
name|'_deferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete an existing C{key}.\n\n        @param key: the key to delete.\n        @type key: C{str}\n\n        @return: a deferred that will be called back with C{True} if the key\n            was successfully deleted, or C{False} if not.\n        @rtype: L{Deferred}\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_disconnected'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
name|'RuntimeError'
op|'('
string|'"not connected"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'key'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
name|'ClientError'
op|'('
nl|'\n'
string|'"Invalid type for key: %s, expecting a string"'
op|'%'
op|'('
name|'type'
op|'('
name|'key'
op|')'
op|','
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"delete %s"'
op|'%'
name|'key'
op|')'
newline|'\n'
name|'cmdObj'
op|'='
name|'Command'
op|'('
string|'"delete"'
op|','
name|'key'
op|'='
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_current'
op|'.'
name|'append'
op|'('
name|'cmdObj'
op|')'
newline|'\n'
name|'return'
name|'cmdObj'
op|'.'
name|'_deferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|flushAll
dedent|''
name|'def'
name|'flushAll'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Flush all cached values.\n\n        @return: a deferred that will be called back with C{True} when the\n            operation has succeeded.\n        @rtype: L{Deferred}\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_disconnected'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
name|'RuntimeError'
op|'('
string|'"not connected"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"flush_all"'
op|')'
newline|'\n'
name|'cmdObj'
op|'='
name|'Command'
op|'('
string|'"flush_all"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_current'
op|'.'
name|'append'
op|'('
name|'cmdObj'
op|')'
newline|'\n'
name|'return'
name|'cmdObj'
op|'.'
name|'_deferred'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
string|'"MemCacheProtocol"'
op|','
string|'"DEFAULT_PORT"'
op|','
string|'"NoSuchCommand"'
op|','
string|'"ClientError"'
op|','
nl|'\n'
string|'"ServerError"'
op|']'
newline|'\n'
endmarker|''
end_unit

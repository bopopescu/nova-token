begin_unit
comment|'# -*- test-case-name: twisted.test.test_sip -*-'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""Session Initialization Protocol.\n\nDocumented in RFC 2543.\n[Superceded by 3261]\n\n\nThis module contains a deprecated implementation of HTTP Digest authentication.\nSee L{twisted.cred.credentials} and L{twisted.cred._digest} for its new home.\n"""'
newline|'\n'
nl|'\n'
comment|'# system imports'
nl|'\n'
name|'import'
name|'socket'
op|','
name|'time'
op|','
name|'sys'
op|','
name|'random'
op|','
name|'warnings'
newline|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'Interface'
newline|'\n'
nl|'\n'
comment|'# twisted imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'deprecate'
name|'import'
name|'deprecated'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'versions'
name|'import'
name|'Version'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
op|','
name|'defer'
op|','
name|'reactor'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
name|'import'
name|'cred'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'UsernameHashedPassword'
op|','
name|'UsernamePassword'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# sibling imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
newline|'\n'
nl|'\n'
DECL|variable|PORT
name|'PORT'
op|'='
number|'5060'
newline|'\n'
nl|'\n'
comment|'# SIP headers have short forms'
nl|'\n'
DECL|variable|shortHeaders
name|'shortHeaders'
op|'='
op|'{'
string|'"call-id"'
op|':'
string|'"i"'
op|','
nl|'\n'
string|'"contact"'
op|':'
string|'"m"'
op|','
nl|'\n'
string|'"content-encoding"'
op|':'
string|'"e"'
op|','
nl|'\n'
string|'"content-length"'
op|':'
string|'"l"'
op|','
nl|'\n'
string|'"content-type"'
op|':'
string|'"c"'
op|','
nl|'\n'
string|'"from"'
op|':'
string|'"f"'
op|','
nl|'\n'
string|'"subject"'
op|':'
string|'"s"'
op|','
nl|'\n'
string|'"to"'
op|':'
string|'"t"'
op|','
nl|'\n'
string|'"via"'
op|':'
string|'"v"'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|longHeaders
name|'longHeaders'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'shortHeaders'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'longHeaders'
op|'['
name|'v'
op|']'
op|'='
name|'k'
newline|'\n'
dedent|''
name|'del'
name|'k'
op|','
name|'v'
newline|'\n'
nl|'\n'
DECL|variable|statusCodes
name|'statusCodes'
op|'='
op|'{'
nl|'\n'
number|'100'
op|':'
string|'"Trying"'
op|','
nl|'\n'
number|'180'
op|':'
string|'"Ringing"'
op|','
nl|'\n'
number|'181'
op|':'
string|'"Call Is Being Forwarded"'
op|','
nl|'\n'
number|'182'
op|':'
string|'"Queued"'
op|','
nl|'\n'
number|'183'
op|':'
string|'"Session Progress"'
op|','
nl|'\n'
nl|'\n'
number|'200'
op|':'
string|'"OK"'
op|','
nl|'\n'
nl|'\n'
number|'300'
op|':'
string|'"Multiple Choices"'
op|','
nl|'\n'
number|'301'
op|':'
string|'"Moved Permanently"'
op|','
nl|'\n'
number|'302'
op|':'
string|'"Moved Temporarily"'
op|','
nl|'\n'
number|'303'
op|':'
string|'"See Other"'
op|','
nl|'\n'
number|'305'
op|':'
string|'"Use Proxy"'
op|','
nl|'\n'
number|'380'
op|':'
string|'"Alternative Service"'
op|','
nl|'\n'
nl|'\n'
number|'400'
op|':'
string|'"Bad Request"'
op|','
nl|'\n'
number|'401'
op|':'
string|'"Unauthorized"'
op|','
nl|'\n'
number|'402'
op|':'
string|'"Payment Required"'
op|','
nl|'\n'
number|'403'
op|':'
string|'"Forbidden"'
op|','
nl|'\n'
number|'404'
op|':'
string|'"Not Found"'
op|','
nl|'\n'
number|'405'
op|':'
string|'"Method Not Allowed"'
op|','
nl|'\n'
number|'406'
op|':'
string|'"Not Acceptable"'
op|','
nl|'\n'
number|'407'
op|':'
string|'"Proxy Authentication Required"'
op|','
nl|'\n'
number|'408'
op|':'
string|'"Request Timeout"'
op|','
nl|'\n'
number|'409'
op|':'
string|'"Conflict"'
op|','
comment|'# Not in RFC3261'
nl|'\n'
number|'410'
op|':'
string|'"Gone"'
op|','
nl|'\n'
number|'411'
op|':'
string|'"Length Required"'
op|','
comment|'# Not in RFC3261'
nl|'\n'
number|'413'
op|':'
string|'"Request Entity Too Large"'
op|','
nl|'\n'
number|'414'
op|':'
string|'"Request-URI Too Large"'
op|','
nl|'\n'
number|'415'
op|':'
string|'"Unsupported Media Type"'
op|','
nl|'\n'
number|'416'
op|':'
string|'"Unsupported URI Scheme"'
op|','
nl|'\n'
number|'420'
op|':'
string|'"Bad Extension"'
op|','
nl|'\n'
number|'421'
op|':'
string|'"Extension Required"'
op|','
nl|'\n'
number|'423'
op|':'
string|'"Interval Too Brief"'
op|','
nl|'\n'
number|'480'
op|':'
string|'"Temporarily Unavailable"'
op|','
nl|'\n'
number|'481'
op|':'
string|'"Call/Transaction Does Not Exist"'
op|','
nl|'\n'
number|'482'
op|':'
string|'"Loop Detected"'
op|','
nl|'\n'
number|'483'
op|':'
string|'"Too Many Hops"'
op|','
nl|'\n'
number|'484'
op|':'
string|'"Address Incomplete"'
op|','
nl|'\n'
number|'485'
op|':'
string|'"Ambiguous"'
op|','
nl|'\n'
number|'486'
op|':'
string|'"Busy Here"'
op|','
nl|'\n'
number|'487'
op|':'
string|'"Request Terminated"'
op|','
nl|'\n'
number|'488'
op|':'
string|'"Not Acceptable Here"'
op|','
nl|'\n'
number|'491'
op|':'
string|'"Request Pending"'
op|','
nl|'\n'
number|'493'
op|':'
string|'"Undecipherable"'
op|','
nl|'\n'
nl|'\n'
number|'500'
op|':'
string|'"Internal Server Error"'
op|','
nl|'\n'
number|'501'
op|':'
string|'"Not Implemented"'
op|','
nl|'\n'
number|'502'
op|':'
string|'"Bad Gateway"'
op|','
comment|'# no donut'
nl|'\n'
number|'503'
op|':'
string|'"Service Unavailable"'
op|','
nl|'\n'
number|'504'
op|':'
string|'"Server Time-out"'
op|','
nl|'\n'
number|'505'
op|':'
string|'"SIP Version not supported"'
op|','
nl|'\n'
number|'513'
op|':'
string|'"Message Too Large"'
op|','
nl|'\n'
nl|'\n'
number|'600'
op|':'
string|'"Busy Everywhere"'
op|','
nl|'\n'
number|'603'
op|':'
string|'"Decline"'
op|','
nl|'\n'
number|'604'
op|':'
string|'"Does not exist anywhere"'
op|','
nl|'\n'
number|'606'
op|':'
string|'"Not Acceptable"'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|specialCases
name|'specialCases'
op|'='
op|'{'
nl|'\n'
string|"'cseq'"
op|':'
string|"'CSeq'"
op|','
nl|'\n'
string|"'call-id'"
op|':'
string|"'Call-ID'"
op|','
nl|'\n'
string|"'www-authenticate'"
op|':'
string|"'WWW-Authenticate'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|dashCapitalize
name|'def'
name|'dashCapitalize'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"''' Capitalize a string, making sure to treat - as a word seperator '''"
newline|'\n'
name|'return'
string|"'-'"
op|'.'
name|'join'
op|'('
op|'['
name|'x'
op|'.'
name|'capitalize'
op|'('
op|')'
name|'for'
name|'x'
name|'in'
name|'s'
op|'.'
name|'split'
op|'('
string|"'-'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|unq
dedent|''
name|'def'
name|'unq'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'s'
op|'['
number|'0'
op|']'
op|'=='
name|'s'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|'\'"\''
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'s'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|function|DigestCalcHA1
dedent|''
name|'def'
name|'DigestCalcHA1'
op|'('
nl|'\n'
name|'pszAlg'
op|','
nl|'\n'
name|'pszUserName'
op|','
nl|'\n'
name|'pszRealm'
op|','
nl|'\n'
name|'pszPassword'
op|','
nl|'\n'
name|'pszNonce'
op|','
nl|'\n'
name|'pszCNonce'
op|','
nl|'\n'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'m'
op|'='
name|'md5'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszUserName'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszRealm'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszPassword'
op|')'
newline|'\n'
name|'HA1'
op|'='
name|'m'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
name|'if'
name|'pszAlg'
op|'=='
string|'"md5-sess"'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'='
name|'md5'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'HA1'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszNonce'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszCNonce'
op|')'
newline|'\n'
name|'HA1'
op|'='
name|'m'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'HA1'
op|'.'
name|'encode'
op|'('
string|"'hex'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|DigestCalcHA1
dedent|''
name|'DigestCalcHA1'
op|'='
name|'deprecated'
op|'('
name|'Version'
op|'('
string|'"Twisted"'
op|','
number|'9'
op|','
number|'0'
op|','
number|'0'
op|')'
op|')'
op|'('
name|'DigestCalcHA1'
op|')'
newline|'\n'
nl|'\n'
DECL|function|DigestCalcResponse
name|'def'
name|'DigestCalcResponse'
op|'('
nl|'\n'
name|'HA1'
op|','
nl|'\n'
name|'pszNonce'
op|','
nl|'\n'
name|'pszNonceCount'
op|','
nl|'\n'
name|'pszCNonce'
op|','
nl|'\n'
name|'pszQop'
op|','
nl|'\n'
name|'pszMethod'
op|','
nl|'\n'
name|'pszDigestUri'
op|','
nl|'\n'
name|'pszHEntity'
op|','
nl|'\n'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'m'
op|'='
name|'md5'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszMethod'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszDigestUri'
op|')'
newline|'\n'
name|'if'
name|'pszQop'
op|'=='
string|'"auth-int"'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszHEntity'
op|')'
newline|'\n'
dedent|''
name|'HA2'
op|'='
name|'m'
op|'.'
name|'digest'
op|'('
op|')'
op|'.'
name|'encode'
op|'('
string|"'hex'"
op|')'
newline|'\n'
nl|'\n'
name|'m'
op|'='
name|'md5'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'HA1'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszNonce'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'if'
name|'pszNonceCount'
name|'and'
name|'pszCNonce'
op|':'
comment|'# pszQop:'
newline|'\n'
indent|'        '
name|'m'
op|'.'
name|'update'
op|'('
name|'pszNonceCount'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszCNonce'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszQop'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
dedent|''
name|'m'
op|'.'
name|'update'
op|'('
name|'HA2'
op|')'
newline|'\n'
name|'hash'
op|'='
name|'m'
op|'.'
name|'digest'
op|'('
op|')'
op|'.'
name|'encode'
op|'('
string|"'hex'"
op|')'
newline|'\n'
name|'return'
name|'hash'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|DigestCalcResponse
dedent|''
name|'DigestCalcResponse'
op|'='
name|'deprecated'
op|'('
name|'Version'
op|'('
string|'"Twisted"'
op|','
number|'9'
op|','
number|'0'
op|','
number|'0'
op|')'
op|')'
op|'('
name|'DigestCalcResponse'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_absent
name|'_absent'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|Via
name|'class'
name|'Via'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A L{Via} is a SIP Via header, representing a segment of the path taken by\n    the request.\n\n    See RFC 3261, sections 8.1.1.7, 18.2.2, and 20.42.\n\n    @ivar transport: Network protocol used for this leg. (Probably either "TCP"\n    or "UDP".)\n    @type transport: C{str}\n    @ivar branch: Unique identifier for this request.\n    @type branch: C{str}\n    @ivar host: Hostname or IP for this leg.\n    @type host: C{str}\n    @ivar port: Port used for this leg.\n    @type port C{int}, or None.\n    @ivar rportRequested: Whether to request RFC 3581 client processing or not.\n    @type rportRequested: C{bool}\n    @ivar rportValue: Servers wishing to honor requests for RFC 3581 processing\n    should set this parameter to the source port the request was received\n    from.\n    @type rportValue: C{int}, or None.\n\n    @ivar ttl: Time-to-live for requests on multicast paths.\n    @type ttl: C{int}, or None.\n    @ivar maddr: The destination multicast address, if any.\n    @type maddr: C{str}, or None.\n    @ivar hidden: Obsolete in SIP 2.0.\n    @type hidden: C{bool}\n    @ivar otherParams: Any other parameters in the header.\n    @type otherParams: C{dict}\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|'='
name|'PORT'
op|','
name|'transport'
op|'='
string|'"UDP"'
op|','
name|'ttl'
op|'='
name|'None'
op|','
nl|'\n'
name|'hidden'
op|'='
name|'False'
op|','
name|'received'
op|'='
name|'None'
op|','
name|'rport'
op|'='
name|'_absent'
op|','
name|'branch'
op|'='
name|'None'
op|','
nl|'\n'
name|'maddr'
op|'='
name|'None'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set parameters of this Via header. All arguments correspond to\n        attributes of the same name.\n\n        To maintain compatibility with old SIP\n        code, the \'rport\' argument is used to determine the values of\n        C{rportRequested} and C{rportValue}. If None, C{rportRequested} is set\n        to True. (The deprecated method for doing this is to pass True.) If an\n        integer, C{rportValue} is set to the given value.\n\n        Any arguments not explicitly named here are collected into the\n        C{otherParams} dict.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'transport'
newline|'\n'
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'ttl'
newline|'\n'
name|'self'
op|'.'
name|'hidden'
op|'='
name|'hidden'
newline|'\n'
name|'self'
op|'.'
name|'received'
op|'='
name|'received'
newline|'\n'
name|'if'
name|'rport'
name|'is'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"rport=True is deprecated since Twisted 9.0."'
op|','
nl|'\n'
name|'DeprecationWarning'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rportValue'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'rportRequested'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'rport'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'rportValue'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'rportRequested'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'rport'
name|'is'
name|'_absent'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'rportValue'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'rportRequested'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'rportValue'
op|'='
name|'rport'
newline|'\n'
name|'self'
op|'.'
name|'rportRequested'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'branch'
op|'='
name|'branch'
newline|'\n'
name|'self'
op|'.'
name|'maddr'
op|'='
name|'maddr'
newline|'\n'
name|'self'
op|'.'
name|'otherParams'
op|'='
name|'kw'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getrport
dedent|''
name|'def'
name|'_getrport'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns the rport value expected by the old SIP code.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'rportRequested'
op|'=='
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'rportValue'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'rportValue'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_setrport
dedent|''
dedent|''
name|'def'
name|'_setrport'
op|'('
name|'self'
op|','
name|'newRPort'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Base._fixupNAT} sets C{rport} directly, so this method sets\n        C{rportValue} based on that.\n\n        @param newRPort: The new rport value.\n        @type newRPort: C{int}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'rportValue'
op|'='
name|'newRPort'
newline|'\n'
name|'self'
op|'.'
name|'rportRequested'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|rport
dedent|''
name|'rport'
op|'='
name|'property'
op|'('
name|'_getrport'
op|','
name|'_setrport'
op|')'
newline|'\n'
nl|'\n'
DECL|member|toString
name|'def'
name|'toString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Serialize this header for use in a request or response.\n        """'
newline|'\n'
name|'s'
op|'='
string|'"SIP/2.0/%s %s:%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'transport'
op|','
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'hidden'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'+='
string|'";hidden"'
newline|'\n'
dedent|''
name|'for'
name|'n'
name|'in'
string|'"ttl"'
op|','
string|'"branch"'
op|','
string|'"maddr"'
op|','
string|'"received"'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'n'
op|')'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'s'
op|'+='
string|'";%s=%s"'
op|'%'
op|'('
name|'n'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'rportRequested'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'+='
string|'";rport"'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'rportValue'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'+='
string|'";rport=%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'rport'
op|','
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'etc'
op|'='
name|'self'
op|'.'
name|'otherParams'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
name|'etc'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'etc'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'v'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'s'
op|'+='
string|'";"'
op|'+'
name|'k'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'s'
op|'+='
string|'";%s=%s"'
op|'%'
op|'('
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parseViaHeader
dedent|''
dedent|''
name|'def'
name|'parseViaHeader'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Parse a Via header.\n\n    @return: The parsed version of this header.\n    @rtype: L{Via}\n    """'
newline|'\n'
name|'parts'
op|'='
name|'value'
op|'.'
name|'split'
op|'('
string|'";"'
op|')'
newline|'\n'
name|'sent'
op|','
name|'params'
op|'='
name|'parts'
op|'['
number|'0'
op|']'
op|','
name|'parts'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'protocolinfo'
op|','
name|'by'
op|'='
name|'sent'
op|'.'
name|'split'
op|'('
string|'" "'
op|','
number|'1'
op|')'
newline|'\n'
name|'by'
op|'='
name|'by'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'pname'
op|','
name|'pversion'
op|','
name|'transport'
op|'='
name|'protocolinfo'
op|'.'
name|'split'
op|'('
string|'"/"'
op|')'
newline|'\n'
name|'if'
name|'pname'
op|'!='
string|'"SIP"'
name|'or'
name|'pversion'
op|'!='
string|'"2.0"'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|','
string|'"wrong protocol or version: %r"'
op|'%'
name|'value'
newline|'\n'
dedent|''
name|'result'
op|'['
string|'"transport"'
op|']'
op|'='
name|'transport'
newline|'\n'
name|'if'
string|'":"'
name|'in'
name|'by'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|','
name|'port'
op|'='
name|'by'
op|'.'
name|'split'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'result'
op|'['
string|'"port"'
op|']'
op|'='
name|'int'
op|'('
name|'port'
op|')'
newline|'\n'
name|'result'
op|'['
string|'"host"'
op|']'
op|'='
name|'host'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'['
string|'"host"'
op|']'
op|'='
name|'by'
newline|'\n'
dedent|''
name|'for'
name|'p'
name|'in'
name|'params'
op|':'
newline|'\n'
comment|"# it's the comment-striping dance!"
nl|'\n'
indent|'        '
name|'p'
op|'='
name|'p'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|'" "'
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'p'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|','
name|'comment'
op|'='
name|'p'
op|'['
number|'0'
op|']'
op|','
string|'""'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|','
name|'comment'
op|'='
name|'p'
newline|'\n'
dedent|''
name|'if'
name|'p'
op|'=='
string|'"hidden"'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
string|'"hidden"'
op|']'
op|'='
name|'True'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'parts'
op|'='
name|'p'
op|'.'
name|'split'
op|'('
string|'"="'
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|','
name|'value'
op|'='
name|'parts'
op|'['
number|'0'
op|']'
op|','
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|','
name|'value'
op|'='
name|'parts'
newline|'\n'
name|'if'
name|'name'
name|'in'
op|'('
string|'"rport"'
op|','
string|'"ttl"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'result'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'return'
name|'Via'
op|'('
op|'**'
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|URL
dedent|''
name|'class'
name|'URL'
op|':'
newline|'\n'
indent|'    '
string|'"""A SIP URL."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'username'
op|'='
name|'None'
op|','
name|'password'
op|'='
name|'None'
op|','
name|'port'
op|'='
name|'None'
op|','
nl|'\n'
name|'transport'
op|'='
name|'None'
op|','
name|'usertype'
op|'='
name|'None'
op|','
name|'method'
op|'='
name|'None'
op|','
nl|'\n'
name|'ttl'
op|'='
name|'None'
op|','
name|'maddr'
op|'='
name|'None'
op|','
name|'tag'
op|'='
name|'None'
op|','
name|'other'
op|'='
name|'None'
op|','
name|'headers'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'username'
op|'='
name|'username'
newline|'\n'
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
name|'self'
op|'.'
name|'password'
op|'='
name|'password'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'transport'
newline|'\n'
name|'self'
op|'.'
name|'usertype'
op|'='
name|'usertype'
newline|'\n'
name|'self'
op|'.'
name|'method'
op|'='
name|'method'
newline|'\n'
name|'self'
op|'.'
name|'tag'
op|'='
name|'tag'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'ttl'
newline|'\n'
name|'self'
op|'.'
name|'maddr'
op|'='
name|'maddr'
newline|'\n'
name|'if'
name|'other'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'other'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'other'
op|'='
name|'other'
newline|'\n'
dedent|''
name|'if'
name|'headers'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'headers'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'headers'
op|'='
name|'headers'
newline|'\n'
nl|'\n'
DECL|member|toString
dedent|''
dedent|''
name|'def'
name|'toString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
op|'['
op|']'
op|';'
name|'w'
op|'='
name|'l'
op|'.'
name|'append'
newline|'\n'
name|'w'
op|'('
string|'"sip:"'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'username'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'('
name|'self'
op|'.'
name|'username'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'password'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'w'
op|'('
string|'":%s"'
op|'%'
name|'self'
op|'.'
name|'password'
op|')'
newline|'\n'
dedent|''
name|'w'
op|'('
string|'"@"'
op|')'
newline|'\n'
dedent|''
name|'w'
op|'('
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'port'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'('
string|'":%d"'
op|'%'
name|'self'
op|'.'
name|'port'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'usertype'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'('
string|'";user=%s"'
op|'%'
name|'self'
op|'.'
name|'usertype'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'n'
name|'in'
op|'('
string|'"transport"'
op|','
string|'"ttl"'
op|','
string|'"maddr"'
op|','
string|'"method"'
op|','
string|'"tag"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'v'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'n'
op|')'
newline|'\n'
name|'if'
name|'v'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'w'
op|'('
string|'";%s=%s"'
op|'%'
op|'('
name|'n'
op|','
name|'v'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'v'
name|'in'
name|'self'
op|'.'
name|'other'
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'('
string|'";%s"'
op|'%'
name|'v'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'('
string|'"?"'
op|')'
newline|'\n'
name|'w'
op|'('
string|'"&"'
op|'.'
name|'join'
op|'('
op|'['
op|'('
string|'"%s=%s"'
op|'%'
op|'('
name|'specialCases'
op|'.'
name|'get'
op|'('
name|'h'
op|')'
name|'or'
name|'dashCapitalize'
op|'('
name|'h'
op|')'
op|','
name|'v'
op|')'
op|')'
name|'for'
op|'('
name|'h'
op|','
name|'v'
op|')'
name|'in'
name|'self'
op|'.'
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
string|'""'
op|'.'
name|'join'
op|'('
name|'l'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'toString'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<URL %s:%s@%s:%r/%s>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'username'
op|','
name|'self'
op|'.'
name|'password'
op|','
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'port'
op|','
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parseURL
dedent|''
dedent|''
name|'def'
name|'parseURL'
op|'('
name|'url'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'port'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return string into URL object.\n\n    URIs are of of form \'sip:user@example.com\'.\n    """'
newline|'\n'
name|'d'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'not'
name|'url'
op|'.'
name|'startswith'
op|'('
string|'"sip:"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|'"unsupported scheme: "'
op|'+'
name|'url'
op|'['
op|':'
number|'4'
op|']'
op|')'
newline|'\n'
dedent|''
name|'parts'
op|'='
name|'url'
op|'['
number|'4'
op|':'
op|']'
op|'.'
name|'split'
op|'('
string|'";"'
op|')'
newline|'\n'
name|'userdomain'
op|','
name|'params'
op|'='
name|'parts'
op|'['
number|'0'
op|']'
op|','
name|'parts'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'udparts'
op|'='
name|'userdomain'
op|'.'
name|'split'
op|'('
string|'"@"'
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'udparts'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'        '
name|'userpass'
op|','
name|'hostport'
op|'='
name|'udparts'
newline|'\n'
name|'upparts'
op|'='
name|'userpass'
op|'.'
name|'split'
op|'('
string|'":"'
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'upparts'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'['
string|'"username"'
op|']'
op|'='
name|'upparts'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'['
string|'"username"'
op|']'
op|'='
name|'upparts'
op|'['
number|'0'
op|']'
newline|'\n'
name|'d'
op|'['
string|'"password"'
op|']'
op|'='
name|'upparts'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'hostport'
op|'='
name|'udparts'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'hpparts'
op|'='
name|'hostport'
op|'.'
name|'split'
op|'('
string|'":"'
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'hpparts'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'['
string|'"host"'
op|']'
op|'='
name|'hpparts'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'['
string|'"host"'
op|']'
op|'='
name|'hpparts'
op|'['
number|'0'
op|']'
newline|'\n'
name|'d'
op|'['
string|'"port"'
op|']'
op|'='
name|'int'
op|'('
name|'hpparts'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'host'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'['
string|'"host"'
op|']'
op|'='
name|'host'
newline|'\n'
dedent|''
name|'if'
name|'port'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'['
string|'"port"'
op|']'
op|'='
name|'port'
newline|'\n'
dedent|''
name|'for'
name|'p'
name|'in'
name|'params'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'p'
op|'=='
name|'params'
op|'['
op|'-'
number|'1'
op|']'
name|'and'
string|'"?"'
name|'in'
name|'p'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'['
string|'"headers"'
op|']'
op|'='
name|'h'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'p'
op|','
name|'headers'
op|'='
name|'p'
op|'.'
name|'split'
op|'('
string|'"?"'
op|','
number|'1'
op|')'
newline|'\n'
name|'for'
name|'header'
name|'in'
name|'headers'
op|'.'
name|'split'
op|'('
string|'"&"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'k'
op|','
name|'v'
op|'='
name|'header'
op|'.'
name|'split'
op|'('
string|'"="'
op|')'
newline|'\n'
name|'h'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
dedent|''
dedent|''
name|'nv'
op|'='
name|'p'
op|'.'
name|'split'
op|'('
string|'"="'
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'nv'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'setdefault'
op|'('
string|'"other"'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'p'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'name'
op|','
name|'value'
op|'='
name|'nv'
newline|'\n'
name|'if'
name|'name'
op|'=='
string|'"user"'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'['
string|'"usertype"'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'name'
name|'in'
op|'('
string|'"transport"'
op|','
string|'"ttl"'
op|','
string|'"maddr"'
op|','
string|'"method"'
op|','
string|'"tag"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'name'
op|'=='
string|'"ttl"'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'setdefault'
op|'('
string|'"other"'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'p'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'URL'
op|'('
op|'**'
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cleanRequestURL
dedent|''
name|'def'
name|'cleanRequestURL'
op|'('
name|'url'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Clean a URL from a Request line."""'
newline|'\n'
name|'url'
op|'.'
name|'transport'
op|'='
name|'None'
newline|'\n'
name|'url'
op|'.'
name|'maddr'
op|'='
name|'None'
newline|'\n'
name|'url'
op|'.'
name|'ttl'
op|'='
name|'None'
newline|'\n'
name|'url'
op|'.'
name|'headers'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parseAddress
dedent|''
name|'def'
name|'parseAddress'
op|'('
name|'address'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'port'
op|'='
name|'None'
op|','
name|'clean'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return (name, uri, params) for From/To/Contact header.\n\n    @param clean: remove unnecessary info, usually for From and To headers.\n    """'
newline|'\n'
name|'address'
op|'='
name|'address'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
comment|"# simple 'sip:foo' case"
nl|'\n'
name|'if'
name|'address'
op|'.'
name|'startswith'
op|'('
string|'"sip:"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'""'
op|','
name|'parseURL'
op|'('
name|'address'
op|','
name|'host'
op|'='
name|'host'
op|','
name|'port'
op|'='
name|'port'
op|')'
op|','
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'name'
op|','
name|'url'
op|'='
name|'address'
op|'.'
name|'split'
op|'('
string|'"<"'
op|','
number|'1'
op|')'
newline|'\n'
name|'name'
op|'='
name|'name'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'name'
op|'.'
name|'startswith'
op|'('
string|'\'"\''
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'name'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'name'
op|'.'
name|'endswith'
op|'('
string|'\'"\''
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'name'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'url'
op|','
name|'paramstring'
op|'='
name|'url'
op|'.'
name|'split'
op|'('
string|'">"'
op|','
number|'1'
op|')'
newline|'\n'
name|'url'
op|'='
name|'parseURL'
op|'('
name|'url'
op|','
name|'host'
op|'='
name|'host'
op|','
name|'port'
op|'='
name|'port'
op|')'
newline|'\n'
name|'paramstring'
op|'='
name|'paramstring'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'paramstring'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'l'
name|'in'
name|'paramstring'
op|'.'
name|'split'
op|'('
string|'";"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'l'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'k'
op|','
name|'v'
op|'='
name|'l'
op|'.'
name|'split'
op|'('
string|'"="'
op|')'
newline|'\n'
name|'params'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'clean'
op|':'
newline|'\n'
comment|'# rfc 2543 6.21'
nl|'\n'
indent|'        '
name|'url'
op|'.'
name|'ttl'
op|'='
name|'None'
newline|'\n'
name|'url'
op|'.'
name|'headers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'url'
op|'.'
name|'transport'
op|'='
name|'None'
newline|'\n'
name|'url'
op|'.'
name|'maddr'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'name'
op|','
name|'url'
op|','
name|'params'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SIPError
dedent|''
name|'class'
name|'SIPError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'phrase'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'phrase'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'phrase'
op|'='
name|'statusCodes'
op|'['
name|'code'
op|']'
newline|'\n'
dedent|''
name|'Exception'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
string|'"SIP error (%d): %s"'
op|'%'
op|'('
name|'code'
op|','
name|'phrase'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'code'
op|'='
name|'code'
newline|'\n'
name|'self'
op|'.'
name|'phrase'
op|'='
name|'phrase'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RegistrationError
dedent|''
dedent|''
name|'class'
name|'RegistrationError'
op|'('
name|'SIPError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Registration was not possible."""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Message
dedent|''
name|'class'
name|'Message'
op|':'
newline|'\n'
indent|'    '
string|'"""A SIP message."""'
newline|'\n'
nl|'\n'
DECL|variable|length
name|'length'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'headers'
op|'='
name|'util'
op|'.'
name|'OrderedDict'
op|'('
op|')'
comment|'# map name to list of values'
newline|'\n'
name|'self'
op|'.'
name|'body'
op|'='
string|'""'
newline|'\n'
name|'self'
op|'.'
name|'finished'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|addHeader
dedent|''
name|'def'
name|'addHeader'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'name'
op|'='
name|'longHeaders'
op|'.'
name|'get'
op|'('
name|'name'
op|','
name|'name'
op|')'
newline|'\n'
name|'if'
name|'name'
op|'=='
string|'"content-length"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'length'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'headers'
op|'.'
name|'setdefault'
op|'('
name|'name'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|bodyDataReceived
dedent|''
name|'def'
name|'bodyDataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'body'
op|'+='
name|'data'
newline|'\n'
nl|'\n'
DECL|member|creationFinished
dedent|''
name|'def'
name|'creationFinished'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'self'
op|'.'
name|'length'
op|'!='
name|'None'
op|')'
name|'and'
op|'('
name|'self'
op|'.'
name|'length'
op|'!='
name|'len'
op|'('
name|'self'
op|'.'
name|'body'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|'"wrong body length"'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'finished'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|toString
dedent|''
name|'def'
name|'toString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
string|'"%s\\r\\n"'
op|'%'
name|'self'
op|'.'
name|'_getHeaderLine'
op|'('
op|')'
newline|'\n'
name|'for'
name|'n'
op|','
name|'vs'
name|'in'
name|'self'
op|'.'
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'v'
name|'in'
name|'vs'
op|':'
newline|'\n'
indent|'                '
name|'s'
op|'+='
string|'"%s: %s\\r\\n"'
op|'%'
op|'('
name|'specialCases'
op|'.'
name|'get'
op|'('
name|'n'
op|')'
name|'or'
name|'dashCapitalize'
op|'('
name|'n'
op|')'
op|','
name|'v'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'s'
op|'+='
string|'"\\r\\n"'
newline|'\n'
name|'s'
op|'+='
name|'self'
op|'.'
name|'body'
newline|'\n'
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|member|_getHeaderLine
dedent|''
name|'def'
name|'_getHeaderLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Request
dedent|''
dedent|''
name|'class'
name|'Request'
op|'('
name|'Message'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Request for a URI"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'uri'
op|','
name|'version'
op|'='
string|'"SIP/2.0"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Message'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'method'
op|'='
name|'method'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'uri'
op|','
name|'URL'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'uri'
op|'='
name|'uri'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'uri'
op|'='
name|'parseURL'
op|'('
name|'uri'
op|')'
newline|'\n'
name|'cleanRequestURL'
op|'('
name|'self'
op|'.'
name|'uri'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"<SIP Request %d:%s %s>"'
op|'%'
op|'('
name|'id'
op|'('
name|'self'
op|')'
op|','
name|'self'
op|'.'
name|'method'
op|','
name|'self'
op|'.'
name|'uri'
op|'.'
name|'toString'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_getHeaderLine
dedent|''
name|'def'
name|'_getHeaderLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"%s %s SIP/2.0"'
op|'%'
op|'('
name|'self'
op|'.'
name|'method'
op|','
name|'self'
op|'.'
name|'uri'
op|'.'
name|'toString'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Response
dedent|''
dedent|''
name|'class'
name|'Response'
op|'('
name|'Message'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Response to a URI Request"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'phrase'
op|'='
name|'None'
op|','
name|'version'
op|'='
string|'"SIP/2.0"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Message'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'code'
op|'='
name|'code'
newline|'\n'
name|'if'
name|'phrase'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'phrase'
op|'='
name|'statusCodes'
op|'['
name|'code'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'phrase'
op|'='
name|'phrase'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"<SIP Response %d:%s>"'
op|'%'
op|'('
name|'id'
op|'('
name|'self'
op|')'
op|','
name|'self'
op|'.'
name|'code'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_getHeaderLine
dedent|''
name|'def'
name|'_getHeaderLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"SIP/2.0 %s %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'code'
op|','
name|'self'
op|'.'
name|'phrase'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MessagesParser
dedent|''
dedent|''
name|'class'
name|'MessagesParser'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A SIP messages parser.\n\n    Expects dataReceived, dataDone repeatedly,\n    in that order. Shouldn\'t be connected to actual transport.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|version
name|'version'
op|'='
string|'"SIP/2.0"'
newline|'\n'
DECL|variable|acceptResponses
name|'acceptResponses'
op|'='
number|'1'
newline|'\n'
DECL|variable|acceptRequests
name|'acceptRequests'
op|'='
number|'1'
newline|'\n'
DECL|variable|state
name|'state'
op|'='
string|'"firstline"'
comment|'# or "headers", "body" or "invalid"'
newline|'\n'
nl|'\n'
DECL|variable|debug
name|'debug'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'messageReceivedCallback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'messageReceived'
op|'='
name|'messageReceivedCallback'
newline|'\n'
name|'self'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|','
name|'remainingData'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'state'
op|'='
string|'"firstline"'
newline|'\n'
name|'self'
op|'.'
name|'length'
op|'='
name|'None'
comment|'# body length'
newline|'\n'
name|'self'
op|'.'
name|'bodyReceived'
op|'='
number|'0'
comment|'# how much of the body we received'
newline|'\n'
name|'self'
op|'.'
name|'message'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'setLineMode'
op|'('
name|'remainingData'
op|')'
newline|'\n'
nl|'\n'
DECL|member|invalidMessage
dedent|''
name|'def'
name|'invalidMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'state'
op|'='
string|'"invalid"'
newline|'\n'
name|'self'
op|'.'
name|'setRawMode'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataDone
dedent|''
name|'def'
name|'dataDone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# clear out any buffered data that may be hanging around'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'clearLineBuffer'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
string|'"firstline"'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'state'
op|'!='
string|'"body"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'length'
op|'=='
name|'None'
op|':'
newline|'\n'
comment|'# no content-length header, so end of data signals message done'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'messageDone'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'length'
op|'<'
name|'self'
op|'.'
name|'bodyReceived'
op|':'
newline|'\n'
comment|'# aborted in the middle'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# we have enough data and message wasn't finished? something is wrong"
nl|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|','
string|'"this should never happen"'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'basic'
op|'.'
name|'LineReceiver'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'invalidMessage'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleFirstLine
dedent|''
dedent|''
name|'def'
name|'handleFirstLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Expected to create self.message."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|lineLengthExceeded
dedent|''
name|'def'
name|'lineLengthExceeded'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'invalidMessage'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
string|'"firstline"'
op|':'
newline|'\n'
indent|'            '
name|'while'
name|'line'
op|'.'
name|'startswith'
op|'('
string|'"\\n"'
op|')'
name|'or'
name|'line'
op|'.'
name|'startswith'
op|'('
string|'"\\r"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'line'
op|'='
name|'line'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'line'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'a'
op|','
name|'b'
op|','
name|'c'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|'" "'
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'invalidMessage'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'a'
op|'=='
string|'"SIP/2.0"'
name|'and'
name|'self'
op|'.'
name|'acceptResponses'
op|':'
newline|'\n'
comment|'# response'
nl|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'code'
op|'='
name|'int'
op|'('
name|'b'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'invalidMessage'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'message'
op|'='
name|'Response'
op|'('
name|'code'
op|','
name|'c'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'c'
op|'=='
string|'"SIP/2.0"'
name|'and'
name|'self'
op|'.'
name|'acceptRequests'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'message'
op|'='
name|'Request'
op|'('
name|'a'
op|','
name|'b'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'invalidMessage'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'state'
op|'='
string|'"headers"'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'assert'
name|'self'
op|'.'
name|'state'
op|'=='
string|'"headers"'
newline|'\n'
dedent|''
name|'if'
name|'line'
op|':'
newline|'\n'
comment|'# XXX support multi-line headers'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|','
name|'value'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|'":"'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'invalidMessage'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'message'
op|'.'
name|'addHeader'
op|'('
name|'name'
op|','
name|'value'
op|'.'
name|'lstrip'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|'"content-length"'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'length'
op|'='
name|'int'
op|'('
name|'value'
op|'.'
name|'lstrip'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'invalidMessage'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# CRLF, we now have message body until self.length bytes,'
nl|'\n'
comment|'# or if no length was given, until there is no more data'
nl|'\n'
comment|'# from the connection sending us data.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'state'
op|'='
string|'"body"'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'length'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'messageDone'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'setRawMode'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|messageDone
dedent|''
dedent|''
name|'def'
name|'messageDone'
op|'('
name|'self'
op|','
name|'remainingData'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'self'
op|'.'
name|'state'
op|'=='
string|'"body"'
newline|'\n'
name|'self'
op|'.'
name|'message'
op|'.'
name|'creationFinished'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'messageReceived'
op|'('
name|'self'
op|'.'
name|'message'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reset'
op|'('
name|'remainingData'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rawDataReceived
dedent|''
name|'def'
name|'rawDataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'self'
op|'.'
name|'state'
name|'in'
op|'('
string|'"body"'
op|','
string|'"invalid"'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
string|'"invalid"'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'length'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'message'
op|'.'
name|'bodyDataReceived'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'dataLen'
op|'='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
name|'expectedLen'
op|'='
name|'self'
op|'.'
name|'length'
op|'-'
name|'self'
op|'.'
name|'bodyReceived'
newline|'\n'
name|'if'
name|'dataLen'
op|'>'
name|'expectedLen'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'message'
op|'.'
name|'bodyDataReceived'
op|'('
name|'data'
op|'['
op|':'
name|'expectedLen'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'messageDone'
op|'('
name|'data'
op|'['
name|'expectedLen'
op|':'
op|']'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'bodyReceived'
op|'+='
name|'dataLen'
newline|'\n'
name|'self'
op|'.'
name|'message'
op|'.'
name|'bodyDataReceived'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'bodyReceived'
op|'=='
name|'self'
op|'.'
name|'length'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'messageDone'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Base
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'Base'
op|'('
name|'protocol'
op|'.'
name|'DatagramProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for SIP clients and servers."""'
newline|'\n'
nl|'\n'
DECL|variable|PORT
name|'PORT'
op|'='
name|'PORT'
newline|'\n'
DECL|variable|debug
name|'debug'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'messages'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'='
name|'MessagesParser'
op|'('
name|'self'
op|'.'
name|'addMessage'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addMessage
dedent|''
name|'def'
name|'addMessage'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'messages'
op|'.'
name|'append'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|datagramReceived
dedent|''
name|'def'
name|'datagramReceived'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataDone'
op|'('
op|')'
newline|'\n'
name|'for'
name|'m'
name|'in'
name|'self'
op|'.'
name|'messages'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_fixupNAT'
op|'('
name|'m'
op|','
name|'addr'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'debug'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Received %r from %r"'
op|'%'
op|'('
name|'m'
op|'.'
name|'toString'
op|'('
op|')'
op|','
name|'addr'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'m'
op|','
name|'Request'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'handle_request'
op|'('
name|'m'
op|','
name|'addr'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'handle_response'
op|'('
name|'m'
op|','
name|'addr'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'messages'
op|'['
op|':'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|_fixupNAT
dedent|''
name|'def'
name|'_fixupNAT'
op|'('
name|'self'
op|','
name|'message'
op|','
op|'('
name|'srcHost'
op|','
name|'srcPort'
op|')'
op|')'
op|':'
newline|'\n'
comment|'# RFC 2543 6.40.2,'
nl|'\n'
indent|'        '
name|'senderVia'
op|'='
name|'parseViaHeader'
op|'('
name|'message'
op|'.'
name|'headers'
op|'['
string|'"via"'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'senderVia'
op|'.'
name|'host'
op|'!='
name|'srcHost'
op|':'
newline|'\n'
indent|'            '
name|'senderVia'
op|'.'
name|'received'
op|'='
name|'srcHost'
newline|'\n'
name|'if'
name|'senderVia'
op|'.'
name|'port'
op|'!='
name|'srcPort'
op|':'
newline|'\n'
indent|'                '
name|'senderVia'
op|'.'
name|'rport'
op|'='
name|'srcPort'
newline|'\n'
dedent|''
name|'message'
op|'.'
name|'headers'
op|'['
string|'"via"'
op|']'
op|'['
number|'0'
op|']'
op|'='
name|'senderVia'
op|'.'
name|'toString'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'senderVia'
op|'.'
name|'rport'
op|'=='
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'senderVia'
op|'.'
name|'received'
op|'='
name|'srcHost'
newline|'\n'
name|'senderVia'
op|'.'
name|'rport'
op|'='
name|'srcPort'
newline|'\n'
name|'message'
op|'.'
name|'headers'
op|'['
string|'"via"'
op|']'
op|'['
number|'0'
op|']'
op|'='
name|'senderVia'
op|'.'
name|'toString'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|deliverResponse
dedent|''
dedent|''
name|'def'
name|'deliverResponse'
op|'('
name|'self'
op|','
name|'responseMessage'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deliver response.\n\n        Destination is based on topmost Via header."""'
newline|'\n'
name|'destVia'
op|'='
name|'parseViaHeader'
op|'('
name|'responseMessage'
op|'.'
name|'headers'
op|'['
string|'"via"'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
comment|"# XXX we don't do multicast yet"
nl|'\n'
name|'host'
op|'='
name|'destVia'
op|'.'
name|'received'
name|'or'
name|'destVia'
op|'.'
name|'host'
newline|'\n'
name|'port'
op|'='
name|'destVia'
op|'.'
name|'rport'
name|'or'
name|'destVia'
op|'.'
name|'port'
name|'or'
name|'self'
op|'.'
name|'PORT'
newline|'\n'
name|'destAddr'
op|'='
name|'URL'
op|'('
name|'host'
op|'='
name|'host'
op|','
name|'port'
op|'='
name|'port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendMessage'
op|'('
name|'destAddr'
op|','
name|'responseMessage'
op|')'
newline|'\n'
nl|'\n'
DECL|member|responseFromRequest
dedent|''
name|'def'
name|'responseFromRequest'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a response to a request message."""'
newline|'\n'
name|'response'
op|'='
name|'Response'
op|'('
name|'code'
op|')'
newline|'\n'
name|'for'
name|'name'
name|'in'
op|'('
string|'"via"'
op|','
string|'"to"'
op|','
string|'"from"'
op|','
string|'"call-id"'
op|','
string|'"cseq"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'.'
name|'headers'
op|'['
name|'name'
op|']'
op|'='
name|'request'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
name|'name'
op|','
op|'['
op|']'
op|')'
op|'['
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'response'
newline|'\n'
nl|'\n'
DECL|member|sendMessage
dedent|''
name|'def'
name|'sendMessage'
op|'('
name|'self'
op|','
name|'destURL'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a message.\n\n        @param destURL: C{URL}. This should be a *physical* URL, not a logical one.\n        @param message: The message to send.\n        """'
newline|'\n'
name|'if'
name|'destURL'
op|'.'
name|'transport'
name|'not'
name|'in'
op|'('
string|'"udp"'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|','
string|'"only UDP currently supported"'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'debug'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Sending %r to %r"'
op|'%'
op|'('
name|'message'
op|'.'
name|'toString'
op|'('
op|')'
op|','
name|'destURL'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'message'
op|'.'
name|'toString'
op|'('
op|')'
op|','
op|'('
name|'destURL'
op|'.'
name|'host'
op|','
name|'destURL'
op|'.'
name|'port'
name|'or'
name|'self'
op|'.'
name|'PORT'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_request
dedent|''
name|'def'
name|'handle_request'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override to define behavior for requests received\n\n        @type message: C{Message}\n        @type addr: C{tuple}\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|handle_response
dedent|''
name|'def'
name|'handle_response'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override to define behavior for responses received.\n\n        @type message: C{Message}\n        @type addr: C{tuple}\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IContact
dedent|''
dedent|''
name|'class'
name|'IContact'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A user of a registrar or proxy"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Registration
dedent|''
name|'class'
name|'Registration'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'secondsToExpiry'
op|','
name|'contactURL'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'secondsToExpiry'
op|'='
name|'secondsToExpiry'
newline|'\n'
name|'self'
op|'.'
name|'contactURL'
op|'='
name|'contactURL'
newline|'\n'
nl|'\n'
DECL|class|IRegistry
dedent|''
dedent|''
name|'class'
name|'IRegistry'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Allows registration of logical->physical URL mapping."""'
newline|'\n'
nl|'\n'
DECL|member|registerAddress
name|'def'
name|'registerAddress'
op|'('
name|'domainURL'
op|','
name|'logicalURL'
op|','
name|'physicalURL'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register the physical address of a logical URL.\n\n        @return: Deferred of C{Registration} or failure with RegistrationError.\n        """'
newline|'\n'
nl|'\n'
DECL|member|unregisterAddress
dedent|''
name|'def'
name|'unregisterAddress'
op|'('
name|'domainURL'
op|','
name|'logicalURL'
op|','
name|'physicalURL'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unregister the physical address of a logical URL.\n\n        @return: Deferred of C{Registration} or failure with RegistrationError.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getRegistrationInfo
dedent|''
name|'def'
name|'getRegistrationInfo'
op|'('
name|'logicalURL'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get registration info for logical URL.\n\n        @return: Deferred of C{Registration} object or failure of LookupError.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ILocator
dedent|''
dedent|''
name|'class'
name|'ILocator'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Allow looking up physical address for logical URL."""'
newline|'\n'
nl|'\n'
DECL|member|getAddress
name|'def'
name|'getAddress'
op|'('
name|'logicalURL'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return physical URL of server for logical URL of user.\n\n        @param logicalURL: a logical C{URL}.\n        @return: Deferred which becomes URL or fails with LookupError.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Proxy
dedent|''
dedent|''
name|'class'
name|'Proxy'
op|'('
name|'Base'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""SIP proxy."""'
newline|'\n'
nl|'\n'
DECL|variable|PORT
name|'PORT'
op|'='
name|'PORT'
newline|'\n'
nl|'\n'
DECL|variable|locator
name|'locator'
op|'='
name|'None'
comment|'# object implementing ILocator'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'port'
op|'='
name|'PORT'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create new instance.\n\n        @param host: our hostname/IP as set in Via headers.\n        @param port: our port as set in Via headers.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
name|'or'
name|'socket'
op|'.'
name|'getfqdn'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'port'
newline|'\n'
name|'Base'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getVia
dedent|''
name|'def'
name|'getVia'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return value of Via header for this proxy."""'
newline|'\n'
name|'return'
name|'Via'
op|'('
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|','
name|'port'
op|'='
name|'self'
op|'.'
name|'port'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_request
dedent|''
name|'def'
name|'handle_request'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
comment|'# send immediate 100/trying message before processing'
nl|'\n'
comment|'#self.deliverResponse(self.responseFromRequest(100, message))'
nl|'\n'
indent|'        '
name|'f'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"handle_%s_request"'
op|'%'
name|'message'
op|'.'
name|'method'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'f'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'self'
op|'.'
name|'handle_request_default'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'f'
op|'('
name|'message'
op|','
name|'addr'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'SIPError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deliverResponse'
op|'('
name|'self'
op|'.'
name|'responseFromRequest'
op|'('
name|'e'
op|'.'
name|'code'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deliverResponse'
op|'('
name|'self'
op|'.'
name|'responseFromRequest'
op|'('
number|'500'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'d'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'lambda'
name|'e'
op|':'
nl|'\n'
name|'self'
op|'.'
name|'deliverResponse'
op|'('
name|'self'
op|'.'
name|'responseFromRequest'
op|'('
name|'e'
op|'.'
name|'code'
op|','
name|'message'
op|')'
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_request_default
dedent|''
dedent|''
dedent|''
name|'def'
name|'handle_request_default'
op|'('
name|'self'
op|','
name|'message'
op|','
op|'('
name|'srcHost'
op|','
name|'srcPort'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Default request handler.\n\n        Default behaviour for OPTIONS and unknown methods for proxies\n        is to forward message on to the client.\n\n        Since at the moment we are stateless proxy, thats basically\n        everything.\n        """'
newline|'\n'
DECL|function|_mungContactHeader
name|'def'
name|'_mungContactHeader'
op|'('
name|'uri'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'message'
op|'.'
name|'headers'
op|'['
string|"'contact'"
op|']'
op|'['
number|'0'
op|']'
op|'='
name|'uri'
op|'.'
name|'toString'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendMessage'
op|'('
name|'uri'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'viaHeader'
op|'='
name|'self'
op|'.'
name|'getVia'
op|'('
op|')'
newline|'\n'
name|'if'
name|'viaHeader'
op|'.'
name|'toString'
op|'('
op|')'
name|'in'
name|'message'
op|'.'
name|'headers'
op|'['
string|'"via"'
op|']'
op|':'
newline|'\n'
comment|'# must be a loop, so drop message'
nl|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Dropping looped message."'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'message'
op|'.'
name|'headers'
op|'['
string|'"via"'
op|']'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'viaHeader'
op|'.'
name|'toString'
op|'('
op|')'
op|')'
newline|'\n'
name|'name'
op|','
name|'uri'
op|','
name|'tags'
op|'='
name|'parseAddress'
op|'('
name|'message'
op|'.'
name|'headers'
op|'['
string|'"to"'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'clean'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# this is broken and needs refactoring to use cred'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'locator'
op|'.'
name|'getAddress'
op|'('
name|'uri'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'sendMessage'
op|','
name|'message'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_cantForwardRequest'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cantForwardRequest
dedent|''
name|'def'
name|'_cantForwardRequest'
op|'('
name|'self'
op|','
name|'error'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'error'
op|'.'
name|'trap'
op|'('
name|'LookupError'
op|')'
newline|'\n'
name|'del'
name|'message'
op|'.'
name|'headers'
op|'['
string|'"via"'
op|']'
op|'['
number|'0'
op|']'
comment|"# this'll be us"
newline|'\n'
name|'self'
op|'.'
name|'deliverResponse'
op|'('
name|'self'
op|'.'
name|'responseFromRequest'
op|'('
number|'404'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deliverResponse
dedent|''
name|'def'
name|'deliverResponse'
op|'('
name|'self'
op|','
name|'responseMessage'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deliver response.\n\n        Destination is based on topmost Via header."""'
newline|'\n'
name|'destVia'
op|'='
name|'parseViaHeader'
op|'('
name|'responseMessage'
op|'.'
name|'headers'
op|'['
string|'"via"'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
comment|"# XXX we don't do multicast yet"
nl|'\n'
name|'host'
op|'='
name|'destVia'
op|'.'
name|'received'
name|'or'
name|'destVia'
op|'.'
name|'host'
newline|'\n'
name|'port'
op|'='
name|'destVia'
op|'.'
name|'rport'
name|'or'
name|'destVia'
op|'.'
name|'port'
name|'or'
name|'self'
op|'.'
name|'PORT'
newline|'\n'
nl|'\n'
name|'destAddr'
op|'='
name|'URL'
op|'('
name|'host'
op|'='
name|'host'
op|','
name|'port'
op|'='
name|'port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendMessage'
op|'('
name|'destAddr'
op|','
name|'responseMessage'
op|')'
newline|'\n'
nl|'\n'
DECL|member|responseFromRequest
dedent|''
name|'def'
name|'responseFromRequest'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a response to a request message."""'
newline|'\n'
name|'response'
op|'='
name|'Response'
op|'('
name|'code'
op|')'
newline|'\n'
name|'for'
name|'name'
name|'in'
op|'('
string|'"via"'
op|','
string|'"to"'
op|','
string|'"from"'
op|','
string|'"call-id"'
op|','
string|'"cseq"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'.'
name|'headers'
op|'['
name|'name'
op|']'
op|'='
name|'request'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
name|'name'
op|','
op|'['
op|']'
op|')'
op|'['
op|':'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'response'
newline|'\n'
nl|'\n'
DECL|member|handle_response
dedent|''
name|'def'
name|'handle_response'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Default response handler."""'
newline|'\n'
name|'v'
op|'='
name|'parseViaHeader'
op|'('
name|'message'
op|'.'
name|'headers'
op|'['
string|'"via"'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
op|'('
name|'v'
op|'.'
name|'host'
op|','
name|'v'
op|'.'
name|'port'
op|')'
op|'!='
op|'('
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'port'
op|')'
op|':'
newline|'\n'
comment|'# we got a message not intended for us?'
nl|'\n'
comment|'# XXX note this check breaks if we have multiple external IPs'
nl|'\n'
comment|'# yay for suck protocols'
nl|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Dropping incorrectly addressed message"'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'del'
name|'message'
op|'.'
name|'headers'
op|'['
string|'"via"'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'message'
op|'.'
name|'headers'
op|'['
string|'"via"'
op|']'
op|':'
newline|'\n'
comment|'# this message is addressed to us'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'gotResponse'
op|'('
name|'message'
op|','
name|'addr'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'deliverResponse'
op|'('
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|gotResponse
dedent|''
name|'def'
name|'gotResponse'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called with responses that are addressed at this server."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|IAuthorizer
dedent|''
dedent|''
name|'class'
name|'IAuthorizer'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
DECL|member|getChallenge
indent|'    '
name|'def'
name|'getChallenge'
op|'('
name|'peer'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate a challenge the client may respond to.\n\n        @type peer: C{tuple}\n        @param peer: The client\'s address\n\n        @rtype: C{str}\n        @return: The challenge string\n        """'
newline|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a credentials object from the given response.\n\n        @type response: C{str}\n        """'
newline|'\n'
nl|'\n'
DECL|class|BasicAuthorizer
dedent|''
dedent|''
name|'class'
name|'BasicAuthorizer'
op|':'
newline|'\n'
indent|'    '
string|'"""Authorizer for insecure Basic (base64-encoded plaintext) authentication.\n\n    This form of authentication is broken and insecure.  Do not use it.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IAuthorizer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This method exists solely to issue a deprecation warning.\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"twisted.protocols.sip.BasicAuthorizer was deprecated "'
nl|'\n'
string|'"in Twisted 9.0.0"'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getChallenge
dedent|''
name|'def'
name|'getChallenge'
op|'('
name|'self'
op|','
name|'peer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
comment|'# At least one SIP client improperly pads its Base64 encoded messages'
nl|'\n'
indent|'        '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'creds'
op|'='
op|'('
name|'response'
op|'+'
op|'('
string|"'='"
op|'*'
name|'i'
op|')'
op|')'
op|'.'
name|'decode'
op|'('
string|"'base64'"
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Totally bogus'
nl|'\n'
indent|'            '
name|'raise'
name|'SIPError'
op|'('
number|'400'
op|')'
newline|'\n'
dedent|''
name|'p'
op|'='
name|'creds'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'p'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'UsernamePassword'
op|'('
op|'*'
name|'p'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'SIPError'
op|'('
number|'400'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DigestedCredentials
dedent|''
dedent|''
name|'class'
name|'DigestedCredentials'
op|'('
name|'UsernameHashedPassword'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Yet Another Simple Digest-MD5 authentication scheme"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'fields'
op|','
name|'challenges'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"twisted.protocols.sip.DigestedCredentials was deprecated "'
nl|'\n'
string|'"in Twisted 9.0.0"'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'username'
op|'='
name|'username'
newline|'\n'
name|'self'
op|'.'
name|'fields'
op|'='
name|'fields'
newline|'\n'
name|'self'
op|'.'
name|'challenges'
op|'='
name|'challenges'
newline|'\n'
nl|'\n'
DECL|member|checkPassword
dedent|''
name|'def'
name|'checkPassword'
op|'('
name|'self'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'method'
op|'='
string|"'REGISTER'"
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'response'"
op|')'
newline|'\n'
name|'uri'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'uri'"
op|')'
newline|'\n'
name|'nonce'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'nonce'"
op|')'
newline|'\n'
name|'cnonce'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'cnonce'"
op|')'
newline|'\n'
name|'nc'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'nc'"
op|')'
newline|'\n'
name|'algo'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'algorithm'"
op|','
string|"'MD5'"
op|')'
newline|'\n'
name|'qop'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'qop-options'"
op|','
string|"'auth'"
op|')'
newline|'\n'
name|'opaque'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'opaque'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'opaque'
name|'not'
name|'in'
name|'self'
op|'.'
name|'challenges'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'challenges'
op|'['
name|'opaque'
op|']'
newline|'\n'
nl|'\n'
name|'user'
op|','
name|'domain'
op|'='
name|'self'
op|'.'
name|'username'
op|'.'
name|'split'
op|'('
string|"'@'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'uri'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'='
string|"'sip:'"
op|'+'
name|'domain'
newline|'\n'
nl|'\n'
dedent|''
name|'expected'
op|'='
name|'DigestCalcResponse'
op|'('
nl|'\n'
name|'DigestCalcHA1'
op|'('
name|'algo'
op|','
name|'user'
op|','
name|'domain'
op|','
name|'password'
op|','
name|'nonce'
op|','
name|'cnonce'
op|')'
op|','
nl|'\n'
name|'nonce'
op|','
name|'nc'
op|','
name|'cnonce'
op|','
name|'qop'
op|','
name|'method'
op|','
name|'uri'
op|','
name|'None'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'expected'
op|'=='
name|'response'
newline|'\n'
nl|'\n'
DECL|class|DigestAuthorizer
dedent|''
dedent|''
name|'class'
name|'DigestAuthorizer'
op|':'
newline|'\n'
DECL|variable|CHALLENGE_LIFETIME
indent|'    '
name|'CHALLENGE_LIFETIME'
op|'='
number|'15'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IAuthorizer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"twisted.protocols.sip.DigestAuthorizer was deprecated "'
nl|'\n'
string|'"in Twisted 9.0.0"'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'outstanding'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|generateNonce
dedent|''
name|'def'
name|'generateNonce'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'tuple'
op|'('
op|'['
name|'random'
op|'.'
name|'randrange'
op|'('
name|'sys'
op|'.'
name|'maxint'
op|')'
name|'for'
name|'_'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|']'
op|')'
newline|'\n'
name|'c'
op|'='
string|"'%d%d%d'"
op|'%'
name|'c'
newline|'\n'
name|'return'
name|'c'
newline|'\n'
nl|'\n'
DECL|member|generateOpaque
dedent|''
name|'def'
name|'generateOpaque'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'random'
op|'.'
name|'randrange'
op|'('
name|'sys'
op|'.'
name|'maxint'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getChallenge
dedent|''
name|'def'
name|'getChallenge'
op|'('
name|'self'
op|','
name|'peer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'self'
op|'.'
name|'generateNonce'
op|'('
op|')'
newline|'\n'
name|'o'
op|'='
name|'self'
op|'.'
name|'generateOpaque'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'outstanding'
op|'['
name|'o'
op|']'
op|'='
name|'c'
newline|'\n'
name|'return'
string|"','"
op|'.'
name|'join'
op|'('
op|'('
nl|'\n'
string|'\'nonce="%s"\''
op|'%'
name|'c'
op|','
nl|'\n'
string|'\'opaque="%s"\''
op|'%'
name|'o'
op|','
nl|'\n'
string|'\'qop-options="auth"\''
op|','
nl|'\n'
string|'\'algorithm="MD5"\''
op|','
nl|'\n'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'response'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
name|'response'
op|'.'
name|'splitlines'
op|'('
op|')'
op|')'
newline|'\n'
name|'parts'
op|'='
name|'response'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
name|'auth'
op|'='
name|'dict'
op|'('
op|'['
op|'('
name|'k'
op|'.'
name|'strip'
op|'('
op|')'
op|','
name|'unq'
op|'('
name|'v'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|')'
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
op|'['
name|'p'
op|'.'
name|'split'
op|'('
string|"'='"
op|','
number|'1'
op|')'
name|'for'
name|'p'
name|'in'
name|'parts'
op|']'
op|']'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'username'
op|'='
name|'auth'
op|'['
string|"'username'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SIPError'
op|'('
number|'401'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'DigestedCredentials'
op|'('
name|'username'
op|','
name|'auth'
op|','
name|'self'
op|'.'
name|'outstanding'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SIPError'
op|'('
number|'400'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RegisterProxy
dedent|''
dedent|''
dedent|''
name|'class'
name|'RegisterProxy'
op|'('
name|'Proxy'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A proxy that allows registration for a specific domain.\n\n    Unregistered users won\'t be handled.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|portal
name|'portal'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|registry
name|'registry'
op|'='
name|'None'
comment|'# should implement IRegistry'
newline|'\n'
nl|'\n'
DECL|variable|authorizers
name|'authorizers'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Proxy'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'liveChallenges'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
string|'"digest"'
name|'not'
name|'in'
name|'self'
op|'.'
name|'authorizers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authorizers'
op|'['
string|'"digest"'
op|']'
op|'='
name|'DigestAuthorizer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_ACK_request
dedent|''
dedent|''
name|'def'
name|'handle_ACK_request'
op|'('
name|'self'
op|','
name|'message'
op|','
op|'('
name|'host'
op|','
name|'port'
op|')'
op|')'
op|':'
newline|'\n'
comment|'# XXX'
nl|'\n'
comment|"# ACKs are a client's way of indicating they got the last message"
nl|'\n'
comment|'# Responding to them is not a good idea.'
nl|'\n'
comment|'# However, we should keep track of terminal messages and re-transmit'
nl|'\n'
comment|'# if no ACK is received.'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|handle_REGISTER_request
dedent|''
name|'def'
name|'handle_REGISTER_request'
op|'('
name|'self'
op|','
name|'message'
op|','
op|'('
name|'host'
op|','
name|'port'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handle a registration request.\n\n        Currently registration is not proxied.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'portal'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# There is no portal.  Let anyone in.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'register'
op|'('
name|'message'
op|','
name|'host'
op|','
name|'port'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# There is a portal.  Check for credentials.'
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'message'
op|'.'
name|'headers'
op|'.'
name|'has_key'
op|'('
string|'"authorization"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'unauthorized'
op|'('
name|'message'
op|','
name|'host'
op|','
name|'port'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'login'
op|'('
name|'message'
op|','
name|'host'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unauthorized
dedent|''
dedent|''
dedent|''
name|'def'
name|'unauthorized'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'host'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'='
name|'self'
op|'.'
name|'responseFromRequest'
op|'('
number|'401'
op|','
name|'message'
op|')'
newline|'\n'
name|'for'
op|'('
name|'scheme'
op|','
name|'auth'
op|')'
name|'in'
name|'self'
op|'.'
name|'authorizers'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'chal'
op|'='
name|'auth'
op|'.'
name|'getChallenge'
op|'('
op|'('
name|'host'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'if'
name|'chal'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
string|'\'%s realm="%s"\''
op|'%'
op|'('
name|'scheme'
op|'.'
name|'title'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
string|'\'%s %s,realm="%s"\''
op|'%'
op|'('
name|'scheme'
op|'.'
name|'title'
op|'('
op|')'
op|','
name|'chal'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
dedent|''
name|'m'
op|'.'
name|'headers'
op|'.'
name|'setdefault'
op|'('
string|"'www-authenticate'"
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'deliverResponse'
op|'('
name|'m'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|login
dedent|''
name|'def'
name|'login'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'host'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parts'
op|'='
name|'message'
op|'.'
name|'headers'
op|'['
string|"'authorization'"
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'1'
op|')'
newline|'\n'
name|'a'
op|'='
name|'self'
op|'.'
name|'authorizers'
op|'.'
name|'get'
op|'('
name|'parts'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'a'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'c'
op|'='
name|'a'
op|'.'
name|'decode'
op|'('
name|'parts'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'SIPError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deliverResponse'
op|'('
name|'self'
op|'.'
name|'responseFromRequest'
op|'('
number|'500'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'c'
op|'.'
name|'username'
op|'+='
string|"'@'"
op|'+'
name|'self'
op|'.'
name|'host'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'login'
op|'('
name|'c'
op|','
name|'None'
op|','
name|'IContact'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbLogin'
op|','
name|'message'
op|','
name|'host'
op|','
name|'port'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebLogin'
op|','
name|'message'
op|','
name|'host'
op|','
name|'port'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'log'
op|'.'
name|'err'
nl|'\n'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deliverResponse'
op|'('
name|'self'
op|'.'
name|'responseFromRequest'
op|'('
number|'501'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbLogin
dedent|''
dedent|''
name|'def'
name|'_cbLogin'
op|'('
name|'self'
op|','
op|'('
name|'i'
op|','
name|'a'
op|','
name|'l'
op|')'
op|','
name|'message'
op|','
name|'host'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
comment|"# It's stateless, matey.  What a joke."
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'register'
op|'('
name|'message'
op|','
name|'host'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebLogin
dedent|''
name|'def'
name|'_ebLogin'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'message'
op|','
name|'host'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'failure'
op|'.'
name|'trap'
op|'('
name|'cred'
op|'.'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'unauthorized'
op|'('
name|'message'
op|','
name|'host'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
DECL|member|register
dedent|''
name|'def'
name|'register'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'host'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allow all users to register"""'
newline|'\n'
name|'name'
op|','
name|'toURL'
op|','
name|'params'
op|'='
name|'parseAddress'
op|'('
name|'message'
op|'.'
name|'headers'
op|'['
string|'"to"'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'clean'
op|'='
number|'1'
op|')'
newline|'\n'
name|'contact'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'message'
op|'.'
name|'headers'
op|'.'
name|'has_key'
op|'('
string|'"contact"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'contact'
op|'='
name|'message'
op|'.'
name|'headers'
op|'['
string|'"contact"'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'message'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|'"expires"'
op|','
op|'['
name|'None'
op|']'
op|')'
op|'['
number|'0'
op|']'
op|'=='
string|'"0"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unregister'
op|'('
name|'message'
op|','
name|'toURL'
op|','
name|'contact'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# XXX Check expires on appropriate URL, and pass it to registry'
nl|'\n'
comment|'# instead of having registry hardcode it.'
nl|'\n'
indent|'            '
name|'if'
name|'contact'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|','
name|'contactURL'
op|','
name|'params'
op|'='
name|'parseAddress'
op|'('
name|'contact'
op|','
name|'host'
op|'='
name|'host'
op|','
name|'port'
op|'='
name|'port'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'registry'
op|'.'
name|'registerAddress'
op|'('
name|'message'
op|'.'
name|'uri'
op|','
name|'toURL'
op|','
name|'contactURL'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'='
name|'self'
op|'.'
name|'registry'
op|'.'
name|'getRegistrationInfo'
op|'('
name|'toURL'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbRegister'
op|','
name|'self'
op|'.'
name|'_ebRegister'
op|','
nl|'\n'
name|'callbackArgs'
op|'='
op|'('
name|'message'
op|','
op|')'
op|','
nl|'\n'
name|'errbackArgs'
op|'='
op|'('
name|'message'
op|','
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbRegister
dedent|''
dedent|''
name|'def'
name|'_cbRegister'
op|'('
name|'self'
op|','
name|'registration'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'response'
op|'='
name|'self'
op|'.'
name|'responseFromRequest'
op|'('
number|'200'
op|','
name|'message'
op|')'
newline|'\n'
name|'if'
name|'registration'
op|'.'
name|'contactURL'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'.'
name|'addHeader'
op|'('
string|'"contact"'
op|','
name|'registration'
op|'.'
name|'contactURL'
op|'.'
name|'toString'
op|'('
op|')'
op|')'
newline|'\n'
name|'response'
op|'.'
name|'addHeader'
op|'('
string|'"expires"'
op|','
string|'"%d"'
op|'%'
name|'registration'
op|'.'
name|'secondsToExpiry'
op|')'
newline|'\n'
dedent|''
name|'response'
op|'.'
name|'addHeader'
op|'('
string|'"content-length"'
op|','
string|'"0"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deliverResponse'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebRegister
dedent|''
name|'def'
name|'_ebRegister'
op|'('
name|'self'
op|','
name|'error'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'error'
op|'.'
name|'trap'
op|'('
name|'RegistrationError'
op|','
name|'LookupError'
op|')'
newline|'\n'
comment|'# XXX return error message, and alter tests to deal with'
nl|'\n'
comment|'# this, currently tests assume no message sent on failure'
nl|'\n'
nl|'\n'
DECL|member|unregister
dedent|''
name|'def'
name|'unregister'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'toURL'
op|','
name|'contact'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'expires'
op|'='
name|'int'
op|'('
name|'message'
op|'.'
name|'headers'
op|'['
string|'"expires"'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deliverResponse'
op|'('
name|'self'
op|'.'
name|'responseFromRequest'
op|'('
number|'400'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'expires'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'contact'
op|'=='
string|'"*"'
op|':'
newline|'\n'
indent|'                    '
name|'contactURL'
op|'='
string|'"*"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'name'
op|','
name|'contactURL'
op|','
name|'params'
op|'='
name|'parseAddress'
op|'('
name|'contact'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'registry'
op|'.'
name|'unregisterAddress'
op|'('
name|'message'
op|'.'
name|'uri'
op|','
name|'toURL'
op|','
name|'contactURL'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbUnregister'
op|','
name|'message'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebUnregister'
op|','
name|'message'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbUnregister
dedent|''
dedent|''
dedent|''
name|'def'
name|'_cbUnregister'
op|'('
name|'self'
op|','
name|'registration'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'self'
op|'.'
name|'responseFromRequest'
op|'('
number|'200'
op|','
name|'message'
op|')'
newline|'\n'
name|'msg'
op|'.'
name|'headers'
op|'.'
name|'setdefault'
op|'('
string|"'contact'"
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'registration'
op|'.'
name|'contactURL'
op|'.'
name|'toString'
op|'('
op|')'
op|')'
newline|'\n'
name|'msg'
op|'.'
name|'addHeader'
op|'('
string|'"expires"'
op|','
string|'"0"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deliverResponse'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebUnregister
dedent|''
name|'def'
name|'_ebUnregister'
op|'('
name|'self'
op|','
name|'registration'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InMemoryRegistry
dedent|''
dedent|''
name|'class'
name|'InMemoryRegistry'
op|':'
newline|'\n'
indent|'    '
string|'"""A simplistic registry for a specific domain."""'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IRegistry'
op|','
name|'ILocator'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'domain'
op|'='
name|'domain'
comment|'# the domain we handle registration for'
newline|'\n'
name|'self'
op|'.'
name|'users'
op|'='
op|'{'
op|'}'
comment|'# map username to (IDelayedCall for expiry, address URI)'
newline|'\n'
nl|'\n'
DECL|member|getAddress
dedent|''
name|'def'
name|'getAddress'
op|'('
name|'self'
op|','
name|'userURI'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'userURI'
op|'.'
name|'host'
op|'!='
name|'self'
op|'.'
name|'domain'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'LookupError'
op|'('
string|'"unknown domain"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'users'
op|'.'
name|'has_key'
op|'('
name|'userURI'
op|'.'
name|'username'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dc'
op|','
name|'url'
op|'='
name|'self'
op|'.'
name|'users'
op|'['
name|'userURI'
op|'.'
name|'username'
op|']'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'url'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'LookupError'
op|'('
string|'"no such user"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getRegistrationInfo
dedent|''
dedent|''
name|'def'
name|'getRegistrationInfo'
op|'('
name|'self'
op|','
name|'userURI'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'userURI'
op|'.'
name|'host'
op|'!='
name|'self'
op|'.'
name|'domain'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'LookupError'
op|'('
string|'"unknown domain"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'users'
op|'.'
name|'has_key'
op|'('
name|'userURI'
op|'.'
name|'username'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dc'
op|','
name|'url'
op|'='
name|'self'
op|'.'
name|'users'
op|'['
name|'userURI'
op|'.'
name|'username'
op|']'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'Registration'
op|'('
name|'int'
op|'('
name|'dc'
op|'.'
name|'getTime'
op|'('
op|')'
op|'-'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|','
name|'url'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'LookupError'
op|'('
string|'"no such user"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_expireRegistration
dedent|''
dedent|''
name|'def'
name|'_expireRegistration'
op|'('
name|'self'
op|','
name|'username'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'dc'
op|','
name|'url'
op|'='
name|'self'
op|'.'
name|'users'
op|'['
name|'username'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'LookupError'
op|'('
string|'"no such user"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'dc'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'users'
op|'['
name|'username'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'Registration'
op|'('
number|'0'
op|','
name|'url'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|registerAddress
dedent|''
name|'def'
name|'registerAddress'
op|'('
name|'self'
op|','
name|'domainURL'
op|','
name|'logicalURL'
op|','
name|'physicalURL'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'domainURL'
op|'.'
name|'host'
op|'!='
name|'self'
op|'.'
name|'domain'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Registration for domain we don\'t handle."'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'RegistrationError'
op|'('
number|'404'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'logicalURL'
op|'.'
name|'host'
op|'!='
name|'self'
op|'.'
name|'domain'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Registration for domain we don\'t handle."'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'RegistrationError'
op|'('
number|'404'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'users'
op|'.'
name|'has_key'
op|'('
name|'logicalURL'
op|'.'
name|'username'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dc'
op|','
name|'old'
op|'='
name|'self'
op|'.'
name|'users'
op|'['
name|'logicalURL'
op|'.'
name|'username'
op|']'
newline|'\n'
name|'dc'
op|'.'
name|'reset'
op|'('
number|'3600'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'dc'
op|'='
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'3600'
op|','
name|'self'
op|'.'
name|'_expireRegistration'
op|','
name|'logicalURL'
op|'.'
name|'username'
op|')'
newline|'\n'
dedent|''
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Registered %s at %s"'
op|'%'
op|'('
name|'logicalURL'
op|'.'
name|'toString'
op|'('
op|')'
op|','
name|'physicalURL'
op|'.'
name|'toString'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'users'
op|'['
name|'logicalURL'
op|'.'
name|'username'
op|']'
op|'='
op|'('
name|'dc'
op|','
name|'physicalURL'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'Registration'
op|'('
name|'int'
op|'('
name|'dc'
op|'.'
name|'getTime'
op|'('
op|')'
op|'-'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|','
name|'physicalURL'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterAddress
dedent|''
name|'def'
name|'unregisterAddress'
op|'('
name|'self'
op|','
name|'domainURL'
op|','
name|'logicalURL'
op|','
name|'physicalURL'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_expireRegistration'
op|'('
name|'logicalURL'
op|'.'
name|'username'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

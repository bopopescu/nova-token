begin_unit
comment|'# -*- test-case-name: twisted.test.test_pcp -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nProducer-Consumer Proxy.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'interfaces'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BasicProducerConsumerProxy
name|'class'
name|'BasicProducerConsumerProxy'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I can act as a man in the middle between any Producer and Consumer.\n\n    @ivar producer: the Producer I subscribe to.\n    @type producer: L{IProducer<interfaces.IProducer>}\n    @ivar consumer: the Consumer I publish to.\n    @type consumer: L{IConsumer<interfaces.IConsumer>}\n    @ivar paused: As a Producer, am I paused?\n    @type paused: bool\n    """'
newline|'\n'
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'IProducer'
op|','
name|'interfaces'
op|'.'
name|'IConsumer'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|consumer
name|'consumer'
op|'='
name|'None'
newline|'\n'
DECL|variable|producer
name|'producer'
op|'='
name|'None'
newline|'\n'
DECL|variable|producerIsStreaming
name|'producerIsStreaming'
op|'='
name|'None'
newline|'\n'
DECL|variable|iAmStreaming
name|'iAmStreaming'
op|'='
name|'True'
newline|'\n'
DECL|variable|outstandingPull
name|'outstandingPull'
op|'='
name|'False'
newline|'\n'
DECL|variable|paused
name|'paused'
op|'='
name|'False'
newline|'\n'
DECL|variable|stopped
name|'stopped'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'consumer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_buffer'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'consumer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'consumer'
op|'='
name|'consumer'
newline|'\n'
name|'consumer'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'iAmStreaming'
op|')'
newline|'\n'
nl|'\n'
comment|'# Producer methods:'
nl|'\n'
nl|'\n'
DECL|member|pauseProducing
dedent|''
dedent|''
name|'def'
name|'pauseProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'paused'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'producer'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'paused'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_buffer'
op|':'
newline|'\n'
comment|'# TODO: Check to see if consumer supports writeSeq.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'write'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'_buffer'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_buffer'
op|'['
op|':'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'iAmStreaming'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'outstandingPull'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'producer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopProducing
dedent|''
dedent|''
name|'def'
name|'stopProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'producer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'stopProducing'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'consumer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'consumer'
newline|'\n'
nl|'\n'
comment|'# Consumer methods:'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'paused'
name|'or'
op|'('
name|'not'
name|'self'
op|'.'
name|'iAmStreaming'
name|'and'
name|'not'
name|'self'
op|'.'
name|'outstandingPull'
op|')'
op|':'
newline|'\n'
comment|'# We could use that fifo queue here.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_buffer'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'consumer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'outstandingPull'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|finish
dedent|''
dedent|''
name|'def'
name|'finish'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'consumer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|registerProducer
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'producer'
op|'='
name|'producer'
newline|'\n'
name|'self'
op|'.'
name|'producerIsStreaming'
op|'='
name|'streaming'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'producer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'producer'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'producerIsStreaming'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'consumer'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<%s@%x around %s>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
name|'id'
op|'('
name|'self'
op|')'
op|','
name|'self'
op|'.'
name|'consumer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProducerConsumerProxy
dedent|''
dedent|''
name|'class'
name|'ProducerConsumerProxy'
op|'('
name|'BasicProducerConsumerProxy'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""ProducerConsumerProxy with a finite buffer.\n\n    When my buffer fills up, I have my parent Producer pause until my buffer\n    has room in it again.\n    """'
newline|'\n'
comment|'# Copies much from abstract.FileDescriptor'
nl|'\n'
DECL|variable|bufferSize
name|'bufferSize'
op|'='
number|'2'
op|'**'
number|'2'
op|'**'
number|'2'
op|'**'
number|'2'
newline|'\n'
nl|'\n'
DECL|variable|producerPaused
name|'producerPaused'
op|'='
name|'False'
newline|'\n'
DECL|variable|unregistered
name|'unregistered'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|pauseProducing
name|'def'
name|'pauseProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Does *not* call up to ProducerConsumerProxy to relay the pause'
nl|'\n'
comment|'# message through to my parent Producer.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'paused'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'paused'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_buffer'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'_buffer'
op|')'
newline|'\n'
name|'bytesSent'
op|'='
name|'self'
op|'.'
name|'_writeSomeData'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'bytesSent'
op|'<'
name|'len'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'unsent'
op|'='
name|'data'
op|'['
name|'bytesSent'
op|':'
op|']'
newline|'\n'
name|'assert'
name|'not'
name|'self'
op|'.'
name|'iAmStreaming'
op|','
op|'('
nl|'\n'
string|'"Streaming producer did not write all its data."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_buffer'
op|'['
op|':'
op|']'
op|'='
op|'['
name|'unsent'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_buffer'
op|'['
op|':'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'bytesSent'
op|'='
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'self'
op|'.'
name|'unregistered'
name|'and'
name|'bytesSent'
name|'and'
name|'not'
name|'self'
op|'.'
name|'_buffer'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'consumer'
name|'is'
name|'not'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'iAmStreaming'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'outstandingPull'
op|'='
name|'not'
name|'bytesSent'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'producer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'bytesBuffered'
op|'='
name|'sum'
op|'('
op|'['
name|'len'
op|'('
name|'s'
op|')'
name|'for'
name|'s'
name|'in'
name|'self'
op|'.'
name|'_buffer'
op|']'
op|')'
newline|'\n'
comment|'# TODO: You can see here the potential for high and low'
nl|'\n'
comment|'# watermarks, where bufferSize would be the high mark when we'
nl|'\n'
comment|"# ask the upstream producer to pause, and we wouldn't have"
nl|'\n'
comment|'# it resume again until it hit the low mark.  Or if producer'
nl|'\n'
comment|"# is Pull, maybe we'd like to pull from it as much as necessary"
nl|'\n'
comment|"# to keep our buffer full to the low mark, so we're never caught"
nl|'\n'
comment|'# without something to send.'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'producerPaused'
name|'and'
op|'('
name|'bytesBuffered'
op|'<'
name|'self'
op|'.'
name|'bufferSize'
op|')'
op|':'
newline|'\n'
comment|'# Now that our buffer is empty,'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'producerPaused'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'outstandingPull'
op|':'
newline|'\n'
comment|'# I did not have any data to write in response to a pull,'
nl|'\n'
comment|"# so I'd better pull some myself."
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
dedent|''
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'paused'
name|'or'
op|'('
name|'not'
name|'self'
op|'.'
name|'iAmStreaming'
name|'and'
name|'not'
name|'self'
op|'.'
name|'outstandingPull'
op|')'
op|':'
newline|'\n'
comment|'# We could use that fifo queue here.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_buffer'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'consumer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'assert'
name|'not'
name|'self'
op|'.'
name|'_buffer'
op|','
op|'('
nl|'\n'
string|'"Writing fresh data to consumer before my buffer is empty!"'
op|')'
newline|'\n'
comment|"# I'm going to use _writeSomeData here so that there is only one"
nl|'\n'
comment|"# path to self.consumer.write.  But it doesn't actually make sense,"
nl|'\n'
comment|'# if I am streaming, for some data to not be all data.  But maybe I'
nl|'\n'
comment|'# am not streaming, but I am writing here anyway, because there was'
nl|'\n'
comment|'# an earlier request for data which was not answered.'
nl|'\n'
name|'bytesSent'
op|'='
name|'self'
op|'.'
name|'_writeSomeData'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'outstandingPull'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'not'
name|'bytesSent'
op|'=='
name|'len'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'assert'
name|'not'
name|'self'
op|'.'
name|'iAmStreaming'
op|','
op|'('
nl|'\n'
string|'"Streaming producer did not write all its data."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_buffer'
op|'.'
name|'append'
op|'('
name|'data'
op|'['
name|'bytesSent'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
op|'('
name|'self'
op|'.'
name|'producer'
name|'is'
name|'not'
name|'None'
op|')'
name|'and'
name|'self'
op|'.'
name|'producerIsStreaming'
op|':'
newline|'\n'
indent|'            '
name|'bytesBuffered'
op|'='
name|'sum'
op|'('
op|'['
name|'len'
op|'('
name|'s'
op|')'
name|'for'
name|'s'
name|'in'
name|'self'
op|'.'
name|'_buffer'
op|']'
op|')'
newline|'\n'
name|'if'
name|'bytesBuffered'
op|'>='
name|'self'
op|'.'
name|'bufferSize'
op|':'
newline|'\n'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'producerPaused'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|registerProducer
dedent|''
dedent|''
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'unregistered'
op|'='
name|'False'
newline|'\n'
name|'BasicProducerConsumerProxy'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'streaming'
op|':'
newline|'\n'
indent|'            '
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'producer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'producer'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'producerIsStreaming'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'unregistered'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'consumer'
name|'and'
name|'not'
name|'self'
op|'.'
name|'_buffer'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_writeSomeData
dedent|''
dedent|''
name|'def'
name|'_writeSomeData'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write as much of this data as possible.\n\n        @returns: The number of bytes written.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'consumer'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

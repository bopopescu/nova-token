begin_unit
comment|'# -*- test-case-name: twisted.lore.test.test_man2lore -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nman2lore: Converts man page source (i.e. groff) into lore-compatible html.\n\nThis is nasty and hackish (and doesn\'t support lots of real groff), but is good\nenough for converting fairly simple man pages.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'re'
op|','
name|'os'
newline|'\n'
nl|'\n'
DECL|variable|quoteRE
name|'quoteRE'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'\'"(.*?)"\''
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|escape
name|'def'
name|'escape'
op|'('
name|'text'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'text'
op|'='
name|'text'
op|'.'
name|'replace'
op|'('
string|"'<'"
op|','
string|"'&lt;'"
op|')'
op|'.'
name|'replace'
op|'('
string|"'>'"
op|','
string|"'&gt;'"
op|')'
newline|'\n'
name|'text'
op|'='
name|'quoteRE'
op|'.'
name|'sub'
op|'('
string|"'<q>\\\\1</q>'"
op|','
name|'text'
op|')'
newline|'\n'
name|'return'
name|'text'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|stripQuotes
dedent|''
name|'def'
name|'stripQuotes'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'s'
op|'['
number|'0'
op|']'
op|'=='
name|'s'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|'\'"\''
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'s'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ManConverter
dedent|''
name|'class'
name|'ManConverter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert a man page to the Lore format.\n\n    @ivar tp: State variable for handling text inside a C{TP} token. It can\n        take values from 0 to 3:\n            - 0: when outside of a C{TP} token.\n            - 1: once a C{TP} token has been encountered. If the previous value\n              was 0, a definition list is started. Then, at the first line of\n              text, a definition term is started.\n            - 2: when the first line after the C{TP} token has been handled.\n              The definition term is closed, and a definition is started with\n              the next line of text.\n            - 3: when the first line as definition data has been handled.\n    @type tp: C{int}\n    """'
newline|'\n'
DECL|variable|state
name|'state'
op|'='
string|"'regular'"
newline|'\n'
DECL|variable|name
name|'name'
op|'='
name|'None'
newline|'\n'
DECL|variable|tp
name|'tp'
op|'='
number|'0'
newline|'\n'
DECL|variable|dl
name|'dl'
op|'='
number|'0'
newline|'\n'
DECL|variable|para
name|'para'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|convert
name|'def'
name|'convert'
op|'('
name|'self'
op|','
name|'inf'
op|','
name|'outf'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'='
name|'outf'
op|'.'
name|'write'
newline|'\n'
name|'longline'
op|'='
string|"''"
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'inf'
op|'.'
name|'readlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'line'
op|'.'
name|'rstrip'
op|'('
op|')'
name|'and'
name|'line'
op|'.'
name|'rstrip'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|"'\\\\'"
op|':'
newline|'\n'
indent|'                '
name|'longline'
op|'+='
name|'line'
op|'.'
name|'rstrip'
op|'('
op|')'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|'+'
string|"' '"
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'longline'
op|':'
newline|'\n'
indent|'                '
name|'line'
op|'='
name|'longline'
op|'+'
name|'line'
newline|'\n'
name|'longline'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'lineReceived'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'closeTags'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'</body>\\n</html>\\n'"
op|')'
newline|'\n'
name|'outf'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'line'
op|'['
number|'0'
op|']'
op|'=='
string|"'.'"
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'macro_'"
op|'+'
name|'line'
op|'['
number|'1'
op|':'
number|'3'
op|']'
op|'.'
name|'rstrip'
op|'('
op|')'
op|'.'
name|'upper'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'('
name|'line'
op|'['
number|'3'
op|':'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'text'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|continueReceived
dedent|''
dedent|''
name|'def'
name|'continueReceived'
op|'('
name|'self'
op|','
name|'cont'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'cont'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'cont'
op|'['
number|'0'
op|']'
op|'.'
name|'isupper'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'macro_'"
op|'+'
name|'cont'
op|'['
op|':'
number|'2'
op|']'
op|'.'
name|'rstrip'
op|'('
op|')'
op|'.'
name|'upper'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'('
name|'cont'
op|'['
number|'2'
op|':'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'text'
op|'('
name|'cont'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|closeTags
dedent|''
dedent|''
name|'def'
name|'closeTags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'state'
op|'!='
string|"'regular'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'('
string|"'</%s>'"
op|'%'
name|'self'
op|'.'
name|'state'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'tp'
op|'=='
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'('
string|"'</dd>\\n\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tp'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'dl'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'('
string|"'</dl>\\n\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dl'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'para'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'('
string|"'</p>\\n\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'para'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|paraCheck
dedent|''
dedent|''
name|'def'
name|'paraCheck'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'tp'
name|'and'
name|'not'
name|'self'
op|'.'
name|'para'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'('
string|"'<p>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'para'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|macro_TH
dedent|''
dedent|''
name|'def'
name|'macro_TH'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
nl|'\n'
string|'\'<?xml version="1.0"?>\\n\''
nl|'\n'
string|'\'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\\n\''
nl|'\n'
string|'\'    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\\n\''
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'<html><head>\\n'"
op|')'
newline|'\n'
name|'parts'
op|'='
op|'['
name|'stripQuotes'
op|'('
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'line'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'2'
op|')'
op|']'
op|'+'
op|'['
string|"''"
op|','
string|"''"
op|']'
newline|'\n'
name|'title'
op|','
name|'manSection'
op|'='
name|'parts'
op|'['
op|':'
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'<title>%s.%s</title>'"
op|'%'
op|'('
name|'title'
op|','
name|'manSection'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'</head>\\n<body>\\n\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'<h1>%s.%s</h1>\\n\\n'"
op|'%'
op|'('
name|'title'
op|','
name|'manSection'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|macro_DT
dedent|''
name|'macro_DT'
op|'='
name|'macro_TH'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|macro_SH
name|'def'
name|'macro_SH'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'closeTags'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'<h2>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'para'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'text'
op|'('
name|'stripQuotes'
op|'('
name|'line'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'para'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'closeTags'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'</h2>\\n\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|macro_B
dedent|''
name|'def'
name|'macro_B'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'words'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'words'
op|'['
number|'0'
op|']'
op|'='
string|"'\\\\fB'"
op|'+'
name|'words'
op|'['
number|'0'
op|']'
op|'+'
string|"'\\\\fR '"
newline|'\n'
name|'self'
op|'.'
name|'text'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
name|'words'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|macro_NM
dedent|''
name|'def'
name|'macro_NM'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'name'
op|':'
newline|'\n'
indent|'           '
name|'self'
op|'.'
name|'name'
op|'='
name|'line'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'text'
op|'('
name|'self'
op|'.'
name|'name'
op|'+'
string|"' '"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|macro_NS
dedent|''
name|'def'
name|'macro_NS'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parts'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"' Ns '"
op|')'
newline|'\n'
name|'i'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'l'
name|'in'
name|'parts'
op|':'
newline|'\n'
indent|'            '
name|'i'
op|'='
name|'not'
name|'i'
newline|'\n'
name|'if'
name|'i'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'text'
op|'('
name|'l'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'continueReceived'
op|'('
name|'l'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|macro_OO
dedent|''
dedent|''
dedent|''
name|'def'
name|'macro_OO'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'text'
op|'('
string|"'['"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'continueReceived'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|macro_OC
dedent|''
name|'def'
name|'macro_OC'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'text'
op|'('
string|"']'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'continueReceived'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|macro_OP
dedent|''
name|'def'
name|'macro_OP'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'text'
op|'('
string|"'['"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'continueReceived'
op|'('
name|'line'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'text'
op|'('
string|"']'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|macro_FL
dedent|''
name|'def'
name|'macro_FL'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parts'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'text'
op|'('
string|"'\\\\fB-%s\\\\fR'"
op|'%'
name|'parts'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'continueReceived'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
name|'parts'
op|'['
number|'1'
op|':'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|macro_AR
dedent|''
name|'def'
name|'macro_AR'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parts'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'text'
op|'('
string|"'\\\\fI %s\\\\fR'"
op|'%'
name|'parts'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'continueReceived'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
name|'parts'
op|'['
number|'1'
op|':'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|macro_PP
dedent|''
name|'def'
name|'macro_PP'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'closeTags'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|macro_IC
dedent|''
name|'def'
name|'macro_IC'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'args'
op|'='
name|'line'
op|'['
name|'line'
op|'.'
name|'index'
op|'('
name|'cmd'
op|')'
op|'+'
name|'len'
op|'('
name|'cmd'
op|')'
op|':'
op|']'
newline|'\n'
name|'args'
op|'='
name|'args'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'text'
op|'='
name|'cmd'
newline|'\n'
name|'while'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'arg'
op|'='
name|'args'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'if'
name|'arg'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|'"ar"'
op|':'
newline|'\n'
indent|'                '
name|'text'
op|'+='
string|'" \\\\fU%s\\\\fR"'
op|'%'
op|'('
name|'args'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'arg'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|'"op"'
op|':'
newline|'\n'
indent|'                '
name|'ign'
op|'='
name|'args'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'text'
op|'+='
string|'" [\\\\fU%s\\\\fR]"'
op|'%'
op|'('
name|'args'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'text'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|macro_TP
dedent|''
name|'def'
name|'macro_TP'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle C{TP} token: start a definition list if it\'s first token, or\n        close previous definition data.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'tp'
op|'=='
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'('
string|"'</dd>\\n\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tp'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'tp'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'<dl>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dl'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|macro_BL
dedent|''
dedent|''
name|'def'
name|'macro_BL'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'<dl>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tp'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|macro_EL
dedent|''
name|'def'
name|'macro_EL'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'tp'
op|'=='
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'('
string|"'</dd>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tp'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'write'
op|'('
string|"'</dl>\\n\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tp'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|macro_IT
dedent|''
name|'def'
name|'macro_IT'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'tp'
op|'=='
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'('
string|"'</dd>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tp'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'continueReceived'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|text
dedent|''
name|'def'
name|'text'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle a line of text without detected token.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'tp'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'('
string|"'<dt>'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'tp'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'('
string|"'<dd>'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'paraCheck'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'bits'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"'\\\\'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
name|'escape'
op|'('
name|'bits'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
name|'for'
name|'bit'
name|'in'
name|'bits'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'bit'
op|'['
op|':'
number|'2'
op|']'
op|'=='
string|"'fI'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'write'
op|'('
string|"'<em>'"
op|'+'
name|'escape'
op|'('
name|'bit'
op|'['
number|'2'
op|':'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'em'"
newline|'\n'
dedent|''
name|'elif'
name|'bit'
op|'['
op|':'
number|'2'
op|']'
op|'=='
string|"'fB'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'write'
op|'('
string|"'<strong>'"
op|'+'
name|'escape'
op|'('
name|'bit'
op|'['
number|'2'
op|':'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'strong'"
newline|'\n'
dedent|''
name|'elif'
name|'bit'
op|'['
op|':'
number|'2'
op|']'
op|'=='
string|"'fR'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'write'
op|'('
string|"'</%s>'"
op|'%'
name|'self'
op|'.'
name|'state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
name|'escape'
op|'('
name|'bit'
op|'['
number|'2'
op|':'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'regular'"
newline|'\n'
dedent|''
name|'elif'
name|'bit'
op|'['
op|':'
number|'2'
op|']'
op|'=='
string|"'fU'"
op|':'
newline|'\n'
comment|"# fU doesn't really exist, but it helps us to manage underlined"
nl|'\n'
comment|'# text.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'write'
op|'('
string|"'<u>'"
op|'+'
name|'escape'
op|'('
name|'bit'
op|'['
number|'2'
op|':'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'u'"
newline|'\n'
dedent|''
name|'elif'
name|'bit'
op|'['
op|':'
number|'3'
op|']'
op|'=='
string|"'(co'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'write'
op|'('
string|"'&copy;'"
op|'+'
name|'escape'
op|'('
name|'bit'
op|'['
number|'3'
op|':'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'write'
op|'('
name|'escape'
op|'('
name|'bit'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'tp'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'('
string|"'</dt>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tp'
op|'='
number|'2'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'tp'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'tp'
op|'='
number|'3'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProcessingFunctionFactory
dedent|''
dedent|''
dedent|''
name|'class'
name|'ProcessingFunctionFactory'
op|':'
newline|'\n'
nl|'\n'
DECL|member|generate_lore
indent|'    '
name|'def'
name|'generate_lore'
op|'('
name|'self'
op|','
name|'d'
op|','
name|'filenameGenerator'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ext'
op|'='
name|'d'
op|'.'
name|'get'
op|'('
string|"'ext'"
op|','
string|"'.html'"
op|')'
newline|'\n'
name|'return'
name|'lambda'
name|'file'
op|','
name|'_'
op|':'
name|'ManConverter'
op|'('
op|')'
op|'.'
name|'convert'
op|'('
name|'open'
op|'('
name|'file'
op|')'
op|','
nl|'\n'
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'file'
op|')'
op|'['
number|'0'
op|']'
op|'+'
name|'ext'
op|','
string|"'w'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|factory
dedent|''
dedent|''
name|'factory'
op|'='
name|'ProcessingFunctionFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'sys'
newline|'\n'
DECL|variable|mc
name|'mc'
op|'='
name|'ManConverter'
op|'('
op|')'
op|'.'
name|'convert'
op|'('
name|'open'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'1'
op|']'
op|')'
op|','
name|'sys'
op|'.'
name|'stdout'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

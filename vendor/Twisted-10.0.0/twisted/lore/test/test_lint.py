begin_unit
comment|'# Copyright (c) 2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.lore.lint}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
name|'import'
name|'minidom'
newline|'\n'
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'lore'
op|'.'
name|'lint'
name|'import'
name|'getDefaultChecker'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'lore'
op|'.'
name|'process'
name|'import'
name|'ProcessingFailure'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DefaultTagCheckerTests
name|'class'
name|'DefaultTagCheckerTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{twisted.lore.lint.DefaultTagChecker}.\n    """'
newline|'\n'
DECL|member|test_quote
name|'def'
name|'test_quote'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a non-comment node contains a quote (C{\'"\'}), the checker returned\n        by L{getDefaultChecker} reports an error and raises\n        L{ProcessingFailure}.\n        """'
newline|'\n'
name|'documentSource'
op|'='
op|'('
nl|'\n'
string|"'<html>'"
nl|'\n'
string|"'<head><title>foo</title></head>'"
nl|'\n'
string|'\'<body><h1>foo</h1><div>"</div></body>\''
nl|'\n'
string|"'</html>'"
op|')'
newline|'\n'
name|'document'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'documentSource'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'checker'
op|'='
name|'getDefaultChecker'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'output'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'patch'
op|'='
name|'self'
op|'.'
name|'patch'
op|'('
name|'sys'
op|','
string|"'stdout'"
op|','
name|'output'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ProcessingFailure'
op|','
name|'checker'
op|'.'
name|'check'
op|','
name|'document'
op|','
name|'filename'
op|')'
newline|'\n'
name|'patch'
op|'.'
name|'restore'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"contains quote"'
op|','
name|'output'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_quoteComment
dedent|''
name|'def'
name|'test_quoteComment'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a comment node contains a quote (C{\'"\'}), the checker returned by\n        L{getDefaultChecker} does not report an error.\n        """'
newline|'\n'
name|'documentSource'
op|'='
op|'('
nl|'\n'
string|"'<html>'"
nl|'\n'
string|"'<head><title>foo</title></head>'"
nl|'\n'
string|'\'<body><h1>foo</h1><!-- " --></body>\''
nl|'\n'
string|"'</html>'"
op|')'
newline|'\n'
name|'document'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'documentSource'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'checker'
op|'='
name|'getDefaultChecker'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'output'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'patch'
op|'='
name|'self'
op|'.'
name|'patch'
op|'('
name|'sys'
op|','
string|"'stdout'"
op|','
name|'output'
op|')'
newline|'\n'
name|'checker'
op|'.'
name|'check'
op|'('
name|'document'
op|','
name|'filename'
op|')'
newline|'\n'
name|'patch'
op|'.'
name|'restore'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_aNode
dedent|''
name|'def'
name|'test_aNode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If there is an <a> tag in the document, the checker returned by\n        L{getDefaultChecker} does not report an error.\n        """'
newline|'\n'
name|'documentSource'
op|'='
op|'('
nl|'\n'
string|"'<html>'"
nl|'\n'
string|"'<head><title>foo</title></head>'"
nl|'\n'
string|"'<body><h1>foo</h1><a>A link.</a></body>'"
nl|'\n'
string|"'</html>'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'_lintCheck'
op|'('
name|'True'
op|','
name|'documentSource'
op|')'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_textMatchesRef
dedent|''
name|'def'
name|'test_textMatchesRef'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an I{a} node has a link with a scheme as its contained text, a\n        warning is emitted if that link does not match the value of the\n        I{href} attribute.\n        """'
newline|'\n'
name|'documentSource'
op|'='
op|'('
nl|'\n'
string|"'<html>'"
nl|'\n'
string|"'<head><title>foo</title></head>'"
nl|'\n'
string|"'<body><h1>foo</h1>'"
nl|'\n'
string|'\'<a href="http://bar/baz">%s</a>\''
nl|'\n'
string|"'</body>'"
nl|'\n'
string|"'</html>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_lintCheck'
op|'('
name|'True'
op|','
name|'documentSource'
op|'%'
op|'('
string|'"http://bar/baz"'
op|','
op|')'
op|')'
op|','
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
nl|'\n'
string|'"link text does not match href"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_lintCheck'
op|'('
name|'False'
op|','
name|'documentSource'
op|'%'
op|'('
string|'"http://bar/quux"'
op|','
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_lintCheck
dedent|''
name|'def'
name|'_lintCheck'
op|'('
name|'self'
op|','
name|'expectSuccess'
op|','
name|'source'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lint the given document source and return the output.\n\n        @param expectSuccess: A flag indicating whether linting is expected\n            to succeed or not.\n\n        @param source: The document source to lint.\n\n        @return: A C{str} of the output of linting.\n        """'
newline|'\n'
name|'document'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'source'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'checker'
op|'='
name|'getDefaultChecker'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'output'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'patch'
op|'='
name|'self'
op|'.'
name|'patch'
op|'('
name|'sys'
op|','
string|"'stdout'"
op|','
name|'output'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'checker'
op|'.'
name|'check'
op|'('
name|'document'
op|','
name|'filename'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'patch'
op|'.'
name|'restore'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'ProcessingFailure'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'expectSuccess'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'expectSuccess'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
nl|'\n'
string|'"Expected checker to fail, but it did not.  "'
nl|'\n'
string|'"Output was: %r"'
op|'%'
op|'('
name|'output'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'output'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.lore.slides}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
op|'.'
name|'minidom'
name|'import'
name|'Element'
op|','
name|'Text'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'lore'
op|'.'
name|'slides'
name|'import'
name|'HTMLSlide'
op|','
name|'splitIntoSlides'
op|','
name|'insertPrevNextLinks'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SlidesTests
name|'class'
name|'SlidesTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for functions in L{twisted.lore.slides}.\n    """'
newline|'\n'
DECL|member|test_splitIntoSlides
name|'def'
name|'test_splitIntoSlides'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{splitIntoSlides} accepts a document and returns a list of two-tuples,\n        each element of which contains the title of a slide taken from an I{h2}\n        element and the body of that slide.\n        """'
newline|'\n'
name|'parent'
op|'='
name|'Element'
op|'('
string|"'html'"
op|')'
newline|'\n'
name|'body'
op|'='
name|'Element'
op|'('
string|"'body'"
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'body'
op|')'
newline|'\n'
nl|'\n'
name|'first'
op|'='
name|'Element'
op|'('
string|"'h2'"
op|')'
newline|'\n'
name|'text'
op|'='
name|'Text'
op|'('
op|')'
newline|'\n'
name|'text'
op|'.'
name|'data'
op|'='
string|"'first slide'"
newline|'\n'
name|'first'
op|'.'
name|'appendChild'
op|'('
name|'text'
op|')'
newline|'\n'
name|'body'
op|'.'
name|'appendChild'
op|'('
name|'first'
op|')'
newline|'\n'
name|'body'
op|'.'
name|'appendChild'
op|'('
name|'Element'
op|'('
string|"'div'"
op|')'
op|')'
newline|'\n'
name|'body'
op|'.'
name|'appendChild'
op|'('
name|'Element'
op|'('
string|"'span'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'second'
op|'='
name|'Element'
op|'('
string|"'h2'"
op|')'
newline|'\n'
name|'text'
op|'='
name|'Text'
op|'('
op|')'
newline|'\n'
name|'text'
op|'.'
name|'data'
op|'='
string|"'second slide'"
newline|'\n'
name|'second'
op|'.'
name|'appendChild'
op|'('
name|'text'
op|')'
newline|'\n'
name|'body'
op|'.'
name|'appendChild'
op|'('
name|'second'
op|')'
newline|'\n'
name|'body'
op|'.'
name|'appendChild'
op|'('
name|'Element'
op|'('
string|"'p'"
op|')'
op|')'
newline|'\n'
name|'body'
op|'.'
name|'appendChild'
op|'('
name|'Element'
op|'('
string|"'br'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'slides'
op|'='
name|'splitIntoSlides'
op|'('
name|'parent'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'slides'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
string|"'first slide'"
op|')'
newline|'\n'
name|'firstContent'
op|'='
name|'slides'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'firstContent'
op|'['
number|'0'
op|']'
op|'.'
name|'tagName'
op|','
string|"'div'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'firstContent'
op|'['
number|'1'
op|']'
op|'.'
name|'tagName'
op|','
string|"'span'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'firstContent'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'slides'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
op|','
string|"'second slide'"
op|')'
newline|'\n'
name|'secondContent'
op|'='
name|'slides'
op|'['
number|'1'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'secondContent'
op|'['
number|'0'
op|']'
op|'.'
name|'tagName'
op|','
string|"'p'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'secondContent'
op|'['
number|'1'
op|']'
op|'.'
name|'tagName'
op|','
string|"'br'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'secondContent'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'slides'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_insertPrevNextText
dedent|''
name|'def'
name|'test_insertPrevNextText'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{insertPrevNextLinks} appends a text node with the title of the\n        previous slide to each node with a I{previous} class and the title of\n        the next slide to each node with a I{next} class.\n        """'
newline|'\n'
name|'next'
op|'='
name|'Element'
op|'('
string|"'span'"
op|')'
newline|'\n'
name|'next'
op|'.'
name|'setAttribute'
op|'('
string|"'class'"
op|','
string|"'next'"
op|')'
newline|'\n'
name|'container'
op|'='
name|'Element'
op|'('
string|"'div'"
op|')'
newline|'\n'
name|'container'
op|'.'
name|'appendChild'
op|'('
name|'next'
op|')'
newline|'\n'
name|'slideWithNext'
op|'='
name|'HTMLSlide'
op|'('
name|'container'
op|','
string|"'first'"
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'previous'
op|'='
name|'Element'
op|'('
string|"'span'"
op|')'
newline|'\n'
name|'previous'
op|'.'
name|'setAttribute'
op|'('
string|"'class'"
op|','
string|"'previous'"
op|')'
newline|'\n'
name|'container'
op|'='
name|'Element'
op|'('
string|"'div'"
op|')'
newline|'\n'
name|'container'
op|'.'
name|'appendChild'
op|'('
name|'previous'
op|')'
newline|'\n'
name|'slideWithPrevious'
op|'='
name|'HTMLSlide'
op|'('
name|'container'
op|','
string|"'second'"
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'insertPrevNextLinks'
op|'('
nl|'\n'
op|'['
name|'slideWithNext'
op|','
name|'slideWithPrevious'
op|']'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'next'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
string|'\'<span class="next">second</span>\''
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'previous'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
string|'\'<span class="previous">first</span>\''
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2008-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
comment|'# ++ single anchor added to individual output file'
nl|'\n'
comment|'# ++ two anchors added to individual output file'
nl|'\n'
comment|'# ++ anchors added to individual output files'
nl|'\n'
comment|'# ++ entry added to index'
nl|'\n'
comment|'# ++ index entry pointing to correct file and anchor'
nl|'\n'
comment|'# ++ multiple entries added to index'
nl|'\n'
comment|'# ++ multiple index entries pointing to correct files and anchors'
nl|'\n'
comment|'# __ all of above for files in deep directory structure'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# ++ group index entries by indexed term'
nl|'\n'
comment|'# ++ sort index entries by indexed term'
nl|'\n'
comment|'# __ hierarchical index entries (e.g. language!programming)'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# ++ add parameter for what the index filename should be'
nl|'\n'
comment|'# ++ add (default) ability to NOT index (if index not specified)'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# ++ put actual index filename into INDEX link (if any) in the template'
nl|'\n'
comment|'# __ make index links RELATIVE!'
nl|'\n'
comment|'# __ make index pay attention to the outputdir!'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# __ make index look nice'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# ++ add section numbers to headers in lore output'
nl|'\n'
comment|'# ++ make text of index entry links be chapter numbers'
nl|'\n'
comment|'# ++ make text of index entry links be section numbers'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# __ put all of our test files someplace neat and tidy'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'shutil'
op|','
name|'errno'
op|','
name|'time'
newline|'\n'
name|'from'
name|'StringIO'
name|'import'
name|'StringIO'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
name|'import'
name|'minidom'
name|'as'
name|'dom'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'versions'
name|'import'
name|'Version'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'lore'
name|'import'
name|'tree'
op|','
name|'process'
op|','
name|'indexer'
op|','
name|'numberer'
op|','
name|'htmlbook'
op|','
name|'default'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'lore'
op|'.'
name|'default'
name|'import'
name|'factory'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'lore'
op|'.'
name|'latex'
name|'import'
name|'LatexSpitter'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'sibpath'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'lore'
op|'.'
name|'scripts'
name|'import'
name|'lore'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'domhelpers'
newline|'\n'
nl|'\n'
DECL|function|sp
name|'def'
name|'sp'
op|'('
name|'originalFileName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'sibpath'
op|'('
name|'__file__'
op|','
name|'originalFileName'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|options
dedent|''
name|'options'
op|'='
op|'{'
string|'"template"'
op|':'
name|'sp'
op|'('
string|'"template.tpl"'
op|')'
op|','
string|"'baseurl'"
op|':'
string|"'%s'"
op|','
string|"'ext'"
op|':'
string|"'.xhtml'"
op|'}'
newline|'\n'
DECL|variable|d
name|'d'
op|'='
name|'options'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_XMLAssertionMixin
name|'class'
name|'_XMLAssertionMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test mixin defining a method for comparing serialized XML documents.\n    """'
newline|'\n'
DECL|member|assertXMLEqual
name|'def'
name|'assertXMLEqual'
op|'('
name|'self'
op|','
name|'first'
op|','
name|'second'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that two strings represent the same XML document.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'dom'
op|'.'
name|'parseString'
op|'('
name|'first'
op|')'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
nl|'\n'
name|'dom'
op|'.'
name|'parseString'
op|'('
name|'second'
op|')'
op|'.'
name|'toxml'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestFactory
dedent|''
dedent|''
name|'class'
name|'TestFactory'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'_XMLAssertionMixin'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|file
indent|'    '
name|'file'
op|'='
name|'sp'
op|'('
string|"'simple.html'"
op|')'
newline|'\n'
DECL|variable|linkrel
name|'linkrel'
op|'='
string|'""'
newline|'\n'
nl|'\n'
DECL|member|assertEqualFiles1
name|'def'
name|'assertEqualFiles1'
op|'('
name|'self'
op|','
name|'exp'
op|','
name|'act'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'exp'
op|'=='
name|'act'
op|')'
op|':'
name|'return'
name|'True'
newline|'\n'
name|'fact'
op|'='
name|'open'
op|'('
name|'act'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqualsFile'
op|'('
name|'exp'
op|','
name|'fact'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertEqualFiles
dedent|''
name|'def'
name|'assertEqualFiles'
op|'('
name|'self'
op|','
name|'exp'
op|','
name|'act'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'exp'
op|'=='
name|'act'
op|')'
op|':'
name|'return'
name|'True'
newline|'\n'
name|'fact'
op|'='
name|'open'
op|'('
name|'sp'
op|'('
name|'act'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqualsFile'
op|'('
name|'exp'
op|','
name|'fact'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertEqualsFile
dedent|''
name|'def'
name|'assertEqualsFile'
op|'('
name|'self'
op|','
name|'exp'
op|','
name|'act'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'expected'
op|'='
name|'open'
op|'('
name|'sp'
op|'('
name|'exp'
op|')'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'act'
op|')'
newline|'\n'
nl|'\n'
DECL|member|makeTemp
dedent|''
name|'def'
name|'makeTemp'
op|'('
name|'self'
op|','
op|'*'
name|'filenames'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmp'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'tmp'
op|')'
newline|'\n'
name|'for'
name|'filename'
name|'in'
name|'filenames'
op|':'
newline|'\n'
indent|'            '
name|'tmpFile'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmp'
op|','
name|'filename'
op|')'
newline|'\n'
name|'shutil'
op|'.'
name|'copyfile'
op|'('
name|'sp'
op|'('
name|'filename'
op|')'
op|','
name|'tmpFile'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'tmp'
newline|'\n'
nl|'\n'
comment|'########################################'
nl|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'indexer'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'numberer'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testProcessingFunctionFactory
dedent|''
name|'def'
name|'testProcessingFunctionFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'simple'
op|'='
name|'base'
op|'.'
name|'child'
op|'('
string|"'simple.html'"
op|')'
newline|'\n'
name|'FilePath'
op|'('
name|'__file__'
op|')'
op|'.'
name|'sibling'
op|'('
string|"'simple.html'"
op|')'
op|'.'
name|'copyTo'
op|'('
name|'simple'
op|')'
newline|'\n'
nl|'\n'
name|'htmlGenerator'
op|'='
name|'factory'
op|'.'
name|'generate_html'
op|'('
name|'options'
op|')'
newline|'\n'
name|'htmlGenerator'
op|'('
name|'simple'
op|'.'
name|'path'
op|','
name|'self'
op|'.'
name|'linkrel'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertXMLEqual'
op|'('
nl|'\n'
string|'"""\\\n<?xml version="1.0" ?><!DOCTYPE html  PUBLIC \'-//W3C//DTD XHTML 1.0 Transitional//EN\'  \'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\'><html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n  <head><title>Twisted Documentation: My Test Lore Input</title></head>\n  <body bgcolor="white">\n    <h1 class="title">My Test Lore Input</h1>\n    <div class="content">\n<span/>\n<p>A Body.</p>\n</div>\n    <a href="index.xhtml">Index</a>\n  </body>\n</html>"""'
op|','
nl|'\n'
name|'simple'
op|'.'
name|'sibling'
op|'('
string|"'simple.xhtml'"
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testProcessingFunctionFactoryWithFilenameGenerator
dedent|''
name|'def'
name|'testProcessingFunctionFactoryWithFilenameGenerator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|filenameGenerator
name|'def'
name|'filenameGenerator'
op|'('
name|'originalFileName'
op|','
name|'outputExtension'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'FilePath'
op|'('
name|'originalFileName'
op|')'
op|'.'
name|'basename'
op|'('
op|')'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'base'
op|'.'
name|'child'
op|'('
name|'name'
op|'+'
name|'outputExtension'
op|')'
op|'.'
name|'path'
newline|'\n'
nl|'\n'
dedent|''
name|'htmlGenerator'
op|'='
name|'factory'
op|'.'
name|'generate_html'
op|'('
name|'options'
op|','
name|'filenameGenerator'
op|')'
newline|'\n'
name|'htmlGenerator'
op|'('
name|'self'
op|'.'
name|'file'
op|','
name|'self'
op|'.'
name|'linkrel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertXMLEqual'
op|'('
nl|'\n'
string|'"""\\\n<?xml version="1.0" ?><!DOCTYPE html  PUBLIC \'-//W3C//DTD XHTML 1.0 Transitional//EN\'  \'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\'><html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n  <head><title>Twisted Documentation: My Test Lore Input</title></head>\n  <body bgcolor="white">\n    <h1 class="title">My Test Lore Input</h1>\n    <div class="content">\n<span/>\n<p>A Body.</p>\n</div>\n    <a href="index.xhtml">Index</a>\n  </body>\n</html>"""'
op|','
nl|'\n'
name|'base'
op|'.'
name|'child'
op|'('
string|'"simple.xhtml"'
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_doFile
dedent|''
name|'def'
name|'test_doFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'simple'
op|'='
name|'base'
op|'.'
name|'child'
op|'('
string|"'simple.html'"
op|')'
newline|'\n'
name|'FilePath'
op|'('
name|'__file__'
op|')'
op|'.'
name|'sibling'
op|'('
string|"'simple.html'"
op|')'
op|'.'
name|'copyTo'
op|'('
name|'simple'
op|')'
newline|'\n'
nl|'\n'
name|'templ'
op|'='
name|'dom'
op|'.'
name|'parse'
op|'('
name|'open'
op|'('
name|'d'
op|'['
string|"'template'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'doFile'
op|'('
name|'simple'
op|'.'
name|'path'
op|','
name|'self'
op|'.'
name|'linkrel'
op|','
name|'d'
op|'['
string|"'ext'"
op|']'
op|','
name|'d'
op|'['
string|"'baseurl'"
op|']'
op|','
name|'templ'
op|','
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertXMLEqual'
op|'('
nl|'\n'
string|'"""\\\n<?xml version="1.0" ?><!DOCTYPE html  PUBLIC \'-//W3C//DTD XHTML 1.0 Transitional//EN\'  \'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\'><html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n  <head><title>Twisted Documentation: My Test Lore Input</title></head>\n  <body bgcolor="white">\n    <h1 class="title">My Test Lore Input</h1>\n    <div class="content">\n<span/>\n<p>A Body.</p>\n</div>\n    <a href="index.xhtml">Index</a>\n  </body>\n</html>"""'
op|','
nl|'\n'
name|'base'
op|'.'
name|'child'
op|'('
string|'"simple.xhtml"'
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_doFile_withFilenameGenerator
dedent|''
name|'def'
name|'test_doFile_withFilenameGenerator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|filenameGenerator
name|'def'
name|'filenameGenerator'
op|'('
name|'originalFileName'
op|','
name|'outputExtension'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'FilePath'
op|'('
name|'originalFileName'
op|')'
op|'.'
name|'basename'
op|'('
op|')'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'base'
op|'.'
name|'child'
op|'('
name|'name'
op|'+'
name|'outputExtension'
op|')'
op|'.'
name|'path'
newline|'\n'
nl|'\n'
dedent|''
name|'templ'
op|'='
name|'dom'
op|'.'
name|'parse'
op|'('
name|'open'
op|'('
name|'d'
op|'['
string|"'template'"
op|']'
op|')'
op|')'
newline|'\n'
name|'tree'
op|'.'
name|'doFile'
op|'('
name|'self'
op|'.'
name|'file'
op|','
name|'self'
op|'.'
name|'linkrel'
op|','
name|'d'
op|'['
string|"'ext'"
op|']'
op|','
name|'d'
op|'['
string|"'baseurl'"
op|']'
op|','
name|'templ'
op|','
name|'d'
op|','
name|'filenameGenerator'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertXMLEqual'
op|'('
nl|'\n'
string|'"""\\\n<?xml version="1.0" ?><!DOCTYPE html  PUBLIC \'-//W3C//DTD XHTML 1.0 Transitional//EN\'  \'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\'><html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n  <head><title>Twisted Documentation: My Test Lore Input</title></head>\n  <body bgcolor="white">\n    <h1 class="title">My Test Lore Input</h1>\n    <div class="content">\n<span/>\n<p>A Body.</p>\n</div>\n    <a href="index.xhtml">Index</a>\n  </body>\n</html>"""'
op|','
nl|'\n'
name|'base'
op|'.'
name|'child'
op|'('
string|'"simple.xhtml"'
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_munge
dedent|''
name|'def'
name|'test_munge'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'indexer'
op|'.'
name|'setIndexFilename'
op|'('
string|'"lore_index_file.html"'
op|')'
newline|'\n'
name|'doc'
op|'='
name|'dom'
op|'.'
name|'parse'
op|'('
name|'open'
op|'('
name|'self'
op|'.'
name|'file'
op|')'
op|')'
newline|'\n'
name|'node'
op|'='
name|'dom'
op|'.'
name|'parse'
op|'('
name|'open'
op|'('
name|'d'
op|'['
string|"'template'"
op|']'
op|')'
op|')'
newline|'\n'
name|'tree'
op|'.'
name|'munge'
op|'('
name|'doc'
op|','
name|'node'
op|','
name|'self'
op|'.'
name|'linkrel'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'self'
op|'.'
name|'file'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'file'
op|','
nl|'\n'
name|'d'
op|'['
string|"'ext'"
op|']'
op|','
name|'d'
op|'['
string|"'baseurl'"
op|']'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertXMLEqual'
op|'('
nl|'\n'
string|'"""\\\n<?xml version="1.0" ?><!DOCTYPE html  PUBLIC \'-//W3C//DTD XHTML 1.0 Transitional//EN\'  \'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\'><html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n  <head><title>Twisted Documentation: My Test Lore Input</title></head>\n  <body bgcolor="white">\n    <h1 class="title">My Test Lore Input</h1>\n    <div class="content">\n<span/>\n<p>A Body.</p>\n</div>\n    <a href="lore_index_file.html">Index</a>\n  </body>\n</html>"""'
op|','
nl|'\n'
name|'node'
op|'.'
name|'toxml'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mungeAuthors
dedent|''
name|'def'
name|'test_mungeAuthors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If there is a node with a I{class} attribute set to C{"authors"},\n        L{tree.munge} adds anchors as children to it, takeing the necessary\n        information from any I{link} nodes in the I{head} with their I{rel}\n        attribute set to C{"author"}.\n        """'
newline|'\n'
name|'document'
op|'='
name|'dom'
op|'.'
name|'parseString'
op|'('
nl|'\n'
string|'"""\\\n<html>\n  <head>\n    <title>munge authors</title>\n    <link rel="author" title="foo" href="bar"/>\n    <link rel="author" title="baz" href="quux"/>\n    <link rel="author" title="foobar" href="barbaz"/>\n  </head>\n  <body>\n    <h1>munge authors</h1>\n  </body>\n</html>"""'
op|')'
newline|'\n'
name|'template'
op|'='
name|'dom'
op|'.'
name|'parseString'
op|'('
nl|'\n'
string|'"""\\\n<html xmlns="http://www.w3.org/1999/xhtml" lang="en">\n  <head>\n    <title />\n  </head>\n\n  <body>\n    <div class="body" />\n    <div class="authors" />\n  </body>\n</html>\n"""'
op|')'
newline|'\n'
name|'tree'
op|'.'
name|'munge'
op|'('
nl|'\n'
name|'document'
op|','
name|'template'
op|','
name|'self'
op|'.'
name|'linkrel'
op|','
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'self'
op|'.'
name|'file'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'file'
op|','
name|'d'
op|'['
string|"'ext'"
op|']'
op|','
name|'d'
op|'['
string|"'baseurl'"
op|']'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertXMLEqual'
op|'('
nl|'\n'
name|'template'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
nl|'\n'
string|'"""\\\n<?xml version="1.0" ?><html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n  <head>\n    <title>munge authors</title>\n  <link href="bar" rel="author" title="foo"/><link href="quux" rel="author" title="baz"/><link href="barbaz" rel="author" title="foobar"/></head>\n\n  <body>\n    <div class="content">\n    <span/>\n  </div>\n    <div class="authors"><span><a href="bar">foo</a>, <a href="quux">baz</a>, and <a href="barbaz">foobar</a></span></div>\n  </body>\n</html>"""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getProcessor
dedent|''
name|'def'
name|'test_getProcessor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'base'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'input'
op|'='
name|'base'
op|'.'
name|'child'
op|'('
string|'"simple3.html"'
op|')'
newline|'\n'
name|'FilePath'
op|'('
name|'__file__'
op|')'
op|'.'
name|'sibling'
op|'('
string|'"simple3.html"'
op|')'
op|'.'
name|'copyTo'
op|'('
name|'input'
op|')'
newline|'\n'
nl|'\n'
name|'options'
op|'='
op|'{'
string|"'template'"
op|':'
name|'sp'
op|'('
string|"'template.tpl'"
op|')'
op|','
string|"'ext'"
op|':'
string|"'.xhtml'"
op|','
string|"'baseurl'"
op|':'
string|"'burl'"
op|','
nl|'\n'
string|"'filenameMapping'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'p'
op|'='
name|'process'
op|'.'
name|'getProcessor'
op|'('
name|'default'
op|','
string|'"html"'
op|','
name|'options'
op|')'
newline|'\n'
name|'p'
op|'('
name|'input'
op|'.'
name|'path'
op|','
name|'self'
op|'.'
name|'linkrel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertXMLEqual'
op|'('
nl|'\n'
string|'"""\\\n<?xml version="1.0" ?><!DOCTYPE html  PUBLIC \'-//W3C//DTD XHTML 1.0 Transitional//EN\'  \'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\'><html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n  <head><title>Twisted Documentation: My Test Lore Input</title></head>\n  <body bgcolor="white">\n    <h1 class="title">My Test Lore Input</h1>\n    <div class="content">\n<span/>\n<p>A Body.</p>\n</div>\n    <a href="index.xhtml">Index</a>\n  </body>\n</html>"""'
op|','
nl|'\n'
name|'base'
op|'.'
name|'child'
op|'('
string|'"simple3.xhtml"'
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_outputdirGenerator
dedent|''
name|'def'
name|'test_outputdirGenerator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'normp'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'normpath'
op|';'
name|'join'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
newline|'\n'
name|'inputdir'
op|'='
name|'normp'
op|'('
name|'join'
op|'('
string|'"/"'
op|','
string|"'home'"
op|','
string|"'joe'"
op|')'
op|')'
newline|'\n'
name|'outputdir'
op|'='
name|'normp'
op|'('
name|'join'
op|'('
string|'"/"'
op|','
string|"'away'"
op|','
string|"'joseph'"
op|')'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'process'
op|'.'
name|'outputdirGenerator'
op|'('
name|'join'
op|'('
string|'"/"'
op|','
string|"'home'"
op|','
string|"'joe'"
op|','
string|'"myfile.html"'
op|')'
op|','
nl|'\n'
string|"'.xhtml'"
op|','
name|'inputdir'
op|','
name|'outputdir'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'normp'
op|'('
name|'join'
op|'('
string|'"/"'
op|','
string|"'away'"
op|','
string|"'joseph'"
op|','
string|"'myfile.xhtml'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|','
name|'actual'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_outputdirGeneratorBadInput
dedent|''
name|'def'
name|'test_outputdirGeneratorBadInput'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'options'
op|'='
op|'{'
string|"'outputdir'"
op|':'
string|"'/away/joseph/'"
op|','
string|"'inputdir'"
op|':'
string|"'/home/joe/'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'process'
op|'.'
name|'outputdirGenerator'
op|','
string|"'.html'"
op|','
string|"'.xhtml'"
op|','
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_makeSureDirectoryExists
dedent|''
name|'def'
name|'test_makeSureDirectoryExists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dirname'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|'"tmp"'
op|','
string|"'nonexistentdir'"
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'dirname'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'rmdir'
op|'('
name|'dirname'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'failIf'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'dirname'
op|')'
op|','
string|'"Hey: someone already created the dir"'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'dirname'
op|','
string|"'newfile'"
op|')'
newline|'\n'
name|'tree'
op|'.'
name|'makeSureDirectoryExists'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'dirname'
op|')'
op|','
string|"'should have created dir'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'rmdir'
op|'('
name|'dirname'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_indexAnchorsAdded
dedent|''
name|'def'
name|'test_indexAnchorsAdded'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'indexer'
op|'.'
name|'setIndexFilename'
op|'('
string|"'theIndexFile.html'"
op|')'
newline|'\n'
comment|'# generate the output file'
nl|'\n'
name|'templ'
op|'='
name|'dom'
op|'.'
name|'parse'
op|'('
name|'open'
op|'('
name|'d'
op|'['
string|"'template'"
op|']'
op|')'
op|')'
newline|'\n'
name|'tmp'
op|'='
name|'self'
op|'.'
name|'makeTemp'
op|'('
string|"'lore_index_test.xhtml'"
op|')'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'doFile'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmp'
op|','
string|"'lore_index_test.xhtml'"
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'linkrel'
op|','
string|"'.html'"
op|','
name|'d'
op|'['
string|"'baseurl'"
op|']'
op|','
name|'templ'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertXMLEqual'
op|'('
nl|'\n'
string|'"""\\\n<?xml version="1.0" ?><!DOCTYPE html  PUBLIC \'-//W3C//DTD XHTML 1.0 Transitional//EN\'  \'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\'><html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n  <head><title>Twisted Documentation: The way of the program</title></head>\n  <body bgcolor="white">\n    <h1 class="title">The way of the program</h1>\n    <div class="content">\n\n<span/>\n\n<p>The first paragraph.</p>\n\n\n<h2>The Python programming language<a name="auto0"/></h2>\n<a name="index01"/>\n<a name="index02"/>\n\n<p>The second paragraph.</p>\n\n\n</div>\n    <a href="theIndexFile.html">Index</a>\n  </body>\n</html>"""'
op|','
nl|'\n'
name|'FilePath'
op|'('
name|'tmp'
op|')'
op|'.'
name|'child'
op|'('
string|'"lore_index_test.html"'
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_indexEntriesAdded
dedent|''
name|'def'
name|'test_indexEntriesAdded'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'indexer'
op|'.'
name|'addEntry'
op|'('
string|"'lore_index_test.html'"
op|','
string|"'index02'"
op|','
string|"'language of programming'"
op|','
string|"'1.3'"
op|')'
newline|'\n'
name|'indexer'
op|'.'
name|'addEntry'
op|'('
string|"'lore_index_test.html'"
op|','
string|"'index01'"
op|','
string|"'programming language'"
op|','
string|"'1.2'"
op|')'
newline|'\n'
name|'indexer'
op|'.'
name|'setIndexFilename'
op|'('
string|'"lore_index_file.html"'
op|')'
newline|'\n'
name|'indexer'
op|'.'
name|'generateIndex'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqualFiles1'
op|'('
string|'"lore_index_file_out.html"'
op|','
string|'"lore_index_file.html"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_book
dedent|''
name|'def'
name|'test_book'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmp'
op|'='
name|'self'
op|'.'
name|'makeTemp'
op|'('
op|')'
newline|'\n'
name|'inputFilename'
op|'='
name|'sp'
op|'('
string|"'lore_index_test.xhtml'"
op|')'
newline|'\n'
nl|'\n'
name|'bookFilename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmp'
op|','
string|"'lore_test_book.book'"
op|')'
newline|'\n'
name|'bf'
op|'='
name|'open'
op|'('
name|'bookFilename'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'bf'
op|'.'
name|'write'
op|'('
string|'\'Chapter(r"%s", None)\\r\\n\''
op|'%'
name|'inputFilename'
op|')'
newline|'\n'
name|'bf'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'book'
op|'='
name|'htmlbook'
op|'.'
name|'Book'
op|'('
name|'bookFilename'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'indexFilename'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'chapters'"
op|':'
op|'['
op|'('
name|'inputFilename'
op|','
name|'None'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'dct'
op|'='
name|'book'
op|'.'
name|'__dict__'
newline|'\n'
name|'for'
name|'k'
name|'in'
name|'dct'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'dct'
op|'['
name|'k'
op|']'
op|','
name|'expected'
op|'['
name|'k'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_runningLore
dedent|''
dedent|''
name|'def'
name|'test_runningLore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'options'
op|'='
name|'lore'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'tmp'
op|'='
name|'self'
op|'.'
name|'makeTemp'
op|'('
string|"'lore_index_test.xhtml'"
op|')'
newline|'\n'
nl|'\n'
name|'templateFilename'
op|'='
name|'sp'
op|'('
string|"'template.tpl'"
op|')'
newline|'\n'
name|'inputFilename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmp'
op|','
string|"'lore_index_test.xhtml'"
op|')'
newline|'\n'
name|'indexFilename'
op|'='
string|"'theIndexFile'"
newline|'\n'
nl|'\n'
name|'bookFilename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmp'
op|','
string|"'lore_test_book.book'"
op|')'
newline|'\n'
name|'bf'
op|'='
name|'open'
op|'('
name|'bookFilename'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'bf'
op|'.'
name|'write'
op|'('
string|'\'Chapter(r"%s", None)\\n\''
op|'%'
name|'inputFilename'
op|')'
newline|'\n'
name|'bf'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'options'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--null'"
op|','
string|"'--book=%s'"
op|'%'
name|'bookFilename'
op|','
nl|'\n'
string|"'--config'"
op|','
string|"'template=%s'"
op|'%'
name|'templateFilename'
op|','
nl|'\n'
string|"'--index=%s'"
op|'%'
name|'indexFilename'
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'result'
op|'='
name|'lore'
op|'.'
name|'runGivenOptions'
op|'('
name|'options'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'None'
op|','
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqualFiles1'
op|'('
string|'"lore_index_file_unnumbered_out.html"'
op|','
name|'indexFilename'
op|'+'
string|'".html"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_runningLoreMultipleFiles
dedent|''
name|'def'
name|'test_runningLoreMultipleFiles'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmp'
op|'='
name|'self'
op|'.'
name|'makeTemp'
op|'('
string|"'lore_index_test.xhtml'"
op|','
string|"'lore_index_test2.xhtml'"
op|')'
newline|'\n'
name|'templateFilename'
op|'='
name|'sp'
op|'('
string|"'template.tpl'"
op|')'
newline|'\n'
name|'inputFilename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmp'
op|','
string|"'lore_index_test.xhtml'"
op|')'
newline|'\n'
name|'inputFilename2'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmp'
op|','
string|"'lore_index_test2.xhtml'"
op|')'
newline|'\n'
name|'indexFilename'
op|'='
string|"'theIndexFile'"
newline|'\n'
nl|'\n'
name|'bookFilename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmp'
op|','
string|"'lore_test_book.book'"
op|')'
newline|'\n'
name|'bf'
op|'='
name|'open'
op|'('
name|'bookFilename'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'bf'
op|'.'
name|'write'
op|'('
string|'\'Chapter(r"%s", None)\\n\''
op|'%'
name|'inputFilename'
op|')'
newline|'\n'
name|'bf'
op|'.'
name|'write'
op|'('
string|'\'Chapter(r"%s", None)\\n\''
op|'%'
name|'inputFilename2'
op|')'
newline|'\n'
name|'bf'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'options'
op|'='
name|'lore'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--null'"
op|','
string|"'--book=%s'"
op|'%'
name|'bookFilename'
op|','
nl|'\n'
string|"'--config'"
op|','
string|"'template=%s'"
op|'%'
name|'templateFilename'
op|','
nl|'\n'
string|"'--index=%s'"
op|'%'
name|'indexFilename'
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'result'
op|'='
name|'lore'
op|'.'
name|'runGivenOptions'
op|'('
name|'options'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'None'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
comment|"# XXX This doesn't seem like a very good index file."
nl|'\n'
string|'"""\\\naahz: <a href="lore_index_test2.html#index03">link</a><br />\naahz2: <a href="lore_index_test2.html#index02">link</a><br />\nlanguage of programming: <a href="lore_index_test.html#index02">link</a>, <a href="lore_index_test2.html#index01">link</a><br />\nprogramming language: <a href="lore_index_test.html#index01">link</a><br />\n"""'
op|','
nl|'\n'
name|'file'
op|'('
name|'FilePath'
op|'('
name|'indexFilename'
op|'+'
string|'".html"'
op|')'
op|'.'
name|'path'
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertXMLEqual'
op|'('
nl|'\n'
string|'"""\\\n<?xml version="1.0" ?><!DOCTYPE html  PUBLIC \'-//W3C//DTD XHTML 1.0 Transitional//EN\'  \'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\'><html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n  <head><title>Twisted Documentation: The way of the program</title></head>\n  <body bgcolor="white">\n    <h1 class="title">The way of the program</h1>\n    <div class="content">\n\n<span/>\n\n<p>The first paragraph.</p>\n\n\n<h2>The Python programming language<a name="auto0"/></h2>\n<a name="index01"/>\n<a name="index02"/>\n\n<p>The second paragraph.</p>\n\n\n</div>\n    <a href="theIndexFile.html">Index</a>\n  </body>\n</html>"""'
op|','
nl|'\n'
name|'FilePath'
op|'('
name|'tmp'
op|')'
op|'.'
name|'child'
op|'('
string|'"lore_index_test.html"'
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertXMLEqual'
op|'('
nl|'\n'
string|'"""\\\n<?xml version="1.0" ?><!DOCTYPE html  PUBLIC \'-//W3C//DTD XHTML 1.0 Transitional//EN\'  \'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\'><html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n  <head><title>Twisted Documentation: The second page to index</title></head>\n  <body bgcolor="white">\n    <h1 class="title">The second page to index</h1>\n    <div class="content">\n\n<span/>\n\n<p>The first paragraph of the second page.</p>\n\n\n<h2>The Jython programming language<a name="auto0"/></h2>\n<a name="index01"/>\n<a name="index02"/>\n<a name="index03"/>\n\n<p>The second paragraph of the second page.</p>\n\n\n</div>\n    <a href="theIndexFile.html">Index</a>\n  </body>\n</html>"""'
op|','
nl|'\n'
name|'FilePath'
op|'('
name|'tmp'
op|')'
op|'.'
name|'child'
op|'('
string|'"lore_index_test2.html"'
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|XXXtest_NumberedSections
dedent|''
name|'def'
name|'XXXtest_NumberedSections'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# run two files through lore, with numbering turned on'
nl|'\n'
comment|'# every h2 should be numbered:'
nl|'\n'
comment|"# first  file's h2s should be 1.1, 1.2"
nl|'\n'
comment|"# second file's h2s should be 2.1, 2.2"
nl|'\n'
indent|'        '
name|'templateFilename'
op|'='
name|'sp'
op|'('
string|"'template.tpl'"
op|')'
newline|'\n'
name|'inputFilename'
op|'='
name|'sp'
op|'('
string|"'lore_numbering_test.xhtml'"
op|')'
newline|'\n'
name|'inputFilename2'
op|'='
name|'sp'
op|'('
string|"'lore_numbering_test2.xhtml'"
op|')'
newline|'\n'
name|'indexFilename'
op|'='
string|"'theIndexFile'"
newline|'\n'
nl|'\n'
comment|'# you can number without a book:'
nl|'\n'
name|'options'
op|'='
name|'lore'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--null'"
op|','
nl|'\n'
string|"'--index=%s'"
op|'%'
name|'indexFilename'
op|','
nl|'\n'
string|"'--config'"
op|','
string|"'template=%s'"
op|'%'
name|'templateFilename'
op|','
nl|'\n'
string|"'--config'"
op|','
string|"'ext=%s'"
op|'%'
string|'".tns"'
op|','
nl|'\n'
string|"'--number'"
op|','
nl|'\n'
name|'inputFilename'
op|','
name|'inputFilename2'
op|']'
op|')'
newline|'\n'
name|'result'
op|'='
name|'lore'
op|'.'
name|'runGivenOptions'
op|'('
name|'options'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'None'
op|','
name|'result'
op|')'
newline|'\n'
comment|'#self.assertEqualFiles1("lore_index_file_out_multiple.html", indexFilename + ".tns")'
nl|'\n'
comment|'#                       VVV change to new, numbered files'
nl|'\n'
name|'self'
op|'.'
name|'assertEqualFiles'
op|'('
string|'"lore_numbering_test_out.html"'
op|','
string|'"lore_numbering_test.tns"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqualFiles'
op|'('
string|'"lore_numbering_test_out2.html"'
op|','
string|'"lore_numbering_test2.tns"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setTitle
dedent|''
name|'def'
name|'test_setTitle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tree.setTitle} inserts the given title into the first I{title}\n        element and the first element with the I{title} class in the given\n        template.\n        """'
newline|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'div'"
op|')'
newline|'\n'
name|'firstTitle'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'title'"
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'firstTitle'
op|')'
newline|'\n'
name|'secondTitle'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'span'"
op|')'
newline|'\n'
name|'secondTitle'
op|'.'
name|'setAttribute'
op|'('
string|"'class'"
op|','
string|"'title'"
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'secondTitle'
op|')'
newline|'\n'
nl|'\n'
name|'titleNodes'
op|'='
op|'['
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
op|']'
newline|'\n'
comment|'# minidom has issues with cloning documentless-nodes.  See Python issue'
nl|'\n'
comment|'# 4851.'
nl|'\n'
name|'titleNodes'
op|'['
number|'0'
op|']'
op|'.'
name|'ownerDocument'
op|'='
name|'dom'
op|'.'
name|'Document'
op|'('
op|')'
newline|'\n'
name|'titleNodes'
op|'['
number|'0'
op|']'
op|'.'
name|'data'
op|'='
string|"'foo bar'"
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'setTitle'
op|'('
name|'parent'
op|','
name|'titleNodes'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'firstTitle'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
string|"'<title>foo bar</title>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'secondTitle'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
string|'\'<span class="title">foo bar</span>\''
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setTitleWithChapter
dedent|''
name|'def'
name|'test_setTitleWithChapter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tree.setTitle} includes a chapter number if it is passed one.\n        """'
newline|'\n'
name|'document'
op|'='
name|'dom'
op|'.'
name|'Document'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'div'"
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'ownerDocument'
op|'='
name|'document'
newline|'\n'
nl|'\n'
name|'title'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'title'"
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'title'
op|')'
newline|'\n'
nl|'\n'
name|'titleNodes'
op|'='
op|'['
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
op|']'
newline|'\n'
name|'titleNodes'
op|'['
number|'0'
op|']'
op|'.'
name|'ownerDocument'
op|'='
name|'document'
newline|'\n'
name|'titleNodes'
op|'['
number|'0'
op|']'
op|'.'
name|'data'
op|'='
string|"'foo bar'"
newline|'\n'
nl|'\n'
comment|'# Oh yea.  The numberer has to agree to put the chapter number in, too.'
nl|'\n'
name|'numberer'
op|'.'
name|'setNumberSections'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'setTitle'
op|'('
name|'parent'
op|','
name|'titleNodes'
op|','
string|"'13'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'title'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
string|"'<title>13. foo bar</title>'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setIndexLink
dedent|''
name|'def'
name|'test_setIndexLink'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Tests to make sure that index links are processed when an index page\n        exists and removed when there is not.\n        """'
newline|'\n'
name|'templ'
op|'='
name|'dom'
op|'.'
name|'parse'
op|'('
name|'open'
op|'('
name|'d'
op|'['
string|"'template'"
op|']'
op|')'
op|')'
newline|'\n'
name|'indexFilename'
op|'='
string|"'theIndexFile'"
newline|'\n'
name|'numLinks'
op|'='
name|'len'
op|'('
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'templ'
op|','
nl|'\n'
string|'"class"'
op|','
nl|'\n'
string|'"index-link"'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# if our testing template has no index-link nodes, complain about it'
nl|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
nl|'\n'
op|'['
op|']'
op|','
nl|'\n'
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'templ'
op|','
nl|'\n'
string|'"class"'
op|','
nl|'\n'
string|'"index-link"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'setIndexLink'
op|'('
name|'templ'
op|','
name|'indexFilename'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
op|'['
op|']'
op|','
nl|'\n'
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'templ'
op|','
nl|'\n'
string|'"class"'
op|','
nl|'\n'
string|'"index-link"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'indexLinks'
op|'='
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'templ'
op|','
nl|'\n'
string|'"href"'
op|','
nl|'\n'
name|'indexFilename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'indexLinks'
op|')'
op|'>='
name|'numLinks'
op|')'
newline|'\n'
nl|'\n'
name|'templ'
op|'='
name|'dom'
op|'.'
name|'parse'
op|'('
name|'open'
op|'('
name|'d'
op|'['
string|"'template'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
nl|'\n'
op|'['
op|']'
op|','
nl|'\n'
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'templ'
op|','
nl|'\n'
string|'"class"'
op|','
nl|'\n'
string|'"index-link"'
op|')'
op|')'
newline|'\n'
name|'indexFilename'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'setIndexLink'
op|'('
name|'templ'
op|','
name|'indexFilename'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
op|'['
op|']'
op|','
nl|'\n'
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'templ'
op|','
nl|'\n'
string|'"class"'
op|','
nl|'\n'
string|'"index-link"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addMtime
dedent|''
name|'def'
name|'test_addMtime'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tree.addMtime} inserts a text node giving the last modification time\n        of the specified file wherever it encounters an element with the\n        I{mtime} class.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'setContent'
op|'('
string|"''"
op|')'
newline|'\n'
name|'when'
op|'='
name|'time'
op|'.'
name|'ctime'
op|'('
name|'path'
op|'.'
name|'getModificationTime'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'div'"
op|')'
newline|'\n'
name|'mtime'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'span'"
op|')'
newline|'\n'
name|'mtime'
op|'.'
name|'setAttribute'
op|'('
string|"'class'"
op|','
string|"'mtime'"
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'mtime'
op|')'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'addMtime'
op|'('
name|'parent'
op|','
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'mtime'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
string|'\'<span class="mtime">\''
op|'+'
name|'when'
op|'+'
string|"'</span>'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_makeLineNumbers
dedent|''
name|'def'
name|'test_makeLineNumbers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tree._makeLineNumbers} takes an integer and returns a I{p} tag with\n        that number of line numbers in it.\n        """'
newline|'\n'
name|'numbers'
op|'='
name|'tree'
op|'.'
name|'_makeLineNumbers'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'numbers'
op|'.'
name|'tagName'
op|','
string|"'p'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'numbers'
op|'.'
name|'getAttribute'
op|'('
string|"'class'"
op|')'
op|','
string|"'py-linenumber'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'numbers'
op|'.'
name|'firstChild'
op|','
name|'dom'
op|'.'
name|'Text'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'numbers'
op|'.'
name|'firstChild'
op|'.'
name|'nodeValue'
op|','
string|"'1\\n'"
op|')'
newline|'\n'
nl|'\n'
name|'numbers'
op|'='
name|'tree'
op|'.'
name|'_makeLineNumbers'
op|'('
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'numbers'
op|'.'
name|'tagName'
op|','
string|"'p'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'numbers'
op|'.'
name|'getAttribute'
op|'('
string|"'class'"
op|')'
op|','
string|"'py-linenumber'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'numbers'
op|'.'
name|'firstChild'
op|','
name|'dom'
op|'.'
name|'Text'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'numbers'
op|'.'
name|'firstChild'
op|'.'
name|'nodeValue'
op|','
nl|'\n'
string|"' 1\\n 2\\n 3\\n 4\\n 5\\n'"
nl|'\n'
string|"' 6\\n 7\\n 8\\n 9\\n10\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fontifyPythonNode
dedent|''
name|'def'
name|'test_fontifyPythonNode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tree.fontifyPythonNode} accepts a text node and replaces it in its\n        parent with a syntax colored and line numbered version of the Python\n        source it contains.\n        """'
newline|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'div'"
op|')'
newline|'\n'
name|'source'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'source'
op|'.'
name|'data'
op|'='
string|"'def foo():\\n    pass\\n'"
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'source'
op|')'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'fontifyPythonNode'
op|'('
name|'source'
op|')'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
string|'"""\\\n<div><pre class="python"><p class="py-linenumber">1\n2\n</p><span class="py-src-keyword">def</span> <span class="py-src-identifier">foo</span>():\n    <span class="py-src-keyword">pass</span>\n</pre></div>"""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parent'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addPyListings
dedent|''
name|'def'
name|'test_addPyListings'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tree.addPyListings} accepts a document with nodes with their I{class}\n        attribute set to I{py-listing} and replaces those nodes with Python\n        source listings from the file given by the node\'s I{href} attribute.\n        """'
newline|'\n'
name|'listingPath'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'listingPath'
op|'.'
name|'setContent'
op|'('
string|"'def foo():\\n    pass\\n'"
op|')'
newline|'\n'
nl|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'div'"
op|')'
newline|'\n'
name|'listing'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'listing'
op|'.'
name|'setAttribute'
op|'('
string|"'href'"
op|','
name|'listingPath'
op|'.'
name|'basename'
op|'('
op|')'
op|')'
newline|'\n'
name|'listing'
op|'.'
name|'setAttribute'
op|'('
string|"'class'"
op|','
string|"'py-listing'"
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'listing'
op|')'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'addPyListings'
op|'('
name|'parent'
op|','
name|'listingPath'
op|'.'
name|'dirname'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
string|'"""\\\n<div><div class="py-listing"><pre><p class="py-linenumber">1\n2\n</p><span class="py-src-keyword">def</span> <span class="py-src-identifier">foo</span>():\n    <span class="py-src-keyword">pass</span>\n</pre><div class="caption"> - <a href="temp"><span class="filename">temp</span></a></div></div></div>"""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parent'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addPyListingsSkipLines
dedent|''
name|'def'
name|'test_addPyListingsSkipLines'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a node with the I{py-listing} class also has a I{skipLines}\n        attribute, that number of lines from the beginning of the source\n        listing are omitted.\n        """'
newline|'\n'
name|'listingPath'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'listingPath'
op|'.'
name|'setContent'
op|'('
string|"'def foo():\\n    pass\\n'"
op|')'
newline|'\n'
nl|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'div'"
op|')'
newline|'\n'
name|'listing'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'listing'
op|'.'
name|'setAttribute'
op|'('
string|"'href'"
op|','
name|'listingPath'
op|'.'
name|'basename'
op|'('
op|')'
op|')'
newline|'\n'
name|'listing'
op|'.'
name|'setAttribute'
op|'('
string|"'class'"
op|','
string|"'py-listing'"
op|')'
newline|'\n'
name|'listing'
op|'.'
name|'setAttribute'
op|'('
string|"'skipLines'"
op|','
number|'1'
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'listing'
op|')'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'addPyListings'
op|'('
name|'parent'
op|','
name|'listingPath'
op|'.'
name|'dirname'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
string|'"""\\\n<div><div class="py-listing"><pre><p class="py-linenumber">1\n</p>    <span class="py-src-keyword">pass</span>\n</pre><div class="caption"> - <a href="temp"><span class="filename">temp</span></a></div></div></div>"""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parent'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fixAPI
dedent|''
name|'def'
name|'test_fixAPI'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The element passed to L{tree.fixAPI} has all of its children with the\n        I{API} class rewritten to contain links to the API which is referred to\n        by the text they contain.\n        """'
newline|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'div'"
op|')'
newline|'\n'
name|'link'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'span'"
op|')'
newline|'\n'
name|'link'
op|'.'
name|'setAttribute'
op|'('
string|"'class'"
op|','
string|"'API'"
op|')'
newline|'\n'
name|'text'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'text'
op|'.'
name|'data'
op|'='
string|"'foo'"
newline|'\n'
name|'link'
op|'.'
name|'appendChild'
op|'('
name|'text'
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'link'
op|')'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'fixAPI'
op|'('
name|'parent'
op|','
string|"'http://example.com/%s'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'parent'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
nl|'\n'
string|'\'<div><span class="API">\''
nl|'\n'
string|'\'<a href="http://example.com/foo" title="foo">foo</a>\''
nl|'\n'
string|"'</span></div>'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fixAPIBase
dedent|''
name|'def'
name|'test_fixAPIBase'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a node with the I{API} class and a value for the I{base} attribute\n        is included in the DOM passed to L{tree.fixAPI}, the link added to that\n        node refers to the API formed by joining the value of the I{base}\n        attribute to the text contents of the node.\n        """'
newline|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'div'"
op|')'
newline|'\n'
name|'link'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'span'"
op|')'
newline|'\n'
name|'link'
op|'.'
name|'setAttribute'
op|'('
string|"'class'"
op|','
string|"'API'"
op|')'
newline|'\n'
name|'link'
op|'.'
name|'setAttribute'
op|'('
string|"'base'"
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'text'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'text'
op|'.'
name|'data'
op|'='
string|"'baz'"
newline|'\n'
name|'link'
op|'.'
name|'appendChild'
op|'('
name|'text'
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'link'
op|')'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'fixAPI'
op|'('
name|'parent'
op|','
string|"'http://example.com/%s'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'parent'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
nl|'\n'
string|'\'<div><span class="API">\''
nl|'\n'
string|'\'<a href="http://example.com/bar.baz" title="bar.baz">baz</a>\''
nl|'\n'
string|"'</span></div>'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fixLinks
dedent|''
name|'def'
name|'test_fixLinks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Links in the nodes of the DOM passed to L{tree.fixLinks} have their\n        extensions rewritten to the given extension.\n        """'
newline|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'div'"
op|')'
newline|'\n'
name|'link'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'link'
op|'.'
name|'setAttribute'
op|'('
string|"'href'"
op|','
string|"'foo.html'"
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'link'
op|')'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'fixLinks'
op|'('
name|'parent'
op|','
string|"'.xhtml'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parent'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
string|'\'<div><a href="foo.xhtml"/></div>\''
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setVersion
dedent|''
name|'def'
name|'test_setVersion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Nodes of the DOM passed to L{tree.setVersion} which have the I{version}\n        class have the given version added to them a child.\n        """'
newline|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'div'"
op|')'
newline|'\n'
name|'version'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'span'"
op|')'
newline|'\n'
name|'version'
op|'.'
name|'setAttribute'
op|'('
string|"'class'"
op|','
string|"'version'"
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'version'
op|')'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'setVersion'
op|'('
name|'parent'
op|','
string|"'1.2.3'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'parent'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
string|'\'<div><span class="version">1.2.3</span></div>\''
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_footnotes
dedent|''
name|'def'
name|'test_footnotes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tree.footnotes} finds all of the nodes with the I{footnote} class in\n        the DOM passed to it and adds a footnotes section to the end of the\n        I{body} element which includes them.  It also inserts links to those\n        footnotes from the original definition location.\n        """'
newline|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'div'"
op|')'
newline|'\n'
name|'body'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'body'"
op|')'
newline|'\n'
name|'footnote'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'span'"
op|')'
newline|'\n'
name|'footnote'
op|'.'
name|'setAttribute'
op|'('
string|"'class'"
op|','
string|"'footnote'"
op|')'
newline|'\n'
name|'text'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'text'
op|'.'
name|'data'
op|'='
string|"'this is the footnote'"
newline|'\n'
name|'footnote'
op|'.'
name|'appendChild'
op|'('
name|'text'
op|')'
newline|'\n'
name|'body'
op|'.'
name|'appendChild'
op|'('
name|'footnote'
op|')'
newline|'\n'
name|'body'
op|'.'
name|'appendChild'
op|'('
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'p'"
op|')'
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'body'
op|')'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'footnotes'
op|'('
name|'parent'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'parent'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
nl|'\n'
string|"'<div><body>'"
nl|'\n'
string|'\'<a href="#footnote-1" title="this is the footnote">\''
nl|'\n'
string|"'<super>1</super>'"
nl|'\n'
string|"'</a>'"
nl|'\n'
string|"'<p/>'"
nl|'\n'
string|"'<h2>Footnotes</h2>'"
nl|'\n'
string|'\'<ol><li><a name="footnote-1">\''
nl|'\n'
string|'\'<span class="footnote">this is the footnote</span>\''
nl|'\n'
string|"'</a></li></ol>'"
nl|'\n'
string|"'</body></div>'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_generateTableOfContents
dedent|''
name|'def'
name|'test_generateTableOfContents'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tree.generateToC} returns an element which contains a table of\n        contents generated from the headers in the document passed to it.\n        """'
newline|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'body'"
op|')'
newline|'\n'
name|'header'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'h2'"
op|')'
newline|'\n'
name|'text'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'text'
op|'.'
name|'data'
op|'='
string|"u'header & special character'"
newline|'\n'
name|'header'
op|'.'
name|'appendChild'
op|'('
name|'text'
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'header'
op|')'
newline|'\n'
name|'subheader'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'h3'"
op|')'
newline|'\n'
name|'text'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'text'
op|'.'
name|'data'
op|'='
string|"'subheader'"
newline|'\n'
name|'subheader'
op|'.'
name|'appendChild'
op|'('
name|'text'
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'subheader'
op|')'
newline|'\n'
nl|'\n'
name|'tableOfContents'
op|'='
name|'tree'
op|'.'
name|'generateToC'
op|'('
name|'parent'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'tableOfContents'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
nl|'\n'
string|'\'<ol><li><a href="#auto0">header &amp; special character</a></li><ul><li><a href="#auto1">subheader</a></li></ul></ol>\''
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'header'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
nl|'\n'
string|'\'<h2>header &amp; special character<a name="auto0"/></h2>\''
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'subheader'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
nl|'\n'
string|'\'<h3>subheader<a name="auto1"/></h3>\''
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_putInToC
dedent|''
name|'def'
name|'test_putInToC'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tree.putInToC} replaces all of the children of the first node with\n        the I{toc} class with the given node representing a table of contents.\n        """'
newline|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'div'"
op|')'
newline|'\n'
name|'toc'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'span'"
op|')'
newline|'\n'
name|'toc'
op|'.'
name|'setAttribute'
op|'('
string|"'class'"
op|','
string|"'toc'"
op|')'
newline|'\n'
name|'toc'
op|'.'
name|'appendChild'
op|'('
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'toc'
op|')'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'putInToC'
op|'('
name|'parent'
op|','
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'toc'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'toc'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
string|'\'<span class="toc"><toc/></span>\''
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidTableOfContents
dedent|''
name|'def'
name|'test_invalidTableOfContents'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If passed a document with I{h3} elements before any I{h2} element,\n        L{tree.generateToC} raises L{ValueError} explaining that this is not a\n        valid document.\n        """'
newline|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'body'"
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'h3'"
op|')'
op|')'
newline|'\n'
name|'err'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'tree'
op|'.'
name|'generateToC'
op|','
name|'parent'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'str'
op|'('
name|'err'
op|')'
op|','
string|'"No H3 element is allowed until after an H2 element"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_notes
dedent|''
name|'def'
name|'test_notes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tree.notes} inserts some additional markup before the first child of\n        any node with the I{note} class.\n        """'
newline|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'div'"
op|')'
newline|'\n'
name|'noteworthy'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'span'"
op|')'
newline|'\n'
name|'noteworthy'
op|'.'
name|'setAttribute'
op|'('
string|"'class'"
op|','
string|"'note'"
op|')'
newline|'\n'
name|'noteworthy'
op|'.'
name|'appendChild'
op|'('
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'noteworthy'
op|')'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'notes'
op|'('
name|'parent'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'noteworthy'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
nl|'\n'
string|'\'<span class="note"><strong>Note: </strong><foo/></span>\''
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_findNodeJustBefore
dedent|''
name|'def'
name|'test_findNodeJustBefore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tree.findNodeJustBefore} returns the previous sibling of the node it\n        is passed.  The list of nodes passed in is ignored.\n        """'
newline|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'div'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'target'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'bar'"
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'result'
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'target'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'tree'
op|'.'
name|'findNodeJustBefore'
op|'('
name|'target'
op|','
op|'['
name|'parent'
op|','
name|'result'
op|']'
op|')'
op|','
nl|'\n'
name|'result'
op|')'
newline|'\n'
nl|'\n'
comment|'# Also, support other configurations.  This is a really not nice API.'
nl|'\n'
name|'newTarget'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'baz'"
op|')'
newline|'\n'
name|'target'
op|'.'
name|'appendChild'
op|'('
name|'newTarget'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'tree'
op|'.'
name|'findNodeJustBefore'
op|'('
name|'newTarget'
op|','
op|'['
name|'parent'
op|','
name|'result'
op|']'
op|')'
op|','
nl|'\n'
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getSectionNumber
dedent|''
name|'def'
name|'test_getSectionNumber'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tree.getSectionNumber} accepts an I{H2} element and returns its text\n        content.\n        """'
newline|'\n'
name|'header'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'text'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'text'
op|'.'
name|'data'
op|'='
string|"'foobar'"
newline|'\n'
name|'header'
op|'.'
name|'appendChild'
op|'('
name|'text'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tree'
op|'.'
name|'getSectionNumber'
op|'('
name|'header'
op|')'
op|','
string|"'foobar'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_numberDocument
dedent|''
name|'def'
name|'test_numberDocument'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tree.numberDocument} inserts section numbers into the text of each\n        header.\n        """'
newline|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'section'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'h2'"
op|')'
newline|'\n'
name|'text'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'text'
op|'.'
name|'data'
op|'='
string|"'foo'"
newline|'\n'
name|'section'
op|'.'
name|'appendChild'
op|'('
name|'text'
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'section'
op|')'
newline|'\n'
nl|'\n'
name|'tree'
op|'.'
name|'numberDocument'
op|'('
name|'parent'
op|','
string|"'7'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'section'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
string|"'<h2>7.1 foo</h2>'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_parseFileAndReport
dedent|''
name|'def'
name|'test_parseFileAndReport'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tree.parseFileAndReport} parses the contents of the filename passed\n        to it and returns the corresponding DOM.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'setContent'
op|'('
string|'\'<foo bar="baz">hello</foo>\\n\''
op|')'
newline|'\n'
nl|'\n'
name|'document'
op|'='
name|'tree'
op|'.'
name|'parseFileAndReport'
op|'('
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertXMLEqual'
op|'('
nl|'\n'
name|'document'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
nl|'\n'
string|'\'<?xml version="1.0" ?><foo bar="baz">hello</foo>\''
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_parseFileAndReportMismatchedTags
dedent|''
name|'def'
name|'test_parseFileAndReportMismatchedTags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the contents of the file passed to L{tree.parseFileAndReport}\n        contain a mismatched tag, L{process.ProcessingFailure} is raised\n        indicating the location of the open and close tags which were\n        mismatched.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'setContent'
op|'('
string|"'  <foo>\\n\\n  </bar>'"
op|')'
newline|'\n'
nl|'\n'
name|'err'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'process'
op|'.'
name|'ProcessingFailure'
op|','
name|'tree'
op|'.'
name|'parseFileAndReport'
op|','
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'str'
op|'('
name|'err'
op|')'
op|','
nl|'\n'
string|'"mismatched close tag at line 3, column 4; expected </foo> "'
nl|'\n'
string|'"(from line 1, column 2)"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test a case which requires involves proper close tag handling.'
nl|'\n'
name|'path'
op|'.'
name|'setContent'
op|'('
string|"'<foo><bar></bar>\\n  </baz>'"
op|')'
newline|'\n'
nl|'\n'
name|'err'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'process'
op|'.'
name|'ProcessingFailure'
op|','
name|'tree'
op|'.'
name|'parseFileAndReport'
op|','
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'str'
op|'('
name|'err'
op|')'
op|','
nl|'\n'
string|'"mismatched close tag at line 2, column 4; expected </foo> "'
nl|'\n'
string|'"(from line 1, column 0)"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_parseFileAndReportParseError
dedent|''
name|'def'
name|'test_parseFileAndReportParseError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the contents of the file passed to L{tree.parseFileAndReport} cannot\n        be parsed for a reason other than mismatched tags,\n        L{process.ProcessingFailure} is raised with a string describing the\n        parse error.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'setContent'
op|'('
string|"'\\n   foo'"
op|')'
newline|'\n'
nl|'\n'
name|'err'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'process'
op|'.'
name|'ProcessingFailure'
op|','
name|'tree'
op|'.'
name|'parseFileAndReport'
op|','
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'err'
op|')'
op|','
string|"'syntax error at line 2, column 3'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_parseFileAndReportIOError
dedent|''
name|'def'
name|'test_parseFileAndReportIOError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an L{IOError} is raised while reading from the file specified to\n        L{tree.parseFileAndReport}, a L{process.ProcessingFailure} is raised\n        indicating what the error was.  The file should be closed by the\n        time the exception is raised to the caller.\n        """'
newline|'\n'
DECL|class|FakeFile
name|'class'
name|'FakeFile'
op|':'
newline|'\n'
DECL|variable|_open
indent|'            '
name|'_open'
op|'='
name|'True'
newline|'\n'
DECL|member|read
name|'def'
name|'read'
op|'('
name|'self'
op|','
name|'bytes'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IOError'
op|'('
name|'errno'
op|'.'
name|'ENOTCONN'
op|','
string|"'socket not connected'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_open'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'theFile'
op|'='
name|'FakeFile'
op|'('
op|')'
newline|'\n'
DECL|function|fakeOpen
name|'def'
name|'fakeOpen'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'theFile'
newline|'\n'
nl|'\n'
dedent|''
name|'err'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'process'
op|'.'
name|'ProcessingFailure'
op|','
name|'tree'
op|'.'
name|'parseFileAndReport'
op|','
string|'"foo"'
op|','
name|'fakeOpen'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'err'
op|')'
op|','
string|'"socket not connected, filename was \'foo\'"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'theFile'
op|'.'
name|'_open'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMLParsingTests
dedent|''
dedent|''
name|'class'
name|'XMLParsingTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for various aspects of parsing a Lore XML input document using\n    L{tree.parseFileAndReport}.\n    """'
newline|'\n'
DECL|member|_parseTest
name|'def'
name|'_parseTest'
op|'('
name|'self'
op|','
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'setContent'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'return'
name|'tree'
op|'.'
name|'parseFileAndReport'
op|'('
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_withoutDocType
dedent|''
name|'def'
name|'test_withoutDocType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A Lore XML input document may omit a I{DOCTYPE} declaration.  If it\n        does so, the XHTML1 Strict DTD is used.\n        """'
newline|'\n'
comment|'# Parsing should succeed.'
nl|'\n'
name|'document'
op|'='
name|'self'
op|'.'
name|'_parseTest'
op|'('
string|'"<foo>uses an xhtml entity: &copy;</foo>"'
op|')'
newline|'\n'
comment|'# But even more than that, the &copy; entity should be turned into the'
nl|'\n'
comment|'# appropriate unicode codepoint.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'domhelpers'
op|'.'
name|'gatherTextNodes'
op|'('
name|'document'
op|'.'
name|'documentElement'
op|')'
op|','
nl|'\n'
string|'u"uses an xhtml entity: \\N{COPYRIGHT SIGN}"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_withTransitionalDocType
dedent|''
name|'def'
name|'test_withTransitionalDocType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A Lore XML input document may include a I{DOCTYPE} declaration\n        referring to the XHTML1 Transitional DTD.\n        """'
newline|'\n'
comment|'# Parsing should succeed.'
nl|'\n'
name|'document'
op|'='
name|'self'
op|'.'
name|'_parseTest'
op|'('
string|'"""\\\n<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\n    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n<foo>uses an xhtml entity: &copy;</foo>\n"""'
op|')'
newline|'\n'
comment|'# But even more than that, the &copy; entity should be turned into the'
nl|'\n'
comment|'# appropriate unicode codepoint.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'domhelpers'
op|'.'
name|'gatherTextNodes'
op|'('
name|'document'
op|'.'
name|'documentElement'
op|')'
op|','
nl|'\n'
string|'u"uses an xhtml entity: \\N{COPYRIGHT SIGN}"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|test_withStrictDocType
dedent|''
name|'def'
name|'test_withStrictDocType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A Lore XML input document may include a I{DOCTYPE} declaration\n        referring to the XHTML1 Strict DTD.\n        """'
newline|'\n'
comment|'# Parsing should succeed.'
nl|'\n'
name|'document'
op|'='
name|'self'
op|'.'
name|'_parseTest'
op|'('
string|'"""\\\n<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"\n    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\n<foo>uses an xhtml entity: &copy;</foo>\n"""'
op|')'
newline|'\n'
comment|'# But even more than that, the &copy; entity should be turned into the'
nl|'\n'
comment|'# appropriate unicode codepoint.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'domhelpers'
op|'.'
name|'gatherTextNodes'
op|'('
name|'document'
op|'.'
name|'documentElement'
op|')'
op|','
nl|'\n'
string|'u"uses an xhtml entity: \\N{COPYRIGHT SIGN}"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|test_withDisallowedDocType
dedent|''
name|'def'
name|'test_withDisallowedDocType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A Lore XML input document may not include a I{DOCTYPE} declaration\n        referring to any DTD other than XHTML1 Transitional or XHTML1 Strict.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'process'
op|'.'
name|'ProcessingFailure'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_parseTest'
op|','
nl|'\n'
string|'"""\\\n<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"\n    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">\n<foo>uses an xhtml entity: &copy;</foo>\n"""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMLSerializationTests
dedent|''
dedent|''
name|'class'
name|'XMLSerializationTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'_XMLAssertionMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{tree._writeDocument}.\n    """'
newline|'\n'
DECL|member|test_nonASCIIData
name|'def'
name|'test_nonASCIIData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A document which contains non-ascii characters is serialized to a\n        file using UTF-8.\n        """'
newline|'\n'
name|'document'
op|'='
name|'dom'
op|'.'
name|'Document'
op|'('
op|')'
newline|'\n'
name|'parent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'text'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'text'
op|'.'
name|'data'
op|'='
string|"u'\\N{SNOWMAN}'"
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'text'
op|')'
newline|'\n'
name|'document'
op|'.'
name|'appendChild'
op|'('
name|'parent'
op|')'
newline|'\n'
name|'outFile'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'tree'
op|'.'
name|'_writeDocument'
op|'('
name|'outFile'
op|','
name|'document'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertXMLEqual'
op|'('
nl|'\n'
name|'FilePath'
op|'('
name|'outFile'
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
nl|'\n'
string|"u'<foo>\\N{SNOWMAN}</foo>'"
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LatexSpitterTestCase
dedent|''
dedent|''
name|'class'
name|'LatexSpitterTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the Latex output plugin.\n    """'
newline|'\n'
DECL|member|test_indexedSpan
name|'def'
name|'test_indexedSpan'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test processing of a span tag with an index class results in a latex\n        \\\\index directive the correct value.\n        """'
newline|'\n'
name|'doc'
op|'='
name|'dom'
op|'.'
name|'parseString'
op|'('
string|'\'<span class="index" value="name" />\''
op|')'
op|'.'
name|'documentElement'
newline|'\n'
name|'out'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'spitter'
op|'='
name|'LatexSpitter'
op|'('
name|'out'
op|'.'
name|'write'
op|')'
newline|'\n'
name|'spitter'
op|'.'
name|'visitNode'
op|'('
name|'doc'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'out'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"u'\\\\index{name}\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ScriptTests
dedent|''
dedent|''
name|'class'
name|'ScriptTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{twisted.lore.scripts.lore}, the I{lore} command\'s\n    implementation,\n    """'
newline|'\n'
DECL|member|test_getProcessor
name|'def'
name|'test_getProcessor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{lore.getProcessor} loads the specified output plugin from the\n        specified input plugin.\n        """'
newline|'\n'
name|'processor'
op|'='
name|'lore'
op|'.'
name|'getProcessor'
op|'('
string|'"lore"'
op|','
string|'"html"'
op|','
name|'options'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'processor'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DeprecationTests
dedent|''
dedent|''
name|'class'
name|'DeprecationTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for deprecated APIs in L{twisted.lore.tree}.\n    """'
newline|'\n'
DECL|member|test_comparePosition
name|'def'
name|'test_comparePosition'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tree.comparePosition} is deprecated.\n        """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'microdom'
name|'import'
name|'parseString'
newline|'\n'
name|'element'
op|'='
name|'parseString'
op|'('
string|"'<foo/>'"
op|')'
op|'.'
name|'documentElement'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'callDeprecated'
op|'('
nl|'\n'
name|'Version'
op|'('
string|"'Twisted'"
op|','
number|'9'
op|','
number|'0'
op|','
number|'0'
op|')'
op|','
nl|'\n'
name|'tree'
op|'.'
name|'comparePosition'
op|','
name|'element'
op|','
name|'element'
op|')'
op|','
nl|'\n'
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_compareMarkPos
dedent|''
name|'def'
name|'test_compareMarkPos'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tree.compareMarkPos} is deprecated.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'callDeprecated'
op|'('
nl|'\n'
name|'Version'
op|'('
string|"'Twisted'"
op|','
number|'9'
op|','
number|'0'
op|','
number|'0'
op|')'
op|','
nl|'\n'
name|'tree'
op|'.'
name|'compareMarkPos'
op|','
op|'['
number|'0'
op|','
number|'1'
op|']'
op|','
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
op|','
nl|'\n'
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

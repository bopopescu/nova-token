begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'from'
name|'itertools'
name|'import'
name|'count'
newline|'\n'
name|'import'
name|'re'
op|','
name|'os'
op|','
name|'cStringIO'
op|','
name|'time'
op|','
name|'cgi'
op|','
name|'string'
op|','
name|'urlparse'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
name|'import'
name|'minidom'
name|'as'
name|'dom'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'sax'
op|'.'
name|'handler'
name|'import'
name|'ErrorHandler'
op|','
name|'feature_validation'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
op|'.'
name|'pulldom'
name|'import'
name|'SAX2DOM'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'sax'
name|'import'
name|'make_parser'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'sax'
op|'.'
name|'xmlreader'
name|'import'
name|'InputSource'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'htmlizer'
op|','
name|'text'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'deprecate'
name|'import'
name|'deprecated'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'versions'
name|'import'
name|'Version'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'domhelpers'
newline|'\n'
name|'import'
name|'process'
op|','
name|'latex'
op|','
name|'indexer'
op|','
name|'numberer'
op|','
name|'htmlbook'
newline|'\n'
nl|'\n'
comment|'# relative links to html files'
nl|'\n'
DECL|function|fixLinks
name|'def'
name|'fixLinks'
op|'('
name|'document'
op|','
name|'ext'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Rewrite links to XHTML lore input documents so they point to lore XHTML\n    output documents.\n\n    Any node with an C{href} attribute which does not contain a value starting\n    with C{http}, C{https}, C{ftp}, or C{mailto} and which does not have a\n    C{class} attribute of C{absolute} or which contains C{listing} and which\n    does point to an URL ending with C{html} will have that attribute value\n    rewritten so that the filename extension is C{ext} instead of C{html}.\n\n    @type document: A DOM Node or Document\n    @param document: The input document which contains all of the content to be\n    presented.\n\n    @type ext: C{str}\n    @param ext: The extension to use when selecting an output file name.  This\n    replaces the extension of the input file name.\n\n    @return: C{None}\n    """'
newline|'\n'
name|'supported_schemes'
op|'='
op|'['
string|"'http'"
op|','
string|"'https'"
op|','
string|"'ftp'"
op|','
string|"'mailto'"
op|']'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'document'
op|','
string|"'href'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'href'
op|'='
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|'"href"'
op|')'
newline|'\n'
name|'if'
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'href'
op|')'
op|'['
number|'0'
op|']'
name|'in'
name|'supported_schemes'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|'"class"'
op|')'
op|'=='
string|'"absolute"'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|'"class"'
op|')'
op|'.'
name|'find'
op|'('
string|"'listing'"
op|')'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
nl|'\n'
comment|'# This is a relative link, so it should be munged.'
nl|'\n'
dedent|''
name|'if'
name|'href'
op|'.'
name|'endswith'
op|'('
string|"'html'"
op|')'
name|'or'
name|'href'
op|'['
op|':'
name|'href'
op|'.'
name|'rfind'
op|'('
string|"'#'"
op|')'
op|']'
op|'.'
name|'endswith'
op|'('
string|"'html'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fname'
op|','
name|'fext'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'href'
op|')'
newline|'\n'
name|'if'
string|"'#'"
name|'in'
name|'fext'
op|':'
newline|'\n'
indent|'                '
name|'fext'
op|'='
name|'ext'
op|'+'
string|"'#'"
op|'+'
name|'fext'
op|'.'
name|'split'
op|'('
string|"'#'"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'fext'
op|'='
name|'ext'
newline|'\n'
dedent|''
name|'node'
op|'.'
name|'setAttribute'
op|'('
string|'"href"'
op|','
name|'fname'
op|'+'
name|'fext'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|addMtime
dedent|''
dedent|''
dedent|''
name|'def'
name|'addMtime'
op|'('
name|'document'
op|','
name|'fullpath'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set the last modified time of the given document.\n\n    @type document: A DOM Node or Document\n    @param document: The output template which defines the presentation of the\n    last modified time.\n\n    @type fullpath: C{str}\n    @param fullpath: The file name from which to take the last modified time.\n\n    @return: C{None}\n    """'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'document'
op|','
string|'"class"'
op|','
string|'"mtime"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'txt'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'txt'
op|'.'
name|'data'
op|'='
name|'time'
op|'.'
name|'ctime'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'getmtime'
op|'('
name|'fullpath'
op|')'
op|')'
newline|'\n'
name|'node'
op|'.'
name|'appendChild'
op|'('
name|'txt'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_getAPI
dedent|''
dedent|''
name|'def'
name|'_getAPI'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Retrieve the fully qualified Python name represented by the given node.\n\n    The name is represented by one or two aspects of the node: the value of the\n    node\'s first child forms the end of the name.  If the node has a C{base}\n    attribute, that attribute\'s value is prepended to the node\'s value, with\n    C{.} separating the two parts.\n\n    @rtype: C{str}\n    @return: The fully qualified Python name.\n    """'
newline|'\n'
name|'base'
op|'='
string|'""'
newline|'\n'
name|'if'
name|'node'
op|'.'
name|'hasAttribute'
op|'('
string|'"base"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base'
op|'='
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|'"base"'
op|')'
op|'+'
string|'"."'
newline|'\n'
dedent|''
name|'return'
name|'base'
op|'+'
name|'node'
op|'.'
name|'childNodes'
op|'['
number|'0'
op|']'
op|'.'
name|'nodeValue'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|fixAPI
dedent|''
name|'def'
name|'fixAPI'
op|'('
name|'document'
op|','
name|'url'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Replace API references with links to API documentation.\n\n    @type document: A DOM Node or Document\n    @param document: The input document which contains all of the content to be\n    presented.\n\n    @type url: C{str}\n    @param url: A string which will be interpolated with the fully qualified\n    Python name of any API reference encountered in the input document, the\n    result of which will be used as a link to API documentation for that name\n    in the output document.\n\n    @return: C{None}\n    """'
newline|'\n'
comment|'# API references'
nl|'\n'
name|'for'
name|'node'
name|'in'
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'document'
op|','
string|'"class"'
op|','
string|'"API"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fullname'
op|'='
name|'_getAPI'
op|'('
name|'node'
op|')'
newline|'\n'
name|'anchor'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'anchor'
op|'.'
name|'setAttribute'
op|'('
string|"'href'"
op|','
name|'url'
op|'%'
op|'('
name|'fullname'
op|','
op|')'
op|')'
newline|'\n'
name|'anchor'
op|'.'
name|'setAttribute'
op|'('
string|"'title'"
op|','
name|'fullname'
op|')'
newline|'\n'
name|'while'
name|'node'
op|'.'
name|'childNodes'
op|':'
newline|'\n'
indent|'            '
name|'child'
op|'='
name|'node'
op|'.'
name|'childNodes'
op|'['
number|'0'
op|']'
newline|'\n'
name|'node'
op|'.'
name|'removeChild'
op|'('
name|'child'
op|')'
newline|'\n'
name|'anchor'
op|'.'
name|'appendChild'
op|'('
name|'child'
op|')'
newline|'\n'
dedent|''
name|'node'
op|'.'
name|'appendChild'
op|'('
name|'anchor'
op|')'
newline|'\n'
name|'if'
name|'node'
op|'.'
name|'hasAttribute'
op|'('
string|"'base'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'node'
op|'.'
name|'removeAttribute'
op|'('
string|"'base'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|fontifyPython
dedent|''
dedent|''
dedent|''
name|'def'
name|'fontifyPython'
op|'('
name|'document'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Syntax color any node in the given document which contains a Python source\n    listing.\n\n    @type document: A DOM Node or Document\n    @param document: The input document which contains all of the content to be\n    presented.\n\n    @return: C{None}\n    """'
newline|'\n'
DECL|function|matcher
name|'def'
name|'matcher'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'node'
op|'.'
name|'nodeName'
op|'=='
string|"'pre'"
name|'and'
name|'node'
op|'.'
name|'hasAttribute'
op|'('
string|"'class'"
op|')'
name|'and'
nl|'\n'
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|"'class'"
op|')'
op|'=='
string|"'python'"
op|')'
newline|'\n'
dedent|''
name|'for'
name|'node'
name|'in'
name|'domhelpers'
op|'.'
name|'findElements'
op|'('
name|'document'
op|','
name|'matcher'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fontifyPythonNode'
op|'('
name|'node'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|fontifyPythonNode
dedent|''
dedent|''
name|'def'
name|'fontifyPythonNode'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Syntax color the given node containing Python source code.\n\n    The node must have a parent.\n\n    @return: C{None}\n    """'
newline|'\n'
name|'oldio'
op|'='
name|'cStringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'latex'
op|'.'
name|'getLatexText'
op|'('
name|'node'
op|','
name|'oldio'
op|'.'
name|'write'
op|','
nl|'\n'
name|'entities'
op|'='
op|'{'
string|"'lt'"
op|':'
string|"'<'"
op|','
string|"'gt'"
op|':'
string|"'>'"
op|','
string|"'amp'"
op|':'
string|"'&'"
op|'}'
op|')'
newline|'\n'
name|'oldio'
op|'='
name|'cStringIO'
op|'.'
name|'StringIO'
op|'('
name|'oldio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
name|'howManyLines'
op|'='
name|'len'
op|'('
name|'oldio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|')'
newline|'\n'
name|'newio'
op|'='
name|'cStringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'htmlizer'
op|'.'
name|'filter'
op|'('
name|'oldio'
op|','
name|'newio'
op|','
name|'writer'
op|'='
name|'htmlizer'
op|'.'
name|'SmallerHTMLWriter'
op|')'
newline|'\n'
name|'lineLabels'
op|'='
name|'_makeLineNumbers'
op|'('
name|'howManyLines'
op|')'
newline|'\n'
name|'newel'
op|'='
name|'dom'
op|'.'
name|'parseString'
op|'('
name|'newio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
op|'.'
name|'documentElement'
newline|'\n'
name|'newel'
op|'.'
name|'setAttribute'
op|'('
string|'"class"'
op|','
string|'"python"'
op|')'
newline|'\n'
name|'node'
op|'.'
name|'parentNode'
op|'.'
name|'replaceChild'
op|'('
name|'newel'
op|','
name|'node'
op|')'
newline|'\n'
name|'newel'
op|'.'
name|'insertBefore'
op|'('
name|'lineLabels'
op|','
name|'newel'
op|'.'
name|'firstChild'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|addPyListings
dedent|''
name|'def'
name|'addPyListings'
op|'('
name|'document'
op|','
name|'dir'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Insert Python source listings into the given document from files in the\n    given directory based on C{py-listing} nodes.\n\n    Any node in C{document} with a C{class} attribute set to C{py-listing} will\n    have source lines taken from the file named in that node\'s C{href}\n    attribute (searched for in C{dir}) inserted in place of that node.\n\n    If a node has a C{skipLines} attribute, its value will be parsed as an\n    integer and that many lines will be skipped at the beginning of the source\n    file.\n\n    @type document: A DOM Node or Document\n    @param document: The document within which to make listing replacements.\n\n    @type dir: C{str}\n    @param dir: The directory in which to find source files containing the\n    referenced Python listings.\n\n    @return: C{None}\n    """'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'document'
op|','
string|'"class"'
op|','
nl|'\n'
string|'"py-listing"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'filename'
op|'='
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|'"href"'
op|')'
newline|'\n'
name|'outfile'
op|'='
name|'cStringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'lines'
op|'='
name|'map'
op|'('
name|'string'
op|'.'
name|'rstrip'
op|','
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'dir'
op|','
name|'filename'
op|')'
op|')'
op|'.'
name|'readlines'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'skip'
op|'='
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|"'skipLines'"
op|')'
name|'or'
number|'0'
newline|'\n'
name|'lines'
op|'='
name|'lines'
op|'['
name|'int'
op|'('
name|'skip'
op|')'
op|':'
op|']'
newline|'\n'
name|'howManyLines'
op|'='
name|'len'
op|'('
name|'lines'
op|')'
newline|'\n'
name|'data'
op|'='
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'lines'
op|')'
newline|'\n'
nl|'\n'
name|'data'
op|'='
name|'cStringIO'
op|'.'
name|'StringIO'
op|'('
name|'text'
op|'.'
name|'removeLeadingTrailingBlanks'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
name|'htmlizer'
op|'.'
name|'filter'
op|'('
name|'data'
op|','
name|'outfile'
op|','
name|'writer'
op|'='
name|'htmlizer'
op|'.'
name|'SmallerHTMLWriter'
op|')'
newline|'\n'
name|'sourceNode'
op|'='
name|'dom'
op|'.'
name|'parseString'
op|'('
name|'outfile'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
op|'.'
name|'documentElement'
newline|'\n'
name|'sourceNode'
op|'.'
name|'insertBefore'
op|'('
name|'_makeLineNumbers'
op|'('
name|'howManyLines'
op|')'
op|','
name|'sourceNode'
op|'.'
name|'firstChild'
op|')'
newline|'\n'
name|'_replaceWithListing'
op|'('
name|'node'
op|','
name|'sourceNode'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
name|'filename'
op|','
string|'"py-listing"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_makeLineNumbers
dedent|''
dedent|''
name|'def'
name|'_makeLineNumbers'
op|'('
name|'howMany'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return an element which will render line numbers for a source listing.\n\n    @param howMany: The number of lines in the source listing.\n    @type howMany: C{int}\n\n    @return: An L{dom.Element} which can be added to the document before\n        the source listing to add line numbers to it.\n    """'
newline|'\n'
comment|'# Figure out how many digits wide the widest line number label will be.'
nl|'\n'
name|'width'
op|'='
name|'len'
op|'('
name|'str'
op|'('
name|'howMany'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Render all the line labels with appropriate padding'
nl|'\n'
name|'labels'
op|'='
op|'['
string|"'%*d'"
op|'%'
op|'('
name|'width'
op|','
name|'i'
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'1'
op|','
name|'howMany'
op|'+'
number|'1'
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'# Create a p element with the right style containing the labels'
nl|'\n'
name|'p'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'p'"
op|')'
newline|'\n'
name|'p'
op|'.'
name|'setAttribute'
op|'('
string|"'class'"
op|','
string|"'py-linenumber'"
op|')'
newline|'\n'
name|'t'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'t'
op|'.'
name|'data'
op|'='
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'labels'
op|')'
op|'+'
string|"'\\n'"
newline|'\n'
name|'p'
op|'.'
name|'appendChild'
op|'('
name|'t'
op|')'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_replaceWithListing
dedent|''
name|'def'
name|'_replaceWithListing'
op|'('
name|'node'
op|','
name|'val'
op|','
name|'filename'
op|','
name|'class_'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'captionTitle'
op|'='
name|'domhelpers'
op|'.'
name|'getNodeText'
op|'('
name|'node'
op|')'
newline|'\n'
name|'if'
name|'captionTitle'
op|'=='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'captionTitle'
op|'='
string|"'Source listing'"
newline|'\n'
dedent|''
name|'text'
op|'='
op|'('
string|'\'<div class="%s">%s<div class="caption">%s - \''
nl|'\n'
string|'\'<a href="%s"><span class="filename">%s</span></a></div></div>\''
op|'%'
nl|'\n'
op|'('
name|'class_'
op|','
name|'val'
op|','
name|'captionTitle'
op|','
name|'filename'
op|','
name|'filename'
op|')'
op|')'
newline|'\n'
name|'newnode'
op|'='
name|'dom'
op|'.'
name|'parseString'
op|'('
name|'text'
op|')'
op|'.'
name|'documentElement'
newline|'\n'
name|'node'
op|'.'
name|'parentNode'
op|'.'
name|'replaceChild'
op|'('
name|'newnode'
op|','
name|'node'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|addHTMLListings
dedent|''
name|'def'
name|'addHTMLListings'
op|'('
name|'document'
op|','
name|'dir'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Insert HTML source listings into the given document from files in the given\n    directory based on C{html-listing} nodes.\n\n    Any node in C{document} with a C{class} attribute set to C{html-listing}\n    will have source lines taken from the file named in that node\'s C{href}\n    attribute (searched for in C{dir}) inserted in place of that node.\n\n    @type document: A DOM Node or Document\n    @param document: The document within which to make listing replacements.\n\n    @type dir: C{str}\n    @param dir: The directory in which to find source files containing the\n    referenced HTML listings.\n\n    @return: C{None}\n    """'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'document'
op|','
string|'"class"'
op|','
nl|'\n'
string|'"html-listing"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'filename'
op|'='
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|'"href"'
op|')'
newline|'\n'
name|'val'
op|'='
op|'('
string|'\'<pre class="htmlsource">\\n%s</pre>\''
op|'%'
nl|'\n'
name|'cgi'
op|'.'
name|'escape'
op|'('
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'dir'
op|','
name|'filename'
op|')'
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'_replaceWithListing'
op|'('
name|'node'
op|','
name|'val'
op|','
name|'filename'
op|','
string|'"html-listing"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|addPlainListings
dedent|''
dedent|''
name|'def'
name|'addPlainListings'
op|'('
name|'document'
op|','
name|'dir'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Insert text listings into the given document from files in the given\n    directory based on C{listing} nodes.\n\n    Any node in C{document} with a C{class} attribute set to C{listing} will\n    have source lines taken from the file named in that node\'s C{href}\n    attribute (searched for in C{dir}) inserted in place of that node.\n\n    @type document: A DOM Node or Document\n    @param document: The document within which to make listing replacements.\n\n    @type dir: C{str}\n    @param dir: The directory in which to find source files containing the\n    referenced text listings.\n\n    @return: C{None}\n    """'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'document'
op|','
string|'"class"'
op|','
nl|'\n'
string|'"listing"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'filename'
op|'='
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|'"href"'
op|')'
newline|'\n'
name|'val'
op|'='
op|'('
string|"'<pre>\\n%s</pre>'"
op|'%'
nl|'\n'
name|'cgi'
op|'.'
name|'escape'
op|'('
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'dir'
op|','
name|'filename'
op|')'
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'_replaceWithListing'
op|'('
name|'node'
op|','
name|'val'
op|','
name|'filename'
op|','
string|'"listing"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|getHeaders
dedent|''
dedent|''
name|'def'
name|'getHeaders'
op|'('
name|'document'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return all H2 and H3 nodes in the given document.\n\n    @type document: A DOM Node or Document\n\n    @rtype: C{list}\n    """'
newline|'\n'
name|'return'
name|'domhelpers'
op|'.'
name|'findElements'
op|'('
nl|'\n'
name|'document'
op|','
nl|'\n'
name|'lambda'
name|'n'
op|','
name|'m'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'h[23]$'"
op|')'
op|'.'
name|'match'
op|':'
name|'m'
op|'('
name|'n'
op|'.'
name|'nodeName'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|generateToC
dedent|''
name|'def'
name|'generateToC'
op|'('
name|'document'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Create a table of contents for the given document.\n\n    @type document: A DOM Node or Document\n\n    @rtype: A DOM Node\n    @return: a Node containing a table of contents based on the headers of the\n    given document.\n    """'
newline|'\n'
name|'subHeaders'
op|'='
name|'None'
newline|'\n'
name|'headers'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'element'
name|'in'
name|'getHeaders'
op|'('
name|'document'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'element'
op|'.'
name|'tagName'
op|'=='
string|"'h2'"
op|':'
newline|'\n'
indent|'            '
name|'subHeaders'
op|'='
op|'['
op|']'
newline|'\n'
name|'headers'
op|'.'
name|'append'
op|'('
op|'('
name|'element'
op|','
name|'subHeaders'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'subHeaders'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
nl|'\n'
string|'"No H3 element is allowed until after an H2 element"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'subHeaders'
op|'.'
name|'append'
op|'('
name|'element'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'auto'
op|'='
name|'count'
op|'('
op|')'
op|'.'
name|'next'
newline|'\n'
nl|'\n'
DECL|function|addItem
name|'def'
name|'addItem'
op|'('
name|'headerElement'
op|','
name|'parent'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'anchor'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'name'
op|'='
string|"'auto%d'"
op|'%'
op|'('
name|'auto'
op|'('
op|')'
op|','
op|')'
newline|'\n'
name|'anchor'
op|'.'
name|'setAttribute'
op|'('
string|"'href'"
op|','
string|"'#'"
op|'+'
name|'name'
op|')'
newline|'\n'
name|'text'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'text'
op|'.'
name|'data'
op|'='
name|'domhelpers'
op|'.'
name|'getNodeText'
op|'('
name|'headerElement'
op|')'
newline|'\n'
name|'anchor'
op|'.'
name|'appendChild'
op|'('
name|'text'
op|')'
newline|'\n'
name|'headerNameItem'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'li'"
op|')'
newline|'\n'
name|'headerNameItem'
op|'.'
name|'appendChild'
op|'('
name|'anchor'
op|')'
newline|'\n'
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'headerNameItem'
op|')'
newline|'\n'
name|'anchor'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'anchor'
op|'.'
name|'setAttribute'
op|'('
string|"'name'"
op|','
name|'name'
op|')'
newline|'\n'
name|'headerElement'
op|'.'
name|'appendChild'
op|'('
name|'anchor'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'toc'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'ol'"
op|')'
newline|'\n'
name|'for'
name|'headerElement'
op|','
name|'subHeaders'
name|'in'
name|'headers'
op|':'
newline|'\n'
indent|'        '
name|'addItem'
op|'('
name|'headerElement'
op|','
name|'toc'
op|')'
newline|'\n'
name|'if'
name|'subHeaders'
op|':'
newline|'\n'
indent|'            '
name|'subtoc'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'ul'"
op|')'
newline|'\n'
name|'toc'
op|'.'
name|'appendChild'
op|'('
name|'subtoc'
op|')'
newline|'\n'
name|'for'
name|'subHeaderElement'
name|'in'
name|'subHeaders'
op|':'
newline|'\n'
indent|'                '
name|'addItem'
op|'('
name|'subHeaderElement'
op|','
name|'subtoc'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'toc'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|putInToC
dedent|''
name|'def'
name|'putInToC'
op|'('
name|'document'
op|','
name|'toc'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Insert the given table of contents into the given document.\n\n    The node with C{class} attribute set to C{toc} has its children replaced\n    with C{toc}.\n\n    @type document: A DOM Node or Document\n    @type toc: A DOM Node\n    """'
newline|'\n'
name|'tocOrig'
op|'='
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'document'
op|','
string|"'class'"
op|','
string|"'toc'"
op|')'
newline|'\n'
name|'if'
name|'tocOrig'
op|':'
newline|'\n'
indent|'        '
name|'tocOrig'
op|'='
name|'tocOrig'
op|'['
number|'0'
op|']'
newline|'\n'
name|'tocOrig'
op|'.'
name|'childNodes'
op|'='
op|'['
name|'toc'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|removeH1
dedent|''
dedent|''
name|'def'
name|'removeH1'
op|'('
name|'document'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Replace all C{h1} nodes in the given document with empty C{span} nodes.\n\n    C{h1} nodes mark up document sections and the output template is given an\n    opportunity to present this information in a different way.\n\n    @type document: A DOM Node or Document\n    @param document: The input document which contains all of the content to be\n    presented.\n\n    @return: C{None}\n    """'
newline|'\n'
name|'h1'
op|'='
name|'domhelpers'
op|'.'
name|'findNodesNamed'
op|'('
name|'document'
op|','
string|"'h1'"
op|')'
newline|'\n'
name|'empty'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'span'"
op|')'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'h1'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'.'
name|'parentNode'
op|'.'
name|'replaceChild'
op|'('
name|'empty'
op|','
name|'node'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|footnotes
dedent|''
dedent|''
name|'def'
name|'footnotes'
op|'('
name|'document'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Find footnotes in the given document, move them to the end of the body, and\n    generate links to them.\n\n    A footnote is any node with a C{class} attribute set to C{footnote}.\n    Footnote links are generated as superscript.  Footnotes are collected in a\n    C{ol} node at the end of the document.\n\n    @type document: A DOM Node or Document\n    @param document: The input document which contains all of the content to be\n    presented.\n\n    @return: C{None}\n    """'
newline|'\n'
name|'footnotes'
op|'='
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'document'
op|','
string|'"class"'
op|','
nl|'\n'
string|'"footnote"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'footnotes'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
dedent|''
name|'footnoteElement'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'ol'"
op|')'
newline|'\n'
name|'id'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'footnote'
name|'in'
name|'footnotes'
op|':'
newline|'\n'
indent|'        '
name|'href'
op|'='
name|'dom'
op|'.'
name|'parseString'
op|'('
string|'\'<a href="#footnote-%(id)d">\''
nl|'\n'
string|"'<super>%(id)d</super></a>'"
nl|'\n'
op|'%'
name|'vars'
op|'('
op|')'
op|')'
op|'.'
name|'documentElement'
newline|'\n'
name|'text'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
name|'domhelpers'
op|'.'
name|'getNodeText'
op|'('
name|'footnote'
op|')'
op|'.'
name|'split'
op|'('
op|')'
op|')'
newline|'\n'
name|'href'
op|'.'
name|'setAttribute'
op|'('
string|"'title'"
op|','
name|'text'
op|')'
newline|'\n'
name|'target'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'target'
op|'.'
name|'setAttribute'
op|'('
string|"'name'"
op|','
string|"'footnote-%d'"
op|'%'
op|'('
name|'id'
op|','
op|')'
op|')'
newline|'\n'
name|'target'
op|'.'
name|'childNodes'
op|'='
op|'['
name|'footnote'
op|']'
newline|'\n'
name|'footnoteContent'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'li'"
op|')'
newline|'\n'
name|'footnoteContent'
op|'.'
name|'childNodes'
op|'='
op|'['
name|'target'
op|']'
newline|'\n'
name|'footnoteElement'
op|'.'
name|'childNodes'
op|'.'
name|'append'
op|'('
name|'footnoteContent'
op|')'
newline|'\n'
name|'footnote'
op|'.'
name|'parentNode'
op|'.'
name|'replaceChild'
op|'('
name|'href'
op|','
name|'footnote'
op|')'
newline|'\n'
name|'id'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'body'
op|'='
name|'domhelpers'
op|'.'
name|'findNodesNamed'
op|'('
name|'document'
op|','
string|'"body"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'header'
op|'='
name|'dom'
op|'.'
name|'parseString'
op|'('
string|"'<h2>Footnotes</h2>'"
op|')'
op|'.'
name|'documentElement'
newline|'\n'
name|'body'
op|'.'
name|'childNodes'
op|'.'
name|'append'
op|'('
name|'header'
op|')'
newline|'\n'
name|'body'
op|'.'
name|'childNodes'
op|'.'
name|'append'
op|'('
name|'footnoteElement'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|notes
dedent|''
name|'def'
name|'notes'
op|'('
name|'document'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Find notes in the given document and mark them up as such.\n\n    A note is any node with a C{class} attribute set to C{note}.\n\n    (I think this is a very stupid feature.  When I found it I actually\n    exclaimed out loud. -exarkun)\n\n    @type document: A DOM Node or Document\n    @param document: The input document which contains all of the content to be\n    presented.\n\n    @return: C{None}\n    """'
newline|'\n'
name|'notes'
op|'='
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'document'
op|','
string|'"class"'
op|','
string|'"note"'
op|')'
newline|'\n'
name|'notePrefix'
op|'='
name|'dom'
op|'.'
name|'parseString'
op|'('
string|"'<strong>Note: </strong>'"
op|')'
op|'.'
name|'documentElement'
newline|'\n'
name|'for'
name|'note'
name|'in'
name|'notes'
op|':'
newline|'\n'
indent|'        '
name|'note'
op|'.'
name|'childNodes'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'notePrefix'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|compareMarkPos
dedent|''
dedent|''
name|'def'
name|'compareMarkPos'
op|'('
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform in every way identically to L{cmp} for valid inputs.\n    """'
newline|'\n'
name|'linecmp'
op|'='
name|'cmp'
op|'('
name|'a'
op|'['
number|'0'
op|']'
op|','
name|'b'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'linecmp'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'linecmp'
newline|'\n'
dedent|''
name|'return'
name|'cmp'
op|'('
name|'a'
op|'['
number|'1'
op|']'
op|','
name|'b'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
DECL|variable|compareMarkPos
dedent|''
name|'compareMarkPos'
op|'='
name|'deprecated'
op|'('
name|'Version'
op|'('
string|"'Twisted'"
op|','
number|'9'
op|','
number|'0'
op|','
number|'0'
op|')'
op|')'
op|'('
name|'compareMarkPos'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|comparePosition
name|'def'
name|'comparePosition'
op|'('
name|'firstElement'
op|','
name|'secondElement'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Compare the two elements given by their position in the document or\n    documents they were parsed from.\n\n    @type firstElement: C{dom.Element}\n    @type secondElement: C{dom.Element}\n\n    @return: C{-1}, C{0}, or C{1}, with the same meanings as the return value\n    of L{cmp}.\n    """'
newline|'\n'
name|'return'
name|'cmp'
op|'('
name|'firstElement'
op|'.'
name|'_markpos'
op|','
name|'secondElement'
op|'.'
name|'_markpos'
op|')'
newline|'\n'
DECL|variable|comparePosition
dedent|''
name|'comparePosition'
op|'='
name|'deprecated'
op|'('
name|'Version'
op|'('
string|"'Twisted'"
op|','
number|'9'
op|','
number|'0'
op|','
number|'0'
op|')'
op|')'
op|'('
name|'comparePosition'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|findNodeJustBefore
name|'def'
name|'findNodeJustBefore'
op|'('
name|'target'
op|','
name|'nodes'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Find the last Element which is a sibling of C{target} and is in C{nodes}.\n\n    @param target: A node the previous sibling of which to return.\n    @param nodes: A list of nodes which might be the right node.\n\n    @return: The previous sibling of C{target}.\n    """'
newline|'\n'
name|'while'
name|'target'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'target'
op|'.'
name|'previousSibling'
newline|'\n'
name|'while'
name|'node'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'node'
name|'in'
name|'nodes'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'node'
newline|'\n'
dedent|''
name|'node'
op|'='
name|'node'
op|'.'
name|'previousSibling'
newline|'\n'
dedent|''
name|'target'
op|'='
name|'target'
op|'.'
name|'parentNode'
newline|'\n'
dedent|''
name|'raise'
name|'RuntimeError'
op|'('
string|'"Oops"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|getFirstAncestorWithSectionHeader
dedent|''
name|'def'
name|'getFirstAncestorWithSectionHeader'
op|'('
name|'entry'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Visit the ancestors of C{entry} until one with at least one C{h2} child\n    node is found, then return all of that node\'s C{h2} child nodes.\n\n    @type entry: A DOM Node\n    @param entry: The node from which to begin traversal.  This node itself is\n    excluded from consideration.\n\n    @rtype: C{list} of DOM Nodes\n    @return: All C{h2} nodes of the ultimately selected parent node.\n    """'
newline|'\n'
name|'for'
name|'a'
name|'in'
name|'domhelpers'
op|'.'
name|'getParents'
op|'('
name|'entry'
op|')'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'headers'
op|'='
name|'domhelpers'
op|'.'
name|'findNodesNamed'
op|'('
name|'a'
op|','
string|'"h2"'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'headers'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'headers'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|getSectionNumber
dedent|''
name|'def'
name|'getSectionNumber'
op|'('
name|'header'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Retrieve the section number of the given node.\n\n    This is probably intended to interact in a rather specific way with\n    L{numberDocument}.\n\n    @type header: A DOM Node or L{None}\n    @param header: The section from which to extract a number.  The section\n        number is the value of this node\'s first child.\n\n    @return: C{None} or a C{str} giving the section number.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'header'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'domhelpers'
op|'.'
name|'gatherTextNodes'
op|'('
name|'header'
op|'.'
name|'childNodes'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|getSectionReference
dedent|''
name|'def'
name|'getSectionReference'
op|'('
name|'entry'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Find the section number which contains the given node.\n\n    This function looks at the given node\'s ancestry until it finds a node\n    which defines a section, then returns that section\'s number.\n\n    @type entry: A DOM Node\n    @param entry: The node for which to determine the section.\n\n    @rtype: C{str}\n    @return: The section number, as returned by C{getSectionNumber} of the\n    first ancestor of C{entry} which defines a section, as determined by\n    L{getFirstAncestorWithSectionHeader}.\n    """'
newline|'\n'
name|'headers'
op|'='
name|'getFirstAncestorWithSectionHeader'
op|'('
name|'entry'
op|')'
newline|'\n'
name|'myHeader'
op|'='
name|'findNodeJustBefore'
op|'('
name|'entry'
op|','
name|'headers'
op|')'
newline|'\n'
name|'return'
name|'getSectionNumber'
op|'('
name|'myHeader'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|index
dedent|''
name|'def'
name|'index'
op|'('
name|'document'
op|','
name|'filename'
op|','
name|'chapterReference'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Extract index entries from the given document and store them for later use\n    and insert named anchors so that the index can link back to those entries.\n\n    Any node with a C{class} attribute set to C{index} is considered an index\n    entry.\n\n    @type document: A DOM Node or Document\n    @param document: The input document which contains all of the content to be\n    presented.\n\n    @type filename: C{str}\n    @param filename: A link to the output for the given document which will be\n    included in the index to link to any index entry found here.\n\n    @type chapterReference: ???\n    @param chapterReference: ???\n\n    @return: C{None}\n    """'
newline|'\n'
name|'entries'
op|'='
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'document'
op|','
string|'"class"'
op|','
string|'"index"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'entries'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
dedent|''
name|'i'
op|'='
number|'0'
op|';'
newline|'\n'
name|'for'
name|'entry'
name|'in'
name|'entries'
op|':'
newline|'\n'
indent|'        '
name|'i'
op|'+='
number|'1'
newline|'\n'
name|'anchor'
op|'='
string|"'index%02d'"
op|'%'
name|'i'
newline|'\n'
name|'if'
name|'chapterReference'
op|':'
newline|'\n'
indent|'            '
name|'ref'
op|'='
name|'getSectionReference'
op|'('
name|'entry'
op|')'
name|'or'
name|'chapterReference'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'ref'
op|'='
string|"'link'"
newline|'\n'
dedent|''
name|'indexer'
op|'.'
name|'addEntry'
op|'('
name|'filename'
op|','
name|'anchor'
op|','
name|'entry'
op|'.'
name|'getAttribute'
op|'('
string|"'value'"
op|')'
op|','
name|'ref'
op|')'
newline|'\n'
comment|'# does nodeName even affect anything?'
nl|'\n'
name|'entry'
op|'.'
name|'nodeName'
op|'='
name|'entry'
op|'.'
name|'tagName'
op|'='
name|'entry'
op|'.'
name|'endTagName'
op|'='
string|"'a'"
newline|'\n'
name|'for'
name|'attrName'
name|'in'
name|'entry'
op|'.'
name|'attributes'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'entry'
op|'.'
name|'removeAttribute'
op|'('
name|'attrName'
op|')'
newline|'\n'
dedent|''
name|'entry'
op|'.'
name|'setAttribute'
op|'('
string|"'name'"
op|','
name|'anchor'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|setIndexLink
dedent|''
dedent|''
name|'def'
name|'setIndexLink'
op|'('
name|'template'
op|','
name|'indexFilename'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Insert a link to an index document.\n\n    Any node with a C{class} attribute set to C{index-link} will have its tag\n    name changed to C{a} and its C{href} attribute set to C{indexFilename}.\n\n    @type template: A DOM Node or Document\n    @param template: The output template which defines the presentation of the\n    version information.\n\n    @type indexFilename: C{str}\n    @param indexFilename: The address of the index document to which to link.\n    If any C{False} value, this function will remove all index-link nodes.\n\n    @return: C{None}\n    """'
newline|'\n'
name|'indexLinks'
op|'='
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'template'
op|','
nl|'\n'
string|'"class"'
op|','
nl|'\n'
string|'"index-link"'
op|')'
newline|'\n'
name|'for'
name|'link'
name|'in'
name|'indexLinks'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'indexFilename'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'link'
op|'.'
name|'parentNode'
op|'.'
name|'removeChild'
op|'('
name|'link'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'link'
op|'.'
name|'nodeName'
op|'='
name|'link'
op|'.'
name|'tagName'
op|'='
name|'link'
op|'.'
name|'endTagName'
op|'='
string|"'a'"
newline|'\n'
name|'for'
name|'attrName'
name|'in'
name|'link'
op|'.'
name|'attributes'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'link'
op|'.'
name|'removeAttribute'
op|'('
name|'attrName'
op|')'
newline|'\n'
dedent|''
name|'link'
op|'.'
name|'setAttribute'
op|'('
string|"'href'"
op|','
name|'indexFilename'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|numberDocument
dedent|''
dedent|''
dedent|''
name|'def'
name|'numberDocument'
op|'('
name|'document'
op|','
name|'chapterNumber'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Number the sections of the given document.\n\n    A dot-separated chapter, section number is added to the beginning of each\n    section, as defined by C{h2} nodes.\n\n    This is probably intended to interact in a rather specific way with\n    L{getSectionNumber}.\n\n    @type document: A DOM Node or Document\n    @param document: The input document which contains all of the content to be\n    presented.\n\n    @type chapterNumber: C{int}\n    @param chapterNumber: The chapter number of this content in an overall\n    document.\n\n    @return: C{None}\n    """'
newline|'\n'
name|'i'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'domhelpers'
op|'.'
name|'findNodesNamed'
op|'('
name|'document'
op|','
string|'"h2"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'label'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'label'
op|'.'
name|'data'
op|'='
string|'"%s.%d "'
op|'%'
op|'('
name|'chapterNumber'
op|','
name|'i'
op|')'
newline|'\n'
name|'node'
op|'.'
name|'insertBefore'
op|'('
name|'label'
op|','
name|'node'
op|'.'
name|'firstChild'
op|')'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|fixRelativeLinks
dedent|''
dedent|''
name|'def'
name|'fixRelativeLinks'
op|'('
name|'document'
op|','
name|'linkrel'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Replace relative links in C{str} and C{href} attributes with links relative\n    to C{linkrel}.\n\n    @type document: A DOM Node or Document\n    @param document: The output template.\n\n    @type linkrel: C{str}\n    @param linkrel: An prefix to apply to all relative links in C{src} or\n    C{href} attributes in the input document when generating the output\n    document.\n    """'
newline|'\n'
name|'for'
name|'attr'
name|'in'
string|"'src'"
op|','
string|"'href'"
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'node'
name|'in'
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'document'
op|','
name|'attr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'href'
op|'='
name|'node'
op|'.'
name|'getAttribute'
op|'('
name|'attr'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'href'
op|'.'
name|'startswith'
op|'('
string|"'http'"
op|')'
name|'and'
name|'not'
name|'href'
op|'.'
name|'startswith'
op|'('
string|"'/'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'node'
op|'.'
name|'setAttribute'
op|'('
name|'attr'
op|','
name|'linkrel'
op|'+'
name|'node'
op|'.'
name|'getAttribute'
op|'('
name|'attr'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|setTitle
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'setTitle'
op|'('
name|'template'
op|','
name|'title'
op|','
name|'chapterNumber'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Add title and chapter number information to the template document.\n\n    The title is added to the end of the first C{title} tag and the end of the\n    first tag with a C{class} attribute set to C{title}.  If specified, the\n    chapter is inserted before the title.\n\n    @type template: A DOM Node or Document\n    @param template: The output template which defines the presentation of the\n    version information.\n\n    @type title: C{list} of DOM Nodes\n    @param title: Nodes from the input document defining its title.\n\n    @type chapterNumber: C{int}\n    @param chapterNumber: The chapter number of this content in an overall\n    document.  If not applicable, any C{False} value will result in this\n    information being omitted.\n\n    @return: C{None}\n    """'
newline|'\n'
name|'if'
name|'numberer'
op|'.'
name|'getNumberSections'
op|'('
op|')'
name|'and'
name|'chapterNumber'
op|':'
newline|'\n'
indent|'        '
name|'titleNode'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
comment|'# This is necessary in order for cloning below to work.  See Python'
nl|'\n'
comment|'# isuse 4851.'
nl|'\n'
name|'titleNode'
op|'.'
name|'ownerDocument'
op|'='
name|'template'
op|'.'
name|'ownerDocument'
newline|'\n'
name|'titleNode'
op|'.'
name|'data'
op|'='
string|"'%s. '"
op|'%'
op|'('
name|'chapterNumber'
op|','
op|')'
newline|'\n'
name|'title'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'titleNode'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'nodeList'
name|'in'
op|'('
name|'domhelpers'
op|'.'
name|'findNodesNamed'
op|'('
name|'template'
op|','
string|'"title"'
op|')'
op|','
nl|'\n'
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'template'
op|','
string|'"class"'
op|','
nl|'\n'
string|"'title'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'nodeList'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'titleNode'
name|'in'
name|'title'
op|':'
newline|'\n'
indent|'                '
name|'nodeList'
op|'['
number|'0'
op|']'
op|'.'
name|'appendChild'
op|'('
name|'titleNode'
op|'.'
name|'cloneNode'
op|'('
name|'True'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|setAuthors
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'setAuthors'
op|'('
name|'template'
op|','
name|'authors'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Add author information to the template document.\n\n    Names and contact information for authors are added to each node with a\n    C{class} attribute set to C{authors} and to the template head as C{link}\n    nodes.\n\n    @type template: A DOM Node or Document\n    @param template: The output template which defines the presentation of the\n    version information.\n\n    @type authors: C{list} of two-tuples of C{str}\n    @param authors: List of names and contact information for the authors of\n    the input document.\n\n    @return: C{None}\n    """'
newline|'\n'
nl|'\n'
name|'for'
name|'node'
name|'in'
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'template'
op|','
nl|'\n'
string|'"class"'
op|','
string|"'authors'"
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# First, similarly to setTitle, insert text into an <div'
nl|'\n'
comment|'# class="authors">'
nl|'\n'
indent|'        '
name|'container'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'span'"
op|')'
newline|'\n'
name|'for'
name|'name'
op|','
name|'href'
name|'in'
name|'authors'
op|':'
newline|'\n'
indent|'            '
name|'anchor'
op|'='
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'anchor'
op|'.'
name|'setAttribute'
op|'('
string|"'href'"
op|','
name|'href'
op|')'
newline|'\n'
name|'anchorText'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'anchorText'
op|'.'
name|'data'
op|'='
name|'name'
newline|'\n'
name|'anchor'
op|'.'
name|'appendChild'
op|'('
name|'anchorText'
op|')'
newline|'\n'
name|'if'
op|'('
name|'name'
op|','
name|'href'
op|')'
op|'=='
name|'authors'
op|'['
op|'-'
number|'1'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'len'
op|'('
name|'authors'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'container'
op|'.'
name|'appendChild'
op|'('
name|'anchor'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'andText'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'andText'
op|'.'
name|'data'
op|'='
string|"'and '"
newline|'\n'
name|'container'
op|'.'
name|'appendChild'
op|'('
name|'andText'
op|')'
newline|'\n'
name|'container'
op|'.'
name|'appendChild'
op|'('
name|'anchor'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'container'
op|'.'
name|'appendChild'
op|'('
name|'anchor'
op|')'
newline|'\n'
name|'commaText'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'commaText'
op|'.'
name|'data'
op|'='
string|"', '"
newline|'\n'
name|'container'
op|'.'
name|'appendChild'
op|'('
name|'commaText'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'node'
op|'.'
name|'appendChild'
op|'('
name|'container'
op|')'
newline|'\n'
nl|'\n'
comment|'# Second, add appropriate <link rel="author" ...> tags to the <head>.'
nl|'\n'
dedent|''
name|'head'
op|'='
name|'domhelpers'
op|'.'
name|'findNodesNamed'
op|'('
name|'template'
op|','
string|"'head'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'authors'
op|'='
op|'['
name|'dom'
op|'.'
name|'parseString'
op|'('
string|'\'<link rel="author" href="%s" title="%s"/>\''
nl|'\n'
op|'%'
op|'('
name|'href'
op|','
name|'name'
op|')'
op|')'
op|'.'
name|'childNodes'
op|'['
number|'0'
op|']'
nl|'\n'
name|'for'
name|'name'
op|','
name|'href'
name|'in'
name|'authors'
op|']'
newline|'\n'
name|'head'
op|'.'
name|'childNodes'
op|'.'
name|'extend'
op|'('
name|'authors'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|setVersion
dedent|''
name|'def'
name|'setVersion'
op|'('
name|'template'
op|','
name|'version'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Add a version indicator to the given template.\n\n    @type template: A DOM Node or Document\n    @param template: The output template which defines the presentation of the\n    version information.\n\n    @type version: C{str}\n    @param version: The version string to add to the template.\n\n    @return: C{None}\n    """'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'template'
op|','
string|'"class"'
op|','
nl|'\n'
string|'"version"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'text'
op|'='
name|'dom'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'text'
op|'.'
name|'data'
op|'='
name|'version'
newline|'\n'
name|'node'
op|'.'
name|'appendChild'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|getOutputFileName
dedent|''
dedent|''
name|'def'
name|'getOutputFileName'
op|'('
name|'originalFileName'
op|','
name|'outputExtension'
op|','
name|'index'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return a filename which is the same as C{originalFileName} except for the\n    extension, which is replaced with C{outputExtension}.\n\n    For example, if C{originalFileName} is C{\'/foo/bar.baz\'} and\n    C{outputExtension} is C{\'quux\'}, the return value will be\n    C{\'/foo/bar.quux\'}.\n\n    @type originalFileName: C{str}\n    @type outputExtension: C{stR}\n    @param index: ignored, never passed.\n    @rtype: C{str}\n    """'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'originalFileName'
op|')'
op|'['
number|'0'
op|']'
op|'+'
name|'outputExtension'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|munge
dedent|''
name|'def'
name|'munge'
op|'('
name|'document'
op|','
name|'template'
op|','
name|'linkrel'
op|','
name|'dir'
op|','
name|'fullpath'
op|','
name|'ext'
op|','
name|'url'
op|','
name|'config'
op|','
name|'outfileGenerator'
op|'='
name|'getOutputFileName'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Mutate C{template} until it resembles C{document}.\n\n    @type document: A DOM Node or Document\n    @param document: The input document which contains all of the content to be\n    presented.\n\n    @type template: A DOM Node or Document\n    @param template: The template document which defines the desired\n    presentation format of the content.\n\n    @type linkrel: C{str}\n    @param linkrel: An prefix to apply to all relative links in C{src} or\n    C{href} attributes in the input document when generating the output\n    document.\n\n    @type dir: C{str}\n    @param dir: The directory in which to search for source listing files.\n\n    @type fullpath: C{str}\n    @param fullpath: The file name which contained the input document.\n\n    @type ext: C{str}\n    @param ext: The extension to use when selecting an output file name.  This\n    replaces the extension of the input file name.\n\n    @type url: C{str}\n    @param url: A string which will be interpolated with the fully qualified\n    Python name of any API reference encountered in the input document, the\n    result of which will be used as a link to API documentation for that name\n    in the output document.\n\n    @type config: C{dict}\n    @param config: Further specification of the desired form of the output.\n    Valid keys in this dictionary::\n\n        noapi: If present and set to a True value, links to API documentation\n               will not be generated.\n\n        version: A string which will be included in the output to indicate the\n                 version of this documentation.\n\n    @type outfileGenerator: Callable of C{str}, C{str} returning C{str}\n    @param outfileGenerator: Output filename factory.  This is invoked with the\n    intput filename and C{ext} and the output document is serialized to the\n    file with the name returned.\n\n    @return: C{None}\n    """'
newline|'\n'
name|'fixRelativeLinks'
op|'('
name|'template'
op|','
name|'linkrel'
op|')'
newline|'\n'
name|'addMtime'
op|'('
name|'template'
op|','
name|'fullpath'
op|')'
newline|'\n'
name|'removeH1'
op|'('
name|'document'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'config'
op|'.'
name|'get'
op|'('
string|"'noapi'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixAPI'
op|'('
name|'document'
op|','
name|'url'
op|')'
newline|'\n'
dedent|''
name|'fontifyPython'
op|'('
name|'document'
op|')'
newline|'\n'
name|'fixLinks'
op|'('
name|'document'
op|','
name|'ext'
op|')'
newline|'\n'
name|'addPyListings'
op|'('
name|'document'
op|','
name|'dir'
op|')'
newline|'\n'
name|'addHTMLListings'
op|'('
name|'document'
op|','
name|'dir'
op|')'
newline|'\n'
name|'addPlainListings'
op|'('
name|'document'
op|','
name|'dir'
op|')'
newline|'\n'
name|'putInToC'
op|'('
name|'template'
op|','
name|'generateToC'
op|'('
name|'document'
op|')'
op|')'
newline|'\n'
name|'footnotes'
op|'('
name|'document'
op|')'
newline|'\n'
name|'notes'
op|'('
name|'document'
op|')'
newline|'\n'
nl|'\n'
name|'setIndexLink'
op|'('
name|'template'
op|','
name|'indexer'
op|'.'
name|'getIndexFilename'
op|'('
op|')'
op|')'
newline|'\n'
name|'setVersion'
op|'('
name|'template'
op|','
name|'config'
op|'.'
name|'get'
op|'('
string|"'version'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Insert the document into the template'
nl|'\n'
name|'chapterNumber'
op|'='
name|'htmlbook'
op|'.'
name|'getNumber'
op|'('
name|'fullpath'
op|')'
newline|'\n'
name|'title'
op|'='
name|'domhelpers'
op|'.'
name|'findNodesNamed'
op|'('
name|'document'
op|','
string|"'title'"
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'childNodes'
newline|'\n'
name|'setTitle'
op|'('
name|'template'
op|','
name|'title'
op|','
name|'chapterNumber'
op|')'
newline|'\n'
name|'if'
name|'numberer'
op|'.'
name|'getNumberSections'
op|'('
op|')'
name|'and'
name|'chapterNumber'
op|':'
newline|'\n'
indent|'        '
name|'numberDocument'
op|'('
name|'document'
op|','
name|'chapterNumber'
op|')'
newline|'\n'
dedent|''
name|'index'
op|'('
name|'document'
op|','
name|'outfileGenerator'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'fullpath'
op|')'
op|'['
number|'1'
op|']'
op|','
name|'ext'
op|')'
op|','
nl|'\n'
name|'htmlbook'
op|'.'
name|'getReference'
op|'('
name|'fullpath'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'authors'
op|'='
name|'domhelpers'
op|'.'
name|'findNodesNamed'
op|'('
name|'document'
op|','
string|"'link'"
op|')'
newline|'\n'
name|'authors'
op|'='
op|'['
op|'('
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|"'title'"
op|')'
name|'or'
string|"''"
op|','
nl|'\n'
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|"'href'"
op|')'
name|'or'
string|"''"
op|')'
nl|'\n'
name|'for'
name|'node'
name|'in'
name|'authors'
nl|'\n'
name|'if'
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|"'rel'"
op|')'
op|'=='
string|"'author'"
op|']'
newline|'\n'
name|'setAuthors'
op|'('
name|'template'
op|','
name|'authors'
op|')'
newline|'\n'
nl|'\n'
name|'body'
op|'='
name|'domhelpers'
op|'.'
name|'findNodesNamed'
op|'('
name|'document'
op|','
string|'"body"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'tmplbody'
op|'='
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'template'
op|','
string|'"class"'
op|','
nl|'\n'
string|'"body"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'tmplbody'
op|'.'
name|'childNodes'
op|'='
name|'body'
op|'.'
name|'childNodes'
newline|'\n'
name|'tmplbody'
op|'.'
name|'setAttribute'
op|'('
string|'"class"'
op|','
string|'"content"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_LocationReportingErrorHandler
dedent|''
name|'class'
name|'_LocationReportingErrorHandler'
op|'('
name|'ErrorHandler'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Define a SAX error handler which can report the location of fatal\n    errors.\n\n    Unlike the errors reported during parsing by other APIs in the xml\n    package, this one tries to mismatched tag errors by including the\n    location of both the relevant opening and closing tags.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'contentHandler'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'contentHandler'
op|'='
name|'contentHandler'
newline|'\n'
nl|'\n'
DECL|member|fatalError
dedent|''
name|'def'
name|'fatalError'
op|'('
name|'self'
op|','
name|'err'
op|')'
op|':'
newline|'\n'
comment|'# Unfortunately, the underlying expat error code is only exposed as'
nl|'\n'
comment|'# a string.  I surely do hope no one ever goes and localizes expat.'
nl|'\n'
indent|'        '
name|'if'
name|'err'
op|'.'
name|'getMessage'
op|'('
op|')'
op|'=='
string|"'mismatched tag'"
op|':'
newline|'\n'
indent|'            '
name|'expect'
op|','
name|'begLine'
op|','
name|'begCol'
op|'='
name|'self'
op|'.'
name|'contentHandler'
op|'.'
name|'_locationStack'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'endLine'
op|','
name|'endCol'
op|'='
name|'err'
op|'.'
name|'getLineNumber'
op|'('
op|')'
op|','
name|'err'
op|'.'
name|'getColumnNumber'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'process'
op|'.'
name|'ProcessingFailure'
op|'('
nl|'\n'
string|'"mismatched close tag at line %d, column %d; expected </%s> "'
nl|'\n'
string|'"(from line %d, column %d)"'
op|'%'
op|'('
nl|'\n'
name|'endLine'
op|','
name|'endCol'
op|','
name|'expect'
op|','
name|'begLine'
op|','
name|'begCol'
op|')'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'process'
op|'.'
name|'ProcessingFailure'
op|'('
nl|'\n'
string|"'%s at line %d, column %d'"
op|'%'
op|'('
name|'err'
op|'.'
name|'getMessage'
op|'('
op|')'
op|','
nl|'\n'
name|'err'
op|'.'
name|'getLineNumber'
op|'('
op|')'
op|','
nl|'\n'
name|'err'
op|'.'
name|'getColumnNumber'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_TagTrackingContentHandler
dedent|''
dedent|''
name|'class'
name|'_TagTrackingContentHandler'
op|'('
name|'SAX2DOM'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Define a SAX content handler which keeps track of the start location of\n    all open tags.  This information is used by the above defined error\n    handler to report useful locations when a fatal error is encountered.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SAX2DOM'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_locationStack'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|setDocumentLocator
dedent|''
name|'def'
name|'setDocumentLocator'
op|'('
name|'self'
op|','
name|'locator'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_docLocator'
op|'='
name|'locator'
newline|'\n'
name|'SAX2DOM'
op|'.'
name|'setDocumentLocator'
op|'('
name|'self'
op|','
name|'locator'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startElement
dedent|''
name|'def'
name|'startElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_locationStack'
op|'.'
name|'append'
op|'('
op|'('
name|'name'
op|','
name|'self'
op|'.'
name|'_docLocator'
op|'.'
name|'getLineNumber'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'_docLocator'
op|'.'
name|'getColumnNumber'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'SAX2DOM'
op|'.'
name|'startElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'attrs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|endElement
dedent|''
name|'def'
name|'endElement'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_locationStack'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'SAX2DOM'
op|'.'
name|'endElement'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_LocalEntityResolver
dedent|''
dedent|''
name|'class'
name|'_LocalEntityResolver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Implement DTD loading (from a local source) for the limited number of\n    DTDs which are allowed for Lore input documents.\n\n    @ivar filename: The name of the file containing the lore input\n        document.\n\n    @ivar knownDTDs: A mapping from DTD system identifiers to L{FilePath}\n        instances pointing to the corresponding DTD.\n    """'
newline|'\n'
DECL|variable|s
name|'s'
op|'='
name|'FilePath'
op|'('
name|'__file__'
op|')'
op|'.'
name|'sibling'
newline|'\n'
nl|'\n'
DECL|variable|knownDTDs
name|'knownDTDs'
op|'='
op|'{'
nl|'\n'
name|'None'
op|':'
name|'s'
op|'('
string|'"xhtml1-strict.dtd"'
op|')'
op|','
nl|'\n'
string|'"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"'
op|':'
name|'s'
op|'('
string|'"xhtml1-strict.dtd"'
op|')'
op|','
nl|'\n'
string|'"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"'
op|':'
name|'s'
op|'('
string|'"xhtml1-transitional.dtd"'
op|')'
op|','
nl|'\n'
string|'"xhtml-lat1.ent"'
op|':'
name|'s'
op|'('
string|'"xhtml-lat1.ent"'
op|')'
op|','
nl|'\n'
string|'"xhtml-symbol.ent"'
op|':'
name|'s'
op|'('
string|'"xhtml-symbol.ent"'
op|')'
op|','
nl|'\n'
string|'"xhtml-special.ent"'
op|':'
name|'s'
op|'('
string|'"xhtml-special.ent"'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'del'
name|'s'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'filename'
op|'='
name|'filename'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|resolveEntity
dedent|''
name|'def'
name|'resolveEntity'
op|'('
name|'self'
op|','
name|'publicId'
op|','
name|'systemId'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'source'
op|'='
name|'InputSource'
op|'('
op|')'
newline|'\n'
name|'source'
op|'.'
name|'setSystemId'
op|'('
name|'systemId'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'dtdPath'
op|'='
name|'self'
op|'.'
name|'knownDTDs'
op|'['
name|'systemId'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'process'
op|'.'
name|'ProcessingFailure'
op|'('
nl|'\n'
string|'"Invalid DTD system identifier (%r) in %s.  Only "'
nl|'\n'
string|'"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd "'
nl|'\n'
string|'"is allowed."'
op|'%'
op|'('
name|'systemId'
op|','
name|'self'
op|'.'
name|'filename'
op|')'
op|')'
newline|'\n'
dedent|''
name|'source'
op|'.'
name|'setByteStream'
op|'('
name|'dtdPath'
op|'.'
name|'open'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'source'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|parseFileAndReport
dedent|''
dedent|''
name|'def'
name|'parseFileAndReport'
op|'('
name|'filename'
op|','
name|'_open'
op|'='
name|'file'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Parse and return the contents of the given lore XHTML document.\n\n    @type filename: C{str}\n    @param filename: The name of a file containing a lore XHTML document to\n    load.\n\n    @raise process.ProcessingFailure: When the contents of the specified file\n    cannot be parsed.\n\n    @rtype: A DOM Document\n    @return: The document contained in C{filename}.\n    """'
newline|'\n'
name|'content'
op|'='
name|'_TagTrackingContentHandler'
op|'('
op|')'
newline|'\n'
name|'error'
op|'='
name|'_LocationReportingErrorHandler'
op|'('
name|'content'
op|')'
newline|'\n'
name|'parser'
op|'='
name|'make_parser'
op|'('
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'setContentHandler'
op|'('
name|'content'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'setErrorHandler'
op|'('
name|'error'
op|')'
newline|'\n'
nl|'\n'
comment|'# In order to call a method on the expat parser which will be used by this'
nl|'\n'
comment|"# parser, we need the expat parser to be created.  This doesn't happen"
nl|'\n'
comment|"# until reset is called, normally by the parser's parse method.  That's too"
nl|'\n'
comment|'# late for us, since it will then go on to parse the document without'
nl|'\n'
comment|'# letting us do any extra set up.  So, force the expat parser to be created'
nl|'\n'
comment|'# here, and then disable reset so that the parser created is the one'
nl|'\n'
comment|'# actually used to parse our document.  Resetting is only needed if more'
nl|'\n'
comment|"# than one document is going to be parsed, and that isn't the case here."
nl|'\n'
name|'parser'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'reset'
op|'='
name|'lambda'
op|':'
name|'None'
newline|'\n'
nl|'\n'
comment|'# This is necessary to make the xhtml1 transitional declaration optional.'
nl|'\n'
comment|'# It causes LocalEntityResolver.resolveEntity(None, None) to be called.'
nl|'\n'
comment|'# LocalEntityResolver handles that case by giving out the xhtml1'
nl|'\n'
comment|'# transitional dtd.  Unfortunately, there is no public API for manipulating'
nl|'\n'
comment|'# the expat parser when using xml.sax.  Using the private _parser attribute'
nl|'\n'
comment|"# may break.  It's also possible that make_parser will return a parser"
nl|'\n'
comment|"# which doesn't use expat, but uses some other parser.  Oh well. :("
nl|'\n'
comment|'# -exarkun'
nl|'\n'
name|'parser'
op|'.'
name|'_parser'
op|'.'
name|'UseForeignDTD'
op|'('
name|'True'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'setEntityResolver'
op|'('
name|'_LocalEntityResolver'
op|'('
name|'filename'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# This is probably no-op because expat is not a validating parser.  Who'
nl|'\n'
comment|'# knows though, maybe you figured out a way to not use expat.'
nl|'\n'
name|'parser'
op|'.'
name|'setFeature'
op|'('
name|'feature_validation'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'fObj'
op|'='
name|'_open'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'parser'
op|'.'
name|'parse'
op|'('
name|'fObj'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'process'
op|'.'
name|'ProcessingFailure'
op|'('
nl|'\n'
name|'e'
op|'.'
name|'strerror'
op|'+'
string|'", filename was \'"'
op|'+'
name|'filename'
op|'+'
string|'"\'"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'fObj'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'content'
op|'.'
name|'document'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|makeSureDirectoryExists
dedent|''
name|'def'
name|'makeSureDirectoryExists'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'dirname'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'if'
op|'('
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'dirname'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'dirname'
op|')'
newline|'\n'
nl|'\n'
DECL|function|doFile
dedent|''
dedent|''
name|'def'
name|'doFile'
op|'('
name|'filename'
op|','
name|'linkrel'
op|','
name|'ext'
op|','
name|'url'
op|','
name|'templ'
op|','
name|'options'
op|'='
op|'{'
op|'}'
op|','
name|'outfileGenerator'
op|'='
name|'getOutputFileName'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Process the input document at C{filename} and write an output document.\n\n    @type filename: C{str}\n    @param filename: The path to the input file which will be processed.\n\n    @type linkrel: C{str}\n    @param linkrel: An prefix to apply to all relative links in C{src} or\n    C{href} attributes in the input document when generating the output\n    document.\n\n    @type ext: C{str}\n    @param ext: The extension to use when selecting an output file name.  This\n    replaces the extension of the input file name.\n\n    @type url: C{str}\n    @param url: A string which will be interpolated with the fully qualified\n    Python name of any API reference encountered in the input document, the\n    result of which will be used as a link to API documentation for that name\n    in the output document.\n\n    @type templ: A DOM Node or Document\n    @param templ: The template on which the output document will be based.\n    This is mutated and then serialized to the output file.\n\n    @type options: C{dict}\n    @param options: Further specification of the desired form of the output.\n    Valid keys in this dictionary::\n\n        noapi: If present and set to a True value, links to API documentation\n               will not be generated.\n\n        version: A string which will be included in the output to indicate the\n                 version of this documentation.\n\n    @type outfileGenerator: Callable of C{str}, C{str} returning C{str}\n    @param outfileGenerator: Output filename factory.  This is invoked with the\n    intput filename and C{ext} and the output document is serialized to the\n    file with the name returned.\n\n    @return: C{None}\n    """'
newline|'\n'
name|'doc'
op|'='
name|'parseFileAndReport'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'clonedNode'
op|'='
name|'templ'
op|'.'
name|'cloneNode'
op|'('
number|'1'
op|')'
newline|'\n'
name|'munge'
op|'('
name|'doc'
op|','
name|'clonedNode'
op|','
name|'linkrel'
op|','
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'filename'
op|')'
op|','
name|'filename'
op|','
name|'ext'
op|','
nl|'\n'
name|'url'
op|','
name|'options'
op|','
name|'outfileGenerator'
op|')'
newline|'\n'
name|'newFilename'
op|'='
name|'outfileGenerator'
op|'('
name|'filename'
op|','
name|'ext'
op|')'
newline|'\n'
name|'_writeDocument'
op|'('
name|'newFilename'
op|','
name|'clonedNode'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_writeDocument
dedent|''
name|'def'
name|'_writeDocument'
op|'('
name|'newFilename'
op|','
name|'clonedNode'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Serialize the given node to XML into the named file.\n\n    @param newFilename: The name of the file to which the XML will be\n        written.  If this is in a directory which does not exist, the\n        directory will be created.\n\n    @param clonedNode: The root DOM node which will be serialized.\n\n    @return: C{None}\n    """'
newline|'\n'
name|'makeSureDirectoryExists'
op|'('
name|'newFilename'
op|')'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'newFilename'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
name|'clonedNode'
op|'.'
name|'toxml'
op|'('
string|"'utf-8'"
op|')'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

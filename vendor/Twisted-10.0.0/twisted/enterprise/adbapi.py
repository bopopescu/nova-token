begin_unit
comment|'# -*- test-case-name: twisted.test.test_adbapi -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nAn asynchronous mapping to U{DB-API 2.0<http://www.python.org/topics/database/DatabaseAPI-2.0.html>}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'threads'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'reflect'
op|','
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'deprecate'
name|'import'
name|'deprecated'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'versions'
name|'import'
name|'Version'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConnectionLost
name|'class'
name|'ConnectionLost'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This exception means that a db connection has been lost.  Client code may\n    try again.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Connection
dedent|''
name|'class'
name|'Connection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A wrapper for a DB-API connection instance.\n\n    The wrapper passes almost everything to the wrapped connection and so has\n    the same API. However, the Connection knows about its pool and also\n    handle reconnecting should when the real connection dies.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pool'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_pool'
op|'='
name|'pool'
newline|'\n'
name|'self'
op|'.'
name|'_connection'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'reconnect'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# The way adbapi works right now means that closing a connection is'
nl|'\n'
comment|'# a really bad thing  as it leaves a dead connection associated with'
nl|'\n'
comment|'# a thread in the thread pool.'
nl|'\n'
comment|'# Really, I think closing a pooled connection should return it to the'
nl|'\n'
comment|"# pool but that's handled by the runWithConnection method already so,"
nl|'\n'
comment|"# rather than upsetting anyone by raising an exception, let's ignore"
nl|'\n'
comment|'# the request'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|rollback
dedent|''
name|'def'
name|'rollback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_pool'
op|'.'
name|'reconnect'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_connection'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_connection'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
name|'curs'
op|'='
name|'self'
op|'.'
name|'_connection'
op|'.'
name|'cursor'
op|'('
op|')'
newline|'\n'
name|'curs'
op|'.'
name|'execute'
op|'('
name|'self'
op|'.'
name|'_pool'
op|'.'
name|'good_sql'
op|')'
newline|'\n'
name|'curs'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_connection'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
name|'None'
op|','
string|'"Rollback failed"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_pool'
op|'.'
name|'disconnect'
op|'('
name|'self'
op|'.'
name|'_connection'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_pool'
op|'.'
name|'noisy'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Connection lost."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'raise'
name|'ConnectionLost'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|reconnect
dedent|''
name|'def'
name|'reconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_connection'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_pool'
op|'.'
name|'disconnect'
op|'('
name|'self'
op|'.'
name|'_connection'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_connection'
op|'='
name|'self'
op|'.'
name|'_pool'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_connection'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Transaction
dedent|''
dedent|''
name|'class'
name|'Transaction'
op|':'
newline|'\n'
indent|'    '
string|'"""A lightweight wrapper for a DB-API \'cursor\' object.\n\n    Relays attribute access to the DB cursor. That is, you can call\n    execute(), fetchall(), etc., and they will be called on the\n    underlying DB-API cursor object. Attributes will also be\n    retrieved from there.\n    """'
newline|'\n'
DECL|variable|_cursor
name|'_cursor'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pool'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_pool'
op|'='
name|'pool'
newline|'\n'
name|'self'
op|'.'
name|'_connection'
op|'='
name|'connection'
newline|'\n'
name|'self'
op|'.'
name|'reopen'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'_cursor'
op|'='
name|'self'
op|'.'
name|'_cursor'
newline|'\n'
name|'self'
op|'.'
name|'_cursor'
op|'='
name|'None'
newline|'\n'
name|'_cursor'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|reopen
dedent|''
name|'def'
name|'reopen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_cursor'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cursor'
op|'='
name|'self'
op|'.'
name|'_connection'
op|'.'
name|'cursor'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_pool'
op|'.'
name|'reconnect'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
name|'None'
op|','
string|'"Cursor creation failed"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'_pool'
op|'.'
name|'noisy'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'Connection lost, reconnecting'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'reconnect'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cursor'
op|'='
name|'self'
op|'.'
name|'_connection'
op|'.'
name|'cursor'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|reconnect
dedent|''
name|'def'
name|'reconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_connection'
op|'.'
name|'reconnect'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cursor'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_cursor'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConnectionPool
dedent|''
dedent|''
name|'class'
name|'ConnectionPool'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Represent a pool of connections to a DB-API 2.0 compliant database.\n\n    @ivar connectionFactory: factory for connections, default to L{Connection}.\n    @type connectionFactory: any callable.\n\n    @ivar transactionFactory: factory for transactions, default to\n        L{Transaction}.\n    @type transactionFactory: any callable\n    """'
newline|'\n'
nl|'\n'
DECL|variable|CP_ARGS
name|'CP_ARGS'
op|'='
string|'"min max name noisy openfun reconnect good_sql"'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|noisy
name|'noisy'
op|'='
name|'False'
comment|'# if true, generate informational log messages'
newline|'\n'
DECL|variable|min
name|'min'
op|'='
number|'3'
comment|'# minimum number of connections in pool'
newline|'\n'
DECL|variable|max
name|'max'
op|'='
number|'5'
comment|'# maximum number of connections in pool'
newline|'\n'
DECL|variable|name
name|'name'
op|'='
name|'None'
comment|'# Name to assign to thread pool for debugging'
newline|'\n'
DECL|variable|openfun
name|'openfun'
op|'='
name|'None'
comment|'# A function to call on new connections'
newline|'\n'
DECL|variable|reconnect
name|'reconnect'
op|'='
name|'False'
comment|'# reconnect when connections fail'
newline|'\n'
DECL|variable|good_sql
name|'good_sql'
op|'='
string|"'select 1'"
comment|'# a query which should always succeed'
newline|'\n'
nl|'\n'
DECL|variable|running
name|'running'
op|'='
name|'False'
comment|'# true when the pool is operating'
newline|'\n'
DECL|variable|connectionFactory
name|'connectionFactory'
op|'='
name|'Connection'
newline|'\n'
DECL|variable|transactionFactory
name|'transactionFactory'
op|'='
name|'Transaction'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'dbapiName'
op|','
op|'*'
name|'connargs'
op|','
op|'**'
name|'connkw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new ConnectionPool.\n\n        Any positional or keyword arguments other than those documented here\n        are passed to the DB-API object when connecting. Use these arguments to\n        pass database names, usernames, passwords, etc.\n\n        @param dbapiName: an import string to use to obtain a DB-API compatible\n                          module (e.g. \'pyPgSQL.PgSQL\')\n\n        @param cp_min: the minimum number of connections in pool (default 3)\n\n        @param cp_max: the maximum number of connections in pool (default 5)\n\n        @param cp_noisy: generate informational log messages during operation\n                         (default False)\n\n        @param cp_openfun: a callback invoked after every connect() on the\n                           underlying DB-API object. The callback is passed a\n                           new DB-API connection object.  This callback can\n                           setup per-connection state such as charset,\n                           timezone, etc.\n\n        @param cp_reconnect: detect connections which have failed and reconnect\n                             (default False). Failed connections may result in\n                             ConnectionLost exceptions, which indicate the\n                             query may need to be re-sent.\n\n        @param cp_good_sql: an sql query which should always succeed and change\n                            no state (default \'select 1\')\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'dbapiName'
op|'='
name|'dbapiName'
newline|'\n'
name|'self'
op|'.'
name|'dbapi'
op|'='
name|'reflect'
op|'.'
name|'namedModule'
op|'('
name|'dbapiName'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'dbapi'
op|','
string|"'apilevel'"
op|','
name|'None'
op|')'
op|'!='
string|"'2.0'"
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'DB API module not DB API 2.0 compliant.'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'dbapi'
op|','
string|"'threadsafety'"
op|','
number|'0'
op|')'
op|'<'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'DB API module not sufficiently thread-safe.'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'connargs'
op|'='
name|'connargs'
newline|'\n'
name|'self'
op|'.'
name|'connkw'
op|'='
name|'connkw'
newline|'\n'
nl|'\n'
name|'for'
name|'arg'
name|'in'
name|'self'
op|'.'
name|'CP_ARGS'
op|':'
newline|'\n'
indent|'            '
name|'cp_arg'
op|'='
string|"'cp_%s'"
op|'%'
name|'arg'
newline|'\n'
name|'if'
name|'connkw'
op|'.'
name|'has_key'
op|'('
name|'cp_arg'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'setattr'
op|'('
name|'self'
op|','
name|'arg'
op|','
name|'connkw'
op|'['
name|'cp_arg'
op|']'
op|')'
newline|'\n'
name|'del'
name|'connkw'
op|'['
name|'cp_arg'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'min'
op|'='
name|'min'
op|'('
name|'self'
op|'.'
name|'min'
op|','
name|'self'
op|'.'
name|'max'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'max'
op|'='
name|'max'
op|'('
name|'self'
op|'.'
name|'min'
op|','
name|'self'
op|'.'
name|'max'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'connections'
op|'='
op|'{'
op|'}'
comment|'# all connections, hashed on thread id'
newline|'\n'
nl|'\n'
comment|'# these are optional so import them here'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'threadpool'
newline|'\n'
name|'import'
name|'thread'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'threadID'
op|'='
name|'thread'
op|'.'
name|'get_ident'
newline|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
name|'self'
op|'.'
name|'min'
op|','
name|'self'
op|'.'
name|'max'
op|')'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'self'
op|'.'
name|'startID'
op|'='
name|'reactor'
op|'.'
name|'callWhenRunning'
op|'('
name|'self'
op|'.'
name|'_start'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_start
dedent|''
name|'def'
name|'_start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'startID'
op|'='
name|'None'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|start
dedent|''
name|'def'
name|'start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start the connection pool.\n\n        If you are using the reactor normally, this function does *not*\n        need to be called.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'running'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'shutdownID'
op|'='
name|'reactor'
op|'.'
name|'addSystemEventTrigger'
op|'('
string|"'during'"
op|','
nl|'\n'
string|"'shutdown'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'finalClose'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'running'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|runWithConnection
dedent|''
dedent|''
name|'def'
name|'runWithConnection'
op|'('
name|'self'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Execute a function with a database connection and return the result.\n\n        @param func: A callable object of one argument which will be executed\n            in a thread with a connection from the pool.  It will be passed as\n            its first argument a L{Connection} instance (whose interface is\n            mostly identical to that of a connection object for your DB-API\n            module of choice), and its results will be returned as a Deferred.\n            If the method raises an exception the transaction will be rolled\n            back.  Otherwise, the transaction will be committed.  B{Note} that\n            this function is B{not} run in the main thread: it must be\n            threadsafe.\n\n        @param *args: positional arguments to be passed to func\n\n        @param **kw: keyword arguments to be passed to func\n\n        @return: a Deferred which will fire the return value of\n            C{func(Transaction(...), *args, **kw)}, or a Failure.\n        """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'return'
name|'threads'
op|'.'
name|'deferToThreadPool'
op|'('
name|'reactor'
op|','
name|'self'
op|'.'
name|'threadpool'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_runWithConnection'
op|','
nl|'\n'
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_runWithConnection
dedent|''
name|'def'
name|'_runWithConnection'
op|'('
name|'self'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connectionFactory'
op|'('
name|'self'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'func'
op|'('
name|'conn'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'excType'
op|','
name|'excValue'
op|','
name|'excTraceback'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'conn'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
name|'None'
op|','
string|'"Rollback failed"'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'excType'
op|','
name|'excValue'
op|','
name|'excTraceback'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|runInteraction
dedent|''
dedent|''
name|'def'
name|'runInteraction'
op|'('
name|'self'
op|','
name|'interaction'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Interact with the database and return the result.\n\n        The \'interaction\' is a callable object which will be executed\n        in a thread using a pooled connection. It will be passed an\n        L{Transaction} object as an argument (whose interface is\n        identical to that of the database cursor for your DB-API\n        module of choice), and its results will be returned as a\n        Deferred. If running the method raises an exception, the\n        transaction will be rolled back. If the method returns a\n        value, the transaction will be committed.\n\n        NOTE that the function you pass is *not* run in the main\n        thread: you may have to worry about thread-safety in the\n        function you pass to this if it tries to use non-local\n        objects.\n\n        @param interaction: a callable object whose first argument\n            is an L{adbapi.Transaction}.\n\n        @param *args: additional positional arguments to be passed\n            to interaction\n\n        @param **kw: keyword arguments to be passed to interaction\n\n        @return: a Deferred which will fire the return value of\n            \'interaction(Transaction(...), *args, **kw)\', or a Failure.\n        """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'return'
name|'threads'
op|'.'
name|'deferToThreadPool'
op|'('
name|'reactor'
op|','
name|'self'
op|'.'
name|'threadpool'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_runInteraction'
op|','
nl|'\n'
name|'interaction'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|runQuery
dedent|''
name|'def'
name|'runQuery'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Execute an SQL query and return the result.\n\n        A DB-API cursor will will be invoked with cursor.execute(*args, **kw).\n        The exact nature of the arguments will depend on the specific flavor\n        of DB-API being used, but the first argument in *args be an SQL\n        statement. The result of a subsequent cursor.fetchall() will be\n        fired to the Deferred which is returned. If either the \'execute\' or\n        \'fetchall\' methods raise an exception, the transaction will be rolled\n        back and a Failure returned.\n\n        The  *args and **kw arguments will be passed to the DB-API cursor\'s\n        \'execute\' method.\n\n        @return: a Deferred which will fire the return value of a DB-API\n        cursor\'s \'fetchall\' method, or a Failure.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'runInteraction'
op|'('
name|'self'
op|'.'
name|'_runQuery'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|runOperation
dedent|''
name|'def'
name|'runOperation'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Execute an SQL query and return None.\n\n        A DB-API cursor will will be invoked with cursor.execute(*args, **kw).\n        The exact nature of the arguments will depend on the specific flavor\n        of DB-API being used, but the first argument in *args will be an SQL\n        statement. This method will not attempt to fetch any results from the\n        query and is thus suitable for INSERT, DELETE, and other SQL statements\n        which do not return values. If the \'execute\' method raises an\n        exception, the transaction will be rolled back and a Failure returned.\n\n        The args and kw arguments will be passed to the DB-API cursor\'s\n        \'execute\' method.\n\n        return: a Deferred which will fire None or a Failure.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'runInteraction'
op|'('
name|'self'
op|'.'
name|'_runOperation'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Close all pool connections and shutdown the pool."""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'shutdownID'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'removeSystemEventTrigger'
op|'('
name|'self'
op|'.'
name|'shutdownID'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'shutdownID'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'startID'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'removeSystemEventTrigger'
op|'('
name|'self'
op|'.'
name|'startID'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'startID'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'finalClose'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|finalClose
dedent|''
name|'def'
name|'finalClose'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This should only be called by the shutdown trigger."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'shutdownID'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'running'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'conn'
name|'in'
name|'self'
op|'.'
name|'connections'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_close'
op|'('
name|'conn'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connections'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connect
dedent|''
name|'def'
name|'connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a database connection when one becomes available.\n\n        This method blocks and should be run in a thread from the internal\n        threadpool. Don\'t call this method directly from non-threaded code.\n        Using this method outside the external threadpool may exceed the\n        maximum number of connections in the pool.\n\n        @return: a database connection from the pool.\n        """'
newline|'\n'
nl|'\n'
name|'tid'
op|'='
name|'self'
op|'.'
name|'threadID'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'self'
op|'.'
name|'connections'
op|'.'
name|'get'
op|'('
name|'tid'
op|')'
newline|'\n'
name|'if'
name|'conn'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'noisy'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'adbapi connecting: %s %s%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'dbapiName'
op|','
nl|'\n'
name|'self'
op|'.'
name|'connargs'
name|'or'
string|"''"
op|','
nl|'\n'
name|'self'
op|'.'
name|'connkw'
name|'or'
string|"''"
op|')'
op|')'
newline|'\n'
dedent|''
name|'conn'
op|'='
name|'self'
op|'.'
name|'dbapi'
op|'.'
name|'connect'
op|'('
op|'*'
name|'self'
op|'.'
name|'connargs'
op|','
op|'**'
name|'self'
op|'.'
name|'connkw'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'openfun'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'openfun'
op|'('
name|'conn'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connections'
op|'['
name|'tid'
op|']'
op|'='
name|'conn'
newline|'\n'
dedent|''
name|'return'
name|'conn'
newline|'\n'
nl|'\n'
DECL|member|disconnect
dedent|''
name|'def'
name|'disconnect'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disconnect a database connection associated with this pool.\n\n        Note: This function should only be used by the same thread which\n        called connect(). As with connect(), this function is not used\n        in normal non-threaded twisted code.\n        """'
newline|'\n'
name|'tid'
op|'='
name|'self'
op|'.'
name|'threadID'
op|'('
op|')'
newline|'\n'
name|'if'
name|'conn'
name|'is'
name|'not'
name|'self'
op|'.'
name|'connections'
op|'.'
name|'get'
op|'('
name|'tid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"wrong connection for thread"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'conn'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_close'
op|'('
name|'conn'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'connections'
op|'['
name|'tid'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_close
dedent|''
dedent|''
name|'def'
name|'_close'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'noisy'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'adbapi closing: %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'dbapiName'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
name|'None'
op|','
string|'"Connection close failed"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_runInteraction
dedent|''
dedent|''
name|'def'
name|'_runInteraction'
op|'('
name|'self'
op|','
name|'interaction'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connectionFactory'
op|'('
name|'self'
op|')'
newline|'\n'
name|'trans'
op|'='
name|'self'
op|'.'
name|'transactionFactory'
op|'('
name|'self'
op|','
name|'conn'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'interaction'
op|'('
name|'trans'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'trans'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'excType'
op|','
name|'excValue'
op|','
name|'excTraceback'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'conn'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
name|'None'
op|','
string|'"Rollback failed"'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'excType'
op|','
name|'excValue'
op|','
name|'excTraceback'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_runQuery
dedent|''
dedent|''
name|'def'
name|'_runQuery'
op|'('
name|'self'
op|','
name|'trans'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'trans'
op|'.'
name|'execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'return'
name|'trans'
op|'.'
name|'fetchall'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_runOperation
dedent|''
name|'def'
name|'_runOperation'
op|'('
name|'self'
op|','
name|'trans'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'trans'
op|'.'
name|'execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'dbapiName'"
op|':'
name|'self'
op|'.'
name|'dbapiName'
op|','
nl|'\n'
string|"'min'"
op|':'
name|'self'
op|'.'
name|'min'
op|','
nl|'\n'
string|"'max'"
op|':'
name|'self'
op|'.'
name|'max'
op|','
nl|'\n'
string|"'noisy'"
op|':'
name|'self'
op|'.'
name|'noisy'
op|','
nl|'\n'
string|"'reconnect'"
op|':'
name|'self'
op|'.'
name|'reconnect'
op|','
nl|'\n'
string|"'good_sql'"
op|':'
name|'self'
op|'.'
name|'good_sql'
op|','
nl|'\n'
string|"'connargs'"
op|':'
name|'self'
op|'.'
name|'connargs'
op|','
nl|'\n'
string|"'connkw'"
op|':'
name|'self'
op|'.'
name|'connkw'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__setstate__
dedent|''
name|'def'
name|'__setstate__'
op|'('
name|'self'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__dict__'
op|'='
name|'state'
newline|'\n'
name|'self'
op|'.'
name|'__init__'
op|'('
name|'self'
op|'.'
name|'dbapiName'
op|','
op|'*'
name|'self'
op|'.'
name|'connargs'
op|','
op|'**'
name|'self'
op|'.'
name|'connkw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'# Common deprecation decorator used for all deprecations.'
nl|'\n'
DECL|variable|_unreleasedVersion
dedent|''
dedent|''
name|'_unreleasedVersion'
op|'='
name|'Version'
op|'('
string|'"Twisted"'
op|','
number|'8'
op|','
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
DECL|variable|_unreleasedDeprecation
name|'_unreleasedDeprecation'
op|'='
name|'deprecated'
op|'('
name|'_unreleasedVersion'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_safe
name|'def'
name|'_safe'
op|'('
name|'text'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Something really stupid that replaces quotes with escaped quotes.\n    """'
newline|'\n'
name|'return'
name|'text'
op|'.'
name|'replace'
op|'('
string|'"\'"'
op|','
string|'"\'\'"'
op|')'
op|'.'
name|'replace'
op|'('
string|'"\\\\"'
op|','
string|'"\\\\\\\\"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|safe
dedent|''
name|'def'
name|'safe'
op|'('
name|'text'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Make a string safe to include in an SQL statement.\n    """'
newline|'\n'
name|'return'
name|'_safe'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|safe
dedent|''
name|'safe'
op|'='
name|'_unreleasedDeprecation'
op|'('
name|'safe'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
name|'__all__'
op|'='
op|'['
string|"'Transaction'"
op|','
string|"'ConnectionPool'"
op|','
string|"'safe'"
op|']'
newline|'\n'
endmarker|''
end_unit

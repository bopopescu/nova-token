begin_unit
comment|'# -*- test-case-name: twisted.test.test_reflector -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'weakref'
op|','
name|'warnings'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'enterprise'
op|'.'
name|'util'
name|'import'
name|'DBError'
newline|'\n'
nl|'\n'
DECL|class|Reflector
name|'class'
name|'Reflector'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DEPRECATED.\n\n    Base class for enterprise reflectors. This implements row caching.\n    """'
newline|'\n'
DECL|variable|populated
name|'populated'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'rowClasses'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initialize me against a database.\n\n        @param rowClasses: a list of row class objects that describe the\n            database schema.\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"twisted.enterprise.reflector is deprecated since "'
nl|'\n'
string|'"Twisted 8.0"'
op|','
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
comment|'# does not hold references to cached rows.'
nl|'\n'
name|'self'
op|'.'
name|'rowCache'
op|'='
name|'weakref'
op|'.'
name|'WeakValueDictionary'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rowClasses'
op|'='
name|'rowClasses'
newline|'\n'
name|'self'
op|'.'
name|'schema'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_populate'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'del'
name|'d'
op|'['
string|"'rowCache'"
op|']'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|__setstate__
dedent|''
name|'def'
name|'__setstate__'
op|'('
name|'self'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__dict__'
op|'='
name|'state'
newline|'\n'
name|'self'
op|'.'
name|'rowCache'
op|'='
name|'weakref'
op|'.'
name|'WeakValueDictionary'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_populate'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_populate
dedent|''
name|'def'
name|'_populate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Implement me to populate schema information for the reflector.\n        """'
newline|'\n'
name|'raise'
name|'DBError'
op|'('
string|'"not implemented"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|populateSchemaFor
dedent|''
name|'def'
name|'populateSchemaFor'
op|'('
name|'self'
op|','
name|'tableInfo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This is called once for each registered rowClass to add it\n        and its foreign key relationships for that rowClass to the\n        schema."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'schema'
op|'['
name|'tableInfo'
op|'.'
name|'rowTableName'
op|']'
op|'='
name|'tableInfo'
newline|'\n'
nl|'\n'
comment|'# add the foreign key to the foreign table.'
nl|'\n'
name|'for'
name|'foreignTableName'
op|','
name|'childColumns'
op|','
name|'parentColumns'
op|','
name|'containerMethod'
op|','
name|'autoLoad'
name|'in'
name|'tableInfo'
op|'.'
name|'rowForeignKeys'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'schema'
op|'['
name|'foreignTableName'
op|']'
op|'.'
name|'addForeignKey'
op|'('
name|'childColumns'
op|','
nl|'\n'
name|'parentColumns'
op|','
name|'tableInfo'
op|'.'
name|'rowClass'
op|','
nl|'\n'
name|'containerMethod'
op|','
name|'autoLoad'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getTableInfo
dedent|''
dedent|''
name|'def'
name|'getTableInfo'
op|'('
name|'self'
op|','
name|'rowObject'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a TableInfo record about a particular instance.\n\n        This record contains various information about the instance\'s\n        class as registered with this reflector.\n\n        @param rowObject: a L{RowObject} instance of a class previously\n            registered with me.\n        @raises twisted.enterprise.row.DBError: raised if this class was not\n            previously registered.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'schema'
op|'['
name|'rowObject'
op|'.'
name|'rowTableName'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'DBError'
op|'('
string|'"class %s was not registered with %s"'
op|'%'
op|'('
nl|'\n'
name|'rowObject'
op|'.'
name|'__class__'
op|','
name|'self'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|buildWhereClause
dedent|''
dedent|''
name|'def'
name|'buildWhereClause'
op|'('
name|'self'
op|','
name|'relationship'
op|','
name|'row'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""util method used by reflectors. builds a where clause to link a row to another table.\n        """'
newline|'\n'
name|'whereClause'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'relationship'
op|'.'
name|'childColumns'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'getattr'
op|'('
name|'row'
op|','
name|'relationship'
op|'.'
name|'parentColumns'
op|'['
name|'i'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'whereClause'
op|'.'
name|'append'
op|'('
op|'['
name|'relationship'
op|'.'
name|'childColumns'
op|'['
name|'i'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'EQUAL'
op|','
name|'value'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'whereClause'
newline|'\n'
nl|'\n'
DECL|member|addToParent
dedent|''
name|'def'
name|'addToParent'
op|'('
name|'self'
op|','
name|'parentRow'
op|','
name|'rows'
op|','
name|'tableName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""util method used by reflectors. adds these rows to the parent row object.\n        If a rowClass does not have a containerMethod, then a list attribute "childRows"\n        will be used.\n        """'
newline|'\n'
name|'parentInfo'
op|'='
name|'self'
op|'.'
name|'getTableInfo'
op|'('
name|'parentRow'
op|')'
newline|'\n'
name|'relationship'
op|'='
name|'parentInfo'
op|'.'
name|'getRelationshipFor'
op|'('
name|'tableName'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'relationship'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'DBError'
op|'('
string|'"no relationship from %s to %s"'
op|'%'
op|'('
name|'parentRow'
op|'.'
name|'rowTableName'
op|','
name|'tableName'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'relationship'
op|'.'
name|'containerMethod'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'hasattr'
op|'('
name|'parentRow'
op|','
string|'"childRows"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'row'
name|'in'
name|'rows'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'row'
name|'not'
name|'in'
name|'parentRow'
op|'.'
name|'childRows'
op|':'
newline|'\n'
indent|'                        '
name|'parentRow'
op|'.'
name|'childRows'
op|'.'
name|'append'
op|'('
name|'row'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'parentRow'
op|'.'
name|'childRows'
op|'='
name|'rows'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'parentRow'
op|','
name|'relationship'
op|'.'
name|'containerMethod'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'DBError'
op|'('
string|'"parent row (%s) doesnt have container method <%s>!"'
op|'%'
op|'('
name|'parentRow'
op|','
name|'relationship'
op|'.'
name|'containerMethod'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'meth'
op|'='
name|'getattr'
op|'('
name|'parentRow'
op|','
name|'relationship'
op|'.'
name|'containerMethod'
op|')'
newline|'\n'
name|'for'
name|'row'
name|'in'
name|'rows'
op|':'
newline|'\n'
indent|'            '
name|'meth'
op|'('
name|'row'
op|')'
newline|'\n'
nl|'\n'
comment|'####### Row Cache ########'
nl|'\n'
nl|'\n'
DECL|member|addToCache
dedent|''
dedent|''
name|'def'
name|'addToCache'
op|'('
name|'self'
op|','
name|'rowObject'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""NOTE: Should this be recursive?! requires better container knowledge..."""'
newline|'\n'
name|'self'
op|'.'
name|'rowCache'
op|'['
name|'rowObject'
op|'.'
name|'getKeyTuple'
op|'('
op|')'
op|']'
op|'='
name|'rowObject'
newline|'\n'
nl|'\n'
DECL|member|findInCache
dedent|''
name|'def'
name|'findInCache'
op|'('
name|'self'
op|','
name|'rowClass'
op|','
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'keys'
op|'='
op|'['
op|']'
newline|'\n'
name|'keys'
op|'.'
name|'append'
op|'('
name|'rowClass'
op|'.'
name|'rowTableName'
op|')'
newline|'\n'
name|'for'
name|'keyName'
op|','
name|'keyType'
name|'in'
name|'rowClass'
op|'.'
name|'rowKeyColumns'
op|':'
newline|'\n'
indent|'            '
name|'keys'
op|'.'
name|'append'
op|'('
name|'kw'
op|'['
name|'keyName'
op|']'
op|')'
newline|'\n'
dedent|''
name|'keyTuple'
op|'='
name|'tuple'
op|'('
name|'keys'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'rowCache'
op|'.'
name|'get'
op|'('
name|'keyTuple'
op|')'
newline|'\n'
nl|'\n'
DECL|member|removeFromCache
dedent|''
name|'def'
name|'removeFromCache'
op|'('
name|'self'
op|','
name|'rowObject'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""NOTE: should this be recursive!??"""'
newline|'\n'
name|'key'
op|'='
name|'rowObject'
op|'.'
name|'getKeyTuple'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'rowCache'
op|'.'
name|'has_key'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'rowCache'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
comment|'####### Row Operations ########'
nl|'\n'
nl|'\n'
DECL|member|loadObjectsFrom
dedent|''
dedent|''
name|'def'
name|'loadObjectsFrom'
op|'('
name|'self'
op|','
name|'tableName'
op|','
name|'parent'
op|'='
name|'None'
op|','
name|'data'
op|'='
name|'None'
op|','
nl|'\n'
name|'whereClause'
op|'='
op|'['
op|']'
op|','
name|'loadChildren'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Implement me to load objects from the database.\n\n        @param whereClause: a list of tuples of (columnName, conditional, value)\n            so it can be parsed by all types of reflectors. eg.::\n              whereClause = [("name", EQUALS, "fred"), ("age", GREATERTHAN, 18)]\n        """'
newline|'\n'
name|'raise'
name|'DBError'
op|'('
string|'"not implemented"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|updateRow
dedent|''
name|'def'
name|'updateRow'
op|'('
name|'self'
op|','
name|'rowObject'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""update this rowObject to the database.\n        """'
newline|'\n'
name|'raise'
name|'DBError'
op|'('
string|'"not implemented"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|insertRow
dedent|''
name|'def'
name|'insertRow'
op|'('
name|'self'
op|','
name|'rowObject'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""insert a new row for this object instance.\n        """'
newline|'\n'
name|'raise'
name|'DBError'
op|'('
string|'"not implemented"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deleteRow
dedent|''
name|'def'
name|'deleteRow'
op|'('
name|'self'
op|','
name|'rowObject'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""delete the row for this object from the database.\n        """'
newline|'\n'
name|'raise'
name|'DBError'
op|'('
string|'"not implemented"'
op|')'
newline|'\n'
nl|'\n'
comment|'# conditionals'
nl|'\n'
DECL|variable|EQUAL
dedent|''
dedent|''
name|'EQUAL'
op|'='
number|'0'
newline|'\n'
DECL|variable|LESSTHAN
name|'LESSTHAN'
op|'='
number|'1'
newline|'\n'
DECL|variable|GREATERTHAN
name|'GREATERTHAN'
op|'='
number|'2'
newline|'\n'
DECL|variable|LIKE
name|'LIKE'
op|'='
number|'3'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
name|'__all__'
op|'='
op|'['
string|"'Reflector'"
op|','
string|"'EQUAL'"
op|','
string|"'LESSTHAN'"
op|','
string|"'GREATERTHAN'"
op|','
string|"'LIKE'"
op|']'
newline|'\n'
endmarker|''
end_unit

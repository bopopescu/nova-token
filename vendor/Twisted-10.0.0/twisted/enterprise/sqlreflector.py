begin_unit
comment|'# -*- test-case-name: twisted.test.test_reflector -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'enterprise'
name|'import'
name|'reflector'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'enterprise'
op|'.'
name|'util'
name|'import'
name|'DBError'
op|','
name|'getKeyColumn'
op|','
name|'quote'
op|','
name|'safe'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'enterprise'
op|'.'
name|'util'
name|'import'
name|'_TableInfo'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'enterprise'
op|'.'
name|'row'
name|'import'
name|'RowObject'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'reflect'
newline|'\n'
nl|'\n'
DECL|class|SQLReflector
name|'class'
name|'SQLReflector'
op|'('
name|'reflector'
op|'.'
name|'Reflector'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DEPRECATED.\n    \n    I reflect on a database and load RowObjects from it.\n\n    In order to do this, I interrogate a relational database to\n    extract schema information and interface with RowObject class\n    objects that can interact with specific tables. \n    """'
newline|'\n'
DECL|variable|populated
name|'populated'
op|'='
number|'0'
newline|'\n'
DECL|variable|conditionalLabels
name|'conditionalLabels'
op|'='
op|'{'
nl|'\n'
name|'reflector'
op|'.'
name|'EQUAL'
op|':'
string|'"="'
op|','
nl|'\n'
name|'reflector'
op|'.'
name|'LESSTHAN'
op|':'
string|'"<"'
op|','
nl|'\n'
name|'reflector'
op|'.'
name|'GREATERTHAN'
op|':'
string|'">"'
op|','
nl|'\n'
name|'reflector'
op|'.'
name|'LIKE'
op|':'
string|'"like"'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'dbpool'
op|','
name|'rowClasses'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize me against a database.\n        """'
newline|'\n'
name|'reflector'
op|'.'
name|'Reflector'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'rowClasses'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dbpool'
op|'='
name|'dbpool'
newline|'\n'
nl|'\n'
DECL|member|_populate
dedent|''
name|'def'
name|'_populate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_transPopulateSchema'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_transPopulateSchema
dedent|''
name|'def'
name|'_transPopulateSchema'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Used to construct the row classes in a single interaction.\n        """'
newline|'\n'
name|'for'
name|'rc'
name|'in'
name|'self'
op|'.'
name|'rowClasses'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'issubclass'
op|'('
name|'rc'
op|','
name|'RowObject'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'DBError'
op|'('
string|'"Stub class (%s) is not derived from RowObject"'
op|'%'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'rc'
op|'.'
name|'rowClass'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_populateSchemaFor'
op|'('
name|'rc'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'populated'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|_populateSchemaFor
dedent|''
name|'def'
name|'_populateSchemaFor'
op|'('
name|'self'
op|','
name|'rc'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Construct all the SQL templates for database operations on\n        <tableName> and populate the class <rowClass> with that info.\n        """'
newline|'\n'
name|'attributes'
op|'='
op|'('
string|'"rowColumns"'
op|','
string|'"rowKeyColumns"'
op|','
string|'"rowTableName"'
op|')'
newline|'\n'
name|'for'
name|'att'
name|'in'
name|'attributes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'rc'
op|','
name|'att'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'DBError'
op|'('
string|'"RowClass %s must have class variable: %s"'
op|'%'
op|'('
name|'rc'
op|','
name|'att'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'tableInfo'
op|'='
name|'_TableInfo'
op|'('
name|'rc'
op|')'
newline|'\n'
name|'tableInfo'
op|'.'
name|'updateSQL'
op|'='
name|'self'
op|'.'
name|'buildUpdateSQL'
op|'('
name|'tableInfo'
op|')'
newline|'\n'
name|'tableInfo'
op|'.'
name|'insertSQL'
op|'='
name|'self'
op|'.'
name|'buildInsertSQL'
op|'('
name|'tableInfo'
op|')'
newline|'\n'
name|'tableInfo'
op|'.'
name|'deleteSQL'
op|'='
name|'self'
op|'.'
name|'buildDeleteSQL'
op|'('
name|'tableInfo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'populateSchemaFor'
op|'('
name|'tableInfo'
op|')'
newline|'\n'
nl|'\n'
DECL|member|escape_string
dedent|''
name|'def'
name|'escape_string'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Escape a string for use in an SQL statement. The default\n        implementation escapes \' with \'\' and \\ with \\\\. Redefine this\n        function in a subclass if your database server uses different\n        escaping rules.\n        """'
newline|'\n'
name|'return'
name|'safe'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|quote_value
dedent|''
name|'def'
name|'quote_value'
op|'('
name|'self'
op|','
name|'value'
op|','
name|'type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Format a value for use in an SQL statement.\n\n        @param value: a value to format as data in SQL.\n        @param type: a key in util.dbTypeMap.\n        """'
newline|'\n'
name|'return'
name|'quote'
op|'('
name|'value'
op|','
name|'type'
op|','
name|'string_escaper'
op|'='
name|'self'
op|'.'
name|'escape_string'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loadObjectsFrom
dedent|''
name|'def'
name|'loadObjectsFrom'
op|'('
name|'self'
op|','
name|'tableName'
op|','
name|'parentRow'
op|'='
name|'None'
op|','
name|'data'
op|'='
name|'None'
op|','
nl|'\n'
name|'whereClause'
op|'='
name|'None'
op|','
name|'forceChildren'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Load a set of RowObjects from a database.\n\n        Create a set of python objects of <rowClass> from the contents\n        of a table populated with appropriate data members.\n        Example::\n\n          |  class EmployeeRow(row.RowObject):\n          |      pass\n          |\n          |  def gotEmployees(employees):\n          |      for emp in employees:\n          |          emp.manager = "fred smith"\n          |          manager.updateRow(emp)\n          |\n          |  reflector.loadObjectsFrom("employee",\n          |                          data = userData,\n          |                          whereClause = [("manager" , EQUAL, "fred smith")]\n          |                          ).addCallback(gotEmployees)\n\n        NOTE: the objects and all children should be loaded in a single transaction.\n        NOTE: can specify a parentRow _OR_ a whereClause.\n\n        """'
newline|'\n'
name|'if'
name|'parentRow'
name|'and'
name|'whereClause'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'DBError'
op|'('
string|'"Must specify one of parentRow _OR_ whereClause"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'parentRow'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'='
name|'self'
op|'.'
name|'getTableInfo'
op|'('
name|'parentRow'
op|')'
newline|'\n'
name|'relationship'
op|'='
name|'info'
op|'.'
name|'getRelationshipFor'
op|'('
name|'tableName'
op|')'
newline|'\n'
name|'whereClause'
op|'='
name|'self'
op|'.'
name|'buildWhereClause'
op|'('
name|'relationship'
op|','
name|'parentRow'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'whereClause'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'whereClause'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runInteraction'
op|'('
name|'self'
op|'.'
name|'_rowLoader'
op|','
name|'tableName'
op|','
nl|'\n'
name|'parentRow'
op|','
name|'data'
op|','
name|'whereClause'
op|','
nl|'\n'
name|'forceChildren'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_rowLoader
dedent|''
name|'def'
name|'_rowLoader'
op|'('
name|'self'
op|','
name|'transaction'
op|','
name|'tableName'
op|','
name|'parentRow'
op|','
name|'data'
op|','
nl|'\n'
name|'whereClause'
op|','
name|'forceChildren'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""immediate loading of rowobjects from the table with the whereClause.\n        """'
newline|'\n'
name|'tableInfo'
op|'='
name|'self'
op|'.'
name|'schema'
op|'['
name|'tableName'
op|']'
newline|'\n'
comment|'# Build the SQL for the query'
nl|'\n'
name|'sql'
op|'='
string|'"SELECT "'
newline|'\n'
name|'first'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'column'
op|','
name|'type'
name|'in'
name|'tableInfo'
op|'.'
name|'rowColumns'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'first'
op|':'
newline|'\n'
indent|'                '
name|'first'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'sql'
op|'='
name|'sql'
op|'+'
string|'","'
newline|'\n'
dedent|''
name|'sql'
op|'='
name|'sql'
op|'+'
string|'" %s"'
op|'%'
name|'column'
newline|'\n'
dedent|''
name|'sql'
op|'='
name|'sql'
op|'+'
string|'" FROM %s "'
op|'%'
op|'('
name|'tableName'
op|')'
newline|'\n'
name|'if'
name|'whereClause'
op|':'
newline|'\n'
indent|'            '
name|'sql'
op|'+='
string|'" WHERE "'
newline|'\n'
name|'first'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'wItem'
name|'in'
name|'whereClause'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'first'
op|':'
newline|'\n'
indent|'                    '
name|'first'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'sql'
op|'+='
string|'" AND "'
newline|'\n'
dedent|''
op|'('
name|'columnName'
op|','
name|'cond'
op|','
name|'value'
op|')'
op|'='
name|'wItem'
newline|'\n'
name|'t'
op|'='
name|'self'
op|'.'
name|'findTypeFor'
op|'('
name|'tableName'
op|','
name|'columnName'
op|')'
newline|'\n'
name|'quotedValue'
op|'='
name|'self'
op|'.'
name|'quote_value'
op|'('
name|'value'
op|','
name|'t'
op|')'
newline|'\n'
name|'sql'
op|'+='
string|'"%s %s %s"'
op|'%'
op|'('
name|'columnName'
op|','
name|'self'
op|'.'
name|'conditionalLabels'
op|'['
name|'cond'
op|']'
op|','
nl|'\n'
name|'quotedValue'
op|')'
newline|'\n'
nl|'\n'
comment|'# execute the query'
nl|'\n'
dedent|''
dedent|''
name|'transaction'
op|'.'
name|'execute'
op|'('
name|'sql'
op|')'
newline|'\n'
name|'rows'
op|'='
name|'transaction'
op|'.'
name|'fetchall'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# construct the row objects'
nl|'\n'
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'newRows'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'args'
name|'in'
name|'rows'
op|':'
newline|'\n'
indent|'            '
name|'kw'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'args'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ColumnName'
op|'='
name|'tableInfo'
op|'.'
name|'rowColumns'
op|'['
name|'i'
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'for'
name|'attr'
op|','
name|'type'
name|'in'
name|'tableInfo'
op|'.'
name|'rowClass'
op|'.'
name|'rowColumns'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'attr'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
name|'ColumnName'
op|':'
newline|'\n'
indent|'                        '
name|'kw'
op|'['
name|'attr'
op|']'
op|'='
name|'args'
op|'['
name|'i'
op|']'
newline|'\n'
name|'break'
newline|'\n'
comment|'# find the row in the cache or add it'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'resultObject'
op|'='
name|'self'
op|'.'
name|'findInCache'
op|'('
name|'tableInfo'
op|'.'
name|'rowClass'
op|','
name|'kw'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'resultObject'
op|':'
newline|'\n'
indent|'                '
name|'meth'
op|'='
name|'tableInfo'
op|'.'
name|'rowFactoryMethod'
op|'['
number|'0'
op|']'
newline|'\n'
name|'resultObject'
op|'='
name|'meth'
op|'('
name|'tableInfo'
op|'.'
name|'rowClass'
op|','
name|'data'
op|','
name|'kw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addToCache'
op|'('
name|'resultObject'
op|')'
newline|'\n'
name|'newRows'
op|'.'
name|'append'
op|'('
name|'resultObject'
op|')'
newline|'\n'
dedent|''
name|'results'
op|'.'
name|'append'
op|'('
name|'resultObject'
op|')'
newline|'\n'
nl|'\n'
comment|'# add these rows to the parentRow if required'
nl|'\n'
dedent|''
name|'if'
name|'parentRow'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'addToParent'
op|'('
name|'parentRow'
op|','
name|'newRows'
op|','
name|'tableName'
op|')'
newline|'\n'
nl|'\n'
comment|'# load children or each of these rows if required'
nl|'\n'
dedent|''
name|'for'
name|'relationship'
name|'in'
name|'tableInfo'
op|'.'
name|'relationships'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'forceChildren'
name|'and'
name|'not'
name|'relationship'
op|'.'
name|'autoLoad'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'row'
name|'in'
name|'results'
op|':'
newline|'\n'
comment|'# build where clause'
nl|'\n'
indent|'                '
name|'childWhereClause'
op|'='
name|'self'
op|'.'
name|'buildWhereClause'
op|'('
name|'relationship'
op|','
name|'row'
op|')'
newline|'\n'
comment|'# load the children immediately, but do nothing with them'
nl|'\n'
name|'self'
op|'.'
name|'_rowLoader'
op|'('
name|'transaction'
op|','
nl|'\n'
name|'relationship'
op|'.'
name|'childRowClass'
op|'.'
name|'rowTableName'
op|','
nl|'\n'
name|'row'
op|','
name|'data'
op|','
name|'childWhereClause'
op|','
name|'forceChildren'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'results'
newline|'\n'
nl|'\n'
DECL|member|findTypeFor
dedent|''
name|'def'
name|'findTypeFor'
op|'('
name|'self'
op|','
name|'tableName'
op|','
name|'columnName'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tableInfo'
op|'='
name|'self'
op|'.'
name|'schema'
op|'['
name|'tableName'
op|']'
newline|'\n'
name|'columnName'
op|'='
name|'columnName'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'for'
name|'column'
op|','
name|'type'
name|'in'
name|'tableInfo'
op|'.'
name|'rowColumns'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'column'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
name|'columnName'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'type'
newline|'\n'
nl|'\n'
DECL|member|buildUpdateSQL
dedent|''
dedent|''
dedent|''
name|'def'
name|'buildUpdateSQL'
op|'('
name|'self'
op|','
name|'tableInfo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(Internal) Build SQL template to update a RowObject.\n\n        Returns: SQL that is used to contruct a rowObject class.\n        """'
newline|'\n'
name|'sql'
op|'='
string|'"UPDATE %s SET"'
op|'%'
name|'tableInfo'
op|'.'
name|'rowTableName'
newline|'\n'
comment|'# build update attributes'
nl|'\n'
name|'first'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'column'
op|','
name|'type'
name|'in'
name|'tableInfo'
op|'.'
name|'rowColumns'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'getKeyColumn'
op|'('
name|'tableInfo'
op|'.'
name|'rowClass'
op|','
name|'column'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'first'
op|':'
newline|'\n'
indent|'                '
name|'sql'
op|'='
name|'sql'
op|'+'
string|'", "'
newline|'\n'
dedent|''
name|'sql'
op|'='
name|'sql'
op|'+'
string|'" %s = %s"'
op|'%'
op|'('
name|'column'
op|','
string|'"%s"'
op|')'
newline|'\n'
name|'first'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'# build where clause'
nl|'\n'
dedent|''
name|'first'
op|'='
number|'1'
newline|'\n'
name|'sql'
op|'='
name|'sql'
op|'+'
string|'" WHERE "'
newline|'\n'
name|'for'
name|'keyColumn'
op|','
name|'type'
name|'in'
name|'tableInfo'
op|'.'
name|'rowKeyColumns'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'first'
op|':'
newline|'\n'
indent|'                '
name|'sql'
op|'='
name|'sql'
op|'+'
string|'" AND "'
newline|'\n'
dedent|''
name|'sql'
op|'='
name|'sql'
op|'+'
string|'" %s = %s "'
op|'%'
op|'('
name|'keyColumn'
op|','
string|'"%s"'
op|')'
newline|'\n'
name|'first'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'return'
name|'sql'
newline|'\n'
nl|'\n'
DECL|member|buildInsertSQL
dedent|''
name|'def'
name|'buildInsertSQL'
op|'('
name|'self'
op|','
name|'tableInfo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(Internal) Build SQL template to insert a new row.\n\n        Returns: SQL that is used to insert a new row for a rowObject\n        instance not created from the database.\n        """'
newline|'\n'
name|'sql'
op|'='
string|'"INSERT INTO %s ("'
op|'%'
name|'tableInfo'
op|'.'
name|'rowTableName'
newline|'\n'
comment|'# build column list'
nl|'\n'
name|'first'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'column'
op|','
name|'type'
name|'in'
name|'tableInfo'
op|'.'
name|'rowColumns'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'first'
op|':'
newline|'\n'
indent|'                '
name|'sql'
op|'='
name|'sql'
op|'+'
string|'", "'
newline|'\n'
dedent|''
name|'sql'
op|'='
name|'sql'
op|'+'
name|'column'
newline|'\n'
name|'first'
op|'='
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'sql'
op|'='
name|'sql'
op|'+'
string|'" ) VALUES ("'
newline|'\n'
nl|'\n'
comment|'# build values list'
nl|'\n'
name|'first'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'column'
op|','
name|'type'
name|'in'
name|'tableInfo'
op|'.'
name|'rowColumns'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'first'
op|':'
newline|'\n'
indent|'                '
name|'sql'
op|'='
name|'sql'
op|'+'
string|'", "'
newline|'\n'
dedent|''
name|'sql'
op|'='
name|'sql'
op|'+'
string|'"%s"'
newline|'\n'
name|'first'
op|'='
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'sql'
op|'='
name|'sql'
op|'+'
string|'")"'
newline|'\n'
name|'return'
name|'sql'
newline|'\n'
nl|'\n'
DECL|member|buildDeleteSQL
dedent|''
name|'def'
name|'buildDeleteSQL'
op|'('
name|'self'
op|','
name|'tableInfo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Build the SQL template to delete a row from the table.\n        """'
newline|'\n'
name|'sql'
op|'='
string|'"DELETE FROM %s "'
op|'%'
name|'tableInfo'
op|'.'
name|'rowTableName'
newline|'\n'
comment|'# build where clause'
nl|'\n'
name|'first'
op|'='
number|'1'
newline|'\n'
name|'sql'
op|'='
name|'sql'
op|'+'
string|'" WHERE "'
newline|'\n'
name|'for'
name|'keyColumn'
op|','
name|'type'
name|'in'
name|'tableInfo'
op|'.'
name|'rowKeyColumns'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'first'
op|':'
newline|'\n'
indent|'                '
name|'sql'
op|'='
name|'sql'
op|'+'
string|'" AND "'
newline|'\n'
dedent|''
name|'sql'
op|'='
name|'sql'
op|'+'
string|'" %s = %s "'
op|'%'
op|'('
name|'keyColumn'
op|','
string|'"%s"'
op|')'
newline|'\n'
name|'first'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'return'
name|'sql'
newline|'\n'
nl|'\n'
DECL|member|updateRowSQL
dedent|''
name|'def'
name|'updateRowSQL'
op|'('
name|'self'
op|','
name|'rowObject'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Build SQL to update the contents of rowObject.\n        """'
newline|'\n'
name|'args'
op|'='
op|'['
op|']'
newline|'\n'
name|'tableInfo'
op|'='
name|'self'
op|'.'
name|'schema'
op|'['
name|'rowObject'
op|'.'
name|'rowTableName'
op|']'
newline|'\n'
comment|'# build update attributes'
nl|'\n'
name|'for'
name|'column'
op|','
name|'type'
name|'in'
name|'tableInfo'
op|'.'
name|'rowColumns'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'getKeyColumn'
op|'('
name|'rowObject'
op|'.'
name|'__class__'
op|','
name|'column'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'args'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'quote_value'
op|'('
name|'rowObject'
op|'.'
name|'findAttribute'
op|'('
name|'column'
op|')'
op|','
nl|'\n'
name|'type'
op|')'
op|')'
newline|'\n'
comment|'# build where clause'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'keyColumn'
op|','
name|'type'
name|'in'
name|'tableInfo'
op|'.'
name|'rowKeyColumns'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'quote_value'
op|'('
name|'rowObject'
op|'.'
name|'findAttribute'
op|'('
name|'keyColumn'
op|')'
op|','
nl|'\n'
name|'type'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'getTableInfo'
op|'('
name|'rowObject'
op|')'
op|'.'
name|'updateSQL'
op|'%'
name|'tuple'
op|'('
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|updateRow
dedent|''
name|'def'
name|'updateRow'
op|'('
name|'self'
op|','
name|'rowObject'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update the contents of rowObject to the database.\n        """'
newline|'\n'
name|'sql'
op|'='
name|'self'
op|'.'
name|'updateRowSQL'
op|'('
name|'rowObject'
op|')'
newline|'\n'
name|'rowObject'
op|'.'
name|'setDirty'
op|'('
number|'0'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runOperation'
op|'('
name|'sql'
op|')'
newline|'\n'
nl|'\n'
DECL|member|insertRowSQL
dedent|''
name|'def'
name|'insertRowSQL'
op|'('
name|'self'
op|','
name|'rowObject'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Build SQL to insert the contents of rowObject.\n        """'
newline|'\n'
name|'args'
op|'='
op|'['
op|']'
newline|'\n'
name|'tableInfo'
op|'='
name|'self'
op|'.'
name|'schema'
op|'['
name|'rowObject'
op|'.'
name|'rowTableName'
op|']'
newline|'\n'
comment|'# build values'
nl|'\n'
name|'for'
name|'column'
op|','
name|'type'
name|'in'
name|'tableInfo'
op|'.'
name|'rowColumns'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'quote_value'
op|'('
name|'rowObject'
op|'.'
name|'findAttribute'
op|'('
name|'column'
op|')'
op|','
name|'type'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'getTableInfo'
op|'('
name|'rowObject'
op|')'
op|'.'
name|'insertSQL'
op|'%'
name|'tuple'
op|'('
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|insertRow
dedent|''
name|'def'
name|'insertRow'
op|'('
name|'self'
op|','
name|'rowObject'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Insert a new row for rowObject.\n        """'
newline|'\n'
name|'rowObject'
op|'.'
name|'setDirty'
op|'('
number|'0'
op|')'
newline|'\n'
name|'sql'
op|'='
name|'self'
op|'.'
name|'insertRowSQL'
op|'('
name|'rowObject'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runOperation'
op|'('
name|'sql'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deleteRowSQL
dedent|''
name|'def'
name|'deleteRowSQL'
op|'('
name|'self'
op|','
name|'rowObject'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Build SQL to delete rowObject from the database.\n        """'
newline|'\n'
name|'args'
op|'='
op|'['
op|']'
newline|'\n'
name|'tableInfo'
op|'='
name|'self'
op|'.'
name|'schema'
op|'['
name|'rowObject'
op|'.'
name|'rowTableName'
op|']'
newline|'\n'
comment|'# build where clause'
nl|'\n'
name|'for'
name|'keyColumn'
op|','
name|'type'
name|'in'
name|'tableInfo'
op|'.'
name|'rowKeyColumns'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'quote_value'
op|'('
name|'rowObject'
op|'.'
name|'findAttribute'
op|'('
name|'keyColumn'
op|')'
op|','
nl|'\n'
name|'type'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'getTableInfo'
op|'('
name|'rowObject'
op|')'
op|'.'
name|'deleteSQL'
op|'%'
name|'tuple'
op|'('
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deleteRow
dedent|''
name|'def'
name|'deleteRow'
op|'('
name|'self'
op|','
name|'rowObject'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete the row for rowObject from the database.\n        """'
newline|'\n'
name|'sql'
op|'='
name|'self'
op|'.'
name|'deleteRowSQL'
op|'('
name|'rowObject'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'removeFromCache'
op|'('
name|'rowObject'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runOperation'
op|'('
name|'sql'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
string|"'SQLReflector'"
op|']'
newline|'\n'
endmarker|''
end_unit

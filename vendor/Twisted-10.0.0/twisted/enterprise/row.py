begin_unit
comment|'# -*- test-case-name: twisted.test.test_reflector -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nDEPRECATED.\n\nA (R)elational (O)bject (W)rapper.\n\nThis is an extremely thin wrapper.\n\nMaintainer: Dave Peticolas\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'warnings'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'enterprise'
op|'.'
name|'util'
name|'import'
name|'DBError'
op|','
name|'NOQUOTE'
op|','
name|'getKeyColumn'
op|','
name|'dbTypeMap'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RowObject
name|'class'
name|'RowObject'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I represent a row in a table in a relational database.\n\n    My class is "populated" by a Reflector object. After I am\n    populated, instances of me are able to interact with a particular\n    database table.\n\n    You should use a class derived from this class for each database\n    table.\n\n    reflector.loadObjectsFrom() is used to create sets of\n    instance of objects of this class from database tables.\n\n    Once created, the "key column" attributes cannot be changed.\n\n\n    Class Attributes that users must supply::\n\n       rowKeyColumns     # list of key columns in form: [(columnName, typeName)]\n       rowTableName      # name of database table\n       rowColumns        # list of the columns in the table with the correct\n                         # case.this will be used to create member variables.\n       rowFactoryMethod  # method to create an instance of this class.\n                         # HACK: must be in a list!!! [factoryMethod] (optional)\n       rowForeignKeys    # keys to other tables (optional)\n    """'
newline|'\n'
nl|'\n'
DECL|variable|populated
name|'populated'
op|'='
number|'0'
comment|'# set on the class when the class is "populated" with SQL'
newline|'\n'
DECL|variable|dirty
name|'dirty'
op|'='
number|'0'
comment|'# set on an instance when the instance is out-of-sync with the database'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        DEPRECATED.\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"twisted.enterprise.row is deprecated since Twisted 8.0"'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assignKeyAttr
dedent|''
name|'def'
name|'assignKeyAttr'
op|'('
name|'self'
op|','
name|'attrName'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Assign to a key attribute.\n\n        This cannot be done through normal means to protect changing\n        keys of db objects.\n        """'
newline|'\n'
name|'found'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'keyColumn'
op|','
name|'type'
name|'in'
name|'self'
op|'.'
name|'rowKeyColumns'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'keyColumn'
op|'=='
name|'attrName'
op|':'
newline|'\n'
indent|'                '
name|'found'
op|'='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'found'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'DBError'
op|'('
string|'"%s is not a key columns."'
op|'%'
name|'attrName'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'__dict__'
op|'['
name|'attrName'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|findAttribute
dedent|''
name|'def'
name|'findAttribute'
op|'('
name|'self'
op|','
name|'attrName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Find an attribute by caseless name.\n        """'
newline|'\n'
name|'for'
name|'attr'
op|','
name|'type'
name|'in'
name|'self'
op|'.'
name|'rowColumns'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'attr'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
name|'attrName'
op|'.'
name|'lower'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'attr'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'DBError'
op|'('
string|'"Unable to find attribute %s"'
op|'%'
name|'attrName'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__setattr__
dedent|''
name|'def'
name|'__setattr__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Special setattr to prevent changing of key values.\n        """'
newline|'\n'
comment|'# build where clause'
nl|'\n'
name|'if'
name|'getKeyColumn'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'DBError'
op|'('
string|'"cannot assign value <%s> to key column attribute <%s> of RowObject class"'
op|'%'
op|'('
name|'value'
op|','
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'rowColumns'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'value'
op|'!='
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'get'
op|'('
name|'name'
op|','
name|'None'
op|')'
name|'and'
name|'not'
name|'self'
op|'.'
name|'dirty'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'setDirty'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'__dict__'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|createDefaultAttributes
dedent|''
name|'def'
name|'createDefaultAttributes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Populate instance with default attributes.\n\n        This is used when creating a new instance NOT from the\n        database.\n        """'
newline|'\n'
name|'for'
name|'attr'
name|'in'
name|'self'
op|'.'
name|'rowColumns'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'getKeyColumn'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
name|'attr'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'column'
op|','
name|'ctype'
op|','
name|'typeid'
name|'in'
name|'self'
op|'.'
name|'dbColumns'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'column'
op|'.'
name|'lower'
op|'('
name|'column'
op|')'
op|'=='
name|'attr'
op|'.'
name|'lower'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'q'
op|'='
name|'dbTypeMap'
op|'.'
name|'get'
op|'('
name|'ctype'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'q'
op|'=='
name|'NOQUOTE'
op|':'
newline|'\n'
indent|'                        '
name|'setattr'
op|'('
name|'self'
op|','
name|'attr'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'setattr'
op|'('
name|'self'
op|','
name|'attr'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setDirty
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'setDirty'
op|'('
name|'self'
op|','
name|'flag'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Use this to set the \'dirty\' flag.\n\n        (note: this avoids infinite recursion in __setattr__, and\n        prevents the \'dirty\' flag )\n        """'
newline|'\n'
name|'self'
op|'.'
name|'__dict__'
op|'['
string|'"dirty"'
op|']'
op|'='
name|'flag'
newline|'\n'
nl|'\n'
DECL|member|getKeyTuple
dedent|''
name|'def'
name|'getKeyTuple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'keys'
op|'='
op|'['
op|']'
newline|'\n'
name|'keys'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'rowTableName'
op|')'
newline|'\n'
name|'for'
name|'keyName'
op|','
name|'keyType'
name|'in'
name|'self'
op|'.'
name|'rowKeyColumns'
op|':'
newline|'\n'
indent|'            '
name|'keys'
op|'.'
name|'append'
op|'('
name|'getattr'
op|'('
name|'self'
op|','
name|'keyName'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'tuple'
op|'('
name|'keys'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
string|"'RowObject'"
op|']'
newline|'\n'
endmarker|''
end_unit

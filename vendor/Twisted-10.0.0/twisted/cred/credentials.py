begin_unit
comment|'# -*- test-case-name: twisted.test.test_newcred-*-'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'Interface'
newline|'\n'
nl|'\n'
name|'import'
name|'hmac'
op|','
name|'time'
op|','
name|'random'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'randbytes'
name|'import'
name|'secureRandom'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'_digest'
name|'import'
name|'calcResponse'
op|','
name|'calcHA1'
op|','
name|'calcHA2'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'error'
newline|'\n'
nl|'\n'
DECL|class|ICredentials
name|'class'
name|'ICredentials'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I check credentials.\n\n    Implementors _must_ specify which sub-interfaces of ICredentials\n    to which it conforms, using zope.interface.implements().\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IUsernameDigestHash
dedent|''
name|'class'
name|'IUsernameDigestHash'
op|'('
name|'ICredentials'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This credential is used when a CredentialChecker has access to the hash\n    of the username:realm:password as in an Apache .htdigest file.\n    """'
newline|'\n'
DECL|member|checkHash
name|'def'
name|'checkHash'
op|'('
name|'digestHash'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param digestHash: The hashed username:realm:password to check against.\n\n        @return: C{True} if the credentials represented by this object match\n            the given hash, C{False} if they do not, or a L{Deferred} which\n            will be called back with one of these values.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IUsernameHashedPassword
dedent|''
dedent|''
name|'class'
name|'IUsernameHashedPassword'
op|'('
name|'ICredentials'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I encapsulate a username and a hashed password.\n\n    This credential is used when a hashed password is received from the\n    party requesting authentication.  CredentialCheckers which check this\n    kind of credential must store the passwords in plaintext (or as\n    password-equivalent hashes) form so that they can be hashed in a manner\n    appropriate for the particular credentials class.\n\n    @type username: C{str}\n    @ivar username: The username associated with these credentials.\n    """'
newline|'\n'
nl|'\n'
DECL|member|checkPassword
name|'def'
name|'checkPassword'
op|'('
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Validate these credentials against the correct password.\n\n        @type password: C{str}\n        @param password: The correct, plaintext password against which to\n        check.\n\n        @rtype: C{bool} or L{Deferred}\n        @return: C{True} if the credentials represented by this object match the\n            given password, C{False} if they do not, or a L{Deferred} which will\n            be called back with one of these values.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IUsernamePassword
dedent|''
dedent|''
name|'class'
name|'IUsernamePassword'
op|'('
name|'ICredentials'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I encapsulate a username and a plaintext password.\n\n    This encapsulates the case where the password received over the network\n    has been hashed with the identity function (That is, not at all).  The\n    CredentialsChecker may store the password in whatever format it desires,\n    it need only transform the stored password in a similar way before\n    performing the comparison.\n\n    @type username: C{str}\n    @ivar username: The username associated with these credentials.\n\n    @type password: C{str}\n    @ivar password: The password associated with these credentials.\n    """'
newline|'\n'
nl|'\n'
DECL|member|checkPassword
name|'def'
name|'checkPassword'
op|'('
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Validate these credentials against the correct password.\n\n        @type password: C{str}\n        @param password: The correct, plaintext password against which to\n        check.\n\n        @rtype: C{bool} or L{Deferred}\n        @return: C{True} if the credentials represented by this object match the\n            given password, C{False} if they do not, or a L{Deferred} which will\n            be called back with one of these values.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IAnonymous
dedent|''
dedent|''
name|'class'
name|'IAnonymous'
op|'('
name|'ICredentials'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I am an explicitly anonymous request for access.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DigestedCredentials
dedent|''
name|'class'
name|'DigestedCredentials'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Yet Another Simple HTTP Digest authentication scheme.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IUsernameHashedPassword'
op|','
name|'IUsernameDigestHash'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'method'
op|','
name|'realm'
op|','
name|'fields'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'username'
op|'='
name|'username'
newline|'\n'
name|'self'
op|'.'
name|'method'
op|'='
name|'method'
newline|'\n'
name|'self'
op|'.'
name|'realm'
op|'='
name|'realm'
newline|'\n'
name|'self'
op|'.'
name|'fields'
op|'='
name|'fields'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|checkPassword
dedent|''
name|'def'
name|'checkPassword'
op|'('
name|'self'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that the credentials represented by this object agree with the\n        given plaintext C{password} by hashing C{password} in the same way the\n        response hash represented by this object was generated and comparing\n        the results.\n        """'
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'response'"
op|')'
newline|'\n'
name|'uri'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'uri'"
op|')'
newline|'\n'
name|'nonce'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'nonce'"
op|')'
newline|'\n'
name|'cnonce'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'cnonce'"
op|')'
newline|'\n'
name|'nc'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'nc'"
op|')'
newline|'\n'
name|'algo'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'algorithm'"
op|','
string|"'md5'"
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'qop'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'qop'"
op|','
string|"'auth'"
op|')'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
name|'calcResponse'
op|'('
nl|'\n'
name|'calcHA1'
op|'('
name|'algo'
op|','
name|'self'
op|'.'
name|'username'
op|','
name|'self'
op|'.'
name|'realm'
op|','
name|'password'
op|','
name|'nonce'
op|','
name|'cnonce'
op|')'
op|','
nl|'\n'
name|'calcHA2'
op|'('
name|'algo'
op|','
name|'self'
op|'.'
name|'method'
op|','
name|'uri'
op|','
name|'qop'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'algo'
op|','
name|'nonce'
op|','
name|'nc'
op|','
name|'cnonce'
op|','
name|'qop'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'expected'
op|'=='
name|'response'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|checkHash
dedent|''
name|'def'
name|'checkHash'
op|'('
name|'self'
op|','
name|'digestHash'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that the credentials represented by this object agree with the\n        credentials represented by the I{H(A1)} given in C{digestHash}.\n\n        @param digestHash: A precomputed H(A1) value based on the username,\n            realm, and password associate with this credentials object.\n        """'
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'response'"
op|')'
newline|'\n'
name|'uri'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'uri'"
op|')'
newline|'\n'
name|'nonce'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'nonce'"
op|')'
newline|'\n'
name|'cnonce'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'cnonce'"
op|')'
newline|'\n'
name|'nc'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'nc'"
op|')'
newline|'\n'
name|'algo'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'algorithm'"
op|','
string|"'md5'"
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'qop'
op|'='
name|'self'
op|'.'
name|'fields'
op|'.'
name|'get'
op|'('
string|"'qop'"
op|','
string|"'auth'"
op|')'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
name|'calcResponse'
op|'('
nl|'\n'
name|'calcHA1'
op|'('
name|'algo'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'nonce'
op|','
name|'cnonce'
op|','
name|'preHA1'
op|'='
name|'digestHash'
op|')'
op|','
nl|'\n'
name|'calcHA2'
op|'('
name|'algo'
op|','
name|'self'
op|'.'
name|'method'
op|','
name|'uri'
op|','
name|'qop'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'algo'
op|','
name|'nonce'
op|','
name|'nc'
op|','
name|'cnonce'
op|','
name|'qop'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'expected'
op|'=='
name|'response'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DigestCredentialFactory
dedent|''
dedent|''
name|'class'
name|'DigestCredentialFactory'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Support for RFC2617 HTTP Digest Authentication\n\n    @cvar CHALLENGE_LIFETIME_SECS: The number of seconds for which an\n        opaque should be valid.\n\n    @type privateKey: C{str}\n    @ivar privateKey: A random string used for generating the secure opaque.\n\n    @type algorithm: C{str}\n    @param algorithm: Case insensitive string specifying the hash algorithm to\n        use.  Must be either C{\'md5\'} or C{\'sha\'}.  C{\'md5-sess\'} is B{not}\n        supported.\n\n    @type authenticationRealm: C{str}\n    @param authenticationRealm: case sensitive string that specifies the realm\n        portion of the challenge\n    """'
newline|'\n'
nl|'\n'
DECL|variable|CHALLENGE_LIFETIME_SECS
name|'CHALLENGE_LIFETIME_SECS'
op|'='
number|'15'
op|'*'
number|'60'
comment|'# 15 minutes'
newline|'\n'
nl|'\n'
DECL|variable|scheme
name|'scheme'
op|'='
string|'"digest"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'algorithm'
op|','
name|'authenticationRealm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'algorithm'
op|'='
name|'algorithm'
newline|'\n'
name|'self'
op|'.'
name|'authenticationRealm'
op|'='
name|'authenticationRealm'
newline|'\n'
name|'self'
op|'.'
name|'privateKey'
op|'='
name|'secureRandom'
op|'('
number|'12'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getChallenge
dedent|''
name|'def'
name|'getChallenge'
op|'('
name|'self'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate the challenge for use in the WWW-Authenticate header.\n\n        @param address: The client address to which this challenge is being\n        sent.\n\n        @return: The C{dict} that can be used to generate a WWW-Authenticate\n            header.\n        """'
newline|'\n'
name|'c'
op|'='
name|'self'
op|'.'
name|'_generateNonce'
op|'('
op|')'
newline|'\n'
name|'o'
op|'='
name|'self'
op|'.'
name|'_generateOpaque'
op|'('
name|'c'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'nonce'"
op|':'
name|'c'
op|','
nl|'\n'
string|"'opaque'"
op|':'
name|'o'
op|','
nl|'\n'
string|"'qop'"
op|':'
string|"'auth'"
op|','
nl|'\n'
string|"'algorithm'"
op|':'
name|'self'
op|'.'
name|'algorithm'
op|','
nl|'\n'
string|"'realm'"
op|':'
name|'self'
op|'.'
name|'authenticationRealm'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_generateNonce
dedent|''
name|'def'
name|'_generateNonce'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a random value suitable for use as the nonce parameter of a\n        WWW-Authenticate challenge.\n\n        @rtype: C{str}\n        """'
newline|'\n'
name|'return'
name|'secureRandom'
op|'('
number|'12'
op|')'
op|'.'
name|'encode'
op|'('
string|"'hex'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getTime
dedent|''
name|'def'
name|'_getTime'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parameterize the time based seed used in C{_generateOpaque}\n        so we can deterministically unittest it\'s behavior.\n        """'
newline|'\n'
name|'return'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_generateOpaque
dedent|''
name|'def'
name|'_generateOpaque'
op|'('
name|'self'
op|','
name|'nonce'
op|','
name|'clientip'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate an opaque to be returned to the client.  This is a unique\n        string that can be returned to us and verified.\n        """'
newline|'\n'
comment|'# Now, what we do is encode the nonce, client ip and a timestamp in the'
nl|'\n'
comment|'# opaque value with a suitable digest.'
nl|'\n'
name|'now'
op|'='
name|'str'
op|'('
name|'int'
op|'('
name|'self'
op|'.'
name|'_getTime'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'if'
name|'clientip'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'clientip'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'key'
op|'='
string|'"%s,%s,%s"'
op|'%'
op|'('
name|'nonce'
op|','
name|'clientip'
op|','
name|'now'
op|')'
newline|'\n'
name|'digest'
op|'='
name|'md5'
op|'('
name|'key'
op|'+'
name|'self'
op|'.'
name|'privateKey'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'ekey'
op|'='
name|'key'
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
newline|'\n'
name|'return'
string|'"%s-%s"'
op|'%'
op|'('
name|'digest'
op|','
name|'ekey'
op|'.'
name|'replace'
op|'('
string|"'\\n'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_verifyOpaque
dedent|''
name|'def'
name|'_verifyOpaque'
op|'('
name|'self'
op|','
name|'opaque'
op|','
name|'nonce'
op|','
name|'clientip'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given the opaque and nonce from the request, as well as the client IP\n        that made the request, verify that the opaque was generated by us.\n        And that it\'s not too old.\n\n        @param opaque: The opaque value from the Digest response\n        @param nonce: The nonce value from the Digest response\n        @param clientip: The remote IP address of the client making the request\n            or C{None} if the request was submitted over a channel where this\n            does not make sense.\n\n        @return: C{True} if the opaque was successfully verified.\n\n        @raise error.LoginFailed: if C{opaque} could not be parsed or\n            contained the wrong values.\n        """'
newline|'\n'
comment|'# First split the digest from the key'
nl|'\n'
name|'opaqueParts'
op|'='
name|'opaque'
op|'.'
name|'split'
op|'('
string|"'-'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'opaqueParts'
op|')'
op|'!='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'LoginFailed'
op|'('
string|"'Invalid response, invalid opaque value'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'clientip'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'clientip'
op|'='
string|"''"
newline|'\n'
nl|'\n'
comment|'# Verify the key'
nl|'\n'
dedent|''
name|'key'
op|'='
name|'opaqueParts'
op|'['
number|'1'
op|']'
op|'.'
name|'decode'
op|'('
string|"'base64'"
op|')'
newline|'\n'
name|'keyParts'
op|'='
name|'key'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'keyParts'
op|')'
op|'!='
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'LoginFailed'
op|'('
string|"'Invalid response, invalid opaque value'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'keyParts'
op|'['
number|'0'
op|']'
op|'!='
name|'nonce'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'LoginFailed'
op|'('
nl|'\n'
string|"'Invalid response, incompatible opaque/nonce values'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'keyParts'
op|'['
number|'1'
op|']'
op|'!='
name|'clientip'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'LoginFailed'
op|'('
nl|'\n'
string|"'Invalid response, incompatible opaque/client values'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'when'
op|'='
name|'int'
op|'('
name|'keyParts'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'LoginFailed'
op|'('
nl|'\n'
string|"'Invalid response, invalid opaque/time values'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'int'
op|'('
name|'self'
op|'.'
name|'_getTime'
op|'('
op|')'
op|')'
op|'-'
name|'when'
op|'>'
nl|'\n'
name|'DigestCredentialFactory'
op|'.'
name|'CHALLENGE_LIFETIME_SECS'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'LoginFailed'
op|'('
nl|'\n'
string|"'Invalid response, incompatible opaque/nonce too old'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify the digest'
nl|'\n'
dedent|''
name|'digest'
op|'='
name|'md5'
op|'('
name|'key'
op|'+'
name|'self'
op|'.'
name|'privateKey'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'if'
name|'digest'
op|'!='
name|'opaqueParts'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'LoginFailed'
op|'('
string|"'Invalid response, invalid opaque value'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'response'
op|','
name|'method'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Decode the given response and attempt to generate a\n        L{DigestedCredentials} from it.\n\n        @type response: C{str}\n        @param response: A string of comma seperated key=value pairs\n\n        @type method: C{str}\n        @param method: The action requested to which this response is addressed\n        (GET, POST, INVITE, OPTIONS, etc).\n\n        @type host: C{str}\n        @param host: The address the request was sent from.\n\n        @raise error.LoginFailed: If the response does not contain a username,\n            a nonce, an opaque, or if the opaque is invalid.\n\n        @return: L{DigestedCredentials}\n        """'
newline|'\n'
DECL|function|unq
name|'def'
name|'unq'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'s'
op|'['
number|'0'
op|']'
op|'=='
name|'s'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|'\'"\''
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'s'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
dedent|''
name|'response'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
name|'response'
op|'.'
name|'splitlines'
op|'('
op|')'
op|')'
newline|'\n'
name|'parts'
op|'='
name|'response'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
nl|'\n'
name|'auth'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
op|'['
name|'p'
op|'.'
name|'split'
op|'('
string|"'='"
op|','
number|'1'
op|')'
name|'for'
name|'p'
name|'in'
name|'parts'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'auth'
op|'['
name|'k'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
op|'='
name|'unq'
op|'('
name|'v'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'username'
op|'='
name|'auth'
op|'.'
name|'get'
op|'('
string|"'username'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'username'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'LoginFailed'
op|'('
string|"'Invalid response, no username given.'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"'opaque'"
name|'not'
name|'in'
name|'auth'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'LoginFailed'
op|'('
string|"'Invalid response, no opaque given.'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"'nonce'"
name|'not'
name|'in'
name|'auth'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'LoginFailed'
op|'('
string|"'Invalid response, no nonce given.'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Now verify the nonce/opaque values for this client'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_verifyOpaque'
op|'('
name|'auth'
op|'.'
name|'get'
op|'('
string|"'opaque'"
op|')'
op|','
name|'auth'
op|'.'
name|'get'
op|'('
string|"'nonce'"
op|')'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'DigestedCredentials'
op|'('
name|'username'
op|','
nl|'\n'
name|'method'
op|','
nl|'\n'
name|'self'
op|'.'
name|'authenticationRealm'
op|','
nl|'\n'
name|'auth'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CramMD5Credentials
dedent|''
dedent|''
dedent|''
name|'class'
name|'CramMD5Credentials'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IUsernameHashedPassword'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|challenge
name|'challenge'
op|'='
string|"''"
newline|'\n'
DECL|variable|response
name|'response'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
nl|'\n'
DECL|member|getChallenge
dedent|''
name|'def'
name|'getChallenge'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'challenge'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'challenge'
newline|'\n'
comment|'# The data encoded in the first ready response contains an'
nl|'\n'
comment|'# presumptively arbitrary string of random digits, a timestamp, and'
nl|'\n'
comment|'# the fully-qualified primary host name of the server.  The syntax of'
nl|'\n'
comment|"# the unencoded form must correspond to that of an RFC 822 'msg-id'"
nl|'\n'
comment|'# [RFC822] as described in [POP3].'
nl|'\n'
comment|'#   -- RFC 2195'
nl|'\n'
dedent|''
name|'r'
op|'='
name|'random'
op|'.'
name|'randrange'
op|'('
number|'0x7fffffff'
op|')'
newline|'\n'
name|'t'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'challenge'
op|'='
string|"'<%d.%d@%s>'"
op|'%'
op|'('
name|'r'
op|','
name|'t'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'challenge'
newline|'\n'
nl|'\n'
DECL|member|setResponse
dedent|''
name|'def'
name|'setResponse'
op|'('
name|'self'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'username'
op|','
name|'self'
op|'.'
name|'response'
op|'='
name|'response'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|moreChallenges
dedent|''
name|'def'
name|'moreChallenges'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|checkPassword
dedent|''
name|'def'
name|'checkPassword'
op|'('
name|'self'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'verify'
op|'='
name|'hmac'
op|'.'
name|'HMAC'
op|'('
name|'password'
op|','
name|'self'
op|'.'
name|'challenge'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'return'
name|'verify'
op|'=='
name|'self'
op|'.'
name|'response'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UsernameHashedPassword
dedent|''
dedent|''
name|'class'
name|'UsernameHashedPassword'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IUsernameHashedPassword'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'hashed'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'username'
op|'='
name|'username'
newline|'\n'
name|'self'
op|'.'
name|'hashed'
op|'='
name|'hashed'
newline|'\n'
nl|'\n'
DECL|member|checkPassword
dedent|''
name|'def'
name|'checkPassword'
op|'('
name|'self'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'hashed'
op|'=='
name|'password'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UsernamePassword
dedent|''
dedent|''
name|'class'
name|'UsernamePassword'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IUsernamePassword'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'username'
op|'='
name|'username'
newline|'\n'
name|'self'
op|'.'
name|'password'
op|'='
name|'password'
newline|'\n'
nl|'\n'
DECL|member|checkPassword
dedent|''
name|'def'
name|'checkPassword'
op|'('
name|'self'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'password'
op|'=='
name|'password'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Anonymous
dedent|''
dedent|''
name|'class'
name|'Anonymous'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IAnonymous'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ISSHPrivateKey
dedent|''
name|'class'
name|'ISSHPrivateKey'
op|'('
name|'ICredentials'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{ISSHPrivateKey} credentials encapsulate an SSH public key to be checked\n    against a user\'s private key.\n\n    @ivar username: The username associated with these credentials.\n    @type username: C{str}\n\n    @ivar algName: The algorithm name for the blob.\n    @type algName: C{str}\n\n    @ivar blob: The public key blob as sent by the client.\n    @type blob: C{str}\n\n    @ivar sigData: The data the signature was made from.\n    @type sigData: C{str}\n\n    @ivar signature: The signed data.  This is checked to verify that the user\n        owns the private key.\n    @type signature: C{str} or C{NoneType}\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SSHPrivateKey
dedent|''
name|'class'
name|'SSHPrivateKey'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'ISSHPrivateKey'
op|')'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'algName'
op|','
name|'blob'
op|','
name|'sigData'
op|','
name|'signature'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'username'
op|'='
name|'username'
newline|'\n'
name|'self'
op|'.'
name|'algName'
op|'='
name|'algName'
newline|'\n'
name|'self'
op|'.'
name|'blob'
op|'='
name|'blob'
newline|'\n'
name|'self'
op|'.'
name|'sigData'
op|'='
name|'sigData'
newline|'\n'
name|'self'
op|'.'
name|'signature'
op|'='
name|'signature'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPluggableAuthenticationModules
dedent|''
dedent|''
name|'class'
name|'IPluggableAuthenticationModules'
op|'('
name|'ICredentials'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""I encapsulate the authentication of a user via PAM (Pluggable\n    Authentication Modules.  I use PyPAM (available from\n    http://www.tummy.com/Software/PyPam/index.html).\n\n    @ivar username: The username for the user being logged in.\n\n    @ivar pamConversion: A function that is called with a list of tuples\n    (message, messageType).  See the PAM documentation\n    for the meaning of messageType.  The function\n    returns a Deferred which will fire with a list\n    of (response, 0), one for each message.  The 0 is\n    currently unused, but is required by the PAM library.\n    """'
newline|'\n'
nl|'\n'
DECL|class|PluggableAuthenticationModules
dedent|''
name|'class'
name|'PluggableAuthenticationModules'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IPluggableAuthenticationModules'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'pamConversion'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'username'
op|'='
name|'username'
newline|'\n'
name|'self'
op|'.'
name|'pamConversion'
op|'='
name|'pamConversion'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

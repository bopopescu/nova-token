begin_unit
comment|'# -*- test-case-name: twisted.test.test_newcred -*-'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nThe point of integration of application and authentication.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'maybeDeferred'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
op|','
name|'reflect'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'error'
newline|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'providedBy'
op|','
name|'Interface'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IRealm
name|'class'
name|'IRealm'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The realm connects application-specific objects to the\n    authentication system.\n    """'
newline|'\n'
DECL|member|requestAvatar
name|'def'
name|'requestAvatar'
op|'('
name|'avatarId'
op|','
name|'mind'
op|','
op|'*'
name|'interfaces'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return avatar which provides one of the given interfaces.\n\n        @param avatarId: a string that identifies an avatar, as returned by\n            L{ICredentialsChecker.requestAvatarId<twisted.cred.checkers.ICredentialsChecker.requestAvatarId>}\n            (via a Deferred).  Alternatively, it may be\n            C{twisted.cred.checkers.ANONYMOUS}.\n        @param mind: usually None.  See the description of mind in\n            L{Portal.login}.\n        @param interfaces: the interface(s) the returned avatar should\n            implement, e.g.  C{IMailAccount}.  See the description of\n            L{Portal.login}.\n\n        @returns: a deferred which will fire a tuple of (interface,\n            avatarAspect, logout), or the tuple itself.  The interface will be\n            one of the interfaces passed in the \'interfaces\' argument.  The\n            \'avatarAspect\' will implement that interface.  The \'logout\' object\n            is a callable which will detach the mind from the avatar.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Portal
dedent|''
dedent|''
name|'class'
name|'Portal'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mediator between clients and a realm.\n\n    A portal is associated with one Realm and zero or more credentials checkers.\n    When a login is attempted, the portal finds the appropriate credentials\n    checker for the credentials given, invokes it, and if the credentials are\n    valid, retrieves the appropriate avatar from the Realm.\n\n    This class is not intended to be subclassed.  Customization should be done\n    in the realm object and in the credentials checker objects.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'realm'
op|','
name|'checkers'
op|'='
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a Portal to a L{IRealm}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'realm'
op|'='
name|'realm'
newline|'\n'
name|'self'
op|'.'
name|'checkers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'checker'
name|'in'
name|'checkers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'registerChecker'
op|'('
name|'checker'
op|')'
newline|'\n'
nl|'\n'
DECL|member|listCredentialsInterfaces
dedent|''
dedent|''
name|'def'
name|'listCredentialsInterfaces'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return list of credentials interfaces that can be used to login.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'checkers'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|registerChecker
dedent|''
name|'def'
name|'registerChecker'
op|'('
name|'self'
op|','
name|'checker'
op|','
op|'*'
name|'credentialInterfaces'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'credentialInterfaces'
op|':'
newline|'\n'
indent|'            '
name|'credentialInterfaces'
op|'='
name|'checker'
op|'.'
name|'credentialInterfaces'
newline|'\n'
dedent|''
name|'for'
name|'credentialInterface'
name|'in'
name|'credentialInterfaces'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'checkers'
op|'['
name|'credentialInterface'
op|']'
op|'='
name|'checker'
newline|'\n'
nl|'\n'
DECL|member|login
dedent|''
dedent|''
name|'def'
name|'login'
op|'('
name|'self'
op|','
name|'credentials'
op|','
name|'mind'
op|','
op|'*'
name|'interfaces'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param credentials: an implementor of\n            L{twisted.cred.credentials.ICredentials}\n\n        @param mind: an object which implements a client-side interface for\n            your particular realm.  In many cases, this may be None, so if the\n            word \'mind\' confuses you, just ignore it.\n\n        @param interfaces: list of interfaces for the perspective that the mind\n            wishes to attach to. Usually, this will be only one interface, for\n            example IMailAccount. For highly dynamic protocols, however, this\n            may be a list like (IMailAccount, IUserChooser, IServiceInfo).  To\n            expand: if we are speaking to the system over IMAP, any information\n            that will be relayed to the user MUST be returned as an\n            IMailAccount implementor; IMAP clients would not be able to\n            understand anything else. Any information about unusual status\n            would have to be relayed as a single mail message in an\n            otherwise-empty mailbox. However, in a web-based mail system, or a\n            PB-based client, the ``mind\'\' object inside the web server\n            (implemented with a dynamic page-viewing mechanism such as a\n            Twisted Web Resource) or on the user\'s client program may be\n            intelligent enough to respond to several ``server\'\'-side\n            interfaces.\n\n        @return: A deferred which will fire a tuple of (interface,\n            avatarAspect, logout).  The interface will be one of the interfaces\n            passed in the \'interfaces\' argument.  The \'avatarAspect\' will\n            implement that interface. The \'logout\' object is a callable which\n            will detach the mind from the avatar. It must be called when the\n            user has conceptually disconnected from the service. Although in\n            some cases this will not be in connectionLost (such as in a\n            web-based session), it will always be at the end of a user\'s\n            interactive session.\n        """'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'self'
op|'.'
name|'checkers'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'i'
op|'.'
name|'providedBy'
op|'('
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'checkers'
op|'['
name|'i'
op|']'
op|'.'
name|'requestAvatarId'
op|','
name|'credentials'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'realm'
op|'.'
name|'requestAvatar'
op|','
name|'mind'
op|','
op|'*'
name|'interfaces'
nl|'\n'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'ifac'
op|'='
name|'providedBy'
op|'('
name|'credentials'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'UnhandledCredentials'
op|'('
nl|'\n'
string|'"No checker for %s"'
op|'%'
string|"', '"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'reflect'
op|'.'
name|'qual'
op|','
name|'ifac'
op|')'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

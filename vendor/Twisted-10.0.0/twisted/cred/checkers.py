begin_unit
comment|'# -*- test-case-name: twisted.test.test_newcred -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'Interface'
op|','
name|'Attribute'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
op|','
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'error'
op|','
name|'credentials'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ICredentialsChecker
name|'class'
name|'ICredentialsChecker'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An object that can check sub-interfaces of ICredentials.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|credentialInterfaces
name|'credentialInterfaces'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|"'A list of sub-interfaces of ICredentials which specifies which I may check.'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|requestAvatarId
name|'def'
name|'requestAvatarId'
op|'('
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param credentials: something which implements one of the interfaces in\n        self.credentialInterfaces.\n\n        @return: a Deferred which will fire a string which identifies an\n        avatar, an empty tuple to specify an authenticated anonymous user\n        (provided as checkers.ANONYMOUS) or fire a Failure(UnauthorizedLogin).\n        Alternatively, return the result itself.\n\n        @see: L{twisted.cred.credentials}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'# A note on anonymity - We do not want None as the value for anonymous'
nl|'\n'
comment|'# because it is too easy to accidentally return it.  We do not want the'
nl|'\n'
comment|'# empty string, because it is too easy to mistype a password file.  For'
nl|'\n'
comment|"# example, an .htpasswd file may contain the lines: ['hello:asdf',"
nl|'\n'
comment|"# 'world:asdf', 'goodbye', ':world'].  This misconfiguration will have an"
nl|'\n'
comment|'# ill effect in any case, but accidentally granting anonymous access is a'
nl|'\n'
comment|'# worse failure mode than simply granting access to an untypeable'
nl|'\n'
comment|"# username.  We do not want an instance of 'object', because that would"
nl|'\n'
comment|'# create potential problems with persistence.'
nl|'\n'
nl|'\n'
DECL|variable|ANONYMOUS
dedent|''
dedent|''
name|'ANONYMOUS'
op|'='
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AllowAnonymousAccess
name|'class'
name|'AllowAnonymousAccess'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'ICredentialsChecker'
op|')'
newline|'\n'
DECL|variable|credentialInterfaces
name|'credentialInterfaces'
op|'='
name|'credentials'
op|'.'
name|'IAnonymous'
op|','
newline|'\n'
nl|'\n'
DECL|member|requestAvatarId
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'ANONYMOUS'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InMemoryUsernamePasswordDatabaseDontUse
dedent|''
dedent|''
name|'class'
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An extremely simple credentials checker.\n\n    This is only of use in one-off test programs or examples which don\'t\n    want to focus too much on how credentials are verified.\n\n    You really don\'t want to use this for anything else.  It is, at best, a\n    toy.  If you need a simple credentials checker for a real application,\n    see L{FilePasswordDB}.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'ICredentialsChecker'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|credentialInterfaces
name|'credentialInterfaces'
op|'='
op|'('
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|','
nl|'\n'
name|'credentials'
op|'.'
name|'IUsernameHashedPassword'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'users'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'users'
op|'='
name|'users'
newline|'\n'
nl|'\n'
DECL|member|addUser
dedent|''
name|'def'
name|'addUser'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'users'
op|'['
name|'username'
op|']'
op|'='
name|'password'
newline|'\n'
nl|'\n'
DECL|member|_cbPasswordMatch
dedent|''
name|'def'
name|'_cbPasswordMatch'
op|'('
name|'self'
op|','
name|'matched'
op|','
name|'username'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'matched'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'username'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|requestAvatarId
dedent|''
dedent|''
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'credentials'
op|'.'
name|'username'
name|'in'
name|'self'
op|'.'
name|'users'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
nl|'\n'
name|'credentials'
op|'.'
name|'checkPassword'
op|','
nl|'\n'
name|'self'
op|'.'
name|'users'
op|'['
name|'credentials'
op|'.'
name|'username'
op|']'
op|')'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_cbPasswordMatch'
op|','
name|'str'
op|'('
name|'credentials'
op|'.'
name|'username'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FilePasswordDB
dedent|''
dedent|''
dedent|''
name|'class'
name|'FilePasswordDB'
op|':'
newline|'\n'
indent|'    '
string|'"""A file-based, text-based username/password database.\n\n    Records in the datafile for this class are delimited by a particular\n    string.  The username appears in a fixed field of the columns delimited\n    by this string, as does the password.  Both fields are specifiable.  If\n    the passwords are not stored plaintext, a hash function must be supplied\n    to convert plaintext passwords to the form stored on disk and this\n    CredentialsChecker will only be able to check IUsernamePassword\n    credentials.  If the passwords are stored plaintext,\n    IUsernameHashedPassword credentials will be checkable as well.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'ICredentialsChecker'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|cache
name|'cache'
op|'='
name|'False'
newline|'\n'
DECL|variable|_credCache
name|'_credCache'
op|'='
name|'None'
newline|'\n'
DECL|variable|_cacheTimestamp
name|'_cacheTimestamp'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'filename'
op|','
name|'delim'
op|'='
string|"':'"
op|','
name|'usernameField'
op|'='
number|'0'
op|','
name|'passwordField'
op|'='
number|'1'
op|','
nl|'\n'
name|'caseSensitive'
op|'='
name|'True'
op|','
name|'hash'
op|'='
name|'None'
op|','
name|'cache'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @type filename: C{str}\n        @param filename: The name of the file from which to read username and\n        password information.\n\n        @type delim: C{str}\n        @param delim: The field delimiter used in the file.\n\n        @type usernameField: C{int}\n        @param usernameField: The index of the username after splitting a\n        line on the delimiter.\n\n        @type passwordField: C{int}\n        @param passwordField: The index of the password after splitting a\n        line on the delimiter.\n\n        @type caseSensitive: C{bool}\n        @param caseSensitive: If true, consider the case of the username when\n        performing a lookup.  Ignore it otherwise.\n\n        @type hash: Three-argument callable or C{None}\n        @param hash: A function used to transform the plaintext password\n        received over the network to a format suitable for comparison\n        against the version stored on disk.  The arguments to the callable\n        are the username, the network-supplied password, and the in-file\n        version of the password.  If the return value compares equal to the\n        version stored on disk, the credentials are accepted.\n\n        @type cache: C{bool}\n        @param cache: If true, maintain an in-memory cache of the\n        contents of the password file.  On lookups, the mtime of the\n        file will be checked, and the file will only be re-parsed if\n        the mtime is newer than when the cache was generated.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'filename'
op|'='
name|'filename'
newline|'\n'
name|'self'
op|'.'
name|'delim'
op|'='
name|'delim'
newline|'\n'
name|'self'
op|'.'
name|'ufield'
op|'='
name|'usernameField'
newline|'\n'
name|'self'
op|'.'
name|'pfield'
op|'='
name|'passwordField'
newline|'\n'
name|'self'
op|'.'
name|'caseSensitive'
op|'='
name|'caseSensitive'
newline|'\n'
name|'self'
op|'.'
name|'hash'
op|'='
name|'hash'
newline|'\n'
name|'self'
op|'.'
name|'cache'
op|'='
name|'cache'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'hash'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# The passwords are stored plaintext.  We can support both'
nl|'\n'
comment|'# plaintext and hashed passwords received over the network.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'credentialInterfaces'
op|'='
op|'('
nl|'\n'
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|','
nl|'\n'
name|'credentials'
op|'.'
name|'IUsernameHashedPassword'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# The passwords are hashed on disk.  We can support only'
nl|'\n'
comment|'# plaintext passwords received over the network.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'credentialInterfaces'
op|'='
op|'('
nl|'\n'
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'dict'
op|'('
name|'vars'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
name|'for'
name|'k'
name|'in'
string|"'_credCache'"
op|','
string|"'_cacheTimestamp'"
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'d'
op|'['
name|'k'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbPasswordMatch
dedent|''
name|'def'
name|'_cbPasswordMatch'
op|'('
name|'self'
op|','
name|'matched'
op|','
name|'username'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'matched'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'username'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_loadCredentials
dedent|''
dedent|''
name|'def'
name|'_loadCredentials'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'file'
op|'('
name|'self'
op|'.'
name|'filename'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'line'
name|'in'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'line'
op|'='
name|'line'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'parts'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
name|'self'
op|'.'
name|'delim'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'ufield'
op|'>='
name|'len'
op|'('
name|'parts'
op|')'
name|'or'
name|'self'
op|'.'
name|'pfield'
op|'>='
name|'len'
op|'('
name|'parts'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'caseSensitive'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'parts'
op|'['
name|'self'
op|'.'
name|'ufield'
op|']'
op|','
name|'parts'
op|'['
name|'self'
op|'.'
name|'pfield'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'parts'
op|'['
name|'self'
op|'.'
name|'ufield'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'parts'
op|'['
name|'self'
op|'.'
name|'pfield'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getUser
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'getUser'
op|'('
name|'self'
op|','
name|'username'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'caseSensitive'
op|':'
newline|'\n'
indent|'            '
name|'username'
op|'='
name|'username'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'cache'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_credCache'
name|'is'
name|'None'
name|'or'
name|'os'
op|'.'
name|'path'
op|'.'
name|'getmtime'
op|'('
name|'self'
op|'.'
name|'filename'
op|')'
op|'>'
name|'self'
op|'.'
name|'_cacheTimestamp'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_cacheTimestamp'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'getmtime'
op|'('
name|'self'
op|'.'
name|'filename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_credCache'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'_loadCredentials'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'username'
op|','
name|'self'
op|'.'
name|'_credCache'
op|'['
name|'username'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'u'
op|','
name|'p'
name|'in'
name|'self'
op|'.'
name|'_loadCredentials'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'u'
op|'=='
name|'username'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'u'
op|','
name|'p'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'KeyError'
op|'('
name|'username'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|requestAvatarId
dedent|''
dedent|''
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'c'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'u'
op|','
name|'p'
op|'='
name|'self'
op|'.'
name|'getUser'
op|'('
name|'c'
op|'.'
name|'username'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'up'
op|'='
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|'('
name|'c'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'hash'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'up'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'h'
op|'='
name|'self'
op|'.'
name|'hash'
op|'('
name|'up'
op|'.'
name|'username'
op|','
name|'up'
op|'.'
name|'password'
op|','
name|'p'
op|')'
newline|'\n'
name|'if'
name|'h'
op|'=='
name|'p'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'u'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'c'
op|'.'
name|'checkPassword'
op|','
name|'p'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbPasswordMatch'
op|','
name|'u'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PluggableAuthenticationModulesChecker
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'PluggableAuthenticationModulesChecker'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'ICredentialsChecker'
op|')'
newline|'\n'
DECL|variable|credentialInterfaces
name|'credentialInterfaces'
op|'='
name|'credentials'
op|'.'
name|'IPluggableAuthenticationModules'
op|','
newline|'\n'
DECL|variable|service
name|'service'
op|'='
string|"'Twisted'"
newline|'\n'
nl|'\n'
DECL|member|requestAvatarId
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'pamauth'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
comment|'# PyPAM is missing'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'pamauth'
op|'.'
name|'pamAuthenticate'
op|'('
name|'self'
op|'.'
name|'service'
op|','
name|'credentials'
op|'.'
name|'username'
op|','
nl|'\n'
name|'credentials'
op|'.'
name|'pamConversion'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'credentials'
op|'.'
name|'username'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'# For backwards compatibility'
nl|'\n'
comment|'# Allow access as the old name.'
nl|'\n'
DECL|variable|OnDiskUsernamePasswordDatabase
dedent|''
dedent|''
dedent|''
name|'OnDiskUsernamePasswordDatabase'
op|'='
name|'FilePasswordDB'
newline|'\n'
endmarker|''
end_unit

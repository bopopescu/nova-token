begin_unit
comment|'# -*- test-case-name: twisted.test.test_digestauth -*-'
nl|'\n'
comment|'# Copyright (c) 2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nCalculations for HTTP Digest authentication.\n\n@see: U{http://www.faqs.org/rfcs/rfc2617.html}\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'hashlib'
name|'import'
name|'md5'
op|','
name|'sha1'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'# The digest math'
nl|'\n'
nl|'\n'
DECL|variable|algorithms
name|'algorithms'
op|'='
op|'{'
nl|'\n'
string|"'md5'"
op|':'
name|'md5'
op|','
nl|'\n'
nl|'\n'
comment|'# md5-sess is more complicated than just another algorithm.  It requires'
nl|'\n'
comment|'# H(A1) state to be remembered from the first WWW-Authenticate challenge'
nl|'\n'
comment|'# issued and re-used to process any Authorization header in response to'
nl|'\n'
comment|'# that WWW-Authenticate challenge.  It is *not* correct to simply'
nl|'\n'
comment|'# recalculate H(A1) each time an Authorization header is received.  Read'
nl|'\n'
comment|'# RFC 2617, section 3.2.2.2 and do not try to make DigestCredentialFactory'
nl|'\n'
comment|'# support this unless you completely understand it. -exarkun'
nl|'\n'
string|"'md5-sess'"
op|':'
name|'md5'
op|','
nl|'\n'
nl|'\n'
string|"'sha'"
op|':'
name|'sha1'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# DigestCalcHA1'
nl|'\n'
DECL|function|calcHA1
name|'def'
name|'calcHA1'
op|'('
name|'pszAlg'
op|','
name|'pszUserName'
op|','
name|'pszRealm'
op|','
name|'pszPassword'
op|','
name|'pszNonce'
op|','
name|'pszCNonce'
op|','
nl|'\n'
name|'preHA1'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Compute H(A1) from RFC 2617.\n\n    @param pszAlg: The name of the algorithm to use to calculate the digest.\n        Currently supported are md5, md5-sess, and sha.\n    @param pszUserName: The username\n    @param pszRealm: The realm\n    @param pszPassword: The password\n    @param pszNonce: The nonce\n    @param pszCNonce: The cnonce\n\n    @param preHA1: If available this is a str containing a previously\n       calculated H(A1) as a hex string.  If this is given then the values for\n       pszUserName, pszRealm, and pszPassword must be C{None} and are ignored.\n    """'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'preHA1'
name|'and'
op|'('
name|'pszUserName'
name|'or'
name|'pszRealm'
name|'or'
name|'pszPassword'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'TypeError'
op|'('
op|'('
string|'"preHA1 is incompatible with the pszUserName, "'
nl|'\n'
string|'"pszRealm, and pszPassword arguments"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'preHA1'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# We need to calculate the HA1 from the username:realm:password'
nl|'\n'
indent|'        '
name|'m'
op|'='
name|'algorithms'
op|'['
name|'pszAlg'
op|']'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszUserName'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszRealm'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszPassword'
op|')'
newline|'\n'
name|'HA1'
op|'='
name|'m'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# We were given a username:realm:password'
nl|'\n'
indent|'        '
name|'HA1'
op|'='
name|'preHA1'
op|'.'
name|'decode'
op|'('
string|"'hex'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'pszAlg'
op|'=='
string|'"md5-sess"'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'='
name|'algorithms'
op|'['
name|'pszAlg'
op|']'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'HA1'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszNonce'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszCNonce'
op|')'
newline|'\n'
name|'HA1'
op|'='
name|'m'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'HA1'
op|'.'
name|'encode'
op|'('
string|"'hex'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|calcHA2
dedent|''
name|'def'
name|'calcHA2'
op|'('
name|'algo'
op|','
name|'pszMethod'
op|','
name|'pszDigestUri'
op|','
name|'pszQop'
op|','
name|'pszHEntity'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Compute H(A2) from RFC 2617.\n\n    @param pszAlg: The name of the algorithm to use to calculate the digest.\n        Currently supported are md5, md5-sess, and sha.\n    @param pszMethod: The request method.\n    @param pszDigestUri: The request URI.\n    @param pszQop: The Quality-of-Protection value.\n    @param pszHEntity: The hash of the entity body or C{None} if C{pszQop} is\n        not C{\'auth-int\'}.\n    @return: The hash of the A2 value for the calculation of the response\n        digest.\n    """'
newline|'\n'
name|'m'
op|'='
name|'algorithms'
op|'['
name|'algo'
op|']'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszMethod'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszDigestUri'
op|')'
newline|'\n'
name|'if'
name|'pszQop'
op|'=='
string|'"auth-int"'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszHEntity'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'m'
op|'.'
name|'digest'
op|'('
op|')'
op|'.'
name|'encode'
op|'('
string|"'hex'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|calcResponse
dedent|''
name|'def'
name|'calcResponse'
op|'('
name|'HA1'
op|','
name|'HA2'
op|','
name|'algo'
op|','
name|'pszNonce'
op|','
name|'pszNonceCount'
op|','
name|'pszCNonce'
op|','
name|'pszQop'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Compute the digest for the given parameters.\n\n    @param HA1: The H(A1) value, as computed by L{calcHA1}.\n    @param HA2: The H(A2) value, as computed by L{calcHA2}.\n    @param pszNonce: The challenge nonce.\n    @param pszNonceCount: The (client) nonce count value for this response.\n    @param pszCNonce: The client nonce.\n    @param pszQop: The Quality-of-Protection value.\n    """'
newline|'\n'
name|'m'
op|'='
name|'algorithms'
op|'['
name|'algo'
op|']'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'HA1'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszNonce'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'if'
name|'pszNonceCount'
name|'and'
name|'pszCNonce'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'.'
name|'update'
op|'('
name|'pszNonceCount'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszCNonce'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'pszQop'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
string|'":"'
op|')'
newline|'\n'
dedent|''
name|'m'
op|'.'
name|'update'
op|'('
name|'HA2'
op|')'
newline|'\n'
name|'respHash'
op|'='
name|'m'
op|'.'
name|'digest'
op|'('
op|')'
op|'.'
name|'encode'
op|'('
string|"'hex'"
op|')'
newline|'\n'
name|'return'
name|'respHash'
newline|'\n'
dedent|''
endmarker|''
end_unit

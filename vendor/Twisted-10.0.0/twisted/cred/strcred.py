begin_unit
comment|'# -*- test-case-name: twisted.test.test_strcred -*-'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright (c) 2007-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
string|'"""\nSupport for resolving command-line strings that represent different\ncheckers available to cred.\n\nExamples:\n - passwd:/etc/passwd\n - memory:admin:asdf:user:lkj\n - unix\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'Interface'
op|','
name|'Attribute'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'plugin'
name|'import'
name|'getPlugins'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'usage'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ICheckerFactory
name|'class'
name|'ICheckerFactory'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A factory for objects which provide\n    L{twisted.cred.checkers.ICredentialsChecker}.\n\n    It\'s implemented by twistd plugins creating checkers.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|authType
name|'authType'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|"'A tag that identifies the authentication method.'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|authHelp
name|'authHelp'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|"'A detailed (potentially multi-line) description of precisely '"
nl|'\n'
string|"'what functionality this CheckerFactory provides.'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|argStringFormat
name|'argStringFormat'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|"'A short (one-line) description of the argument string format.'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|credentialInterfaces
name|'credentialInterfaces'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|"'A list of credentials interfaces that this factory will support.'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|generateChecker
name|'def'
name|'generateChecker'
op|'('
name|'argstring'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return an L{ICredentialChecker} provider using the supplied\n        argument string.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StrcredException
dedent|''
dedent|''
name|'class'
name|'StrcredException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Base exception class for strcred.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidAuthType
dedent|''
name|'class'
name|'InvalidAuthType'
op|'('
name|'StrcredException'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when a user provides an invalid identifier for the\n    authentication plugin (known as the authType).\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidAuthArgumentString
dedent|''
name|'class'
name|'InvalidAuthArgumentString'
op|'('
name|'StrcredException'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised by an authentication plugin when the argument string\n    provided is formatted incorrectly.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnsupportedInterfaces
dedent|''
name|'class'
name|'UnsupportedInterfaces'
op|'('
name|'StrcredException'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when an application is given a checker to use that does not\n    provide any of the application\'s supported credentials interfaces.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'# This will be used to warn the users whenever they view help for an'
nl|'\n'
comment|'# authType that is not supported by the application.'
nl|'\n'
DECL|variable|notSupportedWarning
dedent|''
name|'notSupportedWarning'
op|'='
op|'('
string|'"WARNING: This authType is not supported by "'
nl|'\n'
string|'"this application."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|findCheckerFactories
name|'def'
name|'findCheckerFactories'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Find all objects that implement L{ICheckerFactory}.\n    """'
newline|'\n'
name|'return'
name|'getPlugins'
op|'('
name|'ICheckerFactory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|findCheckerFactory
dedent|''
name|'def'
name|'findCheckerFactory'
op|'('
name|'authType'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Find the first checker factory that supports the given authType.\n    """'
newline|'\n'
name|'for'
name|'factory'
name|'in'
name|'findCheckerFactories'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'factory'
op|'.'
name|'authType'
op|'=='
name|'authType'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'factory'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'InvalidAuthType'
op|'('
name|'authType'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|makeChecker
dedent|''
name|'def'
name|'makeChecker'
op|'('
name|'description'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns an L{twisted.cred.checkers.ICredentialsChecker} based on the\n    contents of a descriptive string. Similar to\n    L{twisted.application.strports}.\n    """'
newline|'\n'
name|'if'
string|"':'"
name|'in'
name|'description'
op|':'
newline|'\n'
indent|'        '
name|'authType'
op|','
name|'argstring'
op|'='
name|'description'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'authType'
op|'='
name|'description'
newline|'\n'
name|'argstring'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'return'
name|'findCheckerFactory'
op|'('
name|'authType'
op|')'
op|'.'
name|'generateChecker'
op|'('
name|'argstring'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AuthOptionMixin
dedent|''
name|'class'
name|'AuthOptionMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Defines helper methods that can be added on to any\n    L{usage.Options} subclass that needs authentication.\n\n    This mixin implements three new options methods:\n\n    The opt_auth method (--auth) will write two new values to the\n    \'self\' dictionary: C{credInterfaces} (a dict of lists) and\n    C{credCheckers} (a list).\n\n    The opt_help_auth method (--help-auth) will search for all\n    available checker plugins and list them for the user; it will exit\n    when finished.\n\n    The opt_help_auth_type method (--help-auth-type) will display\n    detailed help for a particular checker plugin.\n\n    @cvar supportedInterfaces: An iterable object that returns\n       credential interfaces which this application is able to support.\n\n    @cvar authOutput: A writeable object to which this options class\n        will send all help-related output. Default: L{sys.stdout}\n    """'
newline|'\n'
nl|'\n'
DECL|variable|supportedInterfaces
name|'supportedInterfaces'
op|'='
name|'None'
newline|'\n'
DECL|variable|authOutput
name|'authOutput'
op|'='
name|'sys'
op|'.'
name|'stdout'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|supportsInterface
name|'def'
name|'supportsInterface'
op|'('
name|'self'
op|','
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns whether a particular credentials interface is supported.\n        """'
newline|'\n'
name|'return'
op|'('
name|'self'
op|'.'
name|'supportedInterfaces'
name|'is'
name|'None'
nl|'\n'
name|'or'
name|'interface'
name|'in'
name|'self'
op|'.'
name|'supportedInterfaces'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|supportsCheckerFactory
dedent|''
name|'def'
name|'supportsCheckerFactory'
op|'('
name|'self'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns whether a checker factory will provide at least one of\n        the credentials interfaces that we care about.\n        """'
newline|'\n'
name|'for'
name|'interface'
name|'in'
name|'factory'
op|'.'
name|'credentialInterfaces'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'supportsInterface'
op|'('
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addChecker
dedent|''
name|'def'
name|'addChecker'
op|'('
name|'self'
op|','
name|'checker'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Supply a supplied credentials checker to the Options class.\n        """'
newline|'\n'
comment|"# First figure out which interfaces we're willing to support."
nl|'\n'
name|'supported'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'supportedInterfaces'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'supported'
op|'='
name|'checker'
op|'.'
name|'credentialInterfaces'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'interface'
name|'in'
name|'checker'
op|'.'
name|'credentialInterfaces'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'supportsInterface'
op|'('
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'supported'
op|'.'
name|'append'
op|'('
name|'interface'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'not'
name|'supported'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'UnsupportedInterfaces'
op|'('
name|'checker'
op|'.'
name|'credentialInterfaces'
op|')'
newline|'\n'
comment|'# If we get this far, then we know we can use this checker.'
nl|'\n'
dedent|''
name|'if'
string|"'credInterfaces'"
name|'not'
name|'in'
name|'self'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
string|"'credInterfaces'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
string|"'credCheckers'"
name|'not'
name|'in'
name|'self'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
string|"'credCheckers'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'self'
op|'['
string|"'credCheckers'"
op|']'
op|'.'
name|'append'
op|'('
name|'checker'
op|')'
newline|'\n'
name|'for'
name|'interface'
name|'in'
name|'supported'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
string|"'credInterfaces'"
op|']'
op|'.'
name|'setdefault'
op|'('
name|'interface'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'checker'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|opt_auth
dedent|''
dedent|''
name|'def'
name|'opt_auth'
op|'('
name|'self'
op|','
name|'description'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Specify an authentication method for the server.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'addChecker'
op|'('
name|'makeChecker'
op|'('
name|'description'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'UnsupportedInterfaces'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'usage'
op|'.'
name|'UsageError'
op|'('
nl|'\n'
string|"'Auth plugin not supported: %s'"
op|'%'
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidAuthType'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'usage'
op|'.'
name|'UsageError'
op|'('
nl|'\n'
string|"'Auth plugin not recognized: %s'"
op|'%'
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'usage'
op|'.'
name|'UsageError'
op|'('
string|"'Unexpected error: %s'"
op|'%'
name|'e'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_checkerFactoriesForOptHelpAuth
dedent|''
dedent|''
name|'def'
name|'_checkerFactoriesForOptHelpAuth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a list of which authTypes will be displayed by --help-auth.\n        This makes it a lot easier to test this module.\n        """'
newline|'\n'
name|'for'
name|'factory'
name|'in'
name|'findCheckerFactories'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'interface'
name|'in'
name|'factory'
op|'.'
name|'credentialInterfaces'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'supportsInterface'
op|'('
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'factory'
newline|'\n'
name|'break'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|opt_help_auth
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'opt_help_auth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Show all authentication methods available.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authOutput'
op|'.'
name|'write'
op|'('
string|'"Usage: --auth AuthType[:ArgString]\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authOutput'
op|'.'
name|'write'
op|'('
string|'"For detailed help: --help-auth-type AuthType\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authOutput'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
comment|'# Figure out the right width for our columns'
nl|'\n'
name|'firstLength'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'factory'
name|'in'
name|'self'
op|'.'
name|'_checkerFactoriesForOptHelpAuth'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'factory'
op|'.'
name|'authType'
op|')'
op|'>'
name|'firstLength'
op|':'
newline|'\n'
indent|'                '
name|'firstLength'
op|'='
name|'len'
op|'('
name|'factory'
op|'.'
name|'authType'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'formatString'
op|'='
string|"'  %%-%is\\t%%s\\n'"
op|'%'
name|'firstLength'
newline|'\n'
name|'self'
op|'.'
name|'authOutput'
op|'.'
name|'write'
op|'('
name|'formatString'
op|'%'
op|'('
string|"'AuthType'"
op|','
string|"'ArgString format'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authOutput'
op|'.'
name|'write'
op|'('
name|'formatString'
op|'%'
op|'('
string|"'========'"
op|','
string|"'================'"
op|')'
op|')'
newline|'\n'
name|'for'
name|'factory'
name|'in'
name|'self'
op|'.'
name|'_checkerFactoriesForOptHelpAuth'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authOutput'
op|'.'
name|'write'
op|'('
nl|'\n'
name|'formatString'
op|'%'
op|'('
name|'factory'
op|'.'
name|'authType'
op|','
name|'factory'
op|'.'
name|'argStringFormat'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'authOutput'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'raise'
name|'SystemExit'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|opt_help_auth_type
dedent|''
name|'def'
name|'opt_help_auth_type'
op|'('
name|'self'
op|','
name|'authType'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Show help for a particular authentication type.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'cf'
op|'='
name|'findCheckerFactory'
op|'('
name|'authType'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidAuthType'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'usage'
op|'.'
name|'UsageError'
op|'('
string|'"Invalid auth type: %s"'
op|'%'
name|'authType'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'authOutput'
op|'.'
name|'write'
op|'('
string|'"Usage: --auth %s[:ArgString]\\n"'
op|'%'
name|'authType'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authOutput'
op|'.'
name|'write'
op|'('
string|'"ArgString format: %s\\n"'
op|'%'
name|'cf'
op|'.'
name|'argStringFormat'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authOutput'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'cf'
op|'.'
name|'authHelp'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authOutput'
op|'.'
name|'write'
op|'('
string|"'  %s\\n'"
op|'%'
name|'line'
op|'.'
name|'rstrip'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'authOutput'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'supportsCheckerFactory'
op|'('
name|'cf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authOutput'
op|'.'
name|'write'
op|'('
string|"'  %s\\n'"
op|'%'
name|'notSupportedWarning'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authOutput'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'SystemExit'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

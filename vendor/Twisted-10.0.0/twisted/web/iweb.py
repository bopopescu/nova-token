begin_unit
comment|'# -*- test-case-name: twisted.web.test -*-'
nl|'\n'
comment|'# Copyright (c) 2008-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nInterface definitions for L{twisted.web}.\n\n@var UNKNOWN_LENGTH: An opaque object which may be used as the value of\n    L{IBodyProducer.length} to indicate that the length of the entity\n    body is not known in advance.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'Interface'
op|','
name|'Attribute'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IPushProducer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'IUsernameDigestHash'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IRequest
name|'class'
name|'IRequest'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An HTTP request.\n\n    @since: 9.0\n    """'
newline|'\n'
nl|'\n'
DECL|variable|method
name|'method'
op|'='
name|'Attribute'
op|'('
string|'"A C{str} giving the HTTP method that was used."'
op|')'
newline|'\n'
DECL|variable|uri
name|'uri'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"A C{str} giving the full encoded URI which was requested (including "'
nl|'\n'
string|'"query arguments)."'
op|')'
newline|'\n'
DECL|variable|path
name|'path'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"A C{str} giving the encoded query path of the request URI."'
op|')'
newline|'\n'
DECL|variable|args
name|'args'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"A mapping of decoded query argument names as C{str} to "'
nl|'\n'
string|'"corresponding query argument values as C{list}s of C{str}.  "'
nl|'\n'
string|'"For example, for a URI with C{\'foo=bar&foo=baz&quux=spam\'} "'
nl|'\n'
string|'"for its query part, C{args} will be C{{\'foo\': [\'bar\', \'baz\'], "'
nl|'\n'
string|'"\'quux\': [\'spam\']}}."'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|received_headers
name|'received_headers'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"Backwards-compatibility access to C{requestHeaders}.  Use "'
nl|'\n'
string|'"C{requestHeaders} instead.  C{received_headers} behaves mostly "'
nl|'\n'
string|'"like a C{dict} and does not provide access to all header values."'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|requestHeaders
name|'requestHeaders'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"A L{http_headers.Headers} instance giving all received HTTP request "'
nl|'\n'
string|'"headers."'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|headers
name|'headers'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"Backwards-compatibility access to C{responseHeaders}.  Use"'
nl|'\n'
string|'"C{responseHeaders} instead.  C{headers} behaves mostly like a "'
nl|'\n'
string|'"C{dict} and does not provide access to all header values nor "'
nl|'\n'
string|'"does it allow multiple values for one header to be set."'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|responseHeaders
name|'responseHeaders'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"A L{http_headers.Headers} instance holding all HTTP response "'
nl|'\n'
string|'"headers to be sent."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getHeader
name|'def'
name|'getHeader'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get an HTTP request header.\n\n        @type key: C{str}\n        @param key: The name of the header to get the value of.\n\n        @rtype: C{str} or C{NoneType}\n        @return: The value of the specified header, or C{None} if that header\n            was not present in the request.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getCookie
dedent|''
name|'def'
name|'getCookie'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a cookie that was sent from the network.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getAllHeaders
dedent|''
name|'def'
name|'getAllHeaders'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return dictionary mapping the names of all received headers to the last\n        value received for each.\n\n        Since this method does not return all header information,\n        C{requestHeaders.getAllRawHeaders()} may be preferred.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getRequestHostname
dedent|''
name|'def'
name|'getRequestHostname'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the hostname that the user passed in to the request.\n\n        This will either use the Host: header (if it is available) or the\n        host we are listening on if the header is unavailable.\n\n        @returns: the requested hostname\n        @rtype: C{str}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get my originally requesting transport\'s host.\n\n        @return: An L{IAddress}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getClientIP
dedent|''
name|'def'
name|'getClientIP'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the IP address of the client who submitted this request.\n\n        @returns: the client IP address or C{None} if the request was submitted\n            over a transport where IP addresses do not make sense.\n        @rtype: C{str} or L{NoneType}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getClient
dedent|''
name|'def'
name|'getClient'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the hostname of the IP address of the client who submitted this\n        request, if possible.\n\n        This method is B{deprecated}.  See L{getClientIP} instead.\n\n        @rtype: L{NoneType} or L{str}\n        @return: The canonical hostname of the client, as determined by\n            performing a name lookup on the IP address of the client.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getUser
dedent|''
name|'def'
name|'getUser'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the HTTP user sent with this request, if any.\n\n        If no user was supplied, return the empty string.\n\n        @returns: the HTTP user, if any\n        @rtype: C{str}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPassword
dedent|''
name|'def'
name|'getPassword'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the HTTP password sent with this request, if any.\n\n        If no password was supplied, return the empty string.\n\n        @returns: the HTTP password, if any\n        @rtype: C{str}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isSecure
dedent|''
name|'def'
name|'isSecure'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return True if this request is using a secure transport.\n\n        Normally this method returns True if this request\'s HTTPChannel\n        instance is using a transport that implements ISSLTransport.\n\n        This will also return True if setHost() has been called\n        with ssl=True.\n\n        @returns: True if this request is secure\n        @rtype: C{bool}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getSession
dedent|''
name|'def'
name|'getSession'
op|'('
name|'sessionInterface'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Look up the session associated with this request or create a new one if\n        there is not one.\n\n        @return: The L{Session} instance identified by the session cookie in\n            the request, or the C{sessionInterface} component of that session\n            if C{sessionInterface} is specified.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|URLPath
dedent|''
name|'def'
name|'URLPath'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @return: A L{URLPath} instance which identifies the URL for which this\n            request is.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|prePathURL
dedent|''
name|'def'
name|'prePathURL'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @return: At any time during resource traversal, a L{str} giving an\n            absolute URL to the most nested resource which has yet been\n            reached.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|rememberRootURL
dedent|''
name|'def'
name|'rememberRootURL'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remember the currently-processed part of the URL for later\n        recalling.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getRootURL
dedent|''
name|'def'
name|'getRootURL'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a previously-remembered URL.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Methods for outgoing response'
nl|'\n'
DECL|member|finish
dedent|''
name|'def'
name|'finish'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Indicate that the response to this request is complete.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write some data to the body of the response to this request.  Response\n        headers are written the first time this method is called, after which\n        new response headers may not be added.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addCookie
dedent|''
name|'def'
name|'addCookie'
op|'('
name|'k'
op|','
name|'v'
op|','
name|'expires'
op|'='
name|'None'
op|','
name|'domain'
op|'='
name|'None'
op|','
name|'path'
op|'='
name|'None'
op|','
name|'max_age'
op|'='
name|'None'
op|','
name|'comment'
op|'='
name|'None'
op|','
name|'secure'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set an outgoing HTTP cookie.\n\n        In general, you should consider using sessions instead of cookies, see\n        L{twisted.web.server.Request.getSession} and the\n        L{twisted.web.server.Session} class for details.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setResponseCode
dedent|''
name|'def'
name|'setResponseCode'
op|'('
name|'code'
op|','
name|'message'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the HTTP response code.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setHeader
dedent|''
name|'def'
name|'setHeader'
op|'('
name|'k'
op|','
name|'v'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set an HTTP response header.  Overrides any previously set values for\n        this header.\n\n        @type name: C{str}\n        @param name: The name of the header for which to set the value.\n\n        @type value: C{str}\n        @param value: The value to set for the named header.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|redirect
dedent|''
name|'def'
name|'redirect'
op|'('
name|'url'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Utility function that does a redirect.\n\n        The request should have finish() called after this.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setLastModified
dedent|''
name|'def'
name|'setLastModified'
op|'('
name|'when'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the C{Last-Modified} time for the response to this request.\n\n        If I am called more than once, I ignore attempts to set Last-Modified\n        earlier, only replacing the Last-Modified time if it is to a later\n        value.\n\n        If I am a conditional request, I may modify my response code to\n        L{NOT_MODIFIED} if appropriate for the time given.\n\n        @param when: The last time the resource being returned was modified, in\n            seconds since the epoch.\n        @type when: C{int}, C{long} or C{float}\n\n        @return: If I am a C{If-Modified-Since} conditional request and the\n            time given is not newer than the condition, I return\n            L{http.CACHED<CACHED>} to indicate that you should write no body.\n            Otherwise, I return a false value.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setETag
dedent|''
name|'def'
name|'setETag'
op|'('
name|'etag'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set an C{entity tag} for the outgoing response.\n\n        That\'s "entity tag" as in the HTTP/1.1 C{ETag} header, "used for\n        comparing two or more entities from the same requested resource."\n\n        If I am a conditional request, I may modify my response code to\n        L{NOT_MODIFIED} or L{PRECONDITION_FAILED}, if appropriate for the tag\n        given.\n\n        @param etag: The entity tag for the resource being returned.\n        @type etag: C{str}\n        @return: If I am a C{If-None-Match} conditional request and the tag\n            matches one in the request, I return L{http.CACHED<CACHED>} to\n            indicate that you should write no body.  Otherwise, I return a\n            false value.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setHost
dedent|''
name|'def'
name|'setHost'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'ssl'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Change the host and port the request thinks it\'s using.\n\n        This method is useful for working with reverse HTTP proxies (e.g.  both\n        Squid and Apache\'s mod_proxy can do this), when the address the HTTP\n        client is using is different than the one we\'re listening on.\n\n        For example, Apache may be listening on https://www.example.com, and\n        then forwarding requests to http://localhost:8080, but we don\'t want\n        HTML produced by Twisted to say \'http://localhost:8080\', they should\n        say \'https://www.example.com\', so we do::\n\n           request.setHost(\'www.example.com\', 443, ssl=1)\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ICredentialFactory
dedent|''
dedent|''
name|'class'
name|'ICredentialFactory'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A credential factory defines a way to generate a particular kind of\n    authentication challenge and a way to interpret the responses to these\n    challenges.  It creates L{ICredentials} providers from responses.  These\n    objects will be used with L{twisted.cred} to authenticate an authorize\n    requests.\n    """'
newline|'\n'
DECL|variable|scheme
name|'scheme'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"A C{str} giving the name of the authentication scheme with which "'
nl|'\n'
string|'"this factory is associated.  For example, C{\'basic\'} or C{\'digest\'}."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getChallenge
name|'def'
name|'getChallenge'
op|'('
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate a new challenge to be sent to a client.\n\n        @type peer: L{twisted.web.http.Request}\n        @param peer: The request the response to which this challenge will be\n            included.\n\n        @rtype: C{dict}\n        @return: A mapping from C{str} challenge fields to associated C{str}\n            values.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'response'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a credentials object from the given response.\n\n        @type response: C{str}\n        @param response: scheme specific response string\n\n        @type request: L{twisted.web.http.Request}\n        @param request: The request being processed (from which the response\n            was taken).\n\n        @raise twisted.cred.error.LoginFailed: If the response is invalid.\n\n        @rtype: L{twisted.cred.credentials.ICredentials} provider\n        @return: The credentials represented by the given response.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IBodyProducer
dedent|''
dedent|''
name|'class'
name|'IBodyProducer'
op|'('
name|'IPushProducer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Objects which provide L{IBodyProducer} write bytes to an object which\n    provides L{IConsumer} by calling its C{write} method repeatedly.\n\n    L{IBodyProducer} providers may start producing as soon as they have\n    an L{IConsumer} provider.  That is, they should not wait for a\n    C{resumeProducing} call to begin writing data.\n\n    L{IConsumer.unregisterProducer} must not be called.  Instead, the\n    L{Deferred} returned from C{startProducing} must be fired when all bytes\n    have been written.\n\n    L{IConsumer.write} may synchronously invoke any of C{pauseProducing},\n    C{resumeProducing}, or C{stopProducing}.  These methods must be implemented\n    with this in mind.\n\n    @since: 9.0\n    """'
newline|'\n'
nl|'\n'
comment|'# Despite the restrictions above and the additional requirements of'
nl|'\n'
comment|'# stopProducing documented below, this interface still needs to be an'
nl|'\n'
comment|'# IPushProducer subclass.  Providers of it will be passed to IConsumer'
nl|'\n'
comment|'# providers which only know about IPushProducer and IPullProducer, not'
nl|'\n'
comment|'# about this interface.  This interface needs to remain close enough to one'
nl|'\n'
comment|'# of those interfaces for consumers to work with it.'
nl|'\n'
nl|'\n'
DECL|variable|length
name|'length'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"""\n        C{length} is a C{int} indicating how many bytes in total this\n        L{IBodyProducer} will write to the consumer or L{UNKNOWN_LENGTH}\n        if this is not known in advance.\n        """'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startProducing
name|'def'
name|'startProducing'
op|'('
name|'consumer'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Start producing to the given L{IConsumer} provider.\n\n        @return: A L{Deferred} which fires with C{None} when all bytes have\n            been produced or with a L{Failure} if there is any problem before\n            all bytes have been produced.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stopProducing
dedent|''
name|'def'
name|'stopProducing'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        In addition to the standard behavior of L{IProducer.stopProducing}\n        (stop producing data), make sure the L{Deferred} returned by\n        C{startProducing} is never fired.\n        """'
newline|'\n'
nl|'\n'
DECL|variable|UNKNOWN_LENGTH
dedent|''
dedent|''
name|'UNKNOWN_LENGTH'
op|'='
string|'u"twisted.web.iweb.UNKNOWN_LENGTH"'
newline|'\n'
nl|'\n'
DECL|variable|__all__
name|'__all__'
op|'='
op|'['
nl|'\n'
string|'"IUsernameDigestHash"'
op|','
string|'"ICredentialFactory"'
op|','
string|'"IRequest"'
op|','
nl|'\n'
string|'"IBodyProducer"'
op|','
nl|'\n'
nl|'\n'
string|'"UNKNOWN_LENGTH"'
op|']'
newline|'\n'
endmarker|''
end_unit

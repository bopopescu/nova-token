begin_unit
comment|'# -*- test-case-name: twisted.web.test.test_script -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nI contain PythonScript, which is a very simple python script resource.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'traceback'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'cStringIO'
name|'as'
name|'StringIO'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
name|'import'
name|'copyright'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'http'
op|','
name|'server'
op|','
name|'static'
op|','
name|'resource'
op|','
name|'html'
newline|'\n'
nl|'\n'
nl|'\n'
name|'rpyNoResource'
op|'='
string|'"""<p>You forgot to assign to the variable "resource" in your script. For example:</p>\n<pre>\n# MyCoolWebApp.rpy\n\nimport mygreatresource\n\nresource = mygreatresource.MyGreatResource()\n</pre>\n"""'
newline|'\n'
nl|'\n'
DECL|class|AlreadyCached
name|'class'
name|'AlreadyCached'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This exception is raised when a path has already been cached.\n    """'
newline|'\n'
nl|'\n'
DECL|class|CacheScanner
dedent|''
name|'class'
name|'CacheScanner'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'registry'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
name|'self'
op|'.'
name|'registry'
op|'='
name|'registry'
newline|'\n'
name|'self'
op|'.'
name|'doCache'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|cache
dedent|''
name|'def'
name|'cache'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'self'
op|'.'
name|'registry'
op|'.'
name|'getCachedPath'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'if'
name|'c'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'AlreadyCached'
op|'('
name|'c'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'recache'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|recache
dedent|''
name|'def'
name|'recache'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'doCache'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|variable|noRsrc
dedent|''
dedent|''
name|'noRsrc'
op|'='
name|'resource'
op|'.'
name|'ErrorPage'
op|'('
number|'500'
op|','
string|'"Whoops! Internal Error"'
op|','
name|'rpyNoResource'
op|')'
newline|'\n'
nl|'\n'
DECL|function|ResourceScript
name|'def'
name|'ResourceScript'
op|'('
name|'path'
op|','
name|'registry'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I am a normal py file which must define a \'resource\' global, which should\n    be an instance of (a subclass of) web.resource.Resource; it will be\n    renderred.\n    """'
newline|'\n'
name|'cs'
op|'='
name|'CacheScanner'
op|'('
name|'path'
op|','
name|'registry'
op|')'
newline|'\n'
name|'glob'
op|'='
op|'{'
string|"'__file__'"
op|':'
name|'path'
op|','
nl|'\n'
string|"'resource'"
op|':'
name|'noRsrc'
op|','
nl|'\n'
string|"'registry'"
op|':'
name|'registry'
op|','
nl|'\n'
string|"'cache'"
op|':'
name|'cs'
op|'.'
name|'cache'
op|','
nl|'\n'
string|"'recache'"
op|':'
name|'cs'
op|'.'
name|'recache'
op|'}'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'execfile'
op|'('
name|'path'
op|','
name|'glob'
op|','
name|'glob'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AlreadyCached'
op|','
name|'ac'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'ac'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'rsrc'
op|'='
name|'glob'
op|'['
string|"'resource'"
op|']'
newline|'\n'
name|'if'
name|'cs'
op|'.'
name|'doCache'
name|'and'
name|'rsrc'
name|'is'
name|'not'
name|'noRsrc'
op|':'
newline|'\n'
indent|'        '
name|'registry'
op|'.'
name|'cachePath'
op|'('
name|'path'
op|','
name|'rsrc'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'rsrc'
newline|'\n'
nl|'\n'
DECL|function|ResourceTemplate
dedent|''
name|'def'
name|'ResourceTemplate'
op|'('
name|'path'
op|','
name|'registry'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'quixote'
name|'import'
name|'ptl_compile'
newline|'\n'
nl|'\n'
name|'glob'
op|'='
op|'{'
string|"'__file__'"
op|':'
name|'path'
op|','
nl|'\n'
string|"'resource'"
op|':'
name|'resource'
op|'.'
name|'ErrorPage'
op|'('
number|'500'
op|','
string|'"Whoops! Internal Error"'
op|','
nl|'\n'
name|'rpyNoResource'
op|')'
op|','
nl|'\n'
string|"'registry'"
op|':'
name|'registry'
op|'}'
newline|'\n'
nl|'\n'
name|'e'
op|'='
name|'ptl_compile'
op|'.'
name|'compile_template'
op|'('
name|'open'
op|'('
name|'path'
op|')'
op|','
name|'path'
op|')'
newline|'\n'
name|'exec'
name|'e'
name|'in'
name|'glob'
newline|'\n'
name|'return'
name|'glob'
op|'['
string|"'resource'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResourceScriptWrapper
dedent|''
name|'class'
name|'ResourceScriptWrapper'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'registry'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resource'
op|'.'
name|'Resource'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
name|'self'
op|'.'
name|'registry'
op|'='
name|'registry'
name|'or'
name|'static'
op|'.'
name|'Registry'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'res'
op|'='
name|'ResourceScript'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'self'
op|'.'
name|'registry'
op|')'
newline|'\n'
name|'return'
name|'res'
op|'.'
name|'render'
op|'('
name|'request'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getChildWithDefault
dedent|''
name|'def'
name|'getChildWithDefault'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'res'
op|'='
name|'ResourceScript'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'self'
op|'.'
name|'registry'
op|')'
newline|'\n'
name|'return'
name|'res'
op|'.'
name|'getChildWithDefault'
op|'('
name|'path'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResourceScriptDirectory
dedent|''
dedent|''
name|'class'
name|'ResourceScriptDirectory'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{ResourceScriptDirectory} is a resource which serves scripts from a\n    filesystem directory.  File children of a L{ResourceScriptDirectory} will\n    be served using L{ResourceScript}.  Directory children will be served using\n    another L{ResourceScriptDirectory}.\n\n    @ivar path: A C{str} giving the filesystem path in which children will be\n        looked up.\n\n    @ivar registry: A L{static.Registry} instance which will be used to decide\n        how to interpret scripts found as children of this resource.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pathname'
op|','
name|'registry'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resource'
op|'.'
name|'Resource'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'pathname'
newline|'\n'
name|'self'
op|'.'
name|'registry'
op|'='
name|'registry'
name|'or'
name|'static'
op|'.'
name|'Registry'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getChild
dedent|''
name|'def'
name|'getChild'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fn'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'fn'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ResourceScriptDirectory'
op|'('
name|'fn'
op|','
name|'self'
op|'.'
name|'registry'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'fn'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ResourceScript'
op|'('
name|'fn'
op|','
name|'self'
op|'.'
name|'registry'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'resource'
op|'.'
name|'NoResource'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'resource'
op|'.'
name|'NoResource'
op|'('
op|')'
op|'.'
name|'render'
op|'('
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PythonScript
dedent|''
dedent|''
name|'class'
name|'PythonScript'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""I am an extremely simple dynamic resource; an embedded python script.\n\n    This will execute a file (usually of the extension \'.epy\') as Python code,\n    internal to the webserver.\n    """'
newline|'\n'
DECL|variable|isLeaf
name|'isLeaf'
op|'='
number|'1'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'filename'
op|','
name|'registry'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize me with a script name.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'filename'
op|'='
name|'filename'
newline|'\n'
name|'self'
op|'.'
name|'registry'
op|'='
name|'registry'
newline|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Render me to a web client.\n\n        Load my file, execute it in a special namespace (with \'request\' and\n        \'__file__\' global vars) and finish the request.  Output to the web-page\n        will NOT be handled with print - standard output goes to the log - but\n        with request.write.\n        """'
newline|'\n'
name|'request'
op|'.'
name|'setHeader'
op|'('
string|'"x-powered-by"'
op|','
string|'"Twisted/%s"'
op|'%'
name|'copyright'
op|'.'
name|'version'
op|')'
newline|'\n'
name|'namespace'
op|'='
op|'{'
string|"'request'"
op|':'
name|'request'
op|','
nl|'\n'
string|"'__file__'"
op|':'
name|'self'
op|'.'
name|'filename'
op|','
nl|'\n'
string|"'registry'"
op|':'
name|'self'
op|'.'
name|'registry'
op|'}'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'execfile'
op|'('
name|'self'
op|'.'
name|'filename'
op|','
name|'namespace'
op|','
name|'namespace'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
number|'2'
op|':'
comment|'#file not found'
newline|'\n'
indent|'                '
name|'request'
op|'.'
name|'setResponseCode'
op|'('
name|'http'
op|'.'
name|'NOT_FOUND'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'write'
op|'('
name|'resource'
op|'.'
name|'NoResource'
op|'('
string|'"File not found."'
op|')'
op|'.'
name|'render'
op|'('
name|'request'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'io'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'traceback'
op|'.'
name|'print_exc'
op|'('
name|'file'
op|'='
name|'io'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'write'
op|'('
name|'html'
op|'.'
name|'PRE'
op|'('
name|'io'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'request'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
name|'return'
name|'server'
op|'.'
name|'NOT_DONE_YET'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.web.test.test_xml -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nMicro Document Object Model: a partial DOM implementation with SUX.\n\nThis is an implementation of what we consider to be the useful subset of the\nDOM.  The chief advantage of this library is that, not being burdened with\nstandards compliance, it can remain very stable between versions.  We can also\nimplement utility \'pythonic\' ways to access and mutate the XML tree.\n\nSince this has not subjected to a serious trial by fire, it is not recommended\nto use this outside of Twisted applications.  However, it seems to work just\nfine for the documentation generator, which parses a fairly representative\nsample of XML.\n\nMicrodom mainly focuses on working with HTML and XHTML.\n"""'
newline|'\n'
nl|'\n'
comment|'# System Imports'
nl|'\n'
name|'import'
name|'re'
newline|'\n'
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
comment|'# create NodeList class'
nl|'\n'
name|'from'
name|'types'
name|'import'
name|'ListType'
name|'as'
name|'NodeList'
newline|'\n'
name|'from'
name|'types'
name|'import'
name|'StringTypes'
op|','
name|'UnicodeType'
newline|'\n'
nl|'\n'
comment|'# Twisted Imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'sux'
name|'import'
name|'XMLParser'
op|','
name|'ParseError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'InsensitiveDict'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|getElementsByTagName
name|'def'
name|'getElementsByTagName'
op|'('
name|'iNode'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return a list of all child elements of C{iNode} with a name matching\n    C{name}.\n\n    Note that this implementation does not conform to the DOM Level 1 Core\n    specification because it may return C{iNode}.\n\n    @param iNode: An element at which to begin searching.  If C{iNode} has a\n        name matching C{name}, it will be included in the result.\n\n    @param name: A C{str} giving the name of the elements to return.\n\n    @return: A C{list} of direct or indirect child elements of C{iNode} with\n        the name C{name}.  This may include C{iNode}.\n    """'
newline|'\n'
name|'matches'
op|'='
op|'['
op|']'
newline|'\n'
name|'matches_append'
op|'='
name|'matches'
op|'.'
name|'append'
comment|"# faster lookup. don't do this at home"
newline|'\n'
name|'slice'
op|'='
op|'['
name|'iNode'
op|']'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'slice'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'slice'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'if'
name|'c'
op|'.'
name|'nodeName'
op|'=='
name|'name'
op|':'
newline|'\n'
indent|'            '
name|'matches_append'
op|'('
name|'c'
op|')'
newline|'\n'
dedent|''
name|'slice'
op|'['
op|':'
number|'0'
op|']'
op|'='
name|'c'
op|'.'
name|'childNodes'
newline|'\n'
dedent|''
name|'return'
name|'matches'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|getElementsByTagNameNoCase
dedent|''
name|'def'
name|'getElementsByTagNameNoCase'
op|'('
name|'iNode'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'name'
op|'='
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'matches'
op|'='
op|'['
op|']'
newline|'\n'
name|'matches_append'
op|'='
name|'matches'
op|'.'
name|'append'
newline|'\n'
name|'slice'
op|'='
op|'['
name|'iNode'
op|']'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'slice'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'slice'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'if'
name|'c'
op|'.'
name|'nodeName'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
name|'name'
op|':'
newline|'\n'
indent|'            '
name|'matches_append'
op|'('
name|'c'
op|')'
newline|'\n'
dedent|''
name|'slice'
op|'['
op|':'
number|'0'
op|']'
op|'='
name|'c'
op|'.'
name|'childNodes'
newline|'\n'
dedent|''
name|'return'
name|'matches'
newline|'\n'
nl|'\n'
comment|'# order is important'
nl|'\n'
DECL|variable|HTML_ESCAPE_CHARS
dedent|''
name|'HTML_ESCAPE_CHARS'
op|'='
op|'('
op|'('
string|"'&'"
op|','
string|"'&amp;'"
op|')'
op|','
comment|"# don't add any entities before this one"
nl|'\n'
op|'('
string|"'<'"
op|','
string|"'&lt;'"
op|')'
op|','
nl|'\n'
op|'('
string|"'>'"
op|','
string|"'&gt;'"
op|')'
op|','
nl|'\n'
op|'('
string|'\'"\''
op|','
string|"'&quot;'"
op|')'
op|')'
newline|'\n'
DECL|variable|REV_HTML_ESCAPE_CHARS
name|'REV_HTML_ESCAPE_CHARS'
op|'='
name|'list'
op|'('
name|'HTML_ESCAPE_CHARS'
op|')'
newline|'\n'
name|'REV_HTML_ESCAPE_CHARS'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|XML_ESCAPE_CHARS
name|'XML_ESCAPE_CHARS'
op|'='
name|'HTML_ESCAPE_CHARS'
op|'+'
op|'('
op|'('
string|'"\'"'
op|','
string|"'&apos;'"
op|')'
op|','
op|')'
newline|'\n'
DECL|variable|REV_XML_ESCAPE_CHARS
name|'REV_XML_ESCAPE_CHARS'
op|'='
name|'list'
op|'('
name|'XML_ESCAPE_CHARS'
op|')'
newline|'\n'
name|'REV_XML_ESCAPE_CHARS'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|unescape
name|'def'
name|'unescape'
op|'('
name|'text'
op|','
name|'chars'
op|'='
name|'REV_HTML_ESCAPE_CHARS'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"Perform the exact opposite of \'escape\'."'
newline|'\n'
name|'for'
name|'s'
op|','
name|'h'
name|'in'
name|'chars'
op|':'
newline|'\n'
indent|'        '
name|'text'
op|'='
name|'text'
op|'.'
name|'replace'
op|'('
name|'h'
op|','
name|'s'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'text'
newline|'\n'
nl|'\n'
DECL|function|escape
dedent|''
name|'def'
name|'escape'
op|'('
name|'text'
op|','
name|'chars'
op|'='
name|'HTML_ESCAPE_CHARS'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"Escape a few XML special chars with XML entities."'
newline|'\n'
name|'for'
name|'s'
op|','
name|'h'
name|'in'
name|'chars'
op|':'
newline|'\n'
indent|'        '
name|'text'
op|'='
name|'text'
op|'.'
name|'replace'
op|'('
name|'s'
op|','
name|'h'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'text'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MismatchedTags
dedent|''
name|'class'
name|'MismatchedTags'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'filename'
op|','
name|'expect'
op|','
name|'got'
op|','
name|'endLine'
op|','
name|'endCol'
op|','
name|'begLine'
op|','
name|'begCol'
op|')'
op|':'
newline|'\n'
indent|'       '
op|'('
name|'self'
op|'.'
name|'filename'
op|','
name|'self'
op|'.'
name|'expect'
op|','
name|'self'
op|'.'
name|'got'
op|','
name|'self'
op|'.'
name|'begLine'
op|','
name|'self'
op|'.'
name|'begCol'
op|','
name|'self'
op|'.'
name|'endLine'
op|','
nl|'\n'
name|'self'
op|'.'
name|'endCol'
op|')'
op|'='
name|'filename'
op|','
name|'expect'
op|','
name|'got'
op|','
name|'begLine'
op|','
name|'begCol'
op|','
name|'endLine'
op|','
name|'endCol'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|'"expected </%s>, got </%s> line: %s col: %s, began line: %s col: %s"'
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'expect'
op|','
name|'self'
op|'.'
name|'got'
op|','
name|'self'
op|'.'
name|'endLine'
op|','
name|'self'
op|'.'
name|'endCol'
op|','
name|'self'
op|'.'
name|'begLine'
op|','
nl|'\n'
name|'self'
op|'.'
name|'begCol'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Node
dedent|''
dedent|''
name|'class'
name|'Node'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|nodeName
indent|'    '
name|'nodeName'
op|'='
string|'"Node"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'parentNode'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parentNode'
op|'='
name|'parentNode'
newline|'\n'
name|'self'
op|'.'
name|'childNodes'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|isEqualToNode
dedent|''
name|'def'
name|'isEqualToNode'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Compare this node to C{other}.  If the nodes have the same number of\n        children and corresponding children are equal to each other, return\n        C{True}, otherwise return C{False}.\n\n        @type other: L{Node}\n        @rtype: C{bool}\n        """'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'childNodes'
op|')'
op|'!='
name|'len'
op|'('
name|'other'
op|'.'
name|'childNodes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'for'
name|'a'
op|','
name|'b'
name|'in'
name|'zip'
op|'('
name|'self'
op|'.'
name|'childNodes'
op|','
name|'other'
op|'.'
name|'childNodes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'a'
op|'.'
name|'isEqualToNode'
op|'('
name|'b'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|writexml
dedent|''
name|'def'
name|'writexml'
op|'('
name|'self'
op|','
name|'stream'
op|','
name|'indent'
op|'='
string|"''"
op|','
name|'addindent'
op|'='
string|"''"
op|','
name|'newl'
op|'='
string|"''"
op|','
name|'strip'
op|'='
number|'0'
op|','
nl|'\n'
name|'nsprefixes'
op|'='
op|'{'
op|'}'
op|','
name|'namespace'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|toxml
dedent|''
name|'def'
name|'toxml'
op|'('
name|'self'
op|','
name|'indent'
op|'='
string|"''"
op|','
name|'addindent'
op|'='
string|"''"
op|','
name|'newl'
op|'='
string|"''"
op|','
name|'strip'
op|'='
number|'0'
op|','
name|'nsprefixes'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'namespace'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'writexml'
op|'('
name|'s'
op|','
name|'indent'
op|','
name|'addindent'
op|','
name|'newl'
op|','
name|'strip'
op|','
name|'nsprefixes'
op|','
name|'namespace'
op|')'
newline|'\n'
name|'rv'
op|'='
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
DECL|member|writeprettyxml
dedent|''
name|'def'
name|'writeprettyxml'
op|'('
name|'self'
op|','
name|'stream'
op|','
name|'indent'
op|'='
string|"''"
op|','
name|'addindent'
op|'='
string|"' '"
op|','
name|'newl'
op|'='
string|"'\\n'"
op|','
name|'strip'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'writexml'
op|'('
name|'stream'
op|','
name|'indent'
op|','
name|'addindent'
op|','
name|'newl'
op|','
name|'strip'
op|')'
newline|'\n'
nl|'\n'
DECL|member|toprettyxml
dedent|''
name|'def'
name|'toprettyxml'
op|'('
name|'self'
op|','
name|'indent'
op|'='
string|"''"
op|','
name|'addindent'
op|'='
string|"' '"
op|','
name|'newl'
op|'='
string|"'\\n'"
op|','
name|'strip'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'toxml'
op|'('
name|'indent'
op|','
name|'addindent'
op|','
name|'newl'
op|','
name|'strip'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cloneNode
dedent|''
name|'def'
name|'cloneNode'
op|'('
name|'self'
op|','
name|'deep'
op|'='
number|'0'
op|','
name|'parent'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|hasChildNodes
dedent|''
name|'def'
name|'hasChildNodes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'childNodes'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|appendChild
dedent|''
dedent|''
name|'def'
name|'appendChild'
op|'('
name|'self'
op|','
name|'child'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make the given L{Node} the last child of this node.\n\n        @param child: The L{Node} which will become a child of this node.\n\n        @raise TypeError: If C{child} is not a C{Node} instance.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'child'
op|','
name|'Node'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|'"expected Node instance"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'childNodes'
op|'.'
name|'append'
op|'('
name|'child'
op|')'
newline|'\n'
name|'child'
op|'.'
name|'parentNode'
op|'='
name|'self'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|insertBefore
dedent|''
name|'def'
name|'insertBefore'
op|'('
name|'self'
op|','
name|'new'
op|','
name|'ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make the given L{Node} C{new} a child of this node which comes before\n        the L{Node} C{ref}.\n\n        @param new: A L{Node} which will become a child of this node.\n\n        @param ref: A L{Node} which is already a child of this node which\n            C{new} will be inserted before.\n\n        @raise TypeError: If C{new} or C{ref} is not a C{Node} instance.\n\n        @return: C{new}\n        """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'new'
op|','
name|'Node'
op|')'
name|'or'
name|'not'
name|'isinstance'
op|'('
name|'ref'
op|','
name|'Node'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|'"expected Node instance"'
op|')'
newline|'\n'
dedent|''
name|'i'
op|'='
name|'self'
op|'.'
name|'childNodes'
op|'.'
name|'index'
op|'('
name|'ref'
op|')'
newline|'\n'
name|'new'
op|'.'
name|'parentNode'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'childNodes'
op|'.'
name|'insert'
op|'('
name|'i'
op|','
name|'new'
op|')'
newline|'\n'
name|'return'
name|'new'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeChild
dedent|''
name|'def'
name|'removeChild'
op|'('
name|'self'
op|','
name|'child'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove the given L{Node} from this node\'s children.\n\n        @param child: A L{Node} which is a child of this node which will no\n            longer be a child of this node after this method is called.\n\n        @raise TypeError: If C{child} is not a C{Node} instance.\n\n        @return: C{child}\n        """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'child'
op|','
name|'Node'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|'"expected Node instance"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'child'
name|'in'
name|'self'
op|'.'
name|'childNodes'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'childNodes'
op|'.'
name|'remove'
op|'('
name|'child'
op|')'
newline|'\n'
name|'child'
op|'.'
name|'parentNode'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'child'
newline|'\n'
nl|'\n'
DECL|member|replaceChild
dedent|''
name|'def'
name|'replaceChild'
op|'('
name|'self'
op|','
name|'newChild'
op|','
name|'oldChild'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Replace a L{Node} which is already a child of this node with a\n        different node.\n\n        @param newChild: A L{Node} which will be made a child of this node.\n\n        @param oldChild: A L{Node} which is a child of this node which will\n            give up its position to C{newChild}.\n\n        @raise TypeError: If C{newChild} or C{oldChild} is not a C{Node}\n            instance.\n\n        @raise ValueError: If C{oldChild} is not a child of this C{Node}.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'newChild'
op|','
name|'Node'
op|')'
name|'or'
name|'not'
name|'isinstance'
op|'('
name|'oldChild'
op|','
name|'Node'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|'"expected Node instance"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'oldChild'
op|'.'
name|'parentNode'
name|'is'
name|'not'
name|'self'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"oldChild is not a child of this node"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'childNodes'
op|'['
name|'self'
op|'.'
name|'childNodes'
op|'.'
name|'index'
op|'('
name|'oldChild'
op|')'
op|']'
op|'='
name|'newChild'
newline|'\n'
name|'oldChild'
op|'.'
name|'parentNode'
op|'='
name|'None'
newline|'\n'
name|'newChild'
op|'.'
name|'parentNode'
op|'='
name|'self'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|lastChild
dedent|''
name|'def'
name|'lastChild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'childNodes'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|firstChild
dedent|''
name|'def'
name|'firstChild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'childNodes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'childNodes'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
comment|'#def get_ownerDocument(self):'
nl|'\n'
comment|'#   """This doesn\'t really get the owner document; microdom nodes'
nl|'\n'
comment|"#   don't even have one necessarily.  This gets the root node,"
nl|'\n'
comment|'#   which is usually what you really meant.'
nl|'\n'
comment|'#   *NOT DOM COMPLIANT.*'
nl|'\n'
comment|'#   """'
nl|'\n'
comment|'#   node=self'
nl|'\n'
comment|'#   while (node.parentNode): node=node.parentNode'
nl|'\n'
comment|'#   return node'
nl|'\n'
comment|'#ownerDocument=node.get_ownerDocument()'
nl|'\n'
comment|'# leaving commented for discussion; see also domhelpers.getParents(node)'
nl|'\n'
nl|'\n'
DECL|class|Document
dedent|''
dedent|''
name|'class'
name|'Document'
op|'('
name|'Node'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'documentElement'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Node'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'if'
name|'documentElement'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'appendChild'
op|'('
name|'documentElement'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cloneNode
dedent|''
dedent|''
name|'def'
name|'cloneNode'
op|'('
name|'self'
op|','
name|'deep'
op|'='
number|'0'
op|','
name|'parent'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'Document'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'doctype'
op|'='
name|'self'
op|'.'
name|'doctype'
newline|'\n'
name|'if'
name|'deep'
op|':'
newline|'\n'
indent|'            '
name|'newEl'
op|'='
name|'self'
op|'.'
name|'documentElement'
op|'.'
name|'cloneNode'
op|'('
number|'1'
op|','
name|'self'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'newEl'
op|'='
name|'self'
op|'.'
name|'documentElement'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'appendChild'
op|'('
name|'newEl'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|variable|doctype
dedent|''
name|'doctype'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|isEqualToDocument
name|'def'
name|'isEqualToDocument'
op|'('
name|'self'
op|','
name|'n'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'self'
op|'.'
name|'doctype'
op|'=='
name|'n'
op|'.'
name|'doctype'
op|')'
name|'and'
name|'Node'
op|'.'
name|'isEqualToNode'
op|'('
name|'self'
op|','
name|'n'
op|')'
newline|'\n'
DECL|variable|isEqualToNode
dedent|''
name|'isEqualToNode'
op|'='
name|'isEqualToDocument'
newline|'\n'
nl|'\n'
DECL|member|get_documentElement
name|'def'
name|'get_documentElement'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'childNodes'
op|'['
number|'0'
op|']'
newline|'\n'
DECL|variable|documentElement
dedent|''
name|'documentElement'
op|'='
name|'property'
op|'('
name|'get_documentElement'
op|')'
newline|'\n'
nl|'\n'
DECL|member|appendChild
name|'def'
name|'appendChild'
op|'('
name|'self'
op|','
name|'child'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make the given L{Node} the I{document element} of this L{Document}.\n\n        @param child: The L{Node} to make into this L{Document}\'s document\n            element.\n\n        @raise ValueError: If this document already has a document element.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'childNodes'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Only one element per document."'
op|')'
newline|'\n'
dedent|''
name|'Node'
op|'.'
name|'appendChild'
op|'('
name|'self'
op|','
name|'child'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writexml
dedent|''
name|'def'
name|'writexml'
op|'('
name|'self'
op|','
name|'stream'
op|','
name|'indent'
op|'='
string|"''"
op|','
name|'addindent'
op|'='
string|"''"
op|','
name|'newl'
op|'='
string|"''"
op|','
name|'strip'
op|'='
number|'0'
op|','
nl|'\n'
name|'nsprefixes'
op|'='
op|'{'
op|'}'
op|','
name|'namespace'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'stream'
op|'.'
name|'write'
op|'('
string|'\'<?xml version="1.0"?>\''
op|'+'
name|'newl'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'doctype'
op|':'
newline|'\n'
indent|'            '
name|'stream'
op|'.'
name|'write'
op|'('
string|'"<!DOCTYPE "'
op|'+'
name|'self'
op|'.'
name|'doctype'
op|'+'
string|'">"'
op|'+'
name|'newl'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'documentElement'
op|'.'
name|'writexml'
op|'('
name|'stream'
op|','
name|'indent'
op|','
name|'addindent'
op|','
name|'newl'
op|','
name|'strip'
op|','
nl|'\n'
name|'nsprefixes'
op|','
name|'namespace'
op|')'
newline|'\n'
nl|'\n'
comment|'# of dubious utility (?)'
nl|'\n'
DECL|member|createElement
dedent|''
name|'def'
name|'createElement'
op|'('
name|'self'
op|','
name|'name'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Element'
op|'('
name|'name'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|createTextNode
dedent|''
name|'def'
name|'createTextNode'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Text'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|createComment
dedent|''
name|'def'
name|'createComment'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Comment'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getElementsByTagName
dedent|''
name|'def'
name|'getElementsByTagName'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'documentElement'
op|'.'
name|'caseInsensitive'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getElementsByTagNameNoCase'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'getElementsByTagName'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getElementById
dedent|''
name|'def'
name|'getElementById'
op|'('
name|'self'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'childNodes'
op|'='
name|'self'
op|'.'
name|'childNodes'
op|'['
op|':'
op|']'
newline|'\n'
name|'while'
name|'childNodes'
op|':'
newline|'\n'
indent|'            '
name|'node'
op|'='
name|'childNodes'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'if'
name|'node'
op|'.'
name|'childNodes'
op|':'
newline|'\n'
indent|'                '
name|'childNodes'
op|'.'
name|'extend'
op|'('
name|'node'
op|'.'
name|'childNodes'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'node'
op|','
string|"'getAttribute'"
op|')'
name|'and'
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|'"id"'
op|')'
op|'=='
name|'id'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'node'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|EntityReference
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'EntityReference'
op|'('
name|'Node'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'eref'
op|','
name|'parentNode'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Node'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'parentNode'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'eref'
op|'='
name|'eref'
newline|'\n'
name|'self'
op|'.'
name|'nodeValue'
op|'='
name|'self'
op|'.'
name|'data'
op|'='
string|'"&"'
op|'+'
name|'eref'
op|'+'
string|'";"'
newline|'\n'
nl|'\n'
DECL|member|isEqualToEntityReference
dedent|''
name|'def'
name|'isEqualToEntityReference'
op|'('
name|'self'
op|','
name|'n'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'n'
op|','
name|'EntityReference'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'self'
op|'.'
name|'eref'
op|'=='
name|'n'
op|'.'
name|'eref'
op|')'
name|'and'
op|'('
name|'self'
op|'.'
name|'nodeValue'
op|'=='
name|'n'
op|'.'
name|'nodeValue'
op|')'
newline|'\n'
DECL|variable|isEqualToNode
dedent|''
name|'isEqualToNode'
op|'='
name|'isEqualToEntityReference'
newline|'\n'
nl|'\n'
DECL|member|writexml
name|'def'
name|'writexml'
op|'('
name|'self'
op|','
name|'stream'
op|','
name|'indent'
op|'='
string|"''"
op|','
name|'addindent'
op|'='
string|"''"
op|','
name|'newl'
op|'='
string|"''"
op|','
name|'strip'
op|'='
number|'0'
op|','
nl|'\n'
name|'nsprefixes'
op|'='
op|'{'
op|'}'
op|','
name|'namespace'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'stream'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'nodeValue'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cloneNode
dedent|''
name|'def'
name|'cloneNode'
op|'('
name|'self'
op|','
name|'deep'
op|'='
number|'0'
op|','
name|'parent'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'EntityReference'
op|'('
name|'self'
op|'.'
name|'eref'
op|','
name|'parent'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CharacterData
dedent|''
dedent|''
name|'class'
name|'CharacterData'
op|'('
name|'Node'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'parentNode'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Node'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'parentNode'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'value'
op|'='
name|'self'
op|'.'
name|'data'
op|'='
name|'self'
op|'.'
name|'nodeValue'
op|'='
name|'data'
newline|'\n'
nl|'\n'
DECL|member|isEqualToCharacterData
dedent|''
name|'def'
name|'isEqualToCharacterData'
op|'('
name|'self'
op|','
name|'n'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'value'
op|'=='
name|'n'
op|'.'
name|'value'
newline|'\n'
DECL|variable|isEqualToNode
dedent|''
name|'isEqualToNode'
op|'='
name|'isEqualToCharacterData'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Comment
dedent|''
name|'class'
name|'Comment'
op|'('
name|'CharacterData'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A comment node."""'
newline|'\n'
nl|'\n'
DECL|member|writexml
name|'def'
name|'writexml'
op|'('
name|'self'
op|','
name|'stream'
op|','
name|'indent'
op|'='
string|"''"
op|','
name|'addindent'
op|'='
string|"''"
op|','
name|'newl'
op|'='
string|"''"
op|','
name|'strip'
op|'='
number|'0'
op|','
nl|'\n'
name|'nsprefixes'
op|'='
op|'{'
op|'}'
op|','
name|'namespace'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'val'
op|'='
name|'self'
op|'.'
name|'data'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'val'
op|','
name|'UnicodeType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'val'
op|'='
name|'val'
op|'.'
name|'encode'
op|'('
string|"'utf8'"
op|')'
newline|'\n'
dedent|''
name|'stream'
op|'.'
name|'write'
op|'('
string|'"<!--%s-->"'
op|'%'
name|'val'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cloneNode
dedent|''
name|'def'
name|'cloneNode'
op|'('
name|'self'
op|','
name|'deep'
op|'='
number|'0'
op|','
name|'parent'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Comment'
op|'('
name|'self'
op|'.'
name|'nodeValue'
op|','
name|'parent'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Text
dedent|''
dedent|''
name|'class'
name|'Text'
op|'('
name|'CharacterData'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'parentNode'
op|'='
name|'None'
op|','
name|'raw'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'CharacterData'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'parentNode'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'raw'
op|'='
name|'raw'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isEqualToNode
dedent|''
name|'def'
name|'isEqualToNode'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Compare this text to C{text}.  If the underlying values and the C{raw}\n        flag are the same, return C{True}, otherwise return C{False}.\n        """'
newline|'\n'
name|'return'
op|'('
nl|'\n'
name|'CharacterData'
op|'.'
name|'isEqualToNode'
op|'('
name|'self'
op|','
name|'other'
op|')'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'raw'
op|'=='
name|'other'
op|'.'
name|'raw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cloneNode
dedent|''
name|'def'
name|'cloneNode'
op|'('
name|'self'
op|','
name|'deep'
op|'='
number|'0'
op|','
name|'parent'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Text'
op|'('
name|'self'
op|'.'
name|'nodeValue'
op|','
name|'parent'
op|','
name|'self'
op|'.'
name|'raw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writexml
dedent|''
name|'def'
name|'writexml'
op|'('
name|'self'
op|','
name|'stream'
op|','
name|'indent'
op|'='
string|"''"
op|','
name|'addindent'
op|'='
string|"''"
op|','
name|'newl'
op|'='
string|"''"
op|','
name|'strip'
op|'='
number|'0'
op|','
nl|'\n'
name|'nsprefixes'
op|'='
op|'{'
op|'}'
op|','
name|'namespace'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'raw'
op|':'
newline|'\n'
indent|'            '
name|'val'
op|'='
name|'self'
op|'.'
name|'nodeValue'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'val'
op|','
name|'StringTypes'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'val'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'nodeValue'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'v'
op|'='
name|'self'
op|'.'
name|'nodeValue'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'v'
op|','
name|'StringTypes'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'v'
op|'='
name|'str'
op|'('
name|'v'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'strip'
op|':'
newline|'\n'
indent|'                '
name|'v'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
name|'v'
op|'.'
name|'split'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'val'
op|'='
name|'escape'
op|'('
name|'v'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'val'
op|','
name|'UnicodeType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'val'
op|'='
name|'val'
op|'.'
name|'encode'
op|'('
string|"'utf8'"
op|')'
newline|'\n'
dedent|''
name|'stream'
op|'.'
name|'write'
op|'('
name|'val'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"Text(%s"'
op|'%'
name|'repr'
op|'('
name|'self'
op|'.'
name|'nodeValue'
op|')'
op|'+'
string|"')'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CDATASection
dedent|''
dedent|''
name|'class'
name|'CDATASection'
op|'('
name|'CharacterData'
op|')'
op|':'
newline|'\n'
DECL|member|cloneNode
indent|'    '
name|'def'
name|'cloneNode'
op|'('
name|'self'
op|','
name|'deep'
op|'='
number|'0'
op|','
name|'parent'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'CDATASection'
op|'('
name|'self'
op|'.'
name|'nodeValue'
op|','
name|'parent'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writexml
dedent|''
name|'def'
name|'writexml'
op|'('
name|'self'
op|','
name|'stream'
op|','
name|'indent'
op|'='
string|"''"
op|','
name|'addindent'
op|'='
string|"''"
op|','
name|'newl'
op|'='
string|"''"
op|','
name|'strip'
op|'='
number|'0'
op|','
nl|'\n'
name|'nsprefixes'
op|'='
op|'{'
op|'}'
op|','
name|'namespace'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'stream'
op|'.'
name|'write'
op|'('
string|'"<![CDATA["'
op|')'
newline|'\n'
name|'stream'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'nodeValue'
op|')'
newline|'\n'
name|'stream'
op|'.'
name|'write'
op|'('
string|'"]]>"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_genprefix
dedent|''
dedent|''
name|'def'
name|'_genprefix'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'i'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'        '
name|'yield'
string|"'p'"
op|'+'
name|'str'
op|'('
name|'i'
op|')'
newline|'\n'
name|'i'
op|'='
name|'i'
op|'+'
number|'1'
newline|'\n'
DECL|variable|genprefix
dedent|''
dedent|''
name|'genprefix'
op|'='
name|'_genprefix'
op|'('
op|')'
op|'.'
name|'next'
newline|'\n'
nl|'\n'
DECL|class|_Attr
name|'class'
name|'_Attr'
op|'('
name|'CharacterData'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"Support class for getAttributeNode."'
newline|'\n'
nl|'\n'
DECL|class|Element
dedent|''
name|'class'
name|'Element'
op|'('
name|'Node'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|preserveCase
indent|'    '
name|'preserveCase'
op|'='
number|'0'
newline|'\n'
DECL|variable|caseInsensitive
name|'caseInsensitive'
op|'='
number|'1'
newline|'\n'
DECL|variable|nsprefixes
name|'nsprefixes'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'tagName'
op|','
name|'attributes'
op|'='
name|'None'
op|','
name|'parentNode'
op|'='
name|'None'
op|','
nl|'\n'
name|'filename'
op|'='
name|'None'
op|','
name|'markpos'
op|'='
name|'None'
op|','
nl|'\n'
name|'caseInsensitive'
op|'='
number|'1'
op|','
name|'preserveCase'
op|'='
number|'0'
op|','
nl|'\n'
name|'namespace'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Node'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'parentNode'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'preserveCase'
op|'='
name|'preserveCase'
name|'or'
name|'not'
name|'caseInsensitive'
newline|'\n'
name|'self'
op|'.'
name|'caseInsensitive'
op|'='
name|'caseInsensitive'
newline|'\n'
name|'if'
name|'not'
name|'preserveCase'
op|':'
newline|'\n'
indent|'            '
name|'tagName'
op|'='
name|'tagName'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'attributes'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'attributes'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'attributes'
op|'='
name|'attributes'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'self'
op|'.'
name|'attributes'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'attributes'
op|'['
name|'k'
op|']'
op|'='
name|'unescape'
op|'('
name|'v'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'caseInsensitive'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'attributes'
op|'='
name|'InsensitiveDict'
op|'('
name|'self'
op|'.'
name|'attributes'
op|','
nl|'\n'
name|'preserve'
op|'='
name|'preserveCase'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'endTagName'
op|'='
name|'self'
op|'.'
name|'nodeName'
op|'='
name|'self'
op|'.'
name|'tagName'
op|'='
name|'tagName'
newline|'\n'
name|'self'
op|'.'
name|'_filename'
op|'='
name|'filename'
newline|'\n'
name|'self'
op|'.'
name|'_markpos'
op|'='
name|'markpos'
newline|'\n'
name|'self'
op|'.'
name|'namespace'
op|'='
name|'namespace'
newline|'\n'
nl|'\n'
DECL|member|addPrefixes
dedent|''
name|'def'
name|'addPrefixes'
op|'('
name|'self'
op|','
name|'pfxs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'nsprefixes'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'nsprefixes'
op|'='
name|'pfxs'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'nsprefixes'
op|'.'
name|'update'
op|'('
name|'pfxs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|endTag
dedent|''
dedent|''
name|'def'
name|'endTag'
op|'('
name|'self'
op|','
name|'endTagName'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'preserveCase'
op|':'
newline|'\n'
indent|'            '
name|'endTagName'
op|'='
name|'endTagName'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'endTagName'
op|'='
name|'endTagName'
newline|'\n'
nl|'\n'
DECL|member|isEqualToElement
dedent|''
name|'def'
name|'isEqualToElement'
op|'('
name|'self'
op|','
name|'n'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'caseInsensitive'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
op|'('
name|'self'
op|'.'
name|'attributes'
op|'=='
name|'n'
op|'.'
name|'attributes'
op|')'
nl|'\n'
name|'and'
op|'('
name|'self'
op|'.'
name|'nodeName'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
name|'n'
op|'.'
name|'nodeName'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'self'
op|'.'
name|'attributes'
op|'=='
name|'n'
op|'.'
name|'attributes'
op|')'
name|'and'
op|'('
name|'self'
op|'.'
name|'nodeName'
op|'=='
name|'n'
op|'.'
name|'nodeName'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isEqualToNode
dedent|''
name|'def'
name|'isEqualToNode'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Compare this element to C{other}.  If the C{nodeName}, C{namespace},\n        C{attributes}, and C{childNodes} are all the same, return C{True},\n        otherwise return C{False}.\n        """'
newline|'\n'
name|'return'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'nodeName'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
name|'other'
op|'.'
name|'nodeName'
op|'.'
name|'lower'
op|'('
op|')'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'namespace'
op|'=='
name|'other'
op|'.'
name|'namespace'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'attributes'
op|'=='
name|'other'
op|'.'
name|'attributes'
name|'and'
nl|'\n'
name|'Node'
op|'.'
name|'isEqualToNode'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cloneNode
dedent|''
name|'def'
name|'cloneNode'
op|'('
name|'self'
op|','
name|'deep'
op|'='
number|'0'
op|','
name|'parent'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'clone'
op|'='
name|'Element'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'tagName'
op|','
name|'parentNode'
op|'='
name|'parent'
op|','
name|'namespace'
op|'='
name|'self'
op|'.'
name|'namespace'
op|','
nl|'\n'
name|'preserveCase'
op|'='
name|'self'
op|'.'
name|'preserveCase'
op|','
name|'caseInsensitive'
op|'='
name|'self'
op|'.'
name|'caseInsensitive'
op|')'
newline|'\n'
name|'clone'
op|'.'
name|'attributes'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'attributes'
op|')'
newline|'\n'
name|'if'
name|'deep'
op|':'
newline|'\n'
indent|'            '
name|'clone'
op|'.'
name|'childNodes'
op|'='
op|'['
name|'child'
op|'.'
name|'cloneNode'
op|'('
number|'1'
op|','
name|'clone'
op|')'
name|'for'
name|'child'
name|'in'
name|'self'
op|'.'
name|'childNodes'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'clone'
op|'.'
name|'childNodes'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'return'
name|'clone'
newline|'\n'
nl|'\n'
DECL|member|getElementsByTagName
dedent|''
name|'def'
name|'getElementsByTagName'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'caseInsensitive'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getElementsByTagNameNoCase'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'getElementsByTagName'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|hasAttributes
dedent|''
name|'def'
name|'hasAttributes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|getAttribute
dedent|''
name|'def'
name|'getAttribute'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'attributes'
op|'.'
name|'get'
op|'('
name|'name'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getAttributeNS
dedent|''
name|'def'
name|'getAttributeNS'
op|'('
name|'self'
op|','
name|'ns'
op|','
name|'name'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'nsk'
op|'='
op|'('
name|'ns'
op|','
name|'name'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'attributes'
op|'.'
name|'has_key'
op|'('
name|'nsk'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'attributes'
op|'['
name|'nsk'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'ns'
op|'=='
name|'self'
op|'.'
name|'namespace'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'attributes'
op|'.'
name|'get'
op|'('
name|'name'
op|','
name|'default'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'default'
newline|'\n'
nl|'\n'
DECL|member|getAttributeNode
dedent|''
name|'def'
name|'getAttributeNode'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_Attr'
op|'('
name|'self'
op|'.'
name|'getAttribute'
op|'('
name|'name'
op|')'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setAttribute
dedent|''
name|'def'
name|'setAttribute'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'attr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'attributes'
op|'['
name|'name'
op|']'
op|'='
name|'attr'
newline|'\n'
nl|'\n'
DECL|member|removeAttribute
dedent|''
name|'def'
name|'removeAttribute'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'attributes'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'attributes'
op|'['
name|'name'
op|']'
newline|'\n'
nl|'\n'
DECL|member|hasAttribute
dedent|''
dedent|''
name|'def'
name|'hasAttribute'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'name'
name|'in'
name|'self'
op|'.'
name|'attributes'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|writexml
dedent|''
name|'def'
name|'writexml'
op|'('
name|'self'
op|','
name|'stream'
op|','
name|'indent'
op|'='
string|"''"
op|','
name|'addindent'
op|'='
string|"''"
op|','
name|'newl'
op|'='
string|"''"
op|','
name|'strip'
op|'='
number|'0'
op|','
nl|'\n'
name|'nsprefixes'
op|'='
op|'{'
op|'}'
op|','
name|'namespace'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Serialize this L{Element} to the given stream.\n\n        @param stream: A file-like object to which this L{Element} will be\n            written.\n\n        @param nsprefixes: A C{dict} mapping namespace URIs as C{str} to\n            prefixes as C{str}.  This defines the prefixes which are already in\n            scope in the document at the point at which this L{Element} exists.\n            This is essentially an implementation detail for namespace support.\n            Applications should not try to use it.\n\n        @param namespace: The namespace URI as a C{str} which is the default at\n            the point in the document at which this L{Element} exists.  This is\n            essentially an implementation detail for namespace support.\n            Applications should not try to use it.\n        """'
newline|'\n'
comment|'# write beginning'
nl|'\n'
name|'ALLOWSINGLETON'
op|'='
op|'('
string|"'img'"
op|','
string|"'br'"
op|','
string|"'hr'"
op|','
string|"'base'"
op|','
string|"'meta'"
op|','
string|"'link'"
op|','
string|"'param'"
op|','
nl|'\n'
string|"'area'"
op|','
string|"'input'"
op|','
string|"'col'"
op|','
string|"'basefont'"
op|','
string|"'isindex'"
op|','
nl|'\n'
string|"'frame'"
op|')'
newline|'\n'
name|'BLOCKELEMENTS'
op|'='
op|'('
string|"'html'"
op|','
string|"'head'"
op|','
string|"'body'"
op|','
string|"'noscript'"
op|','
string|"'ins'"
op|','
string|"'del'"
op|','
nl|'\n'
string|"'h1'"
op|','
string|"'h2'"
op|','
string|"'h3'"
op|','
string|"'h4'"
op|','
string|"'h5'"
op|','
string|"'h6'"
op|','
string|"'script'"
op|','
nl|'\n'
string|"'ul'"
op|','
string|"'ol'"
op|','
string|"'dl'"
op|','
string|"'pre'"
op|','
string|"'hr'"
op|','
string|"'blockquote'"
op|','
nl|'\n'
string|"'address'"
op|','
string|"'p'"
op|','
string|"'div'"
op|','
string|"'fieldset'"
op|','
string|"'table'"
op|','
string|"'tr'"
op|','
nl|'\n'
string|"'form'"
op|','
string|"'object'"
op|','
string|"'fieldset'"
op|','
string|"'applet'"
op|','
string|"'map'"
op|')'
newline|'\n'
name|'FORMATNICELY'
op|'='
op|'('
string|"'tr'"
op|','
string|"'ul'"
op|','
string|"'ol'"
op|','
string|"'head'"
op|')'
newline|'\n'
nl|'\n'
comment|'# this should never be necessary unless people start'
nl|'\n'
comment|'# changing .tagName on the fly(?)'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'preserveCase'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'endTagName'
op|'='
name|'self'
op|'.'
name|'tagName'
newline|'\n'
dedent|''
name|'w'
op|'='
name|'stream'
op|'.'
name|'write'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'nsprefixes'
op|':'
newline|'\n'
indent|'            '
name|'newprefixes'
op|'='
name|'self'
op|'.'
name|'nsprefixes'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'for'
name|'ns'
name|'in'
name|'nsprefixes'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'ns'
name|'in'
name|'newprefixes'
op|':'
newline|'\n'
indent|'                    '
name|'del'
name|'newprefixes'
op|'['
name|'ns'
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'             '
name|'newprefixes'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'begin'
op|'='
op|'['
string|"'<'"
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'tagName'
name|'in'
name|'BLOCKELEMENTS'
op|':'
newline|'\n'
indent|'            '
name|'begin'
op|'='
op|'['
name|'newl'
op|','
name|'indent'
op|']'
op|'+'
name|'begin'
newline|'\n'
dedent|''
name|'bext'
op|'='
name|'begin'
op|'.'
name|'extend'
newline|'\n'
name|'writeattr'
op|'='
name|'lambda'
name|'_atr'
op|','
name|'_val'
op|':'
name|'bext'
op|'('
op|'('
string|"' '"
op|','
name|'_atr'
op|','
string|'\'="\''
op|','
name|'escape'
op|'('
name|'_val'
op|')'
op|','
string|'\'"\''
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make a local for tracking what end tag will be used.  If namespace'
nl|'\n'
comment|'# prefixes are involved, this will be changed to account for that'
nl|'\n'
comment|"# before it's actually used."
nl|'\n'
name|'endTagName'
op|'='
name|'self'
op|'.'
name|'endTagName'
newline|'\n'
nl|'\n'
name|'if'
name|'namespace'
op|'!='
name|'self'
op|'.'
name|'namespace'
name|'and'
name|'self'
op|'.'
name|'namespace'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|'# If the current default namespace is not the namespace of this tag'
nl|'\n'
comment|"# (and this tag has a namespace at all) then we'll write out"
nl|'\n'
comment|'# something related to namespaces.'
nl|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'namespace'
name|'in'
name|'nsprefixes'
op|':'
newline|'\n'
comment|"# This tag's namespace already has a prefix bound to it.  Use"
nl|'\n'
comment|'# that prefix.'
nl|'\n'
indent|'                '
name|'prefix'
op|'='
name|'nsprefixes'
op|'['
name|'self'
op|'.'
name|'namespace'
op|']'
newline|'\n'
name|'bext'
op|'('
name|'prefix'
op|'+'
string|"':'"
op|'+'
name|'self'
op|'.'
name|'tagName'
op|')'
newline|'\n'
comment|'# Also make sure we use it for the end tag.'
nl|'\n'
name|'endTagName'
op|'='
name|'prefix'
op|'+'
string|"':'"
op|'+'
name|'self'
op|'.'
name|'endTagName'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# This tag's namespace has no prefix bound to it.  Change the"
nl|'\n'
comment|"# default namespace to this tag's namespace so we don't need"
nl|'\n'
comment|'# prefixes.  Alternatively, we could add a new prefix binding.'
nl|'\n'
comment|"# I'm not sure why the code was written one way rather than the"
nl|'\n'
comment|'# other. -exarkun'
nl|'\n'
indent|'                '
name|'bext'
op|'('
name|'self'
op|'.'
name|'tagName'
op|')'
newline|'\n'
name|'writeattr'
op|'('
string|'"xmlns"'
op|','
name|'self'
op|'.'
name|'namespace'
op|')'
newline|'\n'
comment|'# The default namespace just changed.  Make sure any children'
nl|'\n'
comment|'# know about this.'
nl|'\n'
name|'namespace'
op|'='
name|'self'
op|'.'
name|'namespace'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# This tag has no namespace or its namespace is already the default'
nl|'\n'
comment|'# namespace.  Nothing extra to do here.'
nl|'\n'
indent|'            '
name|'bext'
op|'('
name|'self'
op|'.'
name|'tagName'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'j'
op|'='
string|"''"
op|'.'
name|'join'
newline|'\n'
name|'for'
name|'attr'
op|','
name|'val'
name|'in'
name|'self'
op|'.'
name|'attributes'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'attr'
op|','
name|'tuple'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ns'
op|','
name|'key'
op|'='
name|'attr'
newline|'\n'
name|'if'
name|'nsprefixes'
op|'.'
name|'has_key'
op|'('
name|'ns'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'prefix'
op|'='
name|'nsprefixes'
op|'['
name|'ns'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'prefix'
op|'='
name|'genprefix'
op|'('
op|')'
newline|'\n'
name|'newprefixes'
op|'['
name|'ns'
op|']'
op|'='
name|'prefix'
newline|'\n'
dedent|''
name|'assert'
name|'val'
name|'is'
name|'not'
name|'None'
newline|'\n'
name|'writeattr'
op|'('
name|'prefix'
op|'+'
string|"':'"
op|'+'
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'assert'
name|'val'
name|'is'
name|'not'
name|'None'
newline|'\n'
name|'writeattr'
op|'('
name|'attr'
op|','
name|'val'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'newprefixes'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'ns'
op|','
name|'prefix'
name|'in'
name|'newprefixes'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'prefix'
op|':'
newline|'\n'
indent|'                    '
name|'writeattr'
op|'('
string|"'xmlns:'"
op|'+'
name|'prefix'
op|','
name|'ns'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'newprefixes'
op|'.'
name|'update'
op|'('
name|'nsprefixes'
op|')'
newline|'\n'
name|'downprefixes'
op|'='
name|'newprefixes'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'downprefixes'
op|'='
name|'nsprefixes'
newline|'\n'
dedent|''
name|'w'
op|'('
name|'j'
op|'('
name|'begin'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'childNodes'
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'('
string|'">"'
op|')'
newline|'\n'
name|'newindent'
op|'='
name|'indent'
op|'+'
name|'addindent'
newline|'\n'
name|'for'
name|'child'
name|'in'
name|'self'
op|'.'
name|'childNodes'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'tagName'
name|'in'
name|'BLOCKELEMENTS'
name|'and'
name|'self'
op|'.'
name|'tagName'
name|'in'
name|'FORMATNICELY'
op|':'
newline|'\n'
indent|'                    '
name|'w'
op|'('
name|'j'
op|'('
op|'('
name|'newl'
op|','
name|'newindent'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'child'
op|'.'
name|'writexml'
op|'('
name|'stream'
op|','
name|'newindent'
op|','
name|'addindent'
op|','
name|'newl'
op|','
name|'strip'
op|','
nl|'\n'
name|'downprefixes'
op|','
name|'namespace'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'tagName'
name|'in'
name|'BLOCKELEMENTS'
op|':'
newline|'\n'
indent|'                '
name|'w'
op|'('
name|'j'
op|'('
op|'('
name|'newl'
op|','
name|'indent'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'w'
op|'('
name|'j'
op|'('
op|'('
string|"'</'"
op|','
name|'endTagName'
op|','
string|"'>'"
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'tagName'
op|'.'
name|'lower'
op|'('
op|')'
name|'not'
name|'in'
name|'ALLOWSINGLETON'
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'('
name|'j'
op|'('
op|'('
string|"'></'"
op|','
name|'endTagName'
op|','
string|"'>'"
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'('
string|'" />"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rep'
op|'='
string|'"Element(%s"'
op|'%'
name|'repr'
op|'('
name|'self'
op|'.'
name|'nodeName'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'attributes'
op|':'
newline|'\n'
indent|'            '
name|'rep'
op|'+='
string|'", attributes=%r"'
op|'%'
op|'('
name|'self'
op|'.'
name|'attributes'
op|','
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_filename'
op|':'
newline|'\n'
indent|'            '
name|'rep'
op|'+='
string|'", filename=%r"'
op|'%'
op|'('
name|'self'
op|'.'
name|'_filename'
op|','
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_markpos'
op|':'
newline|'\n'
indent|'            '
name|'rep'
op|'+='
string|'", markpos=%r"'
op|'%'
op|'('
name|'self'
op|'.'
name|'_markpos'
op|','
op|')'
newline|'\n'
dedent|''
name|'return'
name|'rep'
op|'+'
string|"')'"
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rep'
op|'='
string|'"<"'
op|'+'
name|'self'
op|'.'
name|'nodeName'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_filename'
name|'or'
name|'self'
op|'.'
name|'_markpos'
op|':'
newline|'\n'
indent|'            '
name|'rep'
op|'+='
string|'" ("'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_filename'
op|':'
newline|'\n'
indent|'            '
name|'rep'
op|'+='
name|'repr'
op|'('
name|'self'
op|'.'
name|'_filename'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_markpos'
op|':'
newline|'\n'
indent|'            '
name|'rep'
op|'+='
string|'" line %s column %s"'
op|'%'
name|'self'
op|'.'
name|'_markpos'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_filename'
name|'or'
name|'self'
op|'.'
name|'_markpos'
op|':'
newline|'\n'
indent|'            '
name|'rep'
op|'+='
string|'")"'
newline|'\n'
dedent|''
name|'for'
name|'item'
name|'in'
name|'self'
op|'.'
name|'attributes'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'rep'
op|'+='
string|'" %s=%r"'
op|'%'
name|'item'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'hasChildNodes'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'rep'
op|'+='
string|'" >...</%s>"'
op|'%'
name|'self'
op|'.'
name|'nodeName'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'rep'
op|'+='
string|'" />"'
newline|'\n'
dedent|''
name|'return'
name|'rep'
newline|'\n'
nl|'\n'
DECL|function|_unescapeDict
dedent|''
dedent|''
name|'def'
name|'_unescapeDict'
op|'('
name|'d'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'dd'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'d'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dd'
op|'['
name|'k'
op|']'
op|'='
name|'unescape'
op|'('
name|'v'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'dd'
newline|'\n'
nl|'\n'
DECL|function|_reverseDict
dedent|''
name|'def'
name|'_reverseDict'
op|'('
name|'d'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'dd'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'d'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dd'
op|'['
name|'v'
op|']'
op|'='
name|'k'
newline|'\n'
dedent|''
name|'return'
name|'dd'
newline|'\n'
nl|'\n'
DECL|class|MicroDOMParser
dedent|''
name|'class'
name|'MicroDOMParser'
op|'('
name|'XMLParser'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# <dash> glyph: a quick scan thru the DTD says BODY, AREA, LINK, IMG, HR,'
nl|'\n'
comment|'# P, DT, DD, LI, INPUT, OPTION, THEAD, TFOOT, TBODY, COLGROUP, COL, TR, TH,'
nl|'\n'
comment|'# TD, HEAD, BASE, META, HTML all have optional closing tags'
nl|'\n'
nl|'\n'
DECL|variable|soonClosers
indent|'    '
name|'soonClosers'
op|'='
string|"'area link br img hr input base meta'"
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
DECL|variable|laterClosers
name|'laterClosers'
op|'='
op|'{'
string|"'p'"
op|':'
op|'['
string|"'p'"
op|','
string|"'dt'"
op|']'
op|','
nl|'\n'
string|"'dt'"
op|':'
op|'['
string|"'dt'"
op|','
string|"'dd'"
op|']'
op|','
nl|'\n'
string|"'dd'"
op|':'
op|'['
string|"'dt'"
op|','
string|"'dd'"
op|']'
op|','
nl|'\n'
string|"'li'"
op|':'
op|'['
string|"'li'"
op|']'
op|','
nl|'\n'
string|"'tbody'"
op|':'
op|'['
string|"'thead'"
op|','
string|"'tfoot'"
op|','
string|"'tbody'"
op|']'
op|','
nl|'\n'
string|"'thead'"
op|':'
op|'['
string|"'thead'"
op|','
string|"'tfoot'"
op|','
string|"'tbody'"
op|']'
op|','
nl|'\n'
string|"'tfoot'"
op|':'
op|'['
string|"'thead'"
op|','
string|"'tfoot'"
op|','
string|"'tbody'"
op|']'
op|','
nl|'\n'
string|"'colgroup'"
op|':'
op|'['
string|"'colgroup'"
op|']'
op|','
nl|'\n'
string|"'col'"
op|':'
op|'['
string|"'col'"
op|']'
op|','
nl|'\n'
string|"'tr'"
op|':'
op|'['
string|"'tr'"
op|']'
op|','
nl|'\n'
string|"'td'"
op|':'
op|'['
string|"'td'"
op|']'
op|','
nl|'\n'
string|"'th'"
op|':'
op|'['
string|"'th'"
op|']'
op|','
nl|'\n'
string|"'head'"
op|':'
op|'['
string|"'body'"
op|']'
op|','
nl|'\n'
string|"'title'"
op|':'
op|'['
string|"'head'"
op|','
string|"'body'"
op|']'
op|','
comment|'# this looks wrong...'
nl|'\n'
string|"'option'"
op|':'
op|'['
string|"'option'"
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'beExtremelyLenient'
op|'='
number|'0'
op|','
name|'caseInsensitive'
op|'='
number|'1'
op|','
name|'preserveCase'
op|'='
number|'0'
op|','
nl|'\n'
name|'soonClosers'
op|'='
name|'soonClosers'
op|','
name|'laterClosers'
op|'='
name|'laterClosers'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'elementstack'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
op|'{'
string|"'xmlns'"
op|':'
string|"'xmlns'"
op|','
string|"''"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'dr'
op|'='
name|'_reverseDict'
op|'('
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nsstack'
op|'='
op|'['
op|'('
name|'d'
op|','
name|'None'
op|','
name|'dr'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'documents'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_mddoctype'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'beExtremelyLenient'
op|'='
name|'beExtremelyLenient'
newline|'\n'
name|'self'
op|'.'
name|'caseInsensitive'
op|'='
name|'caseInsensitive'
newline|'\n'
name|'self'
op|'.'
name|'preserveCase'
op|'='
name|'preserveCase'
name|'or'
name|'not'
name|'caseInsensitive'
newline|'\n'
name|'self'
op|'.'
name|'soonClosers'
op|'='
name|'soonClosers'
newline|'\n'
name|'self'
op|'.'
name|'laterClosers'
op|'='
name|'laterClosers'
newline|'\n'
comment|'# self.indentlevel = 0'
nl|'\n'
nl|'\n'
DECL|member|shouldPreserveSpace
dedent|''
name|'def'
name|'shouldPreserveSpace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'edx'
name|'in'
name|'xrange'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'elementstack'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'el'
op|'='
name|'self'
op|'.'
name|'elementstack'
op|'['
op|'-'
name|'edx'
op|']'
newline|'\n'
name|'if'
name|'el'
op|'.'
name|'tagName'
op|'=='
string|"'pre'"
name|'or'
name|'el'
op|'.'
name|'getAttribute'
op|'('
string|'"xml:space"'
op|','
string|"''"
op|')'
op|'=='
string|"'preserve'"
op|':'
newline|'\n'
indent|'                '
name|'return'
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|_getparent
dedent|''
name|'def'
name|'_getparent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'elementstack'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'elementstack'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|COMMENT
dedent|''
dedent|''
name|'COMMENT'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"\\s*/[/*]\\s*"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_fixScriptElement
name|'def'
name|'_fixScriptElement'
op|'('
name|'self'
op|','
name|'el'
op|')'
op|':'
newline|'\n'
comment|'# this deals with case where there is comment or CDATA inside'
nl|'\n'
comment|'# <script> tag and we want to do the right thing with it'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'beExtremelyLenient'
name|'or'
name|'not'
name|'len'
op|'('
name|'el'
op|'.'
name|'childNodes'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'c'
op|'='
name|'el'
op|'.'
name|'firstChild'
op|'('
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'c'
op|','
name|'Text'
op|')'
op|':'
newline|'\n'
comment|'# deal with nasty people who do stuff like:'
nl|'\n'
comment|'#   <script> // <!--'
nl|'\n'
comment|'#      x = 1;'
nl|'\n'
comment|'#   // --></script>'
nl|'\n'
comment|'# tidy does this, for example.'
nl|'\n'
indent|'            '
name|'prefix'
op|'='
string|'""'
newline|'\n'
name|'oldvalue'
op|'='
name|'c'
op|'.'
name|'value'
newline|'\n'
name|'match'
op|'='
name|'self'
op|'.'
name|'COMMENT'
op|'.'
name|'match'
op|'('
name|'oldvalue'
op|')'
newline|'\n'
name|'if'
name|'match'
op|':'
newline|'\n'
indent|'                '
name|'prefix'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
op|')'
newline|'\n'
name|'oldvalue'
op|'='
name|'oldvalue'
op|'['
name|'len'
op|'('
name|'prefix'
op|')'
op|':'
op|']'
newline|'\n'
nl|'\n'
comment|'# now see if contents are actual node and comment or CDATA'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'e'
op|'='
name|'parseString'
op|'('
string|'"<a>%s</a>"'
op|'%'
name|'oldvalue'
op|')'
op|'.'
name|'childNodes'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'ParseError'
op|','
name|'MismatchedTags'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'e'
op|'.'
name|'childNodes'
op|')'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'e'
op|'='
name|'e'
op|'.'
name|'firstChild'
op|'('
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'e'
op|','
op|'('
name|'CDATASection'
op|','
name|'Comment'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'el'
op|'.'
name|'childNodes'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'prefix'
op|':'
newline|'\n'
indent|'                    '
name|'el'
op|'.'
name|'childNodes'
op|'.'
name|'append'
op|'('
name|'Text'
op|'('
name|'prefix'
op|')'
op|')'
newline|'\n'
dedent|''
name|'el'
op|'.'
name|'childNodes'
op|'.'
name|'append'
op|'('
name|'e'
op|')'
newline|'\n'
nl|'\n'
DECL|member|gotDoctype
dedent|''
dedent|''
dedent|''
name|'def'
name|'gotDoctype'
op|'('
name|'self'
op|','
name|'doctype'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_mddoctype'
op|'='
name|'doctype'
newline|'\n'
nl|'\n'
DECL|member|gotTagStart
dedent|''
name|'def'
name|'gotTagStart'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'attributes'
op|')'
op|':'
newline|'\n'
comment|"# print ' '*self.indentlevel, 'start tag',name"
nl|'\n'
comment|'# self.indentlevel += 1'
nl|'\n'
indent|'        '
name|'parent'
op|'='
name|'self'
op|'.'
name|'_getparent'
op|'('
op|')'
newline|'\n'
name|'if'
op|'('
name|'self'
op|'.'
name|'beExtremelyLenient'
name|'and'
name|'isinstance'
op|'('
name|'parent'
op|','
name|'Element'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'parentName'
op|'='
name|'parent'
op|'.'
name|'tagName'
newline|'\n'
name|'myName'
op|'='
name|'name'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'caseInsensitive'
op|':'
newline|'\n'
indent|'                '
name|'parentName'
op|'='
name|'parentName'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'myName'
op|'='
name|'myName'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'myName'
name|'in'
name|'self'
op|'.'
name|'laterClosers'
op|'.'
name|'get'
op|'('
name|'parentName'
op|','
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'gotTagEnd'
op|'('
name|'parent'
op|'.'
name|'tagName'
op|')'
newline|'\n'
name|'parent'
op|'='
name|'self'
op|'.'
name|'_getparent'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'attributes'
op|'='
name|'_unescapeDict'
op|'('
name|'attributes'
op|')'
newline|'\n'
name|'namespaces'
op|'='
name|'self'
op|'.'
name|'nsstack'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'newspaces'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'attributes'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'k'
op|'.'
name|'startswith'
op|'('
string|"'xmlns'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'spacenames'
op|'='
name|'k'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'spacenames'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'                    '
name|'newspaces'
op|'['
name|'spacenames'
op|'['
number|'1'
op|']'
op|']'
op|'='
name|'v'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'newspaces'
op|'['
string|"''"
op|']'
op|'='
name|'v'
newline|'\n'
dedent|''
name|'del'
name|'attributes'
op|'['
name|'k'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'newspaces'
op|':'
newline|'\n'
indent|'            '
name|'namespaces'
op|'='
name|'namespaces'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'namespaces'
op|'.'
name|'update'
op|'('
name|'newspaces'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'attributes'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ksplit'
op|'='
name|'k'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'ksplit'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'pfx'
op|','
name|'tv'
op|'='
name|'ksplit'
newline|'\n'
name|'if'
name|'pfx'
op|'!='
string|"'xml'"
name|'and'
name|'namespaces'
op|'.'
name|'has_key'
op|'('
name|'pfx'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'attributes'
op|'['
name|'namespaces'
op|'['
name|'pfx'
op|']'
op|','
name|'tv'
op|']'
op|'='
name|'v'
newline|'\n'
name|'del'
name|'attributes'
op|'['
name|'k'
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'el'
op|'='
name|'Element'
op|'('
name|'name'
op|','
name|'attributes'
op|','
name|'parent'
op|','
nl|'\n'
name|'self'
op|'.'
name|'filename'
op|','
name|'self'
op|'.'
name|'saveMark'
op|'('
op|')'
op|','
nl|'\n'
name|'caseInsensitive'
op|'='
name|'self'
op|'.'
name|'caseInsensitive'
op|','
nl|'\n'
name|'preserveCase'
op|'='
name|'self'
op|'.'
name|'preserveCase'
op|','
nl|'\n'
name|'namespace'
op|'='
name|'namespaces'
op|'.'
name|'get'
op|'('
string|"''"
op|')'
op|')'
newline|'\n'
name|'revspaces'
op|'='
name|'_reverseDict'
op|'('
name|'newspaces'
op|')'
newline|'\n'
name|'el'
op|'.'
name|'addPrefixes'
op|'('
name|'revspaces'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'newspaces'
op|':'
newline|'\n'
indent|'            '
name|'rscopy'
op|'='
name|'self'
op|'.'
name|'nsstack'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'2'
op|']'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'rscopy'
op|'.'
name|'update'
op|'('
name|'revspaces'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nsstack'
op|'.'
name|'append'
op|'('
op|'('
name|'namespaces'
op|','
name|'el'
op|','
name|'rscopy'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'elementstack'
op|'.'
name|'append'
op|'('
name|'el'
op|')'
newline|'\n'
name|'if'
name|'parent'
op|':'
newline|'\n'
indent|'            '
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'el'
op|')'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'self'
op|'.'
name|'beExtremelyLenient'
name|'and'
name|'el'
op|'.'
name|'tagName'
name|'in'
name|'self'
op|'.'
name|'soonClosers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'gotTagEnd'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_gotStandalone
dedent|''
dedent|''
name|'def'
name|'_gotStandalone'
op|'('
name|'self'
op|','
name|'factory'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parent'
op|'='
name|'self'
op|'.'
name|'_getparent'
op|'('
op|')'
newline|'\n'
name|'te'
op|'='
name|'factory'
op|'('
name|'data'
op|','
name|'parent'
op|')'
newline|'\n'
name|'if'
name|'parent'
op|':'
newline|'\n'
indent|'            '
name|'parent'
op|'.'
name|'appendChild'
op|'('
name|'te'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'beExtremelyLenient'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'documents'
op|'.'
name|'append'
op|'('
name|'te'
op|')'
newline|'\n'
nl|'\n'
DECL|member|gotText
dedent|''
dedent|''
name|'def'
name|'gotText'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'data'
op|'.'
name|'strip'
op|'('
op|')'
name|'or'
name|'self'
op|'.'
name|'shouldPreserveSpace'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_gotStandalone'
op|'('
name|'Text'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|gotComment
dedent|''
dedent|''
name|'def'
name|'gotComment'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_gotStandalone'
op|'('
name|'Comment'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|gotEntityReference
dedent|''
name|'def'
name|'gotEntityReference'
op|'('
name|'self'
op|','
name|'entityRef'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_gotStandalone'
op|'('
name|'EntityReference'
op|','
name|'entityRef'
op|')'
newline|'\n'
nl|'\n'
DECL|member|gotCData
dedent|''
name|'def'
name|'gotCData'
op|'('
name|'self'
op|','
name|'cdata'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_gotStandalone'
op|'('
name|'CDATASection'
op|','
name|'cdata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|gotTagEnd
dedent|''
name|'def'
name|'gotTagEnd'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
comment|"# print ' '*self.indentlevel, 'end tag',name"
nl|'\n'
comment|'# self.indentlevel -= 1'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'elementstack'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'beExtremelyLenient'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'raise'
name|'MismatchedTags'
op|'('
op|'*'
op|'('
op|'('
name|'self'
op|'.'
name|'filename'
op|','
string|'"NOTHING"'
op|','
name|'name'
op|')'
nl|'\n'
op|'+'
name|'self'
op|'.'
name|'saveMark'
op|'('
op|')'
op|'+'
op|'('
number|'0'
op|','
number|'0'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'el'
op|'='
name|'self'
op|'.'
name|'elementstack'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'pfxdix'
op|'='
name|'self'
op|'.'
name|'nsstack'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'2'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'nsstack'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'1'
op|']'
name|'is'
name|'el'
op|':'
newline|'\n'
indent|'            '
name|'nstuple'
op|'='
name|'self'
op|'.'
name|'nsstack'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'nstuple'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'caseInsensitive'
op|':'
newline|'\n'
indent|'            '
name|'tn'
op|'='
name|'el'
op|'.'
name|'tagName'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'cname'
op|'='
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'tn'
op|'='
name|'el'
op|'.'
name|'tagName'
newline|'\n'
name|'cname'
op|'='
name|'name'
newline|'\n'
nl|'\n'
dedent|''
name|'nsplit'
op|'='
name|'name'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'nsplit'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'pfx'
op|','
name|'newname'
op|'='
name|'nsplit'
newline|'\n'
name|'ns'
op|'='
name|'pfxdix'
op|'.'
name|'get'
op|'('
name|'pfx'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'ns'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'el'
op|'.'
name|'namespace'
op|'!='
name|'ns'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'not'
name|'self'
op|'.'
name|'beExtremelyLenient'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'MismatchedTags'
op|'('
op|'*'
op|'('
op|'('
name|'self'
op|'.'
name|'filename'
op|','
name|'el'
op|'.'
name|'tagName'
op|','
name|'name'
op|')'
nl|'\n'
op|'+'
name|'self'
op|'.'
name|'saveMark'
op|'('
op|')'
op|'+'
name|'el'
op|'.'
name|'_markpos'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'if'
name|'not'
op|'('
name|'tn'
op|'=='
name|'cname'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'beExtremelyLenient'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'elementstack'
op|':'
newline|'\n'
indent|'                    '
name|'lastEl'
op|'='
name|'self'
op|'.'
name|'elementstack'
op|'['
number|'0'
op|']'
newline|'\n'
name|'for'
name|'idx'
name|'in'
name|'xrange'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'elementstack'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'self'
op|'.'
name|'elementstack'
op|'['
op|'-'
op|'('
name|'idx'
op|'+'
number|'1'
op|')'
op|']'
op|'.'
name|'tagName'
op|'=='
name|'cname'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'elementstack'
op|'['
op|'-'
op|'('
name|'idx'
op|'+'
number|'1'
op|')'
op|']'
op|'.'
name|'endTag'
op|'('
name|'name'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# this was a garbage close tag; wait for a real one'
nl|'\n'
indent|'                        '
name|'self'
op|'.'
name|'elementstack'
op|'.'
name|'append'
op|'('
name|'el'
op|')'
newline|'\n'
name|'if'
name|'nstuple'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'nsstack'
op|'.'
name|'append'
op|'('
name|'nstuple'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'elementstack'
op|'['
op|'-'
op|'('
name|'idx'
op|'+'
number|'1'
op|')'
op|':'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'elementstack'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'documents'
op|'.'
name|'append'
op|'('
name|'lastEl'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'MismatchedTags'
op|'('
op|'*'
op|'('
op|'('
name|'self'
op|'.'
name|'filename'
op|','
name|'el'
op|'.'
name|'tagName'
op|','
name|'name'
op|')'
nl|'\n'
op|'+'
name|'self'
op|'.'
name|'saveMark'
op|'('
op|')'
op|'+'
name|'el'
op|'.'
name|'_markpos'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'el'
op|'.'
name|'endTag'
op|'('
name|'name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'elementstack'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'documents'
op|'.'
name|'append'
op|'('
name|'el'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'beExtremelyLenient'
name|'and'
name|'el'
op|'.'
name|'tagName'
op|'=='
string|'"script"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_fixScriptElement'
op|'('
name|'el'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'XMLParser'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
comment|'# This can cause more events!'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'elementstack'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'beExtremelyLenient'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'documents'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'elementstack'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'MismatchedTags'
op|'('
op|'*'
op|'('
op|'('
name|'self'
op|'.'
name|'filename'
op|','
name|'self'
op|'.'
name|'elementstack'
op|'['
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
string|'"END_OF_FILE"'
op|')'
nl|'\n'
op|'+'
name|'self'
op|'.'
name|'saveMark'
op|'('
op|')'
nl|'\n'
op|'+'
name|'self'
op|'.'
name|'elementstack'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'_markpos'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'parse'
op|'('
name|'readable'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parse HTML or XML readable."""'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'readable'
op|','
string|'"read"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'readable'
op|'='
name|'open'
op|'('
name|'readable'
op|','
string|'"rb"'
op|')'
newline|'\n'
dedent|''
name|'mdp'
op|'='
name|'MicroDOMParser'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'mdp'
op|'.'
name|'filename'
op|'='
name|'getattr'
op|'('
name|'readable'
op|','
string|'"name"'
op|','
string|'"<xmlfile />"'
op|')'
newline|'\n'
name|'mdp'
op|'.'
name|'makeConnection'
op|'('
name|'None'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'readable'
op|','
string|'"getvalue"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mdp'
op|'.'
name|'dataReceived'
op|'('
name|'readable'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'r'
op|'='
name|'readable'
op|'.'
name|'read'
op|'('
number|'1024'
op|')'
newline|'\n'
name|'while'
name|'r'
op|':'
newline|'\n'
indent|'            '
name|'mdp'
op|'.'
name|'dataReceived'
op|'('
name|'r'
op|')'
newline|'\n'
name|'r'
op|'='
name|'readable'
op|'.'
name|'read'
op|'('
number|'1024'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'mdp'
op|'.'
name|'connectionLost'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'mdp'
op|'.'
name|'documents'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ParseError'
op|'('
name|'mdp'
op|'.'
name|'filename'
op|','
number|'0'
op|','
number|'0'
op|','
string|'"No top-level Nodes in document"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'mdp'
op|'.'
name|'beExtremelyLenient'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'mdp'
op|'.'
name|'documents'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'mdp'
op|'.'
name|'documents'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'d'
op|','
name|'Element'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'el'
op|'='
name|'Element'
op|'('
string|'"html"'
op|')'
newline|'\n'
name|'el'
op|'.'
name|'appendChild'
op|'('
name|'d'
op|')'
newline|'\n'
name|'d'
op|'='
name|'el'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'Element'
op|'('
string|'"html"'
op|')'
newline|'\n'
name|'for'
name|'child'
name|'in'
name|'mdp'
op|'.'
name|'documents'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'.'
name|'appendChild'
op|'('
name|'child'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'mdp'
op|'.'
name|'documents'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'doc'
op|'='
name|'Document'
op|'('
name|'d'
op|')'
newline|'\n'
name|'doc'
op|'.'
name|'doctype'
op|'='
name|'mdp'
op|'.'
name|'_mddoctype'
newline|'\n'
name|'return'
name|'doc'
newline|'\n'
nl|'\n'
DECL|function|parseString
dedent|''
name|'def'
name|'parseString'
op|'('
name|'st'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'isinstance'
op|'('
name|'st'
op|','
name|'UnicodeType'
op|')'
op|':'
newline|'\n'
comment|"# this isn't particularly ideal, but it does work."
nl|'\n'
indent|'        '
name|'return'
name|'parse'
op|'('
name|'StringIO'
op|'('
name|'st'
op|'.'
name|'encode'
op|'('
string|"'UTF-16'"
op|')'
op|')'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'parse'
op|'('
name|'StringIO'
op|'('
name|'st'
op|')'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parseXML
dedent|''
name|'def'
name|'parseXML'
op|'('
name|'readable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parse an XML readable object."""'
newline|'\n'
name|'return'
name|'parse'
op|'('
name|'readable'
op|','
name|'caseInsensitive'
op|'='
number|'0'
op|','
name|'preserveCase'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parseXMLString
dedent|''
name|'def'
name|'parseXMLString'
op|'('
name|'st'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parse an XML readable object."""'
newline|'\n'
name|'return'
name|'parseString'
op|'('
name|'st'
op|','
name|'caseInsensitive'
op|'='
number|'0'
op|','
name|'preserveCase'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Utility'
nl|'\n'
nl|'\n'
DECL|class|lmx
dedent|''
name|'class'
name|'lmx'
op|':'
newline|'\n'
indent|'    '
string|'"""Easy creation of XML."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'node'
op|'='
string|"'div'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'node'
op|','
name|'StringTypes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'node'
op|'='
name|'Element'
op|'('
name|'node'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'node'
op|'='
name|'node'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'['
number|'0'
op|']'
op|'=='
string|"'_'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'AttributeError'
op|'('
string|'"no private attrs"'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'lambda'
op|'**'
name|'kw'
op|':'
name|'self'
op|'.'
name|'add'
op|'('
name|'name'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'node'
op|'.'
name|'setAttribute'
op|'('
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'node'
op|'.'
name|'getAttribute'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|text
dedent|''
name|'def'
name|'text'
op|'('
name|'self'
op|','
name|'txt'
op|','
name|'raw'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'nn'
op|'='
name|'Text'
op|'('
name|'txt'
op|','
name|'raw'
op|'='
name|'raw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'node'
op|'.'
name|'appendChild'
op|'('
name|'nn'
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|add
dedent|''
name|'def'
name|'add'
op|'('
name|'self'
op|','
name|'tagName'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'newNode'
op|'='
name|'Element'
op|'('
name|'tagName'
op|','
name|'caseInsensitive'
op|'='
number|'0'
op|','
name|'preserveCase'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'node'
op|'.'
name|'appendChild'
op|'('
name|'newNode'
op|')'
newline|'\n'
name|'xf'
op|'='
name|'lmx'
op|'('
name|'newNode'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'kw'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'k'
op|'['
number|'0'
op|']'
op|'=='
string|"'_'"
op|':'
newline|'\n'
indent|'                '
name|'k'
op|'='
name|'k'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'xf'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
dedent|''
name|'return'
name|'xf'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2008-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nAn implementation of\nU{Web Resource Gateway Interface<http://www.python.org/dev/peps/pep-0333/>}.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|__metaclass__
name|'__metaclass__'
op|'='
name|'type'
newline|'\n'
nl|'\n'
name|'from'
name|'sys'
name|'import'
name|'exc_info'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'log'
name|'import'
name|'msg'
op|','
name|'err'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'failure'
name|'import'
name|'Failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'resource'
name|'import'
name|'IResource'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'server'
name|'import'
name|'NOT_DONE_YET'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'http'
name|'import'
name|'INTERNAL_SERVER_ERROR'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_ErrorStream
name|'class'
name|'_ErrorStream'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    File-like object instances of which are used as the value for the\n    C{\'wsgi.errors\'} key in the C{environ} dictionary passed to the application\n    object.\n\n    This simply passes writes on to L{logging<twisted.python.log>} system as\n    error events from the C{\'wsgi\'} system.  In the future, it may be desirable\n    to expose more information in the events it logs, such as the application\n    object which generated the message.\n    """'
newline|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate an event for the logging system with the given bytes as the\n        message.\n\n        This is called in a WSGI application thread, not the I/O thread.\n        """'
newline|'\n'
name|'msg'
op|'('
name|'bytes'
op|','
name|'system'
op|'='
string|"'wsgi'"
op|','
name|'isError'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|writelines
dedent|''
name|'def'
name|'writelines'
op|'('
name|'self'
op|','
name|'iovec'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Join the given lines and pass them to C{write} to be handled in the\n        usual way.\n\n        This is called in a WSGI application thread, not the I/O thread.\n\n        @param iovec: A C{list} of C{\'\\\\n\'}-terminated C{str} which will be\n            logged.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'iovec'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|flush
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Nothing is buffered, so flushing does nothing.  This method is required\n        to exist by PEP 333, though.\n\n        This is called in a WSGI application thread, not the I/O thread.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_InputStream
dedent|''
dedent|''
name|'class'
name|'_InputStream'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    File-like object instances of which are used as the value for the\n    C{\'wsgi.input\'} key in the C{environ} dictionary passed to the application\n    object.\n\n    This only exists to make the handling of C{readline(-1)} consistent across\n    different possible underlying file-like object implementations.  The other\n    supported methods pass through directly to the wrapped object.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'input'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initialize the instance.\n\n        This is called in the I/O thread, not a WSGI application thread.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_wrapped'
op|'='
name|'input'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|read
dedent|''
name|'def'
name|'read'
op|'('
name|'self'
op|','
name|'size'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Pass through to the underlying C{read}.\n\n        This is called in a WSGI application thread, not the I/O thread.\n        """'
newline|'\n'
comment|"# Avoid passing None because cStringIO and file don't like it."
nl|'\n'
name|'if'
name|'size'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_wrapped'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_wrapped'
op|'.'
name|'read'
op|'('
name|'size'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|readline
dedent|''
name|'def'
name|'readline'
op|'('
name|'self'
op|','
name|'size'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Pass through to the underlying C{readline}, with a size of C{-1} replaced\n        with a size of C{None}.\n\n        This is called in a WSGI application thread, not the I/O thread.\n        """'
newline|'\n'
comment|"# Check for -1 because StringIO doesn't handle it correctly.  Check for"
nl|'\n'
comment|"# None because files and tempfiles don't accept that."
nl|'\n'
name|'if'
name|'size'
op|'=='
op|'-'
number|'1'
name|'or'
name|'size'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_wrapped'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_wrapped'
op|'.'
name|'readline'
op|'('
name|'size'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|readlines
dedent|''
name|'def'
name|'readlines'
op|'('
name|'self'
op|','
name|'size'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Pass through to the underlying C{readlines}.\n\n        This is called in a WSGI application thread, not the I/O thread.\n        """'
newline|'\n'
comment|"# Avoid passing None because cStringIO and file don't like it."
nl|'\n'
name|'if'
name|'size'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_wrapped'
op|'.'
name|'readlines'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_wrapped'
op|'.'
name|'readlines'
op|'('
name|'size'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Pass through to the underlying C{__iter__}.\n\n        This is called in a WSGI application thread, not the I/O thread.\n        """'
newline|'\n'
name|'return'
name|'iter'
op|'('
name|'self'
op|'.'
name|'_wrapped'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_WSGIResponse
dedent|''
dedent|''
name|'class'
name|'_WSGIResponse'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper for L{WSGIResource} which drives the WSGI application using a\n    threadpool and hooks it up to the L{Request}.\n\n    @ivar started: A C{bool} indicating whether or not the response status and\n        headers have been written to the request yet.  This may only be read or\n        written in the WSGI application thread.\n\n    @ivar reactor: An L{IReactorThreads} provider which is used to call methods\n        on the request in the I/O thread.\n\n    @ivar threadpool: A L{ThreadPool} which is used to call the WSGI\n        application object in a non-I/O thread.\n\n    @ivar application: The WSGI application object.\n\n    @ivar request: The L{Request} upon which the WSGI environment is based and\n        to which the application\'s output will be sent.\n\n    @ivar environ: The WSGI environment C{dict}.\n\n    @ivar status: The HTTP response status C{str} supplied to the WSGI\n        I{start_response} callable by the application.\n\n    @ivar headers: A list of HTTP response headers supplied to the WSGI\n        I{start_response} callable by the application.\n\n    @ivar _requestFinished: A flag which indicates whether it is possible to\n        generate more response data or not.  This is C{False} until\n        L{Request.notifyFinish} tells us the request is done, then C{True}.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|_requestFinished
name|'_requestFinished'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|','
name|'threadpool'
op|','
name|'application'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'started'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'='
name|'threadpool'
newline|'\n'
name|'self'
op|'.'
name|'application'
op|'='
name|'application'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'='
name|'request'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'notifyFinish'
op|'('
op|')'
op|'.'
name|'addBoth'
op|'('
name|'self'
op|'.'
name|'_finished'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'request'
op|'.'
name|'prepath'
op|':'
newline|'\n'
indent|'            '
name|'scriptName'
op|'='
string|"'/'"
op|'+'
string|"'/'"
op|'.'
name|'join'
op|'('
name|'request'
op|'.'
name|'prepath'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'scriptName'
op|'='
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'request'
op|'.'
name|'postpath'
op|':'
newline|'\n'
indent|'            '
name|'pathInfo'
op|'='
string|"'/'"
op|'+'
string|"'/'"
op|'.'
name|'join'
op|'('
name|'request'
op|'.'
name|'postpath'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'pathInfo'
op|'='
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'parts'
op|'='
name|'request'
op|'.'
name|'uri'
op|'.'
name|'split'
op|'('
string|"'?'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'queryString'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'queryString'
op|'='
name|'parts'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'environ'
op|'='
op|'{'
nl|'\n'
string|"'REQUEST_METHOD'"
op|':'
name|'request'
op|'.'
name|'method'
op|','
nl|'\n'
string|"'REMOTE_ADDR'"
op|':'
name|'request'
op|'.'
name|'getClientIP'
op|'('
op|')'
op|','
nl|'\n'
string|"'SCRIPT_NAME'"
op|':'
name|'scriptName'
op|','
nl|'\n'
string|"'PATH_INFO'"
op|':'
name|'pathInfo'
op|','
nl|'\n'
string|"'QUERY_STRING'"
op|':'
name|'queryString'
op|','
nl|'\n'
string|"'CONTENT_TYPE'"
op|':'
name|'request'
op|'.'
name|'getHeader'
op|'('
string|"'content-type'"
op|')'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'CONTENT_LENGTH'"
op|':'
name|'request'
op|'.'
name|'getHeader'
op|'('
string|"'content-length'"
op|')'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'SERVER_NAME'"
op|':'
name|'request'
op|'.'
name|'getRequestHostname'
op|'('
op|')'
op|','
nl|'\n'
string|"'SERVER_PORT'"
op|':'
name|'str'
op|'('
name|'request'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|')'
op|','
nl|'\n'
string|"'SERVER_PROTOCOL'"
op|':'
name|'request'
op|'.'
name|'clientproto'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'name'
op|','
name|'values'
name|'in'
name|'request'
op|'.'
name|'requestHeaders'
op|'.'
name|'getAllRawHeaders'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
string|"'HTTP_'"
op|'+'
name|'name'
op|'.'
name|'upper'
op|'('
op|')'
op|'.'
name|'replace'
op|'('
string|"'-'"
op|','
string|"'_'"
op|')'
newline|'\n'
comment|'# It might be preferable for http.HTTPChannel to clear out'
nl|'\n'
comment|'# newlines.'
nl|'\n'
name|'self'
op|'.'
name|'environ'
op|'['
name|'name'
op|']'
op|'='
string|"','"
op|'.'
name|'join'
op|'('
op|'['
nl|'\n'
name|'v'
op|'.'
name|'replace'
op|'('
string|"'\\n'"
op|','
string|"' '"
op|')'
name|'for'
name|'v'
name|'in'
name|'values'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'environ'
op|'.'
name|'update'
op|'('
op|'{'
nl|'\n'
string|"'wsgi.version'"
op|':'
op|'('
number|'1'
op|','
number|'0'
op|')'
op|','
nl|'\n'
string|"'wsgi.url_scheme'"
op|':'
name|'request'
op|'.'
name|'isSecure'
op|'('
op|')'
name|'and'
string|"'https'"
name|'or'
string|"'http'"
op|','
nl|'\n'
string|"'wsgi.run_once'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'wsgi.multithread'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'wsgi.multiprocess'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'wsgi.errors'"
op|':'
name|'_ErrorStream'
op|'('
op|')'
op|','
nl|'\n'
comment|'# Attend: request.content was owned by the I/O thread up until'
nl|'\n'
comment|'# this point.  By wrapping it and putting the result into the'
nl|'\n'
comment|'# environment dictionary, it is effectively being given to'
nl|'\n'
comment|'# another thread.  This means that whatever it is, it has to be'
nl|'\n'
comment|'# safe to access it from two different threads.  The access'
nl|'\n'
comment|'# *should* all be serialized (first the I/O thread writes to'
nl|'\n'
comment|'# it, then the WSGI thread reads from it, then the I/O thread'
nl|'\n'
comment|'# closes it).  However, since the request is made available to'
nl|'\n'
comment|"# arbitrary application code during resource traversal, it's"
nl|'\n'
comment|'# possible that some other code might decide to use it in the'
nl|'\n'
comment|'# I/O thread concurrently with its use in the WSGI thread.'
nl|'\n'
comment|'# More likely than not, this will break.  This seems like an'
nl|'\n'
comment|'# unlikely possibility to me, but if it is to be allowed,'
nl|'\n'
comment|'# something here needs to change. -exarkun'
nl|'\n'
string|"'wsgi.input'"
op|':'
name|'_InputStream'
op|'('
name|'request'
op|'.'
name|'content'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_finished
dedent|''
name|'def'
name|'_finished'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record the end of the response generation for the request being\n        serviced.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_requestFinished'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|startResponse
dedent|''
name|'def'
name|'startResponse'
op|'('
name|'self'
op|','
name|'status'
op|','
name|'headers'
op|','
name|'excInfo'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The WSGI I{start_response} callable.  The given values are saved until\n        they are needed to generate the response.\n\n        This will be called in a non-I/O thread.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'started'
name|'and'
name|'excInfo'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'excInfo'
op|'['
number|'0'
op|']'
op|','
name|'excInfo'
op|'['
number|'1'
op|']'
op|','
name|'excInfo'
op|'['
number|'2'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'status'
op|'='
name|'status'
newline|'\n'
name|'self'
op|'.'
name|'headers'
op|'='
name|'headers'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'write'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The WSGI I{write} callable returned by the I{start_response} callable.\n        The given bytes will be written to the response body, possibly flushing\n        the status and headers first.\n\n        This will be called in a non-I/O thread.\n        """'
newline|'\n'
DECL|function|wsgiWrite
name|'def'
name|'wsgiWrite'
op|'('
name|'started'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'started'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_sendResponseHeaders'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'request'
op|'.'
name|'write'
op|'('
name|'bytes'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'callFromThread'
op|'('
name|'wsgiWrite'
op|','
name|'self'
op|'.'
name|'started'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'started'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_sendResponseHeaders
dedent|''
name|'def'
name|'_sendResponseHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the response code and response headers on the request object, but\n        do not flush them.  The caller is responsible for doing a write in\n        order for anything to actually be written out in response to the\n        request.\n\n        This must be called in the I/O thread.\n        """'
newline|'\n'
name|'code'
op|','
name|'message'
op|'='
name|'self'
op|'.'
name|'status'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'1'
op|')'
newline|'\n'
name|'code'
op|'='
name|'int'
op|'('
name|'code'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'setResponseCode'
op|'('
name|'code'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
comment|'# twisted.web.server.Request.process always addes a content-type'
nl|'\n'
comment|"# response header.  That's not appropriate for us."
nl|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'responseHeaders'
op|'.'
name|'removeHeader'
op|'('
string|"'content-type'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'name'
op|','
name|'value'
name|'in'
name|'self'
op|'.'
name|'headers'
op|':'
newline|'\n'
comment|"# Don't allow the application to control these required headers."
nl|'\n'
indent|'            '
name|'if'
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
name|'not'
name|'in'
op|'('
string|"'server'"
op|','
string|"'date'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'request'
op|'.'
name|'responseHeaders'
op|'.'
name|'addRawHeader'
op|'('
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|start
dedent|''
dedent|''
dedent|''
name|'def'
name|'start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Start the WSGI application in the threadpool.\n\n        This must be called in the I/O thread.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'callInThread'
op|'('
name|'self'
op|'.'
name|'run'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call the WSGI application object, iterate it, and handle its output.\n\n        This must be called in a non-I/O thread (ie, a WSGI application\n        thread).\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'appIterator'
op|'='
name|'self'
op|'.'
name|'application'
op|'('
name|'self'
op|'.'
name|'environ'
op|','
name|'self'
op|'.'
name|'startResponse'
op|')'
newline|'\n'
name|'for'
name|'elem'
name|'in'
name|'appIterator'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'elem'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'write'
op|'('
name|'elem'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_requestFinished'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'close'
op|'='
name|'getattr'
op|'('
name|'appIterator'
op|','
string|"'close'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'close'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
DECL|function|wsgiError
indent|'            '
name|'def'
name|'wsgiError'
op|'('
name|'started'
op|','
name|'type'
op|','
name|'value'
op|','
name|'traceback'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'err'
op|'('
name|'Failure'
op|'('
name|'value'
op|','
name|'type'
op|','
name|'traceback'
op|')'
op|','
string|'"WSGI application error"'
op|')'
newline|'\n'
name|'if'
name|'started'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'request'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'request'
op|'.'
name|'setResponseCode'
op|'('
name|'INTERNAL_SERVER_ERROR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'callFromThread'
op|'('
name|'wsgiError'
op|','
name|'self'
op|'.'
name|'started'
op|','
op|'*'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|function|wsgiFinish
indent|'            '
name|'def'
name|'wsgiFinish'
op|'('
name|'started'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_requestFinished'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'not'
name|'started'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'_sendResponseHeaders'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'request'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'callFromThread'
op|'('
name|'wsgiFinish'
op|','
name|'self'
op|'.'
name|'started'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'started'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|WSGIResource
dedent|''
dedent|''
name|'class'
name|'WSGIResource'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An L{IResource} implementation which delegates responsibility for all\n    resources hierarchically inferior to it to a WSGI application.\n\n    @ivar _reactor: An L{IReactorThreads} provider which will be passed on to\n        L{_WSGIResponse} to schedule calls in the I/O thread.\n\n    @ivar _threadpool: A L{ThreadPool} which will be passed on to\n        L{_WSGIResponse} to run the WSGI application object.\n\n    @ivar _application: The WSGI application object.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IResource'
op|')'
newline|'\n'
nl|'\n'
comment|'# Further resource segments are left up to the WSGI application object to'
nl|'\n'
comment|'# handle.'
nl|'\n'
DECL|variable|isLeaf
name|'isLeaf'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|','
name|'threadpool'
op|','
name|'application'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_reactor'
op|'='
name|'reactor'
newline|'\n'
name|'self'
op|'.'
name|'_threadpool'
op|'='
name|'threadpool'
newline|'\n'
name|'self'
op|'.'
name|'_application'
op|'='
name|'application'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Turn the request into the appropriate C{environ} C{dict} suitable to be\n        passed to the WSGI application object and then pass it on.\n\n        The WSGI application object is given almost complete control of the\n        rendering process.  C{NOT_DONE_YET} will always be returned in order\n        and response completion will be dictated by the application object, as\n        will the status, headers, and the response body.\n        """'
newline|'\n'
name|'response'
op|'='
name|'_WSGIResponse'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_reactor'
op|','
name|'self'
op|'.'
name|'_threadpool'
op|','
name|'self'
op|'.'
name|'_application'
op|','
name|'request'
op|')'
newline|'\n'
name|'response'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'return'
name|'NOT_DONE_YET'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getChildWithDefault
dedent|''
name|'def'
name|'getChildWithDefault'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reject attempts to retrieve a child resource.  All path segments beyond\n        the one which refers to this resource are handled by the WSGI\n        application object.\n        """'
newline|'\n'
name|'raise'
name|'RuntimeError'
op|'('
string|'"Cannot get IResource children from WSGIResource"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|putChild
dedent|''
name|'def'
name|'putChild'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'child'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reject attempts to add a child resource to this resource.  The WSGI\n        application object handles all path segments beneath this resource, so\n        L{IResource} children can never be found.\n        """'
newline|'\n'
name|'raise'
name|'RuntimeError'
op|'('
string|'"Cannot put IResource children under WSGIResource"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
string|"'WSGIResource'"
op|']'
newline|'\n'
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.web.test.test_webclient -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nHTTP client.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'types'
newline|'\n'
name|'from'
name|'urlparse'
name|'import'
name|'urlunparse'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'http'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'protocol'
op|','
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'InsensitiveDict'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'http_headers'
name|'import'
name|'Headers'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PartialDownloadError
name|'class'
name|'PartialDownloadError'
op|'('
name|'error'
op|'.'
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Page was only partially downloaded, we got disconnected in middle.\n\n    @ivar response: All of the response body which was downloaded.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HTTPPageGetter
dedent|''
name|'class'
name|'HTTPPageGetter'
op|'('
name|'http'
op|'.'
name|'HTTPClient'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Gets a resource via HTTP, then quits.\n\n    Typically used with L{HTTPClientFactory}.  Note that this class does not, by\n    itself, do anything with the response.  If you want to download a resource\n    into a file, use L{HTTPPageDownloader} instead.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|quietLoss
name|'quietLoss'
op|'='
number|'0'
newline|'\n'
DECL|variable|followRedirect
name|'followRedirect'
op|'='
name|'True'
newline|'\n'
DECL|variable|failed
name|'failed'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|variable|_specialHeaders
name|'_specialHeaders'
op|'='
name|'set'
op|'('
op|'('
string|"'host'"
op|','
string|"'user-agent'"
op|','
string|"'cookie'"
op|','
string|"'content-length'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'factory'
op|','
string|"'method'"
op|','
string|"'GET'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'method'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendHeader'
op|'('
string|"'Host'"
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|'"host"'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'host'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendHeader'
op|'('
string|"'User-Agent'"
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'agent'
op|')'
newline|'\n'
name|'data'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'factory'
op|','
string|"'postdata'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'data'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendHeader'
op|'('
string|'"Content-Length"'
op|','
name|'str'
op|'('
name|'len'
op|'('
name|'data'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cookieData'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'key'
op|','
name|'value'
op|')'
name|'in'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_specialHeaders'
op|':'
newline|'\n'
comment|'# we calculated it on our own'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'sendHeader'
op|'('
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'cookie'"
op|':'
newline|'\n'
indent|'                '
name|'cookieData'
op|'.'
name|'append'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'cookie'
op|','
name|'cookval'
name|'in'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'cookies'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cookieData'
op|'.'
name|'append'
op|'('
string|"'%s=%s'"
op|'%'
op|'('
name|'cookie'
op|','
name|'cookval'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'cookieData'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendHeader'
op|'('
string|"'Cookie'"
op|','
string|"'; '"
op|'.'
name|'join'
op|'('
name|'cookieData'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'endHeaders'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'headers'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'data'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleHeader
dedent|''
dedent|''
name|'def'
name|'handleHeader'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called every time a header is received. Stores the header information\n        as key-value pairs in the C{headers} attribute.\n\n        @type key: C{str}\n        @param key: An HTTP header field name.\n\n        @type value: C{str}\n        @param value: An HTTP header field value.\n        """'
newline|'\n'
name|'key'
op|'='
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'l'
op|'='
name|'self'
op|'.'
name|'headers'
op|'.'
name|'setdefault'
op|'('
name|'key'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'l'
op|'.'
name|'append'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleStatus
dedent|''
name|'def'
name|'handleStatus'
op|'('
name|'self'
op|','
name|'version'
op|','
name|'status'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'version'
op|','
name|'self'
op|'.'
name|'status'
op|','
name|'self'
op|'.'
name|'message'
op|'='
name|'version'
op|','
name|'status'
op|','
name|'message'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'gotStatus'
op|'('
name|'version'
op|','
name|'status'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleEndHeaders
dedent|''
name|'def'
name|'handleEndHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'gotHeaders'
op|'('
name|'self'
op|'.'
name|'headers'
op|')'
newline|'\n'
name|'m'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'handleStatus_'"
op|'+'
name|'self'
op|'.'
name|'status'
op|','
name|'self'
op|'.'
name|'handleStatusDefault'
op|')'
newline|'\n'
name|'m'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleStatus_200
dedent|''
name|'def'
name|'handleStatus_200'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|variable|handleStatus_201
dedent|''
name|'handleStatus_201'
op|'='
name|'lambda'
name|'self'
op|':'
name|'self'
op|'.'
name|'handleStatus_200'
op|'('
op|')'
newline|'\n'
DECL|variable|handleStatus_202
name|'handleStatus_202'
op|'='
name|'lambda'
name|'self'
op|':'
name|'self'
op|'.'
name|'handleStatus_200'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleStatusDefault
name|'def'
name|'handleStatusDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failed'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|handleStatus_301
dedent|''
name|'def'
name|'handleStatus_301'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
name|'self'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'location'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'l'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'handleStatusDefault'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'url'
op|'='
name|'l'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'followRedirect'
op|':'
newline|'\n'
indent|'            '
name|'scheme'
op|','
name|'host'
op|','
name|'port'
op|','
name|'path'
op|'='
name|'_parse'
op|'('
name|'url'
op|','
name|'defaultPort'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
op|'.'
name|'port'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'_redirectCount'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'_redirectCount'
op|'>='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'redirectLimit'
op|':'
newline|'\n'
indent|'                '
name|'err'
op|'='
name|'error'
op|'.'
name|'InfiniteRedirection'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'status'
op|','
nl|'\n'
string|"'Infinite redirection detected'"
op|','
nl|'\n'
name|'location'
op|'='
name|'url'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'noPage'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'err'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'quietLoss'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'factory'
op|'.'
name|'setURL'
op|'('
name|'url'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'scheme'
op|'=='
string|"'https'"
op|':'
newline|'\n'
indent|'                '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'ssl'
newline|'\n'
name|'contextFactory'
op|'='
name|'ssl'
op|'.'
name|'ClientContextFactory'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectSSL'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'port'
op|','
nl|'\n'
name|'self'
op|'.'
name|'factory'
op|','
name|'contextFactory'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'port'
op|','
nl|'\n'
name|'self'
op|'.'
name|'factory'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'handleStatusDefault'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'noPage'
op|'('
nl|'\n'
name|'failure'
op|'.'
name|'Failure'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'PageRedirect'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'status'
op|','
name|'self'
op|'.'
name|'message'
op|','
name|'location'
op|'='
name|'url'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'quietLoss'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleStatus_302
dedent|''
name|'def'
name|'handleStatus_302'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'afterFoundGet'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'handleStatus_303'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'handleStatus_301'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|handleStatus_303
dedent|''
name|'def'
name|'handleStatus_303'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'method'
op|'='
string|"'GET'"
newline|'\n'
name|'self'
op|'.'
name|'handleStatus_301'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'quietLoss'
op|':'
newline|'\n'
indent|'            '
name|'http'
op|'.'
name|'HTTPClient'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'noPage'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleResponse
dedent|''
dedent|''
name|'def'
name|'handleResponse'
op|'('
name|'self'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'quietLoss'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'failed'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'noPage'
op|'('
nl|'\n'
name|'failure'
op|'.'
name|'Failure'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'Error'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'status'
op|','
name|'self'
op|'.'
name|'message'
op|','
name|'response'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'method'
op|'=='
string|"'HEAD'"
op|':'
newline|'\n'
comment|'# Callback with empty string, since there is never a response'
nl|'\n'
comment|'# body for HEAD requests.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'page'
op|'('
string|"''"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'length'
op|'!='
name|'None'
name|'and'
name|'self'
op|'.'
name|'length'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'noPage'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
nl|'\n'
name|'PartialDownloadError'
op|'('
name|'self'
op|'.'
name|'status'
op|','
name|'self'
op|'.'
name|'message'
op|','
name|'response'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'page'
op|'('
name|'response'
op|')'
newline|'\n'
comment|'# server might be stupid and not close connection. admittedly'
nl|'\n'
comment|'# the fact we do only one request per connection is also'
nl|'\n'
comment|'# stupid...'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|timeout
dedent|''
name|'def'
name|'timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'quietLoss'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'noPage'
op|'('
name|'defer'
op|'.'
name|'TimeoutError'
op|'('
string|'"Getting %s took longer than %s seconds."'
op|'%'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'url'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'timeout'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HTTPPageDownloader
dedent|''
dedent|''
name|'class'
name|'HTTPPageDownloader'
op|'('
name|'HTTPPageGetter'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|transmittingPage
indent|'    '
name|'transmittingPage'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|handleStatus_200
name|'def'
name|'handleStatus_200'
op|'('
name|'self'
op|','
name|'partialContent'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'HTTPPageGetter'
op|'.'
name|'handleStatus_200'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transmittingPage'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'pageStart'
op|'('
name|'partialContent'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleStatus_206
dedent|''
name|'def'
name|'handleStatus_206'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'handleStatus_200'
op|'('
name|'partialContent'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleResponsePart
dedent|''
name|'def'
name|'handleResponsePart'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'transmittingPage'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'pagePart'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleResponseEnd
dedent|''
dedent|''
name|'def'
name|'handleResponseEnd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'length'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transmittingPage'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'noPage'
op|'('
nl|'\n'
name|'failure'
op|'.'
name|'Failure'
op|'('
nl|'\n'
name|'PartialDownloadError'
op|'('
name|'self'
op|'.'
name|'status'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'transmittingPage'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'pageEnd'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transmittingPage'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'failed'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'noPage'
op|'('
nl|'\n'
name|'failure'
op|'.'
name|'Failure'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'Error'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'status'
op|','
name|'self'
op|'.'
name|'message'
op|','
name|'None'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HTTPClientFactory
dedent|''
dedent|''
dedent|''
name|'class'
name|'HTTPClientFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Download a given URL.\n\n    @type deferred: Deferred\n    @ivar deferred: A Deferred that will fire when the content has\n          been retrieved. Once this is fired, the ivars `status\', `version\',\n          and `message\' will be set.\n\n    @type status: str\n    @ivar status: The status of the response.\n\n    @type version: str\n    @ivar version: The version of the response.\n\n    @type message: str\n    @ivar message: The text message returned with the status.\n\n    @type response_headers: dict\n    @ivar response_headers: The headers that were specified in the\n          response from the server.\n\n    @type method: str\n    @ivar method: The HTTP method to use in the request.  This should be one of\n        OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT (case\n        matters).  Other values may be specified if the server being contacted\n        supports them.\n\n    @type redirectLimit: int\n    @ivar redirectLimit: The maximum number of HTTP redirects that can occur\n          before it is assumed that the redirection is endless.\n\n    @type afterFoundGet: C{bool}\n    @ivar afterFoundGet: Deviate from the HTTP 1.1 RFC by handling redirects\n        the same way as most web browsers; if the request method is POST and a\n        302 status is encountered, the redirect is followed with a GET method\n\n    @type _redirectCount: int\n    @ivar _redirectCount: The current number of HTTP redirects encountered.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'HTTPPageGetter'
newline|'\n'
nl|'\n'
DECL|variable|url
name|'url'
op|'='
name|'None'
newline|'\n'
DECL|variable|scheme
name|'scheme'
op|'='
name|'None'
newline|'\n'
DECL|variable|host
name|'host'
op|'='
string|"''"
newline|'\n'
DECL|variable|port
name|'port'
op|'='
name|'None'
newline|'\n'
DECL|variable|path
name|'path'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'url'
op|','
name|'method'
op|'='
string|"'GET'"
op|','
name|'postdata'
op|'='
name|'None'
op|','
name|'headers'
op|'='
name|'None'
op|','
nl|'\n'
name|'agent'
op|'='
string|'"Twisted PageGetter"'
op|','
name|'timeout'
op|'='
number|'0'
op|','
name|'cookies'
op|'='
name|'None'
op|','
nl|'\n'
name|'followRedirect'
op|'='
name|'True'
op|','
name|'redirectLimit'
op|'='
number|'20'
op|','
nl|'\n'
name|'afterFoundGet'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'followRedirect'
op|'='
name|'followRedirect'
newline|'\n'
name|'self'
op|'.'
name|'redirectLimit'
op|'='
name|'redirectLimit'
newline|'\n'
name|'self'
op|'.'
name|'_redirectCount'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'timeout'
op|'='
name|'timeout'
newline|'\n'
name|'self'
op|'.'
name|'agent'
op|'='
name|'agent'
newline|'\n'
name|'self'
op|'.'
name|'afterFoundGet'
op|'='
name|'afterFoundGet'
newline|'\n'
name|'if'
name|'cookies'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'cookies'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'cookies'
op|'='
name|'cookies'
newline|'\n'
name|'if'
name|'headers'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'headers'
op|'='
name|'InsensitiveDict'
op|'('
name|'headers'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'headers'
op|'='
name|'InsensitiveDict'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'postdata'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'headers'
op|'.'
name|'setdefault'
op|'('
string|"'Content-Length'"
op|','
name|'len'
op|'('
name|'postdata'
op|')'
op|')'
newline|'\n'
comment|'# just in case a broken http/1.1 decides to keep connection alive'
nl|'\n'
name|'self'
op|'.'
name|'headers'
op|'.'
name|'setdefault'
op|'('
string|'"connection"'
op|','
string|'"close"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'postdata'
op|'='
name|'postdata'
newline|'\n'
name|'self'
op|'.'
name|'method'
op|'='
name|'method'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'setURL'
op|'('
name|'url'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'waiting'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'response_headers'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"<%s: %s>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
name|'self'
op|'.'
name|'url'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setURL
dedent|''
name|'def'
name|'setURL'
op|'('
name|'self'
op|','
name|'url'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'url'
op|'='
name|'url'
newline|'\n'
name|'scheme'
op|','
name|'host'
op|','
name|'port'
op|','
name|'path'
op|'='
name|'_parse'
op|'('
name|'url'
op|')'
newline|'\n'
name|'if'
name|'scheme'
name|'and'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'scheme'
op|'='
name|'scheme'
newline|'\n'
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'port'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'protocol'
op|'.'
name|'ClientFactory'
op|'.'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'followRedirect'
op|'='
name|'self'
op|'.'
name|'followRedirect'
newline|'\n'
name|'p'
op|'.'
name|'afterFoundGet'
op|'='
name|'self'
op|'.'
name|'afterFoundGet'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'timeout'
op|':'
newline|'\n'
indent|'            '
name|'timeoutCall'
op|'='
name|'reactor'
op|'.'
name|'callLater'
op|'('
name|'self'
op|'.'
name|'timeout'
op|','
name|'p'
op|'.'
name|'timeout'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'addBoth'
op|'('
name|'self'
op|'.'
name|'_cancelTimeout'
op|','
name|'timeoutCall'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'p'
newline|'\n'
nl|'\n'
DECL|member|_cancelTimeout
dedent|''
name|'def'
name|'_cancelTimeout'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'timeoutCall'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'timeoutCall'
op|'.'
name|'active'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'timeoutCall'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|gotHeaders
dedent|''
name|'def'
name|'gotHeaders'
op|'('
name|'self'
op|','
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'response_headers'
op|'='
name|'headers'
newline|'\n'
name|'if'
name|'headers'
op|'.'
name|'has_key'
op|'('
string|"'set-cookie'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'cookie'
name|'in'
name|'headers'
op|'['
string|"'set-cookie'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'cookparts'
op|'='
name|'cookie'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
newline|'\n'
name|'cook'
op|'='
name|'cookparts'
op|'['
number|'0'
op|']'
newline|'\n'
name|'cook'
op|'.'
name|'lstrip'
op|'('
op|')'
newline|'\n'
name|'k'
op|','
name|'v'
op|'='
name|'cook'
op|'.'
name|'split'
op|'('
string|"'='"
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cookies'
op|'['
name|'k'
op|'.'
name|'lstrip'
op|'('
op|')'
op|']'
op|'='
name|'v'
op|'.'
name|'lstrip'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|gotStatus
dedent|''
dedent|''
dedent|''
name|'def'
name|'gotStatus'
op|'('
name|'self'
op|','
name|'version'
op|','
name|'status'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'version'
op|','
name|'self'
op|'.'
name|'status'
op|','
name|'self'
op|'.'
name|'message'
op|'='
name|'version'
op|','
name|'status'
op|','
name|'message'
newline|'\n'
nl|'\n'
DECL|member|page
dedent|''
name|'def'
name|'page'
op|'('
name|'self'
op|','
name|'page'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'waiting'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'waiting'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'page'
op|')'
newline|'\n'
nl|'\n'
DECL|member|noPage
dedent|''
dedent|''
name|'def'
name|'noPage'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'waiting'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'waiting'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
dedent|''
dedent|''
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'_'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'waiting'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'waiting'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HTTPDownloader
dedent|''
dedent|''
dedent|''
name|'class'
name|'HTTPDownloader'
op|'('
name|'HTTPClientFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Download to a file."""'
newline|'\n'
nl|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'HTTPPageDownloader'
newline|'\n'
DECL|variable|value
name|'value'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'url'
op|','
name|'fileOrName'
op|','
nl|'\n'
name|'method'
op|'='
string|"'GET'"
op|','
name|'postdata'
op|'='
name|'None'
op|','
name|'headers'
op|'='
name|'None'
op|','
nl|'\n'
name|'agent'
op|'='
string|'"Twisted client"'
op|','
name|'supportPartial'
op|'='
number|'0'
op|','
nl|'\n'
name|'timeout'
op|'='
number|'0'
op|','
name|'cookies'
op|'='
name|'None'
op|','
name|'followRedirect'
op|'='
number|'1'
op|','
nl|'\n'
name|'redirectLimit'
op|'='
number|'20'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'requestedPartial'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'fileOrName'
op|','
name|'types'
op|'.'
name|'StringTypes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fileName'
op|'='
name|'fileOrName'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'supportPartial'
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'fileName'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'fileLength'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'getsize'
op|'('
name|'self'
op|'.'
name|'fileName'
op|')'
newline|'\n'
name|'if'
name|'fileLength'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'requestedPartial'
op|'='
name|'fileLength'
newline|'\n'
name|'if'
name|'headers'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'                        '
name|'headers'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'headers'
op|'['
string|'"range"'
op|']'
op|'='
string|'"bytes=%d-"'
op|'%'
name|'fileLength'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'='
name|'fileOrName'
newline|'\n'
dedent|''
name|'HTTPClientFactory'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'self'
op|','
name|'url'
op|','
name|'method'
op|'='
name|'method'
op|','
name|'postdata'
op|'='
name|'postdata'
op|','
name|'headers'
op|'='
name|'headers'
op|','
nl|'\n'
name|'agent'
op|'='
name|'agent'
op|','
name|'timeout'
op|'='
name|'timeout'
op|','
name|'cookies'
op|'='
name|'cookies'
op|','
nl|'\n'
name|'followRedirect'
op|'='
name|'followRedirect'
op|','
name|'redirectLimit'
op|'='
name|'redirectLimit'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|gotHeaders
dedent|''
name|'def'
name|'gotHeaders'
op|'('
name|'self'
op|','
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'HTTPClientFactory'
op|'.'
name|'gotHeaders'
op|'('
name|'self'
op|','
name|'headers'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'requestedPartial'
op|':'
newline|'\n'
indent|'            '
name|'contentRange'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|'"content-range"'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'contentRange'
op|':'
newline|'\n'
comment|"# server doesn't support partial requests, oh well"
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'requestedPartial'
op|'='
number|'0'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'start'
op|','
name|'end'
op|','
name|'realLength'
op|'='
name|'http'
op|'.'
name|'parseContentRange'
op|'('
name|'contentRange'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'start'
op|'!='
name|'self'
op|'.'
name|'requestedPartial'
op|':'
newline|'\n'
comment|'# server is acting wierdly'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'requestedPartial'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|openFile
dedent|''
dedent|''
dedent|''
name|'def'
name|'openFile'
op|'('
name|'self'
op|','
name|'partialContent'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'partialContent'
op|':'
newline|'\n'
indent|'            '
name|'file'
op|'='
name|'open'
op|'('
name|'self'
op|'.'
name|'fileName'
op|','
string|"'rb+'"
op|')'
newline|'\n'
name|'file'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'file'
op|'='
name|'open'
op|'('
name|'self'
op|'.'
name|'fileName'
op|','
string|"'wb'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'file'
newline|'\n'
nl|'\n'
DECL|member|pageStart
dedent|''
name|'def'
name|'pageStart'
op|'('
name|'self'
op|','
name|'partialContent'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called on page download start.\n\n        @param partialContent: tells us if the download is partial download we requested.\n        """'
newline|'\n'
name|'if'
name|'partialContent'
name|'and'
name|'not'
name|'self'
op|'.'
name|'requestedPartial'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|'"we shouldn\'t get partial content response if we didn\'t want it!"'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'waiting'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'self'
op|'.'
name|'file'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'file'
op|'='
name|'self'
op|'.'
name|'openFile'
op|'('
name|'partialContent'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
comment|'#raise'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pagePart
dedent|''
dedent|''
dedent|''
name|'def'
name|'pagePart'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'file'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
comment|'#raise'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|noPage
dedent|''
dedent|''
name|'def'
name|'noPage'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close the storage file and errback the waiting L{Deferred} with the\n        given reason.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'waiting'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'waiting'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'file'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                    '
name|'log'
op|'.'
name|'err'
op|'('
name|'None'
op|','
string|'"Error closing HTTPDownloader file"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|pageEnd
dedent|''
dedent|''
name|'def'
name|'pageEnd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'waiting'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'file'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'self'
op|'.'
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_parse
dedent|''
dedent|''
name|'def'
name|'_parse'
op|'('
name|'url'
op|','
name|'defaultPort'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Split the given URL into the scheme, host, port, and path.\n\n    @type url: C{str}\n    @param url: An URL to parse.\n\n    @type defaultPort: C{int} or C{None}\n    @param defaultPort: An alternate value to use as the port if the URL does\n    not include one.\n\n    @return: A four-tuple of the scheme, host, port, and path of the URL.  All\n    of these are C{str} instances except for port, which is an C{int}.\n    """'
newline|'\n'
name|'url'
op|'='
name|'url'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'parsed'
op|'='
name|'http'
op|'.'
name|'urlparse'
op|'('
name|'url'
op|')'
newline|'\n'
name|'scheme'
op|'='
name|'parsed'
op|'['
number|'0'
op|']'
newline|'\n'
name|'path'
op|'='
name|'urlunparse'
op|'('
op|'('
string|"''"
op|','
string|"''"
op|')'
op|'+'
name|'parsed'
op|'['
number|'2'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'defaultPort'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'scheme'
op|'=='
string|"'https'"
op|':'
newline|'\n'
indent|'            '
name|'defaultPort'
op|'='
number|'443'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'defaultPort'
op|'='
number|'80'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'host'
op|','
name|'port'
op|'='
name|'parsed'
op|'['
number|'1'
op|']'
op|','
name|'defaultPort'
newline|'\n'
name|'if'
string|"':'"
name|'in'
name|'host'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|','
name|'port'
op|'='
name|'host'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'port'
op|'='
name|'int'
op|'('
name|'port'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'port'
op|'='
name|'defaultPort'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'path'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'='
string|"'/'"
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'scheme'
op|','
name|'host'
op|','
name|'port'
op|','
name|'path'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_makeGetterFactory
dedent|''
name|'def'
name|'_makeGetterFactory'
op|'('
name|'url'
op|','
name|'factoryFactory'
op|','
name|'contextFactory'
op|'='
name|'None'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Create and connect an HTTP page getting factory.\n\n    Any additional positional or keyword arguments are used when calling\n    C{factoryFactory}.\n\n    @param factoryFactory: Factory factory that is called with C{url}, C{args}\n        and C{kwargs} to produce the getter\n\n    @param contextFactory: Context factory to use when creating a secure\n        connection, defaulting to C{None}\n\n    @return: The factory created by C{factoryFactory}\n    """'
newline|'\n'
name|'scheme'
op|','
name|'host'
op|','
name|'port'
op|','
name|'path'
op|'='
name|'_parse'
op|'('
name|'url'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'factoryFactory'
op|'('
name|'url'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'scheme'
op|'=='
string|"'https'"
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'ssl'
newline|'\n'
name|'if'
name|'contextFactory'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'contextFactory'
op|'='
name|'ssl'
op|'.'
name|'ClientContextFactory'
op|'('
op|')'
newline|'\n'
dedent|''
name|'reactor'
op|'.'
name|'connectSSL'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|','
name|'contextFactory'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'factory'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|getPage
dedent|''
name|'def'
name|'getPage'
op|'('
name|'url'
op|','
name|'contextFactory'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Download a web page as a string.\n\n    Download a page. Return a deferred, which will callback with a\n    page (as a string) or errback with a description of the error.\n\n    See HTTPClientFactory to see what extra args can be passed.\n    """'
newline|'\n'
name|'return'
name|'_makeGetterFactory'
op|'('
nl|'\n'
name|'url'
op|','
nl|'\n'
name|'HTTPClientFactory'
op|','
nl|'\n'
name|'contextFactory'
op|'='
name|'contextFactory'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|'.'
name|'deferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|downloadPage
dedent|''
name|'def'
name|'downloadPage'
op|'('
name|'url'
op|','
name|'file'
op|','
name|'contextFactory'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Download a web page to a file.\n\n    @param file: path to file on filesystem, or file-like object.\n\n    See HTTPDownloader to see what extra args can be passed.\n    """'
newline|'\n'
name|'factoryFactory'
op|'='
name|'lambda'
name|'url'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'HTTPDownloader'
op|'('
name|'url'
op|','
name|'file'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'return'
name|'_makeGetterFactory'
op|'('
nl|'\n'
name|'url'
op|','
nl|'\n'
name|'factoryFactory'
op|','
nl|'\n'
name|'contextFactory'
op|'='
name|'contextFactory'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|'.'
name|'deferred'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# The code which follows is based on the new HTTP client implementation.  It'
nl|'\n'
comment|'# should be significantly better than anything above, though it is not yet'
nl|'\n'
comment|'# feature equivalent.'
nl|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'protocol'
name|'import'
name|'ClientCreator'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'error'
name|'import'
name|'SchemeNotSupported'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'_newclient'
name|'import'
name|'ResponseDone'
op|','
name|'Request'
op|','
name|'HTTP11ClientProtocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'_newclient'
name|'import'
name|'Response'
newline|'\n'
nl|'\n'
DECL|class|Agent
name|'class'
name|'Agent'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{Agent} is a very basic HTTP client.  It supports I{HTTP} scheme URIs.  It\n    does not support persistent connections.\n\n    @ivar _reactor: The L{IReactorTCP} implementation which will be used to set\n        up connections over which to issue requests.\n\n    @since: 9.0\n    """'
newline|'\n'
DECL|variable|_protocol
name|'_protocol'
op|'='
name|'HTTP11ClientProtocol'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_reactor'
op|'='
name|'reactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|request
dedent|''
name|'def'
name|'request'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'uri'
op|','
name|'headers'
op|'='
name|'None'
op|','
name|'bodyProducer'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Issue a new request.\n\n        @param method: The request method to send.\n        @type method: C{str}\n\n        @param uri: The request URI send.\n        @type uri: C{str}\n\n        @param headers: The request headers to send.  If no I{Host} header is\n            included, one will be added based on the request URI.\n        @type headers: L{Headers}\n\n        @param bodyProducer: An object which will produce the request body or,\n            if the request body is to be empty, L{None}.\n        @type bodyProducer: L{IBodyProducer} provider\n\n        @return: A L{Deferred} which fires with the result of the request (a\n            L{Response} instance), or fails if there is a problem setting up a\n            connection over which to issue the request.  It may also fail with\n            L{SchemeNotSupported} if the scheme of the given URI is not\n            supported.\n        @rtype: L{Deferred}\n        """'
newline|'\n'
name|'scheme'
op|','
name|'host'
op|','
name|'port'
op|','
name|'path'
op|'='
name|'_parse'
op|'('
name|'uri'
op|')'
newline|'\n'
name|'if'
name|'scheme'
op|'!='
string|"'http'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'SchemeNotSupported'
op|'('
nl|'\n'
string|'"Unsupported scheme: %r"'
op|'%'
op|'('
name|'scheme'
op|','
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'cc'
op|'='
name|'ClientCreator'
op|'('
name|'self'
op|'.'
name|'_reactor'
op|','
name|'self'
op|'.'
name|'_protocol'
op|')'
newline|'\n'
name|'d'
op|'='
name|'cc'
op|'.'
name|'connectTCP'
op|'('
name|'host'
op|','
name|'port'
op|')'
newline|'\n'
name|'if'
name|'headers'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'headers'
op|'.'
name|'hasHeader'
op|'('
string|"'host'"
op|')'
op|':'
newline|'\n'
comment|'# This is a lot of copying.  It might be nice if there were a bit'
nl|'\n'
comment|'# less.'
nl|'\n'
indent|'            '
name|'headers'
op|'='
name|'Headers'
op|'('
name|'dict'
op|'('
name|'headers'
op|'.'
name|'getAllRawHeaders'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'headers'
op|'.'
name|'addRawHeader'
op|'('
nl|'\n'
string|"'host'"
op|','
name|'self'
op|'.'
name|'_computeHostValue'
op|'('
name|'scheme'
op|','
name|'host'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
DECL|function|cbConnected
dedent|''
name|'def'
name|'cbConnected'
op|'('
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'proto'
op|'.'
name|'request'
op|'('
name|'Request'
op|'('
name|'method'
op|','
name|'path'
op|','
name|'headers'
op|','
name|'bodyProducer'
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbConnected'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_computeHostValue
dedent|''
name|'def'
name|'_computeHostValue'
op|'('
name|'self'
op|','
name|'scheme'
op|','
name|'host'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Compute the string to use for the value of the I{Host} header, based on\n        the given scheme, host name, and port number.\n        """'
newline|'\n'
name|'if'
name|'port'
op|'=='
number|'80'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'host'
newline|'\n'
dedent|''
name|'return'
string|"'%s:%d'"
op|'%'
op|'('
name|'host'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
nl|'\n'
string|"'PartialDownloadError'"
op|','
nl|'\n'
string|"'HTTPPageGetter'"
op|','
string|"'HTTPPageDownloader'"
op|','
string|"'HTTPClientFactory'"
op|','
string|"'HTTPDownloader'"
op|','
nl|'\n'
string|"'getPage'"
op|','
string|"'downloadPage'"
op|','
nl|'\n'
nl|'\n'
string|"'ResponseDone'"
op|','
string|"'Response'"
op|','
string|"'Agent'"
op|']'
newline|'\n'
endmarker|''
end_unit

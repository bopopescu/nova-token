begin_unit
comment|'# -*- test-case-name: twisted.web.test.test_web -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nImplementation of the lowest-level Resource class.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'warnings'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'Attribute'
op|','
name|'implements'
op|','
name|'Interface'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'http'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IResource
name|'class'
name|'IResource'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A web resource.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|isLeaf
name|'isLeaf'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"""\n        Signal if this IResource implementor is a "leaf node" or not. If True,\n        getChildWithDefault will not be called on this Resource.\n        """'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getChildWithDefault
name|'def'
name|'getChildWithDefault'
op|'('
name|'name'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a child with the given name for the given request.\n        This is the external interface used by the Resource publishing\n        machinery. If implementing IResource without subclassing\n        Resource, it must be provided. However, if subclassing Resource,\n        getChild overridden instead.\n        """'
newline|'\n'
nl|'\n'
DECL|member|putChild
dedent|''
name|'def'
name|'putChild'
op|'('
name|'path'
op|','
name|'child'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Put a child IResource implementor at the given path.\n        """'
newline|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Render a request. This is called on the leaf resource for\n        a request. Render must return either a string, which will\n        be sent to the browser as the HTML for the request, or\n        server.NOT_DONE_YET. If NOT_DONE_YET is returned,\n        at some point later (in a Deferred callback, usually)\n        call request.write("<html>") to write data to the request,\n        and request.finish() to send the data to the browser.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|getChildForRequest
dedent|''
dedent|''
name|'def'
name|'getChildForRequest'
op|'('
name|'resource'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Traverse resource tree to find who will handle the request.\n    """'
newline|'\n'
name|'while'
name|'request'
op|'.'
name|'postpath'
name|'and'
name|'not'
name|'resource'
op|'.'
name|'isLeaf'
op|':'
newline|'\n'
indent|'        '
name|'pathElement'
op|'='
name|'request'
op|'.'
name|'postpath'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'prepath'
op|'.'
name|'append'
op|'('
name|'pathElement'
op|')'
newline|'\n'
name|'resource'
op|'='
name|'resource'
op|'.'
name|'getChildWithDefault'
op|'('
name|'pathElement'
op|','
name|'request'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'resource'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Resource
dedent|''
name|'class'
name|'Resource'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I define a web-accessible resource.\n\n    I serve 2 main purposes; one is to provide a standard representation for\n    what HTTP specification calls an \'entity\', and the other is to provide an\n    abstract directory structure for URL retrieval.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IResource'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|entityType
name|'entityType'
op|'='
name|'IResource'
newline|'\n'
nl|'\n'
DECL|variable|server
name|'server'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'children'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|isLeaf
dedent|''
name|'isLeaf'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'### Abstract Collection Interface'
nl|'\n'
nl|'\n'
DECL|member|listStaticNames
name|'def'
name|'listStaticNames'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'children'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|listStaticEntities
dedent|''
name|'def'
name|'listStaticEntities'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'children'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|listNames
dedent|''
name|'def'
name|'listNames'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'listStaticNames'
op|'('
op|')'
op|'+'
name|'self'
op|'.'
name|'listDynamicNames'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|listEntities
dedent|''
name|'def'
name|'listEntities'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'listStaticEntities'
op|'('
op|')'
op|'+'
name|'self'
op|'.'
name|'listDynamicEntities'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|listDynamicNames
dedent|''
name|'def'
name|'listDynamicNames'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|listDynamicEntities
dedent|''
name|'def'
name|'listDynamicEntities'
op|'('
name|'self'
op|','
name|'request'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|getStaticEntity
dedent|''
name|'def'
name|'getStaticEntity'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'children'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getDynamicEntity
dedent|''
name|'def'
name|'getDynamicEntity'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'children'
op|'.'
name|'has_key'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'getChild'
op|'('
name|'name'
op|','
name|'request'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|delEntity
dedent|''
dedent|''
name|'def'
name|'delEntity'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'self'
op|'.'
name|'children'
op|'['
name|'name'
op|']'
newline|'\n'
nl|'\n'
DECL|member|reallyPutEntity
dedent|''
name|'def'
name|'reallyPutEntity'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'entity'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'children'
op|'['
name|'name'
op|']'
op|'='
name|'entity'
newline|'\n'
nl|'\n'
comment|'# Concrete HTTP interface'
nl|'\n'
nl|'\n'
DECL|member|getChild
dedent|''
name|'def'
name|'getChild'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve a \'child\' resource from me.\n\n        Implement this to create dynamic resource generation -- resources which\n        are always available may be registered with self.putChild().\n\n        This will not be called if the class-level variable \'isLeaf\' is set in\n        your subclass; instead, the \'postpath\' attribute of the request will be\n        left as a list of the remaining path elements.\n\n        For example, the URL /foo/bar/baz will normally be::\n\n          | site.resource.getChild(\'foo\').getChild(\'bar\').getChild(\'baz\').\n\n        However, if the resource returned by \'bar\' has isLeaf set to true, then\n        the getChild call will never be made on it.\n\n        @param path: a string, describing the child\n\n        @param request: a twisted.web.server.Request specifying meta-information\n                        about the request that is being made for this child.\n        """'
newline|'\n'
name|'return'
name|'NoResource'
op|'('
string|'"No such child resource."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getChildWithDefault
dedent|''
name|'def'
name|'getChildWithDefault'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve a static or dynamically generated child resource from me.\n\n        First checks if a resource was added manually by putChild, and then\n        call getChild to check for dynamic resources. Only override if you want\n        to affect behaviour of all child lookups, rather than just dynamic\n        ones.\n\n        This will check to see if I have a pre-registered child resource of the\n        given name, and call getChild if I do not.\n        """'
newline|'\n'
name|'if'
name|'path'
name|'in'
name|'self'
op|'.'
name|'children'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'children'
op|'['
name|'path'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'getChild'
op|'('
name|'path'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getChildForRequest
dedent|''
name|'def'
name|'getChildForRequest'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Please use module level getChildForRequest."'
op|','
name|'DeprecationWarning'
op|','
number|'2'
op|')'
newline|'\n'
name|'return'
name|'getChildForRequest'
op|'('
name|'self'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|putChild
dedent|''
name|'def'
name|'putChild'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'child'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Register a static child.\n\n        You almost certainly don\'t want \'/\' in your path. If you\n        intended to have the root of a folder, e.g. /foo/, you want\n        path to be \'\'.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'children'
op|'['
name|'path'
op|']'
op|'='
name|'child'
newline|'\n'
name|'child'
op|'.'
name|'server'
op|'='
name|'self'
op|'.'
name|'server'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Render a given resource. See L{IResource}\'s render method.\n\n        I delegate to methods of self with the form \'render_METHOD\'\n        where METHOD is the HTTP that was used to make the\n        request. Examples: render_GET, render_HEAD, render_POST, and\n        so on. Generally you should implement those methods instead of\n        overriding this one.\n\n        render_METHOD methods are expected to return a string which\n        will be the rendered page, unless the return value is\n        twisted.web.server.NOT_DONE_YET, in which case it is this\n        class\'s responsibility to write the results to\n        request.write(data), then call request.finish().\n\n        Old code that overrides render() directly is likewise expected\n        to return a string or NOT_DONE_YET.\n        """'
newline|'\n'
name|'m'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'render_'"
op|'+'
name|'request'
op|'.'
name|'method'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'m'
op|':'
newline|'\n'
comment|'# This needs to be here until the deprecated subclasses of the'
nl|'\n'
comment|'# below three error resources in twisted.web.error are removed.'
nl|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'error'
name|'import'
name|'UnsupportedMethod'
newline|'\n'
name|'raise'
name|'UnsupportedMethod'
op|'('
name|'getattr'
op|'('
name|'self'
op|','
string|"'allowedMethods'"
op|','
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'m'
op|'('
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|render_HEAD
dedent|''
name|'def'
name|'render_HEAD'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Default handling of HEAD method.\n\n        I just return self.render_GET(request). When method is HEAD,\n        the framework will handle this correctly.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'render_GET'
op|'('
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ErrorPage
dedent|''
dedent|''
name|'class'
name|'ErrorPage'
op|'('
name|'Resource'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{ErrorPage} is a resource which responds with a particular\n    (parameterized) status and a body consisting of HTML containing some\n    descriptive text.  This is useful for rendering simple error pages.\n\n    @ivar template: A C{str} which will have a dictionary interpolated into\n        it to generate the response body.  The dictionary has the following\n        keys:\n\n          - C{"code"}: The status code passed to L{ErrorPage.__init__}.\n          - C{"brief"}: The brief description passed to L{ErrorPage.__init__}.\n          - C{"detail"}: The detailed description passed to\n            L{ErrorPage.__init__}.\n\n    @ivar code: An integer status code which will be used for the response.\n    @ivar brief: A short string which will be included in the response body.\n    @ivar detail: A longer string which will be included in the response body.\n    """'
newline|'\n'
nl|'\n'
name|'template'
op|'='
string|'"""\n<html>\n  <head><title>%(code)s - %(brief)s</title></head>\n  <body>\n    <h1>%(brief)s</h1>\n    <p>%(detail)s</p>\n  </body>\n</html>\n"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'status'
op|','
name|'brief'
op|','
name|'detail'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Resource'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'code'
op|'='
name|'status'
newline|'\n'
name|'self'
op|'.'
name|'brief'
op|'='
name|'brief'
newline|'\n'
name|'self'
op|'.'
name|'detail'
op|'='
name|'detail'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'request'
op|'.'
name|'setResponseCode'
op|'('
name|'self'
op|'.'
name|'code'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHeader'
op|'('
string|'"content-type"'
op|','
string|'"text/html"'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'template'
op|'%'
name|'dict'
op|'('
nl|'\n'
name|'code'
op|'='
name|'self'
op|'.'
name|'code'
op|','
nl|'\n'
name|'brief'
op|'='
name|'self'
op|'.'
name|'brief'
op|','
nl|'\n'
name|'detail'
op|'='
name|'self'
op|'.'
name|'detail'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getChild
dedent|''
name|'def'
name|'getChild'
op|'('
name|'self'
op|','
name|'chnam'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoResource
dedent|''
dedent|''
name|'class'
name|'NoResource'
op|'('
name|'ErrorPage'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{NoResource} is a specialization of L{ErrorPage} which returns the HTTP\n    response code I{NOT FOUND}.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'message'
op|'='
string|'"Sorry. No luck finding that resource."'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ErrorPage'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'http'
op|'.'
name|'NOT_FOUND'
op|','
nl|'\n'
string|'"No Such Resource"'
op|','
nl|'\n'
name|'message'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ForbiddenResource
dedent|''
dedent|''
name|'class'
name|'ForbiddenResource'
op|'('
name|'ErrorPage'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{ForbiddenResource} is a specialization of L{ErrorPage} which returns the\n    I{FORBIDDEN} HTTP response code.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'message'
op|'='
string|'"Sorry, resource is forbidden."'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ErrorPage'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'http'
op|'.'
name|'FORBIDDEN'
op|','
nl|'\n'
string|'"Forbidden Resource"'
op|','
nl|'\n'
name|'message'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
nl|'\n'
string|"'IResource'"
op|','
string|"'getChildForRequest'"
op|','
nl|'\n'
string|"'Resource'"
op|','
string|"'ErrorPage'"
op|','
string|"'NoResource'"
op|','
string|"'ForbiddenResource'"
op|']'
newline|'\n'
endmarker|''
end_unit

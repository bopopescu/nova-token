begin_unit
comment|'# -*- test-case-name: twisted.web.test.test_http -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nHyperText Transfer Protocol implementation.\n\nThis is used by twisted.web.\n\nFuture Plans:\n - HTTP client support will at some point be refactored to support HTTP/1.1.\n - Accept chunked data from clients in server.\n - Other missing HTTP features from the RFC.\n\nMaintainer: Itamar Shtull-Trauring\n"""'
newline|'\n'
nl|'\n'
comment|'# system imports'
nl|'\n'
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'base64'
op|','
name|'binascii'
newline|'\n'
name|'import'
name|'cgi'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'math'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'calendar'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'from'
name|'urlparse'
name|'import'
name|'urlparse'
name|'as'
name|'_urlparse'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
comment|'# twisted imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'interfaces'
op|','
name|'reactor'
op|','
name|'protocol'
op|','
name|'address'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'policies'
op|','
name|'basic'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'try'
op|':'
comment|'# try importing the fast, C version'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'protocols'
op|'.'
name|'_c_urlarg'
name|'import'
name|'unquote'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'urllib'
name|'import'
name|'unquote'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'http_headers'
name|'import'
name|'_DictHeaders'
op|','
name|'Headers'
newline|'\n'
nl|'\n'
DECL|variable|protocol_version
name|'protocol_version'
op|'='
string|'"HTTP/1.1"'
newline|'\n'
nl|'\n'
DECL|variable|_CONTINUE
name|'_CONTINUE'
op|'='
number|'100'
newline|'\n'
DECL|variable|SWITCHING
name|'SWITCHING'
op|'='
number|'101'
newline|'\n'
nl|'\n'
DECL|variable|OK
name|'OK'
op|'='
number|'200'
newline|'\n'
DECL|variable|CREATED
name|'CREATED'
op|'='
number|'201'
newline|'\n'
DECL|variable|ACCEPTED
name|'ACCEPTED'
op|'='
number|'202'
newline|'\n'
DECL|variable|NON_AUTHORITATIVE_INFORMATION
name|'NON_AUTHORITATIVE_INFORMATION'
op|'='
number|'203'
newline|'\n'
DECL|variable|NO_CONTENT
name|'NO_CONTENT'
op|'='
number|'204'
newline|'\n'
DECL|variable|RESET_CONTENT
name|'RESET_CONTENT'
op|'='
number|'205'
newline|'\n'
DECL|variable|PARTIAL_CONTENT
name|'PARTIAL_CONTENT'
op|'='
number|'206'
newline|'\n'
DECL|variable|MULTI_STATUS
name|'MULTI_STATUS'
op|'='
number|'207'
newline|'\n'
nl|'\n'
DECL|variable|MULTIPLE_CHOICE
name|'MULTIPLE_CHOICE'
op|'='
number|'300'
newline|'\n'
DECL|variable|MOVED_PERMANENTLY
name|'MOVED_PERMANENTLY'
op|'='
number|'301'
newline|'\n'
DECL|variable|FOUND
name|'FOUND'
op|'='
number|'302'
newline|'\n'
DECL|variable|SEE_OTHER
name|'SEE_OTHER'
op|'='
number|'303'
newline|'\n'
DECL|variable|NOT_MODIFIED
name|'NOT_MODIFIED'
op|'='
number|'304'
newline|'\n'
DECL|variable|USE_PROXY
name|'USE_PROXY'
op|'='
number|'305'
newline|'\n'
DECL|variable|TEMPORARY_REDIRECT
name|'TEMPORARY_REDIRECT'
op|'='
number|'307'
newline|'\n'
nl|'\n'
DECL|variable|BAD_REQUEST
name|'BAD_REQUEST'
op|'='
number|'400'
newline|'\n'
DECL|variable|UNAUTHORIZED
name|'UNAUTHORIZED'
op|'='
number|'401'
newline|'\n'
DECL|variable|PAYMENT_REQUIRED
name|'PAYMENT_REQUIRED'
op|'='
number|'402'
newline|'\n'
DECL|variable|FORBIDDEN
name|'FORBIDDEN'
op|'='
number|'403'
newline|'\n'
DECL|variable|NOT_FOUND
name|'NOT_FOUND'
op|'='
number|'404'
newline|'\n'
DECL|variable|NOT_ALLOWED
name|'NOT_ALLOWED'
op|'='
number|'405'
newline|'\n'
DECL|variable|NOT_ACCEPTABLE
name|'NOT_ACCEPTABLE'
op|'='
number|'406'
newline|'\n'
DECL|variable|PROXY_AUTH_REQUIRED
name|'PROXY_AUTH_REQUIRED'
op|'='
number|'407'
newline|'\n'
DECL|variable|REQUEST_TIMEOUT
name|'REQUEST_TIMEOUT'
op|'='
number|'408'
newline|'\n'
DECL|variable|CONFLICT
name|'CONFLICT'
op|'='
number|'409'
newline|'\n'
DECL|variable|GONE
name|'GONE'
op|'='
number|'410'
newline|'\n'
DECL|variable|LENGTH_REQUIRED
name|'LENGTH_REQUIRED'
op|'='
number|'411'
newline|'\n'
DECL|variable|PRECONDITION_FAILED
name|'PRECONDITION_FAILED'
op|'='
number|'412'
newline|'\n'
DECL|variable|REQUEST_ENTITY_TOO_LARGE
name|'REQUEST_ENTITY_TOO_LARGE'
op|'='
number|'413'
newline|'\n'
DECL|variable|REQUEST_URI_TOO_LONG
name|'REQUEST_URI_TOO_LONG'
op|'='
number|'414'
newline|'\n'
DECL|variable|UNSUPPORTED_MEDIA_TYPE
name|'UNSUPPORTED_MEDIA_TYPE'
op|'='
number|'415'
newline|'\n'
DECL|variable|REQUESTED_RANGE_NOT_SATISFIABLE
name|'REQUESTED_RANGE_NOT_SATISFIABLE'
op|'='
number|'416'
newline|'\n'
DECL|variable|EXPECTATION_FAILED
name|'EXPECTATION_FAILED'
op|'='
number|'417'
newline|'\n'
nl|'\n'
DECL|variable|INTERNAL_SERVER_ERROR
name|'INTERNAL_SERVER_ERROR'
op|'='
number|'500'
newline|'\n'
DECL|variable|NOT_IMPLEMENTED
name|'NOT_IMPLEMENTED'
op|'='
number|'501'
newline|'\n'
DECL|variable|BAD_GATEWAY
name|'BAD_GATEWAY'
op|'='
number|'502'
newline|'\n'
DECL|variable|SERVICE_UNAVAILABLE
name|'SERVICE_UNAVAILABLE'
op|'='
number|'503'
newline|'\n'
DECL|variable|GATEWAY_TIMEOUT
name|'GATEWAY_TIMEOUT'
op|'='
number|'504'
newline|'\n'
DECL|variable|HTTP_VERSION_NOT_SUPPORTED
name|'HTTP_VERSION_NOT_SUPPORTED'
op|'='
number|'505'
newline|'\n'
DECL|variable|INSUFFICIENT_STORAGE_SPACE
name|'INSUFFICIENT_STORAGE_SPACE'
op|'='
number|'507'
newline|'\n'
DECL|variable|NOT_EXTENDED
name|'NOT_EXTENDED'
op|'='
number|'510'
newline|'\n'
nl|'\n'
DECL|variable|RESPONSES
name|'RESPONSES'
op|'='
op|'{'
nl|'\n'
comment|'# 100'
nl|'\n'
name|'_CONTINUE'
op|':'
string|'"Continue"'
op|','
nl|'\n'
name|'SWITCHING'
op|':'
string|'"Switching Protocols"'
op|','
nl|'\n'
nl|'\n'
comment|'# 200'
nl|'\n'
name|'OK'
op|':'
string|'"OK"'
op|','
nl|'\n'
name|'CREATED'
op|':'
string|'"Created"'
op|','
nl|'\n'
name|'ACCEPTED'
op|':'
string|'"Accepted"'
op|','
nl|'\n'
name|'NON_AUTHORITATIVE_INFORMATION'
op|':'
string|'"Non-Authoritative Information"'
op|','
nl|'\n'
name|'NO_CONTENT'
op|':'
string|'"No Content"'
op|','
nl|'\n'
name|'RESET_CONTENT'
op|':'
string|'"Reset Content."'
op|','
nl|'\n'
name|'PARTIAL_CONTENT'
op|':'
string|'"Partial Content"'
op|','
nl|'\n'
name|'MULTI_STATUS'
op|':'
string|'"Multi-Status"'
op|','
nl|'\n'
nl|'\n'
comment|'# 300'
nl|'\n'
name|'MULTIPLE_CHOICE'
op|':'
string|'"Multiple Choices"'
op|','
nl|'\n'
name|'MOVED_PERMANENTLY'
op|':'
string|'"Moved Permanently"'
op|','
nl|'\n'
name|'FOUND'
op|':'
string|'"Found"'
op|','
nl|'\n'
name|'SEE_OTHER'
op|':'
string|'"See Other"'
op|','
nl|'\n'
name|'NOT_MODIFIED'
op|':'
string|'"Not Modified"'
op|','
nl|'\n'
name|'USE_PROXY'
op|':'
string|'"Use Proxy"'
op|','
nl|'\n'
comment|'# 306 not defined??'
nl|'\n'
name|'TEMPORARY_REDIRECT'
op|':'
string|'"Temporary Redirect"'
op|','
nl|'\n'
nl|'\n'
comment|'# 400'
nl|'\n'
name|'BAD_REQUEST'
op|':'
string|'"Bad Request"'
op|','
nl|'\n'
name|'UNAUTHORIZED'
op|':'
string|'"Unauthorized"'
op|','
nl|'\n'
name|'PAYMENT_REQUIRED'
op|':'
string|'"Payment Required"'
op|','
nl|'\n'
name|'FORBIDDEN'
op|':'
string|'"Forbidden"'
op|','
nl|'\n'
name|'NOT_FOUND'
op|':'
string|'"Not Found"'
op|','
nl|'\n'
name|'NOT_ALLOWED'
op|':'
string|'"Method Not Allowed"'
op|','
nl|'\n'
name|'NOT_ACCEPTABLE'
op|':'
string|'"Not Acceptable"'
op|','
nl|'\n'
name|'PROXY_AUTH_REQUIRED'
op|':'
string|'"Proxy Authentication Required"'
op|','
nl|'\n'
name|'REQUEST_TIMEOUT'
op|':'
string|'"Request Time-out"'
op|','
nl|'\n'
name|'CONFLICT'
op|':'
string|'"Conflict"'
op|','
nl|'\n'
name|'GONE'
op|':'
string|'"Gone"'
op|','
nl|'\n'
name|'LENGTH_REQUIRED'
op|':'
string|'"Length Required"'
op|','
nl|'\n'
name|'PRECONDITION_FAILED'
op|':'
string|'"Precondition Failed"'
op|','
nl|'\n'
name|'REQUEST_ENTITY_TOO_LARGE'
op|':'
string|'"Request Entity Too Large"'
op|','
nl|'\n'
name|'REQUEST_URI_TOO_LONG'
op|':'
string|'"Request-URI Too Long"'
op|','
nl|'\n'
name|'UNSUPPORTED_MEDIA_TYPE'
op|':'
string|'"Unsupported Media Type"'
op|','
nl|'\n'
name|'REQUESTED_RANGE_NOT_SATISFIABLE'
op|':'
string|'"Requested Range not satisfiable"'
op|','
nl|'\n'
name|'EXPECTATION_FAILED'
op|':'
string|'"Expectation Failed"'
op|','
nl|'\n'
nl|'\n'
comment|'# 500'
nl|'\n'
name|'INTERNAL_SERVER_ERROR'
op|':'
string|'"Internal Server Error"'
op|','
nl|'\n'
name|'NOT_IMPLEMENTED'
op|':'
string|'"Not Implemented"'
op|','
nl|'\n'
name|'BAD_GATEWAY'
op|':'
string|'"Bad Gateway"'
op|','
nl|'\n'
name|'SERVICE_UNAVAILABLE'
op|':'
string|'"Service Unavailable"'
op|','
nl|'\n'
name|'GATEWAY_TIMEOUT'
op|':'
string|'"Gateway Time-out"'
op|','
nl|'\n'
name|'HTTP_VERSION_NOT_SUPPORTED'
op|':'
string|'"HTTP Version not supported"'
op|','
nl|'\n'
name|'INSUFFICIENT_STORAGE_SPACE'
op|':'
string|'"Insufficient Storage Space"'
op|','
nl|'\n'
name|'NOT_EXTENDED'
op|':'
string|'"Not Extended"'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'CACHED'
op|'='
string|'"""Magic constant returned by http.Request methods to set cache\nvalidation headers when the request is conditional and the value fails\nthe condition."""'
newline|'\n'
nl|'\n'
comment|'# backwards compatability'
nl|'\n'
DECL|variable|responses
name|'responses'
op|'='
name|'RESPONSES'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# datetime parsing and formatting'
nl|'\n'
DECL|variable|weekdayname
name|'weekdayname'
op|'='
op|'['
string|"'Mon'"
op|','
string|"'Tue'"
op|','
string|"'Wed'"
op|','
string|"'Thu'"
op|','
string|"'Fri'"
op|','
string|"'Sat'"
op|','
string|"'Sun'"
op|']'
newline|'\n'
DECL|variable|monthname
name|'monthname'
op|'='
op|'['
name|'None'
op|','
nl|'\n'
string|"'Jan'"
op|','
string|"'Feb'"
op|','
string|"'Mar'"
op|','
string|"'Apr'"
op|','
string|"'May'"
op|','
string|"'Jun'"
op|','
nl|'\n'
string|"'Jul'"
op|','
string|"'Aug'"
op|','
string|"'Sep'"
op|','
string|"'Oct'"
op|','
string|"'Nov'"
op|','
string|"'Dec'"
op|']'
newline|'\n'
DECL|variable|weekdayname_lower
name|'weekdayname_lower'
op|'='
op|'['
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
name|'for'
name|'name'
name|'in'
name|'weekdayname'
op|']'
newline|'\n'
DECL|variable|monthname_lower
name|'monthname_lower'
op|'='
op|'['
name|'name'
name|'and'
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
name|'for'
name|'name'
name|'in'
name|'monthname'
op|']'
newline|'\n'
nl|'\n'
DECL|function|urlparse
name|'def'
name|'urlparse'
op|'('
name|'url'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Parse an URL into six components.\n\n    This is similar to L{urlparse.urlparse}, but rejects C{unicode} input\n    and always produces C{str} output.\n\n    @type url: C{str}\n\n    @raise TypeError: The given url was a C{unicode} string instead of a\n    C{str}.\n\n    @rtype: six-tuple of str\n    @return: The scheme, net location, path, params, query string, and fragment\n    of the URL.\n    """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'url'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'TypeError'
op|'('
string|'"url must be str, not unicode"'
op|')'
newline|'\n'
dedent|''
name|'scheme'
op|','
name|'netloc'
op|','
name|'path'
op|','
name|'params'
op|','
name|'query'
op|','
name|'fragment'
op|'='
name|'_urlparse'
op|'('
name|'url'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'scheme'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'scheme'
op|'='
name|'scheme'
op|'.'
name|'encode'
op|'('
string|"'ascii'"
op|')'
newline|'\n'
name|'netloc'
op|'='
name|'netloc'
op|'.'
name|'encode'
op|'('
string|"'ascii'"
op|')'
newline|'\n'
name|'path'
op|'='
name|'path'
op|'.'
name|'encode'
op|'('
string|"'ascii'"
op|')'
newline|'\n'
name|'query'
op|'='
name|'query'
op|'.'
name|'encode'
op|'('
string|"'ascii'"
op|')'
newline|'\n'
name|'fragment'
op|'='
name|'fragment'
op|'.'
name|'encode'
op|'('
string|"'ascii'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'scheme'
op|','
name|'netloc'
op|','
name|'path'
op|','
name|'params'
op|','
name|'query'
op|','
name|'fragment'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_qs
dedent|''
name|'def'
name|'parse_qs'
op|'('
name|'qs'
op|','
name|'keep_blank_values'
op|'='
number|'0'
op|','
name|'strict_parsing'
op|'='
number|'0'
op|','
name|'unquote'
op|'='
name|'unquote'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    like cgi.parse_qs, only with custom unquote function\n    """'
newline|'\n'
name|'d'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'items'
op|'='
op|'['
name|'s2'
name|'for'
name|'s1'
name|'in'
name|'qs'
op|'.'
name|'split'
op|'('
string|'"&"'
op|')'
name|'for'
name|'s2'
name|'in'
name|'s1'
op|'.'
name|'split'
op|'('
string|'";"'
op|')'
op|']'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'items'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'k'
op|','
name|'v'
op|'='
name|'item'
op|'.'
name|'split'
op|'('
string|'"="'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'strict_parsing'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'v'
name|'or'
name|'keep_blank_values'
op|':'
newline|'\n'
indent|'            '
name|'k'
op|'='
name|'unquote'
op|'('
name|'k'
op|'.'
name|'replace'
op|'('
string|'"+"'
op|','
string|'" "'
op|')'
op|')'
newline|'\n'
name|'v'
op|'='
name|'unquote'
op|'('
name|'v'
op|'.'
name|'replace'
op|'('
string|'"+"'
op|','
string|'" "'
op|')'
op|')'
newline|'\n'
name|'if'
name|'k'
name|'in'
name|'d'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'['
name|'k'
op|']'
op|'.'
name|'append'
op|'('
name|'v'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'['
name|'k'
op|']'
op|'='
op|'['
name|'v'
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|datetimeToString
dedent|''
name|'def'
name|'datetimeToString'
op|'('
name|'msSinceEpoch'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert seconds since epoch to HTTP datetime string.\n    """'
newline|'\n'
name|'if'
name|'msSinceEpoch'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'msSinceEpoch'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
dedent|''
name|'year'
op|','
name|'month'
op|','
name|'day'
op|','
name|'hh'
op|','
name|'mm'
op|','
name|'ss'
op|','
name|'wd'
op|','
name|'y'
op|','
name|'z'
op|'='
name|'time'
op|'.'
name|'gmtime'
op|'('
name|'msSinceEpoch'
op|')'
newline|'\n'
name|'s'
op|'='
string|'"%s, %02d %3s %4d %02d:%02d:%02d GMT"'
op|'%'
op|'('
nl|'\n'
name|'weekdayname'
op|'['
name|'wd'
op|']'
op|','
nl|'\n'
name|'day'
op|','
name|'monthname'
op|'['
name|'month'
op|']'
op|','
name|'year'
op|','
nl|'\n'
name|'hh'
op|','
name|'mm'
op|','
name|'ss'
op|')'
newline|'\n'
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|function|datetimeToLogString
dedent|''
name|'def'
name|'datetimeToLogString'
op|'('
name|'msSinceEpoch'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert seconds since epoch to log datetime string.\n    """'
newline|'\n'
name|'if'
name|'msSinceEpoch'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'msSinceEpoch'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
dedent|''
name|'year'
op|','
name|'month'
op|','
name|'day'
op|','
name|'hh'
op|','
name|'mm'
op|','
name|'ss'
op|','
name|'wd'
op|','
name|'y'
op|','
name|'z'
op|'='
name|'time'
op|'.'
name|'gmtime'
op|'('
name|'msSinceEpoch'
op|')'
newline|'\n'
name|'s'
op|'='
string|'"[%02d/%3s/%4d:%02d:%02d:%02d +0000]"'
op|'%'
op|'('
nl|'\n'
name|'day'
op|','
name|'monthname'
op|'['
name|'month'
op|']'
op|','
name|'year'
op|','
nl|'\n'
name|'hh'
op|','
name|'mm'
op|','
name|'ss'
op|')'
newline|'\n'
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
comment|"# a hack so we don't need to recalculate log datetime every hit,"
nl|'\n'
comment|'# at the price of a small, unimportant, inaccuracy.'
nl|'\n'
DECL|variable|_logDateTime
dedent|''
name|'_logDateTime'
op|'='
name|'None'
newline|'\n'
DECL|variable|_logDateTimeUsers
name|'_logDateTimeUsers'
op|'='
number|'0'
newline|'\n'
DECL|variable|_resetLogDateTimeID
name|'_resetLogDateTimeID'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|_resetLogDateTime
name|'def'
name|'_resetLogDateTime'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'_logDateTime'
newline|'\n'
name|'global'
name|'_resetLogDateTime'
newline|'\n'
name|'global'
name|'_resetLogDateTimeID'
newline|'\n'
name|'_logDateTime'
op|'='
name|'datetimeToLogString'
op|'('
op|')'
newline|'\n'
name|'_resetLogDateTimeID'
op|'='
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'1'
op|','
name|'_resetLogDateTime'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_logDateTimeStart
dedent|''
name|'def'
name|'_logDateTimeStart'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'_logDateTimeUsers'
newline|'\n'
name|'if'
name|'not'
name|'_logDateTimeUsers'
op|':'
newline|'\n'
indent|'        '
name|'_resetLogDateTime'
op|'('
op|')'
newline|'\n'
dedent|''
name|'_logDateTimeUsers'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|function|_logDateTimeStop
dedent|''
name|'def'
name|'_logDateTimeStop'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'_logDateTimeUsers'
newline|'\n'
name|'_logDateTimeUsers'
op|'-='
number|'1'
op|';'
newline|'\n'
name|'if'
op|'('
name|'not'
name|'_logDateTimeUsers'
name|'and'
name|'_resetLogDateTimeID'
nl|'\n'
name|'and'
name|'_resetLogDateTimeID'
op|'.'
name|'active'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'_resetLogDateTimeID'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|timegm
dedent|''
dedent|''
name|'def'
name|'timegm'
op|'('
name|'year'
op|','
name|'month'
op|','
name|'day'
op|','
name|'hour'
op|','
name|'minute'
op|','
name|'second'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert time tuple in GMT to seconds since epoch, GMT\n    """'
newline|'\n'
name|'EPOCH'
op|'='
number|'1970'
newline|'\n'
name|'if'
name|'year'
op|'<'
name|'EPOCH'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|'"Years prior to %d not supported"'
op|'%'
op|'('
name|'EPOCH'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'assert'
number|'1'
op|'<='
name|'month'
op|'<='
number|'12'
newline|'\n'
name|'days'
op|'='
number|'365'
op|'*'
op|'('
name|'year'
op|'-'
name|'EPOCH'
op|')'
op|'+'
name|'calendar'
op|'.'
name|'leapdays'
op|'('
name|'EPOCH'
op|','
name|'year'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'1'
op|','
name|'month'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'days'
op|'='
name|'days'
op|'+'
name|'calendar'
op|'.'
name|'mdays'
op|'['
name|'i'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'month'
op|'>'
number|'2'
name|'and'
name|'calendar'
op|'.'
name|'isleap'
op|'('
name|'year'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'days'
op|'='
name|'days'
op|'+'
number|'1'
newline|'\n'
dedent|''
name|'days'
op|'='
name|'days'
op|'+'
name|'day'
op|'-'
number|'1'
newline|'\n'
name|'hours'
op|'='
name|'days'
op|'*'
number|'24'
op|'+'
name|'hour'
newline|'\n'
name|'minutes'
op|'='
name|'hours'
op|'*'
number|'60'
op|'+'
name|'minute'
newline|'\n'
name|'seconds'
op|'='
name|'minutes'
op|'*'
number|'60'
op|'+'
name|'second'
newline|'\n'
name|'return'
name|'seconds'
newline|'\n'
nl|'\n'
DECL|function|stringToDatetime
dedent|''
name|'def'
name|'stringToDatetime'
op|'('
name|'dateString'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert an HTTP date string (one of three formats) to seconds since epoch.\n    """'
newline|'\n'
name|'parts'
op|'='
name|'dateString'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'parts'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|':'
number|'3'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
name|'weekdayname_lower'
op|':'
newline|'\n'
comment|'# Weekday is stupid. Might have been omitted.'
nl|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'stringToDatetime'
op|'('
string|'"Sun, "'
op|'+'
name|'dateString'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
comment|'# Guess not.'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'partlen'
op|'='
name|'len'
op|'('
name|'parts'
op|')'
newline|'\n'
name|'if'
op|'('
name|'partlen'
op|'=='
number|'5'
name|'or'
name|'partlen'
op|'=='
number|'6'
op|')'
name|'and'
name|'parts'
op|'['
number|'1'
op|']'
op|'.'
name|'isdigit'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# 1st date format: Sun, 06 Nov 1994 08:49:37 GMT'
nl|'\n'
comment|'# (Note: "GMT" is literal, not a variable timezone)'
nl|'\n'
comment|'# (also handles without "GMT")'
nl|'\n'
comment|'# This is the normal format'
nl|'\n'
indent|'        '
name|'day'
op|'='
name|'parts'
op|'['
number|'1'
op|']'
newline|'\n'
name|'month'
op|'='
name|'parts'
op|'['
number|'2'
op|']'
newline|'\n'
name|'year'
op|'='
name|'parts'
op|'['
number|'3'
op|']'
newline|'\n'
name|'time'
op|'='
name|'parts'
op|'['
number|'4'
op|']'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'partlen'
op|'=='
number|'3'
name|'or'
name|'partlen'
op|'=='
number|'4'
op|')'
name|'and'
name|'parts'
op|'['
number|'1'
op|']'
op|'.'
name|'find'
op|'('
string|"'-'"
op|')'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
comment|'# 2nd date format: Sunday, 06-Nov-94 08:49:37 GMT'
nl|'\n'
comment|'# (Note: "GMT" is literal, not a variable timezone)'
nl|'\n'
comment|'# (also handles without without "GMT")'
nl|'\n'
comment|'# Two digit year, yucko.'
nl|'\n'
indent|'        '
name|'day'
op|','
name|'month'
op|','
name|'year'
op|'='
name|'parts'
op|'['
number|'1'
op|']'
op|'.'
name|'split'
op|'('
string|"'-'"
op|')'
newline|'\n'
name|'time'
op|'='
name|'parts'
op|'['
number|'2'
op|']'
newline|'\n'
name|'year'
op|'='
name|'int'
op|'('
name|'year'
op|')'
newline|'\n'
name|'if'
name|'year'
op|'<'
number|'69'
op|':'
newline|'\n'
indent|'            '
name|'year'
op|'='
name|'year'
op|'+'
number|'2000'
newline|'\n'
dedent|''
name|'elif'
name|'year'
op|'<'
number|'100'
op|':'
newline|'\n'
indent|'            '
name|'year'
op|'='
name|'year'
op|'+'
number|'1900'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'len'
op|'('
name|'parts'
op|')'
op|'=='
number|'5'
op|':'
newline|'\n'
comment|'# 3rd date format: Sun Nov  6 08:49:37 1994'
nl|'\n'
comment|'# ANSI C asctime() format.'
nl|'\n'
indent|'        '
name|'day'
op|'='
name|'parts'
op|'['
number|'2'
op|']'
newline|'\n'
name|'month'
op|'='
name|'parts'
op|'['
number|'1'
op|']'
newline|'\n'
name|'year'
op|'='
name|'parts'
op|'['
number|'4'
op|']'
newline|'\n'
name|'time'
op|'='
name|'parts'
op|'['
number|'3'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|'"Unknown datetime format %r"'
op|'%'
name|'dateString'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'day'
op|'='
name|'int'
op|'('
name|'day'
op|')'
newline|'\n'
name|'month'
op|'='
name|'int'
op|'('
name|'monthname_lower'
op|'.'
name|'index'
op|'('
name|'month'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'year'
op|'='
name|'int'
op|'('
name|'year'
op|')'
newline|'\n'
name|'hour'
op|','
name|'min'
op|','
name|'sec'
op|'='
name|'map'
op|'('
name|'int'
op|','
name|'time'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'int'
op|'('
name|'timegm'
op|'('
name|'year'
op|','
name|'month'
op|','
name|'day'
op|','
name|'hour'
op|','
name|'min'
op|','
name|'sec'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|toChunk
dedent|''
name|'def'
name|'toChunk'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert string to a chunk.\n\n    @returns: a tuple of strings representing the chunked encoding of data\n    """'
newline|'\n'
name|'return'
op|'('
string|'"%x\\r\\n"'
op|'%'
name|'len'
op|'('
name|'data'
op|')'
op|','
name|'data'
op|','
string|'"\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fromChunk
dedent|''
name|'def'
name|'fromChunk'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert chunk to string.\n\n    @returns: tuple (result, remaining), may raise ValueError.\n    """'
newline|'\n'
name|'prefix'
op|','
name|'rest'
op|'='
name|'data'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|','
number|'1'
op|')'
newline|'\n'
name|'length'
op|'='
name|'int'
op|'('
name|'prefix'
op|','
number|'16'
op|')'
newline|'\n'
name|'if'
name|'length'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|'"Chunk length must be >= 0, not %d"'
op|'%'
op|'('
name|'length'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'rest'
op|'['
name|'length'
op|':'
name|'length'
op|'+'
number|'2'
op|']'
op|'=='
string|"'\\r\\n'"
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|','
string|'"chunk must end with CRLF"'
newline|'\n'
dedent|''
name|'return'
name|'rest'
op|'['
op|':'
name|'length'
op|']'
op|','
name|'rest'
op|'['
name|'length'
op|'+'
number|'2'
op|':'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parseContentRange
dedent|''
name|'def'
name|'parseContentRange'
op|'('
name|'header'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Parse a content-range header into (start, end, realLength).\n\n    realLength might be None if real length is not known (\'*\').\n    """'
newline|'\n'
name|'kind'
op|','
name|'other'
op|'='
name|'header'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'kind'
op|'.'
name|'lower'
op|'('
op|')'
op|'!='
string|'"bytes"'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|','
string|'"a range of type %r is not supported"'
newline|'\n'
dedent|''
name|'startend'
op|','
name|'realLength'
op|'='
name|'other'
op|'.'
name|'split'
op|'('
string|'"/"'
op|')'
newline|'\n'
name|'start'
op|','
name|'end'
op|'='
name|'map'
op|'('
name|'int'
op|','
name|'startend'
op|'.'
name|'split'
op|'('
string|'"-"'
op|')'
op|')'
newline|'\n'
name|'if'
name|'realLength'
op|'=='
string|'"*"'
op|':'
newline|'\n'
indent|'        '
name|'realLength'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'realLength'
op|'='
name|'int'
op|'('
name|'realLength'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'start'
op|','
name|'end'
op|','
name|'realLength'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StringTransport
dedent|''
name|'class'
name|'StringTransport'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I am a StringIO wrapper that conforms for the transport API. I support\n    the `writeSequence\' method.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'s'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
DECL|member|writeSequence
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'seq'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'s'
op|'.'
name|'write'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'seq'
op|')'
op|')'
newline|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'attr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'s'"
op|']'
op|','
name|'attr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HTTPClient
dedent|''
dedent|''
name|'class'
name|'HTTPClient'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A client for HTTP 1.0.\n\n    Notes:\n    You probably want to send a \'Host\' header with the name of the site you\'re\n    connecting to, in order to not break name based virtual hosting.\n\n    @ivar length: The length of the request body in bytes.\n    @type length: C{int}\n\n    @ivar firstLine: Are we waiting for the first header line?\n    @type firstLine: C{bool}\n\n    @ivar __buffer: The buffer that stores the response to the HTTP request.\n    @type __buffer: A C{StringIO} object.\n\n    @ivar _header: Part or all of an HTTP request header.\n    @type _header: C{str}\n    """'
newline|'\n'
DECL|variable|length
name|'length'
op|'='
name|'None'
newline|'\n'
DECL|variable|firstLine
name|'firstLine'
op|'='
name|'True'
newline|'\n'
DECL|variable|__buffer
name|'__buffer'
op|'='
name|'None'
newline|'\n'
DECL|variable|_header
name|'_header'
op|'='
string|'""'
newline|'\n'
nl|'\n'
DECL|member|sendCommand
name|'def'
name|'sendCommand'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|"'%s %s HTTP/1.0\\r\\n'"
op|'%'
op|'('
name|'command'
op|','
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendHeader
dedent|''
name|'def'
name|'sendHeader'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|"'%s: %s\\r\\n'"
op|'%'
op|'('
name|'name'
op|','
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|endHeaders
dedent|''
name|'def'
name|'endHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|"'\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|extractHeader
dedent|''
name|'def'
name|'extractHeader'
op|'('
name|'self'
op|','
name|'header'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a complete HTTP header, extract the field name and value and\n        process the header.\n\n        @param header: a complete HTTP request header of the form\n            \'field-name: value\'.\n        @type header: C{str}\n        """'
newline|'\n'
name|'key'
op|','
name|'val'
op|'='
name|'header'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'val'
op|'='
name|'val'
op|'.'
name|'lstrip'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'handleHeader'
op|'('
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
name|'if'
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'content-length'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'length'
op|'='
name|'int'
op|'('
name|'val'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse the status line and headers for an HTTP request.\n\n        @param line: Part of an HTTP request header. Request bodies are parsed\n            in L{rawDataReceived}.\n        @type line: C{str}\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'firstLine'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'firstLine'
op|'='
name|'False'
newline|'\n'
name|'l'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'2'
op|')'
newline|'\n'
name|'version'
op|'='
name|'l'
op|'['
number|'0'
op|']'
newline|'\n'
name|'status'
op|'='
name|'l'
op|'['
number|'1'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'message'
op|'='
name|'l'
op|'['
number|'2'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
comment|'# sometimes there is no message'
nl|'\n'
indent|'                '
name|'message'
op|'='
string|'""'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'handleStatus'
op|'('
name|'version'
op|','
name|'status'
op|','
name|'message'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'line'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_header'
op|'!='
string|'""'
op|':'
newline|'\n'
comment|'# Only extract headers if there are any'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'extractHeader'
op|'('
name|'self'
op|'.'
name|'_header'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'__buffer'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'handleEndHeaders'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'setRawMode'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'line'
op|'.'
name|'startswith'
op|'('
string|"'\\t'"
op|')'
name|'or'
name|'line'
op|'.'
name|'startswith'
op|'('
string|"' '"
op|')'
op|':'
newline|'\n'
comment|'# This line is part of a multiline header. According to RFC 822, in'
nl|'\n'
comment|'# "unfolding" multiline headers you do not strip the leading'
nl|'\n'
comment|'# whitespace on the continuing line.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_header'
op|'='
name|'self'
op|'.'
name|'_header'
op|'+'
name|'line'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'_header'
op|':'
newline|'\n'
comment|'# This line starts a new header, so process the previous one.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'extractHeader'
op|'('
name|'self'
op|'.'
name|'_header'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_header'
op|'='
name|'line'
newline|'\n'
dedent|''
name|'else'
op|':'
comment|'# First header'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_header'
op|'='
name|'line'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'handleResponseEnd'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleResponseEnd
dedent|''
name|'def'
name|'handleResponseEnd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The response has been completely received.\n\n        This callback may be invoked more than once per request.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'__buffer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'b'
op|'='
name|'self'
op|'.'
name|'__buffer'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'__buffer'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'handleResponse'
op|'('
name|'b'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleResponsePart
dedent|''
dedent|''
name|'def'
name|'handleResponsePart'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__buffer'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|handleStatus
dedent|''
name|'def'
name|'handleStatus'
op|'('
name|'self'
op|','
name|'version'
op|','
name|'status'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the status-line is received.\n\n        @param version: e.g. \'HTTP/1.0\'\n        @param status: e.g. \'200\'\n        @type status: C{str}\n        @param message: e.g. \'OK\'\n        """'
newline|'\n'
nl|'\n'
DECL|member|handleHeader
dedent|''
name|'def'
name|'handleHeader'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called every time a header is received.\n        """'
newline|'\n'
nl|'\n'
DECL|member|handleEndHeaders
dedent|''
name|'def'
name|'handleEndHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when all headers have been received.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|rawDataReceived
dedent|''
name|'def'
name|'rawDataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'length'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|','
name|'rest'
op|'='
name|'data'
op|'['
op|':'
name|'self'
op|'.'
name|'length'
op|']'
op|','
name|'data'
op|'['
name|'self'
op|'.'
name|'length'
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'length'
op|'-='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'rest'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'handleResponsePart'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'length'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'handleResponseEnd'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'setLineMode'
op|'('
name|'rest'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'# response codes that must have empty bodies'
nl|'\n'
DECL|variable|NO_BODY_CODES
dedent|''
dedent|''
dedent|''
name|'NO_BODY_CODES'
op|'='
op|'('
number|'204'
op|','
number|'304'
op|')'
newline|'\n'
nl|'\n'
DECL|class|Request
name|'class'
name|'Request'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A HTTP request.\n\n    Subclasses should override the process() method to determine how\n    the request will be processed.\n\n    @ivar method: The HTTP method that was used.\n    @ivar uri: The full URI that was requested (includes arguments).\n    @ivar path: The path only (arguments not included).\n    @ivar args: All of the arguments, including URL and POST arguments.\n    @type args: A mapping of strings (the argument names) to lists of values.\n                i.e., ?foo=bar&foo=baz&quux=spam results in\n                {\'foo\': [\'bar\', \'baz\'], \'quux\': [\'spam\']}.\n\n    @type requestHeaders: L{http_headers.Headers}\n    @ivar requestHeaders: All received HTTP request headers.\n\n    @ivar received_headers: Backwards-compatibility access to\n        C{requestHeaders}.  Use C{requestHeaders} instead.  C{received_headers}\n        behaves mostly like a C{dict} and does not provide access to all header\n        values.\n\n    @type responseHeaders: L{http_headers.Headers}\n    @ivar responseHeaders: All HTTP response headers to be sent.\n\n    @ivar headers: Backwards-compatibility access to C{responseHeaders}.  Use\n        C{responseHeaders} instead.  C{headers} behaves mostly like a C{dict}\n        and does not provide access to all header values nor does it allow\n        multiple values for one header to be set.\n\n    @ivar notifications: A C{list} of L{Deferred}s which are waiting for\n        notification that the response to this request has been finished\n        (successfully or with an error).  Don\'t use this attribute directly,\n        instead use the L{Request.notifyFinish} method.\n\n    @ivar _disconnected: A flag which is C{False} until the connection over\n        which this request was received is closed and which is C{True} after\n        that.\n    @type _disconnected: C{bool}\n    """'
newline|'\n'
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'IConsumer'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|producer
name|'producer'
op|'='
name|'None'
newline|'\n'
DECL|variable|finished
name|'finished'
op|'='
number|'0'
newline|'\n'
DECL|variable|code
name|'code'
op|'='
name|'OK'
newline|'\n'
DECL|variable|code_message
name|'code_message'
op|'='
name|'RESPONSES'
op|'['
name|'OK'
op|']'
newline|'\n'
DECL|variable|method
name|'method'
op|'='
string|'"(no method yet)"'
newline|'\n'
DECL|variable|clientproto
name|'clientproto'
op|'='
string|'"(no clientproto yet)"'
newline|'\n'
DECL|variable|uri
name|'uri'
op|'='
string|'"(no uri yet)"'
newline|'\n'
DECL|variable|startedWriting
name|'startedWriting'
op|'='
number|'0'
newline|'\n'
DECL|variable|chunked
name|'chunked'
op|'='
number|'0'
newline|'\n'
DECL|variable|sentLength
name|'sentLength'
op|'='
number|'0'
comment|'# content-length of response, or total bytes sent via chunking'
newline|'\n'
DECL|variable|etag
name|'etag'
op|'='
name|'None'
newline|'\n'
DECL|variable|lastModified
name|'lastModified'
op|'='
name|'None'
newline|'\n'
DECL|variable|args
name|'args'
op|'='
name|'None'
newline|'\n'
DECL|variable|path
name|'path'
op|'='
name|'None'
newline|'\n'
DECL|variable|content
name|'content'
op|'='
name|'None'
newline|'\n'
DECL|variable|_forceSSL
name|'_forceSSL'
op|'='
number|'0'
newline|'\n'
DECL|variable|_disconnected
name|'_disconnected'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'queued'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param channel: the channel we\'re connected to.\n        @param queued: are we in the request queue, or can we start writing to\n            the transport?\n        """'
newline|'\n'
name|'self'
op|'.'
name|'notifications'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'='
name|'channel'
newline|'\n'
name|'self'
op|'.'
name|'queued'
op|'='
name|'queued'
newline|'\n'
name|'self'
op|'.'
name|'requestHeaders'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'received_cookies'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'responseHeaders'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cookies'
op|'='
op|'['
op|']'
comment|'# outgoing cookies'
newline|'\n'
nl|'\n'
name|'if'
name|'queued'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'='
name|'self'
op|'.'
name|'channel'
op|'.'
name|'transport'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__setattr__
dedent|''
dedent|''
name|'def'
name|'__setattr__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Support assignment of C{dict} instances to C{received_headers} for\n        backwards-compatibility.\n        """'
newline|'\n'
name|'if'
name|'name'
op|'=='
string|"'received_headers'"
op|':'
newline|'\n'
comment|'# A property would be nice, but Request is classic.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'requestHeaders'
op|'='
name|'headers'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'value'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'headers'
op|'.'
name|'setRawHeaders'
op|'('
name|'k'
op|','
op|'['
name|'v'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'requestHeaders'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__dict__'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'received_headers'"
op|']'
op|'='
name|'_DictHeaders'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'headers'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'responseHeaders'
op|'='
name|'headers'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'value'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'headers'
op|'.'
name|'setRawHeaders'
op|'('
name|'k'
op|','
op|'['
name|'v'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'responseHeaders'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__dict__'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'headers'"
op|']'
op|'='
name|'_DictHeaders'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__dict__'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cleanup
dedent|''
dedent|''
name|'def'
name|'_cleanup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when have finished responding and are no longer queued.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'producer'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
name|'RuntimeError'
op|'('
string|'"Producer was not unregistered for %s"'
op|'%'
name|'self'
op|'.'
name|'uri'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'channel'
op|'.'
name|'requestDone'
op|'('
name|'self'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'channel'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'content'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
comment|'# win32 suckiness, no idea why it does this'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'content'
newline|'\n'
name|'for'
name|'d'
name|'in'
name|'self'
op|'.'
name|'notifications'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'notifications'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# methods for channel - end users should not use these'
nl|'\n'
nl|'\n'
DECL|member|noLongerQueued
dedent|''
name|'def'
name|'noLongerQueued'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Notify the object that it is no longer queued.\n\n        We start writing whatever data we have to the transport, etc.\n\n        This method is not intended for users.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'queued'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|','
string|'"noLongerQueued() got called unnecessarily."'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'queued'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'# set transport to real one and send any buffer data'
nl|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'self'
op|'.'
name|'channel'
op|'.'
name|'transport'
newline|'\n'
name|'if'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
comment|'# if we have producer, register it with transport'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'self'
op|'.'
name|'producer'
name|'is'
name|'not'
name|'None'
op|')'
name|'and'
name|'not'
name|'self'
op|'.'
name|'finished'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|'.'
name|'producer'
op|','
name|'self'
op|'.'
name|'streamingProducer'
op|')'
newline|'\n'
nl|'\n'
comment|"# if we're finished, clean up"
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'finished'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cleanup'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|gotLength
dedent|''
dedent|''
name|'def'
name|'gotLength'
op|'('
name|'self'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when HTTP channel got length of content in this request.\n\n        This method is not intended for users.\n\n        @param length: The length of the request body, as indicated by the\n            request headers.  C{None} if the request headers do not indicate a\n            length.\n        """'
newline|'\n'
name|'if'
name|'length'
name|'is'
name|'not'
name|'None'
name|'and'
name|'length'
op|'<'
number|'100000'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'content'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'content'
op|'='
name|'tempfile'
op|'.'
name|'TemporaryFile'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|parseCookies
dedent|''
dedent|''
name|'def'
name|'parseCookies'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse cookie headers.\n\n        This method is not intended for users.\n        """'
newline|'\n'
name|'cookieheaders'
op|'='
name|'self'
op|'.'
name|'requestHeaders'
op|'.'
name|'getRawHeaders'
op|'('
string|'"cookie"'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'cookieheaders'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'cookietxt'
name|'in'
name|'cookieheaders'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'cookietxt'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'cook'
name|'in'
name|'cookietxt'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'cook'
op|'='
name|'cook'
op|'.'
name|'lstrip'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'k'
op|','
name|'v'
op|'='
name|'cook'
op|'.'
name|'split'
op|'('
string|"'='"
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'received_cookies'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|handleContentChunk
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'handleContentChunk'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write a chunk of data.\n\n        This method is not intended for users.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'content'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|requestReceived
dedent|''
name|'def'
name|'requestReceived'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'path'
op|','
name|'version'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called by channel when all data has been received.\n\n        This method is not intended for users.\n\n        @type command: C{str}\n        @param command: The HTTP verb of this request.  This has the case\n            supplied by the client (eg, it maybe "get" rather than "GET").\n\n        @type path: C{str}\n        @param path: The URI of this request.\n\n        @type version: C{str}\n        @param version: The HTTP version of this request.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'content'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'stack'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'method'
op|','
name|'self'
op|'.'
name|'uri'
op|'='
name|'command'
op|','
name|'path'
newline|'\n'
name|'self'
op|'.'
name|'clientproto'
op|'='
name|'version'
newline|'\n'
name|'x'
op|'='
name|'self'
op|'.'
name|'uri'
op|'.'
name|'split'
op|'('
string|"'?'"
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'x'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'path'
op|'='
name|'self'
op|'.'
name|'uri'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'path'
op|','
name|'argstring'
op|'='
name|'x'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
name|'parse_qs'
op|'('
name|'argstring'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|"# cache the client and server information, we'll need this later to be"
nl|'\n'
comment|'# serialized and sent with the request so CGIs will work remotely'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'='
name|'self'
op|'.'
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'host'
op|'='
name|'self'
op|'.'
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Argument processing'
nl|'\n'
name|'args'
op|'='
name|'self'
op|'.'
name|'args'
newline|'\n'
name|'ctype'
op|'='
name|'self'
op|'.'
name|'requestHeaders'
op|'.'
name|'getRawHeaders'
op|'('
string|"'content-type'"
op|')'
newline|'\n'
name|'if'
name|'ctype'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'ctype'
op|'='
name|'ctype'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'method'
op|'=='
string|'"POST"'
name|'and'
name|'ctype'
op|':'
newline|'\n'
indent|'            '
name|'mfd'
op|'='
string|"'multipart/form-data'"
newline|'\n'
name|'key'
op|','
name|'pdict'
op|'='
name|'cgi'
op|'.'
name|'parse_header'
op|'('
name|'ctype'
op|')'
newline|'\n'
name|'if'
name|'key'
op|'=='
string|"'application/x-www-form-urlencoded'"
op|':'
newline|'\n'
indent|'                '
name|'args'
op|'.'
name|'update'
op|'('
name|'parse_qs'
op|'('
name|'self'
op|'.'
name|'content'
op|'.'
name|'read'
op|'('
op|')'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'key'
op|'=='
name|'mfd'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'args'
op|'.'
name|'update'
op|'('
name|'cgi'
op|'.'
name|'parse_multipart'
op|'('
name|'self'
op|'.'
name|'content'
op|','
name|'pdict'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|'=='
string|"'content-disposition'"
op|':'
newline|'\n'
comment|"# Parse_multipart can't cope with missing"
nl|'\n'
comment|'# content-dispostion headers in multipart/form-data'
nl|'\n'
comment|'# parts, so we catch the exception and tell the client'
nl|'\n'
comment|'# it was a bad request.'
nl|'\n'
indent|'                        '
name|'self'
op|'.'
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
nl|'\n'
string|'"HTTP/1.1 400 Bad Request\\r\\n\\r\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'content'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<%s %s %s>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'method'
op|','
name|'self'
op|'.'
name|'uri'
op|','
name|'self'
op|'.'
name|'clientproto'
op|')'
newline|'\n'
nl|'\n'
DECL|member|process
dedent|''
name|'def'
name|'process'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override in subclasses.\n\n        This method is not intended for users.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# consumer interface'
nl|'\n'
nl|'\n'
DECL|member|registerProducer
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Register a producer.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'producer'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|'"registering producer %s before previous one (%s) was unregistered"'
op|'%'
op|'('
name|'producer'
op|','
name|'self'
op|'.'
name|'producer'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'streamingProducer'
op|'='
name|'streaming'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'='
name|'producer'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'queued'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'streaming'
op|':'
newline|'\n'
indent|'                '
name|'producer'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'registerProducer'
op|'('
name|'producer'
op|','
name|'streaming'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Unregister the producer.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'queued'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'producer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# private http response methods'
nl|'\n'
nl|'\n'
DECL|member|_sendError
dedent|''
name|'def'
name|'_sendError'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|"'%s %s %s\\r\\n\\r\\n'"
op|'%'
op|'('
name|'self'
op|'.'
name|'clientproto'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# The following is the public interface that people should be'
nl|'\n'
comment|'# writing to.'
nl|'\n'
DECL|member|getHeader
dedent|''
name|'def'
name|'getHeader'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get an HTTP request header.\n\n        @type key: C{str}\n        @param key: The name of the header to get the value of.\n\n        @rtype: C{str} or C{NoneType}\n        @return: The value of the specified header, or C{None} if that header\n            was not present in the request.\n        """'
newline|'\n'
name|'value'
op|'='
name|'self'
op|'.'
name|'requestHeaders'
op|'.'
name|'getRawHeaders'
op|'('
name|'key'
op|')'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'value'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getCookie
dedent|''
dedent|''
name|'def'
name|'getCookie'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a cookie that was sent from the network.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'received_cookies'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|notifyFinish
dedent|''
name|'def'
name|'notifyFinish'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Notify when the response to this request has finished.\n\n        @rtype: L{Deferred}\n\n        @return: A L{Deferred} which will be triggered when the request is\n            finished -- with a C{None} value if the request finishes\n            successfully or with an error if the request is interrupted by an\n            error (for example, the client closing the connection prematurely).\n        """'
newline|'\n'
name|'self'
op|'.'
name|'notifications'
op|'.'
name|'append'
op|'('
name|'Deferred'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'notifications'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|finish
dedent|''
name|'def'
name|'finish'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Indicate that all response data has been written to this L{Request}.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_disconnected'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
nl|'\n'
string|'"Request.finish called on a request after its connection was lost; "'
nl|'\n'
string|'"use Request.notifyFinish to keep track of this."'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'finished'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Warning! request.finish called twice."'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'startedWriting'
op|':'
newline|'\n'
comment|'# write headers'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'('
string|"''"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'chunked'
op|':'
newline|'\n'
comment|'# write last chunk and closing CRLF'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"0\\r\\n\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
comment|'# log request'
nl|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'channel'
op|','
string|'"factory"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'channel'
op|'.'
name|'factory'
op|'.'
name|'log'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'finished'
op|'='
number|'1'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'queued'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cleanup'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write some data as a result of an HTTP request.  The first\n        time this is called, it writes out response data.\n\n        @type data: C{str}\n        @param data: Some bytes to be sent as part of the response body.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'startedWriting'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'startedWriting'
op|'='
number|'1'
newline|'\n'
name|'version'
op|'='
name|'self'
op|'.'
name|'clientproto'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'l'
op|'.'
name|'append'
op|'('
string|"'%s %s %s\\r\\n'"
op|'%'
op|'('
name|'version'
op|','
name|'self'
op|'.'
name|'code'
op|','
nl|'\n'
name|'self'
op|'.'
name|'code_message'
op|')'
op|')'
newline|'\n'
comment|"# if we don't have a content length, we send data in"
nl|'\n'
comment|'# chunked mode, so that we can support pipelining in'
nl|'\n'
comment|'# persistent connections.'
nl|'\n'
name|'if'
op|'('
op|'('
name|'version'
op|'=='
string|'"HTTP/1.1"'
op|')'
name|'and'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'responseHeaders'
op|'.'
name|'getRawHeaders'
op|'('
string|"'content-length'"
op|')'
name|'is'
name|'None'
op|')'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'method'
op|'!='
string|'"HEAD"'
name|'and'
name|'self'
op|'.'
name|'code'
name|'not'
name|'in'
name|'NO_BODY_CODES'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'l'
op|'.'
name|'append'
op|'('
string|'"%s: %s\\r\\n"'
op|'%'
op|'('
string|"'Transfer-Encoding'"
op|','
string|"'chunked'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'chunked'
op|'='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'lastModified'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'responseHeaders'
op|'.'
name|'hasHeader'
op|'('
string|"'last-modified'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Warning: last-modified specified both in"'
nl|'\n'
string|'" header list and lastModified attribute."'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'responseHeaders'
op|'.'
name|'setRawHeaders'
op|'('
nl|'\n'
string|"'last-modified'"
op|','
nl|'\n'
op|'['
name|'datetimeToString'
op|'('
name|'self'
op|'.'
name|'lastModified'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'etag'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'responseHeaders'
op|'.'
name|'setRawHeaders'
op|'('
string|"'ETag'"
op|','
op|'['
name|'self'
op|'.'
name|'etag'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'name'
op|','
name|'values'
name|'in'
name|'self'
op|'.'
name|'responseHeaders'
op|'.'
name|'getAllRawHeaders'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'value'
name|'in'
name|'values'
op|':'
newline|'\n'
indent|'                    '
name|'l'
op|'.'
name|'append'
op|'('
string|'"%s: %s\\r\\n"'
op|'%'
op|'('
name|'name'
op|','
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'cookie'
name|'in'
name|'self'
op|'.'
name|'cookies'
op|':'
newline|'\n'
indent|'                '
name|'l'
op|'.'
name|'append'
op|'('
string|"'%s: %s\\r\\n'"
op|'%'
op|'('
string|'"Set-Cookie"'
op|','
name|'cookie'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'l'
op|'.'
name|'append'
op|'('
string|'"\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'writeSequence'
op|'('
name|'l'
op|')'
newline|'\n'
nl|'\n'
comment|'# if this is a "HEAD" request, we shouldn\'t return any data'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'method'
op|'=='
string|'"HEAD"'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'write'
op|'='
name|'lambda'
name|'data'
op|':'
name|'None'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|'# for certain result codes, we should never return any data'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'code'
name|'in'
name|'NO_BODY_CODES'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'write'
op|'='
name|'lambda'
name|'data'
op|':'
name|'None'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'sentLength'
op|'='
name|'self'
op|'.'
name|'sentLength'
op|'+'
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'chunked'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'writeSequence'
op|'('
name|'toChunk'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addCookie
dedent|''
dedent|''
dedent|''
name|'def'
name|'addCookie'
op|'('
name|'self'
op|','
name|'k'
op|','
name|'v'
op|','
name|'expires'
op|'='
name|'None'
op|','
name|'domain'
op|'='
name|'None'
op|','
name|'path'
op|'='
name|'None'
op|','
name|'max_age'
op|'='
name|'None'
op|','
name|'comment'
op|'='
name|'None'
op|','
name|'secure'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set an outgoing HTTP cookie.\n\n        In general, you should consider using sessions instead of cookies, see\n        L{twisted.web.server.Request.getSession} and the\n        L{twisted.web.server.Session} class for details.\n        """'
newline|'\n'
name|'cookie'
op|'='
string|"'%s=%s'"
op|'%'
op|'('
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
name|'if'
name|'expires'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'cookie'
op|'='
name|'cookie'
op|'+'
string|'"; Expires=%s"'
op|'%'
name|'expires'
newline|'\n'
dedent|''
name|'if'
name|'domain'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'cookie'
op|'='
name|'cookie'
op|'+'
string|'"; Domain=%s"'
op|'%'
name|'domain'
newline|'\n'
dedent|''
name|'if'
name|'path'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'cookie'
op|'='
name|'cookie'
op|'+'
string|'"; Path=%s"'
op|'%'
name|'path'
newline|'\n'
dedent|''
name|'if'
name|'max_age'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'cookie'
op|'='
name|'cookie'
op|'+'
string|'"; Max-Age=%s"'
op|'%'
name|'max_age'
newline|'\n'
dedent|''
name|'if'
name|'comment'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'cookie'
op|'='
name|'cookie'
op|'+'
string|'"; Comment=%s"'
op|'%'
name|'comment'
newline|'\n'
dedent|''
name|'if'
name|'secure'
op|':'
newline|'\n'
indent|'            '
name|'cookie'
op|'='
name|'cookie'
op|'+'
string|'"; Secure"'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'cookies'
op|'.'
name|'append'
op|'('
name|'cookie'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setResponseCode
dedent|''
name|'def'
name|'setResponseCode'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'message'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the HTTP response code.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'code'
op|','
op|'('
name|'int'
op|','
name|'long'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|'"HTTP response code must be int or long"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'code'
op|'='
name|'code'
newline|'\n'
name|'if'
name|'message'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'code_message'
op|'='
name|'message'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'code_message'
op|'='
name|'RESPONSES'
op|'.'
name|'get'
op|'('
name|'code'
op|','
string|'"Unknown Status"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setHeader
dedent|''
dedent|''
name|'def'
name|'setHeader'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set an HTTP response header.  Overrides any previously set values for\n        this header.\n\n        @type name: C{str}\n        @param name: The name of the header for which to set the value.\n\n        @type value: C{str}\n        @param value: The value to set for the named header.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'responseHeaders'
op|'.'
name|'setRawHeaders'
op|'('
name|'name'
op|','
op|'['
name|'value'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|redirect
dedent|''
name|'def'
name|'redirect'
op|'('
name|'self'
op|','
name|'url'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Utility function that does a redirect.\n\n        The request should have finish() called after this.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'setResponseCode'
op|'('
name|'FOUND'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'setHeader'
op|'('
string|'"location"'
op|','
name|'url'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setLastModified
dedent|''
name|'def'
name|'setLastModified'
op|'('
name|'self'
op|','
name|'when'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the C{Last-Modified} time for the response to this request.\n\n        If I am called more than once, I ignore attempts to set\n        Last-Modified earlier, only replacing the Last-Modified time\n        if it is to a later value.\n\n        If I am a conditional request, I may modify my response code\n        to L{NOT_MODIFIED} if appropriate for the time given.\n\n        @param when: The last time the resource being returned was\n            modified, in seconds since the epoch.\n        @type when: number\n        @return: If I am a C{If-Modified-Since} conditional request and\n            the time given is not newer than the condition, I return\n            L{http.CACHED<CACHED>} to indicate that you should write no\n            body.  Otherwise, I return a false value.\n        """'
newline|'\n'
comment|'# time.time() may be a float, but the HTTP-date strings are'
nl|'\n'
comment|'# only good for whole seconds.'
nl|'\n'
name|'when'
op|'='
name|'long'
op|'('
name|'math'
op|'.'
name|'ceil'
op|'('
name|'when'
op|')'
op|')'
newline|'\n'
name|'if'
op|'('
name|'not'
name|'self'
op|'.'
name|'lastModified'
op|')'
name|'or'
op|'('
name|'self'
op|'.'
name|'lastModified'
op|'<'
name|'when'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'lastModified'
op|'='
name|'when'
newline|'\n'
nl|'\n'
dedent|''
name|'modifiedSince'
op|'='
name|'self'
op|'.'
name|'getHeader'
op|'('
string|"'if-modified-since'"
op|')'
newline|'\n'
name|'if'
name|'modifiedSince'
op|':'
newline|'\n'
indent|'            '
name|'firstPart'
op|'='
name|'modifiedSince'
op|'.'
name|'split'
op|'('
string|"';'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'modifiedSince'
op|'='
name|'stringToDatetime'
op|'('
name|'firstPart'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'modifiedSince'
op|'>='
name|'when'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'setResponseCode'
op|'('
name|'NOT_MODIFIED'
op|')'
newline|'\n'
name|'return'
name|'CACHED'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|setETag
dedent|''
name|'def'
name|'setETag'
op|'('
name|'self'
op|','
name|'etag'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set an C{entity tag} for the outgoing response.\n\n        That\'s \\"entity tag\\" as in the HTTP/1.1 C{ETag} header, \\"used\n        for comparing two or more entities from the same requested\n        resource.\\"\n\n        If I am a conditional request, I may modify my response code\n        to L{NOT_MODIFIED} or L{PRECONDITION_FAILED}, if appropriate\n        for the tag given.\n\n        @param etag: The entity tag for the resource being returned.\n        @type etag: string\n        @return: If I am a C{If-None-Match} conditional request and\n            the tag matches one in the request, I return\n            L{http.CACHED<CACHED>} to indicate that you should write\n            no body.  Otherwise, I return a false value.\n        """'
newline|'\n'
name|'if'
name|'etag'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'etag'
op|'='
name|'etag'
newline|'\n'
nl|'\n'
dedent|''
name|'tags'
op|'='
name|'self'
op|'.'
name|'getHeader'
op|'('
string|'"if-none-match"'
op|')'
newline|'\n'
name|'if'
name|'tags'
op|':'
newline|'\n'
indent|'            '
name|'tags'
op|'='
name|'tags'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
op|'('
name|'etag'
name|'in'
name|'tags'
op|')'
name|'or'
op|'('
string|"'*'"
name|'in'
name|'tags'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'setResponseCode'
op|'('
op|'('
op|'('
name|'self'
op|'.'
name|'method'
name|'in'
op|'('
string|'"HEAD"'
op|','
string|'"GET"'
op|')'
op|')'
nl|'\n'
name|'and'
name|'NOT_MODIFIED'
op|')'
nl|'\n'
name|'or'
name|'PRECONDITION_FAILED'
op|')'
newline|'\n'
name|'return'
name|'CACHED'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getAllHeaders
dedent|''
name|'def'
name|'getAllHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return dictionary mapping the names of all received headers to the last\n        value received for each.\n\n        Since this method does not return all header information,\n        C{self.requestHeaders.getAllRawHeaders()} may be preferred.\n        """'
newline|'\n'
name|'headers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'self'
op|'.'
name|'requestHeaders'
op|'.'
name|'getAllRawHeaders'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'['
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|']'
op|'='
name|'v'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'headers'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getRequestHostname
dedent|''
name|'def'
name|'getRequestHostname'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the hostname that the user passed in to the request.\n\n        This will either use the Host: header (if it is available) or the\n        host we are listening on if the header is unavailable.\n\n        @returns: the requested hostname\n        @rtype: C{str}\n        """'
newline|'\n'
comment|'# XXX This method probably has no unit tests.  I changed it a ton and'
nl|'\n'
comment|'# nothing failed.'
nl|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'getHeader'
op|'('
string|"'host'"
op|')'
newline|'\n'
name|'if'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'host'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get my originally requesting transport\'s host.\n\n        Don\'t rely on the \'transport\' attribute, since Request objects may be\n        copied remotely.  For information on this method\'s return value, see\n        twisted.internet.tcp.Port.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
DECL|member|setHost
dedent|''
name|'def'
name|'setHost'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|','
name|'ssl'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Change the host and port the request thinks it\'s using.\n\n        This method is useful for working with reverse HTTP proxies (e.g.\n        both Squid and Apache\'s mod_proxy can do this), when the address\n        the HTTP client is using is different than the one we\'re listening on.\n\n        For example, Apache may be listening on https://www.example.com, and then\n        forwarding requests to http://localhost:8080, but we don\'t want HTML produced\n        by Twisted to say \'http://localhost:8080\', they should say \'https://www.example.com\',\n        so we do::\n\n           request.setHost(\'www.example.com\', 443, ssl=1)\n\n        @type host: C{str}\n        @param host: The value to which to change the host header.\n\n        @type ssl: C{bool}\n        @param ssl: A flag which, if C{True}, indicates that the request is\n            considered secure (if C{True}, L{isSecure} will return C{True}).\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_forceSSL'
op|'='
name|'ssl'
newline|'\n'
name|'self'
op|'.'
name|'requestHeaders'
op|'.'
name|'setRawHeaders'
op|'('
string|'"host"'
op|','
op|'['
name|'host'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'host'
op|'='
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|'"TCP"'
op|','
name|'host'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getClientIP
dedent|''
name|'def'
name|'getClientIP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the IP address of the client who submitted this request.\n\n        @returns: the client IP address\n        @rtype: C{str}\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'client'
op|','
name|'address'
op|'.'
name|'IPv4Address'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'host'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|isSecure
dedent|''
dedent|''
name|'def'
name|'isSecure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return True if this request is using a secure transport.\n\n        Normally this method returns True if this request\'s HTTPChannel\n        instance is using a transport that implements ISSLTransport.\n\n        This will also return True if setHost() has been called\n        with ssl=True.\n\n        @returns: True if this request is secure\n        @rtype: C{bool}\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_forceSSL'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'transport'
op|'='
name|'getattr'
op|'('
name|'getattr'
op|'('
name|'self'
op|','
string|"'channel'"
op|','
name|'None'
op|')'
op|','
string|"'transport'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'interfaces'
op|'.'
name|'ISSLTransport'
op|'('
name|'transport'
op|','
name|'None'
op|')'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_authorize
dedent|''
name|'def'
name|'_authorize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Authorization, (mostly) per the RFC'
nl|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'authh'
op|'='
name|'self'
op|'.'
name|'getHeader'
op|'('
string|'"Authorization"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'authh'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'user'
op|'='
name|'self'
op|'.'
name|'password'
op|'='
string|"''"
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'bas'
op|','
name|'upw'
op|'='
name|'authh'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'bas'
op|'.'
name|'lower'
op|'('
op|')'
op|'!='
string|'"basic"'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
newline|'\n'
dedent|''
name|'upw'
op|'='
name|'base64'
op|'.'
name|'decodestring'
op|'('
name|'upw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'password'
op|'='
name|'upw'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'binascii'
op|'.'
name|'Error'
op|','
name|'ValueError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'user'
op|'='
name|'self'
op|'.'
name|'password'
op|'='
string|'""'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'user'
op|'='
name|'self'
op|'.'
name|'password'
op|'='
string|'""'
newline|'\n'
nl|'\n'
DECL|member|getUser
dedent|''
dedent|''
name|'def'
name|'getUser'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the HTTP user sent with this request, if any.\n\n        If no user was supplied, return the empty string.\n\n        @returns: the HTTP user, if any\n        @rtype: C{str}\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'user'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_authorize'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'user'
newline|'\n'
nl|'\n'
DECL|member|getPassword
dedent|''
name|'def'
name|'getPassword'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the HTTP password sent with this request, if any.\n\n        If no password was supplied, return the empty string.\n\n        @returns: the HTTP password, if any\n        @rtype: C{str}\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'password'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_authorize'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'password'
newline|'\n'
nl|'\n'
DECL|member|getClient
dedent|''
name|'def'
name|'getClient'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'client'
op|'.'
name|'type'
op|'!='
string|"'TCP'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'host'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'host'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|','
name|'names'
op|','
name|'addresses'
op|'='
name|'socket'
op|'.'
name|'gethostbyaddr'
op|'('
name|'host'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'host'
newline|'\n'
dedent|''
name|'names'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'name'
op|')'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'.'"
name|'in'
name|'name'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'name'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'names'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        There is no longer a connection for this request to respond over.\n        Clean up anything which can\'t be useful anymore.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_disconnected'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'content'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'content'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'for'
name|'d'
name|'in'
name|'self'
op|'.'
name|'notifications'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'notifications'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_DataLoss
dedent|''
dedent|''
name|'class'
name|'_DataLoss'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{_DataLoss} indicates that not all of a message body was received. This\n    is only one of several possible exceptions which may indicate that data\n    was lost.  Because of this, it should not be checked for by\n    specifically; any unexpected exception should be treated as having\n    caused data loss.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PotentialDataLoss
dedent|''
name|'class'
name|'PotentialDataLoss'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{PotentialDataLoss} may be raised by a transfer encoding decoder\'s\n    C{noMoreData} method to indicate that it cannot be determined if the\n    entire response body has been delivered.  This only occurs when making\n    requests to HTTP servers which do not set I{Content-Length} or a\n    I{Transfer-Encoding} in the response because in this case the end of the\n    response is indicated by the connection being closed, an event which may\n    also be due to a transient network problem or other error.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_IdentityTransferDecoder
dedent|''
name|'class'
name|'_IdentityTransferDecoder'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Protocol for accumulating bytes up to a specified length.  This handles the\n    case where no I{Transfer-Encoding} is specified.\n\n    @ivar contentLength: Counter keeping track of how many more bytes there are\n        to receive.\n\n    @ivar dataCallback: A one-argument callable which will be invoked each\n        time application data is received.\n\n    @ivar finishCallback: A one-argument callable which will be invoked when\n        the terminal chunk is received.  It will be invoked with all bytes\n        which were delivered to this protocol which came after the terminal\n        chunk.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'contentLength'
op|','
name|'dataCallback'
op|','
name|'finishCallback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'contentLength'
op|'='
name|'contentLength'
newline|'\n'
name|'self'
op|'.'
name|'dataCallback'
op|'='
name|'dataCallback'
newline|'\n'
name|'self'
op|'.'
name|'finishCallback'
op|'='
name|'finishCallback'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Interpret the next chunk of bytes received.  Either deliver them to the\n        data callback or invoke the finish callback if enough bytes have been\n        received.\n\n        @raise RuntimeError: If the finish callback has already been invoked\n            during a previous call to this methood.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'dataCallback'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
nl|'\n'
string|'"_IdentityTransferDecoder cannot decode data after finishing"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'contentLength'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'dataCallback'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'data'
op|')'
op|'<'
name|'self'
op|'.'
name|'contentLength'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'contentLength'
op|'-='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dataCallback'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Make the state consistent before invoking any code belonging to'
nl|'\n'
comment|'# anyone else in case noMoreData ends up being called beneath this'
nl|'\n'
comment|'# stack frame.'
nl|'\n'
indent|'            '
name|'contentLength'
op|'='
name|'self'
op|'.'
name|'contentLength'
newline|'\n'
name|'dataCallback'
op|'='
name|'self'
op|'.'
name|'dataCallback'
newline|'\n'
name|'finishCallback'
op|'='
name|'self'
op|'.'
name|'finishCallback'
newline|'\n'
name|'self'
op|'.'
name|'dataCallback'
op|'='
name|'self'
op|'.'
name|'finishCallback'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'contentLength'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'dataCallback'
op|'('
name|'data'
op|'['
op|':'
name|'contentLength'
op|']'
op|')'
newline|'\n'
name|'finishCallback'
op|'('
name|'data'
op|'['
name|'contentLength'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|noMoreData
dedent|''
dedent|''
name|'def'
name|'noMoreData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        All data which will be delivered to this decoder has been.  Check to\n        make sure as much data as was expected has been received.\n\n        @raise PotentialDataLoss: If the content length is unknown.\n        @raise _DataLoss: If the content length is known and fewer than that\n            many bytes have been delivered.\n\n        @return: C{None}\n        """'
newline|'\n'
name|'finishCallback'
op|'='
name|'self'
op|'.'
name|'finishCallback'
newline|'\n'
name|'self'
op|'.'
name|'dataCallback'
op|'='
name|'self'
op|'.'
name|'finishCallback'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'contentLength'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'finishCallback'
op|'('
string|"''"
op|')'
newline|'\n'
name|'raise'
name|'PotentialDataLoss'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'contentLength'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'_DataLoss'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_ChunkedTransferDecoder
dedent|''
dedent|''
dedent|''
name|'class'
name|'_ChunkedTransferDecoder'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Protocol for decoding I{chunked} Transfer-Encoding, as defined by RFC 2616,\n    section 3.6.1.  This protocol can interpret the contents of a request or\n    response body which uses the I{chunked} Transfer-Encoding.  It cannot\n    interpret any of the rest of the HTTP protocol.\n\n    It may make sense for _ChunkedTransferDecoder to be an actual IProtocol\n    implementation.  Currently, the only user of this class will only ever\n    call dataReceived on it.  However, it might be an improvement if the\n    user could connect this to a transport and deliver connection lost\n    notification.  This way, `dataCallback` becomes `self.transport.write`\n    and perhaps `finishCallback` becomes `self.transport.loseConnection()`\n    (although I\'m not sure where the extra data goes in that case).  This\n    could also allow this object to indicate to the receiver of data that\n    the stream was not completely received, an error case which should be\n    noticed. -exarkun\n\n    @ivar dataCallback: A one-argument callable which will be invoked each\n        time application data is received.\n\n    @ivar finishCallback: A one-argument callable which will be invoked when\n        the terminal chunk is received.  It will be invoked with all bytes\n        which were delivered to this protocol which came after the terminal\n        chunk.\n\n    @ivar length: Counter keeping track of how many more bytes in a chunk there\n        are to receive.\n\n    @ivar state: One of C{\'chunk-length\'}, C{\'trailer\'}, C{\'body\'}, or\n        C{\'finished\'}.  For C{\'chunk-length\'}, data for the chunk length line\n        is currently being read.  For C{\'trailer\'}, the CR LF pair which\n        follows each chunk is being read.  For C{\'body\'}, the contents of a\n        chunk are being read.  For C{\'finished\'}, the last chunk has been\n        completely read and no more input is valid.\n\n    @ivar finish: A flag indicating that the last chunk has been started.  When\n        it finishes, the state will change to C{\'finished\'} and no more data\n        will be accepted.\n    """'
newline|'\n'
DECL|variable|state
name|'state'
op|'='
string|"'chunk-length'"
newline|'\n'
DECL|variable|finish
name|'finish'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'dataCallback'
op|','
name|'finishCallback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'dataCallback'
op|'='
name|'dataCallback'
newline|'\n'
name|'self'
op|'.'
name|'finishCallback'
op|'='
name|'finishCallback'
newline|'\n'
name|'self'
op|'.'
name|'_buffer'
op|'='
string|"''"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Interpret data from a request or response body which uses the\n        I{chunked} Transfer-Encoding.\n        """'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'_buffer'
op|'+'
name|'data'
newline|'\n'
name|'self'
op|'.'
name|'_buffer'
op|'='
string|"''"
newline|'\n'
name|'while'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'chunk-length'"
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'\\r\\n'"
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'                    '
name|'line'
op|','
name|'rest'
op|'='
name|'data'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|','
number|'1'
op|')'
newline|'\n'
name|'parts'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'length'
op|'='
name|'int'
op|'('
name|'parts'
op|'['
number|'0'
op|']'
op|','
number|'16'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'length'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'state'
op|'='
string|"'trailer'"
newline|'\n'
name|'self'
op|'.'
name|'finish'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'state'
op|'='
string|"'body'"
newline|'\n'
dedent|''
name|'data'
op|'='
name|'rest'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_buffer'
op|'='
name|'data'
newline|'\n'
name|'data'
op|'='
string|"''"
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'trailer'"
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'data'
op|'.'
name|'startswith'
op|'('
string|"'\\r\\n'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'data'
op|'='
name|'data'
op|'['
number|'2'
op|':'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'finish'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'state'
op|'='
string|"'finished'"
newline|'\n'
name|'self'
op|'.'
name|'finishCallback'
op|'('
name|'data'
op|')'
newline|'\n'
name|'data'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'state'
op|'='
string|"'chunk-length'"
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_buffer'
op|'='
name|'data'
newline|'\n'
name|'data'
op|'='
string|"''"
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'body'"
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'len'
op|'('
name|'data'
op|')'
op|'>='
name|'self'
op|'.'
name|'length'
op|':'
newline|'\n'
indent|'                    '
name|'chunk'
op|','
name|'data'
op|'='
name|'data'
op|'['
op|':'
name|'self'
op|'.'
name|'length'
op|']'
op|','
name|'data'
op|'['
name|'self'
op|'.'
name|'length'
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'dataCallback'
op|'('
name|'chunk'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'trailer'"
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'data'
op|')'
op|'<'
name|'self'
op|'.'
name|'length'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'length'
op|'-='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dataCallback'
op|'('
name|'data'
op|')'
newline|'\n'
name|'data'
op|'='
string|"''"
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'finished'"
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RuntimeError'
op|'('
nl|'\n'
string|'"_ChunkedTransferDecoder.dataReceived called after last "'
nl|'\n'
string|'"chunk was processed"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|noMoreData
dedent|''
dedent|''
dedent|''
name|'def'
name|'noMoreData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that all data has been received.  If it has not been, raise\n        L{_DataLoss}.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'state'
op|'!='
string|"'finished'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'_DataLoss'
op|'('
nl|'\n'
string|'"Chunked decoder in %r state, still expecting more data to "'
nl|'\n'
string|'"get to finished state."'
op|'%'
op|'('
name|'self'
op|'.'
name|'state'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|HTTPChannel
dedent|''
dedent|''
dedent|''
name|'class'
name|'HTTPChannel'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|','
name|'policies'
op|'.'
name|'TimeoutMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A receiver for HTTP requests.\n\n    @ivar _transferDecoder: C{None} or an instance of\n        L{_ChunkedTransferDecoder} if the request body uses the I{chunked}\n        Transfer-Encoding.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|maxHeaders
name|'maxHeaders'
op|'='
number|'500'
comment|'# max number of headers allowed per request'
newline|'\n'
nl|'\n'
DECL|variable|length
name|'length'
op|'='
number|'0'
newline|'\n'
DECL|variable|persistent
name|'persistent'
op|'='
number|'1'
newline|'\n'
DECL|variable|__header
name|'__header'
op|'='
string|"''"
newline|'\n'
DECL|variable|__first_line
name|'__first_line'
op|'='
number|'1'
newline|'\n'
DECL|variable|__content
name|'__content'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# set in instances or subclasses'
nl|'\n'
DECL|variable|requestFactory
name|'requestFactory'
op|'='
name|'Request'
newline|'\n'
nl|'\n'
DECL|variable|_savedTimeOut
name|'_savedTimeOut'
op|'='
name|'None'
newline|'\n'
DECL|variable|_receivedHeaderCount
name|'_receivedHeaderCount'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# the request queue'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'requests'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_transferDecoder'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'timeOut'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'__first_line'
op|':'
newline|'\n'
comment|'# if this connection is not persistent, drop any data which'
nl|'\n'
comment|'# the client (illegally) sent after the last request.'
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'persistent'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'dataReceived'
op|'='
name|'self'
op|'.'
name|'lineReceived'
op|'='
name|'lambda'
op|'*'
name|'args'
op|':'
name|'None'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|'# IE sends an extraneous empty line (\\r\\n) after a POST request;'
nl|'\n'
comment|'# eat up such a line, but only ONCE'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'line'
name|'and'
name|'self'
op|'.'
name|'__first_line'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'__first_line'
op|'='
number|'2'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|'# create a new Request object'
nl|'\n'
dedent|''
name|'request'
op|'='
name|'self'
op|'.'
name|'requestFactory'
op|'('
name|'self'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'requests'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'requests'
op|'.'
name|'append'
op|'('
name|'request'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'__first_line'
op|'='
number|'0'
newline|'\n'
name|'parts'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'!='
number|'3'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"HTTP/1.1 400 Bad Request\\r\\n\\r\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'command'
op|','
name|'request'
op|','
name|'version'
op|'='
name|'parts'
newline|'\n'
name|'self'
op|'.'
name|'_command'
op|'='
name|'command'
newline|'\n'
name|'self'
op|'.'
name|'_path'
op|'='
name|'request'
newline|'\n'
name|'self'
op|'.'
name|'_version'
op|'='
name|'version'
newline|'\n'
dedent|''
name|'elif'
name|'line'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'__header'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'headerReceived'
op|'('
name|'self'
op|'.'
name|'__header'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'__header'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'allHeadersReceived'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'length'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'allContentReceived'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'setRawMode'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'line'
op|'['
number|'0'
op|']'
name|'in'
string|"' \\t'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__header'
op|'='
name|'self'
op|'.'
name|'__header'
op|'+'
string|"'\\n'"
op|'+'
name|'line'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'__header'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'headerReceived'
op|'('
name|'self'
op|'.'
name|'__header'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'__header'
op|'='
name|'line'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_finishRequestBody
dedent|''
dedent|''
name|'def'
name|'_finishRequestBody'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'allContentReceived'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'setLineMode'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|headerReceived
dedent|''
name|'def'
name|'headerReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Do pre-processing (for content-length) and store this header away.\n        Enforce the per-request header limit.\n\n        @type line: C{str}\n        @param line: A line from the header section of a request, excluding the\n            line delimiter.\n        """'
newline|'\n'
name|'header'
op|','
name|'data'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'header'
op|'='
name|'header'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'data'
op|'='
name|'data'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'header'
op|'=='
string|"'content-length'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'length'
op|'='
name|'int'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_transferDecoder'
op|'='
name|'_IdentityTransferDecoder'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'length'
op|','
name|'self'
op|'.'
name|'requests'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'handleContentChunk'
op|','
name|'self'
op|'.'
name|'_finishRequestBody'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'header'
op|'=='
string|"'transfer-encoding'"
name|'and'
name|'data'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'chunked'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'length'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_transferDecoder'
op|'='
name|'_ChunkedTransferDecoder'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'requests'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'handleContentChunk'
op|','
name|'self'
op|'.'
name|'_finishRequestBody'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'reqHeaders'
op|'='
name|'self'
op|'.'
name|'requests'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'requestHeaders'
newline|'\n'
name|'values'
op|'='
name|'reqHeaders'
op|'.'
name|'getRawHeaders'
op|'('
name|'header'
op|')'
newline|'\n'
name|'if'
name|'values'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'reqHeaders'
op|'.'
name|'setRawHeaders'
op|'('
name|'header'
op|','
op|'['
name|'data'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_receivedHeaderCount'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_receivedHeaderCount'
op|'>'
name|'self'
op|'.'
name|'maxHeaders'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"HTTP/1.1 400 Bad Request\\r\\n\\r\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|allContentReceived
dedent|''
dedent|''
name|'def'
name|'allContentReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'command'
op|'='
name|'self'
op|'.'
name|'_command'
newline|'\n'
name|'path'
op|'='
name|'self'
op|'.'
name|'_path'
newline|'\n'
name|'version'
op|'='
name|'self'
op|'.'
name|'_version'
newline|'\n'
nl|'\n'
comment|"# reset ALL state variables, so we don't interfere with next request"
nl|'\n'
name|'self'
op|'.'
name|'length'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_receivedHeaderCount'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'__first_line'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'_transferDecoder'
op|'='
name|'None'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'_command'
op|','
name|'self'
op|'.'
name|'_path'
op|','
name|'self'
op|'.'
name|'_version'
newline|'\n'
nl|'\n'
comment|'# Disable the idle timeout, in case this request takes a long'
nl|'\n'
comment|'# time to finish generating output.'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'timeOut'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_savedTimeOut'
op|'='
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'req'
op|'='
name|'self'
op|'.'
name|'requests'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'req'
op|'.'
name|'requestReceived'
op|'('
name|'command'
op|','
name|'path'
op|','
name|'version'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rawDataReceived
dedent|''
name|'def'
name|'rawDataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_transferDecoder'
op|'.'
name|'dataReceived'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|allHeadersReceived
dedent|''
name|'def'
name|'allHeadersReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'self'
op|'.'
name|'requests'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'req'
op|'.'
name|'parseCookies'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'persistent'
op|'='
name|'self'
op|'.'
name|'checkPersistence'
op|'('
name|'req'
op|','
name|'self'
op|'.'
name|'_version'
op|')'
newline|'\n'
name|'req'
op|'.'
name|'gotLength'
op|'('
name|'self'
op|'.'
name|'length'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|checkPersistence
dedent|''
name|'def'
name|'checkPersistence'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'version'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if the channel should close or not.\n\n        @param request: The request most recently received over this channel\n            against which checks will be made to determine if this connection\n            can remain open after a matching response is returned.\n\n        @type version: C{str}\n        @param version: The version of the request.\n\n        @rtype: C{bool}\n        @return: A flag which, if C{True}, indicates that this connection may\n            remain open to receive another request; if C{False}, the connection\n            must be closed in order to indicate the completion of the response\n            to C{request}.\n        """'
newline|'\n'
name|'connection'
op|'='
name|'request'
op|'.'
name|'requestHeaders'
op|'.'
name|'getRawHeaders'
op|'('
string|"'connection'"
op|')'
newline|'\n'
name|'if'
name|'connection'
op|':'
newline|'\n'
indent|'            '
name|'tokens'
op|'='
name|'map'
op|'('
name|'str'
op|'.'
name|'lower'
op|','
name|'connection'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'tokens'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# HTTP 1.0 persistent connection support is currently disabled,'
nl|'\n'
comment|"# since we need a way to disable pipelining. HTTP 1.0 can't do"
nl|'\n'
comment|"# pipelining since we can't know in advance if we'll have a"
nl|'\n'
comment|"# content-length header, if we don't have the header we need to close the"
nl|'\n'
comment|'# connection. In HTTP 1.1 this is not an issue since we use chunked'
nl|'\n'
comment|'# encoding if content-length is not available.'
nl|'\n'
nl|'\n'
comment|'#if version == "HTTP/1.0":'
nl|'\n'
comment|"#    if 'keep-alive' in tokens:"
nl|'\n'
comment|"#        request.setHeader('connection', 'Keep-Alive')"
nl|'\n'
comment|'#        return 1'
nl|'\n'
comment|'#    else:'
nl|'\n'
comment|'#        return 0'
nl|'\n'
dedent|''
name|'if'
name|'version'
op|'=='
string|'"HTTP/1.1"'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'close'"
name|'in'
name|'tokens'
op|':'
newline|'\n'
indent|'                '
name|'request'
op|'.'
name|'responseHeaders'
op|'.'
name|'setRawHeaders'
op|'('
string|"'connection'"
op|','
op|'['
string|"'close'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|requestDone
dedent|''
dedent|''
name|'def'
name|'requestDone'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called by first request in queue when it is done.\n        """'
newline|'\n'
name|'if'
name|'request'
op|'!='
name|'self'
op|'.'
name|'requests'
op|'['
number|'0'
op|']'
op|':'
name|'raise'
name|'TypeError'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'requests'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'persistent'
op|':'
newline|'\n'
comment|'# notify next request it can start writing'
nl|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'requests'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'requests'
op|'['
number|'0'
op|']'
op|'.'
name|'noLongerQueued'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'_savedTimeOut'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'_savedTimeOut'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|timeoutConnection
dedent|''
dedent|''
name|'def'
name|'timeoutConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Timing out client: %s"'
op|'%'
name|'str'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'policies'
op|'.'
name|'TimeoutMixin'
op|'.'
name|'timeoutConnection'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
name|'for'
name|'request'
name|'in'
name|'self'
op|'.'
name|'requests'
op|':'
newline|'\n'
indent|'            '
name|'request'
op|'.'
name|'connectionLost'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HTTPFactory
dedent|''
dedent|''
dedent|''
name|'class'
name|'HTTPFactory'
op|'('
name|'protocol'
op|'.'
name|'ServerFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Factory for HTTP server.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'HTTPChannel'
newline|'\n'
nl|'\n'
DECL|variable|logPath
name|'logPath'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|timeOut
name|'timeOut'
op|'='
number|'60'
op|'*'
number|'60'
op|'*'
number|'12'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'logPath'
op|'='
name|'None'
op|','
name|'timeout'
op|'='
number|'60'
op|'*'
number|'60'
op|'*'
number|'12'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'logPath'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'logPath'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'logPath'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'logPath'
op|'='
name|'logPath'
newline|'\n'
name|'self'
op|'.'
name|'timeOut'
op|'='
name|'timeout'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'protocol'
op|'.'
name|'ServerFactory'
op|'.'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
newline|'\n'
comment|'# timeOut needs to be on the Protocol instance cause'
nl|'\n'
comment|'# TimeoutMixin expects it there'
nl|'\n'
name|'p'
op|'.'
name|'timeOut'
op|'='
name|'self'
op|'.'
name|'timeOut'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
DECL|member|startFactory
dedent|''
name|'def'
name|'startFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'_logDateTimeStart'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'logPath'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logFile'
op|'='
name|'self'
op|'.'
name|'_openLogFile'
op|'('
name|'self'
op|'.'
name|'logPath'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logFile'
op|'='
name|'log'
op|'.'
name|'logfile'
newline|'\n'
nl|'\n'
DECL|member|stopFactory
dedent|''
dedent|''
name|'def'
name|'stopFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"logFile"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'logFile'
op|'!='
name|'log'
op|'.'
name|'logfile'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logFile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'logFile'
newline|'\n'
dedent|''
name|'_logDateTimeStop'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_openLogFile
dedent|''
name|'def'
name|'_openLogFile'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override in subclasses, e.g. to use twisted.python.logfile.\n        """'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'path'
op|','
string|'"a"'
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'f'
newline|'\n'
nl|'\n'
DECL|member|_escape
dedent|''
name|'def'
name|'_escape'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
comment|'# pain in the ass. Return a string like python repr, but always'
nl|'\n'
comment|'# escaped as if surrounding quotes were "".'
nl|'\n'
indent|'        '
name|'r'
op|'='
name|'repr'
op|'('
name|'s'
op|')'
newline|'\n'
name|'if'
name|'r'
op|'['
number|'0'
op|']'
op|'=='
string|'"\'"'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'r'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
op|'.'
name|'replace'
op|'('
string|'\'"\''
op|','
string|'\'\\\\"\''
op|')'
op|'.'
name|'replace'
op|'('
string|'"\\\\\'"'
op|','
string|'"\'"'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'r'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|log
dedent|''
name|'def'
name|'log'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Log a request\'s result to the logfile, by default in combined log format.\n        """'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"logFile"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
string|'\'%s - - %s "%s" %d %s "%s" "%s"\\n\''
op|'%'
op|'('
nl|'\n'
name|'request'
op|'.'
name|'getClientIP'
op|'('
op|')'
op|','
nl|'\n'
comment|'# request.getUser() or "-", # the remote user is almost never important'
nl|'\n'
name|'_logDateTime'
op|','
nl|'\n'
string|"'%s %s %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_escape'
op|'('
name|'request'
op|'.'
name|'method'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_escape'
op|'('
name|'request'
op|'.'
name|'uri'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_escape'
op|'('
name|'request'
op|'.'
name|'clientproto'
op|')'
op|')'
op|','
nl|'\n'
name|'request'
op|'.'
name|'code'
op|','
nl|'\n'
name|'request'
op|'.'
name|'sentLength'
name|'or'
string|'"-"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_escape'
op|'('
name|'request'
op|'.'
name|'getHeader'
op|'('
string|'"referer"'
op|')'
name|'or'
string|'"-"'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_escape'
op|'('
name|'request'
op|'.'
name|'getHeader'
op|'('
string|'"user-agent"'
op|')'
name|'or'
string|'"-"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logFile'
op|'.'
name|'write'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

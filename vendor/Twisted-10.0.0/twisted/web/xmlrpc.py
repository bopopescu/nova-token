begin_unit
comment|'# -*- test-case-name: twisted.web.test.test_xmlrpc -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nA generic resource for publishing objects via XML-RPC.\n\nMaintainer: Itamar Shtull-Trauring\n"""'
newline|'\n'
nl|'\n'
comment|'# System Imports'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'xmlrpclib'
op|','
name|'urlparse'
newline|'\n'
nl|'\n'
comment|'# Sibling Imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'resource'
op|','
name|'server'
op|','
name|'http'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'protocol'
op|','
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'reflect'
op|','
name|'failure'
newline|'\n'
nl|'\n'
comment|'# These are deprecated, use the class level definitions'
nl|'\n'
DECL|variable|NOT_FOUND
name|'NOT_FOUND'
op|'='
number|'8001'
newline|'\n'
DECL|variable|FAILURE
name|'FAILURE'
op|'='
number|'8002'
newline|'\n'
nl|'\n'
nl|'\n'
comment|"# Useful so people don't need to import xmlrpclib directly"
nl|'\n'
DECL|variable|Fault
name|'Fault'
op|'='
name|'xmlrpclib'
op|'.'
name|'Fault'
newline|'\n'
DECL|variable|Binary
name|'Binary'
op|'='
name|'xmlrpclib'
op|'.'
name|'Binary'
newline|'\n'
DECL|variable|Boolean
name|'Boolean'
op|'='
name|'xmlrpclib'
op|'.'
name|'Boolean'
newline|'\n'
DECL|variable|DateTime
name|'DateTime'
op|'='
name|'xmlrpclib'
op|'.'
name|'DateTime'
newline|'\n'
nl|'\n'
comment|'# On Python 2.4 and earlier, DateTime.decode returns unicode.'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'version_info'
op|'['
op|':'
number|'2'
op|']'
op|'<'
op|'('
number|'2'
op|','
number|'5'
op|')'
op|':'
newline|'\n'
DECL|variable|_decode
indent|'    '
name|'_decode'
op|'='
name|'DateTime'
op|'.'
name|'decode'
newline|'\n'
name|'DateTime'
op|'.'
name|'decode'
op|'='
name|'lambda'
name|'self'
op|','
name|'value'
op|':'
name|'_decode'
op|'('
name|'self'
op|','
name|'value'
op|'.'
name|'encode'
op|'('
string|"'ascii'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoSuchFunction
dedent|''
name|'class'
name|'NoSuchFunction'
op|'('
name|'Fault'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    There is no function by the given name.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Handler
dedent|''
name|'class'
name|'Handler'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Handle a XML-RPC request and store the state for a request in progress.\n\n    Override the run() method and return result using self.result,\n    a Deferred.\n\n    We require this class since we\'re not using threads, so we can\'t\n    encapsulate state in a running function if we\'re going  to have\n    to wait for results.\n\n    For example, lets say we want to authenticate against twisted.cred,\n    run a LDAP query and then pass its result to a database query, all\n    as a result of a single XML-RPC command. We\'d use a Handler instance\n    to store the state of the running command.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'resource'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resource'
op|'='
name|'resource'
comment|'# the XML-RPC resource we are connected to'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
comment|"# event driven equivalent of 'raise UnimplementedError'"
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'result'
op|'.'
name|'errback'
op|'('
nl|'\n'
name|'NotImplementedError'
op|'('
string|'"Implement run() in subclasses"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMLRPC
dedent|''
dedent|''
name|'class'
name|'XMLRPC'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A resource that implements XML-RPC.\n\n    You probably want to connect this to \'/RPC2\'.\n\n    Methods published can return XML-RPC serializable results, Faults,\n    Binary, Boolean, DateTime, Deferreds, or Handler instances.\n\n    By default methods beginning with \'xmlrpc_\' are published.\n\n    Sub-handlers for prefixed methods (e.g., system.listMethods)\n    can be added with putSubHandler. By default, prefixes are\n    separated with a \'.\'. Override self.separator to change this.\n    """'
newline|'\n'
nl|'\n'
comment|'# Error codes for Twisted, if they conflict with yours then'
nl|'\n'
comment|'# modify them at runtime.'
nl|'\n'
DECL|variable|NOT_FOUND
name|'NOT_FOUND'
op|'='
number|'8001'
newline|'\n'
DECL|variable|FAILURE
name|'FAILURE'
op|'='
number|'8002'
newline|'\n'
nl|'\n'
DECL|variable|isLeaf
name|'isLeaf'
op|'='
number|'1'
newline|'\n'
DECL|variable|separator
name|'separator'
op|'='
string|"'.'"
newline|'\n'
DECL|variable|allowedMethods
name|'allowedMethods'
op|'='
op|'('
string|"'POST'"
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'allowNone'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resource'
op|'.'
name|'Resource'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'subHandlers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'allowNone'
op|'='
name|'allowNone'
newline|'\n'
nl|'\n'
DECL|member|putSubHandler
dedent|''
name|'def'
name|'putSubHandler'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'handler'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'subHandlers'
op|'['
name|'prefix'
op|']'
op|'='
name|'handler'
newline|'\n'
nl|'\n'
DECL|member|getSubHandler
dedent|''
name|'def'
name|'getSubHandler'
op|'('
name|'self'
op|','
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'subHandlers'
op|'.'
name|'get'
op|'('
name|'prefix'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getSubHandlerPrefixes
dedent|''
name|'def'
name|'getSubHandlerPrefixes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'subHandlers'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|render_POST
dedent|''
name|'def'
name|'render_POST'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'request'
op|'.'
name|'content'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHeader'
op|'('
string|'"content-type"'
op|','
string|'"text/xml"'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|','
name|'functionPath'
op|'='
name|'xmlrpclib'
op|'.'
name|'loads'
op|'('
name|'request'
op|'.'
name|'content'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'Fault'
op|'('
name|'self'
op|'.'
name|'FAILURE'
op|','
string|'"Can\'t deserialize input: %s"'
op|'%'
op|'('
name|'e'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cbRender'
op|'('
name|'f'
op|','
name|'request'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'function'
op|'='
name|'self'
op|'.'
name|'_getFunction'
op|'('
name|'functionPath'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Fault'
op|','
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_cbRender'
op|'('
name|'f'
op|','
name|'request'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'function'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebRender'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbRender'
op|','
name|'request'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'server'
op|'.'
name|'NOT_DONE_YET'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbRender
dedent|''
name|'def'
name|'_cbRender'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'result'
op|','
name|'Handler'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'result'
op|'.'
name|'result'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'result'
op|','
name|'Fault'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
op|'('
name|'result'
op|','
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'content'
op|'='
name|'xmlrpclib'
op|'.'
name|'dumps'
op|'('
nl|'\n'
name|'result'
op|','
name|'methodresponse'
op|'='
name|'True'
op|','
nl|'\n'
name|'allow_none'
op|'='
name|'self'
op|'.'
name|'allowNone'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'='
name|'Fault'
op|'('
name|'self'
op|'.'
name|'FAILURE'
op|','
string|'"Can\'t serialize output: %s"'
op|'%'
op|'('
name|'e'
op|','
op|')'
op|')'
newline|'\n'
name|'content'
op|'='
name|'xmlrpclib'
op|'.'
name|'dumps'
op|'('
name|'f'
op|','
name|'methodresponse'
op|'='
name|'True'
op|','
nl|'\n'
name|'allow_none'
op|'='
name|'self'
op|'.'
name|'allowNone'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'request'
op|'.'
name|'setHeader'
op|'('
string|'"content-length"'
op|','
name|'str'
op|'('
name|'len'
op|'('
name|'content'
op|')'
op|')'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'write'
op|'('
name|'content'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
name|'request'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_ebRender
dedent|''
name|'def'
name|'_ebRender'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'failure'
op|'.'
name|'value'
op|','
name|'Fault'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'failure'
op|'.'
name|'value'
newline|'\n'
dedent|''
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
name|'return'
name|'Fault'
op|'('
name|'self'
op|'.'
name|'FAILURE'
op|','
string|'"error"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_getFunction
dedent|''
name|'def'
name|'_getFunction'
op|'('
name|'self'
op|','
name|'functionPath'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a string, return a function, or raise NoSuchFunction.\n\n        This returned function will be called, and should return the result\n        of the call, a Deferred, or a Fault instance.\n\n        Override in subclasses if you want your own policy. The default\n        policy is that given functionPath \'foo\', return the method at\n        self.xmlrpc_foo, i.e. getattr(self, "xmlrpc_" + functionPath).\n        If functionPath contains self.separator, the sub-handler for\n        the initial prefix is used to search for the remaining path.\n        """'
newline|'\n'
name|'if'
name|'functionPath'
op|'.'
name|'find'
op|'('
name|'self'
op|'.'
name|'separator'
op|')'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'prefix'
op|','
name|'functionPath'
op|'='
name|'functionPath'
op|'.'
name|'split'
op|'('
name|'self'
op|'.'
name|'separator'
op|','
number|'1'
op|')'
newline|'\n'
name|'handler'
op|'='
name|'self'
op|'.'
name|'getSubHandler'
op|'('
name|'prefix'
op|')'
newline|'\n'
name|'if'
name|'handler'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'NoSuchFunction'
op|'('
name|'self'
op|'.'
name|'NOT_FOUND'
op|','
nl|'\n'
string|'"no such subHandler %s"'
op|'%'
name|'prefix'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'handler'
op|'.'
name|'_getFunction'
op|'('
name|'functionPath'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'f'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"xmlrpc_%s"'
op|'%'
name|'functionPath'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NoSuchFunction'
op|'('
name|'self'
op|'.'
name|'NOT_FOUND'
op|','
nl|'\n'
string|'"function %s not found"'
op|'%'
name|'functionPath'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'callable'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NoSuchFunction'
op|'('
name|'self'
op|'.'
name|'NOT_FOUND'
op|','
nl|'\n'
string|'"function %s not callable"'
op|'%'
name|'functionPath'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'f'
newline|'\n'
nl|'\n'
DECL|member|_listFunctions
dedent|''
dedent|''
name|'def'
name|'_listFunctions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a list of the names of all xmlrpc methods.\n        """'
newline|'\n'
name|'return'
name|'reflect'
op|'.'
name|'prefixedMethodNames'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
string|"'xmlrpc_'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMLRPCIntrospection
dedent|''
dedent|''
name|'class'
name|'XMLRPCIntrospection'
op|'('
name|'XMLRPC'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Implement the XML-RPC Introspection API.\n\n    By default, the methodHelp method returns the \'help\' method attribute,\n    if it exists, otherwise the __doc__ method attribute, if it exists,\n    otherwise the empty string.\n\n    To enable the methodSignature method, add a \'signature\' method attribute\n    containing a list of lists. See methodSignature\'s documentation for the\n    format. Note the type strings should be XML-RPC types, not Python types.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'parent'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Implement Introspection support for an XMLRPC server.\n\n        @param parent: the XMLRPC server to add Introspection support to.\n        """'
newline|'\n'
nl|'\n'
name|'XMLRPC'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_xmlrpc_parent'
op|'='
name|'parent'
newline|'\n'
nl|'\n'
DECL|member|xmlrpc_listMethods
dedent|''
name|'def'
name|'xmlrpc_listMethods'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a list of the method names implemented by this server.\n        """'
newline|'\n'
name|'functions'
op|'='
op|'['
op|']'
newline|'\n'
name|'todo'
op|'='
op|'['
op|'('
name|'self'
op|'.'
name|'_xmlrpc_parent'
op|','
string|"''"
op|')'
op|']'
newline|'\n'
name|'while'
name|'todo'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|','
name|'prefix'
op|'='
name|'todo'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'functions'
op|'.'
name|'extend'
op|'('
op|'['
name|'prefix'
op|'+'
name|'name'
name|'for'
name|'name'
name|'in'
name|'obj'
op|'.'
name|'_listFunctions'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'todo'
op|'.'
name|'extend'
op|'('
op|'['
op|'('
name|'obj'
op|'.'
name|'getSubHandler'
op|'('
name|'name'
op|')'
op|','
nl|'\n'
name|'prefix'
op|'+'
name|'name'
op|'+'
name|'obj'
op|'.'
name|'separator'
op|')'
nl|'\n'
name|'for'
name|'name'
name|'in'
name|'obj'
op|'.'
name|'getSubHandlerPrefixes'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'functions'
newline|'\n'
nl|'\n'
dedent|''
name|'xmlrpc_listMethods'
op|'.'
name|'signature'
op|'='
op|'['
op|'['
string|"'array'"
op|']'
op|']'
newline|'\n'
nl|'\n'
DECL|member|xmlrpc_methodHelp
name|'def'
name|'xmlrpc_methodHelp'
op|'('
name|'self'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a documentation string describing the use of the given method.\n        """'
newline|'\n'
name|'method'
op|'='
name|'self'
op|'.'
name|'_xmlrpc_parent'
op|'.'
name|'_getFunction'
op|'('
name|'method'
op|')'
newline|'\n'
name|'return'
op|'('
name|'getattr'
op|'('
name|'method'
op|','
string|"'help'"
op|','
name|'None'
op|')'
nl|'\n'
name|'or'
name|'getattr'
op|'('
name|'method'
op|','
string|"'__doc__'"
op|','
name|'None'
op|')'
name|'or'
string|"''"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'xmlrpc_methodHelp'
op|'.'
name|'signature'
op|'='
op|'['
op|'['
string|"'string'"
op|','
string|"'string'"
op|']'
op|']'
newline|'\n'
nl|'\n'
DECL|member|xmlrpc_methodSignature
name|'def'
name|'xmlrpc_methodSignature'
op|'('
name|'self'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a list of type signatures.\n\n        Each type signature is a list of the form [rtype, type1, type2, ...]\n        where rtype is the return type and typeN is the type of the Nth\n        argument. If no signature information is available, the empty\n        string is returned.\n        """'
newline|'\n'
name|'method'
op|'='
name|'self'
op|'.'
name|'_xmlrpc_parent'
op|'.'
name|'_getFunction'
op|'('
name|'method'
op|')'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'method'
op|','
string|"'signature'"
op|','
name|'None'
op|')'
name|'or'
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'xmlrpc_methodSignature'
op|'.'
name|'signature'
op|'='
op|'['
op|'['
string|"'array'"
op|','
string|"'string'"
op|']'
op|','
nl|'\n'
op|'['
string|"'string'"
op|','
string|"'string'"
op|']'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|addIntrospection
dedent|''
name|'def'
name|'addIntrospection'
op|'('
name|'xmlrpc'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Add Introspection support to an XMLRPC server.\n\n    @param xmlrpc: The xmlrpc server to add Introspection support to.\n    """'
newline|'\n'
name|'xmlrpc'
op|'.'
name|'putSubHandler'
op|'('
string|"'system'"
op|','
name|'XMLRPCIntrospection'
op|'('
name|'xmlrpc'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QueryProtocol
dedent|''
name|'class'
name|'QueryProtocol'
op|'('
name|'http'
op|'.'
name|'HTTPClient'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
indent|'    '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendCommand'
op|'('
string|"'POST'"
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendHeader'
op|'('
string|"'User-Agent'"
op|','
string|"'Twisted/XMLRPClib'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendHeader'
op|'('
string|"'Host'"
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendHeader'
op|'('
string|"'Content-type'"
op|','
string|"'text/xml'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendHeader'
op|'('
string|"'Content-length'"
op|','
name|'str'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'payload'
op|')'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'user'
op|':'
newline|'\n'
indent|'            '
name|'auth'
op|'='
string|"'%s:%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'password'
op|')'
newline|'\n'
name|'auth'
op|'='
name|'auth'
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendHeader'
op|'('
string|"'Authorization'"
op|','
string|"'Basic %s'"
op|'%'
op|'('
name|'auth'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'endHeaders'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'payload'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleStatus
dedent|''
name|'def'
name|'handleStatus'
op|'('
name|'self'
op|','
name|'version'
op|','
name|'status'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'status'
op|'!='
string|"'200'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'badStatus'
op|'('
name|'status'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleResponse
dedent|''
dedent|''
name|'def'
name|'handleResponse'
op|'('
name|'self'
op|','
name|'contents'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'parseResponse'
op|'('
name|'contents'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'payloadTemplate'
op|'='
string|'"""<?xml version="1.0"?>\n<methodCall>\n<methodName>%s</methodName>\n%s\n</methodCall>\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_QueryFactory
name|'class'
name|'_QueryFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|deferred
indent|'    '
name|'deferred'
op|'='
name|'None'
newline|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'QueryProtocol'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'host'
op|','
name|'method'
op|','
name|'user'
op|'='
name|'None'
op|','
name|'password'
op|'='
name|'None'
op|','
nl|'\n'
name|'allowNone'
op|'='
name|'False'
op|','
name|'args'
op|'='
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'path'
op|','
name|'self'
op|'.'
name|'host'
op|'='
name|'path'
op|','
name|'host'
newline|'\n'
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'password'
op|'='
name|'user'
op|','
name|'password'
newline|'\n'
name|'self'
op|'.'
name|'payload'
op|'='
name|'payloadTemplate'
op|'%'
op|'('
name|'method'
op|','
nl|'\n'
name|'xmlrpclib'
op|'.'
name|'dumps'
op|'('
name|'args'
op|','
name|'allow_none'
op|'='
name|'allowNone'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|parseResponse
dedent|''
name|'def'
name|'parseResponse'
op|'('
name|'self'
op|','
name|'contents'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'deferred'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'='
name|'xmlrpclib'
op|'.'
name|'loads'
op|'('
name|'contents'
op|')'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'deferred'
op|','
name|'self'
op|'.'
name|'deferred'
op|'='
name|'self'
op|'.'
name|'deferred'
op|','
name|'None'
newline|'\n'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'deferred'
op|','
name|'self'
op|'.'
name|'deferred'
op|'='
name|'self'
op|'.'
name|'deferred'
op|','
name|'None'
newline|'\n'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionLost
dedent|''
dedent|''
name|'def'
name|'clientConnectionLost'
op|'('
name|'self'
op|','
name|'_'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'deferred'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'deferred'
op|','
name|'self'
op|'.'
name|'deferred'
op|'='
name|'self'
op|'.'
name|'deferred'
op|','
name|'None'
newline|'\n'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|clientConnectionFailed
dedent|''
dedent|''
name|'clientConnectionFailed'
op|'='
name|'clientConnectionLost'
newline|'\n'
nl|'\n'
DECL|member|badStatus
name|'def'
name|'badStatus'
op|'('
name|'self'
op|','
name|'status'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'deferred'
op|','
name|'self'
op|'.'
name|'deferred'
op|'='
name|'self'
op|'.'
name|'deferred'
op|','
name|'None'
newline|'\n'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'ValueError'
op|'('
name|'status'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Proxy
dedent|''
dedent|''
name|'class'
name|'Proxy'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A Proxy for making remote XML-RPC calls.\n\n    Pass the URL of the remote XML-RPC server to the constructor.\n\n    Use proxy.callRemote(\'foobar\', *args) to call remote method\n    \'foobar\' with *args.\n\n    @ivar queryFactory: object returning a factory for XML-RPC protocol. Mainly\n        useful for tests.\n    """'
newline|'\n'
DECL|variable|queryFactory
name|'queryFactory'
op|'='
name|'_QueryFactory'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'url'
op|','
name|'user'
op|'='
name|'None'
op|','
name|'password'
op|'='
name|'None'
op|','
name|'allowNone'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @type url: C{str}\n        @param url: The URL to which to post method calls.  Calls will be made\n        over SSL if the scheme is HTTPS.  If netloc contains username or\n        password information, these will be used to authenticate, as long as\n        the C{user} and C{password} arguments are not specified.\n\n        @type user: C{str} or None\n        @param user: The username with which to authenticate with the server\n        when making calls.  If specified, overrides any username information\n        embedded in C{url}.  If not specified, a value may be taken from C{url}\n        if present.\n\n        @type password: C{str} or None\n        @param password: The password with which to authenticate with the\n        server when making calls.  If specified, overrides any password\n        information embedded in C{url}.  If not specified, a value may be taken\n        from C{url} if present.\n\n        @type allowNone: C{bool} or None\n        @param allowNone: allow the use of None values in parameters. It\'s\n        passed to the underlying xmlrpclib implementation. Default to False.\n        """'
newline|'\n'
name|'scheme'
op|','
name|'netloc'
op|','
name|'path'
op|','
name|'params'
op|','
name|'query'
op|','
name|'fragment'
op|'='
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'url'
op|')'
newline|'\n'
name|'netlocParts'
op|'='
name|'netloc'
op|'.'
name|'split'
op|'('
string|"'@'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'netlocParts'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'userpass'
op|'='
name|'netlocParts'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'user'
op|'='
name|'userpass'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'password'
op|'='
name|'userpass'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'password'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'user'
op|'='
name|'self'
op|'.'
name|'password'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'hostport'
op|'='
name|'netlocParts'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'host'
op|'='
name|'hostport'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'port'
op|'='
name|'int'
op|'('
name|'hostport'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'port'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'path'
name|'in'
op|'['
string|"''"
op|','
name|'None'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'path'
op|'='
string|"'/'"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'secure'
op|'='
op|'('
name|'scheme'
op|'=='
string|"'https'"
op|')'
newline|'\n'
name|'if'
name|'user'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'user'
op|'='
name|'user'
newline|'\n'
dedent|''
name|'if'
name|'password'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'password'
op|'='
name|'password'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'allowNone'
op|'='
name|'allowNone'
newline|'\n'
nl|'\n'
DECL|member|callRemote
dedent|''
name|'def'
name|'callRemote'
op|'('
name|'self'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call remote XML-RPC C{method} with given arguments.\n\n        @return: a L{defer.Deferred} that will fire with the method response,\n            or a failure if the method failed. Generally, the failure type will\n            be L{Fault}, but you can also have an C{IndexError} on some buggy\n            servers giving empty responses.\n        """'
newline|'\n'
name|'factory'
op|'='
name|'self'
op|'.'
name|'queryFactory'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'path'
op|','
name|'self'
op|'.'
name|'host'
op|','
name|'method'
op|','
name|'self'
op|'.'
name|'user'
op|','
nl|'\n'
name|'self'
op|'.'
name|'password'
op|','
name|'self'
op|'.'
name|'allowNone'
op|','
name|'args'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'secure'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'ssl'
newline|'\n'
name|'reactor'
op|'.'
name|'connectSSL'
op|'('
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'port'
name|'or'
number|'443'
op|','
nl|'\n'
name|'factory'
op|','
name|'ssl'
op|'.'
name|'ClientContextFactory'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'port'
name|'or'
number|'80'
op|','
name|'factory'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'factory'
op|'.'
name|'deferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
nl|'\n'
string|'"XMLRPC"'
op|','
string|'"Handler"'
op|','
string|'"NoSuchFunction"'
op|','
string|'"Proxy"'
op|','
nl|'\n'
nl|'\n'
string|'"Fault"'
op|','
string|'"Binary"'
op|','
string|'"Boolean"'
op|','
string|'"DateTime"'
op|']'
newline|'\n'
endmarker|''
end_unit

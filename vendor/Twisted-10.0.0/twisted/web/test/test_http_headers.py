begin_unit
comment|'# Copyright (c) 2008-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.web.http_headers}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'http_headers'
name|'import'
name|'_DictHeaders'
op|','
name|'Headers'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HeadersTests
name|'class'
name|'HeadersTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{Headers}.\n    """'
newline|'\n'
DECL|member|test_initializer
name|'def'
name|'test_initializer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The header values passed to L{Headers.__init__} can be retrieved via\n        L{Headers.getRawHeaders}.\n        """'
newline|'\n'
name|'h'
op|'='
name|'Headers'
op|'('
op|'{'
string|"'Foo'"
op|':'
op|'['
string|"'bar'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'h'
op|'.'
name|'getRawHeaders'
op|'('
string|"'foo'"
op|')'
op|','
op|'['
string|"'bar'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setRawHeaders
dedent|''
name|'def'
name|'test_setRawHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Headers.setRawHeaders} sets the header values for the given\n        header name to the sequence of string values.\n        """'
newline|'\n'
name|'rawValue'
op|'='
op|'['
string|'"value1"'
op|','
string|'"value2"'
op|']'
newline|'\n'
name|'h'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'h'
op|'.'
name|'setRawHeaders'
op|'('
string|'"test"'
op|','
name|'rawValue'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'h'
op|'.'
name|'hasHeader'
op|'('
string|'"test"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'h'
op|'.'
name|'hasHeader'
op|'('
string|'"Test"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'h'
op|'.'
name|'getRawHeaders'
op|'('
string|'"test"'
op|')'
op|','
name|'rawValue'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addRawHeader
dedent|''
name|'def'
name|'test_addRawHeader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Headers.addRawHeader} adds a new value for a given header.\n        """'
newline|'\n'
name|'h'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'h'
op|'.'
name|'addRawHeader'
op|'('
string|'"test"'
op|','
string|'"lemur"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'h'
op|'.'
name|'getRawHeaders'
op|'('
string|'"test"'
op|')'
op|','
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'addRawHeader'
op|'('
string|'"test"'
op|','
string|'"panda"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'h'
op|'.'
name|'getRawHeaders'
op|'('
string|'"test"'
op|')'
op|','
op|'['
string|'"lemur"'
op|','
string|'"panda"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getRawHeadersNoDefault
dedent|''
name|'def'
name|'test_getRawHeadersNoDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Headers.getRawHeaders} returns C{None} if the header is not found and\n        no default is specified.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'Headers'
op|'('
op|')'
op|'.'
name|'getRawHeaders'
op|'('
string|'"test"'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getRawHeadersDefaultValue
dedent|''
name|'def'
name|'test_getRawHeadersDefaultValue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Headers.getRawHeaders} returns the specified default value when no\n        header is found.\n        """'
newline|'\n'
name|'h'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'default'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'h'
op|'.'
name|'getRawHeaders'
op|'('
string|'"test"'
op|','
name|'default'
op|')'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getRawHeaders
dedent|''
name|'def'
name|'test_getRawHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Headers.getRawHeaders} returns the values which have been set for a\n        given header.\n        """'
newline|'\n'
name|'h'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'h'
op|'.'
name|'setRawHeaders'
op|'('
string|'"test"'
op|','
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'h'
op|'.'
name|'getRawHeaders'
op|'('
string|'"test"'
op|')'
op|','
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'h'
op|'.'
name|'getRawHeaders'
op|'('
string|'"Test"'
op|')'
op|','
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_hasHeaderTrue
dedent|''
name|'def'
name|'test_hasHeaderTrue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that L{Headers.hasHeader} returns C{True} when the given header\n        is found.\n        """'
newline|'\n'
name|'h'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'h'
op|'.'
name|'setRawHeaders'
op|'('
string|'"test"'
op|','
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'h'
op|'.'
name|'hasHeader'
op|'('
string|'"test"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'h'
op|'.'
name|'hasHeader'
op|'('
string|'"Test"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_hasHeaderFalse
dedent|''
name|'def'
name|'test_hasHeaderFalse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Headers.hasHeader} returns C{False} when the given header is not\n        found.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'Headers'
op|'('
op|')'
op|'.'
name|'hasHeader'
op|'('
string|'"test"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeHeader
dedent|''
name|'def'
name|'test_removeHeader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that L{Headers.removeHeader} removes the given header.\n        """'
newline|'\n'
name|'h'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'h'
op|'.'
name|'setRawHeaders'
op|'('
string|'"foo"'
op|','
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'h'
op|'.'
name|'hasHeader'
op|'('
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'removeHeader'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'h'
op|'.'
name|'hasHeader'
op|'('
string|'"foo"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'h'
op|'.'
name|'setRawHeaders'
op|'('
string|'"bar"'
op|','
op|'['
string|'"panda"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'h'
op|'.'
name|'hasHeader'
op|'('
string|'"bar"'
op|')'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'removeHeader'
op|'('
string|'"Bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'h'
op|'.'
name|'hasHeader'
op|'('
string|'"bar"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeHeaderDoesntExist
dedent|''
name|'def'
name|'test_removeHeaderDoesntExist'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Headers.removeHeader} is a no-operation when the specified header is\n        not found.\n        """'
newline|'\n'
name|'h'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'h'
op|'.'
name|'removeHeader'
op|'('
string|'"test"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'list'
op|'('
name|'h'
op|'.'
name|'getAllRawHeaders'
op|'('
op|')'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_canonicalNameCaps
dedent|''
name|'def'
name|'test_canonicalNameCaps'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Headers._canonicalNameCaps} returns the canonical capitalization for\n        the given header.\n        """'
newline|'\n'
name|'h'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'h'
op|'.'
name|'_canonicalNameCaps'
op|'('
string|'"test"'
op|')'
op|','
string|'"Test"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'h'
op|'.'
name|'_canonicalNameCaps'
op|'('
string|'"test-stuff"'
op|')'
op|','
string|'"Test-Stuff"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'h'
op|'.'
name|'_canonicalNameCaps'
op|'('
string|'"www-authenticate"'
op|')'
op|','
nl|'\n'
string|'"WWW-Authenticate"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getAllRawHeaders
dedent|''
name|'def'
name|'test_getAllRawHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Headers.getAllRawHeaders} returns an iterable of (k, v) pairs, where\n        C{k} is the canonicalized representation of the header name, and C{v}\n        is a sequence of values.\n        """'
newline|'\n'
name|'h'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'h'
op|'.'
name|'setRawHeaders'
op|'('
string|'"test"'
op|','
op|'['
string|'"lemurs"'
op|']'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'setRawHeaders'
op|'('
string|'"www-authenticate"'
op|','
op|'['
string|'"basic aksljdlk="'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'allHeaders'
op|'='
name|'set'
op|'('
op|'['
op|'('
name|'k'
op|','
name|'tuple'
op|'('
name|'v'
op|')'
op|')'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'h'
op|'.'
name|'getAllRawHeaders'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'allHeaders'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
op|'('
string|'"WWW-Authenticate"'
op|','
op|'('
string|'"basic aksljdlk="'
op|','
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|'"Test"'
op|','
op|'('
string|'"lemurs"'
op|','
op|')'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_headersComparison
dedent|''
name|'def'
name|'test_headersComparison'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A L{Headers} instance compares equal to itself and to another\n        L{Headers} instance with the same values.\n        """'
newline|'\n'
name|'first'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'first'
op|'.'
name|'setRawHeaders'
op|'('
string|'"foo"'
op|','
op|'['
string|'"panda"'
op|']'
op|')'
newline|'\n'
name|'second'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'second'
op|'.'
name|'setRawHeaders'
op|'('
string|'"foo"'
op|','
op|'['
string|'"panda"'
op|']'
op|')'
newline|'\n'
name|'third'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'third'
op|'.'
name|'setRawHeaders'
op|'('
string|'"foo"'
op|','
op|'['
string|'"lemur"'
op|','
string|'"panda"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'first'
op|','
name|'first'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'first'
op|','
name|'second'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'first'
op|','
name|'third'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_otherComparison
dedent|''
name|'def'
name|'test_otherComparison'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An instance of L{Headers} does not compare equal to other unrelated\n        objects.\n        """'
newline|'\n'
name|'h'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'h'
op|','
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'h'
op|','
name|'object'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'h'
op|','
string|'"foo"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_repr
dedent|''
name|'def'
name|'test_repr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{repr} of a L{Headers} instance shows the names and values of all\n        the headers it contains.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'Headers'
op|'('
op|'{'
string|'"foo"'
op|':'
op|'['
string|'"bar"'
op|','
string|'"baz"'
op|']'
op|'}'
op|')'
op|')'
op|','
nl|'\n'
string|'"Headers({\'foo\': [\'bar\', \'baz\']})"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_subclassRepr
dedent|''
name|'def'
name|'test_subclassRepr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{repr} of an instance of a subclass of L{Headers} uses the name\n        of the subclass instead of the string C{"Headers"}.\n        """'
newline|'\n'
DECL|class|FunnyHeaders
name|'class'
name|'FunnyHeaders'
op|'('
name|'Headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'FunnyHeaders'
op|'('
op|'{'
string|'"foo"'
op|':'
op|'['
string|'"bar"'
op|','
string|'"baz"'
op|']'
op|'}'
op|')'
op|')'
op|','
nl|'\n'
string|'"FunnyHeaders({\'foo\': [\'bar\', \'baz\']})"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|HeaderDictTests
dedent|''
dedent|''
name|'class'
name|'HeaderDictTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the backwards compatible C{dict} interface for L{Headers}\n    provided by L{_DictHeaders}.\n    """'
newline|'\n'
DECL|member|headers
name|'def'
name|'headers'
op|'('
name|'self'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a L{Headers} instance populated with the header name/values\n        specified by C{kw} and a L{_DictHeaders} wrapped around it and return\n        them both.\n        """'
newline|'\n'
name|'h'
op|'='
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'kw'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'h'
op|'.'
name|'setRawHeaders'
op|'('
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'h'
op|','
name|'_DictHeaders'
op|'('
name|'h'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getItem
dedent|''
name|'def'
name|'test_getItem'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.__getitem__} returns a single header for the given name.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'test'
op|'='
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'wrapper'
op|'['
string|'"test"'
op|']'
op|','
string|'"lemur"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getItemMultiple
dedent|''
name|'def'
name|'test_getItemMultiple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.__getitem__} returns only the last header value for a\n        given name.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'test'
op|'='
op|'['
string|'"lemur"'
op|','
string|'"panda"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'wrapper'
op|'['
string|'"test"'
op|']'
op|','
string|'"panda"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getItemMissing
dedent|''
name|'def'
name|'test_getItemMissing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.__getitem__} raises L{KeyError} if called with a header\n        which is not present.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
op|')'
newline|'\n'
name|'exc'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'KeyError'
op|','
name|'wrapper'
op|'.'
name|'__getitem__'
op|','
string|'"test"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'exc'
op|'.'
name|'args'
op|','
op|'('
string|'"test"'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_iteration
dedent|''
name|'def'
name|'test_iteration'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.__iter__} returns an iterator the elements of which\n        are the lowercase name of each header present.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"lemur"'
op|','
string|'"panda"'
op|']'
op|','
name|'bar'
op|'='
op|'['
string|'"baz"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'list'
op|'('
name|'wrapper'
op|')'
op|')'
op|','
name|'set'
op|'('
op|'['
string|'"foo"'
op|','
string|'"bar"'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_length
dedent|''
name|'def'
name|'test_length'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.__len__} returns the number of headers present.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'wrapper'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'headers'
op|'.'
name|'setRawHeaders'
op|'('
string|'"foo"'
op|','
op|'['
string|'"bar"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'wrapper'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'headers'
op|'.'
name|'setRawHeaders'
op|'('
string|'"test"'
op|','
op|'['
string|'"lemur"'
op|','
string|'"panda"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'wrapper'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setItem
dedent|''
name|'def'
name|'test_setItem'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.__setitem__} sets a single header value for the given\n        name.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
op|')'
newline|'\n'
name|'wrapper'
op|'['
string|'"test"'
op|']'
op|'='
string|'"lemur"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'headers'
op|'.'
name|'getRawHeaders'
op|'('
string|'"test"'
op|')'
op|','
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setItemOverwrites
dedent|''
name|'def'
name|'test_setItemOverwrites'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.__setitem__} will replace any previous header values for\n        the given name.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'test'
op|'='
op|'['
string|'"lemur"'
op|','
string|'"panda"'
op|']'
op|')'
newline|'\n'
name|'wrapper'
op|'['
string|'"test"'
op|']'
op|'='
string|'"lemur"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'headers'
op|'.'
name|'getRawHeaders'
op|'('
string|'"test"'
op|')'
op|','
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_delItem
dedent|''
name|'def'
name|'test_delItem'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.__delitem__} will remove the header values for the given\n        name.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'test'
op|'='
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
name|'del'
name|'wrapper'
op|'['
string|'"test"'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'headers'
op|'.'
name|'hasHeader'
op|'('
string|'"test"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_delItemMissing
dedent|''
name|'def'
name|'test_delItemMissing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.__delitem__} will raise L{KeyError} if the given name is\n        not present.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
op|')'
newline|'\n'
name|'exc'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'KeyError'
op|','
name|'wrapper'
op|'.'
name|'__delitem__'
op|','
string|'"test"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'exc'
op|'.'
name|'args'
op|','
op|'('
string|'"test"'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_keys
dedent|''
name|'def'
name|'test_keys'
op|'('
name|'self'
op|','
name|'_method'
op|'='
string|"'keys'"
op|','
name|'_requireList'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.keys} will return a list of all present header names.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'test'
op|'='
op|'['
string|'"lemur"'
op|']'
op|','
name|'foo'
op|'='
op|'['
string|'"bar"'
op|']'
op|')'
newline|'\n'
name|'keys'
op|'='
name|'getattr'
op|'('
name|'wrapper'
op|','
name|'_method'
op|')'
op|'('
op|')'
newline|'\n'
name|'if'
name|'_requireList'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'keys'
op|','
name|'list'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'keys'
op|')'
op|','
name|'set'
op|'('
op|'['
string|'"foo"'
op|','
string|'"test"'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_iterkeys
dedent|''
name|'def'
name|'test_iterkeys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.iterkeys} will return all present header names.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_keys'
op|'('
string|"'iterkeys'"
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_values
dedent|''
name|'def'
name|'test_values'
op|'('
name|'self'
op|','
name|'_method'
op|'='
string|"'values'"
op|','
name|'_requireList'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.values} will return a list of all present header values,\n        returning only the last value for headers with more than one.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"lemur"'
op|']'
op|','
name|'bar'
op|'='
op|'['
string|'"marmot"'
op|','
string|'"panda"'
op|']'
op|')'
newline|'\n'
name|'values'
op|'='
name|'getattr'
op|'('
name|'wrapper'
op|','
name|'_method'
op|')'
op|'('
op|')'
newline|'\n'
name|'if'
name|'_requireList'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'values'
op|','
name|'list'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'values'
op|')'
op|','
name|'set'
op|'('
op|'['
string|'"lemur"'
op|','
string|'"panda"'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_itervalues
dedent|''
name|'def'
name|'test_itervalues'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.itervalues} will return all present header values,\n        returning only the last value for headers with more than one.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_values'
op|'('
string|"'itervalues'"
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_items
dedent|''
name|'def'
name|'test_items'
op|'('
name|'self'
op|','
name|'_method'
op|'='
string|"'items'"
op|','
name|'_requireList'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.items} will return a list of all present header names\n        and values as tuples, returning only the last value for headers with\n        more than one.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"lemur"'
op|']'
op|','
name|'bar'
op|'='
op|'['
string|'"marmot"'
op|','
string|'"panda"'
op|']'
op|')'
newline|'\n'
name|'items'
op|'='
name|'getattr'
op|'('
name|'wrapper'
op|','
name|'_method'
op|')'
op|'('
op|')'
newline|'\n'
name|'if'
name|'_requireList'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'items'
op|','
name|'list'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'items'
op|')'
op|','
name|'set'
op|'('
op|'['
op|'('
string|'"foo"'
op|','
string|'"lemur"'
op|')'
op|','
op|'('
string|'"bar"'
op|','
string|'"panda"'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_iteritems
dedent|''
name|'def'
name|'test_iteritems'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.iteritems} will return all present header names and\n        values as tuples, returning only the last value for headers with more\n        than one.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_items'
op|'('
string|"'iteritems'"
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_clear
dedent|''
name|'def'
name|'test_clear'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.clear} will remove all headers.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"lemur"'
op|']'
op|','
name|'bar'
op|'='
op|'['
string|'"panda"'
op|']'
op|')'
newline|'\n'
name|'wrapper'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'list'
op|'('
name|'headers'
op|'.'
name|'getAllRawHeaders'
op|'('
op|')'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_copy
dedent|''
name|'def'
name|'test_copy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.copy} will return a C{dict} with all the same headers\n        and the last value for each.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"lemur"'
op|','
string|'"panda"'
op|']'
op|','
name|'bar'
op|'='
op|'['
string|'"marmot"'
op|']'
op|')'
newline|'\n'
name|'duplicate'
op|'='
name|'wrapper'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'duplicate'
op|','
op|'{'
string|'"foo"'
op|':'
string|'"panda"'
op|','
string|'"bar"'
op|':'
string|'"marmot"'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_get
dedent|''
name|'def'
name|'test_get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.get} returns the last value for the given header name.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"lemur"'
op|','
string|'"panda"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'wrapper'
op|'.'
name|'get'
op|'('
string|'"foo"'
op|')'
op|','
string|'"panda"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getMissing
dedent|''
name|'def'
name|'test_getMissing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.get} returns C{None} for a header which is not present.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'wrapper'
op|'.'
name|'get'
op|'('
string|'"foo"'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getDefault
dedent|''
name|'def'
name|'test_getDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.get} returns the last value for the given header name\n        even when it is invoked with a default value.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'wrapper'
op|'.'
name|'get'
op|'('
string|'"foo"'
op|','
string|'"bar"'
op|')'
op|','
string|'"lemur"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getDefaultMissing
dedent|''
name|'def'
name|'test_getDefaultMissing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.get} returns the default value specified if asked for a\n        header which is not present.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'wrapper'
op|'.'
name|'get'
op|'('
string|'"foo"'
op|','
string|'"bar"'
op|')'
op|','
string|'"bar"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_has_key
dedent|''
name|'def'
name|'test_has_key'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.has_key} returns C{True} if the given header is present,\n        C{False} otherwise.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'wrapper'
op|'.'
name|'has_key'
op|'('
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'wrapper'
op|'.'
name|'has_key'
op|'('
string|'"bar"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_contains
dedent|''
name|'def'
name|'test_contains'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.__contains__} returns C{True} if the given header is\n        present, C{False} otherwise.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"foo"'
op|','
name|'wrapper'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|'"bar"'
op|','
name|'wrapper'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_pop
dedent|''
name|'def'
name|'test_pop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.pop} returns the last header value associated with the\n        given header name and removes the header.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"lemur"'
op|','
string|'"panda"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'wrapper'
op|'.'
name|'pop'
op|'('
string|'"foo"'
op|')'
op|','
string|'"panda"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'headers'
op|'.'
name|'getRawHeaders'
op|'('
string|'"foo"'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_popMissing
dedent|''
name|'def'
name|'test_popMissing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.pop} raises L{KeyError} if passed a header name which is\n        not present.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'KeyError'
op|','
name|'wrapper'
op|'.'
name|'pop'
op|','
string|'"foo"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_popDefault
dedent|''
name|'def'
name|'test_popDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.pop} returns the last header value associated with the\n        given header name and removes the header, even if it is supplied with a\n        default value.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'wrapper'
op|'.'
name|'pop'
op|'('
string|'"foo"'
op|','
string|'"bar"'
op|')'
op|','
string|'"lemur"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'headers'
op|'.'
name|'getRawHeaders'
op|'('
string|'"foo"'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_popDefaultMissing
dedent|''
name|'def'
name|'test_popDefaultMissing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.pop} returns the default value is asked for a header\n        name which is not present.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'wrapper'
op|'.'
name|'pop'
op|'('
string|'"bar"'
op|','
string|'"baz"'
op|')'
op|','
string|'"baz"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'headers'
op|'.'
name|'getRawHeaders'
op|'('
string|'"foo"'
op|')'
op|','
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_popitem
dedent|''
name|'def'
name|'test_popitem'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.popitem} returns some header name/value pair.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"lemur"'
op|','
string|'"panda"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'wrapper'
op|'.'
name|'popitem'
op|'('
op|')'
op|','
op|'('
string|'"foo"'
op|','
string|'"panda"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'headers'
op|'.'
name|'getRawHeaders'
op|'('
string|'"foo"'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_popitemEmpty
dedent|''
name|'def'
name|'test_popitemEmpty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.popitem} raises L{KeyError} if there are no headers\n        present.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'KeyError'
op|','
name|'wrapper'
op|'.'
name|'popitem'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_update
dedent|''
name|'def'
name|'test_update'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.update} adds the header/value pairs in the C{dict} it is\n        passed, overriding any existing values for those headers.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
name|'wrapper'
op|'.'
name|'update'
op|'('
op|'{'
string|'"foo"'
op|':'
string|'"panda"'
op|','
string|'"bar"'
op|':'
string|'"marmot"'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'headers'
op|'.'
name|'getRawHeaders'
op|'('
string|'"foo"'
op|')'
op|','
op|'['
string|'"panda"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'headers'
op|'.'
name|'getRawHeaders'
op|'('
string|'"bar"'
op|')'
op|','
op|'['
string|'"marmot"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_updateWithKeywords
dedent|''
name|'def'
name|'test_updateWithKeywords'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_DictHeaders.update} adds header names given as keyword arguments\n        with the keyword values as the header value.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"lemur"'
op|']'
op|')'
newline|'\n'
name|'wrapper'
op|'.'
name|'update'
op|'('
name|'foo'
op|'='
string|'"panda"'
op|','
name|'bar'
op|'='
string|'"marmot"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'headers'
op|'.'
name|'getRawHeaders'
op|'('
string|'"foo"'
op|')'
op|','
op|'['
string|'"panda"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'headers'
op|'.'
name|'getRawHeaders'
op|'('
string|'"bar"'
op|')'
op|','
op|'['
string|'"marmot"'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'sys'
op|'.'
name|'version_info'
op|'<'
op|'('
number|'2'
op|','
number|'4'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'test_updateWithKeywords'
op|'.'
name|'skip'
op|'='
op|'('
nl|'\n'
string|'"Python 2.3 does not support keyword arguments to dict.update."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setdefaultMissing
dedent|''
name|'def'
name|'test_setdefaultMissing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If passed the name of a header which is not present,\n        L{_DictHeaders.setdefault} sets the value of the given header to the\n        specified default value and returns it.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"bar"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'wrapper'
op|'.'
name|'setdefault'
op|'('
string|'"baz"'
op|','
string|'"quux"'
op|')'
op|','
string|'"quux"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'headers'
op|'.'
name|'getRawHeaders'
op|'('
string|'"foo"'
op|')'
op|','
op|'['
string|'"bar"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'headers'
op|'.'
name|'getRawHeaders'
op|'('
string|'"baz"'
op|')'
op|','
op|'['
string|'"quux"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setdefaultPresent
dedent|''
name|'def'
name|'test_setdefaultPresent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If passed the name of a header which is present,\n        L{_DictHeaders.setdefault} makes no changes to the headers and\n        returns the last value already associated with that header.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"bar"'
op|','
string|'"baz"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'wrapper'
op|'.'
name|'setdefault'
op|'('
string|'"foo"'
op|','
string|'"quux"'
op|')'
op|','
string|'"baz"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'headers'
op|'.'
name|'getRawHeaders'
op|'('
string|'"foo"'
op|')'
op|','
op|'['
string|'"bar"'
op|','
string|'"baz"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setdefaultDefault
dedent|''
name|'def'
name|'test_setdefaultDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a value is not passed to L{_DictHeaders.setdefault}, C{None} is\n        used.\n        """'
newline|'\n'
comment|'# This results in an invalid state for the headers, but maybe some'
nl|'\n'
comment|'# application is doing this an intermediate step towards some other'
nl|'\n'
comment|"# state.  Anyway, it was broken with the old implementation so it's"
nl|'\n'
comment|'# broken with the new implementation.  Compatibility, for the win.'
nl|'\n'
comment|'# -exarkun'
nl|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'wrapper'
op|'.'
name|'setdefault'
op|'('
string|'"foo"'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'headers'
op|'.'
name|'getRawHeaders'
op|'('
string|'"foo"'
op|')'
op|','
op|'['
name|'None'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_dictComparison
dedent|''
name|'def'
name|'test_dictComparison'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An instance of L{_DictHeaders} compares equal to a C{dict} which\n        contains the same header/value pairs.  For header names with multiple\n        values, the last value only is considered.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
name|'foo'
op|'='
op|'['
string|'"lemur"'
op|']'
op|','
name|'bar'
op|'='
op|'['
string|'"panda"'
op|','
string|'"marmot"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'wrapper'
op|','
op|'{'
string|'"foo"'
op|':'
string|'"lemur"'
op|','
string|'"bar"'
op|':'
string|'"panda"'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'wrapper'
op|','
op|'{'
string|'"foo"'
op|':'
string|'"lemur"'
op|','
string|'"bar"'
op|':'
string|'"marmot"'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_otherComparison
dedent|''
name|'def'
name|'test_otherComparison'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An instance of L{_DictHeaders} does not compare equal to other\n        unrelated objects.\n        """'
newline|'\n'
name|'headers'
op|','
name|'wrapper'
op|'='
name|'self'
op|'.'
name|'headers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'wrapper'
op|','
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'wrapper'
op|','
name|'object'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'wrapper'
op|','
string|'"foo"'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.web.test.test_domhelpers -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nSpecific tests for (some of) the methods in L{twisted.web.domhelpers}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
name|'import'
name|'minidom'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'microdom'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'domhelpers'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DOMHelpersTestsMixin
name|'class'
name|'DOMHelpersTestsMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mixin for L{TestCase} subclasses which defines test methods for\n    domhelpers functionality based on a DOM creation function provided by a\n    subclass.\n    """'
newline|'\n'
DECL|variable|dom
name|'dom'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|test_getElementsByTagName
name|'def'
name|'test_getElementsByTagName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'doc1'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
string|"'<foo/>'"
op|')'
newline|'\n'
name|'actual'
op|'='
name|'domhelpers'
op|'.'
name|'getElementsByTagName'
op|'('
name|'doc1'
op|','
string|"'foo'"
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'nodeName'
newline|'\n'
name|'expected'
op|'='
string|"'foo'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
name|'el1'
op|'='
name|'doc1'
op|'.'
name|'documentElement'
newline|'\n'
name|'actual'
op|'='
name|'domhelpers'
op|'.'
name|'getElementsByTagName'
op|'('
name|'el1'
op|','
string|"'foo'"
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'nodeName'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
name|'doc2_xml'
op|'='
string|'\'<a><foo in="a"/><b><foo in="b"/></b><c><foo in="c"/></c><foo in="d"/><foo in="ef"/><g><foo in="g"/><h><foo in="h"/></h></g></a>\''
newline|'\n'
name|'doc2'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
name|'doc2_xml'
op|')'
newline|'\n'
name|'tag_list'
op|'='
name|'domhelpers'
op|'.'
name|'getElementsByTagName'
op|'('
name|'doc2'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'actual'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|"'in'"
op|')'
name|'for'
name|'node'
name|'in'
name|'tag_list'
op|']'
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'abcdefgh'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
name|'el2'
op|'='
name|'doc2'
op|'.'
name|'documentElement'
newline|'\n'
name|'tag_list'
op|'='
name|'domhelpers'
op|'.'
name|'getElementsByTagName'
op|'('
name|'el2'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'actual'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|"'in'"
op|')'
name|'for'
name|'node'
name|'in'
name|'tag_list'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
name|'doc3_xml'
op|'='
string|'\'\'\'\n<a><foo in="a"/>\n    <b><foo in="b"/>\n        <d><foo in="d"/>\n            <g><foo in="g"/></g>\n            <h><foo in="h"/></h>\n        </d>\n        <e><foo in="e"/>\n            <i><foo in="i"/></i>\n        </e>\n    </b>\n    <c><foo in="c"/>\n        <f><foo in="f"/>\n            <j><foo in="j"/></j>\n        </f>\n    </c>\n</a>\'\'\''
newline|'\n'
name|'doc3'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
name|'doc3_xml'
op|')'
newline|'\n'
name|'tag_list'
op|'='
name|'domhelpers'
op|'.'
name|'getElementsByTagName'
op|'('
name|'doc3'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'actual'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|"'in'"
op|')'
name|'for'
name|'node'
name|'in'
name|'tag_list'
op|']'
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'abdgheicfj'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
name|'el3'
op|'='
name|'doc3'
op|'.'
name|'documentElement'
newline|'\n'
name|'tag_list'
op|'='
name|'domhelpers'
op|'.'
name|'getElementsByTagName'
op|'('
name|'el3'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'actual'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|"'in'"
op|')'
name|'for'
name|'node'
name|'in'
name|'tag_list'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
name|'doc4_xml'
op|'='
string|"'<foo><bar></bar><baz><foo/></baz></foo>'"
newline|'\n'
name|'doc4'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
name|'doc4_xml'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'domhelpers'
op|'.'
name|'getElementsByTagName'
op|'('
name|'doc4'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'root'
op|'='
name|'doc4'
op|'.'
name|'documentElement'
newline|'\n'
name|'expected'
op|'='
op|'['
name|'root'
op|','
name|'root'
op|'.'
name|'childNodes'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'childNodes'
op|'['
number|'0'
op|']'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'domhelpers'
op|'.'
name|'getElementsByTagName'
op|'('
name|'root'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_gatherTextNodes
dedent|''
name|'def'
name|'test_gatherTextNodes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'doc1'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
string|"'<a>foo</a>'"
op|')'
newline|'\n'
name|'actual'
op|'='
name|'domhelpers'
op|'.'
name|'gatherTextNodes'
op|'('
name|'doc1'
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'foo'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'domhelpers'
op|'.'
name|'gatherTextNodes'
op|'('
name|'doc1'
op|'.'
name|'documentElement'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
name|'doc2_xml'
op|'='
string|"'<a>a<b>b</b><c>c</c>def<g>g<h>h</h></g></a>'"
newline|'\n'
name|'doc2'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
name|'doc2_xml'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'domhelpers'
op|'.'
name|'gatherTextNodes'
op|'('
name|'doc2'
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'abcdefgh'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'domhelpers'
op|'.'
name|'gatherTextNodes'
op|'('
name|'doc2'
op|'.'
name|'documentElement'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
name|'doc3_xml'
op|'='
op|'('
string|"'<a>a<b>b<d>d<g>g</g><h>h</h></d><e>e<i>i</i></e></b>'"
op|'+'
nl|'\n'
string|"'<c>c<f>f<j>j</j></f></c></a>'"
op|')'
newline|'\n'
name|'doc3'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
name|'doc3_xml'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'domhelpers'
op|'.'
name|'gatherTextNodes'
op|'('
name|'doc3'
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'abdgheicfj'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'domhelpers'
op|'.'
name|'gatherTextNodes'
op|'('
name|'doc3'
op|'.'
name|'documentElement'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_clearNode
dedent|''
name|'def'
name|'test_clearNode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'doc1'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
string|"'<a><b><c><d/></c></b></a>'"
op|')'
newline|'\n'
name|'a_node'
op|'='
name|'doc1'
op|'.'
name|'documentElement'
newline|'\n'
name|'domhelpers'
op|'.'
name|'clearNode'
op|'('
name|'a_node'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'a_node'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'a'"
op|')'
op|'.'
name|'toxml'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'doc2'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
string|"'<a><b><c><d/></c></b></a>'"
op|')'
newline|'\n'
name|'b_node'
op|'='
name|'doc2'
op|'.'
name|'documentElement'
op|'.'
name|'childNodes'
op|'['
number|'0'
op|']'
newline|'\n'
name|'domhelpers'
op|'.'
name|'clearNode'
op|'('
name|'b_node'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'doc2'
op|'.'
name|'documentElement'
op|'.'
name|'toxml'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'expected'
op|'.'
name|'appendChild'
op|'('
name|'self'
op|'.'
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'b'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|'.'
name|'toxml'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_get
dedent|''
name|'def'
name|'test_get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'doc1'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
string|'\'<a><b id="bar"/><c class="foo"/></a>\''
op|')'
newline|'\n'
name|'node'
op|'='
name|'domhelpers'
op|'.'
name|'get'
op|'('
name|'doc1'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'node'
op|'.'
name|'toxml'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'c'"
op|')'
newline|'\n'
name|'expected'
op|'.'
name|'setAttribute'
op|'('
string|"'class'"
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|'.'
name|'toxml'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'node'
op|'='
name|'domhelpers'
op|'.'
name|'get'
op|'('
name|'doc1'
op|','
string|'"bar"'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'node'
op|'.'
name|'toxml'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'b'"
op|')'
newline|'\n'
name|'expected'
op|'.'
name|'setAttribute'
op|'('
string|"'id'"
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|'.'
name|'toxml'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'domhelpers'
op|'.'
name|'NodeLookupError'
op|','
nl|'\n'
name|'domhelpers'
op|'.'
name|'get'
op|','
nl|'\n'
name|'doc1'
op|','
nl|'\n'
string|'"pzork"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getIfExists
dedent|''
name|'def'
name|'test_getIfExists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'doc1'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
string|'\'<a><b id="bar"/><c class="foo"/></a>\''
op|')'
newline|'\n'
name|'node'
op|'='
name|'domhelpers'
op|'.'
name|'getIfExists'
op|'('
name|'doc1'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'node'
op|'.'
name|'toxml'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'c'"
op|')'
newline|'\n'
name|'expected'
op|'.'
name|'setAttribute'
op|'('
string|"'class'"
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|'.'
name|'toxml'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'node'
op|'='
name|'domhelpers'
op|'.'
name|'getIfExists'
op|'('
name|'doc1'
op|','
string|'"pzork"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'node'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getAndClear
dedent|''
name|'def'
name|'test_getAndClear'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'doc1'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
string|'\'<a><b id="foo"><c></c></b></a>\''
op|')'
newline|'\n'
name|'node'
op|'='
name|'domhelpers'
op|'.'
name|'getAndClear'
op|'('
name|'doc1'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'node'
op|'.'
name|'toxml'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'b'"
op|')'
newline|'\n'
name|'expected'
op|'.'
name|'setAttribute'
op|'('
string|"'id'"
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|'.'
name|'toxml'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_locateNodes
dedent|''
name|'def'
name|'test_locateNodes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'doc1'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
string|'\'<a><b foo="olive"><c foo="olive"/></b><d foo="poopy"/></a>\''
op|')'
newline|'\n'
name|'node_list'
op|'='
name|'domhelpers'
op|'.'
name|'locateNodes'
op|'('
nl|'\n'
name|'doc1'
op|'.'
name|'childNodes'
op|','
string|"'foo'"
op|','
string|"'olive'"
op|','
name|'noNesting'
op|'='
number|'1'
op|')'
newline|'\n'
name|'actual'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'node'
op|'.'
name|'toxml'
op|'('
op|')'
name|'for'
name|'node'
name|'in'
name|'node_list'
op|']'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'b'"
op|')'
newline|'\n'
name|'expected'
op|'.'
name|'setAttribute'
op|'('
string|"'foo'"
op|','
string|"'olive'"
op|')'
newline|'\n'
name|'c'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'Element'
op|'('
string|"'c'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'setAttribute'
op|'('
string|"'foo'"
op|','
string|"'olive'"
op|')'
newline|'\n'
name|'expected'
op|'.'
name|'appendChild'
op|'('
name|'c'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|'.'
name|'toxml'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'node_list'
op|'='
name|'domhelpers'
op|'.'
name|'locateNodes'
op|'('
nl|'\n'
name|'doc1'
op|'.'
name|'childNodes'
op|','
string|"'foo'"
op|','
string|"'olive'"
op|','
name|'noNesting'
op|'='
number|'0'
op|')'
newline|'\n'
name|'actual'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'node'
op|'.'
name|'toxml'
op|'('
op|')'
name|'for'
name|'node'
name|'in'
name|'node_list'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|'.'
name|'toxml'
op|'('
op|')'
op|'+'
name|'c'
op|'.'
name|'toxml'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getParents
dedent|''
name|'def'
name|'test_getParents'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'doc1'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
string|"'<a><b><c><d/></c><e/></b><f/></a>'"
op|')'
newline|'\n'
name|'node_list'
op|'='
name|'domhelpers'
op|'.'
name|'getParents'
op|'('
nl|'\n'
name|'doc1'
op|'.'
name|'childNodes'
op|'['
number|'0'
op|']'
op|'.'
name|'childNodes'
op|'['
number|'0'
op|']'
op|'.'
name|'childNodes'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'actual'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'node'
op|'.'
name|'tagName'
name|'for'
name|'node'
name|'in'
name|'node_list'
nl|'\n'
name|'if'
name|'hasattr'
op|'('
name|'node'
op|','
string|"'tagName'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
string|"'cba'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_findElementsWithAttribute
dedent|''
name|'def'
name|'test_findElementsWithAttribute'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'doc1'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
string|'\'<a foo="1"><b foo="2"/><c foo="1"/><d/></a>\''
op|')'
newline|'\n'
name|'node_list'
op|'='
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'doc1'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'actual'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'node'
op|'.'
name|'tagName'
name|'for'
name|'node'
name|'in'
name|'node_list'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
string|"'abc'"
op|')'
newline|'\n'
nl|'\n'
name|'node_list'
op|'='
name|'domhelpers'
op|'.'
name|'findElementsWithAttribute'
op|'('
name|'doc1'
op|','
string|"'foo'"
op|','
string|"'1'"
op|')'
newline|'\n'
name|'actual'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'node'
op|'.'
name|'tagName'
name|'for'
name|'node'
name|'in'
name|'node_list'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
string|"'ac'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_findNodesNamed
dedent|''
name|'def'
name|'test_findNodesNamed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'doc1'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
string|"'<doc><foo/><bar/><foo>a</foo></doc>'"
op|')'
newline|'\n'
name|'node_list'
op|'='
name|'domhelpers'
op|'.'
name|'findNodesNamed'
op|'('
name|'doc1'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'actual'
op|'='
name|'len'
op|'('
name|'node_list'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOT SURE WHAT THESE ARE SUPPOSED TO DO..'
nl|'\n'
comment|'# def test_RawText  FIXME'
nl|'\n'
comment|'# def test_superSetAttribute FIXME'
nl|'\n'
comment|'# def test_superPrependAttribute FIXME'
nl|'\n'
comment|'# def test_superAppendAttribute FIXME'
nl|'\n'
comment|'# def test_substitute FIXME'
nl|'\n'
nl|'\n'
DECL|member|test_escape
dedent|''
name|'def'
name|'test_escape'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'j'
op|'='
string|'\'this string " contains many & characters> xml< won\\\'t like\''
newline|'\n'
name|'expected'
op|'='
string|"'this string &quot; contains many &amp; characters&gt; xml&lt; won\\'t like'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'domhelpers'
op|'.'
name|'escape'
op|'('
name|'j'
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unescape
dedent|''
name|'def'
name|'test_unescape'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'j'
op|'='
string|"'this string &quot; has &&amp; entities &gt; &lt; and some characters xml won\\'t like<'"
newline|'\n'
name|'expected'
op|'='
string|'\'this string " has && entities > < and some characters xml won\\\'t like<\''
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'domhelpers'
op|'.'
name|'unescape'
op|'('
name|'j'
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getNodeText
dedent|''
name|'def'
name|'test_getNodeText'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{getNodeText} returns the concatenation of all the text data at or\n        beneath the node passed to it.\n        """'
newline|'\n'
name|'node'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
string|"'<foo><bar>baz</bar><bar>quux</bar></foo>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'domhelpers'
op|'.'
name|'getNodeText'
op|'('
name|'node'
op|')'
op|','
string|'"bazquux"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MicroDOMHelpersTests
dedent|''
dedent|''
name|'class'
name|'MicroDOMHelpersTests'
op|'('
name|'DOMHelpersTestsMixin'
op|','
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|dom
indent|'    '
name|'dom'
op|'='
name|'microdom'
newline|'\n'
nl|'\n'
DECL|member|test_gatherTextNodesDropsWhitespace
name|'def'
name|'test_gatherTextNodesDropsWhitespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Microdom discards whitespace-only text nodes, so L{gatherTextNodes}\n        returns only the text from nodes which had non-whitespace characters.\n        """'
newline|'\n'
name|'doc4_xml'
op|'='
string|"'''<html>\n  <head>\n  </head>\n  <body>\n    stuff\n  </body>\n</html>\n'''"
newline|'\n'
name|'doc4'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
name|'doc4_xml'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'domhelpers'
op|'.'
name|'gatherTextNodes'
op|'('
name|'doc4'
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'\\n    stuff\\n  '"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'domhelpers'
op|'.'
name|'gatherTextNodes'
op|'('
name|'doc4'
op|'.'
name|'documentElement'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|test_textEntitiesNotDecoded
dedent|''
name|'def'
name|'test_textEntitiesNotDecoded'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Microdom does not decode entities in text nodes.\n        """'
newline|'\n'
name|'doc5_xml'
op|'='
string|"'<x>Souffl&amp;</x>'"
newline|'\n'
name|'doc5'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
name|'doc5_xml'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'domhelpers'
op|'.'
name|'gatherTextNodes'
op|'('
name|'doc5'
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'Souffl&amp;'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'domhelpers'
op|'.'
name|'gatherTextNodes'
op|'('
name|'doc5'
op|'.'
name|'documentElement'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MiniDOMHelpersTests
dedent|''
dedent|''
name|'class'
name|'MiniDOMHelpersTests'
op|'('
name|'DOMHelpersTestsMixin'
op|','
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|dom
indent|'    '
name|'dom'
op|'='
name|'minidom'
newline|'\n'
nl|'\n'
DECL|member|test_textEntitiesDecoded
name|'def'
name|'test_textEntitiesDecoded'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Minidom does decode entities in text nodes.\n        """'
newline|'\n'
name|'doc5_xml'
op|'='
string|"'<x>Souffl&amp;</x>'"
newline|'\n'
name|'doc5'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
name|'doc5_xml'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'domhelpers'
op|'.'
name|'gatherTextNodes'
op|'('
name|'doc5'
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'Souffl&'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'domhelpers'
op|'.'
name|'gatherTextNodes'
op|'('
name|'doc5'
op|'.'
name|'documentElement'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getNodeUnicodeText
dedent|''
name|'def'
name|'test_getNodeUnicodeText'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{domhelpers.getNodeText} returns a C{unicode} string when text\n        nodes are represented in the DOM with unicode, whether or not there\n        are non-ASCII characters present.\n        """'
newline|'\n'
name|'node'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
string|'"<foo>bar</foo>"'
op|')'
newline|'\n'
name|'text'
op|'='
name|'domhelpers'
op|'.'
name|'getNodeText'
op|'('
name|'node'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'text'
op|','
string|'u"bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'text'
op|','
name|'unicode'
op|')'
newline|'\n'
nl|'\n'
name|'node'
op|'='
name|'self'
op|'.'
name|'dom'
op|'.'
name|'parseString'
op|'('
string|'u"<foo>\\N{SNOWMAN}</foo>"'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
op|')'
newline|'\n'
name|'text'
op|'='
name|'domhelpers'
op|'.'
name|'getNodeText'
op|'('
name|'node'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'text'
op|','
string|'u"\\N{SNOWMAN}"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'text'
op|','
name|'unicode'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

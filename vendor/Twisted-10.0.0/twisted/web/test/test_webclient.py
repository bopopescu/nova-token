begin_unit
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.web.client}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'from'
name|'errno'
name|'import'
name|'ENOSPC'
newline|'\n'
nl|'\n'
name|'from'
name|'urlparse'
name|'import'
name|'urlparse'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'server'
op|','
name|'static'
op|','
name|'client'
op|','
name|'error'
op|','
name|'util'
op|','
name|'resource'
op|','
name|'http_headers'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
op|','
name|'defer'
op|','
name|'interfaces'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'log'
name|'import'
name|'msg'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
op|'.'
name|'policies'
name|'import'
name|'WrappingFactory'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'StringTransport'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'MemoryReactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'address'
name|'import'
name|'IPv4Address'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'task'
name|'import'
name|'Clock'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'ConnectionRefusedError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'protocol'
name|'import'
name|'Protocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'client'
name|'import'
name|'Request'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'error'
name|'import'
name|'SchemeNotSupported'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'ssl'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
DECL|variable|ssl
indent|'    '
name|'ssl'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExtendedRedirect
dedent|''
name|'class'
name|'ExtendedRedirect'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Redirection resource.\n\n    The HTTP status code is set according to the C{code} query parameter.\n\n    @type lastMethod: C{str}\n    @ivar lastMethod: Last handled HTTP request method\n    """'
newline|'\n'
DECL|variable|isLeaf
name|'isLeaf'
op|'='
number|'1'
newline|'\n'
DECL|variable|lastMethod
name|'lastMethod'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'url'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resource'
op|'.'
name|'Resource'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'url'
op|'='
name|'url'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'lastMethod'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'lastMethod'
op|'='
name|'request'
op|'.'
name|'method'
newline|'\n'
name|'return'
string|'"OK Thnx!"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'lastMethod'
op|'='
name|'request'
op|'.'
name|'method'
newline|'\n'
name|'code'
op|'='
name|'int'
op|'('
name|'request'
op|'.'
name|'args'
op|'['
string|"'code'"
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'redirectTo'
op|'('
name|'self'
op|'.'
name|'url'
op|','
name|'request'
op|','
name|'code'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getChild
dedent|''
dedent|''
name|'def'
name|'getChild'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|redirectTo
dedent|''
name|'def'
name|'redirectTo'
op|'('
name|'self'
op|','
name|'url'
op|','
name|'request'
op|','
name|'code'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'request'
op|'.'
name|'setResponseCode'
op|'('
name|'code'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHeader'
op|'('
string|'"location"'
op|','
name|'url'
op|')'
newline|'\n'
name|'return'
string|'"OK Bye!"'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ForeverTakingResource
dedent|''
dedent|''
name|'class'
name|'ForeverTakingResource'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{ForeverTakingResource} is a resource which never finishes responding\n    to requests.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'write'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resource'
op|'.'
name|'Resource'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'='
name|'write'
newline|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_write'
op|':'
newline|'\n'
indent|'            '
name|'request'
op|'.'
name|'write'
op|'('
string|"'some bytes'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'server'
op|'.'
name|'NOT_DONE_YET'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CookieMirrorResource
dedent|''
dedent|''
name|'class'
name|'CookieMirrorResource'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
DECL|member|render
indent|'    '
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'request'
op|'.'
name|'received_cookies'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'.'
name|'append'
op|'('
op|'('
name|'k'
op|','
name|'v'
op|')'
op|')'
newline|'\n'
dedent|''
name|'l'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'return'
name|'repr'
op|'('
name|'l'
op|')'
newline|'\n'
nl|'\n'
DECL|class|RawCookieMirrorResource
dedent|''
dedent|''
name|'class'
name|'RawCookieMirrorResource'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
DECL|member|render
indent|'    '
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'repr'
op|'('
name|'request'
op|'.'
name|'getHeader'
op|'('
string|"'cookie'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ErrorResource
dedent|''
dedent|''
name|'class'
name|'ErrorResource'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|render
indent|'    '
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'request'
op|'.'
name|'setResponseCode'
op|'('
number|'401'
op|')'
newline|'\n'
name|'if'
name|'request'
op|'.'
name|'args'
op|'.'
name|'get'
op|'('
string|'"showlength"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'request'
op|'.'
name|'setHeader'
op|'('
string|'"content-length"'
op|','
string|'"0"'
op|')'
newline|'\n'
dedent|''
name|'return'
string|'""'
newline|'\n'
nl|'\n'
DECL|class|NoLengthResource
dedent|''
dedent|''
name|'class'
name|'NoLengthResource'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|render
indent|'    '
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"nolength"'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|HostHeaderResource
dedent|''
dedent|''
name|'class'
name|'HostHeaderResource'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A testing resource which renders itself as the value of the host header\n    from the request.\n    """'
newline|'\n'
DECL|member|render
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'request'
op|'.'
name|'received_headers'
op|'['
string|"'host'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PayloadResource
dedent|''
dedent|''
name|'class'
name|'PayloadResource'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A testing resource which renders itself as the contents of the request body\n    as long as the request body is 100 bytes long, otherwise which renders\n    itself as C{"ERROR"}.\n    """'
newline|'\n'
DECL|member|render
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'='
name|'request'
op|'.'
name|'content'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'contentLength'
op|'='
name|'request'
op|'.'
name|'received_headers'
op|'['
string|"'content-length'"
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'data'
op|')'
op|'!='
number|'100'
name|'or'
name|'int'
op|'('
name|'contentLength'
op|')'
op|'!='
number|'100'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"ERROR"'
newline|'\n'
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BrokenDownloadResource
dedent|''
dedent|''
name|'class'
name|'BrokenDownloadResource'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|render
indent|'    '
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
comment|'# only sends 3 bytes even though it claims to send 5'
nl|'\n'
indent|'        '
name|'request'
op|'.'
name|'setHeader'
op|'('
string|'"content-length"'
op|','
string|'"5"'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'write'
op|'('
string|"'abc'"
op|')'
newline|'\n'
name|'return'
string|"''"
newline|'\n'
nl|'\n'
DECL|class|CountingRedirect
dedent|''
dedent|''
name|'class'
name|'CountingRedirect'
op|'('
name|'util'
op|'.'
name|'Redirect'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A L{util.Redirect} resource that keeps track of the number of times the\n    resource has been accessed.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'util'
op|'.'
name|'Redirect'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'count'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'count'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'util'
op|'.'
name|'Redirect'
op|'.'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ParseUrlTestCase
dedent|''
dedent|''
name|'class'
name|'ParseUrlTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test URL parsing facility and defaults values.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_parse
name|'def'
name|'test_parse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{client._parse} correctly parses a URL into its various components.\n        """'
newline|'\n'
comment|'# The default port for HTTP is 80.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'client'
op|'.'
name|'_parse'
op|'('
string|"'http://127.0.0.1/'"
op|')'
op|','
nl|'\n'
op|'('
string|"'http'"
op|','
string|"'127.0.0.1'"
op|','
number|'80'
op|','
string|"'/'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# The default port for HTTPS is 443.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'client'
op|'.'
name|'_parse'
op|'('
string|"'https://127.0.0.1/'"
op|')'
op|','
nl|'\n'
op|'('
string|"'https'"
op|','
string|"'127.0.0.1'"
op|','
number|'443'
op|','
string|"'/'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Specifying a port.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'client'
op|'.'
name|'_parse'
op|'('
string|"'http://spam:12345/'"
op|')'
op|','
nl|'\n'
op|'('
string|"'http'"
op|','
string|"'spam'"
op|','
number|'12345'
op|','
string|"'/'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Weird (but commonly accepted) structure uses default port.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'client'
op|'.'
name|'_parse'
op|'('
string|"'http://spam:/'"
op|')'
op|','
nl|'\n'
op|'('
string|"'http'"
op|','
string|"'spam'"
op|','
number|'80'
op|','
string|"'/'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Spaces in the hostname are trimmed, the default path is /.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'client'
op|'.'
name|'_parse'
op|'('
string|"'http://foo '"
op|')'
op|','
nl|'\n'
op|'('
string|"'http'"
op|','
string|"'foo'"
op|','
number|'80'
op|','
string|"'/'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_externalUnicodeInterference
dedent|''
name|'def'
name|'test_externalUnicodeInterference'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{client._parse} should return C{str} for the scheme, host, and path\n        elements of its return tuple, even when passed an URL which has\n        previously been passed to L{urlparse} as a C{unicode} string.\n        """'
newline|'\n'
name|'badInput'
op|'='
string|"u'http://example.com/path'"
newline|'\n'
name|'goodInput'
op|'='
name|'badInput'
op|'.'
name|'encode'
op|'('
string|"'ascii'"
op|')'
newline|'\n'
name|'urlparse'
op|'('
name|'badInput'
op|')'
newline|'\n'
name|'scheme'
op|','
name|'host'
op|','
name|'port'
op|','
name|'path'
op|'='
name|'client'
op|'.'
name|'_parse'
op|'('
name|'goodInput'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'scheme'
op|','
name|'str'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'host'
op|','
name|'str'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'path'
op|','
name|'str'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|HTTPPageGetterTests
dedent|''
dedent|''
name|'class'
name|'HTTPPageGetterTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{HTTPPagerGetter}, the HTTP client protocol implementation\n    used to implement L{getPage}.\n    """'
newline|'\n'
DECL|member|test_earlyHeaders
name|'def'
name|'test_earlyHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When a connection is made, L{HTTPPagerGetter} sends the headers from\n        its factory\'s C{headers} dict.  If I{Host} or I{Content-Length} is\n        present in this dict, the values are not sent, since they are sent with\n        special values before the C{headers} dict is processed.  If\n        I{User-Agent} is present in the dict, it overrides the value of the\n        C{agent} attribute of the factory.  If I{Cookie} is present in the\n        dict, its value is added to the values from the factory\'s C{cookies}\n        attribute.\n        """'
newline|'\n'
name|'factory'
op|'='
name|'client'
op|'.'
name|'HTTPClientFactory'
op|'('
nl|'\n'
string|"'http://foo/bar'"
op|','
nl|'\n'
name|'agent'
op|'='
string|'"foobar"'
op|','
nl|'\n'
name|'cookies'
op|'='
op|'{'
string|"'baz'"
op|':'
string|"'quux'"
op|'}'
op|','
nl|'\n'
name|'postdata'
op|'='
string|'"some data"'
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'Host'"
op|':'
string|"'example.net'"
op|','
nl|'\n'
string|"'User-Agent'"
op|':'
string|"'fooble'"
op|','
nl|'\n'
string|"'Cookie'"
op|':'
string|"'blah blah'"
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
string|"'12981'"
op|','
nl|'\n'
string|"'Useful'"
op|':'
string|"'value'"
op|'}'
op|')'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'client'
op|'.'
name|'HTTPPageGetter'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'factory'
op|'='
name|'factory'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|'"GET /bar HTTP/1.0\\r\\n"'
nl|'\n'
string|'"Host: example.net\\r\\n"'
nl|'\n'
string|'"User-Agent: foobar\\r\\n"'
nl|'\n'
string|'"Content-Length: 9\\r\\n"'
nl|'\n'
string|'"Useful: value\\r\\n"'
nl|'\n'
string|'"connection: close\\r\\n"'
nl|'\n'
string|'"Cookie: blah blah; baz=quux\\r\\n"'
nl|'\n'
string|'"\\r\\n"'
nl|'\n'
string|'"some data"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|WebClientTestCase
dedent|''
dedent|''
name|'class'
name|'WebClientTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|_listen
indent|'    '
name|'def'
name|'_listen'
op|'('
name|'self'
op|','
name|'site'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'site'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cleanupServerConnections'
op|'='
number|'0'
newline|'\n'
name|'name'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'name'
op|')'
newline|'\n'
name|'FilePath'
op|'('
name|'name'
op|')'
op|'.'
name|'child'
op|'('
string|'"file"'
op|')'
op|'.'
name|'setContent'
op|'('
string|'"0123456789"'
op|')'
newline|'\n'
name|'r'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
name|'name'
op|')'
newline|'\n'
name|'r'
op|'.'
name|'putChild'
op|'('
string|'"redirect"'
op|','
name|'util'
op|'.'
name|'Redirect'
op|'('
string|'"/file"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'infiniteRedirectResource'
op|'='
name|'CountingRedirect'
op|'('
string|'"/infiniteRedirect"'
op|')'
newline|'\n'
name|'r'
op|'.'
name|'putChild'
op|'('
string|'"infiniteRedirect"'
op|','
name|'self'
op|'.'
name|'infiniteRedirectResource'
op|')'
newline|'\n'
name|'r'
op|'.'
name|'putChild'
op|'('
string|'"wait"'
op|','
name|'ForeverTakingResource'
op|'('
op|')'
op|')'
newline|'\n'
name|'r'
op|'.'
name|'putChild'
op|'('
string|'"write-then-wait"'
op|','
name|'ForeverTakingResource'
op|'('
name|'write'
op|'='
name|'True'
op|')'
op|')'
newline|'\n'
name|'r'
op|'.'
name|'putChild'
op|'('
string|'"error"'
op|','
name|'ErrorResource'
op|'('
op|')'
op|')'
newline|'\n'
name|'r'
op|'.'
name|'putChild'
op|'('
string|'"nolength"'
op|','
name|'NoLengthResource'
op|'('
op|')'
op|')'
newline|'\n'
name|'r'
op|'.'
name|'putChild'
op|'('
string|'"host"'
op|','
name|'HostHeaderResource'
op|'('
op|')'
op|')'
newline|'\n'
name|'r'
op|'.'
name|'putChild'
op|'('
string|'"payload"'
op|','
name|'PayloadResource'
op|'('
op|')'
op|')'
newline|'\n'
name|'r'
op|'.'
name|'putChild'
op|'('
string|'"broken"'
op|','
name|'BrokenDownloadResource'
op|'('
op|')'
op|')'
newline|'\n'
name|'r'
op|'.'
name|'putChild'
op|'('
string|'"cookiemirror"'
op|','
name|'CookieMirrorResource'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'miscasedHead'
op|'='
name|'static'
op|'.'
name|'Data'
op|'('
string|'"miscased-head GET response content"'
op|','
string|'"major/minor"'
op|')'
newline|'\n'
name|'miscasedHead'
op|'.'
name|'render_Head'
op|'='
name|'lambda'
name|'request'
op|':'
string|'"miscased-head content"'
newline|'\n'
name|'r'
op|'.'
name|'putChild'
op|'('
string|'"miscased-head"'
op|','
name|'miscasedHead'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'extendedRedirect'
op|'='
name|'ExtendedRedirect'
op|'('
string|"'/extendedRedirect'"
op|')'
newline|'\n'
name|'r'
op|'.'
name|'putChild'
op|'('
string|'"extendedRedirect"'
op|','
name|'self'
op|'.'
name|'extendedRedirect'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'='
name|'server'
op|'.'
name|'Site'
op|'('
name|'r'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'wrapper'
op|'='
name|'WrappingFactory'
op|'('
name|'self'
op|'.'
name|'site'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'self'
op|'.'
name|'_listen'
op|'('
name|'self'
op|'.'
name|'wrapper'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'portno'
op|'='
name|'self'
op|'.'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# If the test indicated it might leave some server-side connections'
nl|'\n'
comment|'# around, clean them up.'
nl|'\n'
indent|'        '
name|'connections'
op|'='
name|'self'
op|'.'
name|'wrapper'
op|'.'
name|'protocols'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
comment|'# If there are fewer server-side connections than requested,'
nl|'\n'
comment|"# that's okay.  Some might have noticed that the client closed"
nl|'\n'
comment|'# the connection and cleaned up after themselves.'
nl|'\n'
name|'for'
name|'n'
name|'in'
name|'range'
op|'('
name|'min'
op|'('
name|'len'
op|'('
name|'connections'
op|')'
op|','
name|'self'
op|'.'
name|'cleanupServerConnections'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'proto'
op|'='
name|'connections'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'msg'
op|'('
string|'"Closing %r"'
op|'%'
op|'('
name|'proto'
op|','
op|')'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'connections'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'('
string|'"Some left-over connections; this test is probably buggy."'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'port'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getURL
dedent|''
name|'def'
name|'getURL'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"http://127.0.0.1:%d/%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'portno'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPayload
dedent|''
name|'def'
name|'testPayload'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
string|'"0123456789"'
op|'*'
number|'10'
newline|'\n'
name|'return'
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"payload"'
op|')'
op|','
name|'postdata'
op|'='
name|'s'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'s'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPageBrokenDownload
dedent|''
name|'def'
name|'test_getPageBrokenDownload'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the connection is closed before the number of bytes indicated by\n        I{Content-Length} have been received, the L{Deferred} returned by\n        L{getPage} fails with L{PartialDownloadError}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"broken"'
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'client'
op|'.'
name|'PartialDownloadError'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'exc'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'exc'
op|'.'
name|'response'
op|','
string|'"abc"'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_downloadPageBrokenDownload
dedent|''
name|'def'
name|'test_downloadPageBrokenDownload'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the connection is closed before the number of bytes indicated by\n        I{Content-Length} have been received, the L{Deferred} returned by\n        L{downloadPage} fails with L{PartialDownloadError}.\n        """'
newline|'\n'
comment|'# test what happens when download gets disconnected in the middle'
nl|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'downloadPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"broken"'
op|')'
op|','
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'client'
op|'.'
name|'PartialDownloadError'
op|')'
newline|'\n'
nl|'\n'
DECL|function|checkResponse
name|'def'
name|'checkResponse'
op|'('
name|'response'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            The HTTP status code from the server is propagated through the\n            C{PartialDownloadError}.\n            """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'response'
op|'.'
name|'status'
op|','
string|'"200"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'response'
op|'.'
name|'message'
op|','
string|'"OK"'
op|')'
newline|'\n'
name|'return'
name|'response'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'checkResponse'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbFailed
name|'def'
name|'cbFailed'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'path'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
string|'"abc"'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbFailed'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_downloadPageLogsFileCloseError
dedent|''
name|'def'
name|'test_downloadPageLogsFileCloseError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If there is an exception closing the file being written to after the\n        connection is prematurely closed, that exception is logged.\n        """'
newline|'\n'
DECL|class|BrokenFile
name|'class'
name|'BrokenFile'
op|':'
newline|'\n'
DECL|member|write
indent|'            '
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IOError'
op|'('
name|'ENOSPC'
op|','
string|'"No file left on device"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'d'
op|'='
name|'client'
op|'.'
name|'downloadPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"broken"'
op|')'
op|','
name|'BrokenFile'
op|'('
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'client'
op|'.'
name|'PartialDownloadError'
op|')'
newline|'\n'
DECL|function|cbFailed
name|'def'
name|'cbFailed'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'IOError'
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbFailed'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testHostHeader
dedent|''
name|'def'
name|'testHostHeader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# if we pass Host header explicitly, it should be used, otherwise'
nl|'\n'
comment|'# it should extract from url'
nl|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"host"'
op|')'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"127.0.0.1"'
op|')'
op|','
nl|'\n'
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"host"'
op|')'
op|','
name|'headers'
op|'='
op|'{'
string|'"Host"'
op|':'
string|'"www.example.com"'
op|'}'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"www.example.com"'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPage
dedent|''
name|'def'
name|'test_getPage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{client.getPage} returns a L{Deferred} which is called back with\n        the body of the response if the default method B{GET} is used.\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"file"'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"0123456789"'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPageHEAD
dedent|''
name|'def'
name|'test_getPageHEAD'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{client.getPage} returns a L{Deferred} which is called back with\n        the empty string if the method is I{HEAD} and there is a successful\n        response code.\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"file"'
op|')'
op|','
name|'method'
op|'='
string|'"HEAD"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'""'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPageNotQuiteHEAD
dedent|''
name|'def'
name|'test_getPageNotQuiteHEAD'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the request method is a different casing of I{HEAD} (ie, not all\n        capitalized) then it is not a I{HEAD} request and the response body\n        is returned.\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"miscased-head"'
op|')'
op|','
name|'method'
op|'='
string|"'Head'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"miscased-head content"'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_timeoutNotTriggering
dedent|''
name|'def'
name|'test_timeoutNotTriggering'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When a non-zero timeout is passed to L{getPage} and the page is\n        retrieved before the timeout period elapses, the L{Deferred} is\n        called back with the contents of the page.\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"host"'
op|')'
op|','
name|'timeout'
op|'='
number|'100'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_timeoutTriggering
dedent|''
name|'def'
name|'test_timeoutTriggering'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When a non-zero timeout is passed to L{getPage} and that many\n        seconds elapse before the server responds to the request. the\n        L{Deferred} is errbacked with a L{error.TimeoutError}.\n        """'
newline|'\n'
comment|'# This will probably leave some connections around.'
nl|'\n'
name|'self'
op|'.'
name|'cleanupServerConnections'
op|'='
number|'1'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
nl|'\n'
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"wait"'
op|')'
op|','
name|'timeout'
op|'='
number|'0.000001'
op|')'
op|','
nl|'\n'
name|'defer'
op|'.'
name|'TimeoutError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testDownloadPage
dedent|''
name|'def'
name|'testDownloadPage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'downloads'
op|'='
op|'['
op|']'
newline|'\n'
name|'downloadData'
op|'='
op|'['
op|'('
string|'"file"'
op|','
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|','
string|'"0123456789"'
op|')'
op|','
nl|'\n'
op|'('
string|'"nolength"'
op|','
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|','
string|'"nolength"'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'url'
op|','
name|'name'
op|','
name|'data'
op|')'
name|'in'
name|'downloadData'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'client'
op|'.'
name|'downloadPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
name|'url'
op|')'
op|','
name|'name'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbDownloadPageTest'
op|','
name|'data'
op|','
name|'name'
op|')'
newline|'\n'
name|'downloads'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
name|'downloads'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbDownloadPageTest
dedent|''
name|'def'
name|'_cbDownloadPageTest'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'data'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bytes'
op|'='
name|'file'
op|'('
name|'name'
op|','
string|'"rb"'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'bytes'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDownloadPageError1
dedent|''
name|'def'
name|'testDownloadPageError1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|errorfile
indent|'        '
name|'class'
name|'errorfile'
op|':'
newline|'\n'
DECL|member|write
indent|'            '
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IOError'
op|','
string|'"badness happened during write"'
newline|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'ef'
op|'='
name|'errorfile'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
nl|'\n'
name|'client'
op|'.'
name|'downloadPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"file"'
op|')'
op|','
name|'ef'
op|')'
op|','
nl|'\n'
name|'IOError'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDownloadPageError2
dedent|''
name|'def'
name|'testDownloadPageError2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|errorfile
indent|'        '
name|'class'
name|'errorfile'
op|':'
newline|'\n'
DECL|member|write
indent|'            '
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IOError'
op|','
string|'"badness happened during close"'
newline|'\n'
dedent|''
dedent|''
name|'ef'
op|'='
name|'errorfile'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
nl|'\n'
name|'client'
op|'.'
name|'downloadPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"file"'
op|')'
op|','
name|'ef'
op|')'
op|','
nl|'\n'
name|'IOError'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDownloadPageError3
dedent|''
name|'def'
name|'testDownloadPageError3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# make sure failures in open() are caught too. This is tricky.'
nl|'\n'
comment|'# Might only work on posix.'
nl|'\n'
indent|'        '
name|'tmpfile'
op|'='
name|'open'
op|'('
string|'"unwritable"'
op|','
string|'"wb"'
op|')'
newline|'\n'
name|'tmpfile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
string|'"unwritable"'
op|','
number|'0'
op|')'
comment|'# make it unwritable (to us)'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
nl|'\n'
name|'client'
op|'.'
name|'downloadPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"file"'
op|')'
op|','
string|'"unwritable"'
op|')'
op|','
nl|'\n'
name|'IOError'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'self'
op|'.'
name|'_cleanupDownloadPageError3'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_cleanupDownloadPageError3
dedent|''
name|'def'
name|'_cleanupDownloadPageError3'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'chmod'
op|'('
string|'"unwritable"'
op|','
number|'0700'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
string|'"unwritable"'
op|')'
newline|'\n'
name|'return'
name|'ignored'
newline|'\n'
nl|'\n'
DECL|member|_downloadTest
dedent|''
name|'def'
name|'_downloadTest'
op|'('
name|'self'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dl'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'url'
op|','
name|'code'
op|')'
name|'in'
op|'['
op|'('
string|'"nosuchfile"'
op|','
string|'"404"'
op|')'
op|','
op|'('
string|'"error"'
op|','
string|'"401"'
op|')'
op|','
nl|'\n'
op|'('
string|'"error?showlength=1"'
op|','
string|'"401"'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'method'
op|'('
name|'url'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'error'
op|'.'
name|'Error'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'exc'
op|','
name|'code'
op|'='
name|'code'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'exc'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|','
name|'code'
op|')'
op|')'
newline|'\n'
name|'dl'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'dl'
op|','
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testServerError
dedent|''
name|'def'
name|'testServerError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_downloadTest'
op|'('
name|'lambda'
name|'url'
op|':'
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
name|'url'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDownloadServerError
dedent|''
name|'def'
name|'testDownloadServerError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_downloadTest'
op|'('
name|'lambda'
name|'url'
op|':'
name|'client'
op|'.'
name|'downloadPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
name|'url'
op|')'
op|','
name|'url'
op|'.'
name|'split'
op|'('
string|"'?'"
op|')'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFactoryInfo
dedent|''
name|'def'
name|'testFactoryInfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'url'
op|'='
name|'self'
op|'.'
name|'getURL'
op|'('
string|"'file'"
op|')'
newline|'\n'
name|'scheme'
op|','
name|'host'
op|','
name|'port'
op|','
name|'path'
op|'='
name|'client'
op|'.'
name|'_parse'
op|'('
name|'url'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'client'
op|'.'
name|'HTTPClientFactory'
op|'('
name|'url'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|')'
newline|'\n'
name|'return'
name|'factory'
op|'.'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbFactoryInfo'
op|','
name|'factory'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbFactoryInfo
dedent|''
name|'def'
name|'_cbFactoryInfo'
op|'('
name|'self'
op|','
name|'ignoredResult'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'status'
op|','
string|"'200'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'factory'
op|'.'
name|'version'
op|'.'
name|'startswith'
op|'('
string|"'HTTP/'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'message'
op|','
string|"'OK'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'response_headers'
op|'['
string|"'content-length'"
op|']'
op|'['
number|'0'
op|']'
op|','
string|"'10'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testRedirect
dedent|''
name|'def'
name|'testRedirect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"redirect"'
op|')'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbRedirect'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbRedirect
dedent|''
name|'def'
name|'_cbRedirect'
op|'('
name|'self'
op|','
name|'pageData'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'pageData'
op|','
string|'"0123456789"'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
nl|'\n'
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"redirect"'
op|')'
op|','
name|'followRedirect'
op|'='
number|'0'
op|')'
op|','
nl|'\n'
name|'error'
op|'.'
name|'PageRedirect'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbCheckLocation'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_cbCheckLocation
dedent|''
name|'def'
name|'_cbCheckLocation'
op|'('
name|'self'
op|','
name|'exc'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'exc'
op|'.'
name|'location'
op|','
string|'"/file"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_infiniteRedirection
dedent|''
name|'def'
name|'test_infiniteRedirection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When more than C{redirectLimit} HTTP redirects are encountered, the\n        page request fails with L{InfiniteRedirection}.\n        """'
newline|'\n'
DECL|function|checkRedirectCount
name|'def'
name|'checkRedirectCount'
op|'('
op|'*'
name|'a'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'f'
op|'.'
name|'_redirectCount'
op|','
number|'13'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'infiniteRedirectResource'
op|'.'
name|'count'
op|','
number|'13'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'f'
op|'='
name|'client'
op|'.'
name|'_makeGetterFactory'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getURL'
op|'('
string|"'infiniteRedirect'"
op|')'
op|','
nl|'\n'
name|'client'
op|'.'
name|'HTTPClientFactory'
op|','
nl|'\n'
name|'redirectLimit'
op|'='
number|'13'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'f'
op|'.'
name|'deferred'
op|','
name|'error'
op|'.'
name|'InfiniteRedirection'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'checkRedirectCount'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_isolatedFollowRedirect
dedent|''
name|'def'
name|'test_isolatedFollowRedirect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{client.HTTPPagerGetter} instances each obey the C{followRedirect}\n        value passed to the L{client.getPage} call which created them.\n        """'
newline|'\n'
name|'d1'
op|'='
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|"'redirect'"
op|')'
op|','
name|'followRedirect'
op|'='
name|'True'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|"'redirect'"
op|')'
op|','
name|'followRedirect'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d2'
op|','
name|'error'
op|'.'
name|'PageRedirect'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'dummy'
op|':'
name|'d1'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_afterFoundGet
dedent|''
name|'def'
name|'test_afterFoundGet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Enabling unsafe redirection behaviour overwrites the method of\n        redirected C{POST} requests with C{GET}.\n        """'
newline|'\n'
name|'url'
op|'='
name|'self'
op|'.'
name|'getURL'
op|'('
string|"'extendedRedirect?code=302'"
op|')'
newline|'\n'
name|'f'
op|'='
name|'client'
op|'.'
name|'HTTPClientFactory'
op|'('
name|'url'
op|','
name|'followRedirect'
op|'='
name|'True'
op|','
name|'method'
op|'='
string|'"POST"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
nl|'\n'
name|'f'
op|'.'
name|'afterFoundGet'
op|','
nl|'\n'
string|'"By default, afterFoundGet must be disabled"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|gotPage
name|'def'
name|'gotPage'
op|'('
name|'page'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'extendedRedirect'
op|'.'
name|'lastMethod'
op|','
nl|'\n'
string|'"GET"'
op|','
nl|'\n'
string|'"With afterFoundGet, the HTTP method must change to GET"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'client'
op|'.'
name|'getPage'
op|'('
nl|'\n'
name|'url'
op|','
name|'followRedirect'
op|'='
name|'True'
op|','
name|'afterFoundGet'
op|'='
name|'True'
op|','
name|'method'
op|'='
string|'"POST"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'gotPage'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testPartial
dedent|''
name|'def'
name|'testPartial'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'name'
op|','
string|'"wb"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|'"abcd"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'partialDownload'
op|'='
op|'['
op|'('
name|'True'
op|','
string|'"abcd456789"'
op|')'
op|','
nl|'\n'
op|'('
name|'True'
op|','
string|'"abcd456789"'
op|')'
op|','
nl|'\n'
op|'('
name|'False'
op|','
string|'"0123456789"'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
name|'for'
op|'('
name|'partial'
op|','
name|'expectedData'
op|')'
name|'in'
name|'partialDownload'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbRunPartial'
op|','
name|'name'
op|','
name|'partial'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbPartialTest'
op|','
name|'expectedData'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
name|'testPartial'
op|'.'
name|'skip'
op|'='
string|'"Cannot test until webserver can serve partial data properly"'
newline|'\n'
nl|'\n'
DECL|member|_cbRunPartial
name|'def'
name|'_cbRunPartial'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'name'
op|','
name|'partial'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'client'
op|'.'
name|'downloadPage'
op|'('
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"file"'
op|')'
op|','
name|'name'
op|','
name|'supportPartial'
op|'='
name|'partial'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbPartialTest
dedent|''
name|'def'
name|'_cbPartialTest'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'expectedData'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bytes'
op|'='
name|'file'
op|'('
name|'filename'
op|','
string|'"rb"'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'bytes'
op|','
name|'expectedData'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_downloadTimeout
dedent|''
name|'def'
name|'test_downloadTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the timeout indicated by the C{timeout} parameter to\n        L{client.HTTPDownloader.__init__} elapses without the complete response\n        being received, the L{defer.Deferred} returned by\n        L{client.downloadPage} fires with a L{Failure} wrapping a\n        L{defer.TimeoutError}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'cleanupServerConnections'
op|'='
number|'2'
newline|'\n'
comment|'# Verify the behavior if no bytes are ever written.'
nl|'\n'
name|'first'
op|'='
name|'client'
op|'.'
name|'downloadPage'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"wait"'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|','
name|'timeout'
op|'='
number|'0.01'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify the behavior if some bytes are written but then the request'
nl|'\n'
comment|'# never completes.'
nl|'\n'
name|'second'
op|'='
name|'client'
op|'.'
name|'downloadPage'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getURL'
op|'('
string|'"write-then-wait"'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|','
name|'timeout'
op|'='
number|'0.01'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'first'
op|','
name|'defer'
op|'.'
name|'TimeoutError'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'second'
op|','
name|'defer'
op|'.'
name|'TimeoutError'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_downloadHeaders
dedent|''
name|'def'
name|'test_downloadHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        After L{client.HTTPDownloader.deferred} fires, the\n        L{client.HTTPDownloader} instance\'s C{status} and C{response_headers}\n        attributes are populated with the values from the response.\n        """'
newline|'\n'
DECL|function|checkHeaders
name|'def'
name|'checkHeaders'
op|'('
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'status'
op|','
string|"'200'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'response_headers'
op|'['
string|"'content-type'"
op|']'
op|'['
number|'0'
op|']'
op|','
string|"'text/html'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'response_headers'
op|'['
string|"'content-length'"
op|']'
op|'['
number|'0'
op|']'
op|','
string|"'10'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'factory'
op|'.'
name|'fileName'
op|')'
newline|'\n'
dedent|''
name|'factory'
op|'='
name|'client'
op|'.'
name|'_makeGetterFactory'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getURL'
op|'('
string|"'file'"
op|')'
op|','
nl|'\n'
name|'client'
op|'.'
name|'HTTPDownloader'
op|','
nl|'\n'
name|'fileOrName'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'factory'
op|'.'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'checkHeaders'
op|'('
name|'factory'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_downloadCookies
dedent|''
name|'def'
name|'test_downloadCookies'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{cookies} dict passed to the L{client.HTTPDownloader}\n        initializer is used to populate the I{Cookie} header included in the\n        request sent to the server.\n        """'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'='
name|'client'
op|'.'
name|'_makeGetterFactory'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getURL'
op|'('
string|"'cookiemirror'"
op|')'
op|','
nl|'\n'
name|'client'
op|'.'
name|'HTTPDownloader'
op|','
nl|'\n'
name|'fileOrName'
op|'='
name|'output'
op|','
nl|'\n'
name|'cookies'
op|'='
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
newline|'\n'
DECL|function|cbFinished
name|'def'
name|'cbFinished'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'FilePath'
op|'('
name|'output'
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
nl|'\n'
string|'"[(\'foo\', \'bar\')]"'
op|')'
newline|'\n'
dedent|''
name|'factory'
op|'.'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'cbFinished'
op|')'
newline|'\n'
name|'return'
name|'factory'
op|'.'
name|'deferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_downloadRedirectLimit
dedent|''
name|'def'
name|'test_downloadRedirectLimit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When more than C{redirectLimit} HTTP redirects are encountered, the\n        page request fails with L{InfiniteRedirection}.\n        """'
newline|'\n'
DECL|function|checkRedirectCount
name|'def'
name|'checkRedirectCount'
op|'('
op|'*'
name|'a'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'f'
op|'.'
name|'_redirectCount'
op|','
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'infiniteRedirectResource'
op|'.'
name|'count'
op|','
number|'7'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'f'
op|'='
name|'client'
op|'.'
name|'_makeGetterFactory'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getURL'
op|'('
string|"'infiniteRedirect'"
op|')'
op|','
nl|'\n'
name|'client'
op|'.'
name|'HTTPDownloader'
op|','
nl|'\n'
name|'fileOrName'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|','
nl|'\n'
name|'redirectLimit'
op|'='
number|'7'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'f'
op|'.'
name|'deferred'
op|','
name|'error'
op|'.'
name|'InfiniteRedirection'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'checkRedirectCount'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|WebClientSSLTestCase
dedent|''
dedent|''
name|'class'
name|'WebClientSSLTestCase'
op|'('
name|'WebClientTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|_listen
indent|'    '
name|'def'
name|'_listen'
op|'('
name|'self'
op|','
name|'site'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
name|'import'
name|'test'
newline|'\n'
name|'return'
name|'reactor'
op|'.'
name|'listenSSL'
op|'('
number|'0'
op|','
name|'site'
op|','
nl|'\n'
name|'contextFactory'
op|'='
name|'ssl'
op|'.'
name|'DefaultOpenSSLContextFactory'
op|'('
nl|'\n'
name|'FilePath'
op|'('
name|'test'
op|'.'
name|'__file__'
op|')'
op|'.'
name|'sibling'
op|'('
string|"'server.pem'"
op|')'
op|'.'
name|'path'
op|','
nl|'\n'
name|'FilePath'
op|'('
name|'test'
op|'.'
name|'__file__'
op|')'
op|'.'
name|'sibling'
op|'('
string|"'server.pem'"
op|')'
op|'.'
name|'path'
op|','
nl|'\n'
op|')'
op|','
nl|'\n'
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getURL
dedent|''
name|'def'
name|'getURL'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"https://127.0.0.1:%d/%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'portno'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFactoryInfo
dedent|''
name|'def'
name|'testFactoryInfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'url'
op|'='
name|'self'
op|'.'
name|'getURL'
op|'('
string|"'file'"
op|')'
newline|'\n'
name|'scheme'
op|','
name|'host'
op|','
name|'port'
op|','
name|'path'
op|'='
name|'client'
op|'.'
name|'_parse'
op|'('
name|'url'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'client'
op|'.'
name|'HTTPClientFactory'
op|'('
name|'url'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectSSL'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|','
name|'ssl'
op|'.'
name|'ClientContextFactory'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# The base class defines _cbFactoryInfo correctly for this'
nl|'\n'
name|'return'
name|'factory'
op|'.'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbFactoryInfo'
op|','
name|'factory'
op|')'
newline|'\n'
nl|'\n'
DECL|class|WebClientRedirectBetweenSSLandPlainText
dedent|''
dedent|''
name|'class'
name|'WebClientRedirectBetweenSSLandPlainText'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|getHTTPS
indent|'    '
name|'def'
name|'getHTTPS'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"https://127.0.0.1:%d/%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'tlsPortno'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getHTTP
dedent|''
name|'def'
name|'getHTTP'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"http://127.0.0.1:%d/%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'plainPortno'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'plainRoot'
op|'='
name|'static'
op|'.'
name|'Data'
op|'('
string|"'not me'"
op|','
string|"'text/plain'"
op|')'
newline|'\n'
name|'tlsRoot'
op|'='
name|'static'
op|'.'
name|'Data'
op|'('
string|"'me neither'"
op|','
string|"'text/plain'"
op|')'
newline|'\n'
nl|'\n'
name|'plainSite'
op|'='
name|'server'
op|'.'
name|'Site'
op|'('
name|'plainRoot'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
newline|'\n'
name|'tlsSite'
op|'='
name|'server'
op|'.'
name|'Site'
op|'('
name|'tlsRoot'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
name|'import'
name|'test'
newline|'\n'
name|'self'
op|'.'
name|'tlsPort'
op|'='
name|'reactor'
op|'.'
name|'listenSSL'
op|'('
number|'0'
op|','
name|'tlsSite'
op|','
nl|'\n'
name|'contextFactory'
op|'='
name|'ssl'
op|'.'
name|'DefaultOpenSSLContextFactory'
op|'('
nl|'\n'
name|'FilePath'
op|'('
name|'test'
op|'.'
name|'__file__'
op|')'
op|'.'
name|'sibling'
op|'('
string|"'server.pem'"
op|')'
op|'.'
name|'path'
op|','
nl|'\n'
name|'FilePath'
op|'('
name|'test'
op|'.'
name|'__file__'
op|')'
op|'.'
name|'sibling'
op|'('
string|"'server.pem'"
op|')'
op|'.'
name|'path'
op|','
nl|'\n'
op|')'
op|','
nl|'\n'
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'plainPort'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'plainSite'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'plainPortno'
op|'='
name|'self'
op|'.'
name|'plainPort'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'tlsPortno'
op|'='
name|'self'
op|'.'
name|'tlsPort'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
name|'plainRoot'
op|'.'
name|'putChild'
op|'('
string|"'one'"
op|','
name|'util'
op|'.'
name|'Redirect'
op|'('
name|'self'
op|'.'
name|'getHTTPS'
op|'('
string|"'two'"
op|')'
op|')'
op|')'
newline|'\n'
name|'tlsRoot'
op|'.'
name|'putChild'
op|'('
string|"'two'"
op|','
name|'util'
op|'.'
name|'Redirect'
op|'('
name|'self'
op|'.'
name|'getHTTP'
op|'('
string|"'three'"
op|')'
op|')'
op|')'
newline|'\n'
name|'plainRoot'
op|'.'
name|'putChild'
op|'('
string|"'three'"
op|','
name|'util'
op|'.'
name|'Redirect'
op|'('
name|'self'
op|'.'
name|'getHTTPS'
op|'('
string|"'four'"
op|')'
op|')'
op|')'
newline|'\n'
name|'tlsRoot'
op|'.'
name|'putChild'
op|'('
string|"'four'"
op|','
name|'static'
op|'.'
name|'Data'
op|'('
string|"'FOUND IT!'"
op|','
string|"'text/plain'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ds'
op|'='
name|'map'
op|'('
name|'defer'
op|'.'
name|'maybeDeferred'
op|','
nl|'\n'
op|'['
name|'self'
op|'.'
name|'plainPort'
op|'.'
name|'stopListening'
op|','
name|'self'
op|'.'
name|'tlsPort'
op|'.'
name|'stopListening'
op|']'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
name|'ds'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testHoppingAround
dedent|''
name|'def'
name|'testHoppingAround'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getHTTP'
op|'('
string|'"one"'
op|')'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"FOUND IT!"'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|class|FakeTransport
dedent|''
dedent|''
name|'class'
name|'FakeTransport'
op|':'
newline|'\n'
DECL|variable|disconnecting
indent|'    '
name|'disconnecting'
op|'='
name|'False'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'stuff'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'.'
name|'append'
op|'('
name|'stuff'
op|')'
newline|'\n'
nl|'\n'
DECL|class|CookieTestCase
dedent|''
dedent|''
name|'class'
name|'CookieTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|_listen
indent|'    '
name|'def'
name|'_listen'
op|'('
name|'self'
op|','
name|'site'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'site'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'root'
op|'='
name|'static'
op|'.'
name|'Data'
op|'('
string|"'El toro!'"
op|','
string|"'text/plain'"
op|')'
newline|'\n'
name|'root'
op|'.'
name|'putChild'
op|'('
string|'"cookiemirror"'
op|','
name|'CookieMirrorResource'
op|'('
op|')'
op|')'
newline|'\n'
name|'root'
op|'.'
name|'putChild'
op|'('
string|'"rawcookiemirror"'
op|','
name|'RawCookieMirrorResource'
op|'('
op|')'
op|')'
newline|'\n'
name|'site'
op|'='
name|'server'
op|'.'
name|'Site'
op|'('
name|'root'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'self'
op|'.'
name|'_listen'
op|'('
name|'site'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'portno'
op|'='
name|'self'
op|'.'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'port'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getHTTP
dedent|''
name|'def'
name|'getHTTP'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"http://127.0.0.1:%d/%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'portno'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNoCookies
dedent|''
name|'def'
name|'testNoCookies'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getHTTP'
op|'('
string|'"cookiemirror"'
op|')'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"[]"'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSomeCookies
dedent|''
name|'def'
name|'testSomeCookies'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cookies'
op|'='
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|','
string|"'baz'"
op|':'
string|"'quux'"
op|'}'
newline|'\n'
name|'return'
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getHTTP'
op|'('
string|'"cookiemirror"'
op|')'
op|','
name|'cookies'
op|'='
name|'cookies'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"[(\'baz\', \'quux\'), (\'foo\', \'bar\')]"'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRawNoCookies
dedent|''
name|'def'
name|'testRawNoCookies'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getHTTP'
op|'('
string|'"rawcookiemirror"'
op|')'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"None"'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRawSomeCookies
dedent|''
name|'def'
name|'testRawSomeCookies'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cookies'
op|'='
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|','
string|"'baz'"
op|':'
string|"'quux'"
op|'}'
newline|'\n'
name|'return'
name|'client'
op|'.'
name|'getPage'
op|'('
name|'self'
op|'.'
name|'getHTTP'
op|'('
string|'"rawcookiemirror"'
op|')'
op|','
name|'cookies'
op|'='
name|'cookies'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"\'foo=bar; baz=quux\'"'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCookieHeaderParsing
dedent|''
name|'def'
name|'testCookieHeaderParsing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'factory'
op|'='
name|'client'
op|'.'
name|'HTTPClientFactory'
op|'('
string|"'http://foo.example.com/'"
op|')'
newline|'\n'
name|'proto'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
string|"'127.42.42.42'"
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'transport'
op|'='
name|'FakeTransport'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
op|'['
nl|'\n'
string|"'200 Ok'"
op|','
nl|'\n'
string|"'Squash: yes'"
op|','
nl|'\n'
string|"'Hands: stolen'"
op|','
nl|'\n'
string|"'Set-Cookie: CUSTOMER=WILE_E_COYOTE; path=/; expires=Wednesday, 09-Nov-99 23:12:40 GMT'"
op|','
nl|'\n'
string|"'Set-Cookie: PART_NUMBER=ROCKET_LAUNCHER_0001; path=/'"
op|','
nl|'\n'
string|"'Set-Cookie: SHIPPING=FEDEX; path=/foo'"
op|','
nl|'\n'
string|"''"
op|','
nl|'\n'
string|"'body'"
op|','
nl|'\n'
string|"'more body'"
op|','
nl|'\n'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'proto'
op|'.'
name|'dataReceived'
op|'('
name|'line'
op|'+'
string|"'\\r\\n'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'transport'
op|'.'
name|'data'
op|','
nl|'\n'
op|'['
string|"'GET / HTTP/1.0\\r\\n'"
op|','
nl|'\n'
string|"'Host: foo.example.com\\r\\n'"
op|','
nl|'\n'
string|"'User-Agent: Twisted PageGetter\\r\\n'"
op|','
nl|'\n'
string|"'\\r\\n'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'cookies'
op|','
nl|'\n'
op|'{'
nl|'\n'
string|"'CUSTOMER'"
op|':'
string|"'WILE_E_COYOTE'"
op|','
nl|'\n'
string|"'PART_NUMBER'"
op|':'
string|"'ROCKET_LAUNCHER_0001'"
op|','
nl|'\n'
string|"'SHIPPING'"
op|':'
string|"'FEDEX'"
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StubHTTPProtocol
dedent|''
dedent|''
name|'class'
name|'StubHTTPProtocol'
op|'('
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A protocol like L{HTTP11ClientProtocol} but which does not actually know\n    HTTP/1.1 and only collects requests in a list.\n\n    @ivar requests: A C{list} of two-tuples.  Each time a request is made, a\n        tuple consisting of the request and the L{Deferred} returned from the\n        request method is appended to this list.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'requests'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|request
dedent|''
name|'def'
name|'request'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Capture the given request for later inspection.\n\n        @return: A L{Deferred} which this code will never fire.\n        """'
newline|'\n'
name|'result'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'requests'
op|'.'
name|'append'
op|'('
op|'('
name|'request'
op|','
name|'result'
op|')'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AgentTests
dedent|''
dedent|''
name|'class'
name|'AgentTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the new HTTP client API provided by L{Agent}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create an L{Agent} wrapped around a fake reactor.\n        """'
newline|'\n'
DECL|class|Reactor
name|'class'
name|'Reactor'
op|'('
name|'MemoryReactor'
op|','
name|'Clock'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'MemoryReactor'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'Clock'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'reactor'
op|'='
name|'Reactor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'agent'
op|'='
name|'client'
op|'.'
name|'Agent'
op|'('
name|'self'
op|'.'
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|completeConnection
dedent|''
name|'def'
name|'completeConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Do whitebox stuff to finish any outstanding connection attempts the\n        agent may have initiated.\n\n        This spins the fake reactor clock just enough to get L{ClientCreator},\n        which agent is implemented in terms of, to fire its Deferreds.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'advance'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_verifyAndCompleteConnectionTo
dedent|''
name|'def'
name|'_verifyAndCompleteConnectionTo'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that the destination of the oldest unverified TCP connection\n        attempt is the given host and port.  Then pop it, create a protocol,\n        connect it to a L{StringTransport}, and return the protocol.\n        """'
newline|'\n'
comment|'# Grab the connection attempt, make sure it goes to the right place,'
nl|'\n'
comment|'# and cause it to succeed.'
nl|'\n'
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|'='
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'tcpClients'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
op|':'
number|'3'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'host'
op|','
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'port'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
name|'protocol'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'10.0.0.3'"
op|','
number|'1234'
op|')'
op|')'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'completeConnection'
op|'('
op|')'
newline|'\n'
name|'return'
name|'protocol'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unsupportedScheme
dedent|''
name|'def'
name|'test_unsupportedScheme'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Agent.request} returns a L{Deferred} which fails with\n        L{SchemeNotSupported} if the scheme of the URI passed to it is not\n        C{\'http\'}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'agent'
op|'.'
name|'request'
op|'('
string|"'GET'"
op|','
string|"'mailto:alice@example.com'"
op|')'
op|','
nl|'\n'
name|'SchemeNotSupported'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectionFailed
dedent|''
name|'def'
name|'test_connectionFailed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{Deferred} returned by L{Agent.request} fires with a L{Failure} if\n        the TCP connection attempt fails.\n        """'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'agent'
op|'.'
name|'request'
op|'('
string|"'GET'"
op|','
string|"'http://foo/'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Cause the connection to be refused'
nl|'\n'
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|'='
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'tcpClients'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
op|':'
number|'3'
op|']'
newline|'\n'
name|'factory'
op|'.'
name|'clientConnectionFailed'
op|'('
name|'None'
op|','
name|'ConnectionRefusedError'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'completeConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'result'
op|','
name|'ConnectionRefusedError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_request
dedent|''
name|'def'
name|'test_request'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Agent.request} establishes a new connection to the host indicated by\n        the host part of the URI passed to it and issues a request using the\n        method, the path portion of the URI, the headers, and the body producer\n        passed to it.  It returns a L{Deferred} which fires with a L{Response}\n        from the server.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'agent'
op|'.'
name|'_protocol'
op|'='
name|'StubHTTPProtocol'
newline|'\n'
nl|'\n'
name|'headers'
op|'='
name|'http_headers'
op|'.'
name|'Headers'
op|'('
op|'{'
string|"'foo'"
op|':'
op|'['
string|"'bar'"
op|']'
op|'}'
op|')'
newline|'\n'
comment|"# Just going to check the body for identity, so it doesn't need to be"
nl|'\n'
comment|'# real.'
nl|'\n'
name|'body'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'agent'
op|'.'
name|'request'
op|'('
nl|'\n'
string|"'GET'"
op|','
string|"'http://example.com:1234/foo?bar'"
op|','
name|'headers'
op|','
name|'body'
op|')'
newline|'\n'
nl|'\n'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'_verifyAndCompleteConnectionTo'
op|'('
string|"'example.com'"
op|','
number|'1234'
op|')'
newline|'\n'
nl|'\n'
comment|'# The request should be issued.'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'protocol'
op|'.'
name|'requests'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'req'
op|','
name|'res'
op|'='
name|'protocol'
op|'.'
name|'requests'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'req'
op|','
name|'Request'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'req'
op|'.'
name|'method'
op|','
string|"'GET'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'req'
op|'.'
name|'uri'
op|','
string|"'/foo?bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'req'
op|'.'
name|'headers'
op|','
nl|'\n'
name|'http_headers'
op|'.'
name|'Headers'
op|'('
op|'{'
string|"'foo'"
op|':'
op|'['
string|"'bar'"
op|']'
op|','
nl|'\n'
string|"'host'"
op|':'
op|'['
string|"'example.com:1234'"
op|']'
op|'}'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'req'
op|'.'
name|'bodyProducer'
op|','
name|'body'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_hostProvided
dedent|''
name|'def'
name|'test_hostProvided'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If C{None} is passed to L{Agent.request} for the C{headers}\n        parameter, a L{Headers} instance is created for the request and a\n        I{Host} header added to it.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'agent'
op|'.'
name|'_protocol'
op|'='
name|'StubHTTPProtocol'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'agent'
op|'.'
name|'request'
op|'('
string|"'GET'"
op|','
string|"'http://example.com/foo'"
op|')'
newline|'\n'
nl|'\n'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'_verifyAndCompleteConnectionTo'
op|'('
string|"'example.com'"
op|','
number|'80'
op|')'
newline|'\n'
nl|'\n'
comment|'# The request should have been issued with a host header based on'
nl|'\n'
comment|'# the request URL.'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'protocol'
op|'.'
name|'requests'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'req'
op|','
name|'res'
op|'='
name|'protocol'
op|'.'
name|'requests'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'req'
op|'.'
name|'headers'
op|'.'
name|'getRawHeaders'
op|'('
string|"'host'"
op|')'
op|','
op|'['
string|"'example.com'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_hostOverride
dedent|''
name|'def'
name|'test_hostOverride'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the headers passed to L{Agent.request} includes a value for the\n        I{Host} header, that value takes precedence over the one which would\n        otherwise be automatically provided.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'agent'
op|'.'
name|'_protocol'
op|'='
name|'StubHTTPProtocol'
newline|'\n'
nl|'\n'
name|'headers'
op|'='
name|'http_headers'
op|'.'
name|'Headers'
op|'('
op|'{'
string|"'foo'"
op|':'
op|'['
string|"'bar'"
op|']'
op|','
string|"'host'"
op|':'
op|'['
string|"'quux'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'body'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'agent'
op|'.'
name|'request'
op|'('
nl|'\n'
string|"'GET'"
op|','
string|"'http://example.com/baz'"
op|','
name|'headers'
op|','
name|'body'
op|')'
newline|'\n'
nl|'\n'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'_verifyAndCompleteConnectionTo'
op|'('
string|"'example.com'"
op|','
number|'80'
op|')'
newline|'\n'
nl|'\n'
comment|'# The request should have been issued with the host header specified'
nl|'\n'
comment|'# above, not one based on the request URI.'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'protocol'
op|'.'
name|'requests'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'req'
op|','
name|'res'
op|'='
name|'protocol'
op|'.'
name|'requests'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'req'
op|'.'
name|'headers'
op|'.'
name|'getRawHeaders'
op|'('
string|"'host'"
op|')'
op|','
op|'['
string|"'quux'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_headersUnmodified
dedent|''
name|'def'
name|'test_headersUnmodified'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a I{Host} header must be added to the request, the L{Headers}\n        instance passed to L{Agent.request} is not modified.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'agent'
op|'.'
name|'_protocol'
op|'='
name|'StubHTTPProtocol'
newline|'\n'
nl|'\n'
name|'headers'
op|'='
name|'http_headers'
op|'.'
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'body'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'agent'
op|'.'
name|'request'
op|'('
nl|'\n'
string|"'GET'"
op|','
string|"'http://example.com/foo'"
op|','
name|'headers'
op|','
name|'body'
op|')'
newline|'\n'
nl|'\n'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'_verifyAndCompleteConnectionTo'
op|'('
string|"'example.com'"
op|','
number|'80'
op|')'
newline|'\n'
nl|'\n'
comment|'# The request should have been issued.'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'protocol'
op|'.'
name|'requests'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# And the headers object passed in should not have changed.'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'headers'
op|','
name|'http_headers'
op|'.'
name|'Headers'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_hostValue
dedent|''
name|'def'
name|'test_hostValue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Agent._computeHostValue} returns just the hostname it is passed if\n        the port number it is passed is the default for the scheme it is\n        passed, otherwise it returns a string containing both the host and port\n        separated by C{":"}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'agent'
op|'.'
name|'_computeHostValue'
op|'('
string|"'http'"
op|','
string|"'example.com'"
op|','
number|'80'
op|')'
op|','
nl|'\n'
string|"'example.com'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'agent'
op|'.'
name|'_computeHostValue'
op|'('
string|"'http'"
op|','
string|"'example.com'"
op|','
number|'54321'
op|')'
op|','
nl|'\n'
string|"'example.com:54321'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'ssl'
name|'is'
name|'None'
name|'or'
name|'not'
name|'hasattr'
op|'('
name|'ssl'
op|','
string|"'DefaultOpenSSLContextFactory'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'case'
name|'in'
op|'['
name|'WebClientSSLTestCase'
op|','
name|'WebClientRedirectBetweenSSLandPlainText'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'case'
op|'.'
name|'skip'
op|'='
string|'"OpenSSL not present"'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'interfaces'
op|'.'
name|'IReactorSSL'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'case'
name|'in'
op|'['
name|'WebClientSSLTestCase'
op|','
name|'WebClientRedirectBetweenSSLandPlainText'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'case'
op|'.'
name|'skip'
op|'='
string|'"Reactor doesn\'t support SSL"'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

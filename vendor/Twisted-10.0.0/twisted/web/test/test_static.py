begin_unit
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.web.static}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'re'
op|','
name|'StringIO'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
op|'.'
name|'verify'
name|'import'
name|'verifyObject'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'abstract'
op|','
name|'interfaces'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'runtime'
name|'import'
name|'platform'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'static'
op|','
name|'http'
op|','
name|'script'
op|','
name|'resource'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'server'
name|'import'
name|'UnsupportedMethod'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'test'
op|'.'
name|'test_web'
name|'import'
name|'DummyRequest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'test'
op|'.'
name|'_util'
name|'import'
name|'_render'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StaticDataTests
name|'class'
name|'StaticDataTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{Data}.\n    """'
newline|'\n'
DECL|member|test_headRequest
name|'def'
name|'test_headRequest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Data.render} returns an empty response body for a I{HEAD} request.\n        """'
newline|'\n'
name|'data'
op|'='
name|'static'
op|'.'
name|'Data'
op|'('
string|'"foo"'
op|','
string|'"bar"'
op|')'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'method'
op|'='
string|"'HEAD'"
newline|'\n'
name|'d'
op|'='
name|'_render'
op|'('
name|'data'
op|','
name|'request'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'request'
op|'.'
name|'written'
op|')'
op|','
string|'""'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidMethod
dedent|''
name|'def'
name|'test_invalidMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Data.render} raises L{UnsupportedMethod} in response to a non-I{GET},\n        non-I{HEAD} request.\n        """'
newline|'\n'
name|'data'
op|'='
name|'static'
op|'.'
name|'Data'
op|'('
string|'"foo"'
op|','
string|'"bar"'
op|')'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'method'
op|'='
string|"'POST'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'UnsupportedMethod'
op|','
name|'data'
op|'.'
name|'render'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StaticFileTests
dedent|''
dedent|''
name|'class'
name|'StaticFileTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the basic behavior of L{File}.\n    """'
newline|'\n'
DECL|member|_render
name|'def'
name|'_render'
op|'('
name|'self'
op|','
name|'resource'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_render'
op|'('
name|'resource'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidMethod
dedent|''
name|'def'
name|'test_invalidMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{File.render} raises L{UnsupportedMethod} in response to a non-I{GET},\n        non-I{HEAD} request.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'method'
op|'='
string|"'POST'"
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'setContent'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'file'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'UnsupportedMethod'
op|','
name|'file'
op|'.'
name|'render'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_notFound
dedent|''
name|'def'
name|'test_notFound'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a request is made which encounters a L{File} before a final segment\n        which does not correspond to any file in the path the L{File} was\n        created with, a not found response is sent.\n        """'
newline|'\n'
name|'base'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'file'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
name|'base'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"'foobar'"
op|']'
op|')'
newline|'\n'
name|'child'
op|'='
name|'resource'
op|'.'
name|'getChildForRequest'
op|'('
name|'file'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_render'
op|'('
name|'child'
op|','
name|'request'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'responseCode'
op|','
number|'404'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_emptyChild
dedent|''
name|'def'
name|'test_emptyChild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'\'} child of a L{File} which corresponds to a directory in the\n        filesystem is a L{DirectoryLister}.\n        """'
newline|'\n'
name|'base'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'file'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
name|'base'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'child'
op|'='
name|'resource'
op|'.'
name|'getChildForRequest'
op|'('
name|'file'
op|','
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'child'
op|','
name|'static'
op|'.'
name|'DirectoryLister'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'child'
op|'.'
name|'path'
op|','
name|'base'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_securityViolationNotFound
dedent|''
name|'def'
name|'test_securityViolationNotFound'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a request is made which encounters a L{File} before a final segment\n        which cannot be looked up in the filesystem due to security\n        considerations, a not found response is sent.\n        """'
newline|'\n'
name|'base'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'file'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
name|'base'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"'..'"
op|']'
op|')'
newline|'\n'
name|'child'
op|'='
name|'resource'
op|'.'
name|'getChildForRequest'
op|'('
name|'file'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_render'
op|'('
name|'child'
op|','
name|'request'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'responseCode'
op|','
number|'404'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_forbiddenResource
dedent|''
name|'def'
name|'test_forbiddenResource'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the file in the filesystem which would satisfy a request cannot be\n        read, L{File.render} sets the HTTP response code to I{FORBIDDEN}.\n        """'
newline|'\n'
name|'base'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'setContent'
op|'('
string|"''"
op|')'
newline|'\n'
comment|'# Make sure we can delete the file later.'
nl|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'base'
op|'.'
name|'chmod'
op|','
number|'0700'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get rid of our own read permission.'
nl|'\n'
name|'base'
op|'.'
name|'chmod'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'file'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
name|'base'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_render'
op|'('
name|'file'
op|','
name|'request'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'responseCode'
op|','
number|'403'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'if'
name|'platform'
op|'.'
name|'isWindows'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'test_forbiddenResource'
op|'.'
name|'skip'
op|'='
string|'"Cannot remove read permission on Windows"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_indexNames
dedent|''
name|'def'
name|'test_indexNames'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a request is made which encounters a L{File} before a final empty\n        segment, a file in the L{File} instance\'s C{indexNames} list which\n        exists in the path the L{File} was created with is served as the\n        response to the request.\n        """'
newline|'\n'
name|'base'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'base'
op|'.'
name|'child'
op|'('
string|'"foo.bar"'
op|')'
op|'.'
name|'setContent'
op|'('
string|'"baz"'
op|')'
newline|'\n'
name|'file'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
name|'base'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'file'
op|'.'
name|'indexNames'
op|'='
op|'['
string|"'foo.bar'"
op|']'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'child'
op|'='
name|'resource'
op|'.'
name|'getChildForRequest'
op|'('
name|'file'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_render'
op|'('
name|'child'
op|','
name|'request'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'request'
op|'.'
name|'written'
op|')'
op|','
string|"'baz'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-length'"
op|']'
op|','
string|"'3'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_staticFile
dedent|''
name|'def'
name|'test_staticFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a request is made which encounters a L{File} before a final segment\n        which names a file in the path the L{File} was created with, that file\n        is served as the response to the request.\n        """'
newline|'\n'
name|'base'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'base'
op|'.'
name|'child'
op|'('
string|'"foo.bar"'
op|')'
op|'.'
name|'setContent'
op|'('
string|'"baz"'
op|')'
newline|'\n'
name|'file'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
name|'base'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"'foo.bar'"
op|']'
op|')'
newline|'\n'
name|'child'
op|'='
name|'resource'
op|'.'
name|'getChildForRequest'
op|'('
name|'file'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_render'
op|'('
name|'child'
op|','
name|'request'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'request'
op|'.'
name|'written'
op|')'
op|','
string|"'baz'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-length'"
op|']'
op|','
string|"'3'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_staticFileDeletedGetChild
dedent|''
name|'def'
name|'test_staticFileDeletedGetChild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A L{static.File} created for a directory which does not exist should\n        return childNotFound from L{static.File.getChild}.\n        """'
newline|'\n'
name|'staticFile'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"'foo.bar'"
op|']'
op|')'
newline|'\n'
name|'child'
op|'='
name|'staticFile'
op|'.'
name|'getChild'
op|'('
string|'"foo.bar"'
op|','
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'child'
op|','
name|'staticFile'
op|'.'
name|'childNotFound'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_staticFileDeletedRender
dedent|''
name|'def'
name|'test_staticFileDeletedRender'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A L{static.File} created for a file which does not exist should render\n        its C{childNotFound} page.\n        """'
newline|'\n'
name|'staticFile'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"'foo.bar'"
op|']'
op|')'
newline|'\n'
name|'request2'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"'foo.bar'"
op|']'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_render'
op|'('
name|'staticFile'
op|','
name|'request'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'_render'
op|'('
name|'staticFile'
op|'.'
name|'childNotFound'
op|','
name|'request2'
op|')'
newline|'\n'
DECL|function|cbRendered2
name|'def'
name|'cbRendered2'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
DECL|function|cbRendered
indent|'            '
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'request'
op|'.'
name|'written'
op|')'
op|','
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'request2'
op|'.'
name|'written'
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'d2'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered2'
op|')'
newline|'\n'
name|'return'
name|'d2'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_headRequest
dedent|''
name|'def'
name|'test_headRequest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{static.File.render} returns an empty response body for I{HEAD}\n        requests.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'setContent'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'file'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'method'
op|'='
string|"'HEAD'"
newline|'\n'
name|'d'
op|'='
name|'_render'
op|'('
name|'file'
op|','
name|'request'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'""'
op|'.'
name|'join'
op|'('
name|'request'
op|'.'
name|'written'
op|')'
op|','
string|'""'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_processors
dedent|''
name|'def'
name|'test_processors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a request is made which encounters a L{File} before a final segment\n        which names a file with an extension which is in the L{File}\'s\n        C{processors} mapping, the processor associated with that extension is\n        used to serve the response to the request.\n        """'
newline|'\n'
name|'base'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'base'
op|'.'
name|'child'
op|'('
string|'"foo.bar"'
op|')'
op|'.'
name|'setContent'
op|'('
nl|'\n'
string|'"from twisted.web.static import Data\\n"'
nl|'\n'
string|'"resource = Data(\'dynamic world\',\'text/plain\')\\n"'
op|')'
newline|'\n'
nl|'\n'
name|'file'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
name|'base'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'file'
op|'.'
name|'processors'
op|'='
op|'{'
string|"'.bar'"
op|':'
name|'script'
op|'.'
name|'ResourceScript'
op|'}'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|'"foo.bar"'
op|']'
op|')'
newline|'\n'
name|'child'
op|'='
name|'resource'
op|'.'
name|'getChildForRequest'
op|'('
name|'file'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_render'
op|'('
name|'child'
op|','
name|'request'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'request'
op|'.'
name|'written'
op|')'
op|','
string|"'dynamic world'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-length'"
op|']'
op|','
string|"'13'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ignoreExt
dedent|''
name|'def'
name|'test_ignoreExt'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The list of ignored extensions can be set by passing a value to\n        L{File.__init__} or by calling L{File.ignoreExt} later.\n        """'
newline|'\n'
name|'file'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
string|'"."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'file'
op|'.'
name|'ignoredExts'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'file'
op|'.'
name|'ignoreExt'
op|'('
string|'".foo"'
op|')'
newline|'\n'
name|'file'
op|'.'
name|'ignoreExt'
op|'('
string|'".bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'file'
op|'.'
name|'ignoredExts'
op|','
op|'['
string|'".foo"'
op|','
string|'".bar"'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'file'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
string|'"."'
op|','
name|'ignoredExts'
op|'='
op|'('
string|'".bar"'
op|','
string|'".baz"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'file'
op|'.'
name|'ignoredExts'
op|','
op|'['
string|'".bar"'
op|','
string|'".baz"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ignoredExtensionsIgnored
dedent|''
name|'def'
name|'test_ignoredExtensionsIgnored'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A request for the I{base} child of a L{File} succeeds with a resource\n        for the I{base<extension>} file in the path the L{File} was created\n        with if such a file exists and the L{File} has been configured to\n        ignore the I{<extension>} extension.\n        """'
newline|'\n'
name|'base'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'base'
op|'.'
name|'child'
op|'('
string|"'foo.bar'"
op|')'
op|'.'
name|'setContent'
op|'('
string|"'baz'"
op|')'
newline|'\n'
name|'base'
op|'.'
name|'child'
op|'('
string|"'foo.quux'"
op|')'
op|'.'
name|'setContent'
op|'('
string|"'foobar'"
op|')'
newline|'\n'
name|'file'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
name|'base'
op|'.'
name|'path'
op|','
name|'ignoredExts'
op|'='
op|'('
string|'".bar"'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|'"foo"'
op|']'
op|')'
newline|'\n'
name|'child'
op|'='
name|'resource'
op|'.'
name|'getChildForRequest'
op|'('
name|'file'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_render'
op|'('
name|'child'
op|','
name|'request'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'request'
op|'.'
name|'written'
op|')'
op|','
string|"'baz'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_createPickleChild
dedent|''
name|'def'
name|'test_createPickleChild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{static.File.createPickleChild} is deprecated.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'static'
op|'.'
name|'File'
op|'('
name|'path'
op|'.'
name|'path'
op|')'
op|'.'
name|'createPickleChild'
op|'('
string|'"foo"'
op|','
name|'None'
op|')'
newline|'\n'
name|'warnings'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
name|'self'
op|'.'
name|'test_createPickleChild'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'category'"
op|']'
op|','
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
nl|'\n'
string|'"File.createPickleChild is deprecated since Twisted 9.0.  "'
nl|'\n'
string|'"Resource persistence is beyond the scope of Twisted Web."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'warnings'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StaticMakeProducerTests
dedent|''
dedent|''
name|'class'
name|'StaticMakeProducerTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{File.makeProducer}.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeResourceWithContent
name|'def'
name|'makeResourceWithContent'
op|'('
name|'self'
op|','
name|'content'
op|','
name|'type'
op|'='
name|'None'
op|','
name|'encoding'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a L{static.File} resource that has C{content} for its content.\n\n        @param content: The bytes to use as the contents of the resource.\n        @param type: Optional value for the content type of the resource.\n        """'
newline|'\n'
name|'fileName'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'fileObject'
op|'='
name|'open'
op|'('
name|'fileName'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'fileObject'
op|'.'
name|'write'
op|'('
name|'content'
op|')'
newline|'\n'
name|'fileObject'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'resource'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
name|'fileName'
op|')'
newline|'\n'
name|'resource'
op|'.'
name|'encoding'
op|'='
name|'encoding'
newline|'\n'
name|'resource'
op|'.'
name|'type'
op|'='
name|'type'
newline|'\n'
name|'return'
name|'resource'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|contentHeaders
dedent|''
name|'def'
name|'contentHeaders'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Extract the content-* headers from the L{DummyRequest} C{request}.\n\n        This returns the subset of C{request.outgoingHeaders} of headers that\n        start with \'content-\'.\n        """'
newline|'\n'
name|'contentHeaders'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'request'
op|'.'
name|'outgoingHeaders'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'k'
op|'.'
name|'startswith'
op|'('
string|"'content-'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'contentHeaders'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'contentHeaders'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noRangeHeaderGivesNoRangeStaticProducer
dedent|''
name|'def'
name|'test_noRangeHeaderGivesNoRangeStaticProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer when no Range header is set returns an instance of\n        NoRangeStaticProducer.\n        """'
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
string|"''"
op|')'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'producer'
op|'='
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'producer'
op|','
name|'static'
op|'.'
name|'NoRangeStaticProducer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noRangeHeaderSets200OK
dedent|''
name|'def'
name|'test_noRangeHeaderSets200OK'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer when no Range header is set sets the responseCode on the\n        request to \'OK\'.\n        """'
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
string|"''"
op|')'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'http'
op|'.'
name|'OK'
op|','
name|'request'
op|'.'
name|'responseCode'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noRangeHeaderSetsContentHeaders
dedent|''
name|'def'
name|'test_noRangeHeaderSetsContentHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer when no Range header is set sets the Content-* headers\n        for the response.\n        """'
newline|'\n'
name|'length'
op|'='
number|'123'
newline|'\n'
name|'contentType'
op|'='
string|'"text/plain"'
newline|'\n'
name|'contentEncoding'
op|'='
string|"'gzip'"
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
nl|'\n'
string|"'a'"
op|'*'
name|'length'
op|','
name|'type'
op|'='
name|'contentType'
op|','
name|'encoding'
op|'='
name|'contentEncoding'
op|')'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
op|'{'
string|"'content-type'"
op|':'
name|'contentType'
op|','
string|"'content-length'"
op|':'
name|'str'
op|'('
name|'length'
op|')'
op|','
nl|'\n'
string|"'content-encoding'"
op|':'
name|'contentEncoding'
op|'}'
op|','
nl|'\n'
name|'self'
op|'.'
name|'contentHeaders'
op|'('
name|'request'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_singleRangeGivesSingleRangeStaticProducer
dedent|''
name|'def'
name|'test_singleRangeGivesSingleRangeStaticProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer when the Range header requests a single byte range\n        returns an instance of SingleRangeStaticProducer.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=1-3'"
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
string|"'abcdef'"
op|')'
newline|'\n'
name|'producer'
op|'='
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'producer'
op|','
name|'static'
op|'.'
name|'SingleRangeStaticProducer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_singleRangeSets206PartialContent
dedent|''
name|'def'
name|'test_singleRangeSets206PartialContent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer when the Range header requests a single, satisfiable byte\n        range sets the response code on the request to \'Partial Content\'.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=1-3'"
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
string|"'abcdef'"
op|')'
newline|'\n'
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'http'
op|'.'
name|'PARTIAL_CONTENT'
op|','
name|'request'
op|'.'
name|'responseCode'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_singleRangeSetsContentHeaders
dedent|''
name|'def'
name|'test_singleRangeSetsContentHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer when the Range header requests a single, satisfiable byte\n        range sets the Content-* headers appropriately.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=1-3'"
newline|'\n'
name|'contentType'
op|'='
string|'"text/plain"'
newline|'\n'
name|'contentEncoding'
op|'='
string|"'gzip'"
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
string|"'abcdef'"
op|','
name|'type'
op|'='
name|'contentType'
op|','
name|'encoding'
op|'='
name|'contentEncoding'
op|')'
newline|'\n'
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
op|'{'
string|"'content-type'"
op|':'
name|'contentType'
op|','
string|"'content-encoding'"
op|':'
name|'contentEncoding'
op|','
nl|'\n'
string|"'content-range'"
op|':'
string|"'bytes 1-3/6'"
op|','
string|"'content-length'"
op|':'
string|"'3'"
op|'}'
op|','
nl|'\n'
name|'self'
op|'.'
name|'contentHeaders'
op|'('
name|'request'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_singleUnsatisfiableRangeReturnsSingleRangeStaticProducer
dedent|''
name|'def'
name|'test_singleUnsatisfiableRangeReturnsSingleRangeStaticProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer still returns an instance of L{SingleRangeStaticProducer}\n        when the Range header requests a single unsatisfiable byte range.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=4-10'"
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
string|"'abc'"
op|')'
newline|'\n'
name|'producer'
op|'='
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'producer'
op|','
name|'static'
op|'.'
name|'SingleRangeStaticProducer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_singleUnsatisfiableRangeSets416ReqestedRangeNotSatisfiable
dedent|''
name|'def'
name|'test_singleUnsatisfiableRangeSets416ReqestedRangeNotSatisfiable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer sets the response code of the request to of \'Requested\n        Range Not Satisfiable\' when the Range header requests a single\n        unsatisfiable byte range.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=4-10'"
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
string|"'abc'"
op|')'
newline|'\n'
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'http'
op|'.'
name|'REQUESTED_RANGE_NOT_SATISFIABLE'
op|','
name|'request'
op|'.'
name|'responseCode'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_singleUnsatisfiableRangeSetsContentHeaders
dedent|''
name|'def'
name|'test_singleUnsatisfiableRangeSetsContentHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer when the Range header requests a single, unsatisfiable\n        byte range sets the Content-* headers appropriately.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=4-10'"
newline|'\n'
name|'contentType'
op|'='
string|'"text/plain"'
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
string|"'abc'"
op|','
name|'type'
op|'='
name|'contentType'
op|')'
newline|'\n'
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
op|'{'
string|"'content-type'"
op|':'
string|"'text/plain'"
op|','
string|"'content-length'"
op|':'
string|"'0'"
op|','
nl|'\n'
string|"'content-range'"
op|':'
string|"'bytes */3'"
op|'}'
op|','
nl|'\n'
name|'self'
op|'.'
name|'contentHeaders'
op|'('
name|'request'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_singlePartiallyOverlappingRangeSetsContentHeaders
dedent|''
name|'def'
name|'test_singlePartiallyOverlappingRangeSetsContentHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer when the Range header requests a single byte range that\n        partly overlaps the resource sets the Content-* headers appropriately.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=2-10'"
newline|'\n'
name|'contentType'
op|'='
string|'"text/plain"'
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
string|"'abc'"
op|','
name|'type'
op|'='
name|'contentType'
op|')'
newline|'\n'
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
op|'{'
string|"'content-type'"
op|':'
string|"'text/plain'"
op|','
string|"'content-length'"
op|':'
string|"'1'"
op|','
nl|'\n'
string|"'content-range'"
op|':'
string|"'bytes 2-2/3'"
op|'}'
op|','
nl|'\n'
name|'self'
op|'.'
name|'contentHeaders'
op|'('
name|'request'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleRangeGivesMultipleRangeStaticProducer
dedent|''
name|'def'
name|'test_multipleRangeGivesMultipleRangeStaticProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer when the Range header requests a single byte range\n        returns an instance of MultipleRangeStaticProducer.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=1-3,5-6'"
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
string|"'abcdef'"
op|')'
newline|'\n'
name|'producer'
op|'='
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'producer'
op|','
name|'static'
op|'.'
name|'MultipleRangeStaticProducer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleRangeSets206PartialContent
dedent|''
name|'def'
name|'test_multipleRangeSets206PartialContent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer when the Range header requests a multiple satisfiable\n        byte ranges sets the response code on the request to \'Partial\n        Content\'.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=1-3,5-6'"
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
string|"'abcdef'"
op|')'
newline|'\n'
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'http'
op|'.'
name|'PARTIAL_CONTENT'
op|','
name|'request'
op|'.'
name|'responseCode'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mutipleRangeSetsContentHeaders
dedent|''
name|'def'
name|'test_mutipleRangeSetsContentHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer when the Range header requests a single, satisfiable byte\n        range sets the Content-* headers appropriately.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=1-3,5-6'"
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
nl|'\n'
string|"'abcdefghijkl'"
op|','
name|'encoding'
op|'='
string|"'gzip'"
op|')'
newline|'\n'
name|'producer'
op|'='
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'contentHeaders'
op|'='
name|'self'
op|'.'
name|'contentHeaders'
op|'('
name|'request'
op|')'
newline|'\n'
comment|'# The only content-* headers set are content-type and content-length.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'set'
op|'('
op|'['
string|"'content-length'"
op|','
string|"'content-type'"
op|']'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
name|'contentHeaders'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
comment|'# The content-length depends on the boundary used in the response.'
nl|'\n'
name|'expectedLength'
op|'='
number|'5'
newline|'\n'
name|'for'
name|'boundary'
op|','
name|'offset'
op|','
name|'size'
name|'in'
name|'producer'
op|'.'
name|'rangeInfo'
op|':'
newline|'\n'
indent|'            '
name|'expectedLength'
op|'+='
name|'len'
op|'('
name|'boundary'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expectedLength'
op|','
name|'contentHeaders'
op|'['
string|"'content-length'"
op|']'
op|')'
newline|'\n'
comment|'# Content-type should be set to a value indicating a multipart'
nl|'\n'
comment|'# response and the boundary used to separate the parts.'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'content-type'"
op|','
name|'contentHeaders'
op|')'
newline|'\n'
name|'contentType'
op|'='
name|'contentHeaders'
op|'['
string|"'content-type'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
nl|'\n'
name|'None'
op|','
name|'re'
op|'.'
name|'match'
op|'('
nl|'\n'
string|'\'multipart/byteranges; boundary="[^"]*"\\Z\''
op|','
name|'contentType'
op|')'
op|')'
newline|'\n'
comment|'# Content-encoding is not set in the response to a multiple range'
nl|'\n'
comment|'# response, which is a bit wussy but works well enough with the way'
nl|'\n'
comment|'# static.File does content-encodings...'
nl|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'content-encoding'"
op|','
name|'contentHeaders'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleUnsatisfiableRangesReturnsMultipleRangeStaticProducer
dedent|''
name|'def'
name|'test_multipleUnsatisfiableRangesReturnsMultipleRangeStaticProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer still returns an instance of L{SingleRangeStaticProducer}\n        when the Range header requests multiple ranges, none of which are\n        satisfiable.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=10-12,15-20'"
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
string|"'abc'"
op|')'
newline|'\n'
name|'producer'
op|'='
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'producer'
op|','
name|'static'
op|'.'
name|'MultipleRangeStaticProducer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleUnsatisfiableRangesSets416ReqestedRangeNotSatisfiable
dedent|''
name|'def'
name|'test_multipleUnsatisfiableRangesSets416ReqestedRangeNotSatisfiable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer sets the response code of the request to of \'Requested\n        Range Not Satisfiable\' when the Range header requests multiple ranges,\n        none of which are satisfiable.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=10-12,15-20'"
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
string|"'abc'"
op|')'
newline|'\n'
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'http'
op|'.'
name|'REQUESTED_RANGE_NOT_SATISFIABLE'
op|','
name|'request'
op|'.'
name|'responseCode'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleUnsatisfiableRangeSetsContentHeaders
dedent|''
name|'def'
name|'test_multipleUnsatisfiableRangeSetsContentHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer when the Range header requests multiple ranges, none of\n        which are satisfiable, sets the Content-* headers appropriately.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=4-10'"
newline|'\n'
name|'contentType'
op|'='
string|'"text/plain"'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=10-12,15-20'"
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
string|"'abc'"
op|','
name|'type'
op|'='
name|'contentType'
op|')'
newline|'\n'
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
op|'{'
string|"'content-length'"
op|':'
string|"'0'"
op|','
string|"'content-range'"
op|':'
string|"'bytes */3'"
op|'}'
op|','
nl|'\n'
name|'self'
op|'.'
name|'contentHeaders'
op|'('
name|'request'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_oneSatisfiableRangeIsEnough
dedent|''
name|'def'
name|'test_oneSatisfiableRangeIsEnough'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        makeProducer when the Range header requests multiple ranges, at least\n        one of which matches, sets the response code to \'Partial Content\'.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=1-3,100-200'"
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'makeResourceWithContent'
op|'('
string|"'abcdef'"
op|')'
newline|'\n'
name|'resource'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'resource'
op|'.'
name|'openForReading'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'http'
op|'.'
name|'PARTIAL_CONTENT'
op|','
name|'request'
op|'.'
name|'responseCode'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StaticProducerTests
dedent|''
dedent|''
name|'class'
name|'StaticProducerTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the abstract L{StaticProducer}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_stopProducingClosesFile
name|'def'
name|'test_stopProducingClosesFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StaticProducer.stopProducing} closes the file object the producer is\n        producing data from.\n        """'
newline|'\n'
name|'fileObject'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'producer'
op|'='
name|'static'
op|'.'
name|'StaticProducer'
op|'('
name|'None'
op|','
name|'fileObject'
op|')'
newline|'\n'
name|'producer'
op|'.'
name|'stopProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'fileObject'
op|'.'
name|'closed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_stopProducingSetsRequestToNone
dedent|''
name|'def'
name|'test_stopProducingSetsRequestToNone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StaticProducer.stopProducing} sets the request instance variable to\n        None, which indicates to subclasses\' resumeProducing methods that no\n        more data should be produced.\n        """'
newline|'\n'
name|'fileObject'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'producer'
op|'='
name|'static'
op|'.'
name|'StaticProducer'
op|'('
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
op|','
name|'fileObject'
op|')'
newline|'\n'
name|'producer'
op|'.'
name|'stopProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'producer'
op|'.'
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoRangeStaticProducerTests
dedent|''
dedent|''
name|'class'
name|'NoRangeStaticProducerTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{NoRangeStaticProducer}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_implementsIPullProducer
name|'def'
name|'test_implementsIPullProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{NoRangeStaticProducer} implements L{IPullProducer}.\n        """'
newline|'\n'
name|'verifyObject'
op|'('
nl|'\n'
name|'interfaces'
op|'.'
name|'IPullProducer'
op|','
nl|'\n'
name|'static'
op|'.'
name|'NoRangeStaticProducer'
op|'('
name|'None'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_resumeProducingProducesContent
dedent|''
name|'def'
name|'test_resumeProducingProducesContent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{NoRangeStaticProducer.resumeProducing} writes content from the\n        resource to the request.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'content'
op|'='
string|"'abcdef'"
newline|'\n'
name|'producer'
op|'='
name|'static'
op|'.'
name|'NoRangeStaticProducer'
op|'('
nl|'\n'
name|'request'
op|','
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
name|'content'
op|')'
op|')'
newline|'\n'
comment|'# start calls registerProducer on the DummyRequest, which pulls all'
nl|'\n'
comment|'# output from the producer and so we just need this one call.'
nl|'\n'
name|'producer'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'content'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'request'
op|'.'
name|'written'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_resumeProducingBuffersOutput
dedent|''
name|'def'
name|'test_resumeProducingBuffersOutput'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{NoRangeStaticProducer.start} writes at most\n        C{abstract.FileDescriptor.bufferSize} bytes of content from the\n        resource to the request at once.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'bufferSize'
op|'='
name|'abstract'
op|'.'
name|'FileDescriptor'
op|'.'
name|'bufferSize'
newline|'\n'
name|'content'
op|'='
string|"'a'"
op|'*'
op|'('
number|'2'
op|'*'
name|'bufferSize'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'producer'
op|'='
name|'static'
op|'.'
name|'NoRangeStaticProducer'
op|'('
nl|'\n'
name|'request'
op|','
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
name|'content'
op|')'
op|')'
newline|'\n'
comment|'# start calls registerProducer on the DummyRequest, which pulls all'
nl|'\n'
comment|'# output from the producer and so we just need this one call.'
nl|'\n'
name|'producer'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
nl|'\n'
name|'content'
op|'['
number|'0'
op|':'
name|'bufferSize'
op|']'
op|','
nl|'\n'
name|'content'
op|'['
name|'bufferSize'
op|':'
number|'2'
op|'*'
name|'bufferSize'
op|']'
op|','
nl|'\n'
name|'content'
op|'['
number|'2'
op|'*'
name|'bufferSize'
op|':'
op|']'
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'request'
op|'.'
name|'written'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_finishCalledWhenDone
dedent|''
name|'def'
name|'test_finishCalledWhenDone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{NoRangeStaticProducer.resumeProducing} calls finish() on the request\n        after it is done producing content.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'finishDeferred'
op|'='
name|'request'
op|'.'
name|'notifyFinish'
op|'('
op|')'
newline|'\n'
name|'callbackList'
op|'='
op|'['
op|']'
newline|'\n'
name|'finishDeferred'
op|'.'
name|'addCallback'
op|'('
name|'callbackList'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'producer'
op|'='
name|'static'
op|'.'
name|'NoRangeStaticProducer'
op|'('
nl|'\n'
name|'request'
op|','
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
string|"'abcdef'"
op|')'
op|')'
newline|'\n'
comment|'# start calls registerProducer on the DummyRequest, which pulls all'
nl|'\n'
comment|'# output from the producer and so we just need this one call.'
nl|'\n'
name|'producer'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'None'
op|']'
op|','
name|'callbackList'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SingleRangeStaticProducerTests
dedent|''
dedent|''
name|'class'
name|'SingleRangeStaticProducerTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{SingleRangeStaticProducer}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_implementsIPullProducer
name|'def'
name|'test_implementsIPullProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SingleRangeStaticProducer} implements L{IPullProducer}.\n        """'
newline|'\n'
name|'verifyObject'
op|'('
nl|'\n'
name|'interfaces'
op|'.'
name|'IPullProducer'
op|','
nl|'\n'
name|'static'
op|'.'
name|'SingleRangeStaticProducer'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_resumeProducingProducesContent
dedent|''
name|'def'
name|'test_resumeProducingProducesContent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SingleRangeStaticProducer.resumeProducing} writes the given amount\n        of content, starting at the given offset, from the resource to the\n        request.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'content'
op|'='
string|"'abcdef'"
newline|'\n'
name|'producer'
op|'='
name|'static'
op|'.'
name|'SingleRangeStaticProducer'
op|'('
nl|'\n'
name|'request'
op|','
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
name|'content'
op|')'
op|','
number|'1'
op|','
number|'3'
op|')'
newline|'\n'
comment|'# DummyRequest.registerProducer pulls all output from the producer, so'
nl|'\n'
comment|'# we just need to call start.'
nl|'\n'
name|'producer'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'content'
op|'['
number|'1'
op|':'
number|'4'
op|']'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'request'
op|'.'
name|'written'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_resumeProducingBuffersOutput
dedent|''
name|'def'
name|'test_resumeProducingBuffersOutput'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SingleRangeStaticProducer.start} writes at most\n        C{abstract.FileDescriptor.bufferSize} bytes of content from the\n        resource to the request at once.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'bufferSize'
op|'='
name|'abstract'
op|'.'
name|'FileDescriptor'
op|'.'
name|'bufferSize'
newline|'\n'
name|'content'
op|'='
string|"'abc'"
op|'*'
name|'bufferSize'
newline|'\n'
name|'producer'
op|'='
name|'static'
op|'.'
name|'SingleRangeStaticProducer'
op|'('
nl|'\n'
name|'request'
op|','
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
name|'content'
op|')'
op|','
number|'1'
op|','
name|'bufferSize'
op|'+'
number|'10'
op|')'
newline|'\n'
comment|'# DummyRequest.registerProducer pulls all output from the producer, so'
nl|'\n'
comment|'# we just need to call start.'
nl|'\n'
name|'producer'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
nl|'\n'
name|'content'
op|'['
number|'1'
op|':'
name|'bufferSize'
op|'+'
number|'1'
op|']'
op|','
nl|'\n'
name|'content'
op|'['
name|'bufferSize'
op|'+'
number|'1'
op|':'
name|'bufferSize'
op|'+'
number|'11'
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'request'
op|'.'
name|'written'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_finishCalledWhenDone
dedent|''
name|'def'
name|'test_finishCalledWhenDone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SingleRangeStaticProducer.resumeProducing} calls finish() on the\n        request after it is done producing content.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'finishDeferred'
op|'='
name|'request'
op|'.'
name|'notifyFinish'
op|'('
op|')'
newline|'\n'
name|'callbackList'
op|'='
op|'['
op|']'
newline|'\n'
name|'finishDeferred'
op|'.'
name|'addCallback'
op|'('
name|'callbackList'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'producer'
op|'='
name|'static'
op|'.'
name|'SingleRangeStaticProducer'
op|'('
nl|'\n'
name|'request'
op|','
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
string|"'abcdef'"
op|')'
op|','
number|'1'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# start calls registerProducer on the DummyRequest, which pulls all'
nl|'\n'
comment|'# output from the producer and so we just need this one call.'
nl|'\n'
name|'producer'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'None'
op|']'
op|','
name|'callbackList'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MultipleRangeStaticProducerTests
dedent|''
dedent|''
name|'class'
name|'MultipleRangeStaticProducerTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{MultipleRangeStaticProducer}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_implementsIPullProducer
name|'def'
name|'test_implementsIPullProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{MultipleRangeStaticProducer} implements L{IPullProducer}.\n        """'
newline|'\n'
name|'verifyObject'
op|'('
nl|'\n'
name|'interfaces'
op|'.'
name|'IPullProducer'
op|','
nl|'\n'
name|'static'
op|'.'
name|'MultipleRangeStaticProducer'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_resumeProducingProducesContent
dedent|''
name|'def'
name|'test_resumeProducingProducesContent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{MultipleRangeStaticProducer.resumeProducing} writes the requested\n        chunks of content from the resource to the request, with the supplied\n        boundaries in between each chunk.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'content'
op|'='
string|"'abcdef'"
newline|'\n'
name|'producer'
op|'='
name|'static'
op|'.'
name|'MultipleRangeStaticProducer'
op|'('
nl|'\n'
name|'request'
op|','
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
name|'content'
op|')'
op|','
op|'['
op|'('
string|"'1'"
op|','
number|'1'
op|','
number|'3'
op|')'
op|','
op|'('
string|"'2'"
op|','
number|'5'
op|','
number|'1'
op|')'
op|']'
op|')'
newline|'\n'
comment|'# DummyRequest.registerProducer pulls all output from the producer, so'
nl|'\n'
comment|'# we just need to call start.'
nl|'\n'
name|'producer'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1bcd2f'"
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'request'
op|'.'
name|'written'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_resumeProducingBuffersOutput
dedent|''
name|'def'
name|'test_resumeProducingBuffersOutput'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{MultipleRangeStaticProducer.start} writes about\n        C{abstract.FileDescriptor.bufferSize} bytes of content from the\n        resource to the request at once.\n\n        To be specific about the \'about\' above: it can write slightly more,\n        for example in the case where the first boundary plus the first chunk\n        is less than C{bufferSize} but first boundary plus the first chunk\n        plus the second boundary is more, but this is unimportant as in\n        practice the boundaries are fairly small.  On the other side, it is\n        important for performance to bundle up several small chunks into one\n        call to request.write.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'content'
op|'='
string|"'0123456789'"
op|'*'
number|'2'
newline|'\n'
name|'producer'
op|'='
name|'static'
op|'.'
name|'MultipleRangeStaticProducer'
op|'('
nl|'\n'
name|'request'
op|','
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
name|'content'
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'2'
op|')'
op|','
op|'('
string|"'b'"
op|','
number|'5'
op|','
number|'10'
op|')'
op|','
op|'('
string|"'c'"
op|','
number|'0'
op|','
number|'0'
op|')'
op|']'
op|')'
newline|'\n'
name|'producer'
op|'.'
name|'bufferSize'
op|'='
number|'10'
newline|'\n'
comment|'# DummyRequest.registerProducer pulls all output from the producer, so'
nl|'\n'
comment|'# we just need to call start.'
nl|'\n'
name|'producer'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
nl|'\n'
string|"'a'"
op|'+'
name|'content'
op|'['
number|'0'
op|':'
number|'2'
op|']'
op|'+'
string|"'b'"
op|'+'
name|'content'
op|'['
number|'5'
op|':'
number|'11'
op|']'
op|','
nl|'\n'
name|'content'
op|'['
number|'11'
op|':'
number|'15'
op|']'
op|'+'
string|"'c'"
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'request'
op|'.'
name|'written'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_finishCalledWhenDone
dedent|''
name|'def'
name|'test_finishCalledWhenDone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{MultipleRangeStaticProducer.resumeProducing} calls finish() on the\n        request after it is done producing content.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'finishDeferred'
op|'='
name|'request'
op|'.'
name|'notifyFinish'
op|'('
op|')'
newline|'\n'
name|'callbackList'
op|'='
op|'['
op|']'
newline|'\n'
name|'finishDeferred'
op|'.'
name|'addCallback'
op|'('
name|'callbackList'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'producer'
op|'='
name|'static'
op|'.'
name|'MultipleRangeStaticProducer'
op|'('
nl|'\n'
name|'request'
op|','
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
string|"'abcdef'"
op|')'
op|','
op|'['
op|'('
string|"''"
op|','
number|'1'
op|','
number|'2'
op|')'
op|']'
op|')'
newline|'\n'
comment|'# start calls registerProducer on the DummyRequest, which pulls all'
nl|'\n'
comment|'# output from the producer and so we just need this one call.'
nl|'\n'
name|'producer'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'None'
op|']'
op|','
name|'callbackList'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|RangeTests
dedent|''
dedent|''
name|'class'
name|'RangeTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for I{Range-Header} support in L{twisted.web.static.File}.\n\n    @type file: L{file}\n    @ivar file: Temporary (binary) file containing the content to be served.\n\n    @type resource: L{static.File}\n    @ivar resource: A leaf web resource using C{file} as content.\n\n    @type request: L{DummyRequest}\n    @ivar request: A fake request, requesting C{resource}.\n\n    @type catcher: L{list}\n    @ivar catcher: List which gathers all log information.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a temporary file with a fixed payload of 64 bytes.  Create a\n        resource for that file and create a request which will be for that\n        resource.  Each test can set a different range header to test different\n        aspects of the implementation.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
comment|"# This is just a jumble of random stuff.  It's supposed to be a good"
nl|'\n'
comment|'# set of data for this test, particularly in order to avoid'
nl|'\n'
comment|'# accidentally seeing the right result by having a byte sequence'
nl|'\n'
comment|'# repeated at different locations or by having byte values which are'
nl|'\n'
comment|'# somehow correlated with their position in the string.'
nl|'\n'
name|'self'
op|'.'
name|'payload'
op|'='
op|'('
string|"'\\xf8u\\xf3E\\x8c7\\xce\\x00\\x9e\\xb6a0y0S\\xf0\\xef\\xac\\xb7'"
nl|'\n'
string|"'\\xbe\\xb5\\x17M\\x1e\\x136k{\\x1e\\xbe\\x0c\\x07\\x07\\t\\xd0'"
nl|'\n'
string|"'\\xbckY\\xf5I\\x0b\\xb8\\x88oZ\\x1d\\x85b\\x1a\\xcdk\\xf2\\x1d'"
nl|'\n'
string|"'&\\xfd%\\xdd\\x82q/A\\x10Y\\x8b'"
op|')'
newline|'\n'
name|'path'
op|'.'
name|'setContent'
op|'('
name|'self'
op|'.'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'='
name|'path'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'resource'
op|'='
name|'static'
op|'.'
name|'File'
op|'('
name|'self'
op|'.'
name|'file'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'isLeaf'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'uri'
op|'='
name|'self'
op|'.'
name|'file'
op|'.'
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'catcher'
op|'='
op|'['
op|']'
newline|'\n'
name|'log'
op|'.'
name|'addObserver'
op|'('
name|'self'
op|'.'
name|'catcher'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Clean up the resource file and the log observer.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'log'
op|'.'
name|'removeObserver'
op|'('
name|'self'
op|'.'
name|'catcher'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_assertLogged
dedent|''
name|'def'
name|'_assertLogged'
op|'('
name|'self'
op|','
name|'expected'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Asserts that a given log message occurred with an expected message.\n        """'
newline|'\n'
name|'logItem'
op|'='
name|'self'
op|'.'
name|'catcher'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'logItem'
op|'['
string|'"message"'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'expected'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'catcher'
op|','
op|'['
op|']'
op|','
string|'"An additional log occured: %r"'
op|'%'
op|'('
name|'logItem'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidRanges
dedent|''
name|'def'
name|'test_invalidRanges'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{File._parseRangeHeader} raises L{ValueError} when passed\n        syntactically invalid byte ranges.\n        """'
newline|'\n'
name|'f'
op|'='
name|'self'
op|'.'
name|'resource'
op|'.'
name|'_parseRangeHeader'
newline|'\n'
nl|'\n'
comment|"# there's no ="
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'f'
op|','
string|"'bytes'"
op|')'
newline|'\n'
nl|'\n'
comment|"# unknown isn't a valid Bytes-Unit"
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'f'
op|','
string|"'unknown=1-2'"
op|')'
newline|'\n'
nl|'\n'
comment|"# there's no - in =stuff"
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'f'
op|','
string|"'bytes=3'"
op|')'
newline|'\n'
nl|'\n'
comment|'# both start and end are empty'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'f'
op|','
string|"'bytes=-'"
op|')'
newline|'\n'
nl|'\n'
comment|"# start isn't an integer"
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'f'
op|','
string|"'bytes=foo-'"
op|')'
newline|'\n'
nl|'\n'
comment|"# end isn't an integer"
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'f'
op|','
string|"'bytes=-foo'"
op|')'
newline|'\n'
nl|'\n'
comment|"# end isn't equal to or greater than start"
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'f'
op|','
string|"'bytes=5-4'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_rangeMissingStop
dedent|''
name|'def'
name|'test_rangeMissingStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A single bytes range without an explicit stop position is parsed into a\n        two-tuple giving the start position and C{None}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'_parseRangeHeader'
op|'('
string|"'bytes=0-'"
op|')'
op|','
op|'['
op|'('
number|'0'
op|','
name|'None'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_rangeMissingStart
dedent|''
name|'def'
name|'test_rangeMissingStart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A single bytes range without an explicit start position is parsed into\n        a two-tuple of C{None} and the end position.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'_parseRangeHeader'
op|'('
string|"'bytes=-3'"
op|')'
op|','
op|'['
op|'('
name|'None'
op|','
number|'3'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_range
dedent|''
name|'def'
name|'test_range'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A single bytes range with explicit start and stop positions is parsed\n        into a two-tuple of those positions.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'_parseRangeHeader'
op|'('
string|"'bytes=2-5'"
op|')'
op|','
op|'['
op|'('
number|'2'
op|','
number|'5'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_rangeWithSpace
dedent|''
name|'def'
name|'test_rangeWithSpace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A single bytes range with whitespace in allowed places is parsed in\n        the same way as it would be without the whitespace.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'_parseRangeHeader'
op|'('
string|"' bytes=1-2 '"
op|')'
op|','
op|'['
op|'('
number|'1'
op|','
number|'2'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'_parseRangeHeader'
op|'('
string|"'bytes =1-2 '"
op|')'
op|','
op|'['
op|'('
number|'1'
op|','
number|'2'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'_parseRangeHeader'
op|'('
string|"'bytes= 1-2'"
op|')'
op|','
op|'['
op|'('
number|'1'
op|','
number|'2'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'_parseRangeHeader'
op|'('
string|"'bytes=1 -2'"
op|')'
op|','
op|'['
op|'('
number|'1'
op|','
number|'2'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'_parseRangeHeader'
op|'('
string|"'bytes=1- 2'"
op|')'
op|','
op|'['
op|'('
number|'1'
op|','
number|'2'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'_parseRangeHeader'
op|'('
string|"'bytes=1-2 '"
op|')'
op|','
op|'['
op|'('
number|'1'
op|','
number|'2'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nullRangeElements
dedent|''
name|'def'
name|'test_nullRangeElements'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If there are multiple byte ranges but only one is non-null, the\n        non-null range is parsed and its start and stop returned.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'_parseRangeHeader'
op|'('
string|"'bytes=1-2,\\r\\n, ,\\t'"
op|')'
op|','
op|'['
op|'('
number|'1'
op|','
number|'2'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleRanges
dedent|''
name|'def'
name|'test_multipleRanges'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If multiple byte ranges are specified their starts and stops are\n        returned.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'_parseRangeHeader'
op|'('
string|"'bytes=1-2,3-4'"
op|')'
op|','
nl|'\n'
op|'['
op|'('
number|'1'
op|','
number|'2'
op|')'
op|','
op|'('
number|'3'
op|','
number|'4'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_bodyLength
dedent|''
name|'def'
name|'test_bodyLength'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A correct response to a range request is as long as the length of the\n        requested range.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=0-43'"
newline|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'render'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'written'
op|')'
op|')'
op|','
number|'44'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidRangeRequest
dedent|''
name|'def'
name|'test_invalidRangeRequest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An incorrect range request (RFC 2616 defines a correct range request as\n        a Bytes-Unit followed by a \'=\' character followed by a specific range.\n        Only \'bytes\' is defined) results in the range header value being logged\n        and a normal 200 response being sent.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
name|'range'
op|'='
string|"'foobar=0-43'"
newline|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'render'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'expected'
op|'='
string|'"Ignoring malformed Range header %r"'
op|'%'
op|'('
name|'range'
op|','
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertLogged'
op|'('
name|'expected'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'written'
op|')'
op|','
name|'self'
op|'.'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'responseCode'
op|','
name|'http'
op|'.'
name|'OK'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-length'"
op|']'
op|','
nl|'\n'
name|'str'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'payload'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|parseMultipartBody
dedent|''
name|'def'
name|'parseMultipartBody'
op|'('
name|'self'
op|','
name|'body'
op|','
name|'boundary'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse C{body} as a multipart MIME response separated by C{boundary}.\n\n        Note that this with fail the calling test on certain syntactic\n        problems.\n        """'
newline|'\n'
name|'sep'
op|'='
string|'"\\r\\n--"'
op|'+'
name|'boundary'
newline|'\n'
name|'parts'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'body'
op|')'
op|'.'
name|'split'
op|'('
name|'sep'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|','
name|'parts'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'--\\r\\n'"
op|','
name|'parts'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
name|'parsed_parts'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'part'
name|'in'
name|'parts'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'before'
op|','
name|'header1'
op|','
name|'header2'
op|','
name|'blank'
op|','
name|'partBody'
op|'='
name|'part'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|','
number|'4'
op|')'
newline|'\n'
name|'headers'
op|'='
name|'header1'
op|'+'
string|"'\\n'"
op|'+'
name|'header2'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|','
name|'before'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|','
name|'blank'
op|')'
newline|'\n'
name|'partContentTypeValue'
op|'='
name|'re'
op|'.'
name|'search'
op|'('
nl|'\n'
string|"'^content-type: (.*)$'"
op|','
name|'headers'
op|','
name|'re'
op|'.'
name|'I'
op|'|'
name|'re'
op|'.'
name|'M'
op|')'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'start'
op|','
name|'end'
op|','
name|'size'
op|'='
name|'re'
op|'.'
name|'search'
op|'('
nl|'\n'
string|"'^content-range: bytes ([0-9]+)-([0-9]+)/([0-9]+)$'"
op|','
nl|'\n'
name|'headers'
op|','
name|'re'
op|'.'
name|'I'
op|'|'
name|'re'
op|'.'
name|'M'
op|')'
op|'.'
name|'groups'
op|'('
op|')'
newline|'\n'
name|'parsed_parts'
op|'.'
name|'append'
op|'('
nl|'\n'
op|'{'
string|"'contentType'"
op|':'
name|'partContentTypeValue'
op|','
nl|'\n'
string|"'contentRange'"
op|':'
op|'('
name|'start'
op|','
name|'end'
op|','
name|'size'
op|')'
op|','
nl|'\n'
string|"'body'"
op|':'
name|'partBody'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'parsed_parts'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleRangeRequest
dedent|''
name|'def'
name|'test_multipleRangeRequest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The response to a request for multipe bytes ranges is a MIME-ish\n        multipart response.\n        """'
newline|'\n'
name|'startEnds'
op|'='
op|'['
op|'('
number|'0'
op|','
number|'2'
op|')'
op|','
op|'('
number|'20'
op|','
number|'30'
op|')'
op|','
op|'('
number|'40'
op|','
number|'50'
op|')'
op|']'
newline|'\n'
name|'rangeHeaderValue'
op|'='
string|"','"
op|'.'
name|'join'
op|'('
op|'['
string|'"%s-%s"'
op|'%'
op|'('
name|'s'
op|','
name|'e'
op|')'
name|'for'
op|'('
name|'s'
op|','
name|'e'
op|')'
name|'in'
name|'startEnds'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes='"
op|'+'
name|'rangeHeaderValue'
newline|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'render'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'responseCode'
op|','
name|'http'
op|'.'
name|'PARTIAL_CONTENT'
op|')'
newline|'\n'
name|'boundary'
op|'='
name|'re'
op|'.'
name|'match'
op|'('
nl|'\n'
string|'\'^multipart/byteranges; boundary="(.*)"$\''
op|','
nl|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-type'"
op|']'
op|')'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'parts'
op|'='
name|'self'
op|'.'
name|'parseMultipartBody'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'written'
op|')'
op|','
name|'boundary'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'startEnds'
op|')'
op|','
name|'len'
op|'('
name|'parts'
op|')'
op|')'
newline|'\n'
name|'for'
name|'part'
op|','
op|'('
name|'s'
op|','
name|'e'
op|')'
name|'in'
name|'zip'
op|'('
name|'parts'
op|','
name|'startEnds'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'resource'
op|'.'
name|'type'
op|','
name|'part'
op|'['
string|"'contentType'"
op|']'
op|')'
newline|'\n'
name|'start'
op|','
name|'end'
op|','
name|'size'
op|'='
name|'part'
op|'['
string|"'contentRange'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'int'
op|'('
name|'start'
op|')'
op|','
name|'s'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'int'
op|'('
name|'end'
op|')'
op|','
name|'e'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'int'
op|'('
name|'size'
op|')'
op|','
name|'self'
op|'.'
name|'resource'
op|'.'
name|'getFileSize'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'payload'
op|'['
name|'s'
op|':'
name|'e'
op|'+'
number|'1'
op|']'
op|','
name|'part'
op|'['
string|"'body'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleRangeRequestWithRangeOverlappingEnd
dedent|''
dedent|''
name|'def'
name|'test_multipleRangeRequestWithRangeOverlappingEnd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The response to a request for multipe bytes ranges is a MIME-ish\n        multipart response, even when one of the ranged falls off the end of\n        the resource.\n        """'
newline|'\n'
name|'startEnds'
op|'='
op|'['
op|'('
number|'0'
op|','
number|'2'
op|')'
op|','
op|'('
number|'40'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'payload'
op|')'
op|'+'
number|'10'
op|')'
op|']'
newline|'\n'
name|'rangeHeaderValue'
op|'='
string|"','"
op|'.'
name|'join'
op|'('
op|'['
string|'"%s-%s"'
op|'%'
op|'('
name|'s'
op|','
name|'e'
op|')'
name|'for'
op|'('
name|'s'
op|','
name|'e'
op|')'
name|'in'
name|'startEnds'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes='"
op|'+'
name|'rangeHeaderValue'
newline|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'render'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'responseCode'
op|','
name|'http'
op|'.'
name|'PARTIAL_CONTENT'
op|')'
newline|'\n'
name|'boundary'
op|'='
name|'re'
op|'.'
name|'match'
op|'('
nl|'\n'
string|'\'^multipart/byteranges; boundary="(.*)"$\''
op|','
nl|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-type'"
op|']'
op|')'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'parts'
op|'='
name|'self'
op|'.'
name|'parseMultipartBody'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'written'
op|')'
op|','
name|'boundary'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'startEnds'
op|')'
op|','
name|'len'
op|'('
name|'parts'
op|')'
op|')'
newline|'\n'
name|'for'
name|'part'
op|','
op|'('
name|'s'
op|','
name|'e'
op|')'
name|'in'
name|'zip'
op|'('
name|'parts'
op|','
name|'startEnds'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'resource'
op|'.'
name|'type'
op|','
name|'part'
op|'['
string|"'contentType'"
op|']'
op|')'
newline|'\n'
name|'start'
op|','
name|'end'
op|','
name|'size'
op|'='
name|'part'
op|'['
string|"'contentRange'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'int'
op|'('
name|'start'
op|')'
op|','
name|'s'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'int'
op|'('
name|'end'
op|')'
op|','
name|'min'
op|'('
name|'e'
op|','
name|'self'
op|'.'
name|'resource'
op|'.'
name|'getFileSize'
op|'('
op|')'
op|'-'
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'int'
op|'('
name|'size'
op|')'
op|','
name|'self'
op|'.'
name|'resource'
op|'.'
name|'getFileSize'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'payload'
op|'['
name|'s'
op|':'
name|'e'
op|'+'
number|'1'
op|']'
op|','
name|'part'
op|'['
string|"'body'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_implicitEnd
dedent|''
dedent|''
name|'def'
name|'test_implicitEnd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the end byte position is omitted, then it is treated as if the\n        length of the resource was specified by the end byte position.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=23-'"
newline|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'render'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'written'
op|')'
op|','
name|'self'
op|'.'
name|'payload'
op|'['
number|'23'
op|':'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'written'
op|')'
op|')'
op|','
number|'41'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'responseCode'
op|','
name|'http'
op|'.'
name|'PARTIAL_CONTENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-range'"
op|']'
op|','
string|"'bytes 23-63/64'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-length'"
op|']'
op|','
string|"'41'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_implicitStart
dedent|''
name|'def'
name|'test_implicitStart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the start byte position is omitted but the end byte position is\n        supplied, then the range is treated as requesting the last -N bytes of\n        the resource, where N is the end byte position.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=-17'"
newline|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'render'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'written'
op|')'
op|','
name|'self'
op|'.'
name|'payload'
op|'['
op|'-'
number|'17'
op|':'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'written'
op|')'
op|')'
op|','
number|'17'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'responseCode'
op|','
name|'http'
op|'.'
name|'PARTIAL_CONTENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-range'"
op|']'
op|','
string|"'bytes 47-63/64'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-length'"
op|']'
op|','
string|"'17'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_explicitRange
dedent|''
name|'def'
name|'test_explicitRange'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A correct response to a bytes range header request from A to B starts\n        with the A\'th byte and ends with (including) the B\'th byte. The first\n        byte of a page is numbered with 0.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=3-43'"
newline|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'render'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'written'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'written'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'written'
op|','
name|'self'
op|'.'
name|'payload'
op|'['
number|'3'
op|':'
number|'44'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'responseCode'
op|','
name|'http'
op|'.'
name|'PARTIAL_CONTENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-range'"
op|']'
op|','
string|"'bytes 3-43/64'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'len'
op|'('
name|'written'
op|')'
op|')'
op|','
name|'self'
op|'.'
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-length'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_explicitRangeOverlappingEnd
dedent|''
name|'def'
name|'test_explicitRangeOverlappingEnd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A correct response to a bytes range header request from A to B when B\n        is past the end of the resource starts with the A\'th byte and ends\n        with the last byte of the resource. The first byte of a page is\n        numbered with 0.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=40-100'"
newline|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'render'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'written'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'written'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'written'
op|','
name|'self'
op|'.'
name|'payload'
op|'['
number|'40'
op|':'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'responseCode'
op|','
name|'http'
op|'.'
name|'PARTIAL_CONTENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-range'"
op|']'
op|','
string|"'bytes 40-63/64'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'len'
op|'('
name|'written'
op|')'
op|')'
op|','
name|'self'
op|'.'
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-length'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_statusCodeRequestedRangeNotSatisfiable
dedent|''
name|'def'
name|'test_statusCodeRequestedRangeNotSatisfiable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a range is syntactically invalid due to the start being greater than\n        the end, the range header is ignored (the request is responded to as if\n        it were not present).\n        """'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=20-13'"
newline|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'render'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'responseCode'
op|','
name|'http'
op|'.'
name|'OK'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'written'
op|')'
op|','
name|'self'
op|'.'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-length'"
op|']'
op|','
nl|'\n'
name|'str'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'payload'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidStartBytePos
dedent|''
name|'def'
name|'test_invalidStartBytePos'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a range is unsatisfiable due to the start not being less than the\n        length of the resource, the response is 416 (Requested range not\n        satisfiable) and no data is written to the response body (RFC 2616,\n        section 14.35.1).\n        """'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'range'"
op|']'
op|'='
string|"'bytes=67-108'"
newline|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'render'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'responseCode'
op|','
name|'http'
op|'.'
name|'REQUESTED_RANGE_NOT_SATISFIABLE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'written'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-length'"
op|']'
op|','
string|"'0'"
op|')'
newline|'\n'
comment|'# Sections 10.4.17 and 14.16'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'outgoingHeaders'
op|'['
string|"'content-range'"
op|']'
op|','
nl|'\n'
string|"'bytes */%d'"
op|'%'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'payload'
op|')'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DirectoryListerTest
dedent|''
dedent|''
name|'class'
name|'DirectoryListerTest'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{static.DirectoryLister}.\n    """'
newline|'\n'
DECL|member|_request
name|'def'
name|'_request'
op|'('
name|'self'
op|','
name|'uri'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'uri'
op|'='
name|'uri'
newline|'\n'
name|'return'
name|'request'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_renderHeader
dedent|''
name|'def'
name|'test_renderHeader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{static.DirectoryLister} prints the request uri as header of the\n        rendered content.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'lister'
op|'='
name|'static'
op|'.'
name|'DirectoryLister'
op|'('
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'data'
op|'='
name|'lister'
op|'.'
name|'render'
op|'('
name|'self'
op|'.'
name|'_request'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"<h1>Directory listing for foo</h1>"'
op|','
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"<title>Directory listing for foo</title>"'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_renderUnquoteHeader
dedent|''
name|'def'
name|'test_renderUnquoteHeader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{static.DirectoryLister} unquote the request uri before printing it.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'lister'
op|'='
name|'static'
op|'.'
name|'DirectoryLister'
op|'('
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'data'
op|'='
name|'lister'
op|'.'
name|'render'
op|'('
name|'self'
op|'.'
name|'_request'
op|'('
string|"'foo%20bar'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"<h1>Directory listing for foo bar</h1>"'
op|','
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"<title>Directory listing for foo bar</title>"'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_escapeHeader
dedent|''
name|'def'
name|'test_escapeHeader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{static.DirectoryLister} escape "&", "<" and ">" after unquoting the\n        request uri.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'lister'
op|'='
name|'static'
op|'.'
name|'DirectoryLister'
op|'('
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'data'
op|'='
name|'lister'
op|'.'
name|'render'
op|'('
name|'self'
op|'.'
name|'_request'
op|'('
string|"'foo%26bar'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"<h1>Directory listing for foo&amp;bar</h1>"'
op|','
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"<title>Directory listing for foo&amp;bar</title>"'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_renderFiles
dedent|''
name|'def'
name|'test_renderFiles'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{static.DirectoryLister} is able to list all the files inside a\n        directory.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'path'
op|'.'
name|'child'
op|'('
string|"'file1'"
op|')'
op|'.'
name|'setContent'
op|'('
string|'"content1"'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'child'
op|'('
string|"'file2'"
op|')'
op|'.'
name|'setContent'
op|'('
string|'"content2"'
op|'*'
number|'1000'
op|')'
newline|'\n'
nl|'\n'
name|'lister'
op|'='
name|'static'
op|'.'
name|'DirectoryLister'
op|'('
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'data'
op|'='
name|'lister'
op|'.'
name|'render'
op|'('
name|'self'
op|'.'
name|'_request'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'body'
op|'='
string|'"""<tr class="odd">\n    <td><a href="file1">file1</a></td>\n    <td>8B</td>\n    <td>[text/html]</td>\n    <td></td>\n</tr>\n<tr class="even">\n    <td><a href="file2">file2</a></td>\n    <td>7K</td>\n    <td>[text/html]</td>\n    <td></td>\n</tr>"""'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'body'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_renderDirectories
dedent|''
name|'def'
name|'test_renderDirectories'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{static.DirectoryLister} is able to list all the directories inside\n        a directory.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'path'
op|'.'
name|'child'
op|'('
string|"'dir1'"
op|')'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'path'
op|'.'
name|'child'
op|'('
string|"'dir2 & 3'"
op|')'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'lister'
op|'='
name|'static'
op|'.'
name|'DirectoryLister'
op|'('
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'data'
op|'='
name|'lister'
op|'.'
name|'render'
op|'('
name|'self'
op|'.'
name|'_request'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'body'
op|'='
string|'"""<tr class="odd">\n    <td><a href="dir1/">dir1/</a></td>\n    <td></td>\n    <td>[Directory]</td>\n    <td></td>\n</tr>\n<tr class="even">\n    <td><a href="dir2%20%26%203/">dir2 &amp; 3/</a></td>\n    <td></td>\n    <td>[Directory]</td>\n    <td></td>\n</tr>"""'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'body'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_renderFiltered
dedent|''
name|'def'
name|'test_renderFiltered'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{static.DirectoryLister} takes a optional C{dirs} argument that\n        filter out the list of of directories and files printed.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'path'
op|'.'
name|'child'
op|'('
string|"'dir1'"
op|')'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'path'
op|'.'
name|'child'
op|'('
string|"'dir2'"
op|')'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'path'
op|'.'
name|'child'
op|'('
string|"'dir3'"
op|')'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'lister'
op|'='
name|'static'
op|'.'
name|'DirectoryLister'
op|'('
name|'path'
op|'.'
name|'path'
op|','
name|'dirs'
op|'='
op|'['
string|'"dir1"'
op|','
string|'"dir3"'
op|']'
op|')'
newline|'\n'
name|'data'
op|'='
name|'lister'
op|'.'
name|'render'
op|'('
name|'self'
op|'.'
name|'_request'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'body'
op|'='
string|'"""<tr class="odd">\n    <td><a href="dir1/">dir1/</a></td>\n    <td></td>\n    <td>[Directory]</td>\n    <td></td>\n</tr>\n<tr class="even">\n    <td><a href="dir3/">dir3/</a></td>\n    <td></td>\n    <td>[Directory]</td>\n    <td></td>\n</tr>"""'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'body'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_oddAndEven
dedent|''
name|'def'
name|'test_oddAndEven'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{static.DirectoryLister} gives an alternate class for each odd and\n        even rows in the table.\n        """'
newline|'\n'
name|'lister'
op|'='
name|'static'
op|'.'
name|'DirectoryLister'
op|'('
name|'None'
op|')'
newline|'\n'
name|'elements'
op|'='
op|'['
op|'{'
string|'"href"'
op|':'
string|'""'
op|','
string|'"text"'
op|':'
string|'""'
op|','
string|'"size"'
op|':'
string|'""'
op|','
string|'"type"'
op|':'
string|'""'
op|','
nl|'\n'
string|'"encoding"'
op|':'
string|'""'
op|'}'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'5'
op|')'
op|']'
newline|'\n'
name|'content'
op|'='
name|'lister'
op|'.'
name|'_buildTableContent'
op|'('
name|'elements'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'content'
op|')'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'content'
op|'['
number|'0'
op|']'
op|'.'
name|'startswith'
op|'('
string|'\'<tr class="odd">\''
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'content'
op|'['
number|'1'
op|']'
op|'.'
name|'startswith'
op|'('
string|'\'<tr class="even">\''
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'content'
op|'['
number|'2'
op|']'
op|'.'
name|'startswith'
op|'('
string|'\'<tr class="odd">\''
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'content'
op|'['
number|'3'
op|']'
op|'.'
name|'startswith'
op|'('
string|'\'<tr class="even">\''
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'content'
op|'['
number|'4'
op|']'
op|'.'
name|'startswith'
op|'('
string|'\'<tr class="odd">\''
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mimeTypeAndEncodings
dedent|''
name|'def'
name|'test_mimeTypeAndEncodings'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{static.DirectoryLister} is able to detect mimetype and encoding of\n        listed files.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'path'
op|'.'
name|'child'
op|'('
string|"'file1.txt'"
op|')'
op|'.'
name|'setContent'
op|'('
string|'"file1"'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'child'
op|'('
string|"'file2.py'"
op|')'
op|'.'
name|'setContent'
op|'('
string|'"python"'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'child'
op|'('
string|"'file3.conf.gz'"
op|')'
op|'.'
name|'setContent'
op|'('
string|'"conf compressed"'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'child'
op|'('
string|"'file4.diff.bz2'"
op|')'
op|'.'
name|'setContent'
op|'('
string|'"diff compressed"'
op|')'
newline|'\n'
name|'directory'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'directory'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'contentTypes'
op|'='
op|'{'
nl|'\n'
string|'".txt"'
op|':'
string|'"text/plain"'
op|','
nl|'\n'
string|'".py"'
op|':'
string|'"text/python"'
op|','
nl|'\n'
string|'".conf"'
op|':'
string|'"text/configuration"'
op|','
nl|'\n'
string|'".diff"'
op|':'
string|'"text/diff"'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'lister'
op|'='
name|'static'
op|'.'
name|'DirectoryLister'
op|'('
name|'path'
op|'.'
name|'path'
op|','
name|'contentTypes'
op|'='
name|'contentTypes'
op|')'
newline|'\n'
name|'dirs'
op|','
name|'files'
op|'='
name|'lister'
op|'.'
name|'_getFilesAndDirectories'
op|'('
name|'directory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'dirs'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'files'
op|','
op|'['
nl|'\n'
op|'{'
string|"'encoding'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'href'"
op|':'
string|"'file1.txt'"
op|','
nl|'\n'
string|"'size'"
op|':'
string|"'5B'"
op|','
nl|'\n'
string|"'text'"
op|':'
string|"'file1.txt'"
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'[text/plain]'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'encoding'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'href'"
op|':'
string|"'file2.py'"
op|','
nl|'\n'
string|"'size'"
op|':'
string|"'6B'"
op|','
nl|'\n'
string|"'text'"
op|':'
string|"'file2.py'"
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'[text/python]'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'encoding'"
op|':'
string|"'[gzip]'"
op|','
nl|'\n'
string|"'href'"
op|':'
string|"'file3.conf.gz'"
op|','
nl|'\n'
string|"'size'"
op|':'
string|"'15B'"
op|','
nl|'\n'
string|"'text'"
op|':'
string|"'file3.conf.gz'"
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'[text/configuration]'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'encoding'"
op|':'
string|"'[bzip2]'"
op|','
nl|'\n'
string|"'href'"
op|':'
string|"'file4.diff.bz2'"
op|','
nl|'\n'
string|"'size'"
op|':'
string|"'15B'"
op|','
nl|'\n'
string|"'text'"
op|':'
string|"'file4.diff.bz2'"
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'[text/diff]'"
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_brokenSymlink
dedent|''
name|'def'
name|'test_brokenSymlink'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If on the file in the listing points to a broken symlink, it should not\n        be returned by L{static.DirectoryLister._getFilesAndDirectories}.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'file1'
op|'='
name|'path'
op|'.'
name|'child'
op|'('
string|"'file1'"
op|')'
newline|'\n'
name|'file1'
op|'.'
name|'setContent'
op|'('
string|'"file1"'
op|')'
newline|'\n'
name|'file1'
op|'.'
name|'linkTo'
op|'('
name|'path'
op|'.'
name|'child'
op|'('
string|'"file2"'
op|')'
op|')'
newline|'\n'
name|'file1'
op|'.'
name|'remove'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'lister'
op|'='
name|'static'
op|'.'
name|'DirectoryLister'
op|'('
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'directory'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'directory'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'dirs'
op|','
name|'files'
op|'='
name|'lister'
op|'.'
name|'_getFilesAndDirectories'
op|'('
name|'directory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'dirs'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'files'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'getattr'
op|'('
name|'os'
op|','
string|'"symlink"'
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'test_brokenSymlink'
op|'.'
name|'skip'
op|'='
string|'"No symlink support"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_childrenNotFound
dedent|''
name|'def'
name|'test_childrenNotFound'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Any child resource of L{static.DirectoryLister} renders an HTTP\n        I{NOT FOUND} response code.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'lister'
op|'='
name|'static'
op|'.'
name|'DirectoryLister'
op|'('
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'_request'
op|'('
string|"''"
op|')'
newline|'\n'
name|'child'
op|'='
name|'resource'
op|'.'
name|'getChildForRequest'
op|'('
name|'lister'
op|','
name|'request'
op|')'
newline|'\n'
name|'result'
op|'='
name|'_render'
op|'('
name|'child'
op|','
name|'request'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'request'
op|'.'
name|'responseCode'
op|','
name|'http'
op|'.'
name|'NOT_FOUND'
op|')'
newline|'\n'
dedent|''
name|'result'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_repr
dedent|''
name|'def'
name|'test_repr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{static.DirectoryLister.__repr__} gives the path of the lister.\n        """'
newline|'\n'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'lister'
op|'='
name|'static'
op|'.'
name|'DirectoryLister'
op|'('
name|'path'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'repr'
op|'('
name|'lister'
op|')'
op|','
nl|'\n'
string|'"<DirectoryLister of %r>"'
op|'%'
op|'('
name|'path'
op|'.'
name|'path'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'lister'
op|')'
op|','
nl|'\n'
string|'"<DirectoryLister of %r>"'
op|'%'
op|'('
name|'path'
op|'.'
name|'path'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_formatFileSize
dedent|''
name|'def'
name|'test_formatFileSize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{static.formatFileSize} format an amount of bytes into a more readable\n        format.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'static'
op|'.'
name|'formatFileSize'
op|'('
number|'0'
op|')'
op|','
string|'"0B"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'static'
op|'.'
name|'formatFileSize'
op|'('
number|'123'
op|')'
op|','
string|'"123B"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'static'
op|'.'
name|'formatFileSize'
op|'('
number|'4567'
op|')'
op|','
string|'"4K"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'static'
op|'.'
name|'formatFileSize'
op|'('
number|'8900000'
op|')'
op|','
string|'"8M"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'static'
op|'.'
name|'formatFileSize'
op|'('
number|'1234000000'
op|')'
op|','
string|'"1G"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'static'
op|'.'
name|'formatFileSize'
op|'('
number|'1234567890000'
op|')'
op|','
string|'"1149G"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestFileTransferDeprecated
dedent|''
dedent|''
name|'class'
name|'TestFileTransferDeprecated'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{static.FileTransfer} is deprecated.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_deprecation
name|'def'
name|'test_deprecation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Instantiation of L{FileTransfer} produces a deprecation warning.\n        """'
newline|'\n'
name|'static'
op|'.'
name|'FileTransfer'
op|'('
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
op|','
number|'0'
op|','
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'warnings'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
name|'self'
op|'.'
name|'test_deprecation'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'warnings'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'category'"
op|']'
op|','
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
nl|'\n'
string|"'FileTransfer is deprecated since Twisted 9.0. '"
nl|'\n'
string|"'Use a subclass of StaticProducer instead.'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.web._auth}.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
op|'.'
name|'verify'
name|'import'
name|'verifyObject'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'address'
name|'import'
name|'IPv4Address'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'error'
op|','
name|'portal'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'checkers'
name|'import'
name|'InMemoryUsernamePasswordDatabaseDontUse'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'checkers'
name|'import'
name|'ANONYMOUS'
op|','
name|'AllowAnonymousAccess'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'IUsernamePassword'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'iweb'
name|'import'
name|'ICredentialFactory'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'resource'
name|'import'
name|'IResource'
op|','
name|'Resource'
op|','
name|'getChildForRequest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'_auth'
name|'import'
name|'basic'
op|','
name|'digest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'_auth'
op|'.'
name|'wrapper'
name|'import'
name|'HTTPAuthSessionWrapper'
op|','
name|'UnauthorizedResource'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'_auth'
op|'.'
name|'basic'
name|'import'
name|'BasicCredentialFactory'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'server'
name|'import'
name|'NOT_DONE_YET'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'static'
name|'import'
name|'Data'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'test'
op|'.'
name|'test_web'
name|'import'
name|'DummyRequest'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|b64encode
name|'def'
name|'b64encode'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'s'
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BasicAuthTestsMixin
dedent|''
name|'class'
name|'BasicAuthTestsMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{TestCase} mixin class which defines a number of tests for\n    L{basic.BasicCredentialFactory}.  Because this mixin defines C{setUp}, it\n    must be inherited before L{TestCase}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'request'
op|'='
name|'self'
op|'.'
name|'makeRequest'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'realm'
op|'='
string|"'foo'"
newline|'\n'
name|'self'
op|'.'
name|'username'
op|'='
string|"'dreid'"
newline|'\n'
name|'self'
op|'.'
name|'password'
op|'='
string|"'S3CuR1Ty'"
newline|'\n'
name|'self'
op|'.'
name|'credentialFactory'
op|'='
name|'basic'
op|'.'
name|'BasicCredentialFactory'
op|'('
name|'self'
op|'.'
name|'realm'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeRequest
dedent|''
name|'def'
name|'makeRequest'
op|'('
name|'self'
op|','
name|'method'
op|'='
string|"'GET'"
op|','
name|'clientAddress'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a request object to be passed to\n        L{basic.BasicCredentialFactory.decode} along with a response value.\n        Override this in a subclass.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
string|'"%r did not implement makeRequest"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__class__'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_interface
dedent|''
name|'def'
name|'test_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BasicCredentialFactory} implements L{ICredentialFactory}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'verifyObject'
op|'('
name|'ICredentialFactory'
op|','
name|'self'
op|'.'
name|'credentialFactory'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_usernamePassword
dedent|''
name|'def'
name|'test_usernamePassword'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{basic.BasicCredentialFactory.decode} turns a base64-encoded response\n        into a L{UsernamePassword} object with a password which reflects the\n        one which was encoded in the response.\n        """'
newline|'\n'
name|'response'
op|'='
name|'b64encode'
op|'('
string|"'%s:%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'username'
op|','
name|'self'
op|'.'
name|'password'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'creds'
op|'='
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'decode'
op|'('
name|'response'
op|','
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'IUsernamePassword'
op|'.'
name|'providedBy'
op|'('
name|'creds'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'creds'
op|'.'
name|'checkPassword'
op|'('
name|'self'
op|'.'
name|'password'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'creds'
op|'.'
name|'checkPassword'
op|'('
name|'self'
op|'.'
name|'password'
op|'+'
string|"'wrong'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_incorrectPadding
dedent|''
name|'def'
name|'test_incorrectPadding'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{basic.BasicCredentialFactory.decode} decodes a base64-encoded\n        response with incorrect padding.\n        """'
newline|'\n'
name|'response'
op|'='
name|'b64encode'
op|'('
string|"'%s:%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'username'
op|','
name|'self'
op|'.'
name|'password'
op|')'
op|')'
newline|'\n'
name|'response'
op|'='
name|'response'
op|'.'
name|'strip'
op|'('
string|"'='"
op|')'
newline|'\n'
nl|'\n'
name|'creds'
op|'='
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'decode'
op|'('
name|'response'
op|','
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'verifyObject'
op|'('
name|'IUsernamePassword'
op|','
name|'creds'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'creds'
op|'.'
name|'checkPassword'
op|'('
name|'self'
op|'.'
name|'password'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidEncoding
dedent|''
name|'def'
name|'test_invalidEncoding'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{basic.BasicCredentialFactory.decode} raises L{LoginFailed} if passed\n        a response which is not base64-encoded.\n        """'
newline|'\n'
name|'response'
op|'='
string|"'x'"
comment|'# one byte cannot be valid base64 text'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'LoginFailed'
op|','
nl|'\n'
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'decode'
op|','
name|'response'
op|','
name|'self'
op|'.'
name|'makeRequest'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidCredentials
dedent|''
name|'def'
name|'test_invalidCredentials'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{basic.BasicCredentialFactory.decode} raises L{LoginFailed} when\n        passed a response which is not valid base64-encoded text.\n        """'
newline|'\n'
name|'response'
op|'='
name|'b64encode'
op|'('
string|"'123abc+/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'LoginFailed'
op|','
nl|'\n'
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'decode'
op|','
nl|'\n'
name|'response'
op|','
name|'self'
op|'.'
name|'makeRequest'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RequestMixin
dedent|''
dedent|''
name|'class'
name|'RequestMixin'
op|':'
newline|'\n'
DECL|member|makeRequest
indent|'    '
name|'def'
name|'makeRequest'
op|'('
name|'self'
op|','
name|'method'
op|'='
string|"'GET'"
op|','
name|'clientAddress'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a L{DummyRequest} (change me to create a\n        L{twisted.web.http.Request} instead).\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'method'
op|'='
name|'method'
newline|'\n'
name|'request'
op|'.'
name|'client'
op|'='
name|'clientAddress'
newline|'\n'
name|'return'
name|'request'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BasicAuthTestCase
dedent|''
dedent|''
name|'class'
name|'BasicAuthTestCase'
op|'('
name|'RequestMixin'
op|','
name|'BasicAuthTestsMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Basic authentication tests which use L{twisted.web.http.Request}.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DigestAuthTestCase
dedent|''
name|'class'
name|'DigestAuthTestCase'
op|'('
name|'RequestMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Digest authentication tests which use L{twisted.web.http.Request}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a DigestCredentialFactory for testing\n        """'
newline|'\n'
name|'self'
op|'.'
name|'realm'
op|'='
string|'"test realm"'
newline|'\n'
name|'self'
op|'.'
name|'algorithm'
op|'='
string|'"md5"'
newline|'\n'
name|'self'
op|'.'
name|'credentialFactory'
op|'='
name|'digest'
op|'.'
name|'DigestCredentialFactory'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'algorithm'
op|','
name|'self'
op|'.'
name|'realm'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'='
name|'self'
op|'.'
name|'makeRequest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_decode
dedent|''
name|'def'
name|'test_decode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{digest.DigestCredentialFactory.decode} calls the C{decode} method on\n        L{twisted.cred.digest.DigestCredentialFactory} with the HTTP method and\n        host of the request.\n        """'
newline|'\n'
name|'host'
op|'='
string|"'169.254.0.1'"
newline|'\n'
name|'method'
op|'='
string|"'GET'"
newline|'\n'
name|'done'
op|'='
op|'['
name|'False'
op|']'
newline|'\n'
name|'response'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'_response'
op|','
name|'_method'
op|','
name|'_host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|','
name|'_response'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'method'
op|','
name|'_method'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'host'
op|','
name|'_host'
op|')'
newline|'\n'
name|'done'
op|'['
number|'0'
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'digest'
op|','
string|"'decode'"
op|','
name|'check'
op|')'
newline|'\n'
name|'req'
op|'='
name|'self'
op|'.'
name|'makeRequest'
op|'('
name|'method'
op|','
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
name|'host'
op|','
number|'81'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'decode'
op|'('
name|'response'
op|','
name|'req'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'done'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_interface
dedent|''
name|'def'
name|'test_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory} implements L{ICredentialFactory}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'verifyObject'
op|'('
name|'ICredentialFactory'
op|','
name|'self'
op|'.'
name|'credentialFactory'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getChallenge
dedent|''
name|'def'
name|'test_getChallenge'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The challenge issued by L{DigestCredentialFactory.getChallenge} must\n        include C{\'qop\'}, C{\'realm\'}, C{\'algorithm\'}, C{\'nonce\'}, and\n        C{\'opaque\'} keys.  The values for the C{\'realm\'} and C{\'algorithm\'}\n        keys must match the values supplied to the factory\'s initializer.\n        None of the values may have newlines in them.\n        """'
newline|'\n'
name|'challenge'
op|'='
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'getChallenge'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'challenge'
op|'['
string|"'qop'"
op|']'
op|','
string|"'auth'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'challenge'
op|'['
string|"'realm'"
op|']'
op|','
string|"'test realm'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'challenge'
op|'['
string|"'algorithm'"
op|']'
op|','
string|"'md5'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'nonce'"
op|','
name|'challenge'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'opaque'"
op|','
name|'challenge'
op|')'
newline|'\n'
name|'for'
name|'v'
name|'in'
name|'challenge'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'\\n'"
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getChallengeWithoutClientIP
dedent|''
dedent|''
name|'def'
name|'test_getChallengeWithoutClientIP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory.getChallenge} can issue a challenge even if\n        the L{Request} it is passed returns C{None} from C{getClientIP}.\n        """'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'makeRequest'
op|'('
string|"'GET'"
op|','
name|'None'
op|')'
newline|'\n'
name|'challenge'
op|'='
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'getChallenge'
op|'('
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'challenge'
op|'['
string|"'qop'"
op|']'
op|','
string|"'auth'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'challenge'
op|'['
string|"'realm'"
op|']'
op|','
string|"'test realm'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'challenge'
op|'['
string|"'algorithm'"
op|']'
op|','
string|"'md5'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'nonce'"
op|','
name|'challenge'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'opaque'"
op|','
name|'challenge'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnauthorizedResourceTests
dedent|''
dedent|''
name|'class'
name|'UnauthorizedResourceTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{UnauthorizedResource}.\n    """'
newline|'\n'
DECL|member|test_getChildWithDefault
name|'def'
name|'test_getChildWithDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An L{UnauthorizedResource} is every child of itself.\n        """'
newline|'\n'
name|'resource'
op|'='
name|'UnauthorizedResource'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'resource'
op|'.'
name|'getChildWithDefault'
op|'('
string|'"foo"'
op|','
name|'None'
op|')'
op|','
name|'resource'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'resource'
op|'.'
name|'getChildWithDefault'
op|'('
string|'"bar"'
op|','
name|'None'
op|')'
op|','
name|'resource'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_render
dedent|''
name|'def'
name|'test_render'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UnauthorizedResource} renders with a 401 response code and a\n        I{WWW-Authenticate} header and puts a simple unauthorized message\n        into the response body.\n        """'
newline|'\n'
name|'resource'
op|'='
name|'UnauthorizedResource'
op|'('
op|'['
nl|'\n'
name|'BasicCredentialFactory'
op|'('
string|"'example.com'"
op|')'
op|']'
op|')'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'render'
op|'('
name|'resource'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'responseCode'
op|','
number|'401'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'request'
op|'.'
name|'responseHeaders'
op|'.'
name|'getRawHeaders'
op|'('
string|"'www-authenticate'"
op|')'
op|','
nl|'\n'
op|'['
string|'\'basic realm="example.com"\''
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'written'
op|','
op|'['
string|"'Unauthorized'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_renderQuotesRealm
dedent|''
name|'def'
name|'test_renderQuotesRealm'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The realm value included in the I{WWW-Authenticate} header set in\n        the response when L{UnauthorizedResounrce} is rendered has quotes\n        and backslashes escaped.\n        """'
newline|'\n'
name|'resource'
op|'='
name|'UnauthorizedResource'
op|'('
op|'['
nl|'\n'
name|'BasicCredentialFactory'
op|'('
string|'\'example\\\\"foo\''
op|')'
op|']'
op|')'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'render'
op|'('
name|'resource'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'request'
op|'.'
name|'responseHeaders'
op|'.'
name|'getRawHeaders'
op|'('
string|"'www-authenticate'"
op|')'
op|','
nl|'\n'
op|'['
string|'\'basic realm="example\\\\\\\\\\\\"foo"\''
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Realm
dedent|''
dedent|''
name|'class'
name|'Realm'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A simple L{IRealm} implementation which gives out L{WebAvatar} for any\n    avatarId.\n\n    @type loggedIn: C{int}\n    @ivar loggedIn: The number of times C{requestAvatar} has been invoked for\n        L{IResource}.\n\n    @type loggedOut: C{int}\n    @ivar loggedOut: The number of times the logout callback has been invoked.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'portal'
op|'.'
name|'IRealm'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'avatarFactory'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loggedOut'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'loggedIn'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'avatarFactory'
op|'='
name|'avatarFactory'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|requestAvatar
dedent|''
name|'def'
name|'requestAvatar'
op|'('
name|'self'
op|','
name|'avatarId'
op|','
name|'mind'
op|','
op|'*'
name|'interfaces'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'IResource'
name|'in'
name|'interfaces'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'loggedIn'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'IResource'
op|','
name|'self'
op|'.'
name|'avatarFactory'
op|'('
name|'avatarId'
op|')'
op|','
name|'self'
op|'.'
name|'logout'
newline|'\n'
dedent|''
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|logout
dedent|''
name|'def'
name|'logout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loggedOut'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|HTTPAuthHeaderTests
dedent|''
dedent|''
name|'class'
name|'HTTPAuthHeaderTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{HTTPAuthSessionWrapper}.\n    """'
newline|'\n'
DECL|variable|makeRequest
name|'makeRequest'
op|'='
name|'DummyRequest'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a realm, portal, and L{HTTPAuthSessionWrapper} to use in the tests.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'username'
op|'='
string|"'foo bar'"
newline|'\n'
name|'self'
op|'.'
name|'password'
op|'='
string|"'bar baz'"
newline|'\n'
name|'self'
op|'.'
name|'avatarContent'
op|'='
string|'"contents of the avatar resource itself"'
newline|'\n'
name|'self'
op|'.'
name|'childName'
op|'='
string|'"foo-child"'
newline|'\n'
name|'self'
op|'.'
name|'childContent'
op|'='
string|'"contents of the foo child of the avatar"'
newline|'\n'
name|'self'
op|'.'
name|'checker'
op|'='
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checker'
op|'.'
name|'addUser'
op|'('
name|'self'
op|'.'
name|'username'
op|','
name|'self'
op|'.'
name|'password'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'avatar'
op|'='
name|'Data'
op|'('
name|'self'
op|'.'
name|'avatarContent'
op|','
string|"'text/plain'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'avatar'
op|'.'
name|'putChild'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'childName'
op|','
name|'Data'
op|'('
name|'self'
op|'.'
name|'childContent'
op|','
string|"'text/plain'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'avatars'
op|'='
op|'{'
name|'self'
op|'.'
name|'username'
op|':'
name|'self'
op|'.'
name|'avatar'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'realm'
op|'='
name|'Realm'
op|'('
name|'self'
op|'.'
name|'avatars'
op|'.'
name|'get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'='
name|'portal'
op|'.'
name|'Portal'
op|'('
name|'self'
op|'.'
name|'realm'
op|','
op|'['
name|'self'
op|'.'
name|'checker'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'credentialFactories'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'wrapper'
op|'='
name|'HTTPAuthSessionWrapper'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'portal'
op|','
name|'self'
op|'.'
name|'credentialFactories'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_authorizedBasicLogin
dedent|''
name|'def'
name|'_authorizedBasicLogin'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add an I{basic authorization} header to the given request and then\n        dispatch it, starting from C{self.wrapper} and returning the resulting\n        L{IResource}.\n        """'
newline|'\n'
name|'authorization'
op|'='
name|'b64encode'
op|'('
name|'self'
op|'.'
name|'username'
op|'+'
string|"':'"
op|'+'
name|'self'
op|'.'
name|'password'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'authorization'"
op|']'
op|'='
string|"'Basic '"
op|'+'
name|'authorization'
newline|'\n'
name|'return'
name|'getChildForRequest'
op|'('
name|'self'
op|'.'
name|'wrapper'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getChildWithDefault
dedent|''
name|'def'
name|'test_getChildWithDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Resource traversal which encounters an L{HTTPAuthSessionWrapper}\n        results in an L{UnauthorizedResource} instance when the request does\n        not have the required I{Authorization} headers.\n        """'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'makeRequest'
op|'('
op|'['
name|'self'
op|'.'
name|'childName'
op|']'
op|')'
newline|'\n'
name|'child'
op|'='
name|'getChildForRequest'
op|'('
name|'self'
op|'.'
name|'wrapper'
op|','
name|'request'
op|')'
newline|'\n'
name|'d'
op|'='
name|'request'
op|'.'
name|'notifyFinish'
op|'('
op|')'
newline|'\n'
DECL|function|cbFinished
name|'def'
name|'cbFinished'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'request'
op|'.'
name|'responseCode'
op|','
number|'401'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbFinished'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'render'
op|'('
name|'child'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_invalidAuthorizationTest
dedent|''
name|'def'
name|'_invalidAuthorizationTest'
op|'('
name|'self'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a request with the given value as the value of an\n        I{Authorization} header and perform resource traversal with it,\n        starting at C{self.wrapper}.  Assert that the result is a 401 response\n        code.  Return a L{Deferred} which fires when this is all done.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'credentialFactories'
op|'.'
name|'append'
op|'('
name|'BasicCredentialFactory'
op|'('
string|"'example.com'"
op|')'
op|')'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'makeRequest'
op|'('
op|'['
name|'self'
op|'.'
name|'childName'
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'authorization'"
op|']'
op|'='
name|'response'
newline|'\n'
name|'child'
op|'='
name|'getChildForRequest'
op|'('
name|'self'
op|'.'
name|'wrapper'
op|','
name|'request'
op|')'
newline|'\n'
name|'d'
op|'='
name|'request'
op|'.'
name|'notifyFinish'
op|'('
op|')'
newline|'\n'
DECL|function|cbFinished
name|'def'
name|'cbFinished'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'responseCode'
op|','
number|'401'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbFinished'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'render'
op|'('
name|'child'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getChildWithDefaultUnauthorizedUser
dedent|''
name|'def'
name|'test_getChildWithDefaultUnauthorizedUser'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Resource traversal which enouncters an L{HTTPAuthSessionWrapper}\n        results in an L{UnauthorizedResource} when the request has an\n        I{Authorization} header with a user which does not exist.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_invalidAuthorizationTest'
op|'('
string|"'Basic '"
op|'+'
name|'b64encode'
op|'('
string|"'foo:bar'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getChildWithDefaultUnauthorizedPassword
dedent|''
name|'def'
name|'test_getChildWithDefaultUnauthorizedPassword'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Resource traversal which enouncters an L{HTTPAuthSessionWrapper}\n        results in an L{UnauthorizedResource} when the request has an\n        I{Authorization} header with a user which exists and the wrong\n        password.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_invalidAuthorizationTest'
op|'('
nl|'\n'
string|"'Basic '"
op|'+'
name|'b64encode'
op|'('
name|'self'
op|'.'
name|'username'
op|'+'
string|"':bar'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getChildWithDefaultUnrecognizedScheme
dedent|''
name|'def'
name|'test_getChildWithDefaultUnrecognizedScheme'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Resource traversal which enouncters an L{HTTPAuthSessionWrapper}\n        results in an L{UnauthorizedResource} when the request has an\n        I{Authorization} header with an unrecognized scheme.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_invalidAuthorizationTest'
op|'('
string|"'Quux foo bar baz'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getChildWithDefaultAuthorized
dedent|''
name|'def'
name|'test_getChildWithDefaultAuthorized'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Resource traversal which encounters an L{HTTPAuthSessionWrapper}\n        results in an L{IResource} which renders the L{IResource} avatar\n        retrieved from the portal when the request has a valid I{Authorization}\n        header.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'credentialFactories'
op|'.'
name|'append'
op|'('
name|'BasicCredentialFactory'
op|'('
string|"'example.com'"
op|')'
op|')'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'makeRequest'
op|'('
op|'['
name|'self'
op|'.'
name|'childName'
op|']'
op|')'
newline|'\n'
name|'child'
op|'='
name|'self'
op|'.'
name|'_authorizedBasicLogin'
op|'('
name|'request'
op|')'
newline|'\n'
name|'d'
op|'='
name|'request'
op|'.'
name|'notifyFinish'
op|'('
op|')'
newline|'\n'
DECL|function|cbFinished
name|'def'
name|'cbFinished'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'request'
op|'.'
name|'written'
op|','
op|'['
name|'self'
op|'.'
name|'childContent'
op|']'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbFinished'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'render'
op|'('
name|'child'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_renderAuthorized
dedent|''
name|'def'
name|'test_renderAuthorized'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Resource traversal which terminates at an L{HTTPAuthSessionWrapper}\n        and includes correct authentication headers results in the\n        L{IResource} avatar (not one of its children) retrieved from the\n        portal being rendered.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'credentialFactories'
op|'.'
name|'append'
op|'('
name|'BasicCredentialFactory'
op|'('
string|"'example.com'"
op|')'
op|')'
newline|'\n'
comment|'# Request it exactly, not any of its children.'
nl|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'makeRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'child'
op|'='
name|'self'
op|'.'
name|'_authorizedBasicLogin'
op|'('
name|'request'
op|')'
newline|'\n'
name|'d'
op|'='
name|'request'
op|'.'
name|'notifyFinish'
op|'('
op|')'
newline|'\n'
DECL|function|cbFinished
name|'def'
name|'cbFinished'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'request'
op|'.'
name|'written'
op|','
op|'['
name|'self'
op|'.'
name|'avatarContent'
op|']'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbFinished'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'render'
op|'('
name|'child'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getChallengeCalledWithRequest
dedent|''
name|'def'
name|'test_getChallengeCalledWithRequest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When L{HTTPAuthSessionWrapper} finds an L{ICredentialFactory} to issue\n        a challenge, it calls the C{getChallenge} method with the request as an\n        argument.\n        """'
newline|'\n'
DECL|class|DumbCredentialFactory
name|'class'
name|'DumbCredentialFactory'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'implements'
op|'('
name|'ICredentialFactory'
op|')'
newline|'\n'
DECL|variable|scheme
name|'scheme'
op|'='
string|"'dumb'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'requests'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|getChallenge
dedent|''
name|'def'
name|'getChallenge'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'requests'
op|'.'
name|'append'
op|'('
name|'request'
op|')'
newline|'\n'
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'factory'
op|'='
name|'DumbCredentialFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'credentialFactories'
op|'.'
name|'append'
op|'('
name|'factory'
op|')'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'makeRequest'
op|'('
op|'['
name|'self'
op|'.'
name|'childName'
op|']'
op|')'
newline|'\n'
name|'child'
op|'='
name|'getChildForRequest'
op|'('
name|'self'
op|'.'
name|'wrapper'
op|','
name|'request'
op|')'
newline|'\n'
name|'d'
op|'='
name|'request'
op|'.'
name|'notifyFinish'
op|'('
op|')'
newline|'\n'
DECL|function|cbFinished
name|'def'
name|'cbFinished'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'factory'
op|'.'
name|'requests'
op|','
op|'['
name|'request'
op|']'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbFinished'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'render'
op|'('
name|'child'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_logout
dedent|''
name|'def'
name|'test_logout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The realm\'s logout callback is invoked after the resource is rendered.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'credentialFactories'
op|'.'
name|'append'
op|'('
name|'BasicCredentialFactory'
op|'('
string|"'example.com'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|SlowerResource
name|'class'
name|'SlowerResource'
op|'('
name|'Resource'
op|')'
op|':'
newline|'\n'
DECL|member|render
indent|'            '
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'NOT_DONE_YET'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'avatar'
op|'.'
name|'putChild'
op|'('
name|'self'
op|'.'
name|'childName'
op|','
name|'SlowerResource'
op|'('
op|')'
op|')'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'makeRequest'
op|'('
op|'['
name|'self'
op|'.'
name|'childName'
op|']'
op|')'
newline|'\n'
name|'child'
op|'='
name|'self'
op|'.'
name|'_authorizedBasicLogin'
op|'('
name|'request'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'render'
op|'('
name|'child'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'realm'
op|'.'
name|'loggedOut'
op|','
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'realm'
op|'.'
name|'loggedOut'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_decodeRaises
dedent|''
name|'def'
name|'test_decodeRaises'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Resource traversal which enouncters an L{HTTPAuthSessionWrapper}\n        results in an L{UnauthorizedResource} when the request has a I{Basic\n        Authorization} header which cannot be decoded using base64.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'credentialFactories'
op|'.'
name|'append'
op|'('
name|'BasicCredentialFactory'
op|'('
string|"'example.com'"
op|')'
op|')'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'makeRequest'
op|'('
op|'['
name|'self'
op|'.'
name|'childName'
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'authorization'"
op|']'
op|'='
string|"'Basic decode should fail'"
newline|'\n'
name|'child'
op|'='
name|'getChildForRequest'
op|'('
name|'self'
op|'.'
name|'wrapper'
op|','
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'child'
op|','
name|'UnauthorizedResource'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_selectParseResponse
dedent|''
name|'def'
name|'test_selectParseResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{HTTPAuthSessionWrapper._selectParseHeader} returns a two-tuple giving\n        the L{ICredentialFactory} to use to parse the header and a string\n        containing the portion of the header which remains to be parsed.\n        """'
newline|'\n'
name|'basicAuthorization'
op|'='
string|"'Basic abcdef123456'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'wrapper'
op|'.'
name|'_selectParseHeader'
op|'('
name|'basicAuthorization'
op|')'
op|','
nl|'\n'
op|'('
name|'None'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'BasicCredentialFactory'
op|'('
string|"'example.com'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'credentialFactories'
op|'.'
name|'append'
op|'('
name|'factory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'wrapper'
op|'.'
name|'_selectParseHeader'
op|'('
name|'basicAuthorization'
op|')'
op|','
nl|'\n'
op|'('
name|'factory'
op|','
string|"'abcdef123456'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unexpectedDecodeError
dedent|''
name|'def'
name|'test_unexpectedDecodeError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Any unexpected exception raised by the credential factory\'s C{decode}\n        method results in a 500 response code and causes the exception to be\n        logged.\n        """'
newline|'\n'
DECL|class|UnexpectedException
name|'class'
name|'UnexpectedException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|BadFactory
dedent|''
name|'class'
name|'BadFactory'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|scheme
indent|'            '
name|'scheme'
op|'='
string|"'bad'"
newline|'\n'
nl|'\n'
DECL|member|getChallenge
name|'def'
name|'getChallenge'
op|'('
name|'self'
op|','
name|'client'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'response'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'UnexpectedException'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'credentialFactories'
op|'.'
name|'append'
op|'('
name|'BadFactory'
op|'('
op|')'
op|')'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'makeRequest'
op|'('
op|'['
name|'self'
op|'.'
name|'childName'
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'authorization'"
op|']'
op|'='
string|"'Bad abc'"
newline|'\n'
name|'child'
op|'='
name|'getChildForRequest'
op|'('
name|'self'
op|'.'
name|'wrapper'
op|','
name|'request'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'render'
op|'('
name|'child'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'responseCode'
op|','
number|'500'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'UnexpectedException'
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unexpectedLoginError
dedent|''
name|'def'
name|'test_unexpectedLoginError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Any unexpected failure from L{Portal.login} results in a 500 response\n        code and causes the failure to be logged.\n        """'
newline|'\n'
DECL|class|UnexpectedException
name|'class'
name|'UnexpectedException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|BrokenChecker
dedent|''
name|'class'
name|'BrokenChecker'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|credentialInterfaces
indent|'            '
name|'credentialInterfaces'
op|'='
op|'('
name|'IUsernamePassword'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|requestAvatarId
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'UnexpectedException'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'BrokenChecker'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'credentialFactories'
op|'.'
name|'append'
op|'('
name|'BasicCredentialFactory'
op|'('
string|"'example.com'"
op|')'
op|')'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'makeRequest'
op|'('
op|'['
name|'self'
op|'.'
name|'childName'
op|']'
op|')'
newline|'\n'
name|'child'
op|'='
name|'self'
op|'.'
name|'_authorizedBasicLogin'
op|'('
name|'request'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'render'
op|'('
name|'child'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'responseCode'
op|','
number|'500'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'UnexpectedException'
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_anonymousAccess
dedent|''
name|'def'
name|'test_anonymousAccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Anonymous requests are allowed if a L{Portal} has an anonymous checker\n        registered.\n        """'
newline|'\n'
name|'unprotectedContents'
op|'='
string|'"contents of the unprotected child resource"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'avatars'
op|'['
name|'ANONYMOUS'
op|']'
op|'='
name|'Resource'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'avatars'
op|'['
name|'ANONYMOUS'
op|']'
op|'.'
name|'putChild'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'childName'
op|','
name|'Data'
op|'('
name|'unprotectedContents'
op|','
string|"'text/plain'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'AllowAnonymousAccess'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'credentialFactories'
op|'.'
name|'append'
op|'('
name|'BasicCredentialFactory'
op|'('
string|"'example.com'"
op|')'
op|')'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'makeRequest'
op|'('
op|'['
name|'self'
op|'.'
name|'childName'
op|']'
op|')'
newline|'\n'
name|'child'
op|'='
name|'getChildForRequest'
op|'('
name|'self'
op|'.'
name|'wrapper'
op|','
name|'request'
op|')'
newline|'\n'
name|'d'
op|'='
name|'request'
op|'.'
name|'notifyFinish'
op|'('
op|')'
newline|'\n'
DECL|function|cbFinished
name|'def'
name|'cbFinished'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'request'
op|'.'
name|'written'
op|','
op|'['
name|'unprotectedContents'
op|']'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbFinished'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'render'
op|'('
name|'child'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nHTTP errors.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'error'
newline|'\n'
nl|'\n'
DECL|class|ErrorTestCase
name|'class'
name|'ErrorTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for how L{Error} attributes are initialized.\n    """'
newline|'\n'
DECL|member|test_noMessageValidStatus
name|'def'
name|'test_noMessageValidStatus'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If no C{message} argument is passed to the L{Error} constructor and the\n        C{code} argument is a valid HTTP status code, C{code} is mapped to a\n        descriptive string to which C{message} is assigned.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'Error'
op|'('
string|'"200"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'message'
op|','
string|'"OK"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noMessageInvalidStatus
dedent|''
name|'def'
name|'test_noMessageInvalidStatus'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If no C{message} argument is passed to the L{Error} constructor and\n        C{code} isn\'t a valid HTTP status code, C{message} stays C{None}.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'Error'
op|'('
string|'"InvalidCode"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'message'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_messageExists
dedent|''
name|'def'
name|'test_messageExists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a C{message} argument is passed to the L{Error} constructor, the\n        C{message} isn\'t affected by the value of C{status}.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'Error'
op|'('
string|'"200"'
op|','
string|'"My own message"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'message'
op|','
string|'"My own message"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PageRedirectTestCase
dedent|''
dedent|''
name|'class'
name|'PageRedirectTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for how L{PageRedirect} attributes are initialized.\n    """'
newline|'\n'
DECL|member|test_noMessageValidStatus
name|'def'
name|'test_noMessageValidStatus'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If no C{message} argument is passed to the L{PageRedirect} constructor\n        and the C{code} argument is a valid HTTP status code, C{code} is mapped\n        to a descriptive string to which C{message} is assigned.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'PageRedirect'
op|'('
string|'"200"'
op|','
name|'location'
op|'='
string|'"/foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'message'
op|','
string|'"OK to /foo"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noMessageValidStatusNoLocation
dedent|''
name|'def'
name|'test_noMessageValidStatusNoLocation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If no C{message} argument is passed to the L{PageRedirect} constructor\n        and C{location} is also empty and the C{code} argument is a valid HTTP\n        status code, C{code} is mapped to a descriptive string to which\n        C{message} is assigned without trying to include an empty location.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'PageRedirect'
op|'('
string|'"200"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'message'
op|','
string|'"OK"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noMessageInvalidStatusLocationExists
dedent|''
name|'def'
name|'test_noMessageInvalidStatusLocationExists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If no C{message} argument is passed to the L{PageRedirect} constructor\n        and C{code} isn\'t a valid HTTP status code, C{message} stays C{None}.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'PageRedirect'
op|'('
string|'"InvalidCode"'
op|','
name|'location'
op|'='
string|'"/foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'message'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_messageExistsLocationExists
dedent|''
name|'def'
name|'test_messageExistsLocationExists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a C{message} argument is passed to the L{PageRedirect} constructor,\n        the C{message} isn\'t affected by the value of C{status}.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'PageRedirect'
op|'('
string|'"200"'
op|','
string|'"My own message"'
op|','
name|'location'
op|'='
string|'"/foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'message'
op|','
string|'"My own message to /foo"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_messageExistsNoLocation
dedent|''
name|'def'
name|'test_messageExistsNoLocation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a C{message} argument is passed to the L{PageRedirect} constructor\n        and no location is provided, C{message} doesn\'t try to include the empty\n        location.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'PageRedirect'
op|'('
string|'"200"'
op|','
string|'"My own message"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'message'
op|','
string|'"My own message"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|InfiniteRedirectionTestCase
dedent|''
dedent|''
name|'class'
name|'InfiniteRedirectionTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for how L{InfiniteRedirection} attributes are initialized.\n    """'
newline|'\n'
DECL|member|test_noMessageValidStatus
name|'def'
name|'test_noMessageValidStatus'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If no C{message} argument is passed to the L{InfiniteRedirection}\n        constructor and the C{code} argument is a valid HTTP status code,\n        C{code} is mapped to a descriptive string to which C{message} is\n        assigned.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'InfiniteRedirection'
op|'('
string|'"200"'
op|','
name|'location'
op|'='
string|'"/foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'message'
op|','
string|'"OK to /foo"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noMessageValidStatusNoLocation
dedent|''
name|'def'
name|'test_noMessageValidStatusNoLocation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If no C{message} argument is passed to the L{InfiniteRedirection}\n        constructor and C{location} is also empty and the C{code} argument is a\n        valid HTTP status code, C{code} is mapped to a descriptive string to\n        which C{message} is assigned without trying to include an empty\n        location.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'InfiniteRedirection'
op|'('
string|'"200"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'message'
op|','
string|'"OK"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noMessageInvalidStatusLocationExists
dedent|''
name|'def'
name|'test_noMessageInvalidStatusLocationExists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If no C{message} argument is passed to the L{InfiniteRedirection}\n        constructor and C{code} isn\'t a valid HTTP status code, C{message} stays\n        C{None}.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'InfiniteRedirection'
op|'('
string|'"InvalidCode"'
op|','
name|'location'
op|'='
string|'"/foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'message'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_messageExistsLocationExists
dedent|''
name|'def'
name|'test_messageExistsLocationExists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a C{message} argument is passed to the L{InfiniteRedirection}\n        constructor, the C{message} isn\'t affected by the value of C{status}.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'InfiniteRedirection'
op|'('
string|'"200"'
op|','
string|'"My own message"'
op|','
name|'location'
op|'='
string|'"/foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'message'
op|','
string|'"My own message to /foo"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_messageExistsNoLocation
dedent|''
name|'def'
name|'test_messageExistsNoLocation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a C{message} argument is passed to the L{InfiniteRedirection}\n        constructor and no location is provided, C{message} doesn\'t try to\n        include the empty location.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'InfiniteRedirection'
op|'('
string|'"200"'
op|','
string|'"My own message"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'message'
op|','
string|'"My own message"'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

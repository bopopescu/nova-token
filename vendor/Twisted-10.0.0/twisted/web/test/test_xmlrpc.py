begin_unit
comment|'# -*- test-case-name: twisted.web.test.test_xmlrpc -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for  XML-RPC support in L{twisted.web.xmlrpc}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'xmlrpclib'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'xmlrpc'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'xmlrpc'
name|'import'
name|'XMLRPC'
op|','
name|'addIntrospection'
op|','
name|'_QueryFactory'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'server'
op|','
name|'static'
op|','
name|'client'
op|','
name|'error'
op|','
name|'http'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
op|','
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'ConnectionDone'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestRuntimeError
name|'class'
name|'TestRuntimeError'
op|'('
name|'RuntimeError'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|TestValueError
dedent|''
name|'class'
name|'TestValueError'
op|'('
name|'ValueError'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Test
dedent|''
name|'class'
name|'Test'
op|'('
name|'XMLRPC'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# If you add xmlrpc_ methods to this class, go change test_listMethods'
nl|'\n'
comment|'# below.'
nl|'\n'
nl|'\n'
DECL|variable|FAILURE
indent|'    '
name|'FAILURE'
op|'='
number|'666'
newline|'\n'
DECL|variable|NOT_FOUND
name|'NOT_FOUND'
op|'='
number|'23'
newline|'\n'
DECL|variable|SESSION_EXPIRED
name|'SESSION_EXPIRED'
op|'='
number|'42'
newline|'\n'
nl|'\n'
DECL|member|xmlrpc_echo
name|'def'
name|'xmlrpc_echo'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'arg'
newline|'\n'
nl|'\n'
comment|'# the doc string is part of the test'
nl|'\n'
DECL|member|xmlrpc_add
dedent|''
name|'def'
name|'xmlrpc_add'
op|'('
name|'self'
op|','
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This function add two numbers.\n        """'
newline|'\n'
name|'return'
name|'a'
op|'+'
name|'b'
newline|'\n'
nl|'\n'
dedent|''
name|'xmlrpc_add'
op|'.'
name|'signature'
op|'='
op|'['
op|'['
string|"'int'"
op|','
string|"'int'"
op|','
string|"'int'"
op|']'
op|','
nl|'\n'
op|'['
string|"'double'"
op|','
string|"'double'"
op|','
string|"'double'"
op|']'
op|']'
newline|'\n'
nl|'\n'
comment|'# the doc string is part of the test'
nl|'\n'
DECL|member|xmlrpc_pair
name|'def'
name|'xmlrpc_pair'
op|'('
name|'self'
op|','
name|'string'
op|','
name|'num'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This function puts the two arguments in an array.\n        """'
newline|'\n'
name|'return'
op|'['
name|'string'
op|','
name|'num'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'xmlrpc_pair'
op|'.'
name|'signature'
op|'='
op|'['
op|'['
string|"'array'"
op|','
string|"'string'"
op|','
string|"'int'"
op|']'
op|']'
newline|'\n'
nl|'\n'
comment|'# the doc string is part of the test'
nl|'\n'
DECL|member|xmlrpc_defer
name|'def'
name|'xmlrpc_defer'
op|'('
name|'self'
op|','
name|'x'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Help for defer."""'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'x'
op|')'
newline|'\n'
nl|'\n'
DECL|member|xmlrpc_deferFail
dedent|''
name|'def'
name|'xmlrpc_deferFail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'TestValueError'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# don't add a doc string, it's part of the test"
nl|'\n'
DECL|member|xmlrpc_fail
dedent|''
name|'def'
name|'xmlrpc_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'TestRuntimeError'
newline|'\n'
nl|'\n'
DECL|member|xmlrpc_fault
dedent|''
name|'def'
name|'xmlrpc_fault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'xmlrpc'
op|'.'
name|'Fault'
op|'('
number|'12'
op|','
string|'"hello"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|xmlrpc_deferFault
dedent|''
name|'def'
name|'xmlrpc_deferFault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'xmlrpc'
op|'.'
name|'Fault'
op|'('
number|'17'
op|','
string|'"hi"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|xmlrpc_complex
dedent|''
name|'def'
name|'xmlrpc_complex'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|'"a"'
op|':'
op|'['
string|'"b"'
op|','
string|'"c"'
op|','
number|'12'
op|','
op|'['
op|']'
op|']'
op|','
string|'"D"'
op|':'
string|'"foo"'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|xmlrpc_dict
dedent|''
name|'def'
name|'xmlrpc_dict'
op|'('
name|'self'
op|','
name|'map'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'map'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'xmlrpc_dict'
op|'.'
name|'help'
op|'='
string|"'Help for dict.'"
newline|'\n'
nl|'\n'
DECL|member|_getFunction
name|'def'
name|'_getFunction'
op|'('
name|'self'
op|','
name|'functionPath'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'XMLRPC'
op|'.'
name|'_getFunction'
op|'('
name|'self'
op|','
name|'functionPath'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'xmlrpc'
op|'.'
name|'NoSuchFunction'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'functionPath'
op|'.'
name|'startswith'
op|'('
string|'"SESSION"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'xmlrpc'
op|'.'
name|'Fault'
op|'('
name|'self'
op|'.'
name|'SESSION_EXPIRED'
op|','
nl|'\n'
string|'"Session non-existant/expired."'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestAuthHeader
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestAuthHeader'
op|'('
name|'Test'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This is used to get the header info so that we can test\n    authentication.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Test'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'request'
op|'='
name|'request'
newline|'\n'
name|'return'
name|'Test'
op|'.'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
DECL|member|xmlrpc_authinfo
dedent|''
name|'def'
name|'xmlrpc_authinfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'request'
op|'.'
name|'getUser'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'request'
op|'.'
name|'getPassword'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestQueryProtocol
dedent|''
dedent|''
name|'class'
name|'TestQueryProtocol'
op|'('
name|'xmlrpc'
op|'.'
name|'QueryProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    QueryProtocol for tests that saves headers received inside the factory.\n    """'
newline|'\n'
DECL|member|handleHeader
name|'def'
name|'handleHeader'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'headers'
op|'['
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
op|']'
op|'='
name|'val'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestQueryFactory
dedent|''
dedent|''
name|'class'
name|'TestQueryFactory'
op|'('
name|'xmlrpc'
op|'.'
name|'_QueryFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    QueryFactory using L{TestQueryProtocol} for saving headers.\n    """'
newline|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'TestQueryProtocol'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'headers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'xmlrpc'
op|'.'
name|'_QueryFactory'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMLRPCTestCase
dedent|''
dedent|''
name|'class'
name|'XMLRPCTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'server'
op|'.'
name|'Site'
op|'('
name|'Test'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'factories'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factories'
op|'='
op|'['
op|']'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'p'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|queryFactory
dedent|''
name|'def'
name|'queryFactory'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Specific queryFactory for proxy that uses our custom\n        L{TestQueryFactory}, and save factories.\n        """'
newline|'\n'
name|'factory'
op|'='
name|'TestQueryFactory'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factories'
op|'.'
name|'append'
op|'('
name|'factory'
op|')'
newline|'\n'
name|'return'
name|'factory'
newline|'\n'
nl|'\n'
DECL|member|proxy
dedent|''
name|'def'
name|'proxy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'xmlrpc'
op|'.'
name|'Proxy'
op|'('
string|'"http://127.0.0.1:%d/"'
op|'%'
name|'self'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'queryFactory'
op|'='
name|'self'
op|'.'
name|'queryFactory'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
DECL|member|test_results
dedent|''
name|'def'
name|'test_results'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inputOutput'
op|'='
op|'['
nl|'\n'
op|'('
string|'"add"'
op|','
op|'('
number|'2'
op|','
number|'3'
op|')'
op|','
number|'5'
op|')'
op|','
nl|'\n'
op|'('
string|'"defer"'
op|','
op|'('
string|'"a"'
op|','
op|')'
op|','
string|'"a"'
op|')'
op|','
nl|'\n'
op|'('
string|'"dict"'
op|','
op|'('
op|'{'
string|'"a"'
op|':'
number|'1'
op|'}'
op|','
string|'"a"'
op|')'
op|','
number|'1'
op|')'
op|','
nl|'\n'
op|'('
string|'"pair"'
op|','
op|'('
string|'"a"'
op|','
number|'1'
op|')'
op|','
op|'['
string|'"a"'
op|','
number|'1'
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|'"complex"'
op|','
op|'('
op|')'
op|','
op|'{'
string|'"a"'
op|':'
op|'['
string|'"b"'
op|','
string|'"c"'
op|','
number|'12'
op|','
op|'['
op|']'
op|']'
op|','
string|'"D"'
op|':'
string|'"foo"'
op|'}'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'dl'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'meth'
op|','
name|'args'
op|','
name|'outp'
name|'in'
name|'inputOutput'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'proxy'
op|'('
op|')'
op|'.'
name|'callRemote'
op|'('
name|'meth'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'outp'
op|')'
newline|'\n'
name|'dl'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'dl'
op|','
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_errors
dedent|''
name|'def'
name|'test_errors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that for each way a method exposed via XML-RPC can fail, the\n        correct \'Content-type\' header is set in the response and that the\n        client-side Deferred is errbacked with an appropriate C{Fault}\n        instance.\n        """'
newline|'\n'
name|'dl'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'code'
op|','
name|'methodName'
name|'in'
op|'['
op|'('
number|'666'
op|','
string|'"fail"'
op|')'
op|','
op|'('
number|'666'
op|','
string|'"deferFail"'
op|')'
op|','
nl|'\n'
op|'('
number|'12'
op|','
string|'"fault"'
op|')'
op|','
op|'('
number|'23'
op|','
string|'"noSuchMethod"'
op|')'
op|','
nl|'\n'
op|'('
number|'17'
op|','
string|'"deferFault"'
op|')'
op|','
op|'('
number|'42'
op|','
string|'"SESSION_TEST"'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'proxy'
op|'('
op|')'
op|'.'
name|'callRemote'
op|'('
name|'methodName'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'xmlrpc'
op|'.'
name|'Fault'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'exc'
op|','
name|'code'
op|'='
name|'code'
op|':'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'exc'
op|'.'
name|'faultCode'
op|','
name|'code'
op|')'
op|')'
newline|'\n'
name|'dl'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'dl'
op|','
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'factory'
name|'in'
name|'self'
op|'.'
name|'factories'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'headers'
op|'['
string|"'content-type'"
op|']'
op|','
nl|'\n'
string|"'text/xml'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'TestRuntimeError'
op|','
name|'TestValueError'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_errorGet
dedent|''
name|'def'
name|'test_errorGet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A classic GET on the xml server should return a NOT_ALLOWED.\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'getPage'
op|'('
string|'"http://127.0.0.1:%d/"'
op|'%'
op|'('
name|'self'
op|'.'
name|'port'
op|','
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'error'
op|'.'
name|'Error'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'lambda'
name|'exc'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'int'
op|'('
name|'exc'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
op|','
name|'http'
op|'.'
name|'NOT_ALLOWED'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_errorXMLContent
dedent|''
name|'def'
name|'test_errorXMLContent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that an invalid XML input returns an L{xmlrpc.Fault}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'getPage'
op|'('
string|'"http://127.0.0.1:%d/"'
op|'%'
op|'('
name|'self'
op|'.'
name|'port'
op|','
op|')'
op|','
nl|'\n'
name|'method'
op|'='
string|'"POST"'
op|','
name|'postdata'
op|'='
string|'"foo"'
op|')'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'xmlrpc'
op|'.'
name|'Fault'
op|','
name|'xmlrpclib'
op|'.'
name|'loads'
op|','
name|'result'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_datetimeRoundtrip
dedent|''
name|'def'
name|'test_datetimeRoundtrip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an L{xmlrpclib.DateTime} is passed as an argument to an XML-RPC\n        call and then returned by the server unmodified, the result should\n        be equal to the original object.\n        """'
newline|'\n'
name|'when'
op|'='
name|'xmlrpclib'
op|'.'
name|'DateTime'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'proxy'
op|'('
op|')'
op|'.'
name|'callRemote'
op|'('
string|'"echo"'
op|','
name|'when'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
name|'when'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_doubleEncodingError
dedent|''
name|'def'
name|'test_doubleEncodingError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If it is not possible to encode a response to the request (for example,\n        because L{xmlrpclib.dumps} raises an exception when encoding a\n        L{Fault}) the exception which prevents the response from being\n        generated is logged and the request object is finished anyway.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'proxy'
op|'('
op|')'
op|'.'
name|'callRemote'
op|'('
string|'"echo"'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
comment|'# *Now* break xmlrpclib.dumps.  Hopefully the client already used it.'
nl|'\n'
DECL|function|fakeDumps
name|'def'
name|'fakeDumps'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Cannot encode anything at all!"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'xmlrpclib'
op|','
string|"'dumps'"
op|','
name|'fakeDumps'
op|')'
newline|'\n'
nl|'\n'
comment|"# It doesn't matter how it fails, so long as it does.  Also, it happens"
nl|'\n'
comment|'# to fail with an implementation detail exception right now, not'
nl|'\n'
comment|'# something suitable as part of a public interface.'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'Exception'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbFailed
name|'def'
name|'cbFailed'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
comment|'# The fakeDumps exception should have been logged.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'RuntimeError'
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbFailed'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMLRPCTestCase2
dedent|''
dedent|''
name|'class'
name|'XMLRPCTestCase2'
op|'('
name|'XMLRPCTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test with proxy that doesn\'t add a slash.\n    """'
newline|'\n'
nl|'\n'
DECL|member|proxy
name|'def'
name|'proxy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'xmlrpc'
op|'.'
name|'Proxy'
op|'('
string|'"http://127.0.0.1:%d"'
op|'%'
name|'self'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'queryFactory'
op|'='
name|'self'
op|'.'
name|'queryFactory'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMLRPCAllowNoneTestCase
dedent|''
dedent|''
name|'class'
name|'XMLRPCAllowNoneTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test with allowNone set to True.\n\n    These are not meant to be exhaustive serialization tests, since\n    L{xmlrpclib} does all of the actual serialization work.  They are just\n    meant to exercise a few codepaths to make sure we are calling into\n    xmlrpclib correctly.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
nl|'\n'
number|'0'
op|','
name|'server'
op|'.'
name|'Site'
op|'('
name|'Test'
op|'('
name|'allowNone'
op|'='
name|'True'
op|')'
op|')'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'p'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|proxy
dedent|''
name|'def'
name|'proxy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'xmlrpc'
op|'.'
name|'Proxy'
op|'('
string|'"http://127.0.0.1:%d"'
op|'%'
op|'('
name|'self'
op|'.'
name|'port'
op|','
op|')'
op|','
nl|'\n'
name|'allowNone'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_deferredNone
dedent|''
name|'def'
name|'test_deferredNone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that passing a C{None} as an argument to a remote method and\n        returning a L{Deferred} which fires with C{None} properly passes\n        </nil> over the network if allowNone is set to True.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'proxy'
op|'('
op|')'
op|'.'
name|'callRemote'
op|'('
string|"'defer'"
op|','
name|'None'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_dictWithNoneValue
dedent|''
name|'def'
name|'test_dictWithNoneValue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that return a C{dict} with C{None} as a value works properly.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'proxy'
op|'('
op|')'
op|'.'
name|'callRemote'
op|'('
string|"'defer'"
op|','
op|'{'
string|"'a'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
op|'{'
string|"'a'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMLRPCTestAuthenticated
dedent|''
dedent|''
name|'class'
name|'XMLRPCTestAuthenticated'
op|'('
name|'XMLRPCTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test with authenticated proxy. We run this with the same inout/ouput as\n    above.\n    """'
newline|'\n'
DECL|variable|user
name|'user'
op|'='
string|'"username"'
newline|'\n'
DECL|variable|password
name|'password'
op|'='
string|'"asecret"'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'server'
op|'.'
name|'Site'
op|'('
name|'TestAuthHeader'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'factories'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_authInfoInURL
dedent|''
name|'def'
name|'test_authInfoInURL'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'xmlrpc'
op|'.'
name|'Proxy'
op|'('
string|'"http://%s:%s@127.0.0.1:%d/"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'password'
op|','
name|'self'
op|'.'
name|'port'
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'callRemote'
op|'('
string|'"authinfo"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
op|'['
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'password'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_explicitAuthInfo
dedent|''
name|'def'
name|'test_explicitAuthInfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'xmlrpc'
op|'.'
name|'Proxy'
op|'('
string|'"http://127.0.0.1:%d/"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'port'
op|','
op|')'
op|','
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'password'
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'callRemote'
op|'('
string|'"authinfo"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
op|'['
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'password'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_explicitAuthInfoOverride
dedent|''
name|'def'
name|'test_explicitAuthInfoOverride'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'xmlrpc'
op|'.'
name|'Proxy'
op|'('
string|'"http://wrong:info@127.0.0.1:%d/"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'port'
op|','
op|')'
op|','
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'password'
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'callRemote'
op|'('
string|'"authinfo"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
op|'['
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'password'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMLRPCTestIntrospection
dedent|''
dedent|''
name|'class'
name|'XMLRPCTestIntrospection'
op|'('
name|'XMLRPCTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xmlrpc'
op|'='
name|'Test'
op|'('
op|')'
newline|'\n'
name|'addIntrospection'
op|'('
name|'xmlrpc'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'server'
op|'.'
name|'Site'
op|'('
name|'xmlrpc'
op|')'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'factories'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_listMethods
dedent|''
name|'def'
name|'test_listMethods'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|cbMethods
indent|'        '
name|'def'
name|'cbMethods'
op|'('
name|'meths'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'meths'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'meths'
op|','
nl|'\n'
op|'['
string|"'add'"
op|','
string|"'complex'"
op|','
string|"'defer'"
op|','
string|"'deferFail'"
op|','
nl|'\n'
string|"'deferFault'"
op|','
string|"'dict'"
op|','
string|"'echo'"
op|','
string|"'fail'"
op|','
string|"'fault'"
op|','
nl|'\n'
string|"'pair'"
op|','
string|"'system.listMethods'"
op|','
nl|'\n'
string|"'system.methodHelp'"
op|','
nl|'\n'
string|"'system.methodSignature'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'proxy'
op|'('
op|')'
op|'.'
name|'callRemote'
op|'('
string|'"system.listMethods"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbMethods'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_methodHelp
dedent|''
name|'def'
name|'test_methodHelp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inputOutputs'
op|'='
op|'['
nl|'\n'
op|'('
string|'"defer"'
op|','
string|'"Help for defer."'
op|')'
op|','
nl|'\n'
op|'('
string|'"fail"'
op|','
string|'""'
op|')'
op|','
nl|'\n'
op|'('
string|'"dict"'
op|','
string|'"Help for dict."'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'dl'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'meth'
op|','
name|'expected'
name|'in'
name|'inputOutputs'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'proxy'
op|'('
op|')'
op|'.'
name|'callRemote'
op|'('
string|'"system.methodHelp"'
op|','
name|'meth'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'expected'
op|')'
newline|'\n'
name|'dl'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'dl'
op|','
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_methodSignature
dedent|''
name|'def'
name|'test_methodSignature'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inputOutputs'
op|'='
op|'['
nl|'\n'
op|'('
string|'"defer"'
op|','
string|'""'
op|')'
op|','
nl|'\n'
op|'('
string|'"add"'
op|','
op|'['
op|'['
string|"'int'"
op|','
string|"'int'"
op|','
string|"'int'"
op|']'
op|','
nl|'\n'
op|'['
string|"'double'"
op|','
string|"'double'"
op|','
string|"'double'"
op|']'
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|'"pair"'
op|','
op|'['
op|'['
string|"'array'"
op|','
string|"'string'"
op|','
string|"'int'"
op|']'
op|']'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'dl'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'meth'
op|','
name|'expected'
name|'in'
name|'inputOutputs'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'proxy'
op|'('
op|')'
op|'.'
name|'callRemote'
op|'('
string|'"system.methodSignature"'
op|','
name|'meth'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'expected'
op|')'
newline|'\n'
name|'dl'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'dl'
op|','
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMLRPCClientErrorHandling
dedent|''
dedent|''
name|'class'
name|'XMLRPCClientErrorHandling'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test error handling on the xmlrpc client.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resource'
op|'='
name|'static'
op|'.'
name|'Data'
op|'('
nl|'\n'
string|'"This text is not a valid XML-RPC response."'
op|','
nl|'\n'
string|'"text/plain"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'isLeaf'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'server'
op|'.'
name|'Site'
op|'('
name|'self'
op|'.'
name|'resource'
op|')'
op|','
nl|'\n'
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'port'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_erroneousResponse
dedent|''
name|'def'
name|'test_erroneousResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that calling the xmlrpc client on a static http server raises\n        an exception.\n        """'
newline|'\n'
name|'proxy'
op|'='
name|'xmlrpc'
op|'.'
name|'Proxy'
op|'('
string|'"http://127.0.0.1:%d/"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'proxy'
op|'.'
name|'callRemote'
op|'('
string|'"someMethod"'
op|')'
op|','
name|'Exception'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestQueryFactoryParseResponse
dedent|''
dedent|''
name|'class'
name|'TestQueryFactoryParseResponse'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test the behaviour of L{_QueryFactory.parseResponse}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# The _QueryFactory that we are testing. We don't care about any"
nl|'\n'
comment|'# of the constructor parameters.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'queryFactory'
op|'='
name|'_QueryFactory'
op|'('
nl|'\n'
name|'path'
op|'='
name|'None'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'method'
op|'='
string|"'POST'"
op|','
name|'user'
op|'='
name|'None'
op|','
name|'password'
op|'='
name|'None'
op|','
nl|'\n'
name|'allowNone'
op|'='
name|'False'
op|','
name|'args'
op|'='
op|'('
op|')'
op|')'
newline|'\n'
comment|'# An XML-RPC response that will parse without raising an error.'
nl|'\n'
name|'self'
op|'.'
name|'goodContents'
op|'='
name|'xmlrpclib'
op|'.'
name|'dumps'
op|'('
op|'('
string|"''"
op|','
op|')'
op|')'
newline|'\n'
comment|"# An 'XML-RPC response' that will raise a parsing error."
nl|'\n'
name|'self'
op|'.'
name|'badContents'
op|'='
string|"'invalid xml'"
newline|'\n'
comment|"# A dummy 'reason' to pass to clientConnectionLost. We don't care"
nl|'\n'
comment|'# what it is.'
nl|'\n'
name|'self'
op|'.'
name|'reason'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'ConnectionDone'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_parseResponseCallbackSafety
dedent|''
name|'def'
name|'test_parseResponseCallbackSafety'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        We can safely call L{_QueryFactory.clientConnectionLost} as a callback\n        of L{_QueryFactory.parseResponse}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'queryFactory'
op|'.'
name|'deferred'
newline|'\n'
comment|'# The failure mode is that this callback raises an AlreadyCalled'
nl|'\n'
comment|'# error. We have to add it now so that it gets called synchronously'
nl|'\n'
comment|'# and triggers the race condition.'
nl|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'queryFactory'
op|'.'
name|'clientConnectionLost'
op|','
name|'self'
op|'.'
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queryFactory'
op|'.'
name|'parseResponse'
op|'('
name|'self'
op|'.'
name|'goodContents'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_parseResponseErrbackSafety
dedent|''
name|'def'
name|'test_parseResponseErrbackSafety'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        We can safely call L{_QueryFactory.clientConnectionLost} as an errback\n        of L{_QueryFactory.parseResponse}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'queryFactory'
op|'.'
name|'deferred'
newline|'\n'
comment|'# The failure mode is that this callback raises an AlreadyCalled'
nl|'\n'
comment|'# error. We have to add it now so that it gets called synchronously'
nl|'\n'
comment|'# and triggers the race condition.'
nl|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'queryFactory'
op|'.'
name|'clientConnectionLost'
op|','
name|'self'
op|'.'
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queryFactory'
op|'.'
name|'parseResponse'
op|'('
name|'self'
op|'.'
name|'badContents'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_badStatusErrbackSafety
dedent|''
name|'def'
name|'test_badStatusErrbackSafety'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        We can safely call L{_QueryFactory.clientConnectionLost} as an errback\n        of L{_QueryFactory.badStatus}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'queryFactory'
op|'.'
name|'deferred'
newline|'\n'
comment|'# The failure mode is that this callback raises an AlreadyCalled'
nl|'\n'
comment|'# error. We have to add it now so that it gets called synchronously'
nl|'\n'
comment|'# and triggers the race condition.'
nl|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'queryFactory'
op|'.'
name|'clientConnectionLost'
op|','
name|'self'
op|'.'
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queryFactory'
op|'.'
name|'badStatus'
op|'('
string|"'status'"
op|','
string|"'message'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_parseResponseWithoutData
dedent|''
name|'def'
name|'test_parseResponseWithoutData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Some server can send a response without any data:\n        L{_QueryFactory.parseResponse} should catch the error and call the\n        result errback.\n        """'
newline|'\n'
name|'content'
op|'='
string|'"""\n<methodResponse>\n <params>\n  <param>\n  </param>\n </params>\n</methodResponse>"""'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'queryFactory'
op|'.'
name|'deferred'
newline|'\n'
name|'self'
op|'.'
name|'queryFactory'
op|'.'
name|'parseResponse'
op|'('
name|'content'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'IndexError'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

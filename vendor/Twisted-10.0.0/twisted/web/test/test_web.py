begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for various parts of L{twisted.web}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
op|'.'
name|'verify'
name|'import'
name|'verifyObject'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'address'
name|'import'
name|'IPv4Address'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'server'
op|','
name|'resource'
op|','
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'interfaces'
op|','
name|'task'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'iweb'
op|','
name|'http'
op|','
name|'http_headers'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyRequest
name|'class'
name|'DummyRequest'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Represents a dummy or fake request.\n\n    @ivar _finishedDeferreds: C{None} or a C{list} of L{Deferreds} which will\n        be called back with C{None} when C{finish} is called or which will be\n        errbacked if C{processingFailed} is called.\n\n    @type headers: C{dict}\n    @ivar headers: A mapping of header name to header value for all request\n        headers.\n\n    @type outgoingHeaders: C{dict}\n    @ivar outgoingHeaders: A mapping of header name to header value for all\n        response headers.\n\n    @type responseCode: C{int}\n    @ivar responseCode: The response code which was passed to\n        C{setResponseCode}.\n\n    @type written: C{list} of C{str}\n    @ivar written: The bytes which have been written to the request.\n    """'
newline|'\n'
DECL|variable|uri
name|'uri'
op|'='
string|"'http://dummy/'"
newline|'\n'
DECL|variable|method
name|'method'
op|'='
string|"'GET'"
newline|'\n'
DECL|variable|client
name|'client'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|registerProducer
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'prod'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'go'
op|'='
number|'1'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'go'
op|':'
newline|'\n'
indent|'            '
name|'prod'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'go'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'postpath'
op|','
name|'session'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sitepath'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'written'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'finished'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'postpath'
op|'='
name|'postpath'
newline|'\n'
name|'self'
op|'.'
name|'prepath'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'session'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'protoSession'
op|'='
name|'session'
name|'or'
name|'server'
op|'.'
name|'Session'
op|'('
number|'0'
op|','
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'outgoingHeaders'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'responseHeaders'
op|'='
name|'http_headers'
op|'.'
name|'Headers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'responseCode'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'headers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_finishedDeferreds'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHeader
dedent|''
name|'def'
name|'getHeader'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve the value of a request header.\n\n        @type name: C{str}\n        @param name: The name of the request header for which to retrieve the\n            value.  Header names are compared case-insensitively.\n\n        @rtype: C{str} or L{NoneType}\n        @return: The value of the specified request header.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setHeader
dedent|''
name|'def'
name|'setHeader'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""TODO: make this assert on write() if the header is content-length\n        """'
newline|'\n'
name|'self'
op|'.'
name|'outgoingHeaders'
op|'['
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|getSession
dedent|''
name|'def'
name|'getSession'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'session'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'session'
newline|'\n'
dedent|''
name|'assert'
name|'not'
name|'self'
op|'.'
name|'written'
op|','
string|'"Session cannot be requested after data has been written."'
newline|'\n'
name|'self'
op|'.'
name|'session'
op|'='
name|'self'
op|'.'
name|'protoSession'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'session'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'resource'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Render the given resource as a response to this request.\n\n        This implementation only handles a few of the most common behaviors of\n        resources.  It can handle a render method that returns a string or\n        C{NOT_DONE_YET}.  It doesn\'t know anything about the semantics of\n        request methods (eg HEAD) nor how to set any particular headers.\n        Basically, it\'s largely broken, but sufficient for some tests at least.\n        It should B{not} be expanded to do all the same stuff L{Request} does.\n        Instead, L{DummyRequest} should be phased out and L{Request} (or some\n        other real code factored in a different way) used.\n        """'
newline|'\n'
name|'result'
op|'='
name|'resource'
op|'.'
name|'render'
op|'('
name|'self'
op|')'
newline|'\n'
name|'if'
name|'result'
name|'is'
name|'server'
op|'.'
name|'NOT_DONE_YET'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'write'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'written'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|notifyFinish
dedent|''
name|'def'
name|'notifyFinish'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a L{Deferred} which is called back with C{None} when the request\n        is finished.  This will probably only work if you haven\'t called\n        C{finish} yet.\n        """'
newline|'\n'
name|'finished'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_finishedDeferreds'
op|'.'
name|'append'
op|'('
name|'finished'
op|')'
newline|'\n'
name|'return'
name|'finished'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|finish
dedent|''
name|'def'
name|'finish'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record that the request is finished and callback and L{Deferred}s\n        waiting for notification of this.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'finished'
op|'='
name|'self'
op|'.'
name|'finished'
op|'+'
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_finishedDeferreds'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'observers'
op|'='
name|'self'
op|'.'
name|'_finishedDeferreds'
newline|'\n'
name|'self'
op|'.'
name|'_finishedDeferreds'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'obs'
name|'in'
name|'observers'
op|':'
newline|'\n'
indent|'                '
name|'obs'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|processingFailed
dedent|''
dedent|''
dedent|''
name|'def'
name|'processingFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Errback and L{Deferreds} waiting for finish notification.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_finishedDeferreds'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'observers'
op|'='
name|'self'
op|'.'
name|'_finishedDeferreds'
newline|'\n'
name|'self'
op|'.'
name|'_finishedDeferreds'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'obs'
name|'in'
name|'observers'
op|':'
newline|'\n'
indent|'                '
name|'obs'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addArg
dedent|''
dedent|''
dedent|''
name|'def'
name|'addArg'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'args'
op|'['
name|'name'
op|']'
op|'='
op|'['
name|'value'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setResponseCode
dedent|''
name|'def'
name|'setResponseCode'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'message'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the HTTP status response code, but takes care that this is called\n        before any data is written.\n        """'
newline|'\n'
name|'assert'
name|'not'
name|'self'
op|'.'
name|'written'
op|','
string|'"Response code cannot be set after data has been written: %s."'
op|'%'
string|'"@@@@"'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'written'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'responseCode'
op|'='
name|'code'
newline|'\n'
name|'self'
op|'.'
name|'responseMessage'
op|'='
name|'message'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setLastModified
dedent|''
name|'def'
name|'setLastModified'
op|'('
name|'self'
op|','
name|'when'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'not'
name|'self'
op|'.'
name|'written'
op|','
string|'"Last-Modified cannot be set after data has been written: %s."'
op|'%'
string|'"@@@@"'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'written'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setETag
dedent|''
name|'def'
name|'setETag'
op|'('
name|'self'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'not'
name|'self'
op|'.'
name|'written'
op|','
string|'"ETag cannot be set after data has been written: %s."'
op|'%'
string|'"@@@@"'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'written'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getClientIP
dedent|''
name|'def'
name|'getClientIP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the IPv4 address of the client which made this request, if there\n        is one, otherwise C{None}.\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'client'
op|','
name|'IPv4Address'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'host'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResourceTestCase
dedent|''
dedent|''
name|'class'
name|'ResourceTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testListEntities
indent|'    '
name|'def'
name|'testListEntities'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'r'
op|'='
name|'resource'
op|'.'
name|'Resource'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'['
op|']'
op|','
name|'r'
op|'.'
name|'listEntities'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleResource
dedent|''
dedent|''
name|'class'
name|'SimpleResource'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
DECL|member|render
indent|'    '
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'http'
op|'.'
name|'CACHED'
name|'in'
op|'('
name|'request'
op|'.'
name|'setLastModified'
op|'('
number|'10'
op|')'
op|','
nl|'\n'
name|'request'
op|'.'
name|'setETag'
op|'('
string|"'MatchingTag'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"correct"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyChannel
dedent|''
dedent|''
dedent|''
name|'class'
name|'DummyChannel'
op|':'
newline|'\n'
DECL|class|TCP
indent|'    '
name|'class'
name|'TCP'
op|':'
newline|'\n'
DECL|variable|port
indent|'        '
name|'port'
op|'='
number|'80'
newline|'\n'
DECL|variable|disconnected
name|'disconnected'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'written'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'producers'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|getPeer
dedent|''
name|'def'
name|'getPeer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'IPv4Address'
op|'('
string|'"TCP"'
op|','
string|"'192.168.1.1'"
op|','
number|'12344'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'assert'
name|'isinstance'
op|'('
name|'bytes'
op|','
name|'str'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'written'
op|'.'
name|'write'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'iovec'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'map'
op|'('
name|'self'
op|'.'
name|'write'
op|','
name|'iovec'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'IPv4Address'
op|'('
string|'"TCP"'
op|','
string|"'10.0.0.1'"
op|','
name|'self'
op|'.'
name|'port'
op|')'
newline|'\n'
nl|'\n'
DECL|member|registerProducer
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'producers'
op|'.'
name|'append'
op|'('
op|'('
name|'producer'
op|','
name|'streaming'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'disconnected'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SSL
dedent|''
dedent|''
name|'class'
name|'SSL'
op|'('
name|'TCP'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'ISSLTransport'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|site
dedent|''
name|'site'
op|'='
name|'server'
op|'.'
name|'Site'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'='
name|'self'
op|'.'
name|'TCP'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|requestDone
dedent|''
name|'def'
name|'requestDone'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SiteTest
dedent|''
dedent|''
name|'class'
name|'SiteTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_simplestSite
indent|'    '
name|'def'
name|'test_simplestSite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Site.getResourceFor} returns the C{""} child of the root resource it\n        is constructed with when processing a request for I{/}.\n        """'
newline|'\n'
name|'sres1'
op|'='
name|'SimpleResource'
op|'('
op|')'
newline|'\n'
name|'sres2'
op|'='
name|'SimpleResource'
op|'('
op|')'
newline|'\n'
name|'sres1'
op|'.'
name|'putChild'
op|'('
string|'""'
op|','
name|'sres2'
op|')'
newline|'\n'
name|'site'
op|'='
name|'server'
op|'.'
name|'Site'
op|'('
name|'sres1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'site'
op|'.'
name|'getResourceFor'
op|'('
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
op|')'
op|','
nl|'\n'
name|'sres2'
op|','
string|'"Got the wrong resource."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SessionTest
dedent|''
dedent|''
name|'class'
name|'SessionTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{server.Session}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a site with one active session using a deterministic, easily\n        controlled clock.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'uid'
op|'='
string|"'unique'"
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'='
name|'server'
op|'.'
name|'Site'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'session'
op|'='
name|'server'
op|'.'
name|'Session'
op|'('
name|'self'
op|'.'
name|'site'
op|','
name|'self'
op|'.'
name|'uid'
op|','
name|'self'
op|'.'
name|'clock'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'sessions'
op|'['
name|'self'
op|'.'
name|'uid'
op|']'
op|'='
name|'self'
op|'.'
name|'session'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_defaultReactor
dedent|''
name|'def'
name|'test_defaultReactor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If not value is passed to L{server.Session.__init__}, the global\n        reactor is used.\n        """'
newline|'\n'
name|'session'
op|'='
name|'server'
op|'.'
name|'Session'
op|'('
name|'server'
op|'.'
name|'Site'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|'('
op|')'
op|')'
op|','
string|"'123'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'session'
op|'.'
name|'_reactor'
op|','
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_startCheckingExpiration
dedent|''
name|'def'
name|'test_startCheckingExpiration'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{server.Session.startCheckingExpiration} causes the session to expire\n        after L{server.Session.sessionTimeout} seconds without activity.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'session'
op|'.'
name|'startCheckingExpiration'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Advance to almost the timeout - nothing should happen.'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
name|'self'
op|'.'
name|'session'
op|'.'
name|'sessionTimeout'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'self'
op|'.'
name|'uid'
op|','
name|'self'
op|'.'
name|'site'
op|'.'
name|'sessions'
op|')'
newline|'\n'
nl|'\n'
comment|'# Advance to the timeout, the session should expire.'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'self'
op|'.'
name|'uid'
op|','
name|'self'
op|'.'
name|'site'
op|'.'
name|'sessions'
op|')'
newline|'\n'
nl|'\n'
comment|'# There should be no calls left over, either.'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'clock'
op|'.'
name|'calls'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_expire
dedent|''
name|'def'
name|'test_expire'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{server.Session.expire} expires the session.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'session'
op|'.'
name|'expire'
op|'('
op|')'
newline|'\n'
comment|'# It should be gone from the session dictionary.'
nl|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'self'
op|'.'
name|'uid'
op|','
name|'self'
op|'.'
name|'site'
op|'.'
name|'sessions'
op|')'
newline|'\n'
comment|'# And there should be no pending delayed calls.'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'clock'
op|'.'
name|'calls'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_expireWhileChecking
dedent|''
name|'def'
name|'test_expireWhileChecking'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{server.Session.expire} expires the session even if the timeout call\n        isn\'t due yet.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'session'
op|'.'
name|'startCheckingExpiration'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_expire'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_notifyOnExpire
dedent|''
name|'def'
name|'test_notifyOnExpire'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A function registered with L{server.Session.notifyOnExpire} is called\n        when the session expires.\n        """'
newline|'\n'
name|'callbackRan'
op|'='
op|'['
name|'False'
op|']'
newline|'\n'
DECL|function|expired
name|'def'
name|'expired'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'callbackRan'
op|'['
number|'0'
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'session'
op|'.'
name|'notifyOnExpire'
op|'('
name|'expired'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'session'
op|'.'
name|'expire'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'callbackRan'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_touch
dedent|''
name|'def'
name|'test_touch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{server.Session.touch} updates L{server.Session.lastModified} and\n        delays session timeout.\n        """'
newline|'\n'
comment|'# Make sure it works before startCheckingExpiration'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'session'
op|'.'
name|'touch'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'session'
op|'.'
name|'lastModified'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
comment|'# And after startCheckingExpiration'
nl|'\n'
name|'self'
op|'.'
name|'session'
op|'.'
name|'startCheckingExpiration'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
name|'self'
op|'.'
name|'session'
op|'.'
name|'sessionTimeout'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'session'
op|'.'
name|'touch'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
name|'self'
op|'.'
name|'session'
op|'.'
name|'sessionTimeout'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'self'
op|'.'
name|'uid'
op|','
name|'self'
op|'.'
name|'site'
op|'.'
name|'sessions'
op|')'
newline|'\n'
nl|'\n'
comment|'# It should have advanced it by just sessionTimeout, no more.'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'self'
op|'.'
name|'uid'
op|','
name|'self'
op|'.'
name|'site'
op|'.'
name|'sessions'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_startCheckingExpirationParameterDeprecated
dedent|''
name|'def'
name|'test_startCheckingExpirationParameterDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{server.Session.startCheckingExpiration} emits a deprecation warning\n        if it is invoked with a parameter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'session'
op|'.'
name|'startCheckingExpiration'
op|'('
number|'123'
op|')'
newline|'\n'
name|'warnings'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
nl|'\n'
name|'self'
op|'.'
name|'test_startCheckingExpirationParameterDeprecated'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'warnings'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'category'"
op|']'
op|','
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
nl|'\n'
string|'"The lifetime parameter to startCheckingExpiration is deprecated "'
nl|'\n'
string|'"since Twisted 9.0.  See Session.sessionTimeout instead."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_checkExpiredDeprecated
dedent|''
name|'def'
name|'test_checkExpiredDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{server.Session.checkExpired} is deprecated.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'session'
op|'.'
name|'checkExpired'
op|'('
op|')'
newline|'\n'
name|'warnings'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
name|'self'
op|'.'
name|'test_checkExpiredDeprecated'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'category'"
op|']'
op|','
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
nl|'\n'
string|'"Session.checkExpired is deprecated since Twisted 9.0; sessions "'
nl|'\n'
string|'"check themselves now, you don\'t need to."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'warnings'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Conditional requests:'
nl|'\n'
comment|'# If-None-Match, If-Modified-Since'
nl|'\n'
nl|'\n'
comment|'# make conditional request:'
nl|'\n'
comment|'#   normal response if condition succeeds'
nl|'\n'
comment|'#   if condition fails:'
nl|'\n'
comment|'#      response code'
nl|'\n'
comment|'#      no body'
nl|'\n'
nl|'\n'
DECL|function|httpBody
dedent|''
dedent|''
name|'def'
name|'httpBody'
op|'('
name|'whole'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'whole'
op|'.'
name|'split'
op|'('
string|"'\\r\\n\\r\\n'"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|function|httpHeader
dedent|''
name|'def'
name|'httpHeader'
op|'('
name|'whole'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'key'
op|'='
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'headers'
op|'='
name|'whole'
op|'.'
name|'split'
op|'('
string|"'\\r\\n\\r\\n'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'for'
name|'header'
name|'in'
name|'headers'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'header'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'header'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|function|httpCode
dedent|''
name|'def'
name|'httpCode'
op|'('
name|'whole'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'l1'
op|'='
name|'whole'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'int'
op|'('
name|'l1'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ConditionalTest
dedent|''
name|'class'
name|'ConditionalTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    web.server\'s handling of conditional requests for cache validation.\n    """'
newline|'\n'
nl|'\n'
comment|'# XXX: test web.distrib.'
nl|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resrc'
op|'='
name|'SimpleResource'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'resrc'
op|'.'
name|'putChild'
op|'('
string|"''"
op|','
name|'self'
op|'.'
name|'resrc'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'='
name|'server'
op|'.'
name|'Site'
op|'('
name|'self'
op|'.'
name|'resrc'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'='
name|'server'
op|'.'
name|'Site'
op|'('
name|'self'
op|'.'
name|'resrc'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'logFile'
op|'='
name|'log'
op|'.'
name|'logfile'
newline|'\n'
nl|'\n'
comment|'# HELLLLLLLLLLP!  This harness is Very Ugly.'
nl|'\n'
name|'self'
op|'.'
name|'channel'
op|'='
name|'self'
op|'.'
name|'site'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'http'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'close'
op|'='
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'disconnecting'
op|'='
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'='
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
string|'"peer"'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'='
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
string|'"host"'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'for'
name|'l'
name|'in'
op|'['
string|'"GET / HTTP/1.1"'
op|','
nl|'\n'
string|'"Accept: text/html"'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'channel'
op|'.'
name|'lineReceived'
op|'('
name|'l'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'channel'
op|'.'
name|'connectionLost'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_modifiedTest
dedent|''
name|'def'
name|'_modifiedTest'
op|'('
name|'self'
op|','
name|'modifiedSince'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given the value C{modifiedSince} for the I{If-Modified-Since}\n        header, verify that a response with a 200 code and the resource as\n        the body is returned.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'lineReceived'
op|'('
string|'"If-Modified-Since: "'
op|'+'
name|'modifiedSince'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'lineReceived'
op|'('
string|"''"
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'httpCode'
op|'('
name|'result'
op|')'
op|','
name|'http'
op|'.'
name|'OK'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'httpBody'
op|'('
name|'result'
op|')'
op|','
string|'"correct"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_modified
dedent|''
name|'def'
name|'test_modified'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a request is made with an I{If-Modified-Since} header value with\n        a timestamp indicating a time before the last modification of the\n        requested resource, a 200 response is returned along with a response\n        body containing the resource.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_modifiedTest'
op|'('
name|'http'
op|'.'
name|'datetimeToString'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unmodified
dedent|''
name|'def'
name|'test_unmodified'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a request is made with an I{If-Modified-Since} header value with\n        a timestamp indicating a time after the last modification of the\n        request resource, a 304 response is returned along with an empty\n        response body.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'lineReceived'
op|'('
string|'"If-Modified-Since: %s"'
nl|'\n'
op|'%'
name|'http'
op|'.'
name|'datetimeToString'
op|'('
number|'100'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'lineReceived'
op|'('
string|"''"
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'httpCode'
op|'('
name|'result'
op|')'
op|','
name|'http'
op|'.'
name|'NOT_MODIFIED'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'httpBody'
op|'('
name|'result'
op|')'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidTimestamp
dedent|''
name|'def'
name|'test_invalidTimestamp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a request is made with an I{If-Modified-Since} header value which\n        cannot be parsed, the header is treated as not having been present\n        and a normal 200 response is returned with a response body\n        containing the resource.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_modifiedTest'
op|'('
string|'"like, maybe a week ago, I guess?"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidTimestampYear
dedent|''
name|'def'
name|'test_invalidTimestampYear'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a request is made with an I{If-Modified-Since} header value which\n        contains a string in the year position which is not an integer, the\n        header is treated as not having been present and a normal 200\n        response is returned with a response body containing the resource.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_modifiedTest'
op|'('
string|'"Thu, 01 Jan blah 00:00:10 GMT"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidTimestampTooLongAgo
dedent|''
name|'def'
name|'test_invalidTimestampTooLongAgo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a request is made with an I{If-Modified-Since} header value which\n        contains a year before the epoch, the header is treated as not\n        having been present and a normal 200 response is returned with a\n        response body containing the resource.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_modifiedTest'
op|'('
string|'"Thu, 01 Jan 1899 00:00:10 GMT"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidTimestampMonth
dedent|''
name|'def'
name|'test_invalidTimestampMonth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a request is made with an I{If-Modified-Since} header value which\n        contains a string in the month position which is not a recognized\n        month abbreviation, the header is treated as not having been present\n        and a normal 200 response is returned with a response body\n        containing the resource.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_modifiedTest'
op|'('
string|'"Thu, 01 Blah 1970 00:00:10 GMT"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_etagMatchedNot
dedent|''
name|'def'
name|'test_etagMatchedNot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""If-None-Match ETag cache validator (positive)"""'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'lineReceived'
op|'('
string|'"If-None-Match: unmatchedTag"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'lineReceived'
op|'('
string|"''"
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'httpCode'
op|'('
name|'result'
op|')'
op|','
name|'http'
op|'.'
name|'OK'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'httpBody'
op|'('
name|'result'
op|')'
op|','
string|'"correct"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_etagMatched
dedent|''
name|'def'
name|'test_etagMatched'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""If-None-Match ETag cache validator (negative)"""'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'lineReceived'
op|'('
string|'"If-None-Match: MatchingTag"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'lineReceived'
op|'('
string|"''"
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'httpHeader'
op|'('
name|'result'
op|','
string|'"ETag"'
op|')'
op|','
string|'"MatchingTag"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'httpCode'
op|'('
name|'result'
op|')'
op|','
name|'http'
op|'.'
name|'NOT_MODIFIED'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'httpBody'
op|'('
name|'result'
op|')'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'google'
newline|'\n'
DECL|class|GoogleTestCase
name|'class'
name|'GoogleTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testCheckGoogle
indent|'    '
name|'def'
name|'testCheckGoogle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'unittest'
op|'.'
name|'SkipTest'
op|'('
string|'"no violation of google ToS"'
op|')'
newline|'\n'
name|'d'
op|'='
name|'google'
op|'.'
name|'checkGoogle'
op|'('
string|"'site:www.twistedmatrix.com twisted'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|"'http://twistedmatrix.com/'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|RequestTests
dedent|''
dedent|''
name|'class'
name|'RequestTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the HTTP request class, L{server.Request}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_interface
name|'def'
name|'test_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{server.Request} instances provide L{iweb.IRequest}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'verifyObject'
op|'('
name|'iweb'
op|'.'
name|'IRequest'
op|','
name|'server'
op|'.'
name|'Request'
op|'('
name|'DummyChannel'
op|'('
op|')'
op|','
name|'True'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testChildLink
dedent|''
name|'def'
name|'testChildLink'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'request'
op|'='
name|'server'
op|'.'
name|'Request'
op|'('
name|'DummyChannel'
op|'('
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'gotLength'
op|'('
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'requestReceived'
op|'('
string|"'GET'"
op|','
string|"'/foo/bar'"
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'childLink'
op|'('
string|"'baz'"
op|')'
op|','
string|"'bar/baz'"
op|')'
newline|'\n'
name|'request'
op|'='
name|'server'
op|'.'
name|'Request'
op|'('
name|'DummyChannel'
op|'('
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'gotLength'
op|'('
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'requestReceived'
op|'('
string|"'GET'"
op|','
string|"'/foo/bar/'"
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'childLink'
op|'('
string|"'baz'"
op|')'
op|','
string|"'baz'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPrePathURLSimple
dedent|''
name|'def'
name|'testPrePathURLSimple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'request'
op|'='
name|'server'
op|'.'
name|'Request'
op|'('
name|'DummyChannel'
op|'('
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'gotLength'
op|'('
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'requestReceived'
op|'('
string|"'GET'"
op|','
string|"'/foo/bar'"
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHost'
op|'('
string|"'example.com'"
op|','
number|'80'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'prePathURL'
op|'('
op|')'
op|','
string|"'http://example.com/foo/bar'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPrePathURLNonDefault
dedent|''
name|'def'
name|'testPrePathURLNonDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'transport'
op|'.'
name|'port'
op|'='
number|'81'
newline|'\n'
name|'request'
op|'='
name|'server'
op|'.'
name|'Request'
op|'('
name|'d'
op|','
number|'1'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHost'
op|'('
string|"'example.com'"
op|','
number|'81'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'gotLength'
op|'('
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'requestReceived'
op|'('
string|"'GET'"
op|','
string|"'/foo/bar'"
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'prePathURL'
op|'('
op|')'
op|','
string|"'http://example.com:81/foo/bar'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPrePathURLSSLPort
dedent|''
name|'def'
name|'testPrePathURLSSLPort'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'transport'
op|'.'
name|'port'
op|'='
number|'443'
newline|'\n'
name|'request'
op|'='
name|'server'
op|'.'
name|'Request'
op|'('
name|'d'
op|','
number|'1'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHost'
op|'('
string|"'example.com'"
op|','
number|'443'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'gotLength'
op|'('
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'requestReceived'
op|'('
string|"'GET'"
op|','
string|"'/foo/bar'"
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'prePathURL'
op|'('
op|')'
op|','
string|"'http://example.com:443/foo/bar'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPrePathURLSSLPortAndSSL
dedent|''
name|'def'
name|'testPrePathURLSSLPortAndSSL'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'transport'
op|'='
name|'DummyChannel'
op|'.'
name|'SSL'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'transport'
op|'.'
name|'port'
op|'='
number|'443'
newline|'\n'
name|'request'
op|'='
name|'server'
op|'.'
name|'Request'
op|'('
name|'d'
op|','
number|'1'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHost'
op|'('
string|"'example.com'"
op|','
number|'443'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'gotLength'
op|'('
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'requestReceived'
op|'('
string|"'GET'"
op|','
string|"'/foo/bar'"
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'prePathURL'
op|'('
op|')'
op|','
string|"'https://example.com/foo/bar'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPrePathURLHTTPPortAndSSL
dedent|''
name|'def'
name|'testPrePathURLHTTPPortAndSSL'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'transport'
op|'='
name|'DummyChannel'
op|'.'
name|'SSL'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'transport'
op|'.'
name|'port'
op|'='
number|'80'
newline|'\n'
name|'request'
op|'='
name|'server'
op|'.'
name|'Request'
op|'('
name|'d'
op|','
number|'1'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHost'
op|'('
string|"'example.com'"
op|','
number|'80'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'gotLength'
op|'('
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'requestReceived'
op|'('
string|"'GET'"
op|','
string|"'/foo/bar'"
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'prePathURL'
op|'('
op|')'
op|','
string|"'https://example.com:80/foo/bar'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPrePathURLSSLNonDefault
dedent|''
name|'def'
name|'testPrePathURLSSLNonDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'transport'
op|'='
name|'DummyChannel'
op|'.'
name|'SSL'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'transport'
op|'.'
name|'port'
op|'='
number|'81'
newline|'\n'
name|'request'
op|'='
name|'server'
op|'.'
name|'Request'
op|'('
name|'d'
op|','
number|'1'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHost'
op|'('
string|"'example.com'"
op|','
number|'81'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'gotLength'
op|'('
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'requestReceived'
op|'('
string|"'GET'"
op|','
string|"'/foo/bar'"
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'prePathURL'
op|'('
op|')'
op|','
string|"'https://example.com:81/foo/bar'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPrePathURLSetSSLHost
dedent|''
name|'def'
name|'testPrePathURLSetSSLHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'transport'
op|'.'
name|'port'
op|'='
number|'81'
newline|'\n'
name|'request'
op|'='
name|'server'
op|'.'
name|'Request'
op|'('
name|'d'
op|','
number|'1'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHost'
op|'('
string|"'foo.com'"
op|','
number|'81'
op|','
number|'1'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'gotLength'
op|'('
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'requestReceived'
op|'('
string|"'GET'"
op|','
string|"'/foo/bar'"
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'prePathURL'
op|'('
op|')'
op|','
string|"'https://foo.com:81/foo/bar'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_prePathURLQuoting
dedent|''
name|'def'
name|'test_prePathURLQuoting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Request.prePathURL} quotes special characters in the URL segments to\n        preserve the original meaning.\n        """'
newline|'\n'
name|'d'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
name|'request'
op|'='
name|'server'
op|'.'
name|'Request'
op|'('
name|'d'
op|','
number|'1'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHost'
op|'('
string|"'example.com'"
op|','
number|'80'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'gotLength'
op|'('
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'requestReceived'
op|'('
string|"'GET'"
op|','
string|"'/foo%2Fbar'"
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'prePathURL'
op|'('
op|')'
op|','
string|"'http://example.com/foo%2Fbar'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|RootResource
dedent|''
dedent|''
name|'class'
name|'RootResource'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
DECL|variable|isLeaf
indent|'    '
name|'isLeaf'
op|'='
number|'0'
newline|'\n'
DECL|member|getChildWithDefault
name|'def'
name|'getChildWithDefault'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'request'
op|'.'
name|'rememberRootURL'
op|'('
op|')'
newline|'\n'
name|'return'
name|'resource'
op|'.'
name|'Resource'
op|'.'
name|'getChildWithDefault'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'request'
op|')'
newline|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"''"
newline|'\n'
nl|'\n'
DECL|class|RememberURLTest
dedent|''
dedent|''
name|'class'
name|'RememberURLTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|createServer
indent|'    '
name|'def'
name|'createServer'
op|'('
name|'self'
op|','
name|'r'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'chan'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
name|'chan'
op|'.'
name|'site'
op|'='
name|'server'
op|'.'
name|'Site'
op|'('
name|'r'
op|')'
newline|'\n'
name|'return'
name|'chan'
newline|'\n'
nl|'\n'
DECL|member|testSimple
dedent|''
name|'def'
name|'testSimple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'r'
op|'='
name|'resource'
op|'.'
name|'Resource'
op|'('
op|')'
newline|'\n'
name|'r'
op|'.'
name|'isLeaf'
op|'='
number|'0'
newline|'\n'
name|'rr'
op|'='
name|'RootResource'
op|'('
op|')'
newline|'\n'
name|'r'
op|'.'
name|'putChild'
op|'('
string|"'foo'"
op|','
name|'rr'
op|')'
newline|'\n'
name|'rr'
op|'.'
name|'putChild'
op|'('
string|"''"
op|','
name|'rr'
op|')'
newline|'\n'
name|'rr'
op|'.'
name|'putChild'
op|'('
string|"'bar'"
op|','
name|'resource'
op|'.'
name|'Resource'
op|'('
op|')'
op|')'
newline|'\n'
name|'chan'
op|'='
name|'self'
op|'.'
name|'createServer'
op|'('
name|'r'
op|')'
newline|'\n'
name|'for'
name|'url'
name|'in'
op|'['
string|"'/foo/'"
op|','
string|"'/foo/bar'"
op|','
string|"'/foo/bar/baz'"
op|','
string|"'/foo/bar/'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'request'
op|'='
name|'server'
op|'.'
name|'Request'
op|'('
name|'chan'
op|','
number|'1'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHost'
op|'('
string|"'example.com'"
op|','
number|'81'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'gotLength'
op|'('
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'requestReceived'
op|'('
string|"'GET'"
op|','
name|'url'
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'getRootURL'
op|'('
op|')'
op|','
string|'"http://example.com/foo"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRoot
dedent|''
dedent|''
name|'def'
name|'testRoot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rr'
op|'='
name|'RootResource'
op|'('
op|')'
newline|'\n'
name|'rr'
op|'.'
name|'putChild'
op|'('
string|"''"
op|','
name|'rr'
op|')'
newline|'\n'
name|'rr'
op|'.'
name|'putChild'
op|'('
string|"'bar'"
op|','
name|'resource'
op|'.'
name|'Resource'
op|'('
op|')'
op|')'
newline|'\n'
name|'chan'
op|'='
name|'self'
op|'.'
name|'createServer'
op|'('
name|'rr'
op|')'
newline|'\n'
name|'for'
name|'url'
name|'in'
op|'['
string|"'/'"
op|','
string|"'/bar'"
op|','
string|"'/bar/baz'"
op|','
string|"'/bar/'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'request'
op|'='
name|'server'
op|'.'
name|'Request'
op|'('
name|'chan'
op|','
number|'1'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHost'
op|'('
string|"'example.com'"
op|','
number|'81'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'gotLength'
op|'('
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'requestReceived'
op|'('
string|"'GET'"
op|','
name|'url'
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'getRootURL'
op|'('
op|')'
op|','
string|'"http://example.com/"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NewRenderResource
dedent|''
dedent|''
dedent|''
name|'class'
name|'NewRenderResource'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
DECL|member|render_GET
indent|'    '
name|'def'
name|'render_GET'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"hi hi"'
newline|'\n'
nl|'\n'
DECL|member|render_HEH
dedent|''
name|'def'
name|'render_HEH'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"ho ho"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NewRenderTestCase
dedent|''
dedent|''
name|'class'
name|'NewRenderTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|_getReq
indent|'    '
name|'def'
name|'_getReq'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'site'
op|'.'
name|'resource'
op|'.'
name|'putChild'
op|'('
string|"'newrender'"
op|','
name|'NewRenderResource'
op|'('
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'transport'
op|'.'
name|'port'
op|'='
number|'81'
newline|'\n'
name|'request'
op|'='
name|'server'
op|'.'
name|'Request'
op|'('
name|'d'
op|','
number|'1'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHost'
op|'('
string|"'example.com'"
op|','
number|'81'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'gotLength'
op|'('
number|'0'
op|')'
newline|'\n'
name|'return'
name|'request'
newline|'\n'
nl|'\n'
DECL|member|testGoodMethods
dedent|''
name|'def'
name|'testGoodMethods'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'self'
op|'.'
name|'_getReq'
op|'('
op|')'
newline|'\n'
name|'req'
op|'.'
name|'requestReceived'
op|'('
string|"'GET'"
op|','
string|"'/newrender'"
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'req'
op|'.'
name|'transport'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|','
string|"'hi hi'"
op|')'
newline|'\n'
nl|'\n'
name|'req'
op|'='
name|'self'
op|'.'
name|'_getReq'
op|'('
op|')'
newline|'\n'
name|'req'
op|'.'
name|'requestReceived'
op|'('
string|"'HEH'"
op|','
string|"'/newrender'"
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'req'
op|'.'
name|'transport'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|','
string|"'ho ho'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testBadMethods
dedent|''
name|'def'
name|'testBadMethods'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'self'
op|'.'
name|'_getReq'
op|'('
op|')'
newline|'\n'
name|'req'
op|'.'
name|'requestReceived'
op|'('
string|"'CONNECT'"
op|','
string|"'/newrender'"
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'req'
op|'.'
name|'code'
op|','
number|'501'
op|')'
newline|'\n'
nl|'\n'
name|'req'
op|'='
name|'self'
op|'.'
name|'_getReq'
op|'('
op|')'
newline|'\n'
name|'req'
op|'.'
name|'requestReceived'
op|'('
string|"'hlalauguG'"
op|','
string|"'/newrender'"
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'req'
op|'.'
name|'code'
op|','
number|'501'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testImplicitHead
dedent|''
name|'def'
name|'testImplicitHead'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'self'
op|'.'
name|'_getReq'
op|'('
op|')'
newline|'\n'
name|'req'
op|'.'
name|'requestReceived'
op|'('
string|"'HEAD'"
op|','
string|"'/newrender'"
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'req'
op|'.'
name|'code'
op|','
number|'200'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'-'
number|'1'
op|','
name|'req'
op|'.'
name|'transport'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'find'
op|'('
string|"'hi hi'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SDResource
dedent|''
dedent|''
name|'class'
name|'SDResource'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'default'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'default'
op|'='
name|'default'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getChildWithDefault
dedent|''
name|'def'
name|'getChildWithDefault'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'self'
op|'.'
name|'default'
op|')'
newline|'\n'
name|'resource'
op|'='
name|'util'
op|'.'
name|'DeferredResource'
op|'('
name|'d'
op|')'
newline|'\n'
name|'return'
name|'resource'
op|'.'
name|'getChildWithDefault'
op|'('
name|'name'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DeferredResourceTests
dedent|''
dedent|''
name|'class'
name|'DeferredResourceTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{DeferredResource}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|testDeferredResource
name|'def'
name|'testDeferredResource'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'r'
op|'='
name|'resource'
op|'.'
name|'Resource'
op|'('
op|')'
newline|'\n'
name|'r'
op|'.'
name|'isLeaf'
op|'='
number|'1'
newline|'\n'
name|'s'
op|'='
name|'SDResource'
op|'('
name|'r'
op|')'
newline|'\n'
name|'d'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|','
string|"'baz'"
op|']'
op|')'
newline|'\n'
name|'resource'
op|'.'
name|'getChildForRequest'
op|'('
name|'s'
op|','
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'d'
op|'.'
name|'postpath'
op|','
op|'['
string|"'bar'"
op|','
string|"'baz'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_render
dedent|''
name|'def'
name|'test_render'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DeferredResource} uses the request object\'s C{render} method to\n        render the resource which is the result of the L{Deferred} being\n        handled.\n        """'
newline|'\n'
name|'rendered'
op|'='
op|'['
op|']'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'render'
op|'='
name|'rendered'
op|'.'
name|'append'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'resource'
op|'.'
name|'Resource'
op|'('
op|')'
newline|'\n'
name|'deferredResource'
op|'='
name|'util'
op|'.'
name|'DeferredResource'
op|'('
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
name|'deferredResource'
op|'.'
name|'render'
op|'('
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'rendered'
op|','
op|'['
name|'result'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyRequestForLogTest
dedent|''
dedent|''
name|'class'
name|'DummyRequestForLogTest'
op|'('
name|'DummyRequest'
op|')'
op|':'
newline|'\n'
DECL|variable|uri
indent|'    '
name|'uri'
op|'='
string|"'/dummy'"
comment|'# parent class uri has "http://", which doesn\'t really happen'
newline|'\n'
DECL|variable|code
name|'code'
op|'='
number|'123'
newline|'\n'
nl|'\n'
DECL|variable|clientproto
name|'clientproto'
op|'='
string|"'HTTP/1.0'"
newline|'\n'
DECL|variable|sentLength
name|'sentLength'
op|'='
name|'None'
newline|'\n'
DECL|variable|client
name|'client'
op|'='
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'1.2.3.4'"
op|','
number|'12345'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestLogEscaping
dedent|''
name|'class'
name|'TestLogEscaping'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'site'
op|'='
name|'http'
op|'.'
name|'HTTPFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'logFile'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'='
name|'DummyRequestForLogTest'
op|'('
name|'self'
op|'.'
name|'site'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSimple
dedent|''
name|'def'
name|'testSimple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'http'
op|'.'
name|'_logDateTime'
op|'='
string|'"[%02d/%3s/%4d:%02d:%02d:%02d +0000]"'
op|'%'
op|'('
nl|'\n'
number|'25'
op|','
string|"'Oct'"
op|','
number|'2004'
op|','
number|'12'
op|','
number|'31'
op|','
number|'59'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'log'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'logFile'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'logFile'
op|'.'
name|'read'
op|'('
op|')'
op|','
nl|'\n'
string|'\'1.2.3.4 - - [25/Oct/2004:12:31:59 +0000] "GET /dummy HTTP/1.0" 123 - "-" "-"\\n\''
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMethodQuote
dedent|''
name|'def'
name|'testMethodQuote'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'http'
op|'.'
name|'_logDateTime'
op|'='
string|'"[%02d/%3s/%4d:%02d:%02d:%02d +0000]"'
op|'%'
op|'('
nl|'\n'
number|'25'
op|','
string|"'Oct'"
op|','
number|'2004'
op|','
number|'12'
op|','
number|'31'
op|','
number|'59'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'method'
op|'='
string|'\'G"T\''
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'log'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'logFile'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'logFile'
op|'.'
name|'read'
op|'('
op|')'
op|','
nl|'\n'
string|'\'1.2.3.4 - - [25/Oct/2004:12:31:59 +0000] "G\\\\"T /dummy HTTP/1.0" 123 - "-" "-"\\n\''
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRequestQuote
dedent|''
name|'def'
name|'testRequestQuote'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'http'
op|'.'
name|'_logDateTime'
op|'='
string|'"[%02d/%3s/%4d:%02d:%02d:%02d +0000]"'
op|'%'
op|'('
nl|'\n'
number|'25'
op|','
string|"'Oct'"
op|','
number|'2004'
op|','
number|'12'
op|','
number|'31'
op|','
number|'59'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'uri'
op|'='
string|'\'/dummy"withquote\''
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'log'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'logFile'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'logFile'
op|'.'
name|'read'
op|'('
op|')'
op|','
nl|'\n'
string|'\'1.2.3.4 - - [25/Oct/2004:12:31:59 +0000] "GET /dummy\\\\"withquote HTTP/1.0" 123 - "-" "-"\\n\''
op|')'
newline|'\n'
nl|'\n'
DECL|member|testProtoQuote
dedent|''
name|'def'
name|'testProtoQuote'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'http'
op|'.'
name|'_logDateTime'
op|'='
string|'"[%02d/%3s/%4d:%02d:%02d:%02d +0000]"'
op|'%'
op|'('
nl|'\n'
number|'25'
op|','
string|"'Oct'"
op|','
number|'2004'
op|','
number|'12'
op|','
number|'31'
op|','
number|'59'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'clientproto'
op|'='
string|'\'HT"P/1.0\''
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'log'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'logFile'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'logFile'
op|'.'
name|'read'
op|'('
op|')'
op|','
nl|'\n'
string|'\'1.2.3.4 - - [25/Oct/2004:12:31:59 +0000] "GET /dummy HT\\\\"P/1.0" 123 - "-" "-"\\n\''
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRefererQuote
dedent|''
name|'def'
name|'testRefererQuote'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'http'
op|'.'
name|'_logDateTime'
op|'='
string|'"[%02d/%3s/%4d:%02d:%02d:%02d +0000]"'
op|'%'
op|'('
nl|'\n'
number|'25'
op|','
string|"'Oct'"
op|','
number|'2004'
op|','
number|'12'
op|','
number|'31'
op|','
number|'59'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'referer'"
op|']'
op|'='
string|'\'http://malicious" ".website.invalid\''
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'log'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'logFile'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'logFile'
op|'.'
name|'read'
op|'('
op|')'
op|','
nl|'\n'
string|'\'1.2.3.4 - - [25/Oct/2004:12:31:59 +0000] "GET /dummy HTTP/1.0" 123 - "http://malicious\\\\" \\\\".website.invalid" "-"\\n\''
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUserAgentQuote
dedent|''
name|'def'
name|'testUserAgentQuote'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'http'
op|'.'
name|'_logDateTime'
op|'='
string|'"[%02d/%3s/%4d:%02d:%02d:%02d +0000]"'
op|'%'
op|'('
nl|'\n'
number|'25'
op|','
string|"'Oct'"
op|','
number|'2004'
op|','
number|'12'
op|','
number|'31'
op|','
number|'59'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'['
string|"'user-agent'"
op|']'
op|'='
string|'\'Malicious Web" Evil\''
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'log'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'logFile'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'site'
op|'.'
name|'logFile'
op|'.'
name|'read'
op|'('
op|')'
op|','
nl|'\n'
string|'\'1.2.3.4 - - [25/Oct/2004:12:31:59 +0000] "GET /dummy HTTP/1.0" 123 - "-" "Malicious Web\\\\" Evil"\\n\''
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

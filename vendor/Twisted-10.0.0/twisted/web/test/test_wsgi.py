begin_unit
comment|'# Copyright (c) 2008-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.web.wsgi}.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|__metaclass__
name|'__metaclass__'
op|'='
name|'type'
newline|'\n'
nl|'\n'
name|'from'
name|'sys'
name|'import'
name|'exc_info'
newline|'\n'
name|'from'
name|'urllib'
name|'import'
name|'quote'
newline|'\n'
name|'from'
name|'thread'
name|'import'
name|'get_ident'
newline|'\n'
name|'import'
name|'StringIO'
op|','
name|'cStringIO'
op|','
name|'tempfile'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
op|'.'
name|'verify'
name|'import'
name|'verifyObject'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'log'
name|'import'
name|'addObserver'
op|','
name|'removeObserver'
op|','
name|'err'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'failure'
name|'import'
name|'Failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'threadpool'
name|'import'
name|'ThreadPool'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
op|','
name|'gatherResults'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'ConnectionLost'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'http'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'resource'
name|'import'
name|'IResource'
op|','
name|'Resource'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'server'
name|'import'
name|'Request'
op|','
name|'Site'
op|','
name|'version'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'wsgi'
name|'import'
name|'WSGIResource'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'test'
op|'.'
name|'test_web'
name|'import'
name|'DummyChannel'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SynchronousThreadPool
name|'class'
name|'SynchronousThreadPool'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A single-threaded implementation of part of the L{ThreadPool} interface.\n    This implementation calls functions synchronously rather than running\n    them in a thread pool.  It is used to make the tests which are not\n    directly for thread-related behavior deterministic.\n    """'
newline|'\n'
DECL|member|callInThread
name|'def'
name|'callInThread'
op|'('
name|'self'
op|','
name|'f'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call C{f(*a, **kw)} in this thread rather than scheduling it to be\n        called in a thread.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
comment|"# callInThread doesn't let exceptions propagate to the caller."
nl|'\n'
comment|'# None is always returned and any exception raised gets logged'
nl|'\n'
comment|'# later on.'
nl|'\n'
indent|'            '
name|'err'
op|'('
name|'None'
op|','
string|'"Callable passed to SynchronousThreadPool.callInThread failed"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SynchronousReactorThreads
dedent|''
dedent|''
dedent|''
name|'class'
name|'SynchronousReactorThreads'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A single-threaded implementation of part of the L{IReactorThreads}\n    interface.  This implementation assumes that it will only be invoked\n    from the reactor thread, so it calls functions synchronously rather than\n    trying to schedule them to run in the reactor thread.  It is used in\n    conjunction with L{SynchronousThreadPool} to make the tests which are\n    not directly for thread-related behavior deterministic.\n    """'
newline|'\n'
DECL|member|callFromThread
name|'def'
name|'callFromThread'
op|'('
name|'self'
op|','
name|'f'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call C{f(*a, **kw)} in this thread which should also be the reactor\n        thread.\n        """'
newline|'\n'
name|'f'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|WSGIResourceTests
dedent|''
dedent|''
name|'class'
name|'WSGIResourceTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a L{WSGIResource} with synchronous threading objects and a no-op\n        application object.  This is useful for testing certain things about\n        the resource implementation which are unrelated to WSGI.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'resource'
op|'='
name|'WSGIResource'
op|'('
nl|'\n'
name|'SynchronousReactorThreads'
op|'('
op|')'
op|','
name|'SynchronousThreadPool'
op|'('
op|')'
op|','
nl|'\n'
name|'lambda'
name|'environ'
op|','
name|'startResponse'
op|':'
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_interfaces
dedent|''
name|'def'
name|'test_interfaces'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{WSGIResource} implements L{IResource} and stops resource traversal.\n        """'
newline|'\n'
name|'verifyObject'
op|'('
name|'IResource'
op|','
name|'self'
op|'.'
name|'resource'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'resource'
op|'.'
name|'isLeaf'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unsupported
dedent|''
name|'def'
name|'test_unsupported'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A L{WSGIResource} cannot have L{IResource} children.  Its\n        C{getChildWithDefault} and C{putChild} methods raise L{RuntimeError}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'RuntimeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'getChildWithDefault'
op|','
nl|'\n'
string|'"foo"'
op|','
name|'Request'
op|'('
name|'DummyChannel'
op|'('
op|')'
op|','
name|'False'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'RuntimeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'resource'
op|'.'
name|'putChild'
op|','
nl|'\n'
string|'"foo"'
op|','
name|'Resource'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WSGITestsMixin
dedent|''
dedent|''
name|'class'
name|'WSGITestsMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @ivar channelFactory: A no-argument callable which will be invoked to\n        create a new HTTP channel to associate with request objects.\n    """'
newline|'\n'
DECL|variable|channelFactory
name|'channelFactory'
op|'='
name|'DummyChannel'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'threadpool'
op|'='
name|'SynchronousThreadPool'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'='
name|'SynchronousReactorThreads'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|lowLevelRender
dedent|''
name|'def'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'self'
op|','
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
name|'channelFactory'
op|','
name|'method'
op|','
nl|'\n'
name|'version'
op|','
name|'resourceSegments'
op|','
name|'requestSegments'
op|','
name|'query'
op|'='
name|'None'
op|','
name|'headers'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'body'
op|'='
name|'None'
op|','
name|'safe'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param method: A C{str} giving the request method to use.\n\n        @param version: A C{str} like C{\'1.1\'} giving the request version.\n\n        @param resourceSegments: A C{list} of unencoded path segments which\n            specifies the location in the resource hierarchy at which the\n            L{WSGIResource} will be placed, eg C{[\'\']} for I{/}, C{[\'foo\',\n            \'bar\', \'\']} for I{/foo/bar/}, etc.\n\n        @param requestSegments: A C{list} of unencoded path segments giving the\n            request URI.\n\n        @param query: A C{list} of two-tuples of C{str} giving unencoded query\n            argument keys and values.\n\n        @param headers: A C{list} of two-tuples of C{str} giving request header\n            names and corresponding values.\n\n        @param safe: A C{str} giving the bytes which are to be considered\n            I{safe} for inclusion in the request URI and not quoted.\n\n        @return: A L{Deferred} which will be called back with a two-tuple of\n            the arguments passed which would be passed to the WSGI application\n            object for this configuration and request (ie, the environment and\n            start_response callable).\n        """'
newline|'\n'
name|'root'
op|'='
name|'WSGIResource'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'reactor'
op|','
name|'self'
op|'.'
name|'threadpool'
op|','
name|'applicationFactory'
op|'('
op|')'
op|')'
newline|'\n'
name|'resourceSegments'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
name|'for'
name|'seg'
name|'in'
name|'resourceSegments'
op|':'
newline|'\n'
indent|'            '
name|'tmp'
op|'='
name|'Resource'
op|'('
op|')'
newline|'\n'
name|'tmp'
op|'.'
name|'putChild'
op|'('
name|'seg'
op|','
name|'root'
op|')'
newline|'\n'
name|'root'
op|'='
name|'tmp'
newline|'\n'
nl|'\n'
dedent|''
name|'channel'
op|'='
name|'channelFactory'
op|'('
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'site'
op|'='
name|'Site'
op|'('
name|'root'
op|')'
newline|'\n'
name|'request'
op|'='
name|'requestFactory'
op|'('
name|'channel'
op|','
name|'False'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'request'
op|'.'
name|'requestHeaders'
op|'.'
name|'addRawHeader'
op|'('
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
dedent|''
name|'request'
op|'.'
name|'gotLength'
op|'('
number|'0'
op|')'
newline|'\n'
name|'if'
name|'body'
op|':'
newline|'\n'
indent|'            '
name|'request'
op|'.'
name|'content'
op|'.'
name|'write'
op|'('
name|'body'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'content'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'uri'
op|'='
string|"'/'"
op|'+'
string|"'/'"
op|'.'
name|'join'
op|'('
op|'['
name|'quote'
op|'('
name|'seg'
op|','
name|'safe'
op|')'
name|'for'
name|'seg'
name|'in'
name|'requestSegments'
op|']'
op|')'
newline|'\n'
name|'if'
name|'query'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'+='
string|"'?'"
op|'+'
string|"'&'"
op|'.'
name|'join'
op|'('
op|'['
string|"'='"
op|'.'
name|'join'
op|'('
op|'['
name|'quote'
op|'('
name|'k'
op|','
name|'safe'
op|')'
op|','
name|'quote'
op|'('
name|'v'
op|','
name|'safe'
op|')'
op|']'
op|')'
nl|'\n'
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
name|'query'
op|']'
op|')'
newline|'\n'
dedent|''
name|'request'
op|'.'
name|'requestReceived'
op|'('
name|'method'
op|','
name|'uri'
op|','
string|"'HTTP/'"
op|'+'
name|'version'
op|')'
newline|'\n'
name|'return'
name|'request'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|function|applicationFactory
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'            '
name|'def'
name|'application'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'environ'
op|','
name|'startResponse'
op|'='
name|'args'
newline|'\n'
name|'result'
op|'.'
name|'callback'
op|'('
name|'args'
op|')'
newline|'\n'
name|'startResponse'
op|'('
string|"'200 OK'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'return'
name|'iter'
op|'('
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'Request'
op|','
name|'applicationFactory'
op|','
name|'self'
op|'.'
name|'channelFactory'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|requestFactoryFactory
dedent|''
name|'def'
name|'requestFactoryFactory'
op|'('
name|'self'
op|','
name|'requestClass'
op|'='
name|'Request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|function|requestFactory
name|'def'
name|'requestFactory'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'request'
op|'='
name|'requestClass'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
comment|"# If notifyFinish is called after lowLevelRender returns, it won't"
nl|'\n'
comment|'# do the right thing, because the request will have already'
nl|'\n'
comment|'# finished.  One might argue that this is a bug in'
nl|'\n'
comment|'# Request.notifyFinish.'
nl|'\n'
name|'request'
op|'.'
name|'notifyFinish'
op|'('
op|')'
op|'.'
name|'chainDeferred'
op|'('
name|'d'
op|')'
newline|'\n'
name|'return'
name|'request'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|','
name|'requestFactory'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getContentFromResponse
dedent|''
name|'def'
name|'getContentFromResponse'
op|'('
name|'self'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'response'
op|'.'
name|'split'
op|'('
string|"'\\r\\n\\r\\n'"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|EnvironTests
dedent|''
dedent|''
name|'class'
name|'EnvironTests'
op|'('
name|'WSGITestsMixin'
op|','
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the values in the C{environ} C{dict} passed to the application\n    object by L{twisted.web.wsgi.WSGIResource}.\n    """'
newline|'\n'
DECL|member|environKeyEqual
name|'def'
name|'environKeyEqual'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
DECL|function|assertEnvironKeyEqual
indent|'        '
name|'def'
name|'assertEnvironKeyEqual'
op|'('
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'environ'
op|'['
name|'key'
op|']'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'assertEnvironKeyEqual'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_environIsDict
dedent|''
name|'def'
name|'test_environIsDict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{WSGIResource} calls the application object with an C{environ}\n        parameter which is exactly of type C{dict}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'type'
op|'('
name|'environ'
op|')'
op|','
name|'dict'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requestMethod
dedent|''
name|'def'
name|'test_requestMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'REQUEST_METHOD\'} key of the C{environ} C{dict} passed to the\n        application contains the HTTP method in the request (RFC 3875, section\n        4.1.12).\n        """'
newline|'\n'
name|'get'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'get'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'REQUEST_METHOD'"
op|','
string|"'GET'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Also make sure a different request method shows up as a different'
nl|'\n'
comment|'# value in the environ dict.'
nl|'\n'
name|'post'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'POST'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'post'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'REQUEST_METHOD'"
op|','
string|"'POST'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'gatherResults'
op|'('
op|'['
name|'get'
op|','
name|'post'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_scriptName
dedent|''
name|'def'
name|'test_scriptName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'SCRIPT_NAME\'} key of the C{environ} C{dict} passed to the\n        application contains the I{abs_path} (RFC 2396, section 3) to this\n        resource (RFC 3875, section 4.1.13).\n        """'
newline|'\n'
name|'root'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'root'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'SCRIPT_NAME'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'emptyChild'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
string|"''"
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'emptyChild'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'SCRIPT_NAME'"
op|','
string|"'/'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'leaf'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
string|"'foo'"
op|']'
op|','
op|'['
string|"'foo'"
op|']'
op|')'
newline|'\n'
name|'leaf'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'SCRIPT_NAME'"
op|','
string|"'/foo'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'container'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
string|"'foo'"
op|','
string|"''"
op|']'
op|','
op|'['
string|"'foo'"
op|','
string|"''"
op|']'
op|')'
newline|'\n'
name|'container'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'SCRIPT_NAME'"
op|','
string|"'/foo/'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'internal'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
string|"'foo'"
op|']'
op|','
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|')'
newline|'\n'
name|'internal'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'SCRIPT_NAME'"
op|','
string|"'/foo'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'unencoded'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
nl|'\n'
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
string|"'foo'"
op|','
string|"'/'"
op|','
string|"'bar\\xff'"
op|']'
op|','
op|'['
string|"'foo'"
op|','
string|"'/'"
op|','
string|"'bar\\xff'"
op|']'
op|')'
newline|'\n'
comment|'# The RFC says "(not URL-encoded)", even though that makes'
nl|'\n'
comment|'# interpretation of SCRIPT_NAME ambiguous.'
nl|'\n'
name|'unencoded'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'SCRIPT_NAME'"
op|','
string|"'/foo///bar\\xff'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'root'
op|','
name|'emptyChild'
op|','
name|'leaf'
op|','
name|'container'
op|','
name|'internal'
op|','
name|'unencoded'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_pathInfo
dedent|''
name|'def'
name|'test_pathInfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'PATH_INFO\'} key of the C{environ} C{dict} passed to the\n        application contains the suffix of the request URI path which is not\n        included in the value for the C{\'SCRIPT_NAME\'} key (RFC 3875, section\n        4.1.5).\n        """'
newline|'\n'
name|'assertKeyEmpty'
op|'='
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'PATH_INFO'"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
name|'root'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'root'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'PATH_INFO'"
op|','
string|"'/'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'emptyChild'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
string|"''"
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'emptyChild'
op|'.'
name|'addCallback'
op|'('
name|'assertKeyEmpty'
op|')'
newline|'\n'
nl|'\n'
name|'leaf'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
string|"'foo'"
op|']'
op|','
op|'['
string|"'foo'"
op|']'
op|')'
newline|'\n'
name|'leaf'
op|'.'
name|'addCallback'
op|'('
name|'assertKeyEmpty'
op|')'
newline|'\n'
nl|'\n'
name|'container'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
string|"'foo'"
op|','
string|"''"
op|']'
op|','
op|'['
string|"'foo'"
op|','
string|"''"
op|']'
op|')'
newline|'\n'
name|'container'
op|'.'
name|'addCallback'
op|'('
name|'assertKeyEmpty'
op|')'
newline|'\n'
nl|'\n'
name|'internalLeaf'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
string|"'foo'"
op|']'
op|','
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|')'
newline|'\n'
name|'internalLeaf'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'PATH_INFO'"
op|','
string|"'/bar'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'internalContainer'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
string|"'foo'"
op|']'
op|','
op|'['
string|"'foo'"
op|','
string|"''"
op|']'
op|')'
newline|'\n'
name|'internalContainer'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'PATH_INFO'"
op|','
string|"'/'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'unencoded'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"'foo'"
op|','
string|"'/'"
op|','
string|"'bar\\xff'"
op|']'
op|')'
newline|'\n'
name|'unencoded'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'PATH_INFO'"
op|','
string|"'/foo///bar\\xff'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'root'
op|','
name|'leaf'
op|','
name|'container'
op|','
name|'internalLeaf'
op|','
nl|'\n'
name|'internalContainer'
op|','
name|'unencoded'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_queryString
dedent|''
name|'def'
name|'test_queryString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'QUERY_STRING\'} key of the C{environ} C{dict} passed to the\n        application contains the portion of the request URI after the first\n        I{?} (RFC 3875, section 4.1.7).\n        """'
newline|'\n'
name|'missing'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'missing'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'QUERY_STRING'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'empty'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'empty'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'QUERY_STRING'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'present'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
op|'['
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|')'
op|']'
op|')'
newline|'\n'
name|'present'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'QUERY_STRING'"
op|','
string|"'foo=bar'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'unencoded'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
op|'['
op|'('
string|"'/'"
op|','
string|"'/'"
op|')'
op|']'
op|')'
newline|'\n'
name|'unencoded'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'QUERY_STRING'"
op|','
string|"'%2F=%2F'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# "?" is reserved in the <searchpart> portion of a URL.  However, it'
nl|'\n'
comment|'# seems to be a common mistake of clients to forget to quote it.  So,'
nl|'\n'
comment|'# make sure we handle that invalid case.'
nl|'\n'
name|'doubleQuestion'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
nl|'\n'
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
op|'['
op|'('
string|"'foo'"
op|','
string|"'?bar'"
op|')'
op|']'
op|','
name|'safe'
op|'='
string|"'?'"
op|')'
newline|'\n'
name|'doubleQuestion'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'QUERY_STRING'"
op|','
string|"'foo=?bar'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'missing'
op|','
name|'empty'
op|','
name|'present'
op|','
name|'unencoded'
op|','
name|'doubleQuestion'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_contentType
dedent|''
name|'def'
name|'test_contentType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'CONTENT_TYPE\'} key of the C{environ} C{dict} passed to the\n        application contains the value of the I{Content-Type} request header\n        (RFC 3875, section 4.1.3).\n        """'
newline|'\n'
name|'missing'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'missing'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'CONTENT_TYPE'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'present'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
nl|'\n'
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|'('
string|"'content-type'"
op|','
string|"'x-foo/bar'"
op|')'
op|']'
op|')'
newline|'\n'
name|'present'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'CONTENT_TYPE'"
op|','
string|"'x-foo/bar'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'gatherResults'
op|'('
op|'['
name|'missing'
op|','
name|'present'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_contentLength
dedent|''
name|'def'
name|'test_contentLength'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'CONTENT_LENGTH\'} key of the C{environ} C{dict} passed to the\n        application contains the value of the I{Content-Length} request header\n        (RFC 3875, section 4.1.2).\n        """'
newline|'\n'
name|'missing'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'missing'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'CONTENT_LENGTH'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'present'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
nl|'\n'
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|'('
string|"'content-length'"
op|','
string|"'1234'"
op|')'
op|']'
op|')'
newline|'\n'
name|'present'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'CONTENT_LENGTH'"
op|','
string|"'1234'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'gatherResults'
op|'('
op|'['
name|'missing'
op|','
name|'present'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_serverName
dedent|''
name|'def'
name|'test_serverName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'SERVER_NAME\'} key of the C{environ} C{dict} passed to the\n        application contains the best determination of the server hostname\n        possible, using either the value of the I{Host} header in the request\n        or the address the server is listening on if that header is not\n        present (RFC 3875, section 4.1.14).\n        """'
newline|'\n'
name|'missing'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
comment|'# 10.0.0.1 value comes from a bit far away -'
nl|'\n'
comment|'# twisted.test.test_web.DummyChannel.transport.getHost().host'
nl|'\n'
name|'missing'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'SERVER_NAME'"
op|','
string|"'10.0.0.1'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'present'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
nl|'\n'
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|'('
string|"'host'"
op|','
string|"'example.org'"
op|')'
op|']'
op|')'
newline|'\n'
name|'present'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'SERVER_NAME'"
op|','
string|"'example.org'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'gatherResults'
op|'('
op|'['
name|'missing'
op|','
name|'present'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_serverPort
dedent|''
name|'def'
name|'test_serverPort'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'SERVER_PORT\'} key of the C{environ} C{dict} passed to the\n        application contains the port number of the server which received the\n        request (RFC 3875, section 4.1.15).\n        """'
newline|'\n'
name|'portNumber'
op|'='
number|'12354'
newline|'\n'
DECL|function|makeChannel
name|'def'
name|'makeChannel'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'channel'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'transport'
op|'='
name|'DummyChannel'
op|'.'
name|'TCP'
op|'('
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'port'
op|'='
name|'portNumber'
newline|'\n'
name|'return'
name|'channel'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'channelFactory'
op|'='
name|'makeChannel'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'SERVER_PORT'"
op|','
name|'str'
op|'('
name|'portNumber'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_serverProtocol
dedent|''
name|'def'
name|'test_serverProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'SERVER_PROTOCOL\'} key of the C{environ} C{dict} passed to the\n        application contains the HTTP version number received in the request\n        (RFC 3875, section 4.1.16).\n        """'
newline|'\n'
name|'old'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.0'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'old'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'SERVER_PROTOCOL'"
op|','
string|"'HTTP/1.0'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'new'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'new'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'SERVER_PROTOCOL'"
op|','
string|"'HTTP/1.1'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'gatherResults'
op|'('
op|'['
name|'old'
op|','
name|'new'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_remoteAddr
dedent|''
name|'def'
name|'test_remoteAddr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'REMOTE_ADDR\'} key of the C{environ} C{dict} passed to the\n        application contains the address of the client making the request.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'REMOTE_ADDR'"
op|','
string|"'192.168.1.1'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_headers
dedent|''
name|'def'
name|'test_headers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        HTTP request headers are copied into the C{environ} C{dict} passed to\n        the application with a C{HTTP_} prefix added to their names.\n        """'
newline|'\n'
name|'singleValue'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
nl|'\n'
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|')'
op|','
op|'('
string|"'baz'"
op|','
string|"'quux'"
op|')'
op|']'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'environ'
op|'['
string|"'HTTP_FOO'"
op|']'
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'environ'
op|'['
string|"'HTTP_BAZ'"
op|']'
op|','
string|"'quux'"
op|')'
newline|'\n'
dedent|''
name|'singleValue'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'multiValue'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
nl|'\n'
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|')'
op|','
op|'('
string|"'foo'"
op|','
string|"'baz'"
op|')'
op|']'
op|')'
newline|'\n'
name|'multiValue'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'HTTP_FOO'"
op|','
string|"'bar,baz'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'withHyphen'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
nl|'\n'
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|'('
string|"'foo-bar'"
op|','
string|"'baz'"
op|')'
op|']'
op|')'
newline|'\n'
name|'withHyphen'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'HTTP_FOO_BAR'"
op|','
string|"'baz'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'multiLine'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
nl|'\n'
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|'('
string|"'foo'"
op|','
string|"'bar\\n\\tbaz'"
op|')'
op|']'
op|')'
newline|'\n'
name|'multiLine'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'HTTP_FOO'"
op|','
string|"'bar \\tbaz'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'gatherResults'
op|'('
op|'['
name|'singleValue'
op|','
name|'multiValue'
op|','
name|'withHyphen'
op|','
name|'multiLine'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_wsgiVersion
dedent|''
name|'def'
name|'test_wsgiVersion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'wsgi.version\'} key of the C{environ} C{dict} passed to the\n        application has the value C{(1, 0)} indicating that this is a WSGI 1.0\n        container.\n        """'
newline|'\n'
name|'versionDeferred'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'versionDeferred'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'wsgi.version'"
op|','
op|'('
number|'1'
op|','
number|'0'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'versionDeferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_wsgiRunOnce
dedent|''
name|'def'
name|'test_wsgiRunOnce'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'wsgi.run_once\'} key of the C{environ} C{dict} passed to the\n        application is set to C{False}.\n        """'
newline|'\n'
name|'once'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'once'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'wsgi.run_once'"
op|','
name|'False'
op|')'
op|')'
newline|'\n'
name|'return'
name|'once'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_wsgiMultithread
dedent|''
name|'def'
name|'test_wsgiMultithread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'wsgi.multithread\'} key of the C{environ} C{dict} passed to the\n        application is set to C{True}.\n        """'
newline|'\n'
name|'thread'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'thread'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'wsgi.multithread'"
op|','
name|'True'
op|')'
op|')'
newline|'\n'
name|'return'
name|'thread'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_wsgiMultiprocess
dedent|''
name|'def'
name|'test_wsgiMultiprocess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'wsgi.multiprocess\'} key of the C{environ} C{dict} passed to the\n        application is set to C{False}.\n        """'
newline|'\n'
name|'process'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'process'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'wsgi.multiprocess'"
op|','
name|'False'
op|')'
op|')'
newline|'\n'
name|'return'
name|'process'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_wsgiURLScheme
dedent|''
name|'def'
name|'test_wsgiURLScheme'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'wsgi.url_scheme\'} key of the C{environ} C{dict} passed to the\n        application has the request URL scheme.\n        """'
newline|'\n'
comment|'# XXX Does this need to be different if the request is for an absolute'
nl|'\n'
comment|'# URL?'
nl|'\n'
DECL|function|channelFactory
name|'def'
name|'channelFactory'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'channel'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'transport'
op|'='
name|'DummyChannel'
op|'.'
name|'SSL'
op|'('
op|')'
newline|'\n'
name|'return'
name|'channel'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'channelFactory'
op|'='
name|'DummyChannel'
newline|'\n'
name|'httpDeferred'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'httpDeferred'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'wsgi.url_scheme'"
op|','
string|"'http'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'channelFactory'
op|'='
name|'channelFactory'
newline|'\n'
name|'httpsDeferred'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'httpsDeferred'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'environKeyEqual'
op|'('
string|"'wsgi.url_scheme'"
op|','
string|"'https'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'gatherResults'
op|'('
op|'['
name|'httpDeferred'
op|','
name|'httpsDeferred'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_wsgiErrors
dedent|''
name|'def'
name|'test_wsgiErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{\'wsgi.errors\'} key of the C{environ} C{dict} passed to the\n        application is a file-like object (as defined in the U{Input and Errors\n        Streams<http://www.python.org/dev/peps/pep-0333/#input-and-error-streams>}\n        section of PEP 333) which converts bytes written to it into events for\n        the logging system.\n        """'
newline|'\n'
name|'events'
op|'='
op|'['
op|']'
newline|'\n'
name|'addObserver'
op|'('
name|'events'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'removeObserver'
op|','
name|'events'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
name|'errors'
op|'='
name|'self'
op|'.'
name|'render'
op|'('
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
DECL|function|cbErrors
name|'def'
name|'cbErrors'
op|'('
op|'('
name|'environ'
op|','
name|'startApplication'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'errors'
op|'='
name|'environ'
op|'['
string|"'wsgi.errors'"
op|']'
newline|'\n'
name|'errors'
op|'.'
name|'write'
op|'('
string|"'some message\\n'"
op|')'
newline|'\n'
name|'errors'
op|'.'
name|'writelines'
op|'('
op|'['
string|"'another\\nmessage\\n'"
op|']'
op|')'
newline|'\n'
name|'errors'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'events'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
op|'('
string|"'some message\\n'"
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'events'
op|'['
number|'0'
op|']'
op|'['
string|"'system'"
op|']'
op|','
string|"'wsgi'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'events'
op|'['
number|'0'
op|']'
op|'['
string|"'isError'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'events'
op|'['
number|'1'
op|']'
op|'['
string|"'message'"
op|']'
op|','
op|'('
string|"'another\\nmessage\\n'"
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'events'
op|'['
number|'1'
op|']'
op|'['
string|"'system'"
op|']'
op|','
string|"'wsgi'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'events'
op|'['
number|'1'
op|']'
op|'['
string|"'isError'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'events'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'errors'
op|'.'
name|'addCallback'
op|'('
name|'cbErrors'
op|')'
newline|'\n'
name|'return'
name|'errors'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InputStreamTestMixin
dedent|''
dedent|''
name|'class'
name|'InputStreamTestMixin'
op|'('
name|'WSGITestsMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mixin for L{TestCase} subclasses which defines a number of tests against\n    L{_InputStream}.  The subclass is expected to create a file-like object to\n    be wrapped by an L{_InputStream} under test.\n    """'
newline|'\n'
DECL|member|getFileType
name|'def'
name|'getFileType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
string|'"%s.getFile must be implemented"'
op|'%'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_renderAndReturnReaderResult
dedent|''
name|'def'
name|'_renderAndReturnReaderResult'
op|'('
name|'self'
op|','
name|'reader'
op|','
name|'content'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'contentType'
op|'='
name|'self'
op|'.'
name|'getFileType'
op|'('
op|')'
newline|'\n'
DECL|class|CustomizedRequest
name|'class'
name|'CustomizedRequest'
op|'('
name|'Request'
op|')'
op|':'
newline|'\n'
DECL|member|gotLength
indent|'            '
name|'def'
name|'gotLength'
op|'('
name|'self'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
comment|'# Always allocate a file of the specified type, instead of'
nl|'\n'
comment|'# using the base behavior of selecting one depending on the'
nl|'\n'
comment|'# length.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'content'
op|'='
name|'contentType'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|appFactoryFactory
dedent|''
dedent|''
name|'def'
name|'appFactoryFactory'
op|'('
name|'reader'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|function|applicationFactory
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'                '
name|'def'
name|'application'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'environ'
op|','
name|'startResponse'
op|'='
name|'args'
newline|'\n'
name|'result'
op|'.'
name|'callback'
op|'('
name|'reader'
op|'('
name|'environ'
op|'['
string|"'wsgi.input'"
op|']'
op|')'
op|')'
newline|'\n'
name|'startResponse'
op|'('
string|"'200 OK'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'return'
name|'iter'
op|'('
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
dedent|''
name|'return'
name|'result'
op|','
name|'applicationFactory'
newline|'\n'
dedent|''
name|'d'
op|','
name|'appFactory'
op|'='
name|'appFactoryFactory'
op|'('
name|'reader'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'CustomizedRequest'
op|','
name|'appFactory'
op|','
name|'DummyChannel'
op|','
nl|'\n'
string|"'PUT'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'content'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readAll
dedent|''
name|'def'
name|'test_readAll'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.read} with no arguments returns the entire input\n        stream.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"some bytes are here"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
name|'lambda'
name|'input'
op|':'
name|'input'
op|'.'
name|'read'
op|'('
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readSome
dedent|''
name|'def'
name|'test_readSome'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.read} with an integer returns that many bytes\n        from the input stream, as long as it is less than or equal to the total\n        number of bytes available.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"hello, world."'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
name|'lambda'
name|'input'
op|':'
name|'input'
op|'.'
name|'read'
op|'('
number|'3'
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"hel"'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readMoreThan
dedent|''
name|'def'
name|'test_readMoreThan'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.read} with an integer that is greater than the\n        total number of bytes in the input stream returns all bytes in the\n        input stream.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"some bytes are here"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
nl|'\n'
name|'lambda'
name|'input'
op|':'
name|'input'
op|'.'
name|'read'
op|'('
name|'len'
op|'('
name|'bytes'
op|')'
op|'+'
number|'3'
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readTwice
dedent|''
name|'def'
name|'test_readTwice'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.read} a second time returns bytes starting from\n        the position after the last byte returned by the previous read.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"some bytes, hello"'
newline|'\n'
DECL|function|read
name|'def'
name|'read'
op|'('
name|'input'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'input'
op|'.'
name|'read'
op|'('
number|'3'
op|')'
newline|'\n'
name|'return'
name|'input'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
name|'read'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'bytes'
op|'['
number|'3'
op|':'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readNone
dedent|''
name|'def'
name|'test_readNone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.read} with C{None} as an argument returns all\n        bytes in the input stream.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"the entire stream"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
nl|'\n'
name|'lambda'
name|'input'
op|':'
name|'input'
op|'.'
name|'read'
op|'('
name|'None'
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readNegative
dedent|''
name|'def'
name|'test_readNegative'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.read} with a negative integer as an argument\n        returns all bytes in the input stream.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"all of the input"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
nl|'\n'
name|'lambda'
name|'input'
op|':'
name|'input'
op|'.'
name|'read'
op|'('
op|'-'
number|'1'
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readline
dedent|''
name|'def'
name|'test_readline'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.readline} with no argument returns one line from\n        the input stream.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"hello\\nworld"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
nl|'\n'
name|'lambda'
name|'input'
op|':'
name|'input'
op|'.'
name|'readline'
op|'('
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"hello\\n"'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readlineSome
dedent|''
name|'def'
name|'test_readlineSome'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.readline} with an integer returns at most that\n        many bytes, even if it is not enough to make up a complete line.\n\n        COMPATIBILITY NOTE: the size argument is excluded from the WSGI\n        specification, but is provided here anyhow, because useful libraries\n        such as python stdlib\'s cgi.py assume their input file-like-object\n        supports readline with a size argument. If you use it, be aware your\n        application may not be portable to other conformant WSGI servers.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"goodbye\\nworld"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
nl|'\n'
name|'lambda'
name|'input'
op|':'
name|'input'
op|'.'
name|'readline'
op|'('
number|'3'
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"goo"'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readlineMoreThan
dedent|''
name|'def'
name|'test_readlineMoreThan'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.readline} with an integer which is greater than\n        the number of bytes in the next line returns only the next line.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"some lines\\nof text"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
nl|'\n'
name|'lambda'
name|'input'
op|':'
name|'input'
op|'.'
name|'readline'
op|'('
number|'20'
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"some lines\\n"'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readlineTwice
dedent|''
name|'def'
name|'test_readlineTwice'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.readline} a second time returns the line\n        following the line returned by the first call.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"first line\\nsecond line\\nlast line"'
newline|'\n'
DECL|function|readline
name|'def'
name|'readline'
op|'('
name|'input'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'input'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
name|'return'
name|'input'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
name|'readline'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"second line\\n"'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readlineNone
dedent|''
name|'def'
name|'test_readlineNone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.readline} with C{None} as an argument returns\n        one line from the input stream.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"this is one line\\nthis is another line"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
nl|'\n'
name|'lambda'
name|'input'
op|':'
name|'input'
op|'.'
name|'readline'
op|'('
name|'None'
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"this is one line\\n"'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readlineNegative
dedent|''
name|'def'
name|'test_readlineNegative'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.readline} with a negative integer as an argument\n        returns one line from the input stream.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"input stream line one\\nline two"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
nl|'\n'
name|'lambda'
name|'input'
op|':'
name|'input'
op|'.'
name|'readline'
op|'('
op|'-'
number|'1'
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"input stream line one\\n"'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readlines
dedent|''
name|'def'
name|'test_readlines'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.readlines} with no arguments returns a list of\n        all lines from the input stream.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"alice\\nbob\\ncarol"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
nl|'\n'
name|'lambda'
name|'input'
op|':'
name|'input'
op|'.'
name|'readlines'
op|'('
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
op|'['
string|'"alice\\n"'
op|','
string|'"bob\\n"'
op|','
string|'"carol"'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readlinesSome
dedent|''
name|'def'
name|'test_readlinesSome'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.readlines} with an integer as an argument\n        returns a list of lines from the input stream with the argument serving\n        as an approximate bound on the total number of bytes to read.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"123\\n456\\n789\\n0"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
nl|'\n'
name|'lambda'
name|'input'
op|':'
name|'input'
op|'.'
name|'readlines'
op|'('
number|'5'
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
DECL|function|cbLines
name|'def'
name|'cbLines'
op|'('
name|'lines'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we got enough lines to make 5 bytes.  Anything beyond'
nl|'\n'
comment|'# that is fine too.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'lines'
op|'['
op|':'
number|'2'
op|']'
op|','
op|'['
string|'"123\\n"'
op|','
string|'"456\\n"'
op|']'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbLines'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readlinesMoreThan
dedent|''
name|'def'
name|'test_readlinesMoreThan'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.readlines} with an integer which is greater than\n        the total number of bytes in the input stream returns a list of all\n        lines from the input.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"one potato\\ntwo potato\\nthree potato"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
nl|'\n'
name|'lambda'
name|'input'
op|':'
name|'input'
op|'.'
name|'readlines'
op|'('
number|'100'
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|','
nl|'\n'
op|'['
string|'"one potato\\n"'
op|','
string|'"two potato\\n"'
op|','
string|'"three potato"'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readlinesAfterRead
dedent|''
name|'def'
name|'test_readlinesAfterRead'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.readlines} after a call to L{_InputStream.read}\n        returns lines starting at the byte after the last byte returned by the\n        C{read} call.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"hello\\nworld\\nfoo"'
newline|'\n'
DECL|function|readlines
name|'def'
name|'readlines'
op|'('
name|'input'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'input'
op|'.'
name|'read'
op|'('
number|'7'
op|')'
newline|'\n'
name|'return'
name|'input'
op|'.'
name|'readlines'
op|'('
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
name|'readlines'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
op|'['
string|'"orld\\n"'
op|','
string|'"foo"'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readlinesNone
dedent|''
name|'def'
name|'test_readlinesNone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.readlines} with C{None} as an argument returns\n        all lines from the input.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"one fish\\ntwo fish\\n"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
nl|'\n'
name|'lambda'
name|'input'
op|':'
name|'input'
op|'.'
name|'readlines'
op|'('
name|'None'
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
op|'['
string|'"one fish\\n"'
op|','
string|'"two fish\\n"'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readlinesNegative
dedent|''
name|'def'
name|'test_readlinesNegative'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{_InputStream.readlines} with a negative integer as an\n        argument returns a list of all lines from the input.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"red fish\\nblue fish\\n"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
nl|'\n'
name|'lambda'
name|'input'
op|':'
name|'input'
op|'.'
name|'readlines'
op|'('
op|'-'
number|'1'
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
op|'['
string|'"red fish\\n"'
op|','
string|'"blue fish\\n"'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_iterable
dedent|''
name|'def'
name|'test_iterable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Iterating over L{_InputStream} produces lines from the input stream.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"green eggs\\nand ham\\n"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
name|'lambda'
name|'input'
op|':'
name|'list'
op|'('
name|'input'
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
op|'['
string|'"green eggs\\n"'
op|','
string|'"and ham\\n"'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_iterableAfterRead
dedent|''
name|'def'
name|'test_iterableAfterRead'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Iterating over L{_InputStream} after calling L{_InputStream.read}\n        produces lines from the input stream starting from the first byte after\n        the last byte returned by the C{read} call.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'"green eggs\\nand ham\\n"'
newline|'\n'
DECL|function|iterate
name|'def'
name|'iterate'
op|'('
name|'input'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'input'
op|'.'
name|'read'
op|'('
number|'3'
op|')'
newline|'\n'
name|'return'
name|'list'
op|'('
name|'input'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'_renderAndReturnReaderResult'
op|'('
name|'iterate'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
op|'['
string|'"en eggs\\n"'
op|','
string|'"and ham\\n"'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|InputStreamStringIOTests
dedent|''
dedent|''
name|'class'
name|'InputStreamStringIOTests'
op|'('
name|'InputStreamTestMixin'
op|','
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{_InputStream} when it is wrapped around a L{StringIO.StringIO}.\n    """'
newline|'\n'
DECL|member|getFileType
name|'def'
name|'getFileType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'StringIO'
op|'.'
name|'StringIO'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|InputStreamCStringIOTests
dedent|''
dedent|''
name|'class'
name|'InputStreamCStringIOTests'
op|'('
name|'InputStreamTestMixin'
op|','
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{_InputStream} when it is wrapped around a\n    L{cStringIO.StringIO}.\n    """'
newline|'\n'
DECL|member|getFileType
name|'def'
name|'getFileType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'cStringIO'
op|'.'
name|'StringIO'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|InputStreamTemporaryFileTests
dedent|''
dedent|''
name|'class'
name|'InputStreamTemporaryFileTests'
op|'('
name|'InputStreamTestMixin'
op|','
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{_InputStream} when it is wrapped around a L{tempfile.TemporaryFile}.\n    """'
newline|'\n'
DECL|member|getFileType
name|'def'
name|'getFileType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'tempfile'
op|'.'
name|'TemporaryFile'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StartResponseTests
dedent|''
dedent|''
name|'class'
name|'StartResponseTests'
op|'('
name|'WSGITestsMixin'
op|','
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the I{start_response} parameter passed to the application object\n    by L{WSGIResource}.\n    """'
newline|'\n'
DECL|member|test_status
name|'def'
name|'test_status'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The response status passed to the I{start_response} callable is written\n        as the status of the response to the request.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|applicationFactory
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'            '
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'startResponse'
op|'('
string|"'107 Strange message'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'return'
name|'iter'
op|'('
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'written'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
nl|'\n'
string|"'HTTP/1.1 107 Strange message'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'channel'
op|','
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_headersTest
dedent|''
name|'def'
name|'_headersTest'
op|'('
name|'self'
op|','
name|'appHeaders'
op|','
name|'expectedHeaders'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that if the response headers given by C{appHeaders} are passed\n        to the I{start_response} callable, then the response header lines given\n        by C{expectedHeaders} plus I{Server} and I{Date} header lines are\n        included in the response.\n        """'
newline|'\n'
comment|'# Make the Date header value deterministic'
nl|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'http'
op|','
string|"'datetimeToString'"
op|','
name|'lambda'
op|':'
string|"'Tuesday'"
op|')'
newline|'\n'
nl|'\n'
name|'channel'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|applicationFactory
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'            '
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'startResponse'
op|'('
string|"'200 OK'"
op|','
name|'appHeaders'
op|')'
newline|'\n'
name|'return'
name|'iter'
op|'('
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'='
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'written'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'headers'
op|','
name|'rest'
op|'='
name|'response'
op|'.'
name|'split'
op|'('
string|"'\\r\\n\\r\\n'"
op|','
number|'1'
op|')'
newline|'\n'
name|'headerLines'
op|'='
name|'headers'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'headerLines'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'allExpectedHeaders'
op|'='
name|'expectedHeaders'
op|'+'
op|'['
nl|'\n'
string|"'Date: Tuesday'"
op|','
nl|'\n'
string|"'Server: '"
op|'+'
name|'version'
op|','
nl|'\n'
string|"'Transfer-Encoding: chunked'"
op|']'
newline|'\n'
name|'allExpectedHeaders'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'headerLines'
op|','
name|'allExpectedHeaders'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'channel'
op|','
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_headers
dedent|''
name|'def'
name|'test_headers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The headers passed to the I{start_response} callable are included in\n        the response as are the required I{Date} and I{Server} headers and the\n        necessary connection (hop to hop) header I{Transfer-Encoding}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_headersTest'
op|'('
nl|'\n'
op|'['
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|')'
op|','
op|'('
string|"'baz'"
op|','
string|"'quux'"
op|')'
op|']'
op|','
nl|'\n'
op|'['
string|"'Baz: quux'"
op|','
string|"'Foo: bar'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_applicationProvidedContentType
dedent|''
name|'def'
name|'test_applicationProvidedContentType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If I{Content-Type} is included in the headers passed to the\n        I{start_response} callable, one I{Content-Type} header is included in\n        the response.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_headersTest'
op|'('
nl|'\n'
op|'['
op|'('
string|"'content-type'"
op|','
string|"'monkeys are great'"
op|')'
op|']'
op|','
nl|'\n'
op|'['
string|"'Content-Type: monkeys are great'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_applicationProvidedServerAndDate
dedent|''
name|'def'
name|'test_applicationProvidedServerAndDate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If either I{Server} or I{Date} is included in the headers passed to the\n        I{start_response} callable, they are disregarded.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_headersTest'
op|'('
nl|'\n'
op|'['
op|'('
string|"'server'"
op|','
string|"'foo'"
op|')'
op|','
op|'('
string|"'Server'"
op|','
string|"'foo'"
op|')'
op|','
nl|'\n'
op|'('
string|"'date'"
op|','
string|"'bar'"
op|')'
op|','
op|'('
string|"'dATE'"
op|','
string|"'bar'"
op|')'
op|']'
op|','
nl|'\n'
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_delayedUntilReturn
dedent|''
name|'def'
name|'test_delayedUntilReturn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Nothing is written in response to a request when the I{start_response}\n        callable is invoked.  If the iterator returned by the application\n        object produces only empty strings, the response is written after the\n        last element is produced.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'intermediateValues'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|record
name|'def'
name|'record'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'intermediateValues'
op|'.'
name|'append'
op|'('
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'written'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|applicationFactory
dedent|''
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'            '
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'startResponse'
op|'('
string|"'200 OK'"
op|','
op|'['
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|')'
op|','
op|'('
string|"'baz'"
op|','
string|"'quux'"
op|')'
op|']'
op|')'
newline|'\n'
name|'yield'
string|"''"
newline|'\n'
name|'record'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'intermediateValues'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'channel'
op|','
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_delayedUntilContent
dedent|''
name|'def'
name|'test_delayedUntilContent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Nothing is written in response to a request when the I{start_response}\n        callable is invoked.  Once a non-empty string has been produced by the\n        iterator returned by the application object, the response status and\n        headers are written.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'intermediateValues'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|record
name|'def'
name|'record'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'intermediateValues'
op|'.'
name|'append'
op|'('
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'written'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|applicationFactory
dedent|''
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'            '
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'startResponse'
op|'('
string|"'200 OK'"
op|','
op|'['
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|')'
op|']'
op|')'
newline|'\n'
name|'yield'
string|"''"
newline|'\n'
name|'record'
op|'('
op|')'
newline|'\n'
name|'yield'
string|"'foo'"
newline|'\n'
name|'record'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'intermediateValues'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'intermediateValues'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'channel'
op|','
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_content
dedent|''
name|'def'
name|'test_content'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Content produced by the iterator returned by the application object is\n        written to the request as it is produced.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'intermediateValues'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|record
name|'def'
name|'record'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'intermediateValues'
op|'.'
name|'append'
op|'('
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'written'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|applicationFactory
dedent|''
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'            '
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'startResponse'
op|'('
string|"'200 OK'"
op|','
op|'['
op|'('
string|"'content-length'"
op|','
string|"'6'"
op|')'
op|']'
op|')'
newline|'\n'
name|'yield'
string|"'foo'"
newline|'\n'
name|'record'
op|'('
op|')'
newline|'\n'
name|'yield'
string|"'bar'"
newline|'\n'
name|'record'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getContentFromResponse'
op|'('
name|'intermediateValues'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getContentFromResponse'
op|'('
name|'intermediateValues'
op|'['
number|'1'
op|']'
op|')'
op|','
nl|'\n'
string|"'foobar'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'channel'
op|','
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleStartResponse
dedent|''
name|'def'
name|'test_multipleStartResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the I{start_response} callable is invoked multiple times before a\n        data for the response body is produced, the values from the last call\n        are used.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|applicationFactory
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'            '
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'startResponse'
op|'('
string|"'100 Foo'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'startResponse'
op|'('
string|"'200 Bar'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'return'
name|'iter'
op|'('
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'written'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
nl|'\n'
string|"'HTTP/1.1 200 Bar\\r\\n'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'channel'
op|','
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_startResponseWithException
dedent|''
name|'def'
name|'test_startResponseWithException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the I{start_response} callable is invoked with a third positional\n        argument before the status and headers have been written to the\n        response, the status and headers become the newly supplied values.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|applicationFactory
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'            '
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'startResponse'
op|'('
string|"'100 Foo'"
op|','
op|'['
op|']'
op|','
op|'('
name|'Exception'
op|','
name|'Exception'
op|'('
string|'"foo"'
op|')'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'return'
name|'iter'
op|'('
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'written'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
nl|'\n'
string|"'HTTP/1.1 100 Foo\\r\\n'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'channel'
op|','
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_startResponseWithExceptionTooLate
dedent|''
name|'def'
name|'test_startResponseWithExceptionTooLate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the I{start_response} callable is invoked with a third positional\n        argument after the status and headers have been written to the\n        response, the supplied I{exc_info} values are re-raised to the\n        application.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|SomeException
name|'class'
name|'SomeException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SomeException'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
DECL|variable|excInfo
indent|'            '
name|'excInfo'
op|'='
name|'exc_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'reraised'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|applicationFactory
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'            '
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'startResponse'
op|'('
string|"'200 OK'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'yield'
string|"'foo'"
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'startResponse'
op|'('
string|"'500 ERR'"
op|','
op|'['
op|']'
op|','
name|'excInfo'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                    '
name|'reraised'
op|'.'
name|'append'
op|'('
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'written'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
nl|'\n'
string|"'HTTP/1.1 200 OK\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'reraised'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'excInfo'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'reraised'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|','
name|'excInfo'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'reraised'
op|'['
number|'0'
op|']'
op|'['
number|'2'
op|']'
op|'.'
name|'tb_next'
op|','
name|'excInfo'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'channel'
op|','
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_write
dedent|''
name|'def'
name|'test_write'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        I{start_response} returns the I{write} callable which can be used to\n        write bytes to the response body without buffering.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'intermediateValues'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|record
name|'def'
name|'record'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'intermediateValues'
op|'.'
name|'append'
op|'('
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'written'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|applicationFactory
dedent|''
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'            '
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'write'
op|'='
name|'startResponse'
op|'('
string|"'100 Foo'"
op|','
op|'['
op|'('
string|"'content-length'"
op|','
string|"'6'"
op|')'
op|']'
op|')'
newline|'\n'
name|'write'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'record'
op|'('
op|')'
newline|'\n'
name|'write'
op|'('
string|"'bar'"
op|')'
newline|'\n'
name|'record'
op|'('
op|')'
newline|'\n'
name|'return'
name|'iter'
op|'('
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getContentFromResponse'
op|'('
name|'intermediateValues'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getContentFromResponse'
op|'('
name|'intermediateValues'
op|'['
number|'1'
op|']'
op|')'
op|','
nl|'\n'
string|"'foobar'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'channel'
op|','
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ApplicationTests
dedent|''
dedent|''
name|'class'
name|'ApplicationTests'
op|'('
name|'WSGITestsMixin'
op|','
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for things which are done to the application object and the iterator\n    it returns.\n    """'
newline|'\n'
DECL|member|enableThreads
name|'def'
name|'enableThreads'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'='
name|'ThreadPool'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_close
dedent|''
name|'def'
name|'test_close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the application object returns an iterator which also has a I{close}\n        method, that method is called after iteration is complete.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|Result
name|'class'
name|'Result'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'open'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'self'
op|'.'
name|'open'
op|':'
newline|'\n'
indent|'                        '
name|'yield'
name|'str'
op|'('
name|'i'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
dedent|''
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'open'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'result'
op|'='
name|'Result'
op|'('
op|')'
newline|'\n'
DECL|function|applicationFactory
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'            '
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'startResponse'
op|'('
string|"'200 OK'"
op|','
op|'['
op|'('
string|"'content-length'"
op|','
string|"'3'"
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getContentFromResponse'
op|'('
nl|'\n'
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'written'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
op|','
nl|'\n'
string|"'012'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'result'
op|'.'
name|'open'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'channel'
op|','
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_applicationCalledInThread
dedent|''
name|'def'
name|'test_applicationCalledInThread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The application object is invoked and iterated in a thread which is not\n        the reactor thread.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'enableThreads'
op|'('
op|')'
newline|'\n'
name|'invoked'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|applicationFactory
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'            '
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
DECL|function|result
indent|'                '
name|'def'
name|'result'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'invoked'
op|'.'
name|'append'
op|'('
name|'get_ident'
op|'('
op|')'
op|')'
newline|'\n'
name|'yield'
name|'str'
op|'('
name|'i'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'invoked'
op|'.'
name|'append'
op|'('
name|'get_ident'
op|'('
op|')'
op|')'
newline|'\n'
name|'startResponse'
op|'('
string|"'200 OK'"
op|','
op|'['
op|'('
string|"'content-length'"
op|','
string|"'3'"
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'result'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'get_ident'
op|'('
op|')'
op|','
name|'invoked'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'set'
op|'('
name|'invoked'
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
nl|'\n'
name|'DummyChannel'
op|','
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_writeCalledFromThread
dedent|''
name|'def'
name|'test_writeCalledFromThread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The I{write} callable returned by I{start_response} calls the request\'s\n        C{write} method in the reactor thread.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'enableThreads'
op|'('
op|')'
newline|'\n'
name|'invoked'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|class|ThreadVerifier
name|'class'
name|'ThreadVerifier'
op|'('
name|'Request'
op|')'
op|':'
newline|'\n'
DECL|member|write
indent|'            '
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'invoked'
op|'.'
name|'append'
op|'('
name|'get_ident'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'Request'
op|'.'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
DECL|function|applicationFactory
dedent|''
dedent|''
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'            '
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'write'
op|'='
name|'startResponse'
op|'('
string|"'200 OK'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'write'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'return'
name|'iter'
op|'('
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
name|'ThreadVerifier'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'invoked'
op|')'
op|','
name|'set'
op|'('
op|'['
name|'get_ident'
op|'('
op|')'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
name|'DummyChannel'
op|','
nl|'\n'
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_iteratedValuesWrittenFromThread
dedent|''
name|'def'
name|'test_iteratedValuesWrittenFromThread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Strings produced by the iterator returned by the application object are\n        written to the request in the reactor thread.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'enableThreads'
op|'('
op|')'
newline|'\n'
name|'invoked'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|class|ThreadVerifier
name|'class'
name|'ThreadVerifier'
op|'('
name|'Request'
op|')'
op|':'
newline|'\n'
DECL|member|write
indent|'            '
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'invoked'
op|'.'
name|'append'
op|'('
name|'get_ident'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'Request'
op|'.'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
DECL|function|applicationFactory
dedent|''
dedent|''
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'            '
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'startResponse'
op|'('
string|"'200 OK'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'yield'
string|"'foo'"
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
name|'ThreadVerifier'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'invoked'
op|')'
op|','
name|'set'
op|'('
op|'['
name|'get_ident'
op|'('
op|')'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
name|'DummyChannel'
op|','
nl|'\n'
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_statusWrittenFromThread
dedent|''
name|'def'
name|'test_statusWrittenFromThread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The response status is set on the request object in the reactor thread.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'enableThreads'
op|'('
op|')'
newline|'\n'
name|'invoked'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|class|ThreadVerifier
name|'class'
name|'ThreadVerifier'
op|'('
name|'Request'
op|')'
op|':'
newline|'\n'
DECL|member|setResponseCode
indent|'            '
name|'def'
name|'setResponseCode'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'invoked'
op|'.'
name|'append'
op|'('
name|'get_ident'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'Request'
op|'.'
name|'setResponseCode'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|function|applicationFactory
dedent|''
dedent|''
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'            '
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'startResponse'
op|'('
string|"'200 OK'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'return'
name|'iter'
op|'('
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
name|'ThreadVerifier'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'invoked'
op|')'
op|','
name|'set'
op|'('
op|'['
name|'get_ident'
op|'('
op|')'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
name|'DummyChannel'
op|','
nl|'\n'
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectionClosedDuringIteration
dedent|''
name|'def'
name|'test_connectionClosedDuringIteration'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the request connection is lost while the application object is being\n        iterated, iteration is stopped.\n        """'
newline|'\n'
DECL|class|UnreliableConnection
name|'class'
name|'UnreliableConnection'
op|'('
name|'Request'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            This is a request which pretends its connection is lost immediately\n            after the first write is done to it.\n            """'
newline|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'connectionLost'
op|'('
name|'Failure'
op|'('
name|'ConnectionLost'
op|'('
string|'"No more connection"'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'badIter'
op|'='
name|'False'
newline|'\n'
DECL|function|appIter
name|'def'
name|'appIter'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
string|'"foo"'
newline|'\n'
name|'self'
op|'.'
name|'badIter'
op|'='
name|'True'
newline|'\n'
name|'raise'
name|'Exception'
op|'('
string|'"Should not have gotten here"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|applicationFactory
dedent|''
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|application
indent|'            '
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'startResponse'
op|'('
string|"'200 OK'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'return'
name|'appIter'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
name|'UnreliableConnection'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'badIter'
op|','
string|'"Should not have resumed iteration"'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
name|'DummyChannel'
op|','
nl|'\n'
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ConnectionLost'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_internalServerErrorTest
dedent|''
name|'def'
name|'_internalServerErrorTest'
op|'('
name|'self'
op|','
name|'application'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'channel'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|applicationFactory
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'RuntimeError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'written'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
nl|'\n'
string|"'HTTP/1.1 500 Internal Server Error'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactory'
op|','
name|'applicationFactory'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'channel'
op|','
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_applicationExceptionBeforeStartResponse
dedent|''
name|'def'
name|'test_applicationExceptionBeforeStartResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the application raises an exception before calling I{start_response}\n        then the response status is I{500} and the exception is logged.\n        """'
newline|'\n'
DECL|function|application
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"This application had some error."'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_internalServerErrorTest'
op|'('
name|'application'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_applicationExceptionAfterStartResponse
dedent|''
name|'def'
name|'test_applicationExceptionAfterStartResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the application calls I{start_response} but then raises an exception\n        before any data is written to the response then the response status is\n        I{500} and the exception is logged.\n        """'
newline|'\n'
DECL|function|application
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'startResponse'
op|'('
string|"'200 OK'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'raise'
name|'RuntimeError'
op|'('
string|'"This application had some error."'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_internalServerErrorTest'
op|'('
name|'application'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_connectionClosedTest
dedent|''
name|'def'
name|'_connectionClosedTest'
op|'('
name|'self'
op|','
name|'application'
op|','
name|'responseContent'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'channel'
op|'='
name|'DummyChannel'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|applicationFactory
name|'def'
name|'applicationFactory'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|','
name|'requestFactory'
op|'='
name|'self'
op|'.'
name|'requestFactoryFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Capture the request so we can disconnect it later on.'
nl|'\n'
name|'requests'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|requestFactoryWrapper
name|'def'
name|'requestFactoryWrapper'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'requests'
op|'.'
name|'append'
op|'('
name|'requestFactory'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|')'
newline|'\n'
name|'return'
name|'requests'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|function|ebRendered
dedent|''
name|'def'
name|'ebRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'RuntimeError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'response'
op|'='
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'written'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'response'
op|'.'
name|'startswith'
op|'('
string|"'HTTP/1.1 200 OK'"
op|')'
op|')'
newline|'\n'
comment|'# Chunked transfer-encoding makes this a little messy.'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'responseContent'
op|','
name|'response'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'ebRendered'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'lowLevelRender'
op|'('
nl|'\n'
name|'requestFactoryWrapper'
op|','
name|'applicationFactory'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'channel'
op|','
string|"'GET'"
op|','
string|"'1.1'"
op|','
op|'['
op|']'
op|','
op|'['
string|"''"
op|']'
op|','
name|'None'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# By now the connection should be closed.'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'channel'
op|'.'
name|'transport'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
comment|'# Give it a little push to go the rest of the way.'
nl|'\n'
name|'requests'
op|'['
number|'0'
op|']'
op|'.'
name|'connectionLost'
op|'('
name|'Failure'
op|'('
name|'ConnectionLost'
op|'('
string|'"All gone"'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_applicationExceptionAfterWrite
dedent|''
name|'def'
name|'test_applicationExceptionAfterWrite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the application raises an exception after the response status has\n        already been sent then the connection is closed and the exception is\n        logged.\n        """'
newline|'\n'
name|'responseContent'
op|'='
op|'('
nl|'\n'
string|"'Some bytes, triggering the server to start sending the response'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|application
name|'def'
name|'application'
op|'('
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'startResponse'
op|'('
string|"'200 OK'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'yield'
name|'responseContent'
newline|'\n'
name|'raise'
name|'RuntimeError'
op|'('
string|'"This application had some error."'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_connectionClosedTest'
op|'('
name|'application'
op|','
name|'responseContent'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_applicationCloseException
dedent|''
name|'def'
name|'test_applicationCloseException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the application returns a closeable iterator and the C{close} method\n        raises an exception when called then the connection is still closed and\n        the exception is logged.\n        """'
newline|'\n'
name|'responseContent'
op|'='
string|"'foo'"
newline|'\n'
nl|'\n'
DECL|class|Application
name|'class'
name|'Application'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'environ'
op|','
name|'startResponse'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'startResponse'
op|'('
string|"'200 OK'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'responseContent'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RuntimeError'
op|'('
string|'"This application had some error."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_connectionClosedTest'
op|'('
name|'Application'
op|','
name|'responseContent'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

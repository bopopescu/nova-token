begin_unit
comment|'# Copyright (c) 2007-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTest for L{twisted.web.proxy}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'StringTransportWithDisconnection'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'MemoryReactor'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'resource'
name|'import'
name|'Resource'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'server'
name|'import'
name|'Site'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'proxy'
name|'import'
name|'ReverseProxyResource'
op|','
name|'ProxyClientFactory'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'proxy'
name|'import'
name|'ProxyClient'
op|','
name|'ProxyRequest'
op|','
name|'ReverseProxyRequest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'test'
op|'.'
name|'test_web'
name|'import'
name|'DummyRequest'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReverseProxyResourceTestCase
name|'class'
name|'ReverseProxyResourceTestCase'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{ReverseProxyResource}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_testRender
name|'def'
name|'_testRender'
op|'('
name|'self'
op|','
name|'uri'
op|','
name|'expectedURI'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that a request pointing at C{uri} produce a new proxy connection,\n        with the path of this request pointing at C{expectedURI}.\n        """'
newline|'\n'
name|'root'
op|'='
name|'Resource'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'='
name|'MemoryReactor'
op|'('
op|')'
newline|'\n'
name|'resource'
op|'='
name|'ReverseProxyResource'
op|'('
string|'"127.0.0.1"'
op|','
number|'1234'
op|','
string|'"/path"'
op|','
name|'reactor'
op|')'
newline|'\n'
name|'root'
op|'.'
name|'putChild'
op|'('
string|"'index'"
op|','
name|'resource'
op|')'
newline|'\n'
name|'site'
op|'='
name|'Site'
op|'('
name|'root'
op|')'
newline|'\n'
nl|'\n'
name|'transport'
op|'='
name|'StringTransportWithDisconnection'
op|'('
op|')'
newline|'\n'
name|'channel'
op|'='
name|'site'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
comment|'# Clear the timeout if the tests failed'
nl|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'channel'
op|'.'
name|'connectionLost'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'channel'
op|'.'
name|'dataReceived'
op|'('
string|'"GET %s HTTP/1.1\\r\\nAccept: text/html\\r\\n\\r\\n"'
op|'%'
nl|'\n'
op|'('
name|'uri'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that one connection has been created, to the good host/port'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'reactor'
op|'.'
name|'tcpClients'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reactor'
op|'.'
name|'tcpClients'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reactor'
op|'.'
name|'tcpClients'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|','
number|'1234'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check the factory passed to the connect, and its given path'
nl|'\n'
name|'factory'
op|'='
name|'reactor'
op|'.'
name|'tcpClients'
op|'['
number|'0'
op|']'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'factory'
op|','
name|'ProxyClientFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'rest'
op|','
name|'expectedURI'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'headers'
op|'['
string|'"host"'
op|']'
op|','
string|'"127.0.0.1:1234"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_render
dedent|''
name|'def'
name|'test_render'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that L{ReverseProxyResource.render} initiates a connection to the\n        given server with a L{ProxyClientFactory} as parameter.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testRender'
op|'('
string|'"/index"'
op|','
string|'"/path"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_renderWithQuery
dedent|''
name|'def'
name|'test_renderWithQuery'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that L{ReverseProxyResource.render} passes query parameters to the\n        created factory.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testRender'
op|'('
string|'"/index?foo=bar"'
op|','
string|'"/path?foo=bar"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getChild
dedent|''
name|'def'
name|'test_getChild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{ReverseProxyResource.getChild} method should return a resource\n        instance with the same class as the originating resource, forward port\n        and host values, and update the path value with the value passed.\n        """'
newline|'\n'
name|'resource'
op|'='
name|'ReverseProxyResource'
op|'('
string|'"127.0.0.1"'
op|','
number|'1234'
op|','
string|'"/path"'
op|')'
newline|'\n'
name|'child'
op|'='
name|'resource'
op|'.'
name|'getChild'
op|'('
string|"'foo'"
op|','
name|'None'
op|')'
newline|'\n'
comment|'# The child should keep the same class'
nl|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'child'
op|','
name|'ReverseProxyResource'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'child'
op|'.'
name|'path'
op|','
string|'"/path/foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'child'
op|'.'
name|'port'
op|','
number|'1234'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'child'
op|'.'
name|'host'
op|','
string|'"127.0.0.1"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getChildWithSpecial
dedent|''
name|'def'
name|'test_getChildWithSpecial'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{ReverseProxyResource} return by C{getChild} has a path which has\n        already been quoted.\n        """'
newline|'\n'
name|'resource'
op|'='
name|'ReverseProxyResource'
op|'('
string|'"127.0.0.1"'
op|','
number|'1234'
op|','
string|'"/path"'
op|')'
newline|'\n'
name|'child'
op|'='
name|'resource'
op|'.'
name|'getChild'
op|'('
string|"' /%'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'child'
op|'.'
name|'path'
op|','
string|'"/path/%20%2F%25"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyChannel
dedent|''
dedent|''
name|'class'
name|'DummyChannel'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A dummy HTTP channel, that does nothing but holds a transport and saves\n    connection lost.\n\n    @ivar transport: the transport used by the client.\n    @ivar lostReason: the reason saved at connection lost.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Hold a reference to the transport.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'transport'
newline|'\n'
name|'self'
op|'.'
name|'lostReason'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Keep track of the connection lost reason.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'lostReason'
op|'='
name|'reason'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProxyClientTestCase
dedent|''
dedent|''
name|'class'
name|'ProxyClientTestCase'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{ProxyClient}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_parseOutHeaders
name|'def'
name|'_parseOutHeaders'
op|'('
name|'self'
op|','
name|'content'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse the headers out of some web content.\n\n        @param content: Bytes received from a web server.\n        @return: A tuple of (requestLine, headers, body). C{headers} is a dict\n            of headers, C{requestLine} is the first line (e.g. "POST /foo ...")\n            and C{body} is whatever is left.\n        """'
newline|'\n'
name|'headers'
op|','
name|'body'
op|'='
name|'content'
op|'.'
name|'split'
op|'('
string|"'\\r\\n\\r\\n'"
op|')'
newline|'\n'
name|'headers'
op|'='
name|'headers'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
newline|'\n'
name|'requestLine'
op|'='
name|'headers'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'return'
op|'('
nl|'\n'
name|'requestLine'
op|','
name|'dict'
op|'('
name|'header'
op|'.'
name|'split'
op|'('
string|"': '"
op|')'
name|'for'
name|'header'
name|'in'
name|'headers'
op|')'
op|','
name|'body'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeRequest
dedent|''
name|'def'
name|'makeRequest'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a dummy request object for the URL path.\n\n        @param path: A URL path, beginning with a slash.\n        @return: A L{DummyRequest}.\n        """'
newline|'\n'
name|'return'
name|'DummyRequest'
op|'('
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeProxyClient
dedent|''
name|'def'
name|'makeProxyClient'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'method'
op|'='
string|'"GET"'
op|','
name|'headers'
op|'='
name|'None'
op|','
nl|'\n'
name|'requestBody'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a L{ProxyClient} object used for testing.\n\n        @param request: The request to use.\n        @param method: The HTTP method to use, GET by default.\n        @param headers: The HTTP headers to use expressed as a dict. If not\n            provided, defaults to {\'accept\': \'text/html\'}.\n        @param requestBody: The body of the request. Defaults to the empty\n            string.\n        @return: A L{ProxyClient}\n        """'
newline|'\n'
name|'if'
name|'headers'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'='
op|'{'
string|'"accept"'
op|':'
string|'"text/html"'
op|'}'
newline|'\n'
dedent|''
name|'path'
op|'='
string|"'/'"
op|'+'
name|'request'
op|'.'
name|'postpath'
newline|'\n'
name|'return'
name|'ProxyClient'
op|'('
nl|'\n'
name|'method'
op|','
name|'path'
op|','
string|"'HTTP/1.0'"
op|','
name|'headers'
op|','
name|'requestBody'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectProxy
dedent|''
name|'def'
name|'connectProxy'
op|'('
name|'self'
op|','
name|'proxyClient'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connect a proxy client to a L{StringTransportWithDisconnection}.\n\n        @param proxyClient: A L{ProxyClient}.\n        @return: The L{StringTransportWithDisconnection}.\n        """'
newline|'\n'
name|'clientTransport'
op|'='
name|'StringTransportWithDisconnection'
op|'('
op|')'
newline|'\n'
name|'clientTransport'
op|'.'
name|'protocol'
op|'='
name|'proxyClient'
newline|'\n'
name|'proxyClient'
op|'.'
name|'makeConnection'
op|'('
name|'clientTransport'
op|')'
newline|'\n'
name|'return'
name|'clientTransport'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|assertForwardsHeaders
dedent|''
name|'def'
name|'assertForwardsHeaders'
op|'('
name|'self'
op|','
name|'proxyClient'
op|','
name|'requestLine'
op|','
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that C{proxyClient} sends C{headers} when it connects.\n\n        @param proxyClient: A L{ProxyClient}.\n        @param requestLine: The request line we expect to be sent.\n        @param headers: A dict of headers we expect to be sent.\n        @return: If the assertion is successful, return the request body as\n            bytes.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'connectProxy'
op|'('
name|'proxyClient'
op|')'
newline|'\n'
name|'requestContent'
op|'='
name|'proxyClient'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'receivedLine'
op|','
name|'receivedHeaders'
op|','
name|'body'
op|'='
name|'self'
op|'.'
name|'_parseOutHeaders'
op|'('
nl|'\n'
name|'requestContent'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'receivedLine'
op|','
name|'requestLine'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'receivedHeaders'
op|','
name|'headers'
op|')'
newline|'\n'
name|'return'
name|'body'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeResponseBytes
dedent|''
name|'def'
name|'makeResponseBytes'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'message'
op|','
name|'headers'
op|','
name|'body'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lines'
op|'='
op|'['
string|'"HTTP/1.0 %d %s"'
op|'%'
op|'('
name|'code'
op|','
name|'message'
op|')'
op|']'
newline|'\n'
name|'for'
name|'header'
op|','
name|'values'
name|'in'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'value'
name|'in'
name|'values'
op|':'
newline|'\n'
indent|'                '
name|'lines'
op|'.'
name|'append'
op|'('
string|'"%s: %s"'
op|'%'
op|'('
name|'header'
op|','
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'lines'
op|'.'
name|'extend'
op|'('
op|'['
string|"''"
op|','
name|'body'
op|']'
op|')'
newline|'\n'
name|'return'
string|"'\\r\\n'"
op|'.'
name|'join'
op|'('
name|'lines'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|assertForwardsResponse
dedent|''
name|'def'
name|'assertForwardsResponse'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'code'
op|','
name|'message'
op|','
name|'headers'
op|','
name|'body'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that C{request} has forwarded a response from the server.\n\n        @param request: A L{DummyRequest}.\n        @param code: The expected HTTP response code.\n        @param message: The expected HTTP message.\n        @param headers: The expected HTTP headers.\n        @param body: The expected response body.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'request'
op|'.'
name|'responseCode'
op|','
name|'code'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'request'
op|'.'
name|'responseMessage'
op|','
name|'message'
op|')'
newline|'\n'
name|'receivedHeaders'
op|'='
name|'list'
op|'('
name|'request'
op|'.'
name|'responseHeaders'
op|'.'
name|'getAllRawHeaders'
op|'('
op|')'
op|')'
newline|'\n'
name|'receivedHeaders'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'expectedHeaders'
op|'='
name|'headers'
op|'['
op|':'
op|']'
newline|'\n'
name|'expectedHeaders'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'receivedHeaders'
op|','
name|'expectedHeaders'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'request'
op|'.'
name|'written'
op|')'
op|','
name|'body'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_testDataForward
dedent|''
name|'def'
name|'_testDataForward'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'message'
op|','
name|'headers'
op|','
name|'body'
op|','
name|'method'
op|'='
string|'"GET"'
op|','
nl|'\n'
name|'requestBody'
op|'='
string|'""'
op|','
name|'loseConnection'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build a fake proxy connection, and send C{data} over it, checking that\n        it\'s forwarded to the originating request.\n        """'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'makeRequest'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'client'
op|'='
name|'self'
op|'.'
name|'makeProxyClient'
op|'('
nl|'\n'
name|'request'
op|','
name|'method'
op|','
op|'{'
string|"'accept'"
op|':'
string|"'text/html'"
op|'}'
op|','
name|'requestBody'
op|')'
newline|'\n'
nl|'\n'
name|'receivedBody'
op|'='
name|'self'
op|'.'
name|'assertForwardsHeaders'
op|'('
nl|'\n'
name|'client'
op|','
string|"'%s /foo HTTP/1.0'"
op|'%'
op|'('
name|'method'
op|','
op|')'
op|','
nl|'\n'
op|'{'
string|"'connection'"
op|':'
string|"'close'"
op|','
string|"'accept'"
op|':'
string|"'text/html'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'receivedBody'
op|','
name|'requestBody'
op|')'
newline|'\n'
nl|'\n'
comment|'# Fake an answer'
nl|'\n'
name|'client'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'makeResponseBytes'
op|'('
name|'code'
op|','
name|'message'
op|','
name|'headers'
op|','
name|'body'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that the response data has been forwarded back to the original'
nl|'\n'
comment|'# requester.'
nl|'\n'
name|'self'
op|'.'
name|'assertForwardsResponse'
op|'('
name|'request'
op|','
name|'code'
op|','
name|'message'
op|','
name|'headers'
op|','
name|'body'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that when the response is done, the request is finished.'
nl|'\n'
name|'if'
name|'loseConnection'
op|':'
newline|'\n'
indent|'            '
name|'client'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# Even if we didn't call loseConnection, the transport should be"
nl|'\n'
comment|'# disconnected.  This lets us not rely on the server to close our'
nl|'\n'
comment|'# sockets for us.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'client'
op|'.'
name|'transport'
op|'.'
name|'connected'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'request'
op|'.'
name|'finished'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_forward
dedent|''
name|'def'
name|'test_forward'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When connected to the server, L{ProxyClient} should send the saved\n        request, with modifications of the headers, and then forward the result\n        to the parent request.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testDataForward'
op|'('
nl|'\n'
number|'200'
op|','
string|'"OK"'
op|','
op|'['
op|'('
string|'"Foo"'
op|','
op|'['
string|'"bar"'
op|','
string|'"baz"'
op|']'
op|')'
op|']'
op|','
string|'"Some data\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_postData
dedent|''
name|'def'
name|'test_postData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to post content in the request, and check that the proxy client\n        forward the body of the request.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testDataForward'
op|'('
nl|'\n'
number|'200'
op|','
string|'"OK"'
op|','
op|'['
op|'('
string|'"Foo"'
op|','
op|'['
string|'"bar"'
op|']'
op|')'
op|']'
op|','
string|'"Some data\\r\\n"'
op|','
string|'"POST"'
op|','
string|'"Some content"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_statusWithMessage
dedent|''
name|'def'
name|'test_statusWithMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the response contains a status with a message, it should be\n        forwarded to the parent request with all the information.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testDataForward'
op|'('
nl|'\n'
number|'404'
op|','
string|'"Not Found"'
op|','
op|'['
op|']'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_contentLength
dedent|''
name|'def'
name|'test_contentLength'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the response contains a I{Content-Length} header, the inbound\n        request object should still only have C{finish} called on it once.\n        """'
newline|'\n'
name|'data'
op|'='
string|'"foo bar baz"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testDataForward'
op|'('
nl|'\n'
number|'200'
op|','
string|'"OK"'
op|','
op|'['
op|'('
string|'"Content-Length"'
op|','
op|'['
name|'str'
op|'('
name|'len'
op|'('
name|'data'
op|')'
op|')'
op|']'
op|')'
op|']'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_losesConnection
dedent|''
name|'def'
name|'test_losesConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the response contains a I{Content-Length} header, the outgoing\n        connection is closed when all response body data has been received.\n        """'
newline|'\n'
name|'data'
op|'='
string|'"foo bar baz"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testDataForward'
op|'('
nl|'\n'
number|'200'
op|','
string|'"OK"'
op|','
op|'['
op|'('
string|'"Content-Length"'
op|','
op|'['
name|'str'
op|'('
name|'len'
op|'('
name|'data'
op|')'
op|')'
op|']'
op|')'
op|']'
op|','
name|'data'
op|','
nl|'\n'
name|'loseConnection'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_headersCleanups
dedent|''
name|'def'
name|'test_headersCleanups'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The headers given at initialization should be modified:\n        B{proxy-connection} should be removed if present, and B{connection}\n        should be added.\n        """'
newline|'\n'
name|'client'
op|'='
name|'ProxyClient'
op|'('
string|"'GET'"
op|','
string|"'/foo'"
op|','
string|"'HTTP/1.0'"
op|','
nl|'\n'
op|'{'
string|'"accept"'
op|':'
string|'"text/html"'
op|','
string|'"proxy-connection"'
op|':'
string|'"foo"'
op|'}'
op|','
string|"''"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'client'
op|'.'
name|'headers'
op|','
nl|'\n'
op|'{'
string|'"accept"'
op|':'
string|'"text/html"'
op|','
string|'"connection"'
op|':'
string|'"close"'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_keepaliveNotForwarded
dedent|''
name|'def'
name|'test_keepaliveNotForwarded'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The proxy doesn\'t really know what to do with keepalive things from\n        the remote server, so we stomp over any keepalive header we get from\n        the client.\n        """'
newline|'\n'
name|'headers'
op|'='
op|'{'
nl|'\n'
string|'"accept"'
op|':'
string|'"text/html"'
op|','
nl|'\n'
string|"'keep-alive'"
op|':'
string|"'300'"
op|','
nl|'\n'
string|"'connection'"
op|':'
string|"'keep-alive'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'expectedHeaders'
op|'='
name|'headers'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'expectedHeaders'
op|'['
string|"'connection'"
op|']'
op|'='
string|"'close'"
newline|'\n'
name|'del'
name|'expectedHeaders'
op|'['
string|"'keep-alive'"
op|']'
newline|'\n'
name|'client'
op|'='
name|'ProxyClient'
op|'('
string|"'GET'"
op|','
string|"'/foo'"
op|','
string|"'HTTP/1.0'"
op|','
name|'headers'
op|','
string|"''"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertForwardsHeaders'
op|'('
nl|'\n'
name|'client'
op|','
string|"'GET /foo HTTP/1.0'"
op|','
name|'expectedHeaders'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_defaultHeadersOverridden
dedent|''
name|'def'
name|'test_defaultHeadersOverridden'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{server.Request} within the proxy sets certain response headers by\n        default. When we get these headers back from the remote server, the\n        defaults are overridden rather than simply appended.\n        """'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'makeRequest'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'responseHeaders'
op|'.'
name|'setRawHeaders'
op|'('
string|"'server'"
op|','
op|'['
string|"'old-bar'"
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'responseHeaders'
op|'.'
name|'setRawHeaders'
op|'('
string|"'date'"
op|','
op|'['
string|"'old-baz'"
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'responseHeaders'
op|'.'
name|'setRawHeaders'
op|'('
string|"'content-type'"
op|','
op|'['
string|'"old/qux"'
op|']'
op|')'
newline|'\n'
name|'client'
op|'='
name|'self'
op|'.'
name|'makeProxyClient'
op|'('
name|'request'
op|','
name|'headers'
op|'='
op|'{'
string|"'accept'"
op|':'
string|"'text/html'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connectProxy'
op|'('
name|'client'
op|')'
newline|'\n'
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'Server'"
op|':'
op|'['
string|"'bar'"
op|']'
op|','
nl|'\n'
string|"'Date'"
op|':'
op|'['
string|"'2010-01-01'"
op|']'
op|','
nl|'\n'
string|"'Content-Type'"
op|':'
op|'['
string|"'application/x-baz'"
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'client'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'makeResponseBytes'
op|'('
number|'200'
op|','
string|'"OK"'
op|','
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertForwardsResponse'
op|'('
nl|'\n'
name|'request'
op|','
number|'200'
op|','
string|"'OK'"
op|','
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProxyClientFactoryTestCase
dedent|''
dedent|''
name|'class'
name|'ProxyClientFactoryTestCase'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{ProxyClientFactory}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_connectionFailed
name|'def'
name|'test_connectionFailed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that L{ProxyClientFactory.clientConnectionFailed} produces\n        a B{501} response to the parent request.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'ProxyClientFactory'
op|'('
string|"'GET'"
op|','
string|"'/foo'"
op|','
string|"'HTTP/1.0'"
op|','
nl|'\n'
op|'{'
string|'"accept"'
op|':'
string|'"text/html"'
op|'}'
op|','
string|"''"
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
name|'factory'
op|'.'
name|'clientConnectionFailed'
op|'('
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'request'
op|'.'
name|'responseCode'
op|','
number|'501'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'request'
op|'.'
name|'responseMessage'
op|','
string|'"Gateway error"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'list'
op|'('
name|'request'
op|'.'
name|'responseHeaders'
op|'.'
name|'getAllRawHeaders'
op|'('
op|')'
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|'"Content-Type"'
op|','
op|'['
string|'"text/html"'
op|']'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'request'
op|'.'
name|'written'
op|')'
op|','
nl|'\n'
string|'"<H1>Could not connect</H1>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'request'
op|'.'
name|'finished'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildProtocol
dedent|''
name|'def'
name|'test_buildProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ProxyClientFactory.buildProtocol} should produce a L{ProxyClient}\n        with the same values of attributes (with updates on the headers).\n        """'
newline|'\n'
name|'factory'
op|'='
name|'ProxyClientFactory'
op|'('
string|"'GET'"
op|','
string|"'/foo'"
op|','
string|"'HTTP/1.0'"
op|','
nl|'\n'
op|'{'
string|'"accept"'
op|':'
string|'"text/html"'
op|'}'
op|','
string|"'Some data'"
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
name|'proto'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'proto'
op|','
name|'ProxyClient'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'command'
op|','
string|"'GET'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'rest'
op|','
string|"'/foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'data'
op|','
string|"'Some data'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'headers'
op|','
nl|'\n'
op|'{'
string|'"accept"'
op|':'
string|'"text/html"'
op|','
string|'"connection"'
op|':'
string|'"close"'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProxyRequestTestCase
dedent|''
dedent|''
name|'class'
name|'ProxyRequestTestCase'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{ProxyRequest}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_testProcess
name|'def'
name|'_testProcess'
op|'('
name|'self'
op|','
name|'uri'
op|','
name|'expectedURI'
op|','
name|'method'
op|'='
string|'"GET"'
op|','
name|'data'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build a request pointing at C{uri}, and check that a proxied request\n        is created, pointing a C{expectedURI}.\n        """'
newline|'\n'
name|'transport'
op|'='
name|'StringTransportWithDisconnection'
op|'('
op|')'
newline|'\n'
name|'channel'
op|'='
name|'DummyChannel'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'reactor'
op|'='
name|'MemoryReactor'
op|'('
op|')'
newline|'\n'
name|'request'
op|'='
name|'ProxyRequest'
op|'('
name|'channel'
op|','
name|'False'
op|','
name|'reactor'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'gotLength'
op|'('
name|'len'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'handleContentChunk'
op|'('
name|'data'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'requestReceived'
op|'('
name|'method'
op|','
string|"'http://example.com%s'"
op|'%'
op|'('
name|'uri'
op|','
op|')'
op|','
nl|'\n'
string|"'HTTP/1.0'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'reactor'
op|'.'
name|'tcpClients'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reactor'
op|'.'
name|'tcpClients'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
string|'"example.com"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reactor'
op|'.'
name|'tcpClients'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|','
number|'80'
op|')'
newline|'\n'
nl|'\n'
name|'factory'
op|'='
name|'reactor'
op|'.'
name|'tcpClients'
op|'['
number|'0'
op|']'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'factory'
op|','
name|'ProxyClientFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'command'
op|','
name|'method'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'version'
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'headers'
op|','
op|'{'
string|"'host'"
op|':'
string|"'example.com'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'data'
op|','
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'rest'
op|','
name|'expectedURI'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'father'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_process
dedent|''
name|'def'
name|'test_process'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ProxyRequest.process} should create a connection to the given server,\n        with a L{ProxyClientFactory} as connection factory, with the correct\n        parameters:\n            - forward comment, version and data values\n            - update headers with the B{host} value\n            - remove the host from the URL\n            - pass the request as parent request\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testProcess'
op|'('
string|'"/foo/bar"'
op|','
string|'"/foo/bar"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_processWithoutTrailingSlash
dedent|''
name|'def'
name|'test_processWithoutTrailingSlash'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the incoming request doesn\'t contain a slash,\n        L{ProxyRequest.process} should add one when instantiating\n        L{ProxyClientFactory}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testProcess'
op|'('
string|'""'
op|','
string|'"/"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_processWithData
dedent|''
name|'def'
name|'test_processWithData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ProxyRequest.process} should be able to retrieve request body and\n        to forward it.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testProcess'
op|'('
nl|'\n'
string|'"/foo/bar"'
op|','
string|'"/foo/bar"'
op|','
string|'"POST"'
op|','
string|'"Some content"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_processWithPort
dedent|''
name|'def'
name|'test_processWithPort'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that L{ProxyRequest.process} correctly parse port in the incoming\n        URL, and create a outgoing connection with this port.\n        """'
newline|'\n'
name|'transport'
op|'='
name|'StringTransportWithDisconnection'
op|'('
op|')'
newline|'\n'
name|'channel'
op|'='
name|'DummyChannel'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'reactor'
op|'='
name|'MemoryReactor'
op|'('
op|')'
newline|'\n'
name|'request'
op|'='
name|'ProxyRequest'
op|'('
name|'channel'
op|','
name|'False'
op|','
name|'reactor'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'gotLength'
op|'('
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'requestReceived'
op|'('
string|"'GET'"
op|','
string|"'http://example.com:1234/foo/bar'"
op|','
nl|'\n'
string|"'HTTP/1.0'"
op|')'
newline|'\n'
nl|'\n'
comment|'# That should create one connection, with the port parsed from the URL'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'reactor'
op|'.'
name|'tcpClients'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reactor'
op|'.'
name|'tcpClients'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
string|'"example.com"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reactor'
op|'.'
name|'tcpClients'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|','
number|'1234'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyFactory
dedent|''
dedent|''
name|'class'
name|'DummyFactory'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A simple holder for C{host} and C{port} information.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'port'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReverseProxyRequestTestCase
dedent|''
dedent|''
name|'class'
name|'ReverseProxyRequestTestCase'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{ReverseProxyRequest}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_process
name|'def'
name|'test_process'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ReverseProxyRequest.process} should create a connection to its\n        factory host/port, using a L{ProxyClientFactory} instantiated with the\n        correct parameters, and particulary set the B{host} header to the\n        factory host.\n        """'
newline|'\n'
name|'transport'
op|'='
name|'StringTransportWithDisconnection'
op|'('
op|')'
newline|'\n'
name|'channel'
op|'='
name|'DummyChannel'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'reactor'
op|'='
name|'MemoryReactor'
op|'('
op|')'
newline|'\n'
name|'request'
op|'='
name|'ReverseProxyRequest'
op|'('
name|'channel'
op|','
name|'False'
op|','
name|'reactor'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'factory'
op|'='
name|'DummyFactory'
op|'('
string|'"example.com"'
op|','
number|'1234'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'gotLength'
op|'('
number|'0'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'requestReceived'
op|'('
string|"'GET'"
op|','
string|"'/foo/bar'"
op|','
string|"'HTTP/1.0'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that one connection has been created, to the good host/port'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'reactor'
op|'.'
name|'tcpClients'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reactor'
op|'.'
name|'tcpClients'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
string|'"example.com"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reactor'
op|'.'
name|'tcpClients'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|','
number|'1234'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check the factory passed to the connect, and its headers'
nl|'\n'
name|'factory'
op|'='
name|'reactor'
op|'.'
name|'tcpClients'
op|'['
number|'0'
op|']'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'factory'
op|','
name|'ProxyClientFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'factory'
op|'.'
name|'headers'
op|','
op|'{'
string|"'host'"
op|':'
string|"'example.com'"
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

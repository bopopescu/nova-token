begin_unit
comment|'# Copyright (c) 2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.web.twcgi}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
op|','
name|'interfaces'
op|','
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'util'
op|','
name|'failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'http'
name|'import'
name|'NOT_FOUND'
op|','
name|'INTERNAL_SERVER_ERROR'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'client'
op|','
name|'twcgi'
op|','
name|'server'
op|','
name|'resource'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'test'
op|'.'
name|'_util'
name|'import'
name|'_render'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'test'
op|'.'
name|'test_web'
name|'import'
name|'DummyRequest'
newline|'\n'
nl|'\n'
name|'DUMMY_CGI'
op|'='
string|'\'\'\'\\\nprint "Header: OK"\nprint\nprint "cgi output"\n\'\'\''
newline|'\n'
nl|'\n'
name|'READINPUT_CGI'
op|'='
string|'\'\'\'\\\n# this is an example of a correctly-written CGI script which reads a body\n# from stdin, which only reads env[\'CONTENT_LENGTH\'] bytes.\n\nimport os, sys\n\nbody_length = int(os.environ.get(\'CONTENT_LENGTH\',0))\nindata = sys.stdin.read(body_length)\nprint "Header: OK"\nprint\nprint "readinput ok"\n\'\'\''
newline|'\n'
nl|'\n'
name|'READALLINPUT_CGI'
op|'='
string|'\'\'\'\\\n# this is an example of the typical (incorrect) CGI script which expects\n# the server to close stdin when the body of the request is complete.\n# A correct CGI should only read env[\'CONTENT_LENGTH\'] bytes.\n\nimport sys\n\nindata = sys.stdin.read()\nprint "Header: OK"\nprint\nprint "readallinput ok"\n\'\'\''
newline|'\n'
nl|'\n'
DECL|class|PythonScript
name|'class'
name|'PythonScript'
op|'('
name|'twcgi'
op|'.'
name|'FilteredScript'
op|')'
op|':'
newline|'\n'
DECL|variable|filter
indent|'    '
name|'filter'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
DECL|variable|filters
name|'filters'
op|'='
name|'sys'
op|'.'
name|'executable'
op|','
comment|"# web2's version"
newline|'\n'
nl|'\n'
DECL|class|CGI
dedent|''
name|'class'
name|'CGI'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{twcgi.FilteredScript}.\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'interfaces'
op|'.'
name|'IReactorProcess'
op|'.'
name|'providedBy'
op|'('
name|'reactor'
op|')'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"CGI tests require a functional reactor.spawnProcess()"'
newline|'\n'
nl|'\n'
DECL|member|startServer
dedent|''
name|'def'
name|'startServer'
op|'('
name|'self'
op|','
name|'cgi'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'root'
op|'='
name|'resource'
op|'.'
name|'Resource'
op|'('
op|')'
newline|'\n'
name|'cgipath'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
name|'cgi'
op|')'
newline|'\n'
name|'root'
op|'.'
name|'putChild'
op|'('
string|'"cgi"'
op|','
name|'PythonScript'
op|'('
name|'cgipath'
op|')'
op|')'
newline|'\n'
name|'site'
op|'='
name|'server'
op|'.'
name|'Site'
op|'('
name|'root'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'site'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'p'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'p'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testCGI
dedent|''
dedent|''
name|'def'
name|'testCGI'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cgiFilename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'cgiFile'
op|'='
name|'file'
op|'('
name|'cgiFilename'
op|','
string|"'wt'"
op|')'
newline|'\n'
name|'cgiFile'
op|'.'
name|'write'
op|'('
name|'DUMMY_CGI'
op|')'
newline|'\n'
name|'cgiFile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'portnum'
op|'='
name|'self'
op|'.'
name|'startServer'
op|'('
name|'cgiFilename'
op|')'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'getPage'
op|'('
string|'"http://localhost:%d/cgi"'
op|'%'
name|'portnum'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testCGI_1'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
DECL|member|_testCGI_1
dedent|''
name|'def'
name|'_testCGI_1'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'res'
op|','
string|'"cgi output"'
op|'+'
name|'os'
op|'.'
name|'linesep'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testReadEmptyInput
dedent|''
name|'def'
name|'testReadEmptyInput'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cgiFilename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'cgiFile'
op|'='
name|'file'
op|'('
name|'cgiFilename'
op|','
string|"'wt'"
op|')'
newline|'\n'
name|'cgiFile'
op|'.'
name|'write'
op|'('
name|'READINPUT_CGI'
op|')'
newline|'\n'
name|'cgiFile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'portnum'
op|'='
name|'self'
op|'.'
name|'startServer'
op|'('
name|'cgiFilename'
op|')'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'getPage'
op|'('
string|'"http://localhost:%d/cgi"'
op|'%'
name|'portnum'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testReadEmptyInput_1'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'testReadEmptyInput'
op|'.'
name|'timeout'
op|'='
number|'5'
newline|'\n'
DECL|member|_testReadEmptyInput_1
name|'def'
name|'_testReadEmptyInput_1'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'res'
op|','
string|'"readinput ok%s"'
op|'%'
name|'os'
op|'.'
name|'linesep'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testReadInput
dedent|''
name|'def'
name|'testReadInput'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cgiFilename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'cgiFile'
op|'='
name|'file'
op|'('
name|'cgiFilename'
op|','
string|"'wt'"
op|')'
newline|'\n'
name|'cgiFile'
op|'.'
name|'write'
op|'('
name|'READINPUT_CGI'
op|')'
newline|'\n'
name|'cgiFile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'portnum'
op|'='
name|'self'
op|'.'
name|'startServer'
op|'('
name|'cgiFilename'
op|')'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'getPage'
op|'('
string|'"http://localhost:%d/cgi"'
op|'%'
name|'portnum'
op|','
nl|'\n'
name|'method'
op|'='
string|'"POST"'
op|','
nl|'\n'
name|'postdata'
op|'='
string|'"Here is your stdin"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testReadInput_1'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'testReadInput'
op|'.'
name|'timeout'
op|'='
number|'5'
newline|'\n'
DECL|member|_testReadInput_1
name|'def'
name|'_testReadInput_1'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'res'
op|','
string|'"readinput ok%s"'
op|'%'
name|'os'
op|'.'
name|'linesep'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testReadAllInput
dedent|''
name|'def'
name|'testReadAllInput'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cgiFilename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'cgiFile'
op|'='
name|'file'
op|'('
name|'cgiFilename'
op|','
string|"'wt'"
op|')'
newline|'\n'
name|'cgiFile'
op|'.'
name|'write'
op|'('
name|'READALLINPUT_CGI'
op|')'
newline|'\n'
name|'cgiFile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'portnum'
op|'='
name|'self'
op|'.'
name|'startServer'
op|'('
name|'cgiFilename'
op|')'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'getPage'
op|'('
string|'"http://localhost:%d/cgi"'
op|'%'
name|'portnum'
op|','
nl|'\n'
name|'method'
op|'='
string|'"POST"'
op|','
nl|'\n'
name|'postdata'
op|'='
string|'"Here is your stdin"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testReadAllInput_1'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'testReadAllInput'
op|'.'
name|'timeout'
op|'='
number|'5'
newline|'\n'
DECL|member|_testReadAllInput_1
name|'def'
name|'_testReadAllInput_1'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'res'
op|','
string|'"readallinput ok%s"'
op|'%'
name|'os'
op|'.'
name|'linesep'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CGIDirectoryTests
dedent|''
dedent|''
name|'class'
name|'CGIDirectoryTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{twcgi.CGIDirectory}.\n    """'
newline|'\n'
DECL|member|test_render
name|'def'
name|'test_render'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{twcgi.CGIDirectory.render} sets the HTTP response code to I{NOT\n        FOUND}.\n        """'
newline|'\n'
name|'resource'
op|'='
name|'twcgi'
op|'.'
name|'CGIDirectory'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'d'
op|'='
name|'_render'
op|'('
name|'resource'
op|','
name|'request'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'responseCode'
op|','
name|'NOT_FOUND'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_notFoundChild
dedent|''
name|'def'
name|'test_notFoundChild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{twcgi.CGIDirectory.getChild} returns a resource which renders an\n        response with the HTTP I{NOT FOUND} status code if the indicated child\n        does not exist as an entry in the directory used to initialized the\n        L{twcgi.CGIDirectory}.\n        """'
newline|'\n'
name|'path'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'path'
op|')'
newline|'\n'
name|'resource'
op|'='
name|'twcgi'
op|'.'
name|'CGIDirectory'
op|'('
name|'path'
op|')'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
newline|'\n'
name|'child'
op|'='
name|'resource'
op|'.'
name|'getChild'
op|'('
string|'"foo"'
op|','
name|'request'
op|')'
newline|'\n'
name|'d'
op|'='
name|'_render'
op|'('
name|'child'
op|','
name|'request'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'responseCode'
op|','
name|'NOT_FOUND'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CGIProcessProtocolTests
dedent|''
dedent|''
name|'class'
name|'CGIProcessProtocolTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{twcgi.CGIProcessProtocol}.\n    """'
newline|'\n'
DECL|member|test_prematureEndOfHeaders
name|'def'
name|'test_prematureEndOfHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the process communicating with L{CGIProcessProtocol} ends before\n        finishing writing out headers, the response has I{INTERNAL SERVER\n        ERROR} as its status code.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'twcgi'
op|'.'
name|'CGIProcessProtocol'
op|'('
name|'request'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'processEnded'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ProcessTerminated'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'responseCode'
op|','
name|'INTERNAL_SERVER_ERROR'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

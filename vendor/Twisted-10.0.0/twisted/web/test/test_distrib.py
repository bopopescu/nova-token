begin_unit
comment|'# Copyright (c) 2008-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.web.distrib}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'os'
op|'.'
name|'path'
name|'import'
name|'abspath'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
op|'.'
name|'minidom'
name|'import'
name|'parseString'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pwd'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|pwd
indent|'    '
name|'pwd'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'zope'
op|'.'
name|'interface'
op|'.'
name|'verify'
name|'import'
name|'verifyObject'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'filepath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
op|','
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
name|'import'
name|'pb'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'banana'
name|'import'
name|'SIZE_LIMIT'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'http'
op|','
name|'distrib'
op|','
name|'client'
op|','
name|'resource'
op|','
name|'static'
op|','
name|'server'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'test'
op|'.'
name|'test_web'
name|'import'
name|'DummyRequest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'test'
op|'.'
name|'_util'
name|'import'
name|'_render'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MySite
name|'class'
name|'MySite'
op|'('
name|'server'
op|'.'
name|'Site'
op|')'
op|':'
newline|'\n'
DECL|member|stopFactory
indent|'    '
name|'def'
name|'stopFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"logFile"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'logFile'
op|'!='
name|'log'
op|'.'
name|'logfile'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logFile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'logFile'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PBServerFactory
dedent|''
dedent|''
dedent|''
name|'class'
name|'PBServerFactory'
op|'('
name|'pb'
op|'.'
name|'PBServerFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A PB server factory which keeps track of the most recent protocol it\n    created.\n\n    @ivar proto: L{None} or the L{Broker} instance most recently returned\n        from C{buildProtocol}.\n    """'
newline|'\n'
DECL|variable|proto
name|'proto'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proto'
op|'='
name|'pb'
op|'.'
name|'PBServerFactory'
op|'.'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'proto'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DistribTest
dedent|''
dedent|''
name|'class'
name|'DistribTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|port1
indent|'    '
name|'port1'
op|'='
name|'None'
newline|'\n'
DECL|variable|port2
name|'port2'
op|'='
name|'None'
newline|'\n'
DECL|variable|sub
name|'sub'
op|'='
name|'None'
newline|'\n'
DECL|variable|f1
name|'f1'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|tearDown
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Clean up all the event sources left behind by either directly by\n        test methods or indirectly via some distrib API.\n        """'
newline|'\n'
name|'dl'
op|'='
op|'['
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
op|','
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'f1'
name|'is'
name|'not'
name|'None'
name|'and'
name|'self'
op|'.'
name|'f1'
op|'.'
name|'proto'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'f1'
op|'.'
name|'proto'
op|'.'
name|'notifyOnDisconnect'
op|'('
name|'lambda'
op|':'
name|'dl'
op|'['
number|'0'
op|']'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'dl'
op|'['
number|'0'
op|']'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'sub'
name|'is'
name|'not'
name|'None'
name|'and'
name|'self'
op|'.'
name|'sub'
op|'.'
name|'publisher'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sub'
op|'.'
name|'publisher'
op|'.'
name|'broker'
op|'.'
name|'notifyOnDisconnect'
op|'('
nl|'\n'
name|'lambda'
op|':'
name|'dl'
op|'['
number|'1'
op|']'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sub'
op|'.'
name|'publisher'
op|'.'
name|'broker'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'dl'
op|'['
number|'1'
op|']'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'http'
op|'.'
name|'_logDateTimeStop'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'port1'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'dl'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'port1'
op|'.'
name|'stopListening'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'port2'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'dl'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'port2'
op|'.'
name|'stopListening'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
name|'dl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testDistrib
dedent|''
name|'def'
name|'testDistrib'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# site1 is the publisher'
nl|'\n'
indent|'        '
name|'r1'
op|'='
name|'resource'
op|'.'
name|'Resource'
op|'('
op|')'
newline|'\n'
name|'r1'
op|'.'
name|'putChild'
op|'('
string|'"there"'
op|','
name|'static'
op|'.'
name|'Data'
op|'('
string|'"root"'
op|','
string|'"text/plain"'
op|')'
op|')'
newline|'\n'
name|'site1'
op|'='
name|'server'
op|'.'
name|'Site'
op|'('
name|'r1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'f1'
op|'='
name|'PBServerFactory'
op|'('
name|'distrib'
op|'.'
name|'ResourcePublisher'
op|'('
name|'site1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port1'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'f1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sub'
op|'='
name|'distrib'
op|'.'
name|'ResourceSubscription'
op|'('
string|'"127.0.0.1"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'port1'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'r2'
op|'='
name|'resource'
op|'.'
name|'Resource'
op|'('
op|')'
newline|'\n'
name|'r2'
op|'.'
name|'putChild'
op|'('
string|'"here"'
op|','
name|'self'
op|'.'
name|'sub'
op|')'
newline|'\n'
name|'f2'
op|'='
name|'MySite'
op|'('
name|'r2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port2'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f2'
op|')'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'getPage'
op|'('
string|'"http://127.0.0.1:%d/here/there"'
op|'%'
name|'self'
op|'.'
name|'port2'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'failUnlessEqual'
op|','
string|"'root'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_requestTest
dedent|''
name|'def'
name|'_requestTest'
op|'('
name|'self'
op|','
name|'child'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set up a resource on a distrib site using L{ResourcePublisher} and\n        then retrieve it from a L{ResourceSubscription} via an HTTP client.\n\n        @param child: The resource to publish using distrib.\n        @param **kwargs: Extra keyword arguments to pass to L{getPage} when\n            requesting the resource.\n\n        @return: A L{Deferred} which fires with the result of the request.\n        """'
newline|'\n'
name|'distribRoot'
op|'='
name|'resource'
op|'.'
name|'Resource'
op|'('
op|')'
newline|'\n'
name|'distribRoot'
op|'.'
name|'putChild'
op|'('
string|'"child"'
op|','
name|'child'
op|')'
newline|'\n'
name|'distribSite'
op|'='
name|'server'
op|'.'
name|'Site'
op|'('
name|'distribRoot'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'f1'
op|'='
name|'distribFactory'
op|'='
name|'PBServerFactory'
op|'('
nl|'\n'
name|'distrib'
op|'.'
name|'ResourcePublisher'
op|'('
name|'distribSite'
op|')'
op|')'
newline|'\n'
name|'distribPort'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
nl|'\n'
number|'0'
op|','
name|'distribFactory'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'distribPort'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'addr'
op|'='
name|'distribPort'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'sub'
op|'='
name|'mainRoot'
op|'='
name|'distrib'
op|'.'
name|'ResourceSubscription'
op|'('
nl|'\n'
name|'addr'
op|'.'
name|'host'
op|','
name|'addr'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'mainSite'
op|'='
name|'server'
op|'.'
name|'Site'
op|'('
name|'mainRoot'
op|')'
newline|'\n'
name|'mainPort'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'mainSite'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'mainPort'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'mainAddr'
op|'='
name|'mainPort'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'client'
op|'.'
name|'getPage'
op|'('
string|'"http://%s:%s/child"'
op|'%'
op|'('
nl|'\n'
name|'mainAddr'
op|'.'
name|'host'
op|','
name|'mainAddr'
op|'.'
name|'port'
op|')'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requestHeaders
dedent|''
name|'def'
name|'test_requestHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The request headers are available on the request object passed to a\n        distributed resource\'s C{render} method.\n        """'
newline|'\n'
name|'requestHeaders'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|class|ReportRequestHeaders
name|'class'
name|'ReportRequestHeaders'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
DECL|member|render
indent|'            '
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'requestHeaders'
op|'.'
name|'update'
op|'('
name|'dict'
op|'('
nl|'\n'
name|'request'
op|'.'
name|'requestHeaders'
op|'.'
name|'getAllRawHeaders'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
string|'""'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'request'
op|'='
name|'self'
op|'.'
name|'_requestTest'
op|'('
nl|'\n'
name|'ReportRequestHeaders'
op|'('
op|')'
op|','
name|'headers'
op|'='
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
newline|'\n'
DECL|function|cbRequested
name|'def'
name|'cbRequested'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'requestHeaders'
op|'['
string|"'Foo'"
op|']'
op|','
op|'['
string|"'bar'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'request'
op|'.'
name|'addCallback'
op|'('
name|'cbRequested'
op|')'
newline|'\n'
name|'return'
name|'request'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_largeWrite
dedent|''
name|'def'
name|'test_largeWrite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a string longer than the Banana size limit is passed to the\n        L{distrib.Request} passed to the remote resource, it is broken into\n        smaller strings to be transported over the PB connection.\n        """'
newline|'\n'
DECL|class|LargeWrite
name|'class'
name|'LargeWrite'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
DECL|member|render
indent|'            '
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'request'
op|'.'
name|'write'
op|'('
string|"'x'"
op|'*'
name|'SIZE_LIMIT'
op|'+'
string|"'y'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
name|'return'
name|'server'
op|'.'
name|'NOT_DONE_YET'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'request'
op|'='
name|'self'
op|'.'
name|'_requestTest'
op|'('
name|'LargeWrite'
op|'('
op|')'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|"'x'"
op|'*'
name|'SIZE_LIMIT'
op|'+'
string|"'y'"
op|')'
newline|'\n'
name|'return'
name|'request'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_largeReturn
dedent|''
name|'def'
name|'test_largeReturn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like L{test_largeWrite}, but for the case where C{render} returns a\n        long string rather than explicitly passing it to L{Request.write}.\n        """'
newline|'\n'
DECL|class|LargeReturn
name|'class'
name|'LargeReturn'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
DECL|member|render
indent|'            '
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'x'"
op|'*'
name|'SIZE_LIMIT'
op|'+'
string|"'y'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'request'
op|'='
name|'self'
op|'.'
name|'_requestTest'
op|'('
name|'LargeReturn'
op|'('
op|')'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|"'x'"
op|'*'
name|'SIZE_LIMIT'
op|'+'
string|"'y'"
op|')'
newline|'\n'
name|'return'
name|'request'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectionLost
dedent|''
name|'def'
name|'test_connectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If there is an error issuing the request to the remote publisher, an\n        error response is returned.\n        """'
newline|'\n'
comment|'# Using pb.Root as a publisher will cause request calls to fail with an'
nl|'\n'
comment|'# error every time.  Just what we want to test.'
nl|'\n'
name|'self'
op|'.'
name|'f1'
op|'='
name|'serverFactory'
op|'='
name|'PBServerFactory'
op|'('
name|'pb'
op|'.'
name|'Root'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port1'
op|'='
name|'serverPort'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'serverFactory'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'sub'
op|'='
name|'subscription'
op|'='
name|'distrib'
op|'.'
name|'ResourceSubscription'
op|'('
nl|'\n'
string|'"127.0.0.1"'
op|','
name|'serverPort'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'d'
op|'='
name|'_render'
op|'('
name|'subscription'
op|','
name|'request'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'responseCode'
op|','
number|'500'
op|')'
newline|'\n'
comment|'# This is the error we caused the request to fail with.  It should'
nl|'\n'
comment|'# have been logged.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'pb'
op|'.'
name|'NoSuchMethod'
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_PasswordDatabase
dedent|''
dedent|''
name|'class'
name|'_PasswordDatabase'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'users'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_users'
op|'='
name|'users'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getpwall
dedent|''
name|'def'
name|'getpwall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'iter'
op|'('
name|'self'
op|'.'
name|'_users'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getpwnam
dedent|''
name|'def'
name|'getpwnam'
op|'('
name|'self'
op|','
name|'username'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'user'
name|'in'
name|'self'
op|'.'
name|'_users'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'user'
op|'['
number|'0'
op|']'
op|'=='
name|'username'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'user'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'KeyError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UserDirectoryTests
dedent|''
dedent|''
name|'class'
name|'UserDirectoryTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{UserDirectory}, a resource for listing all user resources\n    available on a system.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'alice'
op|'='
op|'('
string|"'alice'"
op|','
string|"'x'"
op|','
number|'123'
op|','
number|'456'
op|','
string|"'Alice,,,'"
op|','
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|','
string|"'/bin/sh'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bob'
op|'='
op|'('
string|"'bob'"
op|','
string|"'x'"
op|','
number|'234'
op|','
number|'567'
op|','
string|"'Bob,,,'"
op|','
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|','
string|"'/bin/sh'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'database'
op|'='
name|'_PasswordDatabase'
op|'('
op|'['
name|'self'
op|'.'
name|'alice'
op|','
name|'self'
op|'.'
name|'bob'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'directory'
op|'='
name|'distrib'
op|'.'
name|'UserDirectory'
op|'('
name|'self'
op|'.'
name|'database'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_interface
dedent|''
name|'def'
name|'test_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UserDirectory} instances provide L{resource.IResource}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'verifyObject'
op|'('
name|'resource'
op|'.'
name|'IResource'
op|','
name|'self'
op|'.'
name|'directory'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_404Test
dedent|''
name|'def'
name|'_404Test'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that requesting the C{name} child of C{self.directory} results\n        in a 404 response.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
name|'name'
op|']'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'directory'
op|'.'
name|'getChild'
op|'('
name|'name'
op|','
name|'request'
op|')'
newline|'\n'
name|'d'
op|'='
name|'_render'
op|'('
name|'result'
op|','
name|'request'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request'
op|'.'
name|'responseCode'
op|','
number|'404'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getInvalidUser
dedent|''
name|'def'
name|'test_getInvalidUser'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UserDirectory.getChild} returns a resource which renders a 404\n        response when passed a string which does not correspond to any known\n        user.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_404Test'
op|'('
string|"'carol'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getUserWithoutResource
dedent|''
name|'def'
name|'test_getUserWithoutResource'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UserDirectory.getChild} returns a resource which renders a 404\n        response when passed a string which corresponds to a known user who has\n        neither a user directory nor a user distrib socket.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_404Test'
op|'('
string|"'alice'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPublicHTMLChild
dedent|''
name|'def'
name|'test_getPublicHTMLChild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UserDirectory.getChild} returns a L{static.File} instance when passed\n        the name of a user with a home directory containing a I{public_html}\n        directory.\n        """'
newline|'\n'
name|'home'
op|'='
name|'filepath'
op|'.'
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'bob'
op|'['
op|'-'
number|'2'
op|']'
op|')'
newline|'\n'
name|'public_html'
op|'='
name|'home'
op|'.'
name|'child'
op|'('
string|"'public_html'"
op|')'
newline|'\n'
name|'public_html'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"'bob'"
op|']'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'directory'
op|'.'
name|'getChild'
op|'('
string|"'bob'"
op|','
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'result'
op|','
name|'static'
op|'.'
name|'File'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'path'
op|','
name|'public_html'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getDistribChild
dedent|''
name|'def'
name|'test_getDistribChild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UserDirectory.getChild} returns a L{ResourceSubscription} instance\n        when passed the name of a user suffixed with C{".twistd"} who has a\n        home directory containing a I{.twistd-web-pb} socket.\n        """'
newline|'\n'
name|'home'
op|'='
name|'filepath'
op|'.'
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'bob'
op|'['
op|'-'
number|'2'
op|']'
op|')'
newline|'\n'
name|'home'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'web'
op|'='
name|'home'
op|'.'
name|'child'
op|'('
string|"'.twistd-web-pb'"
op|')'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"'bob'"
op|']'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'directory'
op|'.'
name|'getChild'
op|'('
string|"'bob.twistd'"
op|','
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'result'
op|','
name|'distrib'
op|'.'
name|'ResourceSubscription'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'host'
op|','
string|"'unix'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'abspath'
op|'('
name|'result'
op|'.'
name|'port'
op|')'
op|','
name|'web'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidMethod
dedent|''
name|'def'
name|'test_invalidMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UserDirectory.render} raises L{UnsupportedMethod} in response to a\n        non-I{GET} request.\n        """'
newline|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'method'
op|'='
string|"'POST'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'server'
op|'.'
name|'UnsupportedMethod'
op|','
name|'self'
op|'.'
name|'directory'
op|'.'
name|'render'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_render
dedent|''
name|'def'
name|'test_render'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UserDirectory} renders a list of links to available user content\n        in response to a I{GET} request.\n        """'
newline|'\n'
name|'public_html'
op|'='
name|'filepath'
op|'.'
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'alice'
op|'['
op|'-'
number|'2'
op|']'
op|')'
op|'.'
name|'child'
op|'('
string|"'public_html'"
op|')'
newline|'\n'
name|'public_html'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'web'
op|'='
name|'filepath'
op|'.'
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'bob'
op|'['
op|'-'
number|'2'
op|']'
op|')'
newline|'\n'
name|'web'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
comment|"# This really only works if it's a unix socket, but the implementation"
nl|'\n'
comment|"# doesn't currently check for that.  It probably should someday, and"
nl|'\n'
comment|'# then skip users with non-sockets.'
nl|'\n'
name|'web'
op|'.'
name|'child'
op|'('
string|"'.twistd-web-pb'"
op|')'
op|'.'
name|'setContent'
op|'('
string|'""'
op|')'
newline|'\n'
nl|'\n'
name|'request'
op|'='
name|'DummyRequest'
op|'('
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
name|'result'
op|'='
name|'_render'
op|'('
name|'self'
op|'.'
name|'directory'
op|','
name|'request'
op|')'
newline|'\n'
DECL|function|cbRendered
name|'def'
name|'cbRendered'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'document'
op|'='
name|'parseString'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'request'
op|'.'
name|'written'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Each user should have an li with a link to their page.'
nl|'\n'
op|'['
name|'alice'
op|','
name|'bob'
op|']'
op|'='
name|'document'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'li'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'alice'
op|'.'
name|'firstChild'
op|'.'
name|'tagName'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'alice'
op|'.'
name|'firstChild'
op|'.'
name|'getAttribute'
op|'('
string|"'href'"
op|')'
op|','
string|"'alice/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'alice'
op|'.'
name|'firstChild'
op|'.'
name|'firstChild'
op|'.'
name|'data'
op|','
string|"'Alice (file)'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'bob'
op|'.'
name|'firstChild'
op|'.'
name|'tagName'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'bob'
op|'.'
name|'firstChild'
op|'.'
name|'getAttribute'
op|'('
string|"'href'"
op|')'
op|','
string|"'bob.twistd/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'bob'
op|'.'
name|'firstChild'
op|'.'
name|'firstChild'
op|'.'
name|'data'
op|','
string|"'Bob (twistd)'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'result'
op|'.'
name|'addCallback'
op|'('
name|'cbRendered'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_passwordDatabase
dedent|''
name|'def'
name|'test_passwordDatabase'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If L{UserDirectory} is instantiated with no arguments, it uses the\n        L{pwd} module as its password database.\n        """'
newline|'\n'
name|'directory'
op|'='
name|'distrib'
op|'.'
name|'UserDirectory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'directory'
op|'.'
name|'_pwd'
op|','
name|'pwd'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'pwd'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'test_passwordDatabase'
op|'.'
name|'skip'
op|'='
string|'"pwd module required"'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

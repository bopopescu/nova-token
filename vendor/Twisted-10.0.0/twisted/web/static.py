begin_unit
comment|'# -*- test-case-name: twisted.web.test.test_static -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nStatic resources for L{twisted.web}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
name|'import'
name|'urllib'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
name|'import'
name|'cgi'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'server'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'resource'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
name|'import'
name|'http'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'util'
name|'import'
name|'redirectTo'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'components'
op|','
name|'filepath'
op|','
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'abstract'
op|','
name|'interfaces'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
name|'import'
name|'pb'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'persisted'
name|'import'
name|'styles'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'InsensitiveDict'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'runtime'
name|'import'
name|'platformType'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|dangerousPathError
name|'dangerousPathError'
op|'='
name|'resource'
op|'.'
name|'NoResource'
op|'('
string|'"Invalid request URL."'
op|')'
newline|'\n'
nl|'\n'
DECL|function|isDangerous
name|'def'
name|'isDangerous'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'path'
op|'=='
string|"'..'"
name|'or'
string|"'/'"
name|'in'
name|'path'
name|'or'
name|'os'
op|'.'
name|'sep'
name|'in'
name|'path'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Data
dedent|''
name|'class'
name|'Data'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This is a static, in-memory resource.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resource'
op|'.'
name|'Resource'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
name|'data'
newline|'\n'
name|'self'
op|'.'
name|'type'
op|'='
name|'type'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|render_GET
dedent|''
name|'def'
name|'render_GET'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'request'
op|'.'
name|'setHeader'
op|'('
string|'"content-type"'
op|','
name|'self'
op|'.'
name|'type'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHeader'
op|'('
string|'"content-length"'
op|','
name|'str'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'data'
op|')'
op|')'
op|')'
newline|'\n'
name|'if'
name|'request'
op|'.'
name|'method'
op|'=='
string|'"HEAD"'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'data'
newline|'\n'
DECL|variable|render_HEAD
dedent|''
name|'render_HEAD'
op|'='
name|'render_GET'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|addSlash
dedent|''
name|'def'
name|'addSlash'
op|'('
name|'request'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'qs'
op|'='
string|"''"
newline|'\n'
name|'qindex'
op|'='
name|'request'
op|'.'
name|'uri'
op|'.'
name|'find'
op|'('
string|"'?'"
op|')'
newline|'\n'
name|'if'
name|'qindex'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'qs'
op|'='
name|'request'
op|'.'
name|'uri'
op|'['
name|'qindex'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
string|'"http%s://%s%s/%s"'
op|'%'
op|'('
nl|'\n'
name|'request'
op|'.'
name|'isSecure'
op|'('
op|')'
name|'and'
string|"'s'"
name|'or'
string|"''"
op|','
nl|'\n'
name|'request'
op|'.'
name|'getHeader'
op|'('
string|'"host"'
op|')'
op|','
nl|'\n'
op|'('
name|'request'
op|'.'
name|'uri'
op|'.'
name|'split'
op|'('
string|"'?'"
op|')'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
name|'qs'
op|')'
newline|'\n'
nl|'\n'
DECL|class|Redirect
dedent|''
name|'class'
name|'Redirect'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resource'
op|'.'
name|'Resource'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'url'
op|'='
name|'addSlash'
op|'('
name|'request'
op|')'
newline|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'redirectTo'
op|'('
name|'self'
op|'.'
name|'url'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Registry
dedent|''
dedent|''
name|'class'
name|'Registry'
op|'('
name|'components'
op|'.'
name|'Componentized'
op|','
name|'styles'
op|'.'
name|'Versioned'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I am a Componentized object that will be made available to internal Twisted\n    file-based dynamic web content such as .rpy and .epy scripts.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'components'
op|'.'
name|'Componentized'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_pathCache'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|persistenceVersion
dedent|''
name|'persistenceVersion'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|upgradeToVersion1
name|'def'
name|'upgradeToVersion1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_pathCache'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|cachePath
dedent|''
name|'def'
name|'cachePath'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'rsrc'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_pathCache'
op|'['
name|'path'
op|']'
op|'='
name|'rsrc'
newline|'\n'
nl|'\n'
DECL|member|getCachedPath
dedent|''
name|'def'
name|'getCachedPath'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_pathCache'
op|'.'
name|'get'
op|'('
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|loadMimeTypes
dedent|''
dedent|''
name|'def'
name|'loadMimeTypes'
op|'('
name|'mimetype_locations'
op|'='
op|'['
string|"'/etc/mime.types'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Multiple file locations containing mime-types can be passed as a list.\n    The files will be sourced in that order, overriding mime-types from the\n    files sourced beforehand, but only if a new entry explicitly overrides\n    the current entry.\n    """'
newline|'\n'
name|'import'
name|'mimetypes'
newline|'\n'
comment|"# Grab Python's built-in mimetypes dictionary."
nl|'\n'
name|'contentTypes'
op|'='
name|'mimetypes'
op|'.'
name|'types_map'
newline|'\n'
comment|"# Update Python's semi-erroneous dictionary with a few of the"
nl|'\n'
comment|'# usual suspects.'
nl|'\n'
name|'contentTypes'
op|'.'
name|'update'
op|'('
nl|'\n'
op|'{'
nl|'\n'
string|"'.conf'"
op|':'
string|"'text/plain'"
op|','
nl|'\n'
string|"'.diff'"
op|':'
string|"'text/plain'"
op|','
nl|'\n'
string|"'.exe'"
op|':'
string|"'application/x-executable'"
op|','
nl|'\n'
string|"'.flac'"
op|':'
string|"'audio/x-flac'"
op|','
nl|'\n'
string|"'.java'"
op|':'
string|"'text/plain'"
op|','
nl|'\n'
string|"'.ogg'"
op|':'
string|"'application/ogg'"
op|','
nl|'\n'
string|"'.oz'"
op|':'
string|"'text/x-oz'"
op|','
nl|'\n'
string|"'.swf'"
op|':'
string|"'application/x-shockwave-flash'"
op|','
nl|'\n'
string|"'.tgz'"
op|':'
string|"'application/x-gtar'"
op|','
nl|'\n'
string|"'.wml'"
op|':'
string|"'text/vnd.wap.wml'"
op|','
nl|'\n'
string|"'.xul'"
op|':'
string|"'application/vnd.mozilla.xul+xml'"
op|','
nl|'\n'
string|"'.py'"
op|':'
string|"'text/plain'"
op|','
nl|'\n'
string|"'.patch'"
op|':'
string|"'text/plain'"
op|','
nl|'\n'
op|'}'
nl|'\n'
op|')'
newline|'\n'
comment|'# Users can override these mime-types by loading them out configuration'
nl|'\n'
comment|"# files (this defaults to ['/etc/mime.types'])."
nl|'\n'
name|'for'
name|'location'
name|'in'
name|'mimetype_locations'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'location'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'more'
op|'='
name|'mimetypes'
op|'.'
name|'read_mime_types'
op|'('
name|'location'
op|')'
newline|'\n'
name|'if'
name|'more'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'contentTypes'
op|'.'
name|'update'
op|'('
name|'more'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'contentTypes'
newline|'\n'
nl|'\n'
DECL|function|getTypeAndEncoding
dedent|''
name|'def'
name|'getTypeAndEncoding'
op|'('
name|'filename'
op|','
name|'types'
op|','
name|'encodings'
op|','
name|'defaultType'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'p'
op|','
name|'ext'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'ext'
op|'='
name|'ext'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'if'
name|'encodings'
op|'.'
name|'has_key'
op|'('
name|'ext'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'enc'
op|'='
name|'encodings'
op|'['
name|'ext'
op|']'
newline|'\n'
name|'ext'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'p'
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'enc'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'type'
op|'='
name|'types'
op|'.'
name|'get'
op|'('
name|'ext'
op|','
name|'defaultType'
op|')'
newline|'\n'
name|'return'
name|'type'
op|','
name|'enc'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|File
dedent|''
name|'class'
name|'File'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|','
name|'styles'
op|'.'
name|'Versioned'
op|','
name|'filepath'
op|'.'
name|'FilePath'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    File is a resource that represents a plain non-interpreted file\n    (although it can look for an extension like .rpy or .cgi and hand the\n    file to a processor for interpretation if you wish). Its constructor\n    takes a file path.\n\n    Alternatively, you can give a directory path to the constructor. In this\n    case the resource will represent that directory, and its children will\n    be files underneath that directory. This provides access to an entire\n    filesystem tree with a single Resource.\n\n    If you map the URL \'http://server/FILE\' to a resource created as\n    File(\'/tmp\'), then http://server/FILE/ will return an HTML-formatted\n    listing of the /tmp/ directory, and http://server/FILE/foo/bar.html will\n    return the contents of /tmp/foo/bar.html .\n\n    @cvar childNotFound: L{Resource} used to render 404 Not Found error pages.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|contentTypes
name|'contentTypes'
op|'='
name|'loadMimeTypes'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|contentEncodings
name|'contentEncodings'
op|'='
op|'{'
nl|'\n'
string|'".gz"'
op|':'
string|'"gzip"'
op|','
nl|'\n'
string|'".bz2"'
op|':'
string|'"bzip2"'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|processors
name|'processors'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|indexNames
name|'indexNames'
op|'='
op|'['
string|'"index"'
op|','
string|'"index.html"'
op|','
string|'"index.htm"'
op|','
string|'"index.trp"'
op|','
string|'"index.rpy"'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|type
name|'type'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'### Versioning'
nl|'\n'
nl|'\n'
DECL|variable|persistenceVersion
name|'persistenceVersion'
op|'='
number|'6'
newline|'\n'
nl|'\n'
DECL|member|upgradeToVersion6
name|'def'
name|'upgradeToVersion6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'ignoredExts'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'allowExt'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ignoreExt'
op|'('
string|'"*"'
op|')'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'allowExt'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|upgradeToVersion5
dedent|''
name|'def'
name|'upgradeToVersion5'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'registry'
op|','
name|'Registry'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'registry'
op|'='
name|'Registry'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|upgradeToVersion4
dedent|''
dedent|''
name|'def'
name|'upgradeToVersion4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|"'registry'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'registry'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|upgradeToVersion3
dedent|''
dedent|''
name|'def'
name|'upgradeToVersion3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|"'allowExt'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'allowExt'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|upgradeToVersion2
dedent|''
dedent|''
name|'def'
name|'upgradeToVersion2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'defaultType'
op|'='
string|'"text/html"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|upgradeToVersion1
dedent|''
name|'def'
name|'upgradeToVersion1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|"'indexName'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'indexNames'
op|'='
op|'['
name|'self'
op|'.'
name|'indexName'
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'indexName'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'defaultType'
op|'='
string|'"text/html"'
op|','
name|'ignoredExts'
op|'='
op|'('
op|')'
op|','
name|'registry'
op|'='
name|'None'
op|','
name|'allowExt'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a file with the given path.\n\n        @param path: The filename of the file from which this L{File} will\n            serve data.\n        @type path: C{str}\n\n        @param defaultType: A I{major/minor}-style MIME type specifier\n            indicating the I{Content-Type} with which this L{File}\'s data\n            will be served if a MIME type cannot be determined based on\n            C{path}\'s extension.\n        @type defaultType: C{str}\n\n        @param ignoredExts: A sequence giving the extensions of paths in the\n            filesystem which will be ignored for the purposes of child\n            lookup.  For example, if C{ignoredExts} is C{(".bar",)} and\n            C{path} is a directory containing a file named C{"foo.bar"}, a\n            request for the C{"foo"} child of this resource will succeed\n            with a L{File} pointing to C{"foo.bar"}.\n\n        @param registry: The registry object being used to handle this\n            request.  If C{None}, one will be created.\n        @type registry: L{Registry}\n\n        @param allowExt: Ignored parameter, only present for backwards\n            compatibility.  Do not pass a value for this parameter.\n        """'
newline|'\n'
name|'resource'
op|'.'
name|'Resource'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'filepath'
op|'.'
name|'FilePath'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'defaultType'
op|'='
name|'defaultType'
newline|'\n'
name|'if'
name|'ignoredExts'
name|'in'
op|'('
number|'0'
op|','
number|'1'
op|')'
name|'or'
name|'allowExt'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"ignoredExts should receive a list, not a boolean"'
op|')'
newline|'\n'
name|'if'
name|'ignoredExts'
name|'or'
name|'allowExt'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'ignoredExts'
op|'='
op|'['
string|"'*'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'ignoredExts'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ignoredExts'
op|'='
name|'list'
op|'('
name|'ignoredExts'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'registry'
op|'='
name|'registry'
name|'or'
name|'Registry'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ignoreExt
dedent|''
name|'def'
name|'ignoreExt'
op|'('
name|'self'
op|','
name|'ext'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ignore the given extension.\n\n        Serve file.ext if file is requested\n        """'
newline|'\n'
name|'self'
op|'.'
name|'ignoredExts'
op|'.'
name|'append'
op|'('
name|'ext'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|childNotFound
dedent|''
name|'childNotFound'
op|'='
name|'resource'
op|'.'
name|'NoResource'
op|'('
string|'"File not found."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|directoryListing
name|'def'
name|'directoryListing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'DirectoryLister'
op|'('
name|'self'
op|'.'
name|'path'
op|','
nl|'\n'
name|'self'
op|'.'
name|'listNames'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'contentTypes'
op|','
nl|'\n'
name|'self'
op|'.'
name|'contentEncodings'
op|','
nl|'\n'
name|'self'
op|'.'
name|'defaultType'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getChild
dedent|''
name|'def'
name|'getChild'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If this L{File}\'s path refers to a directory, return a L{File}\n        referring to the file named C{path} in that directory.\n\n        If C{path} is the empty string, return a L{DirectoryLister} instead.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'restat'
op|'('
name|'reraise'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'isdir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'childNotFound'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'path'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'fpath'
op|'='
name|'self'
op|'.'
name|'child'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'filepath'
op|'.'
name|'InsecurePath'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'childNotFound'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'fpath'
op|'='
name|'self'
op|'.'
name|'childSearchPreauth'
op|'('
op|'*'
name|'self'
op|'.'
name|'indexNames'
op|')'
newline|'\n'
name|'if'
name|'fpath'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'directoryListing'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'fpath'
op|'.'
name|'exists'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fpath'
op|'='
name|'fpath'
op|'.'
name|'siblingExtensionSearch'
op|'('
op|'*'
name|'self'
op|'.'
name|'ignoredExts'
op|')'
newline|'\n'
name|'if'
name|'fpath'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'childNotFound'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'platformType'
op|'=='
string|'"win32"'
op|':'
newline|'\n'
comment|"# don't want .RPY to be different than .rpy, since that would allow"
nl|'\n'
comment|'# source disclosure.'
nl|'\n'
indent|'            '
name|'processor'
op|'='
name|'InsensitiveDict'
op|'('
name|'self'
op|'.'
name|'processors'
op|')'
op|'.'
name|'get'
op|'('
name|'fpath'
op|'.'
name|'splitext'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'processor'
op|'='
name|'self'
op|'.'
name|'processors'
op|'.'
name|'get'
op|'('
name|'fpath'
op|'.'
name|'splitext'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'processor'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'resource'
op|'.'
name|'IResource'
op|'('
name|'processor'
op|'('
name|'fpath'
op|'.'
name|'path'
op|','
name|'self'
op|'.'
name|'registry'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'createSimilarFile'
op|'('
name|'fpath'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# methods to allow subclasses to e.g. decrypt files on the fly:'
nl|'\n'
DECL|member|openForReading
dedent|''
name|'def'
name|'openForReading'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Open a file and return it."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getFileSize
dedent|''
name|'def'
name|'getFileSize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return file size."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'getsize'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_parseRangeHeader
dedent|''
name|'def'
name|'_parseRangeHeader'
op|'('
name|'self'
op|','
name|'range'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse the value of a Range header into (start, stop) pairs.\n\n        In a given pair, either of start or stop can be None, signifying that\n        no value was provided, but not both.\n\n        @return: A list C{[(start, stop)]} of pairs of length at least one.\n\n        @raise ValueError: if the header is syntactically invalid or if the\n            Bytes-Unit is anything other than \'bytes\'.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'kind'
op|','
name|'value'
op|'='
name|'range'
op|'.'
name|'split'
op|'('
string|"'='"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Missing \'=\' separator"'
op|')'
newline|'\n'
dedent|''
name|'kind'
op|'='
name|'kind'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'kind'
op|'!='
string|"'bytes'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Unsupported Bytes-Unit: %r"'
op|'%'
op|'('
name|'kind'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'unparsedRanges'
op|'='
name|'filter'
op|'('
name|'None'
op|','
name|'map'
op|'('
name|'str'
op|'.'
name|'strip'
op|','
name|'value'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|')'
op|')'
newline|'\n'
name|'parsedRanges'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'byteRange'
name|'in'
name|'unparsedRanges'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'start'
op|','
name|'end'
op|'='
name|'byteRange'
op|'.'
name|'split'
op|'('
string|"'-'"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|'"Invalid Byte-Range: %r"'
op|'%'
op|'('
name|'byteRange'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'start'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'start'
op|'='
name|'int'
op|'('
name|'start'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ValueError'
op|'('
string|'"Invalid Byte-Range: %r"'
op|'%'
op|'('
name|'byteRange'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'start'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'end'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'end'
op|'='
name|'int'
op|'('
name|'end'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ValueError'
op|'('
string|'"Invalid Byte-Range: %r"'
op|'%'
op|'('
name|'byteRange'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'end'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'start'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'end'
name|'is'
name|'not'
name|'None'
name|'and'
name|'start'
op|'>'
name|'end'
op|':'
newline|'\n'
comment|'# Start must be less than or equal to end or it is invalid.'
nl|'\n'
indent|'                    '
name|'raise'
name|'ValueError'
op|'('
string|'"Invalid Byte-Range: %r"'
op|'%'
op|'('
name|'byteRange'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'end'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# One or both of start and end must be specified.  Omitting'
nl|'\n'
comment|'# both is invalid.'
nl|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|'"Invalid Byte-Range: %r"'
op|'%'
op|'('
name|'byteRange'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'parsedRanges'
op|'.'
name|'append'
op|'('
op|'('
name|'start'
op|','
name|'end'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'parsedRanges'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_rangeToOffsetAndSize
dedent|''
name|'def'
name|'_rangeToOffsetAndSize'
op|'('
name|'self'
op|','
name|'start'
op|','
name|'end'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convert a start and end from a Range header to an offset and size.\n\n        This method checks that the resulting range overlaps with the resource\n        being served (and so has the value of C{getFileSize()} as an indirect\n        input).\n\n        Either but not both of start or end can be C{None}:\n\n         - Omitted start means that the end value is actually a start value\n           relative to the end of the resource.\n\n         - Omitted end means the end of the resource should be the end of\n           the range.\n\n        End is interpreted as inclusive, as per RFC 2616.\n\n        If this range doesn\'t overlap with any of this resource, C{(0, 0)} is\n        returned, which is not otherwise a value return value.\n\n        @param start: The start value from the header, or C{None} if one was\n            not present.\n        @param end: The end value from the header, or C{None} if one was not\n            present.\n        @return: C{(offset, size)} where offset is how far into this resource\n            this resource the range begins and size is how long the range is,\n            or C{(0, 0)} if the range does not overlap this resource.\n        """'
newline|'\n'
name|'size'
op|'='
name|'self'
op|'.'
name|'getFileSize'
op|'('
op|')'
newline|'\n'
name|'if'
name|'start'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'start'
op|'='
name|'size'
op|'-'
name|'end'
newline|'\n'
name|'end'
op|'='
name|'size'
newline|'\n'
dedent|''
name|'elif'
name|'end'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'end'
op|'='
name|'size'
newline|'\n'
dedent|''
name|'elif'
name|'end'
op|'<'
name|'size'
op|':'
newline|'\n'
indent|'            '
name|'end'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'end'
op|'>'
name|'size'
op|':'
newline|'\n'
indent|'            '
name|'end'
op|'='
name|'size'
newline|'\n'
dedent|''
name|'if'
name|'start'
op|'>='
name|'size'
op|':'
newline|'\n'
indent|'            '
name|'start'
op|'='
name|'end'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'return'
name|'start'
op|','
op|'('
name|'end'
op|'-'
name|'start'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_contentRange
dedent|''
name|'def'
name|'_contentRange'
op|'('
name|'self'
op|','
name|'offset'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a string suitable for the value of a Content-Range header for a\n        range with the given offset and size.\n\n        The offset and size are not sanity checked in any way.\n\n        @param offset: How far into this resource the range begins.\n        @param size: How long the range is.\n        @return: The value as appropriate for the value of a Content-Range\n            header.\n        """'
newline|'\n'
name|'return'
string|"'bytes %d-%d/%d'"
op|'%'
op|'('
nl|'\n'
name|'offset'
op|','
name|'offset'
op|'+'
name|'size'
op|'-'
number|'1'
op|','
name|'self'
op|'.'
name|'getFileSize'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_doSingleRangeRequest
dedent|''
name|'def'
name|'_doSingleRangeRequest'
op|'('
name|'self'
op|','
name|'request'
op|','
op|'('
name|'start'
op|','
name|'end'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set up the response for Range headers that specify a single range.\n\n        This method checks if the request is satisfiable and sets the response\n        code and Content-Range header appropriately.  The return value\n        indicates which part of the resource to return.\n\n        @param request: The Request object.\n        @param start: The start of the byte range as specified by the header.\n        @param end: The end of the byte range as specified by the header.  At\n            most one of C{start} and C{end} may be C{None}.\n        @return: A 2-tuple of the offset and size of the range to return.\n            offset == size == 0 indicates that the request is not satisfiable.\n        """'
newline|'\n'
name|'offset'
op|','
name|'size'
op|'='
name|'self'
op|'.'
name|'_rangeToOffsetAndSize'
op|'('
name|'start'
op|','
name|'end'
op|')'
newline|'\n'
name|'if'
name|'offset'
op|'=='
name|'size'
op|'=='
number|'0'
op|':'
newline|'\n'
comment|"# This range doesn't overlap with any of this resource, so the"
nl|'\n'
comment|'# request is unsatisfiable.'
nl|'\n'
indent|'            '
name|'request'
op|'.'
name|'setResponseCode'
op|'('
name|'http'
op|'.'
name|'REQUESTED_RANGE_NOT_SATISFIABLE'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHeader'
op|'('
nl|'\n'
string|"'content-range'"
op|','
string|"'bytes */%d'"
op|'%'
op|'('
name|'self'
op|'.'
name|'getFileSize'
op|'('
op|')'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'request'
op|'.'
name|'setResponseCode'
op|'('
name|'http'
op|'.'
name|'PARTIAL_CONTENT'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHeader'
op|'('
nl|'\n'
string|"'content-range'"
op|','
name|'self'
op|'.'
name|'_contentRange'
op|'('
name|'offset'
op|','
name|'size'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'offset'
op|','
name|'size'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_doMultipleRangeRequest
dedent|''
name|'def'
name|'_doMultipleRangeRequest'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'byteRanges'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set up the response for Range headers that specify a single range.\n\n        This method checks if the request is satisfiable and sets the response\n        code and Content-Type and Content-Length headers appropriately.  The\n        return value, which is a little complicated, indicates which parts of\n        the resource to return and the boundaries that should separate the\n        parts.\n\n        In detail, the return value is a tuple rangeInfo C{rangeInfo} is a\n        list of 3-tuples C{(partSeparator, partOffset, partSize)}.  The\n        response to this request should be, for each element of C{rangeInfo},\n        C{partSeparator} followed by C{partSize} bytes of the resource\n        starting at C{partOffset}.  Each C{partSeparator} includes the\n        MIME-style boundary and the part-specific Content-type and\n        Content-range headers.  It is convenient to return the separator as a\n        concrete string from this method, becasue this method needs to compute\n        the number of bytes that will make up the response to be able to set\n        the Content-Length header of the response accurately.\n\n        @param request: The Request object.\n        @param byteRanges: A list of C{(start, end)} values as specified by\n            the header.  For each range, at most one of C{start} and C{end}\n            may be C{None}.\n        @return: See above.\n        """'
newline|'\n'
name|'matchingRangeFound'
op|'='
name|'False'
newline|'\n'
name|'rangeInfo'
op|'='
op|'['
op|']'
newline|'\n'
name|'contentLength'
op|'='
number|'0'
newline|'\n'
name|'boundary'
op|'='
string|'"%x%x"'
op|'%'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'*'
number|'1000000'
op|')'
op|','
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'type'
op|':'
newline|'\n'
indent|'            '
name|'contentType'
op|'='
name|'self'
op|'.'
name|'type'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'contentType'
op|'='
string|"'bytes'"
comment|"# It's what Apache does..."
newline|'\n'
dedent|''
name|'for'
name|'start'
op|','
name|'end'
name|'in'
name|'byteRanges'
op|':'
newline|'\n'
indent|'            '
name|'partOffset'
op|','
name|'partSize'
op|'='
name|'self'
op|'.'
name|'_rangeToOffsetAndSize'
op|'('
name|'start'
op|','
name|'end'
op|')'
newline|'\n'
name|'if'
name|'partOffset'
op|'=='
name|'partSize'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'contentLength'
op|'+='
name|'partSize'
newline|'\n'
name|'matchingRangeFound'
op|'='
name|'True'
newline|'\n'
name|'partContentRange'
op|'='
name|'self'
op|'.'
name|'_contentRange'
op|'('
name|'partOffset'
op|','
name|'partSize'
op|')'
newline|'\n'
name|'partSeparator'
op|'='
op|'('
nl|'\n'
string|'"\\r\\n"'
nl|'\n'
string|'"--%s\\r\\n"'
nl|'\n'
string|'"Content-type: %s\\r\\n"'
nl|'\n'
string|'"Content-range: %s\\r\\n"'
nl|'\n'
string|'"\\r\\n"'
op|')'
op|'%'
op|'('
name|'boundary'
op|','
name|'contentType'
op|','
name|'partContentRange'
op|')'
newline|'\n'
name|'contentLength'
op|'+='
name|'len'
op|'('
name|'partSeparator'
op|')'
newline|'\n'
name|'rangeInfo'
op|'.'
name|'append'
op|'('
op|'('
name|'partSeparator'
op|','
name|'partOffset'
op|','
name|'partSize'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'matchingRangeFound'
op|':'
newline|'\n'
indent|'            '
name|'request'
op|'.'
name|'setResponseCode'
op|'('
name|'http'
op|'.'
name|'REQUESTED_RANGE_NOT_SATISFIABLE'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHeader'
op|'('
nl|'\n'
string|"'content-length'"
op|','
string|"'0'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHeader'
op|'('
nl|'\n'
string|"'content-range'"
op|','
string|"'bytes */%d'"
op|'%'
op|'('
name|'self'
op|'.'
name|'getFileSize'
op|'('
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'return'
op|'['
op|']'
op|','
string|"''"
newline|'\n'
dedent|''
name|'finalBoundary'
op|'='
string|'"\\r\\n--"'
op|'+'
name|'boundary'
op|'+'
string|'"--\\r\\n"'
newline|'\n'
name|'rangeInfo'
op|'.'
name|'append'
op|'('
op|'('
name|'finalBoundary'
op|','
number|'0'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setResponseCode'
op|'('
name|'http'
op|'.'
name|'PARTIAL_CONTENT'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHeader'
op|'('
nl|'\n'
string|"'content-type'"
op|','
string|'\'multipart/byteranges; boundary="%s"\''
op|'%'
op|'('
name|'boundary'
op|','
op|')'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setHeader'
op|'('
nl|'\n'
string|"'content-length'"
op|','
name|'contentLength'
op|'+'
name|'len'
op|'('
name|'finalBoundary'
op|')'
op|')'
newline|'\n'
name|'return'
name|'rangeInfo'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_setContentHeaders
dedent|''
name|'def'
name|'_setContentHeaders'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'size'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the Content-length and Content-type headers for this request.\n\n        This method is not appropriate for requests for multiple byte ranges;\n        L{_doMultipleRangeRequest} will set these headers in that case.\n\n        @param request: The L{Request} object.\n        @param size: The size of the response.  If not specified, default to\n            C{self.getFileSize()}.\n        """'
newline|'\n'
name|'if'
name|'size'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'self'
op|'.'
name|'getFileSize'
op|'('
op|')'
newline|'\n'
dedent|''
name|'request'
op|'.'
name|'setHeader'
op|'('
string|"'content-length'"
op|','
name|'str'
op|'('
name|'size'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'type'
op|':'
newline|'\n'
indent|'            '
name|'request'
op|'.'
name|'setHeader'
op|'('
string|"'content-type'"
op|','
name|'self'
op|'.'
name|'type'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'encoding'
op|':'
newline|'\n'
indent|'            '
name|'request'
op|'.'
name|'setHeader'
op|'('
string|"'content-encoding'"
op|','
name|'self'
op|'.'
name|'encoding'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeProducer
dedent|''
dedent|''
name|'def'
name|'makeProducer'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'fileForReading'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a L{StaticProducer} that will produce the body of this response.\n\n        This method will also set the response code and Content-* headers.\n\n        @param request: The L{Request} object.\n        @param fileForReading: The file object containing the resource.\n        @return: A L{StaticProducer}.  Calling C{.start()} on this will begin\n            producing the response.\n        """'
newline|'\n'
name|'byteRange'
op|'='
name|'request'
op|'.'
name|'getHeader'
op|'('
string|"'range'"
op|')'
newline|'\n'
name|'if'
name|'byteRange'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_setContentHeaders'
op|'('
name|'request'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setResponseCode'
op|'('
name|'http'
op|'.'
name|'OK'
op|')'
newline|'\n'
name|'return'
name|'NoRangeStaticProducer'
op|'('
name|'request'
op|','
name|'fileForReading'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'parsedRanges'
op|'='
name|'self'
op|'.'
name|'_parseRangeHeader'
op|'('
name|'byteRange'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Ignoring malformed Range header %r"'
op|'%'
op|'('
name|'byteRange'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setContentHeaders'
op|'('
name|'request'
op|')'
newline|'\n'
name|'request'
op|'.'
name|'setResponseCode'
op|'('
name|'http'
op|'.'
name|'OK'
op|')'
newline|'\n'
name|'return'
name|'NoRangeStaticProducer'
op|'('
name|'request'
op|','
name|'fileForReading'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'parsedRanges'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'offset'
op|','
name|'size'
op|'='
name|'self'
op|'.'
name|'_doSingleRangeRequest'
op|'('
nl|'\n'
name|'request'
op|','
name|'parsedRanges'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setContentHeaders'
op|'('
name|'request'
op|','
name|'size'
op|')'
newline|'\n'
name|'return'
name|'SingleRangeStaticProducer'
op|'('
nl|'\n'
name|'request'
op|','
name|'fileForReading'
op|','
name|'offset'
op|','
name|'size'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'rangeInfo'
op|'='
name|'self'
op|'.'
name|'_doMultipleRangeRequest'
op|'('
name|'request'
op|','
name|'parsedRanges'
op|')'
newline|'\n'
name|'return'
name|'MultipleRangeStaticProducer'
op|'('
nl|'\n'
name|'request'
op|','
name|'fileForReading'
op|','
name|'rangeInfo'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|render_GET
dedent|''
dedent|''
name|'def'
name|'render_GET'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Begin sending the contents of this L{File} (or a subset of the\n        contents, based on the \'range\' header) to the given request.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'restat'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'type'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'type'
op|','
name|'self'
op|'.'
name|'encoding'
op|'='
name|'getTypeAndEncoding'
op|'('
name|'self'
op|'.'
name|'basename'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'contentTypes'
op|','
nl|'\n'
name|'self'
op|'.'
name|'contentEncodings'
op|','
nl|'\n'
name|'self'
op|'.'
name|'defaultType'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'exists'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'childNotFound'
op|'.'
name|'render'
op|'('
name|'request'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'isdir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'redirect'
op|'('
name|'request'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'request'
op|'.'
name|'setHeader'
op|'('
string|"'accept-ranges'"
op|','
string|"'bytes'"
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fileForReading'
op|'='
name|'self'
op|'.'
name|'openForReading'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'errno'
newline|'\n'
name|'if'
name|'e'
op|'['
number|'0'
op|']'
op|'=='
name|'errno'
op|'.'
name|'EACCES'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'resource'
op|'.'
name|'ForbiddenResource'
op|'('
op|')'
op|'.'
name|'render'
op|'('
name|'request'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'request'
op|'.'
name|'setLastModified'
op|'('
name|'self'
op|'.'
name|'getmtime'
op|'('
op|')'
op|')'
name|'is'
name|'http'
op|'.'
name|'CACHED'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'producer'
op|'='
name|'self'
op|'.'
name|'makeProducer'
op|'('
name|'request'
op|','
name|'fileForReading'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'request'
op|'.'
name|'method'
op|'=='
string|"'HEAD'"
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'producer'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
comment|"# and make sure the connection doesn't get closed"
nl|'\n'
name|'return'
name|'server'
op|'.'
name|'NOT_DONE_YET'
newline|'\n'
DECL|variable|render_HEAD
dedent|''
name|'render_HEAD'
op|'='
name|'render_GET'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|redirect
name|'def'
name|'redirect'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'redirectTo'
op|'('
name|'addSlash'
op|'('
name|'request'
op|')'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|listNames
dedent|''
name|'def'
name|'listNames'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'isdir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'directory'
op|'='
name|'self'
op|'.'
name|'listdir'
op|'('
op|')'
newline|'\n'
name|'directory'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'return'
name|'directory'
newline|'\n'
nl|'\n'
DECL|member|listEntities
dedent|''
name|'def'
name|'listEntities'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'map'
op|'('
name|'lambda'
name|'fileName'
op|','
name|'self'
op|'='
name|'self'
op|':'
name|'self'
op|'.'
name|'createSimilarFile'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'fileName'
op|')'
op|')'
op|','
name|'self'
op|'.'
name|'listNames'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|createPickleChild
dedent|''
name|'def'
name|'createPickleChild'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'child'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"File.createPickleChild is deprecated since Twisted 9.0.  "'
nl|'\n'
string|'"Resource persistence is beyond the scope of Twisted Web."'
op|','
nl|'\n'
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resource'
op|'.'
name|'Resource'
op|'.'
name|'putChild'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'child'
op|')'
newline|'\n'
comment|'# xxx use a file-extension-to-save-function dictionary instead'
nl|'\n'
dedent|''
name|'if'
name|'type'
op|'('
name|'child'
op|')'
op|'=='
name|'type'
op|'('
string|'""'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fl'
op|'='
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'name'
op|')'
op|','
string|"'wb'"
op|')'
newline|'\n'
name|'fl'
op|'.'
name|'write'
op|'('
name|'child'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'.'"
name|'not'
name|'in'
name|'name'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|'='
name|'name'
op|'+'
string|"'.trp'"
newline|'\n'
dedent|''
name|'fl'
op|'='
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'name'
op|')'
op|','
string|"'wb'"
op|')'
newline|'\n'
name|'from'
name|'pickle'
name|'import'
name|'Pickler'
newline|'\n'
name|'pk'
op|'='
name|'Pickler'
op|'('
name|'fl'
op|')'
newline|'\n'
name|'pk'
op|'.'
name|'dump'
op|'('
name|'child'
op|')'
newline|'\n'
dedent|''
name|'fl'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|createSimilarFile
dedent|''
name|'def'
name|'createSimilarFile'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'('
name|'path'
op|','
name|'self'
op|'.'
name|'defaultType'
op|','
name|'self'
op|'.'
name|'ignoredExts'
op|','
name|'self'
op|'.'
name|'registry'
op|')'
newline|'\n'
comment|'# refactoring by steps, here - constructor should almost certainly take these'
nl|'\n'
name|'f'
op|'.'
name|'processors'
op|'='
name|'self'
op|'.'
name|'processors'
newline|'\n'
name|'f'
op|'.'
name|'indexNames'
op|'='
name|'self'
op|'.'
name|'indexNames'
op|'['
op|':'
op|']'
newline|'\n'
name|'f'
op|'.'
name|'childNotFound'
op|'='
name|'self'
op|'.'
name|'childNotFound'
newline|'\n'
name|'return'
name|'f'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StaticProducer
dedent|''
dedent|''
name|'class'
name|'StaticProducer'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Superclass for classes that implement the business of producing.\n\n    @ivar request: The L{IRequest} to write the contents of the file to.\n    @ivar fileObject: The file the contents of which to write to the request.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'IPullProducer'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|bufferSize
name|'bufferSize'
op|'='
name|'abstract'
op|'.'
name|'FileDescriptor'
op|'.'
name|'bufferSize'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'fileObject'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initialize the instance.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'='
name|'request'
newline|'\n'
name|'self'
op|'.'
name|'fileObject'
op|'='
name|'fileObject'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|start
dedent|''
name|'def'
name|'start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
name|'self'
op|'.'
name|'start'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
name|'self'
op|'.'
name|'resumeProducing'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stopProducing
dedent|''
name|'def'
name|'stopProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop producing data.\n\n        L{IPullProducer.stopProducing} is called when our consumer has died,\n        and subclasses also call this method when they are done producing\n        data.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'fileObject'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoRangeStaticProducer
dedent|''
dedent|''
name|'class'
name|'NoRangeStaticProducer'
op|'('
name|'StaticProducer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A L{StaticProducer} that writes the entire file to the request.\n    """'
newline|'\n'
nl|'\n'
DECL|member|start
name|'def'
name|'start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'request'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'request'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'data'
op|'='
name|'self'
op|'.'
name|'fileObject'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'bufferSize'
op|')'
newline|'\n'
name|'if'
name|'data'
op|':'
newline|'\n'
comment|'# this .write will spin the reactor, calling .doWrite and then'
nl|'\n'
comment|'# .resumeProducing again, so be prepared for a re-entrant call'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'request'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'request'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stopProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SingleRangeStaticProducer
dedent|''
dedent|''
dedent|''
name|'class'
name|'SingleRangeStaticProducer'
op|'('
name|'StaticProducer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A L{StaticProducer} that writes a single chunk of a file to the request.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'fileObject'
op|','
name|'offset'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initialize the instance.\n\n        @param request: See L{StaticProducer}.\n        @param fileObject: See L{StaticProducer}.\n        @param offset: The offset into the file of the chunk to be written.\n        @param size: The size of the chunk to write.\n        """'
newline|'\n'
name|'StaticProducer'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'fileObject'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'offset'
op|'='
name|'offset'
newline|'\n'
name|'self'
op|'.'
name|'size'
op|'='
name|'size'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|start
dedent|''
name|'def'
name|'start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fileObject'
op|'.'
name|'seek'
op|'('
name|'self'
op|'.'
name|'offset'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bytesWritten'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'request'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'data'
op|'='
name|'self'
op|'.'
name|'fileObject'
op|'.'
name|'read'
op|'('
nl|'\n'
name|'min'
op|'('
name|'self'
op|'.'
name|'bufferSize'
op|','
name|'self'
op|'.'
name|'size'
op|'-'
name|'self'
op|'.'
name|'bytesWritten'
op|')'
op|')'
newline|'\n'
name|'if'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'bytesWritten'
op|'+='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
comment|'# this .write will spin the reactor, calling .doWrite and then'
nl|'\n'
comment|'# .resumeProducing again, so be prepared for a re-entrant call'
nl|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'request'
name|'and'
name|'self'
op|'.'
name|'bytesWritten'
op|'=='
name|'self'
op|'.'
name|'size'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'request'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stopProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MultipleRangeStaticProducer
dedent|''
dedent|''
dedent|''
name|'class'
name|'MultipleRangeStaticProducer'
op|'('
name|'StaticProducer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A L{StaticProducer} that writes several chunks of a file to the request.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'fileObject'
op|','
name|'rangeInfo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initialize the instance.\n\n        @param request: See L{StaticProducer}.\n        @param fileObject: See L{StaticProducer}.\n        @param rangeInfo: A list of tuples C{[(boundary, offset, size)]}\n            where:\n             - C{boundary} will be written to the request first.\n             - C{offset} the offset into the file of chunk to write.\n             - C{size} the size of the chunk to write.\n        """'
newline|'\n'
name|'StaticProducer'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'fileObject'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rangeInfo'
op|'='
name|'rangeInfo'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|start
dedent|''
name|'def'
name|'start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'rangeIter'
op|'='
name|'iter'
op|'('
name|'self'
op|'.'
name|'rangeInfo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_nextRange'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_nextRange
dedent|''
name|'def'
name|'_nextRange'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'partBoundary'
op|','
name|'partOffset'
op|','
name|'self'
op|'.'
name|'_partSize'
op|'='
name|'self'
op|'.'
name|'rangeIter'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_partBytesWritten'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'fileObject'
op|'.'
name|'seek'
op|'('
name|'partOffset'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'request'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
name|'dataLength'
op|'='
number|'0'
newline|'\n'
name|'done'
op|'='
name|'False'
newline|'\n'
name|'while'
name|'dataLength'
op|'<'
name|'self'
op|'.'
name|'bufferSize'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'partBoundary'
op|':'
newline|'\n'
indent|'                '
name|'dataLength'
op|'+='
name|'len'
op|'('
name|'self'
op|'.'
name|'partBoundary'
op|')'
newline|'\n'
name|'data'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'partBoundary'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'partBoundary'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'p'
op|'='
name|'self'
op|'.'
name|'fileObject'
op|'.'
name|'read'
op|'('
nl|'\n'
name|'min'
op|'('
name|'self'
op|'.'
name|'bufferSize'
op|'-'
name|'dataLength'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_partSize'
op|'-'
name|'self'
op|'.'
name|'_partBytesWritten'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_partBytesWritten'
op|'+='
name|'len'
op|'('
name|'p'
op|')'
newline|'\n'
name|'dataLength'
op|'+='
name|'len'
op|'('
name|'p'
op|')'
newline|'\n'
name|'data'
op|'.'
name|'append'
op|'('
name|'p'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'request'
name|'and'
name|'self'
op|'.'
name|'_partBytesWritten'
op|'=='
name|'self'
op|'.'
name|'_partSize'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_nextRange'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'                    '
name|'done'
op|'='
name|'True'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'request'
op|'.'
name|'write'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
name|'if'
name|'done'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'request'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FileTransfer
dedent|''
dedent|''
dedent|''
name|'class'
name|'FileTransfer'
op|'('
name|'pb'
op|'.'
name|'Viewable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A class to represent the transfer of a file over the network.\n    """'
newline|'\n'
DECL|variable|request
name|'request'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'file'
op|','
name|'size'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"FileTransfer is deprecated since Twisted 9.0. "'
nl|'\n'
string|'"Use a subclass of StaticProducer instead."'
op|','
nl|'\n'
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'='
name|'file'
newline|'\n'
name|'self'
op|'.'
name|'size'
op|'='
name|'size'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'='
name|'request'
newline|'\n'
name|'self'
op|'.'
name|'written'
op|'='
name|'self'
op|'.'
name|'file'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
name|'request'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'request'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'data'
op|'='
name|'self'
op|'.'
name|'file'
op|'.'
name|'read'
op|'('
name|'min'
op|'('
name|'abstract'
op|'.'
name|'FileDescriptor'
op|'.'
name|'bufferSize'
op|','
name|'self'
op|'.'
name|'size'
op|'-'
name|'self'
op|'.'
name|'written'
op|')'
op|')'
newline|'\n'
name|'if'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'written'
op|'+='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
comment|'# this .write will spin the reactor, calling .doWrite and then'
nl|'\n'
comment|'# .resumeProducing again, so be prepared for a re-entrant call'
nl|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'request'
name|'and'
name|'self'
op|'.'
name|'file'
op|'.'
name|'tell'
op|'('
op|')'
op|'=='
name|'self'
op|'.'
name|'size'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'request'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|pauseProducing
dedent|''
dedent|''
name|'def'
name|'pauseProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|stopProducing
dedent|''
name|'def'
name|'stopProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Remotely relay producer interface.'
nl|'\n'
nl|'\n'
DECL|member|view_resumeProducing
dedent|''
name|'def'
name|'view_resumeProducing'
op|'('
name|'self'
op|','
name|'issuer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|view_pauseProducing
dedent|''
name|'def'
name|'view_pauseProducing'
op|'('
name|'self'
op|','
name|'issuer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|view_stopProducing
dedent|''
name|'def'
name|'view_stopProducing'
op|'('
name|'self'
op|','
name|'issuer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stopProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ASISProcessor
dedent|''
dedent|''
name|'class'
name|'ASISProcessor'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Serve files exactly as responses without generating a status-line or any\n    headers.  Inspired by Apache\'s mod_asis.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'registry'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resource'
op|'.'
name|'Resource'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
name|'self'
op|'.'
name|'registry'
op|'='
name|'registry'
name|'or'
name|'Registry'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'request'
op|'.'
name|'startedWriting'
op|'='
number|'1'
newline|'\n'
name|'res'
op|'='
name|'File'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'registry'
op|'='
name|'self'
op|'.'
name|'registry'
op|')'
newline|'\n'
name|'return'
name|'res'
op|'.'
name|'render'
op|'('
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|formatFileSize
dedent|''
dedent|''
name|'def'
name|'formatFileSize'
op|'('
name|'size'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Format the given file size in bytes to human readable format.\n    """'
newline|'\n'
name|'if'
name|'size'
op|'<'
number|'1024'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%iB'"
op|'%'
name|'size'
newline|'\n'
dedent|''
name|'elif'
name|'size'
op|'<'
op|'('
number|'1024'
op|'**'
number|'2'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%iK'"
op|'%'
op|'('
name|'size'
op|'/'
number|'1024'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'size'
op|'<'
op|'('
number|'1024'
op|'**'
number|'3'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%iM'"
op|'%'
op|'('
name|'size'
op|'/'
op|'('
number|'1024'
op|'**'
number|'2'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%iG'"
op|'%'
op|'('
name|'size'
op|'/'
op|'('
number|'1024'
op|'**'
number|'3'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DirectoryLister
dedent|''
dedent|''
name|'class'
name|'DirectoryLister'
op|'('
name|'resource'
op|'.'
name|'Resource'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Print the content of a directory.\n\n    @ivar template: page template used to render the content of the directory.\n        It must contain the format keys B{header} and B{tableContent}.\n    @type template: C{str}\n\n    @ivar linePattern: template used to render one line in the listing table.\n        It must contain the format keys B{class}, B{href}, B{text}, B{size},\n        B{type} and B{encoding}.\n    @type linePattern: C{str}\n\n    @ivar contentEncodings: a mapping of extensions to encoding types.\n    @type contentEncodings: C{dict}\n\n    @ivar defaultType: default type used when no mimetype is detected.\n    @type defaultType: C{str}\n\n    @ivar dirs: filtered content of C{path}, if the whole content should not be\n        displayed (default to C{None}, which means the actual content of\n        C{path} is printed).\n    @type dirs: C{NoneType} or C{list}\n\n    @ivar path: directory which content should be listed.\n    @type path: C{str}\n    """'
newline|'\n'
nl|'\n'
name|'template'
op|'='
string|'"""<html>\n<head>\n<title>%(header)s</title>\n<style>\n.even-dir { background-color: #efe0ef }\n.even { background-color: #eee }\n.odd-dir {background-color: #f0d0ef }\n.odd { background-color: #dedede }\n.icon { text-align: center }\n.listing {\n    margin-left: auto;\n    margin-right: auto;\n    width: 50%%;\n    padding: 0.1em;\n    }\n\nbody { border: 0; padding: 0; margin: 0; background-color: #efefef; }\nh1 {padding: 0.1em; background-color: #777; color: white; border-bottom: thin white dashed;}\n\n</style>\n</head>\n\n<body>\n<h1>%(header)s</h1>\n\n<table>\n    <thead>\n        <tr>\n            <th>Filename</th>\n            <th>Size</th>\n            <th>Content type</th>\n            <th>Content encoding</th>\n        </tr>\n    </thead>\n    <tbody>\n%(tableContent)s\n    </tbody>\n</table>\n\n</body>\n</html>\n"""'
newline|'\n'
nl|'\n'
name|'linePattern'
op|'='
string|'"""<tr class="%(class)s">\n    <td><a href="%(href)s">%(text)s</a></td>\n    <td>%(size)s</td>\n    <td>%(type)s</td>\n    <td>%(encoding)s</td>\n</tr>\n"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pathname'
op|','
name|'dirs'
op|'='
name|'None'
op|','
nl|'\n'
name|'contentTypes'
op|'='
name|'File'
op|'.'
name|'contentTypes'
op|','
nl|'\n'
name|'contentEncodings'
op|'='
name|'File'
op|'.'
name|'contentEncodings'
op|','
nl|'\n'
name|'defaultType'
op|'='
string|"'text/html'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resource'
op|'.'
name|'Resource'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'contentTypes'
op|'='
name|'contentTypes'
newline|'\n'
name|'self'
op|'.'
name|'contentEncodings'
op|'='
name|'contentEncodings'
newline|'\n'
name|'self'
op|'.'
name|'defaultType'
op|'='
name|'defaultType'
newline|'\n'
comment|'# dirs allows usage of the File to specify what gets listed'
nl|'\n'
name|'self'
op|'.'
name|'dirs'
op|'='
name|'dirs'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'pathname'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getFilesAndDirectories
dedent|''
name|'def'
name|'_getFilesAndDirectories'
op|'('
name|'self'
op|','
name|'directory'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Helper returning files and directories in given directory listing, with\n        attributes to be used to build a table content with\n        C{self.linePattern}.\n\n        @return: tuple of (directories, files)\n        @rtype: C{tuple} of C{list}\n        """'
newline|'\n'
name|'files'
op|'='
op|'['
op|']'
newline|'\n'
name|'dirs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'path'
name|'in'
name|'directory'
op|':'
newline|'\n'
indent|'            '
name|'url'
op|'='
name|'urllib'
op|'.'
name|'quote'
op|'('
name|'path'
op|','
string|'"/"'
op|')'
newline|'\n'
name|'escapedPath'
op|'='
name|'cgi'
op|'.'
name|'escape'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'path'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'url'
op|'='
name|'url'
op|'+'
string|"'/'"
newline|'\n'
name|'dirs'
op|'.'
name|'append'
op|'('
op|'{'
string|"'text'"
op|':'
name|'escapedPath'
op|'+'
string|'"/"'
op|','
string|"'href'"
op|':'
name|'url'
op|','
nl|'\n'
string|"'size'"
op|':'
string|"''"
op|','
string|"'type'"
op|':'
string|"'[Directory]'"
op|','
nl|'\n'
string|"'encoding'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'mimetype'
op|','
name|'encoding'
op|'='
name|'getTypeAndEncoding'
op|'('
name|'path'
op|','
name|'self'
op|'.'
name|'contentTypes'
op|','
nl|'\n'
name|'self'
op|'.'
name|'contentEncodings'
op|','
nl|'\n'
name|'self'
op|'.'
name|'defaultType'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'size'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'path'
op|')'
op|')'
op|'.'
name|'st_size'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'files'
op|'.'
name|'append'
op|'('
op|'{'
nl|'\n'
string|"'text'"
op|':'
name|'escapedPath'
op|','
string|'"href"'
op|':'
name|'url'
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'[%s]'"
op|'%'
name|'mimetype'
op|','
nl|'\n'
string|"'encoding'"
op|':'
op|'('
name|'encoding'
name|'and'
string|"'[%s]'"
op|'%'
name|'encoding'
name|'or'
string|"''"
op|')'
op|','
nl|'\n'
string|"'size'"
op|':'
name|'formatFileSize'
op|'('
name|'size'
op|')'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'dirs'
op|','
name|'files'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_buildTableContent
dedent|''
name|'def'
name|'_buildTableContent'
op|'('
name|'self'
op|','
name|'elements'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build a table content using C{self.linePattern} and giving elements odd\n        and even classes.\n        """'
newline|'\n'
name|'tableContent'
op|'='
op|'['
op|']'
newline|'\n'
name|'rowClasses'
op|'='
name|'itertools'
op|'.'
name|'cycle'
op|'('
op|'['
string|"'odd'"
op|','
string|"'even'"
op|']'
op|')'
newline|'\n'
name|'for'
name|'element'
op|','
name|'rowClass'
name|'in'
name|'zip'
op|'('
name|'elements'
op|','
name|'rowClasses'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'element'
op|'['
string|'"class"'
op|']'
op|'='
name|'rowClass'
newline|'\n'
name|'tableContent'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'linePattern'
op|'%'
name|'element'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'tableContent'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Render a listing of the content of C{self.path}.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'dirs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'directory'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'directory'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'directory'
op|'='
name|'self'
op|'.'
name|'dirs'
newline|'\n'
nl|'\n'
dedent|''
name|'dirs'
op|','
name|'files'
op|'='
name|'self'
op|'.'
name|'_getFilesAndDirectories'
op|'('
name|'directory'
op|')'
newline|'\n'
nl|'\n'
name|'tableContent'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'_buildTableContent'
op|'('
name|'dirs'
op|'+'
name|'files'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'header'
op|'='
string|'"Directory listing for %s"'
op|'%'
op|'('
nl|'\n'
name|'cgi'
op|'.'
name|'escape'
op|'('
name|'urllib'
op|'.'
name|'unquote'
op|'('
name|'request'
op|'.'
name|'uri'
op|')'
op|')'
op|','
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'template'
op|'%'
op|'{'
string|'"header"'
op|':'
name|'header'
op|','
string|'"tableContent"'
op|':'
name|'tableContent'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<DirectoryLister of %r>'"
op|'%'
name|'self'
op|'.'
name|'path'
newline|'\n'
nl|'\n'
DECL|variable|__str__
dedent|''
name|'__str__'
op|'='
name|'__repr__'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.web.test.test_proxy -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nSimplistic HTTP proxy support.\n\nThis comes in two main variants - the Proxy and the ReverseProxy.\n\nWhen a Proxy is in use, a browser trying to connect to a server (say,\nwww.yahoo.com) will be intercepted by the Proxy, and the proxy will covertly\nconnect to the server, and return the result.\n\nWhen a ReverseProxy is in use, the client connects directly to the ReverseProxy\n(say, www.yahoo.com) which farms off the request to one of a pool of servers,\nand returns the result.\n\nNormally, a Proxy is used on the client end of an Internet connection, while a\nReverseProxy is used on the server end.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'urlparse'
newline|'\n'
name|'from'
name|'urllib'
name|'import'
name|'quote'
name|'as'
name|'urlquote'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'protocol'
name|'import'
name|'ClientFactory'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'resource'
name|'import'
name|'Resource'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'server'
name|'import'
name|'NOT_DONE_YET'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'http'
name|'import'
name|'HTTPClient'
op|','
name|'Request'
op|','
name|'HTTPChannel'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProxyClient
name|'class'
name|'ProxyClient'
op|'('
name|'HTTPClient'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Used by ProxyClientFactory to implement a simple web proxy.\n\n    @ivar _finished: A flag which indicates whether or not the original request\n        has been finished yet.\n    """'
newline|'\n'
DECL|variable|_finished
name|'_finished'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'rest'
op|','
name|'version'
op|','
name|'headers'
op|','
name|'data'
op|','
name|'father'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'father'
op|'='
name|'father'
newline|'\n'
name|'self'
op|'.'
name|'command'
op|'='
name|'command'
newline|'\n'
name|'self'
op|'.'
name|'rest'
op|'='
name|'rest'
newline|'\n'
name|'if'
string|'"proxy-connection"'
name|'in'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'headers'
op|'['
string|'"proxy-connection"'
op|']'
newline|'\n'
dedent|''
name|'headers'
op|'['
string|'"connection"'
op|']'
op|'='
string|'"close"'
newline|'\n'
name|'headers'
op|'.'
name|'pop'
op|'('
string|"'keep-alive'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'headers'
op|'='
name|'headers'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
name|'data'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'self'
op|'.'
name|'command'
op|','
name|'self'
op|'.'
name|'rest'
op|')'
newline|'\n'
name|'for'
name|'header'
op|','
name|'value'
name|'in'
name|'self'
op|'.'
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendHeader'
op|'('
name|'header'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'endHeaders'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|handleStatus
dedent|''
name|'def'
name|'handleStatus'
op|'('
name|'self'
op|','
name|'version'
op|','
name|'code'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'father'
op|'.'
name|'setResponseCode'
op|'('
name|'int'
op|'('
name|'code'
op|')'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|handleHeader
dedent|''
name|'def'
name|'handleHeader'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
comment|'# t.web.server.Request sets default values for these headers in its'
nl|'\n'
comment|"# 'process' method. When these headers are received from the remote"
nl|'\n'
comment|'# server, they ought to override the defaults, rather than append to'
nl|'\n'
comment|'# them.'
nl|'\n'
indent|'        '
name|'if'
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
op|'['
string|"'server'"
op|','
string|"'date'"
op|','
string|"'content-type'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'father'
op|'.'
name|'responseHeaders'
op|'.'
name|'setRawHeaders'
op|'('
name|'key'
op|','
op|'['
name|'value'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'father'
op|'.'
name|'responseHeaders'
op|'.'
name|'addRawHeader'
op|'('
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|handleResponsePart
dedent|''
dedent|''
name|'def'
name|'handleResponsePart'
op|'('
name|'self'
op|','
name|'buffer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'father'
op|'.'
name|'write'
op|'('
name|'buffer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|handleResponseEnd
dedent|''
name|'def'
name|'handleResponseEnd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Finish the original request, indicating that the response has been\n        completely written to it, and disconnect the outgoing transport.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_finished'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_finished'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'father'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProxyClientFactory
dedent|''
dedent|''
dedent|''
name|'class'
name|'ProxyClientFactory'
op|'('
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Used by ProxyRequest to implement a simple web proxy.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'ProxyClient'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'rest'
op|','
name|'version'
op|','
name|'headers'
op|','
name|'data'
op|','
name|'father'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'father'
op|'='
name|'father'
newline|'\n'
name|'self'
op|'.'
name|'command'
op|'='
name|'command'
newline|'\n'
name|'self'
op|'.'
name|'rest'
op|'='
name|'rest'
newline|'\n'
name|'self'
op|'.'
name|'headers'
op|'='
name|'headers'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
name|'data'
newline|'\n'
name|'self'
op|'.'
name|'version'
op|'='
name|'version'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'protocol'
op|'('
name|'self'
op|'.'
name|'command'
op|','
name|'self'
op|'.'
name|'rest'
op|','
name|'self'
op|'.'
name|'version'
op|','
nl|'\n'
name|'self'
op|'.'
name|'headers'
op|','
name|'self'
op|'.'
name|'data'
op|','
name|'self'
op|'.'
name|'father'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
dedent|''
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Report a connection failure in a response to the incoming request as\n        an error.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'father'
op|'.'
name|'setResponseCode'
op|'('
number|'501'
op|','
string|'"Gateway error"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'father'
op|'.'
name|'responseHeaders'
op|'.'
name|'addRawHeader'
op|'('
string|'"Content-Type"'
op|','
string|'"text/html"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'father'
op|'.'
name|'write'
op|'('
string|'"<H1>Could not connect</H1>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'father'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProxyRequest
dedent|''
dedent|''
name|'class'
name|'ProxyRequest'
op|'('
name|'Request'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Used by Proxy to implement a simple web proxy.\n\n    @ivar reactor: the reactor used to create connections.\n    @type reactor: object providing L{twisted.internet.interfaces.IReactorTCP}\n    """'
newline|'\n'
nl|'\n'
DECL|variable|protocols
name|'protocols'
op|'='
op|'{'
string|"'http'"
op|':'
name|'ProxyClientFactory'
op|'}'
newline|'\n'
DECL|variable|ports
name|'ports'
op|'='
op|'{'
string|"'http'"
op|':'
number|'80'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'queued'
op|','
name|'reactor'
op|'='
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Request'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'queued'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|process
dedent|''
name|'def'
name|'process'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|'='
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'self'
op|'.'
name|'uri'
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'parsed'
op|'['
number|'0'
op|']'
newline|'\n'
name|'host'
op|'='
name|'parsed'
op|'['
number|'1'
op|']'
newline|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'ports'
op|'['
name|'protocol'
op|']'
newline|'\n'
name|'if'
string|"':'"
name|'in'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|','
name|'port'
op|'='
name|'host'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'port'
op|'='
name|'int'
op|'('
name|'port'
op|')'
newline|'\n'
dedent|''
name|'rest'
op|'='
name|'urlparse'
op|'.'
name|'urlunparse'
op|'('
op|'('
string|"''"
op|','
string|"''"
op|')'
op|'+'
name|'parsed'
op|'['
number|'2'
op|':'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'rest'
op|':'
newline|'\n'
indent|'            '
name|'rest'
op|'='
name|'rest'
op|'+'
string|"'/'"
newline|'\n'
dedent|''
name|'class_'
op|'='
name|'self'
op|'.'
name|'protocols'
op|'['
name|'protocol'
op|']'
newline|'\n'
name|'headers'
op|'='
name|'self'
op|'.'
name|'getAllHeaders'
op|'('
op|')'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'if'
string|"'host'"
name|'not'
name|'in'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'['
string|"'host'"
op|']'
op|'='
name|'host'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'content'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'content'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'clientFactory'
op|'='
name|'class_'
op|'('
name|'self'
op|'.'
name|'method'
op|','
name|'rest'
op|','
name|'self'
op|'.'
name|'clientproto'
op|','
name|'headers'
op|','
nl|'\n'
name|'s'
op|','
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'clientFactory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Proxy
dedent|''
dedent|''
name|'class'
name|'Proxy'
op|'('
name|'HTTPChannel'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class implements a simple web proxy.\n\n    Since it inherits from L{twisted.protocols.http.HTTPChannel}, to use it you\n    should do something like this::\n\n        from twisted.web import http\n        f = http.HTTPFactory()\n        f.protocol = Proxy\n\n    Make the HTTPFactory a listener on a port as per usual, and you have\n    a fully-functioning web proxy!\n    """'
newline|'\n'
nl|'\n'
DECL|variable|requestFactory
name|'requestFactory'
op|'='
name|'ProxyRequest'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReverseProxyRequest
dedent|''
name|'class'
name|'ReverseProxyRequest'
op|'('
name|'Request'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Used by ReverseProxy to implement a simple reverse proxy.\n\n    @ivar proxyClientFactoryClass: a proxy client factory class, used to create\n        new connections.\n    @type proxyClientFactoryClass: L{ClientFactory}\n\n    @ivar reactor: the reactor used to create connections.\n    @type reactor: object providing L{twisted.internet.interfaces.IReactorTCP}\n    """'
newline|'\n'
nl|'\n'
DECL|variable|proxyClientFactoryClass
name|'proxyClientFactoryClass'
op|'='
name|'ProxyClientFactory'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'queued'
op|','
name|'reactor'
op|'='
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Request'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'queued'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|process
dedent|''
name|'def'
name|'process'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle this request by connecting to the proxied server and forwarding\n        it there, then forwarding the response back as the response to this\n        request.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'received_headers'
op|'['
string|"'host'"
op|']'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'host'
newline|'\n'
name|'clientFactory'
op|'='
name|'self'
op|'.'
name|'proxyClientFactoryClass'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'method'
op|','
name|'self'
op|'.'
name|'uri'
op|','
name|'self'
op|'.'
name|'clientproto'
op|','
name|'self'
op|'.'
name|'getAllHeaders'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'content'
op|'.'
name|'read'
op|'('
op|')'
op|','
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'port'
op|','
nl|'\n'
name|'clientFactory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReverseProxy
dedent|''
dedent|''
name|'class'
name|'ReverseProxy'
op|'('
name|'HTTPChannel'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Implements a simple reverse proxy.\n\n    For details of usage, see the file examples/proxy.py.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|requestFactory
name|'requestFactory'
op|'='
name|'ReverseProxyRequest'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReverseProxyResource
dedent|''
name|'class'
name|'ReverseProxyResource'
op|'('
name|'Resource'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Resource that renders the results gotten from another server\n\n    Put this resource in the tree to cause everything below it to be relayed\n    to a different server.\n\n    @ivar proxyClientFactoryClass: a proxy client factory class, used to create\n        new connections.\n    @type proxyClientFactoryClass: L{ClientFactory}\n\n    @ivar reactor: the reactor used to create connections.\n    @type reactor: object providing L{twisted.internet.interfaces.IReactorTCP}\n    """'
newline|'\n'
nl|'\n'
DECL|variable|proxyClientFactoryClass
name|'proxyClientFactoryClass'
op|'='
name|'ProxyClientFactory'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|','
name|'path'
op|','
name|'reactor'
op|'='
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param host: the host of the web server to proxy.\n        @type host: C{str}\n\n        @param port: the port of the web server to proxy.\n        @type port: C{port}\n\n        @param path: the base path to fetch data from. Note that you shouldn\'t\n            put any trailing slashes in it, it will be added automatically in\n            request. For example, if you put B{/foo}, a request on B{/bar} will\n            be proxied to B{/foo/bar}.  Any required encoding of special\n            characters (such as " " or "/") should have been done already.\n\n        @type path: C{str}\n        """'
newline|'\n'
name|'Resource'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getChild
dedent|''
name|'def'
name|'getChild'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create and return a proxy resource with the same proxy configuration\n        as this one, except that its path also contains the segment given by\n        C{path} at the end.\n        """'
newline|'\n'
name|'return'
name|'ReverseProxyResource'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'port'
op|','
name|'self'
op|'.'
name|'path'
op|'+'
string|"'/'"
op|'+'
name|'urlquote'
op|'('
name|'path'
op|','
name|'safe'
op|'='
string|'""'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Render a request by forwarding it to the proxied server.\n        """'
newline|'\n'
comment|"# RFC 2616 tells us that we can omit the port if it's the default port,"
nl|'\n'
comment|'# but we have to provide it otherwise'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'port'
op|'=='
number|'80'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
string|'"%s:%d"'
op|'%'
op|'('
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'port'
op|')'
newline|'\n'
dedent|''
name|'request'
op|'.'
name|'received_headers'
op|'['
string|"'host'"
op|']'
op|'='
name|'host'
newline|'\n'
name|'request'
op|'.'
name|'content'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'qs'
op|'='
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'request'
op|'.'
name|'uri'
op|')'
op|'['
number|'4'
op|']'
newline|'\n'
name|'if'
name|'qs'
op|':'
newline|'\n'
indent|'            '
name|'rest'
op|'='
name|'self'
op|'.'
name|'path'
op|'+'
string|"'?'"
op|'+'
name|'qs'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'rest'
op|'='
name|'self'
op|'.'
name|'path'
newline|'\n'
dedent|''
name|'clientFactory'
op|'='
name|'self'
op|'.'
name|'proxyClientFactoryClass'
op|'('
nl|'\n'
name|'request'
op|'.'
name|'method'
op|','
name|'rest'
op|','
name|'request'
op|'.'
name|'clientproto'
op|','
nl|'\n'
name|'request'
op|'.'
name|'getAllHeaders'
op|'('
op|')'
op|','
name|'request'
op|'.'
name|'content'
op|'.'
name|'read'
op|'('
op|')'
op|','
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'port'
op|','
name|'clientFactory'
op|')'
newline|'\n'
name|'return'
name|'NOT_DONE_YET'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

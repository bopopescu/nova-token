begin_unit
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nSupport for starting, monitoring, and restarting child process.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'error'
op|','
name|'protocol'
op|','
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'application'
name|'import'
name|'service'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
newline|'\n'
nl|'\n'
DECL|class|DummyTransport
name|'class'
name|'DummyTransport'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|disconnecting
indent|'    '
name|'disconnecting'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|variable|transport
dedent|''
name|'transport'
op|'='
name|'DummyTransport'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|LineLogger
name|'class'
name|'LineLogger'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|tag
indent|'    '
name|'tag'
op|'='
name|'None'
newline|'\n'
DECL|variable|delimiter
name|'delimiter'
op|'='
string|"'\\n'"
newline|'\n'
nl|'\n'
DECL|member|lineReceived
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'[%s] %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'tag'
op|','
name|'line'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|LoggingProtocol
dedent|''
dedent|''
name|'class'
name|'LoggingProtocol'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|service
indent|'    '
name|'service'
op|'='
name|'None'
newline|'\n'
DECL|variable|name
name|'name'
op|'='
name|'None'
newline|'\n'
DECL|variable|empty
name|'empty'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'output'
op|'='
name|'LineLogger'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'output'
op|'.'
name|'tag'
op|'='
name|'self'
op|'.'
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'output'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
nl|'\n'
DECL|member|outReceived
dedent|''
name|'def'
name|'outReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'output'
op|'.'
name|'dataReceived'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'empty'
op|'='
name|'data'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|"'\\n'"
newline|'\n'
nl|'\n'
DECL|variable|errReceived
dedent|''
name|'errReceived'
op|'='
name|'outReceived'
newline|'\n'
nl|'\n'
DECL|member|processEnded
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'empty'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'output'
op|'.'
name|'dataReceived'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'service'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProcessMonitor
dedent|''
dedent|''
name|'class'
name|'ProcessMonitor'
op|'('
name|'service'
op|'.'
name|'Service'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    ProcessMonitor runs processes, monitors their progress, and restarts them\n    when they die.\n\n    The ProcessMonitor will not attempt to restart a process that appears to die\n    instantly -- with each "instant" death (less than 1 second, by default), it\n    will delay approximately twice as long before restarting it. A successful\n    run will reset the counter.\n\n    The primary interface is L{addProcess} and L{removeProcess}. When the service\n    is active (that is, when the application it is attached to is running),\n    adding a process automatically starts it.\n\n    Each process has a name. This name string must uniquely identify the\n    process. In particular, attempting to add two processes with the same name\n    will result in a C{KeyError}.\n\n    @type threshold: C{float}\n    @ivar threshold: How long a process has to live before the death is\n        considered instant, in seconds. The default value is 1 second.\n\n    @type killTime: C{float}\n    @ivar killTime: How long a process being killed has to get its affairs in\n        order before it gets killed with an unmaskable signal. The default value\n        is 5 seconds.\n\n    @type consistencyDelay: C{float}\n    @ivar consistencyDelay: The time between consistency checks. The default\n        value is 60 seconds.\n    """'
newline|'\n'
DECL|variable|threshold
name|'threshold'
op|'='
number|'1'
newline|'\n'
DECL|variable|active
name|'active'
op|'='
number|'0'
newline|'\n'
DECL|variable|killTime
name|'killTime'
op|'='
number|'5'
newline|'\n'
DECL|variable|consistency
name|'consistency'
op|'='
name|'None'
newline|'\n'
DECL|variable|consistencyDelay
name|'consistencyDelay'
op|'='
number|'60'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'processes'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'protocols'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'delay'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'timeStarted'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'murder'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dct'
op|'='
name|'service'
op|'.'
name|'Service'
op|'.'
name|'__getstate__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'for'
name|'k'
name|'in'
op|'('
string|"'active'"
op|','
string|"'consistency'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'dct'
op|'.'
name|'has_key'
op|'('
name|'k'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'dct'
op|'['
name|'k'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'dct'
op|'['
string|"'protocols'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'dct'
op|'['
string|"'delay'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'dct'
op|'['
string|"'timeStarted'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'dct'
op|'['
string|"'murder'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'return'
name|'dct'
newline|'\n'
nl|'\n'
DECL|member|_checkConsistency
dedent|''
name|'def'
name|'_checkConsistency'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'name'
op|','
name|'protocol'
name|'in'
name|'self'
op|'.'
name|'protocols'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'proc'
op|'='
name|'protocol'
op|'.'
name|'transport'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'proc'
op|'.'
name|'signalProcess'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'OSError'
op|','
name|'error'
op|'.'
name|'ProcessExitedAlready'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Lost process %r somehow, restarting."'
op|'%'
name|'name'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'protocols'
op|'['
name|'name'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'startProcess'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'consistency'
op|'='
name|'reactor'
op|'.'
name|'callLater'
op|'('
name|'self'
op|'.'
name|'consistencyDelay'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_checkConsistency'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addProcess
dedent|''
name|'def'
name|'addProcess'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'args'
op|','
name|'uid'
op|'='
name|'None'
op|','
name|'gid'
op|'='
name|'None'
op|','
name|'env'
op|'='
op|'{'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add a new process to launch, monitor, and restart when necessary.\n\n        Note that args are passed to the system call, not to the shell. If\n        running the shell is desired, the common idiom is to use\n        C{.addProcess("name", [\'/bin/sh\', \'-c\', shell_script])}\n\n        See L{removeProcess} for removing processes from the monitor.\n\n        @param name: A label for this process.  This value must be unique\n            across all processes added to this monitor.\n        @type name: C{str}\n        @param args: The argv sequence for the process to launch.\n        @param uid: The user ID to use to run the process.  If C{None}, the\n            current UID is used.\n        @type uid: C{int}\n        @param gid: The group ID to use to run the process.  If C{None}, the\n            current GID is used.\n        @type uid: C{int}\n        @param env: The environment to give to the launched process.  See\n            L{IReactorProcess.spawnProcess}\'s C{env} parameter.\n        @type env: C{dict}\n        """'
newline|'\n'
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'processes'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'KeyError'
op|'('
string|'"remove %s first"'
op|'%'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'processes'
op|'['
name|'name'
op|']'
op|'='
name|'args'
op|','
name|'uid'
op|','
name|'gid'
op|','
name|'env'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'active'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'startProcess'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeProcess
dedent|''
dedent|''
name|'def'
name|'removeProcess'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the process is started, kill it. It will never get restarted.\n\n        See L{addProcess} for adding processes to the monitor.\n\n        @type name: C{str}\n        @param name: The string that uniquely identifies the process.\n        """'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'processes'
op|'['
name|'name'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'stopProcess'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|startService
dedent|''
name|'def'
name|'startService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'service'
op|'.'
name|'Service'
op|'.'
name|'startService'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'active'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'self'
op|'.'
name|'processes'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'startProcess'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'consistency'
op|'='
name|'reactor'
op|'.'
name|'callLater'
op|'('
name|'self'
op|'.'
name|'consistencyDelay'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_checkConsistency'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopService
dedent|''
name|'def'
name|'stopService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'service'
op|'.'
name|'Service'
op|'.'
name|'stopService'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'active'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'self'
op|'.'
name|'processes'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stopProcess'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'consistency'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'murder'
op|'.'
name|'has_key'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'murder'
op|'['
name|'name'
op|']'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'murder'
op|'['
name|'name'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'protocols'
op|'.'
name|'has_key'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'protocols'
op|'['
name|'name'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'self'
op|'.'
name|'timeStarted'
op|'['
name|'name'
op|']'
op|'<'
name|'self'
op|'.'
name|'threshold'
op|':'
newline|'\n'
indent|'            '
name|'delay'
op|'='
name|'self'
op|'.'
name|'delay'
op|'['
name|'name'
op|']'
op|'='
name|'min'
op|'('
number|'1'
op|'+'
number|'2'
op|'*'
name|'self'
op|'.'
name|'delay'
op|'.'
name|'get'
op|'('
name|'name'
op|','
number|'0'
op|')'
op|','
number|'3600'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'delay'
op|'='
name|'self'
op|'.'
name|'delay'
op|'['
name|'name'
op|']'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'active'
name|'and'
name|'self'
op|'.'
name|'processes'
op|'.'
name|'has_key'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'callLater'
op|'('
name|'delay'
op|','
name|'self'
op|'.'
name|'startProcess'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startProcess
dedent|''
dedent|''
name|'def'
name|'startProcess'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'protocols'
op|'.'
name|'has_key'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'p'
op|'='
name|'self'
op|'.'
name|'protocols'
op|'['
name|'name'
op|']'
op|'='
name|'LoggingProtocol'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'service'
op|'='
name|'self'
newline|'\n'
name|'p'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'args'
op|','
name|'uid'
op|','
name|'gid'
op|','
name|'env'
op|'='
name|'self'
op|'.'
name|'processes'
op|'['
name|'name'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'timeStarted'
op|'['
name|'name'
op|']'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'args'
op|'['
number|'0'
op|']'
op|','
name|'args'
op|','
name|'uid'
op|'='
name|'uid'
op|','
name|'gid'
op|'='
name|'gid'
op|','
name|'env'
op|'='
name|'env'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_forceStopProcess
dedent|''
name|'def'
name|'_forceStopProcess'
op|'('
name|'self'
op|','
name|'proc'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'proc'
op|'.'
name|'signalProcess'
op|'('
string|"'KILL'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'error'
op|'.'
name|'ProcessExitedAlready'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|stopProcess
dedent|''
dedent|''
name|'def'
name|'stopProcess'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'protocols'
op|'.'
name|'has_key'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'proc'
op|'='
name|'self'
op|'.'
name|'protocols'
op|'['
name|'name'
op|']'
op|'.'
name|'transport'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'protocols'
op|'['
name|'name'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'proc'
op|'.'
name|'signalProcess'
op|'('
string|"'TERM'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'error'
op|'.'
name|'ProcessExitedAlready'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'murder'
op|'['
name|'name'
op|']'
op|'='
name|'reactor'
op|'.'
name|'callLater'
op|'('
name|'self'
op|'.'
name|'killTime'
op|','
name|'self'
op|'.'
name|'_forceStopProcess'
op|','
name|'proc'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|restartAll
dedent|''
dedent|''
name|'def'
name|'restartAll'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Restart all processes. This is useful for third party management\n        services to allow a user to restart servers because of an outside change\n        in circumstances -- for example, a new version of a library is\n        installed.\n        """'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'self'
op|'.'
name|'processes'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stopProcess'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'name'
op|','
name|'proc'
name|'in'
name|'self'
op|'.'
name|'processes'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'uidgid'
op|'='
string|"''"
newline|'\n'
name|'if'
name|'proc'
op|'['
number|'1'
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'uidgid'
op|'='
name|'str'
op|'('
name|'proc'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'proc'
op|'['
number|'2'
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'uidgid'
op|'+='
string|"':'"
op|'+'
name|'str'
op|'('
name|'proc'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'uidgid'
op|':'
newline|'\n'
indent|'                '
name|'uidgid'
op|'='
string|"'('"
op|'+'
name|'uidgid'
op|'+'
string|"')'"
newline|'\n'
dedent|''
name|'l'
op|'.'
name|'append'
op|'('
string|"'%r%s: %r'"
op|'%'
op|'('
name|'name'
op|','
name|'uidgid'
op|','
name|'proc'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
string|"'<'"
op|'+'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'+'
string|"' '"
nl|'\n'
op|'+'
string|"' '"
op|'.'
name|'join'
op|'('
name|'l'
op|')'
nl|'\n'
op|'+'
string|"'>'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|main
dedent|''
dedent|''
name|'def'
name|'main'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'signal'
name|'import'
name|'SIGTERM'
newline|'\n'
name|'mon'
op|'='
name|'ProcessMonitor'
op|'('
op|')'
newline|'\n'
name|'mon'
op|'.'
name|'addProcess'
op|'('
string|"'foo'"
op|','
op|'['
string|"'/bin/sh'"
op|','
string|"'-c'"
op|','
string|"'sleep 2;echo hello'"
op|']'
op|')'
newline|'\n'
name|'mon'
op|'.'
name|'addProcess'
op|'('
string|"'qux'"
op|','
op|'['
string|"'/bin/sh'"
op|','
string|"'-c'"
op|','
string|"'sleep 2;printf pilim'"
op|']'
op|')'
newline|'\n'
name|'mon'
op|'.'
name|'addProcess'
op|'('
string|"'bar'"
op|','
op|'['
string|"'/bin/sh'"
op|','
string|"'-c'"
op|','
string|"'echo goodbye'"
op|']'
op|')'
newline|'\n'
name|'mon'
op|'.'
name|'addProcess'
op|'('
string|"'baz'"
op|','
op|'['
string|"'/bin/sh'"
op|','
string|"'-c'"
op|','
nl|'\n'
string|"'echo welcome;while :;do echo blah;sleep 5;done'"
op|']'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'30'
op|','
name|'lambda'
name|'mon'
op|'='
name|'mon'
op|':'
nl|'\n'
name|'os'
op|'.'
name|'kill'
op|'('
name|'mon'
op|'.'
name|'protocols'
op|'['
string|"'baz'"
op|']'
op|'.'
name|'transport'
op|'.'
name|'pid'
op|','
name|'SIGTERM'
op|')'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'60'
op|','
name|'mon'
op|'.'
name|'restartAll'
op|')'
newline|'\n'
name|'mon'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'addSystemEventTrigger'
op|'('
string|"'before'"
op|','
string|"'shutdown'"
op|','
name|'mon'
op|'.'
name|'stopService'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'   '
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

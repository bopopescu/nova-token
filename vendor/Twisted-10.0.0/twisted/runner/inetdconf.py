begin_unit
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
comment|'# '
nl|'\n'
string|'"""\nParser for inetd.conf files\n\nMaintainer: Andrew Bennetts\n\nFuture Plans: xinetd configuration file support?\n"""'
newline|'\n'
nl|'\n'
comment|'# Various exceptions'
nl|'\n'
DECL|class|InvalidConfError
name|'class'
name|'InvalidConfError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Invalid configuration file"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidInetdConfError
dedent|''
name|'class'
name|'InvalidInetdConfError'
op|'('
name|'InvalidConfError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Invalid inetd.conf file"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidServicesConfError
dedent|''
name|'class'
name|'InvalidServicesConfError'
op|'('
name|'InvalidConfError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Invalid services file"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidRPCServicesConfError
dedent|''
name|'class'
name|'InvalidRPCServicesConfError'
op|'('
name|'InvalidConfError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Invalid rpc services file"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnknownService
dedent|''
name|'class'
name|'UnknownService'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unknown service name"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleConfFile
dedent|''
name|'class'
name|'SimpleConfFile'
op|':'
newline|'\n'
indent|'    '
string|'"""Simple configuration file parser superclass.\n\n    Filters out comments and empty lines (which includes lines that only \n    contain comments).\n\n    To use this class, override parseLine or parseFields.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|commentChar
name|'commentChar'
op|'='
string|"'#'"
newline|'\n'
DECL|variable|defaultFilename
name|'defaultFilename'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|parseFile
name|'def'
name|'parseFile'
op|'('
name|'self'
op|','
name|'file'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Parse a configuration file\n        \n        If file is None and self.defaultFilename is set, it will open\n        defaultFilename and use it.\n        """'
newline|'\n'
name|'if'
name|'file'
name|'is'
name|'None'
name|'and'
name|'self'
op|'.'
name|'defaultFilename'
op|':'
newline|'\n'
indent|'            '
name|'file'
op|'='
name|'open'
op|'('
name|'self'
op|'.'
name|'defaultFilename'
op|','
string|"'r'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'line'
name|'in'
name|'file'
op|'.'
name|'readlines'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Strip out comments'
nl|'\n'
indent|'            '
name|'comment'
op|'='
name|'line'
op|'.'
name|'find'
op|'('
name|'self'
op|'.'
name|'commentChar'
op|')'
newline|'\n'
name|'if'
name|'comment'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'line'
op|'='
name|'line'
op|'['
op|':'
name|'comment'
op|']'
newline|'\n'
nl|'\n'
comment|'# Strip whitespace'
nl|'\n'
dedent|''
name|'line'
op|'='
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Skip empty lines (and lines which only contain comments)'
nl|'\n'
name|'if'
name|'not'
name|'line'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'parseLine'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|parseLine
dedent|''
dedent|''
name|'def'
name|'parseLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override this.\n        \n        By default, this will split the line on whitespace and call\n        self.parseFields (catching any errors).\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'parseFields'
op|'('
op|'*'
name|'line'
op|'.'
name|'split'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InvalidInetdConfError'
op|','
string|"'Invalid line: '"
op|'+'
name|'repr'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|parseFields
dedent|''
dedent|''
name|'def'
name|'parseFields'
op|'('
name|'self'
op|','
op|'*'
name|'fields'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override this."""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InetdService
dedent|''
dedent|''
name|'class'
name|'InetdService'
op|':'
newline|'\n'
indent|'    '
string|'"""A simple description of an inetd service."""'
newline|'\n'
DECL|variable|name
name|'name'
op|'='
name|'None'
newline|'\n'
DECL|variable|port
name|'port'
op|'='
name|'None'
newline|'\n'
DECL|variable|socketType
name|'socketType'
op|'='
name|'None'
newline|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'None'
newline|'\n'
DECL|variable|wait
name|'wait'
op|'='
name|'None'
newline|'\n'
DECL|variable|user
name|'user'
op|'='
name|'None'
newline|'\n'
DECL|variable|group
name|'group'
op|'='
name|'None'
newline|'\n'
DECL|variable|program
name|'program'
op|'='
name|'None'
newline|'\n'
DECL|variable|programArgs
name|'programArgs'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'port'
op|','
name|'socketType'
op|','
name|'protocol'
op|','
name|'wait'
op|','
name|'user'
op|','
name|'group'
op|','
nl|'\n'
name|'program'
op|','
name|'programArgs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'socketType'
op|'='
name|'socketType'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'protocol'
newline|'\n'
name|'self'
op|'.'
name|'wait'
op|'='
name|'wait'
newline|'\n'
name|'self'
op|'.'
name|'user'
op|'='
name|'user'
newline|'\n'
name|'self'
op|'.'
name|'group'
op|'='
name|'group'
newline|'\n'
name|'self'
op|'.'
name|'program'
op|'='
name|'program'
newline|'\n'
name|'self'
op|'.'
name|'programArgs'
op|'='
name|'programArgs'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InetdConf
dedent|''
dedent|''
name|'class'
name|'InetdConf'
op|'('
name|'SimpleConfFile'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Configuration parser for a traditional UNIX inetd(8)"""'
newline|'\n'
nl|'\n'
DECL|variable|defaultFilename
name|'defaultFilename'
op|'='
string|"'/etc/inetd.conf'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'knownServices'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'services'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'knownServices'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'knownServices'
op|'='
name|'ServicesConf'
op|'('
op|')'
newline|'\n'
name|'knownServices'
op|'.'
name|'parseFile'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'knownServices'
op|'='
name|'knownServices'
newline|'\n'
nl|'\n'
DECL|member|parseFields
dedent|''
name|'def'
name|'parseFields'
op|'('
name|'self'
op|','
name|'serviceName'
op|','
name|'socketType'
op|','
name|'protocol'
op|','
name|'wait'
op|','
name|'user'
op|','
nl|'\n'
name|'program'
op|','
op|'*'
name|'programArgs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Parse an inetd.conf file.\n\n        Implemented from the description in the Debian inetd.conf man page.\n        """'
newline|'\n'
comment|'# Extract user (and optional group)'
nl|'\n'
name|'user'
op|','
name|'group'
op|'='
op|'('
name|'user'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'+'
op|'['
name|'None'
op|']'
op|')'
op|'['
op|':'
number|'2'
op|']'
newline|'\n'
nl|'\n'
comment|'# Find the port for a service'
nl|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'knownServices'
op|'.'
name|'services'
op|'.'
name|'get'
op|'('
op|'('
name|'serviceName'
op|','
name|'protocol'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'port'
name|'and'
name|'not'
name|'protocol'
op|'.'
name|'startswith'
op|'('
string|"'rpc/'"
op|')'
op|':'
newline|'\n'
comment|'# FIXME: Should this be discarded/ignored, rather than throwing'
nl|'\n'
comment|'#        an exception?'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'port'
op|'='
name|'int'
op|'('
name|'serviceName'
op|')'
newline|'\n'
name|'serviceName'
op|'='
string|"'unknown'"
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'UnknownService'
op|','
string|'"Unknown service: %s (%s)"'
op|'%'
op|'('
name|'serviceName'
op|','
name|'protocol'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'services'
op|'.'
name|'append'
op|'('
name|'InetdService'
op|'('
name|'serviceName'
op|','
name|'port'
op|','
name|'socketType'
op|','
nl|'\n'
name|'protocol'
op|','
name|'wait'
op|','
name|'user'
op|','
name|'group'
op|','
name|'program'
op|','
nl|'\n'
name|'programArgs'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServicesConf
dedent|''
dedent|''
name|'class'
name|'ServicesConf'
op|'('
name|'SimpleConfFile'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""/etc/services parser\n    \n    @ivar services: dict mapping service names to (port, protocol) tuples.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|defaultFilename
name|'defaultFilename'
op|'='
string|"'/etc/services'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'services'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|parseFields
dedent|''
name|'def'
name|'parseFields'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'portAndProtocol'
op|','
op|'*'
name|'aliases'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'port'
op|','
name|'protocol'
op|'='
name|'portAndProtocol'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'port'
op|'='
name|'long'
op|'('
name|'port'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InvalidServicesConfError'
op|','
string|"'Invalid port/protocol:'"
op|'+'
name|'repr'
op|'('
name|'portAndProtocol'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'services'
op|'['
op|'('
name|'name'
op|','
name|'protocol'
op|')'
op|']'
op|'='
name|'port'
newline|'\n'
name|'for'
name|'alias'
name|'in'
name|'aliases'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'services'
op|'['
op|'('
name|'alias'
op|','
name|'protocol'
op|')'
op|']'
op|'='
name|'port'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RPCServicesConf
dedent|''
dedent|''
dedent|''
name|'class'
name|'RPCServicesConf'
op|'('
name|'SimpleConfFile'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""/etc/rpc parser\n\n    @ivar self.services: dict mapping rpc service names to rpc ports.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|defaultFilename
name|'defaultFilename'
op|'='
string|"'/etc/rpc'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'services'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|parseFields
dedent|''
name|'def'
name|'parseFields'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'port'
op|','
op|'*'
name|'aliases'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'port'
op|'='
name|'long'
op|'('
name|'port'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InvalidRPCServicesConfError'
op|','
string|"'Invalid port:'"
op|'+'
name|'repr'
op|'('
name|'port'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'services'
op|'['
name|'name'
op|']'
op|'='
name|'port'
newline|'\n'
name|'for'
name|'alias'
name|'in'
name|'aliases'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'services'
op|'['
name|'alias'
op|']'
op|'='
name|'port'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nLookup a name using multiple resolvers.\n\nFuture Plans: This needs someway to specify which resolver answered\nthe query, or someway to specify (authority|ttl|cache behavior|more?)\n\n@author: Jp Calderone\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'interfaces'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
name|'import'
name|'dns'
newline|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
name|'import'
name|'common'
newline|'\n'
nl|'\n'
DECL|class|FailureHandler
name|'class'
name|'FailureHandler'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'resolver'
op|','
name|'query'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resolver'
op|'='
name|'resolver'
newline|'\n'
name|'self'
op|'.'
name|'query'
op|'='
name|'query'
newline|'\n'
name|'self'
op|'.'
name|'timeout'
op|'='
name|'timeout'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
comment|'# AuthoritativeDomainErrors should halt resolution attempts'
nl|'\n'
indent|'        '
name|'failure'
op|'.'
name|'trap'
op|'('
name|'dns'
op|'.'
name|'DomainError'
op|','
name|'defer'
op|'.'
name|'TimeoutError'
op|','
name|'NotImplementedError'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'resolver'
op|'('
name|'self'
op|'.'
name|'query'
op|','
name|'self'
op|'.'
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResolverChain
dedent|''
dedent|''
name|'class'
name|'ResolverChain'
op|'('
name|'common'
op|'.'
name|'ResolverBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Lookup an address using multiple C{IResolver}s"""'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'IResolver'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'resolvers'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'common'
op|'.'
name|'ResolverBase'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'resolvers'
op|'='
name|'resolvers'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_lookup
dedent|''
name|'def'
name|'_lookup'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'cls'
op|','
name|'type'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'q'
op|'='
name|'dns'
op|'.'
name|'Query'
op|'('
name|'name'
op|','
name|'type'
op|','
name|'cls'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'resolvers'
op|'['
number|'0'
op|']'
op|'.'
name|'query'
op|'('
name|'q'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'for'
name|'r'
name|'in'
name|'self'
op|'.'
name|'resolvers'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'d'
op|'.'
name|'addErrback'
op|'('
nl|'\n'
name|'FailureHandler'
op|'('
name|'r'
op|'.'
name|'query'
op|','
name|'q'
op|','
name|'timeout'
op|')'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|lookupAllRecords
dedent|''
name|'def'
name|'lookupAllRecords'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'resolvers'
op|'['
number|'0'
op|']'
op|'.'
name|'lookupAllRecords'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'for'
name|'r'
name|'in'
name|'self'
op|'.'
name|'resolvers'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'d'
op|'.'
name|'addErrback'
op|'('
nl|'\n'
name|'FailureHandler'
op|'('
name|'r'
op|'.'
name|'lookupAllRecords'
op|','
name|'name'
op|','
name|'timeout'
op|')'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

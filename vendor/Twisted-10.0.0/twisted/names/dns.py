begin_unit
comment|'# -*- test-case-name: twisted.names.test.test_dns -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nDNS protocol implementation.\n\nFuture Plans:\n    - Get rid of some toplevels, maybe.\n    - Put in a better lookupRecordType implementation.\n\n@author: Moshe Zadka\n@author: Jp Calderone\n"""'
newline|'\n'
nl|'\n'
comment|'# System imports'
nl|'\n'
name|'import'
name|'warnings'
newline|'\n'
nl|'\n'
name|'import'
name|'struct'
op|','
name|'random'
op|','
name|'types'
op|','
name|'socket'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'cStringIO'
name|'as'
name|'StringIO'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
DECL|variable|AF_INET6
dedent|''
name|'AF_INET6'
op|'='
name|'socket'
op|'.'
name|'AF_INET6'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'Interface'
op|','
name|'Attribute'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Twisted imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
op|','
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'CannotListenError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'util'
name|'as'
name|'tputil'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'randbytes'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|randomSource
name|'def'
name|'randomSource'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wrapper around L{randbytes.secureRandom} to return 2 random chars.\n    """'
newline|'\n'
name|'return'
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'H'"
op|','
name|'randbytes'
op|'.'
name|'secureRandom'
op|'('
number|'2'
op|','
name|'fallback'
op|'='
name|'True'
op|')'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|PORT
dedent|''
name|'PORT'
op|'='
number|'53'
newline|'\n'
nl|'\n'
op|'('
name|'A'
op|','
name|'NS'
op|','
name|'MD'
op|','
name|'MF'
op|','
name|'CNAME'
op|','
name|'SOA'
op|','
name|'MB'
op|','
name|'MG'
op|','
name|'MR'
op|','
name|'NULL'
op|','
name|'WKS'
op|','
name|'PTR'
op|','
name|'HINFO'
op|','
name|'MINFO'
op|','
name|'MX'
op|','
name|'TXT'
op|','
nl|'\n'
name|'RP'
op|','
name|'AFSDB'
op|')'
op|'='
name|'range'
op|'('
number|'1'
op|','
number|'19'
op|')'
newline|'\n'
DECL|variable|AAAA
name|'AAAA'
op|'='
number|'28'
newline|'\n'
DECL|variable|SRV
name|'SRV'
op|'='
number|'33'
newline|'\n'
DECL|variable|NAPTR
name|'NAPTR'
op|'='
number|'35'
newline|'\n'
DECL|variable|A6
name|'A6'
op|'='
number|'38'
newline|'\n'
DECL|variable|DNAME
name|'DNAME'
op|'='
number|'39'
newline|'\n'
nl|'\n'
DECL|variable|QUERY_TYPES
name|'QUERY_TYPES'
op|'='
op|'{'
nl|'\n'
name|'A'
op|':'
string|"'A'"
op|','
nl|'\n'
name|'NS'
op|':'
string|"'NS'"
op|','
nl|'\n'
name|'MD'
op|':'
string|"'MD'"
op|','
nl|'\n'
name|'MF'
op|':'
string|"'MF'"
op|','
nl|'\n'
name|'CNAME'
op|':'
string|"'CNAME'"
op|','
nl|'\n'
name|'SOA'
op|':'
string|"'SOA'"
op|','
nl|'\n'
name|'MB'
op|':'
string|"'MB'"
op|','
nl|'\n'
name|'MG'
op|':'
string|"'MG'"
op|','
nl|'\n'
name|'MR'
op|':'
string|"'MR'"
op|','
nl|'\n'
name|'NULL'
op|':'
string|"'NULL'"
op|','
nl|'\n'
name|'WKS'
op|':'
string|"'WKS'"
op|','
nl|'\n'
name|'PTR'
op|':'
string|"'PTR'"
op|','
nl|'\n'
name|'HINFO'
op|':'
string|"'HINFO'"
op|','
nl|'\n'
name|'MINFO'
op|':'
string|"'MINFO'"
op|','
nl|'\n'
name|'MX'
op|':'
string|"'MX'"
op|','
nl|'\n'
name|'TXT'
op|':'
string|"'TXT'"
op|','
nl|'\n'
name|'RP'
op|':'
string|"'RP'"
op|','
nl|'\n'
name|'AFSDB'
op|':'
string|"'AFSDB'"
op|','
nl|'\n'
nl|'\n'
comment|"# 19 through 27?  Eh, I'll get to 'em."
nl|'\n'
nl|'\n'
name|'AAAA'
op|':'
string|"'AAAA'"
op|','
nl|'\n'
name|'SRV'
op|':'
string|"'SRV'"
op|','
nl|'\n'
name|'NAPTR'
op|':'
string|"'NAPTR'"
op|','
nl|'\n'
name|'A6'
op|':'
string|"'A6'"
op|','
nl|'\n'
name|'DNAME'
op|':'
string|"'DNAME'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'IXFR'
op|','
name|'AXFR'
op|','
name|'MAILB'
op|','
name|'MAILA'
op|','
name|'ALL_RECORDS'
op|'='
name|'range'
op|'('
number|'251'
op|','
number|'256'
op|')'
newline|'\n'
nl|'\n'
comment|'# "Extended" queries (Hey, half of these are deprecated, good job)'
nl|'\n'
DECL|variable|EXT_QUERIES
name|'EXT_QUERIES'
op|'='
op|'{'
nl|'\n'
name|'IXFR'
op|':'
string|"'IXFR'"
op|','
nl|'\n'
name|'AXFR'
op|':'
string|"'AXFR'"
op|','
nl|'\n'
name|'MAILB'
op|':'
string|"'MAILB'"
op|','
nl|'\n'
name|'MAILA'
op|':'
string|"'MAILA'"
op|','
nl|'\n'
name|'ALL_RECORDS'
op|':'
string|"'ALL_RECORDS'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|REV_TYPES
name|'REV_TYPES'
op|'='
name|'dict'
op|'('
op|'['
nl|'\n'
op|'('
name|'v'
op|','
name|'k'
op|')'
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
name|'QUERY_TYPES'
op|'.'
name|'items'
op|'('
op|')'
op|'+'
name|'EXT_QUERIES'
op|'.'
name|'items'
op|'('
op|')'
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'IN'
op|','
name|'CS'
op|','
name|'CH'
op|','
name|'HS'
op|'='
name|'range'
op|'('
number|'1'
op|','
number|'5'
op|')'
newline|'\n'
DECL|variable|ANY
name|'ANY'
op|'='
number|'255'
newline|'\n'
nl|'\n'
DECL|variable|QUERY_CLASSES
name|'QUERY_CLASSES'
op|'='
op|'{'
nl|'\n'
name|'IN'
op|':'
string|"'IN'"
op|','
nl|'\n'
name|'CS'
op|':'
string|"'CS'"
op|','
nl|'\n'
name|'CH'
op|':'
string|"'CH'"
op|','
nl|'\n'
name|'HS'
op|':'
string|"'HS'"
op|','
nl|'\n'
name|'ANY'
op|':'
string|"'ANY'"
nl|'\n'
op|'}'
newline|'\n'
DECL|variable|REV_CLASSES
name|'REV_CLASSES'
op|'='
name|'dict'
op|'('
op|'['
nl|'\n'
op|'('
name|'v'
op|','
name|'k'
op|')'
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
name|'QUERY_CLASSES'
op|'.'
name|'items'
op|'('
op|')'
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Opcodes'
nl|'\n'
name|'OP_QUERY'
op|','
name|'OP_INVERSE'
op|','
name|'OP_STATUS'
op|'='
name|'range'
op|'('
number|'3'
op|')'
newline|'\n'
DECL|variable|OP_NOTIFY
name|'OP_NOTIFY'
op|'='
number|'4'
comment|'# RFC 1996'
newline|'\n'
DECL|variable|OP_UPDATE
name|'OP_UPDATE'
op|'='
number|'5'
comment|'# RFC 2136'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Response Codes'
nl|'\n'
name|'OK'
op|','
name|'EFORMAT'
op|','
name|'ESERVER'
op|','
name|'ENAME'
op|','
name|'ENOTIMP'
op|','
name|'EREFUSED'
op|'='
name|'range'
op|'('
number|'6'
op|')'
newline|'\n'
nl|'\n'
DECL|class|IRecord
name|'class'
name|'IRecord'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An single entry in a zone of authority.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'Attribute'
op|'('
string|'"An indicator of what kind of record this is."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Backwards compatibility aliases - these should be deprecated or something I'
nl|'\n'
comment|'# suppose. -exarkun'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'error'
name|'import'
name|'DomainError'
op|','
name|'AuthoritativeDomainError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'error'
name|'import'
name|'DNSQueryTimeoutError'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|str2time
name|'def'
name|'str2time'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'suffixes'
op|'='
op|'('
nl|'\n'
op|'('
string|"'S'"
op|','
number|'1'
op|')'
op|','
op|'('
string|"'M'"
op|','
number|'60'
op|')'
op|','
op|'('
string|"'H'"
op|','
number|'60'
op|'*'
number|'60'
op|')'
op|','
op|'('
string|"'D'"
op|','
number|'60'
op|'*'
number|'60'
op|'*'
number|'24'
op|')'
op|','
nl|'\n'
op|'('
string|"'W'"
op|','
number|'60'
op|'*'
number|'60'
op|'*'
number|'24'
op|'*'
number|'7'
op|')'
op|','
op|'('
string|"'Y'"
op|','
number|'60'
op|'*'
number|'60'
op|'*'
number|'24'
op|'*'
number|'365'
op|')'
nl|'\n'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'s'
op|','
name|'types'
op|'.'
name|'StringType'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'s'
op|'.'
name|'upper'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'for'
op|'('
name|'suff'
op|','
name|'mult'
op|')'
name|'in'
name|'suffixes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'s'
op|'.'
name|'endswith'
op|'('
name|'suff'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'int'
op|'('
name|'float'
op|'('
name|'s'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
op|'*'
name|'mult'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'='
name|'int'
op|'('
name|'s'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|'"Invalid time interval specifier: "'
op|'+'
name|'s'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|readPrecisely
dedent|''
name|'def'
name|'readPrecisely'
op|'('
name|'file'
op|','
name|'l'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'buff'
op|'='
name|'file'
op|'.'
name|'read'
op|'('
name|'l'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'buff'
op|')'
op|'<'
name|'l'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'EOFError'
newline|'\n'
dedent|''
name|'return'
name|'buff'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IEncodable
dedent|''
name|'class'
name|'IEncodable'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Interface for something which can be encoded to and decoded\n    from a file object.\n    """'
newline|'\n'
nl|'\n'
DECL|member|encode
name|'def'
name|'encode'
op|'('
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write a representation of this object to the given\n        file object.\n\n        @type strio: File-like object\n        @param strio: The stream to which to write bytes\n\n        @type compDict: C{dict} or C{None}\n        @param compDict: A dictionary of backreference addresses that have\n        have already been written to this stream and that may be used for\n        compression.\n        """'
newline|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reconstruct an object from data read from the given\n        file object.\n\n        @type strio: File-like object\n        @param strio: The stream from which bytes may be read\n\n        @type length: C{int} or C{None}\n        @param length: The number of bytes in this RDATA field.  Most\n        implementations can ignore this value.  Only in the case of\n        records similar to TXT where the total length is in no way\n        encoded in the data is it necessary.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Charstr
dedent|''
dedent|''
name|'class'
name|'Charstr'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IEncodable'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'string'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'string'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"%r is not a string"'
op|'%'
op|'('
name|'string'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'string'
op|'='
name|'string'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Encode this Character string into the appropriate byte format.\n\n        @type strio: file\n        @param strio: The byte representation of this Charstr will be written\n            to this file.\n        """'
newline|'\n'
name|'string'
op|'='
name|'self'
op|'.'
name|'string'
newline|'\n'
name|'ind'
op|'='
name|'len'
op|'('
name|'string'
op|')'
newline|'\n'
name|'strio'
op|'.'
name|'write'
op|'('
name|'chr'
op|'('
name|'ind'
op|')'
op|')'
newline|'\n'
name|'strio'
op|'.'
name|'write'
op|'('
name|'string'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Decode a byte string into this Name.\n\n        @type strio: file\n        @param strio: Bytes will be read from this file until the full string\n            is decoded.\n\n        @raise EOFError: Raised when there are not enough bytes available from\n            C{strio}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'string'
op|'='
string|"''"
newline|'\n'
name|'l'
op|'='
name|'ord'
op|'('
name|'readPrecisely'
op|'('
name|'strio'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'string'
op|'='
name|'readPrecisely'
op|'('
name|'strio'
op|','
name|'l'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'other'
op|','
name|'Charstr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'string'
op|'=='
name|'other'
op|'.'
name|'string'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
name|'self'
op|'.'
name|'string'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'string'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Name
dedent|''
dedent|''
name|'class'
name|'Name'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IEncodable'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'isinstance'
op|'('
name|'name'
op|','
name|'types'
op|'.'
name|'StringTypes'
op|')'
op|','
string|'"%r is not a string"'
op|'%'
op|'('
name|'name'
op|','
op|')'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Encode this Name into the appropriate byte format.\n\n        @type strio: file\n        @param strio: The byte representation of this Name will be written to\n        this file.\n\n        @type compDict: dict\n        @param compDict: dictionary of Names that have already been encoded\n        and whose addresses may be backreferenced by this Name (for the purpose\n        of reducing the message size).\n        """'
newline|'\n'
name|'name'
op|'='
name|'self'
op|'.'
name|'name'
newline|'\n'
name|'while'
name|'name'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'compDict'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'name'
name|'in'
name|'compDict'
op|':'
newline|'\n'
indent|'                    '
name|'strio'
op|'.'
name|'write'
op|'('
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|'"!H"'
op|','
number|'0xc000'
op|'|'
name|'compDict'
op|'['
name|'name'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'compDict'
op|'['
name|'name'
op|']'
op|'='
name|'strio'
op|'.'
name|'tell'
op|'('
op|')'
op|'+'
name|'Message'
op|'.'
name|'headerSize'
newline|'\n'
dedent|''
dedent|''
name|'ind'
op|'='
name|'name'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'if'
name|'ind'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'label'
op|','
name|'name'
op|'='
name|'name'
op|'['
op|':'
name|'ind'
op|']'
op|','
name|'name'
op|'['
name|'ind'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'label'
op|','
name|'name'
op|'='
name|'name'
op|','
string|"''"
newline|'\n'
name|'ind'
op|'='
name|'len'
op|'('
name|'label'
op|')'
newline|'\n'
dedent|''
name|'strio'
op|'.'
name|'write'
op|'('
name|'chr'
op|'('
name|'ind'
op|')'
op|')'
newline|'\n'
name|'strio'
op|'.'
name|'write'
op|'('
name|'label'
op|')'
newline|'\n'
dedent|''
name|'strio'
op|'.'
name|'write'
op|'('
name|'chr'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Decode a byte string into this Name.\n\n        @type strio: file\n        @param strio: Bytes will be read from this file until the full Name\n        is decoded.\n\n        @raise EOFError: Raised when there are not enough bytes available\n        from C{strio}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
string|"''"
newline|'\n'
name|'off'
op|'='
number|'0'
newline|'\n'
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'='
name|'ord'
op|'('
name|'readPrecisely'
op|'('
name|'strio'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'if'
name|'l'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'off'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'strio'
op|'.'
name|'seek'
op|'('
name|'off'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'l'
op|'>>'
number|'6'
op|')'
op|'=='
number|'3'
op|':'
newline|'\n'
indent|'                '
name|'new_off'
op|'='
op|'('
op|'('
name|'l'
op|'&'
number|'63'
op|')'
op|'<<'
number|'8'
nl|'\n'
op|'|'
name|'ord'
op|'('
name|'readPrecisely'
op|'('
name|'strio'
op|','
number|'1'
op|')'
op|')'
op|')'
newline|'\n'
name|'if'
name|'off'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'off'
op|'='
name|'strio'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
dedent|''
name|'strio'
op|'.'
name|'seek'
op|'('
name|'new_off'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'label'
op|'='
name|'readPrecisely'
op|'('
name|'strio'
op|','
name|'l'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'name'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'name'
op|'='
name|'label'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'name'
op|'='
name|'self'
op|'.'
name|'name'
op|'+'
string|"'.'"
op|'+'
name|'label'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
dedent|''
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'other'
op|','
name|'Name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'str'
op|'('
name|'self'
op|')'
op|'=='
name|'str'
op|'('
name|'other'
op|')'
newline|'\n'
dedent|''
name|'return'
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
name|'str'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
DECL|class|Query
dedent|''
dedent|''
name|'class'
name|'Query'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Represent a single DNS query.\n\n    @ivar name: The name about which this query is requesting information.\n    @ivar type: The query type.\n    @ivar cls: The query class.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|name
name|'name'
op|'='
name|'None'
newline|'\n'
DECL|variable|type
name|'type'
op|'='
name|'None'
newline|'\n'
DECL|variable|cls
name|'cls'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|'='
string|"''"
op|','
name|'type'
op|'='
name|'A'
op|','
name|'cls'
op|'='
name|'IN'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @type name: C{str}\n        @param name: The name about which to request information.\n\n        @type type: C{int}\n        @param type: The query type.\n\n        @type cls: C{int}\n        @param cls: The query class.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'Name'
op|'('
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'type'
op|'='
name|'type'
newline|'\n'
name|'self'
op|'.'
name|'cls'
op|'='
name|'cls'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'compDict'
op|')'
newline|'\n'
name|'strio'
op|'.'
name|'write'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
string|'"!HH"'
op|','
name|'self'
op|'.'
name|'type'
op|','
name|'self'
op|'.'
name|'cls'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
name|'buff'
op|'='
name|'readPrecisely'
op|'('
name|'strio'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'type'
op|','
name|'self'
op|'.'
name|'cls'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|'"!HH"'
op|','
name|'buff'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
op|'('
name|'str'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'type'
op|','
name|'self'
op|'.'
name|'cls'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__cmp__
dedent|''
name|'def'
name|'__cmp__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'isinstance'
op|'('
name|'other'
op|','
name|'Query'
op|')'
name|'and'
name|'cmp'
op|'('
nl|'\n'
op|'('
name|'str'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'type'
op|','
name|'self'
op|'.'
name|'cls'
op|')'
op|','
nl|'\n'
op|'('
name|'str'
op|'('
name|'other'
op|'.'
name|'name'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'other'
op|'.'
name|'type'
op|','
name|'other'
op|'.'
name|'cls'
op|')'
nl|'\n'
op|')'
name|'or'
name|'cmp'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
name|'other'
op|'.'
name|'__class__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'QUERY_TYPES'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'type'
op|','
name|'EXT_QUERIES'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'type'
op|','
string|"'UNKNOWN (%d)'"
op|'%'
name|'self'
op|'.'
name|'type'
op|')'
op|')'
newline|'\n'
name|'c'
op|'='
name|'QUERY_CLASSES'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'cls'
op|','
string|"'UNKNOWN (%d)'"
op|'%'
name|'self'
op|'.'
name|'cls'
op|')'
newline|'\n'
name|'return'
string|"'<Query %s %s %s>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'t'
op|','
name|'c'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'Query(%r, %r, %r)'"
op|'%'
op|'('
name|'str'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
op|','
name|'self'
op|'.'
name|'type'
op|','
name|'self'
op|'.'
name|'cls'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RRHeader
dedent|''
dedent|''
name|'class'
name|'RRHeader'
op|'('
name|'tputil'
op|'.'
name|'FancyEqMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A resource record header.\n\n    @cvar fmt: C{str} specifying the byte format of an RR.\n\n    @ivar name: The name about which this reply contains information.\n    @ivar type: The query type of the original request.\n    @ivar cls: The query class of the original request.\n    @ivar ttl: The time-to-live for this record.\n    @ivar payload: An object that implements the IEncodable interface\n    @ivar auth: Whether this header is authoritative or not.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|compareAttributes
name|'compareAttributes'
op|'='
op|'('
string|"'name'"
op|','
string|"'type'"
op|','
string|"'cls'"
op|','
string|"'ttl'"
op|','
string|"'payload'"
op|','
string|"'auth'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|fmt
name|'fmt'
op|'='
string|'"!HHIH"'
newline|'\n'
nl|'\n'
DECL|variable|name
name|'name'
op|'='
name|'None'
newline|'\n'
DECL|variable|type
name|'type'
op|'='
name|'None'
newline|'\n'
DECL|variable|cls
name|'cls'
op|'='
name|'None'
newline|'\n'
DECL|variable|ttl
name|'ttl'
op|'='
name|'None'
newline|'\n'
DECL|variable|payload
name|'payload'
op|'='
name|'None'
newline|'\n'
DECL|variable|rdlength
name|'rdlength'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|cachedResponse
name|'cachedResponse'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|'='
string|"''"
op|','
name|'type'
op|'='
name|'A'
op|','
name|'cls'
op|'='
name|'IN'
op|','
name|'ttl'
op|'='
number|'0'
op|','
name|'payload'
op|'='
name|'None'
op|','
name|'auth'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @type name: C{str}\n        @param name: The name about which this reply contains information.\n\n        @type type: C{int}\n        @param type: The query type.\n\n        @type cls: C{int}\n        @param cls: The query class.\n\n        @type ttl: C{int}\n        @param ttl: Time to live for this record.\n\n        @type payload: An object implementing C{IEncodable}\n        @param payload: A Query Type specific data object.\n        """'
newline|'\n'
name|'assert'
op|'('
name|'payload'
name|'is'
name|'None'
op|')'
name|'or'
op|'('
name|'payload'
op|'.'
name|'TYPE'
op|'=='
name|'type'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'Name'
op|'('
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'type'
op|'='
name|'type'
newline|'\n'
name|'self'
op|'.'
name|'cls'
op|'='
name|'cls'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'ttl'
newline|'\n'
name|'self'
op|'.'
name|'payload'
op|'='
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'auth'
op|'='
name|'auth'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'compDict'
op|')'
newline|'\n'
name|'strio'
op|'.'
name|'write'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
name|'self'
op|'.'
name|'fmt'
op|','
name|'self'
op|'.'
name|'type'
op|','
name|'self'
op|'.'
name|'cls'
op|','
name|'self'
op|'.'
name|'ttl'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'payload'
op|':'
newline|'\n'
indent|'            '
name|'prefix'
op|'='
name|'strio'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'payload'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'compDict'
op|')'
newline|'\n'
name|'aft'
op|'='
name|'strio'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
name|'strio'
op|'.'
name|'seek'
op|'('
name|'prefix'
op|'-'
number|'2'
op|','
number|'0'
op|')'
newline|'\n'
name|'strio'
op|'.'
name|'write'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!H'"
op|','
name|'aft'
op|'-'
name|'prefix'
op|')'
op|')'
newline|'\n'
name|'strio'
op|'.'
name|'seek'
op|'('
name|'aft'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
name|'l'
op|'='
name|'struct'
op|'.'
name|'calcsize'
op|'('
name|'self'
op|'.'
name|'fmt'
op|')'
newline|'\n'
name|'buff'
op|'='
name|'readPrecisely'
op|'('
name|'strio'
op|','
name|'l'
op|')'
newline|'\n'
name|'r'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
name|'self'
op|'.'
name|'fmt'
op|','
name|'buff'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'type'
op|','
name|'self'
op|'.'
name|'cls'
op|','
name|'self'
op|'.'
name|'ttl'
op|','
name|'self'
op|'.'
name|'rdlength'
op|'='
name|'r'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isAuthoritative
dedent|''
name|'def'
name|'isAuthoritative'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'auth'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'QUERY_TYPES'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'type'
op|','
name|'EXT_QUERIES'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'type'
op|','
string|"'UNKNOWN (%d)'"
op|'%'
name|'self'
op|'.'
name|'type'
op|')'
op|')'
newline|'\n'
name|'c'
op|'='
name|'QUERY_CLASSES'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'cls'
op|','
string|"'UNKNOWN (%d)'"
op|'%'
name|'self'
op|'.'
name|'cls'
op|')'
newline|'\n'
name|'return'
string|"'<RR name=%s type=%s class=%s ttl=%ds auth=%s>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'t'
op|','
name|'c'
op|','
name|'self'
op|'.'
name|'ttl'
op|','
name|'self'
op|'.'
name|'auth'
name|'and'
string|"'True'"
name|'or'
string|"'False'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__repr__
dedent|''
name|'__repr__'
op|'='
name|'__str__'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleRecord
dedent|''
name|'class'
name|'SimpleRecord'
op|'('
name|'tputil'
op|'.'
name|'FancyStrMixin'
op|','
name|'tputil'
op|'.'
name|'FancyEqMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A Resource Record which consists of a single RFC 1035 domain-name.\n\n    @type name: L{Name}\n    @ivar name: The name associated with this record.\n\n    @type ttl: C{int}\n    @ivar ttl: The maximum number of seconds which this record should be\n        cached.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|','
name|'IRecord'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|showAttributes
name|'showAttributes'
op|'='
op|'('
op|'('
string|"'name'"
op|','
string|"'name'"
op|','
string|"'%s'"
op|')'
op|','
string|"'ttl'"
op|')'
newline|'\n'
DECL|variable|compareAttributes
name|'compareAttributes'
op|'='
op|'('
string|"'name'"
op|','
string|"'ttl'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'None'
newline|'\n'
DECL|variable|name
name|'name'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|'='
string|"''"
op|','
name|'ttl'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'Name'
op|'('
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'str2time'
op|'('
name|'ttl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'compDict'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'Name'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Kinds of RRs - oh my!'
nl|'\n'
DECL|class|Record_NS
dedent|''
dedent|''
name|'class'
name|'Record_NS'
op|'('
name|'SimpleRecord'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An authoritative nameserver.\n    """'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'NS'
newline|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'NS'"
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_MD
dedent|''
name|'class'
name|'Record_MD'
op|'('
name|'SimpleRecord'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mail destination.\n\n    This record type is obsolete.\n\n    @see: L{Record_MX}\n    """'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'MD'
newline|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'MD'"
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_MF
dedent|''
name|'class'
name|'Record_MF'
op|'('
name|'SimpleRecord'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mail forwarder.\n\n    This record type is obsolete.\n\n    @see: L{Record_MX}\n    """'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'MF'
newline|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'MF'"
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_CNAME
dedent|''
name|'class'
name|'Record_CNAME'
op|'('
name|'SimpleRecord'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The canonical name for an alias.\n    """'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'CNAME'
newline|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'CNAME'"
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_MB
dedent|''
name|'class'
name|'Record_MB'
op|'('
name|'SimpleRecord'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mailbox domain name.\n\n    This is an experimental record type.\n    """'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'MB'
newline|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'MB'"
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_MG
dedent|''
name|'class'
name|'Record_MG'
op|'('
name|'SimpleRecord'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mail group member.\n\n    This is an experimental record type.\n    """'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'MG'
newline|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'MG'"
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_MR
dedent|''
name|'class'
name|'Record_MR'
op|'('
name|'SimpleRecord'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mail rename domain name.\n\n    This is an experimental record type.\n    """'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'MR'
newline|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'MR'"
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_PTR
dedent|''
name|'class'
name|'Record_PTR'
op|'('
name|'SimpleRecord'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A domain name pointer.\n    """'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'PTR'
newline|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'PTR'"
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_DNAME
dedent|''
name|'class'
name|'Record_DNAME'
op|'('
name|'SimpleRecord'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A non-terminal DNS name redirection.\n\n    This record type provides the capability to map an entire subtree of the\n    DNS name space to another domain.  It differs from the CNAME record which\n    maps a single node of the name space.\n\n    @see: U{http://www.faqs.org/rfcs/rfc2672.html}\n    @see: U{http://www.faqs.org/rfcs/rfc3363.html}\n    """'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'DNAME'
newline|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'DNAME'"
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_A
dedent|''
name|'class'
name|'Record_A'
op|'('
name|'tputil'
op|'.'
name|'FancyEqMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An IPv4 host address.\n\n    @type address: C{str}\n    @ivar address: The packed network-order representation of the IPv4 address\n        associated with this record.\n\n    @type ttl: C{int}\n    @ivar ttl: The maximum number of seconds which this record should be\n        cached.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|','
name|'IRecord'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|compareAttributes
name|'compareAttributes'
op|'='
op|'('
string|"'address'"
op|','
string|"'ttl'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'A'
newline|'\n'
DECL|variable|address
name|'address'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'address'
op|'='
string|"'0.0.0.0'"
op|','
name|'ttl'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'address'
op|'='
name|'socket'
op|'.'
name|'inet_aton'
op|'('
name|'address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'address'
op|'='
name|'address'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'str2time'
op|'('
name|'ttl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'strio'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'address'
op|'='
name|'readPrecisely'
op|'('
name|'strio'
op|','
number|'4'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
name|'self'
op|'.'
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<A address=%s ttl=%s>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'dottedQuad'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'ttl'
op|')'
newline|'\n'
DECL|variable|__repr__
dedent|''
name|'__repr__'
op|'='
name|'__str__'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dottedQuad
name|'def'
name|'dottedQuad'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'socket'
op|'.'
name|'inet_ntoa'
op|'('
name|'self'
op|'.'
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_SOA
dedent|''
dedent|''
name|'class'
name|'Record_SOA'
op|'('
name|'tputil'
op|'.'
name|'FancyEqMixin'
op|','
name|'tputil'
op|'.'
name|'FancyStrMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Marks the start of a zone of authority.\n\n    This record describes parameters which are shared by all records within a\n    particular zone.\n\n    @type mname: L{Name}\n    @ivar mname: The domain-name of the name server that was the original or\n        primary source of data for this zone.\n\n    @type rname: L{Name}\n    @ivar rname: A domain-name which specifies the mailbox of the person\n        responsible for this zone.\n\n    @type serial: C{int}\n    @ivar serial: The unsigned 32 bit version number of the original copy of\n        the zone.  Zone transfers preserve this value.  This value wraps and\n        should be compared using sequence space arithmetic.\n\n    @type refresh: C{int}\n    @ivar refresh: A 32 bit time interval before the zone should be refreshed.\n\n    @type minimum: C{int}\n    @ivar minimum: The unsigned 32 bit minimum TTL field that should be\n        exported with any RR from this zone.\n\n    @type expire: C{int}\n    @ivar expire: A 32 bit time value that specifies the upper limit on the\n        time interval that can elapse before the zone is no longer\n        authoritative.\n\n    @type retry: C{int}\n    @ivar retry: A 32 bit time interval that should elapse before a failed\n        refresh should be retried.\n\n    @type ttl: C{int}\n    @ivar ttl: The default TTL to use for records served from this zone.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|','
name|'IRecord'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'SOA'"
newline|'\n'
DECL|variable|compareAttributes
name|'compareAttributes'
op|'='
op|'('
string|"'serial'"
op|','
string|"'mname'"
op|','
string|"'rname'"
op|','
string|"'refresh'"
op|','
string|"'expire'"
op|','
string|"'retry'"
op|','
string|"'minimum'"
op|','
string|"'ttl'"
op|')'
newline|'\n'
DECL|variable|showAttributes
name|'showAttributes'
op|'='
op|'('
op|'('
string|"'mname'"
op|','
string|"'mname'"
op|','
string|"'%s'"
op|')'
op|','
op|'('
string|"'rname'"
op|','
string|"'rname'"
op|','
string|"'%s'"
op|')'
op|','
string|"'serial'"
op|','
string|"'refresh'"
op|','
string|"'retry'"
op|','
string|"'expire'"
op|','
string|"'minimum'"
op|','
string|"'ttl'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'SOA'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'mname'
op|'='
string|"''"
op|','
name|'rname'
op|'='
string|"''"
op|','
name|'serial'
op|'='
number|'0'
op|','
name|'refresh'
op|'='
number|'0'
op|','
name|'retry'
op|'='
number|'0'
op|','
name|'expire'
op|'='
number|'0'
op|','
name|'minimum'
op|'='
number|'0'
op|','
name|'ttl'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mname'
op|','
name|'self'
op|'.'
name|'rname'
op|'='
name|'Name'
op|'('
name|'mname'
op|')'
op|','
name|'Name'
op|'('
name|'rname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serial'
op|','
name|'self'
op|'.'
name|'refresh'
op|'='
name|'str2time'
op|'('
name|'serial'
op|')'
op|','
name|'str2time'
op|'('
name|'refresh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'minimum'
op|','
name|'self'
op|'.'
name|'expire'
op|'='
name|'str2time'
op|'('
name|'minimum'
op|')'
op|','
name|'str2time'
op|'('
name|'expire'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'retry'
op|'='
name|'str2time'
op|'('
name|'retry'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'str2time'
op|'('
name|'ttl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mname'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'compDict'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rname'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'compDict'
op|')'
newline|'\n'
name|'strio'
op|'.'
name|'write'
op|'('
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
nl|'\n'
string|"'!LlllL'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'serial'
op|','
name|'self'
op|'.'
name|'refresh'
op|','
name|'self'
op|'.'
name|'retry'
op|','
name|'self'
op|'.'
name|'expire'
op|','
nl|'\n'
name|'self'
op|'.'
name|'minimum'
nl|'\n'
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mname'
op|','
name|'self'
op|'.'
name|'rname'
op|'='
name|'Name'
op|'('
op|')'
op|','
name|'Name'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mname'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rname'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
name|'r'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'!LlllL'"
op|','
name|'readPrecisely'
op|'('
name|'strio'
op|','
number|'20'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serial'
op|','
name|'self'
op|'.'
name|'refresh'
op|','
name|'self'
op|'.'
name|'retry'
op|','
name|'self'
op|'.'
name|'expire'
op|','
name|'self'
op|'.'
name|'minimum'
op|'='
name|'r'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
op|'('
nl|'\n'
name|'self'
op|'.'
name|'serial'
op|','
name|'self'
op|'.'
name|'mname'
op|','
name|'self'
op|'.'
name|'rname'
op|','
nl|'\n'
name|'self'
op|'.'
name|'refresh'
op|','
name|'self'
op|'.'
name|'expire'
op|','
name|'self'
op|'.'
name|'retry'
nl|'\n'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_NULL
dedent|''
dedent|''
name|'class'
name|'Record_NULL'
op|'('
name|'tputil'
op|'.'
name|'FancyStrMixin'
op|','
name|'tputil'
op|'.'
name|'FancyEqMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A null record.\n\n    This is an experimental record type.\n\n    @type ttl: C{int}\n    @ivar ttl: The maximum number of seconds which this record should be\n        cached.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|','
name|'IRecord'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'NULL'"
newline|'\n'
name|'showAttributes'
op|'='
name|'compareAttributes'
op|'='
op|'('
string|"'payload'"
op|','
string|"'ttl'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'NULL'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'payload'
op|'='
name|'None'
op|','
name|'ttl'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'payload'
op|'='
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'str2time'
op|'('
name|'ttl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'strio'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'payload'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'payload'
op|'='
name|'readPrecisely'
op|'('
name|'strio'
op|','
name|'length'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
name|'self'
op|'.'
name|'payload'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_WKS
dedent|''
dedent|''
name|'class'
name|'Record_WKS'
op|'('
name|'tputil'
op|'.'
name|'FancyEqMixin'
op|','
name|'tputil'
op|'.'
name|'FancyStrMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A well known service description.\n\n    This record type is obsolete.  See L{Record_SRV}.\n\n    @type address: C{str}\n    @ivar address: The packed network-order representation of the IPv4 address\n        associated with this record.\n\n    @type protocol: C{int}\n    @ivar protocol: The 8 bit IP protocol number for which this service map is\n        relevant.\n\n    @type map: C{str}\n    @ivar map: A bitvector indicating the services available at the specified\n        address.\n\n    @type ttl: C{int}\n    @ivar ttl: The maximum number of seconds which this record should be\n        cached.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|','
name|'IRecord'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|'"WKS"'
newline|'\n'
DECL|variable|compareAttributes
name|'compareAttributes'
op|'='
op|'('
string|"'address'"
op|','
string|"'protocol'"
op|','
string|"'map'"
op|','
string|"'ttl'"
op|')'
newline|'\n'
DECL|variable|showAttributes
name|'showAttributes'
op|'='
op|'['
op|'('
string|"'_address'"
op|','
string|"'address'"
op|','
string|"'%s'"
op|')'
op|','
string|"'protocol'"
op|','
string|"'ttl'"
op|']'
newline|'\n'
nl|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'WKS'
newline|'\n'
nl|'\n'
DECL|variable|_address
name|'_address'
op|'='
name|'property'
op|'('
name|'lambda'
name|'self'
op|':'
name|'socket'
op|'.'
name|'inet_ntoa'
op|'('
name|'self'
op|'.'
name|'address'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'address'
op|'='
string|"'0.0.0.0'"
op|','
name|'protocol'
op|'='
number|'0'
op|','
name|'map'
op|'='
string|"''"
op|','
name|'ttl'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'address'
op|'='
name|'socket'
op|'.'
name|'inet_aton'
op|'('
name|'address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|','
name|'self'
op|'.'
name|'map'
op|'='
name|'protocol'
op|','
name|'map'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'str2time'
op|'('
name|'ttl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'strio'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'address'
op|')'
newline|'\n'
name|'strio'
op|'.'
name|'write'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!B'"
op|','
name|'self'
op|'.'
name|'protocol'
op|')'
op|')'
newline|'\n'
name|'strio'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'map'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'address'
op|'='
name|'readPrecisely'
op|'('
name|'strio'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'!B'"
op|','
name|'readPrecisely'
op|'('
name|'strio'
op|','
number|'1'
op|')'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'map'
op|'='
name|'readPrecisely'
op|'('
name|'strio'
op|','
name|'length'
op|'-'
number|'5'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
op|'('
name|'self'
op|'.'
name|'address'
op|','
name|'self'
op|'.'
name|'protocol'
op|','
name|'self'
op|'.'
name|'map'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_AAAA
dedent|''
dedent|''
name|'class'
name|'Record_AAAA'
op|'('
name|'tputil'
op|'.'
name|'FancyEqMixin'
op|','
name|'tputil'
op|'.'
name|'FancyStrMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An IPv6 host address.\n\n    @type address: C{str}\n    @ivar address: The packed network-order representation of the IPv6 address\n        associated with this record.\n\n    @type ttl: C{int}\n    @ivar ttl: The maximum number of seconds which this record should be\n        cached.\n\n    @see: U{http://www.faqs.org/rfcs/rfc1886.html}\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|','
name|'IRecord'
op|')'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'AAAA'
newline|'\n'
nl|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'AAAA'"
newline|'\n'
DECL|variable|showAttributes
name|'showAttributes'
op|'='
op|'('
op|'('
string|"'_address'"
op|','
string|"'address'"
op|','
string|"'%s'"
op|')'
op|','
string|"'ttl'"
op|')'
newline|'\n'
DECL|variable|compareAttributes
name|'compareAttributes'
op|'='
op|'('
string|"'address'"
op|','
string|"'ttl'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_address
name|'_address'
op|'='
name|'property'
op|'('
name|'lambda'
name|'self'
op|':'
name|'socket'
op|'.'
name|'inet_ntop'
op|'('
name|'AF_INET6'
op|','
name|'self'
op|'.'
name|'address'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'address'
op|'='
string|"'::'"
op|','
name|'ttl'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'address'
op|'='
name|'socket'
op|'.'
name|'inet_pton'
op|'('
name|'AF_INET6'
op|','
name|'address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'str2time'
op|'('
name|'ttl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'strio'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'address'
op|'='
name|'readPrecisely'
op|'('
name|'strio'
op|','
number|'16'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
name|'self'
op|'.'
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_A6
dedent|''
dedent|''
name|'class'
name|'Record_A6'
op|'('
name|'tputil'
op|'.'
name|'FancyStrMixin'
op|','
name|'tputil'
op|'.'
name|'FancyEqMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An IPv6 address.\n\n    This is an experimental record type.\n\n    @type prefixLen: C{int}\n    @ivar prefixLen: The length of the suffix.\n\n    @type suffix: C{str}\n    @ivar suffix: An IPv6 address suffix in network order.\n\n    @type prefix: L{Name}\n    @ivar prefix: If specified, a name which will be used as a prefix for other\n        A6 records.\n\n    @type bytes: C{int}\n    @ivar bytes: The length of the prefix.\n\n    @type ttl: C{int}\n    @ivar ttl: The maximum number of seconds which this record should be\n        cached.\n\n    @see: U{http://www.faqs.org/rfcs/rfc2874.html}\n    @see: U{http://www.faqs.org/rfcs/rfc3363.html}\n    @see: U{http://www.faqs.org/rfcs/rfc3364.html}\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|','
name|'IRecord'
op|')'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'A6'
newline|'\n'
nl|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'A6'"
newline|'\n'
DECL|variable|showAttributes
name|'showAttributes'
op|'='
op|'('
op|'('
string|"'_suffix'"
op|','
string|"'suffix'"
op|','
string|"'%s'"
op|')'
op|','
op|'('
string|"'prefix'"
op|','
string|"'prefix'"
op|','
string|"'%s'"
op|')'
op|','
string|"'ttl'"
op|')'
newline|'\n'
DECL|variable|compareAttributes
name|'compareAttributes'
op|'='
op|'('
string|"'prefixLen'"
op|','
string|"'prefix'"
op|','
string|"'suffix'"
op|','
string|"'ttl'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_suffix
name|'_suffix'
op|'='
name|'property'
op|'('
name|'lambda'
name|'self'
op|':'
name|'socket'
op|'.'
name|'inet_ntop'
op|'('
name|'AF_INET6'
op|','
name|'self'
op|'.'
name|'suffix'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'prefixLen'
op|'='
number|'0'
op|','
name|'suffix'
op|'='
string|"'::'"
op|','
name|'prefix'
op|'='
string|"''"
op|','
name|'ttl'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'prefixLen'
op|'='
name|'prefixLen'
newline|'\n'
name|'self'
op|'.'
name|'suffix'
op|'='
name|'socket'
op|'.'
name|'inet_pton'
op|'('
name|'AF_INET6'
op|','
name|'suffix'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'prefix'
op|'='
name|'Name'
op|'('
name|'prefix'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bytes'
op|'='
name|'int'
op|'('
op|'('
number|'128'
op|'-'
name|'self'
op|'.'
name|'prefixLen'
op|')'
op|'/'
number|'8.0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'str2time'
op|'('
name|'ttl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'strio'
op|'.'
name|'write'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!B'"
op|','
name|'self'
op|'.'
name|'prefixLen'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'bytes'
op|':'
newline|'\n'
indent|'            '
name|'strio'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'suffix'
op|'['
op|'-'
name|'self'
op|'.'
name|'bytes'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'prefixLen'
op|':'
newline|'\n'
comment|'# This may not be compressed'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'prefix'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'prefixLen'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'!B'"
op|','
name|'readPrecisely'
op|'('
name|'strio'
op|','
number|'1'
op|')'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'bytes'
op|'='
name|'int'
op|'('
op|'('
number|'128'
op|'-'
name|'self'
op|'.'
name|'prefixLen'
op|')'
op|'/'
number|'8.0'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'bytes'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'suffix'
op|'='
string|"'\\x00'"
op|'*'
op|'('
number|'16'
op|'-'
name|'self'
op|'.'
name|'bytes'
op|')'
op|'+'
name|'readPrecisely'
op|'('
name|'strio'
op|','
name|'self'
op|'.'
name|'bytes'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'prefixLen'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'prefix'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'other'
op|','
name|'Record_A6'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'self'
op|'.'
name|'prefixLen'
op|'=='
name|'other'
op|'.'
name|'prefixLen'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'suffix'
op|'['
op|'-'
name|'self'
op|'.'
name|'bytes'
op|':'
op|']'
op|'=='
name|'other'
op|'.'
name|'suffix'
op|'['
op|'-'
name|'self'
op|'.'
name|'bytes'
op|':'
op|']'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'prefix'
op|'=='
name|'other'
op|'.'
name|'prefix'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'ttl'
op|'=='
name|'other'
op|'.'
name|'ttl'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'NotImplemented'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
op|'('
name|'self'
op|'.'
name|'prefixLen'
op|','
name|'self'
op|'.'
name|'suffix'
op|'['
op|'-'
name|'self'
op|'.'
name|'bytes'
op|':'
op|']'
op|','
name|'self'
op|'.'
name|'prefix'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<A6 %s %s (%d) ttl=%s>'"
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'prefix'
op|','
nl|'\n'
name|'socket'
op|'.'
name|'inet_ntop'
op|'('
name|'AF_INET6'
op|','
name|'self'
op|'.'
name|'suffix'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'prefixLen'
op|','
name|'self'
op|'.'
name|'ttl'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_SRV
dedent|''
dedent|''
name|'class'
name|'Record_SRV'
op|'('
name|'tputil'
op|'.'
name|'FancyEqMixin'
op|','
name|'tputil'
op|'.'
name|'FancyStrMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The location of the server(s) for a specific protocol and domain.\n\n    This is an experimental record type.\n\n    @type priority: C{int}\n    @ivar priority: The priority of this target host.  A client MUST attempt to\n        contact the target host with the lowest-numbered priority it can reach;\n        target hosts with the same priority SHOULD be tried in an order defined\n        by the weight field.\n\n    @type weight: C{int}\n    @ivar weight: Specifies a relative weight for entries with the same\n        priority. Larger weights SHOULD be given a proportionately higher\n        probability of being selected.\n\n    @type port: C{int}\n    @ivar port: The port on this target host of this service.\n\n    @type target: L{Name}\n    @ivar target: The domain name of the target host.  There MUST be one or\n        more address records for this name, the name MUST NOT be an alias (in\n        the sense of RFC 1034 or RFC 2181).  Implementors are urged, but not\n        required, to return the address record(s) in the Additional Data\n        section.  Unless and until permitted by future standards action, name\n        compression is not to be used for this field.\n\n    @type ttl: C{int}\n    @ivar ttl: The maximum number of seconds which this record should be\n        cached.\n\n    @see: U{http://www.faqs.org/rfcs/rfc2782.html}\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|','
name|'IRecord'
op|')'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'SRV'
newline|'\n'
nl|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'SRV'"
newline|'\n'
DECL|variable|compareAttributes
name|'compareAttributes'
op|'='
op|'('
string|"'priority'"
op|','
string|"'weight'"
op|','
string|"'target'"
op|','
string|"'port'"
op|','
string|"'ttl'"
op|')'
newline|'\n'
DECL|variable|showAttributes
name|'showAttributes'
op|'='
op|'('
string|"'priority'"
op|','
string|"'weight'"
op|','
op|'('
string|"'target'"
op|','
string|"'target'"
op|','
string|"'%s'"
op|')'
op|','
string|"'port'"
op|','
string|"'ttl'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'priority'
op|'='
number|'0'
op|','
name|'weight'
op|'='
number|'0'
op|','
name|'port'
op|'='
number|'0'
op|','
name|'target'
op|'='
string|"''"
op|','
name|'ttl'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'priority'
op|'='
name|'int'
op|'('
name|'priority'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'weight'
op|'='
name|'int'
op|'('
name|'weight'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'int'
op|'('
name|'port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'target'
op|'='
name|'Name'
op|'('
name|'target'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'str2time'
op|'('
name|'ttl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'strio'
op|'.'
name|'write'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!HHH'"
op|','
name|'self'
op|'.'
name|'priority'
op|','
name|'self'
op|'.'
name|'weight'
op|','
name|'self'
op|'.'
name|'port'
op|')'
op|')'
newline|'\n'
comment|"# This can't be compressed"
nl|'\n'
name|'self'
op|'.'
name|'target'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'r'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'!HHH'"
op|','
name|'readPrecisely'
op|'('
name|'strio'
op|','
name|'struct'
op|'.'
name|'calcsize'
op|'('
string|"'!HHH'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'priority'
op|','
name|'self'
op|'.'
name|'weight'
op|','
name|'self'
op|'.'
name|'port'
op|'='
name|'r'
newline|'\n'
name|'self'
op|'.'
name|'target'
op|'='
name|'Name'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'target'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
op|'('
name|'self'
op|'.'
name|'priority'
op|','
name|'self'
op|'.'
name|'weight'
op|','
name|'self'
op|'.'
name|'port'
op|','
name|'self'
op|'.'
name|'target'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_NAPTR
dedent|''
dedent|''
name|'class'
name|'Record_NAPTR'
op|'('
name|'tputil'
op|'.'
name|'FancyEqMixin'
op|','
name|'tputil'
op|'.'
name|'FancyStrMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The location of the server(s) for a specific protocol and domain.\n\n    @type order: C{int}\n    @ivar order: An integer specifying the order in which the NAPTR records\n        MUST be processed to ensure the correct ordering of rules.  Low numbers\n        are processed before high numbers.\n\n    @type preference: C{int}\n    @ivar preference: An integer that specifies the order in which NAPTR\n        records with equal "order" values SHOULD be processed, low numbers\n        being processed before high numbers.\n\n    @type flag: L{Charstr}\n    @ivar flag: A <character-string> containing flags to control aspects of the\n        rewriting and interpretation of the fields in the record.  Flags\n        aresingle characters from the set [A-Z0-9].  The case of the alphabetic\n        characters is not significant.\n\n        At this time only four flags, "S", "A", "U", and "P", are defined.\n\n    @type service: L{Charstr}\n    @ivar service: Specifies the service(s) available down this rewrite path.\n        It may also specify the particular protocol that is used to talk with a\n        service.  A protocol MUST be specified if the flags field states that\n        the NAPTR is terminal.\n\n    @type regexp: L{Charstr}\n    @ivar regexp: A STRING containing a substitution expression that is applied\n        to the original string held by the client in order to construct the\n        next domain name to lookup.\n\n    @type replacement: L{Name}\n    @ivar replacement: The next NAME to query for NAPTR, SRV, or address\n        records depending on the value of the flags field.  This MUST be a\n        fully qualified domain-name.\n\n    @type ttl: C{int}\n    @ivar ttl: The maximum number of seconds which this record should be\n        cached.\n\n    @see: U{http://www.faqs.org/rfcs/rfc2915.html}\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|','
name|'IRecord'
op|')'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'NAPTR'
newline|'\n'
nl|'\n'
DECL|variable|compareAttributes
name|'compareAttributes'
op|'='
op|'('
string|"'order'"
op|','
string|"'preference'"
op|','
string|"'flags'"
op|','
string|"'service'"
op|','
string|"'regexp'"
op|','
nl|'\n'
string|"'replacement'"
op|')'
newline|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'NAPTR'"
newline|'\n'
DECL|variable|showAttributes
name|'showAttributes'
op|'='
op|'('
string|"'order'"
op|','
string|"'preference'"
op|','
op|'('
string|"'flags'"
op|','
string|"'flags'"
op|','
string|"'%s'"
op|')'
op|','
nl|'\n'
op|'('
string|"'service'"
op|','
string|"'service'"
op|','
string|"'%s'"
op|')'
op|','
op|'('
string|"'regexp'"
op|','
string|"'regexp'"
op|','
string|"'%s'"
op|')'
op|','
nl|'\n'
op|'('
string|"'replacement'"
op|','
string|"'replacement'"
op|','
string|"'%s'"
op|')'
op|','
string|"'ttl'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'order'
op|'='
number|'0'
op|','
name|'preference'
op|'='
number|'0'
op|','
name|'flags'
op|'='
string|"''"
op|','
name|'service'
op|'='
string|"''"
op|','
name|'regexp'
op|'='
string|"''"
op|','
nl|'\n'
name|'replacement'
op|'='
string|"''"
op|','
name|'ttl'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'order'
op|'='
name|'int'
op|'('
name|'order'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'preference'
op|'='
name|'int'
op|'('
name|'preference'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'='
name|'Charstr'
op|'('
name|'flags'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'service'
op|'='
name|'Charstr'
op|'('
name|'service'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'regexp'
op|'='
name|'Charstr'
op|'('
name|'regexp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'replacement'
op|'='
name|'Name'
op|'('
name|'replacement'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'str2time'
op|'('
name|'ttl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'strio'
op|'.'
name|'write'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!HH'"
op|','
name|'self'
op|'.'
name|'order'
op|','
name|'self'
op|'.'
name|'preference'
op|')'
op|')'
newline|'\n'
comment|"# This can't be compressed"
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'service'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'regexp'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'replacement'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'r'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'!HH'"
op|','
name|'readPrecisely'
op|'('
name|'strio'
op|','
name|'struct'
op|'.'
name|'calcsize'
op|'('
string|"'!HH'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'order'
op|','
name|'self'
op|'.'
name|'preference'
op|'='
name|'r'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'='
name|'Charstr'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'service'
op|'='
name|'Charstr'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'regexp'
op|'='
name|'Charstr'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'replacement'
op|'='
name|'Name'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'service'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'regexp'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'replacement'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
op|'('
nl|'\n'
name|'self'
op|'.'
name|'order'
op|','
name|'self'
op|'.'
name|'preference'
op|','
name|'self'
op|'.'
name|'flags'
op|','
nl|'\n'
name|'self'
op|'.'
name|'service'
op|','
name|'self'
op|'.'
name|'regexp'
op|','
name|'self'
op|'.'
name|'replacement'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_AFSDB
dedent|''
dedent|''
name|'class'
name|'Record_AFSDB'
op|'('
name|'tputil'
op|'.'
name|'FancyStrMixin'
op|','
name|'tputil'
op|'.'
name|'FancyEqMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Map from a domain name to the name of an AFS cell database server.\n\n    @type subtype: C{int}\n    @ivar subtype: In the case of subtype 1, the host has an AFS version 3.0\n        Volume Location Server for the named AFS cell.  In the case of subtype\n        2, the host has an authenticated name server holding the cell-root\n        directory node for the named DCE/NCA cell.\n\n    @type hostname: L{Name}\n    @ivar hostname: The domain name of a host that has a server for the cell\n        named by this record.\n\n    @type ttl: C{int}\n    @ivar ttl: The maximum number of seconds which this record should be\n        cached.\n\n    @see: U{http://www.faqs.org/rfcs/rfc1183.html}\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|','
name|'IRecord'
op|')'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'AFSDB'
newline|'\n'
nl|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'AFSDB'"
newline|'\n'
DECL|variable|compareAttributes
name|'compareAttributes'
op|'='
op|'('
string|"'subtype'"
op|','
string|"'hostname'"
op|','
string|"'ttl'"
op|')'
newline|'\n'
DECL|variable|showAttributes
name|'showAttributes'
op|'='
op|'('
string|"'subtype'"
op|','
op|'('
string|"'hostname'"
op|','
string|"'hostname'"
op|','
string|"'%s'"
op|')'
op|','
string|"'ttl'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'subtype'
op|'='
number|'0'
op|','
name|'hostname'
op|'='
string|"''"
op|','
name|'ttl'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'subtype'
op|'='
name|'int'
op|'('
name|'subtype'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hostname'
op|'='
name|'Name'
op|'('
name|'hostname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'str2time'
op|'('
name|'ttl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'strio'
op|'.'
name|'write'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!H'"
op|','
name|'self'
op|'.'
name|'subtype'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hostname'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'compDict'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'r'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'!H'"
op|','
name|'readPrecisely'
op|'('
name|'strio'
op|','
name|'struct'
op|'.'
name|'calcsize'
op|'('
string|"'!H'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'subtype'
op|','
op|'='
name|'r'
newline|'\n'
name|'self'
op|'.'
name|'hostname'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
op|'('
name|'self'
op|'.'
name|'subtype'
op|','
name|'self'
op|'.'
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_RP
dedent|''
dedent|''
name|'class'
name|'Record_RP'
op|'('
name|'tputil'
op|'.'
name|'FancyEqMixin'
op|','
name|'tputil'
op|'.'
name|'FancyStrMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The responsible person for a domain.\n\n    @type mbox: L{Name}\n    @ivar mbox: A domain name that specifies the mailbox for the responsible\n        person.\n\n    @type txt: L{Name}\n    @ivar txt: A domain name for which TXT RR\'s exist (indirection through\n        which allows information sharing about the contents of this RP record).\n\n    @type ttl: C{int}\n    @ivar ttl: The maximum number of seconds which this record should be\n        cached.\n\n    @see: U{http://www.faqs.org/rfcs/rfc1183.html}\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|','
name|'IRecord'
op|')'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'RP'
newline|'\n'
nl|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'RP'"
newline|'\n'
DECL|variable|compareAttributes
name|'compareAttributes'
op|'='
op|'('
string|"'mbox'"
op|','
string|"'txt'"
op|','
string|"'ttl'"
op|')'
newline|'\n'
DECL|variable|showAttributes
name|'showAttributes'
op|'='
op|'('
op|'('
string|"'mbox'"
op|','
string|"'mbox'"
op|','
string|"'%s'"
op|')'
op|','
op|'('
string|"'txt'"
op|','
string|"'txt'"
op|','
string|"'%s'"
op|')'
op|','
string|"'ttl'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'mbox'
op|'='
string|"''"
op|','
name|'txt'
op|'='
string|"''"
op|','
name|'ttl'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mbox'
op|'='
name|'Name'
op|'('
name|'mbox'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'txt'
op|'='
name|'Name'
op|'('
name|'txt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'str2time'
op|'('
name|'ttl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mbox'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'compDict'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'txt'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'compDict'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mbox'
op|'='
name|'Name'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'txt'
op|'='
name|'Name'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mbox'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'txt'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
op|'('
name|'self'
op|'.'
name|'mbox'
op|','
name|'self'
op|'.'
name|'txt'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_HINFO
dedent|''
dedent|''
name|'class'
name|'Record_HINFO'
op|'('
name|'tputil'
op|'.'
name|'FancyStrMixin'
op|','
name|'tputil'
op|'.'
name|'FancyEqMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Host information.\n\n    @type cpu: C{str}\n    @ivar cpu: Specifies the CPU type.\n\n    @type os: C{str}\n    @ivar os: Specifies the OS.\n\n    @type ttl: C{int}\n    @ivar ttl: The maximum number of seconds which this record should be\n        cached.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|','
name|'IRecord'
op|')'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'HINFO'
newline|'\n'
nl|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'HINFO'"
newline|'\n'
name|'showAttributes'
op|'='
name|'compareAttributes'
op|'='
op|'('
string|"'cpu'"
op|','
string|"'os'"
op|','
string|"'ttl'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'cpu'
op|'='
string|"''"
op|','
name|'os'
op|'='
string|"''"
op|','
name|'ttl'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cpu'
op|','
name|'self'
op|'.'
name|'os'
op|'='
name|'cpu'
op|','
name|'os'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'str2time'
op|'('
name|'ttl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'strio'
op|'.'
name|'write'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!B'"
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'cpu'
op|')'
op|')'
op|'+'
name|'self'
op|'.'
name|'cpu'
op|')'
newline|'\n'
name|'strio'
op|'.'
name|'write'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!B'"
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'os'
op|')'
op|')'
op|'+'
name|'self'
op|'.'
name|'os'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cpu'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'!B'"
op|','
name|'readPrecisely'
op|'('
name|'strio'
op|','
number|'1'
op|')'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'cpu'
op|'='
name|'readPrecisely'
op|'('
name|'strio'
op|','
name|'cpu'
op|')'
newline|'\n'
name|'os'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'!B'"
op|','
name|'readPrecisely'
op|'('
name|'strio'
op|','
number|'1'
op|')'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'os'
op|'='
name|'readPrecisely'
op|'('
name|'strio'
op|','
name|'os'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'other'
op|','
name|'Record_HINFO'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'self'
op|'.'
name|'os'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
name|'other'
op|'.'
name|'os'
op|'.'
name|'lower'
op|'('
op|')'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'cpu'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
name|'other'
op|'.'
name|'cpu'
op|'.'
name|'lower'
op|'('
op|')'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'ttl'
op|'=='
name|'other'
op|'.'
name|'ttl'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'NotImplemented'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
op|'('
name|'self'
op|'.'
name|'os'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'cpu'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_MINFO
dedent|''
dedent|''
name|'class'
name|'Record_MINFO'
op|'('
name|'tputil'
op|'.'
name|'FancyEqMixin'
op|','
name|'tputil'
op|'.'
name|'FancyStrMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Mailbox or mail list information.\n\n    This is an experimental record type.\n\n    @type rmailbx: L{Name}\n    @ivar rmailbx: A domain-name which specifies a mailbox which is responsible\n        for the mailing list or mailbox.  If this domain name names the root,\n        the owner of the MINFO RR is responsible for itself.\n\n    @type emailbx: L{Name}\n    @ivar emailbx: A domain-name which specifies a mailbox which is to receive\n        error messages related to the mailing list or mailbox specified by the\n        owner of the MINFO record.  If this domain name names the root, errors\n        should be returned to the sender of the message.\n\n    @type ttl: C{int}\n    @ivar ttl: The maximum number of seconds which this record should be\n        cached.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|','
name|'IRecord'
op|')'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'MINFO'
newline|'\n'
nl|'\n'
DECL|variable|rmailbx
name|'rmailbx'
op|'='
name|'None'
newline|'\n'
DECL|variable|emailbx
name|'emailbx'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'MINFO'"
newline|'\n'
DECL|variable|compareAttributes
name|'compareAttributes'
op|'='
op|'('
string|"'rmailbx'"
op|','
string|"'emailbx'"
op|','
string|"'ttl'"
op|')'
newline|'\n'
DECL|variable|showAttributes
name|'showAttributes'
op|'='
op|'('
op|'('
string|"'rmailbx'"
op|','
string|"'responsibility'"
op|','
string|"'%s'"
op|')'
op|','
nl|'\n'
op|'('
string|"'emailbx'"
op|','
string|"'errors'"
op|','
string|"'%s'"
op|')'
op|','
nl|'\n'
string|"'ttl'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'rmailbx'
op|'='
string|"''"
op|','
name|'emailbx'
op|'='
string|"''"
op|','
name|'ttl'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'rmailbx'
op|','
name|'self'
op|'.'
name|'emailbx'
op|'='
name|'Name'
op|'('
name|'rmailbx'
op|')'
op|','
name|'Name'
op|'('
name|'emailbx'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'str2time'
op|'('
name|'ttl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'rmailbx'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'compDict'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'emailbx'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'compDict'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'rmailbx'
op|','
name|'self'
op|'.'
name|'emailbx'
op|'='
name|'Name'
op|'('
op|')'
op|','
name|'Name'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rmailbx'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'emailbx'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
op|'('
name|'self'
op|'.'
name|'rmailbx'
op|','
name|'self'
op|'.'
name|'emailbx'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Record_MX
dedent|''
dedent|''
name|'class'
name|'Record_MX'
op|'('
name|'tputil'
op|'.'
name|'FancyStrMixin'
op|','
name|'tputil'
op|'.'
name|'FancyEqMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Mail exchange.\n\n    @type preference: C{int}\n    @ivar preference: Specifies the preference given to this RR among others at\n        the same owner.  Lower values are preferred.\n\n    @type name: L{Name}\n    @ivar name: A domain-name which specifies a host willing to act as a mail\n        exchange.\n\n    @type ttl: C{int}\n    @ivar ttl: The maximum number of seconds which this record should be\n        cached.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|','
name|'IRecord'
op|')'
newline|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'MX'
newline|'\n'
nl|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'MX'"
newline|'\n'
DECL|variable|compareAttributes
name|'compareAttributes'
op|'='
op|'('
string|"'preference'"
op|','
string|"'name'"
op|','
string|"'ttl'"
op|')'
newline|'\n'
DECL|variable|showAttributes
name|'showAttributes'
op|'='
op|'('
string|"'preference'"
op|','
op|'('
string|"'name'"
op|','
string|"'name'"
op|','
string|"'%s'"
op|')'
op|','
string|"'ttl'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'preference'
op|'='
number|'0'
op|','
name|'name'
op|'='
string|"''"
op|','
name|'ttl'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'preference'
op|','
name|'self'
op|'.'
name|'name'
op|'='
name|'int'
op|'('
name|'preference'
op|')'
op|','
name|'Name'
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'exchange'"
op|','
name|'name'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'str2time'
op|'('
name|'ttl'
op|')'
newline|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'strio'
op|'.'
name|'write'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!H'"
op|','
name|'self'
op|'.'
name|'preference'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'.'
name|'encode'
op|'('
name|'strio'
op|','
name|'compDict'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'preference'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'!H'"
op|','
name|'readPrecisely'
op|'('
name|'strio'
op|','
number|'2'
op|')'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'Name'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
nl|'\n'
DECL|member|exchange
dedent|''
name|'def'
name|'exchange'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"use Record_MX.name instead"'
op|','
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
DECL|variable|exchange
dedent|''
name|'exchange'
op|'='
name|'property'
op|'('
name|'exchange'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__hash__
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
op|'('
name|'self'
op|'.'
name|'preference'
op|','
name|'self'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'# Oh god, Record_TXT how I hate thee.'
nl|'\n'
DECL|class|Record_TXT
dedent|''
dedent|''
name|'class'
name|'Record_TXT'
op|'('
name|'tputil'
op|'.'
name|'FancyEqMixin'
op|','
name|'tputil'
op|'.'
name|'FancyStrMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Freeform text.\n\n    @type data: C{list} of C{str}\n    @ivar data: Freeform text which makes up this record.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IEncodable'
op|','
name|'IRecord'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|TYPE
name|'TYPE'
op|'='
name|'TXT'
newline|'\n'
nl|'\n'
DECL|variable|fancybasename
name|'fancybasename'
op|'='
string|"'TXT'"
newline|'\n'
name|'showAttributes'
op|'='
name|'compareAttributes'
op|'='
op|'('
string|"'data'"
op|','
string|"'ttl'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'data'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'='
name|'list'
op|'('
name|'data'
op|')'
newline|'\n'
comment|'# arg man python sucks so bad'
nl|'\n'
name|'self'
op|'.'
name|'ttl'
op|'='
name|'str2time'
op|'('
name|'kw'
op|'.'
name|'get'
op|'('
string|"'ttl'"
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'compDict'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'d'
name|'in'
name|'self'
op|'.'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'strio'
op|'.'
name|'write'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!B'"
op|','
name|'len'
op|'('
name|'d'
op|')'
op|')'
op|'+'
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'soFar'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'soFar'
op|'<'
name|'length'
op|':'
newline|'\n'
indent|'            '
name|'L'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'!B'"
op|','
name|'readPrecisely'
op|'('
name|'strio'
op|','
number|'1'
op|')'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'.'
name|'append'
op|'('
name|'readPrecisely'
op|'('
name|'strio'
op|','
name|'L'
op|')'
op|')'
newline|'\n'
name|'soFar'
op|'+='
name|'L'
op|'+'
number|'1'
newline|'\n'
dedent|''
name|'if'
name|'soFar'
op|'!='
name|'length'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
nl|'\n'
string|'"Decoded %d bytes in TXT record, but rdlength is %d"'
op|'%'
op|'('
nl|'\n'
name|'soFar'
op|','
name|'length'
nl|'\n'
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
name|'tuple'
op|'('
name|'self'
op|'.'
name|'data'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Message
dedent|''
dedent|''
name|'class'
name|'Message'
op|':'
newline|'\n'
DECL|variable|headerFmt
indent|'    '
name|'headerFmt'
op|'='
string|'"!H2B4H"'
newline|'\n'
DECL|variable|headerSize
name|'headerSize'
op|'='
name|'struct'
op|'.'
name|'calcsize'
op|'('
name|'headerFmt'
op|')'
newline|'\n'
nl|'\n'
comment|'# Question, answer, additional, and nameserver lists'
nl|'\n'
name|'queries'
op|'='
name|'answers'
op|'='
name|'add'
op|'='
name|'ns'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'id'
op|'='
number|'0'
op|','
name|'answer'
op|'='
number|'0'
op|','
name|'opCode'
op|'='
number|'0'
op|','
name|'recDes'
op|'='
number|'0'
op|','
name|'recAv'
op|'='
number|'0'
op|','
nl|'\n'
name|'auth'
op|'='
number|'0'
op|','
name|'rCode'
op|'='
name|'OK'
op|','
name|'trunc'
op|'='
number|'0'
op|','
name|'maxSize'
op|'='
number|'512'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'maxSize'
op|'='
name|'maxSize'
newline|'\n'
name|'self'
op|'.'
name|'id'
op|'='
name|'id'
newline|'\n'
name|'self'
op|'.'
name|'answer'
op|'='
name|'answer'
newline|'\n'
name|'self'
op|'.'
name|'opCode'
op|'='
name|'opCode'
newline|'\n'
name|'self'
op|'.'
name|'auth'
op|'='
name|'auth'
newline|'\n'
name|'self'
op|'.'
name|'trunc'
op|'='
name|'trunc'
newline|'\n'
name|'self'
op|'.'
name|'recDes'
op|'='
name|'recDes'
newline|'\n'
name|'self'
op|'.'
name|'recAv'
op|'='
name|'recAv'
newline|'\n'
name|'self'
op|'.'
name|'rCode'
op|'='
name|'rCode'
newline|'\n'
name|'self'
op|'.'
name|'queries'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'answers'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'authority'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'additional'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addQuery
dedent|''
name|'def'
name|'addQuery'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'type'
op|'='
name|'ALL_RECORDS'
op|','
name|'cls'
op|'='
name|'IN'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add another query to this Message.\n\n        @type name: C{str}\n        @param name: The name to query.\n\n        @type type: C{int}\n        @param type: Query type\n\n        @type cls: C{int}\n        @param cls: Query class\n        """'
newline|'\n'
name|'self'
op|'.'
name|'queries'
op|'.'
name|'append'
op|'('
name|'Query'
op|'('
name|'name'
op|','
name|'type'
op|','
name|'cls'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'strio'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'compDict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'body_tmp'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'for'
name|'q'
name|'in'
name|'self'
op|'.'
name|'queries'
op|':'
newline|'\n'
indent|'            '
name|'q'
op|'.'
name|'encode'
op|'('
name|'body_tmp'
op|','
name|'compDict'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'q'
name|'in'
name|'self'
op|'.'
name|'answers'
op|':'
newline|'\n'
indent|'            '
name|'q'
op|'.'
name|'encode'
op|'('
name|'body_tmp'
op|','
name|'compDict'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'q'
name|'in'
name|'self'
op|'.'
name|'authority'
op|':'
newline|'\n'
indent|'            '
name|'q'
op|'.'
name|'encode'
op|'('
name|'body_tmp'
op|','
name|'compDict'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'q'
name|'in'
name|'self'
op|'.'
name|'additional'
op|':'
newline|'\n'
indent|'            '
name|'q'
op|'.'
name|'encode'
op|'('
name|'body_tmp'
op|','
name|'compDict'
op|')'
newline|'\n'
dedent|''
name|'body'
op|'='
name|'body_tmp'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'size'
op|'='
name|'len'
op|'('
name|'body'
op|')'
op|'+'
name|'self'
op|'.'
name|'headerSize'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'maxSize'
name|'and'
name|'size'
op|'>'
name|'self'
op|'.'
name|'maxSize'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'trunc'
op|'='
number|'1'
newline|'\n'
name|'body'
op|'='
name|'body'
op|'['
op|':'
name|'self'
op|'.'
name|'maxSize'
op|'-'
name|'self'
op|'.'
name|'headerSize'
op|']'
newline|'\n'
dedent|''
name|'byte3'
op|'='
op|'('
op|'('
op|'('
name|'self'
op|'.'
name|'answer'
op|'&'
number|'1'
op|')'
op|'<<'
number|'7'
op|')'
nl|'\n'
op|'|'
op|'('
op|'('
name|'self'
op|'.'
name|'opCode'
op|'&'
number|'0xf'
op|')'
op|'<<'
number|'3'
op|')'
nl|'\n'
op|'|'
op|'('
op|'('
name|'self'
op|'.'
name|'auth'
op|'&'
number|'1'
op|')'
op|'<<'
number|'2'
op|')'
nl|'\n'
op|'|'
op|'('
op|'('
name|'self'
op|'.'
name|'trunc'
op|'&'
number|'1'
op|')'
op|'<<'
number|'1'
op|')'
nl|'\n'
op|'|'
op|'('
name|'self'
op|'.'
name|'recDes'
op|'&'
number|'1'
op|')'
op|')'
newline|'\n'
name|'byte4'
op|'='
op|'('
op|'('
op|'('
name|'self'
op|'.'
name|'recAv'
op|'&'
number|'1'
op|')'
op|'<<'
number|'7'
op|')'
nl|'\n'
op|'|'
op|'('
name|'self'
op|'.'
name|'rCode'
op|'&'
number|'0xf'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'strio'
op|'.'
name|'write'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
name|'self'
op|'.'
name|'headerFmt'
op|','
name|'self'
op|'.'
name|'id'
op|','
name|'byte3'
op|','
name|'byte4'
op|','
nl|'\n'
name|'len'
op|'('
name|'self'
op|'.'
name|'queries'
op|')'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'answers'
op|')'
op|','
nl|'\n'
name|'len'
op|'('
name|'self'
op|'.'
name|'authority'
op|')'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'additional'
op|')'
op|')'
op|')'
newline|'\n'
name|'strio'
op|'.'
name|'write'
op|'('
name|'body'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'strio'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'maxSize'
op|'='
number|'0'
newline|'\n'
name|'header'
op|'='
name|'readPrecisely'
op|'('
name|'strio'
op|','
name|'self'
op|'.'
name|'headerSize'
op|')'
newline|'\n'
name|'r'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
name|'self'
op|'.'
name|'headerFmt'
op|','
name|'header'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'id'
op|','
name|'byte3'
op|','
name|'byte4'
op|','
name|'nqueries'
op|','
name|'nans'
op|','
name|'nns'
op|','
name|'nadd'
op|'='
name|'r'
newline|'\n'
name|'self'
op|'.'
name|'answer'
op|'='
op|'('
name|'byte3'
op|'>>'
number|'7'
op|')'
op|'&'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'opCode'
op|'='
op|'('
name|'byte3'
op|'>>'
number|'3'
op|')'
op|'&'
number|'0xf'
newline|'\n'
name|'self'
op|'.'
name|'auth'
op|'='
op|'('
name|'byte3'
op|'>>'
number|'2'
op|')'
op|'&'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'trunc'
op|'='
op|'('
name|'byte3'
op|'>>'
number|'1'
op|')'
op|'&'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'recDes'
op|'='
name|'byte3'
op|'&'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'recAv'
op|'='
op|'('
name|'byte4'
op|'>>'
number|'7'
op|')'
op|'&'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'rCode'
op|'='
name|'byte4'
op|'&'
number|'0xf'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'queries'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'nqueries'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'q'
op|'='
name|'Query'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'q'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'EOFError'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'queries'
op|'.'
name|'append'
op|'('
name|'q'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'items'
op|'='
op|'('
op|'('
name|'self'
op|'.'
name|'answers'
op|','
name|'nans'
op|')'
op|','
op|'('
name|'self'
op|'.'
name|'authority'
op|','
name|'nns'
op|')'
op|','
op|'('
name|'self'
op|'.'
name|'additional'
op|','
name|'nadd'
op|')'
op|')'
newline|'\n'
name|'for'
op|'('
name|'l'
op|','
name|'n'
op|')'
name|'in'
name|'items'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'parseRecords'
op|'('
name|'l'
op|','
name|'n'
op|','
name|'strio'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|parseRecords
dedent|''
dedent|''
name|'def'
name|'parseRecords'
op|'('
name|'self'
op|','
name|'list'
op|','
name|'num'
op|','
name|'strio'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'num'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'header'
op|'='
name|'RRHeader'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'header'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'EOFError'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'t'
op|'='
name|'self'
op|'.'
name|'lookupRecordType'
op|'('
name|'header'
op|'.'
name|'type'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'t'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'header'
op|'.'
name|'payload'
op|'='
name|'t'
op|'('
name|'ttl'
op|'='
name|'header'
op|'.'
name|'ttl'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'header'
op|'.'
name|'payload'
op|'.'
name|'decode'
op|'('
name|'strio'
op|','
name|'header'
op|'.'
name|'rdlength'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'EOFError'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'list'
op|'.'
name|'append'
op|'('
name|'header'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|lookupRecordType
dedent|''
dedent|''
name|'def'
name|'lookupRecordType'
op|'('
name|'self'
op|','
name|'type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'globals'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|"'Record_'"
op|'+'
name|'QUERY_TYPES'
op|'.'
name|'get'
op|'('
name|'type'
op|','
string|"''"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|toStr
dedent|''
name|'def'
name|'toStr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'strio'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'encode'
op|'('
name|'strio'
op|')'
newline|'\n'
name|'return'
name|'strio'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fromStr
dedent|''
name|'def'
name|'fromStr'
op|'('
name|'self'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'strio'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
name|'str'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'decode'
op|'('
name|'strio'
op|')'
newline|'\n'
nl|'\n'
DECL|class|DNSMixin
dedent|''
dedent|''
name|'class'
name|'DNSMixin'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DNS protocol mixin shared by UDP and TCP implementations.\n\n    @ivar _reactor: A L{IReactorTime} and L{IReactorUDP} provider which will\n        be used to issue DNS queries and manage request timeouts.\n    """'
newline|'\n'
DECL|variable|id
name|'id'
op|'='
name|'None'
newline|'\n'
DECL|variable|liveMessages
name|'liveMessages'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'controller'
op|','
name|'reactor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'controller'
op|'='
name|'controller'
newline|'\n'
name|'self'
op|'.'
name|'id'
op|'='
name|'random'
op|'.'
name|'randrange'
op|'('
number|'2'
op|'**'
number|'10'
op|','
number|'2'
op|'**'
number|'15'
op|')'
newline|'\n'
name|'if'
name|'reactor'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_reactor'
op|'='
name|'reactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|pickID
dedent|''
name|'def'
name|'pickID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a unique ID for queries.\n        """'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'id'
op|'='
name|'randomSource'
op|'('
op|')'
newline|'\n'
name|'if'
name|'id'
name|'not'
name|'in'
name|'self'
op|'.'
name|'liveMessages'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'id'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callLater
dedent|''
dedent|''
dedent|''
name|'def'
name|'callLater'
op|'('
name|'self'
op|','
name|'period'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Wrapper around reactor.callLater, mainly for test purpose.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_reactor'
op|'.'
name|'callLater'
op|'('
name|'period'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_query
dedent|''
name|'def'
name|'_query'
op|'('
name|'self'
op|','
name|'queries'
op|','
name|'timeout'
op|','
name|'id'
op|','
name|'writeMessage'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send out a message with the given queries.\n\n        @type queries: C{list} of C{Query} instances\n        @param queries: The queries to transmit\n\n        @type timeout: C{int} or C{float}\n        @param timeout: How long to wait before giving up\n\n        @type id: C{int}\n        @param id: Unique key for this request\n\n        @type writeMessage: C{callable}\n        @param writeMessage: One-parameter callback which writes the message\n\n        @rtype: C{Deferred}\n        @return: a C{Deferred} which will be fired with the result of the\n            query, or errbacked with any errors that could happen (exceptions\n            during writing of the query, timeout errors, ...).\n        """'
newline|'\n'
name|'m'
op|'='
name|'Message'
op|'('
name|'id'
op|','
name|'recDes'
op|'='
number|'1'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'queries'
op|'='
name|'queries'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'writeMessage'
op|'('
name|'m'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'resultDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'cancelCall'
op|'='
name|'self'
op|'.'
name|'callLater'
op|'('
name|'timeout'
op|','
name|'self'
op|'.'
name|'_clearFailed'
op|','
name|'resultDeferred'
op|','
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'liveMessages'
op|'['
name|'id'
op|']'
op|'='
op|'('
name|'resultDeferred'
op|','
name|'cancelCall'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'resultDeferred'
newline|'\n'
nl|'\n'
DECL|member|_clearFailed
dedent|''
name|'def'
name|'_clearFailed'
op|'('
name|'self'
op|','
name|'deferred'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Clean the Deferred after a timeout.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'liveMessages'
op|'['
name|'id'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'DNSQueryTimeoutError'
op|'('
name|'id'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DNSDatagramProtocol
dedent|''
dedent|''
name|'class'
name|'DNSDatagramProtocol'
op|'('
name|'DNSMixin'
op|','
name|'protocol'
op|'.'
name|'DatagramProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DNS protocol over UDP.\n    """'
newline|'\n'
DECL|variable|resends
name|'resends'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|stopProtocol
name|'def'
name|'stopProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop protocol: reset state variables.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'liveMessages'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'resends'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|startProtocol
dedent|''
name|'def'
name|'startProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Upon start, reset internal state.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'liveMessages'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'resends'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|writeMessage
dedent|''
name|'def'
name|'writeMessage'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a message holding DNS queries.\n\n        @type message: L{Message}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'message'
op|'.'
name|'toStr'
op|'('
op|')'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startListening
dedent|''
name|'def'
name|'startListening'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_reactor'
op|'.'
name|'listenUDP'
op|'('
number|'0'
op|','
name|'self'
op|','
name|'maxPacketSize'
op|'='
number|'512'
op|')'
newline|'\n'
nl|'\n'
DECL|member|datagramReceived
dedent|''
name|'def'
name|'datagramReceived'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Read a datagram, extract the message in it and trigger the associated\n        Deferred.\n        """'
newline|'\n'
name|'m'
op|'='
name|'Message'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'.'
name|'fromStr'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'EOFError'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Truncated packet (%d bytes) from %s"'
op|'%'
op|'('
name|'len'
op|'('
name|'data'
op|')'
op|','
name|'addr'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
comment|"# Nothing should trigger this, but since we're potentially"
nl|'\n'
comment|'# invoking a lot of different decoding methods, we might as well'
nl|'\n'
comment|'# be extra cautious.  Anything that triggers this is itself'
nl|'\n'
comment|'# buggy.'
nl|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|','
string|'"Unexpected decoding error"'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'m'
op|'.'
name|'id'
name|'in'
name|'self'
op|'.'
name|'liveMessages'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'canceller'
op|'='
name|'self'
op|'.'
name|'liveMessages'
op|'['
name|'m'
op|'.'
name|'id'
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'liveMessages'
op|'['
name|'m'
op|'.'
name|'id'
op|']'
newline|'\n'
name|'canceller'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
comment|"# XXX we shouldn't need this hack of catching exception on callback()"
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'.'
name|'callback'
op|'('
name|'m'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'m'
op|'.'
name|'id'
name|'not'
name|'in'
name|'self'
op|'.'
name|'resends'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'controller'
op|'.'
name|'messageReceived'
op|'('
name|'m'
op|','
name|'self'
op|','
name|'addr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeResend
dedent|''
dedent|''
dedent|''
name|'def'
name|'removeResend'
op|'('
name|'self'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mark message ID as no longer having duplication suppression.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'resends'
op|'['
name|'id'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|query
dedent|''
dedent|''
name|'def'
name|'query'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'queries'
op|','
name|'timeout'
op|'='
number|'10'
op|','
name|'id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send out a message with the given queries.\n\n        @type address: C{tuple} of C{str} and C{int}\n        @param address: The address to which to send the query\n\n        @type queries: C{list} of C{Query} instances\n        @param queries: The queries to transmit\n\n        @rtype: C{Deferred}\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'transport'
op|':'
newline|'\n'
comment|'# XXX transport might not get created automatically, use callLater?'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'startListening'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'CannotListenError'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'id'
op|'='
name|'self'
op|'.'
name|'pickID'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'resends'
op|'['
name|'id'
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|function|writeMessage
dedent|''
name|'def'
name|'writeMessage'
op|'('
name|'m'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'writeMessage'
op|'('
name|'m'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_query'
op|'('
name|'queries'
op|','
name|'timeout'
op|','
name|'id'
op|','
name|'writeMessage'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DNSProtocol
dedent|''
dedent|''
name|'class'
name|'DNSProtocol'
op|'('
name|'DNSMixin'
op|','
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DNS protocol over TCP.\n    """'
newline|'\n'
DECL|variable|length
name|'length'
op|'='
name|'None'
newline|'\n'
DECL|variable|buffer
name|'buffer'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|member|writeMessage
name|'def'
name|'writeMessage'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a message holding DNS queries.\n\n        @type message: L{Message}\n        """'
newline|'\n'
name|'s'
op|'='
name|'message'
op|'.'
name|'toStr'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!H'"
op|','
name|'len'
op|'('
name|'s'
op|')'
op|')'
op|'+'
name|'s'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connection is made: reset internal state, and notify the controller.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'liveMessages'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'controller'
op|'.'
name|'connectionMade'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Notify the controller that this protocol is no longer\n        connected.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'controller'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'+='
name|'data'
newline|'\n'
nl|'\n'
name|'while'
name|'self'
op|'.'
name|'buffer'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'length'
name|'is'
name|'None'
name|'and'
name|'len'
op|'('
name|'self'
op|'.'
name|'buffer'
op|')'
op|'>='
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'length'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'!H'"
op|','
name|'self'
op|'.'
name|'buffer'
op|'['
op|':'
number|'2'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
name|'self'
op|'.'
name|'buffer'
op|'['
number|'2'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'buffer'
op|')'
op|'>='
name|'self'
op|'.'
name|'length'
op|':'
newline|'\n'
indent|'                '
name|'myChunk'
op|'='
name|'self'
op|'.'
name|'buffer'
op|'['
op|':'
name|'self'
op|'.'
name|'length'
op|']'
newline|'\n'
name|'m'
op|'='
name|'Message'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'fromStr'
op|'('
name|'myChunk'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'d'
op|','
name|'canceller'
op|'='
name|'self'
op|'.'
name|'liveMessages'
op|'['
name|'m'
op|'.'
name|'id'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'controller'
op|'.'
name|'messageReceived'
op|'('
name|'m'
op|','
name|'self'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'del'
name|'self'
op|'.'
name|'liveMessages'
op|'['
name|'m'
op|'.'
name|'id'
op|']'
newline|'\n'
name|'canceller'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
comment|"# XXX we shouldn't need this hack"
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'d'
op|'.'
name|'callback'
op|'('
name|'m'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                        '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'buffer'
op|'='
name|'self'
op|'.'
name|'buffer'
op|'['
name|'self'
op|'.'
name|'length'
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'length'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|query
dedent|''
dedent|''
dedent|''
name|'def'
name|'query'
op|'('
name|'self'
op|','
name|'queries'
op|','
name|'timeout'
op|'='
number|'60'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send out a message with the given queries.\n\n        @type queries: C{list} of C{Query} instances\n        @param queries: The queries to transmit\n\n        @rtype: C{Deferred}\n        """'
newline|'\n'
name|'id'
op|'='
name|'self'
op|'.'
name|'pickID'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_query'
op|'('
name|'queries'
op|','
name|'timeout'
op|','
name|'id'
op|','
name|'self'
op|'.'
name|'writeMessage'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

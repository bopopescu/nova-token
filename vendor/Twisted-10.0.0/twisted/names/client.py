begin_unit
comment|'# -*- test-case-name: twisted.names.test.test_names -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nAsynchronous client DNS\n\nThe functions exposed in this module can be used for asynchronous name\nresolution and dns queries.\n\nIf you need to create a resolver with specific requirements, such as needing to\ndo queries against a particular host, the L{createResolver} function will\nreturn an C{IResolver}.\n\nFuture plans: Proper nameserver acquisition on Windows/MacOS,\nbetter caching, respect timeouts\n\n@author: Jp Calderone\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
comment|'# Twisted imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'runtime'
name|'import'
name|'platform'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'error'
op|','
name|'defer'
op|','
name|'protocol'
op|','
name|'interfaces'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'deprecate'
name|'import'
name|'getWarningMethod'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
name|'import'
name|'dns'
op|','
name|'common'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Resolver
name|'class'
name|'Resolver'
op|'('
name|'common'
op|'.'
name|'ResolverBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @ivar _waiting: A C{dict} mapping tuple keys of query name/type/class to\n        Deferreds which will be called back with the result of those queries.\n        This is used to avoid issuing the same query more than once in\n        parallel.  This is more efficient on the network and helps avoid a\n        "birthday paradox" attack by keeping the number of outstanding requests\n        for a particular query fixed at one instead of allowing the attacker to\n        raise it to an arbitrary number.\n\n    @ivar _reactor: A provider of L{IReactorTCP}, L{IReactorUDP}, and\n        L{IReactorTime} which will be used to set up network resources and\n        track timeouts.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'IResolver'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|index
name|'index'
op|'='
number|'0'
newline|'\n'
DECL|variable|timeout
name|'timeout'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|factory
name|'factory'
op|'='
name|'None'
newline|'\n'
DECL|variable|servers
name|'servers'
op|'='
name|'None'
newline|'\n'
DECL|variable|dynServers
name|'dynServers'
op|'='
op|'('
op|')'
newline|'\n'
DECL|variable|pending
name|'pending'
op|'='
name|'None'
newline|'\n'
DECL|variable|connections
name|'connections'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|resolv
name|'resolv'
op|'='
name|'None'
newline|'\n'
DECL|variable|_lastResolvTime
name|'_lastResolvTime'
op|'='
name|'None'
newline|'\n'
DECL|variable|_resolvReadInterval
name|'_resolvReadInterval'
op|'='
number|'60'
newline|'\n'
nl|'\n'
DECL|member|_getProtocol
name|'def'
name|'_getProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'getWarningMethod'
op|'('
op|')'
op|'('
nl|'\n'
string|'"Resolver.protocol is deprecated; use Resolver.queryUDP instead."'
op|','
nl|'\n'
name|'PendingDeprecationWarning'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'dns'
op|'.'
name|'DNSDatagramProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'protocol'
newline|'\n'
DECL|variable|protocol
dedent|''
name|'protocol'
op|'='
name|'property'
op|'('
name|'_getProtocol'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'resolv'
op|'='
name|'None'
op|','
name|'servers'
op|'='
name|'None'
op|','
name|'timeout'
op|'='
op|'('
number|'1'
op|','
number|'3'
op|','
number|'11'
op|','
number|'45'
op|')'
op|','
name|'reactor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Construct a resolver which will query domain name servers listed in\n        the C{resolv.conf(5)}-format file given by C{resolv} as well as\n        those in the given C{servers} list.  Servers are queried in a\n        round-robin fashion.  If given, C{resolv} is periodically checked\n        for modification and re-parsed if it is noticed to have changed.\n\n        @type servers: C{list} of C{(str, int)} or C{None}\n        @param servers: If not None, interpreted as a list of (host, port)\n            pairs specifying addresses of domain name servers to attempt to use\n            for this lookup.  Host addresses should be in IPv4 dotted-quad\n            form.  If specified, overrides C{resolv}.\n\n        @type resolv: C{str}\n        @param resolv: Filename to read and parse as a resolver(5)\n            configuration file.\n\n        @type timeout: Sequence of C{int}\n        @param timeout: Default number of seconds after which to reissue the\n            query.  When the last timeout expires, the query is considered\n            failed.\n\n        @param reactor: A provider of L{IReactorTime}, L{IReactorUDP}, and\n            L{IReactorTCP} which will be used to establish connections, listen\n            for DNS datagrams, and enforce timeouts.  If not provided, the\n            global reactor will be used.\n\n        @raise ValueError: Raised if no nameserver addresses can be found.\n        """'
newline|'\n'
name|'common'
op|'.'
name|'ResolverBase'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'reactor'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_reactor'
op|'='
name|'reactor'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'timeout'
op|'='
name|'timeout'
newline|'\n'
nl|'\n'
name|'if'
name|'servers'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'servers'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'servers'
op|'='
name|'servers'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'resolv'
op|'='
name|'resolv'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'len'
op|'('
name|'self'
op|'.'
name|'servers'
op|')'
name|'and'
name|'not'
name|'resolv'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|'"No nameservers specified"'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'factory'
op|'='
name|'DNSClientFactory'
op|'('
name|'self'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'noisy'
op|'='
number|'0'
comment|'# Be quiet by default'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'connections'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'pending'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_waiting'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'maybeParseConfig'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'d'
op|'['
string|"'connections'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'['
string|"'_parseCall'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__setstate__
dedent|''
name|'def'
name|'__setstate__'
op|'('
name|'self'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'update'
op|'('
name|'state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'maybeParseConfig'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|maybeParseConfig
dedent|''
name|'def'
name|'maybeParseConfig'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'resolv'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|"# Don't try to parse it, don't set up a call loop"
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'resolvConf'
op|'='
name|'file'
op|'('
name|'self'
op|'.'
name|'resolv'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
comment|'# Missing resolv.conf is treated the same as an empty resolv.conf'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'parseConfig'
op|'('
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'mtime'
op|'='
name|'os'
op|'.'
name|'fstat'
op|'('
name|'resolvConf'
op|'.'
name|'fileno'
op|'('
op|')'
op|')'
op|'.'
name|'st_mtime'
newline|'\n'
name|'if'
name|'mtime'
op|'!='
name|'self'
op|'.'
name|'_lastResolvTime'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'%s changed, reparsing'"
op|'%'
op|'('
name|'self'
op|'.'
name|'resolv'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_lastResolvTime'
op|'='
name|'mtime'
newline|'\n'
name|'self'
op|'.'
name|'parseConfig'
op|'('
name|'resolvConf'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check again in a little while'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_parseCall'
op|'='
name|'self'
op|'.'
name|'_reactor'
op|'.'
name|'callLater'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_resolvReadInterval'
op|','
name|'self'
op|'.'
name|'maybeParseConfig'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|parseConfig
dedent|''
name|'def'
name|'parseConfig'
op|'('
name|'self'
op|','
name|'resolvConf'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'servers'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'L'
name|'in'
name|'resolvConf'
op|':'
newline|'\n'
indent|'            '
name|'L'
op|'='
name|'L'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'L'
op|'.'
name|'startswith'
op|'('
string|"'nameserver'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'resolver'
op|'='
op|'('
name|'L'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|','
name|'dns'
op|'.'
name|'PORT'
op|')'
newline|'\n'
name|'servers'
op|'.'
name|'append'
op|'('
name|'resolver'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Resolver added %r to server list"'
op|'%'
op|'('
name|'resolver'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'L'
op|'.'
name|'startswith'
op|'('
string|"'domain'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'domain'
op|'='
name|'L'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'domain'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'search'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'elif'
name|'L'
op|'.'
name|'startswith'
op|'('
string|"'search'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'search'
op|'='
name|'L'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'search'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'domain'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'servers'
op|':'
newline|'\n'
indent|'            '
name|'servers'
op|'.'
name|'append'
op|'('
op|'('
string|"'127.0.0.1'"
op|','
name|'dns'
op|'.'
name|'PORT'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'dynServers'
op|'='
name|'servers'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|pickServer
dedent|''
name|'def'
name|'pickServer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the address of a nameserver.\n\n        TODO: Weight servers for response time so faster ones can be\n        preferred.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'servers'
name|'and'
name|'not'
name|'self'
op|'.'
name|'dynServers'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'serverL'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'servers'
op|')'
newline|'\n'
name|'dynL'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'dynServers'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'index'
op|'+='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'index'
op|'%='
op|'('
name|'serverL'
op|'+'
name|'dynL'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'index'
op|'<'
name|'serverL'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'servers'
op|'['
name|'self'
op|'.'
name|'index'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'dynServers'
op|'['
name|'self'
op|'.'
name|'index'
op|'-'
name|'serverL'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_connectedProtocol
dedent|''
dedent|''
name|'def'
name|'_connectedProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a new L{DNSDatagramProtocol} bound to a randomly selected port\n        number.\n        """'
newline|'\n'
name|'if'
string|"'protocol'"
name|'in'
name|'self'
op|'.'
name|'__dict__'
op|':'
newline|'\n'
comment|'# Some code previously asked for or set the deprecated `protocol`'
nl|'\n'
comment|'# attribute, so it probably expects that object to be used for'
nl|'\n'
comment|'# queries.  Give it back and skip the super awesome source port'
nl|'\n'
comment|'# randomization logic.  This is actually a really good reason to'
nl|'\n'
comment|'# remove this deprecated backward compatibility as soon as'
nl|'\n'
comment|'# possible. -exarkun'
nl|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'protocol'
newline|'\n'
dedent|''
name|'proto'
op|'='
name|'dns'
op|'.'
name|'DNSDatagramProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_reactor'
op|'.'
name|'listenUDP'
op|'('
name|'dns'
op|'.'
name|'randomSource'
op|'('
op|')'
op|','
name|'proto'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'error'
op|'.'
name|'CannotListenError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'proto'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
dedent|''
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connections'
op|'.'
name|'append'
op|'('
name|'protocol'
op|')'
newline|'\n'
name|'for'
op|'('
name|'d'
op|','
name|'q'
op|','
name|'t'
op|')'
name|'in'
name|'self'
op|'.'
name|'pending'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'queryTCP'
op|'('
name|'q'
op|','
name|'t'
op|')'
op|'.'
name|'chainDeferred'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'pending'
op|'['
op|':'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|messageReceived
dedent|''
name|'def'
name|'messageReceived'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'protocol'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Unexpected message (%d) received from %r"'
op|'%'
op|'('
name|'message'
op|'.'
name|'id'
op|','
name|'address'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_query
dedent|''
name|'def'
name|'_query'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a new L{DNSDatagramProtocol} instance from L{_connectedProtocol},\n        issue a query to it using C{*args}, and arrange for it to be\n        disconnected from its transport after the query completes.\n\n        @param *args: Positional arguments to be passed to\n            L{DNSDatagramProtocol.query}.\n\n        @return: A L{Deferred} which will be called back with the result of the\n            query.\n        """'
newline|'\n'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'_connectedProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'protocol'
op|'.'
name|'query'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
DECL|function|cbQueried
name|'def'
name|'cbQueried'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'cbQueried'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|queryUDP
dedent|''
name|'def'
name|'queryUDP'
op|'('
name|'self'
op|','
name|'queries'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a number of DNS queries via UDP.\n\n        @type queries: A C{list} of C{dns.Query} instances\n        @param queries: The queries to make.\n\n        @type timeout: Sequence of C{int}\n        @param timeout: Number of seconds after which to reissue the query.\n        When the last timeout expires, the query is considered failed.\n\n        @rtype: C{Deferred}\n        @raise C{twisted.internet.defer.TimeoutError}: When the query times\n        out.\n        """'
newline|'\n'
name|'if'
name|'timeout'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'timeout'
op|'='
name|'self'
op|'.'
name|'timeout'
newline|'\n'
nl|'\n'
dedent|''
name|'addresses'
op|'='
name|'self'
op|'.'
name|'servers'
op|'+'
name|'list'
op|'('
name|'self'
op|'.'
name|'dynServers'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'addresses'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'IOError'
op|'('
string|'"No domain name servers available"'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure we go through servers in the list in the order they were'
nl|'\n'
comment|'# specified.'
nl|'\n'
dedent|''
name|'addresses'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'used'
op|'='
name|'addresses'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_query'
op|'('
name|'used'
op|','
name|'queries'
op|','
name|'timeout'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_reissue'
op|','
name|'addresses'
op|','
op|'['
name|'used'
op|']'
op|','
name|'queries'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_reissue
dedent|''
name|'def'
name|'_reissue'
op|'('
name|'self'
op|','
name|'reason'
op|','
name|'addressesLeft'
op|','
name|'addressesUsed'
op|','
name|'query'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reason'
op|'.'
name|'trap'
op|'('
name|'dns'
op|'.'
name|'DNSQueryTimeoutError'
op|')'
newline|'\n'
nl|'\n'
comment|'# If there are no servers left to be tried, adjust the timeout'
nl|'\n'
comment|'# to the next longest timeout period and move all the'
nl|'\n'
comment|'# "used" addresses back to the list of addresses to try.'
nl|'\n'
name|'if'
name|'not'
name|'addressesLeft'
op|':'
newline|'\n'
indent|'            '
name|'addressesLeft'
op|'='
name|'addressesUsed'
newline|'\n'
name|'addressesLeft'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
name|'addressesUsed'
op|'='
op|'['
op|']'
newline|'\n'
name|'timeout'
op|'='
name|'timeout'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
comment|'# If all timeout values have been used this query has failed.  Tell the'
nl|'\n'
comment|"# protocol we're giving up on it and return a terminal timeout failure"
nl|'\n'
comment|'# to our caller.'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'timeout'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'defer'
op|'.'
name|'TimeoutError'
op|'('
name|'query'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get an address to try.  Take it out of the list of addresses'
nl|'\n'
comment|'# to try and put it ino the list of already tried addresses.'
nl|'\n'
dedent|''
name|'address'
op|'='
name|'addressesLeft'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'addressesUsed'
op|'.'
name|'append'
op|'('
name|'address'
op|')'
newline|'\n'
nl|'\n'
comment|'# Issue a query to a server.  Use the current timeout.  Add this'
nl|'\n'
comment|'# function as a timeout errback in case another retry is required.'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_query'
op|'('
name|'address'
op|','
name|'query'
op|','
name|'timeout'
op|'['
number|'0'
op|']'
op|','
name|'reason'
op|'.'
name|'value'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_reissue'
op|','
name|'addressesLeft'
op|','
name|'addressesUsed'
op|','
name|'query'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|queryTCP
dedent|''
name|'def'
name|'queryTCP'
op|'('
name|'self'
op|','
name|'queries'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a number of DNS queries via TCP.\n\n        @type queries: Any non-zero number of C{dns.Query} instances\n        @param queries: The queries to make.\n\n        @type timeout: C{int}\n        @param timeout: The number of seconds after which to fail.\n\n        @rtype: C{Deferred}\n        """'
newline|'\n'
name|'if'
name|'not'
name|'len'
op|'('
name|'self'
op|'.'
name|'connections'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'self'
op|'.'
name|'pickServer'
op|'('
op|')'
newline|'\n'
name|'if'
name|'address'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'IOError'
op|'('
string|'"No domain name servers available"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'host'
op|','
name|'port'
op|'='
name|'address'
newline|'\n'
name|'self'
op|'.'
name|'_reactor'
op|'.'
name|'connectTCP'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'self'
op|'.'
name|'factory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pending'
op|'.'
name|'append'
op|'('
op|'('
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
op|','
name|'queries'
op|','
name|'timeout'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'pending'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'connections'
op|'['
number|'0'
op|']'
op|'.'
name|'query'
op|'('
name|'queries'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|filterAnswers
dedent|''
dedent|''
name|'def'
name|'filterAnswers'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Extract results from the given message.\n\n        If the message was truncated, re-attempt the query over TCP and return\n        a Deferred which will fire with the results of that query.\n\n        If the message\'s result code is not L{dns.OK}, return a Failure\n        indicating the type of error which occurred.\n\n        Otherwise, return a three-tuple of lists containing the results from\n        the answers section, the authority section, and the additional section.\n        """'
newline|'\n'
name|'if'
name|'message'
op|'.'
name|'trunc'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'queryTCP'
op|'('
name|'message'
op|'.'
name|'queries'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'filterAnswers'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'message'
op|'.'
name|'rCode'
op|'!='
name|'dns'
op|'.'
name|'OK'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'self'
op|'.'
name|'exceptionForCode'
op|'('
name|'message'
op|'.'
name|'rCode'
op|')'
op|'('
name|'message'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'message'
op|'.'
name|'answers'
op|','
name|'message'
op|'.'
name|'authority'
op|','
name|'message'
op|'.'
name|'additional'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_lookup
dedent|''
name|'def'
name|'_lookup'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'cls'
op|','
name|'type'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build a L{dns.Query} for the given parameters and dispatch it via UDP.\n\n        If this query is already outstanding, it will not be re-issued.\n        Instead, when the outstanding query receives a response, that response\n        will be re-used for this query as well.\n\n        @type name: C{str}\n        @type type: C{int}\n        @type cls: C{int}\n\n        @return: A L{Deferred} which fires with a three-tuple giving the\n            answer, authority, and additional sections of the response or with\n            a L{Failure} if the response code is anything other than C{dns.OK}.\n        """'
newline|'\n'
name|'key'
op|'='
op|'('
name|'name'
op|','
name|'type'
op|','
name|'cls'
op|')'
newline|'\n'
name|'waiting'
op|'='
name|'self'
op|'.'
name|'_waiting'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
newline|'\n'
name|'if'
name|'waiting'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_waiting'
op|'['
name|'key'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'queryUDP'
op|'('
op|'['
name|'dns'
op|'.'
name|'Query'
op|'('
name|'name'
op|','
name|'type'
op|','
name|'cls'
op|')'
op|']'
op|','
name|'timeout'
op|')'
newline|'\n'
DECL|function|cbResult
name|'def'
name|'cbResult'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'d'
name|'in'
name|'self'
op|'.'
name|'_waiting'
op|'.'
name|'pop'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'d'
op|'.'
name|'callback'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'filterAnswers'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'cbResult'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'waiting'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
comment|"# This one doesn't ever belong on UDP"
nl|'\n'
DECL|member|lookupZone
dedent|''
name|'def'
name|'lookupZone'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Perform an AXFR request. This is quite different from usual\n        DNS requests. See http://cr.yp.to/djbdns/axfr-notes.html for\n        more information.\n        """'
newline|'\n'
name|'address'
op|'='
name|'self'
op|'.'
name|'pickServer'
op|'('
op|')'
newline|'\n'
name|'if'
name|'address'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'IOError'
op|'('
string|"'No domain name servers available'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'host'
op|','
name|'port'
op|'='
name|'address'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'controller'
op|'='
name|'AXFRController'
op|'('
name|'name'
op|','
name|'d'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'DNSClientFactory'
op|'('
name|'controller'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'noisy'
op|'='
name|'False'
comment|'#stfu'
newline|'\n'
nl|'\n'
name|'connector'
op|'='
name|'self'
op|'.'
name|'_reactor'
op|'.'
name|'connectTCP'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|')'
newline|'\n'
name|'controller'
op|'.'
name|'timeoutCall'
op|'='
name|'self'
op|'.'
name|'_reactor'
op|'.'
name|'callLater'
op|'('
nl|'\n'
name|'timeout'
name|'or'
number|'10'
op|','
name|'self'
op|'.'
name|'_timeoutZone'
op|','
name|'d'
op|','
name|'controller'
op|','
nl|'\n'
name|'connector'
op|','
name|'timeout'
name|'or'
number|'10'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbLookupZone'
op|','
name|'connector'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_timeoutZone
dedent|''
name|'def'
name|'_timeoutZone'
op|'('
name|'self'
op|','
name|'d'
op|','
name|'controller'
op|','
name|'connector'
op|','
name|'seconds'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'connector'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'controller'
op|'.'
name|'timeoutCall'
op|'='
name|'None'
newline|'\n'
name|'controller'
op|'.'
name|'deferred'
op|'='
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'errback'
op|'('
name|'error'
op|'.'
name|'TimeoutError'
op|'('
string|'"Zone lookup timed out after %d seconds"'
op|'%'
op|'('
name|'seconds'
op|','
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbLookupZone
dedent|''
name|'def'
name|'_cbLookupZone'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'connector'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'return'
op|'('
name|'result'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AXFRController
dedent|''
dedent|''
name|'class'
name|'AXFRController'
op|':'
newline|'\n'
DECL|variable|timeoutCall
indent|'    '
name|'timeoutCall'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'deferred'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'deferred'
newline|'\n'
name|'self'
op|'.'
name|'soa'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'records'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
comment|'# dig saids recursion-desired to 0, so I will too'
nl|'\n'
indent|'        '
name|'message'
op|'='
name|'dns'
op|'.'
name|'Message'
op|'('
name|'protocol'
op|'.'
name|'pickID'
op|'('
op|')'
op|','
name|'recDes'
op|'='
number|'0'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'queries'
op|'='
op|'['
name|'dns'
op|'.'
name|'Query'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'dns'
op|'.'
name|'AXFR'
op|','
name|'dns'
op|'.'
name|'IN'
op|')'
op|']'
newline|'\n'
name|'protocol'
op|'.'
name|'writeMessage'
op|'('
name|'message'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
comment|'# XXX Do something here - see #3428'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|messageReceived
dedent|''
name|'def'
name|'messageReceived'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
comment|'# Caveat: We have to handle two cases: All records are in 1'
nl|'\n'
comment|'# message, or all records are in N messages.'
nl|'\n'
nl|'\n'
comment|'# According to http://cr.yp.to/djbdns/axfr-notes.html,'
nl|'\n'
comment|"# 'authority' and 'additional' are always empty, and only"
nl|'\n'
comment|"# 'answers' is present."
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'records'
op|'.'
name|'extend'
op|'('
name|'message'
op|'.'
name|'answers'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'records'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'soa'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'records'
op|'['
number|'0'
op|']'
op|'.'
name|'type'
op|'=='
name|'dns'
op|'.'
name|'SOA'
op|':'
newline|'\n'
comment|'#print "first SOA!"'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'soa'
op|'='
name|'self'
op|'.'
name|'records'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'records'
op|')'
op|'>'
number|'1'
name|'and'
name|'self'
op|'.'
name|'records'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'type'
op|'=='
name|'dns'
op|'.'
name|'SOA'
op|':'
newline|'\n'
comment|'#print "It\'s the second SOA! We\'re done."'
nl|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'timeoutCall'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'timeoutCall'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'timeoutCall'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'deferred'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'self'
op|'.'
name|'records'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'base'
name|'import'
name|'ThreadedResolver'
name|'as'
name|'_ThreadedResolverImpl'
newline|'\n'
nl|'\n'
DECL|class|ThreadedResolver
name|'class'
name|'ThreadedResolver'
op|'('
name|'_ThreadedResolverImpl'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'reactor'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
dedent|''
name|'_ThreadedResolverImpl'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"twisted.names.client.ThreadedResolver is deprecated since "'
nl|'\n'
string|'"Twisted 9.0, use twisted.internet.base.ThreadedResolver "'
nl|'\n'
string|'"instead."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|class|DNSClientFactory
dedent|''
dedent|''
name|'class'
name|'DNSClientFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'controller'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'controller'
op|'='
name|'controller'
newline|'\n'
name|'self'
op|'.'
name|'timeout'
op|'='
name|'timeout'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|clientConnectionLost
dedent|''
name|'def'
name|'clientConnectionLost'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'dns'
op|'.'
name|'DNSProtocol'
op|'('
name|'self'
op|'.'
name|'controller'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|createResolver
dedent|''
dedent|''
name|'def'
name|'createResolver'
op|'('
name|'servers'
op|'='
name|'None'
op|','
name|'resolvconf'
op|'='
name|'None'
op|','
name|'hosts'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Create and return a Resolver.\n\n    @type servers: C{list} of C{(str, int)} or C{None}\n    @param servers: If not C{None}, interpreted as a list of addresses of\n    domain name servers to attempt to use.  Addresses should be in dotted-quad\n    form.\n\n    @type resolvconf: C{str} or C{None}\n    @param resolvconf: If not C{None}, on posix systems will be interpreted as\n    an alternate resolv.conf to use. Will do nothing on windows systems. If\n    C{None}, /etc/resolv.conf will be used.\n\n    @type hosts: C{str} or C{None}\n    @param hosts: If not C{None}, an alternate hosts file to use. If C{None}\n    on posix systems, /etc/hosts will be used. On windows, C:\\windows\\hosts\n    will be used.\n\n    @rtype: C{IResolver}\n    """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
name|'import'
name|'resolve'
op|','
name|'cache'
op|','
name|'root'
op|','
name|'hosts'
name|'as'
name|'hostsModule'
newline|'\n'
name|'if'
name|'platform'
op|'.'
name|'getType'
op|'('
op|')'
op|'=='
string|"'posix'"
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'resolvconf'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'resolvconf'
op|'='
string|"'/etc/resolv.conf'"
newline|'\n'
dedent|''
name|'if'
name|'hosts'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'hosts'
op|'='
string|"'/etc/hosts'"
newline|'\n'
dedent|''
name|'theResolver'
op|'='
name|'Resolver'
op|'('
name|'resolvconf'
op|','
name|'servers'
op|')'
newline|'\n'
name|'hostResolver'
op|'='
name|'hostsModule'
op|'.'
name|'Resolver'
op|'('
name|'hosts'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hosts'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'hosts'
op|'='
string|"r'c:\\windows\\hosts'"
newline|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'bootstrap'
op|'='
name|'_ThreadedResolverImpl'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'hostResolver'
op|'='
name|'hostsModule'
op|'.'
name|'Resolver'
op|'('
name|'hosts'
op|')'
newline|'\n'
name|'theResolver'
op|'='
name|'root'
op|'.'
name|'bootstrap'
op|'('
name|'bootstrap'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'L'
op|'='
op|'['
name|'hostResolver'
op|','
name|'cache'
op|'.'
name|'CacheResolver'
op|'('
op|')'
op|','
name|'theResolver'
op|']'
newline|'\n'
name|'return'
name|'resolve'
op|'.'
name|'ResolverChain'
op|'('
name|'L'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|theResolver
dedent|''
name|'theResolver'
op|'='
name|'None'
newline|'\n'
DECL|function|getResolver
name|'def'
name|'getResolver'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get a Resolver instance.\n\n    Create twisted.names.client.theResolver if it is C{None}, and then return\n    that value.\n\n    @rtype: C{IResolver}\n    """'
newline|'\n'
name|'global'
name|'theResolver'
newline|'\n'
name|'if'
name|'theResolver'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'theResolver'
op|'='
name|'createResolver'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'theResolver'
op|'='
name|'createResolver'
op|'('
name|'servers'
op|'='
op|'['
op|'('
string|"'127.0.0.1'"
op|','
number|'53'
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'theResolver'
newline|'\n'
nl|'\n'
DECL|function|getHostByName
dedent|''
name|'def'
name|'getHostByName'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|','
name|'effort'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Resolve a name to a valid ipv4 or ipv6 address.\n\n    Will errback with C{DNSQueryTimeoutError} on a timeout, C{DomainError} or\n    C{AuthoritativeDomainError} (or subclasses) on other errors.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @type effort: C{int}\n    @param effort: How many times CNAME and NS records to follow while\n    resolving this name.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'getHostByName'
op|'('
name|'name'
op|','
name|'timeout'
op|','
name|'effort'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupAddress
dedent|''
name|'def'
name|'lookupAddress'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform an A record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupAddress'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupIPV6Address
dedent|''
name|'def'
name|'lookupIPV6Address'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform an AAAA record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupIPV6Address'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupAddress6
dedent|''
name|'def'
name|'lookupAddress6'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform an A6 record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupAddress6'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupMailExchange
dedent|''
name|'def'
name|'lookupMailExchange'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform an MX record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupMailExchange'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupNameservers
dedent|''
name|'def'
name|'lookupNameservers'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform an NS record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupNameservers'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupCanonicalName
dedent|''
name|'def'
name|'lookupCanonicalName'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform a CNAME record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupCanonicalName'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupMailBox
dedent|''
name|'def'
name|'lookupMailBox'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform an MB record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupMailBox'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupMailGroup
dedent|''
name|'def'
name|'lookupMailGroup'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform an MG record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupMailGroup'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupMailRename
dedent|''
name|'def'
name|'lookupMailRename'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform an MR record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupMailRename'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupPointer
dedent|''
name|'def'
name|'lookupPointer'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform a PTR record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupPointer'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupAuthority
dedent|''
name|'def'
name|'lookupAuthority'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform an SOA record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupAuthority'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupNull
dedent|''
name|'def'
name|'lookupNull'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform a NULL record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupNull'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupWellKnownServices
dedent|''
name|'def'
name|'lookupWellKnownServices'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform a WKS record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupWellKnownServices'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupService
dedent|''
name|'def'
name|'lookupService'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform an SRV record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupService'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupHostInfo
dedent|''
name|'def'
name|'lookupHostInfo'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform a HINFO record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupHostInfo'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupMailboxInfo
dedent|''
name|'def'
name|'lookupMailboxInfo'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform an MINFO record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupMailboxInfo'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupText
dedent|''
name|'def'
name|'lookupText'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform a TXT record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupText'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupResponsibility
dedent|''
name|'def'
name|'lookupResponsibility'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform an RP record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupResponsibility'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupAFSDatabase
dedent|''
name|'def'
name|'lookupAFSDatabase'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform an AFSDB record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupAFSDatabase'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupZone
dedent|''
name|'def'
name|'lookupZone'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform an AXFR record lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: C{int}\n    @param timeout: When this timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
comment|'# XXX: timeout here is not a list of ints, it is a single int.'
nl|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupZone'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupAllRecords
dedent|''
name|'def'
name|'lookupAllRecords'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    ALL_RECORD lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n    When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupAllRecords'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|lookupNamingAuthorityPointer
dedent|''
name|'def'
name|'lookupNamingAuthorityPointer'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    NAPTR lookup.\n\n    @type name: C{str}\n    @param name: DNS name to resolve.\n\n    @type timeout: Sequence of C{int}\n    @param timeout: Number of seconds after which to reissue the query.\n        When the last timeout expires, the query is considered failed.\n\n    @rtype: C{Deferred}\n    """'
newline|'\n'
name|'return'
name|'getResolver'
op|'('
op|')'
op|'.'
name|'lookupNamingAuthorityPointer'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# test-case-name: twisted.names.test.test_dns'
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for twisted.names.dns.\n"""'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'StringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
dedent|''
name|'import'
name|'struct'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'failure'
name|'import'
name|'Failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'address'
op|','
name|'task'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'CannotListenError'
op|','
name|'ConnectionDone'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
name|'import'
name|'dns'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
name|'import'
name|'proto_helpers'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|RoundtripDNSTestCase
name|'class'
name|'RoundtripDNSTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Encoding and then decoding various objects."""'
newline|'\n'
nl|'\n'
DECL|variable|names
name|'names'
op|'='
op|'['
string|'"example.org"'
op|','
string|'"go-away.fish.tv"'
op|','
string|'"23strikesback.net"'
op|']'
newline|'\n'
nl|'\n'
DECL|member|testName
name|'def'
name|'testName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'names'
op|':'
newline|'\n'
comment|'# encode the name'
nl|'\n'
indent|'            '
name|'f'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'dns'
op|'.'
name|'Name'
op|'('
name|'n'
op|')'
op|'.'
name|'encode'
op|'('
name|'f'
op|')'
newline|'\n'
nl|'\n'
comment|'# decode the name'
nl|'\n'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'result'
op|'='
name|'dns'
op|'.'
name|'Name'
op|'('
op|')'
newline|'\n'
name|'result'
op|'.'
name|'decode'
op|'('
name|'f'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'.'
name|'name'
op|','
name|'n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testQuery
dedent|''
dedent|''
name|'def'
name|'testQuery'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'names'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'dnstype'
name|'in'
name|'range'
op|'('
number|'1'
op|','
number|'17'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'dnscls'
name|'in'
name|'range'
op|'('
number|'1'
op|','
number|'5'
op|')'
op|':'
newline|'\n'
comment|'# encode the query'
nl|'\n'
indent|'                    '
name|'f'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'dns'
op|'.'
name|'Query'
op|'('
name|'n'
op|','
name|'dnstype'
op|','
name|'dnscls'
op|')'
op|'.'
name|'encode'
op|'('
name|'f'
op|')'
newline|'\n'
nl|'\n'
comment|'# decode the result'
nl|'\n'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'result'
op|'='
name|'dns'
op|'.'
name|'Query'
op|'('
op|')'
newline|'\n'
name|'result'
op|'.'
name|'decode'
op|'('
name|'f'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'.'
name|'name'
op|'.'
name|'name'
op|','
name|'n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'.'
name|'type'
op|','
name|'dnstype'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'.'
name|'cls'
op|','
name|'dnscls'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRR
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'testRR'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# encode the RR'
nl|'\n'
indent|'        '
name|'f'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|'"test.org"'
op|','
number|'3'
op|','
number|'4'
op|','
number|'17'
op|')'
op|'.'
name|'encode'
op|'('
name|'f'
op|')'
newline|'\n'
nl|'\n'
comment|'# decode the result'
nl|'\n'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'result'
op|'='
name|'dns'
op|'.'
name|'RRHeader'
op|'('
op|')'
newline|'\n'
name|'result'
op|'.'
name|'decode'
op|'('
name|'f'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'result'
op|'.'
name|'name'
op|')'
op|','
string|'"test.org"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'.'
name|'type'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'.'
name|'cls'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'.'
name|'ttl'
op|','
number|'17'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testResources
dedent|''
name|'def'
name|'testResources'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'names'
op|'='
op|'('
nl|'\n'
string|'"this.are.test.name"'
op|','
nl|'\n'
string|'"will.compress.will.this.will.name.will.hopefully"'
op|','
nl|'\n'
string|'"test.CASE.preSErVatIOn.YeAH"'
op|','
nl|'\n'
string|'"a.s.h.o.r.t.c.a.s.e.t.o.t.e.s.t"'
op|','
nl|'\n'
string|'"singleton"'
nl|'\n'
op|')'
newline|'\n'
name|'for'
name|'s'
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'dns'
op|'.'
name|'SimpleRecord'
op|'('
name|'s'
op|')'
op|'.'
name|'encode'
op|'('
name|'f'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'result'
op|'='
name|'dns'
op|'.'
name|'SimpleRecord'
op|'('
op|')'
newline|'\n'
name|'result'
op|'.'
name|'decode'
op|'('
name|'f'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'result'
op|'.'
name|'name'
op|')'
op|','
name|'s'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hashable
dedent|''
dedent|''
name|'def'
name|'test_hashable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Instances of all record types are hashable.\n        """'
newline|'\n'
name|'records'
op|'='
op|'['
nl|'\n'
name|'dns'
op|'.'
name|'Record_NS'
op|','
name|'dns'
op|'.'
name|'Record_MD'
op|','
name|'dns'
op|'.'
name|'Record_MF'
op|','
name|'dns'
op|'.'
name|'Record_CNAME'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_MB'
op|','
name|'dns'
op|'.'
name|'Record_MG'
op|','
name|'dns'
op|'.'
name|'Record_MR'
op|','
name|'dns'
op|'.'
name|'Record_PTR'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_DNAME'
op|','
name|'dns'
op|'.'
name|'Record_A'
op|','
name|'dns'
op|'.'
name|'Record_SOA'
op|','
name|'dns'
op|'.'
name|'Record_NULL'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_WKS'
op|','
name|'dns'
op|'.'
name|'Record_SRV'
op|','
name|'dns'
op|'.'
name|'Record_AFSDB'
op|','
name|'dns'
op|'.'
name|'Record_RP'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_HINFO'
op|','
name|'dns'
op|'.'
name|'Record_MINFO'
op|','
name|'dns'
op|'.'
name|'Record_MX'
op|','
name|'dns'
op|'.'
name|'Record_TXT'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_AAAA'
op|','
name|'dns'
op|'.'
name|'Record_A6'
op|','
name|'dns'
op|'.'
name|'Record_NAPTR'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'k'
name|'in'
name|'records'
op|':'
newline|'\n'
indent|'            '
name|'k1'
op|','
name|'k2'
op|'='
name|'k'
op|'('
op|')'
op|','
name|'k'
op|'('
op|')'
newline|'\n'
name|'hk1'
op|'='
name|'hash'
op|'('
name|'k1'
op|')'
newline|'\n'
name|'hk2'
op|'='
name|'hash'
op|'('
name|'k2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'hk1'
op|','
name|'hk2'
op|','
string|'"%s != %s (for %s)"'
op|'%'
op|'('
name|'hk1'
op|','
name|'hk2'
op|','
name|'k'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_Charstr
dedent|''
dedent|''
name|'def'
name|'test_Charstr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test L{dns.Charstr} encode and decode.\n        """'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'names'
op|':'
newline|'\n'
comment|'# encode the name'
nl|'\n'
indent|'            '
name|'f'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'dns'
op|'.'
name|'Charstr'
op|'('
name|'n'
op|')'
op|'.'
name|'encode'
op|'('
name|'f'
op|')'
newline|'\n'
nl|'\n'
comment|'# decode the name'
nl|'\n'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'result'
op|'='
name|'dns'
op|'.'
name|'Charstr'
op|'('
op|')'
newline|'\n'
name|'result'
op|'.'
name|'decode'
op|'('
name|'f'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'.'
name|'string'
op|','
name|'n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_NAPTR
dedent|''
dedent|''
name|'def'
name|'test_NAPTR'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test L{dns.Record_NAPTR} encode and decode.\n        """'
newline|'\n'
name|'naptrs'
op|'='
op|'['
op|'('
number|'100'
op|','
number|'10'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
nl|'\n'
string|'"!^.*$!sip:information@domain.tld!"'
op|','
string|'""'
op|')'
op|','
nl|'\n'
op|'('
number|'100'
op|','
number|'50'
op|','
string|'"s"'
op|','
string|'"http+I2L+I2C+I2R"'
op|','
string|'""'
op|','
nl|'\n'
string|'"_http._tcp.gatech.edu"'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'order'
op|','
name|'preference'
op|','
name|'flags'
op|','
name|'service'
op|','
name|'regexp'
op|','
name|'replacement'
op|')'
name|'in'
name|'naptrs'
op|':'
newline|'\n'
indent|'            '
name|'rin'
op|'='
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
name|'order'
op|','
name|'preference'
op|','
name|'flags'
op|','
name|'service'
op|','
name|'regexp'
op|','
nl|'\n'
name|'replacement'
op|')'
newline|'\n'
name|'e'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'rin'
op|'.'
name|'encode'
op|'('
name|'e'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'rout'
op|'='
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
op|')'
newline|'\n'
name|'rout'
op|'.'
name|'decode'
op|'('
name|'e'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'rin'
op|'.'
name|'order'
op|','
name|'rout'
op|'.'
name|'order'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'rin'
op|'.'
name|'preference'
op|','
name|'rout'
op|'.'
name|'preference'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'rin'
op|'.'
name|'flags'
op|','
name|'rout'
op|'.'
name|'flags'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'rin'
op|'.'
name|'service'
op|','
name|'rout'
op|'.'
name|'service'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'rin'
op|'.'
name|'regexp'
op|','
name|'rout'
op|'.'
name|'regexp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'rin'
op|'.'
name|'replacement'
op|'.'
name|'name'
op|','
name|'rout'
op|'.'
name|'replacement'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'rin'
op|'.'
name|'ttl'
op|','
name|'rout'
op|'.'
name|'ttl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MessageTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'MessageTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testEmptyMessage
indent|'    '
name|'def'
name|'testEmptyMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a message which has been truncated causes an EOFError to\n        be raised when it is parsed.\n        """'
newline|'\n'
name|'msg'
op|'='
name|'dns'
op|'.'
name|'Message'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'EOFError'
op|','
name|'msg'
op|'.'
name|'fromStr'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testEmptyQuery
dedent|''
name|'def'
name|'testEmptyQuery'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that bytes representing an empty query message can be decoded\n        as such.\n        """'
newline|'\n'
name|'msg'
op|'='
name|'dns'
op|'.'
name|'Message'
op|'('
op|')'
newline|'\n'
name|'msg'
op|'.'
name|'fromStr'
op|'('
nl|'\n'
string|"'\\x01\\x00'"
comment|'# Message ID'
nl|'\n'
string|"'\\x00'"
comment|'# answer bit, opCode nibble, auth bit, trunc bit, recursive bit'
nl|'\n'
string|"'\\x00'"
comment|'# recursion bit, empty bit, empty bit, empty bit, response code nibble'
nl|'\n'
string|"'\\x00\\x00'"
comment|'# number of queries'
nl|'\n'
string|"'\\x00\\x00'"
comment|'# number of answers'
nl|'\n'
string|"'\\x00\\x00'"
comment|'# number of authorities'
nl|'\n'
string|"'\\x00\\x00'"
comment|'# number of additionals'
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'.'
name|'id'
op|','
number|'256'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'msg'
op|'.'
name|'answer'
op|','
string|'"Message was not supposed to be an answer."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'.'
name|'opCode'
op|','
name|'dns'
op|'.'
name|'OP_QUERY'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'msg'
op|'.'
name|'auth'
op|','
string|'"Message was not supposed to be authoritative."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'msg'
op|'.'
name|'trunc'
op|','
string|'"Message was not supposed to be truncated."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'.'
name|'queries'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'.'
name|'answers'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'.'
name|'authority'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'.'
name|'additional'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testNULL
dedent|''
name|'def'
name|'testNULL'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bytes'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'chr'
op|'('
name|'i'
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'256'
op|')'
op|']'
op|')'
newline|'\n'
name|'rec'
op|'='
name|'dns'
op|'.'
name|'Record_NULL'
op|'('
name|'bytes'
op|')'
newline|'\n'
name|'rr'
op|'='
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'testname'"
op|','
name|'dns'
op|'.'
name|'NULL'
op|','
name|'payload'
op|'='
name|'rec'
op|')'
newline|'\n'
name|'msg1'
op|'='
name|'dns'
op|'.'
name|'Message'
op|'('
op|')'
newline|'\n'
name|'msg1'
op|'.'
name|'answers'
op|'.'
name|'append'
op|'('
name|'rr'
op|')'
newline|'\n'
name|'s'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'msg1'
op|'.'
name|'encode'
op|'('
name|'s'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'msg2'
op|'='
name|'dns'
op|'.'
name|'Message'
op|'('
op|')'
newline|'\n'
name|'msg2'
op|'.'
name|'decode'
op|'('
name|'s'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'msg2'
op|'.'
name|'answers'
op|'['
number|'0'
op|']'
op|'.'
name|'payload'
op|','
name|'dns'
op|'.'
name|'Record_NULL'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg2'
op|'.'
name|'answers'
op|'['
number|'0'
op|']'
op|'.'
name|'payload'
op|'.'
name|'payload'
op|','
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestController
dedent|''
dedent|''
name|'class'
name|'TestController'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Pretend to be a DNS query processor for a DNSDatagramProtocol.\n\n    @ivar messages: the list of received messages.\n    @type messages: C{list} of (msg, protocol, address)\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initialize the controller: create a list of messages.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|messageReceived
dedent|''
name|'def'
name|'messageReceived'
op|'('
name|'self'
op|','
name|'msg'
op|','
name|'proto'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Save the message so that it can be checked during the tests.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'.'
name|'append'
op|'('
op|'('
name|'msg'
op|','
name|'proto'
op|','
name|'addr'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DatagramProtocolTestCase
dedent|''
dedent|''
name|'class'
name|'DatagramProtocolTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test various aspects of L{dns.DNSDatagramProtocol}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a L{dns.DNSDatagramProtocol} with a deterministic clock.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'controller'
op|'='
name|'TestController'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'='
name|'dns'
op|'.'
name|'DNSDatagramProtocol'
op|'('
name|'self'
op|'.'
name|'controller'
op|')'
newline|'\n'
name|'transport'
op|'='
name|'proto_helpers'
op|'.'
name|'FakeDatagramTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'callLater'
op|'='
name|'self'
op|'.'
name|'clock'
op|'.'
name|'callLater'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_truncatedPacket
dedent|''
name|'def'
name|'test_truncatedPacket'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that when a short datagram is received, datagramReceived does\n        not raise an exception while processing it.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'datagramReceived'
op|'('
string|"''"
op|','
nl|'\n'
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'UDP'"
op|','
string|"'127.0.0.1'"
op|','
number|'12345'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'controller'
op|'.'
name|'messages'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_simpleQuery
dedent|''
name|'def'
name|'test_simpleQuery'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test content received after a query.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'query'
op|'('
op|'('
string|"'127.0.0.1'"
op|','
number|'21345'
op|')'
op|','
op|'['
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'liveMessages'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'m'
op|'='
name|'dns'
op|'.'
name|'Message'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'id'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'liveMessages'
op|'.'
name|'items'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'m'
op|'.'
name|'answers'
op|'='
op|'['
name|'dns'
op|'.'
name|'RRHeader'
op|'('
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
name|'address'
op|'='
string|"'1.2.3.4'"
op|')'
op|')'
op|']'
newline|'\n'
name|'called'
op|'='
name|'False'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'.'
name|'answers'
op|'['
number|'0'
op|']'
op|'.'
name|'payload'
op|'.'
name|'dottedQuad'
op|'('
op|')'
op|','
string|"'1.2.3.4'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'datagramReceived'
op|'('
name|'m'
op|'.'
name|'toStr'
op|'('
op|')'
op|','
op|'('
string|"'127.0.0.1'"
op|','
number|'21345'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_queryTimeout
dedent|''
name|'def'
name|'test_queryTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that query timeouts after some seconds.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'query'
op|'('
op|'('
string|"'127.0.0.1'"
op|','
number|'21345'
op|')'
op|','
op|'['
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'liveMessages'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'dns'
op|'.'
name|'DNSQueryTimeoutError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'liveMessages'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_writeError
dedent|''
name|'def'
name|'test_writeError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Exceptions raised by the transport\'s write method should be turned into\n        C{Failure}s passed to errbacks of the C{Deferred} returned by\n        L{DNSDatagramProtocol.query}.\n        """'
newline|'\n'
DECL|function|writeError
name|'def'
name|'writeError'
op|'('
name|'message'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"bar"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'proto'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'='
name|'writeError'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'query'
op|'('
op|'('
string|"'127.0.0.1'"
op|','
number|'21345'
op|')'
op|','
op|'['
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo'"
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'RuntimeError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_listenError
dedent|''
name|'def'
name|'test_listenError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Exception L{CannotListenError} raised by C{listenUDP} should be turned\n        into a C{Failure} passed to errback of the C{Deferred} returned by\n        L{DNSDatagramProtocol.query}.\n        """'
newline|'\n'
DECL|function|startListeningError
name|'def'
name|'startListeningError'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'CannotListenError'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'proto'
op|'.'
name|'startListening'
op|'='
name|'startListeningError'
newline|'\n'
comment|'# Clean up transport so that the protocol calls startListening again'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'transport'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'query'
op|'('
op|'('
string|"'127.0.0.1'"
op|','
number|'21345'
op|')'
op|','
op|'['
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo'"
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'CannotListenError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestTCPController
dedent|''
dedent|''
name|'class'
name|'TestTCPController'
op|'('
name|'TestController'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Pretend to be a DNS query processor for a DNSProtocol.\n\n    @ivar connections: A list of L{DNSProtocol} instances which have\n        notified this controller that they are connected and have not\n        yet notified it that their connection has been lost.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'TestController'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connections'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connections'
op|'.'
name|'append'
op|'('
name|'proto'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connections'
op|'.'
name|'remove'
op|'('
name|'proto'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DNSProtocolTestCase
dedent|''
dedent|''
name|'class'
name|'DNSProtocolTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test various aspects of L{dns.DNSProtocol}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a L{dns.DNSProtocol} with a deterministic clock.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'controller'
op|'='
name|'TestTCPController'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'='
name|'dns'
op|'.'
name|'DNSProtocol'
op|'('
name|'self'
op|'.'
name|'controller'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'callLater'
op|'='
name|'self'
op|'.'
name|'clock'
op|'.'
name|'callLater'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectionTracking
dedent|''
name|'def'
name|'test_connectionTracking'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{dns.DNSProtocol} calls its controller\'s C{connectionMade}\n        method with itself when it is connected to a transport and its\n        controller\'s C{connectionLost} method when it is disconnected.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'controller'
op|'.'
name|'connections'
op|','
op|'['
name|'self'
op|'.'
name|'proto'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'connectionLost'
op|'('
nl|'\n'
name|'Failure'
op|'('
name|'ConnectionDone'
op|'('
string|'"Fake Connection Done"'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'controller'
op|'.'
name|'connections'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_queryTimeout
dedent|''
name|'def'
name|'test_queryTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that query timeouts after some seconds.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'query'
op|'('
op|'['
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'liveMessages'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'60'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'dns'
op|'.'
name|'DNSQueryTimeoutError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'liveMessages'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_simpleQuery
dedent|''
name|'def'
name|'test_simpleQuery'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test content received after a query.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'query'
op|'('
op|'['
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'liveMessages'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'m'
op|'='
name|'dns'
op|'.'
name|'Message'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'id'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'liveMessages'
op|'.'
name|'items'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'m'
op|'.'
name|'answers'
op|'='
op|'['
name|'dns'
op|'.'
name|'RRHeader'
op|'('
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
name|'address'
op|'='
string|"'1.2.3.4'"
op|')'
op|')'
op|']'
newline|'\n'
name|'called'
op|'='
name|'False'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'.'
name|'answers'
op|'['
number|'0'
op|']'
op|'.'
name|'payload'
op|'.'
name|'dottedQuad'
op|'('
op|')'
op|','
string|"'1.2.3.4'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
name|'s'
op|'='
name|'m'
op|'.'
name|'toStr'
op|'('
op|')'
newline|'\n'
name|'s'
op|'='
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!H'"
op|','
name|'len'
op|'('
name|'s'
op|')'
op|')'
op|'+'
name|'s'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
name|'s'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_writeError
dedent|''
name|'def'
name|'test_writeError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Exceptions raised by the transport\'s write method should be turned into\n        C{Failure}s passed to errbacks of the C{Deferred} returned by\n        L{DNSProtocol.query}.\n        """'
newline|'\n'
DECL|function|writeError
name|'def'
name|'writeError'
op|'('
name|'message'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"bar"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'proto'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'='
name|'writeError'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'query'
op|'('
op|'['
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo'"
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'RuntimeError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReprTests
dedent|''
dedent|''
name|'class'
name|'ReprTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the C{__repr__} implementation of record classes.\n    """'
newline|'\n'
DECL|member|test_ns
name|'def'
name|'test_ns'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_NS} instance includes the name of the\n        nameserver and the TTL of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_NS'
op|'('
string|"'example.com'"
op|','
number|'4321'
op|')'
op|')'
op|','
nl|'\n'
string|'"<NS name=example.com ttl=4321>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_md
dedent|''
name|'def'
name|'test_md'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_MD} instance includes the name of the\n        mail destination and the TTL of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_MD'
op|'('
string|"'example.com'"
op|','
number|'4321'
op|')'
op|')'
op|','
nl|'\n'
string|'"<MD name=example.com ttl=4321>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mf
dedent|''
name|'def'
name|'test_mf'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_MF} instance includes the name of the\n        mail forwarder and the TTL of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_MF'
op|'('
string|"'example.com'"
op|','
number|'4321'
op|')'
op|')'
op|','
nl|'\n'
string|'"<MF name=example.com ttl=4321>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cname
dedent|''
name|'def'
name|'test_cname'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_CNAME} instance includes the name of the\n        mail forwarder and the TTL of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_CNAME'
op|'('
string|"'example.com'"
op|','
number|'4321'
op|')'
op|')'
op|','
nl|'\n'
string|'"<CNAME name=example.com ttl=4321>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mb
dedent|''
name|'def'
name|'test_mb'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_MB} instance includes the name of the\n        mailbox and the TTL of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_MB'
op|'('
string|"'example.com'"
op|','
number|'4321'
op|')'
op|')'
op|','
nl|'\n'
string|'"<MB name=example.com ttl=4321>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mg
dedent|''
name|'def'
name|'test_mg'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_MG} instance includes the name of the\n        mail group memeber and the TTL of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_MG'
op|'('
string|"'example.com'"
op|','
number|'4321'
op|')'
op|')'
op|','
nl|'\n'
string|'"<MG name=example.com ttl=4321>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mr
dedent|''
name|'def'
name|'test_mr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_MR} instance includes the name of the\n        mail rename domain and the TTL of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_MR'
op|'('
string|"'example.com'"
op|','
number|'4321'
op|')'
op|')'
op|','
nl|'\n'
string|'"<MR name=example.com ttl=4321>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ptr
dedent|''
name|'def'
name|'test_ptr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_PTR} instance includes the name of the\n        pointer and the TTL of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_PTR'
op|'('
string|"'example.com'"
op|','
number|'4321'
op|')'
op|')'
op|','
nl|'\n'
string|'"<PTR name=example.com ttl=4321>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_dname
dedent|''
name|'def'
name|'test_dname'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_DNAME} instance includes the name of the\n        non-terminal DNS name redirection and the TTL of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_DNAME'
op|'('
string|"'example.com'"
op|','
number|'4321'
op|')'
op|')'
op|','
nl|'\n'
string|'"<DNAME name=example.com ttl=4321>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_a
dedent|''
name|'def'
name|'test_a'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_A} instance includes the dotted-quad\n        string representation of the address it is for and the TTL of the\n        record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|','
number|'567'
op|')'
op|')'
op|','
nl|'\n'
string|"'<A address=1.2.3.4 ttl=567>'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_soa
dedent|''
name|'def'
name|'test_soa'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_SOA} instance includes all of the\n        authority fields.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
name|'mname'
op|'='
string|"'mName'"
op|','
name|'rname'
op|'='
string|"'rName'"
op|','
name|'serial'
op|'='
number|'123'
op|','
nl|'\n'
name|'refresh'
op|'='
number|'456'
op|','
name|'retry'
op|'='
number|'789'
op|','
name|'expire'
op|'='
number|'10'
op|','
nl|'\n'
name|'minimum'
op|'='
number|'11'
op|','
name|'ttl'
op|'='
number|'12'
op|')'
op|')'
op|','
nl|'\n'
string|'"<SOA mname=mName rname=rName serial=123 refresh=456 "'
nl|'\n'
string|'"retry=789 expire=10 minimum=11 ttl=12>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_null
dedent|''
name|'def'
name|'test_null'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_NULL} instance includes the repr of its\n        payload and the TTL of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_NULL'
op|'('
string|"'abcd'"
op|','
number|'123'
op|')'
op|')'
op|','
nl|'\n'
string|'"<NULL payload=\'abcd\' ttl=123>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_wks
dedent|''
name|'def'
name|'test_wks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_WKS} instance includes the dotted-quad\n        string representation of the address it is for, the IP protocol\n        number it is for, and the TTL of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_WKS'
op|'('
string|"'2.3.4.5'"
op|','
number|'7'
op|','
name|'ttl'
op|'='
number|'8'
op|')'
op|')'
op|','
nl|'\n'
string|'"<WKS address=2.3.4.5 protocol=7 ttl=8>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_aaaa
dedent|''
name|'def'
name|'test_aaaa'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_AAAA} instance includes the colon-separated\n        hex string representation of the address it is for and the TTL of the\n        record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_AAAA'
op|'('
string|"'8765::1234'"
op|','
name|'ttl'
op|'='
number|'10'
op|')'
op|')'
op|','
nl|'\n'
string|'"<AAAA address=8765::1234 ttl=10>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_a6
dedent|''
name|'def'
name|'test_a6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_A6} instance includes the colon-separated\n        hex string representation of the address it is for and the TTL of the\n        record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_A6'
op|'('
number|'0'
op|','
string|"'1234::5678'"
op|','
string|"'foo.bar'"
op|','
name|'ttl'
op|'='
number|'10'
op|')'
op|')'
op|','
nl|'\n'
string|'"<A6 suffix=1234::5678 prefix=foo.bar ttl=10>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_srv
dedent|''
name|'def'
name|'test_srv'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_SRV} instance includes the name and port of\n        the target and the priority, weight, and TTL of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
string|"'example.org'"
op|','
number|'4'
op|')'
op|')'
op|','
nl|'\n'
string|'"<SRV priority=1 weight=2 target=example.org port=3 ttl=4>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_naptr
dedent|''
name|'def'
name|'test_naptr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_NAPTR} instance includes the order,\n        preference, flags, service, regular expression, replacement, and TTL of\n        the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'5'
op|','
number|'9'
op|','
string|'"S"'
op|','
string|'"http"'
op|','
string|'"/foo/bar/i"'
op|','
string|'"baz"'
op|','
number|'3'
op|')'
op|')'
op|','
nl|'\n'
string|'"<NAPTR order=5 preference=9 flags=S service=http "'
nl|'\n'
string|'"regexp=/foo/bar/i replacement=baz ttl=3>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_afsdb
dedent|''
name|'def'
name|'test_afsdb'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_AFSDB} instance includes the subtype,\n        hostname, and TTL of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_AFSDB'
op|'('
number|'3'
op|','
string|"'example.org'"
op|','
number|'5'
op|')'
op|')'
op|','
nl|'\n'
string|'"<AFSDB subtype=3 hostname=example.org ttl=5>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_rp
dedent|''
name|'def'
name|'test_rp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_RP} instance includes the mbox, txt, and TTL\n        fields of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_RP'
op|'('
string|"'alice.example.com'"
op|','
string|"'admin.example.com'"
op|','
number|'3'
op|')'
op|')'
op|','
nl|'\n'
string|'"<RP mbox=alice.example.com txt=admin.example.com ttl=3>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_hinfo
dedent|''
name|'def'
name|'test_hinfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_HINFO} instance includes the cpu, os, and\n        TTL fields of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_HINFO'
op|'('
string|"'sparc'"
op|','
string|"'minix'"
op|','
number|'12'
op|')'
op|')'
op|','
nl|'\n'
string|'"<HINFO cpu=\'sparc\' os=\'minix\' ttl=12>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_minfo
dedent|''
name|'def'
name|'test_minfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_MINFO} instance includes the rmailbx,\n        emailbx, and TTL fields of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_MINFO'
op|'('
string|"'alice.example.com'"
op|','
string|"'bob.example.com'"
op|','
number|'15'
op|')'
op|')'
op|','
nl|'\n'
string|'"<MINFO responsibility=alice.example.com "'
nl|'\n'
string|'"errors=bob.example.com ttl=15>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mx
dedent|''
name|'def'
name|'test_mx'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_MX} instance includes the preference, name,\n        and TTL fields of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_MX'
op|'('
number|'13'
op|','
string|"'mx.example.com'"
op|','
number|'2'
op|')'
op|')'
op|','
nl|'\n'
string|'"<MX preference=13 name=mx.example.com ttl=2>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_txt
dedent|''
name|'def'
name|'test_txt'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{dns.Record_TXT} instance includes the data and ttl\n        fields of the record.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'dns'
op|'.'
name|'Record_TXT'
op|'('
string|'"foo"'
op|','
string|'"bar"'
op|','
name|'ttl'
op|'='
number|'15'
op|')'
op|')'
op|','
nl|'\n'
string|'"<TXT data=[\'foo\', \'bar\'] ttl=15>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Equal
dedent|''
dedent|''
name|'class'
name|'_Equal'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A class the instances of which are equal to anything and everything.\n    """'
newline|'\n'
DECL|member|__eq__
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__ne__
dedent|''
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_NotEqual
dedent|''
dedent|''
name|'class'
name|'_NotEqual'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A class the instances of which are equal to nothing.\n    """'
newline|'\n'
DECL|member|__eq__
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__ne__
dedent|''
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|EqualityTests
dedent|''
dedent|''
name|'class'
name|'EqualityTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the equality and non-equality behavior of record classes.\n    """'
newline|'\n'
DECL|member|_equalityTest
name|'def'
name|'_equalityTest'
op|'('
name|'self'
op|','
name|'firstValueOne'
op|','
name|'secondValueOne'
op|','
name|'valueTwo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that C{firstValueOne} is equal to C{secondValueOne} but not\n        equal to C{valueOne} and that it defines equality cooperatively with\n        other types it doesn\'t know about.\n        """'
newline|'\n'
comment|"# This doesn't use assertEqual and assertNotEqual because the exact"
nl|'\n'
comment|'# operator those functions use is not very well defined.  The point'
nl|'\n'
comment|'# of these assertions is to check the results of the use of specific'
nl|'\n'
comment|'# operators (precisely to ensure that using different permutations'
nl|'\n'
comment|'# (eg "x == y" or "not (x != y)") which should yield the same results'
nl|'\n'
comment|'# actually does yield the same result). -exarkun'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'firstValueOne'
op|'=='
name|'firstValueOne'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'firstValueOne'
op|'=='
name|'secondValueOne'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'firstValueOne'
op|'=='
name|'valueTwo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'firstValueOne'
op|'!='
name|'firstValueOne'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'firstValueOne'
op|'!='
name|'secondValueOne'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'firstValueOne'
op|'!='
name|'valueTwo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'firstValueOne'
op|'=='
name|'_Equal'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'firstValueOne'
op|'!='
name|'_Equal'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'firstValueOne'
op|'=='
name|'_NotEqual'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'firstValueOne'
op|'!='
name|'_NotEqual'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_simpleEqualityTest
dedent|''
name|'def'
name|'_simpleEqualityTest'
op|'('
name|'self'
op|','
name|'cls'
op|')'
op|':'
newline|'\n'
comment|'# Vary the TTL'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'cls'
op|'('
string|"'example.com'"
op|','
number|'123'
op|')'
op|','
nl|'\n'
name|'cls'
op|'('
string|"'example.com'"
op|','
number|'123'
op|')'
op|','
nl|'\n'
name|'cls'
op|'('
string|"'example.com'"
op|','
number|'321'
op|')'
op|')'
newline|'\n'
comment|'# Vary the name'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'cls'
op|'('
string|"'example.com'"
op|','
number|'123'
op|')'
op|','
nl|'\n'
name|'cls'
op|'('
string|"'example.com'"
op|','
number|'123'
op|')'
op|','
nl|'\n'
name|'cls'
op|'('
string|"'example.org'"
op|','
number|'123'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_rrheader
dedent|''
name|'def'
name|'test_rrheader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.RRHeader} instances compare equal if and only if they have\n        the same name, type, class, time to live, payload, and authoritative\n        bit.\n        """'
newline|'\n'
comment|'# Vary the name'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.org'"
op|','
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Vary the payload'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.5'"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# Vary the type.  Leave the payload as None so that we don't have to"
nl|'\n'
comment|'# provide non-equal values.'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'dns'
op|'.'
name|'A'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'dns'
op|'.'
name|'A'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'dns'
op|'.'
name|'MX'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Probably not likely to come up.  Most people use the internet.'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'cls'
op|'='
name|'dns'
op|'.'
name|'IN'
op|','
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'cls'
op|'='
name|'dns'
op|'.'
name|'IN'
op|','
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'cls'
op|'='
name|'dns'
op|'.'
name|'CS'
op|','
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Vary the ttl'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'ttl'
op|'='
number|'60'
op|','
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'ttl'
op|'='
number|'60'
op|','
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'ttl'
op|'='
number|'120'
op|','
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Vary the auth bit'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'auth'
op|'='
number|'1'
op|','
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'auth'
op|'='
number|'1'
op|','
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'auth'
op|'='
number|'0'
op|','
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ns
dedent|''
name|'def'
name|'test_ns'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_NS} instances compare equal if and only if they have\n        the same name and TTL.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_simpleEqualityTest'
op|'('
name|'dns'
op|'.'
name|'Record_NS'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_md
dedent|''
name|'def'
name|'test_md'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_MD} instances compare equal if and only if they have\n        the same name and TTL.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_simpleEqualityTest'
op|'('
name|'dns'
op|'.'
name|'Record_MD'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mf
dedent|''
name|'def'
name|'test_mf'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_MF} instances compare equal if and only if they have\n        the same name and TTL.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_simpleEqualityTest'
op|'('
name|'dns'
op|'.'
name|'Record_MF'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cname
dedent|''
name|'def'
name|'test_cname'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_CNAME} instances compare equal if and only if they\n        have the same name and TTL.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_simpleEqualityTest'
op|'('
name|'dns'
op|'.'
name|'Record_CNAME'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mb
dedent|''
name|'def'
name|'test_mb'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_MB} instances compare equal if and only if they have\n        the same name and TTL.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_simpleEqualityTest'
op|'('
name|'dns'
op|'.'
name|'Record_MB'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mg
dedent|''
name|'def'
name|'test_mg'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_MG} instances compare equal if and only if they have\n        the same name and TTL.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_simpleEqualityTest'
op|'('
name|'dns'
op|'.'
name|'Record_MG'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mr
dedent|''
name|'def'
name|'test_mr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_MR} instances compare equal if and only if they have\n        the same name and TTL.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_simpleEqualityTest'
op|'('
name|'dns'
op|'.'
name|'Record_MR'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ptr
dedent|''
name|'def'
name|'test_ptr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_PTR} instances compare equal if and only if they have\n        the same name and TTL.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_simpleEqualityTest'
op|'('
name|'dns'
op|'.'
name|'Record_PTR'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_dname
dedent|''
name|'def'
name|'test_dname'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_MD} instances compare equal if and only if they have\n        the same name and TTL.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_simpleEqualityTest'
op|'('
name|'dns'
op|'.'
name|'Record_DNAME'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_a
dedent|''
name|'def'
name|'test_a'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_A} instances compare equal if and only if they have\n        the same address and TTL.\n        """'
newline|'\n'
comment|'# Vary the TTL'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|','
number|'5'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|','
number|'5'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|','
number|'6'
op|')'
op|')'
newline|'\n'
comment|'# Vary the address'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|','
number|'5'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.4'"
op|','
number|'5'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_A'
op|'('
string|"'1.2.3.5'"
op|','
number|'5'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_soa
dedent|''
name|'def'
name|'test_soa'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_SOA} instances compare equal if and only if they have\n        the same mname, rname, serial, refresh, minimum, expire, retry, and\n        ttl.\n        """'
newline|'\n'
comment|'# Vary the mname'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'xname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|')'
newline|'\n'
comment|'# Vary the rname'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'xname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|')'
newline|'\n'
comment|'# Vary the serial'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'1'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|')'
newline|'\n'
comment|'# Vary the refresh'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'1'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|')'
newline|'\n'
comment|'# Vary the minimum'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'1'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|')'
newline|'\n'
comment|'# Vary the expire'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'1'
op|','
number|'20'
op|','
number|'30'
op|')'
op|')'
newline|'\n'
comment|'# Vary the retry'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'1'
op|','
number|'30'
op|')'
op|')'
newline|'\n'
comment|'# Vary the ttl'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'rname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'30'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SOA'
op|'('
string|"'mname'"
op|','
string|"'xname'"
op|','
number|'123'
op|','
number|'456'
op|','
number|'789'
op|','
number|'10'
op|','
number|'20'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_null
dedent|''
name|'def'
name|'test_null'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_NULL} instances compare equal if and only if they have\n        the same payload and ttl.\n        """'
newline|'\n'
comment|'# Vary the payload'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_NULL'
op|'('
string|"'foo bar'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NULL'
op|'('
string|"'foo bar'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NULL'
op|'('
string|"'bar foo'"
op|','
number|'10'
op|')'
op|')'
newline|'\n'
comment|'# Vary the ttl'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_NULL'
op|'('
string|"'foo bar'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NULL'
op|'('
string|"'foo bar'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NULL'
op|'('
string|"'foo bar'"
op|','
number|'100'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_wks
dedent|''
name|'def'
name|'test_wks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_WKS} instances compare equal if and only if they have\n        the same address, protocol, map, and ttl.\n        """'
newline|'\n'
comment|'# Vary the address'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_WKS'
op|'('
string|"'1.2.3.4'"
op|','
number|'1'
op|','
string|"'foo'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_WKS'
op|'('
string|"'1.2.3.4'"
op|','
number|'1'
op|','
string|"'foo'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_WKS'
op|'('
string|"'4.3.2.1'"
op|','
number|'1'
op|','
string|"'foo'"
op|','
number|'2'
op|')'
op|')'
newline|'\n'
comment|'# Vary the protocol'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_WKS'
op|'('
string|"'1.2.3.4'"
op|','
number|'1'
op|','
string|"'foo'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_WKS'
op|'('
string|"'1.2.3.4'"
op|','
number|'1'
op|','
string|"'foo'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_WKS'
op|'('
string|"'1.2.3.4'"
op|','
number|'100'
op|','
string|"'foo'"
op|','
number|'2'
op|')'
op|')'
newline|'\n'
comment|'# Vary the map'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_WKS'
op|'('
string|"'1.2.3.4'"
op|','
number|'1'
op|','
string|"'foo'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_WKS'
op|'('
string|"'1.2.3.4'"
op|','
number|'1'
op|','
string|"'foo'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_WKS'
op|'('
string|"'1.2.3.4'"
op|','
number|'1'
op|','
string|"'bar'"
op|','
number|'2'
op|')'
op|')'
newline|'\n'
comment|'# Vary the ttl'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_WKS'
op|'('
string|"'1.2.3.4'"
op|','
number|'1'
op|','
string|"'foo'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_WKS'
op|'('
string|"'1.2.3.4'"
op|','
number|'1'
op|','
string|"'foo'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_WKS'
op|'('
string|"'1.2.3.4'"
op|','
number|'1'
op|','
string|"'foo'"
op|','
number|'200'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_aaaa
dedent|''
name|'def'
name|'test_aaaa'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_AAAA} instances compare equal if and only if they have\n        the same address and ttl.\n        """'
newline|'\n'
comment|'# Vary the address'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_AAAA'
op|'('
string|"'1::2'"
op|','
number|'1'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_AAAA'
op|'('
string|"'1::2'"
op|','
number|'1'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_AAAA'
op|'('
string|"'2::1'"
op|','
number|'1'
op|')'
op|')'
newline|'\n'
comment|'# Vary the ttl'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_AAAA'
op|'('
string|"'1::2'"
op|','
number|'1'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_AAAA'
op|'('
string|"'1::2'"
op|','
number|'1'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_AAAA'
op|'('
string|"'1::2'"
op|','
number|'10'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_a6
dedent|''
name|'def'
name|'test_a6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_A6} instances compare equal if and only if they have\n        the same prefix, prefix length, suffix, and ttl.\n        """'
newline|'\n'
comment|"# Note, A6 is crazy, I'm not sure these values are actually legal."
nl|'\n'
comment|"# Hopefully that doesn't matter for this test. -exarkun"
nl|'\n'
nl|'\n'
comment|'# Vary the prefix length'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_A6'
op|'('
number|'16'
op|','
string|"'::abcd'"
op|','
string|"'example.com'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_A6'
op|'('
number|'16'
op|','
string|"'::abcd'"
op|','
string|"'example.com'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_A6'
op|'('
number|'32'
op|','
string|"'::abcd'"
op|','
string|"'example.com'"
op|','
number|'10'
op|')'
op|')'
newline|'\n'
comment|'# Vary the suffix'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_A6'
op|'('
number|'16'
op|','
string|"'::abcd'"
op|','
string|"'example.com'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_A6'
op|'('
number|'16'
op|','
string|"'::abcd'"
op|','
string|"'example.com'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_A6'
op|'('
number|'16'
op|','
string|"'::abcd:0'"
op|','
string|"'example.com'"
op|','
number|'10'
op|')'
op|')'
newline|'\n'
comment|'# Vary the prefix'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_A6'
op|'('
number|'16'
op|','
string|"'::abcd'"
op|','
string|"'example.com'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_A6'
op|'('
number|'16'
op|','
string|"'::abcd'"
op|','
string|"'example.com'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_A6'
op|'('
number|'16'
op|','
string|"'::abcd'"
op|','
string|"'example.org'"
op|','
number|'10'
op|')'
op|')'
newline|'\n'
comment|'# Vary the ttl'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_A6'
op|'('
number|'16'
op|','
string|"'::abcd'"
op|','
string|"'example.com'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_A6'
op|'('
number|'16'
op|','
string|"'::abcd'"
op|','
string|"'example.com'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_A6'
op|'('
number|'16'
op|','
string|"'::abcd'"
op|','
string|"'example.com'"
op|','
number|'100'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_srv
dedent|''
name|'def'
name|'test_srv'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_SRV} instances compare equal if and only if they have\n        the same priority, weight, port, target, and ttl.\n        """'
newline|'\n'
comment|'# Vary the priority'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
number|'10'
op|','
number|'20'
op|','
number|'30'
op|','
string|"'example.com'"
op|','
number|'40'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
number|'10'
op|','
number|'20'
op|','
number|'30'
op|','
string|"'example.com'"
op|','
number|'40'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
number|'100'
op|','
number|'20'
op|','
number|'30'
op|','
string|"'example.com'"
op|','
number|'40'
op|')'
op|')'
newline|'\n'
comment|'# Vary the weight'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
number|'10'
op|','
number|'20'
op|','
number|'30'
op|','
string|"'example.com'"
op|','
number|'40'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
number|'10'
op|','
number|'20'
op|','
number|'30'
op|','
string|"'example.com'"
op|','
number|'40'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
number|'10'
op|','
number|'200'
op|','
number|'30'
op|','
string|"'example.com'"
op|','
number|'40'
op|')'
op|')'
newline|'\n'
comment|'# Vary the port'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
number|'10'
op|','
number|'20'
op|','
number|'30'
op|','
string|"'example.com'"
op|','
number|'40'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
number|'10'
op|','
number|'20'
op|','
number|'30'
op|','
string|"'example.com'"
op|','
number|'40'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
number|'10'
op|','
number|'20'
op|','
number|'300'
op|','
string|"'example.com'"
op|','
number|'40'
op|')'
op|')'
newline|'\n'
comment|'# Vary the target'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
number|'10'
op|','
number|'20'
op|','
number|'30'
op|','
string|"'example.com'"
op|','
number|'40'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
number|'10'
op|','
number|'20'
op|','
number|'30'
op|','
string|"'example.com'"
op|','
number|'40'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
number|'10'
op|','
number|'20'
op|','
number|'30'
op|','
string|"'example.org'"
op|','
number|'40'
op|')'
op|')'
newline|'\n'
comment|'# Vary the ttl'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
number|'10'
op|','
number|'20'
op|','
number|'30'
op|','
string|"'example.com'"
op|','
number|'40'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
number|'10'
op|','
number|'20'
op|','
number|'30'
op|','
string|"'example.com'"
op|','
number|'40'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
number|'10'
op|','
number|'20'
op|','
number|'30'
op|','
string|"'example.com'"
op|','
number|'400'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_naptr
dedent|''
name|'def'
name|'test_naptr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_NAPTR} instances compare equal if and only if they\n        have the same order, preference, flags, service, regexp, replacement,\n        and ttl.\n        """'
newline|'\n'
comment|'# Vary the order'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'2'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|')'
newline|'\n'
comment|'# Vary the preference'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'3'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|')'
newline|'\n'
comment|'# Vary the flags'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"p"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|')'
newline|'\n'
comment|'# Vary the service'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"http"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|')'
newline|'\n'
comment|'# Vary the regexp'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/bar/foo/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|')'
newline|'\n'
comment|'# Vary the replacement'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/bar/foo/"'
op|','
string|'"quux"'
op|','
number|'12'
op|')'
op|')'
newline|'\n'
comment|'# Vary the ttl'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/foo/bar/"'
op|','
string|'"baz"'
op|','
number|'12'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_NAPTR'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"u"'
op|','
string|'"sip+E2U"'
op|','
string|'"/bar/foo/"'
op|','
string|'"baz"'
op|','
number|'5'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_afsdb
dedent|''
name|'def'
name|'test_afsdb'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_AFSDB} instances compare equal if and only if they\n        have the same subtype, hostname, and ttl.\n        """'
newline|'\n'
comment|'# Vary the subtype'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_AFSDB'
op|'('
number|'1'
op|','
string|"'example.com'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_AFSDB'
op|'('
number|'1'
op|','
string|"'example.com'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_AFSDB'
op|'('
number|'2'
op|','
string|"'example.com'"
op|','
number|'2'
op|')'
op|')'
newline|'\n'
comment|'# Vary the hostname'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_AFSDB'
op|'('
number|'1'
op|','
string|"'example.com'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_AFSDB'
op|'('
number|'1'
op|','
string|"'example.com'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_AFSDB'
op|'('
number|'1'
op|','
string|"'example.org'"
op|','
number|'2'
op|')'
op|')'
newline|'\n'
comment|'# Vary the ttl'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_AFSDB'
op|'('
number|'1'
op|','
string|"'example.com'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_AFSDB'
op|'('
number|'1'
op|','
string|"'example.com'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_AFSDB'
op|'('
number|'1'
op|','
string|"'example.com'"
op|','
number|'3'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_rp
dedent|''
name|'def'
name|'test_rp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{Record_RP} instances compare equal if and only if they have the\n        same mbox, txt, and ttl.\n        """'
newline|'\n'
comment|'# Vary the mbox'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_RP'
op|'('
string|"'alice.example.com'"
op|','
string|"'alice is nice'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_RP'
op|'('
string|"'alice.example.com'"
op|','
string|"'alice is nice'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_RP'
op|'('
string|"'bob.example.com'"
op|','
string|"'alice is nice'"
op|','
number|'10'
op|')'
op|')'
newline|'\n'
comment|'# Vary the txt'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_RP'
op|'('
string|"'alice.example.com'"
op|','
string|"'alice is nice'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_RP'
op|'('
string|"'alice.example.com'"
op|','
string|"'alice is nice'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_RP'
op|'('
string|"'alice.example.com'"
op|','
string|"'alice is not nice'"
op|','
number|'10'
op|')'
op|')'
newline|'\n'
comment|'# Vary the ttl'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_RP'
op|'('
string|"'alice.example.com'"
op|','
string|"'alice is nice'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_RP'
op|'('
string|"'alice.example.com'"
op|','
string|"'alice is nice'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_RP'
op|'('
string|"'alice.example.com'"
op|','
string|"'alice is nice'"
op|','
number|'100'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_hinfo
dedent|''
name|'def'
name|'test_hinfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_HINFO} instances compare equal if and only if they\n        have the same cpu, os, and ttl.\n        """'
newline|'\n'
comment|'# Vary the cpu'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_HINFO'
op|'('
string|"'x86-64'"
op|','
string|"'plan9'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_HINFO'
op|'('
string|"'x86-64'"
op|','
string|"'plan9'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_HINFO'
op|'('
string|"'i386'"
op|','
string|"'plan9'"
op|','
number|'10'
op|')'
op|')'
newline|'\n'
comment|'# Vary the os'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_HINFO'
op|'('
string|"'x86-64'"
op|','
string|"'plan9'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_HINFO'
op|'('
string|"'x86-64'"
op|','
string|"'plan9'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_HINFO'
op|'('
string|"'x86-64'"
op|','
string|"'plan11'"
op|','
number|'10'
op|')'
op|')'
newline|'\n'
comment|'# Vary the ttl'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_HINFO'
op|'('
string|"'x86-64'"
op|','
string|"'plan9'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_HINFO'
op|'('
string|"'x86-64'"
op|','
string|"'plan9'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_HINFO'
op|'('
string|"'x86-64'"
op|','
string|"'plan9'"
op|','
number|'100'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_minfo
dedent|''
name|'def'
name|'test_minfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_MINFO} instances compare equal if and only if they\n        have the same rmailbx, emailbx, and ttl.\n        """'
newline|'\n'
comment|'# Vary the rmailbx'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_MINFO'
op|'('
string|"'rmailbox'"
op|','
string|"'emailbox'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_MINFO'
op|'('
string|"'rmailbox'"
op|','
string|"'emailbox'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_MINFO'
op|'('
string|"'someplace'"
op|','
string|"'emailbox'"
op|','
number|'10'
op|')'
op|')'
newline|'\n'
comment|'# Vary the emailbx'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_MINFO'
op|'('
string|"'rmailbox'"
op|','
string|"'emailbox'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_MINFO'
op|'('
string|"'rmailbox'"
op|','
string|"'emailbox'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_MINFO'
op|'('
string|"'rmailbox'"
op|','
string|"'something'"
op|','
number|'10'
op|')'
op|')'
newline|'\n'
comment|'# Vary the ttl'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_MINFO'
op|'('
string|"'rmailbox'"
op|','
string|"'emailbox'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_MINFO'
op|'('
string|"'rmailbox'"
op|','
string|"'emailbox'"
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_MINFO'
op|'('
string|"'rmailbox'"
op|','
string|"'emailbox'"
op|','
number|'100'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mx
dedent|''
name|'def'
name|'test_mx'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_MX} instances compare equal if and only if they have\n        the same preference, name, and ttl.\n        """'
newline|'\n'
comment|'# Vary the preference'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_MX'
op|'('
number|'10'
op|','
string|"'example.org'"
op|','
number|'20'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_MX'
op|'('
number|'10'
op|','
string|"'example.org'"
op|','
number|'20'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_MX'
op|'('
number|'100'
op|','
string|"'example.org'"
op|','
number|'20'
op|')'
op|')'
newline|'\n'
comment|'# Vary the name'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_MX'
op|'('
number|'10'
op|','
string|"'example.org'"
op|','
number|'20'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_MX'
op|'('
number|'10'
op|','
string|"'example.org'"
op|','
number|'20'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_MX'
op|'('
number|'10'
op|','
string|"'example.net'"
op|','
number|'20'
op|')'
op|')'
newline|'\n'
comment|'# Vary the ttl'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_MX'
op|'('
number|'10'
op|','
string|"'example.org'"
op|','
number|'20'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_MX'
op|'('
number|'10'
op|','
string|"'example.org'"
op|','
number|'20'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_MX'
op|'('
number|'10'
op|','
string|"'example.org'"
op|','
number|'200'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_txt
dedent|''
name|'def'
name|'test_txt'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two L{dns.Record_TXT} instances compare equal if and only if they have\n        the same data and ttl.\n        """'
newline|'\n'
comment|'# Vary the length of the data'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_TXT'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_TXT'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_TXT'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|','
string|"'baz'"
op|']'
op|','
number|'10'
op|')'
op|')'
newline|'\n'
comment|'# Vary the value of the data'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_TXT'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_TXT'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_TXT'
op|'('
op|'['
string|"'bar'"
op|','
string|"'foo'"
op|']'
op|','
number|'10'
op|')'
op|')'
newline|'\n'
comment|'# Vary the ttl'
nl|'\n'
name|'self'
op|'.'
name|'_equalityTest'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Record_TXT'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_TXT'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'dns'
op|'.'
name|'Record_TXT'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|','
number|'100'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

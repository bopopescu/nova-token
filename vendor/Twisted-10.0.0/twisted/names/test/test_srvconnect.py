begin_unit
comment|'# Copyright (c) 2007-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTest cases for L{twisted.names.srvconnect}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'protocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
name|'import'
name|'client'
op|','
name|'dns'
op|','
name|'srvconnect'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'common'
name|'import'
name|'ResolverBase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'error'
name|'import'
name|'DNSNameError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'DNSLookupError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'MemoryReactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeResolver
name|'class'
name|'FakeResolver'
op|'('
name|'ResolverBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Resolver that only gives out one given result.\n\n    Either L{results} or L{failure} must be set and will be used for\n    the return value of L{_lookup}\n\n    @ivar results: List of L{dns.RRHeader} for the desired result.\n    @type results: C{list}\n    @ivar failure: Failure with an exception from L{twisted.names.error}.\n    @type failure: L{Failure<twisted.python.failure.Failure>}\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'results'
op|'='
name|'None'
op|','
name|'failure'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'results'
op|'='
name|'results'
newline|'\n'
name|'self'
op|'.'
name|'failure'
op|'='
name|'failure'
newline|'\n'
nl|'\n'
DECL|member|_lookup
dedent|''
name|'def'
name|'_lookup'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'cls'
op|','
name|'qtype'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the result or failure on lookup.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'results'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
op|'('
name|'self'
op|'.'
name|'results'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'self'
op|'.'
name|'failure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyFactory
dedent|''
dedent|''
dedent|''
name|'class'
name|'DummyFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Dummy client factory that stores the reason of connection failure.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reason'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
dedent|''
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reason'
op|'='
name|'reason'
newline|'\n'
nl|'\n'
DECL|class|SRVConnectorTest
dedent|''
dedent|''
name|'class'
name|'SRVConnectorTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'patch'
op|'('
name|'client'
op|','
string|"'theResolver'"
op|','
name|'FakeResolver'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'='
name|'MemoryReactor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'='
name|'DummyFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connector'
op|'='
name|'srvconnect'
op|'.'
name|'SRVConnector'
op|'('
name|'self'
op|'.'
name|'reactor'
op|','
string|"'xmpp-server'"
op|','
nl|'\n'
string|"'example.org'"
op|','
name|'self'
op|'.'
name|'factory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_SRVPresent
dedent|''
name|'def'
name|'test_SRVPresent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test connectTCP gets called with the address from the SRV record.\n        """'
newline|'\n'
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
name|'port'
op|'='
number|'6269'
op|','
name|'target'
op|'='
string|"'host.example.org'"
op|','
name|'ttl'
op|'='
number|'60'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'theResolver'
op|'.'
name|'results'
op|'='
op|'['
name|'dns'
op|'.'
name|'RRHeader'
op|'('
name|'name'
op|'='
string|"'example.org'"
op|','
nl|'\n'
name|'type'
op|'='
name|'dns'
op|'.'
name|'SRV'
op|','
nl|'\n'
name|'cls'
op|'='
name|'dns'
op|'.'
name|'IN'
op|','
name|'ttl'
op|'='
number|'60'
op|','
nl|'\n'
name|'payload'
op|'='
name|'payload'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'connector'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'tcpClients'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
op|':'
number|'2'
op|']'
op|','
op|'('
string|"'host.example.org'"
op|','
number|'6269'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_SRVNotPresent
dedent|''
name|'def'
name|'test_SRVNotPresent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test connectTCP gets called with fallback parameters on NXDOMAIN.\n        """'
newline|'\n'
name|'client'
op|'.'
name|'theResolver'
op|'.'
name|'failure'
op|'='
name|'DNSNameError'
op|'('
string|"'example.org'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connector'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'tcpClients'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
op|':'
number|'2'
op|']'
op|','
op|'('
string|"'example.org'"
op|','
string|"'xmpp-server'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_SRVNoResult
dedent|''
name|'def'
name|'test_SRVNoResult'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test connectTCP gets called with fallback parameters on empty result.\n        """'
newline|'\n'
name|'client'
op|'.'
name|'theResolver'
op|'.'
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'connector'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'tcpClients'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
op|':'
number|'2'
op|']'
op|','
op|'('
string|"'example.org'"
op|','
string|"'xmpp-server'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_SRVBadResult
dedent|''
name|'def'
name|'test_SRVBadResult'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test connectTCP gets called with fallback parameters on bad result.\n        """'
newline|'\n'
name|'client'
op|'.'
name|'theResolver'
op|'.'
name|'results'
op|'='
op|'['
name|'dns'
op|'.'
name|'RRHeader'
op|'('
name|'name'
op|'='
string|"'example.org'"
op|','
nl|'\n'
name|'type'
op|'='
name|'dns'
op|'.'
name|'CNAME'
op|','
nl|'\n'
name|'cls'
op|'='
name|'dns'
op|'.'
name|'IN'
op|','
name|'ttl'
op|'='
number|'60'
op|','
nl|'\n'
name|'payload'
op|'='
name|'None'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'connector'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'tcpClients'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
op|':'
number|'2'
op|']'
op|','
op|'('
string|"'example.org'"
op|','
string|"'xmpp-server'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_SRVNoService
dedent|''
name|'def'
name|'test_SRVNoService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that connecting fails when no service is present.\n        """'
newline|'\n'
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_SRV'
op|'('
name|'port'
op|'='
number|'5269'
op|','
name|'target'
op|'='
string|"'.'"
op|','
name|'ttl'
op|'='
number|'60'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'theResolver'
op|'.'
name|'results'
op|'='
op|'['
name|'dns'
op|'.'
name|'RRHeader'
op|'('
name|'name'
op|'='
string|"'example.org'"
op|','
nl|'\n'
name|'type'
op|'='
name|'dns'
op|'.'
name|'SRV'
op|','
nl|'\n'
name|'cls'
op|'='
name|'dns'
op|'.'
name|'IN'
op|','
name|'ttl'
op|'='
number|'60'
op|','
nl|'\n'
name|'payload'
op|'='
name|'payload'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'connector'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'DNSLookupError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'tcpClients'
op|','
op|'['
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTest cases for L{twisted.names.client}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
name|'import'
name|'client'
op|','
name|'dns'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'error'
name|'import'
name|'DNSQueryTimeoutError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'common'
name|'import'
name|'ResolverBase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'deprecate'
name|'import'
name|'getWarningMethod'
op|','
name|'setWarningMethod'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeResolver
name|'class'
name|'FakeResolver'
op|'('
name|'ResolverBase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|_lookup
indent|'    '
name|'def'
name|'_lookup'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'cls'
op|','
name|'qtype'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The getHostByNameTest does a different type of query that requires it\n        return an A record from an ALL_RECORDS lookup, so we accomodate that\n        here.\n        """'
newline|'\n'
name|'if'
name|'name'
op|'=='
string|"'getHostByNameTest'"
op|':'
newline|'\n'
indent|'            '
name|'rr'
op|'='
name|'dns'
op|'.'
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'name'
op|','
name|'type'
op|'='
name|'dns'
op|'.'
name|'A'
op|','
name|'cls'
op|'='
name|'cls'
op|','
name|'ttl'
op|'='
number|'60'
op|','
nl|'\n'
name|'payload'
op|'='
name|'dns'
op|'.'
name|'Record_A'
op|'('
name|'address'
op|'='
string|"'127.0.0.1'"
op|','
name|'ttl'
op|'='
number|'60'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'rr'
op|'='
name|'dns'
op|'.'
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'name'
op|','
name|'type'
op|'='
name|'qtype'
op|','
name|'cls'
op|'='
name|'cls'
op|','
name|'ttl'
op|'='
number|'60'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'results'
op|'='
op|'['
name|'rr'
op|']'
newline|'\n'
name|'authority'
op|'='
op|'['
op|']'
newline|'\n'
name|'addtional'
op|'='
op|'['
op|']'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
op|'('
name|'results'
op|','
name|'authority'
op|','
name|'addtional'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StubPort
dedent|''
dedent|''
name|'class'
name|'StubPort'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A partial implementation of L{IListeningPort} which only keeps track of\n    whether it has been stopped.\n\n    @ivar disconnected: A C{bool} which is C{False} until C{stopListening} is\n        called, C{True} afterwards.\n    """'
newline|'\n'
DECL|variable|disconnected
name|'disconnected'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|stopListening
name|'def'
name|'stopListening'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'disconnected'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StubDNSDatagramProtocol
dedent|''
dedent|''
name|'class'
name|'StubDNSDatagramProtocol'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{dns.DNSDatagramProtocol}-alike.\n\n    @ivar queries: A C{list} of tuples giving the arguments passed to\n        C{query} along with the L{defer.Deferred} which was returned from\n        the call.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'queries'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'StubPort'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|query
dedent|''
name|'def'
name|'query'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'queries'
op|','
name|'timeout'
op|'='
number|'10'
op|','
name|'id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record the given arguments and return a Deferred which will not be\n        called back by this code.\n        """'
newline|'\n'
name|'result'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queries'
op|'.'
name|'append'
op|'('
op|'('
name|'address'
op|','
name|'queries'
op|','
name|'timeout'
op|','
name|'id'
op|','
name|'result'
op|')'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResolverTests
dedent|''
dedent|''
name|'class'
name|'ResolverTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{client.Resolver}.\n    """'
newline|'\n'
DECL|member|test_resolverProtocol
name|'def'
name|'test_resolverProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reading L{client.Resolver.protocol} causes a deprecation warning to be\n        emitted and evaluates to an instance of L{DNSDatagramProtocol}.\n        """'
newline|'\n'
name|'resolver'
op|'='
name|'client'
op|'.'
name|'Resolver'
op|'('
name|'servers'
op|'='
op|'['
op|'('
string|"'example.com'"
op|','
number|'53'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'setWarningMethod'
op|','
name|'getWarningMethod'
op|'('
op|')'
op|')'
newline|'\n'
name|'warnings'
op|'='
op|'['
op|']'
newline|'\n'
name|'setWarningMethod'
op|'('
nl|'\n'
name|'lambda'
name|'message'
op|','
name|'category'
op|','
name|'stacklevel'
op|':'
nl|'\n'
name|'warnings'
op|'.'
name|'append'
op|'('
op|'('
name|'message'
op|','
name|'category'
op|','
name|'stacklevel'
op|')'
op|')'
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'resolver'
op|'.'
name|'protocol'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'protocol'
op|','
name|'dns'
op|'.'
name|'DNSDatagramProtocol'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'warnings'
op|','
op|'['
op|'('
string|'"Resolver.protocol is deprecated; use "'
nl|'\n'
string|'"Resolver.queryUDP instead."'
op|','
nl|'\n'
name|'PendingDeprecationWarning'
op|','
number|'0'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'protocol'
op|','
name|'resolver'
op|'.'
name|'protocol'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_datagramQueryServerOrder
dedent|''
name|'def'
name|'test_datagramQueryServerOrder'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{client.Resolver.queryUDP} should issue queries to its\n        L{dns.DNSDatagramProtocol} with server addresses taken from its own\n        C{servers} and C{dynServers} lists, proceeding through them in order\n        as L{DNSQueryTimeoutError}s occur.\n        """'
newline|'\n'
name|'protocol'
op|'='
name|'StubDNSDatagramProtocol'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'servers'
op|'='
op|'['
name|'object'
op|'('
op|')'
op|','
name|'object'
op|'('
op|')'
op|']'
newline|'\n'
name|'dynServers'
op|'='
op|'['
name|'object'
op|'('
op|')'
op|','
name|'object'
op|'('
op|')'
op|']'
newline|'\n'
name|'resolver'
op|'='
name|'client'
op|'.'
name|'Resolver'
op|'('
name|'servers'
op|'='
name|'servers'
op|')'
newline|'\n'
name|'resolver'
op|'.'
name|'dynServers'
op|'='
name|'dynServers'
newline|'\n'
name|'resolver'
op|'.'
name|'protocol'
op|'='
name|'protocol'
newline|'\n'
nl|'\n'
name|'expectedResult'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'queryResult'
op|'='
name|'resolver'
op|'.'
name|'queryUDP'
op|'('
name|'None'
op|')'
newline|'\n'
name|'queryResult'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
name|'expectedResult'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'protocol'
op|'.'
name|'queries'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'protocol'
op|'.'
name|'queries'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'servers'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'queries'
op|'['
number|'0'
op|']'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'errback'
op|'('
name|'DNSQueryTimeoutError'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'protocol'
op|'.'
name|'queries'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'protocol'
op|'.'
name|'queries'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'servers'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'queries'
op|'['
number|'1'
op|']'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'errback'
op|'('
name|'DNSQueryTimeoutError'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'protocol'
op|'.'
name|'queries'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'protocol'
op|'.'
name|'queries'
op|'['
number|'2'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'dynServers'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'queries'
op|'['
number|'2'
op|']'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'errback'
op|'('
name|'DNSQueryTimeoutError'
op|'('
number|'2'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'protocol'
op|'.'
name|'queries'
op|')'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'protocol'
op|'.'
name|'queries'
op|'['
number|'3'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'dynServers'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'queries'
op|'['
number|'3'
op|']'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'callback'
op|'('
name|'expectedResult'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'queryResult'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_singleConcurrentRequest
dedent|''
name|'def'
name|'test_singleConcurrentRequest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{client.Resolver.query} only issues one request at a time per query.\n        Subsequent requests made before responses to prior ones are received\n        are queued and given the same response as is given to the first one.\n        """'
newline|'\n'
name|'resolver'
op|'='
name|'client'
op|'.'
name|'Resolver'
op|'('
name|'servers'
op|'='
op|'['
op|'('
string|"'example.com'"
op|','
number|'53'
op|')'
op|']'
op|')'
newline|'\n'
name|'resolver'
op|'.'
name|'protocol'
op|'='
name|'StubDNSDatagramProtocol'
op|'('
op|')'
newline|'\n'
name|'queries'
op|'='
name|'resolver'
op|'.'
name|'protocol'
op|'.'
name|'queries'
newline|'\n'
nl|'\n'
name|'query'
op|'='
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo.example.com'"
op|','
name|'dns'
op|'.'
name|'A'
op|','
name|'dns'
op|'.'
name|'IN'
op|')'
newline|'\n'
comment|'# The first query should be passed to the underlying protocol.'
nl|'\n'
name|'firstResult'
op|'='
name|'resolver'
op|'.'
name|'query'
op|'('
name|'query'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'queries'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# The same query again should not be passed to the underlying protocol.'
nl|'\n'
name|'secondResult'
op|'='
name|'resolver'
op|'.'
name|'query'
op|'('
name|'query'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'queries'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# The response to the first query should be sent in response to both'
nl|'\n'
comment|'# queries.'
nl|'\n'
name|'answer'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'response'
op|'='
name|'dns'
op|'.'
name|'Message'
op|'('
op|')'
newline|'\n'
name|'response'
op|'.'
name|'answers'
op|'.'
name|'append'
op|'('
name|'answer'
op|')'
newline|'\n'
name|'queries'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'callback'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'firstResult'
op|','
name|'secondResult'
op|']'
op|')'
newline|'\n'
DECL|function|cbFinished
name|'def'
name|'cbFinished'
op|'('
op|'('
name|'firstResponse'
op|','
name|'secondResponse'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'firstResponse'
op|','
op|'('
op|'['
name|'answer'
op|']'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'secondResponse'
op|','
op|'('
op|'['
name|'answer'
op|']'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbFinished'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleConcurrentRequests
dedent|''
name|'def'
name|'test_multipleConcurrentRequests'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{client.Resolver.query} issues a request for each different concurrent\n        query.\n        """'
newline|'\n'
name|'resolver'
op|'='
name|'client'
op|'.'
name|'Resolver'
op|'('
name|'servers'
op|'='
op|'['
op|'('
string|"'example.com'"
op|','
number|'53'
op|')'
op|']'
op|')'
newline|'\n'
name|'resolver'
op|'.'
name|'protocol'
op|'='
name|'StubDNSDatagramProtocol'
op|'('
op|')'
newline|'\n'
name|'queries'
op|'='
name|'resolver'
op|'.'
name|'protocol'
op|'.'
name|'queries'
newline|'\n'
nl|'\n'
comment|'# The first query should be passed to the underlying protocol.'
nl|'\n'
name|'firstQuery'
op|'='
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo.example.com'"
op|','
name|'dns'
op|'.'
name|'A'
op|')'
newline|'\n'
name|'resolver'
op|'.'
name|'query'
op|'('
name|'firstQuery'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'queries'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# A query for a different name is also passed to the underlying'
nl|'\n'
comment|'# protocol.'
nl|'\n'
name|'secondQuery'
op|'='
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'bar.example.com'"
op|','
name|'dns'
op|'.'
name|'A'
op|')'
newline|'\n'
name|'resolver'
op|'.'
name|'query'
op|'('
name|'secondQuery'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'queries'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
comment|'# A query for a different type is also passed to the underlying'
nl|'\n'
comment|'# protocol.'
nl|'\n'
name|'thirdQuery'
op|'='
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo.example.com'"
op|','
name|'dns'
op|'.'
name|'A6'
op|')'
newline|'\n'
name|'resolver'
op|'.'
name|'query'
op|'('
name|'thirdQuery'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'queries'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleSequentialRequests
dedent|''
name|'def'
name|'test_multipleSequentialRequests'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        After a response is received to a query issued with\n        L{client.Resolver.query}, another query with the same parameters\n        results in a new network request.\n        """'
newline|'\n'
name|'resolver'
op|'='
name|'client'
op|'.'
name|'Resolver'
op|'('
name|'servers'
op|'='
op|'['
op|'('
string|"'example.com'"
op|','
number|'53'
op|')'
op|']'
op|')'
newline|'\n'
name|'resolver'
op|'.'
name|'protocol'
op|'='
name|'StubDNSDatagramProtocol'
op|'('
op|')'
newline|'\n'
name|'queries'
op|'='
name|'resolver'
op|'.'
name|'protocol'
op|'.'
name|'queries'
newline|'\n'
nl|'\n'
name|'query'
op|'='
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo.example.com'"
op|','
name|'dns'
op|'.'
name|'A'
op|')'
newline|'\n'
nl|'\n'
comment|'# The first query should be passed to the underlying protocol.'
nl|'\n'
name|'resolver'
op|'.'
name|'query'
op|'('
name|'query'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'queries'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Deliver the response.'
nl|'\n'
name|'queries'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'callback'
op|'('
name|'dns'
op|'.'
name|'Message'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Repeating the first query should touch the protocol again.'
nl|'\n'
name|'resolver'
op|'.'
name|'query'
op|'('
name|'query'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'queries'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleConcurrentFailure
dedent|''
name|'def'
name|'test_multipleConcurrentFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the result of a request is an error response, the Deferreds for all\n        concurrently issued requests associated with that result fire with the\n        L{Failure}.\n        """'
newline|'\n'
name|'resolver'
op|'='
name|'client'
op|'.'
name|'Resolver'
op|'('
name|'servers'
op|'='
op|'['
op|'('
string|"'example.com'"
op|','
number|'53'
op|')'
op|']'
op|')'
newline|'\n'
name|'resolver'
op|'.'
name|'protocol'
op|'='
name|'StubDNSDatagramProtocol'
op|'('
op|')'
newline|'\n'
name|'queries'
op|'='
name|'resolver'
op|'.'
name|'protocol'
op|'.'
name|'queries'
newline|'\n'
nl|'\n'
name|'query'
op|'='
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo.example.com'"
op|','
name|'dns'
op|'.'
name|'A'
op|')'
newline|'\n'
name|'firstResult'
op|'='
name|'resolver'
op|'.'
name|'query'
op|'('
name|'query'
op|')'
newline|'\n'
name|'secondResult'
op|'='
name|'resolver'
op|'.'
name|'query'
op|'('
name|'query'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ExpectedException
name|'class'
name|'ExpectedException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'queries'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'ExpectedException'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'firstResult'
op|','
name|'ExpectedException'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'secondResult'
op|','
name|'ExpectedException'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectedProtocol
dedent|''
name|'def'
name|'test_connectedProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{client.Resolver._connectedProtocol} returns a new\n        L{DNSDatagramProtocol} connected to a new address with a\n        cryptographically secure random port number.\n        """'
newline|'\n'
name|'resolver'
op|'='
name|'client'
op|'.'
name|'Resolver'
op|'('
name|'servers'
op|'='
op|'['
op|'('
string|"'example.com'"
op|','
number|'53'
op|')'
op|']'
op|')'
newline|'\n'
name|'firstProto'
op|'='
name|'resolver'
op|'.'
name|'_connectedProtocol'
op|'('
op|')'
newline|'\n'
name|'secondProto'
op|'='
name|'resolver'
op|'.'
name|'_connectedProtocol'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'firstProto'
op|'.'
name|'transport'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'secondProto'
op|'.'
name|'transport'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
nl|'\n'
name|'firstProto'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
nl|'\n'
name|'secondProto'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'firstProto'
op|'.'
name|'transport'
op|'.'
name|'stopListening'
op|')'
op|','
nl|'\n'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'secondProto'
op|'.'
name|'transport'
op|'.'
name|'stopListening'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_differentProtocol
dedent|''
name|'def'
name|'test_differentProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{client.Resolver._connectedProtocol} is called once each time a UDP\n        request needs to be issued and the resulting protocol instance is used\n        for that request.\n        """'
newline|'\n'
name|'resolver'
op|'='
name|'client'
op|'.'
name|'Resolver'
op|'('
name|'servers'
op|'='
op|'['
op|'('
string|"'example.com'"
op|','
number|'53'
op|')'
op|']'
op|')'
newline|'\n'
name|'protocols'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|class|FakeProtocol
name|'class'
name|'FakeProtocol'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'='
name|'StubPort'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|query
dedent|''
name|'def'
name|'query'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'query'
op|','
name|'timeout'
op|'='
number|'10'
op|','
name|'id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'protocols'
op|'.'
name|'append'
op|'('
name|'self'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'dns'
op|'.'
name|'Message'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'resolver'
op|'.'
name|'_connectedProtocol'
op|'='
name|'FakeProtocol'
newline|'\n'
name|'resolver'
op|'.'
name|'query'
op|'('
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo.example.com'"
op|')'
op|')'
newline|'\n'
name|'resolver'
op|'.'
name|'query'
op|'('
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'bar.example.com'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'set'
op|'('
name|'protocols'
op|')'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disallowedPort
dedent|''
name|'def'
name|'test_disallowedPort'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a port number is initially selected which cannot be bound, the\n        L{CannotListenError} is handled and another port number is attempted.\n        """'
newline|'\n'
name|'ports'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|class|FakeReactor
name|'class'
name|'FakeReactor'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|listenUDP
indent|'            '
name|'def'
name|'listenUDP'
op|'('
name|'self'
op|','
name|'port'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ports'
op|'.'
name|'append'
op|'('
name|'port'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'ports'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'error'
op|'.'
name|'CannotListenError'
op|'('
name|'None'
op|','
name|'port'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'resolver'
op|'='
name|'client'
op|'.'
name|'Resolver'
op|'('
name|'servers'
op|'='
op|'['
op|'('
string|"'example.com'"
op|','
number|'53'
op|')'
op|']'
op|')'
newline|'\n'
name|'resolver'
op|'.'
name|'_reactor'
op|'='
name|'FakeReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'proto'
op|'='
name|'resolver'
op|'.'
name|'_connectedProtocol'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'set'
op|'('
name|'ports'
op|')'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_differentProtocolAfterTimeout
dedent|''
name|'def'
name|'test_differentProtocolAfterTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When a query issued by L{client.Resolver.query} times out, the retry\n        uses a new protocol instance.\n        """'
newline|'\n'
name|'resolver'
op|'='
name|'client'
op|'.'
name|'Resolver'
op|'('
name|'servers'
op|'='
op|'['
op|'('
string|"'example.com'"
op|','
number|'53'
op|')'
op|']'
op|')'
newline|'\n'
name|'protocols'
op|'='
op|'['
op|']'
newline|'\n'
name|'results'
op|'='
op|'['
name|'defer'
op|'.'
name|'fail'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'DNSQueryTimeoutError'
op|'('
name|'None'
op|')'
op|')'
op|')'
op|','
nl|'\n'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'dns'
op|'.'
name|'Message'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|class|FakeProtocol
name|'class'
name|'FakeProtocol'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'='
name|'StubPort'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|query
dedent|''
name|'def'
name|'query'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'query'
op|','
name|'timeout'
op|'='
number|'10'
op|','
name|'id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'protocols'
op|'.'
name|'append'
op|'('
name|'self'
op|')'
newline|'\n'
name|'return'
name|'results'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'resolver'
op|'.'
name|'_connectedProtocol'
op|'='
name|'FakeProtocol'
newline|'\n'
name|'resolver'
op|'.'
name|'query'
op|'('
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo.example.com'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'set'
op|'('
name|'protocols'
op|')'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_protocolShutDown
dedent|''
name|'def'
name|'test_protocolShutDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        After the L{Deferred} returned by L{DNSDatagramProtocol.query} is\n        called back, the L{DNSDatagramProtocol} is disconnected from its\n        transport.\n        """'
newline|'\n'
name|'resolver'
op|'='
name|'client'
op|'.'
name|'Resolver'
op|'('
name|'servers'
op|'='
op|'['
op|'('
string|"'example.com'"
op|','
number|'53'
op|')'
op|']'
op|')'
newline|'\n'
name|'protocols'
op|'='
op|'['
op|']'
newline|'\n'
name|'result'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|FakeProtocol
name|'class'
name|'FakeProtocol'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'='
name|'StubPort'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|query
dedent|''
name|'def'
name|'query'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'query'
op|','
name|'timeout'
op|'='
number|'10'
op|','
name|'id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'protocols'
op|'.'
name|'append'
op|'('
name|'self'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'resolver'
op|'.'
name|'_connectedProtocol'
op|'='
name|'FakeProtocol'
newline|'\n'
name|'resolver'
op|'.'
name|'query'
op|'('
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo.example.com'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'protocols'
op|'['
number|'0'
op|']'
op|'.'
name|'transport'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'callback'
op|'('
name|'dns'
op|'.'
name|'Message'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'protocols'
op|'['
number|'0'
op|']'
op|'.'
name|'transport'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_protocolShutDownAfterTimeout
dedent|''
name|'def'
name|'test_protocolShutDownAfterTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{DNSDatagramProtocol} created when an interim timeout occurs is\n        also disconnected from its transport after the Deferred returned by its\n        query method completes.\n        """'
newline|'\n'
name|'resolver'
op|'='
name|'client'
op|'.'
name|'Resolver'
op|'('
name|'servers'
op|'='
op|'['
op|'('
string|"'example.com'"
op|','
number|'53'
op|')'
op|']'
op|')'
newline|'\n'
name|'protocols'
op|'='
op|'['
op|']'
newline|'\n'
name|'result'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'results'
op|'='
op|'['
name|'defer'
op|'.'
name|'fail'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'DNSQueryTimeoutError'
op|'('
name|'None'
op|')'
op|')'
op|')'
op|','
nl|'\n'
name|'result'
op|']'
newline|'\n'
nl|'\n'
DECL|class|FakeProtocol
name|'class'
name|'FakeProtocol'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'='
name|'StubPort'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|query
dedent|''
name|'def'
name|'query'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'query'
op|','
name|'timeout'
op|'='
number|'10'
op|','
name|'id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'protocols'
op|'.'
name|'append'
op|'('
name|'self'
op|')'
newline|'\n'
name|'return'
name|'results'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'resolver'
op|'.'
name|'_connectedProtocol'
op|'='
name|'FakeProtocol'
newline|'\n'
name|'resolver'
op|'.'
name|'query'
op|'('
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo.example.com'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'protocols'
op|'['
number|'1'
op|']'
op|'.'
name|'transport'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'callback'
op|'('
name|'dns'
op|'.'
name|'Message'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'protocols'
op|'['
number|'1'
op|']'
op|'.'
name|'transport'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_protocolShutDownAfterFailure
dedent|''
name|'def'
name|'test_protocolShutDownAfterFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the L{Deferred} returned by L{DNSDatagramProtocol.query} fires with\n        a failure, the L{DNSDatagramProtocol} is still disconnected from its\n        transport.\n        """'
newline|'\n'
DECL|class|ExpectedException
name|'class'
name|'ExpectedException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'resolver'
op|'='
name|'client'
op|'.'
name|'Resolver'
op|'('
name|'servers'
op|'='
op|'['
op|'('
string|"'example.com'"
op|','
number|'53'
op|')'
op|']'
op|')'
newline|'\n'
name|'protocols'
op|'='
op|'['
op|']'
newline|'\n'
name|'result'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|FakeProtocol
name|'class'
name|'FakeProtocol'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'='
name|'StubPort'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|query
dedent|''
name|'def'
name|'query'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'query'
op|','
name|'timeout'
op|'='
number|'10'
op|','
name|'id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'protocols'
op|'.'
name|'append'
op|'('
name|'self'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'resolver'
op|'.'
name|'_connectedProtocol'
op|'='
name|'FakeProtocol'
newline|'\n'
name|'queryResult'
op|'='
name|'resolver'
op|'.'
name|'query'
op|'('
name|'dns'
op|'.'
name|'Query'
op|'('
string|"'foo.example.com'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'protocols'
op|'['
number|'0'
op|']'
op|'.'
name|'transport'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'ExpectedException'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'protocols'
op|'['
number|'0'
op|']'
op|'.'
name|'transport'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'queryResult'
op|','
name|'ExpectedException'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ClientTestCase
dedent|''
dedent|''
name|'class'
name|'ClientTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Replace the resolver with a FakeResolver\n        """'
newline|'\n'
name|'client'
op|'.'
name|'theResolver'
op|'='
name|'FakeResolver'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hostname'
op|'='
string|"'example.com'"
newline|'\n'
name|'self'
op|'.'
name|'ghbntest'
op|'='
string|"'getHostByNameTest'"
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        By setting the resolver to None, it will be recreated next time a name\n        lookup is done.\n        """'
newline|'\n'
name|'client'
op|'.'
name|'theResolver'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|checkResult
dedent|''
name|'def'
name|'checkResult'
op|'('
name|'self'
op|','
op|'('
name|'results'
op|','
name|'authority'
op|','
name|'additional'
op|')'
op|','
name|'qtype'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that the result is the same query type as what is expected.\n        """'
newline|'\n'
name|'result'
op|'='
name|'results'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'result'
op|'.'
name|'name'
op|')'
op|','
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'.'
name|'type'
op|','
name|'qtype'
op|')'
newline|'\n'
nl|'\n'
DECL|member|checkGetHostByName
dedent|''
name|'def'
name|'checkGetHostByName'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the getHostByName query returns the 127.0.0.1 address.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
string|"'127.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getHostByName
dedent|''
name|'def'
name|'test_getHostByName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        do a getHostByName of a value that should return 127.0.0.1.\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'getHostByName'
op|'('
name|'self'
op|'.'
name|'ghbntest'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkGetHostByName'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupAddress
dedent|''
name|'def'
name|'test_lookupAddress'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Do a lookup and test that the resolver will issue the correct type of\n        query type. We do this by checking that FakeResolver returns a result\n        record with the same query type as what we issued.\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupAddress'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'A'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupIPV6Address
dedent|''
name|'def'
name|'test_lookupIPV6Address'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupIPV6Address'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'AAAA'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupAddress6
dedent|''
name|'def'
name|'test_lookupAddress6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupAddress6'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'A6'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupNameservers
dedent|''
name|'def'
name|'test_lookupNameservers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupNameservers'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'NS'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupCanonicalName
dedent|''
name|'def'
name|'test_lookupCanonicalName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupCanonicalName'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'CNAME'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupAuthority
dedent|''
name|'def'
name|'test_lookupAuthority'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupAuthority'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'SOA'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupMailBox
dedent|''
name|'def'
name|'test_lookupMailBox'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupMailBox'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'MB'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupMailGroup
dedent|''
name|'def'
name|'test_lookupMailGroup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupMailGroup'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'MG'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupMailRename
dedent|''
name|'def'
name|'test_lookupMailRename'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupMailRename'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'MR'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupNull
dedent|''
name|'def'
name|'test_lookupNull'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupNull'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'NULL'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupWellKnownServices
dedent|''
name|'def'
name|'test_lookupWellKnownServices'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupWellKnownServices'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'WKS'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupPointer
dedent|''
name|'def'
name|'test_lookupPointer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupPointer'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'PTR'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupHostInfo
dedent|''
name|'def'
name|'test_lookupHostInfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupHostInfo'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'HINFO'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupMailboxInfo
dedent|''
name|'def'
name|'test_lookupMailboxInfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupMailboxInfo'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'MINFO'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupMailExchange
dedent|''
name|'def'
name|'test_lookupMailExchange'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupMailExchange'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'MX'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupText
dedent|''
name|'def'
name|'test_lookupText'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupText'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'TXT'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupResponsibility
dedent|''
name|'def'
name|'test_lookupResponsibility'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupResponsibility'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'RP'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupAFSDatabase
dedent|''
name|'def'
name|'test_lookupAFSDatabase'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupAFSDatabase'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'AFSDB'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupService
dedent|''
name|'def'
name|'test_lookupService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupService'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'SRV'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupZone
dedent|''
name|'def'
name|'test_lookupZone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupZone'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'AXFR'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_lookupAllRecords
dedent|''
name|'def'
name|'test_lookupAllRecords'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupAllRecords'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'ALL_RECORDS'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_lookupNamingAuthorityPointer
dedent|''
name|'def'
name|'test_lookupNamingAuthorityPointer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{test_lookupAddress}\n        """'
newline|'\n'
name|'d'
op|'='
name|'client'
op|'.'
name|'lookupNamingAuthorityPointer'
op|'('
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'checkResult'
op|','
name|'dns'
op|'.'
name|'NAPTR'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ThreadedResolverTests
dedent|''
dedent|''
name|'class'
name|'ThreadedResolverTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{client.ThreadedResolver}.\n    """'
newline|'\n'
DECL|member|test_deprecated
name|'def'
name|'test_deprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{client.ThreadedResolver} is deprecated.  Instantiating it emits a\n        deprecation warning pointing at the code that does the instantiation.\n        """'
newline|'\n'
name|'client'
op|'.'
name|'ThreadedResolver'
op|'('
op|')'
newline|'\n'
name|'warnings'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
name|'offendingFunctions'
op|'='
op|'['
name|'self'
op|'.'
name|'test_deprecated'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
nl|'\n'
string|'"twisted.names.client.ThreadedResolver is deprecated since "'
nl|'\n'
string|'"Twisted 9.0, use twisted.internet.base.ThreadedResolver "'
nl|'\n'
string|'"instead."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'category'"
op|']'
op|','
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'warnings'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

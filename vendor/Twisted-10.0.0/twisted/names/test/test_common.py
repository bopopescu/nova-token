begin_unit
comment|'# Copyright (c) 2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.names.common}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'common'
name|'import'
name|'ResolverBase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'dns'
name|'import'
name|'EFORMAT'
op|','
name|'ESERVER'
op|','
name|'ENAME'
op|','
name|'ENOTIMP'
op|','
name|'EREFUSED'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'error'
name|'import'
name|'DNSFormatError'
op|','
name|'DNSServerError'
op|','
name|'DNSNameError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'error'
name|'import'
name|'DNSNotImplementedError'
op|','
name|'DNSQueryRefusedError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'error'
name|'import'
name|'DNSUnknownError'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExceptionForCodeTests
name|'class'
name|'ExceptionForCodeTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{ResolverBase.exceptionForCode}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'exceptionForCode'
op|'='
name|'ResolverBase'
op|'('
op|')'
op|'.'
name|'exceptionForCode'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_eformat
dedent|''
name|'def'
name|'test_eformat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ResolverBase.exceptionForCode} converts L{EFORMAT} to\n        L{DNSFormatError}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'exceptionForCode'
op|'('
name|'EFORMAT'
op|')'
op|','
name|'DNSFormatError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_eserver
dedent|''
name|'def'
name|'test_eserver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ResolverBase.exceptionForCode} converts L{ESERVER} to\n        L{DNSServerError}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'exceptionForCode'
op|'('
name|'ESERVER'
op|')'
op|','
name|'DNSServerError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ename
dedent|''
name|'def'
name|'test_ename'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ResolverBase.exceptionForCode} converts L{ENAME} to L{DNSNameError}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'exceptionForCode'
op|'('
name|'ENAME'
op|')'
op|','
name|'DNSNameError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_enotimp
dedent|''
name|'def'
name|'test_enotimp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ResolverBase.exceptionForCode} converts L{ENOTIMP} to\n        L{DNSNotImplementedError}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'exceptionForCode'
op|'('
name|'ENOTIMP'
op|')'
op|','
name|'DNSNotImplementedError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_erefused
dedent|''
name|'def'
name|'test_erefused'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ResolverBase.exceptionForCode} converts L{EREFUSED} to\n        L{DNSQueryRefusedError}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'exceptionForCode'
op|'('
name|'EREFUSED'
op|')'
op|','
name|'DNSQueryRefusedError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_other
dedent|''
name|'def'
name|'test_other'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ResolverBase.exceptionForCode} converts any other response code to\n        L{DNSUnknownError}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'exceptionForCode'
op|'('
name|'object'
op|'('
op|')'
op|')'
op|','
name|'DNSUnknownError'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

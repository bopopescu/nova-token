begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTest cases for Twisted.names\' root resolver.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'random'
name|'import'
name|'randrange'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
op|'.'
name|'verify'
name|'import'
name|'verifyClass'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'log'
name|'import'
name|'msg'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
op|','
name|'succeed'
op|','
name|'gatherResults'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'task'
name|'import'
name|'Clock'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'address'
name|'import'
name|'IPv4Address'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IReactorUDP'
op|','
name|'IUDPTransport'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'root'
name|'import'
name|'Resolver'
op|','
name|'lookupNameservers'
op|','
name|'lookupAddress'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'root'
name|'import'
name|'extractAuthority'
op|','
name|'discoverAuthority'
op|','
name|'retry'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'dns'
name|'import'
name|'IN'
op|','
name|'HS'
op|','
name|'A'
op|','
name|'NS'
op|','
name|'CNAME'
op|','
name|'OK'
op|','
name|'ENAME'
op|','
name|'Record_CNAME'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'dns'
name|'import'
name|'Query'
op|','
name|'Message'
op|','
name|'RRHeader'
op|','
name|'Record_A'
op|','
name|'Record_NS'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'error'
name|'import'
name|'DNSNameError'
op|','
name|'ResolverError'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MemoryDatagramTransport
name|'class'
name|'MemoryDatagramTransport'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This L{IUDPTransport} implementation enforces the usual connection rules\n    and captures sent traffic in a list for later inspection.\n\n    @ivar _host: The host address to which this transport is bound.\n    @ivar _protocol: The protocol connected to this transport.\n    @ivar _sentPackets: A C{list} of two-tuples of the datagrams passed to\n        C{write} and the addresses to which they are destined.\n\n    @ivar _connectedTo: C{None} if this transport is unconnected, otherwise an\n        address to which all traffic is supposedly sent.\n\n    @ivar _maxPacketSize: An C{int} giving the maximum length of a datagram\n        which will be successfully handled by C{write}.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IUDPTransport'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'protocol'
op|','
name|'maxPacketSize'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_host'
op|'='
name|'host'
newline|'\n'
name|'self'
op|'.'
name|'_protocol'
op|'='
name|'protocol'
newline|'\n'
name|'self'
op|'.'
name|'_sentPackets'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_connectedTo'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_maxPacketSize'
op|'='
name|'maxPacketSize'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the address which this transport is pretending to be bound\n        to.\n        """'
newline|'\n'
name|'return'
name|'IPv4Address'
op|'('
string|"'UDP'"
op|','
op|'*'
name|'self'
op|'.'
name|'_host'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connect
dedent|''
name|'def'
name|'connect'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connect this transport to the given address.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_connectedTo'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Already connected"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_connectedTo'
op|'='
op|'('
name|'host'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'datagram'
op|','
name|'addr'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send the given datagram.\n        """'
newline|'\n'
name|'if'
name|'addr'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'addr'
op|'='
name|'self'
op|'.'
name|'_connectedTo'
newline|'\n'
dedent|''
name|'if'
name|'addr'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Need an address"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'datagram'
op|')'
op|'>'
name|'self'
op|'.'
name|'_maxPacketSize'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Packet too big"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_sentPackets'
op|'.'
name|'append'
op|'('
op|'('
name|'datagram'
op|','
name|'addr'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stopListening
dedent|''
name|'def'
name|'stopListening'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Shut down this transport.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_protocol'
op|'.'
name|'stopProtocol'
op|'('
op|')'
newline|'\n'
name|'return'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'verifyClass'
op|'('
name|'IUDPTransport'
op|','
name|'MemoryDatagramTransport'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MemoryReactor
name|'class'
name|'MemoryReactor'
op|'('
name|'Clock'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An L{IReactorTime} and L{IReactorUDP} provider.\n\n    Time is controlled deterministically via the base class, L{Clock}.  UDP is\n    handled in-memory by connecting protocols to instances of\n    L{MemoryDatagramTransport}.\n\n    @ivar udpPorts: A C{dict} mapping port numbers to instances of\n        L{MemoryDatagramTransport}.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IReactorUDP'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Clock'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'udpPorts'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|listenUDP
dedent|''
name|'def'
name|'listenUDP'
op|'('
name|'self'
op|','
name|'port'
op|','
name|'protocol'
op|','
name|'interface'
op|'='
string|"''"
op|','
name|'maxPacketSize'
op|'='
number|'8192'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Pretend to bind a UDP port and connect the given protocol to it.\n        """'
newline|'\n'
name|'if'
name|'port'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'port'
op|'='
name|'randrange'
op|'('
number|'1'
op|','
number|'2'
op|'**'
number|'16'
op|')'
newline|'\n'
name|'if'
name|'port'
name|'not'
name|'in'
name|'self'
op|'.'
name|'udpPorts'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'port'
name|'in'
name|'self'
op|'.'
name|'udpPorts'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Address in use"'
op|')'
newline|'\n'
dedent|''
name|'transport'
op|'='
name|'MemoryDatagramTransport'
op|'('
nl|'\n'
op|'('
name|'interface'
op|','
name|'port'
op|')'
op|','
name|'protocol'
op|','
name|'maxPacketSize'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'udpPorts'
op|'['
name|'port'
op|']'
op|'='
name|'transport'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'return'
name|'transport'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'verifyClass'
op|'('
name|'IReactorUDP'
op|','
name|'MemoryReactor'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|RootResolverTests
name|'class'
name|'RootResolverTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{twisted.names.root.Resolver}.\n    """'
newline|'\n'
DECL|member|_queryTest
name|'def'
name|'_queryTest'
op|'('
name|'self'
op|','
name|'filter'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Invoke L{Resolver._query} and verify that it sends the correct DNS\n        query.  Deliver a canned response to the query and return whatever the\n        L{Deferred} returned by L{Resolver._query} fires with.\n\n        @param filter: The value to pass for the C{filter} parameter to\n            L{Resolver._query}.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'MemoryReactor'
op|'('
op|')'
newline|'\n'
name|'resolver'
op|'='
name|'Resolver'
op|'('
op|'['
op|']'
op|','
name|'reactor'
op|'='
name|'reactor'
op|')'
newline|'\n'
name|'d'
op|'='
name|'resolver'
op|'.'
name|'_query'
op|'('
nl|'\n'
name|'Query'
op|'('
string|"'foo.example.com'"
op|','
name|'A'
op|','
name|'IN'
op|')'
op|','
op|'['
op|'('
string|"'1.1.2.3'"
op|','
number|'1053'
op|')'
op|']'
op|','
op|'('
number|'30'
op|','
op|')'
op|','
nl|'\n'
name|'filter'
op|')'
newline|'\n'
nl|'\n'
comment|'# A UDP port should have been started.'
nl|'\n'
name|'portNumber'
op|','
name|'transport'
op|'='
name|'reactor'
op|'.'
name|'udpPorts'
op|'.'
name|'popitem'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# And a DNS packet sent.'
nl|'\n'
op|'['
op|'('
name|'packet'
op|','
name|'address'
op|')'
op|']'
op|'='
name|'transport'
op|'.'
name|'_sentPackets'
newline|'\n'
nl|'\n'
name|'msg'
op|'='
name|'Message'
op|'('
op|')'
newline|'\n'
name|'msg'
op|'.'
name|'fromStr'
op|'('
name|'packet'
op|')'
newline|'\n'
nl|'\n'
comment|'# It should be a query with the parameters used above.'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'.'
name|'queries'
op|','
op|'['
name|'Query'
op|'('
string|"'foo.example.com'"
op|','
name|'A'
op|','
name|'IN'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'.'
name|'answers'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'.'
name|'authority'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'.'
name|'additional'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'response'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'response'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'response'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Once a reply is received, the Deferred should fire.'
nl|'\n'
name|'del'
name|'msg'
op|'.'
name|'queries'
op|'['
op|':'
op|']'
newline|'\n'
name|'msg'
op|'.'
name|'answer'
op|'='
number|'1'
newline|'\n'
name|'msg'
op|'.'
name|'answers'
op|'.'
name|'append'
op|'('
name|'RRHeader'
op|'('
string|"'foo.example.com'"
op|','
name|'payload'
op|'='
name|'Record_A'
op|'('
string|"'5.8.13.21'"
op|')'
op|')'
op|')'
newline|'\n'
name|'transport'
op|'.'
name|'_protocol'
op|'.'
name|'datagramReceived'
op|'('
name|'msg'
op|'.'
name|'toStr'
op|'('
op|')'
op|','
op|'('
string|"'1.1.2.3'"
op|','
number|'1053'
op|')'
op|')'
newline|'\n'
name|'return'
name|'response'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_filteredQuery
dedent|''
name|'def'
name|'test_filteredQuery'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Resolver._query} accepts a L{Query} instance and an address, issues\n        the query, and returns a L{Deferred} which fires with the response to\n        the query.  If a true value is passed for the C{filter} parameter, the\n        result is a three-tuple of lists of records.\n        """'
newline|'\n'
name|'answer'
op|','
name|'authority'
op|','
name|'additional'
op|'='
name|'self'
op|'.'
name|'_queryTest'
op|'('
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'answer'
op|','
nl|'\n'
op|'['
name|'RRHeader'
op|'('
string|"'foo.example.com'"
op|','
name|'payload'
op|'='
name|'Record_A'
op|'('
string|"'5.8.13.21'"
op|','
name|'ttl'
op|'='
number|'0'
op|')'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'authority'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'additional'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unfilteredQuery
dedent|''
name|'def'
name|'test_unfilteredQuery'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Similar to L{test_filteredQuery}, but for the case where a false value\n        is passed for the C{filter} parameter.  In this case, the result is a\n        L{Message} instance.\n        """'
newline|'\n'
name|'message'
op|'='
name|'self'
op|'.'
name|'_queryTest'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'message'
op|','
name|'Message'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'message'
op|'.'
name|'queries'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'message'
op|'.'
name|'answers'
op|','
nl|'\n'
op|'['
name|'RRHeader'
op|'('
string|"'foo.example.com'"
op|','
name|'payload'
op|'='
name|'Record_A'
op|'('
string|"'5.8.13.21'"
op|','
name|'ttl'
op|'='
number|'0'
op|')'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'message'
op|'.'
name|'authority'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'message'
op|'.'
name|'additional'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_respond
dedent|''
name|'def'
name|'_respond'
op|'('
name|'self'
op|','
name|'answers'
op|'='
op|'['
op|']'
op|','
name|'authority'
op|'='
op|'['
op|']'
op|','
name|'additional'
op|'='
op|'['
op|']'
op|','
name|'rCode'
op|'='
name|'OK'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a L{Message} suitable for use as a response to a query.\n\n        @param answers: A C{list} of two-tuples giving data for the answers\n            section of the message.  The first element of each tuple is a name\n            for the L{RRHeader}.  The second element is the payload.\n        @param authority: A C{list} like C{answers}, but for the authority\n            section of the response.\n        @param additional: A C{list} like C{answers}, but for the\n            additional section of the response.\n        @param rCode: The response code the message will be created with.\n\n        @return: A new L{Message} initialized with the given values.\n        """'
newline|'\n'
name|'response'
op|'='
name|'Message'
op|'('
name|'rCode'
op|'='
name|'rCode'
op|')'
newline|'\n'
name|'for'
op|'('
name|'section'
op|','
name|'data'
op|')'
name|'in'
op|'['
op|'('
name|'response'
op|'.'
name|'answers'
op|','
name|'answers'
op|')'
op|','
nl|'\n'
op|'('
name|'response'
op|'.'
name|'authority'
op|','
name|'authority'
op|')'
op|','
nl|'\n'
op|'('
name|'response'
op|'.'
name|'additional'
op|','
name|'additional'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'section'
op|'.'
name|'extend'
op|'('
op|'['
nl|'\n'
name|'RRHeader'
op|'('
name|'name'
op|','
name|'record'
op|'.'
name|'TYPE'
op|','
name|'getattr'
op|'('
name|'record'
op|','
string|"'CLASS'"
op|','
name|'IN'
op|')'
op|','
nl|'\n'
name|'payload'
op|'='
name|'record'
op|')'
nl|'\n'
name|'for'
op|'('
name|'name'
op|','
name|'record'
op|')'
name|'in'
name|'data'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'response'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getResolver
dedent|''
name|'def'
name|'_getResolver'
op|'('
name|'self'
op|','
name|'serverResponses'
op|','
name|'maximumQueries'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create and return a new L{root.Resolver} modified to resolve queries\n        against the record data represented by C{servers}.\n\n        @param serverResponses: A mapping from dns server addresses to\n            mappings.  The inner mappings are from query two-tuples (name,\n            type) to dictionaries suitable for use as **arguments to\n            L{_respond}.  See that method for details.\n        """'
newline|'\n'
name|'roots'
op|'='
op|'['
string|"'1.1.2.3'"
op|']'
newline|'\n'
name|'resolver'
op|'='
name|'Resolver'
op|'('
name|'roots'
op|','
name|'maximumQueries'
op|')'
newline|'\n'
nl|'\n'
DECL|function|query
name|'def'
name|'query'
op|'('
name|'query'
op|','
name|'serverAddresses'
op|','
name|'timeout'
op|','
name|'filter'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'('
string|'"Query for QNAME %s at %r"'
op|'%'
op|'('
name|'query'
op|'.'
name|'name'
op|','
name|'serverAddresses'
op|')'
op|')'
newline|'\n'
name|'for'
name|'addr'
name|'in'
name|'serverAddresses'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'server'
op|'='
name|'serverResponses'
op|'['
name|'addr'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'records'
op|'='
name|'server'
op|'['
name|'str'
op|'('
name|'query'
op|'.'
name|'name'
op|')'
op|','
name|'query'
op|'.'
name|'type'
op|']'
newline|'\n'
name|'return'
name|'succeed'
op|'('
name|'self'
op|'.'
name|'_respond'
op|'('
op|'**'
name|'records'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'resolver'
op|'.'
name|'_query'
op|'='
name|'query'
newline|'\n'
name|'return'
name|'resolver'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_lookupAddress
dedent|''
name|'def'
name|'test_lookupAddress'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{root.Resolver.lookupAddress} looks up the I{A} records for the\n        specified hostname by first querying one of the root servers the\n        resolver was created with and then following the authority delegations\n        until a result is received.\n        """'
newline|'\n'
name|'servers'
op|'='
op|'{'
nl|'\n'
op|'('
string|"'1.1.2.3'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
op|'('
string|"'foo.example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'authority'"
op|':'
op|'['
op|'('
string|"'foo.example.com'"
op|','
name|'Record_NS'
op|'('
string|"'ns1.example.com'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
string|"'additional'"
op|':'
op|'['
op|'('
string|"'ns1.example.com'"
op|','
name|'Record_A'
op|'('
string|"'34.55.89.144'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'('
string|"'34.55.89.144'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
op|'('
string|"'foo.example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'answers'"
op|':'
op|'['
op|'('
string|"'foo.example.com'"
op|','
name|'Record_A'
op|'('
string|"'10.0.0.1'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'resolver'
op|'='
name|'self'
op|'.'
name|'_getResolver'
op|'('
name|'servers'
op|')'
newline|'\n'
name|'d'
op|'='
name|'resolver'
op|'.'
name|'lookupAddress'
op|'('
string|"'foo.example.com'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
op|'('
name|'ans'
op|','
name|'auth'
op|','
name|'add'
op|')'
op|':'
name|'ans'
op|'['
number|'0'
op|']'
op|'.'
name|'payload'
op|'.'
name|'dottedQuad'
op|'('
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|"'10.0.0.1'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_lookupChecksClass
dedent|''
name|'def'
name|'test_lookupChecksClass'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a response includes a record with a class different from the one\n        in the query, it is ignored and lookup continues until a record with\n        the right class is found.\n        """'
newline|'\n'
name|'badClass'
op|'='
name|'Record_A'
op|'('
string|"'10.0.0.1'"
op|')'
newline|'\n'
name|'badClass'
op|'.'
name|'CLASS'
op|'='
name|'HS'
newline|'\n'
name|'servers'
op|'='
op|'{'
nl|'\n'
op|'('
string|"'1.1.2.3'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
op|'('
string|"'foo.example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'answers'"
op|':'
op|'['
op|'('
string|"'foo.example.com'"
op|','
name|'badClass'
op|')'
op|']'
op|','
nl|'\n'
string|"'authority'"
op|':'
op|'['
op|'('
string|"'foo.example.com'"
op|','
name|'Record_NS'
op|'('
string|"'ns1.example.com'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
string|"'additional'"
op|':'
op|'['
op|'('
string|"'ns1.example.com'"
op|','
name|'Record_A'
op|'('
string|"'10.0.0.2'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'('
string|"'10.0.0.2'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
op|'('
string|"'foo.example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'answers'"
op|':'
op|'['
op|'('
string|"'foo.example.com'"
op|','
name|'Record_A'
op|'('
string|"'10.0.0.3'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'resolver'
op|'='
name|'self'
op|'.'
name|'_getResolver'
op|'('
name|'servers'
op|')'
newline|'\n'
name|'d'
op|'='
name|'resolver'
op|'.'
name|'lookupAddress'
op|'('
string|"'foo.example.com'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
op|'('
name|'ans'
op|','
name|'auth'
op|','
name|'add'
op|')'
op|':'
name|'ans'
op|'['
number|'0'
op|']'
op|'.'
name|'payload'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'Record_A'
op|'('
string|"'10.0.0.3'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_missingGlue
dedent|''
name|'def'
name|'test_missingGlue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an intermediate response includes no glue records for the\n        authorities, separate queries are made to find those addresses.\n        """'
newline|'\n'
name|'servers'
op|'='
op|'{'
nl|'\n'
op|'('
string|"'1.1.2.3'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
op|'('
string|"'foo.example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'authority'"
op|':'
op|'['
op|'('
string|"'foo.example.com'"
op|','
name|'Record_NS'
op|'('
string|"'ns1.example.org'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
comment|'# Conspicuous lack of an additional section naming ns1.example.com'
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'('
string|"'ns1.example.org'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'answers'"
op|':'
op|'['
op|'('
string|"'ns1.example.org'"
op|','
name|'Record_A'
op|'('
string|"'10.0.0.1'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'('
string|"'10.0.0.1'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
op|'('
string|"'foo.example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'answers'"
op|':'
op|'['
op|'('
string|"'foo.example.com'"
op|','
name|'Record_A'
op|'('
string|"'10.0.0.2'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'resolver'
op|'='
name|'self'
op|'.'
name|'_getResolver'
op|'('
name|'servers'
op|')'
newline|'\n'
name|'d'
op|'='
name|'resolver'
op|'.'
name|'lookupAddress'
op|'('
string|"'foo.example.com'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
op|'('
name|'ans'
op|','
name|'auth'
op|','
name|'add'
op|')'
op|':'
name|'ans'
op|'['
number|'0'
op|']'
op|'.'
name|'payload'
op|'.'
name|'dottedQuad'
op|'('
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|"'10.0.0.2'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_missingName
dedent|''
name|'def'
name|'test_missingName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a name is missing, L{Resolver.lookupAddress} returns a L{Deferred}\n        which fails with L{DNSNameError}.\n        """'
newline|'\n'
name|'servers'
op|'='
op|'{'
nl|'\n'
op|'('
string|"'1.1.2.3'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
op|'('
string|"'foo.example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'rCode'"
op|':'
name|'ENAME'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'resolver'
op|'='
name|'self'
op|'.'
name|'_getResolver'
op|'('
name|'servers'
op|')'
newline|'\n'
name|'d'
op|'='
name|'resolver'
op|'.'
name|'lookupAddress'
op|'('
string|"'foo.example.com'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'DNSNameError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_answerless
dedent|''
name|'def'
name|'test_answerless'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a query is responded to with no answers or nameserver records, the\n        L{Deferred} returned by L{Resolver.lookupAddress} fires with\n        L{ResolverError}.\n        """'
newline|'\n'
name|'servers'
op|'='
op|'{'
nl|'\n'
op|'('
string|"'1.1.2.3'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
op|'('
string|"'example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'resolver'
op|'='
name|'self'
op|'.'
name|'_getResolver'
op|'('
name|'servers'
op|')'
newline|'\n'
name|'d'
op|'='
name|'resolver'
op|'.'
name|'lookupAddress'
op|'('
string|"'example.com'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ResolverError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_delegationLookupError
dedent|''
name|'def'
name|'test_delegationLookupError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If there is an error resolving the nameserver in a delegation response,\n        the L{Deferred} returned by L{Resolver.lookupAddress} fires with that\n        error.\n        """'
newline|'\n'
name|'servers'
op|'='
op|'{'
nl|'\n'
op|'('
string|"'1.1.2.3'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
op|'('
string|"'example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'authority'"
op|':'
op|'['
op|'('
string|"'example.com'"
op|','
name|'Record_NS'
op|'('
string|"'ns1.example.com'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'('
string|"'ns1.example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'rCode'"
op|':'
name|'ENAME'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'resolver'
op|'='
name|'self'
op|'.'
name|'_getResolver'
op|'('
name|'servers'
op|')'
newline|'\n'
name|'d'
op|'='
name|'resolver'
op|'.'
name|'lookupAddress'
op|'('
string|"'example.com'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'DNSNameError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_delegationLookupEmpty
dedent|''
name|'def'
name|'test_delegationLookupEmpty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If there are no records in the response to a lookup of a delegation\n        nameserver, the L{Deferred} returned by L{Resolver.lookupAddress} fires\n        with L{ResolverError}.\n        """'
newline|'\n'
name|'servers'
op|'='
op|'{'
nl|'\n'
op|'('
string|"'1.1.2.3'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
op|'('
string|"'example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'authority'"
op|':'
op|'['
op|'('
string|"'example.com'"
op|','
name|'Record_NS'
op|'('
string|"'ns1.example.com'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'('
string|"'ns1.example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'resolver'
op|'='
name|'self'
op|'.'
name|'_getResolver'
op|'('
name|'servers'
op|')'
newline|'\n'
name|'d'
op|'='
name|'resolver'
op|'.'
name|'lookupAddress'
op|'('
string|"'example.com'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ResolverError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_lookupNameservers
dedent|''
name|'def'
name|'test_lookupNameservers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Resolver.lookupNameservers} is like L{Resolver.lookupAddress}, except\n        it queries for I{NS} records instead of I{A} records.\n        """'
newline|'\n'
name|'servers'
op|'='
op|'{'
nl|'\n'
op|'('
string|"'1.1.2.3'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
op|'('
string|"'example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'rCode'"
op|':'
name|'ENAME'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'('
string|"'example.com'"
op|','
name|'NS'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'answers'"
op|':'
op|'['
op|'('
string|"'example.com'"
op|','
name|'Record_NS'
op|'('
string|"'ns1.example.com'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'resolver'
op|'='
name|'self'
op|'.'
name|'_getResolver'
op|'('
name|'servers'
op|')'
newline|'\n'
name|'d'
op|'='
name|'resolver'
op|'.'
name|'lookupNameservers'
op|'('
string|"'example.com'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
op|'('
name|'ans'
op|','
name|'auth'
op|','
name|'add'
op|')'
op|':'
name|'str'
op|'('
name|'ans'
op|'['
number|'0'
op|']'
op|'.'
name|'payload'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|"'ns1.example.com'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_returnCanonicalName
dedent|''
name|'def'
name|'test_returnCanonicalName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a I{CNAME} record is encountered as the answer to a query for\n        another record type, that record is returned as the answer.\n        """'
newline|'\n'
name|'servers'
op|'='
op|'{'
nl|'\n'
op|'('
string|"'1.1.2.3'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
op|'('
string|"'example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'answers'"
op|':'
op|'['
op|'('
string|"'example.com'"
op|','
name|'Record_CNAME'
op|'('
string|"'example.net'"
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'example.net'"
op|','
name|'Record_A'
op|'('
string|"'10.0.0.7'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'resolver'
op|'='
name|'self'
op|'.'
name|'_getResolver'
op|'('
name|'servers'
op|')'
newline|'\n'
name|'d'
op|'='
name|'resolver'
op|'.'
name|'lookupAddress'
op|'('
string|"'example.com'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
op|'('
name|'ans'
op|','
name|'auth'
op|','
name|'add'
op|')'
op|':'
name|'ans'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|','
nl|'\n'
op|'['
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'CNAME'
op|','
name|'payload'
op|'='
name|'Record_CNAME'
op|'('
string|"'example.net'"
op|')'
op|')'
op|','
nl|'\n'
name|'RRHeader'
op|'('
string|"'example.net'"
op|','
name|'A'
op|','
name|'payload'
op|'='
name|'Record_A'
op|'('
string|"'10.0.0.7'"
op|')'
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_followCanonicalName
dedent|''
name|'def'
name|'test_followCanonicalName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If no record of the requested type is included in a response, but a\n        I{CNAME} record for the query name is included, queries are made to\n        resolve the value of the I{CNAME}.\n        """'
newline|'\n'
name|'servers'
op|'='
op|'{'
nl|'\n'
op|'('
string|"'1.1.2.3'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
op|'('
string|"'example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'answers'"
op|':'
op|'['
op|'('
string|"'example.com'"
op|','
name|'Record_CNAME'
op|'('
string|"'example.net'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'('
string|"'example.net'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'answers'"
op|':'
op|'['
op|'('
string|"'example.net'"
op|','
name|'Record_A'
op|'('
string|"'10.0.0.5'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'resolver'
op|'='
name|'self'
op|'.'
name|'_getResolver'
op|'('
name|'servers'
op|')'
newline|'\n'
name|'d'
op|'='
name|'resolver'
op|'.'
name|'lookupAddress'
op|'('
string|"'example.com'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
op|'('
name|'ans'
op|','
name|'auth'
op|','
name|'add'
op|')'
op|':'
name|'ans'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|','
nl|'\n'
op|'['
name|'RRHeader'
op|'('
string|"'example.com'"
op|','
name|'CNAME'
op|','
name|'payload'
op|'='
name|'Record_CNAME'
op|'('
string|"'example.net'"
op|')'
op|')'
op|','
nl|'\n'
name|'RRHeader'
op|'('
string|"'example.net'"
op|','
name|'A'
op|','
name|'payload'
op|'='
name|'Record_A'
op|'('
string|"'10.0.0.5'"
op|')'
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_detectCanonicalNameLoop
dedent|''
name|'def'
name|'test_detectCanonicalNameLoop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If there is a cycle between I{CNAME} records in a response, this is\n        detected and the L{Deferred} returned by the lookup method fails\n        with L{ResolverError}.\n        """'
newline|'\n'
name|'servers'
op|'='
op|'{'
nl|'\n'
op|'('
string|"'1.1.2.3'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
op|'('
string|"'example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'answers'"
op|':'
op|'['
op|'('
string|"'example.com'"
op|','
name|'Record_CNAME'
op|'('
string|"'example.net'"
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'example.net'"
op|','
name|'Record_CNAME'
op|'('
string|"'example.com'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'resolver'
op|'='
name|'self'
op|'.'
name|'_getResolver'
op|'('
name|'servers'
op|')'
newline|'\n'
name|'d'
op|'='
name|'resolver'
op|'.'
name|'lookupAddress'
op|'('
string|"'example.com'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ResolverError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_boundedQueries
dedent|''
name|'def'
name|'test_boundedQueries'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Resolver.lookupAddress} won\'t issue more queries following\n        delegations than the limit passed to its initializer.\n        """'
newline|'\n'
name|'servers'
op|'='
op|'{'
nl|'\n'
op|'('
string|"'1.1.2.3'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
comment|'# First query - force it to start over with a name lookup of'
nl|'\n'
comment|'# ns1.example.com'
nl|'\n'
op|'('
string|"'example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'authority'"
op|':'
op|'['
op|'('
string|"'example.com'"
op|','
name|'Record_NS'
op|'('
string|"'ns1.example.com'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
comment|'# Second query - let it resume the original lookup with the'
nl|'\n'
comment|'# address of the nameserver handling the delegation.'
nl|'\n'
op|'('
string|"'ns1.example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'answers'"
op|':'
op|'['
op|'('
string|"'ns1.example.com'"
op|','
name|'Record_A'
op|'('
string|"'10.0.0.2'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'('
string|"'10.0.0.2'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
comment|'# Third query - let it jump straight to asking the'
nl|'\n'
comment|'# delegation server by including its address here (different'
nl|'\n'
comment|'# case from the first query).'
nl|'\n'
op|'('
string|"'example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'authority'"
op|':'
op|'['
op|'('
string|"'example.com'"
op|','
name|'Record_NS'
op|'('
string|"'ns2.example.com'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
string|"'additional'"
op|':'
op|'['
op|'('
string|"'ns2.example.com'"
op|','
name|'Record_A'
op|'('
string|"'10.0.0.3'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'('
string|"'10.0.0.3'"
op|','
number|'53'
op|')'
op|':'
op|'{'
nl|'\n'
comment|"# Fourth query - give it the answer, we're done."
nl|'\n'
op|'('
string|"'example.com'"
op|','
name|'A'
op|')'
op|':'
op|'{'
nl|'\n'
string|"'answers'"
op|':'
op|'['
op|'('
string|"'example.com'"
op|','
name|'Record_A'
op|'('
string|"'10.0.0.4'"
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Make two resolvers.  One which is allowed to make 3 queries'
nl|'\n'
comment|'# maximum, and so will fail, and on which may make 4, and so should'
nl|'\n'
comment|'# succeed.'
nl|'\n'
name|'failer'
op|'='
name|'self'
op|'.'
name|'_getResolver'
op|'('
name|'servers'
op|','
number|'3'
op|')'
newline|'\n'
name|'failD'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
nl|'\n'
name|'failer'
op|'.'
name|'lookupAddress'
op|'('
string|"'example.com'"
op|')'
op|','
name|'ResolverError'
op|')'
newline|'\n'
nl|'\n'
name|'succeeder'
op|'='
name|'self'
op|'.'
name|'_getResolver'
op|'('
name|'servers'
op|','
number|'4'
op|')'
newline|'\n'
name|'succeedD'
op|'='
name|'succeeder'
op|'.'
name|'lookupAddress'
op|'('
string|"'example.com'"
op|')'
newline|'\n'
name|'succeedD'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
op|'('
name|'ans'
op|','
name|'auth'
op|','
name|'add'
op|')'
op|':'
name|'ans'
op|'['
number|'0'
op|']'
op|'.'
name|'payload'
op|')'
newline|'\n'
name|'succeedD'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'Record_A'
op|'('
string|"'10.0.0.4'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'gatherResults'
op|'('
op|'['
name|'failD'
op|','
name|'succeedD'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_discoveredAuthorityDeprecated
dedent|''
name|'def'
name|'test_discoveredAuthorityDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{Resolver.discoveredAuthority} produces a deprecation warning.\n        """'
newline|'\n'
name|'resolver'
op|'='
name|'Resolver'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'d'
op|'='
name|'resolver'
op|'.'
name|'discoveredAuthority'
op|'('
string|"'127.0.0.1'"
op|','
string|"'example.com'"
op|','
name|'IN'
op|','
name|'A'
op|','
op|'('
number|'0'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'warnings'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
nl|'\n'
name|'self'
op|'.'
name|'test_discoveredAuthorityDeprecated'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'category'"
op|']'
op|','
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
nl|'\n'
string|"'twisted.names.root.Resolver.discoveredAuthority is deprecated since '"
nl|'\n'
string|"'Twisted 10.0.  Use twisted.names.client.Resolver directly, instead.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'warnings'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# This will time out quickly, but we need to wait for it because there'
nl|'\n'
comment|'# are resources associated with.'
nl|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'lambda'
name|'ignored'
op|':'
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StubDNSDatagramProtocol
dedent|''
dedent|''
name|'class'
name|'StubDNSDatagramProtocol'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A do-nothing stand-in for L{DNSDatagramProtocol} which can be used to avoid\n    network traffic in tests where that kind of thing doesn\'t matter.\n    """'
newline|'\n'
DECL|member|query
name|'def'
name|'query'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_retrySuppression
dedent|''
dedent|''
name|'_retrySuppression'
op|'='
name|'util'
op|'.'
name|'suppress'
op|'('
nl|'\n'
DECL|variable|category
name|'category'
op|'='
name|'DeprecationWarning'
op|','
nl|'\n'
DECL|variable|message
name|'message'
op|'='
op|'('
nl|'\n'
string|"'twisted.names.root.retry is deprecated since Twisted 10.0.  Use a '"
nl|'\n'
string|"'Resolver object for retry logic.'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DiscoveryToolsTests
name|'class'
name|'DiscoveryToolsTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the free functions in L{twisted.names.root} which help out with\n    authority discovery.  Since these are mostly deprecated, these are mostly\n    deprecation tests.\n    """'
newline|'\n'
DECL|member|test_lookupNameserversDeprecated
name|'def'
name|'test_lookupNameserversDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{root.lookupNameservers} produces a deprecation warning.\n        """'
newline|'\n'
comment|"# Don't care about the return value, since it will never have a result,"
nl|'\n'
comment|"# since StubDNSDatagramProtocol doesn't actually work."
nl|'\n'
name|'lookupNameservers'
op|'('
string|"'example.com'"
op|','
string|"'127.0.0.1'"
op|','
name|'StubDNSDatagramProtocol'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'warnings'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
nl|'\n'
name|'self'
op|'.'
name|'test_lookupNameserversDeprecated'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'category'"
op|']'
op|','
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
nl|'\n'
string|"'twisted.names.root.lookupNameservers is deprecated since Twisted '"
nl|'\n'
string|"'10.0.  Use twisted.names.root.Resolver.lookupNameservers '"
nl|'\n'
string|"'instead.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'warnings'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'test_lookupNameserversDeprecated'
op|'.'
name|'suppress'
op|'='
op|'['
name|'_retrySuppression'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_lookupAddressDeprecated
name|'def'
name|'test_lookupAddressDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{root.lookupAddress} produces a deprecation warning.\n        """'
newline|'\n'
comment|"# Don't care about the return value, since it will never have a result,"
nl|'\n'
comment|"# since StubDNSDatagramProtocol doesn't actually work."
nl|'\n'
name|'lookupAddress'
op|'('
string|"'example.com'"
op|','
string|"'127.0.0.1'"
op|','
name|'StubDNSDatagramProtocol'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'warnings'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
nl|'\n'
name|'self'
op|'.'
name|'test_lookupAddressDeprecated'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'category'"
op|']'
op|','
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
nl|'\n'
string|"'twisted.names.root.lookupAddress is deprecated since Twisted '"
nl|'\n'
string|"'10.0.  Use twisted.names.root.Resolver.lookupAddress '"
nl|'\n'
string|"'instead.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'warnings'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'test_lookupAddressDeprecated'
op|'.'
name|'suppress'
op|'='
op|'['
name|'_retrySuppression'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_extractAuthorityDeprecated
name|'def'
name|'test_extractAuthorityDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{root.extractAuthority} produces a deprecation warning.\n        """'
newline|'\n'
name|'extractAuthority'
op|'('
name|'Message'
op|'('
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'warnings'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
nl|'\n'
name|'self'
op|'.'
name|'test_extractAuthorityDeprecated'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'category'"
op|']'
op|','
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
nl|'\n'
string|"'twisted.names.root.extractAuthority is deprecated since Twisted '"
nl|'\n'
string|"'10.0.  Please inspect the Message object directly.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'warnings'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_discoverAuthorityDeprecated
dedent|''
name|'def'
name|'test_discoverAuthorityDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{root.discoverAuthority} produces a deprecation warning.\n        """'
newline|'\n'
name|'discoverAuthority'
op|'('
nl|'\n'
string|"'example.com'"
op|','
op|'['
string|"'10.0.0.1'"
op|']'
op|','
name|'p'
op|'='
name|'StubDNSDatagramProtocol'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'warnings'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
nl|'\n'
name|'self'
op|'.'
name|'test_discoverAuthorityDeprecated'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'category'"
op|']'
op|','
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
nl|'\n'
string|"'twisted.names.root.discoverAuthority is deprecated since Twisted '"
nl|'\n'
string|"'10.0.  Use twisted.names.root.Resolver.lookupNameservers '"
nl|'\n'
string|"'instead.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'warnings'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# discoverAuthority is implemented in terms of deprecated functions,'
nl|'\n'
comment|'# too.  Ignore those.'
nl|'\n'
dedent|''
name|'test_discoverAuthorityDeprecated'
op|'.'
name|'suppress'
op|'='
op|'['
nl|'\n'
name|'util'
op|'.'
name|'suppress'
op|'('
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
nl|'\n'
name|'message'
op|'='
op|'('
nl|'\n'
string|"'twisted.names.root.lookupNameservers is deprecated since '"
nl|'\n'
string|"'Twisted 10.0.  Use '"
nl|'\n'
string|"'twisted.names.root.Resolver.lookupNameservers instead.'"
op|')'
op|')'
op|','
nl|'\n'
name|'_retrySuppression'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_retryDeprecated
name|'def'
name|'test_retryDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{root.retry} produces a deprecation warning.\n        """'
newline|'\n'
name|'retry'
op|'('
op|'['
number|'0'
op|']'
op|','
name|'StubDNSDatagramProtocol'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'warnings'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
nl|'\n'
name|'self'
op|'.'
name|'test_retryDeprecated'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'category'"
op|']'
op|','
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
nl|'\n'
string|"'twisted.names.root.retry is deprecated since Twisted '"
nl|'\n'
string|"'10.0.  Use a Resolver object for retry logic.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'warnings'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.names.test.test_rootresolve -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nResolver implementation for querying successive authoritative servers to\nlookup a record, starting from the root nameservers.\n\n@author: Jp Calderone\n\ntodo::\n    robustify it\n    documentation\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'warnings'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'failure'
name|'import'
name|'Failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
name|'import'
name|'dns'
op|','
name|'common'
op|','
name|'error'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|retry
name|'def'
name|'retry'
op|'('
name|'t'
op|','
name|'p'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Issue a query one or more times.\n\n    This function is deprecated.  Use one of the resolver classes for retry\n    logic, or implement it yourself.\n    """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"twisted.names.root.retry is deprecated since Twisted 10.0.  Use a "'
nl|'\n'
string|'"Resolver object for retry logic."'
op|','
name|'category'
op|'='
name|'DeprecationWarning'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'assert'
name|'t'
op|','
string|'"Timeout is required"'
newline|'\n'
name|'t'
op|'='
name|'list'
op|'('
name|'t'
op|')'
newline|'\n'
DECL|function|errback
name|'def'
name|'errback'
op|'('
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'failure'
op|'.'
name|'trap'
op|'('
name|'defer'
op|'.'
name|'TimeoutError'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'t'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'failure'
newline|'\n'
dedent|''
name|'return'
name|'p'
op|'.'
name|'query'
op|'('
name|'timeout'
op|'='
name|'t'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
op|'*'
name|'args'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'errback'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'p'
op|'.'
name|'query'
op|'('
name|'timeout'
op|'='
name|'t'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
op|'*'
name|'args'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'errback'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_DummyController
dedent|''
name|'class'
name|'_DummyController'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A do-nothing DNS controller.  This is useful when all messages received\n    will be responses to previously issued queries.  Anything else received\n    will be ignored.\n    """'
newline|'\n'
DECL|member|messageReceived
name|'def'
name|'messageReceived'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Resolver
dedent|''
dedent|''
name|'class'
name|'Resolver'
op|'('
name|'common'
op|'.'
name|'ResolverBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{Resolver} implements recursive lookup starting from a specified list of\n    root servers.\n\n    @ivar hints: A C{list} of C{str} giving the dotted quad representation\n        of IP addresses of root servers at which to begin resolving names.\n\n    @ivar _maximumQueries: A C{int} giving the maximum number of queries\n        which will be attempted to resolve a single name.\n\n    @ivar _reactor: A L{IReactorTime} and L{IReactorUDP} provider to use to\n        bind UDP ports and manage timeouts.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'hints'
op|','
name|'maximumQueries'
op|'='
number|'10'
op|','
name|'reactor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'common'
op|'.'
name|'ResolverBase'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hints'
op|'='
name|'hints'
newline|'\n'
name|'self'
op|'.'
name|'_maximumQueries'
op|'='
name|'maximumQueries'
newline|'\n'
name|'self'
op|'.'
name|'_reactor'
op|'='
name|'reactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_roots
dedent|''
name|'def'
name|'_roots'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a list of two-tuples representing the addresses of the root\n        servers, as defined by C{self.hints}.\n        """'
newline|'\n'
name|'return'
op|'['
op|'('
name|'ip'
op|','
name|'dns'
op|'.'
name|'PORT'
op|')'
name|'for'
name|'ip'
name|'in'
name|'self'
op|'.'
name|'hints'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_query
dedent|''
name|'def'
name|'_query'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'servers'
op|','
name|'timeout'
op|','
name|'filter'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Issue one query and return a L{Deferred} which fires with its response.\n\n        @param query: The query to issue.\n        @type query: L{dns.Query}\n\n        @param servers: The servers which might have an answer for this\n            query.\n        @type servers: L{list} of L{tuple} of L{str} and L{int}\n\n        @param timeout: A timeout on how long to wait for the response.\n        @type timeout: L{tuple} of L{int}\n\n        @param filter: A flag indicating whether to filter the results.  If\n            C{True}, the returned L{Deferred} will fire with a three-tuple of\n            lists of L{RRHeaders} (like the return value of the I{lookup*}\n            methods of L{IResolver}.  IF C{False}, the result will be a\n            L{Message} instance.\n        @type filter: L{bool}\n\n        @return: A L{Deferred} which fires with the response or a timeout\n            error.\n        @rtype: L{Deferred}\n        """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
name|'import'
name|'client'
newline|'\n'
name|'r'
op|'='
name|'client'
op|'.'
name|'Resolver'
op|'('
name|'servers'
op|'='
name|'servers'
op|','
name|'reactor'
op|'='
name|'self'
op|'.'
name|'_reactor'
op|')'
newline|'\n'
name|'d'
op|'='
name|'r'
op|'.'
name|'queryUDP'
op|'('
op|'['
name|'query'
op|']'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'if'
name|'filter'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'r'
op|'.'
name|'filterAnswers'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_lookup
dedent|''
name|'def'
name|'_lookup'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'cls'
op|','
name|'type'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Implement name lookup by recursively discovering the authoritative\n        server for the name and then asking it, starting at one of the servers\n        in C{self.hints}.\n        """'
newline|'\n'
name|'if'
name|'timeout'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# A series of timeouts for semi-exponential backoff, summing to an'
nl|'\n'
comment|'# arbitrary total of 60 seconds.'
nl|'\n'
indent|'            '
name|'timeout'
op|'='
op|'('
number|'1'
op|','
number|'3'
op|','
number|'11'
op|','
number|'45'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_discoverAuthority'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Query'
op|'('
name|'name'
op|','
name|'type'
op|','
name|'cls'
op|')'
op|','
name|'self'
op|'.'
name|'_roots'
op|'('
op|')'
op|','
name|'timeout'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_maximumQueries'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_discoverAuthority
dedent|''
name|'def'
name|'_discoverAuthority'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'servers'
op|','
name|'timeout'
op|','
name|'queriesLeft'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Issue a query to a server and follow a delegation if necessary.\n\n        @param query: The query to issue.\n        @type query: L{dns.Query}\n\n        @param servers: The servers which might have an answer for this\n            query.\n        @type servers: L{list} of L{tuple} of L{str} and L{int}\n\n        @param timeout: A C{tuple} of C{int} giving the timeout to use for this\n            query.\n\n        @param queriesLeft: A C{int} giving the number of queries which may\n            yet be attempted to answer this query before the attempt will be\n            abandoned.\n\n        @return: A L{Deferred} which fires with a three-tuple of lists of\n            L{RRHeaders} giving the response, or with a L{Failure} if there is\n            a timeout or response error.\n        """'
newline|'\n'
comment|"# Stop now if we've hit the query limit."
nl|'\n'
name|'if'
name|'queriesLeft'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'Failure'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'ResolverError'
op|'('
string|'"Query limit reached without result"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'_query'
op|'('
name|'query'
op|','
name|'servers'
op|','
name|'timeout'
op|','
name|'False'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_discoveredAuthority'
op|','
name|'query'
op|','
name|'timeout'
op|','
name|'queriesLeft'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_discoveredAuthority
dedent|''
name|'def'
name|'_discoveredAuthority'
op|'('
name|'self'
op|','
name|'response'
op|','
name|'query'
op|','
name|'timeout'
op|','
name|'queriesLeft'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Interpret the response to a query, checking for error codes and\n        following delegations if necessary.\n\n        @param response: The L{Message} received in response to issuing C{query}.\n        @type response: L{Message}\n\n        @param query: The L{dns.Query} which was issued.\n        @type query: L{dns.Query}.\n\n        @param timeout: The timeout to use if another query is indicated by\n            this response.\n        @type timeout: L{tuple} of L{int}\n\n        @param queriesLeft: A C{int} giving the number of queries which may\n            yet be attempted to answer this query before the attempt will be\n            abandoned.\n\n        @return: A L{Failure} indicating a response error, a three-tuple of\n            lists of L{RRHeaders} giving the response to C{query} or a\n            L{Deferred} which will fire with one of those.\n        """'
newline|'\n'
name|'if'
name|'response'
op|'.'
name|'rCode'
op|'!='
name|'dns'
op|'.'
name|'OK'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'Failure'
op|'('
name|'self'
op|'.'
name|'exceptionForCode'
op|'('
name|'response'
op|'.'
name|'rCode'
op|')'
op|'('
name|'response'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# Turn the answers into a structure that's a little easier to work with."
nl|'\n'
dedent|''
name|'records'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'answer'
name|'in'
name|'response'
op|'.'
name|'answers'
op|':'
newline|'\n'
indent|'            '
name|'records'
op|'.'
name|'setdefault'
op|'('
name|'answer'
op|'.'
name|'name'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'answer'
op|')'
newline|'\n'
nl|'\n'
DECL|function|findAnswerOrCName
dedent|''
name|'def'
name|'findAnswerOrCName'
op|'('
name|'name'
op|','
name|'type'
op|','
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cname'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'record'
name|'in'
name|'records'
op|'.'
name|'get'
op|'('
name|'name'
op|','
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'record'
op|'.'
name|'cls'
op|'=='
name|'cls'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'record'
op|'.'
name|'type'
op|'=='
name|'type'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'record'
newline|'\n'
dedent|''
name|'elif'
name|'record'
op|'.'
name|'type'
op|'=='
name|'dns'
op|'.'
name|'CNAME'
op|':'
newline|'\n'
indent|'                        '
name|'cname'
op|'='
name|'record'
newline|'\n'
comment|"# If there were any CNAME records, return the last one.  There's"
nl|'\n'
comment|'# only supposed to be zero or one, though.'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'cname'
newline|'\n'
nl|'\n'
dedent|''
name|'seen'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'name'
op|'='
name|'query'
op|'.'
name|'name'
newline|'\n'
name|'record'
op|'='
name|'None'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'seen'
op|'.'
name|'add'
op|'('
name|'name'
op|')'
newline|'\n'
name|'previous'
op|'='
name|'record'
newline|'\n'
name|'record'
op|'='
name|'findAnswerOrCName'
op|'('
name|'name'
op|','
name|'query'
op|'.'
name|'type'
op|','
name|'query'
op|'.'
name|'cls'
op|')'
newline|'\n'
name|'if'
name|'record'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'name'
op|'=='
name|'query'
op|'.'
name|'name'
op|':'
newline|'\n'
comment|"# If there's no answer for the original name, then this may"
nl|'\n'
comment|'# be a delegation.  Code below handles it.'
nl|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Try to resolve the CNAME with another query.'
nl|'\n'
indent|'                    '
name|'d'
op|'='
name|'self'
op|'.'
name|'_discoverAuthority'
op|'('
nl|'\n'
name|'dns'
op|'.'
name|'Query'
op|'('
name|'str'
op|'('
name|'name'
op|')'
op|','
name|'query'
op|'.'
name|'type'
op|','
name|'query'
op|'.'
name|'cls'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_roots'
op|'('
op|')'
op|','
name|'timeout'
op|','
name|'queriesLeft'
op|')'
newline|'\n'
comment|'# We also want to include the CNAME in the ultimate result,'
nl|'\n'
comment|'# otherwise this will be pretty confusing.'
nl|'\n'
DECL|function|cbResolved
name|'def'
name|'cbResolved'
op|'('
op|'('
name|'answers'
op|','
name|'authority'
op|','
name|'additional'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'answers'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'previous'
op|')'
newline|'\n'
name|'return'
op|'('
name|'answers'
op|','
name|'authority'
op|','
name|'additional'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbResolved'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'record'
op|'.'
name|'type'
op|'=='
name|'query'
op|'.'
name|'type'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'('
nl|'\n'
name|'response'
op|'.'
name|'answers'
op|','
nl|'\n'
name|'response'
op|'.'
name|'authority'
op|','
nl|'\n'
name|'response'
op|'.'
name|'additional'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# It's a CNAME record.  Try to resolve it from the records"
nl|'\n'
comment|'# in this response with another iteration around the loop.'
nl|'\n'
indent|'                '
name|'if'
name|'record'
op|'.'
name|'payload'
op|'.'
name|'name'
name|'in'
name|'seen'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'error'
op|'.'
name|'ResolverError'
op|'('
string|'"Cycle in CNAME processing"'
op|')'
newline|'\n'
dedent|''
name|'name'
op|'='
name|'record'
op|'.'
name|'payload'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Build a map to use to convert NS names into IP addresses.'
nl|'\n'
dedent|''
dedent|''
name|'addresses'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'rr'
name|'in'
name|'response'
op|'.'
name|'additional'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'rr'
op|'.'
name|'type'
op|'=='
name|'dns'
op|'.'
name|'A'
op|':'
newline|'\n'
indent|'                '
name|'addresses'
op|'['
name|'str'
op|'('
name|'rr'
op|'.'
name|'name'
op|')'
op|']'
op|'='
name|'rr'
op|'.'
name|'payload'
op|'.'
name|'dottedQuad'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'hints'
op|'='
op|'['
op|']'
newline|'\n'
name|'traps'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'rr'
name|'in'
name|'response'
op|'.'
name|'authority'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'rr'
op|'.'
name|'type'
op|'=='
name|'dns'
op|'.'
name|'NS'
op|':'
newline|'\n'
indent|'                '
name|'ns'
op|'='
name|'str'
op|'('
name|'rr'
op|'.'
name|'payload'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'ns'
name|'in'
name|'addresses'
op|':'
newline|'\n'
indent|'                    '
name|'hints'
op|'.'
name|'append'
op|'('
op|'('
name|'addresses'
op|'['
name|'ns'
op|']'
op|','
name|'dns'
op|'.'
name|'PORT'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'traps'
op|'.'
name|'append'
op|'('
name|'ns'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'hints'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_discoverAuthority'
op|'('
nl|'\n'
name|'query'
op|','
name|'hints'
op|','
name|'timeout'
op|','
name|'queriesLeft'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'traps'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'lookupAddress'
op|'('
name|'traps'
op|'['
number|'0'
op|']'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'lambda'
op|'('
name|'answers'
op|','
name|'authority'
op|','
name|'additional'
op|')'
op|':'
nl|'\n'
name|'answers'
op|'['
number|'0'
op|']'
op|'.'
name|'payload'
op|'.'
name|'dottedQuad'
op|'('
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'lambda'
name|'hint'
op|':'
name|'self'
op|'.'
name|'_discoverAuthority'
op|'('
nl|'\n'
name|'query'
op|','
op|'['
op|'('
name|'hint'
op|','
name|'dns'
op|'.'
name|'PORT'
op|')'
op|']'
op|','
name|'timeout'
op|','
name|'queriesLeft'
op|'-'
number|'1'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ResolverError'
op|'('
nl|'\n'
string|'"Stuck at response without answers or delegation"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|discoveredAuthority
dedent|''
dedent|''
name|'def'
name|'discoveredAuthority'
op|'('
name|'self'
op|','
name|'auth'
op|','
name|'name'
op|','
name|'cls'
op|','
name|'type'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|"'twisted.names.root.Resolver.discoveredAuthority is deprecated since '"
nl|'\n'
string|"'Twisted 10.0.  Use twisted.names.client.Resolver directly, instead.'"
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
name|'import'
name|'client'
newline|'\n'
name|'q'
op|'='
name|'dns'
op|'.'
name|'Query'
op|'('
name|'name'
op|','
name|'type'
op|','
name|'cls'
op|')'
newline|'\n'
name|'r'
op|'='
name|'client'
op|'.'
name|'Resolver'
op|'('
name|'servers'
op|'='
op|'['
op|'('
name|'auth'
op|','
name|'dns'
op|'.'
name|'PORT'
op|')'
op|']'
op|')'
newline|'\n'
name|'d'
op|'='
name|'r'
op|'.'
name|'queryUDP'
op|'('
op|'['
name|'q'
op|']'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'r'
op|'.'
name|'filterAnswers'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|lookupNameservers
dedent|''
dedent|''
name|'def'
name|'lookupNameservers'
op|'('
name|'host'
op|','
name|'atServer'
op|','
name|'p'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|"'twisted.names.root.lookupNameservers is deprecated since Twisted '"
nl|'\n'
string|"'10.0.  Use twisted.names.root.Resolver.lookupNameservers instead.'"
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
comment|"# print 'Nameserver lookup for', host, 'at', atServer, 'with', p"
nl|'\n'
name|'if'
name|'p'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'dns'
op|'.'
name|'DNSDatagramProtocol'
op|'('
name|'_DummyController'
op|'('
op|')'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'noisy'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'retry'
op|'('
nl|'\n'
op|'('
number|'1'
op|','
number|'3'
op|','
number|'11'
op|','
number|'45'
op|')'
op|','
comment|'# Timeouts'
nl|'\n'
name|'p'
op|','
comment|'# Protocol instance'
nl|'\n'
op|'('
name|'atServer'
op|','
name|'dns'
op|'.'
name|'PORT'
op|')'
op|','
comment|'# Server to query'
nl|'\n'
op|'['
name|'dns'
op|'.'
name|'Query'
op|'('
name|'host'
op|','
name|'dns'
op|'.'
name|'NS'
op|','
name|'dns'
op|'.'
name|'IN'
op|')'
op|']'
comment|'# Question to ask'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lookupAddress
dedent|''
name|'def'
name|'lookupAddress'
op|'('
name|'host'
op|','
name|'atServer'
op|','
name|'p'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|"'twisted.names.root.lookupAddress is deprecated since Twisted '"
nl|'\n'
string|"'10.0.  Use twisted.names.root.Resolver.lookupAddress instead.'"
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
comment|"# print 'Address lookup for', host, 'at', atServer, 'with', p"
nl|'\n'
name|'if'
name|'p'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'dns'
op|'.'
name|'DNSDatagramProtocol'
op|'('
name|'_DummyController'
op|'('
op|')'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'noisy'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'retry'
op|'('
nl|'\n'
op|'('
number|'1'
op|','
number|'3'
op|','
number|'11'
op|','
number|'45'
op|')'
op|','
comment|'# Timeouts'
nl|'\n'
name|'p'
op|','
comment|'# Protocol instance'
nl|'\n'
op|'('
name|'atServer'
op|','
name|'dns'
op|'.'
name|'PORT'
op|')'
op|','
comment|'# Server to query'
nl|'\n'
op|'['
name|'dns'
op|'.'
name|'Query'
op|'('
name|'host'
op|','
name|'dns'
op|'.'
name|'A'
op|','
name|'dns'
op|'.'
name|'IN'
op|')'
op|']'
comment|'# Question to ask'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|function|extractAuthority
dedent|''
name|'def'
name|'extractAuthority'
op|'('
name|'msg'
op|','
name|'cache'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|"'twisted.names.root.extractAuthority is deprecated since Twisted '"
nl|'\n'
string|"'10.0.  Please inspect the Message object directly.'"
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'records'
op|'='
name|'msg'
op|'.'
name|'answers'
op|'+'
name|'msg'
op|'.'
name|'authority'
op|'+'
name|'msg'
op|'.'
name|'additional'
newline|'\n'
name|'nameservers'
op|'='
op|'['
name|'r'
name|'for'
name|'r'
name|'in'
name|'records'
name|'if'
name|'r'
op|'.'
name|'type'
op|'=='
name|'dns'
op|'.'
name|'NS'
op|']'
newline|'\n'
nl|'\n'
comment|"# print 'Records for', soFar, ':', records"
nl|'\n'
comment|"# print 'NS for', soFar, ':', nameservers"
nl|'\n'
nl|'\n'
name|'if'
name|'not'
name|'nameservers'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
op|','
name|'nameservers'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'records'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'IOError'
op|'('
string|'"No records"'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'r'
name|'in'
name|'records'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'r'
op|'.'
name|'type'
op|'=='
name|'dns'
op|'.'
name|'A'
op|':'
newline|'\n'
indent|'            '
name|'cache'
op|'['
name|'str'
op|'('
name|'r'
op|'.'
name|'name'
op|')'
op|']'
op|'='
name|'r'
op|'.'
name|'payload'
op|'.'
name|'dottedQuad'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'r'
name|'in'
name|'records'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'r'
op|'.'
name|'type'
op|'=='
name|'dns'
op|'.'
name|'NS'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'str'
op|'('
name|'r'
op|'.'
name|'payload'
op|'.'
name|'name'
op|')'
name|'in'
name|'cache'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'cache'
op|'['
name|'str'
op|'('
name|'r'
op|'.'
name|'payload'
op|'.'
name|'name'
op|')'
op|']'
op|','
name|'nameservers'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'for'
name|'addr'
name|'in'
name|'records'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'addr'
op|'.'
name|'type'
op|'=='
name|'dns'
op|'.'
name|'A'
name|'and'
name|'addr'
op|'.'
name|'name'
op|'=='
name|'r'
op|'.'
name|'name'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'addr'
op|'.'
name|'payload'
op|'.'
name|'dottedQuad'
op|'('
op|')'
op|','
name|'nameservers'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
op|','
name|'nameservers'
newline|'\n'
nl|'\n'
DECL|function|discoverAuthority
dedent|''
name|'def'
name|'discoverAuthority'
op|'('
name|'host'
op|','
name|'roots'
op|','
name|'cache'
op|'='
name|'None'
op|','
name|'p'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|"'twisted.names.root.discoverAuthority is deprecated since Twisted '"
nl|'\n'
string|"'10.0.  Use twisted.names.root.Resolver.lookupNameservers instead.'"
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'4'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'cache'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'cache'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'rootAuths'
op|'='
name|'list'
op|'('
name|'roots'
op|')'
newline|'\n'
nl|'\n'
name|'parts'
op|'='
name|'host'
op|'.'
name|'rstrip'
op|'('
string|"'.'"
op|')'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'parts'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'authority'
op|'='
name|'rootAuths'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'soFar'
op|'='
string|"''"
newline|'\n'
name|'for'
name|'part'
name|'in'
name|'parts'
op|':'
newline|'\n'
indent|'        '
name|'soFar'
op|'='
name|'part'
op|'+'
string|"'.'"
op|'+'
name|'soFar'
newline|'\n'
comment|"# print '///////',  soFar, authority, p"
nl|'\n'
name|'msg'
op|'='
name|'defer'
op|'.'
name|'waitForDeferred'
op|'('
name|'lookupNameservers'
op|'('
name|'soFar'
op|','
name|'authority'
op|','
name|'p'
op|')'
op|')'
newline|'\n'
name|'yield'
name|'msg'
newline|'\n'
name|'msg'
op|'='
name|'msg'
op|'.'
name|'getResult'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'newAuth'
op|','
name|'nameservers'
op|'='
name|'extractAuthority'
op|'('
name|'msg'
op|','
name|'cache'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'newAuth'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|'# print "newAuth is not None"'
nl|'\n'
indent|'            '
name|'authority'
op|'='
name|'newAuth'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'nameservers'
op|':'
newline|'\n'
indent|'                '
name|'r'
op|'='
name|'str'
op|'('
name|'nameservers'
op|'['
number|'0'
op|']'
op|'.'
name|'payload'
op|'.'
name|'name'
op|')'
newline|'\n'
comment|"# print 'Recursively discovering authority for', r"
nl|'\n'
name|'authority'
op|'='
name|'defer'
op|'.'
name|'waitForDeferred'
op|'('
name|'discoverAuthority'
op|'('
name|'r'
op|','
name|'roots'
op|','
name|'cache'
op|','
name|'p'
op|')'
op|')'
newline|'\n'
name|'yield'
name|'authority'
newline|'\n'
name|'authority'
op|'='
name|'authority'
op|'.'
name|'getResult'
op|'('
op|')'
newline|'\n'
comment|"# print 'Discovered to be', authority, 'for', r"
nl|'\n'
comment|'##            else:'
nl|'\n'
comment|"##                # print 'Doing address lookup for', soFar, 'at', authority"
nl|'\n'
comment|'##                msg = defer.waitForDeferred(lookupAddress(soFar, authority, p))'
nl|'\n'
comment|'##                yield msg'
nl|'\n'
comment|'##                msg = msg.getResult()'
nl|'\n'
comment|'##                records = msg.answers + msg.authority + msg.additional'
nl|'\n'
comment|'##                addresses = [r for r in records if r.type == dns.A]'
nl|'\n'
comment|'##                if addresses:'
nl|'\n'
comment|'##                    authority = addresses[0].payload.dottedQuad()'
nl|'\n'
comment|'##                else:'
nl|'\n'
comment|'##                    raise IOError("Resolution error")'
nl|'\n'
comment|'# print "Yielding authority", authority'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'yield'
name|'authority'
newline|'\n'
nl|'\n'
DECL|variable|discoverAuthority
dedent|''
name|'discoverAuthority'
op|'='
name|'defer'
op|'.'
name|'deferredGenerator'
op|'('
name|'discoverAuthority'
op|')'
newline|'\n'
nl|'\n'
DECL|function|makePlaceholder
name|'def'
name|'makePlaceholder'
op|'('
name|'deferred'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
DECL|function|placeholder
indent|'    '
name|'def'
name|'placeholder'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'r'
op|':'
name|'getattr'
op|'('
name|'r'
op|','
name|'name'
op|')'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|')'
newline|'\n'
name|'return'
name|'deferred'
newline|'\n'
dedent|''
name|'return'
name|'placeholder'
newline|'\n'
nl|'\n'
DECL|class|DeferredResolver
dedent|''
name|'class'
name|'DeferredResolver'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'resolverDeferred'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'waiting'
op|'='
op|'['
op|']'
newline|'\n'
name|'resolverDeferred'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'gotRealResolver'
op|')'
newline|'\n'
nl|'\n'
DECL|member|gotRealResolver
dedent|''
name|'def'
name|'gotRealResolver'
op|'('
name|'self'
op|','
name|'resolver'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'w'
op|'='
name|'self'
op|'.'
name|'waiting'
newline|'\n'
name|'self'
op|'.'
name|'__dict__'
op|'='
name|'resolver'
op|'.'
name|'__dict__'
newline|'\n'
name|'self'
op|'.'
name|'__class__'
op|'='
name|'resolver'
op|'.'
name|'__class__'
newline|'\n'
name|'for'
name|'d'
name|'in'
name|'w'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'callback'
op|'('
name|'resolver'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'.'
name|'startswith'
op|'('
string|"'lookup'"
op|')'
name|'or'
name|'name'
name|'in'
op|'('
string|"'getHostByName'"
op|','
string|"'query'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'waiting'
op|'.'
name|'append'
op|'('
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'makePlaceholder'
op|'('
name|'self'
op|'.'
name|'waiting'
op|'['
op|'-'
number|'1'
op|']'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'AttributeError'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|function|bootstrap
dedent|''
dedent|''
name|'def'
name|'bootstrap'
op|'('
name|'resolver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Lookup the root nameserver addresses using the given resolver\n\n    Return a Resolver which will eventually become a C{root.Resolver}\n    instance that has references to all the root servers that we were able\n    to look up.\n    """'
newline|'\n'
name|'domains'
op|'='
op|'['
name|'chr'
op|'('
name|'ord'
op|'('
string|"'a'"
op|')'
op|'+'
name|'i'
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'13'
op|')'
op|']'
newline|'\n'
comment|"# f = lambda r: (log.msg('Root server address: ' + str(r)), r)[1]"
nl|'\n'
name|'f'
op|'='
name|'lambda'
name|'r'
op|':'
name|'r'
newline|'\n'
name|'L'
op|'='
op|'['
name|'resolver'
op|'.'
name|'getHostByName'
op|'('
string|"'%s.root-servers.net'"
op|'%'
name|'d'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'f'
op|')'
name|'for'
name|'d'
name|'in'
name|'domains'
op|']'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'L'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'r'
op|':'
name|'Resolver'
op|'('
op|'['
name|'e'
op|'['
number|'1'
op|']'
name|'for'
name|'e'
name|'in'
name|'r'
name|'if'
name|'e'
op|'['
number|'0'
op|']'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'DeferredResolver'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

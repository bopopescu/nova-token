begin_unit
string|'"""\nDistutils convenience functionality.\n\nDon\'t use this outside of Twisted.\n\nMaintainer: Christopher Armstrong\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'os'
newline|'\n'
name|'from'
name|'distutils'
op|'.'
name|'command'
name|'import'
name|'build_scripts'
op|','
name|'install_data'
op|','
name|'build_ext'
op|','
name|'build_py'
newline|'\n'
name|'from'
name|'distutils'
op|'.'
name|'errors'
name|'import'
name|'CompileError'
newline|'\n'
name|'from'
name|'distutils'
name|'import'
name|'core'
newline|'\n'
name|'from'
name|'distutils'
op|'.'
name|'core'
name|'import'
name|'Extension'
newline|'\n'
nl|'\n'
DECL|variable|twisted_subprojects
name|'twisted_subprojects'
op|'='
op|'['
string|'"conch"'
op|','
string|'"lore"'
op|','
string|'"mail"'
op|','
string|'"names"'
op|','
nl|'\n'
string|'"news"'
op|','
string|'"pair"'
op|','
string|'"runner"'
op|','
string|'"web"'
op|','
string|'"web2"'
op|','
nl|'\n'
string|'"words"'
op|','
string|'"vfs"'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConditionalExtension
name|'class'
name|'ConditionalExtension'
op|'('
name|'Extension'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An extension module that will only be compiled if certain conditions are\n    met.\n\n    @param condition: A callable of one argument which returns True or False to\n        indicate whether the extension should be built. The argument is an\n        instance of L{build_ext_twisted}, which has useful methods for checking\n        things about the platform.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'condition'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|'"condition"'
op|','
name|'lambda'
name|'builder'
op|':'
name|'True'
op|')'
newline|'\n'
name|'Extension'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|setup
dedent|''
dedent|''
name|'def'
name|'setup'
op|'('
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An alternative to distutils\' setup() which is specially designed\n    for Twisted subprojects.\n\n    Pass twisted_subproject=projname if you want package and data\n    files to automatically be found for you.\n\n    @param conditionalExtensions: Extensions to optionally build.\n    @type conditionalExtensions: C{list} of L{ConditionalExtension}\n    """'
newline|'\n'
name|'return'
name|'core'
op|'.'
name|'setup'
op|'('
op|'**'
name|'get_setup_args'
op|'('
op|'**'
name|'kw'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|get_setup_args
dedent|''
name|'def'
name|'get_setup_args'
op|'('
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
string|"'twisted_subproject'"
name|'in'
name|'kw'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'twisted'"
name|'not'
name|'in'
name|'os'
op|'.'
name|'listdir'
op|'('
string|"'.'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Sorry, you need to run setup.py from the "'
nl|'\n'
string|'"toplevel source directory."'
op|')'
newline|'\n'
dedent|''
name|'projname'
op|'='
name|'kw'
op|'['
string|"'twisted_subproject'"
op|']'
newline|'\n'
name|'projdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'twisted'"
op|','
name|'projname'
op|')'
newline|'\n'
nl|'\n'
name|'kw'
op|'['
string|"'packages'"
op|']'
op|'='
name|'getPackages'
op|'('
name|'projdir'
op|','
name|'parent'
op|'='
string|"'twisted'"
op|')'
newline|'\n'
name|'kw'
op|'['
string|"'version'"
op|']'
op|'='
name|'getVersion'
op|'('
name|'projname'
op|')'
newline|'\n'
nl|'\n'
name|'plugin'
op|'='
string|'"twisted/plugins/twisted_"'
op|'+'
name|'projname'
op|'+'
string|'".py"'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'plugin'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'kw'
op|'.'
name|'setdefault'
op|'('
string|"'py_modules'"
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
nl|'\n'
name|'plugin'
op|'.'
name|'replace'
op|'('
string|'"/"'
op|','
string|'"."'
op|')'
op|'['
op|':'
op|'-'
number|'3'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'kw'
op|'['
string|"'data_files'"
op|']'
op|'='
name|'getDataFiles'
op|'('
name|'projdir'
op|','
name|'parent'
op|'='
string|"'twisted'"
op|')'
newline|'\n'
nl|'\n'
name|'del'
name|'kw'
op|'['
string|"'twisted_subproject'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'plugins'"
name|'in'
name|'kw'
op|':'
newline|'\n'
indent|'            '
name|'py_modules'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'plg'
name|'in'
name|'kw'
op|'['
string|"'plugins'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'py_modules'
op|'.'
name|'append'
op|'('
string|'"twisted.plugins."'
op|'+'
name|'plg'
op|')'
newline|'\n'
dedent|''
name|'kw'
op|'.'
name|'setdefault'
op|'('
string|"'py_modules'"
op|','
op|'['
op|']'
op|')'
op|'.'
name|'extend'
op|'('
name|'py_modules'
op|')'
newline|'\n'
name|'del'
name|'kw'
op|'['
string|"'plugins'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
string|"'cmdclass'"
name|'not'
name|'in'
name|'kw'
op|':'
newline|'\n'
indent|'        '
name|'kw'
op|'['
string|"'cmdclass'"
op|']'
op|'='
op|'{'
nl|'\n'
string|"'install_data'"
op|':'
name|'install_data_twisted'
op|','
nl|'\n'
string|"'build_scripts'"
op|':'
name|'build_scripts_twisted'
op|'}'
newline|'\n'
name|'if'
name|'sys'
op|'.'
name|'version_info'
op|'['
op|':'
number|'3'
op|']'
op|'<'
op|'('
number|'2'
op|','
number|'3'
op|','
number|'0'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'kw'
op|'['
string|"'cmdclass'"
op|']'
op|'['
string|"'build_py'"
op|']'
op|'='
name|'build_py_twisted'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
string|'"conditionalExtensions"'
name|'in'
name|'kw'
op|':'
newline|'\n'
indent|'        '
name|'extensions'
op|'='
name|'kw'
op|'['
string|'"conditionalExtensions"'
op|']'
newline|'\n'
name|'del'
name|'kw'
op|'['
string|'"conditionalExtensions"'
op|']'
newline|'\n'
nl|'\n'
name|'if'
string|"'ext_modules'"
name|'not'
name|'in'
name|'kw'
op|':'
newline|'\n'
comment|"# This is a workaround for distutils behavior; ext_modules isn't"
nl|'\n'
comment|'# actually used by our custom builder.  distutils deep-down checks'
nl|'\n'
comment|'# to see if there are any ext_modules defined before invoking'
nl|'\n'
comment|'# the build_ext command.  We need to trigger build_ext regardless'
nl|'\n'
comment|'# because it is the thing that does the conditional checks to see'
nl|'\n'
comment|'# if it should build any extensions.  The reason we have to delay'
nl|'\n'
comment|'# the conditional checks until then is that the compiler objects'
nl|'\n'
comment|'# are not yet set up when this code is executed.'
nl|'\n'
indent|'            '
name|'kw'
op|'['
string|'"ext_modules"'
op|']'
op|'='
name|'extensions'
newline|'\n'
nl|'\n'
DECL|class|my_build_ext
dedent|''
name|'class'
name|'my_build_ext'
op|'('
name|'build_ext_twisted'
op|')'
op|':'
newline|'\n'
DECL|variable|conditionalExtensions
indent|'            '
name|'conditionalExtensions'
op|'='
name|'extensions'
newline|'\n'
dedent|''
name|'kw'
op|'.'
name|'setdefault'
op|'('
string|"'cmdclass'"
op|','
op|'{'
op|'}'
op|')'
op|'['
string|"'build_ext'"
op|']'
op|'='
name|'my_build_ext'
newline|'\n'
dedent|''
name|'return'
name|'kw'
newline|'\n'
nl|'\n'
DECL|function|getVersion
dedent|''
name|'def'
name|'getVersion'
op|'('
name|'proj'
op|','
name|'base'
op|'='
string|'"twisted"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Extract the version number for a given project.\n\n    @param proj: the name of the project. Examples are "core",\n    "conch", "words", "mail".\n\n    @rtype: str\n    @returns: The version number of the project, as a string like\n    "2.0.0".\n    """'
newline|'\n'
name|'if'
name|'proj'
op|'=='
string|"'core'"
op|':'
newline|'\n'
indent|'        '
name|'vfile'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base'
op|','
string|"'_version.py'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'vfile'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base'
op|','
name|'proj'
op|','
string|"'_version.py'"
op|')'
newline|'\n'
dedent|''
name|'ns'
op|'='
op|'{'
string|"'__name__'"
op|':'
string|"'Nothing to see here'"
op|'}'
newline|'\n'
name|'execfile'
op|'('
name|'vfile'
op|','
name|'ns'
op|')'
newline|'\n'
name|'return'
name|'ns'
op|'['
string|"'version'"
op|']'
op|'.'
name|'base'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Names that are exluded from globbing results:'
nl|'\n'
DECL|variable|EXCLUDE_NAMES
dedent|''
name|'EXCLUDE_NAMES'
op|'='
op|'['
string|'"{arch}"'
op|','
string|'"CVS"'
op|','
string|'".cvsignore"'
op|','
string|'"_darcs"'
op|','
nl|'\n'
string|'"RCS"'
op|','
string|'"SCCS"'
op|','
string|'".svn"'
op|']'
newline|'\n'
DECL|variable|EXCLUDE_PATTERNS
name|'EXCLUDE_PATTERNS'
op|'='
op|'['
string|'"*.py[cdo]"'
op|','
string|'"*.s[ol]"'
op|','
string|'".#*"'
op|','
string|'"*~"'
op|','
string|'"*.py"'
op|']'
newline|'\n'
nl|'\n'
name|'import'
name|'fnmatch'
newline|'\n'
nl|'\n'
DECL|function|_filterNames
name|'def'
name|'_filterNames'
op|'('
name|'names'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Given a list of file names, return those names that should be copied.\n    """'
newline|'\n'
name|'names'
op|'='
op|'['
name|'n'
name|'for'
name|'n'
name|'in'
name|'names'
nl|'\n'
name|'if'
name|'n'
name|'not'
name|'in'
name|'EXCLUDE_NAMES'
op|']'
newline|'\n'
comment|'# This is needed when building a distro from a working'
nl|'\n'
comment|'# copy (likely a checkout) rather than a pristine export:'
nl|'\n'
name|'for'
name|'pattern'
name|'in'
name|'EXCLUDE_PATTERNS'
op|':'
newline|'\n'
indent|'        '
name|'names'
op|'='
op|'['
name|'n'
name|'for'
name|'n'
name|'in'
name|'names'
nl|'\n'
name|'if'
op|'('
name|'not'
name|'fnmatch'
op|'.'
name|'fnmatch'
op|'('
name|'n'
op|','
name|'pattern'
op|')'
op|')'
nl|'\n'
name|'and'
op|'('
name|'not'
name|'n'
op|'.'
name|'endswith'
op|'('
string|"'.py'"
op|')'
op|')'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'names'
newline|'\n'
nl|'\n'
DECL|function|relativeTo
dedent|''
name|'def'
name|'relativeTo'
op|'('
name|'base'
op|','
name|'relativee'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Gets \'relativee\' relative to \'basepath\'.\n\n    i.e.,\n\n    >>> relativeTo(\'/home/\', \'/home/radix/\')\n    \'radix\'\n    >>> relativeTo(\'.\', \'/home/radix/Projects/Twisted\') # curdir is /home/radix\n    \'Projects/Twisted\'\n\n    The \'relativee\' must be a child of \'basepath\'.\n    """'
newline|'\n'
name|'basepath'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'base'
op|')'
newline|'\n'
name|'relativee'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'relativee'
op|')'
newline|'\n'
name|'if'
name|'relativee'
op|'.'
name|'startswith'
op|'('
name|'basepath'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'relative'
op|'='
name|'relativee'
op|'['
name|'len'
op|'('
name|'basepath'
op|')'
op|':'
op|']'
newline|'\n'
name|'if'
name|'relative'
op|'.'
name|'startswith'
op|'('
name|'os'
op|'.'
name|'sep'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'relative'
op|'='
name|'relative'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base'
op|','
name|'relative'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'ValueError'
op|'('
string|'"%s is not a subpath of %s"'
op|'%'
op|'('
name|'relativee'
op|','
name|'basepath'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|getDataFiles
dedent|''
name|'def'
name|'getDataFiles'
op|'('
name|'dname'
op|','
name|'ignore'
op|'='
name|'None'
op|','
name|'parent'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get all the data files that should be included in this distutils Project.\n\n    \'dname\' should be the path to the package that you\'re distributing.\n\n    \'ignore\' is a list of sub-packages to ignore.  This facilitates\n    disparate package hierarchies.  That\'s a fancy way of saying that\n    the \'twisted\' package doesn\'t want to include the \'twisted.conch\'\n    package, so it will pass [\'conch\'] as the value.\n\n    \'parent\' is necessary if you\'re distributing a subpackage like\n    twisted.conch.  \'dname\' should point to \'twisted/conch\' and \'parent\'\n    should point to \'twisted\'.  This ensures that your data_files are\n    generated correctly, only using relative paths for the first element\n    of the tuple (\'twisted/conch/*\').\n    The default \'parent\' is the current working directory.\n    """'
newline|'\n'
name|'parent'
op|'='
name|'parent'
name|'or'
string|'"."'
newline|'\n'
name|'ignore'
op|'='
name|'ignore'
name|'or'
op|'['
op|']'
newline|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'directory'
op|','
name|'subdirectories'
op|','
name|'filenames'
name|'in'
name|'os'
op|'.'
name|'walk'
op|'('
name|'dname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resultfiles'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'exname'
name|'in'
name|'EXCLUDE_NAMES'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'exname'
name|'in'
name|'subdirectories'
op|':'
newline|'\n'
indent|'                '
name|'subdirectories'
op|'.'
name|'remove'
op|'('
name|'exname'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'ig'
name|'in'
name|'ignore'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ig'
name|'in'
name|'subdirectories'
op|':'
newline|'\n'
indent|'                '
name|'subdirectories'
op|'.'
name|'remove'
op|'('
name|'ig'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'filename'
name|'in'
name|'_filterNames'
op|'('
name|'filenames'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resultfiles'
op|'.'
name|'append'
op|'('
name|'filename'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'resultfiles'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'append'
op|'('
op|'('
name|'relativeTo'
op|'('
name|'parent'
op|','
name|'directory'
op|')'
op|','
nl|'\n'
op|'['
name|'relativeTo'
op|'('
name|'parent'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'directory'
op|','
name|'filename'
op|')'
op|')'
nl|'\n'
name|'for'
name|'filename'
name|'in'
name|'resultfiles'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|function|getPackages
dedent|''
name|'def'
name|'getPackages'
op|'('
name|'dname'
op|','
name|'pkgname'
op|'='
name|'None'
op|','
name|'results'
op|'='
name|'None'
op|','
name|'ignore'
op|'='
name|'None'
op|','
name|'parent'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get all packages which are under dname. This is necessary for\n    Python 2.2\'s distutils. Pretty similar arguments to getDataFiles,\n    including \'parent\'.\n    """'
newline|'\n'
name|'parent'
op|'='
name|'parent'
name|'or'
string|'""'
newline|'\n'
name|'prefix'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'parent'
op|':'
newline|'\n'
indent|'        '
name|'prefix'
op|'='
op|'['
name|'parent'
op|']'
newline|'\n'
dedent|''
name|'bname'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'dname'
op|')'
newline|'\n'
name|'ignore'
op|'='
name|'ignore'
name|'or'
op|'['
op|']'
newline|'\n'
name|'if'
name|'bname'
name|'in'
name|'ignore'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'if'
name|'results'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'if'
name|'pkgname'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'pkgname'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'subfiles'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'dname'
op|')'
newline|'\n'
name|'abssubfiles'
op|'='
op|'['
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'dname'
op|','
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'subfiles'
op|']'
newline|'\n'
name|'if'
string|"'__init__.py'"
name|'in'
name|'subfiles'
op|':'
newline|'\n'
indent|'        '
name|'results'
op|'.'
name|'append'
op|'('
name|'prefix'
op|'+'
name|'pkgname'
op|'+'
op|'['
name|'bname'
op|']'
op|')'
newline|'\n'
name|'for'
name|'subdir'
name|'in'
name|'filter'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|','
name|'abssubfiles'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'getPackages'
op|'('
name|'subdir'
op|','
name|'pkgname'
op|'='
name|'pkgname'
op|'+'
op|'['
name|'bname'
op|']'
op|','
nl|'\n'
name|'results'
op|'='
name|'results'
op|','
name|'ignore'
op|'='
name|'ignore'
op|','
nl|'\n'
name|'parent'
op|'='
name|'parent'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'res'
op|'='
op|'['
string|"'.'"
op|'.'
name|'join'
op|'('
name|'result'
op|')'
name|'for'
name|'result'
name|'in'
name|'results'
op|']'
newline|'\n'
name|'return'
name|'res'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|getScripts
dedent|''
name|'def'
name|'getScripts'
op|'('
name|'projname'
op|','
name|'basedir'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns a list of scripts for a Twisted subproject; this works in\n    any of an SVN checkout, a project-specific tarball.\n    """'
newline|'\n'
name|'scriptdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'basedir'
op|','
string|"'bin'"
op|','
name|'projname'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'scriptdir'
op|')'
op|':'
newline|'\n'
comment|'# Probably a project-specific tarball, in which case only this'
nl|'\n'
comment|"# project's bins are included in 'bin'"
nl|'\n'
indent|'        '
name|'scriptdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'basedir'
op|','
string|"'bin'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'scriptdir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
dedent|''
name|'thingies'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'scriptdir'
op|')'
newline|'\n'
name|'if'
string|"'.svn'"
name|'in'
name|'thingies'
op|':'
newline|'\n'
indent|'        '
name|'thingies'
op|'.'
name|'remove'
op|'('
string|"'.svn'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'filter'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|','
nl|'\n'
op|'['
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'scriptdir'
op|','
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'thingies'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'## Helpers and distutil tweaks'
nl|'\n'
nl|'\n'
DECL|class|build_py_twisted
dedent|''
name|'class'
name|'build_py_twisted'
op|'('
name|'build_py'
op|'.'
name|'build_py'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Changes behavior in Python 2.2 to support simultaneous specification of\n    `packages\' and `py_modules\'.\n    """'
newline|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'py_modules'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_modules'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'packages'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_packages'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'byte_compile'
op|'('
name|'self'
op|'.'
name|'get_outputs'
op|'('
name|'include_bytecode'
op|'='
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|build_scripts_twisted
dedent|''
dedent|''
name|'class'
name|'build_scripts_twisted'
op|'('
name|'build_scripts'
op|'.'
name|'build_scripts'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Renames scripts so they end with \'.py\' on Windows."""'
newline|'\n'
nl|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'build_scripts'
op|'.'
name|'build_scripts'
op|'.'
name|'run'
op|'('
name|'self'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'name'
op|'=='
string|'"nt"'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'for'
name|'f'
name|'in'
name|'os'
op|'.'
name|'listdir'
op|'('
name|'self'
op|'.'
name|'build_dir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fpath'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'build_dir'
op|','
name|'f'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fpath'
op|'.'
name|'endswith'
op|'('
string|'".py"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'fpath'
op|'+'
string|'".py"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'EnvironmentError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'e'
op|'.'
name|'args'
op|'['
number|'1'
op|']'
op|'=='
string|"'No such file or directory'"
op|':'
newline|'\n'
indent|'                        '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'os'
op|'.'
name|'rename'
op|'('
name|'fpath'
op|','
name|'fpath'
op|'+'
string|'".py"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|install_data_twisted
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'install_data_twisted'
op|'('
name|'install_data'
op|'.'
name|'install_data'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""I make sure data files are installed in the package directory."""'
newline|'\n'
DECL|member|finalize_options
name|'def'
name|'finalize_options'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'set_undefined_options'
op|'('
string|"'install'"
op|','
nl|'\n'
op|'('
string|"'install_lib'"
op|','
string|"'install_dir'"
op|')'
nl|'\n'
op|')'
newline|'\n'
name|'install_data'
op|'.'
name|'install_data'
op|'.'
name|'finalize_options'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|build_ext_twisted
dedent|''
dedent|''
name|'class'
name|'build_ext_twisted'
op|'('
name|'build_ext'
op|'.'
name|'build_ext'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Allow subclasses to easily detect and customize Extensions to\n    build at install-time.\n    """'
newline|'\n'
nl|'\n'
DECL|member|prepare_extensions
name|'def'
name|'prepare_extensions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Prepare the C{self.extensions} attribute (used by\n        L{build_ext.build_ext}) by checking which extensions in\n        L{conditionalExtensions} should be built.  In addition, if we are\n        building on NT, define the WIN32 macro to 1.\n        """'
newline|'\n'
comment|'# always define WIN32 under Windows'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'name'
op|'=='
string|"'nt'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'define_macros'
op|'='
op|'['
op|'('
string|'"WIN32"'
op|','
number|'1'
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'define_macros'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'extensions'
op|'='
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'self'
op|'.'
name|'conditionalExtensions'
nl|'\n'
name|'if'
name|'x'
op|'.'
name|'condition'
op|'('
name|'self'
op|')'
op|']'
newline|'\n'
name|'for'
name|'ext'
name|'in'
name|'self'
op|'.'
name|'extensions'
op|':'
newline|'\n'
indent|'            '
name|'ext'
op|'.'
name|'define_macros'
op|'.'
name|'extend'
op|'('
name|'self'
op|'.'
name|'define_macros'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|build_extensions
dedent|''
dedent|''
name|'def'
name|'build_extensions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check to see which extension modules to build and then build them.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'prepare_extensions'
op|'('
op|')'
newline|'\n'
name|'build_ext'
op|'.'
name|'build_ext'
op|'.'
name|'build_extensions'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_remove_conftest
dedent|''
name|'def'
name|'_remove_conftest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'filename'
name|'in'
op|'('
string|'"conftest.c"'
op|','
string|'"conftest.o"'
op|','
string|'"conftest.obj"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'filename'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'EnvironmentError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_compile_helper
dedent|''
dedent|''
dedent|''
name|'def'
name|'_compile_helper'
op|'('
name|'self'
op|','
name|'content'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conftest'
op|'='
name|'open'
op|'('
string|'"conftest.c"'
op|','
string|'"w"'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'conftest'
op|'.'
name|'write'
op|'('
name|'content'
op|')'
newline|'\n'
name|'conftest'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'compiler'
op|'.'
name|'compile'
op|'('
op|'['
string|'"conftest.c"'
op|']'
op|','
name|'output_dir'
op|'='
string|"''"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'CompileError'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_remove_conftest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_check_header
dedent|''
dedent|''
name|'def'
name|'_check_header'
op|'('
name|'self'
op|','
name|'header_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if the given header can be included by trying to compile a file\n        that contains only an #include line.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'compiler'
op|'.'
name|'announce'
op|'('
string|'"checking for %s ..."'
op|'%'
name|'header_name'
op|','
number|'0'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_compile_helper'
op|'('
string|'"#include <%s>\\n"'
op|'%'
name|'header_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.test.test_logfile -*-'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nA rotating, browsable log file.\n"""'
newline|'\n'
nl|'\n'
comment|'# System Imports'
nl|'\n'
name|'import'
name|'os'
op|','
name|'glob'
op|','
name|'time'
op|','
name|'stat'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'threadable'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseLogFile
name|'class'
name|'BaseLogFile'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The base class for a log file that can be rotated.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|synchronized
name|'synchronized'
op|'='
op|'['
string|'"write"'
op|','
string|'"rotate"'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'directory'
op|','
name|'defaultMode'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a log file.\n\n        @param name: name of the file\n        @param directory: directory holding the file\n        @param defaultMode: permissions used to create the file. Default to\n        current permissions of the file if the file exists.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'directory'
op|'='
name|'directory'
newline|'\n'
name|'assert'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'self'
op|'.'
name|'directory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'directory'
op|','
name|'name'
op|')'
newline|'\n'
name|'if'
name|'defaultMode'
name|'is'
name|'None'
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'defaultMode'
op|'='
name|'stat'
op|'.'
name|'S_IMODE'
op|'('
name|'os'
op|'.'
name|'stat'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|'['
name|'stat'
op|'.'
name|'ST_MODE'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'defaultMode'
op|'='
name|'defaultMode'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_openFile'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|fromFullPath
dedent|''
name|'def'
name|'fromFullPath'
op|'('
name|'cls'
op|','
name|'filename'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Construct a log file from a full file path.\n        """'
newline|'\n'
name|'logPath'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'return'
name|'cls'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'logPath'
op|')'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'logPath'
op|')'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
DECL|variable|fromFullPath
dedent|''
name|'fromFullPath'
op|'='
name|'classmethod'
op|'('
name|'fromFullPath'
op|')'
newline|'\n'
nl|'\n'
DECL|member|shouldRotate
name|'def'
name|'shouldRotate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override with a method to that returns true if the log\n        should be rotated.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|_openFile
dedent|''
name|'def'
name|'_openFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Open the log file.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'closed'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_file'
op|'='
name|'file'
op|'('
name|'self'
op|'.'
name|'path'
op|','
string|'"r+"'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_file'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'defaultMode'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|'# Set the lowest permissions'
nl|'\n'
indent|'                '
name|'oldUmask'
op|'='
name|'os'
op|'.'
name|'umask'
op|'('
number|'0777'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_file'
op|'='
name|'file'
op|'('
name|'self'
op|'.'
name|'path'
op|','
string|'"w+"'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                    '
name|'os'
op|'.'
name|'umask'
op|'('
name|'oldUmask'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_file'
op|'='
name|'file'
op|'('
name|'self'
op|'.'
name|'path'
op|','
string|'"w+"'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'defaultMode'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'chmod'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'self'
op|'.'
name|'defaultMode'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
comment|'# Probably /dev/null or something?'
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
dedent|''
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'state'
op|'='
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'del'
name|'state'
op|'['
string|'"_file"'
op|']'
newline|'\n'
name|'return'
name|'state'
newline|'\n'
nl|'\n'
DECL|member|__setstate__
dedent|''
name|'def'
name|'__setstate__'
op|'('
name|'self'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__dict__'
op|'='
name|'state'
newline|'\n'
name|'self'
op|'.'
name|'_openFile'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write some data to the file.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'shouldRotate'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rotate'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_file'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|flush
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Flush the file.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_file'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close the file.\n\n        The file cannot be used once it has been closed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'closed'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'_file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_file'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|reopen
dedent|''
name|'def'
name|'reopen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reopen the log file. This is mainly useful if you use an external log\n        rotation tool, which moves under your feet.\n\n        Note that on Windows you probably need a specific API to rename the\n        file, as it\'s not supported to simply use os.rename, for example.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openFile'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getCurrentLog
dedent|''
name|'def'
name|'getCurrentLog'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a LogReader for the current log file.\n        """'
newline|'\n'
name|'return'
name|'LogReader'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LogFile
dedent|''
dedent|''
name|'class'
name|'LogFile'
op|'('
name|'BaseLogFile'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A log file that can be rotated.\n\n    A rotateLength of None disables automatic log rotation.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'directory'
op|','
name|'rotateLength'
op|'='
number|'1000000'
op|','
name|'defaultMode'
op|'='
name|'None'
op|','
nl|'\n'
name|'maxRotatedFiles'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a log file rotating on length.\n\n        @param name: file name.\n        @type name: C{str}\n        @param directory: path of the log file.\n        @type directory: C{str}\n        @param rotateLength: size of the log file where it rotates. Default to\n            1M.\n        @type rotateLength: C{int}\n        @param defaultMode: mode used to create the file.\n        @type defaultMode: C{int}\n        @param maxRotatedFiles: if not None, max number of log files the class\n            creates. Warning: it removes all log files above this number.\n        @type maxRotatedFiles: C{int}\n        """'
newline|'\n'
name|'BaseLogFile'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'directory'
op|','
name|'defaultMode'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rotateLength'
op|'='
name|'rotateLength'
newline|'\n'
name|'self'
op|'.'
name|'maxRotatedFiles'
op|'='
name|'maxRotatedFiles'
newline|'\n'
nl|'\n'
DECL|member|_openFile
dedent|''
name|'def'
name|'_openFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'BaseLogFile'
op|'.'
name|'_openFile'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'size'
op|'='
name|'self'
op|'.'
name|'_file'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|shouldRotate
dedent|''
name|'def'
name|'shouldRotate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Rotate when the log file size is larger than rotateLength.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'rotateLength'
name|'and'
name|'self'
op|'.'
name|'size'
op|'>='
name|'self'
op|'.'
name|'rotateLength'
newline|'\n'
nl|'\n'
DECL|member|getLog
dedent|''
name|'def'
name|'getLog'
op|'('
name|'self'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given an integer, return a LogReader for an old log file.\n        """'
newline|'\n'
name|'filename'
op|'='
string|'"%s.%d"'
op|'%'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'identifier'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|'"no such logfile exists"'
newline|'\n'
dedent|''
name|'return'
name|'LogReader'
op|'('
name|'filename'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write some data to the file.\n        """'
newline|'\n'
name|'BaseLogFile'
op|'.'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'size'
op|'+='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rotate
dedent|''
name|'def'
name|'rotate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Rotate the file and create a new one.\n\n        If it\'s not possible to open new logfile, this will fail silently,\n        and continue logging to old logfile.\n        """'
newline|'\n'
name|'if'
name|'not'
op|'('
name|'os'
op|'.'
name|'access'
op|'('
name|'self'
op|'.'
name|'directory'
op|','
name|'os'
op|'.'
name|'W_OK'
op|')'
name|'and'
name|'os'
op|'.'
name|'access'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'os'
op|'.'
name|'W_OK'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'logs'
op|'='
name|'self'
op|'.'
name|'listLogs'
op|'('
op|')'
newline|'\n'
name|'logs'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'logs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'maxRotatedFiles'
name|'is'
name|'not'
name|'None'
name|'and'
name|'i'
op|'>='
name|'self'
op|'.'
name|'maxRotatedFiles'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'remove'
op|'('
string|'"%s.%d"'
op|'%'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'i'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'rename'
op|'('
string|'"%s.%d"'
op|'%'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'i'
op|')'
op|','
string|'"%s.%d"'
op|'%'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'i'
op|'+'
number|'1'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'rename'
op|'('
name|'self'
op|'.'
name|'path'
op|','
string|'"%s.1"'
op|'%'
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openFile'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|listLogs
dedent|''
name|'def'
name|'listLogs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return sorted list of integers - the old logs\' identifiers.\n        """'
newline|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'glob'
op|'.'
name|'glob'
op|'('
string|'"%s.*"'
op|'%'
name|'self'
op|'.'
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'counter'
op|'='
name|'int'
op|'('
name|'name'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
name|'if'
name|'counter'
op|':'
newline|'\n'
indent|'                    '
name|'result'
op|'.'
name|'append'
op|'('
name|'counter'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'result'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'state'
op|'='
name|'BaseLogFile'
op|'.'
name|'__getstate__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'del'
name|'state'
op|'['
string|'"size"'
op|']'
newline|'\n'
name|'return'
name|'state'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'threadable'
op|'.'
name|'synchronize'
op|'('
name|'LogFile'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DailyLogFile
name|'class'
name|'DailyLogFile'
op|'('
name|'BaseLogFile'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A log file that is rotated daily (at or after midnight localtime)\n    """'
newline|'\n'
DECL|member|_openFile
name|'def'
name|'_openFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'BaseLogFile'
op|'.'
name|'_openFile'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lastDate'
op|'='
name|'self'
op|'.'
name|'toDate'
op|'('
name|'os'
op|'.'
name|'stat'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|'['
number|'8'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|shouldRotate
dedent|''
name|'def'
name|'shouldRotate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rotate when the date has changed since last write"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'toDate'
op|'('
op|')'
op|'>'
name|'self'
op|'.'
name|'lastDate'
newline|'\n'
nl|'\n'
DECL|member|toDate
dedent|''
name|'def'
name|'toDate'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convert a unixtime to (year, month, day) localtime tuple,\n        or return the current (year, month, day) localtime tuple.\n\n        This function primarily exists so you may overload it with\n        gmtime, or some cruft to make unit testing possible.\n        """'
newline|'\n'
comment|'# primarily so this can be unit tested easily'
nl|'\n'
name|'return'
name|'time'
op|'.'
name|'localtime'
op|'('
op|'*'
name|'args'
op|')'
op|'['
op|':'
number|'3'
op|']'
newline|'\n'
nl|'\n'
DECL|member|suffix
dedent|''
name|'def'
name|'suffix'
op|'('
name|'self'
op|','
name|'tupledate'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the suffix given a (year, month, day) tuple or unixtime"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'_'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'tupledate'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
comment|'# try taking a float unixtime'
nl|'\n'
indent|'            '
name|'return'
string|"'_'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'self'
op|'.'
name|'toDate'
op|'('
name|'tupledate'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getLog
dedent|''
dedent|''
name|'def'
name|'getLog'
op|'('
name|'self'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given a unix time, return a LogReader for an old log file."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'toDate'
op|'('
name|'identifier'
op|')'
op|'=='
name|'self'
op|'.'
name|'lastDate'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'getCurrentLog'
op|'('
op|')'
newline|'\n'
dedent|''
name|'filename'
op|'='
string|'"%s.%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'self'
op|'.'
name|'suffix'
op|'('
name|'identifier'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|'"no such logfile exists"'
newline|'\n'
dedent|''
name|'return'
name|'LogReader'
op|'('
name|'filename'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write some data to the log file"""'
newline|'\n'
name|'BaseLogFile'
op|'.'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
newline|'\n'
comment|'# Guard against a corner case where time.time()'
nl|'\n'
comment|'# could potentially run backwards to yesterday.'
nl|'\n'
comment|'# Primarily due to network time.'
nl|'\n'
name|'self'
op|'.'
name|'lastDate'
op|'='
name|'max'
op|'('
name|'self'
op|'.'
name|'lastDate'
op|','
name|'self'
op|'.'
name|'toDate'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rotate
dedent|''
name|'def'
name|'rotate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rotate the file and create a new one.\n\n        If it\'s not possible to open new logfile, this will fail silently,\n        and continue logging to old logfile.\n        """'
newline|'\n'
name|'if'
name|'not'
op|'('
name|'os'
op|'.'
name|'access'
op|'('
name|'self'
op|'.'
name|'directory'
op|','
name|'os'
op|'.'
name|'W_OK'
op|')'
name|'and'
name|'os'
op|'.'
name|'access'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'os'
op|'.'
name|'W_OK'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'newpath'
op|'='
string|'"%s.%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'self'
op|'.'
name|'suffix'
op|'('
name|'self'
op|'.'
name|'lastDate'
op|')'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'newpath'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'rename'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'newpath'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openFile'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'state'
op|'='
name|'BaseLogFile'
op|'.'
name|'__getstate__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'del'
name|'state'
op|'['
string|'"lastDate"'
op|']'
newline|'\n'
name|'return'
name|'state'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'threadable'
op|'.'
name|'synchronize'
op|'('
name|'DailyLogFile'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LogReader
name|'class'
name|'LogReader'
op|':'
newline|'\n'
indent|'    '
string|'"""Read from a log file."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_file'
op|'='
name|'file'
op|'('
name|'name'
op|','
string|'"r"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|readLines
dedent|''
name|'def'
name|'readLines'
op|'('
name|'self'
op|','
name|'lines'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Read a list of lines from the log file.\n\n        This doesn\'t returns all of the files lines - call it multiple times.\n        """'
newline|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'lines'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
name|'self'
op|'.'
name|'_file'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'line'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'result'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

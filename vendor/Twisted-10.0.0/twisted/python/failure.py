begin_unit
comment|'# -*- test-case-name: twisted.test.test_failure -*-'
nl|'\n'
comment|'# See also test suite twisted.test.test_pbfailure'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nAsynchronous-friendly error mechanism.\n\nSee L{Failure}.\n"""'
newline|'\n'
nl|'\n'
comment|'# System Imports'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'linecache'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'opcode'
newline|'\n'
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'reflect'
newline|'\n'
nl|'\n'
DECL|variable|count
name|'count'
op|'='
number|'0'
newline|'\n'
DECL|variable|traceupLength
name|'traceupLength'
op|'='
number|'4'
newline|'\n'
nl|'\n'
DECL|class|DefaultException
name|'class'
name|'DefaultException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|format_frames
dedent|''
name|'def'
name|'format_frames'
op|'('
name|'frames'
op|','
name|'write'
op|','
name|'detail'
op|'='
string|'"default"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Format and write frames.\n\n    @param frames: is a list of frames as used by Failure.frames, with\n        each frame being a list of\n        (funcName, fileName, lineNumber, locals.items(), globals.items())\n    @type frames: list\n    @param write: this will be called with formatted strings.\n    @type write: callable\n    @param detail: Three detail levels are available:\n        default, brief, and verbose.\n    @type detail: string\n    """'
newline|'\n'
name|'if'
name|'detail'
name|'not'
name|'in'
op|'('
string|"'default'"
op|','
string|"'brief'"
op|','
string|"'verbose'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|','
string|'"Detail must be default, brief, or verbose. (not %r)"'
op|'%'
op|'('
name|'detail'
op|','
op|')'
newline|'\n'
dedent|''
name|'w'
op|'='
name|'write'
newline|'\n'
name|'if'
name|'detail'
op|'=='
string|'"brief"'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'method'
op|','
name|'filename'
op|','
name|'lineno'
op|','
name|'localVars'
op|','
name|'globalVars'
name|'in'
name|'frames'
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'('
string|"'%s:%s:%s\\n'"
op|'%'
op|'('
name|'filename'
op|','
name|'lineno'
op|','
name|'method'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'detail'
op|'=='
string|'"default"'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'method'
op|','
name|'filename'
op|','
name|'lineno'
op|','
name|'localVars'
op|','
name|'globalVars'
name|'in'
name|'frames'
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'('
string|'\'  File "%s", line %s, in %s\\n\''
op|'%'
op|'('
name|'filename'
op|','
name|'lineno'
op|','
name|'method'
op|')'
op|')'
newline|'\n'
name|'w'
op|'('
string|"'    %s\\n'"
op|'%'
name|'linecache'
op|'.'
name|'getline'
op|'('
name|'filename'
op|','
name|'lineno'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'detail'
op|'=='
string|'"verbose"'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'method'
op|','
name|'filename'
op|','
name|'lineno'
op|','
name|'localVars'
op|','
name|'globalVars'
name|'in'
name|'frames'
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'('
string|'"%s:%d: %s(...)\\n"'
op|'%'
op|'('
name|'filename'
op|','
name|'lineno'
op|','
name|'method'
op|')'
op|')'
newline|'\n'
name|'w'
op|'('
string|"' [ Locals ]\\n'"
op|')'
newline|'\n'
comment|'# Note: the repr(val) was (self.pickled and val) or repr(val)))'
nl|'\n'
name|'for'
name|'name'
op|','
name|'val'
name|'in'
name|'localVars'
op|':'
newline|'\n'
indent|'                '
name|'w'
op|'('
string|'"  %s : %s\\n"'
op|'%'
op|'('
name|'name'
op|','
name|'repr'
op|'('
name|'val'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'w'
op|'('
string|"' ( Globals )\\n'"
op|')'
newline|'\n'
name|'for'
name|'name'
op|','
name|'val'
name|'in'
name|'globalVars'
op|':'
newline|'\n'
indent|'                '
name|'w'
op|'('
string|'"  %s : %s\\n"'
op|'%'
op|'('
name|'name'
op|','
name|'repr'
op|'('
name|'val'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# slyphon: i have a need to check for this value in trial'
nl|'\n'
comment|'#          so I made it a module-level constant'
nl|'\n'
DECL|variable|EXCEPTION_CAUGHT_HERE
dedent|''
dedent|''
dedent|''
dedent|''
name|'EXCEPTION_CAUGHT_HERE'
op|'='
string|'"--- <exception caught here> ---"'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoCurrentExceptionError
name|'class'
name|'NoCurrentExceptionError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when trying to create a Failure from the current interpreter\n    exception state and there is no current exception state.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Traceback
dedent|''
name|'class'
name|'_Traceback'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Fake traceback object which can be passed to functions in the standard\n    library L{traceback} module.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'frames'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Construct a fake traceback object using a list of frames. Note that\n        although frames generally include locals and globals, this information\n        is not kept by this object, since locals and globals are not used in\n        standard tracebacks.\n\n        @param frames: [(methodname, filename, lineno, locals, globals), ...]\n        """'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'frames'
op|')'
op|'>'
number|'0'
op|','
string|'"Must pass some frames"'
newline|'\n'
name|'head'
op|','
name|'frames'
op|'='
name|'frames'
op|'['
number|'0'
op|']'
op|','
name|'frames'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'name'
op|','
name|'filename'
op|','
name|'lineno'
op|','
name|'localz'
op|','
name|'globalz'
op|'='
name|'head'
newline|'\n'
name|'self'
op|'.'
name|'tb_frame'
op|'='
name|'_Frame'
op|'('
name|'name'
op|','
name|'filename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tb_lineno'
op|'='
name|'lineno'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'frames'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'tb_next'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'tb_next'
op|'='
name|'_Traceback'
op|'('
name|'frames'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Frame
dedent|''
dedent|''
dedent|''
name|'class'
name|'_Frame'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A fake frame object, used by L{_Traceback}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'f_code'
op|'='
name|'_Code'
op|'('
name|'name'
op|','
name|'filename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'f_globals'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Code
dedent|''
dedent|''
name|'class'
name|'_Code'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A fake code object, used by L{_Traceback} via L{_Frame}.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'co_name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'co_filename'
op|'='
name|'filename'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Failure
dedent|''
dedent|''
name|'class'
name|'Failure'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A basic abstraction for an error that has occurred.\n\n    This is necessary because Python\'s built-in error mechanisms are\n    inconvenient for asynchronous communication.\n\n    @ivar value: The exception instance responsible for this failure.\n    @ivar type: The exception\'s class.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|pickled
name|'pickled'
op|'='
number|'0'
newline|'\n'
DECL|variable|stack
name|'stack'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# The opcode of "yield" in Python bytecode. We need this in _findFailure in'
nl|'\n'
comment|'# order to identify whether an exception was thrown by a'
nl|'\n'
comment|'# throwExceptionIntoGenerator.'
nl|'\n'
DECL|variable|_yieldOpcode
name|'_yieldOpcode'
op|'='
name|'chr'
op|'('
name|'opcode'
op|'.'
name|'opmap'
op|'['
string|'"YIELD_VALUE"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'exc_value'
op|'='
name|'None'
op|','
name|'exc_type'
op|'='
name|'None'
op|','
name|'exc_tb'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initialize me with an explanation of the error.\n\n        By default, this will use the current C{exception}\n        (L{sys.exc_info}()).  However, if you want to specify a\n        particular kind of failure, you can pass an exception as an\n        argument.\n\n        If no C{exc_value} is passed, then an "original" C{Failure} will\n        be searched for. If the current exception handler that this\n        C{Failure} is being constructed in is handling an exception\n        raised by L{raiseException}, then this C{Failure} will act like\n        the original C{Failure}.\n\n        For C{exc_tb} only L{traceback} instances or C{None} are allowed.\n        If C{None} is supplied for C{exc_value}, the value of C{exc_tb} is\n        ignored, otherwise if C{exc_tb} is C{None}, it will be found from\n        execution context (ie, L{sys.exc_info}).\n        """'
newline|'\n'
name|'global'
name|'count'
newline|'\n'
name|'count'
op|'='
name|'count'
op|'+'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'count'
op|'='
name|'count'
newline|'\n'
name|'self'
op|'.'
name|'type'
op|'='
name|'self'
op|'.'
name|'value'
op|'='
name|'tb'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'#strings Exceptions/Failures are bad, mmkay?'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'exc_value'
op|','
op|'('
name|'str'
op|','
name|'unicode'
op|')'
op|')'
name|'and'
name|'exc_type'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'warnings'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"Don\'t pass strings (like %r) to failure.Failure (replacing with a DefaultException)."'
op|'%'
nl|'\n'
name|'exc_value'
op|','
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'exc_value'
op|'='
name|'DefaultException'
op|'('
name|'exc_value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'stackOffset'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'if'
name|'exc_value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'exc_value'
op|'='
name|'self'
op|'.'
name|'_findFailure'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'exc_value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'type'
op|','
name|'self'
op|'.'
name|'value'
op|','
name|'tb'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'type'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'NoCurrentExceptionError'
op|'('
op|')'
newline|'\n'
dedent|''
name|'stackOffset'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'exc_type'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'exc_value'
op|','
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'type'
op|'='
name|'exc_value'
op|'.'
name|'__class__'
newline|'\n'
dedent|''
name|'else'
op|':'
comment|'#allow arbitrary objects.'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'type'
op|'='
name|'type'
op|'('
name|'exc_value'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'value'
op|'='
name|'exc_value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'type'
op|'='
name|'exc_type'
newline|'\n'
name|'self'
op|'.'
name|'value'
op|'='
name|'exc_value'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'value'
op|','
name|'Failure'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__dict__'
op|'='
name|'self'
op|'.'
name|'value'
op|'.'
name|'__dict__'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'tb'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'exc_tb'
op|':'
newline|'\n'
indent|'                '
name|'tb'
op|'='
name|'exc_tb'
newline|'\n'
comment|'#             else:'
nl|'\n'
comment|'#                 log.msg("Erf, %r created with no traceback, %s %s." % ('
nl|'\n'
comment|'#                     repr(self), repr(exc_value), repr(exc_type)))'
nl|'\n'
comment|'#                 for s in traceback.format_stack():'
nl|'\n'
comment|'#                     log.msg(s)'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'frames'
op|'='
name|'self'
op|'.'
name|'frames'
op|'='
op|'['
op|']'
newline|'\n'
name|'stack'
op|'='
name|'self'
op|'.'
name|'stack'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# added 2003-06-23 by Chris Armstrong. Yes, I actually have a'
nl|'\n'
comment|"# use case where I need this traceback object, and I've made"
nl|'\n'
comment|"# sure that it'll be cleaned up."
nl|'\n'
name|'self'
op|'.'
name|'tb'
op|'='
name|'tb'
newline|'\n'
nl|'\n'
name|'if'
name|'tb'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'tb'
op|'.'
name|'tb_frame'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'value'
op|','
name|'Failure'
op|')'
op|':'
newline|'\n'
comment|"# we don't do frame introspection since it's expensive,"
nl|'\n'
comment|'# and if we were passed a plain exception with no'
nl|'\n'
comment|"# traceback, it's not useful anyway"
nl|'\n'
indent|'            '
name|'f'
op|'='
name|'stackOffset'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'while'
name|'stackOffset'
name|'and'
name|'f'
op|':'
newline|'\n'
comment|'# This excludes this Failure.__init__ frame from the'
nl|'\n'
comment|'# stack, leaving it to start with our caller instead.'
nl|'\n'
indent|'            '
name|'f'
op|'='
name|'f'
op|'.'
name|'f_back'
newline|'\n'
name|'stackOffset'
op|'-='
number|'1'
newline|'\n'
nl|'\n'
comment|'# Keeps the *full* stack.  Formerly in spread.pb.print_excFullStack:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#   The need for this function arises from the fact that several'
nl|'\n'
comment|'#   PB classes have the peculiar habit of discarding exceptions'
nl|'\n'
comment|'#   with bareword "except:"s.  This premature exception'
nl|'\n'
comment|"#   catching means tracebacks generated here don't tend to show"
nl|'\n'
comment|'#   what called upon the PB object.'
nl|'\n'
nl|'\n'
dedent|''
name|'while'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'localz'
op|'='
name|'f'
op|'.'
name|'f_locals'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'if'
name|'f'
op|'.'
name|'f_locals'
name|'is'
name|'f'
op|'.'
name|'f_globals'
op|':'
newline|'\n'
indent|'                '
name|'globalz'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'globalz'
op|'='
name|'f'
op|'.'
name|'f_globals'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'for'
name|'d'
name|'in'
name|'globalz'
op|','
name|'localz'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'d'
op|'.'
name|'has_key'
op|'('
string|'"__builtins__"'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'del'
name|'d'
op|'['
string|'"__builtins__"'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'stack'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
op|'['
nl|'\n'
name|'f'
op|'.'
name|'f_code'
op|'.'
name|'co_name'
op|','
nl|'\n'
name|'f'
op|'.'
name|'f_code'
op|'.'
name|'co_filename'
op|','
nl|'\n'
name|'f'
op|'.'
name|'f_lineno'
op|','
nl|'\n'
name|'localz'
op|'.'
name|'items'
op|'('
op|')'
op|','
nl|'\n'
name|'globalz'
op|'.'
name|'items'
op|'('
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'f'
op|'='
name|'f'
op|'.'
name|'f_back'
newline|'\n'
nl|'\n'
dedent|''
name|'while'
name|'tb'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'tb'
op|'.'
name|'tb_frame'
newline|'\n'
name|'localz'
op|'='
name|'f'
op|'.'
name|'f_locals'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'if'
name|'f'
op|'.'
name|'f_locals'
name|'is'
name|'f'
op|'.'
name|'f_globals'
op|':'
newline|'\n'
indent|'                '
name|'globalz'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'globalz'
op|'='
name|'f'
op|'.'
name|'f_globals'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'for'
name|'d'
name|'in'
name|'globalz'
op|','
name|'localz'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'d'
op|'.'
name|'has_key'
op|'('
string|'"__builtins__"'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'del'
name|'d'
op|'['
string|'"__builtins__"'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'frames'
op|'.'
name|'append'
op|'('
op|'['
nl|'\n'
name|'f'
op|'.'
name|'f_code'
op|'.'
name|'co_name'
op|','
nl|'\n'
name|'f'
op|'.'
name|'f_code'
op|'.'
name|'co_filename'
op|','
nl|'\n'
name|'tb'
op|'.'
name|'tb_lineno'
op|','
nl|'\n'
name|'localz'
op|'.'
name|'items'
op|'('
op|')'
op|','
nl|'\n'
name|'globalz'
op|'.'
name|'items'
op|'('
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'tb'
op|'='
name|'tb'
op|'.'
name|'tb_next'
newline|'\n'
dedent|''
name|'if'
name|'inspect'
op|'.'
name|'isclass'
op|'('
name|'self'
op|'.'
name|'type'
op|')'
name|'and'
name|'issubclass'
op|'('
name|'self'
op|'.'
name|'type'
op|','
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'parentCs'
op|'='
name|'reflect'
op|'.'
name|'allYourBase'
op|'('
name|'self'
op|'.'
name|'type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parents'
op|'='
name|'map'
op|'('
name|'reflect'
op|'.'
name|'qual'
op|','
name|'parentCs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parents'
op|'.'
name|'append'
op|'('
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'type'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'parents'
op|'='
op|'['
name|'self'
op|'.'
name|'type'
op|']'
newline|'\n'
nl|'\n'
DECL|member|trap
dedent|''
dedent|''
name|'def'
name|'trap'
op|'('
name|'self'
op|','
op|'*'
name|'errorTypes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Trap this failure if its type is in a predetermined list.\n\n        This allows you to trap a Failure in an error callback.  It will be\n        automatically re-raised if it is not a type that you expect.\n\n        The reason for having this particular API is because it\'s very useful\n        in Deferred errback chains::\n\n            def _ebFoo(self, failure):\n                r = failure.trap(Spam, Eggs)\n                print \'The Failure is due to either Spam or Eggs!\'\n                if r == Spam:\n                    print \'Spam did it!\'\n                elif r == Eggs:\n                    print \'Eggs did it!\'\n\n        If the failure is not a Spam or an Eggs, then the Failure\n        will be \'passed on\' to the next errback.\n\n        @type errorTypes: L{Exception}\n        """'
newline|'\n'
name|'error'
op|'='
name|'self'
op|'.'
name|'check'
op|'('
op|'*'
name|'errorTypes'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
newline|'\n'
dedent|''
name|'return'
name|'error'
newline|'\n'
nl|'\n'
DECL|member|check
dedent|''
name|'def'
name|'check'
op|'('
name|'self'
op|','
op|'*'
name|'errorTypes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if this failure\'s type is in a predetermined list.\n\n        @type errorTypes: list of L{Exception} classes or\n                          fully-qualified class names.\n        @returns: the matching L{Exception} type, or None if no match.\n        """'
newline|'\n'
name|'for'
name|'error'
name|'in'
name|'errorTypes'
op|':'
newline|'\n'
indent|'            '
name|'err'
op|'='
name|'error'
newline|'\n'
name|'if'
name|'inspect'
op|'.'
name|'isclass'
op|'('
name|'error'
op|')'
name|'and'
name|'issubclass'
op|'('
name|'error'
op|','
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'err'
op|'='
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'error'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'err'
name|'in'
name|'self'
op|'.'
name|'parents'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'error'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|raiseException
dedent|''
name|'def'
name|'raiseException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        raise the original exception, preserving traceback\n        information if available.\n        """'
newline|'\n'
name|'raise'
name|'self'
op|'.'
name|'type'
op|','
name|'self'
op|'.'
name|'value'
op|','
name|'self'
op|'.'
name|'tb'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|throwExceptionIntoGenerator
dedent|''
name|'def'
name|'throwExceptionIntoGenerator'
op|'('
name|'self'
op|','
name|'g'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Throw the original exception into the given generator,\n        preserving traceback information if available.\n\n        @return: The next value yielded from the generator.\n        @raise StopIteration: If there are no more values in the generator.\n        @raise anything else: Anything that the generator raises.\n        """'
newline|'\n'
name|'return'
name|'g'
op|'.'
name|'throw'
op|'('
name|'self'
op|'.'
name|'type'
op|','
name|'self'
op|'.'
name|'value'
op|','
name|'self'
op|'.'
name|'tb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_findFailure
dedent|''
name|'def'
name|'_findFailure'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Find the failure that represents the exception currently in context.\n        """'
newline|'\n'
name|'tb'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'tb'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'secondLastTb'
op|'='
name|'None'
newline|'\n'
name|'lastTb'
op|'='
name|'tb'
newline|'\n'
name|'while'
name|'lastTb'
op|'.'
name|'tb_next'
op|':'
newline|'\n'
indent|'            '
name|'secondLastTb'
op|'='
name|'lastTb'
newline|'\n'
name|'lastTb'
op|'='
name|'lastTb'
op|'.'
name|'tb_next'
newline|'\n'
nl|'\n'
dedent|''
name|'lastFrame'
op|'='
name|'lastTb'
op|'.'
name|'tb_frame'
newline|'\n'
nl|'\n'
comment|"# NOTE: f_locals.get('self') is used rather than"
nl|'\n'
comment|"# f_locals['self'] because psyco frames do not contain"
nl|'\n'
comment|'# anything in their locals() dicts.  psyco makes debugging'
nl|'\n'
comment|'# difficult anyhow, so losing the Failure objects (and thus'
nl|'\n'
comment|'# the tracebacks) here when it is used is not that big a deal.'
nl|'\n'
nl|'\n'
comment|'# handle raiseException-originated exceptions'
nl|'\n'
name|'if'
name|'lastFrame'
op|'.'
name|'f_code'
name|'is'
name|'cls'
op|'.'
name|'raiseException'
op|'.'
name|'func_code'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'lastFrame'
op|'.'
name|'f_locals'
op|'.'
name|'get'
op|'('
string|"'self'"
op|')'
newline|'\n'
nl|'\n'
comment|'# handle throwExceptionIntoGenerator-originated exceptions'
nl|'\n'
comment|'# this is tricky, and differs if the exception was caught'
nl|'\n'
comment|'# inside the generator, or above it:'
nl|'\n'
nl|'\n'
comment|'# it is only really originating from'
nl|'\n'
comment|'# throwExceptionIntoGenerator if the bottom of the traceback'
nl|'\n'
comment|'# is a yield.'
nl|'\n'
comment|'# Pyrex and Cython extensions create traceback frames'
nl|'\n'
comment|"# with no co_code, but they can't yield so we know it's okay to just return here."
nl|'\n'
dedent|''
name|'if'
op|'('
op|'('
name|'not'
name|'lastFrame'
op|'.'
name|'f_code'
op|'.'
name|'co_code'
op|')'
name|'or'
nl|'\n'
name|'lastFrame'
op|'.'
name|'f_code'
op|'.'
name|'co_code'
op|'['
name|'lastTb'
op|'.'
name|'tb_lasti'
op|']'
op|'!='
name|'cls'
op|'.'
name|'_yieldOpcode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# if the exception was caught above the generator.throw'
nl|'\n'
comment|'# (outside the generator), it will appear in the tb (as the'
nl|'\n'
comment|'# second last item):'
nl|'\n'
dedent|''
name|'if'
name|'secondLastTb'
op|':'
newline|'\n'
indent|'            '
name|'frame'
op|'='
name|'secondLastTb'
op|'.'
name|'tb_frame'
newline|'\n'
name|'if'
name|'frame'
op|'.'
name|'f_code'
name|'is'
name|'cls'
op|'.'
name|'throwExceptionIntoGenerator'
op|'.'
name|'func_code'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'frame'
op|'.'
name|'f_locals'
op|'.'
name|'get'
op|'('
string|"'self'"
op|')'
newline|'\n'
nl|'\n'
comment|'# if the exception was caught below the generator.throw'
nl|'\n'
comment|"# (inside the generator), it will appear in the frames' linked"
nl|'\n'
comment|'# list, above the top-level traceback item (which must be the'
nl|'\n'
comment|'# generator frame itself, thus its caller is'
nl|'\n'
comment|'# throwExceptionIntoGenerator).'
nl|'\n'
dedent|''
dedent|''
name|'frame'
op|'='
name|'tb'
op|'.'
name|'tb_frame'
op|'.'
name|'f_back'
newline|'\n'
name|'if'
name|'frame'
name|'and'
name|'frame'
op|'.'
name|'f_code'
name|'is'
name|'cls'
op|'.'
name|'throwExceptionIntoGenerator'
op|'.'
name|'func_code'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'frame'
op|'.'
name|'f_locals'
op|'.'
name|'get'
op|'('
string|"'self'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_findFailure
dedent|''
dedent|''
name|'_findFailure'
op|'='
name|'classmethod'
op|'('
name|'_findFailure'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"<%s %s>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
name|'self'
op|'.'
name|'type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"[Failure instance: %s]"'
op|'%'
name|'self'
op|'.'
name|'getBriefTraceback'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Avoid pickling objects in the traceback.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'pickled'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'__dict__'
newline|'\n'
dedent|''
name|'c'
op|'='
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'c'
op|'['
string|"'frames'"
op|']'
op|'='
op|'['
nl|'\n'
op|'['
nl|'\n'
name|'v'
op|'['
number|'0'
op|']'
op|','
name|'v'
op|'['
number|'1'
op|']'
op|','
name|'v'
op|'['
number|'2'
op|']'
op|','
nl|'\n'
op|'['
op|'('
name|'j'
op|'['
number|'0'
op|']'
op|','
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'j'
op|'['
number|'1'
op|']'
op|')'
op|')'
name|'for'
name|'j'
name|'in'
name|'v'
op|'['
number|'3'
op|']'
op|']'
op|','
nl|'\n'
op|'['
op|'('
name|'j'
op|'['
number|'0'
op|']'
op|','
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'j'
op|'['
number|'1'
op|']'
op|')'
op|')'
name|'for'
name|'j'
name|'in'
name|'v'
op|'['
number|'4'
op|']'
op|']'
nl|'\n'
op|']'
name|'for'
name|'v'
name|'in'
name|'self'
op|'.'
name|'frames'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
comment|'# added 2003-06-23. See comment above in __init__'
nl|'\n'
name|'c'
op|'['
string|"'tb'"
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'stack'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|"# XXX: This is a band-aid.  I can't figure out where these"
nl|'\n'
comment|'# (failure.stack is None) instances are coming from.'
nl|'\n'
indent|'            '
name|'c'
op|'['
string|"'stack'"
op|']'
op|'='
op|'['
nl|'\n'
op|'['
nl|'\n'
name|'v'
op|'['
number|'0'
op|']'
op|','
name|'v'
op|'['
number|'1'
op|']'
op|','
name|'v'
op|'['
number|'2'
op|']'
op|','
nl|'\n'
op|'['
op|'('
name|'j'
op|'['
number|'0'
op|']'
op|','
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'j'
op|'['
number|'1'
op|']'
op|')'
op|')'
name|'for'
name|'j'
name|'in'
name|'v'
op|'['
number|'3'
op|']'
op|']'
op|','
nl|'\n'
op|'['
op|'('
name|'j'
op|'['
number|'0'
op|']'
op|','
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'j'
op|'['
number|'1'
op|']'
op|')'
op|')'
name|'for'
name|'j'
name|'in'
name|'v'
op|'['
number|'4'
op|']'
op|']'
nl|'\n'
op|']'
name|'for'
name|'v'
name|'in'
name|'self'
op|'.'
name|'stack'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'c'
op|'['
string|"'pickled'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'return'
name|'c'
newline|'\n'
nl|'\n'
DECL|member|cleanFailure
dedent|''
name|'def'
name|'cleanFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove references to other objects, replacing them with strings.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'__dict__'
op|'='
name|'self'
op|'.'
name|'__getstate__'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getTracebackObject
dedent|''
name|'def'
name|'getTracebackObject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get an object that represents this Failure\'s stack that can be passed\n        to traceback.extract_tb.\n\n        If the original traceback object is still present, return that. If this\n        traceback object has been lost but we still have the information,\n        return a fake traceback object (see L{_Traceback}). If there is no\n        traceback information at all, return None.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'tb'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'tb'
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'self'
op|'.'
name|'frames'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'_Traceback'
op|'('
name|'self'
op|'.'
name|'frames'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|getErrorMessage
dedent|''
dedent|''
name|'def'
name|'getErrorMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a string of the exception which caused this Failure."""'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'value'
op|','
name|'Failure'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'value'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'reflect'
op|'.'
name|'safe_str'
op|'('
name|'self'
op|'.'
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getBriefTraceback
dedent|''
name|'def'
name|'getBriefTraceback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'io'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'printBriefTraceback'
op|'('
name|'file'
op|'='
name|'io'
op|')'
newline|'\n'
name|'return'
name|'io'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getTraceback
dedent|''
name|'def'
name|'getTraceback'
op|'('
name|'self'
op|','
name|'elideFrameworkCode'
op|'='
number|'0'
op|','
name|'detail'
op|'='
string|"'default'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'io'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'printTraceback'
op|'('
name|'file'
op|'='
name|'io'
op|','
name|'elideFrameworkCode'
op|'='
name|'elideFrameworkCode'
op|','
name|'detail'
op|'='
name|'detail'
op|')'
newline|'\n'
name|'return'
name|'io'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|printTraceback
dedent|''
name|'def'
name|'printTraceback'
op|'('
name|'self'
op|','
name|'file'
op|'='
name|'None'
op|','
name|'elideFrameworkCode'
op|'='
number|'0'
op|','
name|'detail'
op|'='
string|"'default'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Emulate Python\'s standard error reporting mechanism.\n        """'
newline|'\n'
name|'if'
name|'file'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'file'
op|'='
name|'log'
op|'.'
name|'logerr'
newline|'\n'
dedent|''
name|'w'
op|'='
name|'file'
op|'.'
name|'write'
newline|'\n'
nl|'\n'
comment|'# Preamble'
nl|'\n'
name|'if'
name|'detail'
op|'=='
string|"'verbose'"
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'('
string|"'*--- Failure #%d%s---\\n'"
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'count'
op|','
nl|'\n'
op|'('
name|'self'
op|'.'
name|'pickled'
name|'and'
string|"' (pickled) '"
op|')'
name|'or'
string|"' '"
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'detail'
op|'=='
string|"'brief'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'frames'
op|':'
newline|'\n'
indent|'                '
name|'hasFrames'
op|'='
string|"'Traceback'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'hasFrames'
op|'='
string|"'Traceback (failure with no frames)'"
newline|'\n'
dedent|''
name|'w'
op|'('
string|'"%s: %s: %s\\n"'
op|'%'
op|'('
name|'hasFrames'
op|','
name|'self'
op|'.'
name|'type'
op|','
name|'self'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'('
string|"'Traceback (most recent call last):\\n'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Frames, formatted in appropriate style'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'frames'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'elideFrameworkCode'
op|':'
newline|'\n'
indent|'                '
name|'format_frames'
op|'('
name|'self'
op|'.'
name|'stack'
op|'['
op|'-'
name|'traceupLength'
op|':'
op|']'
op|','
name|'w'
op|','
name|'detail'
op|')'
newline|'\n'
name|'w'
op|'('
string|'"%s\\n"'
op|'%'
op|'('
name|'EXCEPTION_CAUGHT_HERE'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'format_frames'
op|'('
name|'self'
op|'.'
name|'frames'
op|','
name|'w'
op|','
name|'detail'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'detail'
op|'=='
string|"'brief'"
op|':'
newline|'\n'
comment|"# Yeah, it's not really a traceback, despite looking like one..."
nl|'\n'
indent|'            '
name|'w'
op|'('
string|'"Failure: "'
op|')'
newline|'\n'
nl|'\n'
comment|'# postamble, if any'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'detail'
op|'=='
string|"'brief'"
op|':'
newline|'\n'
comment|'# Unfortunately, self.type will not be a class object if this'
nl|'\n'
comment|'# Failure was created implicitly from a string exception.'
nl|'\n'
comment|"# qual() doesn't make any sense on a string, so check for this"
nl|'\n'
comment|"# case here and just write out the string if that's what we"
nl|'\n'
comment|'# have.'
nl|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'type'
op|','
op|'('
name|'str'
op|','
name|'unicode'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'w'
op|'('
name|'self'
op|'.'
name|'type'
op|'+'
string|'"\\n"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'w'
op|'('
string|'"%s: %s\\n"'
op|'%'
op|'('
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'type'
op|')'
op|','
nl|'\n'
name|'reflect'
op|'.'
name|'safe_str'
op|'('
name|'self'
op|'.'
name|'value'
op|')'
op|')'
op|')'
newline|'\n'
comment|'# chaining'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'value'
op|','
name|'Failure'
op|')'
op|':'
newline|'\n'
comment|'# TODO: indentation for chained failures?'
nl|'\n'
indent|'            '
name|'file'
op|'.'
name|'write'
op|'('
string|'" (chained Failure)\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'value'
op|'.'
name|'printTraceback'
op|'('
name|'file'
op|','
name|'elideFrameworkCode'
op|','
name|'detail'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'detail'
op|'=='
string|"'verbose'"
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'('
string|"'*--- End of Failure #%d ---\\n'"
op|'%'
name|'self'
op|'.'
name|'count'
op|')'
newline|'\n'
nl|'\n'
DECL|member|printBriefTraceback
dedent|''
dedent|''
name|'def'
name|'printBriefTraceback'
op|'('
name|'self'
op|','
name|'file'
op|'='
name|'None'
op|','
name|'elideFrameworkCode'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Print a traceback as densely as possible.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'printTraceback'
op|'('
name|'file'
op|','
name|'elideFrameworkCode'
op|','
name|'detail'
op|'='
string|"'brief'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|printDetailedTraceback
dedent|''
name|'def'
name|'printDetailedTraceback'
op|'('
name|'self'
op|','
name|'file'
op|'='
name|'None'
op|','
name|'elideFrameworkCode'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Print a traceback with detailed locals and globals information.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'printTraceback'
op|'('
name|'file'
op|','
name|'elideFrameworkCode'
op|','
name|'detail'
op|'='
string|"'verbose'"
op|')'
newline|'\n'
nl|'\n'
comment|'# slyphon: make post-morteming exceptions tweakable'
nl|'\n'
nl|'\n'
DECL|variable|DO_POST_MORTEM
dedent|''
dedent|''
name|'DO_POST_MORTEM'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|_debuginit
name|'def'
name|'_debuginit'
op|'('
name|'self'
op|','
name|'exc_value'
op|'='
name|'None'
op|','
name|'exc_type'
op|'='
name|'None'
op|','
name|'exc_tb'
op|'='
name|'None'
op|','
nl|'\n'
name|'Failure__init__'
op|'='
name|'Failure'
op|'.'
name|'__init__'
op|'.'
name|'im_func'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
op|'('
name|'exc_value'
op|','
name|'exc_type'
op|','
name|'exc_tb'
op|')'
op|'=='
op|'('
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'exc'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'exc'
op|'['
number|'0'
op|']'
op|'=='
name|'self'
op|'.'
name|'__class__'
name|'and'
name|'DO_POST_MORTEM'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|'"Jumping into debugger for post-mortem of exception \'%s\':"'
op|'%'
name|'exc'
op|'['
number|'1'
op|']'
newline|'\n'
name|'import'
name|'pdb'
newline|'\n'
name|'pdb'
op|'.'
name|'post_mortem'
op|'('
name|'exc'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'Failure__init__'
op|'('
name|'self'
op|','
name|'exc_value'
op|','
name|'exc_type'
op|','
name|'exc_tb'
op|')'
newline|'\n'
nl|'\n'
DECL|function|startDebugMode
dedent|''
name|'def'
name|'startDebugMode'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Enable debug hooks for Failures."""'
newline|'\n'
name|'Failure'
op|'.'
name|'__init__'
op|'='
name|'_debuginit'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Sibling imports - at the bottom and unqualified to avoid unresolvable'
nl|'\n'
comment|'# circularity'
nl|'\n'
dedent|''
name|'import'
name|'log'
newline|'\n'
endmarker|''
end_unit

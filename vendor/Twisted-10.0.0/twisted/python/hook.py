begin_unit
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nI define support for hookable instance methods.\n\nThese are methods which you can register pre-call and post-call external\nfunctions to augment their functionality.  People familiar with more esoteric\nlanguages may think of these as \\"method combinations\\".\n\nThis could be used to add optional preconditions, user-extensible callbacks\n(a-la emacs) or a thread-safety mechanism.\n\nThe four exported calls are:\n\n   - L{addPre}\n   - L{addPost}\n   - L{removePre}\n   - L{removePost}\n\nAll have the signature (class, methodName, callable), and the callable they\ntake must always have the signature (instance, *args, **kw) unless the\nparticular signature of the method they hook is known.\n\nHooks should typically not throw exceptions, however, no effort will be made by\nthis module to prevent them from doing so.  Pre-hooks will always be called,\nbut post-hooks will only be called if the pre-hooks do not raise any exceptions\n(they will still be called if the main method raises an exception).  The return\nvalues and exception status of the main method will be propogated (assuming\nnone of the hooks raise an exception).  Hooks will be executed in the order in\nwhich they are added.\n\n"""'
newline|'\n'
nl|'\n'
comment|'# System Imports'
nl|'\n'
name|'import'
name|'string'
newline|'\n'
nl|'\n'
comment|'### Public Interface'
nl|'\n'
nl|'\n'
DECL|class|HookError
name|'class'
name|'HookError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"An error which will fire when an invariant is violated."'
newline|'\n'
nl|'\n'
DECL|function|addPre
dedent|''
name|'def'
name|'addPre'
op|'('
name|'klass'
op|','
name|'name'
op|','
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""hook.addPre(klass, name, func) -> None\n\n    Add a function to be called before the method klass.name is invoked.\n    """'
newline|'\n'
nl|'\n'
name|'_addHook'
op|'('
name|'klass'
op|','
name|'name'
op|','
name|'PRE'
op|','
name|'func'
op|')'
newline|'\n'
nl|'\n'
DECL|function|addPost
dedent|''
name|'def'
name|'addPost'
op|'('
name|'klass'
op|','
name|'name'
op|','
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""hook.addPost(klass, name, func) -> None\n\n    Add a function to be called after the method klass.name is invoked.\n    """'
newline|'\n'
name|'_addHook'
op|'('
name|'klass'
op|','
name|'name'
op|','
name|'POST'
op|','
name|'func'
op|')'
newline|'\n'
nl|'\n'
DECL|function|removePre
dedent|''
name|'def'
name|'removePre'
op|'('
name|'klass'
op|','
name|'name'
op|','
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""hook.removePre(klass, name, func) -> None\n\n    Remove a function (previously registered with addPre) so that it\n    is no longer executed before klass.name.\n    """'
newline|'\n'
nl|'\n'
name|'_removeHook'
op|'('
name|'klass'
op|','
name|'name'
op|','
name|'PRE'
op|','
name|'func'
op|')'
newline|'\n'
nl|'\n'
DECL|function|removePost
dedent|''
name|'def'
name|'removePost'
op|'('
name|'klass'
op|','
name|'name'
op|','
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""hook.removePre(klass, name, func) -> None\n\n    Remove a function (previously registered with addPost) so that it\n    is no longer executed after klass.name.\n    """'
newline|'\n'
name|'_removeHook'
op|'('
name|'klass'
op|','
name|'name'
op|','
name|'POST'
op|','
name|'func'
op|')'
newline|'\n'
nl|'\n'
comment|'### "Helper" functions.'
nl|'\n'
nl|'\n'
dedent|''
name|'hooked_func'
op|'='
string|'"""\n\nimport %(module)s\n\ndef %(name)s(*args, **kw):\n    klazz = %(module)s.%(klass)s\n    for preMethod in klazz.%(preName)s:\n        preMethod(*args, **kw)\n    try:\n        return klazz.%(originalName)s(*args, **kw)\n    finally:\n        for postMethod in klazz.%(postName)s:\n            postMethod(*args, **kw)\n"""'
newline|'\n'
nl|'\n'
DECL|variable|_PRE
name|'_PRE'
op|'='
string|"'__hook_pre_%s_%s_%s__'"
newline|'\n'
DECL|variable|_POST
name|'_POST'
op|'='
string|"'__hook_post_%s_%s_%s__'"
newline|'\n'
DECL|variable|_ORIG
name|'_ORIG'
op|'='
string|"'__hook_orig_%s_%s_%s__'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_XXX
name|'def'
name|'_XXX'
op|'('
name|'k'
op|','
name|'n'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"string manipulation garbage"'
newline|'\n'
name|'x'
op|'='
name|'s'
op|'%'
op|'('
name|'string'
op|'.'
name|'replace'
op|'('
name|'k'
op|'.'
name|'__module__'
op|','
string|"'.'"
op|','
string|"'_'"
op|')'
op|','
name|'k'
op|'.'
name|'__name__'
op|','
name|'n'
op|')'
newline|'\n'
name|'return'
name|'x'
newline|'\n'
nl|'\n'
DECL|function|PRE
dedent|''
name|'def'
name|'PRE'
op|'('
name|'k'
op|','
name|'n'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"(private) munging to turn a method name into a pre-hook-method-name"'
newline|'\n'
name|'return'
name|'_XXX'
op|'('
name|'k'
op|','
name|'n'
op|','
name|'_PRE'
op|')'
newline|'\n'
nl|'\n'
DECL|function|POST
dedent|''
name|'def'
name|'POST'
op|'('
name|'k'
op|','
name|'n'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"(private) munging to turn a method name into a post-hook-method-name"'
newline|'\n'
name|'return'
name|'_XXX'
op|'('
name|'k'
op|','
name|'n'
op|','
name|'_POST'
op|')'
newline|'\n'
nl|'\n'
DECL|function|ORIG
dedent|''
name|'def'
name|'ORIG'
op|'('
name|'k'
op|','
name|'n'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"(private) munging to turn a method name into an `original\' identifier"'
newline|'\n'
name|'return'
name|'_XXX'
op|'('
name|'k'
op|','
name|'n'
op|','
name|'_ORIG'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_addHook
dedent|''
name|'def'
name|'_addHook'
op|'('
name|'klass'
op|','
name|'name'
op|','
name|'phase'
op|','
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"(private) adds a hook to a method on a class"'
newline|'\n'
name|'_enhook'
op|'('
name|'klass'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'klass'
op|','
name|'phase'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'setattr'
op|'('
name|'klass'
op|','
name|'phase'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'phaselist'
op|'='
name|'getattr'
op|'('
name|'klass'
op|','
name|'phase'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|')'
newline|'\n'
name|'phaselist'
op|'.'
name|'append'
op|'('
name|'func'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_removeHook
dedent|''
name|'def'
name|'_removeHook'
op|'('
name|'klass'
op|','
name|'name'
op|','
name|'phase'
op|','
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"(private) removes a hook from a method on a class"'
newline|'\n'
name|'phaselistname'
op|'='
name|'phase'
op|'('
name|'klass'
op|','
name|'name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'klass'
op|','
name|'ORIG'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'HookError'
op|'('
string|'"no hooks present!"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'phaselist'
op|'='
name|'getattr'
op|'('
name|'klass'
op|','
name|'phase'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
name|'phaselist'
op|'.'
name|'remove'
op|'('
name|'func'
op|')'
newline|'\n'
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'HookError'
op|'('
string|'"hook %s not found in removal list for %s"'
op|'%'
nl|'\n'
op|'('
name|'name'
op|','
name|'klass'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'getattr'
op|'('
name|'klass'
op|','
name|'PRE'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|')'
name|'and'
name|'not'
name|'getattr'
op|'('
name|'klass'
op|','
name|'POST'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'_dehook'
op|'('
name|'klass'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_enhook
dedent|''
dedent|''
name|'def'
name|'_enhook'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"(private) causes a certain method name to be hooked on a class"'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'klass'
op|','
name|'ORIG'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
DECL|function|newfunc
dedent|''
name|'def'
name|'newfunc'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'preMethod'
name|'in'
name|'getattr'
op|'('
name|'klass'
op|','
name|'PRE'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'preMethod'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'klass'
op|','
name|'ORIG'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|')'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'postMethod'
name|'in'
name|'getattr'
op|'('
name|'klass'
op|','
name|'POST'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'postMethod'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'newfunc'
op|'.'
name|'func_name'
op|'='
name|'name'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
comment|"# Older python's don't let you do this"
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'oldfunc'
op|'='
name|'getattr'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|'.'
name|'im_func'
newline|'\n'
name|'setattr'
op|'('
name|'klass'
op|','
name|'ORIG'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|','
name|'oldfunc'
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'klass'
op|','
name|'PRE'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'klass'
op|','
name|'POST'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'klass'
op|','
name|'name'
op|','
name|'newfunc'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_dehook
dedent|''
name|'def'
name|'_dehook'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"(private) causes a certain method name no longer to be hooked on a class"'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'klass'
op|','
name|'ORIG'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'HookError'
op|'('
string|'"Cannot unhook!"'
op|')'
newline|'\n'
dedent|''
name|'setattr'
op|'('
name|'klass'
op|','
name|'name'
op|','
name|'getattr'
op|'('
name|'klass'
op|','
name|'ORIG'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|')'
op|')'
newline|'\n'
name|'delattr'
op|'('
name|'klass'
op|','
name|'PRE'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|')'
newline|'\n'
name|'delattr'
op|'('
name|'klass'
op|','
name|'POST'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|')'
newline|'\n'
name|'delattr'
op|'('
name|'klass'
op|','
name|'ORIG'
op|'('
name|'klass'
op|','
name|'name'
op|')'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

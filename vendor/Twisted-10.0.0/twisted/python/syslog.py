begin_unit
comment|'# -*- test-case-name: twisted.python.test.test_syslog -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nClasses and utility functions for integrating Twisted and syslog.\n\nYou probably want to call L{startLogging}.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|syslog
name|'syslog'
op|'='
name|'__import__'
op|'('
string|"'syslog'"
op|')'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
nl|'\n'
comment|'# These defaults come from the Python 2.3 syslog docs.'
nl|'\n'
DECL|variable|DEFAULT_OPTIONS
name|'DEFAULT_OPTIONS'
op|'='
number|'0'
newline|'\n'
DECL|variable|DEFAULT_FACILITY
name|'DEFAULT_FACILITY'
op|'='
name|'syslog'
op|'.'
name|'LOG_USER'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SyslogObserver
name|'class'
name|'SyslogObserver'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A log observer for logging to syslog.\n\n    See L{twisted.python.log} for context.\n\n    This logObserver will automatically use LOG_ALERT priority for logged\n    failures (such as from C{log.err()}), but you can use any priority and\n    facility by setting the \'C{syslogPriority}\' and \'C{syslogFacility}\' keys in\n    the event dict.\n    """'
newline|'\n'
DECL|variable|openlog
name|'openlog'
op|'='
name|'syslog'
op|'.'
name|'openlog'
newline|'\n'
DECL|variable|syslog
name|'syslog'
op|'='
name|'syslog'
op|'.'
name|'syslog'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'options'
op|'='
name|'DEFAULT_OPTIONS'
op|','
nl|'\n'
name|'facility'
op|'='
name|'DEFAULT_FACILITY'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @type prefix: C{str}\n        @param prefix: The syslog prefix to use.\n\n        @type options: C{int}\n        @param options: A bitvector represented as an integer of the syslog\n            options to use.\n\n        @type facility: C{int}\n        @param facility: An indication to the syslog daemon of what sort of\n            program this is (essentially, an additional arbitrary metadata\n            classification for messages sent to syslog by this observer).\n        """'
newline|'\n'
name|'self'
op|'.'
name|'openlog'
op|'('
name|'prefix'
op|','
name|'options'
op|','
name|'facility'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|emit
dedent|''
name|'def'
name|'emit'
op|'('
name|'self'
op|','
name|'eventDict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a message event to the I{syslog}.\n\n        @param eventDict: The event to send.  If it has no C{\'message\'} key, it\n            will be ignored.  Otherwise, if it has C{\'syslogPriority\'} and/or\n            C{\'syslogFacility\'} keys, these will be used as the syslog priority\n            and facility.  If it has no C{\'syslogPriority\'} key but a true\n            value for the C{\'isError\'} key, the B{LOG_ALERT} priority will be\n            used; if it has a false value for C{\'isError\'}, B{LOG_INFO} will be\n            used.  If the C{\'message\'} key is multiline, each line will be sent\n            to the syslog separately.\n        """'
newline|'\n'
comment|'# Figure out what the message-text is.'
nl|'\n'
name|'text'
op|'='
name|'log'
op|'.'
name|'textFromEventDict'
op|'('
name|'eventDict'
op|')'
newline|'\n'
name|'if'
name|'text'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# Figure out what syslog parameters we might need to use.'
nl|'\n'
dedent|''
name|'priority'
op|'='
name|'syslog'
op|'.'
name|'LOG_INFO'
newline|'\n'
name|'facility'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'eventDict'
op|'['
string|"'isError'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'priority'
op|'='
name|'syslog'
op|'.'
name|'LOG_ALERT'
newline|'\n'
dedent|''
name|'if'
string|"'syslogPriority'"
name|'in'
name|'eventDict'
op|':'
newline|'\n'
indent|'            '
name|'priority'
op|'='
name|'int'
op|'('
name|'eventDict'
op|'['
string|"'syslogPriority'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'syslogFacility'"
name|'in'
name|'eventDict'
op|':'
newline|'\n'
indent|'            '
name|'facility'
op|'='
name|'int'
op|'('
name|'eventDict'
op|'['
string|"'syslogFacility'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Break the message up into lines and send them.'
nl|'\n'
dedent|''
name|'lines'
op|'='
name|'text'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'while'
name|'lines'
op|'['
op|'-'
number|'1'
op|':'
op|']'
op|'=='
op|'['
string|"''"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'lines'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'firstLine'
op|'='
name|'True'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'firstLine'
op|':'
newline|'\n'
indent|'                '
name|'firstLine'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'line'
op|'='
string|"'\\t'"
op|'+'
name|'line'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'syslog'
op|'('
name|'priority'
op|'|'
name|'facility'
op|','
nl|'\n'
string|"'[%s] %s'"
op|'%'
op|'('
name|'eventDict'
op|'['
string|"'system'"
op|']'
op|','
name|'line'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|startLogging
dedent|''
dedent|''
dedent|''
name|'def'
name|'startLogging'
op|'('
name|'prefix'
op|'='
string|"'Twisted'"
op|','
name|'options'
op|'='
name|'DEFAULT_OPTIONS'
op|','
nl|'\n'
name|'facility'
op|'='
name|'DEFAULT_FACILITY'
op|','
name|'setStdout'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Send all Twisted logging output to syslog from now on.\n\n    The prefix, options and facility arguments are passed to\n    C{syslog.openlog()}, see the Python syslog documentation for details. For\n    other parameters, see L{twisted.python.log.startLoggingWithObserver}.\n    """'
newline|'\n'
name|'obs'
op|'='
name|'SyslogObserver'
op|'('
name|'prefix'
op|','
name|'options'
op|','
name|'facility'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'startLoggingWithObserver'
op|'('
name|'obs'
op|'.'
name|'emit'
op|','
name|'setStdout'
op|'='
name|'setStdout'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

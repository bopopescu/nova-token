begin_unit
comment|'# -*- test-case-name: twisted.test.test_lockfile -*-'
nl|'\n'
comment|'# Copyright (c) 2005 Divmod, Inc.'
nl|'\n'
comment|'# Copyright (c) 2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nFilesystem-based interprocess mutex.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|__metaclass__
name|'__metaclass__'
op|'='
name|'type'
newline|'\n'
nl|'\n'
name|'import'
name|'errno'
op|','
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'time'
name|'import'
name|'time'
name|'as'
name|'_uniquefloat'
newline|'\n'
nl|'\n'
DECL|function|unique
name|'def'
name|'unique'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'str'
op|'('
name|'long'
op|'('
name|'_uniquefloat'
op|'('
op|')'
op|'*'
number|'1000'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'os'
name|'import'
name|'rename'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'os'
name|'import'
name|'kill'
newline|'\n'
name|'from'
name|'os'
name|'import'
name|'symlink'
newline|'\n'
name|'from'
name|'os'
name|'import'
name|'readlink'
newline|'\n'
name|'from'
name|'os'
name|'import'
name|'remove'
name|'as'
name|'rmlink'
newline|'\n'
name|'_windows'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
DECL|variable|_windows
indent|'    '
name|'_windows'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'win32api'
name|'import'
name|'OpenProcess'
newline|'\n'
name|'import'
name|'pywintypes'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|kill
indent|'        '
name|'kill'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|ERROR_ACCESS_DENIED
indent|'        '
name|'ERROR_ACCESS_DENIED'
op|'='
number|'5'
newline|'\n'
DECL|variable|ERROR_INVALID_PARAMETER
name|'ERROR_INVALID_PARAMETER'
op|'='
number|'87'
newline|'\n'
nl|'\n'
DECL|function|kill
name|'def'
name|'kill'
op|'('
name|'pid'
op|','
name|'signal'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'OpenProcess'
op|'('
number|'0'
op|','
number|'0'
op|','
name|'pid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'pywintypes'
op|'.'
name|'error'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|'=='
name|'ERROR_ACCESS_DENIED'
op|':'
newline|'\n'
indent|'                    '
name|'return'
newline|'\n'
dedent|''
name|'elif'
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|'=='
name|'ERROR_INVALID_PARAMETER'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'ESRCH'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RuntimeError'
op|'('
string|'"OpenProcess is required to fail."'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_open
dedent|''
dedent|''
dedent|''
name|'_open'
op|'='
name|'file'
newline|'\n'
nl|'\n'
comment|'# XXX Implement an atomic thingamajig for win32'
nl|'\n'
DECL|function|symlink
name|'def'
name|'symlink'
op|'('
name|'value'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'newlinkname'
op|'='
name|'filename'
op|'+'
string|'"."'
op|'+'
name|'unique'
op|'('
op|')'
op|'+'
string|"'.newlink'"
newline|'\n'
name|'newvalname'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'newlinkname'
op|','
string|'"symlink"'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'newlinkname'
op|')'
newline|'\n'
name|'f'
op|'='
name|'_open'
op|'('
name|'newvalname'
op|','
string|"'wcb'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
name|'value'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'rename'
op|'('
name|'newlinkname'
op|','
name|'filename'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'remove'
op|'('
name|'newvalname'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'rmdir'
op|'('
name|'newlinkname'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
DECL|function|readlink
dedent|''
dedent|''
name|'def'
name|'readlink'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fObj'
op|'='
name|'_open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'filename'
op|','
string|"'symlink'"
op|')'
op|','
string|"'rb'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ENOENT'
name|'or'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EIO'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'OSError'
op|'('
name|'e'
op|'.'
name|'errno'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'fObj'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'fObj'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|function|rmlink
dedent|''
dedent|''
name|'def'
name|'rmlink'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'remove'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'filename'
op|','
string|"'symlink'"
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'rmdir'
op|'('
name|'filename'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FilesystemLock
dedent|''
dedent|''
name|'class'
name|'FilesystemLock'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mutex.\n\n    This relies on the filesystem property that creating\n    a symlink is an atomic operation and that it will\n    fail if the symlink already exists.  Deleting the\n    symlink will release the lock.\n\n    @ivar name: The name of the file associated with this lock.\n\n    @ivar clean: Indicates whether this lock was released cleanly by its\n        last owner.  Only meaningful after C{lock} has been called and\n        returns True.\n\n    @ivar locked: Indicates whether the lock is currently held by this\n        object.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|clean
name|'clean'
op|'='
name|'None'
newline|'\n'
DECL|variable|locked
name|'locked'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|lock
dedent|''
name|'def'
name|'lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Acquire this lock.\n\n        @rtype: C{bool}\n        @return: True if the lock is acquired, false otherwise.\n\n        @raise: Any exception os.symlink() may raise, other than\n        EEXIST.\n        """'
newline|'\n'
name|'clean'
op|'='
name|'True'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'symlink'
op|'('
name|'str'
op|'('
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
op|')'
op|','
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'_windows'
name|'and'
name|'e'
op|'.'
name|'errno'
name|'in'
op|'('
name|'errno'
op|'.'
name|'EACCES'
op|','
name|'errno'
op|'.'
name|'EIO'
op|')'
op|':'
newline|'\n'
comment|"# The lock is in the middle of being deleted because we're"
nl|'\n'
comment|"# on Windows where lock removal isn't atomic.  Give up, we"
nl|'\n'
comment|"# don't know how long this is going to take."
nl|'\n'
indent|'                    '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EEXIST'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'pid'
op|'='
name|'readlink'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
comment|'# The lock has vanished, try to claim it in the'
nl|'\n'
comment|'# next iteration through the loop.'
nl|'\n'
indent|'                            '
name|'continue'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'_windows'
name|'and'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EACCES'
op|':'
newline|'\n'
comment|'# The lock is in the middle of being'
nl|'\n'
comment|"# deleted because we're on Windows where"
nl|'\n'
comment|"# lock removal isn't atomic.  Give up, we"
nl|'\n'
comment|"# don't know how long this is going to"
nl|'\n'
comment|'# take.'
nl|'\n'
indent|'                            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'kill'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                            '
name|'kill'
op|'('
name|'int'
op|'('
name|'pid'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ESRCH'
op|':'
newline|'\n'
comment|'# The owner has vanished, try to claim it in the next'
nl|'\n'
comment|'# iteration through the loop.'
nl|'\n'
indent|'                            '
name|'try'
op|':'
newline|'\n'
indent|'                                '
name|'rmlink'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                                '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
comment|'# Another process cleaned up the lock.'
nl|'\n'
comment|'# Race them to acquire it in the next'
nl|'\n'
comment|'# iteration through the loop.'
nl|'\n'
indent|'                                    '
name|'continue'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
dedent|''
name|'clean'
op|'='
name|'False'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'locked'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'clean'
op|'='
name|'clean'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unlock
dedent|''
dedent|''
name|'def'
name|'unlock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Release this lock.\n\n        This deletes the directory with the given name.\n\n        @raise: Any exception os.readlink() may raise, or\n        ValueError if the lock is not owned by this process.\n        """'
newline|'\n'
name|'pid'
op|'='
name|'readlink'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'int'
op|'('
name|'pid'
op|')'
op|'!='
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Lock %r not owned by this process"'
op|'%'
op|'('
name|'self'
op|'.'
name|'name'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'rmlink'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'locked'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|isLocked
dedent|''
dedent|''
name|'def'
name|'isLocked'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Determine if the lock of the given name is held or not.\n\n    @type name: C{str}\n    @param name: The filesystem path to the lock to test\n\n    @rtype: C{bool}\n    @return: True if the lock is held, False otherwise.\n    """'
newline|'\n'
name|'l'
op|'='
name|'FilesystemLock'
op|'('
name|'name'
op|')'
newline|'\n'
name|'result'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'l'
op|'.'
name|'lock'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'result'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'.'
name|'unlock'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'not'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
name|'__all__'
op|'='
op|'['
string|"'FilesystemLock'"
op|','
string|"'isLocked'"
op|']'
newline|'\n'
nl|'\n'
endmarker|''
end_unit

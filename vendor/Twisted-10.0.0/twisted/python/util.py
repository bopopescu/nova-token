begin_unit
comment|'# -*- test-case-name: twisted.python.test.test_util -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'sys'
op|','
name|'hmac'
op|','
name|'errno'
op|','
name|'new'
op|','
name|'inspect'
op|','
name|'warnings'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pwd'
op|','
name|'grp'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'pwd'
op|'='
name|'grp'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'os'
name|'import'
name|'setgroups'
op|','
name|'getgroups'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'setgroups'
op|'='
name|'getgroups'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'from'
name|'UserDict'
name|'import'
name|'UserDict'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InsensitiveDict
name|'class'
name|'InsensitiveDict'
op|':'
newline|'\n'
indent|'    '
string|'"""Dictionary, that has case-insensitive keys.\n\n    Normally keys are retained in their original form when queried with\n    .keys() or .items().  If initialized with preserveCase=0, keys are both\n    looked up in lowercase and returned in lowercase by .keys() and .items().\n    """'
newline|'\n'
string|'"""\n    Modified recipe at\n    http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66315 originally\n    contributed by Sami Hangaslammi.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'dict'
op|'='
name|'None'
op|','
name|'preserve'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create an empty dictionary, or update from \'dict\'."""'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'preserve'
op|'='
name|'preserve'
newline|'\n'
name|'if'
name|'dict'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'update'
op|'('
name|'dict'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__delitem__
dedent|''
dedent|''
name|'def'
name|'__delitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'k'
op|'='
name|'self'
op|'.'
name|'_lowerOrReturn'
op|'('
name|'key'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'data'
op|'['
name|'k'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_lowerOrReturn
dedent|''
name|'def'
name|'_lowerOrReturn'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'key'
op|','
name|'str'
op|')'
name|'or'
name|'isinstance'
op|'('
name|'key'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'key'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the value associated with \'key\' (in any case)."""'
newline|'\n'
name|'k'
op|'='
name|'self'
op|'.'
name|'_lowerOrReturn'
op|'('
name|'key'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'data'
op|'['
name|'k'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Associate \'value\' with \'key\'. If \'key\' already exists, but\n        in different case, it will be replaced."""'
newline|'\n'
name|'k'
op|'='
name|'self'
op|'.'
name|'_lowerOrReturn'
op|'('
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'['
name|'k'
op|']'
op|'='
op|'('
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|has_key
dedent|''
name|'def'
name|'has_key'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Case insensitive test whether \'key\' exists."""'
newline|'\n'
name|'k'
op|'='
name|'self'
op|'.'
name|'_lowerOrReturn'
op|'('
name|'key'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'data'
op|'.'
name|'has_key'
op|'('
name|'k'
op|')'
newline|'\n'
DECL|variable|__contains__
dedent|''
name|'__contains__'
op|'='
name|'has_key'
newline|'\n'
nl|'\n'
DECL|member|_doPreserve
name|'def'
name|'_doPreserve'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'preserve'
name|'and'
op|'('
name|'isinstance'
op|'('
name|'key'
op|','
name|'str'
op|')'
nl|'\n'
name|'or'
name|'isinstance'
op|'('
name|'key'
op|','
name|'unicode'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'key'
newline|'\n'
nl|'\n'
DECL|member|keys
dedent|''
dedent|''
name|'def'
name|'keys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List of keys in their original case."""'
newline|'\n'
name|'return'
name|'list'
op|'('
name|'self'
op|'.'
name|'iterkeys'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|values
dedent|''
name|'def'
name|'values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List of values."""'
newline|'\n'
name|'return'
name|'list'
op|'('
name|'self'
op|'.'
name|'itervalues'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|items
dedent|''
name|'def'
name|'items'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List of (key,value) pairs."""'
newline|'\n'
name|'return'
name|'list'
op|'('
name|'self'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve value associated with \'key\' or return default value\n        if \'key\' doesn\'t exist."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'default'
newline|'\n'
nl|'\n'
DECL|member|setdefault
dedent|''
dedent|''
name|'def'
name|'setdefault'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'default'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""If \'key\' doesn\'t exists, associate it with the \'default\' value.\n        Return value associated with \'key\'."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'has_key'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
name|'key'
op|']'
op|'='
name|'default'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Copy (key,value) pairs from \'dict\'."""'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'dict'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""String representation of the dictionary."""'
newline|'\n'
name|'items'
op|'='
string|'", "'
op|'.'
name|'join'
op|'('
op|'['
op|'('
string|'"%r: %r"'
op|'%'
op|'('
name|'k'
op|','
name|'v'
op|')'
op|')'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'self'
op|'.'
name|'items'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
string|'"InsensitiveDict({%s})"'
op|'%'
name|'items'
newline|'\n'
nl|'\n'
DECL|member|iterkeys
dedent|''
name|'def'
name|'iterkeys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'v'
name|'in'
name|'self'
op|'.'
name|'data'
op|'.'
name|'itervalues'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'self'
op|'.'
name|'_doPreserve'
op|'('
name|'v'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|itervalues
dedent|''
dedent|''
name|'def'
name|'itervalues'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'v'
name|'in'
name|'self'
op|'.'
name|'data'
op|'.'
name|'itervalues'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'v'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|iteritems
dedent|''
dedent|''
name|'def'
name|'iteritems'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
name|'self'
op|'.'
name|'data'
op|'.'
name|'itervalues'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'self'
op|'.'
name|'_doPreserve'
op|'('
name|'k'
op|')'
op|','
name|'v'
newline|'\n'
nl|'\n'
DECL|member|popitem
dedent|''
dedent|''
name|'def'
name|'popitem'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'i'
op|'='
name|'self'
op|'.'
name|'items'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'del'
name|'self'
op|'['
name|'i'
op|'['
number|'0'
op|']'
op|']'
newline|'\n'
name|'return'
name|'i'
newline|'\n'
nl|'\n'
DECL|member|clear
dedent|''
name|'def'
name|'clear'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'k'
name|'in'
name|'self'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'['
name|'k'
op|']'
newline|'\n'
nl|'\n'
DECL|member|copy
dedent|''
dedent|''
name|'def'
name|'copy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'InsensitiveDict'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'preserve'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'self'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
op|'('
name|'k'
name|'in'
name|'other'
op|')'
name|'or'
name|'not'
op|'('
name|'other'
op|'['
name|'k'
op|']'
op|'=='
name|'v'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
number|'0'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'len'
op|'('
name|'self'
op|')'
op|'=='
name|'len'
op|'('
name|'other'
op|')'
newline|'\n'
nl|'\n'
DECL|class|OrderedDict
dedent|''
dedent|''
name|'class'
name|'OrderedDict'
op|'('
name|'UserDict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A UserDict that preserves insert order whenever possible."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'dict'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_order'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'dict'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'hasattr'
op|'('
name|'dict'
op|','
string|"'keys'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'update'
op|'('
name|'dict'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'dict'
op|':'
comment|'# sequence'
newline|'\n'
indent|'                    '
name|'self'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'len'
op|'('
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'{'"
op|'+'
string|"', '"
op|'.'
name|'join'
op|'('
op|'['
op|'('
string|"'%r: %r'"
op|'%'
name|'item'
op|')'
name|'for'
name|'item'
name|'in'
name|'self'
op|'.'
name|'items'
op|'('
op|')'
op|']'
op|')'
op|'+'
string|"'}'"
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'has_key'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_order'
op|'.'
name|'append'
op|'('
name|'key'
op|')'
newline|'\n'
dedent|''
name|'UserDict'
op|'.'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|copy
dedent|''
name|'def'
name|'copy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__class__'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__delitem__
dedent|''
name|'def'
name|'__delitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'UserDict'
op|'.'
name|'__delitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_order'
op|'.'
name|'remove'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|iteritems
dedent|''
name|'def'
name|'iteritems'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'item'
name|'in'
name|'self'
op|'.'
name|'_order'
op|':'
newline|'\n'
indent|'            '
name|'yield'
op|'('
name|'item'
op|','
name|'self'
op|'['
name|'item'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|items
dedent|''
dedent|''
name|'def'
name|'items'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'list'
op|'('
name|'self'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|itervalues
dedent|''
name|'def'
name|'itervalues'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'item'
name|'in'
name|'self'
op|'.'
name|'_order'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'self'
op|'['
name|'item'
op|']'
newline|'\n'
nl|'\n'
DECL|member|values
dedent|''
dedent|''
name|'def'
name|'values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'list'
op|'('
name|'self'
op|'.'
name|'itervalues'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|iterkeys
dedent|''
name|'def'
name|'iterkeys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'iter'
op|'('
name|'self'
op|'.'
name|'_order'
op|')'
newline|'\n'
nl|'\n'
DECL|member|keys
dedent|''
name|'def'
name|'keys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'list'
op|'('
name|'self'
op|'.'
name|'_order'
op|')'
newline|'\n'
nl|'\n'
DECL|member|popitem
dedent|''
name|'def'
name|'popitem'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'key'
op|'='
name|'self'
op|'.'
name|'_order'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'value'
op|'='
name|'self'
op|'['
name|'key'
op|']'
newline|'\n'
name|'del'
name|'self'
op|'['
name|'key'
op|']'
newline|'\n'
name|'return'
op|'('
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setdefault
dedent|''
name|'def'
name|'setdefault'
op|'('
name|'self'
op|','
name|'item'
op|','
name|'default'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'has_key'
op|'('
name|'item'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'['
name|'item'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'['
name|'item'
op|']'
op|'='
name|'default'
newline|'\n'
name|'return'
name|'default'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'d'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
nl|'\n'
DECL|function|uniquify
dedent|''
dedent|''
dedent|''
name|'def'
name|'uniquify'
op|'('
name|'lst'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Make the elements of a list unique by inserting them into a dictionary.\n    This must not change the order of the input lst.\n    """'
newline|'\n'
name|'dct'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'k'
name|'in'
name|'lst'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'dct'
op|'.'
name|'has_key'
op|'('
name|'k'
op|')'
op|':'
name|'result'
op|'.'
name|'append'
op|'('
name|'k'
op|')'
newline|'\n'
name|'dct'
op|'['
name|'k'
op|']'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|function|padTo
dedent|''
name|'def'
name|'padTo'
op|'('
name|'n'
op|','
name|'seq'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Pads a sequence out to n elements,\n\n    filling in with a default value if it is not long enough.\n\n    If the input sequence is longer than n, raises ValueError.\n\n    Details, details:\n    This returns a new list; it does not extend the original sequence.\n    The new list contains the values of the original sequence, not copies.\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'seq'
op|')'
op|'>'
name|'n'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|','
string|'"%d elements is more than %d."'
op|'%'
op|'('
name|'len'
op|'('
name|'seq'
op|')'
op|','
name|'n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'blank'
op|'='
op|'['
name|'default'
op|']'
op|'*'
name|'n'
newline|'\n'
nl|'\n'
name|'blank'
op|'['
op|':'
name|'len'
op|'('
name|'seq'
op|')'
op|']'
op|'='
name|'list'
op|'('
name|'seq'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'blank'
newline|'\n'
nl|'\n'
DECL|function|getPluginDirs
dedent|''
name|'def'
name|'getPluginDirs'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'twisted'
newline|'\n'
name|'systemPlugins'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'twisted'
op|'.'
name|'__file__'
op|')'
op|')'
op|')'
op|','
string|"'plugins'"
op|')'
newline|'\n'
name|'userPlugins'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
string|'"~/TwistedPlugins"'
op|')'
newline|'\n'
name|'confPlugins'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
string|'"~/.twisted"'
op|')'
newline|'\n'
name|'allPlugins'
op|'='
name|'filter'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|','
op|'['
name|'systemPlugins'
op|','
name|'userPlugins'
op|','
name|'confPlugins'
op|']'
op|')'
newline|'\n'
name|'return'
name|'allPlugins'
newline|'\n'
nl|'\n'
DECL|function|addPluginDir
dedent|''
name|'def'
name|'addPluginDir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'sys'
op|'.'
name|'path'
op|'.'
name|'extend'
op|'('
name|'getPluginDirs'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|sibpath
dedent|''
name|'def'
name|'sibpath'
op|'('
name|'path'
op|','
name|'sibling'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the path to a sibling of a file in the filesystem.\n\n    This is useful in conjunction with the special __file__ attribute\n    that Python provides for modules, so modules can load associated\n    resource files.\n    """'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'path'
op|')'
op|')'
op|','
name|'sibling'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_getpass
dedent|''
name|'def'
name|'_getpass'
op|'('
name|'prompt'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Helper to turn IOErrors into KeyboardInterrupts"""'
newline|'\n'
name|'import'
name|'getpass'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getpass'
op|'.'
name|'getpass'
op|'('
name|'prompt'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EINTR'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'KeyboardInterrupt'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'EOFError'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'KeyboardInterrupt'
newline|'\n'
nl|'\n'
DECL|function|getPassword
dedent|''
dedent|''
name|'def'
name|'getPassword'
op|'('
name|'prompt'
op|'='
string|"'Password: '"
op|','
name|'confirm'
op|'='
number|'0'
op|','
name|'forceTTY'
op|'='
number|'0'
op|','
nl|'\n'
name|'confirmPrompt'
op|'='
string|"'Confirm password: '"
op|','
nl|'\n'
name|'mismatchMessage'
op|'='
string|'"Passwords don\'t match."'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Obtain a password by prompting or from stdin.\n\n    If stdin is a terminal, prompt for a new password, and confirm (if\n    C{confirm} is true) by asking again to make sure the user typed the same\n    thing, as keystrokes will not be echoed.\n\n    If stdin is not a terminal, and C{forceTTY} is not true, read in a line\n    and use it as the password, less the trailing newline, if any.  If\n    C{forceTTY} is true, attempt to open a tty and prompt for the password\n    using it.  Raise a RuntimeError if this is not possible.\n\n    @returns: C{str}\n    """'
newline|'\n'
name|'isaTTY'
op|'='
name|'hasattr'
op|'('
name|'sys'
op|'.'
name|'stdin'
op|','
string|"'isatty'"
op|')'
name|'and'
name|'sys'
op|'.'
name|'stdin'
op|'.'
name|'isatty'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'old'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'isaTTY'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'forceTTY'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'old'
op|'='
name|'sys'
op|'.'
name|'stdin'
op|','
name|'sys'
op|'.'
name|'stdout'
newline|'\n'
name|'sys'
op|'.'
name|'stdin'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'open'
op|'('
string|"'/dev/tty'"
op|','
string|"'r+'"
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Cannot obtain a TTY"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'password'
op|'='
name|'sys'
op|'.'
name|'stdin'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
name|'if'
name|'password'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|"'\\n'"
op|':'
newline|'\n'
indent|'                    '
name|'password'
op|'='
name|'password'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'password'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'try1'
op|'='
name|'_getpass'
op|'('
name|'prompt'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'confirm'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'try1'
newline|'\n'
dedent|''
name|'try2'
op|'='
name|'_getpass'
op|'('
name|'confirmPrompt'
op|')'
newline|'\n'
name|'if'
name|'try1'
op|'=='
name|'try2'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'try1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
name|'mismatchMessage'
op|'+'
string|'"\\n"'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'old'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'stdin'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdin'
op|','
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'old'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|dict
dedent|''
dedent|''
dedent|''
name|'def'
name|'dict'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'k'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'__builtin__'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|"'twisted.python.util.dict is deprecated.  Use __builtin__.dict instead'"
op|')'
newline|'\n'
name|'return'
name|'__builtin__'
op|'.'
name|'dict'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'k'
op|')'
newline|'\n'
nl|'\n'
DECL|function|println
dedent|''
name|'def'
name|'println'
op|'('
op|'*'
name|'a'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'write'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'a'
op|')'
op|')'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
comment|'# XXX'
nl|'\n'
comment|'# This does not belong here'
nl|'\n'
comment|'# But where does it belong?'
nl|'\n'
nl|'\n'
DECL|function|str_xor
dedent|''
name|'def'
name|'str_xor'
op|'('
name|'s'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'chr'
op|'('
name|'ord'
op|'('
name|'c'
op|')'
op|'^'
name|'b'
op|')'
name|'for'
name|'c'
name|'in'
name|'s'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|keyed_md5
dedent|''
name|'def'
name|'keyed_md5'
op|'('
name|'secret'
op|','
name|'challenge'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Create the keyed MD5 string for the given secret and challenge.\n    """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"keyed_md5() is deprecated.  Use the stdlib module hmac instead."'
op|','
nl|'\n'
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
nl|'\n'
op|')'
newline|'\n'
name|'return'
name|'hmac'
op|'.'
name|'HMAC'
op|'('
name|'secret'
op|','
name|'challenge'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|makeStatBar
dedent|''
name|'def'
name|'makeStatBar'
op|'('
name|'width'
op|','
name|'maxPosition'
op|','
name|'doneChar'
op|'='
string|"'='"
op|','
name|'undoneChar'
op|'='
string|"'-'"
op|','
name|'currentChar'
op|'='
string|"'>'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Creates a function that will return a string representing a progress bar.\n    """'
newline|'\n'
name|'aValue'
op|'='
name|'width'
op|'/'
name|'float'
op|'('
name|'maxPosition'
op|')'
newline|'\n'
DECL|function|statBar
name|'def'
name|'statBar'
op|'('
name|'position'
op|','
name|'force'
op|'='
number|'0'
op|','
name|'last'
op|'='
op|'['
string|"''"
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'len'
op|'('
name|'last'
op|')'
op|'=='
number|'1'
op|','
string|'"Don\'t mess with the last parameter."'
newline|'\n'
name|'done'
op|'='
name|'int'
op|'('
name|'aValue'
op|'*'
name|'position'
op|')'
newline|'\n'
name|'toDo'
op|'='
name|'width'
op|'-'
name|'done'
op|'-'
number|'2'
newline|'\n'
name|'result'
op|'='
string|'"[%s%s%s]"'
op|'%'
op|'('
name|'doneChar'
op|'*'
name|'done'
op|','
name|'currentChar'
op|','
name|'undoneChar'
op|'*'
name|'toDo'
op|')'
newline|'\n'
name|'if'
name|'force'
op|':'
newline|'\n'
indent|'            '
name|'last'
op|'['
number|'0'
op|']'
op|'='
name|'result'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'if'
name|'result'
op|'=='
name|'last'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
dedent|''
name|'last'
op|'['
number|'0'
op|']'
op|'='
name|'result'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
dedent|''
name|'statBar'
op|'.'
name|'__doc__'
op|'='
string|'"""statBar(position, force = 0) -> \'[%s%s%s]\'-style progress bar\n\n    returned string is %d characters long, and the range goes from 0..%d.\n    The \'position\' argument is where the \'%s\' will be drawn.  If force is false,\n    \'\' will be returned instead if the resulting progress bar is identical to the\n    previously returned progress bar.\n"""'
op|'%'
op|'('
name|'doneChar'
op|'*'
number|'3'
op|','
name|'currentChar'
op|','
name|'undoneChar'
op|'*'
number|'3'
op|','
name|'width'
op|','
name|'maxPosition'
op|','
name|'currentChar'
op|')'
newline|'\n'
name|'return'
name|'statBar'
newline|'\n'
nl|'\n'
DECL|function|spewer
dedent|''
name|'def'
name|'spewer'
op|'('
name|'frame'
op|','
name|'s'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A trace function for sys.settrace that prints every function or method call."""'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'reflect'
newline|'\n'
name|'if'
name|'frame'
op|'.'
name|'f_locals'
op|'.'
name|'has_key'
op|'('
string|"'self'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'se'
op|'='
name|'frame'
op|'.'
name|'f_locals'
op|'['
string|"'self'"
op|']'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'se'
op|','
string|"'__class__'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'k'
op|'='
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'se'
op|'.'
name|'__class__'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'k'
op|'='
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'type'
op|'('
name|'se'
op|')'
op|')'
newline|'\n'
dedent|''
name|'print'
string|"'method %s of %s at %s'"
op|'%'
op|'('
nl|'\n'
name|'frame'
op|'.'
name|'f_code'
op|'.'
name|'co_name'
op|','
name|'k'
op|','
name|'id'
op|'('
name|'se'
op|')'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|"'function %s in %s, line %s'"
op|'%'
op|'('
nl|'\n'
name|'frame'
op|'.'
name|'f_code'
op|'.'
name|'co_name'
op|','
nl|'\n'
name|'frame'
op|'.'
name|'f_code'
op|'.'
name|'co_filename'
op|','
nl|'\n'
name|'frame'
op|'.'
name|'f_lineno'
op|')'
newline|'\n'
nl|'\n'
DECL|function|searchupwards
dedent|''
dedent|''
name|'def'
name|'searchupwards'
op|'('
name|'start'
op|','
name|'files'
op|'='
op|'['
op|']'
op|','
name|'dirs'
op|'='
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Walk upwards from start, looking for a directory containing\n    all files and directories given as arguments::\n    >>> searchupwards(\'.\', [\'foo.txt\'], [\'bar\', \'bam\'])\n\n    If not found, return None\n    """'
newline|'\n'
name|'start'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'start'
op|')'
newline|'\n'
name|'parents'
op|'='
name|'start'
op|'.'
name|'split'
op|'('
name|'os'
op|'.'
name|'sep'
op|')'
newline|'\n'
name|'exists'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|';'
name|'join'
op|'='
name|'os'
op|'.'
name|'sep'
op|'.'
name|'join'
op|';'
name|'isdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'parents'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'candidate'
op|'='
name|'join'
op|'('
name|'parents'
op|')'
op|'+'
name|'os'
op|'.'
name|'sep'
newline|'\n'
name|'allpresent'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'files'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'exists'
op|'('
string|'"%s%s"'
op|'%'
op|'('
name|'candidate'
op|','
name|'f'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'allpresent'
op|'='
number|'0'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'allpresent'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'d'
name|'in'
name|'dirs'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'isdir'
op|'('
string|'"%s%s"'
op|'%'
op|'('
name|'candidate'
op|','
name|'d'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'allpresent'
op|'='
number|'0'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'allpresent'
op|':'
name|'return'
name|'candidate'
newline|'\n'
name|'parents'
op|'.'
name|'pop'
op|'('
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LineLog
dedent|''
name|'class'
name|'LineLog'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A limited-size line-based log, useful for logging line-based\n    protocols such as SMTP.\n\n    When the log fills up, old entries drop off the end.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'size'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new log, with size lines of storage (default 10).\n        A log size of 0 (or less) means an infinite log.\n        """'
newline|'\n'
name|'if'
name|'size'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'log'
op|'='
op|'['
name|'None'
op|']'
op|'*'
name|'size'
newline|'\n'
name|'self'
op|'.'
name|'size'
op|'='
name|'size'
newline|'\n'
nl|'\n'
DECL|member|append
dedent|''
name|'def'
name|'append'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'size'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'log'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|'='
name|'self'
op|'.'
name|'log'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'log'
op|'['
op|'-'
number|'1'
op|']'
op|'='
name|'line'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'log'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|str
dedent|''
dedent|''
name|'def'
name|'str'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'filter'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'log'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'filter'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'log'
op|')'
op|'['
name|'item'
op|']'
newline|'\n'
nl|'\n'
DECL|member|clear
dedent|''
name|'def'
name|'clear'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Empty the log"""'
newline|'\n'
name|'self'
op|'.'
name|'log'
op|'='
op|'['
name|'None'
op|']'
op|'*'
name|'self'
op|'.'
name|'size'
newline|'\n'
nl|'\n'
DECL|function|raises
dedent|''
dedent|''
name|'def'
name|'raises'
op|'('
name|'exception'
op|','
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Determine whether the given call raises the given exception"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'1'
newline|'\n'
dedent|''
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|class|IntervalDifferential
dedent|''
name|'class'
name|'IntervalDifferential'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Given a list of intervals, generate the amount of time to sleep between\n    \\"instants\\".\n\n    For example, given 7, 11 and 13, the three (infinite) sequences::\n\n        7 14 21 28 35 ...\n        11 22 33 44 ...\n        13 26 39 52 ...\n\n    will be generated, merged, and used to produce::\n\n        (7, 0) (4, 1) (2, 2) (1, 0) (7, 0) (1, 1) (4, 2) (2, 0) (5, 1) (2, 0)\n\n    New intervals may be added or removed as iteration proceeds using the\n    proper methods.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'intervals'
op|','
name|'default'
op|'='
number|'60'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @type intervals: C{list} of C{int}, C{long}, or C{float} param\n        @param intervals: The intervals between instants.\n\n        @type default: C{int}, C{long}, or C{float}\n        @param default: The duration to generate if the intervals list\n        becomes empty.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'intervals'
op|'='
name|'intervals'
op|'['
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'default'
op|'='
name|'default'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_IntervalDifferentialIterator'
op|'('
name|'self'
op|'.'
name|'intervals'
op|','
name|'self'
op|'.'
name|'default'
op|')'
newline|'\n'
nl|'\n'
DECL|class|_IntervalDifferentialIterator
dedent|''
dedent|''
name|'class'
name|'_IntervalDifferentialIterator'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'i'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'intervals'
op|'='
op|'['
op|'['
name|'e'
op|','
name|'e'
op|','
name|'n'
op|']'
name|'for'
op|'('
name|'e'
op|','
name|'n'
op|')'
name|'in'
name|'zip'
op|'('
name|'i'
op|','
name|'range'
op|'('
name|'len'
op|'('
name|'i'
op|')'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'default'
op|'='
name|'d'
newline|'\n'
name|'self'
op|'.'
name|'last'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|next
dedent|''
name|'def'
name|'next'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'intervals'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'self'
op|'.'
name|'default'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'last'
op|','
name|'index'
op|'='
name|'self'
op|'.'
name|'intervals'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|'.'
name|'intervals'
op|'['
number|'0'
op|']'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'intervals'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'+='
name|'self'
op|'.'
name|'intervals'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'intervals'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'last'
op|'-'
name|'self'
op|'.'
name|'last'
newline|'\n'
name|'self'
op|'.'
name|'last'
op|'='
name|'last'
newline|'\n'
name|'return'
name|'result'
op|','
name|'index'
newline|'\n'
nl|'\n'
DECL|member|addInterval
dedent|''
name|'def'
name|'addInterval'
op|'('
name|'self'
op|','
name|'i'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'intervals'
op|':'
newline|'\n'
indent|'            '
name|'delay'
op|'='
name|'self'
op|'.'
name|'intervals'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'-'
name|'self'
op|'.'
name|'intervals'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'intervals'
op|'.'
name|'append'
op|'('
op|'['
name|'delay'
op|'+'
name|'i'
op|','
name|'i'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'intervals'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'intervals'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'intervals'
op|'.'
name|'append'
op|'('
op|'['
name|'i'
op|','
name|'i'
op|','
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|removeInterval
dedent|''
dedent|''
name|'def'
name|'removeInterval'
op|'('
name|'self'
op|','
name|'interval'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'intervals'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'intervals'
op|'['
name|'i'
op|']'
op|'['
number|'1'
op|']'
op|'=='
name|'interval'
op|':'
newline|'\n'
indent|'                '
name|'index'
op|'='
name|'self'
op|'.'
name|'intervals'
op|'['
name|'i'
op|']'
op|'['
number|'2'
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'intervals'
op|'['
name|'i'
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'self'
op|'.'
name|'intervals'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'i'
op|'['
number|'2'
op|']'
op|'>'
name|'index'
op|':'
newline|'\n'
indent|'                        '
name|'i'
op|'['
number|'2'
op|']'
op|'-='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'ValueError'
op|','
string|'"Specified interval not in IntervalDifferential"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FancyStrMixin
dedent|''
dedent|''
name|'class'
name|'FancyStrMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set showAttributes to a sequence of strings naming attributes, OR\n    sequences of (attributeName, displayName, formatCharacter)\n    """'
newline|'\n'
DECL|variable|showAttributes
name|'showAttributes'
op|'='
op|'('
op|')'
newline|'\n'
DECL|member|__str__
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'r'
op|'='
op|'['
string|"'<'"
op|','
name|'hasattr'
op|'('
name|'self'
op|','
string|"'fancybasename'"
op|')'
name|'and'
name|'self'
op|'.'
name|'fancybasename'
name|'or'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|']'
newline|'\n'
name|'for'
name|'attr'
name|'in'
name|'self'
op|'.'
name|'showAttributes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'attr'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'r'
op|'.'
name|'append'
op|'('
string|"' %s=%r'"
op|'%'
op|'('
name|'attr'
op|','
name|'getattr'
op|'('
name|'self'
op|','
name|'attr'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'r'
op|'.'
name|'append'
op|'('
op|'('
string|"' %s='"
op|'+'
name|'attr'
op|'['
number|'2'
op|']'
op|')'
op|'%'
op|'('
name|'attr'
op|'['
number|'1'
op|']'
op|','
name|'getattr'
op|'('
name|'self'
op|','
name|'attr'
op|'['
number|'0'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'r'
op|'.'
name|'append'
op|'('
string|"'>'"
op|')'
newline|'\n'
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'r'
op|')'
newline|'\n'
DECL|variable|__repr__
dedent|''
name|'__repr__'
op|'='
name|'__str__'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FancyEqMixin
dedent|''
name|'class'
name|'FancyEqMixin'
op|':'
newline|'\n'
DECL|variable|compareAttributes
indent|'    '
name|'compareAttributes'
op|'='
op|'('
op|')'
newline|'\n'
DECL|member|__eq__
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'compareAttributes'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
name|'is'
name|'other'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'self'
op|','
name|'other'
op|'.'
name|'__class__'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
nl|'\n'
op|'['
name|'getattr'
op|'('
name|'self'
op|','
name|'name'
op|')'
name|'for'
name|'name'
name|'in'
name|'self'
op|'.'
name|'compareAttributes'
op|']'
op|'=='
nl|'\n'
op|'['
name|'getattr'
op|'('
name|'other'
op|','
name|'name'
op|')'
name|'for'
name|'name'
name|'in'
name|'self'
op|'.'
name|'compareAttributes'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'NotImplemented'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__ne__
dedent|''
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'self'
op|'.'
name|'__eq__'
op|'('
name|'other'
op|')'
newline|'\n'
name|'if'
name|'result'
name|'is'
name|'NotImplemented'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'return'
name|'not'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|dsu
dedent|''
dedent|''
name|'def'
name|'dsu'
op|'('
name|'list'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'L2'
op|'='
op|'['
op|'('
name|'key'
op|'('
name|'e'
op|')'
op|','
name|'i'
op|','
name|'e'
op|')'
name|'for'
op|'('
name|'i'
op|','
name|'e'
op|')'
name|'in'
name|'zip'
op|'('
name|'range'
op|'('
name|'len'
op|'('
name|'list'
op|')'
op|')'
op|','
name|'list'
op|')'
op|']'
newline|'\n'
name|'L2'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'return'
op|'['
name|'e'
op|'['
number|'2'
op|']'
name|'for'
name|'e'
name|'in'
name|'L2'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'_initgroups'
name|'import'
name|'initgroups'
name|'as'
name|'_c_initgroups'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|_c_initgroups
indent|'    '
name|'_c_initgroups'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'pwd'
name|'is'
name|'None'
name|'or'
name|'grp'
name|'is'
name|'None'
name|'or'
name|'setgroups'
name|'is'
name|'None'
name|'or'
name|'getgroups'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|function|initgroups
indent|'    '
name|'def'
name|'initgroups'
op|'('
name|'uid'
op|','
name|'primaryGid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Do nothing.\n\n        Underlying platform support require to manipulate groups is missing.\n        """'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Fallback to the inefficient Python version'
nl|'\n'
DECL|function|_setgroups_until_success
indent|'    '
name|'def'
name|'_setgroups_until_success'
op|'('
name|'l'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'while'
op|'('
number|'1'
op|')'
op|':'
newline|'\n'
comment|'# NASTY NASTY HACK (but glibc does it so it must be okay):'
nl|'\n'
comment|"# In case sysconfig didn't give the right answer, find the limit"
nl|'\n'
comment|'# on max groups by just looping, trying to set fewer and fewer'
nl|'\n'
comment|'# groups each time until it succeeds.'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'setgroups'
op|'('
name|'l'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
comment|'# This exception comes from python itself restricting'
nl|'\n'
comment|'# number of groups allowed.'
nl|'\n'
indent|'                '
name|'if'
name|'len'
op|'('
name|'l'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'del'
name|'l'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EINVAL'
name|'and'
name|'len'
op|'('
name|'l'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
comment|'# This comes from the OS saying too many groups'
nl|'\n'
indent|'                    '
name|'del'
name|'l'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Success, yay!'
nl|'\n'
indent|'                '
name|'return'
newline|'\n'
nl|'\n'
DECL|function|initgroups
dedent|''
dedent|''
dedent|''
name|'def'
name|'initgroups'
op|'('
name|'uid'
op|','
name|'primaryGid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initializes the group access list.\n\n        If the C extension is present, we\'re calling it, which in turn calls\n        initgroups(3).\n        \n        If not, this is done by reading the group database /etc/group and using\n        all groups of which C{uid} is a member.  The additional group\n        C{primaryGid} is also added to the list.\n\n        If the given user is a member of more than C{NGROUPS}, arbitrary\n        groups will be silently discarded to bring the number below that\n        limit.\n\n        @type uid: C{int}\n        @param uid: The UID for which to look up group information.\n\n        @type primaryGid: C{int} or C{NoneType}\n        @param primaryGid: If provided, an additional GID to include when\n            setting the groups.\n        """'
newline|'\n'
name|'if'
name|'_c_initgroups'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'_c_initgroups'
op|'('
name|'pwd'
op|'.'
name|'getpwuid'
op|'('
name|'uid'
op|')'
op|'['
number|'0'
op|']'
op|','
name|'primaryGid'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# Try to get the maximum number of groups'
nl|'\n'
indent|'            '
name|'max_groups'
op|'='
name|'os'
op|'.'
name|'sysconf'
op|'('
string|'"SC_NGROUPS_MAX"'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
comment|'# No predefined limit'
nl|'\n'
indent|'            '
name|'max_groups'
op|'='
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'username'
op|'='
name|'pwd'
op|'.'
name|'getpwuid'
op|'('
name|'uid'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'primaryGid'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'.'
name|'append'
op|'('
name|'primaryGid'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'groupname'
op|','
name|'password'
op|','
name|'gid'
op|','
name|'userlist'
name|'in'
name|'grp'
op|'.'
name|'getgrall'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'username'
name|'in'
name|'userlist'
op|':'
newline|'\n'
indent|'                '
name|'l'
op|'.'
name|'append'
op|'('
name|'gid'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'l'
op|')'
op|'=='
name|'max_groups'
op|':'
newline|'\n'
indent|'                    '
name|'break'
comment|'# No more groups, ignore any more'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'_setgroups_until_success'
op|'('
name|'l'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# We might be able to remove this code now that we'
nl|'\n'
comment|"# don't try to setgid/setuid even when not asked to."
nl|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EPERM'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'g'
name|'in'
name|'getgroups'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'g'
name|'not'
name|'in'
name|'l'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|switchUID
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'switchUID'
op|'('
name|'uid'
op|','
name|'gid'
op|','
name|'euid'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'euid'
op|':'
newline|'\n'
indent|'        '
name|'setuid'
op|'='
name|'os'
op|'.'
name|'seteuid'
newline|'\n'
name|'setgid'
op|'='
name|'os'
op|'.'
name|'setegid'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'setuid'
op|'='
name|'os'
op|'.'
name|'setuid'
newline|'\n'
name|'setgid'
op|'='
name|'os'
op|'.'
name|'setgid'
newline|'\n'
dedent|''
name|'if'
name|'gid'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'setgid'
op|'('
name|'gid'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'uid'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'initgroups'
op|'('
name|'uid'
op|','
name|'gid'
op|')'
newline|'\n'
name|'setuid'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SubclassableCStringIO
dedent|''
dedent|''
name|'class'
name|'SubclassableCStringIO'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A wrapper around cStringIO to allow for subclassing"""'
newline|'\n'
DECL|variable|__csio
name|'__csio'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
name|'self'
op|'.'
name|'__csio'
op|'='
name|'StringIO'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__csio'
op|'.'
name|'__iter__'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|next
dedent|''
name|'def'
name|'next'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__csio'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__csio'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|isatty
dedent|''
name|'def'
name|'isatty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__csio'
op|'.'
name|'isatty'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|seek
dedent|''
name|'def'
name|'seek'
op|'('
name|'self'
op|','
name|'pos'
op|','
name|'mode'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__csio'
op|'.'
name|'seek'
op|'('
name|'pos'
op|','
name|'mode'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tell
dedent|''
name|'def'
name|'tell'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__csio'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|read
dedent|''
name|'def'
name|'read'
op|'('
name|'self'
op|','
name|'n'
op|'='
op|'-'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__csio'
op|'.'
name|'read'
op|'('
name|'n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|readline
dedent|''
name|'def'
name|'readline'
op|'('
name|'self'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__csio'
op|'.'
name|'readline'
op|'('
name|'length'
op|')'
newline|'\n'
nl|'\n'
DECL|member|readlines
dedent|''
name|'def'
name|'readlines'
op|'('
name|'self'
op|','
name|'sizehint'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__csio'
op|'.'
name|'readlines'
op|'('
name|'sizehint'
op|')'
newline|'\n'
nl|'\n'
DECL|member|truncate
dedent|''
name|'def'
name|'truncate'
op|'('
name|'self'
op|','
name|'size'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__csio'
op|'.'
name|'truncate'
op|'('
name|'size'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__csio'
op|'.'
name|'write'
op|'('
name|'s'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writelines
dedent|''
name|'def'
name|'writelines'
op|'('
name|'self'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__csio'
op|'.'
name|'writelines'
op|'('
name|'list'
op|')'
newline|'\n'
nl|'\n'
DECL|member|flush
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__csio'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getvalue
dedent|''
name|'def'
name|'getvalue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__csio'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|moduleMovedForSplit
dedent|''
dedent|''
name|'def'
name|'moduleMovedForSplit'
op|'('
name|'origModuleName'
op|','
name|'newModuleName'
op|','
name|'moduleDesc'
op|','
nl|'\n'
name|'projectName'
op|','
name|'projectURL'
op|','
name|'globDict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    No-op function; only present for backwards compatibility.  There is no\n    reason to call this function.\n    """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"moduleMovedForSplit is deprecated since Twisted 9.0."'
op|','
nl|'\n'
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|untilConcludes
dedent|''
name|'def'
name|'untilConcludes'
op|'('
name|'f'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'f'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'IOError'
op|','
name|'OSError'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|'=='
name|'errno'
op|'.'
name|'EINTR'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
nl|'\n'
DECL|variable|_idFunction
dedent|''
dedent|''
dedent|''
name|'_idFunction'
op|'='
name|'id'
newline|'\n'
nl|'\n'
DECL|function|setIDFunction
name|'def'
name|'setIDFunction'
op|'('
name|'idFunction'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Change the function used by L{unsignedID} to determine the integer id value\n    of an object.  This is largely useful for testing to give L{unsignedID}\n    deterministic, easily-controlled behavior.\n\n    @param idFunction: A function with the signature of L{id}.\n    @return: The previous function being used by L{unsignedID}.\n    """'
newline|'\n'
name|'global'
name|'_idFunction'
newline|'\n'
name|'oldIDFunction'
op|'='
name|'_idFunction'
newline|'\n'
name|'_idFunction'
op|'='
name|'idFunction'
newline|'\n'
name|'return'
name|'oldIDFunction'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# A value about twice as large as any Python int, to which negative values'
nl|'\n'
comment|'# from id() will be added, moving them into a range which should begin just'
nl|'\n'
comment|'# above where positive values from id() leave off.'
nl|'\n'
DECL|variable|_HUGEINT
dedent|''
name|'_HUGEINT'
op|'='
op|'('
name|'sys'
op|'.'
name|'maxint'
op|'+'
number|'1L'
op|')'
op|'*'
number|'2L'
newline|'\n'
DECL|function|unsignedID
name|'def'
name|'unsignedID'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return the id of an object as an unsigned number so that its hex\n    representation makes sense.\n\n    This is mostly necessary in Python 2.4 which implements L{id} to sometimes\n    return a negative value.  Python 2.3 shares this behavior, but also\n    implements hex and the %x format specifier to represent negative values as\n    though they were positive ones, obscuring the behavior of L{id}.  Python\n    2.5\'s implementation of L{id} always returns positive values.\n    """'
newline|'\n'
name|'rval'
op|'='
name|'_idFunction'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'if'
name|'rval'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'rval'
op|'+='
name|'_HUGEINT'
newline|'\n'
dedent|''
name|'return'
name|'rval'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|mergeFunctionMetadata
dedent|''
name|'def'
name|'mergeFunctionMetadata'
op|'('
name|'f'
op|','
name|'g'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Overwrite C{g}\'s name and docstring with values from C{f}.  Update\n    C{g}\'s instance dictionary with C{f}\'s.\n\n    To use this function safely you must use the return value. In Python 2.3,\n    L{mergeFunctionMetadata} will create a new function. In later versions of\n    Python, C{g} will be mutated and returned.\n\n    @return: A function that has C{g}\'s behavior and metadata merged from\n        C{f}.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'g'
op|'.'
name|'__name__'
op|'='
name|'f'
op|'.'
name|'__name__'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'merged'
op|'='
name|'new'
op|'.'
name|'function'
op|'('
nl|'\n'
name|'g'
op|'.'
name|'func_code'
op|','
name|'g'
op|'.'
name|'func_globals'
op|','
nl|'\n'
name|'f'
op|'.'
name|'__name__'
op|','
name|'inspect'
op|'.'
name|'getargspec'
op|'('
name|'g'
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
name|'g'
op|'.'
name|'func_closure'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'merged'
op|'='
name|'g'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'merged'
op|'.'
name|'__doc__'
op|'='
name|'f'
op|'.'
name|'__doc__'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'AttributeError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'merged'
op|'.'
name|'__dict__'
op|'.'
name|'update'
op|'('
name|'g'
op|'.'
name|'__dict__'
op|')'
newline|'\n'
name|'merged'
op|'.'
name|'__dict__'
op|'.'
name|'update'
op|'('
name|'f'
op|'.'
name|'__dict__'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'AttributeError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'merged'
op|'.'
name|'__module__'
op|'='
name|'f'
op|'.'
name|'__module__'
newline|'\n'
name|'return'
name|'merged'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|nameToLabel
dedent|''
name|'def'
name|'nameToLabel'
op|'('
name|'mname'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert a string like a variable name into a slightly more human-friendly\n    string with spaces and capitalized letters.\n\n    @type mname: C{str}\n    @param mname: The name to convert to a label.  This must be a string\n    which could be used as a Python identifier.  Strings which do not take\n    this form will result in unpredictable behavior.\n\n    @rtype: C{str}\n    """'
newline|'\n'
name|'labelList'
op|'='
op|'['
op|']'
newline|'\n'
name|'word'
op|'='
string|"''"
newline|'\n'
name|'lastWasUpper'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'letter'
name|'in'
name|'mname'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'letter'
op|'.'
name|'isupper'
op|'('
op|')'
op|'=='
name|'lastWasUpper'
op|':'
newline|'\n'
comment|'# Continuing a word.'
nl|'\n'
indent|'            '
name|'word'
op|'+='
name|'letter'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# breaking a word OR beginning a word'
nl|'\n'
indent|'            '
name|'if'
name|'lastWasUpper'
op|':'
newline|'\n'
comment|'# could be either'
nl|'\n'
indent|'                '
name|'if'
name|'len'
op|'('
name|'word'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
comment|'# keep going'
nl|'\n'
indent|'                    '
name|'word'
op|'+='
name|'letter'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# acronym'
nl|'\n'
comment|"# we're processing the lowercase letter after the acronym-then-capital"
nl|'\n'
indent|'                    '
name|'lastWord'
op|'='
name|'word'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'firstLetter'
op|'='
name|'word'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'labelList'
op|'.'
name|'append'
op|'('
name|'lastWord'
op|')'
newline|'\n'
name|'word'
op|'='
name|'firstLetter'
op|'+'
name|'letter'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# definitely breaking: lower to upper'
nl|'\n'
indent|'                '
name|'labelList'
op|'.'
name|'append'
op|'('
name|'word'
op|')'
newline|'\n'
name|'word'
op|'='
name|'letter'
newline|'\n'
dedent|''
dedent|''
name|'lastWasUpper'
op|'='
name|'letter'
op|'.'
name|'isupper'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'labelList'
op|':'
newline|'\n'
indent|'        '
name|'labelList'
op|'['
number|'0'
op|']'
op|'='
name|'labelList'
op|'['
number|'0'
op|']'
op|'.'
name|'capitalize'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'mname'
op|'.'
name|'capitalize'
op|'('
op|')'
newline|'\n'
dedent|''
name|'labelList'
op|'.'
name|'append'
op|'('
name|'word'
op|')'
newline|'\n'
name|'return'
string|"' '"
op|'.'
name|'join'
op|'('
name|'labelList'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|uidFromString
dedent|''
name|'def'
name|'uidFromString'
op|'('
name|'uidString'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert a user identifier, as a string, into an integer UID.\n\n    @type uid: C{str}\n    @param uid: A string giving the base-ten representation of a UID or the\n        name of a user which can be converted to a UID via L{pwd.getpwnam}.\n\n    @rtype: C{int}\n    @return: The integer UID corresponding to the given string.\n\n    @raise ValueError: If the user name is supplied and L{pwd} is not\n        available.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
name|'uidString'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'pwd'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
name|'return'
name|'pwd'
op|'.'
name|'getpwnam'
op|'('
name|'uidString'
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|gidFromString
dedent|''
dedent|''
name|'def'
name|'gidFromString'
op|'('
name|'gidString'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert a group identifier, as a string, into an integer GID.\n\n    @type uid: C{str}\n    @param uid: A string giving the base-ten representation of a GID or the\n        name of a group which can be converted to a GID via L{grp.getgrnam}.\n\n    @rtype: C{int}\n    @return: The integer GID corresponding to the given string.\n\n    @raise ValueError: If the group name is supplied and L{grp} is not\n        available.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
name|'gidString'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'grp'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
name|'return'
name|'grp'
op|'.'
name|'getgrnam'
op|'('
name|'gidString'
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|runAsEffectiveUser
dedent|''
dedent|''
name|'def'
name|'runAsEffectiveUser'
op|'('
name|'euid'
op|','
name|'egid'
op|','
name|'function'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Run the given function wrapped with seteuid/setegid calls.\n\n    This will try to minimize the number of seteuid/setegid calls, comparing\n    current and wanted permissions\n\n    @param euid: effective UID used to call the function.\n    @type euid: C{int}\n\n    @type egid: effective GID used to call the function.\n    @param egid: C{int}\n\n    @param function: the function run with the specific permission.\n    @type function: any callable\n\n    @param *args: arguments passed to C{function}\n    @param **kwargs: keyword arguments passed to C{function}\n    """'
newline|'\n'
name|'uid'
op|','
name|'gid'
op|'='
name|'os'
op|'.'
name|'geteuid'
op|'('
op|')'
op|','
name|'os'
op|'.'
name|'getegid'
op|'('
op|')'
newline|'\n'
name|'if'
name|'uid'
op|'=='
name|'euid'
name|'and'
name|'gid'
op|'=='
name|'egid'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'function'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'uid'
op|'!='
number|'0'
name|'and'
op|'('
name|'uid'
op|'!='
name|'euid'
name|'or'
name|'gid'
op|'!='
name|'egid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'seteuid'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'gid'
op|'!='
name|'egid'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'setegid'
op|'('
name|'egid'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'euid'
op|'!='
number|'0'
name|'and'
op|'('
name|'euid'
op|'!='
name|'uid'
name|'or'
name|'gid'
op|'!='
name|'egid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'seteuid'
op|'('
name|'euid'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'function'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'euid'
op|'!='
number|'0'
name|'and'
op|'('
name|'uid'
op|'!='
name|'euid'
name|'or'
name|'gid'
op|'!='
name|'egid'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'seteuid'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'gid'
op|'!='
name|'egid'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'setegid'
op|'('
name|'gid'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'uid'
op|'!='
number|'0'
name|'and'
op|'('
name|'uid'
op|'!='
name|'euid'
name|'or'
name|'gid'
op|'!='
name|'egid'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'seteuid'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
nl|'\n'
string|'"uniquify"'
op|','
string|'"padTo"'
op|','
string|'"getPluginDirs"'
op|','
string|'"addPluginDir"'
op|','
string|'"sibpath"'
op|','
nl|'\n'
string|'"getPassword"'
op|','
string|'"dict"'
op|','
string|'"println"'
op|','
string|'"keyed_md5"'
op|','
string|'"makeStatBar"'
op|','
nl|'\n'
string|'"OrderedDict"'
op|','
string|'"InsensitiveDict"'
op|','
string|'"spewer"'
op|','
string|'"searchupwards"'
op|','
string|'"LineLog"'
op|','
nl|'\n'
string|'"raises"'
op|','
string|'"IntervalDifferential"'
op|','
string|'"FancyStrMixin"'
op|','
string|'"FancyEqMixin"'
op|','
nl|'\n'
string|'"dsu"'
op|','
string|'"switchUID"'
op|','
string|'"SubclassableCStringIO"'
op|','
string|'"moduleMovedForSplit"'
op|','
nl|'\n'
string|'"unsignedID"'
op|','
string|'"mergeFunctionMetadata"'
op|','
string|'"nameToLabel"'
op|','
string|'"uidFromString"'
op|','
nl|'\n'
string|'"gidFromString"'
op|','
string|'"runAsEffectiveUser"'
op|','
string|'"moduleMovedForSplit"'
op|','
nl|'\n'
op|']'
newline|'\n'
endmarker|''
end_unit

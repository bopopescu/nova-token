begin_unit
comment|'# Copyright (c) 2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.python.fakepwd}.\n"""'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pwd'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|pwd
indent|'    '
name|'pwd'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'from'
name|'operator'
name|'import'
name|'getitem'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'fakepwd'
name|'import'
name|'UserDatabase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UserDatabaseTestsMixin
name|'class'
name|'UserDatabaseTestsMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{UserDatabaseTestsMixin} defines tests which apply to any user database\n    implementation.  Subclasses should mix it in, implement C{setUp} to create\n    C{self.database} bound to a user database instance, and implement\n    C{getExistingUserInfo} to return information about a user (such information\n    should be unique per test method).\n    """'
newline|'\n'
DECL|member|test_getpwuid
name|'def'
name|'test_getpwuid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        I{getpwuid} accepts a uid and returns the user record associated with\n        it.\n        """'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'2'
op|')'
op|':'
newline|'\n'
comment|'# Get some user which exists in the database.'
nl|'\n'
indent|'            '
name|'username'
op|','
name|'password'
op|','
name|'uid'
op|','
name|'gid'
op|','
name|'gecos'
op|','
name|'dir'
op|','
name|'shell'
op|'='
name|'self'
op|'.'
name|'getExistingUserInfo'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Now try to look it up and make sure the result is correct.'
nl|'\n'
name|'entry'
op|'='
name|'self'
op|'.'
name|'database'
op|'.'
name|'getpwuid'
op|'('
name|'uid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_name'
op|','
name|'username'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_passwd'
op|','
name|'password'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_uid'
op|','
name|'uid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_gid'
op|','
name|'gid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_gecos'
op|','
name|'gecos'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_dir'
op|','
name|'dir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_shell'
op|','
name|'shell'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noSuchUID
dedent|''
dedent|''
name|'def'
name|'test_noSuchUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        I{getpwuid} raises L{KeyError} when passed a uid which does not exist\n        in the user database.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'KeyError'
op|','
name|'self'
op|'.'
name|'database'
op|'.'
name|'getpwuid'
op|','
op|'-'
number|'13'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getpwnam
dedent|''
name|'def'
name|'test_getpwnam'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        I{getpwnam} accepts a username and returns the user record associated\n        with it.\n        """'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'2'
op|')'
op|':'
newline|'\n'
comment|'# Get some user which exists in the database.'
nl|'\n'
indent|'            '
name|'username'
op|','
name|'password'
op|','
name|'uid'
op|','
name|'gid'
op|','
name|'gecos'
op|','
name|'dir'
op|','
name|'shell'
op|'='
name|'self'
op|'.'
name|'getExistingUserInfo'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Now try to look it up and make sure the result is correct.'
nl|'\n'
name|'entry'
op|'='
name|'self'
op|'.'
name|'database'
op|'.'
name|'getpwnam'
op|'('
name|'username'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_name'
op|','
name|'username'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_passwd'
op|','
name|'password'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_uid'
op|','
name|'uid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_gid'
op|','
name|'gid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_gecos'
op|','
name|'gecos'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_dir'
op|','
name|'dir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_shell'
op|','
name|'shell'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noSuchName
dedent|''
dedent|''
name|'def'
name|'test_noSuchName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        I{getpwnam} raises L{KeyError} when passed a username which does not\n        exist in the user database.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'KeyError'
op|','
name|'self'
op|'.'
name|'database'
op|'.'
name|'getpwnam'
op|','
nl|'\n'
string|"'no'"
string|"'such'"
string|"'user'"
string|"'exists'"
string|"'the'"
string|"'name'"
string|"'is'"
string|"'too'"
string|"'long'"
string|"'and'"
string|"'has'"
nl|'\n'
string|"'\\1'"
string|"'in'"
string|"'it'"
string|"'too'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_recordLength
dedent|''
name|'def'
name|'test_recordLength'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The user record returned by I{getpwuid}, I{getpwnam}, and I{getpwall}\n        has a length.\n        """'
newline|'\n'
name|'db'
op|'='
name|'self'
op|'.'
name|'database'
newline|'\n'
name|'username'
op|','
name|'password'
op|','
name|'uid'
op|','
name|'gid'
op|','
name|'gecos'
op|','
name|'dir'
op|','
name|'shell'
op|'='
name|'self'
op|'.'
name|'getExistingUserInfo'
op|'('
op|')'
newline|'\n'
name|'for'
name|'entry'
name|'in'
op|'['
name|'db'
op|'.'
name|'getpwuid'
op|'('
name|'uid'
op|')'
op|','
name|'db'
op|'.'
name|'getpwnam'
op|'('
name|'username'
op|')'
op|','
name|'db'
op|'.'
name|'getpwall'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'len'
op|'('
name|'entry'
op|')'
op|','
name|'int'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_recordIndexable
dedent|''
dedent|''
name|'def'
name|'test_recordIndexable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The user record returned by I{getpwuid}, I{getpwnam}, and I{getpwall}\n        is indexable, with successive indexes starting from 0 corresponding to\n        the values of the C{pw_name}, C{pw_passwd}, C{pw_uid}, C{pw_gid},\n        C{pw_gecos}, C{pw_dir}, and C{pw_shell} attributes, respectively.\n        """'
newline|'\n'
name|'db'
op|'='
name|'self'
op|'.'
name|'database'
newline|'\n'
name|'username'
op|','
name|'password'
op|','
name|'uid'
op|','
name|'gid'
op|','
name|'gecos'
op|','
name|'dir'
op|','
name|'shell'
op|'='
name|'self'
op|'.'
name|'getExistingUserInfo'
op|'('
op|')'
newline|'\n'
name|'for'
name|'entry'
name|'in'
op|'['
name|'db'
op|'.'
name|'getpwuid'
op|'('
name|'uid'
op|')'
op|','
name|'db'
op|'.'
name|'getpwnam'
op|'('
name|'username'
op|')'
op|','
name|'db'
op|'.'
name|'getpwall'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'['
number|'0'
op|']'
op|','
name|'username'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'['
number|'1'
op|']'
op|','
name|'password'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'['
number|'2'
op|']'
op|','
name|'uid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'['
number|'3'
op|']'
op|','
name|'gid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'['
number|'4'
op|']'
op|','
name|'gecos'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'['
number|'5'
op|']'
op|','
name|'dir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'['
number|'6'
op|']'
op|','
name|'shell'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'entry'
op|')'
op|','
name|'len'
op|'('
name|'list'
op|'('
name|'entry'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'IndexError'
op|','
name|'getitem'
op|','
name|'entry'
op|','
number|'7'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UserDatabaseTests
dedent|''
dedent|''
dedent|''
name|'class'
name|'UserDatabaseTests'
op|'('
name|'TestCase'
op|','
name|'UserDatabaseTestsMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{UserDatabase}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a L{UserDatabase} with no user data in it.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'database'
op|'='
name|'UserDatabase'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_counter'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getExistingUserInfo
dedent|''
name|'def'
name|'getExistingUserInfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add a new user to C{self.database} and return its information.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_counter'
op|'+='
number|'1'
newline|'\n'
name|'suffix'
op|'='
string|"'_'"
op|'+'
name|'str'
op|'('
name|'self'
op|'.'
name|'_counter'
op|')'
newline|'\n'
name|'username'
op|'='
string|"'username'"
op|'+'
name|'suffix'
newline|'\n'
name|'password'
op|'='
string|"'password'"
op|'+'
name|'suffix'
newline|'\n'
name|'uid'
op|'='
name|'self'
op|'.'
name|'_counter'
newline|'\n'
name|'gid'
op|'='
name|'self'
op|'.'
name|'_counter'
op|'+'
number|'1000'
newline|'\n'
name|'gecos'
op|'='
string|"'gecos'"
op|'+'
name|'suffix'
newline|'\n'
name|'dir'
op|'='
string|"'dir'"
op|'+'
name|'suffix'
newline|'\n'
name|'shell'
op|'='
string|"'shell'"
op|'+'
name|'suffix'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'database'
op|'.'
name|'addUser'
op|'('
name|'username'
op|','
name|'password'
op|','
name|'uid'
op|','
name|'gid'
op|','
name|'gecos'
op|','
name|'dir'
op|','
name|'shell'
op|')'
newline|'\n'
name|'return'
op|'('
name|'username'
op|','
name|'password'
op|','
name|'uid'
op|','
name|'gid'
op|','
name|'gecos'
op|','
name|'dir'
op|','
name|'shell'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addUser
dedent|''
name|'def'
name|'test_addUser'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UserDatabase.addUser} accepts seven arguments, one for each field of\n        a L{pwd.struct_passwd}, and makes the new record available via\n        L{UserDatabase.getpwuid}, L{UserDatabase.getpwnam}, and\n        L{UserDatabase.getpwall}.\n        """'
newline|'\n'
name|'username'
op|'='
string|"'alice'"
newline|'\n'
name|'password'
op|'='
string|"'secr3t'"
newline|'\n'
name|'uid'
op|'='
number|'123'
newline|'\n'
name|'gid'
op|'='
number|'456'
newline|'\n'
name|'gecos'
op|'='
string|"'Alice,,,'"
newline|'\n'
name|'home'
op|'='
string|"'/users/alice'"
newline|'\n'
name|'shell'
op|'='
string|"'/usr/bin/foosh'"
newline|'\n'
nl|'\n'
name|'db'
op|'='
name|'self'
op|'.'
name|'database'
newline|'\n'
name|'db'
op|'.'
name|'addUser'
op|'('
name|'username'
op|','
name|'password'
op|','
name|'uid'
op|','
name|'gid'
op|','
name|'gecos'
op|','
name|'home'
op|','
name|'shell'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'entry'
name|'in'
op|'['
name|'db'
op|'.'
name|'getpwuid'
op|'('
name|'uid'
op|')'
op|','
name|'db'
op|'.'
name|'getpwnam'
op|'('
name|'username'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_name'
op|','
name|'username'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_passwd'
op|','
name|'password'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_uid'
op|','
name|'uid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_gid'
op|','
name|'gid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_gecos'
op|','
name|'gecos'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_dir'
op|','
name|'home'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_shell'
op|','
name|'shell'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'['
name|'entry'
op|']'
op|'='
name|'db'
op|'.'
name|'getpwall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_name'
op|','
name|'username'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_passwd'
op|','
name|'password'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_uid'
op|','
name|'uid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_gid'
op|','
name|'gid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_gecos'
op|','
name|'gecos'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_dir'
op|','
name|'home'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'entry'
op|'.'
name|'pw_shell'
op|','
name|'shell'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PwdModuleTests
dedent|''
dedent|''
name|'class'
name|'PwdModuleTests'
op|'('
name|'TestCase'
op|','
name|'UserDatabaseTestsMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{PwdModuleTests} runs the tests defined by L{UserDatabaseTestsMixin}\n    against the built-in C{pwd} module.  This serves to verify that\n    L{UserDatabase} is really a fake of that API.\n    """'
newline|'\n'
name|'if'
name|'pwd'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"Cannot verify UserDatabase against pwd without pwd"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'database'
op|'='
name|'pwd'
newline|'\n'
name|'self'
op|'.'
name|'_users'
op|'='
name|'iter'
op|'('
name|'self'
op|'.'
name|'database'
op|'.'
name|'getpwall'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_uids'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getExistingUserInfo
dedent|''
name|'def'
name|'getExistingUserInfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Read and return the next record from C{self._users}, filtering out\n        any records with previously seen uid values (as these cannot be\n        found with C{getpwuid} and only cause trouble).\n        """'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'entry'
op|'='
name|'self'
op|'.'
name|'_users'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'if'
name|'entry'
op|'.'
name|'pw_uid'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_uids'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_uids'
op|'.'
name|'add'
op|'('
name|'entry'
op|'.'
name|'pw_uid'
op|')'
newline|'\n'
name|'return'
name|'entry'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

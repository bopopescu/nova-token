begin_unit
comment|'# Copyright (c) 2006-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'versions'
name|'import'
name|'getVersionString'
op|','
name|'IncomparableVersions'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'versions'
name|'import'
name|'Version'
op|','
name|'_inf'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
name|'VERSION_4_ENTRIES'
op|'='
string|'"""\\\n<?xml version="1.0" encoding="utf-8"?>\n<wc-entries\n   xmlns="svn:">\n<entry\n   committed-rev="18210"\n   name=""\n   committed-date="2006-09-21T04:43:09.542953Z"\n   url="svn+ssh://svn.twistedmatrix.com/svn/Twisted/trunk/twisted"\n   last-author="exarkun"\n   kind="dir"\n   uuid="bbbe8e31-12d6-0310-92fd-ac37d47ddeeb"\n   repos="svn+ssh://svn.twistedmatrix.com/svn/Twisted"\n   revision="18211"/>\n</wc-entries>\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
name|'VERSION_8_ENTRIES'
op|'='
string|'"""\\\n8\n\ndir\n22715\nsvn+ssh://svn.twistedmatrix.com/svn/Twisted/trunk\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'VERSION_9_ENTRIES'
op|'='
string|'"""\\\n9\n\ndir\n22715\nsvn+ssh://svn.twistedmatrix.com/svn/Twisted/trunk\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'VERSION_10_ENTRIES'
op|'='
string|'"""\\\n10\n\ndir\n22715\nsvn+ssh://svn.twistedmatrix.com/svn/Twisted/trunk\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VersionsTest
name|'class'
name|'VersionsTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_versionComparison
indent|'    '
name|'def'
name|'test_versionComparison'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Versions can be compared for equality and order.\n        """'
newline|'\n'
name|'va'
op|'='
name|'Version'
op|'('
string|'"dummy"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'vb'
op|'='
name|'Version'
op|'('
string|'"dummy"'
op|','
number|'0'
op|','
number|'1'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'va'
op|'>'
name|'vb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'vb'
op|'<'
name|'va'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'va'
op|'>='
name|'vb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'vb'
op|'<='
name|'va'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'va'
op|'!='
name|'vb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'vb'
op|'=='
name|'Version'
op|'('
string|'"dummy"'
op|','
number|'0'
op|','
number|'1'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'vb'
op|'=='
name|'vb'
op|')'
newline|'\n'
nl|'\n'
comment|'# BREAK IT DOWN@!!'
nl|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'va'
op|'<'
name|'vb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'vb'
op|'>'
name|'va'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'va'
op|'<='
name|'vb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'vb'
op|'>='
name|'va'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'va'
op|'=='
name|'vb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'vb'
op|'!='
name|'Version'
op|'('
string|'"dummy"'
op|','
number|'0'
op|','
number|'1'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'vb'
op|'!='
name|'vb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_comparingPrereleasesWithReleases
dedent|''
name|'def'
name|'test_comparingPrereleasesWithReleases'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Prereleases are always less than versions without prereleases.\n        """'
newline|'\n'
name|'va'
op|'='
name|'Version'
op|'('
string|'"whatever"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|','
name|'prerelease'
op|'='
number|'1'
op|')'
newline|'\n'
name|'vb'
op|'='
name|'Version'
op|'('
string|'"whatever"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'va'
op|'<'
name|'vb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'va'
op|'>'
name|'vb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'vb'
op|','
name|'va'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_comparingPrereleases
dedent|''
name|'def'
name|'test_comparingPrereleases'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The value specified as the prerelease is used in version comparisons.\n        """'
newline|'\n'
name|'va'
op|'='
name|'Version'
op|'('
string|'"whatever"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|','
name|'prerelease'
op|'='
number|'1'
op|')'
newline|'\n'
name|'vb'
op|'='
name|'Version'
op|'('
string|'"whatever"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|','
name|'prerelease'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'va'
op|'<'
name|'vb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'va'
op|'>'
name|'vb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'va'
op|','
name|'vb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_infComparison
dedent|''
name|'def'
name|'test_infComparison'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_inf} is equal to L{_inf}.\n\n        This is a regression test.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'_inf'
op|','
name|'_inf'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testDontAllowBuggyComparisons
dedent|''
name|'def'
name|'testDontAllowBuggyComparisons'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'IncomparableVersions'
op|','
nl|'\n'
name|'cmp'
op|','
nl|'\n'
name|'Version'
op|'('
string|'"dummy"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|')'
op|','
nl|'\n'
name|'Version'
op|'('
string|'"dumym"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_repr
dedent|''
name|'def'
name|'test_repr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling C{repr} on a version returns a human-readable string\n        representation of the version.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'repr'
op|'('
name|'Version'
op|'('
string|'"dummy"'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|')'
op|')'
op|','
nl|'\n'
string|'"Version(\'dummy\', 1, 2, 3)"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reprWithPrerelease
dedent|''
name|'def'
name|'test_reprWithPrerelease'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling C{repr} on a version with a prerelease returns a human-readable\n        string representation of the version including the prerelease.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'repr'
op|'('
name|'Version'
op|'('
string|'"dummy"'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
name|'prerelease'
op|'='
number|'4'
op|')'
op|')'
op|','
nl|'\n'
string|'"Version(\'dummy\', 1, 2, 3, prerelease=4)"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_str
dedent|''
name|'def'
name|'test_str'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling C{str} on a version returns a human-readable string\n        representation of the version.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'Version'
op|'('
string|'"dummy"'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|')'
op|')'
op|','
nl|'\n'
string|'"[dummy, version 1.2.3]"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_strWithPrerelease
dedent|''
name|'def'
name|'test_strWithPrerelease'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling C{str} on a version with a prerelease includes the prerelease.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'Version'
op|'('
string|'"dummy"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|','
name|'prerelease'
op|'='
number|'1'
op|')'
op|')'
op|','
nl|'\n'
string|'"[dummy, version 1.0.0pre1]"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testShort
dedent|''
name|'def'
name|'testShort'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'Version'
op|'('
string|"'dummy'"
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|')'
op|'.'
name|'short'
op|'('
op|')'
op|','
string|"'1.2.3'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_goodSVNEntries_4
dedent|''
name|'def'
name|'test_goodSVNEntries_4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Version should be able to parse an SVN format 4 entries file.\n        """'
newline|'\n'
name|'version'
op|'='
name|'Version'
op|'('
string|'"dummy"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'version'
op|'.'
name|'_parseSVNEntries_4'
op|'('
name|'StringIO'
op|'('
name|'VERSION_4_ENTRIES'
op|')'
op|')'
op|','
string|"'18211'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_goodSVNEntries_8
dedent|''
name|'def'
name|'test_goodSVNEntries_8'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Version should be able to parse an SVN format 8 entries file.\n        """'
newline|'\n'
name|'version'
op|'='
name|'Version'
op|'('
string|'"dummy"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'version'
op|'.'
name|'_parseSVNEntries_8'
op|'('
name|'StringIO'
op|'('
name|'VERSION_8_ENTRIES'
op|')'
op|')'
op|','
string|"'22715'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_goodSVNEntries_9
dedent|''
name|'def'
name|'test_goodSVNEntries_9'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Version should be able to parse an SVN format 9 entries file.\n        """'
newline|'\n'
name|'version'
op|'='
name|'Version'
op|'('
string|'"dummy"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'version'
op|'.'
name|'_parseSVNEntries_9'
op|'('
name|'StringIO'
op|'('
name|'VERSION_9_ENTRIES'
op|')'
op|')'
op|','
string|"'22715'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_goodSVNEntriesTenPlus
dedent|''
name|'def'
name|'test_goodSVNEntriesTenPlus'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Version should be able to parse an SVN format 10 entries file.\n        """'
newline|'\n'
name|'version'
op|'='
name|'Version'
op|'('
string|'"dummy"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'version'
op|'.'
name|'_parseSVNEntriesTenPlus'
op|'('
name|'StringIO'
op|'('
name|'VERSION_10_ENTRIES'
op|')'
op|')'
op|','
string|"'22715'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getVersionString
dedent|''
name|'def'
name|'test_getVersionString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{getVersionString} returns a string with the package name and the\n        short version number.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"'Twisted 8.0.0'"
op|','
name|'getVersionString'
op|'('
name|'Version'
op|'('
string|"'Twisted'"
op|','
number|'8'
op|','
number|'0'
op|','
number|'0'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getVersionStringWithPrerelease
dedent|''
name|'def'
name|'test_getVersionStringWithPrerelease'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{getVersionString} includes the prerelease, if any.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'getVersionString'
op|'('
name|'Version'
op|'('
string|'"whatever"'
op|','
number|'8'
op|','
number|'0'
op|','
number|'0'
op|','
name|'prerelease'
op|'='
number|'1'
op|')'
op|')'
op|','
nl|'\n'
string|'"whatever 8.0.0pre1"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_base
dedent|''
name|'def'
name|'test_base'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{base} method returns a very simple representation of the version.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'Version'
op|'('
string|'"foo"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|')'
op|'.'
name|'base'
op|'('
op|')'
op|','
string|'"1.0.0"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_baseWithPrerelease
dedent|''
name|'def'
name|'test_baseWithPrerelease'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The base version includes \'preX\' for versions with prereleases.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'Version'
op|'('
string|'"foo"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|','
name|'prerelease'
op|'='
number|'8'
op|')'
op|'.'
name|'base'
op|'('
op|')'
op|','
nl|'\n'
string|'"1.0.0pre8"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FormatDiscoveryTests
dedent|''
dedent|''
name|'class'
name|'FormatDiscoveryTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests which discover the parsing method based on the imported module name.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a temporary directory with a package structure in it.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'entry'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'preTestModules'
op|'='
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'path'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'entry'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'pkg'
op|'='
name|'self'
op|'.'
name|'entry'
op|'.'
name|'child'
op|'('
string|'"twisted_python_versions_package"'
op|')'
newline|'\n'
name|'pkg'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'pkg'
op|'.'
name|'child'
op|'('
string|'"__init__.py"'
op|')'
op|'.'
name|'setContent'
op|'('
nl|'\n'
string|'"from twisted.python.versions import Version\\n"'
nl|'\n'
string|'"version = Version(\'twisted_python_versions_package\', 1, 0, 0)\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'svnEntries'
op|'='
name|'pkg'
op|'.'
name|'child'
op|'('
string|'".svn"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'svnEntries'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove the imported modules and sys.path modifications.\n        """'
newline|'\n'
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'preTestModules'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'path'
op|'.'
name|'remove'
op|'('
name|'self'
op|'.'
name|'entry'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|checkSVNFormat
dedent|''
name|'def'
name|'checkSVNFormat'
op|'('
name|'self'
op|','
name|'formatVersion'
op|','
name|'entriesText'
op|','
name|'expectedRevision'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check for the given revision being detected after setting the SVN\n        entries text and format version of the test directory structure.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'svnEntries'
op|'.'
name|'child'
op|'('
string|'"format"'
op|')'
op|'.'
name|'setContent'
op|'('
name|'formatVersion'
op|'+'
string|'"\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'svnEntries'
op|'.'
name|'child'
op|'('
string|'"entries"'
op|')'
op|'.'
name|'setContent'
op|'('
name|'entriesText'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'getVersion'
op|'('
op|')'
op|'.'
name|'_getSVNVersion'
op|'('
op|')'
op|','
name|'expectedRevision'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getVersion
dedent|''
name|'def'
name|'getVersion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Import and retrieve the Version object from our dynamically created\n        package.\n        """'
newline|'\n'
name|'import'
name|'twisted_python_versions_package'
newline|'\n'
name|'return'
name|'twisted_python_versions_package'
op|'.'
name|'version'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_detectVersion4
dedent|''
name|'def'
name|'test_detectVersion4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that version 4 format file will be properly detected and parsed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'checkSVNFormat'
op|'('
string|'"4"'
op|','
name|'VERSION_4_ENTRIES'
op|','
string|"'18211'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_detectVersion8
dedent|''
name|'def'
name|'test_detectVersion8'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that version 8 format files will be properly detected and\n        parsed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'checkSVNFormat'
op|'('
string|'"8"'
op|','
name|'VERSION_8_ENTRIES'
op|','
string|"'22715'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_detectVersion9
dedent|''
name|'def'
name|'test_detectVersion9'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that version 9 format files will be properly detected and\n        parsed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'checkSVNFormat'
op|'('
string|'"9"'
op|','
name|'VERSION_9_ENTRIES'
op|','
string|"'22715'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_detectVersion10
dedent|''
name|'def'
name|'test_detectVersion10'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that version 10 format files will be properly detected and\n        parsed.\n\n        Differing from previous formats, the version 10 format lacks a\n        I{format} file and B{only} has the version information on the first\n        line of the I{entries} file.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'svnEntries'
op|'.'
name|'child'
op|'('
string|'"entries"'
op|')'
op|'.'
name|'setContent'
op|'('
name|'VERSION_10_ENTRIES'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'getVersion'
op|'('
op|')'
op|'.'
name|'_getSVNVersion'
op|'('
op|')'
op|','
string|"'22715'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_detectUnknownVersion
dedent|''
name|'def'
name|'test_detectUnknownVersion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that a new version of SVN will result in the revision \'Unknown\'.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'checkSVNFormat'
op|'('
string|'"some-random-new-version"'
op|','
string|'"ooga booga!"'
op|','
string|"'Unknown'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

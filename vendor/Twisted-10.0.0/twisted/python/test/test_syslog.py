begin_unit
comment|'# Copyright (c) 2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'failure'
name|'import'
name|'Failure'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'syslog'
name|'as'
name|'stdsyslog'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|stdsyslog
indent|'    '
name|'stdsyslog'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'syslog'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SyslogObserverTests
dedent|''
name|'class'
name|'SyslogObserverTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{SyslogObserver} which sends Twisted log events to the syslog.\n    """'
newline|'\n'
DECL|variable|events
name|'events'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'if'
name|'stdsyslog'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"syslog is not supported on this platform"'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'patch'
op|'('
name|'syslog'
op|'.'
name|'SyslogObserver'
op|','
string|"'openlog'"
op|','
name|'self'
op|'.'
name|'openlog'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'syslog'
op|'.'
name|'SyslogObserver'
op|','
string|"'syslog'"
op|','
name|'self'
op|'.'
name|'syslog'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'='
name|'syslog'
op|'.'
name|'SyslogObserver'
op|'('
string|"'SyslogObserverTests'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|openlog
dedent|''
name|'def'
name|'openlog'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'options'
op|','
name|'facility'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'logOpened'
op|'='
op|'('
name|'prefix'
op|','
name|'options'
op|','
name|'facility'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'events'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|syslog
dedent|''
name|'def'
name|'syslog'
op|'('
name|'self'
op|','
name|'options'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'events'
op|'.'
name|'append'
op|'('
op|'('
name|'options'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_emitWithoutMessage
dedent|''
name|'def'
name|'test_emitWithoutMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SyslogObserver.emit} ignores events with an empty value for the\n        C{\'message\'} key.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'emit'
op|'('
op|'{'
string|"'message'"
op|':'
op|'('
op|')'
op|','
string|"'isError'"
op|':'
name|'False'
op|','
string|"'system'"
op|':'
string|"'-'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'events'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_emitCustomPriority
dedent|''
name|'def'
name|'test_emitCustomPriority'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SyslogObserver.emit} uses the value of the C{\'syslogPriority\'} as the\n        syslog priority, if that key is present in the event dictionary.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'emit'
op|'('
op|'{'
nl|'\n'
string|"'message'"
op|':'
op|'('
string|"'hello, world'"
op|','
op|')'
op|','
string|"'isError'"
op|':'
name|'False'
op|','
string|"'system'"
op|':'
string|"'-'"
op|','
nl|'\n'
string|"'syslogPriority'"
op|':'
name|'stdsyslog'
op|'.'
name|'LOG_DEBUG'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'events'
op|','
nl|'\n'
op|'['
op|'('
name|'stdsyslog'
op|'.'
name|'LOG_DEBUG'
op|','
string|"'[-] hello, world'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_emitErrorPriority
dedent|''
name|'def'
name|'test_emitErrorPriority'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SyslogObserver.emit} uses C{LOG_ALERT} if the event represents an\n        error.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'emit'
op|'('
op|'{'
nl|'\n'
string|"'message'"
op|':'
op|'('
string|"'hello, world'"
op|','
op|')'
op|','
string|"'isError'"
op|':'
name|'True'
op|','
string|"'system'"
op|':'
string|"'-'"
op|','
nl|'\n'
string|"'failure'"
op|':'
name|'Failure'
op|'('
name|'Exception'
op|'('
string|'"foo"'
op|')'
op|')'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'events'
op|','
nl|'\n'
op|'['
op|'('
name|'stdsyslog'
op|'.'
name|'LOG_ALERT'
op|','
string|"'[-] hello, world'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_emitCustomPriorityOverridesError
dedent|''
name|'def'
name|'test_emitCustomPriorityOverridesError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SyslogObserver.emit} uses the value of the C{\'syslogPriority\'} key if\n        it is specified even if the event dictionary represents an error.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'emit'
op|'('
op|'{'
nl|'\n'
string|"'message'"
op|':'
op|'('
string|"'hello, world'"
op|','
op|')'
op|','
string|"'isError'"
op|':'
name|'True'
op|','
string|"'system'"
op|':'
string|"'-'"
op|','
nl|'\n'
string|"'syslogPriority'"
op|':'
name|'stdsyslog'
op|'.'
name|'LOG_NOTICE'
op|','
nl|'\n'
string|"'failure'"
op|':'
name|'Failure'
op|'('
name|'Exception'
op|'('
string|'"bar"'
op|')'
op|')'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'events'
op|','
nl|'\n'
op|'['
op|'('
name|'stdsyslog'
op|'.'
name|'LOG_NOTICE'
op|','
string|"'[-] hello, world'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_emitCustomFacility
dedent|''
name|'def'
name|'test_emitCustomFacility'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SyslogObserver.emit} uses the value of the C{\'syslogPriority\'} as the\n        syslog priority, if that key is present in the event dictionary.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'emit'
op|'('
op|'{'
nl|'\n'
string|"'message'"
op|':'
op|'('
string|"'hello, world'"
op|','
op|')'
op|','
string|"'isError'"
op|':'
name|'False'
op|','
string|"'system'"
op|':'
string|"'-'"
op|','
nl|'\n'
string|"'syslogFacility'"
op|':'
name|'stdsyslog'
op|'.'
name|'LOG_CRON'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'events'
op|','
nl|'\n'
op|'['
op|'('
name|'stdsyslog'
op|'.'
name|'LOG_INFO'
op|'|'
name|'stdsyslog'
op|'.'
name|'LOG_CRON'
op|','
string|"'[-] hello, world'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_emitCustomSystem
dedent|''
name|'def'
name|'test_emitCustomSystem'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SyslogObserver.emit} uses the value of the C{\'system\'} key to prefix\n        the logged message.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'emit'
op|'('
op|'{'
string|"'message'"
op|':'
op|'('
string|"'hello, world'"
op|','
op|')'
op|','
string|"'isError'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'system'"
op|':'
string|"'nonDefaultSystem'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'events'
op|','
nl|'\n'
op|'['
op|'('
name|'stdsyslog'
op|'.'
name|'LOG_INFO'
op|','
string|'"[nonDefaultSystem] hello, world"'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_emitMessage
dedent|''
name|'def'
name|'test_emitMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SyslogObserver.emit} logs the value of the C{\'message\'} key of the\n        event dictionary it is passed to the syslog.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'emit'
op|'('
op|'{'
nl|'\n'
string|"'message'"
op|':'
op|'('
string|"'hello, world'"
op|','
op|')'
op|','
string|"'isError'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'system'"
op|':'
string|"'-'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'events'
op|','
nl|'\n'
op|'['
op|'('
name|'stdsyslog'
op|'.'
name|'LOG_INFO'
op|','
string|'"[-] hello, world"'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_emitMultilineMessage
dedent|''
name|'def'
name|'test_emitMultilineMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Each line of a multiline message is emitted separately to the syslog.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'emit'
op|'('
op|'{'
nl|'\n'
string|"'message'"
op|':'
op|'('
string|"'hello,\\nworld'"
op|','
op|')'
op|','
string|"'isError'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'system'"
op|':'
string|"'-'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'events'
op|','
nl|'\n'
op|'['
op|'('
name|'stdsyslog'
op|'.'
name|'LOG_INFO'
op|','
string|"'[-] hello,'"
op|')'
op|','
nl|'\n'
op|'('
name|'stdsyslog'
op|'.'
name|'LOG_INFO'
op|','
string|"'[-] \\tworld'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_emitStripsTrailingEmptyLines
dedent|''
name|'def'
name|'test_emitStripsTrailingEmptyLines'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Trailing empty lines of a multiline message are omitted from the\n        messages sent to the syslog.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'emit'
op|'('
op|'{'
nl|'\n'
string|"'message'"
op|':'
op|'('
string|"'hello,\\nworld\\n\\n'"
op|','
op|')'
op|','
string|"'isError'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'system'"
op|':'
string|"'-'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'events'
op|','
nl|'\n'
op|'['
op|'('
name|'stdsyslog'
op|'.'
name|'LOG_INFO'
op|','
string|"'[-] hello,'"
op|')'
op|','
nl|'\n'
op|'('
name|'stdsyslog'
op|'.'
name|'LOG_INFO'
op|','
string|"'[-] \\tworld'"
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

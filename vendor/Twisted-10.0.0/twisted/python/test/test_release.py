begin_unit
comment|'# Copyright (c) 2007-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.python.release} and L{twisted.python._release}.\n\nAll of these tests are skipped on platforms other than Linux, as the release is\nonly ever performed on Linux.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'warnings'
newline|'\n'
name|'import'
name|'operator'
newline|'\n'
name|'import'
name|'os'
op|','
name|'sys'
op|','
name|'signal'
newline|'\n'
name|'from'
name|'StringIO'
name|'import'
name|'StringIO'
newline|'\n'
name|'import'
name|'tarfile'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
name|'import'
name|'minidom'
name|'as'
name|'dom'
newline|'\n'
nl|'\n'
name|'from'
name|'datetime'
name|'import'
name|'date'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'procutils'
name|'import'
name|'which'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'release'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'dsu'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'versions'
name|'import'
name|'Version'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'_release'
name|'import'
name|'_changeVersionInFile'
op|','
name|'getNextVersion'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'_release'
name|'import'
name|'findTwistedProjects'
op|','
name|'replaceInFile'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'_release'
name|'import'
name|'replaceProjectVersion'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'_release'
name|'import'
name|'updateTwistedVersionInformation'
op|','
name|'Project'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'_release'
name|'import'
name|'generateVersionFileData'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'_release'
name|'import'
name|'changeAllProjectVersions'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'_release'
name|'import'
name|'VERSION_OFFSET'
op|','
name|'DocBuilder'
op|','
name|'ManBuilder'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'_release'
name|'import'
name|'NoDocumentsFound'
op|','
name|'filePathDelta'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'_release'
name|'import'
name|'CommandFailed'
op|','
name|'BookBuilder'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'_release'
name|'import'
name|'DistributionBuilder'
op|','
name|'APIBuilder'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'_release'
name|'import'
name|'BuildAPIDocsScript'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'_release'
name|'import'
name|'buildAllTarballs'
op|','
name|'runCommand'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'_release'
name|'import'
name|'UncleanWorkingDirectory'
op|','
name|'NotWorkingDirectory'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'_release'
name|'import'
name|'ChangeVersionsScript'
op|','
name|'BuildTarballsScript'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'_release'
name|'import'
name|'NewsBuilder'
newline|'\n'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'platform'
op|'!='
string|"'linux2'"
op|':'
newline|'\n'
DECL|variable|skip
indent|'    '
name|'skip'
op|'='
string|'"Release toolchain only supported on Linux."'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|skip
indent|'    '
name|'skip'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Check a bunch of dependencies to skip tests if necessary.'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'lore'
op|'.'
name|'scripts'
name|'import'
name|'lore'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|loreSkip
indent|'    '
name|'loreSkip'
op|'='
string|'"Lore is not present."'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|loreSkip
indent|'    '
name|'loreSkip'
op|'='
name|'skip'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'popen2'
name|'import'
name|'Popen4'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|popen4Skip
indent|'    '
name|'popen4Skip'
op|'='
string|'"popen2.Popen4 is not available."'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|popen4Skip
indent|'    '
name|'popen4Skip'
op|'='
name|'skip'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pydoctor'
op|'.'
name|'driver'
newline|'\n'
comment|'# it might not be installed, or it might use syntax not available in'
nl|'\n'
comment|'# this version of Python.'
nl|'\n'
dedent|''
name|'except'
op|'('
name|'ImportError'
op|','
name|'SyntaxError'
op|')'
op|':'
newline|'\n'
DECL|variable|pydoctorSkip
indent|'    '
name|'pydoctorSkip'
op|'='
string|'"Pydoctor is not present."'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'getattr'
op|'('
name|'pydoctor'
op|','
string|'"version_info"'
op|','
op|'('
number|'0'
op|','
op|')'
op|')'
op|'<'
op|'('
number|'0'
op|','
number|'1'
op|')'
op|':'
newline|'\n'
DECL|variable|pydoctorSkip
indent|'        '
name|'pydoctorSkip'
op|'='
string|'"Pydoctor is too old."'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|pydoctorSkip
indent|'        '
name|'pydoctorSkip'
op|'='
name|'skip'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'which'
op|'('
string|'"latex"'
op|')'
name|'and'
name|'which'
op|'('
string|'"dvips"'
op|')'
name|'and'
name|'which'
op|'('
string|'"ps2pdf13"'
op|')'
op|':'
newline|'\n'
DECL|variable|latexSkip
indent|'    '
name|'latexSkip'
op|'='
name|'skip'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|latexSkip
indent|'    '
name|'latexSkip'
op|'='
string|'"LaTeX is not available."'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'which'
op|'('
string|'"svn"'
op|')'
name|'and'
name|'which'
op|'('
string|'"svnadmin"'
op|')'
op|':'
newline|'\n'
DECL|variable|svnSkip
indent|'    '
name|'svnSkip'
op|'='
name|'skip'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|svnSkip
indent|'    '
name|'svnSkip'
op|'='
string|'"svn or svnadmin is not present."'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|genVersion
dedent|''
name|'def'
name|'genVersion'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A convenience for generating _version.py data.\n\n    @param args: Arguments to pass to L{Version}.\n    @param kwargs: Keyword arguments to pass to L{Version}.\n    """'
newline|'\n'
name|'return'
name|'generateVersionFileData'
op|'('
name|'Version'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StructureAssertingMixin
dedent|''
name|'class'
name|'StructureAssertingMixin'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mixin for L{TestCase} subclasses which provides some methods for asserting\n    the structure and contents of directories and files on the filesystem.\n    """'
newline|'\n'
DECL|member|createStructure
name|'def'
name|'createStructure'
op|'('
name|'self'
op|','
name|'root'
op|','
name|'dirDict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a set of directories and files given a dict defining their\n        structure.\n\n        @param root: The directory in which to create the structure.  It must\n            already exist.\n        @type root: L{FilePath}\n\n        @param dirDict: The dict defining the structure. Keys should be strings\n            naming files, values should be strings describing file contents OR\n            dicts describing subdirectories.  All files are written in binary\n            mode.  Any string values are assumed to describe text files and\n            will have their newlines replaced with the platform-native newline\n            convention.  For example::\n\n                {"foofile": "foocontents",\n                 "bardir": {"barfile": "bar\\ncontents"}}\n        @type dirDict: C{dict}\n        """'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'dirDict'
op|':'
newline|'\n'
indent|'            '
name|'child'
op|'='
name|'root'
op|'.'
name|'child'
op|'('
name|'x'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'dirDict'
op|'['
name|'x'
op|']'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'child'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'createStructure'
op|'('
name|'child'
op|','
name|'dirDict'
op|'['
name|'x'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'child'
op|'.'
name|'setContent'
op|'('
name|'dirDict'
op|'['
name|'x'
op|']'
op|'.'
name|'replace'
op|'('
string|"'\\n'"
op|','
name|'os'
op|'.'
name|'linesep'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertStructure
dedent|''
dedent|''
dedent|''
name|'def'
name|'assertStructure'
op|'('
name|'self'
op|','
name|'root'
op|','
name|'dirDict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that a directory is equivalent to one described by a dict.\n\n        @param root: The filesystem directory to compare.\n        @type root: L{FilePath}\n        @param dirDict: The dict that should describe the contents of the\n            directory. It should be the same structure as the C{dirDict}\n            parameter to L{createStructure}.\n        @type dirDict: C{dict}\n        """'
newline|'\n'
name|'children'
op|'='
op|'['
name|'x'
op|'.'
name|'basename'
op|'('
op|')'
name|'for'
name|'x'
name|'in'
name|'root'
op|'.'
name|'children'
op|'('
op|')'
op|']'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'dirDict'
op|':'
newline|'\n'
indent|'            '
name|'child'
op|'='
name|'root'
op|'.'
name|'child'
op|'('
name|'x'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'dirDict'
op|'['
name|'x'
op|']'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'child'
op|'.'
name|'isdir'
op|'('
op|')'
op|','
string|'"%s is not a dir!"'
nl|'\n'
op|'%'
op|'('
name|'child'
op|'.'
name|'path'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStructure'
op|'('
name|'child'
op|','
name|'dirDict'
op|'['
name|'x'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'a'
op|'='
name|'child'
op|'.'
name|'getContent'
op|'('
op|')'
op|'.'
name|'replace'
op|'('
name|'os'
op|'.'
name|'linesep'
op|','
string|"'\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'a'
op|','
name|'dirDict'
op|'['
name|'x'
op|']'
op|','
name|'child'
op|'.'
name|'path'
op|')'
newline|'\n'
dedent|''
name|'children'
op|'.'
name|'remove'
op|'('
name|'x'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'children'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"There were extra children in %s: %s"'
nl|'\n'
op|'%'
op|'('
name|'root'
op|'.'
name|'path'
op|','
name|'children'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|assertExtractedStructure
dedent|''
dedent|''
name|'def'
name|'assertExtractedStructure'
op|'('
name|'self'
op|','
name|'outputFile'
op|','
name|'dirDict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that a tarfile content is equivalent to one described by a dict.\n\n        @param outputFile: The tar file built by L{DistributionBuilder}.\n        @type outputFile: L{FilePath}.\n        @param dirDict: The dict that should describe the contents of the\n            directory. It should be the same structure as the C{dirDict}\n            parameter to L{createStructure}.\n        @type dirDict: C{dict}\n        """'
newline|'\n'
name|'tarFile'
op|'='
name|'tarfile'
op|'.'
name|'TarFile'
op|'.'
name|'open'
op|'('
name|'outputFile'
op|'.'
name|'path'
op|','
string|'"r:bz2"'
op|')'
newline|'\n'
name|'extracted'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'extracted'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'for'
name|'info'
name|'in'
name|'tarFile'
op|':'
newline|'\n'
indent|'            '
name|'tarFile'
op|'.'
name|'extract'
op|'('
name|'info'
op|','
name|'path'
op|'='
name|'extracted'
op|'.'
name|'path'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertStructure'
op|'('
name|'extracted'
op|'.'
name|'children'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|','
name|'dirDict'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ChangeVersionTest
dedent|''
dedent|''
name|'class'
name|'ChangeVersionTest'
op|'('
name|'TestCase'
op|','
name|'StructureAssertingMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Twisted has the ability to change versions.\n    """'
newline|'\n'
nl|'\n'
DECL|member|makeFile
name|'def'
name|'makeFile'
op|'('
name|'self'
op|','
name|'relativePath'
op|','
name|'content'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a file with the given content relative to a temporary directory.\n\n        @param relativePath: The basename of the file to create.\n        @param content: The content that the file will have.\n        @return: The filename.\n        """'
newline|'\n'
name|'baseDirectory'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'directory'
op|','
name|'filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'relativePath'
op|')'
newline|'\n'
name|'directory'
op|'='
name|'baseDirectory'
op|'.'
name|'preauthChild'
op|'('
name|'directory'
op|')'
newline|'\n'
name|'directory'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'file'
op|'='
name|'directory'
op|'.'
name|'child'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'directory'
op|'.'
name|'child'
op|'('
name|'filename'
op|')'
op|'.'
name|'setContent'
op|'('
name|'content'
op|')'
newline|'\n'
name|'return'
name|'file'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getNextVersion
dedent|''
name|'def'
name|'test_getNextVersion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When calculating the next version to release when a release is\n        happening in the same year as the last release, the minor version\n        number is incremented.\n        """'
newline|'\n'
name|'now'
op|'='
name|'date'
op|'.'
name|'today'
op|'('
op|')'
newline|'\n'
name|'major'
op|'='
name|'now'
op|'.'
name|'year'
op|'-'
name|'VERSION_OFFSET'
newline|'\n'
name|'version'
op|'='
name|'Version'
op|'('
string|'"twisted"'
op|','
name|'major'
op|','
number|'9'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'getNextVersion'
op|'('
name|'version'
op|','
name|'now'
op|'='
name|'now'
op|')'
op|','
nl|'\n'
name|'Version'
op|'('
string|'"twisted"'
op|','
name|'major'
op|','
number|'10'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getNextVersionAfterYearChange
dedent|''
name|'def'
name|'test_getNextVersionAfterYearChange'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When calculating the next version to release when a release is\n        happening in a later year, the minor version number is reset to 0.\n        """'
newline|'\n'
name|'now'
op|'='
name|'date'
op|'.'
name|'today'
op|'('
op|')'
newline|'\n'
name|'major'
op|'='
name|'now'
op|'.'
name|'year'
op|'-'
name|'VERSION_OFFSET'
newline|'\n'
name|'version'
op|'='
name|'Version'
op|'('
string|'"twisted"'
op|','
name|'major'
op|'-'
number|'1'
op|','
number|'9'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'getNextVersion'
op|'('
name|'version'
op|','
name|'now'
op|'='
name|'now'
op|')'
op|','
nl|'\n'
name|'Version'
op|'('
string|'"twisted"'
op|','
name|'major'
op|','
number|'0'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_changeVersionInFile
dedent|''
name|'def'
name|'test_changeVersionInFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        _changeVersionInFile replaces the old version information in a file\n        with the given new version information.\n        """'
newline|'\n'
comment|'# The version numbers are arbitrary, the name is only kind of'
nl|'\n'
comment|'# arbitrary.'
nl|'\n'
name|'packageName'
op|'='
string|"'foo'"
newline|'\n'
name|'oldVersion'
op|'='
name|'Version'
op|'('
name|'packageName'
op|','
number|'2'
op|','
number|'5'
op|','
number|'0'
op|')'
newline|'\n'
name|'file'
op|'='
name|'self'
op|'.'
name|'makeFile'
op|'('
string|"'README'"
op|','
nl|'\n'
string|'"Hello and welcome to %s."'
op|'%'
name|'oldVersion'
op|'.'
name|'base'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'newVersion'
op|'='
name|'Version'
op|'('
name|'packageName'
op|','
number|'7'
op|','
number|'6'
op|','
number|'0'
op|')'
newline|'\n'
name|'_changeVersionInFile'
op|'('
name|'oldVersion'
op|','
name|'newVersion'
op|','
name|'file'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'file'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
nl|'\n'
string|'"Hello and welcome to %s."'
op|'%'
name|'newVersion'
op|'.'
name|'base'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_changeAllProjectVersions
dedent|''
name|'def'
name|'test_changeAllProjectVersions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{changeAllProjectVersions} changes all version numbers in _version.py\n        and README files for all projects as well as in the the top-level\n        README file.\n        """'
newline|'\n'
name|'root'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'root'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'structure'
op|'='
op|'{'
nl|'\n'
string|'"README"'
op|':'
string|'"Hi this is 1.0.0."'
op|','
nl|'\n'
string|'"twisted"'
op|':'
op|'{'
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
nl|'\n'
string|'"README"'
op|':'
string|'"Hi this is 1.0.0"'
op|'}'
op|','
nl|'\n'
string|'"_version.py"'
op|':'
nl|'\n'
name|'genVersion'
op|'('
string|'"twisted"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|')'
op|','
nl|'\n'
string|'"web"'
op|':'
op|'{'
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
nl|'\n'
string|'"README"'
op|':'
string|'"Hi this is 1.0.0"'
op|'}'
op|','
nl|'\n'
string|'"_version.py"'
op|':'
name|'genVersion'
op|'('
string|'"twisted.web"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|')'
nl|'\n'
op|'}'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'createStructure'
op|'('
name|'root'
op|','
name|'structure'
op|')'
newline|'\n'
name|'changeAllProjectVersions'
op|'('
name|'root'
op|','
name|'Version'
op|'('
string|'"lol"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'2'
op|')'
op|')'
newline|'\n'
name|'outStructure'
op|'='
op|'{'
nl|'\n'
string|'"README"'
op|':'
string|'"Hi this is 1.0.2."'
op|','
nl|'\n'
string|'"twisted"'
op|':'
op|'{'
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
nl|'\n'
string|'"README"'
op|':'
string|'"Hi this is 1.0.2"'
op|'}'
op|','
nl|'\n'
string|'"_version.py"'
op|':'
nl|'\n'
name|'genVersion'
op|'('
string|'"twisted"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'2'
op|')'
op|','
nl|'\n'
string|'"web"'
op|':'
op|'{'
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
nl|'\n'
string|'"README"'
op|':'
string|'"Hi this is 1.0.2"'
op|'}'
op|','
nl|'\n'
string|'"_version.py"'
op|':'
name|'genVersion'
op|'('
string|'"twisted.web"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'2'
op|')'
op|','
nl|'\n'
op|'}'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertStructure'
op|'('
name|'root'
op|','
name|'outStructure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProjectTest
dedent|''
dedent|''
name|'class'
name|'ProjectTest'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    There is a first-class representation of a project.\n    """'
newline|'\n'
nl|'\n'
DECL|member|assertProjectsEqual
name|'def'
name|'assertProjectsEqual'
op|'('
name|'self'
op|','
name|'observedProjects'
op|','
name|'expectedProjects'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that two lists of L{Project}s are equal.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'observedProjects'
op|')'
op|','
name|'len'
op|'('
name|'expectedProjects'
op|')'
op|')'
newline|'\n'
name|'observedProjects'
op|'='
name|'dsu'
op|'('
name|'observedProjects'
op|','
nl|'\n'
name|'key'
op|'='
name|'operator'
op|'.'
name|'attrgetter'
op|'('
string|"'directory'"
op|')'
op|')'
newline|'\n'
name|'expectedProjects'
op|'='
name|'dsu'
op|'('
name|'expectedProjects'
op|','
nl|'\n'
name|'key'
op|'='
name|'operator'
op|'.'
name|'attrgetter'
op|'('
string|"'directory'"
op|')'
op|')'
newline|'\n'
name|'for'
name|'observed'
op|','
name|'expected'
name|'in'
name|'zip'
op|'('
name|'observedProjects'
op|','
name|'expectedProjects'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'observed'
op|'.'
name|'directory'
op|','
name|'expected'
op|'.'
name|'directory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeProject
dedent|''
dedent|''
name|'def'
name|'makeProject'
op|'('
name|'self'
op|','
name|'version'
op|','
name|'baseDirectory'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a Twisted-style project in the given base directory.\n\n        @param baseDirectory: The directory to create files in\n            (as a L{FilePath).\n        @param version: The version information for the project.\n        @return: L{Project} pointing to the created project.\n        """'
newline|'\n'
name|'if'
name|'baseDirectory'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'baseDirectory'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'baseDirectory'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
dedent|''
name|'segments'
op|'='
name|'version'
op|'.'
name|'package'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'directory'
op|'='
name|'baseDirectory'
newline|'\n'
name|'for'
name|'segment'
name|'in'
name|'segments'
op|':'
newline|'\n'
indent|'            '
name|'directory'
op|'='
name|'directory'
op|'.'
name|'child'
op|'('
name|'segment'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'directory'
op|'.'
name|'exists'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'directory'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
dedent|''
name|'directory'
op|'.'
name|'child'
op|'('
string|"'__init__.py'"
op|')'
op|'.'
name|'setContent'
op|'('
string|"''"
op|')'
newline|'\n'
dedent|''
name|'directory'
op|'.'
name|'child'
op|'('
string|"'topfiles'"
op|')'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'directory'
op|'.'
name|'child'
op|'('
string|"'topfiles'"
op|')'
op|'.'
name|'child'
op|'('
string|"'README'"
op|')'
op|'.'
name|'setContent'
op|'('
name|'version'
op|'.'
name|'base'
op|'('
op|')'
op|')'
newline|'\n'
name|'replaceProjectVersion'
op|'('
nl|'\n'
name|'directory'
op|'.'
name|'child'
op|'('
string|"'_version.py'"
op|')'
op|'.'
name|'path'
op|','
name|'version'
op|')'
newline|'\n'
name|'return'
name|'Project'
op|'('
name|'directory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeProjects
dedent|''
name|'def'
name|'makeProjects'
op|'('
name|'self'
op|','
op|'*'
name|'versions'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a series of projects underneath a temporary base directory.\n\n        @return: A L{FilePath} for the base directory.\n        """'
newline|'\n'
name|'baseDirectory'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'baseDirectory'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'for'
name|'version'
name|'in'
name|'versions'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'makeProject'
op|'('
name|'version'
op|','
name|'baseDirectory'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'baseDirectory'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getVersion
dedent|''
name|'def'
name|'test_getVersion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Project objects know their version.\n        """'
newline|'\n'
name|'version'
op|'='
name|'Version'
op|'('
string|"'foo'"
op|','
number|'2'
op|','
number|'1'
op|','
number|'0'
op|')'
newline|'\n'
name|'project'
op|'='
name|'self'
op|'.'
name|'makeProject'
op|'('
name|'version'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'project'
op|'.'
name|'getVersion'
op|'('
op|')'
op|','
name|'version'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_updateVersion
dedent|''
name|'def'
name|'test_updateVersion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Project objects know how to update the version numbers in those\n        projects.\n        """'
newline|'\n'
name|'project'
op|'='
name|'self'
op|'.'
name|'makeProject'
op|'('
name|'Version'
op|'('
string|'"bar"'
op|','
number|'2'
op|','
number|'1'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'newVersion'
op|'='
name|'Version'
op|'('
string|'"bar"'
op|','
number|'3'
op|','
number|'2'
op|','
number|'9'
op|')'
newline|'\n'
name|'project'
op|'.'
name|'updateVersion'
op|'('
name|'newVersion'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'project'
op|'.'
name|'getVersion'
op|'('
op|')'
op|','
name|'newVersion'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'project'
op|'.'
name|'directory'
op|'.'
name|'child'
op|'('
string|'"topfiles"'
op|')'
op|'.'
name|'child'
op|'('
string|'"README"'
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
nl|'\n'
string|'"3.2.9"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_repr
dedent|''
name|'def'
name|'test_repr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The representation of a Project is Project(directory).\n        """'
newline|'\n'
name|'foo'
op|'='
name|'Project'
op|'('
name|'FilePath'
op|'('
string|"'bar'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'foo'
op|')'
op|','
string|"'Project(%r)'"
op|'%'
op|'('
name|'foo'
op|'.'
name|'directory'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_findTwistedStyleProjects
dedent|''
name|'def'
name|'test_findTwistedStyleProjects'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        findTwistedStyleProjects finds all projects underneath a particular\n        directory. A \'project\' is defined by the existence of a \'topfiles\'\n        directory and is returned as a Project object.\n        """'
newline|'\n'
name|'baseDirectory'
op|'='
name|'self'
op|'.'
name|'makeProjects'
op|'('
nl|'\n'
name|'Version'
op|'('
string|"'foo'"
op|','
number|'2'
op|','
number|'3'
op|','
number|'0'
op|')'
op|','
name|'Version'
op|'('
string|"'foo.bar'"
op|','
number|'0'
op|','
number|'7'
op|','
number|'4'
op|')'
op|')'
newline|'\n'
name|'projects'
op|'='
name|'findTwistedProjects'
op|'('
name|'baseDirectory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertProjectsEqual'
op|'('
nl|'\n'
name|'projects'
op|','
nl|'\n'
op|'['
name|'Project'
op|'('
name|'baseDirectory'
op|'.'
name|'child'
op|'('
string|"'foo'"
op|')'
op|')'
op|','
nl|'\n'
name|'Project'
op|'('
name|'baseDirectory'
op|'.'
name|'child'
op|'('
string|"'foo'"
op|')'
op|'.'
name|'child'
op|'('
string|"'bar'"
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_updateTwistedVersionInformation
dedent|''
name|'def'
name|'test_updateTwistedVersionInformation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Update Twisted version information in the top-level project and all of\n        the subprojects.\n        """'
newline|'\n'
name|'baseDirectory'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'baseDirectory'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'now'
op|'='
name|'date'
op|'.'
name|'today'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'projectName'
op|'='
string|"'foo'"
newline|'\n'
name|'oldVersion'
op|'='
name|'Version'
op|'('
name|'projectName'
op|','
number|'2'
op|','
number|'5'
op|','
number|'0'
op|')'
newline|'\n'
name|'newVersion'
op|'='
name|'getNextVersion'
op|'('
name|'oldVersion'
op|','
name|'now'
op|'='
name|'now'
op|')'
newline|'\n'
nl|'\n'
name|'project'
op|'='
name|'self'
op|'.'
name|'makeProject'
op|'('
name|'oldVersion'
op|','
name|'baseDirectory'
op|')'
newline|'\n'
nl|'\n'
name|'updateTwistedVersionInformation'
op|'('
name|'baseDirectory'
op|','
name|'now'
op|'='
name|'now'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'project'
op|'.'
name|'getVersion'
op|'('
op|')'
op|','
name|'newVersion'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'project'
op|'.'
name|'directory'
op|'.'
name|'child'
op|'('
string|"'topfiles'"
op|')'
op|'.'
name|'child'
op|'('
string|"'README'"
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
nl|'\n'
name|'newVersion'
op|'.'
name|'base'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UtilityTest
dedent|''
dedent|''
name|'class'
name|'UtilityTest'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for various utility functions for releasing.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_chdir
name|'def'
name|'test_chdir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the runChdirSafe is actually safe, i.e., it still\n        changes back to the original directory even if an error is\n        raised.\n        """'
newline|'\n'
name|'cwd'
op|'='
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
newline|'\n'
DECL|function|chAndBreak
name|'def'
name|'chAndBreak'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'mkdir'
op|'('
string|"'releaseCh'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chdir'
op|'('
string|"'releaseCh'"
op|')'
newline|'\n'
number|'1'
op|'/'
number|'0'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ZeroDivisionError'
op|','
nl|'\n'
name|'release'
op|'.'
name|'runChdirSafe'
op|','
name|'chAndBreak'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cwd'
op|','
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_replaceInFile
dedent|''
name|'def'
name|'test_replaceInFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{replaceInFile} replaces data in a file based on a dict. A key from\n        the dict that is found in the file is replaced with the corresponding\n        value.\n        """'
newline|'\n'
name|'in_'
op|'='
string|"'foo\\nhey hey $VER\\nbar\\n'"
newline|'\n'
name|'outf'
op|'='
name|'open'
op|'('
string|"'release.replace'"
op|','
string|"'w'"
op|')'
newline|'\n'
name|'outf'
op|'.'
name|'write'
op|'('
name|'in_'
op|')'
newline|'\n'
name|'outf'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
name|'in_'
op|'.'
name|'replace'
op|'('
string|"'$VER'"
op|','
string|"'2.0.0'"
op|')'
newline|'\n'
name|'replaceInFile'
op|'('
string|"'release.replace'"
op|','
op|'{'
string|"'$VER'"
op|':'
string|"'2.0.0'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'open'
op|'('
string|"'release.replace'"
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
name|'expected'
op|'='
name|'expected'
op|'.'
name|'replace'
op|'('
string|"'2.0.0'"
op|','
string|"'3.0.0'"
op|')'
newline|'\n'
name|'replaceInFile'
op|'('
string|"'release.replace'"
op|','
op|'{'
string|"'2.0.0'"
op|':'
string|"'3.0.0'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'open'
op|'('
string|"'release.replace'"
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|VersionWritingTest
dedent|''
dedent|''
name|'class'
name|'VersionWritingTest'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{replaceProjectVersion}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_replaceProjectVersion
name|'def'
name|'test_replaceProjectVersion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{replaceProjectVersion} writes a Python file that defines a\n        C{version} variable that corresponds to the given name and version\n        number.\n        """'
newline|'\n'
name|'replaceProjectVersion'
op|'('
string|'"test_project"'
op|','
nl|'\n'
name|'Version'
op|'('
string|'"twisted.test_project"'
op|','
number|'0'
op|','
number|'82'
op|','
number|'7'
op|')'
op|')'
newline|'\n'
name|'ns'
op|'='
op|'{'
string|"'__name___'"
op|':'
string|"'twisted.test_project'"
op|'}'
newline|'\n'
name|'execfile'
op|'('
string|'"test_project"'
op|','
name|'ns'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ns'
op|'['
string|'"version"'
op|']'
op|'.'
name|'base'
op|'('
op|')'
op|','
string|'"0.82.7"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_replaceProjectVersionWithPrerelease
dedent|''
name|'def'
name|'test_replaceProjectVersionWithPrerelease'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{replaceProjectVersion} will write a Version instantiation that\n        includes a prerelease parameter if necessary.\n        """'
newline|'\n'
name|'replaceProjectVersion'
op|'('
string|'"test_project"'
op|','
nl|'\n'
name|'Version'
op|'('
string|'"twisted.test_project"'
op|','
number|'0'
op|','
number|'82'
op|','
number|'7'
op|','
nl|'\n'
name|'prerelease'
op|'='
number|'8'
op|')'
op|')'
newline|'\n'
name|'ns'
op|'='
op|'{'
string|"'__name___'"
op|':'
string|"'twisted.test_project'"
op|'}'
newline|'\n'
name|'execfile'
op|'('
string|'"test_project"'
op|','
name|'ns'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ns'
op|'['
string|'"version"'
op|']'
op|'.'
name|'base'
op|'('
op|')'
op|','
string|'"0.82.7pre8"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BuilderTestsMixin
dedent|''
dedent|''
name|'class'
name|'BuilderTestsMixin'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mixin class which provides various methods for creating sample Lore input\n    and output.\n\n    @cvar template: The lore template that will be used to prepare sample\n    output.\n    @type template: C{str}\n\n    @ivar docCounter: A counter which is incremented every time input is\n        generated and which is included in the documents.\n    @type docCounter: C{int}\n    """'
newline|'\n'
name|'template'
op|'='
string|'\'\'\'\n    <html>\n    <head><title>Yo:</title></head>\n    <body>\n    <div class="body" />\n    <a href="index.html">Index</a>\n    <span class="version">Version: </span>\n    </body>\n    </html>\n    \'\'\''
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initialize the doc counter which ensures documents are unique.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'docCounter'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|assertXMLEqual
dedent|''
name|'def'
name|'assertXMLEqual'
op|'('
name|'self'
op|','
name|'first'
op|','
name|'second'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that two strings represent the same XML document.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'dom'
op|'.'
name|'parseString'
op|'('
name|'first'
op|')'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
nl|'\n'
name|'dom'
op|'.'
name|'parseString'
op|'('
name|'second'
op|')'
op|'.'
name|'toxml'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getArbitraryOutput
dedent|''
name|'def'
name|'getArbitraryOutput'
op|'('
name|'self'
op|','
name|'version'
op|','
name|'counter'
op|','
name|'prefix'
op|'='
string|'""'
op|','
name|'apiBaseURL'
op|'='
string|'"%s"'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the correct HTML output for the arbitrary input returned by\n        L{getArbitraryLoreInput} for the given parameters.\n\n        @param version: The version string to include in the output.\n        @type version: C{str}\n        @param counter: A counter to include in the output.\n        @type counter: C{int}\n        """'
newline|'\n'
name|'document'
op|'='
string|'"""\\\n<?xml version="1.0"?><html>\n    <head><title>Yo:Hi! Title: %(count)d</title></head>\n    <body>\n    <div class="content">Hi! %(count)d<div class="API"><a href="%(foobarLink)s" title="foobar">foobar</a></div></div>\n    <a href="%(prefix)sindex.html">Index</a>\n    <span class="version">Version: %(version)s</span>\n    </body>\n    </html>"""'
newline|'\n'
comment|'# Try to normalize irrelevant whitespace.'
nl|'\n'
name|'return'
name|'dom'
op|'.'
name|'parseString'
op|'('
nl|'\n'
name|'document'
op|'%'
op|'{'
string|'"count"'
op|':'
name|'counter'
op|','
string|'"prefix"'
op|':'
name|'prefix'
op|','
nl|'\n'
string|'"version"'
op|':'
name|'version'
op|','
nl|'\n'
string|'"foobarLink"'
op|':'
name|'apiBaseURL'
op|'%'
op|'('
string|'"foobar"'
op|','
op|')'
op|'}'
op|')'
op|'.'
name|'toxml'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getArbitraryLoreInput
dedent|''
name|'def'
name|'getArbitraryLoreInput'
op|'('
name|'self'
op|','
name|'counter'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get an arbitrary, unique (for this test case) string of lore input.\n\n        @param counter: A counter to include in the input.\n        @type counter: C{int}\n        """'
newline|'\n'
name|'template'
op|'='
op|'('
nl|'\n'
string|"'<html>'"
nl|'\n'
string|"'<head><title>Hi! Title: %(count)s</title></head>'"
nl|'\n'
string|"'<body>'"
nl|'\n'
string|"'Hi! %(count)s'"
nl|'\n'
string|'\'<div class="API">foobar</div>\''
nl|'\n'
string|"'</body>'"
nl|'\n'
string|"'</html>'"
op|')'
newline|'\n'
name|'return'
name|'template'
op|'%'
op|'{'
string|'"count"'
op|':'
name|'counter'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getArbitraryLoreInputAndOutput
dedent|''
name|'def'
name|'getArbitraryLoreInputAndOutput'
op|'('
name|'self'
op|','
name|'version'
op|','
name|'prefix'
op|'='
string|'""'
op|','
nl|'\n'
name|'apiBaseURL'
op|'='
string|'"%s"'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get an input document along with expected output for lore run on that\n        output document, assuming an appropriately-specified C{self.template}.\n\n        @param version: A version string to include in the input and output.\n        @type version: C{str}\n        @param prefix: The prefix to include in the link to the index.\n        @type prefix: C{str}\n\n        @return: A two-tuple of input and expected output.\n        @rtype: C{(str, str)}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'docCounter'
op|'+='
number|'1'
newline|'\n'
name|'return'
op|'('
name|'self'
op|'.'
name|'getArbitraryLoreInput'
op|'('
name|'self'
op|'.'
name|'docCounter'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'getArbitraryOutput'
op|'('
name|'version'
op|','
name|'self'
op|'.'
name|'docCounter'
op|','
nl|'\n'
name|'prefix'
op|'='
name|'prefix'
op|','
name|'apiBaseURL'
op|'='
name|'apiBaseURL'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getArbitraryManInput
dedent|''
name|'def'
name|'getArbitraryManInput'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get an arbitrary man page content.\n        """'
newline|'\n'
name|'return'
string|'""".TH MANHOLE "1" "August 2001" "" ""\n.SH NAME\nmanhole \\- Connect to a Twisted Manhole service\n.SH SYNOPSIS\n.B manhole\n.SH DESCRIPTION\nmanhole is a GTK interface to Twisted Manhole services. You can execute python\ncode as if at an interactive Python console inside a running Twisted process\nwith this."""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|getArbitraryManLoreOutput
dedent|''
name|'def'
name|'getArbitraryManLoreOutput'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get an arbitrary lore input document which represents man-to-lore\n        output based on the man page returned from L{getArbitraryManInput}\n        """'
newline|'\n'
name|'return'
string|'"""\\\n<?xml version="1.0"?>\n<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\n    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n<html><head>\n<title>MANHOLE.1</title></head>\n<body>\n\n<h1>MANHOLE.1</h1>\n\n<h2>NAME</h2>\n\n<p>manhole - Connect to a Twisted Manhole service\n</p>\n\n<h2>SYNOPSIS</h2>\n\n<p><strong>manhole</strong> </p>\n\n<h2>DESCRIPTION</h2>\n\n<p>manhole is a GTK interface to Twisted Manhole services. You can execute python\ncode as if at an interactive Python console inside a running Twisted process\nwith this.</p>\n\n</body>\n</html>\n"""'
newline|'\n'
nl|'\n'
DECL|function|getArbitraryManHTMLOutput
dedent|''
name|'def'
name|'getArbitraryManHTMLOutput'
op|'('
name|'self'
op|','
name|'version'
op|','
name|'prefix'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get an arbitrary lore output document which represents the lore HTML\n        output based on the input document returned from\n        L{getArbitraryManLoreOutput}.\n\n        @param version: A version string to include in the document.\n        @type version: C{str}\n        @param prefix: The prefix to include in the link to the index.\n        @type prefix: C{str}\n        """'
newline|'\n'
comment|'# Try to normalize the XML a little bit.'
nl|'\n'
name|'return'
name|'dom'
op|'.'
name|'parseString'
op|'('
string|'"""\\\n<?xml version="1.0" ?><html>\n    <head><title>Yo:MANHOLE.1</title></head>\n    <body>\n    <div class="content">\n\n<span/>\n\n<h2>NAME<a name="auto0"/></h2>\n\n<p>manhole - Connect to a Twisted Manhole service\n</p>\n\n<h2>SYNOPSIS<a name="auto1"/></h2>\n\n<p><strong>manhole</strong> </p>\n\n<h2>DESCRIPTION<a name="auto2"/></h2>\n\n<p>manhole is a GTK interface to Twisted Manhole services. You can execute python\ncode as if at an interactive Python console inside a running Twisted process\nwith this.</p>\n\n</div>\n    <a href="%(prefix)sindex.html">Index</a>\n    <span class="version">Version: %(version)s</span>\n    </body>\n    </html>"""'
op|'%'
op|'{'
nl|'\n'
string|"'prefix'"
op|':'
name|'prefix'
op|','
string|"'version'"
op|':'
name|'version'
op|'}'
op|')'
op|'.'
name|'toxml'
op|'('
string|'"utf-8"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DocBuilderTestCase
dedent|''
dedent|''
name|'class'
name|'DocBuilderTestCase'
op|'('
name|'TestCase'
op|','
name|'BuilderTestsMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{DocBuilder}.\n\n    Note for future maintainers: The exact byte equality assertions throughout\n    this suite may need to be updated due to minor differences in lore. They\n    should not be taken to mean that Lore must maintain the same byte format\n    forever. Feel free to update the tests when Lore changes, but please be\n    careful.\n    """'
newline|'\n'
DECL|variable|skip
name|'skip'
op|'='
name|'loreSkip'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set up a few instance variables that will be useful.\n\n        @ivar builder: A plain L{DocBuilder}.\n        @ivar docCounter: An integer to be used as a counter by the\n            C{getArbitrary...} methods.\n        @ivar howtoDir: A L{FilePath} representing a directory to be used for\n            containing Lore documents.\n        @ivar templateFile: A L{FilePath} representing a file with\n            C{self.template} as its content.\n        """'
newline|'\n'
name|'BuilderTestsMixin'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'builder'
op|'='
name|'DocBuilder'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'howtoDir'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'templateFile'
op|'='
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"template.tpl"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'templateFile'
op|'.'
name|'setContent'
op|'('
name|'self'
op|'.'
name|'template'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_build
dedent|''
name|'def'
name|'test_build'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{DocBuilder} runs lore on all .xhtml files within a directory.\n        """'
newline|'\n'
name|'version'
op|'='
string|'"1.2.3"'
newline|'\n'
name|'input1'
op|','
name|'output1'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
name|'version'
op|')'
newline|'\n'
name|'input2'
op|','
name|'output2'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
name|'version'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"one.xhtml"'
op|')'
op|'.'
name|'setContent'
op|'('
name|'input1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"two.xhtml"'
op|')'
op|'.'
name|'setContent'
op|'('
name|'input2'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'builder'
op|'.'
name|'build'
op|'('
name|'version'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|','
nl|'\n'
name|'self'
op|'.'
name|'templateFile'
op|')'
newline|'\n'
name|'out1'
op|'='
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|"'one.html'"
op|')'
newline|'\n'
name|'out2'
op|'='
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|"'two.html'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertXMLEqual'
op|'('
name|'out1'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
name|'output1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertXMLEqual'
op|'('
name|'out2'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
name|'output2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noDocumentsFound
dedent|''
name|'def'
name|'test_noDocumentsFound'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{build} method raises L{NoDocumentsFound} if there are no\n        .xhtml files in the given directory.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'NoDocumentsFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'builder'
op|'.'
name|'build'
op|','
string|'"1.2.3"'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|','
nl|'\n'
name|'self'
op|'.'
name|'templateFile'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_parentDocumentLinking
dedent|''
name|'def'
name|'test_parentDocumentLinking'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{DocBuilder} generates correct links from documents to\n        template-generated links like stylesheets and index backreferences.\n        """'
newline|'\n'
name|'input'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInput'
op|'('
number|'0'
op|')'
newline|'\n'
name|'tutoDir'
op|'='
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"tutorial"'
op|')'
newline|'\n'
name|'tutoDir'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'tutoDir'
op|'.'
name|'child'
op|'('
string|'"child.xhtml"'
op|')'
op|'.'
name|'setContent'
op|'('
name|'input'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'builder'
op|'.'
name|'build'
op|'('
string|'"1.2.3"'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|','
name|'tutoDir'
op|','
name|'self'
op|'.'
name|'templateFile'
op|')'
newline|'\n'
name|'outFile'
op|'='
name|'tutoDir'
op|'.'
name|'child'
op|'('
string|"'child.html'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'\'<a href="../index.html">Index</a>\''
op|','
nl|'\n'
name|'outFile'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_siblingDirectoryDocumentLinking
dedent|''
name|'def'
name|'test_siblingDirectoryDocumentLinking'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        It is necessary to generate documentation in a directory foo/bar where\n        stylesheet and indexes are located in foo/baz. Such resources should be\n        appropriately linked to.\n        """'
newline|'\n'
name|'input'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInput'
op|'('
number|'0'
op|')'
newline|'\n'
name|'resourceDir'
op|'='
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"resources"'
op|')'
newline|'\n'
name|'docDir'
op|'='
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"docs"'
op|')'
newline|'\n'
name|'docDir'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'docDir'
op|'.'
name|'child'
op|'('
string|'"child.xhtml"'
op|')'
op|'.'
name|'setContent'
op|'('
name|'input'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'builder'
op|'.'
name|'build'
op|'('
string|'"1.2.3"'
op|','
name|'resourceDir'
op|','
name|'docDir'
op|','
name|'self'
op|'.'
name|'templateFile'
op|')'
newline|'\n'
name|'outFile'
op|'='
name|'docDir'
op|'.'
name|'child'
op|'('
string|"'child.html'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'\'<a href="../resources/index.html">Index</a>\''
op|','
nl|'\n'
name|'outFile'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_apiLinking
dedent|''
name|'def'
name|'test_apiLinking'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{DocBuilder} generates correct links from documents to API\n        documentation.\n        """'
newline|'\n'
name|'version'
op|'='
string|'"1.2.3"'
newline|'\n'
name|'input'
op|','
name|'output'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
name|'version'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"one.xhtml"'
op|')'
op|'.'
name|'setContent'
op|'('
name|'input'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'builder'
op|'.'
name|'build'
op|'('
name|'version'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|','
nl|'\n'
name|'self'
op|'.'
name|'templateFile'
op|','
string|'"scheme:apilinks/%s.ext"'
op|')'
newline|'\n'
name|'out'
op|'='
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|"'one.html'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
nl|'\n'
string|'\'<a href="scheme:apilinks/foobar.ext" title="foobar">foobar</a>\''
op|','
nl|'\n'
name|'out'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_deleteInput
dedent|''
name|'def'
name|'test_deleteInput'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DocBuilder.build} can be instructed to delete the input files after\n        generating the output based on them.\n        """'
newline|'\n'
name|'input1'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInput'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"one.xhtml"'
op|')'
op|'.'
name|'setContent'
op|'('
name|'input1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'builder'
op|'.'
name|'build'
op|'('
string|'"whatever"'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|','
nl|'\n'
name|'self'
op|'.'
name|'templateFile'
op|','
name|'deleteInput'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|"'one.html'"
op|')'
op|'.'
name|'exists'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|"'one.xhtml'"
op|')'
op|'.'
name|'exists'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_doNotDeleteInput
dedent|''
name|'def'
name|'test_doNotDeleteInput'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Input will not be deleted by default.\n        """'
newline|'\n'
name|'input1'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInput'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"one.xhtml"'
op|')'
op|'.'
name|'setContent'
op|'('
name|'input1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'builder'
op|'.'
name|'build'
op|'('
string|'"whatever"'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|','
nl|'\n'
name|'self'
op|'.'
name|'templateFile'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|"'one.html'"
op|')'
op|'.'
name|'exists'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|"'one.xhtml'"
op|')'
op|'.'
name|'exists'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getLinkrelToSameDirectory
dedent|''
name|'def'
name|'test_getLinkrelToSameDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the doc and resource directories are the same, the linkrel should be\n        an empty string.\n        """'
newline|'\n'
name|'linkrel'
op|'='
name|'self'
op|'.'
name|'builder'
op|'.'
name|'getLinkrel'
op|'('
name|'FilePath'
op|'('
string|'"/foo/bar"'
op|')'
op|','
nl|'\n'
name|'FilePath'
op|'('
string|'"/foo/bar"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'linkrel'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getLinkrelToParentDirectory
dedent|''
name|'def'
name|'test_getLinkrelToParentDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the doc directory is a child of the resource directory, the linkrel\n        should make use of \'..\'.\n        """'
newline|'\n'
name|'linkrel'
op|'='
name|'self'
op|'.'
name|'builder'
op|'.'
name|'getLinkrel'
op|'('
name|'FilePath'
op|'('
string|'"/foo"'
op|')'
op|','
nl|'\n'
name|'FilePath'
op|'('
string|'"/foo/bar"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'linkrel'
op|','
string|'"../"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getLinkrelToSibling
dedent|''
name|'def'
name|'test_getLinkrelToSibling'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the doc directory is a sibling of the resource directory, the\n        linkrel should make use of \'..\' and a named segment.\n        """'
newline|'\n'
name|'linkrel'
op|'='
name|'self'
op|'.'
name|'builder'
op|'.'
name|'getLinkrel'
op|'('
name|'FilePath'
op|'('
string|'"/foo/howto"'
op|')'
op|','
nl|'\n'
name|'FilePath'
op|'('
string|'"/foo/examples"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'linkrel'
op|','
string|'"../howto/"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getLinkrelToUncle
dedent|''
name|'def'
name|'test_getLinkrelToUncle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the doc directory is a sibling of the parent of the resource\n        directory, the linkrel should make use of multiple \'..\'s and a named\n        segment.\n        """'
newline|'\n'
name|'linkrel'
op|'='
name|'self'
op|'.'
name|'builder'
op|'.'
name|'getLinkrel'
op|'('
name|'FilePath'
op|'('
string|'"/foo/howto"'
op|')'
op|','
nl|'\n'
name|'FilePath'
op|'('
string|'"/foo/examples/quotes"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'linkrel'
op|','
string|'"../../howto/"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|APIBuilderTestCase
dedent|''
dedent|''
name|'class'
name|'APIBuilderTestCase'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{APIBuilder}.\n    """'
newline|'\n'
DECL|variable|skip
name|'skip'
op|'='
name|'pydoctorSkip'
newline|'\n'
nl|'\n'
DECL|member|test_build
name|'def'
name|'test_build'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{APIBuilder.build} writes an index file which includes the name of the\n        project specified.\n        """'
newline|'\n'
name|'stdout'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'sys'
op|','
string|"'stdout'"
op|','
name|'stdout'
op|')'
newline|'\n'
nl|'\n'
name|'projectName'
op|'='
string|'"Foobar"'
newline|'\n'
name|'packageName'
op|'='
string|'"quux"'
newline|'\n'
name|'projectURL'
op|'='
string|'"scheme:project"'
newline|'\n'
name|'sourceURL'
op|'='
string|'"scheme:source"'
newline|'\n'
name|'docstring'
op|'='
string|'"text in docstring"'
newline|'\n'
name|'privateDocstring'
op|'='
string|'"should also appear in output"'
newline|'\n'
nl|'\n'
name|'inputPath'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
op|'.'
name|'child'
op|'('
name|'packageName'
op|')'
newline|'\n'
name|'inputPath'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'inputPath'
op|'.'
name|'child'
op|'('
string|'"__init__.py"'
op|')'
op|'.'
name|'setContent'
op|'('
nl|'\n'
string|'"def foo():\\n"'
nl|'\n'
string|'"    \'%s\'\\n"'
nl|'\n'
string|'"def _bar():\\n"'
nl|'\n'
string|'"    \'%s\'"'
op|'%'
op|'('
name|'docstring'
op|','
name|'privateDocstring'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'outputPath'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'outputPath'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'builder'
op|'='
name|'APIBuilder'
op|'('
op|')'
newline|'\n'
name|'builder'
op|'.'
name|'build'
op|'('
name|'projectName'
op|','
name|'projectURL'
op|','
name|'sourceURL'
op|','
name|'inputPath'
op|','
name|'outputPath'
op|')'
newline|'\n'
nl|'\n'
name|'indexPath'
op|'='
name|'outputPath'
op|'.'
name|'child'
op|'('
string|'"index.html"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'indexPath'
op|'.'
name|'exists'
op|'('
op|')'
op|','
nl|'\n'
string|'"API index %r did not exist."'
op|'%'
op|'('
name|'outputPath'
op|'.'
name|'path'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
nl|'\n'
string|'\'<a href="%s">%s</a>\''
op|'%'
op|'('
name|'projectURL'
op|','
name|'projectName'
op|')'
op|','
nl|'\n'
name|'indexPath'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
nl|'\n'
string|'"Project name/location not in file contents."'
op|')'
newline|'\n'
nl|'\n'
name|'quuxPath'
op|'='
name|'outputPath'
op|'.'
name|'child'
op|'('
string|'"quux.html"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'quuxPath'
op|'.'
name|'exists'
op|'('
op|')'
op|','
nl|'\n'
string|'"Package documentation file %r did not exist."'
op|'%'
op|'('
name|'quuxPath'
op|'.'
name|'path'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
nl|'\n'
name|'docstring'
op|','
name|'quuxPath'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
nl|'\n'
string|'"Docstring not in package documentation file."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
nl|'\n'
string|'\'<a href="%s/%s">View Source</a>\''
op|'%'
op|'('
name|'sourceURL'
op|','
name|'packageName'
op|')'
op|','
nl|'\n'
name|'quuxPath'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
nl|'\n'
string|'\'<a href="%s/%s/__init__.py#L1" class="functionSourceLink">\''
op|'%'
op|'('
nl|'\n'
name|'sourceURL'
op|','
name|'packageName'
op|')'
op|','
nl|'\n'
name|'quuxPath'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'privateDocstring'
op|','
name|'quuxPath'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# There should also be a page for the foo function in quux.'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'quuxPath'
op|'.'
name|'sibling'
op|'('
string|"'quux.foo.html'"
op|')'
op|'.'
name|'exists'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'stdout'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildWithPolicy
dedent|''
name|'def'
name|'test_buildWithPolicy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BuildAPIDocsScript.buildAPIDocs} builds the API docs with values\n        appropriate for the Twisted project.\n        """'
newline|'\n'
name|'stdout'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'sys'
op|','
string|"'stdout'"
op|','
name|'stdout'
op|')'
newline|'\n'
name|'docstring'
op|'='
string|'"text in docstring"'
newline|'\n'
nl|'\n'
name|'projectRoot'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'packagePath'
op|'='
name|'projectRoot'
op|'.'
name|'child'
op|'('
string|'"twisted"'
op|')'
newline|'\n'
name|'packagePath'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'packagePath'
op|'.'
name|'child'
op|'('
string|'"__init__.py"'
op|')'
op|'.'
name|'setContent'
op|'('
nl|'\n'
string|'"def foo():\\n"'
nl|'\n'
string|'"    \'%s\'\\n"'
op|'%'
op|'('
name|'docstring'
op|','
op|')'
op|')'
newline|'\n'
name|'packagePath'
op|'.'
name|'child'
op|'('
string|'"_version.py"'
op|')'
op|'.'
name|'setContent'
op|'('
nl|'\n'
name|'genVersion'
op|'('
string|'"twisted"'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'outputPath'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'script'
op|'='
name|'BuildAPIDocsScript'
op|'('
op|')'
newline|'\n'
name|'script'
op|'.'
name|'buildAPIDocs'
op|'('
name|'projectRoot'
op|','
name|'outputPath'
op|')'
newline|'\n'
nl|'\n'
name|'indexPath'
op|'='
name|'outputPath'
op|'.'
name|'child'
op|'('
string|'"index.html"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'indexPath'
op|'.'
name|'exists'
op|'('
op|')'
op|','
nl|'\n'
string|'"API index %r did not exist."'
op|'%'
op|'('
name|'outputPath'
op|'.'
name|'path'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
nl|'\n'
string|'\'<a href="http://twistedmatrix.com/">Twisted</a>\''
op|','
nl|'\n'
name|'indexPath'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
nl|'\n'
string|'"Project name/location not in file contents."'
op|')'
newline|'\n'
nl|'\n'
name|'twistedPath'
op|'='
name|'outputPath'
op|'.'
name|'child'
op|'('
string|'"twisted.html"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'twistedPath'
op|'.'
name|'exists'
op|'('
op|')'
op|','
nl|'\n'
string|'"Package documentation file %r did not exist."'
nl|'\n'
op|'%'
op|'('
name|'twistedPath'
op|'.'
name|'path'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
nl|'\n'
name|'docstring'
op|','
name|'twistedPath'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
nl|'\n'
string|'"Docstring not in package documentation file."'
op|')'
newline|'\n'
comment|'#Here we check that it figured out the correct version based on the'
nl|'\n'
comment|'#source code.'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
nl|'\n'
string|'\'<a href="http://twistedmatrix.com/trac/browser/tags/releases/\''
nl|'\n'
string|'\'twisted-1.0.0/twisted">View Source</a>\''
op|','
nl|'\n'
name|'twistedPath'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'stdout'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_apiBuilderScriptMainRequiresTwoArguments
dedent|''
name|'def'
name|'test_apiBuilderScriptMainRequiresTwoArguments'
op|'('
name|'self'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\n        SystemExit is raised when the incorrect number of command line\n        arguments are passed to the API building script.\n        """'
newline|'\n'
name|'script'
op|'='
name|'BuildAPIDocsScript'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'script'
op|'.'
name|'main'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'script'
op|'.'
name|'main'
op|','
op|'['
string|'"foo"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'script'
op|'.'
name|'main'
op|','
op|'['
string|'"foo"'
op|','
string|'"bar"'
op|','
string|'"baz"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_apiBuilderScriptMain
dedent|''
name|'def'
name|'test_apiBuilderScriptMain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The API building script invokes the same code that\n        L{test_buildWithPolicy} tests.\n        """'
newline|'\n'
name|'script'
op|'='
name|'BuildAPIDocsScript'
op|'('
op|')'
newline|'\n'
name|'calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'script'
op|'.'
name|'buildAPIDocs'
op|'='
name|'lambda'
name|'a'
op|','
name|'b'
op|':'
name|'calls'
op|'.'
name|'append'
op|'('
op|'('
name|'a'
op|','
name|'b'
op|')'
op|')'
newline|'\n'
name|'script'
op|'.'
name|'main'
op|'('
op|'['
string|'"hello"'
op|','
string|'"there"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'calls'
op|','
op|'['
op|'('
name|'FilePath'
op|'('
string|'"hello"'
op|')'
op|','
name|'FilePath'
op|'('
string|'"there"'
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ManBuilderTestCase
dedent|''
dedent|''
name|'class'
name|'ManBuilderTestCase'
op|'('
name|'TestCase'
op|','
name|'BuilderTestsMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{ManBuilder}.\n    """'
newline|'\n'
DECL|variable|skip
name|'skip'
op|'='
name|'loreSkip'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set up a few instance variables that will be useful.\n\n        @ivar builder: A plain L{ManBuilder}.\n        @ivar manDir: A L{FilePath} representing a directory to be used for\n            containing man pages.\n        """'
newline|'\n'
name|'BuilderTestsMixin'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'builder'
op|'='
name|'ManBuilder'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'manDir'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'manDir'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noDocumentsFound
dedent|''
name|'def'
name|'test_noDocumentsFound'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ManBuilder.build} raises L{NoDocumentsFound} if there are no\n        .1 files in the given directory.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NoDocumentsFound'
op|','
name|'self'
op|'.'
name|'builder'
op|'.'
name|'build'
op|','
name|'self'
op|'.'
name|'manDir'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_build
dedent|''
name|'def'
name|'test_build'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that L{ManBuilder.build} find the man page in the directory, and\n        successfully produce a Lore content.\n        """'
newline|'\n'
name|'manContent'
op|'='
name|'self'
op|'.'
name|'getArbitraryManInput'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'manDir'
op|'.'
name|'child'
op|'('
string|"'test1.1'"
op|')'
op|'.'
name|'setContent'
op|'('
name|'manContent'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'builder'
op|'.'
name|'build'
op|'('
name|'self'
op|'.'
name|'manDir'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'manDir'
op|'.'
name|'child'
op|'('
string|"'test1-man.xhtml'"
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
name|'self'
op|'.'
name|'getArbitraryManLoreOutput'
op|'('
op|')'
newline|'\n'
comment|'# No-op on *nix, fix for windows'
nl|'\n'
name|'expected'
op|'='
name|'expected'
op|'.'
name|'replace'
op|'('
string|"'\\n'"
op|','
name|'os'
op|'.'
name|'linesep'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'output'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_toHTML
dedent|''
name|'def'
name|'test_toHTML'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that the content output by C{build} is compatible as input of\n        L{DocBuilder.build}.\n        """'
newline|'\n'
name|'manContent'
op|'='
name|'self'
op|'.'
name|'getArbitraryManInput'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'manDir'
op|'.'
name|'child'
op|'('
string|"'test1.1'"
op|')'
op|'.'
name|'setContent'
op|'('
name|'manContent'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'builder'
op|'.'
name|'build'
op|'('
name|'self'
op|'.'
name|'manDir'
op|')'
newline|'\n'
nl|'\n'
name|'templateFile'
op|'='
name|'self'
op|'.'
name|'manDir'
op|'.'
name|'child'
op|'('
string|'"template.tpl"'
op|')'
newline|'\n'
name|'templateFile'
op|'.'
name|'setContent'
op|'('
name|'DocBuilderTestCase'
op|'.'
name|'template'
op|')'
newline|'\n'
name|'docBuilder'
op|'='
name|'DocBuilder'
op|'('
op|')'
newline|'\n'
name|'docBuilder'
op|'.'
name|'build'
op|'('
string|'"1.2.3"'
op|','
name|'self'
op|'.'
name|'manDir'
op|','
name|'self'
op|'.'
name|'manDir'
op|','
nl|'\n'
name|'templateFile'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'manDir'
op|'.'
name|'child'
op|'('
string|"'test1-man.html'"
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertXMLEqual'
op|'('
nl|'\n'
name|'output'
op|','
nl|'\n'
string|'"""\\\n<?xml version="1.0" ?><html>\n    <head><title>Yo:MANHOLE.1</title></head>\n    <body>\n    <div class="content">\n\n<span/>\n\n<h2>NAME<a name="auto0"/></h2>\n\n<p>manhole - Connect to a Twisted Manhole service\n</p>\n\n<h2>SYNOPSIS<a name="auto1"/></h2>\n\n<p><strong>manhole</strong> </p>\n\n<h2>DESCRIPTION<a name="auto2"/></h2>\n\n<p>manhole is a GTK interface to Twisted Manhole services. You can execute python\ncode as if at an interactive Python console inside a running Twisted process\nwith this.</p>\n\n</div>\n    <a href="index.html">Index</a>\n    <span class="version">Version: 1.2.3</span>\n    </body>\n    </html>"""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BookBuilderTests
dedent|''
dedent|''
name|'class'
name|'BookBuilderTests'
op|'('
name|'TestCase'
op|','
name|'BuilderTestsMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{BookBuilder}.\n    """'
newline|'\n'
DECL|variable|skip
name|'skip'
op|'='
name|'latexSkip'
name|'or'
name|'popen4Skip'
name|'or'
name|'loreSkip'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a directory into which to place temporary files.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'docCounter'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'howtoDir'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'oldHandler'
op|'='
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGCHLD'
op|','
name|'signal'
op|'.'
name|'SIG_DFL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGCHLD'
op|','
name|'self'
op|'.'
name|'oldHandler'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getArbitraryOutput
dedent|''
name|'def'
name|'getArbitraryOutput'
op|'('
name|'self'
op|','
name|'version'
op|','
name|'counter'
op|','
name|'prefix'
op|'='
string|'""'
op|','
name|'apiBaseURL'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create and return a C{str} containing the LaTeX document which is\n        expected as the output for processing the result of the document\n        returned by C{self.getArbitraryLoreInput(counter)}.\n        """'
newline|'\n'
name|'path'
op|'='
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"%d.xhtml"'
op|'%'
op|'('
name|'counter'
op|','
op|')'
op|')'
op|'.'
name|'path'
newline|'\n'
name|'return'
op|'('
nl|'\n'
string|"r'\\section{Hi! Title: %(count)s\\label{%(path)s}}'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"r'Hi! %(count)sfoobar'"
op|')'
op|'%'
op|'{'
string|"'count'"
op|':'
name|'counter'
op|','
string|"'path'"
op|':'
name|'path'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_runSuccess
dedent|''
name|'def'
name|'test_runSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BookBuilder.run} executes the command it is passed and returns a\n        string giving the stdout and stderr of the command if it completes\n        successfully.\n        """'
newline|'\n'
name|'builder'
op|'='
name|'BookBuilder'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'builder'
op|'.'
name|'run'
op|'('
string|'"echo hi; echo bye 1>&2"'
op|')'
op|','
string|'"hi\\nbye\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_runFailed
dedent|''
name|'def'
name|'test_runFailed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BookBuilder.run} executes the command it is passed and raises\n        L{CommandFailed} if it completes unsuccessfully.\n        """'
newline|'\n'
name|'builder'
op|'='
name|'BookBuilder'
op|'('
op|')'
newline|'\n'
name|'exc'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'CommandFailed'
op|','
name|'builder'
op|'.'
name|'run'
op|','
string|'"echo hi; false"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'os'
op|'.'
name|'WEXITSTATUS'
op|'('
name|'exc'
op|'.'
name|'exitCode'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'exc'
op|'.'
name|'output'
op|','
string|'"hi\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_runSignaled
dedent|''
name|'def'
name|'test_runSignaled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BookBuilder.run} executes the command it is passed and raises\n        L{CommandFailed} if it exits due to a signal.\n        """'
newline|'\n'
name|'builder'
op|'='
name|'BookBuilder'
op|'('
op|')'
newline|'\n'
name|'exc'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
comment|'# This is only a little bit too tricky.'
nl|'\n'
name|'CommandFailed'
op|','
name|'builder'
op|'.'
name|'run'
op|','
string|'"echo hi; exec kill -9 $$"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'WIFSIGNALED'
op|'('
name|'exc'
op|'.'
name|'exitCode'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'os'
op|'.'
name|'WTERMSIG'
op|'('
name|'exc'
op|'.'
name|'exitCode'
op|')'
op|','
name|'signal'
op|'.'
name|'SIGKILL'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'exc'
op|'.'
name|'output'
op|','
string|'"hi\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildTeX
dedent|''
name|'def'
name|'test_buildTeX'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BookBuilder.buildTeX} writes intermediate TeX files for all lore\n        input files in a directory.\n        """'
newline|'\n'
name|'version'
op|'='
string|'"3.2.1"'
newline|'\n'
name|'input1'
op|','
name|'output1'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
name|'version'
op|')'
newline|'\n'
name|'input2'
op|','
name|'output2'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
name|'version'
op|')'
newline|'\n'
nl|'\n'
comment|'# Filenames are chosen by getArbitraryOutput to match the counter used'
nl|'\n'
comment|'# by getArbitraryLoreInputAndOutput.'
nl|'\n'
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"1.xhtml"'
op|')'
op|'.'
name|'setContent'
op|'('
name|'input1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"2.xhtml"'
op|')'
op|'.'
name|'setContent'
op|'('
name|'input2'
op|')'
newline|'\n'
nl|'\n'
name|'builder'
op|'='
name|'BookBuilder'
op|'('
op|')'
newline|'\n'
name|'builder'
op|'.'
name|'buildTeX'
op|'('
name|'self'
op|'.'
name|'howtoDir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"1.tex"'
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
name|'output1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"2.tex"'
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
name|'output2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildTeXRejectsInvalidDirectory
dedent|''
name|'def'
name|'test_buildTeXRejectsInvalidDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BookBuilder.buildTeX} raises L{ValueError} if passed a directory\n        which does not exist.\n        """'
newline|'\n'
name|'builder'
op|'='
name|'BookBuilder'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'ValueError'
op|','
name|'builder'
op|'.'
name|'buildTeX'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'temporarySibling'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildTeXOnlyBuildsXHTML
dedent|''
name|'def'
name|'test_buildTeXOnlyBuildsXHTML'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BookBuilder.buildTeX} ignores files which which don\'t end with\n        ".xhtml".\n        """'
newline|'\n'
comment|'# Hopefully ">" is always a parse error from microdom!'
nl|'\n'
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"not-input.dat"'
op|')'
op|'.'
name|'setContent'
op|'('
string|'">"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_buildTeX'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_stdout
dedent|''
name|'def'
name|'test_stdout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BookBuilder.buildTeX} does not write to stdout.\n        """'
newline|'\n'
name|'stdout'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'sys'
op|','
string|"'stdout'"
op|','
name|'stdout'
op|')'
newline|'\n'
nl|'\n'
comment|'# Suppress warnings so that if there are any old-style plugins that'
nl|'\n'
comment|"# lore queries for don't confuse the assertion below.  See #3070."
nl|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'warnings'
op|','
string|"'warn'"
op|','
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_buildTeX'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'stdout'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildPDFRejectsInvalidBookFilename
dedent|''
name|'def'
name|'test_buildPDFRejectsInvalidBookFilename'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BookBuilder.buildPDF} raises L{ValueError} if the book filename does\n        not end with ".tex".\n        """'
newline|'\n'
name|'builder'
op|'='
name|'BookBuilder'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'ValueError'
op|','
nl|'\n'
name|'builder'
op|'.'
name|'buildPDF'
op|','
nl|'\n'
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
op|'.'
name|'child'
op|'('
string|'"foo"'
op|')'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_setupTeXFiles
dedent|''
name|'def'
name|'_setupTeXFiles'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sections'
op|'='
name|'range'
op|'('
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setupTeXSections'
op|'('
name|'sections'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_setupTeXBook'
op|'('
name|'sections'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_setupTeXSections
dedent|''
name|'def'
name|'_setupTeXSections'
op|'('
name|'self'
op|','
name|'sections'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'texSectionNumber'
name|'in'
name|'sections'
op|':'
newline|'\n'
indent|'            '
name|'texPath'
op|'='
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"%d.tex"'
op|'%'
op|'('
name|'texSectionNumber'
op|','
op|')'
op|')'
newline|'\n'
name|'texPath'
op|'.'
name|'setContent'
op|'('
name|'self'
op|'.'
name|'getArbitraryOutput'
op|'('
nl|'\n'
string|'"1.2.3"'
op|','
name|'texSectionNumber'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_setupTeXBook
dedent|''
dedent|''
name|'def'
name|'_setupTeXBook'
op|'('
name|'self'
op|','
name|'sections'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bookTeX'
op|'='
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"book.tex"'
op|')'
newline|'\n'
name|'bookTeX'
op|'.'
name|'setContent'
op|'('
nl|'\n'
string|'r"\\documentclass{book}"'
string|'"\\n"'
nl|'\n'
string|'r"\\begin{document}"'
string|'"\\n"'
op|'+'
nl|'\n'
string|'"\\n"'
op|'.'
name|'join'
op|'('
op|'['
string|'r"\\input{%d.tex}"'
op|'%'
op|'('
name|'n'
op|','
op|')'
name|'for'
name|'n'
name|'in'
name|'sections'
op|']'
op|')'
op|'+'
nl|'\n'
string|'r"\\end{document}"'
string|'"\\n"'
op|')'
newline|'\n'
name|'return'
name|'bookTeX'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildPDF
dedent|''
name|'def'
name|'test_buildPDF'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BookBuilder.buildPDF} creates a PDF given an index tex file and a\n        directory containing .tex files.\n        """'
newline|'\n'
name|'bookPath'
op|'='
name|'self'
op|'.'
name|'_setupTeXFiles'
op|'('
op|')'
newline|'\n'
name|'outputPath'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'builder'
op|'='
name|'BookBuilder'
op|'('
op|')'
newline|'\n'
name|'builder'
op|'.'
name|'buildPDF'
op|'('
name|'bookPath'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|','
name|'outputPath'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'outputPath'
op|'.'
name|'exists'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildPDFLongPath
dedent|''
name|'def'
name|'test_buildPDFLongPath'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BookBuilder.buildPDF} succeeds even if the paths it is operating on\n        are very long.\n\n        C{ps2pdf13} seems to have problems when path names are long.  This test\n        verifies that even if inputs have long paths, generation still\n        succeeds.\n        """'
newline|'\n'
comment|'# Make it long.'
nl|'\n'
name|'self'
op|'.'
name|'howtoDir'
op|'='
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"x"'
op|'*'
number|'128'
op|')'
op|'.'
name|'child'
op|'('
string|'"x"'
op|'*'
number|'128'
op|')'
op|'.'
name|'child'
op|'('
string|'"x"'
op|'*'
number|'128'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# This will use the above long path.'
nl|'\n'
name|'bookPath'
op|'='
name|'self'
op|'.'
name|'_setupTeXFiles'
op|'('
op|')'
newline|'\n'
name|'outputPath'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'builder'
op|'='
name|'BookBuilder'
op|'('
op|')'
newline|'\n'
name|'builder'
op|'.'
name|'buildPDF'
op|'('
name|'bookPath'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|','
name|'outputPath'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'outputPath'
op|'.'
name|'exists'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildPDFRunsLaTeXThreeTimes
dedent|''
name|'def'
name|'test_buildPDFRunsLaTeXThreeTimes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BookBuilder.buildPDF} runs C{latex} three times.\n        """'
newline|'\n'
DECL|class|InspectableBookBuilder
name|'class'
name|'InspectableBookBuilder'
op|'('
name|'BookBuilder'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'BookBuilder'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'commands'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'command'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""\n                Record the command and then execute it.\n                """'
newline|'\n'
name|'self'
op|'.'
name|'commands'
op|'.'
name|'append'
op|'('
name|'command'
op|')'
newline|'\n'
name|'return'
name|'BookBuilder'
op|'.'
name|'run'
op|'('
name|'self'
op|','
name|'command'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'bookPath'
op|'='
name|'self'
op|'.'
name|'_setupTeXFiles'
op|'('
op|')'
newline|'\n'
name|'outputPath'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'builder'
op|'='
name|'InspectableBookBuilder'
op|'('
op|')'
newline|'\n'
name|'builder'
op|'.'
name|'buildPDF'
op|'('
name|'bookPath'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|','
name|'outputPath'
op|')'
newline|'\n'
nl|'\n'
comment|'# These string comparisons are very fragile.  It would be better to'
nl|'\n'
comment|'# have a test which asserted the correctness of the contents of the'
nl|'\n'
comment|"# output files.  I don't know how one could do that, though. -exarkun"
nl|'\n'
name|'latex1'
op|','
name|'latex2'
op|','
name|'latex3'
op|','
name|'dvips'
op|','
name|'ps2pdf13'
op|'='
name|'builder'
op|'.'
name|'commands'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'latex1'
op|','
name|'latex2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'latex2'
op|','
name|'latex3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'latex1'
op|'.'
name|'startswith'
op|'('
string|'"latex "'
op|')'
op|','
nl|'\n'
string|'"LaTeX command %r does not start with \'latex \'"'
op|'%'
op|'('
name|'latex1'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'latex1'
op|'.'
name|'endswith'
op|'('
string|'" "'
op|'+'
name|'bookPath'
op|'.'
name|'path'
op|')'
op|','
nl|'\n'
string|'"LaTeX command %r does not end with the book path (%r)."'
op|'%'
op|'('
nl|'\n'
name|'latex1'
op|','
name|'bookPath'
op|'.'
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'dvips'
op|'.'
name|'startswith'
op|'('
string|'"dvips "'
op|')'
op|','
nl|'\n'
string|'"dvips command %r does not start with \'dvips \'"'
op|'%'
op|'('
name|'dvips'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'ps2pdf13'
op|'.'
name|'startswith'
op|'('
string|'"ps2pdf13 "'
op|')'
op|','
nl|'\n'
string|'"ps2pdf13 command %r does not start with \'ps2pdf13 \'"'
op|'%'
op|'('
nl|'\n'
name|'ps2pdf13'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noSideEffects
dedent|''
name|'def'
name|'test_noSideEffects'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The working directory is the same before and after a call to\n        L{BookBuilder.buildPDF}.  Also the contents of the directory containing\n        the input book are the same before and after the call.\n        """'
newline|'\n'
name|'startDir'
op|'='
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
newline|'\n'
name|'bookTeX'
op|'='
name|'self'
op|'.'
name|'_setupTeXFiles'
op|'('
op|')'
newline|'\n'
name|'startTeXSiblings'
op|'='
name|'bookTeX'
op|'.'
name|'parent'
op|'('
op|')'
op|'.'
name|'children'
op|'('
op|')'
newline|'\n'
name|'startHowtoChildren'
op|'='
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'children'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'builder'
op|'='
name|'BookBuilder'
op|'('
op|')'
newline|'\n'
name|'builder'
op|'.'
name|'buildPDF'
op|'('
name|'bookTeX'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|','
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'startDir'
op|','
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'startTeXSiblings'
op|','
name|'bookTeX'
op|'.'
name|'parent'
op|'('
op|')'
op|'.'
name|'children'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'startHowtoChildren'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'children'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failedCommandProvidesOutput
dedent|''
name|'def'
name|'test_failedCommandProvidesOutput'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a subprocess fails, L{BookBuilder.buildPDF} raises L{CommandFailed}\n        with the subprocess\'s output and leaves the temporary directory as a\n        sibling of the book path.\n        """'
newline|'\n'
name|'bookTeX'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|'+'
string|'".tex"'
op|')'
newline|'\n'
name|'builder'
op|'='
name|'BookBuilder'
op|'('
op|')'
newline|'\n'
name|'inputState'
op|'='
name|'bookTeX'
op|'.'
name|'parent'
op|'('
op|')'
op|'.'
name|'children'
op|'('
op|')'
newline|'\n'
name|'exc'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'CommandFailed'
op|','
nl|'\n'
name|'builder'
op|'.'
name|'buildPDF'
op|','
nl|'\n'
name|'bookTeX'
op|','
name|'self'
op|'.'
name|'howtoDir'
op|','
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'exc'
op|'.'
name|'output'
op|')'
newline|'\n'
name|'newOutputState'
op|'='
name|'set'
op|'('
name|'bookTeX'
op|'.'
name|'parent'
op|'('
op|')'
op|'.'
name|'children'
op|'('
op|')'
op|')'
op|'-'
name|'set'
op|'('
name|'inputState'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'newOutputState'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'workPath'
op|'='
name|'newOutputState'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'workPath'
op|'.'
name|'isdir'
op|'('
op|')'
op|','
nl|'\n'
string|'"Expected work path %r was not a directory."'
op|'%'
op|'('
name|'workPath'
op|'.'
name|'path'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_build
dedent|''
name|'def'
name|'test_build'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BookBuilder.build} generates a pdf book file from some lore input\n        files.\n        """'
newline|'\n'
name|'sections'
op|'='
name|'range'
op|'('
number|'1'
op|','
number|'4'
op|')'
newline|'\n'
name|'for'
name|'sectionNumber'
name|'in'
name|'sections'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"%d.xhtml"'
op|'%'
op|'('
name|'sectionNumber'
op|','
op|')'
op|')'
op|'.'
name|'setContent'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getArbitraryLoreInput'
op|'('
name|'sectionNumber'
op|')'
op|')'
newline|'\n'
dedent|''
name|'bookTeX'
op|'='
name|'self'
op|'.'
name|'_setupTeXBook'
op|'('
name|'sections'
op|')'
newline|'\n'
name|'bookPDF'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'builder'
op|'='
name|'BookBuilder'
op|'('
op|')'
newline|'\n'
name|'builder'
op|'.'
name|'build'
op|'('
name|'self'
op|'.'
name|'howtoDir'
op|','
op|'['
name|'self'
op|'.'
name|'howtoDir'
op|']'
op|','
name|'bookTeX'
op|','
name|'bookPDF'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'bookPDF'
op|'.'
name|'exists'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildRemovesTemporaryLaTeXFiles
dedent|''
name|'def'
name|'test_buildRemovesTemporaryLaTeXFiles'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BookBuilder.build} removes the intermediate LaTeX files it creates.\n        """'
newline|'\n'
name|'sections'
op|'='
name|'range'
op|'('
number|'1'
op|','
number|'4'
op|')'
newline|'\n'
name|'for'
name|'sectionNumber'
name|'in'
name|'sections'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'child'
op|'('
string|'"%d.xhtml"'
op|'%'
op|'('
name|'sectionNumber'
op|','
op|')'
op|')'
op|'.'
name|'setContent'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getArbitraryLoreInput'
op|'('
name|'sectionNumber'
op|')'
op|')'
newline|'\n'
dedent|''
name|'bookTeX'
op|'='
name|'self'
op|'.'
name|'_setupTeXBook'
op|'('
name|'sections'
op|')'
newline|'\n'
name|'bookPDF'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'builder'
op|'='
name|'BookBuilder'
op|'('
op|')'
newline|'\n'
name|'builder'
op|'.'
name|'build'
op|'('
name|'self'
op|'.'
name|'howtoDir'
op|','
op|'['
name|'self'
op|'.'
name|'howtoDir'
op|']'
op|','
name|'bookTeX'
op|','
name|'bookPDF'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'set'
op|'('
name|'self'
op|'.'
name|'howtoDir'
op|'.'
name|'listdir'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
name|'bookTeX'
op|'.'
name|'basename'
op|'('
op|')'
op|']'
op|'+'
op|'['
string|'"%d.xhtml"'
op|'%'
op|'('
name|'n'
op|','
op|')'
name|'for'
name|'n'
name|'in'
name|'sections'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FilePathDeltaTest
dedent|''
dedent|''
name|'class'
name|'FilePathDeltaTest'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{filePathDelta}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_filePathDeltaSubdir
name|'def'
name|'test_filePathDeltaSubdir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{filePathDelta} can create a simple relative path to a child path.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'filePathDelta'
op|'('
name|'FilePath'
op|'('
string|'"/foo/bar"'
op|')'
op|','
nl|'\n'
name|'FilePath'
op|'('
string|'"/foo/bar/baz"'
op|')'
op|')'
op|','
nl|'\n'
op|'['
string|'"baz"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_filePathDeltaSiblingDir
dedent|''
name|'def'
name|'test_filePathDeltaSiblingDir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{filePathDelta} can traverse upwards to create relative paths to\n        siblings.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'filePathDelta'
op|'('
name|'FilePath'
op|'('
string|'"/foo/bar"'
op|')'
op|','
nl|'\n'
name|'FilePath'
op|'('
string|'"/foo/baz"'
op|')'
op|')'
op|','
nl|'\n'
op|'['
string|'".."'
op|','
string|'"baz"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_filePathNoCommonElements
dedent|''
name|'def'
name|'test_filePathNoCommonElements'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{filePathDelta} can create relative paths to totally unrelated paths\n        for maximum portability.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'filePathDelta'
op|'('
name|'FilePath'
op|'('
string|'"/foo/bar"'
op|')'
op|','
nl|'\n'
name|'FilePath'
op|'('
string|'"/baz/quux"'
op|')'
op|')'
op|','
nl|'\n'
op|'['
string|'".."'
op|','
string|'".."'
op|','
string|'"baz"'
op|','
string|'"quux"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_filePathDeltaSimilarEndElements
dedent|''
name|'def'
name|'test_filePathDeltaSimilarEndElements'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{filePathDelta} doesn\'t take into account final elements when\n        comparing 2 paths, but stops at the first difference.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'filePathDelta'
op|'('
name|'FilePath'
op|'('
string|'"/foo/bar/bar/spam"'
op|')'
op|','
nl|'\n'
name|'FilePath'
op|'('
string|'"/foo/bar/baz/spam"'
op|')'
op|')'
op|','
nl|'\n'
op|'['
string|'".."'
op|','
string|'".."'
op|','
string|'"baz"'
op|','
string|'"spam"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NewsBuilderTests
dedent|''
dedent|''
name|'class'
name|'NewsBuilderTests'
op|'('
name|'TestCase'
op|','
name|'StructureAssertingMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{NewsBuilder}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a fake project and stuff some basic structure and content into\n        it.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'builder'
op|'='
name|'NewsBuilder'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'project'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'project'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'existingText'
op|'='
string|"'Here is stuff which was present previously.\\n'"
newline|'\n'
name|'self'
op|'.'
name|'createStructure'
op|'('
name|'self'
op|'.'
name|'project'
op|','
op|'{'
nl|'\n'
string|"'NEWS'"
op|':'
name|'self'
op|'.'
name|'existingText'
op|','
nl|'\n'
string|"'5.feature'"
op|':'
string|"'We now support the web.\\n'"
op|','
nl|'\n'
string|"'12.feature'"
op|':'
string|"'The widget is more robust.\\n'"
op|','
nl|'\n'
string|"'15.feature'"
op|':'
op|'('
nl|'\n'
string|"'A very long feature which takes many words to '"
nl|'\n'
string|"'describe with any accuracy was introduced so that '"
nl|'\n'
string|"'the line wrapping behavior of the news generating '"
nl|'\n'
string|"'code could be verified.\\n'"
op|')'
op|','
nl|'\n'
string|"'16.feature'"
op|':'
op|'('
nl|'\n'
string|"'A simpler feature\\ndescribed on multiple lines\\n'"
nl|'\n'
string|"'was added.\\n'"
op|')'
op|','
nl|'\n'
string|"'23.bugfix'"
op|':'
string|"'Broken stuff was fixed.\\n'"
op|','
nl|'\n'
string|"'25.removal'"
op|':'
string|"'Stupid stuff was deprecated.\\n'"
op|','
nl|'\n'
string|"'30.misc'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'35.misc'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_today
dedent|''
name|'def'
name|'test_today'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{NewsBuilder._today} returns today\'s date in YYYY-MM-DD form.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'builder'
op|'.'
name|'_today'
op|'('
op|')'
op|','
name|'date'
op|'.'
name|'today'
op|'('
op|')'
op|'.'
name|'strftime'
op|'('
string|"'%Y-%m-%d'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_findFeatures
dedent|''
name|'def'
name|'test_findFeatures'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When called with L{NewsBuilder._FEATURE}, L{NewsBuilder._findChanges}\n        returns a list of bugfix ticket numbers and descriptions as a list of\n        two-tuples.\n        """'
newline|'\n'
name|'features'
op|'='
name|'self'
op|'.'
name|'builder'
op|'.'
name|'_findChanges'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'project'
op|','
name|'self'
op|'.'
name|'builder'
op|'.'
name|'_FEATURE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'features'
op|','
nl|'\n'
op|'['
op|'('
number|'5'
op|','
string|'"We now support the web."'
op|')'
op|','
nl|'\n'
op|'('
number|'12'
op|','
string|'"The widget is more robust."'
op|')'
op|','
nl|'\n'
op|'('
number|'15'
op|','
nl|'\n'
string|'"A very long feature which takes many words to describe with "'
nl|'\n'
string|'"any accuracy was introduced so that the line wrapping behavior "'
nl|'\n'
string|'"of the news generating code could be verified."'
op|')'
op|','
nl|'\n'
op|'('
number|'16'
op|','
string|'"A simpler feature described on multiple lines was added."'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_findBugfixes
dedent|''
name|'def'
name|'test_findBugfixes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When called with L{NewsBuilder._BUGFIX}, L{NewsBuilder._findChanges}\n        returns a list of bugfix ticket numbers and descriptions as a list of\n        two-tuples.\n        """'
newline|'\n'
name|'bugfixes'
op|'='
name|'self'
op|'.'
name|'builder'
op|'.'
name|'_findChanges'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'project'
op|','
name|'self'
op|'.'
name|'builder'
op|'.'
name|'_BUGFIX'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'bugfixes'
op|','
nl|'\n'
op|'['
op|'('
number|'23'
op|','
string|"'Broken stuff was fixed.'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_findRemovals
dedent|''
name|'def'
name|'test_findRemovals'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When called with L{NewsBuilder._REMOVAL}, L{NewsBuilder._findChanges}\n        returns a list of removal/deprecation ticket numbers and descriptions\n        as a list of two-tuples.\n        """'
newline|'\n'
name|'removals'
op|'='
name|'self'
op|'.'
name|'builder'
op|'.'
name|'_findChanges'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'project'
op|','
name|'self'
op|'.'
name|'builder'
op|'.'
name|'_REMOVAL'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'removals'
op|','
nl|'\n'
op|'['
op|'('
number|'25'
op|','
string|"'Stupid stuff was deprecated.'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_findMiscellaneous
dedent|''
name|'def'
name|'test_findMiscellaneous'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When called with L{NewsBuilder._MISC}, L{NewsBuilder._findChanges}\n        returns a list of removal/deprecation ticket numbers and descriptions\n        as a list of two-tuples.\n        """'
newline|'\n'
name|'misc'
op|'='
name|'self'
op|'.'
name|'builder'
op|'.'
name|'_findChanges'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'project'
op|','
name|'self'
op|'.'
name|'builder'
op|'.'
name|'_MISC'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'misc'
op|','
nl|'\n'
op|'['
op|'('
number|'30'
op|','
string|"''"
op|')'
op|','
nl|'\n'
op|'('
number|'35'
op|','
string|"''"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_writeHeader
dedent|''
name|'def'
name|'test_writeHeader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{NewsBuilder._writeHeader} accepts a file-like object opened for\n        writing and a header string and writes out a news file header to it.\n        """'
newline|'\n'
name|'output'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'builder'
op|'.'
name|'_writeHeader'
op|'('
name|'output'
op|','
string|'"Super Awesometastic 32.16"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'output'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"Super Awesometastic 32.16\\n"'
nl|'\n'
string|'"=========================\\n"'
nl|'\n'
string|'"\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_writeSection
dedent|''
name|'def'
name|'test_writeSection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{NewsBuilder._writeSection} accepts a file-like object opened for\n        writing, a section name, and a list of ticket information (as returned\n        by L{NewsBuilder._findChanges}) and writes out a section header and all\n        of the given ticket information.\n        """'
newline|'\n'
name|'output'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'builder'
op|'.'
name|'_writeSection'
op|'('
nl|'\n'
name|'output'
op|','
string|'"Features"'
op|','
nl|'\n'
op|'['
op|'('
number|'3'
op|','
string|'"Great stuff."'
op|')'
op|','
nl|'\n'
op|'('
number|'17'
op|','
string|'"Very long line which goes on and on and on, seemingly "'
nl|'\n'
string|'"without end until suddenly without warning it does end."'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'output'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"Features\\n"'
nl|'\n'
string|'"--------\\n"'
nl|'\n'
string|'" - Great stuff. (#3)\\n"'
nl|'\n'
string|'" - Very long line which goes on and on and on, seemingly without end\\n"'
nl|'\n'
string|'"   until suddenly without warning it does end. (#17)\\n"'
nl|'\n'
string|'"\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_writeMisc
dedent|''
name|'def'
name|'test_writeMisc'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{NewsBuilder._writeMisc} accepts a file-like object opened for\n        writing, a section name, and a list of ticket information (as returned\n        by L{NewsBuilder._findChanges} and writes out a section header and all\n        of the ticket numbers, but excludes any descriptions.\n        """'
newline|'\n'
name|'output'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'builder'
op|'.'
name|'_writeMisc'
op|'('
nl|'\n'
name|'output'
op|','
string|'"Other"'
op|','
nl|'\n'
op|'['
op|'('
name|'x'
op|','
string|'""'
op|')'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
number|'2'
op|','
number|'50'
op|','
number|'3'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'output'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"Other\\n"'
nl|'\n'
string|'"-----\\n"'
nl|'\n'
string|'" - #2, #5, #8, #11, #14, #17, #20, #23, #26, #29, #32, #35, #38, #41,\\n"'
nl|'\n'
string|'"   #44, #47\\n"'
nl|'\n'
string|'"\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_build
dedent|''
name|'def'
name|'test_build'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{NewsBuilder.build} updates a NEWS file with new features based on the\n        I{<ticket>.feature} files found in the directory specified.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'builder'
op|'.'
name|'build'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'project'
op|','
name|'self'
op|'.'
name|'project'
op|'.'
name|'child'
op|'('
string|"'NEWS'"
op|')'
op|','
nl|'\n'
string|'"Super Awesometastic 32.16"'
op|')'
newline|'\n'
nl|'\n'
name|'results'
op|'='
name|'self'
op|'.'
name|'project'
op|'.'
name|'child'
op|'('
string|"'NEWS'"
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'results'
op|','
nl|'\n'
string|"'Super Awesometastic 32.16\\n'"
nl|'\n'
string|"'=========================\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Features\\n'"
nl|'\n'
string|"'--------\\n'"
nl|'\n'
string|"' - We now support the web. (#5)\\n'"
nl|'\n'
string|"' - The widget is more robust. (#12)\\n'"
nl|'\n'
string|"' - A very long feature which takes many words to describe with any\\n'"
nl|'\n'
string|"'   accuracy was introduced so that the line wrapping behavior of the\\n'"
nl|'\n'
string|"'   news generating code could be verified. (#15)\\n'"
nl|'\n'
string|"' - A simpler feature described on multiple lines was added. (#16)\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Bugfixes\\n'"
nl|'\n'
string|"'--------\\n'"
nl|'\n'
string|"' - Broken stuff was fixed. (#23)\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Deprecations and Removals\\n'"
nl|'\n'
string|"'-------------------------\\n'"
nl|'\n'
string|"' - Stupid stuff was deprecated. (#25)\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Other\\n'"
nl|'\n'
string|"'-----\\n'"
nl|'\n'
string|"' - #30, #35\\n'"
nl|'\n'
string|"'\\n'"
op|'+'
name|'self'
op|'.'
name|'existingText'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_preserveTicketHint
dedent|''
name|'def'
name|'test_preserveTicketHint'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a I{NEWS} file begins with the two magic lines which point readers\n        at the issue tracker, those lines are kept at the top of the new file.\n        """'
newline|'\n'
name|'news'
op|'='
name|'self'
op|'.'
name|'project'
op|'.'
name|'child'
op|'('
string|"'NEWS'"
op|')'
newline|'\n'
name|'news'
op|'.'
name|'setContent'
op|'('
nl|'\n'
string|"'Ticket numbers in this file can be looked up by visiting\\n'"
nl|'\n'
string|"'http://twistedmatrix.com/trac/ticket/<number>\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Blah blah other stuff.\\n'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'builder'
op|'.'
name|'build'
op|'('
name|'self'
op|'.'
name|'project'
op|','
name|'news'
op|','
string|'"Super Awesometastic 32.16"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'news'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
nl|'\n'
string|"'Ticket numbers in this file can be looked up by visiting\\n'"
nl|'\n'
string|"'http://twistedmatrix.com/trac/ticket/<number>\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Super Awesometastic 32.16\\n'"
nl|'\n'
string|"'=========================\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Features\\n'"
nl|'\n'
string|"'--------\\n'"
nl|'\n'
string|"' - We now support the web. (#5)\\n'"
nl|'\n'
string|"' - The widget is more robust. (#12)\\n'"
nl|'\n'
string|"' - A very long feature which takes many words to describe with any\\n'"
nl|'\n'
string|"'   accuracy was introduced so that the line wrapping behavior of the\\n'"
nl|'\n'
string|"'   news generating code could be verified. (#15)\\n'"
nl|'\n'
string|"' - A simpler feature described on multiple lines was added. (#16)\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Bugfixes\\n'"
nl|'\n'
string|"'--------\\n'"
nl|'\n'
string|"' - Broken stuff was fixed. (#23)\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Deprecations and Removals\\n'"
nl|'\n'
string|"'-------------------------\\n'"
nl|'\n'
string|"' - Stupid stuff was deprecated. (#25)\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Other\\n'"
nl|'\n'
string|"'-----\\n'"
nl|'\n'
string|"' - #30, #35\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Blah blah other stuff.\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_emptySectionsOmitted
dedent|''
name|'def'
name|'test_emptySectionsOmitted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If there are no changes of a particular type (feature, bugfix, etc), no\n        section for that type is written by L{NewsBuilder.build}.\n        """'
newline|'\n'
name|'for'
name|'ticket'
name|'in'
name|'self'
op|'.'
name|'project'
op|'.'
name|'children'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'basename'
op|'='
name|'ticket'
op|'.'
name|'basename'
op|'('
op|')'
newline|'\n'
name|'if'
name|'basename'
op|'.'
name|'endswith'
op|'('
string|"'.feature'"
op|')'
name|'or'
name|'basename'
op|'.'
name|'endswith'
op|'('
string|"'.misc'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ticket'
op|'.'
name|'remove'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'builder'
op|'.'
name|'build'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'project'
op|','
name|'self'
op|'.'
name|'project'
op|'.'
name|'child'
op|'('
string|"'NEWS'"
op|')'
op|','
nl|'\n'
string|"'Some Thing 1.2'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'project'
op|'.'
name|'child'
op|'('
string|"'NEWS'"
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
nl|'\n'
string|"'Some Thing 1.2\\n'"
nl|'\n'
string|"'==============\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Bugfixes\\n'"
nl|'\n'
string|"'--------\\n'"
nl|'\n'
string|"' - Broken stuff was fixed. (#23)\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Deprecations and Removals\\n'"
nl|'\n'
string|"'-------------------------\\n'"
nl|'\n'
string|"' - Stupid stuff was deprecated. (#25)\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Here is stuff which was present previously.\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_duplicatesMerged
dedent|''
name|'def'
name|'test_duplicatesMerged'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If two change files have the same contents, they are merged in the\n        generated news entry.\n        """'
newline|'\n'
DECL|function|feature
name|'def'
name|'feature'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'project'
op|'.'
name|'child'
op|'('
name|'s'
op|'+'
string|"'.feature'"
op|')'
newline|'\n'
dedent|''
name|'feature'
op|'('
string|"'5'"
op|')'
op|'.'
name|'copyTo'
op|'('
name|'feature'
op|'('
string|"'15'"
op|')'
op|')'
newline|'\n'
name|'feature'
op|'('
string|"'5'"
op|')'
op|'.'
name|'copyTo'
op|'('
name|'feature'
op|'('
string|"'16'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'builder'
op|'.'
name|'build'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'project'
op|','
name|'self'
op|'.'
name|'project'
op|'.'
name|'child'
op|'('
string|"'NEWS'"
op|')'
op|','
nl|'\n'
string|"'Project Name 5.0'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'project'
op|'.'
name|'child'
op|'('
string|"'NEWS'"
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|','
nl|'\n'
string|"'Project Name 5.0\\n'"
nl|'\n'
string|"'================\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Features\\n'"
nl|'\n'
string|"'--------\\n'"
nl|'\n'
string|"' - We now support the web. (#5, #15, #16)\\n'"
nl|'\n'
string|"' - The widget is more robust. (#12)\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Bugfixes\\n'"
nl|'\n'
string|"'--------\\n'"
nl|'\n'
string|"' - Broken stuff was fixed. (#23)\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Deprecations and Removals\\n'"
nl|'\n'
string|"'-------------------------\\n'"
nl|'\n'
string|"' - Stupid stuff was deprecated. (#25)\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Other\\n'"
nl|'\n'
string|"'-----\\n'"
nl|'\n'
string|"' - #30, #35\\n'"
nl|'\n'
string|"'\\n'"
nl|'\n'
string|"'Here is stuff which was present previously.\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildAll
dedent|''
name|'def'
name|'test_buildAll'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{NewsBuilder.buildAll} calls L{NewsBuilder.build} once for each\n        subproject, passing that subproject\'s I{topfiles} directory as C{path},\n        the I{NEWS} file in that directory as C{output}, and the subproject\'s\n        name as C{header}, and then again for each subproject with the\n        top-level I{NEWS} file for C{output}.\n        """'
newline|'\n'
name|'builds'
op|'='
op|'['
op|']'
newline|'\n'
name|'builder'
op|'='
name|'NewsBuilder'
op|'('
op|')'
newline|'\n'
name|'builder'
op|'.'
name|'build'
op|'='
name|'lambda'
name|'path'
op|','
name|'output'
op|','
name|'header'
op|':'
name|'builds'
op|'.'
name|'append'
op|'('
op|'('
nl|'\n'
name|'path'
op|','
name|'output'
op|','
name|'header'
op|')'
op|')'
newline|'\n'
name|'builder'
op|'.'
name|'_today'
op|'='
name|'lambda'
op|':'
string|"'2009-12-01'"
newline|'\n'
nl|'\n'
comment|'# Create a fake looking Twisted project to build from'
nl|'\n'
name|'project'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
op|'.'
name|'child'
op|'('
string|'"twisted"'
op|')'
newline|'\n'
name|'project'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'createStructure'
op|'('
name|'project'
op|','
op|'{'
nl|'\n'
string|"'NEWS'"
op|':'
string|"'Old boring stuff from the past.\\n'"
op|','
nl|'\n'
string|"'_version.py'"
op|':'
name|'genVersion'
op|'('
string|'"twisted"'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|')'
op|','
nl|'\n'
string|"'topfiles'"
op|':'
op|'{'
nl|'\n'
string|"'NEWS'"
op|':'
string|"'Old core news.\\n'"
op|','
nl|'\n'
string|"'3.feature'"
op|':'
string|"'Third feature addition.\\n'"
op|','
nl|'\n'
string|"'5.misc'"
op|':'
string|"''"
op|'}'
op|','
nl|'\n'
string|"'conch'"
op|':'
op|'{'
nl|'\n'
string|"'_version.py'"
op|':'
name|'genVersion'
op|'('
string|'"twisted.conch"'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|')'
op|','
nl|'\n'
string|"'topfiles'"
op|':'
op|'{'
nl|'\n'
string|"'NEWS'"
op|':'
string|"'Old conch news.\\n'"
op|','
nl|'\n'
string|"'7.bugfix'"
op|':'
string|"'Fixed that bug.\\n'"
op|'}'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'builder'
op|'.'
name|'buildAll'
op|'('
name|'project'
op|')'
newline|'\n'
nl|'\n'
name|'coreTopfiles'
op|'='
name|'project'
op|'.'
name|'child'
op|'('
string|'"topfiles"'
op|')'
newline|'\n'
name|'coreNews'
op|'='
name|'coreTopfiles'
op|'.'
name|'child'
op|'('
string|'"NEWS"'
op|')'
newline|'\n'
name|'coreHeader'
op|'='
string|'"Twisted Core 1.2.3 (2009-12-01)"'
newline|'\n'
nl|'\n'
name|'conchTopfiles'
op|'='
name|'project'
op|'.'
name|'child'
op|'('
string|'"conch"'
op|')'
op|'.'
name|'child'
op|'('
string|'"topfiles"'
op|')'
newline|'\n'
name|'conchNews'
op|'='
name|'conchTopfiles'
op|'.'
name|'child'
op|'('
string|'"NEWS"'
op|')'
newline|'\n'
name|'conchHeader'
op|'='
string|'"Twisted Conch 3.4.5 (2009-12-01)"'
newline|'\n'
nl|'\n'
name|'aggregateNews'
op|'='
name|'project'
op|'.'
name|'child'
op|'('
string|'"NEWS"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'builds'
op|','
nl|'\n'
op|'['
op|'('
name|'conchTopfiles'
op|','
name|'conchNews'
op|','
name|'conchHeader'
op|')'
op|','
nl|'\n'
op|'('
name|'coreTopfiles'
op|','
name|'coreNews'
op|','
name|'coreHeader'
op|')'
op|','
nl|'\n'
op|'('
name|'conchTopfiles'
op|','
name|'aggregateNews'
op|','
name|'conchHeader'
op|')'
op|','
nl|'\n'
op|'('
name|'coreTopfiles'
op|','
name|'aggregateNews'
op|','
name|'coreHeader'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'DistributionBuilderTestBase'
op|'('
name|'BuilderTestsMixin'
op|','
name|'StructureAssertingMixin'
op|','
nl|'\n'
DECL|class|DistributionBuilderTestBase
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Base for tests of L{DistributionBuilder}.\n    """'
newline|'\n'
DECL|variable|skip
name|'skip'
op|'='
name|'loreSkip'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'BuilderTestsMixin'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'rootDir'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rootDir'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'outputDir'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'outputDir'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'builder'
op|'='
name|'DistributionBuilder'
op|'('
name|'self'
op|'.'
name|'rootDir'
op|','
name|'self'
op|'.'
name|'outputDir'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DistributionBuilderTest
dedent|''
dedent|''
name|'class'
name|'DistributionBuilderTest'
op|'('
name|'DistributionBuilderTestBase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_twistedDistribution
indent|'    '
name|'def'
name|'test_twistedDistribution'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The Twisted tarball contains everything in the source checkout, with\n        built documentation.\n        """'
newline|'\n'
name|'loreInput'
op|','
name|'loreOutput'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
string|'"10.0.0"'
op|')'
newline|'\n'
name|'manInput1'
op|'='
name|'self'
op|'.'
name|'getArbitraryManInput'
op|'('
op|')'
newline|'\n'
name|'manOutput1'
op|'='
name|'self'
op|'.'
name|'getArbitraryManHTMLOutput'
op|'('
string|'"10.0.0"'
op|','
string|'"../howto/"'
op|')'
newline|'\n'
name|'manInput2'
op|'='
name|'self'
op|'.'
name|'getArbitraryManInput'
op|'('
op|')'
newline|'\n'
name|'manOutput2'
op|'='
name|'self'
op|'.'
name|'getArbitraryManHTMLOutput'
op|'('
string|'"10.0.0"'
op|','
string|'"../howto/"'
op|')'
newline|'\n'
name|'coreIndexInput'
op|','
name|'coreIndexOutput'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
nl|'\n'
string|'"10.0.0"'
op|','
name|'prefix'
op|'='
string|'"howto/"'
op|')'
newline|'\n'
nl|'\n'
name|'structure'
op|'='
op|'{'
nl|'\n'
string|'"README"'
op|':'
string|'"Twisted"'
op|','
nl|'\n'
string|'"unrelated"'
op|':'
string|'"x"'
op|','
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"setup.py"'
op|':'
string|'"import toplevel"'
op|','
nl|'\n'
string|'"bin"'
op|':'
op|'{'
string|'"web"'
op|':'
op|'{'
string|'"websetroot"'
op|':'
string|'"SET ROOT"'
op|'}'
op|','
nl|'\n'
string|'"twistd"'
op|':'
string|'"TWISTD"'
op|'}'
op|','
nl|'\n'
string|'"twisted"'
op|':'
nl|'\n'
op|'{'
string|'"web"'
op|':'
nl|'\n'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WEB"'
op|','
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
string|'"setup.py"'
op|':'
string|'"import WEBINSTALL"'
op|','
nl|'\n'
string|'"README"'
op|':'
string|'"WEB!"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"words"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WORDS"'
op|'}'
op|','
nl|'\n'
string|'"plugins"'
op|':'
op|'{'
string|'"twisted_web.py"'
op|':'
string|'"import WEBPLUG"'
op|','
nl|'\n'
string|'"twisted_words.py"'
op|':'
string|'"import WORDPLUG"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"doc"'
op|':'
op|'{'
string|'"web"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"index.xhtml"'
op|':'
name|'loreInput'
op|'}'
op|','
nl|'\n'
string|'"man"'
op|':'
op|'{'
string|'"websetroot.1"'
op|':'
name|'manInput2'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"core"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"template.tpl"'
op|':'
name|'self'
op|'.'
name|'template'
op|'}'
op|','
nl|'\n'
string|'"man"'
op|':'
op|'{'
string|'"twistd.1"'
op|':'
name|'manInput1'
op|'}'
op|','
nl|'\n'
string|'"index.xhtml"'
op|':'
name|'coreIndexInput'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'outStructure'
op|'='
op|'{'
nl|'\n'
string|'"README"'
op|':'
string|'"Twisted"'
op|','
nl|'\n'
string|'"unrelated"'
op|':'
string|'"x"'
op|','
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"setup.py"'
op|':'
string|'"import toplevel"'
op|','
nl|'\n'
string|'"bin"'
op|':'
op|'{'
string|'"web"'
op|':'
op|'{'
string|'"websetroot"'
op|':'
string|'"SET ROOT"'
op|'}'
op|','
nl|'\n'
string|'"twistd"'
op|':'
string|'"TWISTD"'
op|'}'
op|','
nl|'\n'
string|'"twisted"'
op|':'
nl|'\n'
op|'{'
string|'"web"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WEB"'
op|','
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
string|'"setup.py"'
op|':'
string|'"import WEBINSTALL"'
op|','
nl|'\n'
string|'"README"'
op|':'
string|'"WEB!"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"words"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WORDS"'
op|'}'
op|','
nl|'\n'
string|'"plugins"'
op|':'
op|'{'
string|'"twisted_web.py"'
op|':'
string|'"import WEBPLUG"'
op|','
nl|'\n'
string|'"twisted_words.py"'
op|':'
string|'"import WORDPLUG"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"doc"'
op|':'
op|'{'
string|'"web"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"index.html"'
op|':'
name|'loreOutput'
op|'}'
op|','
nl|'\n'
string|'"man"'
op|':'
op|'{'
string|'"websetroot.1"'
op|':'
name|'manInput2'
op|','
nl|'\n'
string|'"websetroot-man.html"'
op|':'
name|'manOutput2'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"core"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"template.tpl"'
op|':'
name|'self'
op|'.'
name|'template'
op|'}'
op|','
nl|'\n'
string|'"man"'
op|':'
op|'{'
string|'"twistd.1"'
op|':'
name|'manInput1'
op|','
nl|'\n'
string|'"twistd-man.html"'
op|':'
name|'manOutput1'
op|'}'
op|','
nl|'\n'
string|'"index.html"'
op|':'
name|'coreIndexOutput'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'createStructure'
op|'('
name|'self'
op|'.'
name|'rootDir'
op|','
name|'structure'
op|')'
newline|'\n'
nl|'\n'
name|'outputFile'
op|'='
name|'self'
op|'.'
name|'builder'
op|'.'
name|'buildTwisted'
op|'('
string|'"10.0.0"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertExtractedStructure'
op|'('
name|'outputFile'
op|','
name|'outStructure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_twistedDistributionExcludesWeb2AndVFSAndAdmin
dedent|''
name|'def'
name|'test_twistedDistributionExcludesWeb2AndVFSAndAdmin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The main Twisted distribution does not include web2 or vfs, or the\n        bin/admin directory.\n        """'
newline|'\n'
name|'loreInput'
op|','
name|'loreOutput'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
string|'"10.0.0"'
op|')'
newline|'\n'
name|'coreIndexInput'
op|','
name|'coreIndexOutput'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
nl|'\n'
string|'"10.0.0"'
op|','
name|'prefix'
op|'='
string|'"howto/"'
op|')'
newline|'\n'
nl|'\n'
name|'structure'
op|'='
op|'{'
nl|'\n'
string|'"README"'
op|':'
string|'"Twisted"'
op|','
nl|'\n'
string|'"unrelated"'
op|':'
string|'"x"'
op|','
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"setup.py"'
op|':'
string|'"import toplevel"'
op|','
nl|'\n'
string|'"bin"'
op|':'
op|'{'
string|'"web2"'
op|':'
op|'{'
string|'"websetroot"'
op|':'
string|'"SET ROOT"'
op|'}'
op|','
nl|'\n'
string|'"vfs"'
op|':'
op|'{'
string|'"vfsitup"'
op|':'
string|'"hee hee"'
op|'}'
op|','
nl|'\n'
string|'"twistd"'
op|':'
string|'"TWISTD"'
op|','
nl|'\n'
string|'"admin"'
op|':'
op|'{'
string|'"build-a-thing"'
op|':'
string|'"yay"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"twisted"'
op|':'
nl|'\n'
op|'{'
string|'"web2"'
op|':'
nl|'\n'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WEB"'
op|','
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
string|'"setup.py"'
op|':'
string|'"import WEBINSTALL"'
op|','
nl|'\n'
string|'"README"'
op|':'
string|'"WEB!"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"vfs"'
op|':'
nl|'\n'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import VFS"'
op|','
nl|'\n'
string|'"blah blah"'
op|':'
string|'"blah blah"'
op|'}'
op|','
nl|'\n'
string|'"words"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WORDS"'
op|'}'
op|','
nl|'\n'
string|'"plugins"'
op|':'
op|'{'
string|'"twisted_web.py"'
op|':'
string|'"import WEBPLUG"'
op|','
nl|'\n'
string|'"twisted_words.py"'
op|':'
string|'"import WORDPLUG"'
op|','
nl|'\n'
string|'"twisted_web2.py"'
op|':'
string|'"import WEB2"'
op|','
nl|'\n'
string|'"twisted_vfs.py"'
op|':'
string|'"import VFS"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"doc"'
op|':'
op|'{'
string|'"web2"'
op|':'
op|'{'
string|'"excluded!"'
op|':'
string|'"yay"'
op|'}'
op|','
nl|'\n'
string|'"vfs"'
op|':'
op|'{'
string|'"unrelated"'
op|':'
string|'"whatever"'
op|'}'
op|','
nl|'\n'
string|'"core"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"template.tpl"'
op|':'
name|'self'
op|'.'
name|'template'
op|'}'
op|','
nl|'\n'
string|'"index.xhtml"'
op|':'
name|'coreIndexInput'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'outStructure'
op|'='
op|'{'
nl|'\n'
string|'"README"'
op|':'
string|'"Twisted"'
op|','
nl|'\n'
string|'"unrelated"'
op|':'
string|'"x"'
op|','
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"setup.py"'
op|':'
string|'"import toplevel"'
op|','
nl|'\n'
string|'"bin"'
op|':'
op|'{'
string|'"twistd"'
op|':'
string|'"TWISTD"'
op|'}'
op|','
nl|'\n'
string|'"twisted"'
op|':'
nl|'\n'
op|'{'
string|'"words"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WORDS"'
op|'}'
op|','
nl|'\n'
string|'"plugins"'
op|':'
op|'{'
string|'"twisted_web.py"'
op|':'
string|'"import WEBPLUG"'
op|','
nl|'\n'
string|'"twisted_words.py"'
op|':'
string|'"import WORDPLUG"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"doc"'
op|':'
op|'{'
string|'"core"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"template.tpl"'
op|':'
name|'self'
op|'.'
name|'template'
op|'}'
op|','
nl|'\n'
string|'"index.html"'
op|':'
name|'coreIndexOutput'
op|'}'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'createStructure'
op|'('
name|'self'
op|'.'
name|'rootDir'
op|','
name|'structure'
op|')'
newline|'\n'
nl|'\n'
name|'outputFile'
op|'='
name|'self'
op|'.'
name|'builder'
op|'.'
name|'buildTwisted'
op|'('
string|'"10.0.0"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertExtractedStructure'
op|'('
name|'outputFile'
op|','
name|'outStructure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_subProjectLayout
dedent|''
name|'def'
name|'test_subProjectLayout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The subproject tarball includes files like so:\n\n        1. twisted/<subproject>/topfiles defines the files that will be in the\n           top level in the tarball, except LICENSE, which comes from the real\n           top-level directory.\n        2. twisted/<subproject> is included, but without the topfiles entry\n           in that directory. No other twisted subpackages are included.\n        3. twisted/plugins/twisted_<subproject>.py is included, but nothing\n           else in plugins is.\n        """'
newline|'\n'
name|'structure'
op|'='
op|'{'
nl|'\n'
string|'"README"'
op|':'
string|'"HI!@"'
op|','
nl|'\n'
string|'"unrelated"'
op|':'
string|'"x"'
op|','
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"setup.py"'
op|':'
string|'"import toplevel"'
op|','
nl|'\n'
string|'"bin"'
op|':'
op|'{'
string|'"web"'
op|':'
op|'{'
string|'"websetroot"'
op|':'
string|'"SET ROOT"'
op|'}'
op|','
nl|'\n'
string|'"words"'
op|':'
op|'{'
string|'"im"'
op|':'
string|'"#!im"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"twisted"'
op|':'
nl|'\n'
op|'{'
string|'"web"'
op|':'
nl|'\n'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WEB"'
op|','
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
string|'"setup.py"'
op|':'
string|'"import WEBINSTALL"'
op|','
nl|'\n'
string|'"README"'
op|':'
string|'"WEB!"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"words"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WORDS"'
op|'}'
op|','
nl|'\n'
string|'"plugins"'
op|':'
op|'{'
string|'"twisted_web.py"'
op|':'
string|'"import WEBPLUG"'
op|','
nl|'\n'
string|'"twisted_words.py"'
op|':'
string|'"import WORDPLUG"'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'outStructure'
op|'='
op|'{'
nl|'\n'
string|'"README"'
op|':'
string|'"WEB!"'
op|','
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"setup.py"'
op|':'
string|'"import WEBINSTALL"'
op|','
nl|'\n'
string|'"bin"'
op|':'
op|'{'
string|'"websetroot"'
op|':'
string|'"SET ROOT"'
op|'}'
op|','
nl|'\n'
string|'"twisted"'
op|':'
op|'{'
string|'"web"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WEB"'
op|'}'
op|','
nl|'\n'
string|'"plugins"'
op|':'
op|'{'
string|'"twisted_web.py"'
op|':'
string|'"import WEBPLUG"'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'createStructure'
op|'('
name|'self'
op|'.'
name|'rootDir'
op|','
name|'structure'
op|')'
newline|'\n'
nl|'\n'
name|'outputFile'
op|'='
name|'self'
op|'.'
name|'builder'
op|'.'
name|'buildSubProject'
op|'('
string|'"web"'
op|','
string|'"0.3.0"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertExtractedStructure'
op|'('
name|'outputFile'
op|','
name|'outStructure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_minimalSubProjectLayout
dedent|''
name|'def'
name|'test_minimalSubProjectLayout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        buildSubProject should work with minimal subprojects.\n        """'
newline|'\n'
name|'structure'
op|'='
op|'{'
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"bin"'
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|'"twisted"'
op|':'
nl|'\n'
op|'{'
string|'"web"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WEB"'
op|','
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
string|'"setup.py"'
op|':'
string|'"import WEBINSTALL"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"plugins"'
op|':'
op|'{'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'outStructure'
op|'='
op|'{'
nl|'\n'
string|'"setup.py"'
op|':'
string|'"import WEBINSTALL"'
op|','
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"twisted"'
op|':'
op|'{'
string|'"web"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WEB"'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'createStructure'
op|'('
name|'self'
op|'.'
name|'rootDir'
op|','
name|'structure'
op|')'
newline|'\n'
nl|'\n'
name|'outputFile'
op|'='
name|'self'
op|'.'
name|'builder'
op|'.'
name|'buildSubProject'
op|'('
string|'"web"'
op|','
string|'"0.3.0"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertExtractedStructure'
op|'('
name|'outputFile'
op|','
name|'outStructure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_subProjectDocBuilding
dedent|''
name|'def'
name|'test_subProjectDocBuilding'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When building a subproject release, documentation should be built with\n        lore.\n        """'
newline|'\n'
name|'loreInput'
op|','
name|'loreOutput'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
string|'"0.3.0"'
op|')'
newline|'\n'
name|'manInput'
op|'='
name|'self'
op|'.'
name|'getArbitraryManInput'
op|'('
op|')'
newline|'\n'
name|'manOutput'
op|'='
name|'self'
op|'.'
name|'getArbitraryManHTMLOutput'
op|'('
string|'"0.3.0"'
op|','
string|'"../howto/"'
op|')'
newline|'\n'
name|'structure'
op|'='
op|'{'
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"twisted"'
op|':'
op|'{'
string|'"web"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WEB"'
op|','
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
string|'"setup.py"'
op|':'
string|'"import WEBINST"'
op|'}'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"doc"'
op|':'
op|'{'
string|'"web"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"index.xhtml"'
op|':'
name|'loreInput'
op|'}'
op|','
nl|'\n'
string|'"man"'
op|':'
op|'{'
string|'"twistd.1"'
op|':'
name|'manInput'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"core"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"template.tpl"'
op|':'
name|'self'
op|'.'
name|'template'
op|'}'
op|'}'
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'outStructure'
op|'='
op|'{'
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"setup.py"'
op|':'
string|'"import WEBINST"'
op|','
nl|'\n'
string|'"twisted"'
op|':'
op|'{'
string|'"web"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WEB"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"doc"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"index.html"'
op|':'
name|'loreOutput'
op|'}'
op|','
nl|'\n'
string|'"man"'
op|':'
op|'{'
string|'"twistd.1"'
op|':'
name|'manInput'
op|','
nl|'\n'
string|'"twistd-man.html"'
op|':'
name|'manOutput'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'createStructure'
op|'('
name|'self'
op|'.'
name|'rootDir'
op|','
name|'structure'
op|')'
newline|'\n'
nl|'\n'
name|'outputFile'
op|'='
name|'self'
op|'.'
name|'builder'
op|'.'
name|'buildSubProject'
op|'('
string|'"web"'
op|','
string|'"0.3.0"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertExtractedStructure'
op|'('
name|'outputFile'
op|','
name|'outStructure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_coreProjectLayout
dedent|''
name|'def'
name|'test_coreProjectLayout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The core tarball looks a lot like a subproject tarball, except it\n        doesn\'t include:\n\n        - Python packages from other subprojects\n        - plugins from other subprojects\n        - scripts from other subprojects\n        """'
newline|'\n'
name|'indexInput'
op|','
name|'indexOutput'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
nl|'\n'
string|'"8.0.0"'
op|','
name|'prefix'
op|'='
string|'"howto/"'
op|')'
newline|'\n'
name|'howtoInput'
op|','
name|'howtoOutput'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
string|'"8.0.0"'
op|')'
newline|'\n'
name|'specInput'
op|','
name|'specOutput'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
nl|'\n'
string|'"8.0.0"'
op|','
name|'prefix'
op|'='
string|'"../howto/"'
op|')'
newline|'\n'
name|'upgradeInput'
op|','
name|'upgradeOutput'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
nl|'\n'
string|'"8.0.0"'
op|','
name|'prefix'
op|'='
string|'"../howto/"'
op|')'
newline|'\n'
name|'tutorialInput'
op|','
name|'tutorialOutput'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
nl|'\n'
string|'"8.0.0"'
op|','
name|'prefix'
op|'='
string|'"../"'
op|')'
newline|'\n'
nl|'\n'
name|'structure'
op|'='
op|'{'
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"twisted"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"twisted"'
op|','
nl|'\n'
string|'"python"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"python"'
op|','
nl|'\n'
string|'"roots.py"'
op|':'
string|'"roots!"'
op|'}'
op|','
nl|'\n'
string|'"conch"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"conch"'
op|','
nl|'\n'
string|'"unrelated.py"'
op|':'
string|'"import conch"'
op|'}'
op|','
nl|'\n'
string|'"plugin.py"'
op|':'
string|'"plugin"'
op|','
nl|'\n'
string|'"plugins"'
op|':'
op|'{'
string|'"twisted_web.py"'
op|':'
string|'"webplug"'
op|','
nl|'\n'
string|'"twisted_whatever.py"'
op|':'
string|'"include!"'
op|','
nl|'\n'
string|'"cred.py"'
op|':'
string|'"include!"'
op|'}'
op|','
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
string|'"setup.py"'
op|':'
string|'"import CORE"'
op|','
nl|'\n'
string|'"README"'
op|':'
string|'"core readme"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"doc"'
op|':'
op|'{'
string|'"core"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"template.tpl"'
op|':'
name|'self'
op|'.'
name|'template'
op|','
nl|'\n'
string|'"index.xhtml"'
op|':'
name|'howtoInput'
op|','
nl|'\n'
string|'"tutorial"'
op|':'
nl|'\n'
op|'{'
string|'"index.xhtml"'
op|':'
name|'tutorialInput'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"specifications"'
op|':'
op|'{'
string|'"index.xhtml"'
op|':'
name|'specInput'
op|'}'
op|','
nl|'\n'
string|'"upgrades"'
op|':'
op|'{'
string|'"index.xhtml"'
op|':'
name|'upgradeInput'
op|'}'
op|','
nl|'\n'
string|'"examples"'
op|':'
op|'{'
string|'"foo.py"'
op|':'
string|'"foo.py"'
op|'}'
op|','
nl|'\n'
string|'"index.xhtml"'
op|':'
name|'indexInput'
op|'}'
op|','
nl|'\n'
string|'"web"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"index.xhtml"'
op|':'
string|'"webindex"'
op|'}'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"bin"'
op|':'
op|'{'
string|'"twistd"'
op|':'
string|'"TWISTD"'
op|','
nl|'\n'
string|'"web"'
op|':'
op|'{'
string|'"websetroot"'
op|':'
string|'"websetroot"'
op|'}'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'outStructure'
op|'='
op|'{'
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"setup.py"'
op|':'
string|'"import CORE"'
op|','
nl|'\n'
string|'"README"'
op|':'
string|'"core readme"'
op|','
nl|'\n'
string|'"twisted"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"twisted"'
op|','
nl|'\n'
string|'"python"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"python"'
op|','
nl|'\n'
string|'"roots.py"'
op|':'
string|'"roots!"'
op|'}'
op|','
nl|'\n'
string|'"plugin.py"'
op|':'
string|'"plugin"'
op|','
nl|'\n'
string|'"plugins"'
op|':'
op|'{'
string|'"twisted_whatever.py"'
op|':'
string|'"include!"'
op|','
nl|'\n'
string|'"cred.py"'
op|':'
string|'"include!"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"doc"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"template.tpl"'
op|':'
name|'self'
op|'.'
name|'template'
op|','
nl|'\n'
string|'"index.html"'
op|':'
name|'howtoOutput'
op|','
nl|'\n'
string|'"tutorial"'
op|':'
op|'{'
string|'"index.html"'
op|':'
name|'tutorialOutput'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"specifications"'
op|':'
op|'{'
string|'"index.html"'
op|':'
name|'specOutput'
op|'}'
op|','
nl|'\n'
string|'"upgrades"'
op|':'
op|'{'
string|'"index.html"'
op|':'
name|'upgradeOutput'
op|'}'
op|','
nl|'\n'
string|'"examples"'
op|':'
op|'{'
string|'"foo.py"'
op|':'
string|'"foo.py"'
op|'}'
op|','
nl|'\n'
string|'"index.html"'
op|':'
name|'indexOutput'
op|'}'
op|','
nl|'\n'
string|'"bin"'
op|':'
op|'{'
string|'"twistd"'
op|':'
string|'"TWISTD"'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'createStructure'
op|'('
name|'self'
op|'.'
name|'rootDir'
op|','
name|'structure'
op|')'
newline|'\n'
name|'outputFile'
op|'='
name|'self'
op|'.'
name|'builder'
op|'.'
name|'buildCore'
op|'('
string|'"8.0.0"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertExtractedStructure'
op|'('
name|'outputFile'
op|','
name|'outStructure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_apiBaseURL
dedent|''
name|'def'
name|'test_apiBaseURL'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        DistributionBuilder builds documentation with the specified\n        API base URL.\n        """'
newline|'\n'
name|'apiBaseURL'
op|'='
string|'"http://%s"'
newline|'\n'
name|'builder'
op|'='
name|'DistributionBuilder'
op|'('
name|'self'
op|'.'
name|'rootDir'
op|','
name|'self'
op|'.'
name|'outputDir'
op|','
nl|'\n'
name|'apiBaseURL'
op|'='
name|'apiBaseURL'
op|')'
newline|'\n'
name|'loreInput'
op|','
name|'loreOutput'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
nl|'\n'
string|'"0.3.0"'
op|','
name|'apiBaseURL'
op|'='
name|'apiBaseURL'
op|')'
newline|'\n'
name|'structure'
op|'='
op|'{'
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"twisted"'
op|':'
op|'{'
string|'"web"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WEB"'
op|','
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
string|'"setup.py"'
op|':'
string|'"import WEBINST"'
op|'}'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"doc"'
op|':'
op|'{'
string|'"web"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"index.xhtml"'
op|':'
name|'loreInput'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"core"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"template.tpl"'
op|':'
name|'self'
op|'.'
name|'template'
op|'}'
op|'}'
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'outStructure'
op|'='
op|'{'
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"setup.py"'
op|':'
string|'"import WEBINST"'
op|','
nl|'\n'
string|'"twisted"'
op|':'
op|'{'
string|'"web"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WEB"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"doc"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"index.html"'
op|':'
name|'loreOutput'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'createStructure'
op|'('
name|'self'
op|'.'
name|'rootDir'
op|','
name|'structure'
op|')'
newline|'\n'
name|'outputFile'
op|'='
name|'builder'
op|'.'
name|'buildSubProject'
op|'('
string|'"web"'
op|','
string|'"0.3.0"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertExtractedStructure'
op|'('
name|'outputFile'
op|','
name|'outStructure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BuildAllTarballsTest
dedent|''
dedent|''
name|'class'
name|'BuildAllTarballsTest'
op|'('
name|'DistributionBuilderTestBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{DistributionBuilder.buildAllTarballs}.\n    """'
newline|'\n'
DECL|variable|skip
name|'skip'
op|'='
name|'svnSkip'
name|'or'
name|'popen4Skip'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'oldHandler'
op|'='
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGCHLD'
op|','
name|'signal'
op|'.'
name|'SIG_DFL'
op|')'
newline|'\n'
name|'DistributionBuilderTestBase'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGCHLD'
op|','
name|'self'
op|'.'
name|'oldHandler'
op|')'
newline|'\n'
name|'DistributionBuilderTestBase'
op|'.'
name|'tearDown'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildAllTarballs
dedent|''
name|'def'
name|'test_buildAllTarballs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{buildAllTarballs} builds tarballs for Twisted and all of its\n        subprojects based on an SVN checkout; the resulting tarballs contain\n        no SVN metadata.  This involves building documentation, which it will\n        build with the correct API documentation reference base URL.\n        """'
newline|'\n'
name|'repositoryPath'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'repository'
op|'='
name|'FilePath'
op|'('
name|'repositoryPath'
op|')'
newline|'\n'
name|'checkoutPath'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'checkout'
op|'='
name|'FilePath'
op|'('
name|'checkoutPath'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'outputDir'
op|'.'
name|'remove'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'runCommand'
op|'('
op|'['
string|'"svnadmin"'
op|','
string|'"create"'
op|','
name|'repositoryPath'
op|']'
op|')'
newline|'\n'
name|'runCommand'
op|'('
op|'['
string|'"svn"'
op|','
string|'"checkout"'
op|','
string|'"file://"'
op|'+'
name|'repository'
op|'.'
name|'path'
op|','
nl|'\n'
name|'checkout'
op|'.'
name|'path'
op|']'
op|')'
newline|'\n'
name|'coreIndexInput'
op|','
name|'coreIndexOutput'
op|'='
name|'self'
op|'.'
name|'getArbitraryLoreInputAndOutput'
op|'('
nl|'\n'
string|'"1.2.0"'
op|','
name|'prefix'
op|'='
string|'"howto/"'
op|','
nl|'\n'
name|'apiBaseURL'
op|'='
string|'"http://twistedmatrix.com/documents/1.2.0/api/%s.html"'
op|')'
newline|'\n'
nl|'\n'
name|'structure'
op|'='
op|'{'
nl|'\n'
string|'"README"'
op|':'
string|'"Twisted"'
op|','
nl|'\n'
string|'"unrelated"'
op|':'
string|'"x"'
op|','
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"setup.py"'
op|':'
string|'"import toplevel"'
op|','
nl|'\n'
string|'"bin"'
op|':'
op|'{'
string|'"web2"'
op|':'
op|'{'
string|'"websetroot"'
op|':'
string|'"SET ROOT"'
op|'}'
op|','
nl|'\n'
string|'"vfs"'
op|':'
op|'{'
string|'"vfsitup"'
op|':'
string|'"hee hee"'
op|'}'
op|','
nl|'\n'
string|'"words"'
op|':'
op|'{'
string|'"im"'
op|':'
string|'"import im"'
op|'}'
op|','
nl|'\n'
string|'"twistd"'
op|':'
string|'"TWISTD"'
op|'}'
op|','
nl|'\n'
string|'"twisted"'
op|':'
nl|'\n'
op|'{'
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
string|'"setup.py"'
op|':'
string|'"import TOPINSTALL"'
op|','
nl|'\n'
string|'"README"'
op|':'
string|'"CORE!"'
op|'}'
op|','
nl|'\n'
string|'"_version.py"'
op|':'
name|'genVersion'
op|'('
string|'"twisted"'
op|','
number|'1'
op|','
number|'2'
op|','
number|'0'
op|')'
op|','
nl|'\n'
string|'"web2"'
op|':'
nl|'\n'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WEB"'
op|','
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
string|'"setup.py"'
op|':'
string|'"import WEBINSTALL"'
op|','
nl|'\n'
string|'"README"'
op|':'
string|'"WEB!"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"vfs"'
op|':'
nl|'\n'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import VFS"'
op|','
nl|'\n'
string|'"blah blah"'
op|':'
string|'"blah blah"'
op|'}'
op|','
nl|'\n'
string|'"words"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WORDS"'
op|','
nl|'\n'
string|'"_version.py"'
op|':'
nl|'\n'
name|'genVersion'
op|'('
string|'"twisted.words"'
op|','
number|'1'
op|','
number|'2'
op|','
number|'0'
op|')'
op|','
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
string|'"setup.py"'
op|':'
string|'"import WORDSINSTALL"'
op|','
nl|'\n'
string|'"README"'
op|':'
string|'"WORDS!"'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|'"plugins"'
op|':'
op|'{'
string|'"twisted_web.py"'
op|':'
string|'"import WEBPLUG"'
op|','
nl|'\n'
string|'"twisted_words.py"'
op|':'
string|'"import WORDPLUG"'
op|','
nl|'\n'
string|'"twisted_web2.py"'
op|':'
string|'"import WEB2"'
op|','
nl|'\n'
string|'"twisted_vfs.py"'
op|':'
string|'"import VFS"'
op|','
nl|'\n'
string|'"twisted_yay.py"'
op|':'
string|'"import YAY"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"doc"'
op|':'
op|'{'
string|'"web2"'
op|':'
op|'{'
string|'"excluded!"'
op|':'
string|'"yay"'
op|'}'
op|','
nl|'\n'
string|'"vfs"'
op|':'
op|'{'
string|'"unrelated"'
op|':'
string|'"whatever"'
op|'}'
op|','
nl|'\n'
string|'"core"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"template.tpl"'
op|':'
name|'self'
op|'.'
name|'template'
op|'}'
op|','
nl|'\n'
string|'"index.xhtml"'
op|':'
name|'coreIndexInput'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'twistedStructure'
op|'='
op|'{'
nl|'\n'
string|'"README"'
op|':'
string|'"Twisted"'
op|','
nl|'\n'
string|'"unrelated"'
op|':'
string|'"x"'
op|','
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"setup.py"'
op|':'
string|'"import toplevel"'
op|','
nl|'\n'
string|'"bin"'
op|':'
op|'{'
string|'"twistd"'
op|':'
string|'"TWISTD"'
op|','
nl|'\n'
string|'"words"'
op|':'
op|'{'
string|'"im"'
op|':'
string|'"import im"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"twisted"'
op|':'
nl|'\n'
op|'{'
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
string|'"setup.py"'
op|':'
string|'"import TOPINSTALL"'
op|','
nl|'\n'
string|'"README"'
op|':'
string|'"CORE!"'
op|'}'
op|','
nl|'\n'
string|'"_version.py"'
op|':'
name|'genVersion'
op|'('
string|'"twisted"'
op|','
number|'1'
op|','
number|'2'
op|','
number|'0'
op|')'
op|','
nl|'\n'
string|'"words"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WORDS"'
op|','
nl|'\n'
string|'"_version.py"'
op|':'
nl|'\n'
name|'genVersion'
op|'('
string|'"twisted.words"'
op|','
number|'1'
op|','
number|'2'
op|','
number|'0'
op|')'
op|','
nl|'\n'
string|'"topfiles"'
op|':'
op|'{'
string|'"setup.py"'
op|':'
string|'"import WORDSINSTALL"'
op|','
nl|'\n'
string|'"README"'
op|':'
string|'"WORDS!"'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|'"plugins"'
op|':'
op|'{'
string|'"twisted_web.py"'
op|':'
string|'"import WEBPLUG"'
op|','
nl|'\n'
string|'"twisted_words.py"'
op|':'
string|'"import WORDPLUG"'
op|','
nl|'\n'
string|'"twisted_yay.py"'
op|':'
string|'"import YAY"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"doc"'
op|':'
op|'{'
string|'"core"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"template.tpl"'
op|':'
name|'self'
op|'.'
name|'template'
op|'}'
op|','
nl|'\n'
string|'"index.html"'
op|':'
name|'coreIndexOutput'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'coreStructure'
op|'='
op|'{'
nl|'\n'
string|'"setup.py"'
op|':'
string|'"import TOPINSTALL"'
op|','
nl|'\n'
string|'"README"'
op|':'
string|'"CORE!"'
op|','
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"bin"'
op|':'
op|'{'
string|'"twistd"'
op|':'
string|'"TWISTD"'
op|'}'
op|','
nl|'\n'
string|'"twisted"'
op|':'
op|'{'
nl|'\n'
string|'"_version.py"'
op|':'
name|'genVersion'
op|'('
string|'"twisted"'
op|','
number|'1'
op|','
number|'2'
op|','
number|'0'
op|')'
op|','
nl|'\n'
string|'"plugins"'
op|':'
op|'{'
string|'"twisted_yay.py"'
op|':'
string|'"import YAY"'
op|'}'
op|'}'
op|','
nl|'\n'
string|'"doc"'
op|':'
op|'{'
string|'"howto"'
op|':'
op|'{'
string|'"template.tpl"'
op|':'
name|'self'
op|'.'
name|'template'
op|'}'
op|','
nl|'\n'
string|'"index.html"'
op|':'
name|'coreIndexOutput'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'wordsStructure'
op|'='
op|'{'
nl|'\n'
string|'"README"'
op|':'
string|'"WORDS!"'
op|','
nl|'\n'
string|'"LICENSE"'
op|':'
string|'"copyright!"'
op|','
nl|'\n'
string|'"setup.py"'
op|':'
string|'"import WORDSINSTALL"'
op|','
nl|'\n'
string|'"bin"'
op|':'
op|'{'
string|'"im"'
op|':'
string|'"import im"'
op|'}'
op|','
nl|'\n'
string|'"twisted"'
op|':'
nl|'\n'
op|'{'
nl|'\n'
string|'"words"'
op|':'
op|'{'
string|'"__init__.py"'
op|':'
string|'"import WORDS"'
op|','
nl|'\n'
string|'"_version.py"'
op|':'
nl|'\n'
name|'genVersion'
op|'('
string|'"twisted.words"'
op|','
number|'1'
op|','
number|'2'
op|','
number|'0'
op|')'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|'"plugins"'
op|':'
op|'{'
string|'"twisted_words.py"'
op|':'
string|'"import WORDPLUG"'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'createStructure'
op|'('
name|'checkout'
op|','
name|'structure'
op|')'
newline|'\n'
name|'childs'
op|'='
op|'['
name|'x'
op|'.'
name|'path'
name|'for'
name|'x'
name|'in'
name|'checkout'
op|'.'
name|'children'
op|'('
op|')'
op|']'
newline|'\n'
name|'runCommand'
op|'('
op|'['
string|'"svn"'
op|','
string|'"add"'
op|']'
op|'+'
name|'childs'
op|')'
newline|'\n'
name|'runCommand'
op|'('
op|'['
string|'"svn"'
op|','
string|'"commit"'
op|','
name|'checkout'
op|'.'
name|'path'
op|','
string|'"-m"'
op|','
string|'"yay"'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'buildAllTarballs'
op|'('
name|'checkout'
op|','
name|'self'
op|'.'
name|'outputDir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'set'
op|'('
name|'self'
op|'.'
name|'outputDir'
op|'.'
name|'children'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
name|'self'
op|'.'
name|'outputDir'
op|'.'
name|'child'
op|'('
string|'"Twisted-1.2.0.tar.bz2"'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'outputDir'
op|'.'
name|'child'
op|'('
string|'"TwistedCore-1.2.0.tar.bz2"'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'outputDir'
op|'.'
name|'child'
op|'('
string|'"TwistedWords-1.2.0.tar.bz2"'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertExtractedStructure'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'outputDir'
op|'.'
name|'child'
op|'('
string|'"Twisted-1.2.0.tar.bz2"'
op|')'
op|','
nl|'\n'
name|'twistedStructure'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertExtractedStructure'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'outputDir'
op|'.'
name|'child'
op|'('
string|'"TwistedCore-1.2.0.tar.bz2"'
op|')'
op|','
nl|'\n'
name|'coreStructure'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertExtractedStructure'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'outputDir'
op|'.'
name|'child'
op|'('
string|'"TwistedWords-1.2.0.tar.bz2"'
op|')'
op|','
nl|'\n'
name|'wordsStructure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildAllTarballsEnsuresCleanCheckout
dedent|''
name|'def'
name|'test_buildAllTarballsEnsuresCleanCheckout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UncleanWorkingDirectory} is raised by L{buildAllTarballs} when the\n        SVN checkout provided has uncommitted changes.\n        """'
newline|'\n'
name|'repositoryPath'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'repository'
op|'='
name|'FilePath'
op|'('
name|'repositoryPath'
op|')'
newline|'\n'
name|'checkoutPath'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'checkout'
op|'='
name|'FilePath'
op|'('
name|'checkoutPath'
op|')'
newline|'\n'
nl|'\n'
name|'runCommand'
op|'('
op|'['
string|'"svnadmin"'
op|','
string|'"create"'
op|','
name|'repositoryPath'
op|']'
op|')'
newline|'\n'
name|'runCommand'
op|'('
op|'['
string|'"svn"'
op|','
string|'"checkout"'
op|','
string|'"file://"'
op|'+'
name|'repository'
op|'.'
name|'path'
op|','
nl|'\n'
name|'checkout'
op|'.'
name|'path'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'checkout'
op|'.'
name|'child'
op|'('
string|'"foo"'
op|')'
op|'.'
name|'setContent'
op|'('
string|'"whatever"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'UncleanWorkingDirectory'
op|','
nl|'\n'
name|'buildAllTarballs'
op|','
name|'checkout'
op|','
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildAllTarballsEnsuresExistingCheckout
dedent|''
name|'def'
name|'test_buildAllTarballsEnsuresExistingCheckout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{NotWorkingDirectory} is raised by L{buildAllTarballs} when the\n        checkout passed does not exist or is not an SVN checkout.\n        """'
newline|'\n'
name|'checkout'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotWorkingDirectory'
op|','
nl|'\n'
name|'buildAllTarballs'
op|','
nl|'\n'
name|'checkout'
op|','
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'checkout'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotWorkingDirectory'
op|','
nl|'\n'
name|'buildAllTarballs'
op|','
nl|'\n'
name|'checkout'
op|','
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ScriptTests
dedent|''
dedent|''
name|'class'
name|'ScriptTests'
op|'('
name|'BuilderTestsMixin'
op|','
name|'StructureAssertingMixin'
op|','
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the release script functionality.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_testVersionChanging
name|'def'
name|'_testVersionChanging'
op|'('
name|'self'
op|','
name|'major'
op|','
name|'minor'
op|','
name|'micro'
op|','
name|'prerelease'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that L{ChangeVersionsScript.main} calls the version-changing\n        function with the appropriate version data and filesystem path.\n        """'
newline|'\n'
name|'versionUpdates'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|myVersionChanger
name|'def'
name|'myVersionChanger'
op|'('
name|'sourceTree'
op|','
name|'versionTemplate'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'versionUpdates'
op|'.'
name|'append'
op|'('
op|'('
name|'sourceTree'
op|','
name|'versionTemplate'
op|')'
op|')'
newline|'\n'
dedent|''
name|'versionChanger'
op|'='
name|'ChangeVersionsScript'
op|'('
op|')'
newline|'\n'
name|'versionChanger'
op|'.'
name|'changeAllProjectVersions'
op|'='
name|'myVersionChanger'
newline|'\n'
name|'version'
op|'='
string|'"%d.%d.%d"'
op|'%'
op|'('
name|'major'
op|','
name|'minor'
op|','
name|'micro'
op|')'
newline|'\n'
name|'if'
name|'prerelease'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'version'
op|'+='
string|'"pre%d"'
op|'%'
op|'('
name|'prerelease'
op|','
op|')'
newline|'\n'
dedent|''
name|'versionChanger'
op|'.'
name|'main'
op|'('
op|'['
name|'version'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'versionUpdates'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'versionUpdates'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'FilePath'
op|'('
string|'"."'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'versionUpdates'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'major'
op|','
name|'major'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'versionUpdates'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'minor'
op|','
name|'minor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'versionUpdates'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'micro'
op|','
name|'micro'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'versionUpdates'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'prerelease'
op|','
name|'prerelease'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_changeVersions
dedent|''
name|'def'
name|'test_changeVersions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ChangeVersionsScript.main} changes version numbers for all Twisted\n        projects.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testVersionChanging'
op|'('
number|'8'
op|','
number|'2'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_changeVersionsWithPrerelease
dedent|''
name|'def'
name|'test_changeVersionsWithPrerelease'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A prerelease can be specified to L{changeVersionsScript}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testVersionChanging'
op|'('
number|'9'
op|','
number|'2'
op|','
number|'7'
op|','
number|'38'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_defaultChangeVersionsVersionChanger
dedent|''
name|'def'
name|'test_defaultChangeVersionsVersionChanger'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The default implementation of C{changeAllProjectVersions} is\n        L{changeAllProjectVersions}.\n        """'
newline|'\n'
name|'versionChanger'
op|'='
name|'ChangeVersionsScript'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'versionChanger'
op|'.'
name|'changeAllProjectVersions'
op|','
nl|'\n'
name|'changeAllProjectVersions'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_badNumberOfArgumentsToChangeVersionsScript
dedent|''
name|'def'
name|'test_badNumberOfArgumentsToChangeVersionsScript'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{changeVersionsScript} raises SystemExit when the wrong number of\n        arguments are passed.\n        """'
newline|'\n'
name|'versionChanger'
op|'='
name|'ChangeVersionsScript'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'versionChanger'
op|'.'
name|'main'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_tooManyDotsToChangeVersionsScript
dedent|''
name|'def'
name|'test_tooManyDotsToChangeVersionsScript'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{changeVersionsScript} raises SystemExit when there are the wrong\n        number of segments in the version number passed.\n        """'
newline|'\n'
name|'versionChanger'
op|'='
name|'ChangeVersionsScript'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'versionChanger'
op|'.'
name|'main'
op|','
nl|'\n'
op|'['
string|'"3.2.1.0"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nonIntPartsToChangeVersionsScript
dedent|''
name|'def'
name|'test_nonIntPartsToChangeVersionsScript'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{changeVersionsScript} raises SystemExit when the version number isn\'t\n        made out of numbers.\n        """'
newline|'\n'
name|'versionChanger'
op|'='
name|'ChangeVersionsScript'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'versionChanger'
op|'.'
name|'main'
op|','
nl|'\n'
op|'['
string|'"my united.states.of prewhatever"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildTarballsScript
dedent|''
name|'def'
name|'test_buildTarballsScript'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BuildTarballsScript.main} invokes L{buildAllTarballs} with\n        L{FilePath} instances representing the paths passed to it.\n        """'
newline|'\n'
name|'builds'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|myBuilder
name|'def'
name|'myBuilder'
op|'('
name|'checkout'
op|','
name|'destination'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'builds'
op|'.'
name|'append'
op|'('
op|'('
name|'checkout'
op|','
name|'destination'
op|')'
op|')'
newline|'\n'
dedent|''
name|'tarballBuilder'
op|'='
name|'BuildTarballsScript'
op|'('
op|')'
newline|'\n'
name|'tarballBuilder'
op|'.'
name|'buildAllTarballs'
op|'='
name|'myBuilder'
newline|'\n'
nl|'\n'
name|'tarballBuilder'
op|'.'
name|'main'
op|'('
op|'['
string|'"checkoutDir"'
op|','
string|'"destinationDir"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'builds'
op|','
nl|'\n'
op|'['
op|'('
name|'FilePath'
op|'('
string|'"checkoutDir"'
op|')'
op|','
name|'FilePath'
op|'('
string|'"destinationDir"'
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_defaultBuildTarballsScriptBuilder
dedent|''
name|'def'
name|'test_defaultBuildTarballsScriptBuilder'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The default implementation of L{BuildTarballsScript.buildAllTarballs}\n        is L{buildAllTarballs}.\n        """'
newline|'\n'
name|'tarballBuilder'
op|'='
name|'BuildTarballsScript'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tarballBuilder'
op|'.'
name|'buildAllTarballs'
op|','
name|'buildAllTarballs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_badNumberOfArgumentsToBuildTarballs
dedent|''
name|'def'
name|'test_badNumberOfArgumentsToBuildTarballs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BuildTarballsScript.main} raises SystemExit when the wrong number of\n        arguments are passed.\n        """'
newline|'\n'
name|'tarballBuilder'
op|'='
name|'BuildTarballsScript'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'tarballBuilder'
op|'.'
name|'main'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_badNumberOfArgumentsToBuildNews
dedent|''
name|'def'
name|'test_badNumberOfArgumentsToBuildNews'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{NewsBuilder.main} raises L{SystemExit} when other than 1 argument is\n        passed to it.\n        """'
newline|'\n'
name|'newsBuilder'
op|'='
name|'NewsBuilder'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'newsBuilder'
op|'.'
name|'main'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'newsBuilder'
op|'.'
name|'main'
op|','
op|'['
string|'"hello"'
op|','
string|'"world"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildNews
dedent|''
name|'def'
name|'test_buildNews'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{NewsBuilder.main} calls L{NewsBuilder.buildAll} with a L{FilePath}\n        instance constructed from the path passed to it.\n        """'
newline|'\n'
name|'builds'
op|'='
op|'['
op|']'
newline|'\n'
name|'newsBuilder'
op|'='
name|'NewsBuilder'
op|'('
op|')'
newline|'\n'
name|'newsBuilder'
op|'.'
name|'buildAll'
op|'='
name|'builds'
op|'.'
name|'append'
newline|'\n'
name|'newsBuilder'
op|'.'
name|'main'
op|'('
op|'['
string|'"/foo/bar/baz"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'builds'
op|','
op|'['
name|'FilePath'
op|'('
string|'"/foo/bar/baz"'
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for parts of our release automation system.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'distutils'
op|'.'
name|'core'
name|'import'
name|'Distribution'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'dist'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'dist'
name|'import'
name|'get_setup_args'
op|','
name|'ConditionalExtension'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SetupTest
name|'class'
name|'SetupTest'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{get_setup_args}.\n    """'
newline|'\n'
DECL|member|test_conditionalExtensions
name|'def'
name|'test_conditionalExtensions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Passing C{conditionalExtensions} as a list of L{ConditionalExtension}\n        objects to get_setup_args inserts a custom build_ext into the result\n        which knows how to check whether they should be \n        """'
newline|'\n'
name|'good_ext'
op|'='
name|'ConditionalExtension'
op|'('
string|'"whatever"'
op|','
op|'['
string|'"whatever.c"'
op|']'
op|','
nl|'\n'
name|'condition'
op|'='
name|'lambda'
name|'b'
op|':'
name|'True'
op|')'
newline|'\n'
name|'bad_ext'
op|'='
name|'ConditionalExtension'
op|'('
string|'"whatever"'
op|','
op|'['
string|'"whatever.c"'
op|']'
op|','
nl|'\n'
name|'condition'
op|'='
name|'lambda'
name|'b'
op|':'
name|'False'
op|')'
newline|'\n'
name|'args'
op|'='
name|'get_setup_args'
op|'('
name|'conditionalExtensions'
op|'='
op|'['
name|'good_ext'
op|','
name|'bad_ext'
op|']'
op|')'
newline|'\n'
comment|"# ext_modules should be set even though it's not used.  See comment"
nl|'\n'
comment|'# in get_setup_args'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'args'
op|'['
string|'"ext_modules"'
op|']'
op|','
op|'['
name|'good_ext'
op|','
name|'bad_ext'
op|']'
op|')'
newline|'\n'
name|'cmdclass'
op|'='
name|'args'
op|'['
string|'"cmdclass"'
op|']'
newline|'\n'
name|'build_ext'
op|'='
name|'cmdclass'
op|'['
string|'"build_ext"'
op|']'
newline|'\n'
name|'builder'
op|'='
name|'build_ext'
op|'('
name|'Distribution'
op|'('
op|')'
op|')'
newline|'\n'
name|'builder'
op|'.'
name|'prepare_extensions'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'builder'
op|'.'
name|'extensions'
op|','
op|'['
name|'good_ext'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_win32Definition
dedent|''
name|'def'
name|'test_win32Definition'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When building on Windows NT, the WIN32 macro will be defined as 1.\n        """'
newline|'\n'
name|'ext'
op|'='
name|'ConditionalExtension'
op|'('
string|'"whatever"'
op|','
op|'['
string|'"whatever.c"'
op|']'
op|','
nl|'\n'
name|'define_macros'
op|'='
op|'['
op|'('
string|'"whatever"'
op|','
number|'2'
op|')'
op|']'
op|')'
newline|'\n'
name|'args'
op|'='
name|'get_setup_args'
op|'('
name|'conditionalExtensions'
op|'='
op|'['
name|'ext'
op|']'
op|')'
newline|'\n'
name|'builder'
op|'='
name|'args'
op|'['
string|'"cmdclass"'
op|']'
op|'['
string|'"build_ext"'
op|']'
op|'('
name|'Distribution'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'os'
op|','
string|'"name"'
op|','
string|'"nt"'
op|')'
newline|'\n'
name|'builder'
op|'.'
name|'prepare_extensions'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ext'
op|'.'
name|'define_macros'
op|','
op|'['
op|'('
string|'"whatever"'
op|','
number|'2'
op|')'
op|','
op|'('
string|'"WIN32"'
op|','
number|'1'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|GetVersionTest
dedent|''
dedent|''
name|'class'
name|'GetVersionTest'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{dist.getVersion}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'dirname'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'dirname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getVersionCore
dedent|''
name|'def'
name|'test_getVersionCore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that getting the version of core reads from the\n        [base]/_version.py file.\n        """'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'dirname'
op|','
string|'"_version.py"'
op|')'
op|','
string|'"w"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|'"""\nfrom twisted.python import versions\nversion = versions.Version("twisted", 0, 1, 2)\n"""'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'dist'
op|'.'
name|'getVersion'
op|'('
string|'"core"'
op|','
name|'base'
op|'='
name|'self'
op|'.'
name|'dirname'
op|')'
op|','
string|'"0.1.2"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getVersionOther
dedent|''
name|'def'
name|'test_getVersionOther'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that getting the version of a non-core project reads from\n        the [base]/[projname]/_version.py file.\n        """'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'dirname'
op|','
string|'"blat"'
op|')'
op|')'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'dirname'
op|','
string|'"blat"'
op|','
string|'"_version.py"'
op|')'
op|','
string|'"w"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|'"""\nfrom twisted.python import versions\nversion = versions.Version("twisted.blat", 9, 8, 10)\n"""'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'dist'
op|'.'
name|'getVersion'
op|'('
string|'"blat"'
op|','
name|'base'
op|'='
name|'self'
op|'.'
name|'dirname'
op|')'
op|','
string|'"9.8.10"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GetScriptsTest
dedent|''
dedent|''
name|'class'
name|'GetScriptsTest'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_scriptsInSVN
indent|'    '
name|'def'
name|'test_scriptsInSVN'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        getScripts should return the scripts associated with a project\n        in the context of Twisted SVN.\n        """'
newline|'\n'
name|'basedir'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'basedir'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'basedir'
op|','
string|"'bin'"
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'basedir'
op|','
string|"'bin'"
op|','
string|"'proj'"
op|')'
op|')'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'basedir'
op|','
string|"'bin'"
op|','
string|"'proj'"
op|','
string|"'exy'"
op|')'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|"'yay'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'scripts'
op|'='
name|'dist'
op|'.'
name|'getScripts'
op|'('
string|"'proj'"
op|','
name|'basedir'
op|'='
name|'basedir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'scripts'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'scripts'
op|'['
number|'0'
op|']'
op|')'
op|','
string|"'exy'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_scriptsInRelease
dedent|''
name|'def'
name|'test_scriptsInRelease'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        getScripts should return the scripts associated with a project\n        in the context of a released subproject tarball.\n        """'
newline|'\n'
name|'basedir'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'basedir'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'basedir'
op|','
string|"'bin'"
op|')'
op|')'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'basedir'
op|','
string|"'bin'"
op|','
string|"'exy'"
op|')'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|"'yay'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'scripts'
op|'='
name|'dist'
op|'.'
name|'getScripts'
op|'('
string|"'proj'"
op|','
name|'basedir'
op|'='
name|'basedir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'scripts'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'scripts'
op|'['
number|'0'
op|']'
op|')'
op|','
string|"'exy'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noScriptsInSVN
dedent|''
name|'def'
name|'test_noScriptsInSVN'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When calling getScripts for a project which doesn\'t actually\n        have any scripts, in the context of an SVN checkout, an\n        empty list should be returned.\n        """'
newline|'\n'
name|'basedir'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'basedir'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'basedir'
op|','
string|"'bin'"
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'basedir'
op|','
string|"'bin'"
op|','
string|"'otherproj'"
op|')'
op|')'
newline|'\n'
name|'scripts'
op|'='
name|'dist'
op|'.'
name|'getScripts'
op|'('
string|"'noscripts'"
op|','
name|'basedir'
op|'='
name|'basedir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'scripts'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getScriptsTopLevel
dedent|''
name|'def'
name|'test_getScriptsTopLevel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Passing the empty string to getScripts returns scripts that are (only)\n        in the top level bin directory.\n        """'
newline|'\n'
name|'basedir'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'basedir'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'bindir'
op|'='
name|'basedir'
op|'.'
name|'child'
op|'('
string|'"bin"'
op|')'
newline|'\n'
name|'bindir'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'included'
op|'='
name|'bindir'
op|'.'
name|'child'
op|'('
string|'"included"'
op|')'
newline|'\n'
name|'included'
op|'.'
name|'setContent'
op|'('
string|'"yay included"'
op|')'
newline|'\n'
name|'subdir'
op|'='
name|'bindir'
op|'.'
name|'child'
op|'('
string|'"subdir"'
op|')'
newline|'\n'
name|'subdir'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'subdir'
op|'.'
name|'child'
op|'('
string|'"not-included"'
op|')'
op|'.'
name|'setContent'
op|'('
string|'"not included"'
op|')'
newline|'\n'
nl|'\n'
name|'scripts'
op|'='
name|'dist'
op|'.'
name|'getScripts'
op|'('
string|'""'
op|','
name|'basedir'
op|'='
name|'basedir'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'scripts'
op|','
op|'['
name|'included'
op|'.'
name|'path'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noScriptsInSubproject
dedent|''
name|'def'
name|'test_noScriptsInSubproject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When calling getScripts for a project which doesn\'t actually\n        have any scripts in the context of that project\'s individual\n        project structure, an empty list should be returned.\n        """'
newline|'\n'
name|'basedir'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'basedir'
op|')'
newline|'\n'
name|'scripts'
op|'='
name|'dist'
op|'.'
name|'getScripts'
op|'('
string|"'noscripts'"
op|','
name|'basedir'
op|'='
name|'basedir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'scripts'
op|','
op|'['
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

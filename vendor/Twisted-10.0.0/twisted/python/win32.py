begin_unit
comment|'# -*- test-case-name: twisted.python.test.test_win32 -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nWin32 utilities.\n\nSee also twisted.python.shortcut.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'exceptions'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'win32api'
newline|'\n'
name|'import'
name|'win32con'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'runtime'
name|'import'
name|'platform'
newline|'\n'
nl|'\n'
comment|'# http://msdn.microsoft.com/library/default.asp?url=/library/en-us/debug/base/system_error_codes.asp'
nl|'\n'
DECL|variable|ERROR_FILE_NOT_FOUND
name|'ERROR_FILE_NOT_FOUND'
op|'='
number|'2'
newline|'\n'
DECL|variable|ERROR_PATH_NOT_FOUND
name|'ERROR_PATH_NOT_FOUND'
op|'='
number|'3'
newline|'\n'
DECL|variable|ERROR_INVALID_NAME
name|'ERROR_INVALID_NAME'
op|'='
number|'123'
newline|'\n'
DECL|variable|ERROR_DIRECTORY
name|'ERROR_DIRECTORY'
op|'='
number|'267'
newline|'\n'
nl|'\n'
DECL|function|_determineWindowsError
name|'def'
name|'_determineWindowsError'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Determine which WindowsError name to export.\n    """'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'exceptions'
op|','
string|"'WindowsError'"
op|','
name|'FakeWindowsError'
op|')'
newline|'\n'
nl|'\n'
DECL|class|FakeWindowsError
dedent|''
name|'class'
name|'FakeWindowsError'
op|'('
name|'OSError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Stand-in for sometimes-builtin exception on platforms for which it\n    is missing.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|WindowsError
dedent|''
name|'WindowsError'
op|'='
name|'_determineWindowsError'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# XXX fix this to use python's builtin _winreg?"
nl|'\n'
nl|'\n'
DECL|function|getProgramsMenuPath
name|'def'
name|'getProgramsMenuPath'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the path to the Programs menu.\n\n    Probably will break on non-US Windows.\n\n    @returns: the filesystem location of the common Start Menu->Programs.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'platform'
op|'.'
name|'isWinNT'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"C:\\\\Windows\\\\Start Menu\\\\Programs"'
newline|'\n'
dedent|''
name|'keyname'
op|'='
string|"'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Shell Folders'"
newline|'\n'
name|'hShellFolders'
op|'='
name|'win32api'
op|'.'
name|'RegOpenKeyEx'
op|'('
name|'win32con'
op|'.'
name|'HKEY_LOCAL_MACHINE'
op|','
nl|'\n'
name|'keyname'
op|','
number|'0'
op|','
name|'win32con'
op|'.'
name|'KEY_READ'
op|')'
newline|'\n'
name|'return'
name|'win32api'
op|'.'
name|'RegQueryValueEx'
op|'('
name|'hShellFolders'
op|','
string|"'Common Programs'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|getProgramFilesPath
dedent|''
name|'def'
name|'getProgramFilesPath'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the path to the Program Files folder."""'
newline|'\n'
name|'keyname'
op|'='
string|"'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion'"
newline|'\n'
name|'currentV'
op|'='
name|'win32api'
op|'.'
name|'RegOpenKeyEx'
op|'('
name|'win32con'
op|'.'
name|'HKEY_LOCAL_MACHINE'
op|','
nl|'\n'
name|'keyname'
op|','
number|'0'
op|','
name|'win32con'
op|'.'
name|'KEY_READ'
op|')'
newline|'\n'
name|'return'
name|'win32api'
op|'.'
name|'RegQueryValueEx'
op|'('
name|'currentV'
op|','
string|"'ProgramFilesDir'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|_cmdLineQuoteRe
dedent|''
name|'_cmdLineQuoteRe'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r\'(\\\\*)"\''
op|')'
newline|'\n'
DECL|variable|_cmdLineQuoteRe2
name|'_cmdLineQuoteRe2'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'(\\\\+)\\Z'"
op|')'
newline|'\n'
DECL|function|cmdLineQuote
name|'def'
name|'cmdLineQuote'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Internal method for quoting a single command-line argument.\n\n    @param s: an unquoted string that you want to quote so that something that\n        does cmd.exe-style unquoting will interpret it as a single argument,\n        even if it contains spaces.\n    @type s: C{str}\n\n    @return: a quoted string.\n    @rtype: C{str}\n    """'
newline|'\n'
name|'quote'
op|'='
op|'('
op|'('
string|'" "'
name|'in'
name|'s'
op|')'
name|'or'
op|'('
string|'"\\t"'
name|'in'
name|'s'
op|')'
name|'or'
op|'('
string|'\'"\''
name|'in'
name|'s'
op|')'
name|'or'
name|'s'
op|'=='
string|"''"
op|')'
name|'and'
string|'\'"\''
name|'or'
string|"''"
newline|'\n'
name|'return'
name|'quote'
op|'+'
name|'_cmdLineQuoteRe2'
op|'.'
name|'sub'
op|'('
string|'r"\\1\\1"'
op|','
name|'_cmdLineQuoteRe'
op|'.'
name|'sub'
op|'('
string|'r\'\\1\\1\\\\"\''
op|','
name|'s'
op|')'
op|')'
op|'+'
name|'quote'
newline|'\n'
nl|'\n'
DECL|function|quoteArguments
dedent|''
name|'def'
name|'quoteArguments'
op|'('
name|'arguments'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Quote an iterable of command-line arguments for passing to CreateProcess or\n    a similar API.  This allows the list passed to C{reactor.spawnProcess} to\n    match the child process\'s C{sys.argv} properly.\n\n    @param arglist: an iterable of C{str}, each unquoted.\n\n    @return: a single string, with the given sequence quoted as necessary.\n    """'
newline|'\n'
name|'return'
string|"' '"
op|'.'
name|'join'
op|'('
op|'['
name|'cmdLineQuote'
op|'('
name|'a'
op|')'
name|'for'
name|'a'
name|'in'
name|'arguments'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_ErrorFormatter
dedent|''
name|'class'
name|'_ErrorFormatter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Formatter for Windows error messages.\n\n    @ivar winError: A callable which takes one integer error number argument\n        and returns an L{exceptions.WindowsError} instance for that error (like\n        L{ctypes.WinError}).\n\n    @ivar formatMessage: A callable which takes one integer error number\n        argument and returns a C{str} giving the message for that error (like\n        L{win32api.FormatMessage}).\n\n    @ivar errorTab: A mapping from integer error numbers to C{str} messages\n        which correspond to those erorrs (like L{socket.errorTab}).\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'WinError'
op|','
name|'FormatMessage'
op|','
name|'errorTab'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'winError'
op|'='
name|'WinError'
newline|'\n'
name|'self'
op|'.'
name|'formatMessage'
op|'='
name|'FormatMessage'
newline|'\n'
name|'self'
op|'.'
name|'errorTab'
op|'='
name|'errorTab'
newline|'\n'
nl|'\n'
DECL|member|fromEnvironment
dedent|''
name|'def'
name|'fromEnvironment'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get as many of the platform-specific error translation objects as\n        possible and return an instance of C{cls} created with them.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'ctypes'
name|'import'
name|'WinError'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'WinError'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'win32api'
name|'import'
name|'FormatMessage'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'FormatMessage'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'socket'
name|'import'
name|'errorTab'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'errorTab'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'cls'
op|'('
name|'WinError'
op|','
name|'FormatMessage'
op|','
name|'errorTab'
op|')'
newline|'\n'
DECL|variable|fromEnvironment
dedent|''
name|'fromEnvironment'
op|'='
name|'classmethod'
op|'('
name|'fromEnvironment'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|formatError
name|'def'
name|'formatError'
op|'('
name|'self'
op|','
name|'errorcode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns the string associated with a Windows error message, such as the\n        ones found in socket.error.\n\n        Attempts direct lookup against the win32 API via ctypes and then\n        pywin32 if available), then in the error table in the socket module,\n        then finally defaulting to C{os.strerror}.\n\n        @param errorcode: the Windows error code\n        @type errorcode: C{int}\n\n        @return: The error message string\n        @rtype: C{str}\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'winError'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'winError'
op|'('
name|'errorcode'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'formatMessage'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'formatMessage'
op|'('
name|'errorcode'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'errorTab'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'self'
op|'.'
name|'errorTab'
op|'.'
name|'get'
op|'('
name|'errorcode'
op|')'
newline|'\n'
name|'if'
name|'result'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'result'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'os'
op|'.'
name|'strerror'
op|'('
name|'errorcode'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|formatError
dedent|''
dedent|''
name|'formatError'
op|'='
name|'_ErrorFormatter'
op|'.'
name|'fromEnvironment'
op|'('
op|')'
op|'.'
name|'formatError'
newline|'\n'
endmarker|''
end_unit

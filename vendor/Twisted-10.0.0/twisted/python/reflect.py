begin_unit
comment|'# -*- test-case-name: twisted.test.test_reflect -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nStandardized versions of various cool and/or strange things that you can do\nwith Python\'s reflection capabilities.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'types'
newline|'\n'
name|'import'
name|'pickle'
newline|'\n'
name|'import'
name|'traceback'
newline|'\n'
name|'import'
name|'weakref'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
name|'import'
name|'new'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'collections'
name|'import'
name|'deque'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|deque
indent|'    '
name|'deque'
op|'='
name|'list'
newline|'\n'
nl|'\n'
DECL|variable|RegexType
dedent|''
name|'RegexType'
op|'='
name|'type'
op|'('
name|'re'
op|'.'
name|'compile'
op|'('
string|'""'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'StringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'unsignedID'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'deprecate'
name|'import'
name|'deprecated'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'deprecate'
name|'import'
name|'_fullyQualifiedName'
name|'as'
name|'fullyQualifiedName'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'versions'
name|'import'
name|'Version'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Settable
name|'class'
name|'Settable'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mixin class for syntactic sugar.  Lets you assign attributes by\n    calling with keyword arguments; for example, C{x(a=b,c=d,y=z)} is the\n    same as C{x.a=b;x.c=d;x.y=z}.  The most useful place for this is\n    where you don\'t want to name a variable, but you do want to set\n    some attributes; for example, C{X()(y=z,a=b)}.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'('
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'kw'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AccessorType
dedent|''
dedent|''
name|'class'
name|'AccessorType'
op|'('
name|'type'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Metaclass that generates properties automatically.\n\n    This is for Python 2.2 and up.\n\n    Using this metaclass for your class will give you explicit accessor\n    methods; a method called set_foo, will automatically create a property\n    \'foo\' that uses set_foo as a setter method. Same for get_foo and del_foo.\n\n    Note that this will only work on methods that are present on class\n    creation. If you add methods after the class is defined they will not\n    automatically become properties. Likewise, class attributes will only\n    be used if they are present upon class creation, and no getter function\n    was set - if a getter is present, the class attribute will be ignored.\n\n    This is a 2.2-only alternative to the Accessor mixin - just set in your\n    class definition::\n\n        __metaclass__ = AccessorType\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'bases'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'type'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'bases'
op|','
name|'d'
op|')'
newline|'\n'
name|'accessors'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'prefixs'
op|'='
op|'['
string|'"get_"'
op|','
string|'"set_"'
op|','
string|'"del_"'
op|']'
newline|'\n'
name|'for'
name|'k'
name|'in'
name|'d'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'v'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'k'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'k'
op|'.'
name|'startswith'
op|'('
name|'prefixs'
op|'['
name|'i'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'accessors'
op|'.'
name|'setdefault'
op|'('
name|'k'
op|'['
number|'4'
op|':'
op|']'
op|','
op|'['
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|')'
op|'['
name|'i'
op|']'
op|'='
name|'v'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'for'
name|'name'
op|','
op|'('
name|'getter'
op|','
name|'setter'
op|','
name|'deler'
op|')'
name|'in'
name|'accessors'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# create default behaviours for the property - if we leave'
nl|'\n'
comment|"# the getter as None we won't be able to getattr, etc.."
nl|'\n'
indent|'            '
name|'if'
name|'getter'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'value'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
DECL|function|getter
name|'def'
name|'getter'
op|'('
name|'this'
op|','
name|'value'
op|'='
name|'value'
op|','
name|'name'
op|'='
name|'name'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'name'
name|'in'
name|'this'
op|'.'
name|'__dict__'
op|':'
newline|'\n'
indent|'                            '
name|'return'
name|'this'
op|'.'
name|'__dict__'
op|'['
name|'name'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'return'
name|'value'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|function|getter
indent|'                    '
name|'def'
name|'getter'
op|'('
name|'this'
op|','
name|'name'
op|'='
name|'name'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'name'
name|'in'
name|'this'
op|'.'
name|'__dict__'
op|':'
newline|'\n'
indent|'                            '
name|'return'
name|'this'
op|'.'
name|'__dict__'
op|'['
name|'name'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'raise'
name|'AttributeError'
op|'('
string|'"no such attribute %r"'
op|'%'
name|'name'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'if'
name|'setter'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|function|setter
indent|'                '
name|'def'
name|'setter'
op|'('
name|'this'
op|','
name|'value'
op|','
name|'name'
op|'='
name|'name'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'this'
op|'.'
name|'__dict__'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'deler'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|function|deler
indent|'                '
name|'def'
name|'deler'
op|'('
name|'this'
op|','
name|'name'
op|'='
name|'name'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'del'
name|'this'
op|'.'
name|'__dict__'
op|'['
name|'name'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'setattr'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'property'
op|'('
name|'getter'
op|','
name|'setter'
op|','
name|'deler'
op|','
string|'""'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PropertyAccessor
dedent|''
dedent|''
dedent|''
name|'class'
name|'PropertyAccessor'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A mixin class for Python 2.2 that uses AccessorType.\n\n    This provides compatability with the pre-2.2 Accessor mixin, up\n    to a point.\n\n    Extending this class will give you explicit accessor methods; a\n    method called set_foo, for example, is the same as an if statement\n    in __setattr__ looking for \'foo\'.  Same for get_foo and del_foo.\n\n    There are also reallyDel and reallySet methods, so you can\n    override specifics in subclasses without clobbering __setattr__\n    and __getattr__, or using non-2.1 compatible code.\n\n    There is are incompatibilities with Accessor - accessor\n    methods added after class creation will *not* be detected. OTOH,\n    this method is probably way faster.\n\n    In addition, class attributes will only be used if no getter\n    was defined, and instance attributes will not override getter methods\n    whereas in original Accessor the class attribute or instance attribute\n    would override the getter method.\n    """'
newline|'\n'
comment|'# addendum to above:'
nl|'\n'
comment|"# The behaviour of Accessor is wrong IMHO, and I've found bugs"
nl|'\n'
comment|'# caused by it.'
nl|'\n'
comment|'#  -- itamar'
nl|'\n'
nl|'\n'
DECL|variable|__metaclass__
name|'__metaclass__'
op|'='
name|'AccessorType'
newline|'\n'
nl|'\n'
DECL|member|reallySet
name|'def'
name|'reallySet'
op|'('
name|'self'
op|','
name|'k'
op|','
name|'v'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__dict__'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
nl|'\n'
DECL|member|reallyDel
dedent|''
name|'def'
name|'reallyDel'
op|'('
name|'self'
op|','
name|'k'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'self'
op|'.'
name|'__dict__'
op|'['
name|'k'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Accessor
dedent|''
dedent|''
name|'class'
name|'Accessor'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Extending this class will give you explicit accessor methods; a\n    method called C{set_foo}, for example, is the same as an if statement\n    in L{__setattr__} looking for C{\'foo\'}.  Same for C{get_foo} and\n    C{del_foo}.  There are also L{reallyDel} and L{reallySet} methods,\n    so you can override specifics in subclasses without clobbering\n    L{__setattr__} and L{__getattr__}.\n\n    This implementation is for Python 2.1.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__setattr__
name|'def'
name|'__setattr__'
op|'('
name|'self'
op|','
name|'k'
op|','
name|'v'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kstring'
op|'='
string|"'set_%s'"
op|'%'
name|'k'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
name|'kstring'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'kstring'
op|')'
op|'('
name|'v'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reallySet'
op|'('
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'k'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kstring'
op|'='
string|"'get_%s'"
op|'%'
name|'k'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
name|'kstring'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'kstring'
op|')'
op|'('
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'AttributeError'
op|'('
string|'"%s instance has no accessor for: %s"'
op|'%'
op|'('
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|','
name|'k'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__delattr__
dedent|''
name|'def'
name|'__delattr__'
op|'('
name|'self'
op|','
name|'k'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kstring'
op|'='
string|"'del_%s'"
op|'%'
name|'k'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
name|'kstring'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'getattr'
op|'('
name|'self'
op|','
name|'kstring'
op|')'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'reallyDel'
op|'('
name|'k'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reallySet
dedent|''
name|'def'
name|'reallySet'
op|'('
name|'self'
op|','
name|'k'
op|','
name|'v'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        *actually* set self.k to v without incurring side-effects.\n        This is a hook to be overridden by subclasses.\n        """'
newline|'\n'
name|'if'
name|'k'
op|'=='
string|'"__dict__"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'update'
op|'('
name|'v'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__dict__'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
nl|'\n'
DECL|member|reallyDel
dedent|''
dedent|''
name|'def'
name|'reallyDel'
op|'('
name|'self'
op|','
name|'k'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        *actually* del self.k without incurring side-effects.  This is a\n        hook to be overridden by subclasses.\n        """'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'__dict__'
op|'['
name|'k'
op|']'
newline|'\n'
nl|'\n'
comment|'# just in case'
nl|'\n'
DECL|variable|OriginalAccessor
dedent|''
dedent|''
name|'OriginalAccessor'
op|'='
name|'Accessor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Summer
name|'class'
name|'Summer'
op|'('
name|'Accessor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Extend from this class to get the capability to maintain \'related\n    sums\'.  Have a tuple in your class like the following::\n\n        sums=((\'amount\',\'credit\',\'credit_total\'),\n              (\'amount\',\'debit\',\'debit_total\'))\n\n    and the \'credit_total\' member of the \'credit\' member of self will\n    always be incremented when the \'amount\' member of self is\n    incremented, similiarly for the debit versions.\n    """'
newline|'\n'
nl|'\n'
DECL|member|reallySet
name|'def'
name|'reallySet'
op|'('
name|'self'
op|','
name|'k'
op|','
name|'v'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"This method does the work."'
newline|'\n'
name|'for'
name|'sum'
name|'in'
name|'self'
op|'.'
name|'sums'
op|':'
newline|'\n'
indent|'            '
name|'attr'
op|'='
name|'sum'
op|'['
number|'0'
op|']'
newline|'\n'
name|'obj'
op|'='
name|'sum'
op|'['
number|'1'
op|']'
newline|'\n'
name|'objattr'
op|'='
name|'sum'
op|'['
number|'2'
op|']'
newline|'\n'
name|'if'
name|'k'
op|'=='
name|'attr'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'oldval'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'attr'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                    '
name|'oldval'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'diff'
op|'='
name|'v'
op|'-'
name|'oldval'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'ob'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'obj'
op|')'
newline|'\n'
name|'if'
name|'ob'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                        '
name|'try'
op|':'
name|'oldobjval'
op|'='
name|'getattr'
op|'('
name|'ob'
op|','
name|'objattr'
op|')'
newline|'\n'
name|'except'
op|':'
name|'oldobjval'
op|'='
number|'0.0'
newline|'\n'
name|'setattr'
op|'('
name|'ob'
op|','
name|'objattr'
op|','
name|'oldobjval'
op|'+'
name|'diff'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'elif'
name|'k'
op|'=='
name|'obj'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
name|'attr'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'x'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'attr'
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'self'
op|','
name|'attr'
op|','
number|'0'
op|')'
newline|'\n'
name|'y'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'k'
op|')'
newline|'\n'
name|'Accessor'
op|'.'
name|'reallySet'
op|'('
name|'self'
op|','
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'self'
op|','
name|'attr'
op|','
name|'x'
op|')'
newline|'\n'
name|'Accessor'
op|'.'
name|'reallySet'
op|'('
name|'self'
op|','
name|'y'
op|','
name|'v'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'Accessor'
op|'.'
name|'reallySet'
op|'('
name|'self'
op|','
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QueueMethod
dedent|''
dedent|''
name|'class'
name|'QueueMethod'
op|':'
newline|'\n'
indent|'    '
string|'""" I represent a method that doesn\'t exist yet."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'calls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'calls'
op|'='
name|'calls'
newline|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'calls'
op|'.'
name|'append'
op|'('
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|funcinfo
dedent|''
dedent|''
name|'def'
name|'funcinfo'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    this is more documentation for myself than useful code.\n    """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"[v2.5] Use inspect.getargspec instead of twisted.python.reflect.funcinfo"'
op|','
nl|'\n'
name|'DeprecationWarning'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'code'
op|'='
name|'function'
op|'.'
name|'func_code'
newline|'\n'
name|'name'
op|'='
name|'function'
op|'.'
name|'func_name'
newline|'\n'
name|'argc'
op|'='
name|'code'
op|'.'
name|'co_argcount'
newline|'\n'
name|'argv'
op|'='
name|'code'
op|'.'
name|'co_varnames'
op|'['
op|':'
name|'argc'
op|']'
newline|'\n'
name|'defaults'
op|'='
name|'function'
op|'.'
name|'func_defaults'
newline|'\n'
nl|'\n'
name|'out'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'out'
op|'.'
name|'append'
op|'('
string|"'The function %s accepts %s arguments'"
op|'%'
op|'('
name|'name'
op|','
name|'argc'
op|')'
op|')'
newline|'\n'
name|'if'
name|'defaults'
op|':'
newline|'\n'
indent|'        '
name|'required'
op|'='
name|'argc'
op|'-'
name|'len'
op|'('
name|'defaults'
op|')'
newline|'\n'
name|'out'
op|'.'
name|'append'
op|'('
string|"'It requires %s arguments'"
op|'%'
name|'required'
op|')'
newline|'\n'
name|'out'
op|'.'
name|'append'
op|'('
string|"'The arguments required are: %s'"
op|'%'
name|'argv'
op|'['
op|':'
name|'required'
op|']'
op|')'
newline|'\n'
name|'out'
op|'.'
name|'append'
op|'('
string|"'additional arguments are:'"
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'argc'
op|'-'
name|'required'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'j'
op|'='
name|'i'
op|'+'
name|'required'
newline|'\n'
name|'out'
op|'.'
name|'append'
op|'('
string|"'%s which has a default of'"
op|'%'
op|'('
name|'argv'
op|'['
name|'j'
op|']'
op|','
name|'defaults'
op|'['
name|'i'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'out'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|ISNT
dedent|''
name|'ISNT'
op|'='
number|'0'
newline|'\n'
DECL|variable|WAS
name|'WAS'
op|'='
number|'1'
newline|'\n'
DECL|variable|IS
name|'IS'
op|'='
number|'2'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fullFuncName
name|'def'
name|'fullFuncName'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'qualName'
op|'='
op|'('
name|'str'
op|'('
name|'pickle'
op|'.'
name|'whichmodule'
op|'('
name|'func'
op|','
name|'func'
op|'.'
name|'__name__'
op|')'
op|')'
op|'+'
string|"'.'"
op|'+'
name|'func'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'if'
name|'namedObject'
op|'('
name|'qualName'
op|')'
name|'is'
name|'not'
name|'func'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'Exception'
op|'('
string|'"Couldn\'t find %s as %s."'
op|'%'
op|'('
name|'func'
op|','
name|'qualName'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'qualName'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|qual
dedent|''
name|'def'
name|'qual'
op|'('
name|'clazz'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return full import path of a class."""'
newline|'\n'
name|'return'
name|'clazz'
op|'.'
name|'__module__'
op|'+'
string|"'.'"
op|'+'
name|'clazz'
op|'.'
name|'__name__'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|getcurrent
dedent|''
name|'def'
name|'getcurrent'
op|'('
name|'clazz'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'assert'
name|'type'
op|'('
name|'clazz'
op|')'
op|'=='
name|'types'
op|'.'
name|'ClassType'
op|','
string|"'must be a class...'"
newline|'\n'
name|'module'
op|'='
name|'namedModule'
op|'('
name|'clazz'
op|'.'
name|'__module__'
op|')'
newline|'\n'
name|'currclass'
op|'='
name|'getattr'
op|'('
name|'module'
op|','
name|'clazz'
op|'.'
name|'__name__'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'currclass'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'clazz'
newline|'\n'
dedent|''
name|'return'
name|'currclass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|getClass
dedent|''
name|'def'
name|'getClass'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the class or type of object \'obj\'.\n    Returns sensible result for oldstyle and newstyle instances and types."""'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'obj'
op|','
string|"'__class__'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'obj'
op|'.'
name|'__class__'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'type'
op|'('
name|'obj'
op|')'
newline|'\n'
nl|'\n'
comment|'# class graph nonsense'
nl|'\n'
nl|'\n'
comment|'# I should really have a better name for this...'
nl|'\n'
DECL|function|isinst
dedent|''
dedent|''
name|'def'
name|'isinst'
op|'('
name|'inst'
op|','
name|'clazz'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'type'
op|'('
name|'inst'
op|')'
op|'!='
name|'types'
op|'.'
name|'InstanceType'
name|'or'
name|'type'
op|'('
name|'clazz'
op|')'
op|'!='
name|'types'
op|'.'
name|'ClassType'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'isinstance'
op|'('
name|'inst'
op|','
name|'clazz'
op|')'
newline|'\n'
dedent|''
name|'cl'
op|'='
name|'inst'
op|'.'
name|'__class__'
newline|'\n'
name|'cl2'
op|'='
name|'getcurrent'
op|'('
name|'cl'
op|')'
newline|'\n'
name|'clazz'
op|'='
name|'getcurrent'
op|'('
name|'clazz'
op|')'
newline|'\n'
name|'if'
name|'issubclass'
op|'('
name|'cl2'
op|','
name|'clazz'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'cl'
op|'=='
name|'cl2'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'WAS'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'inst'
op|'.'
name|'__class__'
op|'='
name|'cl2'
newline|'\n'
name|'return'
name|'IS'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'ISNT'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|namedModule
dedent|''
dedent|''
name|'def'
name|'namedModule'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a module given its name."""'
newline|'\n'
name|'topLevel'
op|'='
name|'__import__'
op|'('
name|'name'
op|')'
newline|'\n'
name|'packages'
op|'='
name|'name'
op|'.'
name|'split'
op|'('
string|'"."'
op|')'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'m'
op|'='
name|'topLevel'
newline|'\n'
name|'for'
name|'p'
name|'in'
name|'packages'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'='
name|'getattr'
op|'('
name|'m'
op|','
name|'p'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'m'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|namedObject
dedent|''
name|'def'
name|'namedObject'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get a fully named module-global object.\n    """'
newline|'\n'
name|'classSplit'
op|'='
name|'name'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'module'
op|'='
name|'namedModule'
op|'('
string|"'.'"
op|'.'
name|'join'
op|'('
name|'classSplit'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'module'
op|','
name|'classSplit'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|namedClass
dedent|''
name|'namedClass'
op|'='
name|'namedObject'
comment|'# backwards compat'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_NoModuleFound
name|'class'
name|'_NoModuleFound'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    No module was found because none exists.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidName
dedent|''
name|'class'
name|'InvalidName'
op|'('
name|'ValueError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The given name is not a dot-separated list of Python objects.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ModuleNotFound
dedent|''
name|'class'
name|'ModuleNotFound'
op|'('
name|'InvalidName'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The module associated with the given name doesn\'t exist and it can\'t be\n    imported.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ObjectNotFound
dedent|''
name|'class'
name|'ObjectNotFound'
op|'('
name|'InvalidName'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The object associated with the given name doesn\'t exist and it can\'t be\n    imported.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_importAndCheckStack
dedent|''
name|'def'
name|'_importAndCheckStack'
op|'('
name|'importName'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Import the given name as a module, then walk the stack to determine whether\n    the failure was the module not existing, or some code in the module (for\n    example a dependent import) failing.  This can be helpful to determine\n    whether any actual application code was run.  For example, to distiguish\n    administrative error (entering the wrong module name), from programmer\n    error (writing buggy code in a module that fails to import).\n\n    @raise Exception: if something bad happens.  This can be any type of\n    exception, since nobody knows what loading some arbitrary code might do.\n\n    @raise _NoModuleFound: if no module was found.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'__import__'
op|'('
name|'importName'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'excType'
op|','
name|'excValue'
op|','
name|'excTraceback'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'while'
name|'excTraceback'
op|':'
newline|'\n'
indent|'                '
name|'execName'
op|'='
name|'excTraceback'
op|'.'
name|'tb_frame'
op|'.'
name|'f_globals'
op|'['
string|'"__name__"'
op|']'
newline|'\n'
name|'if'
op|'('
name|'execName'
name|'is'
name|'None'
name|'or'
comment|'# python 2.4+, post-cleanup'
nl|'\n'
name|'execName'
op|'=='
name|'importName'
op|')'
op|':'
comment|'# python 2.3, no cleanup'
newline|'\n'
indent|'                    '
name|'raise'
name|'excType'
op|','
name|'excValue'
op|','
name|'excTraceback'
newline|'\n'
dedent|''
name|'excTraceback'
op|'='
name|'excTraceback'
op|'.'
name|'tb_next'
newline|'\n'
dedent|''
name|'raise'
name|'_NoModuleFound'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
comment|'# Necessary for cleaning up modules in 2.3.'
nl|'\n'
indent|'        '
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'pop'
op|'('
name|'importName'
op|','
name|'None'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|namedAny
dedent|''
dedent|''
name|'def'
name|'namedAny'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Retrieve a Python object by its fully qualified name from the global Python\n    module namespace.  The first part of the name, that describes a module,\n    will be discovered and imported.  Each subsequent part of the name is\n    treated as the name of an attribute of the object specified by all of the\n    name which came before it.  For example, the fully-qualified name of this\n    object is \'twisted.python.reflect.namedAny\'.\n\n    @type name: L{str}\n    @param name: The name of the object to return.\n\n    @raise InvalidName: If the name is an empty string, starts or ends with\n        a \'.\', or is otherwise syntactically incorrect.\n\n    @raise ModuleNotFound: If the name is syntactically correct but the\n        module it specifies cannot be imported because it does not appear to\n        exist.\n\n    @raise ObjectNotFound: If the name is syntactically correct, includes at\n        least one \'.\', but the module it specifies cannot be imported because\n        it does not appear to exist.\n\n    @raise AttributeError: If an attribute of an object along the way cannot be\n        accessed, or a module along the way is not found.\n\n    @return: the Python object identified by \'name\'.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'name'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'InvalidName'
op|'('
string|"'Empty module name'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'names'
op|'='
name|'name'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
nl|'\n'
comment|"# if the name starts or ends with a '.' or contains '..', the __import__"
nl|'\n'
comment|"# will raise an 'Empty module name' error. This will provide a better error"
nl|'\n'
comment|'# message.'
nl|'\n'
name|'if'
string|"''"
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'InvalidName'
op|'('
nl|'\n'
string|'"name must be a string giving a \'.\'-separated list of Python "'
nl|'\n'
string|'"identifiers, not %r"'
op|'%'
op|'('
name|'name'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'topLevelPackage'
op|'='
name|'None'
newline|'\n'
name|'moduleNames'
op|'='
name|'names'
op|'['
op|':'
op|']'
newline|'\n'
name|'while'
name|'not'
name|'topLevelPackage'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'moduleNames'
op|':'
newline|'\n'
indent|'            '
name|'trialname'
op|'='
string|"'.'"
op|'.'
name|'join'
op|'('
name|'moduleNames'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'topLevelPackage'
op|'='
name|'_importAndCheckStack'
op|'('
name|'trialname'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'_NoModuleFound'
op|':'
newline|'\n'
indent|'                '
name|'moduleNames'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'names'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ModuleNotFound'
op|'('
string|'"No module named %r"'
op|'%'
op|'('
name|'name'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ObjectNotFound'
op|'('
string|"'%r does not name an object'"
op|'%'
op|'('
name|'name'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'obj'
op|'='
name|'topLevelPackage'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'names'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'getattr'
op|'('
name|'obj'
op|','
name|'n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'obj'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|macro
dedent|''
name|'def'
name|'macro'
op|'('
name|'name'
op|','
name|'filename'
op|','
name|'source'
op|','
op|'**'
name|'identifiers'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""macro(name, source, **identifiers)\n\n    This allows you to create macro-like behaviors in python.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'identifiers'
op|'.'
name|'has_key'
op|'('
string|"'name'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'identifiers'
op|'['
string|"'name'"
op|']'
op|'='
name|'name'
newline|'\n'
dedent|''
name|'source'
op|'='
name|'source'
op|'%'
name|'identifiers'
newline|'\n'
name|'codeplace'
op|'='
string|'"<%s (macro)>"'
op|'%'
name|'filename'
newline|'\n'
name|'code'
op|'='
name|'compile'
op|'('
name|'source'
op|','
name|'codeplace'
op|','
string|"'exec'"
op|')'
newline|'\n'
nl|'\n'
comment|'# shield your eyes!'
nl|'\n'
name|'sm'
op|'='
name|'sys'
op|'.'
name|'modules'
newline|'\n'
name|'tprm'
op|'='
string|'"twisted.python.reflect.macros"'
newline|'\n'
name|'if'
name|'not'
name|'sm'
op|'.'
name|'has_key'
op|'('
name|'tprm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'macros'
op|'='
name|'new'
op|'.'
name|'module'
op|'('
name|'tprm'
op|')'
newline|'\n'
name|'sm'
op|'['
name|'tprm'
op|']'
op|'='
name|'macros'
newline|'\n'
name|'macros'
op|'.'
name|'count'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'macros'
op|'='
name|'sm'
op|'['
name|'tprm'
op|']'
newline|'\n'
name|'macros'
op|'.'
name|'count'
op|'+='
number|'1'
newline|'\n'
name|'macroname'
op|'='
string|"'macro_'"
op|'+'
name|'str'
op|'('
name|'macros'
op|'.'
name|'count'
op|')'
newline|'\n'
name|'tprmm'
op|'='
name|'tprm'
op|'+'
string|"'.'"
op|'+'
name|'macroname'
newline|'\n'
name|'mymod'
op|'='
name|'new'
op|'.'
name|'module'
op|'('
name|'tprmm'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'modules'
op|'['
name|'tprmm'
op|']'
op|'='
name|'mymod'
newline|'\n'
name|'setattr'
op|'('
name|'macros'
op|','
name|'macroname'
op|','
name|'mymod'
op|')'
newline|'\n'
name|'dict'
op|'='
name|'mymod'
op|'.'
name|'__dict__'
newline|'\n'
nl|'\n'
comment|'# Before we go on, I guess I should explain why I just did that.  Basically'
nl|'\n'
comment|"# it's a gross hack to get epydoc to work right, but the general idea is"
nl|'\n'
comment|'# that it will be a useful aid in debugging in _any_ app which expects'
nl|'\n'
comment|'# sys.modules to have the same globals as some function.  For example, it'
nl|'\n'
comment|'# would be useful if you were foolishly trying to pickle a wrapped function'
nl|'\n'
comment|'# directly from a class that had been hooked.'
nl|'\n'
nl|'\n'
name|'exec'
name|'code'
name|'in'
name|'dict'
op|','
name|'dict'
newline|'\n'
name|'return'
name|'dict'
op|'['
name|'name'
op|']'
newline|'\n'
DECL|variable|macro
dedent|''
name|'macro'
op|'='
name|'deprecated'
op|'('
name|'Version'
op|'('
string|'"Twisted"'
op|','
number|'8'
op|','
number|'2'
op|','
number|'0'
op|')'
op|')'
op|'('
name|'macro'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_determineClass
name|'def'
name|'_determineClass'
op|'('
name|'x'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'x'
op|'.'
name|'__class__'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'type'
op|'('
name|'x'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_determineClassName
dedent|''
dedent|''
name|'def'
name|'_determineClassName'
op|'('
name|'x'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'c'
op|'='
name|'_determineClass'
op|'('
name|'x'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'c'
op|'.'
name|'__name__'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'str'
op|'('
name|'c'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'<BROKEN CLASS AT 0x%x>'"
op|'%'
name|'unsignedID'
op|'('
name|'c'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_safeFormat
dedent|''
dedent|''
dedent|''
name|'def'
name|'_safeFormat'
op|'('
name|'formatter'
op|','
name|'o'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper function for L{safe_repr} and L{safe_str}.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'formatter'
op|'('
name|'o'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'        '
name|'io'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'traceback'
op|'.'
name|'print_exc'
op|'('
name|'file'
op|'='
name|'io'
op|')'
newline|'\n'
name|'className'
op|'='
name|'_determineClassName'
op|'('
name|'o'
op|')'
newline|'\n'
name|'tbValue'
op|'='
name|'io'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'return'
string|'"<%s instance at 0x%x with %s error:\\n %s>"'
op|'%'
op|'('
nl|'\n'
name|'className'
op|','
name|'unsignedID'
op|'('
name|'o'
op|')'
op|','
name|'formatter'
op|'.'
name|'__name__'
op|','
name|'tbValue'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|safe_repr
dedent|''
dedent|''
name|'def'
name|'safe_repr'
op|'('
name|'o'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    safe_repr(anything) -> string\n\n    Returns a string representation of an object, or a string containing a\n    traceback, if that object\'s __repr__ raised an exception.\n    """'
newline|'\n'
name|'return'
name|'_safeFormat'
op|'('
name|'repr'
op|','
name|'o'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|safe_str
dedent|''
name|'def'
name|'safe_str'
op|'('
name|'o'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    safe_str(anything) -> string\n\n    Returns a string representation of an object, or a string containing a\n    traceback, if that object\'s __str__ raised an exception.\n    """'
newline|'\n'
name|'return'
name|'_safeFormat'
op|'('
name|'str'
op|','
name|'o'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'##the following were factored out of usage'
nl|'\n'
nl|'\n'
DECL|function|allYourBase
dedent|''
name|'def'
name|'allYourBase'
op|'('
name|'classObj'
op|','
name|'baseClass'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""allYourBase(classObj, baseClass=None) -> list of all base\n    classes that are subclasses of baseClass, unless it is None,\n    in which case all bases will be added.\n    """'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'accumulateBases'
op|'('
name|'classObj'
op|','
name|'l'
op|','
name|'baseClass'
op|')'
newline|'\n'
name|'return'
name|'l'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|accumulateBases
dedent|''
name|'def'
name|'accumulateBases'
op|'('
name|'classObj'
op|','
name|'l'
op|','
name|'baseClass'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'base'
name|'in'
name|'classObj'
op|'.'
name|'__bases__'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'baseClass'
name|'is'
name|'None'
name|'or'
name|'issubclass'
op|'('
name|'base'
op|','
name|'baseClass'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'.'
name|'append'
op|'('
name|'base'
op|')'
newline|'\n'
dedent|''
name|'accumulateBases'
op|'('
name|'base'
op|','
name|'l'
op|','
name|'baseClass'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|prefixedMethodNames
dedent|''
dedent|''
name|'def'
name|'prefixedMethodNames'
op|'('
name|'classObj'
op|','
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A list of method names with a given prefix in a given class.\n    """'
newline|'\n'
name|'dct'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'addMethodNamesToDict'
op|'('
name|'classObj'
op|','
name|'dct'
op|','
name|'prefix'
op|')'
newline|'\n'
name|'return'
name|'dct'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|addMethodNamesToDict
dedent|''
name|'def'
name|'addMethodNamesToDict'
op|'('
name|'classObj'
op|','
name|'dict'
op|','
name|'prefix'
op|','
name|'baseClass'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    addMethodNamesToDict(classObj, dict, prefix, baseClass=None) -> dict\n    this goes through \'classObj\' (and its bases) and puts method names\n    starting with \'prefix\' in \'dict\' with a value of 1. if baseClass isn\'t\n    None, methods will only be added if classObj is-a baseClass\n\n    If the class in question has the methods \'prefix_methodname\' and\n    \'prefix_methodname2\', the resulting dict should look something like:\n    {"methodname": 1, "methodname2": 1}.\n    """'
newline|'\n'
name|'for'
name|'base'
name|'in'
name|'classObj'
op|'.'
name|'__bases__'
op|':'
newline|'\n'
indent|'        '
name|'addMethodNamesToDict'
op|'('
name|'base'
op|','
name|'dict'
op|','
name|'prefix'
op|','
name|'baseClass'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'baseClass'
name|'is'
name|'None'
name|'or'
name|'baseClass'
name|'in'
name|'classObj'
op|'.'
name|'__bases__'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'name'
op|','
name|'method'
name|'in'
name|'classObj'
op|'.'
name|'__dict__'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'optName'
op|'='
name|'name'
op|'['
name|'len'
op|'('
name|'prefix'
op|')'
op|':'
op|']'
newline|'\n'
name|'if'
op|'('
op|'('
name|'type'
op|'('
name|'method'
op|')'
name|'is'
name|'types'
op|'.'
name|'FunctionType'
op|')'
nl|'\n'
name|'and'
op|'('
name|'name'
op|'['
op|':'
name|'len'
op|'('
name|'prefix'
op|')'
op|']'
op|'=='
name|'prefix'
op|')'
nl|'\n'
name|'and'
op|'('
name|'len'
op|'('
name|'optName'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'dict'
op|'['
name|'optName'
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|prefixedMethods
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'prefixedMethods'
op|'('
name|'obj'
op|','
name|'prefix'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A list of methods with a given prefix on a given instance.\n    """'
newline|'\n'
name|'dct'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'accumulateMethods'
op|'('
name|'obj'
op|','
name|'dct'
op|','
name|'prefix'
op|')'
newline|'\n'
name|'return'
name|'dct'
op|'.'
name|'values'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|accumulateMethods
dedent|''
name|'def'
name|'accumulateMethods'
op|'('
name|'obj'
op|','
name|'dict'
op|','
name|'prefix'
op|'='
string|"''"
op|','
name|'curClass'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""accumulateMethods(instance, dict, prefix)\n    I recurse through the bases of instance.__class__, and add methods\n    beginning with \'prefix\' to \'dict\', in the form of\n    {\'methodname\':*instance*method_object}.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'curClass'
op|':'
newline|'\n'
indent|'        '
name|'curClass'
op|'='
name|'obj'
op|'.'
name|'__class__'
newline|'\n'
dedent|''
name|'for'
name|'base'
name|'in'
name|'curClass'
op|'.'
name|'__bases__'
op|':'
newline|'\n'
indent|'        '
name|'accumulateMethods'
op|'('
name|'obj'
op|','
name|'dict'
op|','
name|'prefix'
op|','
name|'base'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'name'
op|','
name|'method'
name|'in'
name|'curClass'
op|'.'
name|'__dict__'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'optName'
op|'='
name|'name'
op|'['
name|'len'
op|'('
name|'prefix'
op|')'
op|':'
op|']'
newline|'\n'
name|'if'
op|'('
op|'('
name|'type'
op|'('
name|'method'
op|')'
name|'is'
name|'types'
op|'.'
name|'FunctionType'
op|')'
nl|'\n'
name|'and'
op|'('
name|'name'
op|'['
op|':'
name|'len'
op|'('
name|'prefix'
op|')'
op|']'
op|'=='
name|'prefix'
op|')'
nl|'\n'
name|'and'
op|'('
name|'len'
op|'('
name|'optName'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dict'
op|'['
name|'optName'
op|']'
op|'='
name|'getattr'
op|'('
name|'obj'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|accumulateClassDict
dedent|''
dedent|''
dedent|''
name|'def'
name|'accumulateClassDict'
op|'('
name|'classObj'
op|','
name|'attr'
op|','
name|'adict'
op|','
name|'baseClass'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Accumulate all attributes of a given name in a class heirarchy into a single dictionary.\n\n    Assuming all class attributes of this name are dictionaries.\n    If any of the dictionaries being accumulated have the same key, the\n    one highest in the class heirarchy wins.\n    (XXX: If \\"higest\\" means \\"closest to the starting class\\".)\n\n    Ex::\n\n    | class Soy:\n    |   properties = {\\"taste\\": \\"bland\\"}\n    |\n    | class Plant:\n    |   properties = {\\"colour\\": \\"green\\"}\n    |\n    | class Seaweed(Plant):\n    |   pass\n    |\n    | class Lunch(Soy, Seaweed):\n    |   properties = {\\"vegan\\": 1 }\n    |\n    | dct = {}\n    |\n    | accumulateClassDict(Lunch, \\"properties\\", dct)\n    |\n    | print dct\n\n    {\\"taste\\": \\"bland\\", \\"colour\\": \\"green\\", \\"vegan\\": 1}\n    """'
newline|'\n'
name|'for'
name|'base'
name|'in'
name|'classObj'
op|'.'
name|'__bases__'
op|':'
newline|'\n'
indent|'        '
name|'accumulateClassDict'
op|'('
name|'base'
op|','
name|'attr'
op|','
name|'adict'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'baseClass'
name|'is'
name|'None'
name|'or'
name|'baseClass'
name|'in'
name|'classObj'
op|'.'
name|'__bases__'
op|':'
newline|'\n'
indent|'        '
name|'adict'
op|'.'
name|'update'
op|'('
name|'classObj'
op|'.'
name|'__dict__'
op|'.'
name|'get'
op|'('
name|'attr'
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|accumulateClassList
dedent|''
dedent|''
name|'def'
name|'accumulateClassList'
op|'('
name|'classObj'
op|','
name|'attr'
op|','
name|'listObj'
op|','
name|'baseClass'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Accumulate all attributes of a given name in a class heirarchy into a single list.\n\n    Assuming all class attributes of this name are lists.\n    """'
newline|'\n'
name|'for'
name|'base'
name|'in'
name|'classObj'
op|'.'
name|'__bases__'
op|':'
newline|'\n'
indent|'        '
name|'accumulateClassList'
op|'('
name|'base'
op|','
name|'attr'
op|','
name|'listObj'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'baseClass'
name|'is'
name|'None'
name|'or'
name|'baseClass'
name|'in'
name|'classObj'
op|'.'
name|'__bases__'
op|':'
newline|'\n'
indent|'        '
name|'listObj'
op|'.'
name|'extend'
op|'('
name|'classObj'
op|'.'
name|'__dict__'
op|'.'
name|'get'
op|'('
name|'attr'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|isSame
dedent|''
dedent|''
name|'def'
name|'isSame'
op|'('
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'('
name|'a'
name|'is'
name|'b'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|isLike
dedent|''
name|'def'
name|'isLike'
op|'('
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'('
name|'a'
op|'=='
name|'b'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|modgrep
dedent|''
name|'def'
name|'modgrep'
op|'('
name|'goal'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'objgrep'
op|'('
name|'sys'
op|'.'
name|'modules'
op|','
name|'goal'
op|','
name|'isLike'
op|','
string|"'sys.modules'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|isOfType
dedent|''
name|'def'
name|'isOfType'
op|'('
name|'start'
op|','
name|'goal'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'('
op|'('
name|'type'
op|'('
name|'start'
op|')'
name|'is'
name|'goal'
op|')'
name|'or'
nl|'\n'
op|'('
name|'isinstance'
op|'('
name|'start'
op|','
name|'types'
op|'.'
name|'InstanceType'
op|')'
name|'and'
nl|'\n'
name|'start'
op|'.'
name|'__class__'
name|'is'
name|'goal'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|findInstances
dedent|''
name|'def'
name|'findInstances'
op|'('
name|'start'
op|','
name|'t'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'objgrep'
op|'('
name|'start'
op|','
name|'t'
op|','
name|'isOfType'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|objgrep
dedent|''
name|'def'
name|'objgrep'
op|'('
name|'start'
op|','
name|'goal'
op|','
name|'eq'
op|'='
name|'isLike'
op|','
name|'path'
op|'='
string|"''"
op|','
name|'paths'
op|'='
name|'None'
op|','
name|'seen'
op|'='
name|'None'
op|','
name|'showUnknowns'
op|'='
number|'0'
op|','
name|'maxDepth'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''An insanely CPU-intensive process for finding stuff.\n    '''"
newline|'\n'
name|'if'
name|'paths'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'paths'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'if'
name|'seen'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'seen'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'eq'
op|'('
name|'start'
op|','
name|'goal'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'paths'
op|'.'
name|'append'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'id'
op|'('
name|'start'
op|')'
name|'in'
name|'seen'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'seen'
op|'['
name|'id'
op|'('
name|'start'
op|')'
op|']'
name|'is'
name|'start'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'maxDepth'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'maxDepth'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'maxDepth'
op|'-='
number|'1'
newline|'\n'
dedent|''
name|'seen'
op|'['
name|'id'
op|'('
name|'start'
op|')'
op|']'
op|'='
name|'start'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'start'
op|','
name|'types'
op|'.'
name|'DictionaryType'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'start'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'objgrep'
op|'('
name|'k'
op|','
name|'goal'
op|','
name|'eq'
op|','
name|'path'
op|'+'
string|"'{'"
op|'+'
name|'repr'
op|'('
name|'v'
op|')'
op|'+'
string|"'}'"
op|','
name|'paths'
op|','
name|'seen'
op|','
name|'showUnknowns'
op|','
name|'maxDepth'
op|')'
newline|'\n'
name|'objgrep'
op|'('
name|'v'
op|','
name|'goal'
op|','
name|'eq'
op|','
name|'path'
op|'+'
string|"'['"
op|'+'
name|'repr'
op|'('
name|'k'
op|')'
op|'+'
string|"']'"
op|','
name|'paths'
op|','
name|'seen'
op|','
name|'showUnknowns'
op|','
name|'maxDepth'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'start'
op|','
op|'('
name|'list'
op|','
name|'tuple'
op|','
name|'deque'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'idx'
name|'in'
name|'xrange'
op|'('
name|'len'
op|'('
name|'start'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'objgrep'
op|'('
name|'start'
op|'['
name|'idx'
op|']'
op|','
name|'goal'
op|','
name|'eq'
op|','
name|'path'
op|'+'
string|"'['"
op|'+'
name|'str'
op|'('
name|'idx'
op|')'
op|'+'
string|"']'"
op|','
name|'paths'
op|','
name|'seen'
op|','
name|'showUnknowns'
op|','
name|'maxDepth'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'start'
op|','
name|'types'
op|'.'
name|'MethodType'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'objgrep'
op|'('
name|'start'
op|'.'
name|'im_self'
op|','
name|'goal'
op|','
name|'eq'
op|','
name|'path'
op|'+'
string|"'.im_self'"
op|','
name|'paths'
op|','
name|'seen'
op|','
name|'showUnknowns'
op|','
name|'maxDepth'
op|')'
newline|'\n'
name|'objgrep'
op|'('
name|'start'
op|'.'
name|'im_func'
op|','
name|'goal'
op|','
name|'eq'
op|','
name|'path'
op|'+'
string|"'.im_func'"
op|','
name|'paths'
op|','
name|'seen'
op|','
name|'showUnknowns'
op|','
name|'maxDepth'
op|')'
newline|'\n'
name|'objgrep'
op|'('
name|'start'
op|'.'
name|'im_class'
op|','
name|'goal'
op|','
name|'eq'
op|','
name|'path'
op|'+'
string|"'.im_class'"
op|','
name|'paths'
op|','
name|'seen'
op|','
name|'showUnknowns'
op|','
name|'maxDepth'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'hasattr'
op|'('
name|'start'
op|','
string|"'__dict__'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'start'
op|'.'
name|'__dict__'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'objgrep'
op|'('
name|'v'
op|','
name|'goal'
op|','
name|'eq'
op|','
name|'path'
op|'+'
string|"'.'"
op|'+'
name|'k'
op|','
name|'paths'
op|','
name|'seen'
op|','
name|'showUnknowns'
op|','
name|'maxDepth'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'start'
op|','
name|'types'
op|'.'
name|'InstanceType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'objgrep'
op|'('
name|'start'
op|'.'
name|'__class__'
op|','
name|'goal'
op|','
name|'eq'
op|','
name|'path'
op|'+'
string|"'.__class__'"
op|','
name|'paths'
op|','
name|'seen'
op|','
name|'showUnknowns'
op|','
name|'maxDepth'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'start'
op|','
name|'weakref'
op|'.'
name|'ReferenceType'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'objgrep'
op|'('
name|'start'
op|'('
op|')'
op|','
name|'goal'
op|','
name|'eq'
op|','
name|'path'
op|'+'
string|"'()'"
op|','
name|'paths'
op|','
name|'seen'
op|','
name|'showUnknowns'
op|','
name|'maxDepth'
op|')'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'isinstance'
op|'('
name|'start'
op|','
name|'types'
op|'.'
name|'StringTypes'
op|'+'
nl|'\n'
op|'('
name|'types'
op|'.'
name|'IntType'
op|','
name|'types'
op|'.'
name|'FunctionType'
op|','
nl|'\n'
name|'types'
op|'.'
name|'BuiltinMethodType'
op|','
name|'RegexType'
op|','
name|'types'
op|'.'
name|'FloatType'
op|','
nl|'\n'
name|'types'
op|'.'
name|'NoneType'
op|','
name|'types'
op|'.'
name|'FileType'
op|')'
op|')'
name|'or'
nl|'\n'
name|'type'
op|'('
name|'start'
op|')'
op|'.'
name|'__name__'
name|'in'
op|'('
string|"'wrapper_descriptor'"
op|','
string|"'method_descriptor'"
op|','
nl|'\n'
string|"'member_descriptor'"
op|','
string|"'getset_descriptor'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'elif'
name|'showUnknowns'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|"'unknown type'"
op|','
name|'type'
op|'('
name|'start'
op|')'
op|','
name|'start'
newline|'\n'
dedent|''
name|'return'
name|'paths'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|filenameToModuleName
dedent|''
name|'def'
name|'filenameToModuleName'
op|'('
name|'fn'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert a name in the filesystem to the name of the Python module it is.\n\n    This is agressive about getting a module name back from a file; it will\n    always return a string.  Agressive means \'sometimes wrong\'; it won\'t look\n    at the Python path or try to do any error checking: don\'t use this method\n    unless you already know that the filename you\'re talking about is a Python\n    module.\n    """'
newline|'\n'
name|'fullName'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'fn'
op|')'
newline|'\n'
name|'base'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'fn'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'base'
op|':'
newline|'\n'
comment|'# this happens when fn ends with a path separator, just skit it'
nl|'\n'
indent|'        '
name|'base'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'fn'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'modName'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'base'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'fullName'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'fullName'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'fullName'
op|','
string|'"__init__.py"'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'modName'
op|'='
string|'"%s.%s"'
op|'%'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'fullName'
op|')'
op|','
name|'modName'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'modName'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
name|'__all__'
op|'='
op|'['
nl|'\n'
string|"'InvalidName'"
op|','
string|"'ModuleNotFound'"
op|','
string|"'ObjectNotFound'"
op|','
nl|'\n'
nl|'\n'
string|"'ISNT'"
op|','
string|"'WAS'"
op|','
string|"'IS'"
op|','
nl|'\n'
nl|'\n'
string|"'Settable'"
op|','
string|"'AccessorType'"
op|','
string|"'PropertyAccessor'"
op|','
string|"'Accessor'"
op|','
string|"'Summer'"
op|','
nl|'\n'
string|"'QueueMethod'"
op|','
string|"'OriginalAccessor'"
op|','
nl|'\n'
nl|'\n'
string|"'funcinfo'"
op|','
string|"'fullFuncName'"
op|','
string|"'qual'"
op|','
string|"'getcurrent'"
op|','
string|"'getClass'"
op|','
string|"'isinst'"
op|','
nl|'\n'
string|"'namedModule'"
op|','
string|"'namedObject'"
op|','
string|"'namedClass'"
op|','
string|"'namedAny'"
op|','
string|"'macro'"
op|','
nl|'\n'
string|"'safe_repr'"
op|','
string|"'safe_str'"
op|','
string|"'allYourBase'"
op|','
string|"'accumulateBases'"
op|','
nl|'\n'
string|"'prefixedMethodNames'"
op|','
string|"'addMethodNamesToDict'"
op|','
string|"'prefixedMethods'"
op|','
nl|'\n'
string|"'accumulateClassDict'"
op|','
string|"'accumulateClassList'"
op|','
string|"'isSame'"
op|','
string|"'isLike'"
op|','
nl|'\n'
string|"'modgrep'"
op|','
string|"'isOfType'"
op|','
string|"'findInstances'"
op|','
string|"'objgrep'"
op|','
string|"'filenameToModuleName'"
op|','
nl|'\n'
string|"'fullyQualifiedName'"
op|']'
newline|'\n'
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.python.test.test_release -*-'
nl|'\n'
comment|'# Copyright (c) 2007-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTwisted\'s automated release system.\n\nThis module is only for use within Twisted\'s release system. If you are anyone\nelse, do not use it. The interface and behaviour will change without notice.\n\nOnly Linux is supported by this code.  It should not be used by any tools\nwhich must run on multiple platforms (eg the setup.py script).\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'textwrap'
newline|'\n'
name|'from'
name|'datetime'
name|'import'
name|'date'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'from'
name|'tempfile'
name|'import'
name|'mkdtemp'
newline|'\n'
name|'import'
name|'tarfile'
newline|'\n'
nl|'\n'
comment|"# Popen4 isn't available on Windows.  BookBuilder won't work on Windows, but"
nl|'\n'
comment|"# we don't care. -exarkun"
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'popen2'
name|'import'
name|'Popen4'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|Popen4
indent|'    '
name|'Popen4'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'versions'
name|'import'
name|'Version'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'dist'
name|'import'
name|'twisted_subprojects'
newline|'\n'
nl|'\n'
comment|"# This import is an example of why you shouldn't use this module unless you're"
nl|'\n'
comment|'# radix'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'lore'
op|'.'
name|'scripts'
name|'import'
name|'lore'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# The offset between a year and the corresponding major version number.'
nl|'\n'
DECL|variable|VERSION_OFFSET
dedent|''
name|'VERSION_OFFSET'
op|'='
number|'2000'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|runCommand
name|'def'
name|'runCommand'
op|'('
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Execute a vector of arguments.\n\n    @type args: C{list} of C{str}\n    @param args: A list of arguments, the first of which will be used as the\n        executable to run.\n\n    @rtype: C{str}\n    @return: All of the standard output.\n\n    @raise CommandFailed: when the program exited with a non-0 exit code.\n    """'
newline|'\n'
name|'process'
op|'='
name|'Popen4'
op|'('
name|'args'
op|')'
newline|'\n'
name|'stdout'
op|'='
name|'process'
op|'.'
name|'fromchild'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'exitCode'
op|'='
name|'process'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'WIFSIGNALED'
op|'('
name|'exitCode'
op|')'
name|'or'
name|'os'
op|'.'
name|'WEXITSTATUS'
op|'('
name|'exitCode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'CommandFailed'
op|'('
name|'exitCode'
op|','
name|'stdout'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'stdout'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommandFailed
dedent|''
name|'class'
name|'CommandFailed'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when a child process exits unsuccessfully.\n\n    @type exitCode: C{int}\n    @ivar exitCode: The exit code for the child process.\n\n    @type output: C{str}\n    @ivar output: The bytes read from stdout and stderr of the child process.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'exitCode'
op|','
name|'output'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Exception'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'exitCode'
op|','
name|'output'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'exitCode'
op|'='
name|'exitCode'
newline|'\n'
name|'self'
op|'.'
name|'output'
op|'='
name|'output'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_changeVersionInFile
dedent|''
dedent|''
name|'def'
name|'_changeVersionInFile'
op|'('
name|'old'
op|','
name|'new'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Replace the C{old} version number with the C{new} one in the given\n    C{filename}.\n    """'
newline|'\n'
name|'replaceInFile'
op|'('
name|'filename'
op|','
op|'{'
name|'old'
op|'.'
name|'base'
op|'('
op|')'
op|':'
name|'new'
op|'.'
name|'base'
op|'('
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|getNextVersion
dedent|''
name|'def'
name|'getNextVersion'
op|'('
name|'version'
op|','
name|'now'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Calculate the version number for a new release of Twisted based on\n    the previous version number.\n\n    @param version: The previous version number.\n    @param now: (optional) The current date.\n    """'
newline|'\n'
comment|'# XXX: This has no way of incrementing the patch number. Currently, we'
nl|'\n'
comment|"# don't need it. See bug 2915. Jonathan Lange, 2007-11-20."
nl|'\n'
name|'if'
name|'now'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'now'
op|'='
name|'date'
op|'.'
name|'today'
op|'('
op|')'
newline|'\n'
dedent|''
name|'major'
op|'='
name|'now'
op|'.'
name|'year'
op|'-'
name|'VERSION_OFFSET'
newline|'\n'
name|'if'
name|'major'
op|'!='
name|'version'
op|'.'
name|'major'
op|':'
newline|'\n'
indent|'        '
name|'minor'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'minor'
op|'='
name|'version'
op|'.'
name|'minor'
op|'+'
number|'1'
newline|'\n'
dedent|''
name|'return'
name|'Version'
op|'('
name|'version'
op|'.'
name|'package'
op|','
name|'major'
op|','
name|'minor'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|changeAllProjectVersions
dedent|''
name|'def'
name|'changeAllProjectVersions'
op|'('
name|'root'
op|','
name|'versionTemplate'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Change the version of all projects (including core and all subprojects).\n\n    @type root: L{FilePath}\n    @param root: The root of the Twisted source tree.\n    @type versionTemplate: L{Version}\n    @param versionTemplate: The version of all projects.  The name will be\n        replaced for each respective project.\n    """'
newline|'\n'
name|'for'
name|'project'
name|'in'
name|'findTwistedProjects'
op|'('
name|'root'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'project'
op|'.'
name|'directory'
op|'.'
name|'basename'
op|'('
op|')'
op|'=='
string|'"twisted"'
op|':'
newline|'\n'
indent|'            '
name|'packageName'
op|'='
string|'"twisted"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'packageName'
op|'='
string|'"twisted."'
op|'+'
name|'project'
op|'.'
name|'directory'
op|'.'
name|'basename'
op|'('
op|')'
newline|'\n'
dedent|''
name|'version'
op|'='
name|'Version'
op|'('
name|'packageName'
op|','
name|'versionTemplate'
op|'.'
name|'major'
op|','
nl|'\n'
name|'versionTemplate'
op|'.'
name|'minor'
op|','
name|'versionTemplate'
op|'.'
name|'micro'
op|','
nl|'\n'
name|'prerelease'
op|'='
name|'versionTemplate'
op|'.'
name|'prerelease'
op|')'
newline|'\n'
nl|'\n'
comment|'# The placement of the top-level README with respect to other files (eg'
nl|'\n'
comment|'# _version.py) is sufficiently different from the others that we just'
nl|'\n'
comment|'# have to handle it specially.'
nl|'\n'
name|'if'
name|'packageName'
op|'=='
string|'"twisted"'
op|':'
newline|'\n'
indent|'            '
name|'_changeVersionInFile'
op|'('
nl|'\n'
name|'project'
op|'.'
name|'getVersion'
op|'('
op|')'
op|','
name|'version'
op|','
name|'root'
op|'.'
name|'child'
op|'('
string|"'README'"
op|')'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'project'
op|'.'
name|'updateVersion'
op|'('
name|'version'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Project
dedent|''
dedent|''
name|'class'
name|'Project'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A representation of a project that has a version.\n\n    @ivar directory: A L{twisted.python.filepath.FilePath} pointing to the base\n        directory of a Twisted-style Python package. The package should contain\n        a C{_version.py} file and a C{topfiles} directory that contains a\n        C{README} file.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'directory'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'directory'
op|'='
name|'directory'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%s(%r)'"
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
name|'self'
op|'.'
name|'directory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getVersion
dedent|''
name|'def'
name|'getVersion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @return: A L{Version} specifying the version number of the project\n        based on live python modules.\n        """'
newline|'\n'
name|'namespace'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'execfile'
op|'('
name|'self'
op|'.'
name|'directory'
op|'.'
name|'child'
op|'('
string|'"_version.py"'
op|')'
op|'.'
name|'path'
op|','
name|'namespace'
op|')'
newline|'\n'
name|'return'
name|'namespace'
op|'['
string|'"version"'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|updateVersion
dedent|''
name|'def'
name|'updateVersion'
op|'('
name|'self'
op|','
name|'version'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Replace the existing version numbers in _version.py and README files\n        with the specified version.\n        """'
newline|'\n'
name|'oldVersion'
op|'='
name|'self'
op|'.'
name|'getVersion'
op|'('
op|')'
newline|'\n'
name|'replaceProjectVersion'
op|'('
name|'self'
op|'.'
name|'directory'
op|'.'
name|'child'
op|'('
string|'"_version.py"'
op|')'
op|'.'
name|'path'
op|','
nl|'\n'
name|'version'
op|')'
newline|'\n'
name|'_changeVersionInFile'
op|'('
nl|'\n'
name|'oldVersion'
op|','
name|'version'
op|','
nl|'\n'
name|'self'
op|'.'
name|'directory'
op|'.'
name|'child'
op|'('
string|'"topfiles"'
op|')'
op|'.'
name|'child'
op|'('
string|'"README"'
op|')'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|findTwistedProjects
dedent|''
dedent|''
name|'def'
name|'findTwistedProjects'
op|'('
name|'baseDirectory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Find all Twisted-style projects beneath a base directory.\n\n    @param baseDirectory: A L{twisted.python.filepath.FilePath} to look inside.\n    @return: A list of L{Project}.\n    """'
newline|'\n'
name|'projects'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'filePath'
name|'in'
name|'baseDirectory'
op|'.'
name|'walk'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'filePath'
op|'.'
name|'basename'
op|'('
op|')'
op|'=='
string|"'topfiles'"
op|':'
newline|'\n'
indent|'            '
name|'projectDirectory'
op|'='
name|'filePath'
op|'.'
name|'parent'
op|'('
op|')'
newline|'\n'
name|'projects'
op|'.'
name|'append'
op|'('
name|'Project'
op|'('
name|'projectDirectory'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'projects'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|updateTwistedVersionInformation
dedent|''
name|'def'
name|'updateTwistedVersionInformation'
op|'('
name|'baseDirectory'
op|','
name|'now'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Update the version information for Twisted and all subprojects to the\n    date-based version number.\n\n    @param baseDirectory: Where to look for Twisted. If None, the function\n        infers the information from C{twisted.__file__}.\n    @param now: The current date (as L{datetime.date}). If None, it defaults\n        to today.\n    """'
newline|'\n'
name|'for'
name|'project'
name|'in'
name|'findTwistedProjects'
op|'('
name|'baseDirectory'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'project'
op|'.'
name|'updateVersion'
op|'('
name|'getNextVersion'
op|'('
name|'project'
op|'.'
name|'getVersion'
op|'('
op|')'
op|','
name|'now'
op|'='
name|'now'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generateVersionFileData
dedent|''
dedent|''
name|'def'
name|'generateVersionFileData'
op|'('
name|'version'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Generate the data to be placed into a _version.py file.\n\n    @param version: A version object.\n    """'
newline|'\n'
name|'if'
name|'version'
op|'.'
name|'prerelease'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'prerelease'
op|'='
string|'", prerelease=%r"'
op|'%'
op|'('
name|'version'
op|'.'
name|'prerelease'
op|','
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'prerelease'
op|'='
string|'""'
newline|'\n'
dedent|''
name|'data'
op|'='
string|"'''\\\n# This is an auto-generated file. Do not edit it.\nfrom twisted.python import versions\nversion = versions.Version(%r, %s, %s, %s%s)\n'''"
op|'%'
op|'('
name|'version'
op|'.'
name|'package'
op|','
name|'version'
op|'.'
name|'major'
op|','
name|'version'
op|'.'
name|'minor'
op|','
name|'version'
op|'.'
name|'micro'
op|','
name|'prerelease'
op|')'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|replaceProjectVersion
dedent|''
name|'def'
name|'replaceProjectVersion'
op|'('
name|'filename'
op|','
name|'newversion'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Write version specification code into the given filename, which\n    sets the version to the given version number.\n\n    @param filename: A filename which is most likely a "_version.py"\n        under some Twisted project.\n    @param newversion: A version object.\n    """'
newline|'\n'
comment|'# XXX - this should be moved to Project and renamed to writeVersionFile.'
nl|'\n'
comment|'# jml, 2007-11-15.'
nl|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'filename'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
name|'generateVersionFileData'
op|'('
name|'newversion'
op|')'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|replaceInFile
dedent|''
name|'def'
name|'replaceInFile'
op|'('
name|'filename'
op|','
name|'oldToNew'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I replace the text `oldstr\' with `newstr\' in `filename\' using science.\n    """'
newline|'\n'
name|'os'
op|'.'
name|'rename'
op|'('
name|'filename'
op|','
name|'filename'
op|'+'
string|"'.bak'"
op|')'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'filename'
op|'+'
string|"'.bak'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'f'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'oldToNew'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'d'
op|'.'
name|'replace'
op|'('
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
dedent|''
name|'f'
op|'='
name|'open'
op|'('
name|'filename'
op|'+'
string|"'.new'"
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
name|'d'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'rename'
op|'('
name|'filename'
op|'+'
string|"'.new'"
op|','
name|'filename'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'filename'
op|'+'
string|"'.bak'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoDocumentsFound
dedent|''
name|'class'
name|'NoDocumentsFound'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when no input documents are found.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoreBuilderMixin
dedent|''
name|'class'
name|'LoreBuilderMixin'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Base class for builders which invoke lore.\n    """'
newline|'\n'
DECL|member|lore
name|'def'
name|'lore'
op|'('
name|'self'
op|','
name|'arguments'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run lore with the given arguments.\n\n        @param arguments: A C{list} of C{str} giving command line arguments to\n            lore which should be used.\n        """'
newline|'\n'
name|'options'
op|'='
name|'lore'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|'"--null"'
op|']'
op|'+'
name|'arguments'
op|')'
newline|'\n'
name|'lore'
op|'.'
name|'runGivenOptions'
op|'('
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DocBuilder
dedent|''
dedent|''
name|'class'
name|'DocBuilder'
op|'('
name|'LoreBuilderMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Generate HTML documentation for projects.\n    """'
newline|'\n'
nl|'\n'
DECL|member|build
name|'def'
name|'build'
op|'('
name|'self'
op|','
name|'version'
op|','
name|'resourceDir'
op|','
name|'docDir'
op|','
name|'template'
op|','
name|'apiBaseURL'
op|'='
name|'None'
op|','
nl|'\n'
name|'deleteInput'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build the documentation in C{docDir} with Lore.\n\n        Input files ending in .xhtml will be considered. Output will written as\n        .html files.\n\n        @param version: the version of the documentation to pass to lore.\n        @type version: C{str}\n\n        @param resourceDir: The directory which contains the toplevel index and\n            stylesheet file for this section of documentation.\n        @type resourceDir: L{twisted.python.filepath.FilePath}\n\n        @param docDir: The directory of the documentation.\n        @type docDir: L{twisted.python.filepath.FilePath}\n\n        @param template: The template used to generate the documentation.\n        @type template: L{twisted.python.filepath.FilePath}\n\n        @type apiBaseURL: C{str} or C{NoneType}\n        @param apiBaseURL: A format string which will be interpolated with the\n            fully-qualified Python name for each API link.  For example, to\n            generate the Twisted 8.0.0 documentation, pass\n            C{"http://twistedmatrix.com/documents/8.0.0/api/%s.html"}.\n\n        @param deleteInput: If True, the input documents will be deleted after\n            their output is generated.\n        @type deleteInput: C{bool}\n\n        @raise NoDocumentsFound: When there are no .xhtml files in the given\n            C{docDir}.\n        """'
newline|'\n'
name|'linkrel'
op|'='
name|'self'
op|'.'
name|'getLinkrel'
op|'('
name|'resourceDir'
op|','
name|'docDir'
op|')'
newline|'\n'
name|'inputFiles'
op|'='
name|'docDir'
op|'.'
name|'globChildren'
op|'('
string|'"*.xhtml"'
op|')'
newline|'\n'
name|'filenames'
op|'='
op|'['
name|'x'
op|'.'
name|'path'
name|'for'
name|'x'
name|'in'
name|'inputFiles'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'filenames'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NoDocumentsFound'
op|'('
string|'"No input documents found in %s"'
op|'%'
op|'('
name|'docDir'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'apiBaseURL'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'arguments'
op|'='
op|'['
string|'"--config"'
op|','
string|'"baseurl="'
op|'+'
name|'apiBaseURL'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'arguments'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'arguments'
op|'.'
name|'extend'
op|'('
op|'['
string|'"--config"'
op|','
string|'"template=%s"'
op|'%'
op|'('
name|'template'
op|'.'
name|'path'
op|','
op|')'
op|','
nl|'\n'
string|'"--config"'
op|','
string|'"ext=.html"'
op|','
nl|'\n'
string|'"--config"'
op|','
string|'"version=%s"'
op|'%'
op|'('
name|'version'
op|','
op|')'
op|','
nl|'\n'
string|'"--linkrel"'
op|','
name|'linkrel'
op|']'
op|'+'
name|'filenames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lore'
op|'('
name|'arguments'
op|')'
newline|'\n'
name|'if'
name|'deleteInput'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'inputFile'
name|'in'
name|'inputFiles'
op|':'
newline|'\n'
indent|'                '
name|'inputFile'
op|'.'
name|'remove'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getLinkrel
dedent|''
dedent|''
dedent|''
name|'def'
name|'getLinkrel'
op|'('
name|'self'
op|','
name|'resourceDir'
op|','
name|'docDir'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calculate a value appropriate for Lore\'s --linkrel option.\n\n        Lore\'s --linkrel option defines how to \'find\' documents that are\n        linked to from TEMPLATE files (NOT document bodies). That is, it\'s a\n        prefix for links (\'a\' and \'link\') in the template.\n\n        @param resourceDir: The directory which contains the toplevel index and\n            stylesheet file for this section of documentation.\n        @type resourceDir: L{twisted.python.filepath.FilePath}\n\n        @param docDir: The directory containing documents that must link to\n            C{resourceDir}.\n        @type docDir: L{twisted.python.filepath.FilePath}\n        """'
newline|'\n'
name|'if'
name|'resourceDir'
op|'!='
name|'docDir'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'/'"
op|'.'
name|'join'
op|'('
name|'filePathDelta'
op|'('
name|'docDir'
op|','
name|'resourceDir'
op|')'
op|')'
op|'+'
string|'"/"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'""'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ManBuilder
dedent|''
dedent|''
dedent|''
name|'class'
name|'ManBuilder'
op|'('
name|'LoreBuilderMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Generate man pages of the different existing scripts.\n    """'
newline|'\n'
nl|'\n'
DECL|member|build
name|'def'
name|'build'
op|'('
name|'self'
op|','
name|'manDir'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate Lore input files from the man pages in C{manDir}.\n\n        Input files ending in .1 will be considered. Output will written as\n        -man.xhtml files.\n\n        @param manDir: The directory of the man pages.\n        @type manDir: L{twisted.python.filepath.FilePath}\n\n        @raise NoDocumentsFound: When there are no .1 files in the given\n            C{manDir}.\n        """'
newline|'\n'
name|'inputFiles'
op|'='
name|'manDir'
op|'.'
name|'globChildren'
op|'('
string|'"*.1"'
op|')'
newline|'\n'
name|'filenames'
op|'='
op|'['
name|'x'
op|'.'
name|'path'
name|'for'
name|'x'
name|'in'
name|'inputFiles'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'filenames'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NoDocumentsFound'
op|'('
string|'"No manual pages found in %s"'
op|'%'
op|'('
name|'manDir'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'arguments'
op|'='
op|'['
string|'"--input"'
op|','
string|'"man"'
op|','
nl|'\n'
string|'"--output"'
op|','
string|'"lore"'
op|','
nl|'\n'
string|'"--config"'
op|','
string|'"ext=-man.xhtml"'
op|']'
op|'+'
name|'filenames'
newline|'\n'
name|'self'
op|'.'
name|'lore'
op|'('
name|'arguments'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|APIBuilder
dedent|''
dedent|''
name|'class'
name|'APIBuilder'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Generate API documentation from source files using\n    U{pydoctor<http://codespeak.net/~mwh/pydoctor/>}.  This requires\n    pydoctor to be installed and usable (which means you won\'t be able to\n    use it with Python 2.3).\n    """'
newline|'\n'
DECL|member|build
name|'def'
name|'build'
op|'('
name|'self'
op|','
name|'projectName'
op|','
name|'projectURL'
op|','
name|'sourceURL'
op|','
name|'packagePath'
op|','
nl|'\n'
name|'outputPath'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call pydoctor\'s entry point with options which will generate HTML\n        documentation for the specified package\'s API.\n\n        @type projectName: C{str}\n        @param projectName: The name of the package for which to generate\n            documentation.\n\n        @type projectURL: C{str}\n        @param projectURL: The location (probably an HTTP URL) of the project\n            on the web.\n\n        @type sourceURL: C{str}\n        @param sourceURL: The location (probably an HTTP URL) of the root of\n            the source browser for the project.\n\n        @type packagePath: L{FilePath}\n        @param packagePath: The path to the top-level of the package named by\n            C{projectName}.\n\n        @type outputPath: L{FilePath}\n        @param outputPath: An existing directory to which the generated API\n            documentation will be written.\n        """'
newline|'\n'
name|'from'
name|'pydoctor'
op|'.'
name|'driver'
name|'import'
name|'main'
newline|'\n'
name|'main'
op|'('
nl|'\n'
op|'['
string|'"--project-name"'
op|','
name|'projectName'
op|','
nl|'\n'
string|'"--project-url"'
op|','
name|'projectURL'
op|','
nl|'\n'
string|'"--system-class"'
op|','
string|'"pydoctor.twistedmodel.TwistedSystem"'
op|','
nl|'\n'
string|'"--project-base-dir"'
op|','
name|'packagePath'
op|'.'
name|'parent'
op|'('
op|')'
op|'.'
name|'path'
op|','
nl|'\n'
string|'"--html-viewsource-base"'
op|','
name|'sourceURL'
op|','
nl|'\n'
string|'"--add-package"'
op|','
name|'packagePath'
op|'.'
name|'path'
op|','
nl|'\n'
string|'"--html-output"'
op|','
name|'outputPath'
op|'.'
name|'path'
op|','
nl|'\n'
string|'"--html-write-function-pages"'
op|','
string|'"--quiet"'
op|','
string|'"--make-html"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BookBuilder
dedent|''
dedent|''
name|'class'
name|'BookBuilder'
op|'('
name|'LoreBuilderMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Generate the LaTeX and PDF documentation.\n\n    The book is built by assembling a number of LaTeX documents.  Only the\n    overall document which describes how to assemble the documents is stored\n    in LaTeX in the source.  The rest of the documentation is generated from\n    Lore input files.  These are primarily XHTML files (of the particular\n    Lore subset), but man pages are stored in GROFF format.  BookBuilder\n    expects all of its input to be Lore XHTML format, so L{ManBuilder}\n    should be invoked first if the man pages are to be included in the\n    result (this is determined by the book LaTeX definition file).\n    Therefore, a sample usage of BookBuilder may look something like this::\n\n        man = ManBuilder()\n        man.build(FilePath("doc/core/man"))\n        book = BookBuilder()\n        book.build(\n            FilePath(\'doc/core/howto\'),\n            [FilePath(\'doc/core/howto\'), FilePath(\'doc/core/howto/tutorial\'),\n             FilePath(\'doc/core/man\'), FilePath(\'doc/core/specifications\')],\n            FilePath(\'doc/core/howto/book.tex\'), FilePath(\'/tmp/book.pdf\'))\n    """'
newline|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'command'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Execute a command in a child process and return the output.\n\n        @type command: C{str}\n        @param command: The shell command to run.\n\n        @raise CommandFailed: If the child process exits with an error.\n        """'
newline|'\n'
name|'return'
name|'runCommand'
op|'('
name|'command'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildTeX
dedent|''
name|'def'
name|'buildTeX'
op|'('
name|'self'
op|','
name|'howtoDir'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build LaTeX files for lore input files in the given directory.\n\n        Input files ending in .xhtml will be considered. Output will written as\n        .tex files.\n\n        @type howtoDir: L{FilePath}\n        @param howtoDir: A directory containing lore input files.\n\n        @raise ValueError: If C{howtoDir} does not exist.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'howtoDir'
op|'.'
name|'exists'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"%r does not exist."'
op|'%'
op|'('
name|'howtoDir'
op|'.'
name|'path'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'lore'
op|'('
nl|'\n'
op|'['
string|'"--output"'
op|','
string|'"latex"'
op|','
nl|'\n'
string|'"--config"'
op|','
string|'"section"'
op|']'
op|'+'
nl|'\n'
op|'['
name|'child'
op|'.'
name|'path'
name|'for'
name|'child'
name|'in'
name|'howtoDir'
op|'.'
name|'globChildren'
op|'('
string|'"*.xhtml"'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildPDF
dedent|''
name|'def'
name|'buildPDF'
op|'('
name|'self'
op|','
name|'bookPath'
op|','
name|'inputDirectory'
op|','
name|'outputPath'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build a PDF from the given a LaTeX book document.\n\n        @type bookPath: L{FilePath}\n        @param bookPath: The location of a LaTeX document defining a book.\n\n        @type inputDirectory: L{FilePath}\n        @param inputDirectory: The directory which the inputs of the book are\n            relative to.\n\n        @type outputPath: L{FilePath}\n        @param outputPath: The location to which to write the resulting book.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'bookPath'
op|'.'
name|'basename'
op|'('
op|')'
op|'.'
name|'endswith'
op|'('
string|'".tex"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Book filename must end with .tex"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'workPath'
op|'='
name|'FilePath'
op|'('
name|'mkdtemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'startDir'
op|'='
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'chdir'
op|'('
name|'inputDirectory'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
name|'texToDVI'
op|'='
op|'('
nl|'\n'
string|'"latex -interaction=nonstopmode "'
nl|'\n'
string|'"-output-directory=%s %s"'
op|')'
op|'%'
op|'('
nl|'\n'
name|'workPath'
op|'.'
name|'path'
op|','
name|'bookPath'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
comment|'# What I tell you three times is true!'
nl|'\n'
comment|'# The first two invocations of latex on the book file allows it'
nl|'\n'
comment|'# correctly create page numbers for in-text references.  Why this is'
nl|'\n'
comment|'# the case, I could not tell you. -exarkun'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'run'
op|'('
name|'texToDVI'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'bookBaseWithoutExtension'
op|'='
name|'bookPath'
op|'.'
name|'basename'
op|'('
op|')'
op|'['
op|':'
op|'-'
number|'4'
op|']'
newline|'\n'
name|'dviPath'
op|'='
name|'workPath'
op|'.'
name|'child'
op|'('
name|'bookBaseWithoutExtension'
op|'+'
string|'".dvi"'
op|')'
newline|'\n'
name|'psPath'
op|'='
name|'workPath'
op|'.'
name|'child'
op|'('
name|'bookBaseWithoutExtension'
op|'+'
string|'".ps"'
op|')'
newline|'\n'
name|'pdfPath'
op|'='
name|'workPath'
op|'.'
name|'child'
op|'('
name|'bookBaseWithoutExtension'
op|'+'
string|'".pdf"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run'
op|'('
nl|'\n'
string|'"dvips -o %(postscript)s -t letter -Ppdf %(dvi)s"'
op|'%'
op|'{'
nl|'\n'
string|"'postscript'"
op|':'
name|'psPath'
op|'.'
name|'path'
op|','
nl|'\n'
string|"'dvi'"
op|':'
name|'dviPath'
op|'.'
name|'path'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run'
op|'('
string|'"ps2pdf13 %(postscript)s %(pdf)s"'
op|'%'
op|'{'
nl|'\n'
string|"'postscript'"
op|':'
name|'psPath'
op|'.'
name|'path'
op|','
nl|'\n'
string|"'pdf'"
op|':'
name|'pdfPath'
op|'.'
name|'path'
op|'}'
op|')'
newline|'\n'
name|'pdfPath'
op|'.'
name|'moveTo'
op|'('
name|'outputPath'
op|')'
newline|'\n'
name|'workPath'
op|'.'
name|'remove'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'chdir'
op|'('
name|'startDir'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'workPath'
op|'.'
name|'moveTo'
op|'('
name|'bookPath'
op|'.'
name|'parent'
op|'('
op|')'
op|'.'
name|'child'
op|'('
name|'workPath'
op|'.'
name|'basename'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|build
dedent|''
dedent|''
name|'def'
name|'build'
op|'('
name|'self'
op|','
name|'baseDirectory'
op|','
name|'inputDirectories'
op|','
name|'bookPath'
op|','
name|'outputPath'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build a PDF book from the given TeX book definition and directories\n        containing lore inputs.\n\n        @type baseDirectory: L{FilePath}\n        @param baseDirectory: The directory which the inputs of the book are\n            relative to.\n\n        @type inputDirectories: C{list} of L{FilePath}\n        @param inputDirectories: The paths which contain lore inputs to be\n            converted to LaTeX.\n\n        @type bookPath: L{FilePath}\n        @param bookPath: The location of a LaTeX document defining a book.\n\n        @type outputPath: L{FilePath}\n        @param outputPath: The location to which to write the resulting book.\n        """'
newline|'\n'
name|'for'
name|'inputDir'
name|'in'
name|'inputDirectories'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'buildTeX'
op|'('
name|'inputDir'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'buildPDF'
op|'('
name|'bookPath'
op|','
name|'baseDirectory'
op|','
name|'outputPath'
op|')'
newline|'\n'
name|'for'
name|'inputDirectory'
name|'in'
name|'inputDirectories'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'child'
name|'in'
name|'inputDirectory'
op|'.'
name|'children'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'child'
op|'.'
name|'splitext'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|'=='
string|'".tex"'
name|'and'
name|'child'
op|'!='
name|'bookPath'
op|':'
newline|'\n'
indent|'                    '
name|'child'
op|'.'
name|'remove'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NewsBuilder
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'NewsBuilder'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Generate the new section of a NEWS file.\n\n    The C{_FEATURE}, C{_BUGFIX}, C{_REMOVAL}, and C{_MISC} attributes of\n    this class are symbolic names for the news entry types which are\n    supported.  Conveniently, they each also take on the value of the file\n    name extension which indicates a news entry of that type.\n\n    @cvar _headings: A C{dict} mapping one of the news entry types to the\n        heading to write out for that type of news entry.\n\n    @cvar _TICKET_HINT: A C{str} giving the text which appears at the top of\n        each news file and which should be kept at the top, not shifted down\n        with all the other content.  Put another way, this is the text after\n        which the new news text is inserted.\n    """'
newline|'\n'
DECL|variable|_FEATURE
name|'_FEATURE'
op|'='
string|'".feature"'
newline|'\n'
DECL|variable|_BUGFIX
name|'_BUGFIX'
op|'='
string|'".bugfix"'
newline|'\n'
DECL|variable|_REMOVAL
name|'_REMOVAL'
op|'='
string|'".removal"'
newline|'\n'
DECL|variable|_MISC
name|'_MISC'
op|'='
string|'".misc"'
newline|'\n'
nl|'\n'
DECL|variable|_headings
name|'_headings'
op|'='
op|'{'
nl|'\n'
name|'_FEATURE'
op|':'
string|'"Features"'
op|','
nl|'\n'
name|'_BUGFIX'
op|':'
string|'"Bugfixes"'
op|','
nl|'\n'
name|'_REMOVAL'
op|':'
string|'"Deprecations and Removals"'
op|','
nl|'\n'
name|'_MISC'
op|':'
string|'"Other"'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|_TICKET_HINT
name|'_TICKET_HINT'
op|'='
op|'('
nl|'\n'
string|"'Ticket numbers in this file can be looked up by visiting\\n'"
nl|'\n'
string|"'http://twistedmatrix.com/trac/ticket/<number>\\n'"
nl|'\n'
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_today
name|'def'
name|'_today'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return today\'s date as a string in YYYY-MM-DD format.\n        """'
newline|'\n'
name|'return'
name|'date'
op|'.'
name|'today'
op|'('
op|')'
op|'.'
name|'strftime'
op|'('
string|"'%Y-%m-%d'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_findChanges
dedent|''
name|'def'
name|'_findChanges'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'ticketType'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Load all the feature ticket summaries.\n\n        @param path: A L{FilePath} the direct children of which to search\n            for news entries.\n\n        @param ticketType: The type of news entries to search for.  One of\n            L{NewsBuilder._FEATURE}, L{NewsBuilder._BUGFIX},\n            L{NewsBuilder._REMOVAL}, or L{NewsBuilder._MISC}.\n\n        @return: A C{list} of two-tuples.  The first element is the ticket\n            number as an C{int}.  The second element of each tuple is the\n            description of the feature.\n        """'
newline|'\n'
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'child'
name|'in'
name|'path'
op|'.'
name|'children'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'base'
op|','
name|'ext'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'child'
op|'.'
name|'basename'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'ext'
op|'=='
name|'ticketType'
op|':'
newline|'\n'
indent|'                '
name|'results'
op|'.'
name|'append'
op|'('
op|'('
nl|'\n'
name|'int'
op|'('
name|'base'
op|')'
op|','
nl|'\n'
string|"' '"
op|'.'
name|'join'
op|'('
name|'child'
op|'.'
name|'getContent'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'results'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'return'
name|'results'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_writeHeader
dedent|''
name|'def'
name|'_writeHeader'
op|'('
name|'self'
op|','
name|'fileObj'
op|','
name|'header'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write a version header to the given file.\n\n        @param fileObj: A file-like object to which to write the header.\n        @param header: The header to write to the file.\n        @type header: C{str}\n        """'
newline|'\n'
name|'fileObj'
op|'.'
name|'write'
op|'('
name|'header'
op|'+'
string|"'\\n'"
op|'+'
string|"'='"
op|'*'
name|'len'
op|'('
name|'header'
op|')'
op|'+'
string|"'\\n\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_writeSection
dedent|''
name|'def'
name|'_writeSection'
op|'('
name|'self'
op|','
name|'fileObj'
op|','
name|'header'
op|','
name|'tickets'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write out one section (features, bug fixes, etc) to the given file.\n\n        @param fileObj: A file-like object to which to write the news section.\n\n        @param header: The header for the section to write.\n        @type header: C{str}\n\n        @param tickets: A C{list} of ticket information of the sort returned\n            by L{NewsBuilder._findChanges}.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'tickets'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'reverse'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
op|'('
name|'ticket'
op|','
name|'description'
op|')'
name|'in'
name|'tickets'
op|':'
newline|'\n'
indent|'            '
name|'reverse'
op|'.'
name|'setdefault'
op|'('
name|'description'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'ticket'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'description'
name|'in'
name|'reverse'
op|':'
newline|'\n'
indent|'            '
name|'reverse'
op|'['
name|'description'
op|']'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
dedent|''
name|'reverse'
op|'='
name|'reverse'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
name|'reverse'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'lambda'
op|'('
name|'descr'
op|','
name|'tickets'
op|')'
op|':'
name|'tickets'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'fileObj'
op|'.'
name|'write'
op|'('
name|'header'
op|'+'
string|"'\\n'"
op|'+'
string|"'-'"
op|'*'
name|'len'
op|'('
name|'header'
op|')'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
name|'for'
op|'('
name|'description'
op|','
name|'relatedTickets'
op|')'
name|'in'
name|'reverse'
op|':'
newline|'\n'
indent|'            '
name|'ticketList'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
op|'['
nl|'\n'
string|"'#'"
op|'+'
name|'str'
op|'('
name|'ticket'
op|')'
name|'for'
name|'ticket'
name|'in'
name|'relatedTickets'
op|']'
op|')'
newline|'\n'
name|'entry'
op|'='
string|"' - %s (%s)'"
op|'%'
op|'('
name|'description'
op|','
name|'ticketList'
op|')'
newline|'\n'
name|'entry'
op|'='
name|'textwrap'
op|'.'
name|'fill'
op|'('
name|'entry'
op|','
name|'subsequent_indent'
op|'='
string|"'   '"
op|')'
newline|'\n'
name|'fileObj'
op|'.'
name|'write'
op|'('
name|'entry'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
dedent|''
name|'fileObj'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_writeMisc
dedent|''
name|'def'
name|'_writeMisc'
op|'('
name|'self'
op|','
name|'fileObj'
op|','
name|'header'
op|','
name|'tickets'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write out a miscellaneous-changes section to the given file.\n\n        @param fileObj: A file-like object to which to write the news section.\n\n        @param header: The header for the section to write.\n        @type header: C{str}\n\n        @param tickets: A C{list} of ticket information of the sort returned\n            by L{NewsBuilder._findChanges}.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'tickets'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'fileObj'
op|'.'
name|'write'
op|'('
name|'header'
op|'+'
string|"'\\n'"
op|'+'
string|"'-'"
op|'*'
name|'len'
op|'('
name|'header'
op|')'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
name|'formattedTickets'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'ticket'
op|','
name|'ignored'
op|')'
name|'in'
name|'tickets'
op|':'
newline|'\n'
indent|'            '
name|'formattedTickets'
op|'.'
name|'append'
op|'('
string|"'#'"
op|'+'
name|'str'
op|'('
name|'ticket'
op|')'
op|')'
newline|'\n'
dedent|''
name|'entry'
op|'='
string|"' - '"
op|'+'
string|"', '"
op|'.'
name|'join'
op|'('
name|'formattedTickets'
op|')'
newline|'\n'
name|'entry'
op|'='
name|'textwrap'
op|'.'
name|'fill'
op|'('
name|'entry'
op|','
name|'subsequent_indent'
op|'='
string|"'   '"
op|')'
newline|'\n'
name|'fileObj'
op|'.'
name|'write'
op|'('
name|'entry'
op|'+'
string|"'\\n\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|build
dedent|''
name|'def'
name|'build'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'output'
op|','
name|'header'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Load all of the change information from the given directory and write\n        it out to the given output file.\n\n        @param path: A directory (probably a I{topfiles} directory) containing\n            change information in the form of <ticket>.<change type> files.\n        @type path: L{FilePath}\n\n        @param output: The NEWS file to which the results will be prepended.\n        @type output: L{FilePath}\n\n        @param header: The top-level header to use when writing the news.\n        @type header: L{str}\n        """'
newline|'\n'
name|'oldNews'
op|'='
name|'output'
op|'.'
name|'getContent'
op|'('
op|')'
newline|'\n'
name|'newNews'
op|'='
name|'output'
op|'.'
name|'sibling'
op|'('
string|"'NEWS.new'"
op|')'
op|'.'
name|'open'
op|'('
string|"'w'"
op|')'
newline|'\n'
name|'if'
name|'oldNews'
op|'.'
name|'startswith'
op|'('
name|'self'
op|'.'
name|'_TICKET_HINT'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'newNews'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'_TICKET_HINT'
op|')'
newline|'\n'
name|'oldNews'
op|'='
name|'oldNews'
op|'['
name|'len'
op|'('
name|'self'
op|'.'
name|'_TICKET_HINT'
op|')'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_writeHeader'
op|'('
name|'newNews'
op|','
name|'header'
op|')'
newline|'\n'
name|'for'
name|'part'
name|'in'
op|'('
name|'self'
op|'.'
name|'_FEATURE'
op|','
name|'self'
op|'.'
name|'_BUGFIX'
op|','
name|'self'
op|'.'
name|'_REMOVAL'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'tickets'
op|'='
name|'self'
op|'.'
name|'_findChanges'
op|'('
name|'path'
op|','
name|'part'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_writeSection'
op|'('
name|'newNews'
op|','
name|'self'
op|'.'
name|'_headings'
op|'.'
name|'get'
op|'('
name|'part'
op|')'
op|','
name|'tickets'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_writeMisc'
op|'('
nl|'\n'
name|'newNews'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_headings'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'_MISC'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_findChanges'
op|'('
name|'path'
op|','
name|'self'
op|'.'
name|'_MISC'
op|')'
op|')'
newline|'\n'
name|'newNews'
op|'.'
name|'write'
op|'('
name|'oldNews'
op|')'
newline|'\n'
name|'newNews'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'output'
op|'.'
name|'sibling'
op|'('
string|"'NEWS.new'"
op|')'
op|'.'
name|'moveTo'
op|'('
name|'output'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildAll
dedent|''
name|'def'
name|'buildAll'
op|'('
name|'self'
op|','
name|'baseDirectory'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Find all of the Twisted subprojects beneath C{baseDirectory} and update\n        their news files from the ticket change description files in their\n        I{topfiles} directories and update the news file in C{baseDirectory}\n        with all of the news.\n\n        @param baseDirectory: A L{FilePath} representing the root directory\n            beneath which to find Twisted projects for which to generate\n            news (see L{findTwistedProjects}).\n        """'
newline|'\n'
name|'today'
op|'='
name|'self'
op|'.'
name|'_today'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Get all the subprojects to generate news for'
nl|'\n'
name|'projects'
op|'='
name|'findTwistedProjects'
op|'('
name|'baseDirectory'
op|')'
newline|'\n'
comment|'# And order them alphabetically for ease of reading'
nl|'\n'
name|'projects'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'lambda'
name|'proj'
op|':'
name|'proj'
op|'.'
name|'directory'
op|'.'
name|'path'
op|')'
newline|'\n'
comment|'# And generate them backwards since we write news by prepending to'
nl|'\n'
comment|'# files.'
nl|'\n'
name|'projects'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'aggregateNews'
name|'in'
op|'['
name|'False'
op|','
name|'True'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'project'
name|'in'
name|'projects'
op|':'
newline|'\n'
indent|'                '
name|'topfiles'
op|'='
name|'project'
op|'.'
name|'directory'
op|'.'
name|'child'
op|'('
string|'"topfiles"'
op|')'
newline|'\n'
name|'if'
name|'aggregateNews'
op|':'
newline|'\n'
indent|'                    '
name|'news'
op|'='
name|'baseDirectory'
op|'.'
name|'child'
op|'('
string|'"NEWS"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'news'
op|'='
name|'topfiles'
op|'.'
name|'child'
op|'('
string|'"NEWS"'
op|')'
newline|'\n'
dedent|''
name|'name'
op|'='
name|'project'
op|'.'
name|'directory'
op|'.'
name|'basename'
op|'('
op|')'
op|'.'
name|'title'
op|'('
op|')'
newline|'\n'
name|'if'
name|'name'
op|'=='
string|"'Twisted'"
op|':'
newline|'\n'
indent|'                    '
name|'name'
op|'='
string|"'Core'"
newline|'\n'
dedent|''
name|'version'
op|'='
name|'project'
op|'.'
name|'getVersion'
op|'('
op|')'
op|'.'
name|'base'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'build'
op|'('
nl|'\n'
name|'topfiles'
op|','
name|'news'
op|','
string|'"Twisted %s %s (%s)"'
op|'%'
op|'('
name|'name'
op|','
name|'version'
op|','
name|'today'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|main
dedent|''
dedent|''
dedent|''
name|'def'
name|'main'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build all news files.\n\n        @param args: The command line arguments to process.  This must contain\n            one string, the path to the base of the Twisted checkout for which\n            to build the news.\n        @type args: C{list} of C{str}\n        """'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'args'
op|')'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'exit'
op|'('
string|'"Must specify one argument: the path to the Twisted checkout"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'buildAll'
op|'('
name|'FilePath'
op|'('
name|'args'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|filePathDelta
dedent|''
dedent|''
name|'def'
name|'filePathDelta'
op|'('
name|'origin'
op|','
name|'destination'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return a list of strings that represent C{destination} as a path relative\n    to C{origin}.\n\n    It is assumed that both paths represent directories, not files. That is to\n    say, the delta of L{twisted.python.filepath.FilePath} /foo/bar to\n    L{twisted.python.filepath.FilePath} /foo/baz will be C{../baz},\n    not C{baz}.\n\n    @type origin: L{twisted.python.filepath.FilePath}\n    @param origin: The origin of the relative path.\n\n    @type destination: L{twisted.python.filepath.FilePath}\n    @param destination: The destination of the relative path.\n    """'
newline|'\n'
name|'commonItems'
op|'='
number|'0'
newline|'\n'
name|'path1'
op|'='
name|'origin'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'os'
op|'.'
name|'sep'
op|')'
newline|'\n'
name|'path2'
op|'='
name|'destination'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'os'
op|'.'
name|'sep'
op|')'
newline|'\n'
name|'for'
name|'elem1'
op|','
name|'elem2'
name|'in'
name|'zip'
op|'('
name|'path1'
op|','
name|'path2'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'elem1'
op|'=='
name|'elem2'
op|':'
newline|'\n'
indent|'            '
name|'commonItems'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'path'
op|'='
op|'['
string|'".."'
op|']'
op|'*'
op|'('
name|'len'
op|'('
name|'path1'
op|')'
op|'-'
name|'commonItems'
op|')'
newline|'\n'
name|'return'
name|'path'
op|'+'
name|'path2'
op|'['
name|'commonItems'
op|':'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DistributionBuilder
dedent|''
name|'class'
name|'DistributionBuilder'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A builder of Twisted distributions.\n\n    This knows how to build tarballs for Twisted and all of its subprojects.\n\n    @type blacklist: C{list} of C{str}\n    @cvar blacklist: The list subproject names to exclude from the main Twisted\n        tarball and for which no individual project tarballs will be built.\n    """'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'dist'
name|'import'
name|'twisted_subprojects'
name|'as'
name|'subprojects'
newline|'\n'
DECL|variable|blacklist
name|'blacklist'
op|'='
op|'['
string|'"vfs"'
op|','
string|'"web2"'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'rootDirectory'
op|','
name|'outputDirectory'
op|','
name|'apiBaseURL'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a distribution builder.\n\n        @param rootDirectory: root of a Twisted export which will populate\n            subsequent tarballs.\n        @type rootDirectory: L{FilePath}.\n\n        @param outputDirectory: The directory in which to create the tarballs.\n        @type outputDirectory: L{FilePath}\n\n        @type apiBaseURL: C{str} or C{NoneType}\n        @param apiBaseURL: A format string which will be interpolated with the\n            fully-qualified Python name for each API link.  For example, to\n            generate the Twisted 8.0.0 documentation, pass\n            C{"http://twistedmatrix.com/documents/8.0.0/api/%s.html"}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'rootDirectory'
op|'='
name|'rootDirectory'
newline|'\n'
name|'self'
op|'.'
name|'outputDirectory'
op|'='
name|'outputDirectory'
newline|'\n'
name|'self'
op|'.'
name|'apiBaseURL'
op|'='
name|'apiBaseURL'
newline|'\n'
name|'self'
op|'.'
name|'manBuilder'
op|'='
name|'ManBuilder'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'docBuilder'
op|'='
name|'DocBuilder'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_buildDocInDir
dedent|''
name|'def'
name|'_buildDocInDir'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'version'
op|','
name|'howtoPath'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate documentation in the given path, building man pages first if\n        necessary and swallowing errors (so that directories without lore\n        documentation in them are ignored).\n\n        @param path: The path containing documentation to build.\n        @type path: L{FilePath}\n        @param version: The version of the project to include in all generated\n            pages.\n        @type version: C{str}\n        @param howtoPath: The "resource path" as L{DocBuilder} describes it.\n        @type howtoPath: L{FilePath}\n        """'
newline|'\n'
name|'templatePath'
op|'='
name|'self'
op|'.'
name|'rootDirectory'
op|'.'
name|'child'
op|'('
string|'"doc"'
op|')'
op|'.'
name|'child'
op|'('
string|'"core"'
nl|'\n'
op|')'
op|'.'
name|'child'
op|'('
string|'"howto"'
op|')'
op|'.'
name|'child'
op|'('
string|'"template.tpl"'
op|')'
newline|'\n'
name|'if'
name|'path'
op|'.'
name|'basename'
op|'('
op|')'
op|'=='
string|'"man"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'manBuilder'
op|'.'
name|'build'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'path'
op|'.'
name|'isdir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'docBuilder'
op|'.'
name|'build'
op|'('
name|'version'
op|','
name|'howtoPath'
op|','
name|'path'
op|','
nl|'\n'
name|'templatePath'
op|','
name|'self'
op|'.'
name|'apiBaseURL'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NoDocumentsFound'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildTwisted
dedent|''
dedent|''
dedent|''
name|'def'
name|'buildTwisted'
op|'('
name|'self'
op|','
name|'version'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build the main Twisted distribution in C{Twisted-<version>.tar.bz2}.\n\n        Projects listed in in L{blacklist} will not have their plugins, code,\n        documentation, or bin directories included.\n\n        bin/admin is also excluded.\n\n        @type version: C{str}\n        @param version: The version of Twisted to build.\n\n        @return: The tarball file.\n        @rtype: L{FilePath}.\n        """'
newline|'\n'
name|'releaseName'
op|'='
string|'"Twisted-%s"'
op|'%'
op|'('
name|'version'
op|','
op|')'
newline|'\n'
name|'buildPath'
op|'='
name|'lambda'
op|'*'
name|'args'
op|':'
string|"'/'"
op|'.'
name|'join'
op|'('
op|'('
name|'releaseName'
op|','
op|')'
op|'+'
name|'args'
op|')'
newline|'\n'
nl|'\n'
name|'outputFile'
op|'='
name|'self'
op|'.'
name|'outputDirectory'
op|'.'
name|'child'
op|'('
name|'releaseName'
op|'+'
string|'".tar.bz2"'
op|')'
newline|'\n'
name|'tarball'
op|'='
name|'tarfile'
op|'.'
name|'TarFile'
op|'.'
name|'open'
op|'('
name|'outputFile'
op|'.'
name|'path'
op|','
string|"'w:bz2'"
op|')'
newline|'\n'
nl|'\n'
name|'docPath'
op|'='
name|'self'
op|'.'
name|'rootDirectory'
op|'.'
name|'child'
op|'('
string|'"doc"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Generate docs!'
nl|'\n'
name|'if'
name|'docPath'
op|'.'
name|'isdir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'subProjectDir'
name|'in'
name|'docPath'
op|'.'
name|'children'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
op|'('
name|'subProjectDir'
op|'.'
name|'isdir'
op|'('
op|')'
nl|'\n'
name|'and'
name|'subProjectDir'
op|'.'
name|'basename'
op|'('
op|')'
name|'not'
name|'in'
name|'self'
op|'.'
name|'blacklist'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'for'
name|'child'
name|'in'
name|'subProjectDir'
op|'.'
name|'walk'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'_buildDocInDir'
op|'('
name|'child'
op|','
name|'version'
op|','
nl|'\n'
name|'subProjectDir'
op|'.'
name|'child'
op|'('
string|'"howto"'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now, this part is nasty.  We need to exclude blacklisted subprojects'
nl|'\n'
comment|'# from the main Twisted distribution. This means we need to exclude'
nl|'\n'
comment|'# their bin directories, their documentation directories, their'
nl|'\n'
comment|'# plugins, and their python packages. Given that there\'s no "add all'
nl|'\n'
comment|'# but exclude these particular paths" functionality in tarfile, we have'
nl|'\n'
comment|"# to walk through all these directories and add things that *aren't*"
nl|'\n'
comment|'# part of the blacklisted projects.'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'for'
name|'binthing'
name|'in'
name|'self'
op|'.'
name|'rootDirectory'
op|'.'
name|'child'
op|'('
string|'"bin"'
op|')'
op|'.'
name|'children'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# bin/admin should also not be included.'
nl|'\n'
indent|'            '
name|'if'
name|'binthing'
op|'.'
name|'basename'
op|'('
op|')'
name|'not'
name|'in'
name|'self'
op|'.'
name|'blacklist'
op|'+'
op|'['
string|'"admin"'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'tarball'
op|'.'
name|'add'
op|'('
name|'binthing'
op|'.'
name|'path'
op|','
nl|'\n'
name|'buildPath'
op|'('
string|'"bin"'
op|','
name|'binthing'
op|'.'
name|'basename'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'bad_plugins'
op|'='
op|'['
string|'"twisted_%s.py"'
op|'%'
op|'('
name|'blacklisted'
op|','
op|')'
nl|'\n'
name|'for'
name|'blacklisted'
name|'in'
name|'self'
op|'.'
name|'blacklist'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'submodule'
name|'in'
name|'self'
op|'.'
name|'rootDirectory'
op|'.'
name|'child'
op|'('
string|'"twisted"'
op|')'
op|'.'
name|'children'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'submodule'
op|'.'
name|'basename'
op|'('
op|')'
op|'=='
string|'"plugins"'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'plugin'
name|'in'
name|'submodule'
op|'.'
name|'children'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'plugin'
op|'.'
name|'basename'
op|'('
op|')'
name|'not'
name|'in'
name|'bad_plugins'
op|':'
newline|'\n'
indent|'                        '
name|'tarball'
op|'.'
name|'add'
op|'('
name|'plugin'
op|'.'
name|'path'
op|','
name|'buildPath'
op|'('
string|'"twisted"'
op|','
string|'"plugins"'
op|','
nl|'\n'
name|'plugin'
op|'.'
name|'basename'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'elif'
name|'submodule'
op|'.'
name|'basename'
op|'('
op|')'
name|'not'
name|'in'
name|'self'
op|'.'
name|'blacklist'
op|':'
newline|'\n'
indent|'                '
name|'tarball'
op|'.'
name|'add'
op|'('
name|'submodule'
op|'.'
name|'path'
op|','
name|'buildPath'
op|'('
string|'"twisted"'
op|','
nl|'\n'
name|'submodule'
op|'.'
name|'basename'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'docDir'
name|'in'
name|'self'
op|'.'
name|'rootDirectory'
op|'.'
name|'child'
op|'('
string|'"doc"'
op|')'
op|'.'
name|'children'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'docDir'
op|'.'
name|'basename'
op|'('
op|')'
name|'not'
name|'in'
name|'self'
op|'.'
name|'blacklist'
op|':'
newline|'\n'
indent|'                '
name|'tarball'
op|'.'
name|'add'
op|'('
name|'docDir'
op|'.'
name|'path'
op|','
name|'buildPath'
op|'('
string|'"doc"'
op|','
name|'docDir'
op|'.'
name|'basename'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'toplevel'
name|'in'
name|'self'
op|'.'
name|'rootDirectory'
op|'.'
name|'children'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'toplevel'
op|'.'
name|'isdir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'tarball'
op|'.'
name|'add'
op|'('
name|'toplevel'
op|'.'
name|'path'
op|','
name|'buildPath'
op|'('
name|'toplevel'
op|'.'
name|'basename'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'tarball'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'outputFile'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildCore
dedent|''
name|'def'
name|'buildCore'
op|'('
name|'self'
op|','
name|'version'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build a core distribution in C{TwistedCore-<version>.tar.bz2}.\n\n        This is very similar to L{buildSubProject}, but core tarballs and the\n        input are laid out slightly differently.\n\n         - scripts are in the top level of the C{bin} directory.\n         - code is included directly from the C{twisted} directory, excluding\n           subprojects.\n         - all plugins except the subproject plugins are included.\n\n        @type version: C{str}\n        @param version: The version of Twisted to build.\n\n        @return: The tarball file.\n        @rtype: L{FilePath}.\n        """'
newline|'\n'
name|'releaseName'
op|'='
string|'"TwistedCore-%s"'
op|'%'
op|'('
name|'version'
op|','
op|')'
newline|'\n'
name|'outputFile'
op|'='
name|'self'
op|'.'
name|'outputDirectory'
op|'.'
name|'child'
op|'('
name|'releaseName'
op|'+'
string|'".tar.bz2"'
op|')'
newline|'\n'
name|'buildPath'
op|'='
name|'lambda'
op|'*'
name|'args'
op|':'
string|"'/'"
op|'.'
name|'join'
op|'('
op|'('
name|'releaseName'
op|','
op|')'
op|'+'
name|'args'
op|')'
newline|'\n'
name|'tarball'
op|'='
name|'self'
op|'.'
name|'_createBasicSubprojectTarball'
op|'('
nl|'\n'
string|'"core"'
op|','
name|'version'
op|','
name|'outputFile'
op|')'
newline|'\n'
nl|'\n'
comment|'# Include the bin directory for the subproject.'
nl|'\n'
name|'for'
name|'path'
name|'in'
name|'self'
op|'.'
name|'rootDirectory'
op|'.'
name|'child'
op|'('
string|'"bin"'
op|')'
op|'.'
name|'children'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'path'
op|'.'
name|'isdir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'tarball'
op|'.'
name|'add'
op|'('
name|'path'
op|'.'
name|'path'
op|','
name|'buildPath'
op|'('
string|'"bin"'
op|','
name|'path'
op|'.'
name|'basename'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# Include all files within twisted/ that aren't part of a subproject."
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'path'
name|'in'
name|'self'
op|'.'
name|'rootDirectory'
op|'.'
name|'child'
op|'('
string|'"twisted"'
op|')'
op|'.'
name|'children'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'path'
op|'.'
name|'basename'
op|'('
op|')'
op|'=='
string|'"plugins"'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'plugin'
name|'in'
name|'path'
op|'.'
name|'children'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'for'
name|'subproject'
name|'in'
name|'self'
op|'.'
name|'subprojects'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'plugin'
op|'.'
name|'basename'
op|'('
op|')'
op|'=='
string|'"twisted_%s.py"'
op|'%'
op|'('
name|'subproject'
op|','
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'tarball'
op|'.'
name|'add'
op|'('
name|'plugin'
op|'.'
name|'path'
op|','
nl|'\n'
name|'buildPath'
op|'('
string|'"twisted"'
op|','
string|'"plugins"'
op|','
nl|'\n'
name|'plugin'
op|'.'
name|'basename'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'elif'
name|'not'
name|'path'
op|'.'
name|'basename'
op|'('
op|')'
name|'in'
name|'self'
op|'.'
name|'subprojects'
op|'+'
op|'['
string|'"topfiles"'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'tarball'
op|'.'
name|'add'
op|'('
name|'path'
op|'.'
name|'path'
op|','
name|'buildPath'
op|'('
string|'"twisted"'
op|','
name|'path'
op|'.'
name|'basename'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'tarball'
op|'.'
name|'add'
op|'('
name|'self'
op|'.'
name|'rootDirectory'
op|'.'
name|'child'
op|'('
string|'"twisted"'
op|')'
op|'.'
name|'child'
op|'('
string|'"topfiles"'
op|')'
op|'.'
name|'path'
op|','
nl|'\n'
name|'releaseName'
op|')'
newline|'\n'
name|'tarball'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'outputFile'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildSubProject
dedent|''
name|'def'
name|'buildSubProject'
op|'('
name|'self'
op|','
name|'projectName'
op|','
name|'version'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build a subproject distribution in\n        C{Twisted<Projectname>-<version>.tar.bz2}.\n\n        @type projectName: C{str}\n        @param projectName: The lowercase name of the subproject to build.\n        @type version: C{str}\n        @param version: The version of Twisted to build.\n\n        @return: The tarball file.\n        @rtype: L{FilePath}.\n        """'
newline|'\n'
name|'releaseName'
op|'='
string|'"Twisted%s-%s"'
op|'%'
op|'('
name|'projectName'
op|'.'
name|'capitalize'
op|'('
op|')'
op|','
name|'version'
op|')'
newline|'\n'
name|'outputFile'
op|'='
name|'self'
op|'.'
name|'outputDirectory'
op|'.'
name|'child'
op|'('
name|'releaseName'
op|'+'
string|'".tar.bz2"'
op|')'
newline|'\n'
name|'buildPath'
op|'='
name|'lambda'
op|'*'
name|'args'
op|':'
string|"'/'"
op|'.'
name|'join'
op|'('
op|'('
name|'releaseName'
op|','
op|')'
op|'+'
name|'args'
op|')'
newline|'\n'
name|'subProjectDir'
op|'='
name|'self'
op|'.'
name|'rootDirectory'
op|'.'
name|'child'
op|'('
string|'"twisted"'
op|')'
op|'.'
name|'child'
op|'('
name|'projectName'
op|')'
newline|'\n'
nl|'\n'
name|'tarball'
op|'='
name|'self'
op|'.'
name|'_createBasicSubprojectTarball'
op|'('
name|'projectName'
op|','
name|'version'
op|','
nl|'\n'
name|'outputFile'
op|')'
newline|'\n'
nl|'\n'
name|'tarball'
op|'.'
name|'add'
op|'('
name|'subProjectDir'
op|'.'
name|'child'
op|'('
string|'"topfiles"'
op|')'
op|'.'
name|'path'
op|','
name|'releaseName'
op|')'
newline|'\n'
nl|'\n'
comment|'# Include all files in the subproject package except for topfiles.'
nl|'\n'
name|'for'
name|'child'
name|'in'
name|'subProjectDir'
op|'.'
name|'children'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'child'
op|'.'
name|'basename'
op|'('
op|')'
newline|'\n'
name|'if'
name|'name'
op|'!='
string|'"topfiles"'
op|':'
newline|'\n'
indent|'                '
name|'tarball'
op|'.'
name|'add'
op|'('
nl|'\n'
name|'child'
op|'.'
name|'path'
op|','
nl|'\n'
name|'buildPath'
op|'('
string|'"twisted"'
op|','
name|'projectName'
op|','
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'pluginsDir'
op|'='
name|'self'
op|'.'
name|'rootDirectory'
op|'.'
name|'child'
op|'('
string|'"twisted"'
op|')'
op|'.'
name|'child'
op|'('
string|'"plugins"'
op|')'
newline|'\n'
comment|'# Include the plugin for the subproject.'
nl|'\n'
name|'pluginFileName'
op|'='
string|'"twisted_%s.py"'
op|'%'
op|'('
name|'projectName'
op|','
op|')'
newline|'\n'
name|'pluginFile'
op|'='
name|'pluginsDir'
op|'.'
name|'child'
op|'('
name|'pluginFileName'
op|')'
newline|'\n'
name|'if'
name|'pluginFile'
op|'.'
name|'exists'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'tarball'
op|'.'
name|'add'
op|'('
name|'pluginFile'
op|'.'
name|'path'
op|','
nl|'\n'
name|'buildPath'
op|'('
string|'"twisted"'
op|','
string|'"plugins"'
op|','
name|'pluginFileName'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Include the bin directory for the subproject.'
nl|'\n'
dedent|''
name|'binPath'
op|'='
name|'self'
op|'.'
name|'rootDirectory'
op|'.'
name|'child'
op|'('
string|'"bin"'
op|')'
op|'.'
name|'child'
op|'('
name|'projectName'
op|')'
newline|'\n'
name|'if'
name|'binPath'
op|'.'
name|'isdir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'tarball'
op|'.'
name|'add'
op|'('
name|'binPath'
op|'.'
name|'path'
op|','
name|'buildPath'
op|'('
string|'"bin"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'tarball'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'outputFile'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_createBasicSubprojectTarball
dedent|''
name|'def'
name|'_createBasicSubprojectTarball'
op|'('
name|'self'
op|','
name|'projectName'
op|','
name|'version'
op|','
name|'outputFile'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Helper method to create and fill a tarball with things common between\n        subprojects and core.\n\n        @param projectName: The subproject\'s name.\n        @type projectName: C{str}\n        @param version: The version of the release.\n        @type version: C{str}\n        @param outputFile: The location of the tar file to create.\n        @type outputFile: L{FilePath}\n        """'
newline|'\n'
name|'releaseName'
op|'='
string|'"Twisted%s-%s"'
op|'%'
op|'('
name|'projectName'
op|'.'
name|'capitalize'
op|'('
op|')'
op|','
name|'version'
op|')'
newline|'\n'
name|'buildPath'
op|'='
name|'lambda'
op|'*'
name|'args'
op|':'
string|"'/'"
op|'.'
name|'join'
op|'('
op|'('
name|'releaseName'
op|','
op|')'
op|'+'
name|'args'
op|')'
newline|'\n'
nl|'\n'
name|'tarball'
op|'='
name|'tarfile'
op|'.'
name|'TarFile'
op|'.'
name|'open'
op|'('
name|'outputFile'
op|'.'
name|'path'
op|','
string|"'w:bz2'"
op|')'
newline|'\n'
nl|'\n'
name|'tarball'
op|'.'
name|'add'
op|'('
name|'self'
op|'.'
name|'rootDirectory'
op|'.'
name|'child'
op|'('
string|'"LICENSE"'
op|')'
op|'.'
name|'path'
op|','
nl|'\n'
name|'buildPath'
op|'('
string|'"LICENSE"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'docPath'
op|'='
name|'self'
op|'.'
name|'rootDirectory'
op|'.'
name|'child'
op|'('
string|'"doc"'
op|')'
op|'.'
name|'child'
op|'('
name|'projectName'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'docPath'
op|'.'
name|'isdir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'child'
name|'in'
name|'docPath'
op|'.'
name|'walk'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_buildDocInDir'
op|'('
name|'child'
op|','
name|'version'
op|','
name|'docPath'
op|'.'
name|'child'
op|'('
string|'"howto"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'tarball'
op|'.'
name|'add'
op|'('
name|'docPath'
op|'.'
name|'path'
op|','
name|'buildPath'
op|'('
string|'"doc"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'tarball'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UncleanWorkingDirectory
dedent|''
dedent|''
name|'class'
name|'UncleanWorkingDirectory'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when the working directory of an SVN checkout is unclean.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NotWorkingDirectory
dedent|''
name|'class'
name|'NotWorkingDirectory'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised when a directory does not appear to be an SVN working directory.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|buildAllTarballs
dedent|''
name|'def'
name|'buildAllTarballs'
op|'('
name|'checkout'
op|','
name|'destination'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Build complete tarballs (including documentation) for Twisted and all\n    subprojects.\n\n    This should be called after the version numbers have been updated and\n    NEWS files created.\n\n    @type checkout: L{FilePath}\n    @param checkout: The SVN working copy from which a pristine source tree\n        will be exported.\n    @type destination: L{FilePath}\n    @param destination: The directory in which tarballs will be placed.\n\n    @raise UncleanWorkingDirectory: if there are modifications to the\n        working directory of C{checkout}.\n    @raise NotWorkingDirectory: if the checkout path is not an SVN checkout.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'checkout'
op|'.'
name|'child'
op|'('
string|'".svn"'
op|')'
op|'.'
name|'exists'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotWorkingDirectory'
op|'('
nl|'\n'
string|'"%s does not appear to be an SVN working directory."'
nl|'\n'
op|'%'
op|'('
name|'checkout'
op|'.'
name|'path'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'runCommand'
op|'('
op|'['
string|'"svn"'
op|','
string|'"st"'
op|','
name|'checkout'
op|'.'
name|'path'
op|']'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'UncleanWorkingDirectory'
op|'('
nl|'\n'
string|'"There are local modifications to the SVN checkout in %s."'
nl|'\n'
op|'%'
op|'('
name|'checkout'
op|'.'
name|'path'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'workPath'
op|'='
name|'FilePath'
op|'('
name|'mkdtemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'export'
op|'='
name|'workPath'
op|'.'
name|'child'
op|'('
string|'"export"'
op|')'
newline|'\n'
name|'runCommand'
op|'('
op|'['
string|'"svn"'
op|','
string|'"export"'
op|','
name|'checkout'
op|'.'
name|'path'
op|','
name|'export'
op|'.'
name|'path'
op|']'
op|')'
newline|'\n'
name|'twistedPath'
op|'='
name|'export'
op|'.'
name|'child'
op|'('
string|'"twisted"'
op|')'
newline|'\n'
name|'version'
op|'='
name|'Project'
op|'('
name|'twistedPath'
op|')'
op|'.'
name|'getVersion'
op|'('
op|')'
newline|'\n'
name|'versionString'
op|'='
name|'version'
op|'.'
name|'base'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'apiBaseURL'
op|'='
string|'"http://twistedmatrix.com/documents/%s/api/%%s.html"'
op|'%'
op|'('
nl|'\n'
name|'versionString'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'destination'
op|'.'
name|'exists'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'destination'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
dedent|''
name|'db'
op|'='
name|'DistributionBuilder'
op|'('
name|'export'
op|','
name|'destination'
op|','
name|'apiBaseURL'
op|'='
name|'apiBaseURL'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'buildCore'
op|'('
name|'versionString'
op|')'
newline|'\n'
name|'for'
name|'subproject'
name|'in'
name|'twisted_subprojects'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'subproject'
name|'not'
name|'in'
name|'db'
op|'.'
name|'blacklist'
nl|'\n'
name|'and'
name|'twistedPath'
op|'.'
name|'child'
op|'('
name|'subproject'
op|')'
op|'.'
name|'exists'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'buildSubProject'
op|'('
name|'subproject'
op|','
name|'versionString'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'db'
op|'.'
name|'buildTwisted'
op|'('
name|'versionString'
op|')'
newline|'\n'
name|'workPath'
op|'.'
name|'remove'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ChangeVersionsScript
dedent|''
name|'class'
name|'ChangeVersionsScript'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A thing for changing version numbers. See L{main}.\n    """'
newline|'\n'
DECL|variable|changeAllProjectVersions
name|'changeAllProjectVersions'
op|'='
name|'staticmethod'
op|'('
name|'changeAllProjectVersions'
op|')'
newline|'\n'
nl|'\n'
DECL|member|main
name|'def'
name|'main'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a list of command-line arguments, change all the Twisted versions\n        in the current directory.\n\n        @type args: list of str\n        @param args: List of command line arguments.  This should only\n            contain the version number.\n        """'
newline|'\n'
name|'version_format'
op|'='
op|'('
nl|'\n'
string|'"Version should be in a form kind of like \'1.2.3[pre4]\'"'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'args'
op|')'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'exit'
op|'('
string|'"Must specify exactly one argument to change-versions"'
op|')'
newline|'\n'
dedent|''
name|'version'
op|'='
name|'args'
op|'['
number|'0'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'major'
op|','
name|'minor'
op|','
name|'micro_and_pre'
op|'='
name|'version'
op|'.'
name|'split'
op|'('
string|'"."'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SystemExit'
op|'('
name|'version_format'
op|')'
newline|'\n'
dedent|''
name|'if'
string|'"pre"'
name|'in'
name|'micro_and_pre'
op|':'
newline|'\n'
indent|'            '
name|'micro'
op|','
name|'pre'
op|'='
name|'micro_and_pre'
op|'.'
name|'split'
op|'('
string|'"pre"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'micro'
op|'='
name|'micro_and_pre'
newline|'\n'
name|'pre'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'major'
op|'='
name|'int'
op|'('
name|'major'
op|')'
newline|'\n'
name|'minor'
op|'='
name|'int'
op|'('
name|'minor'
op|')'
newline|'\n'
name|'micro'
op|'='
name|'int'
op|'('
name|'micro'
op|')'
newline|'\n'
name|'if'
name|'pre'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'pre'
op|'='
name|'int'
op|'('
name|'pre'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SystemExit'
op|'('
name|'version_format'
op|')'
newline|'\n'
dedent|''
name|'version_template'
op|'='
name|'Version'
op|'('
string|'"Whatever"'
op|','
nl|'\n'
name|'major'
op|','
name|'minor'
op|','
name|'micro'
op|','
name|'prerelease'
op|'='
name|'pre'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'changeAllProjectVersions'
op|'('
name|'FilePath'
op|'('
string|'"."'
op|')'
op|','
name|'version_template'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BuildTarballsScript
dedent|''
dedent|''
name|'class'
name|'BuildTarballsScript'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A thing for building release tarballs. See L{main}.\n    """'
newline|'\n'
DECL|variable|buildAllTarballs
name|'buildAllTarballs'
op|'='
name|'staticmethod'
op|'('
name|'buildAllTarballs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|main
name|'def'
name|'main'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build all release tarballs.\n\n        @type args: list of str\n        @param args: The command line arguments to process.  This must contain\n            two strings: the checkout directory and the destination directory.\n        """'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'args'
op|')'
op|'!='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'exit'
op|'('
string|'"Must specify two arguments: "'
nl|'\n'
string|'"Twisted checkout and destination path"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'buildAllTarballs'
op|'('
name|'FilePath'
op|'('
name|'args'
op|'['
number|'0'
op|']'
op|')'
op|','
name|'FilePath'
op|'('
name|'args'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BuildAPIDocsScript
dedent|''
dedent|''
name|'class'
name|'BuildAPIDocsScript'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A thing for building API documentation. See L{main}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|buildAPIDocs
name|'def'
name|'buildAPIDocs'
op|'('
name|'self'
op|','
name|'projectRoot'
op|','
name|'output'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build the API documentation of Twisted, with our project policy.\n\n        @param projectRoot: A L{FilePath} representing the root of the Twisted\n            checkout.\n        @param output: A L{FilePath} pointing to the desired output directory.\n        """'
newline|'\n'
name|'version'
op|'='
name|'Project'
op|'('
name|'projectRoot'
op|'.'
name|'child'
op|'('
string|'"twisted"'
op|')'
op|')'
op|'.'
name|'getVersion'
op|'('
op|')'
newline|'\n'
name|'versionString'
op|'='
name|'version'
op|'.'
name|'base'
op|'('
op|')'
newline|'\n'
name|'sourceURL'
op|'='
op|'('
string|'"http://twistedmatrix.com/trac/browser/tags/releases/"'
nl|'\n'
string|'"twisted-%s"'
op|'%'
op|'('
name|'versionString'
op|','
op|')'
op|')'
newline|'\n'
name|'apiBuilder'
op|'='
name|'APIBuilder'
op|'('
op|')'
newline|'\n'
name|'apiBuilder'
op|'.'
name|'build'
op|'('
nl|'\n'
string|'"Twisted"'
op|','
nl|'\n'
string|'"http://twistedmatrix.com/"'
op|','
nl|'\n'
name|'sourceURL'
op|','
nl|'\n'
name|'projectRoot'
op|'.'
name|'child'
op|'('
string|'"twisted"'
op|')'
op|','
nl|'\n'
name|'output'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|main
dedent|''
name|'def'
name|'main'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build API documentation.\n\n        @type args: list of str\n        @param args: The command line arguments to process.  This must contain\n            two strings: the path to the root of the Twisted checkout, and a\n            path to an output directory.\n        """'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'args'
op|')'
op|'!='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'exit'
op|'('
string|'"Must specify two arguments: "'
nl|'\n'
string|'"Twisted checkout and distination path"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'buildAPIDocs'
op|'('
name|'FilePath'
op|'('
name|'args'
op|'['
number|'0'
op|']'
op|')'
op|','
name|'FilePath'
op|'('
name|'args'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.test.test_log -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nLogging and metrics infrastructure.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'division'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
name|'from'
name|'datetime'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'Interface'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'util'
op|','
name|'context'
op|','
name|'reflect'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ILogContext
name|'class'
name|'ILogContext'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Actually, this interface is just a synoym for the dictionary interface,\n    but it serves as a key for the default information in a log.\n\n    I do not inherit from Interface because the world is a cruel place.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ILogObserver
dedent|''
name|'class'
name|'ILogObserver'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An observer which can do something with log events.\n    \n    Given that most log observers are actually bound methods, it\'s okay to not\n    explicitly declare provision of this interface.\n    """'
newline|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'eventDict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Log an event.\n\n        @type eventDict: C{dict} with C{str} keys.\n        @param eventDict: A dictionary with arbitrary keys.  However, these\n            keys are often available:\n              - C{message}: A C{tuple} of C{str} containing messages to be\n                logged.\n              - C{system}: A C{str} which indicates the "system" which is\n                generating this event.\n              - C{isError}: A C{bool} indicating whether this event represents\n                an error.\n              - C{failure}: A L{failure.Failure} instance\n              - C{why}: Used as header of the traceback in case of errors.\n              - C{format}: A string format used in place of C{message} to\n                customize the event.  The intent is for the observer to format\n                a message by doing something like C{format % eventDict}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'context'
op|'.'
name|'setDefault'
op|'('
name|'ILogContext'
op|','
nl|'\n'
op|'{'
string|'"isError"'
op|':'
number|'0'
op|','
nl|'\n'
string|'"system"'
op|':'
string|'"-"'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|callWithContext
name|'def'
name|'callWithContext'
op|'('
name|'ctx'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'newCtx'
op|'='
name|'context'
op|'.'
name|'get'
op|'('
name|'ILogContext'
op|')'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'newCtx'
op|'.'
name|'update'
op|'('
name|'ctx'
op|')'
newline|'\n'
name|'return'
name|'context'
op|'.'
name|'call'
op|'('
op|'{'
name|'ILogContext'
op|':'
name|'newCtx'
op|'}'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|function|callWithLogger
dedent|''
name|'def'
name|'callWithLogger'
op|'('
name|'logger'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Utility method which wraps a function in a try:/except:, logs a failure if\n    one occurrs, and uses the system\'s logPrefix.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'lp'
op|'='
name|'logger'
op|'.'
name|'logPrefix'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyboardInterrupt'
op|':'
newline|'\n'
indent|'        '
name|'raise'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'        '
name|'lp'
op|'='
string|"'(buggy logPrefix method)'"
newline|'\n'
name|'err'
op|'('
name|'system'
op|'='
name|'lp'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'callWithContext'
op|'('
op|'{'
string|'"system"'
op|':'
name|'lp'
op|'}'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyboardInterrupt'
op|':'
newline|'\n'
indent|'        '
name|'raise'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'        '
name|'err'
op|'('
name|'system'
op|'='
name|'lp'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_keepErrors
dedent|''
dedent|''
name|'_keepErrors'
op|'='
number|'0'
newline|'\n'
DECL|variable|_keptErrors
name|'_keptErrors'
op|'='
op|'['
op|']'
newline|'\n'
DECL|variable|_ignoreErrors
name|'_ignoreErrors'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|startKeepingErrors
name|'def'
name|'startKeepingErrors'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DEPRECATED in Twisted 2.5.\n\n    Support function for testing frameworks.\n\n    Start keeping errors in a buffer which can be retrieved (and emptied) with\n    flushErrors.\n    """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"log.startKeepingErrors is deprecated since Twisted 2.5"'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'global'
name|'_keepErrors'
newline|'\n'
name|'_keepErrors'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|flushErrors
dedent|''
name|'def'
name|'flushErrors'
op|'('
op|'*'
name|'errorTypes'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DEPRECATED in Twisted 2.5.  See L{TestCase.flushLoggedErrors}.\n\n    Support function for testing frameworks.\n\n    Return a list of errors that occurred since the last call to flushErrors().\n    (This will return None unless startKeepingErrors has been called.)\n    """'
newline|'\n'
nl|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"log.flushErrors is deprecated since Twisted 2.5. "'
nl|'\n'
string|'"If you need to flush errors from within a unittest, "'
nl|'\n'
string|'"use TestCase.flushLoggedErrors instead."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'return'
name|'_flushErrors'
op|'('
op|'*'
name|'errorTypes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_flushErrors
dedent|''
name|'def'
name|'_flushErrors'
op|'('
op|'*'
name|'errorTypes'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    PRIVATE. DEPRECATED. DON\'T USE.\n    """'
newline|'\n'
name|'global'
name|'_keptErrors'
newline|'\n'
name|'k'
op|'='
name|'_keptErrors'
newline|'\n'
name|'_keptErrors'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'errorTypes'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'erk'
name|'in'
name|'k'
op|':'
newline|'\n'
indent|'            '
name|'shouldReLog'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'errT'
name|'in'
name|'errorTypes'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'erk'
op|'.'
name|'check'
op|'('
name|'errT'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'shouldReLog'
op|'='
number|'0'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'shouldReLog'
op|':'
newline|'\n'
indent|'                '
name|'err'
op|'('
name|'erk'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'k'
newline|'\n'
nl|'\n'
DECL|function|ignoreErrors
dedent|''
name|'def'
name|'ignoreErrors'
op|'('
op|'*'
name|'types'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DEPRECATED\n    """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"log.ignoreErrors is deprecated since Twisted 2.5"'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'_ignore'
op|'('
op|'*'
name|'types'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_ignore
dedent|''
name|'def'
name|'_ignore'
op|'('
op|'*'
name|'types'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    PRIVATE. DEPRECATED. DON\'T USE.\n    """'
newline|'\n'
name|'for'
name|'type'
name|'in'
name|'types'
op|':'
newline|'\n'
indent|'        '
name|'_ignoreErrors'
op|'.'
name|'append'
op|'('
name|'type'
op|')'
newline|'\n'
nl|'\n'
DECL|function|clearIgnores
dedent|''
dedent|''
name|'def'
name|'clearIgnores'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DEPRECATED\n    """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"log.clearIgnores is deprecated since Twisted 2.5"'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'_clearIgnores'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_clearIgnores
dedent|''
name|'def'
name|'_clearIgnores'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    PRIVATE. DEPRECATED. DON\'T USE.\n    """'
newline|'\n'
name|'global'
name|'_ignoreErrors'
newline|'\n'
name|'_ignoreErrors'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|err
dedent|''
name|'def'
name|'err'
op|'('
name|'_stuff'
op|'='
name|'None'
op|','
name|'_why'
op|'='
name|'None'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Write a failure to the log.\n\n    The C{_stuff} and C{_why} parameters use an underscore prefix to lessen\n    the chance of colliding with a keyword argument the application wishes\n    to pass.  It is intended that they be supplied with arguments passed\n    positionally, not by keyword.\n\n    @param _stuff: The failure to log.  If C{_stuff} is C{None} a new\n        L{Failure} will be created from the current exception state.  If\n        C{_stuff} is an C{Exception} instance it will be wrapped in a\n        L{Failure}.\n    @type _stuff: C{NoneType}, C{Exception}, or L{Failure}.\n\n    @param _why: The source of this failure.  This will be logged along with\n        C{_stuff} and should describe the context in which the failure\n        occurred.\n    @type _why: C{str}\n    """'
newline|'\n'
name|'if'
name|'_stuff'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'_stuff'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'_stuff'
op|','
name|'failure'
op|'.'
name|'Failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'_keepErrors'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'_ignoreErrors'
op|':'
newline|'\n'
indent|'                '
name|'keep'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'err'
name|'in'
name|'_ignoreErrors'
op|':'
newline|'\n'
indent|'                    '
name|'r'
op|'='
name|'_stuff'
op|'.'
name|'check'
op|'('
name|'err'
op|')'
newline|'\n'
name|'if'
name|'r'
op|':'
newline|'\n'
indent|'                        '
name|'keep'
op|'='
number|'0'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'keep'
op|'='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'keep'
op|':'
newline|'\n'
indent|'                    '
name|'_keptErrors'
op|'.'
name|'append'
op|'('
name|'_stuff'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'_keptErrors'
op|'.'
name|'append'
op|'('
name|'_stuff'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'msg'
op|'('
name|'failure'
op|'='
name|'_stuff'
op|','
name|'why'
op|'='
name|'_why'
op|','
name|'isError'
op|'='
number|'1'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'_stuff'
op|','
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'('
name|'failure'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'_stuff'
op|')'
op|','
name|'why'
op|'='
name|'_why'
op|','
name|'isError'
op|'='
number|'1'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'('
name|'repr'
op|'('
name|'_stuff'
op|')'
op|','
name|'why'
op|'='
name|'_why'
op|','
name|'isError'
op|'='
number|'1'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|deferr
dedent|''
dedent|''
name|'deferr'
op|'='
name|'err'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Logger
name|'class'
name|'Logger'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This represents a class which may \'own\' a log. Used by subclassing.\n    """'
newline|'\n'
DECL|member|logPrefix
name|'def'
name|'logPrefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override this method to insert custom logging behavior.  Its\n        return value will be inserted in front of every line.  It may\n        be called more times than the number of output lines.\n        """'
newline|'\n'
name|'return'
string|"'-'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LogPublisher
dedent|''
dedent|''
name|'class'
name|'LogPublisher'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Class for singleton log message publishing.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|synchronized
name|'synchronized'
op|'='
op|'['
string|"'msg'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'observers'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|addObserver
dedent|''
name|'def'
name|'addObserver'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add a new observer.\n\n        @type other: Provider of L{ILogObserver}\n        @param other: A callable object that will be called with each new log\n            message (a dict).\n        """'
newline|'\n'
name|'assert'
name|'callable'
op|'('
name|'other'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'observers'
op|'.'
name|'append'
op|'('
name|'other'
op|')'
newline|'\n'
nl|'\n'
DECL|member|removeObserver
dedent|''
name|'def'
name|'removeObserver'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove an observer.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'observers'
op|'.'
name|'remove'
op|'('
name|'other'
op|')'
newline|'\n'
nl|'\n'
DECL|member|msg
dedent|''
name|'def'
name|'msg'
op|'('
name|'self'
op|','
op|'*'
name|'message'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Log a new message.\n\n        For example::\n\n        >>> log.msg(\'Hello, world.\')\n\n        In particular, you MUST avoid the forms::\n\n        >>> log.msg(u\'Hello, world.\')\n        >>> log.msg(\'Hello \', \'world.\')\n\n        These forms work (sometimes) by accident and will be disabled\n        entirely in the future.\n        """'
newline|'\n'
name|'actualEventDict'
op|'='
op|'('
name|'context'
op|'.'
name|'get'
op|'('
name|'ILogContext'
op|')'
name|'or'
op|'{'
op|'}'
op|')'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'actualEventDict'
op|'.'
name|'update'
op|'('
name|'kw'
op|')'
newline|'\n'
name|'actualEventDict'
op|'['
string|"'message'"
op|']'
op|'='
name|'message'
newline|'\n'
name|'actualEventDict'
op|'['
string|"'time'"
op|']'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'observers'
op|')'
op|'-'
number|'1'
op|','
op|'-'
number|'1'
op|','
op|'-'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'observers'
op|'['
name|'i'
op|']'
op|'('
name|'actualEventDict'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyboardInterrupt'
op|':'
newline|'\n'
comment|"# Don't swallow keyboard interrupt!"
nl|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeEncodeError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'observer'
op|'='
name|'self'
op|'.'
name|'observers'
op|'['
name|'i'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'observers'
op|'['
name|'i'
op|']'
op|'='
name|'lambda'
name|'event'
op|':'
name|'None'
newline|'\n'
name|'err'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|','
nl|'\n'
string|'"Log observer %s failed."'
op|'%'
op|'('
name|'observer'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'observers'
op|'['
name|'i'
op|']'
op|'='
name|'observer'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|showwarning
dedent|''
dedent|''
dedent|''
name|'def'
name|'showwarning'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'category'
op|','
name|'filename'
op|','
name|'lineno'
op|','
name|'file'
op|'='
name|'None'
op|','
nl|'\n'
name|'line'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Twisted-enabled wrapper around L{warnings.showwarning}.\n\n        If C{file} is C{None}, the default behaviour is to emit the warning to\n        the log system, otherwise the original L{warnings.showwarning} Python\n        function is called.\n        """'
newline|'\n'
name|'if'
name|'file'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'msg'
op|'('
name|'warning'
op|'='
name|'message'
op|','
name|'category'
op|'='
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'category'
op|')'
op|','
nl|'\n'
name|'filename'
op|'='
name|'filename'
op|','
name|'lineno'
op|'='
name|'lineno'
op|','
nl|'\n'
name|'format'
op|'='
string|'"%(filename)s:%(lineno)s: %(category)s: %(warning)s"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'sys'
op|'.'
name|'version_info'
op|'<'
op|'('
number|'2'
op|','
number|'6'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'_oldshowwarning'
op|'('
name|'message'
op|','
name|'category'
op|','
name|'filename'
op|','
name|'lineno'
op|','
name|'file'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'_oldshowwarning'
op|'('
name|'message'
op|','
name|'category'
op|','
name|'filename'
op|','
name|'lineno'
op|','
name|'file'
op|','
name|'line'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'theLogPublisher'
newline|'\n'
dedent|''
name|'except'
name|'NameError'
op|':'
newline|'\n'
DECL|variable|theLogPublisher
indent|'    '
name|'theLogPublisher'
op|'='
name|'LogPublisher'
op|'('
op|')'
newline|'\n'
DECL|variable|addObserver
name|'addObserver'
op|'='
name|'theLogPublisher'
op|'.'
name|'addObserver'
newline|'\n'
DECL|variable|removeObserver
name|'removeObserver'
op|'='
name|'theLogPublisher'
op|'.'
name|'removeObserver'
newline|'\n'
DECL|variable|msg
name|'msg'
op|'='
name|'theLogPublisher'
op|'.'
name|'msg'
newline|'\n'
DECL|variable|showwarning
name|'showwarning'
op|'='
name|'theLogPublisher'
op|'.'
name|'showwarning'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_safeFormat
dedent|''
name|'def'
name|'_safeFormat'
op|'('
name|'fmtString'
op|','
name|'fmtDict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Try to format the string C{fmtString} using C{fmtDict} arguments,\n    swallowing all errors to always return a string.\n    """'
newline|'\n'
comment|"# There's a way we could make this if not safer at least more"
nl|'\n'
comment|'# informative: perhaps some sort of str/repr wrapper objects'
nl|'\n'
comment|'# could be wrapped around the things inside of C{fmtDict}. That way'
nl|'\n'
comment|'# if the event dict contains an object with a bad __repr__, we'
nl|'\n'
comment|'# can only cry about that individual object instead of the'
nl|'\n'
comment|'# entire event dict.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'text'
op|'='
name|'fmtString'
op|'%'
name|'fmtDict'
newline|'\n'
dedent|''
name|'except'
name|'KeyboardInterrupt'
op|':'
newline|'\n'
indent|'        '
name|'raise'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'text'
op|'='
op|'('
string|"'Invalid format string or unformattable object in log message: %r, %s'"
op|'%'
op|'('
name|'fmtString'
op|','
name|'fmtDict'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'text'
op|'='
string|"'UNFORMATTABLE OBJECT WRITTEN TO LOG with fmt %r, MESSAGE LOST'"
op|'%'
op|'('
name|'fmtString'
op|','
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'text'
op|'='
string|"'PATHOLOGICAL ERROR IN BOTH FORMAT STRING AND MESSAGE DETAILS, MESSAGE LOST'"
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'text'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|textFromEventDict
dedent|''
name|'def'
name|'textFromEventDict'
op|'('
name|'eventDict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Extract text from an event dict passed to a log observer. If it cannot\n    handle the dict, it returns None.\n\n    The possible keys of eventDict are:\n     - C{message}: by default, it holds the final text. It\'s required, but can\n       be empty if either C{isError} or C{format} is provided (the first\n       having the priority).\n     - C{isError}: boolean indicating the nature of the event.\n     - C{failure}: L{failure.Failure} instance, required if the event is an\n       error.\n     - C{why}: if defined, used as header of the traceback in case of errors.\n     - C{format}: string format used in place of C{message} to customize\n       the event. It uses all keys present in C{eventDict} to format\n       the text.\n    Other keys will be used when applying the C{format}, or ignored.\n    """'
newline|'\n'
name|'edm'
op|'='
name|'eventDict'
op|'['
string|"'message'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'edm'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'eventDict'
op|'['
string|"'isError'"
op|']'
name|'and'
string|"'failure'"
name|'in'
name|'eventDict'
op|':'
newline|'\n'
indent|'            '
name|'text'
op|'='
op|'('
op|'('
name|'eventDict'
op|'.'
name|'get'
op|'('
string|"'why'"
op|')'
name|'or'
string|"'Unhandled Error'"
op|')'
nl|'\n'
op|'+'
string|"'\\n'"
op|'+'
name|'eventDict'
op|'['
string|"'failure'"
op|']'
op|'.'
name|'getTraceback'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
string|"'format'"
name|'in'
name|'eventDict'
op|':'
newline|'\n'
indent|'            '
name|'text'
op|'='
name|'_safeFormat'
op|'('
name|'eventDict'
op|'['
string|"'format'"
op|']'
op|','
name|'eventDict'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# we don't know how to log this"
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'text'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'reflect'
op|'.'
name|'safe_str'
op|','
name|'edm'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'text'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FileLogObserver
dedent|''
name|'class'
name|'FileLogObserver'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Log observer that writes to a file-like object.\n\n    @type timeFormat: C{str} or C{NoneType}\n    @ivar timeFormat: If not C{None}, the format string passed to strftime().\n    """'
newline|'\n'
DECL|variable|timeFormat
name|'timeFormat'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'='
name|'f'
op|'.'
name|'write'
newline|'\n'
name|'self'
op|'.'
name|'flush'
op|'='
name|'f'
op|'.'
name|'flush'
newline|'\n'
nl|'\n'
DECL|member|getTimezoneOffset
dedent|''
name|'def'
name|'getTimezoneOffset'
op|'('
name|'self'
op|','
name|'when'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the current local timezone offset from UTC.\n\n        @type when: C{int}\n        @param when: POSIX (ie, UTC) timestamp for which to find the offset.\n\n        @rtype: C{int}\n        @return: The number of seconds offset from UTC.  West is positive,\n        east is negative.\n        """'
newline|'\n'
name|'offset'
op|'='
name|'datetime'
op|'.'
name|'utcfromtimestamp'
op|'('
name|'when'
op|')'
op|'-'
name|'datetime'
op|'.'
name|'fromtimestamp'
op|'('
name|'when'
op|')'
newline|'\n'
name|'return'
name|'offset'
op|'.'
name|'days'
op|'*'
op|'('
number|'60'
op|'*'
number|'60'
op|'*'
number|'24'
op|')'
op|'+'
name|'offset'
op|'.'
name|'seconds'
newline|'\n'
nl|'\n'
DECL|member|formatTime
dedent|''
name|'def'
name|'formatTime'
op|'('
name|'self'
op|','
name|'when'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Format the given UTC value as a string representing that time in the\n        local timezone.\n\n        By default it\'s formatted as a ISO8601-like string (ISO8601 date and\n        ISO8601 time separated by a space). It can be customized using the\n        C{timeFormat} attribute, which will be used as input for the underlying\n        C{time.strftime} call.\n\n        @type when: C{int}\n        @param when: POSIX (ie, UTC) timestamp for which to find the offset.\n\n        @rtype: C{str}\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'timeFormat'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'time'
op|'.'
name|'strftime'
op|'('
name|'self'
op|'.'
name|'timeFormat'
op|','
name|'time'
op|'.'
name|'localtime'
op|'('
name|'when'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'tzOffset'
op|'='
op|'-'
name|'self'
op|'.'
name|'getTimezoneOffset'
op|'('
name|'when'
op|')'
newline|'\n'
name|'when'
op|'='
name|'datetime'
op|'.'
name|'utcfromtimestamp'
op|'('
name|'when'
op|'+'
name|'tzOffset'
op|')'
newline|'\n'
name|'tzHour'
op|'='
name|'abs'
op|'('
name|'int'
op|'('
name|'tzOffset'
op|'/'
number|'60'
op|'/'
number|'60'
op|')'
op|')'
newline|'\n'
name|'tzMin'
op|'='
name|'abs'
op|'('
name|'int'
op|'('
name|'tzOffset'
op|'/'
number|'60'
op|'%'
number|'60'
op|')'
op|')'
newline|'\n'
name|'if'
name|'tzOffset'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'tzSign'
op|'='
string|"'-'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'tzSign'
op|'='
string|"'+'"
newline|'\n'
dedent|''
name|'return'
string|"'%d-%02d-%02d %02d:%02d:%02d%s%02d%02d'"
op|'%'
op|'('
nl|'\n'
name|'when'
op|'.'
name|'year'
op|','
name|'when'
op|'.'
name|'month'
op|','
name|'when'
op|'.'
name|'day'
op|','
nl|'\n'
name|'when'
op|'.'
name|'hour'
op|','
name|'when'
op|'.'
name|'minute'
op|','
name|'when'
op|'.'
name|'second'
op|','
nl|'\n'
name|'tzSign'
op|','
name|'tzHour'
op|','
name|'tzMin'
op|')'
newline|'\n'
nl|'\n'
DECL|member|emit
dedent|''
name|'def'
name|'emit'
op|'('
name|'self'
op|','
name|'eventDict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'text'
op|'='
name|'textFromEventDict'
op|'('
name|'eventDict'
op|')'
newline|'\n'
name|'if'
name|'text'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'timeStr'
op|'='
name|'self'
op|'.'
name|'formatTime'
op|'('
name|'eventDict'
op|'['
string|"'time'"
op|']'
op|')'
newline|'\n'
name|'fmtDict'
op|'='
op|'{'
string|"'system'"
op|':'
name|'eventDict'
op|'['
string|"'system'"
op|']'
op|','
string|"'text'"
op|':'
name|'text'
op|'.'
name|'replace'
op|'('
string|'"\\n"'
op|','
string|'"\\n\\t"'
op|')'
op|'}'
newline|'\n'
name|'msgStr'
op|'='
name|'_safeFormat'
op|'('
string|'"[%(system)s] %(text)s\\n"'
op|','
name|'fmtDict'
op|')'
newline|'\n'
nl|'\n'
name|'util'
op|'.'
name|'untilConcludes'
op|'('
name|'self'
op|'.'
name|'write'
op|','
name|'timeStr'
op|'+'
string|'" "'
op|'+'
name|'msgStr'
op|')'
newline|'\n'
name|'util'
op|'.'
name|'untilConcludes'
op|'('
name|'self'
op|'.'
name|'flush'
op|')'
comment|'# Hoorj!'
newline|'\n'
nl|'\n'
DECL|member|start
dedent|''
name|'def'
name|'start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Start observing log events.\n        """'
newline|'\n'
name|'addObserver'
op|'('
name|'self'
op|'.'
name|'emit'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stop
dedent|''
name|'def'
name|'stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop observing log events.\n        """'
newline|'\n'
name|'removeObserver'
op|'('
name|'self'
op|'.'
name|'emit'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PythonLoggingObserver
dedent|''
dedent|''
name|'class'
name|'PythonLoggingObserver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Output twisted messages to Python standard library L{logging} module.\n\n    WARNING: specific logging configurations (example: network) can lead to\n    a blocking system. Nothing is done here to prevent that, so be sure to not\n    use this: code within Twisted, such as twisted.web, assumes that logging\n    does not block.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'loggerName'
op|'='
string|'"twisted"'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param loggerName: identifier used for getting logger.\n        @type loggerName: C{str}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'loggerName'
op|')'
newline|'\n'
nl|'\n'
DECL|member|emit
dedent|''
name|'def'
name|'emit'
op|'('
name|'self'
op|','
name|'eventDict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Receive a twisted log entry, format it and bridge it to python.\n\n        By default the logging level used is info; log.err produces error\n        level, and you can customize the level by using the C{logLevel} key::\n\n        >>> log.msg(\'debugging\', logLevel=logging.DEBUG)\n\n        """'
newline|'\n'
name|'if'
string|"'logLevel'"
name|'in'
name|'eventDict'
op|':'
newline|'\n'
indent|'            '
name|'level'
op|'='
name|'eventDict'
op|'['
string|"'logLevel'"
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'eventDict'
op|'['
string|"'isError'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'level'
op|'='
name|'logging'
op|'.'
name|'ERROR'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'level'
op|'='
name|'logging'
op|'.'
name|'INFO'
newline|'\n'
dedent|''
name|'text'
op|'='
name|'textFromEventDict'
op|'('
name|'eventDict'
op|')'
newline|'\n'
name|'if'
name|'text'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'logger'
op|'.'
name|'log'
op|'('
name|'level'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|start
dedent|''
name|'def'
name|'start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Start observing log events.\n        """'
newline|'\n'
name|'addObserver'
op|'('
name|'self'
op|'.'
name|'emit'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stop
dedent|''
name|'def'
name|'stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop observing log events.\n        """'
newline|'\n'
name|'removeObserver'
op|'('
name|'self'
op|'.'
name|'emit'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StdioOnnaStick
dedent|''
dedent|''
name|'class'
name|'StdioOnnaStick'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Class that pretends to be stout/err.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|closed
name|'closed'
op|'='
number|'0'
newline|'\n'
DECL|variable|softspace
name|'softspace'
op|'='
number|'0'
newline|'\n'
DECL|variable|mode
name|'mode'
op|'='
string|"'wb'"
newline|'\n'
DECL|variable|name
name|'name'
op|'='
string|"'<stdio (log)>'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'isError'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'isError'
op|'='
name|'isError'
newline|'\n'
name|'self'
op|'.'
name|'buf'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|fileno
dedent|''
name|'def'
name|'fileno'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'-'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|flush
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|read
dedent|''
name|'def'
name|'read'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'IOError'
op|'('
string|'"can\'t read from the log!"'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|readline
dedent|''
name|'readline'
op|'='
name|'read'
newline|'\n'
DECL|variable|readlines
name|'readlines'
op|'='
name|'read'
newline|'\n'
DECL|variable|seek
name|'seek'
op|'='
name|'read'
newline|'\n'
DECL|variable|tell
name|'tell'
op|'='
name|'read'
newline|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
op|'('
name|'self'
op|'.'
name|'buf'
op|'+'
name|'data'
op|')'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'buf'
op|'='
name|'d'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'messages'
op|'='
name|'d'
op|'['
number|'0'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'for'
name|'message'
name|'in'
name|'messages'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'('
name|'message'
op|','
name|'printed'
op|'='
number|'1'
op|','
name|'isError'
op|'='
name|'self'
op|'.'
name|'isError'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writelines
dedent|''
dedent|''
name|'def'
name|'writelines'
op|'('
name|'self'
op|','
name|'lines'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'line'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'('
name|'line'
op|','
name|'printed'
op|'='
number|'1'
op|','
name|'isError'
op|'='
name|'self'
op|'.'
name|'isError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'_oldshowwarning'
newline|'\n'
dedent|''
name|'except'
name|'NameError'
op|':'
newline|'\n'
DECL|variable|_oldshowwarning
indent|'    '
name|'_oldshowwarning'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|startLogging
dedent|''
name|'def'
name|'startLogging'
op|'('
name|'file'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Initialize logging to a specified file.\n\n    @return: A L{FileLogObserver} if a new observer is added, None otherwise.\n    """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'file'
op|','
name|'StdioOnnaStick'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
dedent|''
name|'flo'
op|'='
name|'FileLogObserver'
op|'('
name|'file'
op|')'
newline|'\n'
name|'startLoggingWithObserver'
op|'('
name|'flo'
op|'.'
name|'emit'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'return'
name|'flo'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|startLoggingWithObserver
dedent|''
name|'def'
name|'startLoggingWithObserver'
op|'('
name|'observer'
op|','
name|'setStdout'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Initialize logging to a specified observer. If setStdout is true\n    (defaults to yes), also redirect sys.stdout and sys.stderr\n    to the specified file.\n    """'
newline|'\n'
name|'global'
name|'defaultObserver'
op|','
name|'_oldshowwarning'
newline|'\n'
name|'if'
name|'not'
name|'_oldshowwarning'
op|':'
newline|'\n'
indent|'        '
name|'_oldshowwarning'
op|'='
name|'warnings'
op|'.'
name|'showwarning'
newline|'\n'
name|'warnings'
op|'.'
name|'showwarning'
op|'='
name|'showwarning'
newline|'\n'
dedent|''
name|'if'
name|'defaultObserver'
op|':'
newline|'\n'
indent|'        '
name|'defaultObserver'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'defaultObserver'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'addObserver'
op|'('
name|'observer'
op|')'
newline|'\n'
name|'msg'
op|'('
string|'"Log opened."'
op|')'
newline|'\n'
name|'if'
name|'setStdout'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'logfile'
newline|'\n'
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'logerr'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NullFile
dedent|''
dedent|''
name|'class'
name|'NullFile'
op|':'
newline|'\n'
DECL|variable|softspace
indent|'    '
name|'softspace'
op|'='
number|'0'
newline|'\n'
DECL|member|read
name|'def'
name|'read'
op|'('
name|'self'
op|')'
op|':'
name|'pass'
newline|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
name|'pass'
newline|'\n'
DECL|member|flush
name|'def'
name|'flush'
op|'('
name|'self'
op|')'
op|':'
name|'pass'
newline|'\n'
DECL|member|close
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|discardLogs
dedent|''
name|'def'
name|'discardLogs'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Throw away all logs.\n    """'
newline|'\n'
name|'global'
name|'logfile'
newline|'\n'
name|'logfile'
op|'='
name|'NullFile'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Prevent logfile from being erased on reload.  This only works in cpython.'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'logfile'
newline|'\n'
dedent|''
name|'except'
name|'NameError'
op|':'
newline|'\n'
DECL|variable|logfile
indent|'    '
name|'logfile'
op|'='
name|'StdioOnnaStick'
op|'('
number|'0'
op|')'
newline|'\n'
DECL|variable|logerr
name|'logerr'
op|'='
name|'StdioOnnaStick'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DefaultObserver
dedent|''
name|'class'
name|'DefaultObserver'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Default observer.\n\n    Will ignore all non-error messages and send error messages to sys.stderr.\n    Will be removed when startLogging() is called for the first time.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_emit
name|'def'
name|'_emit'
op|'('
name|'self'
op|','
name|'eventDict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'eventDict'
op|'['
string|'"isError"'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'failure'"
name|'in'
name|'eventDict'
op|':'
newline|'\n'
indent|'                '
name|'text'
op|'='
name|'eventDict'
op|'['
string|"'failure'"
op|']'
op|'.'
name|'getTraceback'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'text'
op|'='
string|'" "'
op|'.'
name|'join'
op|'('
op|'['
name|'str'
op|'('
name|'m'
op|')'
name|'for'
name|'m'
name|'in'
name|'eventDict'
op|'['
string|'"message"'
op|']'
op|']'
op|')'
op|'+'
string|'"\\n"'
newline|'\n'
dedent|''
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
name|'text'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|start
dedent|''
dedent|''
name|'def'
name|'start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'addObserver'
op|'('
name|'self'
op|'.'
name|'_emit'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stop
dedent|''
name|'def'
name|'stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'removeObserver'
op|'('
name|'self'
op|'.'
name|'_emit'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Some more sibling imports, at the bottom and unqualified to avoid'
nl|'\n'
comment|'# unresolvable circularity'
nl|'\n'
dedent|''
dedent|''
name|'import'
name|'threadable'
op|','
name|'failure'
newline|'\n'
name|'threadable'
op|'.'
name|'synchronize'
op|'('
name|'LogPublisher'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'defaultObserver'
newline|'\n'
dedent|''
name|'except'
name|'NameError'
op|':'
newline|'\n'
DECL|variable|defaultObserver
indent|'    '
name|'defaultObserver'
op|'='
name|'DefaultObserver'
op|'('
op|')'
newline|'\n'
name|'defaultObserver'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
endmarker|''
end_unit

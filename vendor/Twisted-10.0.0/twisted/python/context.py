begin_unit
comment|'# -*- test-case-name: twisted.test.test_context -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
string|'"""\nDynamic pseudo-scoping for Python.\n\nCall functions with context.call({key: value}, func); func and\nfunctions that it calls will be able to use \'context.get(key)\' to\nretrieve \'value\'.\n\nThis is thread-safe.\n"""'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'threading'
name|'import'
name|'local'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|local
indent|'    '
name|'local'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'threadable'
newline|'\n'
nl|'\n'
DECL|variable|defaultContextDict
name|'defaultContextDict'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|setDefault
name|'setDefault'
op|'='
name|'defaultContextDict'
op|'.'
name|'__setitem__'
newline|'\n'
nl|'\n'
DECL|class|ContextTracker
name|'class'
name|'ContextTracker'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'contexts'
op|'='
op|'['
name|'defaultContextDict'
op|']'
newline|'\n'
nl|'\n'
DECL|member|callWithContext
dedent|''
name|'def'
name|'callWithContext'
op|'('
name|'self'
op|','
name|'ctx'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'newContext'
op|'='
name|'self'
op|'.'
name|'contexts'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'newContext'
op|'.'
name|'update'
op|'('
name|'ctx'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'contexts'
op|'.'
name|'append'
op|'('
name|'newContext'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'contexts'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getContext
dedent|''
dedent|''
name|'def'
name|'getContext'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'contexts'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'get'
op|'('
name|'key'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_ThreadedContextTracker
dedent|''
dedent|''
name|'class'
name|'_ThreadedContextTracker'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'threadId'
op|'='
name|'threadable'
op|'.'
name|'getThreadID'
newline|'\n'
name|'self'
op|'.'
name|'contextPerThread'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|currentContext
dedent|''
name|'def'
name|'currentContext'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tkey'
op|'='
name|'self'
op|'.'
name|'threadId'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'contextPerThread'
op|'['
name|'tkey'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'ct'
op|'='
name|'self'
op|'.'
name|'contextPerThread'
op|'['
name|'tkey'
op|']'
op|'='
name|'ContextTracker'
op|'('
op|')'
newline|'\n'
name|'return'
name|'ct'
newline|'\n'
nl|'\n'
DECL|member|callWithContext
dedent|''
dedent|''
name|'def'
name|'callWithContext'
op|'('
name|'self'
op|','
name|'ctx'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'currentContext'
op|'('
op|')'
op|'.'
name|'callWithContext'
op|'('
name|'ctx'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getContext
dedent|''
name|'def'
name|'getContext'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'currentContext'
op|'('
op|')'
op|'.'
name|'getContext'
op|'('
name|'key'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_TLSContextTracker
dedent|''
dedent|''
name|'class'
name|'_TLSContextTracker'
op|'('
name|'_ThreadedContextTracker'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'storage'
op|'='
name|'local'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|currentContext
dedent|''
name|'def'
name|'currentContext'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'storage'
op|'.'
name|'ct'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'ct'
op|'='
name|'self'
op|'.'
name|'storage'
op|'.'
name|'ct'
op|'='
name|'ContextTracker'
op|'('
op|')'
newline|'\n'
name|'return'
name|'ct'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'local'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|ThreadedContextTracker
indent|'    '
name|'ThreadedContextTracker'
op|'='
name|'_ThreadedContextTracker'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|ThreadedContextTracker
indent|'    '
name|'ThreadedContextTracker'
op|'='
name|'_TLSContextTracker'
newline|'\n'
nl|'\n'
DECL|function|installContextTracker
dedent|''
name|'def'
name|'installContextTracker'
op|'('
name|'ctr'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'theContextTracker'
newline|'\n'
name|'global'
name|'call'
newline|'\n'
name|'global'
name|'get'
newline|'\n'
nl|'\n'
name|'theContextTracker'
op|'='
name|'ctr'
newline|'\n'
name|'call'
op|'='
name|'theContextTracker'
op|'.'
name|'callWithContext'
newline|'\n'
name|'get'
op|'='
name|'theContextTracker'
op|'.'
name|'getContext'
newline|'\n'
nl|'\n'
dedent|''
name|'installContextTracker'
op|'('
name|'ThreadedContextTracker'
op|'('
op|')'
op|')'
newline|'\n'
endmarker|''
end_unit

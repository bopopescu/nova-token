begin_unit
comment|'# -*- test-case-name: twisted.python.test.test_versions -*-'
nl|'\n'
comment|'# Copyright (c) 2006-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nVersions for Python packages.\n\nSee L{Version}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'os'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_inf
name|'class'
name|'_inf'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An object that is bigger than all other objects.\n    """'
newline|'\n'
DECL|member|__cmp__
name|'def'
name|'__cmp__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param other: Another object.\n        @type other: any\n\n        @return: 0 if other is inf, 1 otherwise.\n        @rtype: C{int}\n        """'
newline|'\n'
name|'if'
name|'other'
name|'is'
name|'_inf'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|variable|_inf
dedent|''
dedent|''
name|'_inf'
op|'='
name|'_inf'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IncomparableVersions
name|'class'
name|'IncomparableVersions'
op|'('
name|'TypeError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Two versions could not be compared.\n    """'
newline|'\n'
nl|'\n'
DECL|class|Version
dedent|''
name|'class'
name|'Version'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An object that represents a three-part version number.\n\n    If running from an svn checkout, include the revision number in\n    the version string.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'package'
op|','
name|'major'
op|','
name|'minor'
op|','
name|'micro'
op|','
name|'prerelease'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param package: Name of the package that this is a version of.\n        @type package: C{str}\n        @param major: The major version number.\n        @type major: C{int}\n        @param minor: The minor version number.\n        @type minor: C{int}\n        @param micro: The micro version number.\n        @type micro: C{int}\n        @param prerelease: The prerelease number.\n        @type prerelease: C{int}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'package'
op|'='
name|'package'
newline|'\n'
name|'self'
op|'.'
name|'major'
op|'='
name|'major'
newline|'\n'
name|'self'
op|'.'
name|'minor'
op|'='
name|'minor'
newline|'\n'
name|'self'
op|'.'
name|'micro'
op|'='
name|'micro'
newline|'\n'
name|'self'
op|'.'
name|'prerelease'
op|'='
name|'prerelease'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|short
dedent|''
name|'def'
name|'short'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a string in canonical short version format,\n        <major>.<minor>.<micro>[+rSVNVer].\n        """'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'base'
op|'('
op|')'
newline|'\n'
name|'svnver'
op|'='
name|'self'
op|'.'
name|'_getSVNVersion'
op|'('
op|')'
newline|'\n'
name|'if'
name|'svnver'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'+='
string|"'+r'"
op|'+'
name|'str'
op|'('
name|'svnver'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|base
dedent|''
name|'def'
name|'base'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like L{short}, but without the +rSVNVer.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'prerelease'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'pre'
op|'='
string|'""'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'pre'
op|'='
string|'"pre%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'prerelease'
op|','
op|')'
newline|'\n'
dedent|''
name|'return'
string|"'%d.%d.%d%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'major'
op|','
nl|'\n'
name|'self'
op|'.'
name|'minor'
op|','
nl|'\n'
name|'self'
op|'.'
name|'micro'
op|','
nl|'\n'
name|'pre'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'svnver'
op|'='
name|'self'
op|'.'
name|'_formatSVNVersion'
op|'('
op|')'
newline|'\n'
name|'if'
name|'svnver'
op|':'
newline|'\n'
indent|'            '
name|'svnver'
op|'='
string|"'  #'"
op|'+'
name|'svnver'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'prerelease'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'prerelease'
op|'='
string|'""'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'prerelease'
op|'='
string|'", prerelease=%r"'
op|'%'
op|'('
name|'self'
op|'.'
name|'prerelease'
op|','
op|')'
newline|'\n'
dedent|''
name|'return'
string|"'%s(%r, %d, %d, %d%s)%s'"
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'package'
op|','
nl|'\n'
name|'self'
op|'.'
name|'major'
op|','
nl|'\n'
name|'self'
op|'.'
name|'minor'
op|','
nl|'\n'
name|'self'
op|'.'
name|'micro'
op|','
nl|'\n'
name|'prerelease'
op|','
nl|'\n'
name|'svnver'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'[%s, version %s]'"
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'package'
op|','
nl|'\n'
name|'self'
op|'.'
name|'short'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__cmp__
dedent|''
name|'def'
name|'__cmp__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Compare two versions, considering major versions, minor versions, micro\n        versions, then prereleases.\n\n        A version with a prerelease is always less than a version without a\n        prerelease. If both versions have prereleases, they will be included in\n        the comparison.\n\n        @param other: Another version.\n        @type other: L{Version}\n\n        @return: NotImplemented when the other object is not a Version, or one\n            of -1, 0, or 1.\n\n        @raise IncomparableVersions: when the package names of the versions\n            differ.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'other'
op|','
name|'self'
op|'.'
name|'__class__'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'NotImplemented'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'package'
op|'!='
name|'other'
op|'.'
name|'package'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IncomparableVersions'
op|'('
string|'"%r != %r"'
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'package'
op|','
name|'other'
op|'.'
name|'package'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'prerelease'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'prerelease'
op|'='
name|'_inf'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'prerelease'
op|'='
name|'self'
op|'.'
name|'prerelease'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'other'
op|'.'
name|'prerelease'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'otherpre'
op|'='
name|'_inf'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'otherpre'
op|'='
name|'other'
op|'.'
name|'prerelease'
newline|'\n'
nl|'\n'
dedent|''
name|'x'
op|'='
name|'cmp'
op|'('
op|'('
name|'self'
op|'.'
name|'major'
op|','
nl|'\n'
name|'self'
op|'.'
name|'minor'
op|','
nl|'\n'
name|'self'
op|'.'
name|'micro'
op|','
nl|'\n'
name|'prerelease'
op|')'
op|','
nl|'\n'
op|'('
name|'other'
op|'.'
name|'major'
op|','
nl|'\n'
name|'other'
op|'.'
name|'minor'
op|','
nl|'\n'
name|'other'
op|'.'
name|'micro'
op|','
nl|'\n'
name|'otherpre'
op|')'
op|')'
newline|'\n'
name|'return'
name|'x'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_parseSVNEntries_4
dedent|''
name|'def'
name|'_parseSVNEntries_4'
op|'('
name|'self'
op|','
name|'entriesFile'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a readable file object which represents a .svn/entries file in\n        format version 4, return the revision as a string.  We do this by\n        reading first XML element in the document that has a \'revision\'\n        attribute.\n        """'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
op|'.'
name|'minidom'
name|'import'
name|'parse'
newline|'\n'
name|'doc'
op|'='
name|'parse'
op|'('
name|'entriesFile'
op|')'
op|'.'
name|'documentElement'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'doc'
op|'.'
name|'childNodes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'hasattr'
op|'('
name|'node'
op|','
string|"'getAttribute'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'rev'
op|'='
name|'node'
op|'.'
name|'getAttribute'
op|'('
string|"'revision'"
op|')'
newline|'\n'
name|'if'
name|'rev'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'rev'
op|'.'
name|'encode'
op|'('
string|"'ascii'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_parseSVNEntries_8
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_parseSVNEntries_8'
op|'('
name|'self'
op|','
name|'entriesFile'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a readable file object which represents a .svn/entries file in\n        format version 8, return the revision as a string.\n        """'
newline|'\n'
name|'entriesFile'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
name|'entriesFile'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
name|'entriesFile'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
name|'return'
name|'entriesFile'
op|'.'
name|'readline'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Add handlers for version 9 and 10 formats, which are the same as'
nl|'\n'
comment|'# version 8 as far as revision information is concerned.'
nl|'\n'
DECL|variable|_parseSVNEntries_9
dedent|''
name|'_parseSVNEntries_9'
op|'='
name|'_parseSVNEntries_8'
newline|'\n'
DECL|variable|_parseSVNEntriesTenPlus
name|'_parseSVNEntriesTenPlus'
op|'='
name|'_parseSVNEntries_8'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getSVNVersion
name|'def'
name|'_getSVNVersion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Figure out the SVN revision number based on the existance of\n        <package>/.svn/entries, and its contents. This requires discovering the\n        format version from the \'format\' file and parsing the entries file\n        accordingly.\n\n        @return: None or string containing SVN Revision number.\n        """'
newline|'\n'
name|'mod'
op|'='
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'package'
op|')'
newline|'\n'
name|'if'
name|'mod'
op|':'
newline|'\n'
indent|'            '
name|'svn'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'mod'
op|'.'
name|'__file__'
op|')'
op|','
string|"'.svn'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'svn'
op|')'
op|':'
newline|'\n'
comment|"# It's not an svn working copy"
nl|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'formatFile'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'svn'
op|','
string|"'format'"
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'formatFile'
op|')'
op|':'
newline|'\n'
comment|'# It looks like a less-than-version-10 working copy.'
nl|'\n'
indent|'                '
name|'format'
op|'='
name|'file'
op|'('
name|'formatFile'
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'parser'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'_parseSVNEntries_'"
op|'+'
name|'format'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# It looks like a version-10-or-greater working copy, which'
nl|'\n'
comment|'# has version information in the entries file.'
nl|'\n'
indent|'                '
name|'parser'
op|'='
name|'self'
op|'.'
name|'_parseSVNEntriesTenPlus'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'parser'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'Unknown'"
newline|'\n'
nl|'\n'
dedent|''
name|'entriesFile'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'svn'
op|','
string|"'entries'"
op|')'
newline|'\n'
name|'entries'
op|'='
name|'file'
op|'('
name|'entriesFile'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'parser'
op|'('
name|'entries'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                    '
name|'entries'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'Unknown'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_formatSVNVersion
dedent|''
dedent|''
dedent|''
name|'def'
name|'_formatSVNVersion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ver'
op|'='
name|'self'
op|'.'
name|'_getSVNVersion'
op|'('
op|')'
newline|'\n'
name|'if'
name|'ver'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
dedent|''
name|'return'
string|"' (SVN r%s)'"
op|'%'
op|'('
name|'ver'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|getVersionString
dedent|''
dedent|''
name|'def'
name|'getVersionString'
op|'('
name|'version'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get a friendly string for the given version object.\n\n    @param version: A L{Version} object.\n    @return: A string containing the package and short version number.\n    """'
newline|'\n'
name|'result'
op|'='
string|"'%s %s'"
op|'%'
op|'('
name|'version'
op|'.'
name|'package'
op|','
name|'version'
op|'.'
name|'short'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
endmarker|''
end_unit

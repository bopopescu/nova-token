begin_unit
comment|'# -*- test-case-name: twisted.test.test_formmethod -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nForm-based method objects.\n\nThis module contains support for descriptive method signatures that can be used\nto format methods.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'calendar'
newline|'\n'
nl|'\n'
DECL|class|FormException
name|'class'
name|'FormException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An error occurred calling the form method.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Exception'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'descriptions'
op|'='
name|'kwargs'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InputError
dedent|''
dedent|''
name|'class'
name|'InputError'
op|'('
name|'FormException'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An error occurred with some input.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Argument
dedent|''
name|'class'
name|'Argument'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for form arguments."""'
newline|'\n'
nl|'\n'
comment|'# default value for argument, if no other default is given'
nl|'\n'
DECL|variable|defaultDefault
name|'defaultDefault'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|'='
name|'None'
op|','
name|'shortDesc'
op|'='
name|'None'
op|','
nl|'\n'
name|'longDesc'
op|'='
name|'None'
op|','
name|'hints'
op|'='
name|'None'
op|','
name|'allowNone'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'allowNone'
op|'='
name|'allowNone'
newline|'\n'
name|'if'
name|'default'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'default'
op|'='
name|'self'
op|'.'
name|'defaultDefault'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'default'
op|'='
name|'default'
newline|'\n'
name|'self'
op|'.'
name|'shortDesc'
op|'='
name|'shortDesc'
newline|'\n'
name|'self'
op|'.'
name|'longDesc'
op|'='
name|'longDesc'
newline|'\n'
name|'if'
name|'not'
name|'hints'
op|':'
newline|'\n'
indent|'            '
name|'hints'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'hints'
op|'='
name|'hints'
newline|'\n'
nl|'\n'
DECL|member|addHints
dedent|''
name|'def'
name|'addHints'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'hints'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getHint
dedent|''
name|'def'
name|'getHint'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'hints'
op|'.'
name|'get'
op|'('
name|'name'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getShortDescription
dedent|''
name|'def'
name|'getShortDescription'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'shortDesc'
name|'or'
name|'self'
op|'.'
name|'name'
op|'.'
name|'capitalize'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getLongDescription
dedent|''
name|'def'
name|'getLongDescription'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'longDesc'
name|'or'
string|"''"
comment|'#self.shortDesc or "The %s." % self.name'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convert the value to the correct format."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|','
string|'"implement in subclass"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|String
dedent|''
dedent|''
name|'class'
name|'String'
op|'('
name|'Argument'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A single string.\n    """'
newline|'\n'
DECL|variable|defaultDefault
name|'defaultDefault'
op|'='
string|"''"
newline|'\n'
DECL|variable|min
name|'min'
op|'='
number|'0'
newline|'\n'
DECL|variable|max
name|'max'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|'='
name|'None'
op|','
name|'shortDesc'
op|'='
name|'None'
op|','
nl|'\n'
name|'longDesc'
op|'='
name|'None'
op|','
name|'hints'
op|'='
name|'None'
op|','
name|'allowNone'
op|'='
number|'1'
op|','
name|'min'
op|'='
number|'0'
op|','
name|'max'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Argument'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|'='
name|'default'
op|','
name|'shortDesc'
op|'='
name|'shortDesc'
op|','
nl|'\n'
name|'longDesc'
op|'='
name|'longDesc'
op|','
name|'hints'
op|'='
name|'hints'
op|','
name|'allowNone'
op|'='
name|'allowNone'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'min'
op|'='
name|'min'
newline|'\n'
name|'self'
op|'.'
name|'max'
op|'='
name|'max'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'str'
op|'('
name|'val'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'s'
op|')'
op|'<'
name|'self'
op|'.'
name|'min'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InputError'
op|','
string|'"Value must be at least %s characters long"'
op|'%'
name|'self'
op|'.'
name|'min'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'max'
op|'!='
name|'None'
name|'and'
name|'len'
op|'('
name|'s'
op|')'
op|'>'
name|'self'
op|'.'
name|'max'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InputError'
op|','
string|'"Value must be at most %s characters long"'
op|'%'
name|'self'
op|'.'
name|'max'
newline|'\n'
dedent|''
name|'return'
name|'str'
op|'('
name|'val'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Text
dedent|''
dedent|''
name|'class'
name|'Text'
op|'('
name|'String'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A long string.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Password
dedent|''
name|'class'
name|'Password'
op|'('
name|'String'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A string which should be obscured when input.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VerifiedPassword
dedent|''
name|'class'
name|'VerifiedPassword'
op|'('
name|'String'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A string that should be obscured when input and needs verification."""'
newline|'\n'
nl|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'vals'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'vals'
op|')'
op|'!='
number|'2'
name|'or'
name|'vals'
op|'['
number|'0'
op|']'
op|'!='
name|'vals'
op|'['
number|'1'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InputError'
op|','
string|'"Please enter the same password twice."'
newline|'\n'
dedent|''
name|'s'
op|'='
name|'str'
op|'('
name|'vals'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'s'
op|')'
op|'<'
name|'self'
op|'.'
name|'min'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InputError'
op|','
string|'"Value must be at least %s characters long"'
op|'%'
name|'self'
op|'.'
name|'min'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'max'
op|'!='
name|'None'
name|'and'
name|'len'
op|'('
name|'s'
op|')'
op|'>'
name|'self'
op|'.'
name|'max'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InputError'
op|','
string|'"Value must be at most %s characters long"'
op|'%'
name|'self'
op|'.'
name|'max'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Hidden
dedent|''
dedent|''
name|'class'
name|'Hidden'
op|'('
name|'String'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A string which is not displayed.\n\n    The passed default is used as the value.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Integer
dedent|''
name|'class'
name|'Integer'
op|'('
name|'Argument'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A single integer.\n    """'
newline|'\n'
DECL|variable|defaultDefault
name|'defaultDefault'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'allowNone'
op|'='
number|'1'
op|','
name|'default'
op|'='
name|'None'
op|','
name|'shortDesc'
op|'='
name|'None'
op|','
nl|'\n'
name|'longDesc'
op|'='
name|'None'
op|','
name|'hints'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'#although Argument now has allowNone, that was recently added, and'
nl|'\n'
comment|'#putting it at the end kept things which relied on argument order'
nl|'\n'
comment|'#from breaking.  However, allowNone originally was in here, so'
nl|'\n'
comment|'#I have to keep the same order, to prevent breaking code that'
nl|'\n'
comment|'#depends on argument order only'
nl|'\n'
indent|'        '
name|'Argument'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|','
name|'shortDesc'
op|','
name|'longDesc'
op|','
name|'hints'
op|','
nl|'\n'
name|'allowNone'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'val'
op|'.'
name|'strip'
op|'('
op|')'
name|'and'
name|'self'
op|'.'
name|'allowNone'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'int'
op|'('
name|'val'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InputError'
op|','
string|'"%s is not valid, please enter a whole number, e.g. 10"'
op|'%'
name|'val'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IntegerRange
dedent|''
dedent|''
dedent|''
name|'class'
name|'IntegerRange'
op|'('
name|'Integer'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'min'
op|','
name|'max'
op|','
name|'allowNone'
op|'='
number|'1'
op|','
name|'default'
op|'='
name|'None'
op|','
name|'shortDesc'
op|'='
name|'None'
op|','
nl|'\n'
name|'longDesc'
op|'='
name|'None'
op|','
name|'hints'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'min'
op|'='
name|'min'
newline|'\n'
name|'self'
op|'.'
name|'max'
op|'='
name|'max'
newline|'\n'
name|'Integer'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'allowNone'
op|'='
name|'allowNone'
op|','
name|'default'
op|'='
name|'default'
op|','
name|'shortDesc'
op|'='
name|'shortDesc'
op|','
nl|'\n'
name|'longDesc'
op|'='
name|'longDesc'
op|','
name|'hints'
op|'='
name|'hints'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'Integer'
op|'.'
name|'coerce'
op|'('
name|'self'
op|','
name|'val'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'allowNone'
name|'and'
name|'result'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'if'
name|'result'
op|'<'
name|'self'
op|'.'
name|'min'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InputError'
op|','
string|'"Value %s is too small, it should be at least %s"'
op|'%'
op|'('
name|'result'
op|','
name|'self'
op|'.'
name|'min'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'result'
op|'>'
name|'self'
op|'.'
name|'max'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InputError'
op|','
string|'"Value %s is too large, it should be at most %s"'
op|'%'
op|'('
name|'result'
op|','
name|'self'
op|'.'
name|'max'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Float
dedent|''
dedent|''
name|'class'
name|'Float'
op|'('
name|'Argument'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|defaultDefault
indent|'    '
name|'defaultDefault'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'allowNone'
op|'='
number|'1'
op|','
name|'default'
op|'='
name|'None'
op|','
name|'shortDesc'
op|'='
name|'None'
op|','
nl|'\n'
name|'longDesc'
op|'='
name|'None'
op|','
name|'hints'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'#although Argument now has allowNone, that was recently added, and'
nl|'\n'
comment|'#putting it at the end kept things which relied on argument order'
nl|'\n'
comment|'#from breaking.  However, allowNone originally was in here, so'
nl|'\n'
comment|'#I have to keep the same order, to prevent breaking code that'
nl|'\n'
comment|'#depends on argument order only'
nl|'\n'
indent|'        '
name|'Argument'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|','
name|'shortDesc'
op|','
name|'longDesc'
op|','
name|'hints'
op|','
nl|'\n'
name|'allowNone'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'val'
op|'.'
name|'strip'
op|'('
op|')'
name|'and'
name|'self'
op|'.'
name|'allowNone'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'float'
op|'('
name|'val'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InputError'
op|','
string|'"Invalid float: %s"'
op|'%'
name|'val'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Choice
dedent|''
dedent|''
dedent|''
name|'class'
name|'Choice'
op|'('
name|'Argument'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The result of a choice between enumerated types.  The choices should\n    be a list of tuples of tag, value, and description.  The tag will be\n    the value returned if the user hits "Submit", and the description\n    is the bale for the enumerated type.  default is a list of all the\n    values (seconds element in choices).  If no defaults are specified,\n    initially the first item will be selected.  Only one item can (should)\n    be selected at once.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'choices'
op|'='
op|'['
op|']'
op|','
name|'default'
op|'='
op|'['
op|']'
op|','
name|'shortDesc'
op|'='
name|'None'
op|','
nl|'\n'
name|'longDesc'
op|'='
name|'None'
op|','
name|'hints'
op|'='
name|'None'
op|','
name|'allowNone'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'choices'
op|'='
name|'choices'
newline|'\n'
name|'if'
name|'choices'
name|'and'
name|'not'
name|'default'
op|':'
newline|'\n'
indent|'            '
name|'default'
op|'.'
name|'append'
op|'('
name|'choices'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'Argument'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|','
name|'shortDesc'
op|','
name|'longDesc'
op|','
name|'hints'
op|','
name|'allowNone'
op|'='
name|'allowNone'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'inIdent'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'ident'
op|','
name|'val'
op|','
name|'desc'
name|'in'
name|'self'
op|'.'
name|'choices'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ident'
op|'=='
name|'inIdent'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'val'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InputError'
op|'('
string|'"Invalid Choice: %s"'
op|'%'
name|'inIdent'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Flags
dedent|''
dedent|''
dedent|''
name|'class'
name|'Flags'
op|'('
name|'Argument'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The result of a checkbox group or multi-menu.  The flags should be a\n    list of tuples of tag, value, and description. The tag will be\n    the value returned if the user hits "Submit", and the description\n    is the bale for the enumerated type.  default is a list of all the\n    values (second elements in flags).  If no defaults are specified,\n    initially nothing will be selected.  Several items may be selected at\n    once.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'flags'
op|'='
op|'('
op|')'
op|','
name|'default'
op|'='
op|'('
op|')'
op|','
name|'shortDesc'
op|'='
name|'None'
op|','
nl|'\n'
name|'longDesc'
op|'='
name|'None'
op|','
name|'hints'
op|'='
name|'None'
op|','
name|'allowNone'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'='
name|'flags'
newline|'\n'
name|'Argument'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|','
name|'shortDesc'
op|','
name|'longDesc'
op|','
name|'hints'
op|','
name|'allowNone'
op|'='
name|'allowNone'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'inFlagKeys'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'inFlagKeys'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'outFlags'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'inFlagKey'
name|'in'
name|'inFlagKeys'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'flagKey'
op|','
name|'flagVal'
op|','
name|'flagDesc'
name|'in'
name|'self'
op|'.'
name|'flags'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'inFlagKey'
op|'=='
name|'flagKey'
op|':'
newline|'\n'
indent|'                    '
name|'outFlags'
op|'.'
name|'append'
op|'('
name|'flagVal'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'InputError'
op|'('
string|'"Invalid Flag: %s"'
op|'%'
name|'inFlagKey'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'outFlags'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CheckGroup
dedent|''
dedent|''
name|'class'
name|'CheckGroup'
op|'('
name|'Flags'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RadioGroup
dedent|''
name|'class'
name|'RadioGroup'
op|'('
name|'Choice'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Boolean
dedent|''
name|'class'
name|'Boolean'
op|'('
name|'Argument'
op|')'
op|':'
newline|'\n'
DECL|member|coerce
indent|'    '
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'inVal'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'inVal'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'lInVal'
op|'='
name|'str'
op|'('
name|'inVal'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'if'
name|'lInVal'
name|'in'
op|'('
string|"'no'"
op|','
string|"'n'"
op|','
string|"'f'"
op|','
string|"'false'"
op|','
string|"'0'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|class|File
dedent|''
dedent|''
name|'class'
name|'File'
op|'('
name|'Argument'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'allowNone'
op|'='
number|'1'
op|','
name|'shortDesc'
op|'='
name|'None'
op|','
name|'longDesc'
op|'='
name|'None'
op|','
nl|'\n'
name|'hints'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'allowNone'
op|'='
name|'allowNone'
newline|'\n'
name|'Argument'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'None'
op|','
name|'shortDesc'
op|','
name|'longDesc'
op|','
name|'hints'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'file'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'file'
name|'and'
name|'self'
op|'.'
name|'allowNone'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'elif'
name|'file'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'file'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InputError'
op|','
string|'"Invalid File"'
newline|'\n'
nl|'\n'
DECL|function|positiveInt
dedent|''
dedent|''
dedent|''
name|'def'
name|'positiveInt'
op|'('
name|'x'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'x'
op|'='
name|'int'
op|'('
name|'x'
op|')'
newline|'\n'
name|'if'
name|'x'
op|'<='
number|'0'
op|':'
name|'raise'
name|'ValueError'
newline|'\n'
name|'return'
name|'x'
newline|'\n'
nl|'\n'
DECL|class|Date
dedent|''
name|'class'
name|'Date'
op|'('
name|'Argument'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A date -- (year, month, day) tuple."""'
newline|'\n'
nl|'\n'
DECL|variable|defaultDefault
name|'defaultDefault'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'allowNone'
op|'='
number|'1'
op|','
name|'default'
op|'='
name|'None'
op|','
name|'shortDesc'
op|'='
name|'None'
op|','
nl|'\n'
name|'longDesc'
op|'='
name|'None'
op|','
name|'hints'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Argument'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|','
name|'shortDesc'
op|','
name|'longDesc'
op|','
name|'hints'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'allowNone'
op|'='
name|'allowNone'
newline|'\n'
name|'if'
name|'not'
name|'allowNone'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'defaultDefault'
op|'='
op|'('
number|'1970'
op|','
number|'1'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return tuple of ints (year, month, day)."""'
newline|'\n'
name|'if'
name|'tuple'
op|'('
name|'args'
op|')'
op|'=='
op|'('
string|'""'
op|','
string|'""'
op|','
string|'""'
op|')'
name|'and'
name|'self'
op|'.'
name|'allowNone'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'year'
op|','
name|'month'
op|','
name|'day'
op|'='
name|'map'
op|'('
name|'positiveInt'
op|','
name|'args'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InputError'
op|','
string|'"Invalid date"'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'month'
op|','
name|'day'
op|')'
op|'=='
op|'('
number|'2'
op|','
number|'29'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'calendar'
op|'.'
name|'isleap'
op|'('
name|'year'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'InputError'
op|','
string|'"%d was not a leap year"'
op|'%'
name|'year'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'year'
op|','
name|'month'
op|','
name|'day'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'mdays'
op|'='
name|'calendar'
op|'.'
name|'mdays'
op|'['
name|'month'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InputError'
op|','
string|'"Invalid date"'
newline|'\n'
dedent|''
name|'if'
name|'day'
op|'>'
name|'mdays'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InputError'
op|','
string|'"Invalid date"'
newline|'\n'
dedent|''
name|'return'
name|'year'
op|','
name|'month'
op|','
name|'day'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Submit
dedent|''
dedent|''
name|'class'
name|'Submit'
op|'('
name|'Choice'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Submit button or a reasonable facsimile thereof."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'choices'
op|'='
op|'['
op|'('
string|'"Submit"'
op|','
string|'"submit"'
op|','
string|'"Submit form"'
op|')'
op|']'
op|','
nl|'\n'
name|'reset'
op|'='
number|'0'
op|','
name|'shortDesc'
op|'='
name|'None'
op|','
name|'longDesc'
op|'='
name|'None'
op|','
name|'allowNone'
op|'='
number|'0'
op|','
name|'hints'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Choice'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'choices'
op|'='
name|'choices'
op|','
name|'shortDesc'
op|'='
name|'shortDesc'
op|','
nl|'\n'
name|'longDesc'
op|'='
name|'longDesc'
op|','
name|'hints'
op|'='
name|'hints'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'allowNone'
op|'='
name|'allowNone'
newline|'\n'
name|'self'
op|'.'
name|'reset'
op|'='
name|'reset'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'allowNone'
name|'and'
name|'not'
name|'value'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'Choice'
op|'.'
name|'coerce'
op|'('
name|'self'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PresentationHint
dedent|''
dedent|''
dedent|''
name|'class'
name|'PresentationHint'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A hint to a particular system.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MethodSignature
dedent|''
name|'class'
name|'MethodSignature'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'sigList'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        """'
newline|'\n'
name|'self'
op|'.'
name|'methodSignature'
op|'='
name|'sigList'
newline|'\n'
nl|'\n'
DECL|member|getArgument
dedent|''
name|'def'
name|'getArgument'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'a'
name|'in'
name|'self'
op|'.'
name|'methodSignature'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'a'
op|'.'
name|'name'
op|'=='
name|'name'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'a'
newline|'\n'
nl|'\n'
DECL|member|method
dedent|''
dedent|''
dedent|''
name|'def'
name|'method'
op|'('
name|'self'
op|','
name|'callable'
op|','
name|'takesRequest'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'FormMethod'
op|'('
name|'self'
op|','
name|'callable'
op|','
name|'takesRequest'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FormMethod
dedent|''
dedent|''
name|'class'
name|'FormMethod'
op|':'
newline|'\n'
indent|'    '
string|'"""A callable object with a signature."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'signature'
op|','
name|'callable'
op|','
name|'takesRequest'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'signature'
op|'='
name|'signature'
newline|'\n'
name|'self'
op|'.'
name|'callable'
op|'='
name|'callable'
newline|'\n'
name|'self'
op|'.'
name|'takesRequest'
op|'='
name|'takesRequest'
newline|'\n'
nl|'\n'
DECL|member|getArgs
dedent|''
name|'def'
name|'getArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'tuple'
op|'('
name|'self'
op|'.'
name|'signature'
op|'.'
name|'methodSignature'
op|')'
newline|'\n'
nl|'\n'
DECL|member|call
dedent|''
name|'def'
name|'call'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'callable'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

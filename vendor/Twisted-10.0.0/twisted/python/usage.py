begin_unit
comment|'# -*- test-case-name: twisted.test.test_usage -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\ntwisted.python.usage is a module for parsing/handling the\ncommand line of your program.\n\nFor information on how to use it, see\nU{http://twistedmatrix.com/projects/core/documentation/howto/options.html},\nor doc/howto/options.html in your Twisted directory.\n"""'
newline|'\n'
nl|'\n'
comment|'# System Imports'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'getopt'
newline|'\n'
name|'from'
name|'os'
name|'import'
name|'path'
newline|'\n'
nl|'\n'
comment|'# Sibling Imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'reflect'
op|','
name|'text'
op|','
name|'util'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UsageError
name|'class'
name|'UsageError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|error
dedent|''
name|'error'
op|'='
name|'UsageError'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CoerceParameter
name|'class'
name|'CoerceParameter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Utility class that can corce a parameter before storing it.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'options'
op|','
name|'coerce'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param options: parent Options object\n        @param coerce: callable used to coerce the value.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'options'
op|'='
name|'options'
newline|'\n'
name|'self'
op|'.'
name|'coerce'
op|'='
name|'coerce'
newline|'\n'
name|'self'
op|'.'
name|'doc'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'coerce'
op|','
string|"'coerceDoc'"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|dispatch
dedent|''
name|'def'
name|'dispatch'
op|'('
name|'self'
op|','
name|'parameterName'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When called in dispatch, do the coerce for C{value} and save the\n        returned value.\n        """'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'UsageError'
op|'('
string|'"Parameter \'%s\' requires an argument."'
nl|'\n'
op|'%'
op|'('
name|'parameterName'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'self'
op|'.'
name|'coerce'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'UsageError'
op|'('
string|'"Parameter type enforcement failed: %s"'
op|'%'
op|'('
name|'e'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'options'
op|'.'
name|'opts'
op|'['
name|'parameterName'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Options
dedent|''
dedent|''
name|'class'
name|'Options'
op|'('
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An option list parser class\n\n    C{optFlags} and C{optParameters} are lists of available parameters\n    which your program can handle. The difference between the two\n    is the \'flags\' have an on(1) or off(0) state (off by default)\n    whereas \'parameters\' have an assigned value, with an optional\n    default. (Compare \'--verbose\' and \'--verbosity=2\')\n\n    optFlags is assigned a list of lists. Each list represents\n    a flag parameter, as so::\n\n    |    optFlags = [[\'verbose\', \'v\', \'Makes it tell you what it doing.\'],\n    |                [\'quiet\', \'q\', \'Be vewy vewy quiet.\']]\n\n    As you can see, the first item is the long option name\n    (prefixed with \'--\' on the command line), followed by the\n    short option name (prefixed with \'-\'), and the description.\n    The description is used for the built-in handling of the\n    --help switch, which prints a usage summary.\n\n    C{optParameters} is much the same, except the list also contains\n    a default value::\n\n    | optParameters = [[\'outfile\', \'O\', \'outfile.log\', \'Description...\']]\n\n    A coerce function can also be specified as the last element: it will be\n    called with the argument and should return the value that will be stored\n    for the option. This function can have a C{coerceDoc} attribute which\n    will be appended to the documentation of the option.\n\n    subCommands is a list of 4-tuples of (command name, command shortcut,\n    parser class, documentation).  If the first non-option argument found is\n    one of the given command names, an instance of the given parser class is\n    instantiated and given the remainder of the arguments to parse and\n    self.opts[command] is set to the command name.  For example::\n\n    | subCommands = [\n    |      [\'inquisition\', \'inquest\', InquisitionOptions,\n    |           \'Perform an inquisition\'],\n    |      [\'holyquest\', \'quest\', HolyQuestOptions,\n    |           \'Embark upon a holy quest\']\n    |  ]\n\n    In this case, C{"<program> holyquest --horseback --for-grail"} will cause\n    C{HolyQuestOptions} to be instantiated and asked to parse\n    C{[\'--horseback\', \'--for-grail\']}.  Currently, only the first sub-command\n    is parsed, and all options following it are passed to its parser.  If a\n    subcommand is found, the subCommand attribute is set to its name and the\n    subOptions attribute is set to the Option instance that parses the\n    remaining options. If a subcommand is not given to parseOptions,\n    the subCommand attribute will be None. You can also mark one of\n    the subCommands to be the default.\n\n    | defaultSubCommand = \'holyquest\'\n\n    In this case, the subCommand attribute will never be None, and\n    the subOptions attribute will always be set.\n\n    If you want to handle your own options, define a method named\n    C{opt_paramname} that takes C{(self, option)} as arguments. C{option}\n    will be whatever immediately follows the parameter on the\n    command line. Options fully supports the mapping interface, so you\n    can do things like C{\'self["option"] = val\'} in these methods.\n\n    Advanced functionality is covered in the howto documentation,\n    available at\n    U{http://twistedmatrix.com/projects/core/documentation/howto/options.html},\n    or doc/howto/options.html in your Twisted directory.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|subCommand
name|'subCommand'
op|'='
name|'None'
newline|'\n'
DECL|variable|defaultSubCommand
name|'defaultSubCommand'
op|'='
name|'None'
newline|'\n'
DECL|variable|parent
name|'parent'
op|'='
name|'None'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Options'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'opts'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'defaults'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# These are strings/lists we will pass to getopt'
nl|'\n'
name|'self'
op|'.'
name|'longOpt'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'shortOpt'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'docs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'synonyms'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_dispatch'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
name|'collectors'
op|'='
op|'['
nl|'\n'
name|'self'
op|'.'
name|'_gather_flags'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_gather_parameters'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_gather_handlers'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'c'
name|'in'
name|'collectors'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'longOpt'
op|','
name|'shortOpt'
op|','
name|'docs'
op|','
name|'settings'
op|','
name|'synonyms'
op|','
name|'dispatch'
op|')'
op|'='
name|'c'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'longOpt'
op|'.'
name|'extend'
op|'('
name|'longOpt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'shortOpt'
op|'='
name|'self'
op|'.'
name|'shortOpt'
op|'+'
name|'shortOpt'
newline|'\n'
name|'self'
op|'.'
name|'docs'
op|'.'
name|'update'
op|'('
name|'docs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'opts'
op|'.'
name|'update'
op|'('
name|'settings'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'defaults'
op|'.'
name|'update'
op|'('
name|'settings'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'synonyms'
op|'.'
name|'update'
op|'('
name|'synonyms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_dispatch'
op|'.'
name|'update'
op|'('
name|'dispatch'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Define a custom hash function so that Options instances can be used\n        as dictionary keys.  This is an internal feature used to implement\n        the parser.  Do not rely on it in application code.\n        """'
newline|'\n'
name|'return'
name|'int'
op|'('
name|'id'
op|'('
name|'self'
op|')'
op|'%'
name|'sys'
op|'.'
name|'maxint'
op|')'
newline|'\n'
nl|'\n'
DECL|member|opt_help
dedent|''
name|'def'
name|'opt_help'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Display this help and exit.\n        """'
newline|'\n'
name|'print'
name|'self'
op|'.'
name|'__str__'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|opt_version
dedent|''
name|'def'
name|'opt_version'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
name|'import'
name|'copyright'
newline|'\n'
name|'print'
string|'"Twisted version:"'
op|','
name|'copyright'
op|'.'
name|'version'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|"#opt_h = opt_help # this conflicted with existing 'host' options."
nl|'\n'
nl|'\n'
DECL|member|parseOptions
dedent|''
name|'def'
name|'parseOptions'
op|'('
name|'self'
op|','
name|'options'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The guts of the command-line parser.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'options'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'options'
op|'='
name|'sys'
op|'.'
name|'argv'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'opts'
op|','
name|'args'
op|'='
name|'getopt'
op|'.'
name|'getopt'
op|'('
name|'options'
op|','
nl|'\n'
name|'self'
op|'.'
name|'shortOpt'
op|','
name|'self'
op|'.'
name|'longOpt'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'getopt'
op|'.'
name|'error'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'UsageError'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'opt'
op|','
name|'arg'
name|'in'
name|'opts'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'opt'
op|'['
number|'1'
op|']'
op|'=='
string|"'-'"
op|':'
newline|'\n'
indent|'                '
name|'opt'
op|'='
name|'opt'
op|'['
number|'2'
op|':'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'opt'
op|'='
name|'opt'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'optMangled'
op|'='
name|'opt'
newline|'\n'
name|'if'
name|'optMangled'
name|'not'
name|'in'
name|'self'
op|'.'
name|'synonyms'
op|':'
newline|'\n'
indent|'                '
name|'optMangled'
op|'='
name|'opt'
op|'.'
name|'replace'
op|'('
string|'"-"'
op|','
string|'"_"'
op|')'
newline|'\n'
name|'if'
name|'optMangled'
name|'not'
name|'in'
name|'self'
op|'.'
name|'synonyms'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'UsageError'
op|'('
string|'"No such option \'%s\'"'
op|'%'
op|'('
name|'opt'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'optMangled'
op|'='
name|'self'
op|'.'
name|'synonyms'
op|'['
name|'optMangled'
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'_dispatch'
op|'['
name|'optMangled'
op|']'
op|','
name|'CoerceParameter'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_dispatch'
op|'['
name|'optMangled'
op|']'
op|'.'
name|'dispatch'
op|'('
name|'optMangled'
op|','
name|'arg'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_dispatch'
op|'['
name|'optMangled'
op|']'
op|'('
name|'optMangled'
op|','
name|'arg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
op|'('
name|'getattr'
op|'('
name|'self'
op|','
string|"'subCommands'"
op|','
name|'None'
op|')'
nl|'\n'
name|'and'
op|'('
name|'args'
name|'or'
name|'self'
op|'.'
name|'defaultSubCommand'
name|'is'
name|'not'
name|'None'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'args'
op|':'
newline|'\n'
indent|'                '
name|'args'
op|'='
op|'['
name|'self'
op|'.'
name|'defaultSubCommand'
op|']'
newline|'\n'
dedent|''
name|'sub'
op|','
name|'rest'
op|'='
name|'args'
op|'['
number|'0'
op|']'
op|','
name|'args'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'for'
op|'('
name|'cmd'
op|','
name|'short'
op|','
name|'parser'
op|','
name|'doc'
op|')'
name|'in'
name|'self'
op|'.'
name|'subCommands'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'sub'
op|'=='
name|'cmd'
name|'or'
name|'sub'
op|'=='
name|'short'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'subCommand'
op|'='
name|'cmd'
newline|'\n'
name|'self'
op|'.'
name|'subOptions'
op|'='
name|'parser'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'subOptions'
op|'.'
name|'parent'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'subOptions'
op|'.'
name|'parseOptions'
op|'('
name|'rest'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'UsageError'
op|'('
string|'"Unknown command: %s"'
op|'%'
name|'sub'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'parseArgs'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'UsageError'
op|'('
string|'"Wrong number of arguments."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'postOptions'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|postOptions
dedent|''
name|'def'
name|'postOptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        I am called after the options are parsed.\n\n        Override this method in your subclass to do something after\n        the options have been parsed and assigned, like validate that\n        all options are sane.\n        """'
newline|'\n'
nl|'\n'
DECL|member|parseArgs
dedent|''
name|'def'
name|'parseArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        I am called with any leftover arguments which were not options.\n\n        Override me to do something with the remaining arguments on\n        the command line, those which were not flags or options. e.g.\n        interpret them as a list of files to operate on.\n\n        Note that if there more arguments on the command line\n        than this method accepts, parseArgs will blow up with\n        a getopt.error.  This means if you don\'t override me,\n        parseArgs will blow up if I am passed any arguments at\n        all!\n        """'
newline|'\n'
nl|'\n'
DECL|member|_generic_flag
dedent|''
name|'def'
name|'_generic_flag'
op|'('
name|'self'
op|','
name|'flagName'
op|','
name|'value'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'value'
name|'not'
name|'in'
op|'('
string|"''"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'UsageError'
op|'('
string|'"Flag \'%s\' takes no argument."'
nl|'\n'
string|'" Not even \\"%s\\"."'
op|'%'
op|'('
name|'flagName'
op|','
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'opts'
op|'['
name|'flagName'
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|_gather_flags
dedent|''
name|'def'
name|'_gather_flags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Gather up boolean (flag) options.\n        """'
newline|'\n'
nl|'\n'
name|'longOpt'
op|','
name|'shortOpt'
op|'='
op|'['
op|']'
op|','
string|"''"
newline|'\n'
name|'docs'
op|','
name|'settings'
op|','
name|'synonyms'
op|','
name|'dispatch'
op|'='
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'flags'
op|'='
op|'['
op|']'
newline|'\n'
name|'reflect'
op|'.'
name|'accumulateClassList'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
string|"'optFlags'"
op|','
name|'flags'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'flag'
name|'in'
name|'flags'
op|':'
newline|'\n'
indent|'            '
name|'long'
op|','
name|'short'
op|','
name|'doc'
op|'='
name|'util'
op|'.'
name|'padTo'
op|'('
number|'3'
op|','
name|'flag'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'long'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|'"A flag cannot be without a name."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'docs'
op|'['
name|'long'
op|']'
op|'='
name|'doc'
newline|'\n'
name|'settings'
op|'['
name|'long'
op|']'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'short'
op|':'
newline|'\n'
indent|'                '
name|'shortOpt'
op|'='
name|'shortOpt'
op|'+'
name|'short'
newline|'\n'
name|'synonyms'
op|'['
name|'short'
op|']'
op|'='
name|'long'
newline|'\n'
dedent|''
name|'longOpt'
op|'.'
name|'append'
op|'('
name|'long'
op|')'
newline|'\n'
name|'synonyms'
op|'['
name|'long'
op|']'
op|'='
name|'long'
newline|'\n'
name|'dispatch'
op|'['
name|'long'
op|']'
op|'='
name|'self'
op|'.'
name|'_generic_flag'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'longOpt'
op|','
name|'shortOpt'
op|','
name|'docs'
op|','
name|'settings'
op|','
name|'synonyms'
op|','
name|'dispatch'
newline|'\n'
nl|'\n'
DECL|member|_gather_parameters
dedent|''
name|'def'
name|'_gather_parameters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Gather options which take a value.\n        """'
newline|'\n'
name|'longOpt'
op|','
name|'shortOpt'
op|'='
op|'['
op|']'
op|','
string|"''"
newline|'\n'
name|'docs'
op|','
name|'settings'
op|','
name|'synonyms'
op|','
name|'dispatch'
op|'='
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'parameters'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'reflect'
op|'.'
name|'accumulateClassList'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
string|"'optStrings'"
op|','
nl|'\n'
name|'parameters'
op|')'
newline|'\n'
name|'if'
name|'parameters'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'warnings'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Options.optStrings is deprecated, "'
nl|'\n'
string|'"please use optParameters instead."'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'reflect'
op|'.'
name|'accumulateClassList'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
string|"'optParameters'"
op|','
nl|'\n'
name|'parameters'
op|')'
newline|'\n'
nl|'\n'
name|'synonyms'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'parameter'
name|'in'
name|'parameters'
op|':'
newline|'\n'
indent|'            '
name|'long'
op|','
name|'short'
op|','
name|'default'
op|','
name|'doc'
op|','
name|'paramType'
op|'='
name|'util'
op|'.'
name|'padTo'
op|'('
number|'5'
op|','
name|'parameter'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'long'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|'"A parameter cannot be without a name."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'docs'
op|'['
name|'long'
op|']'
op|'='
name|'doc'
newline|'\n'
name|'settings'
op|'['
name|'long'
op|']'
op|'='
name|'default'
newline|'\n'
name|'if'
name|'short'
op|':'
newline|'\n'
indent|'                '
name|'shortOpt'
op|'='
name|'shortOpt'
op|'+'
name|'short'
op|'+'
string|"':'"
newline|'\n'
name|'synonyms'
op|'['
name|'short'
op|']'
op|'='
name|'long'
newline|'\n'
dedent|''
name|'longOpt'
op|'.'
name|'append'
op|'('
name|'long'
op|'+'
string|"'='"
op|')'
newline|'\n'
name|'synonyms'
op|'['
name|'long'
op|']'
op|'='
name|'long'
newline|'\n'
name|'if'
name|'paramType'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'dispatch'
op|'['
name|'long'
op|']'
op|'='
name|'CoerceParameter'
op|'('
name|'self'
op|','
name|'paramType'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'dispatch'
op|'['
name|'long'
op|']'
op|'='
name|'CoerceParameter'
op|'('
name|'self'
op|','
name|'str'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'longOpt'
op|','
name|'shortOpt'
op|','
name|'docs'
op|','
name|'settings'
op|','
name|'synonyms'
op|','
name|'dispatch'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_gather_handlers
dedent|''
name|'def'
name|'_gather_handlers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Gather up options with their own handler methods.\n        """'
newline|'\n'
nl|'\n'
name|'longOpt'
op|','
name|'shortOpt'
op|'='
op|'['
op|']'
op|','
string|"''"
newline|'\n'
name|'docs'
op|','
name|'settings'
op|','
name|'synonyms'
op|','
name|'dispatch'
op|'='
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'dct'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'reflect'
op|'.'
name|'addMethodNamesToDict'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
name|'dct'
op|','
string|'"opt_"'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'name'
name|'in'
name|'dct'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'opt_'"
op|'+'
name|'name'
op|')'
newline|'\n'
nl|'\n'
name|'takesArg'
op|'='
name|'not'
name|'flagFunction'
op|'('
name|'method'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
name|'prettyName'
op|'='
name|'name'
op|'.'
name|'replace'
op|'('
string|"'_'"
op|','
string|"'-'"
op|')'
newline|'\n'
name|'doc'
op|'='
name|'getattr'
op|'('
name|'method'
op|','
string|"'__doc__'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'doc'
op|':'
newline|'\n'
comment|'## Only use the first line.'
nl|'\n'
comment|"#docs[name] = doc.split('\\n')[0]"
nl|'\n'
indent|'                '
name|'docs'
op|'['
name|'prettyName'
op|']'
op|'='
name|'doc'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'docs'
op|'['
name|'prettyName'
op|']'
op|'='
name|'self'
op|'.'
name|'docs'
op|'.'
name|'get'
op|'('
name|'prettyName'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'synonyms'
op|'['
name|'prettyName'
op|']'
op|'='
name|'prettyName'
newline|'\n'
nl|'\n'
comment|'# A little slight-of-hand here makes dispatching much easier'
nl|'\n'
comment|'# in parseOptions, as it makes all option-methods have the'
nl|'\n'
comment|'# same signature.'
nl|'\n'
name|'if'
name|'takesArg'
op|':'
newline|'\n'
indent|'                '
name|'fn'
op|'='
name|'lambda'
name|'name'
op|','
name|'value'
op|','
name|'m'
op|'='
name|'method'
op|':'
name|'m'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# XXX: This won't raise a TypeError if it's called"
nl|'\n'
comment|"# with a value when it shouldn't be."
nl|'\n'
indent|'                '
name|'fn'
op|'='
name|'lambda'
name|'name'
op|','
name|'value'
op|'='
name|'None'
op|','
name|'m'
op|'='
name|'method'
op|':'
name|'m'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'dispatch'
op|'['
name|'prettyName'
op|']'
op|'='
name|'fn'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'name'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'shortOpt'
op|'='
name|'shortOpt'
op|'+'
name|'name'
newline|'\n'
name|'if'
name|'takesArg'
op|':'
newline|'\n'
indent|'                    '
name|'shortOpt'
op|'='
name|'shortOpt'
op|'+'
string|"':'"
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'takesArg'
op|':'
newline|'\n'
indent|'                    '
name|'prettyName'
op|'='
name|'prettyName'
op|'+'
string|"'='"
newline|'\n'
dedent|''
name|'longOpt'
op|'.'
name|'append'
op|'('
name|'prettyName'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'reverse_dct'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# Map synonyms'
nl|'\n'
name|'for'
name|'name'
name|'in'
name|'dct'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'opt_'"
op|'+'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'method'
name|'not'
name|'in'
name|'reverse_dct'
op|':'
newline|'\n'
indent|'                '
name|'reverse_dct'
op|'['
name|'method'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'reverse_dct'
op|'['
name|'method'
op|']'
op|'.'
name|'append'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cmpLength'
op|'='
name|'lambda'
name|'a'
op|','
name|'b'
op|':'
name|'cmp'
op|'('
name|'len'
op|'('
name|'a'
op|')'
op|','
name|'len'
op|'('
name|'b'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'method'
op|','
name|'names'
name|'in'
name|'reverse_dct'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'names'
op|')'
op|'<'
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'names_'
op|'='
name|'names'
op|'['
op|':'
op|']'
newline|'\n'
name|'names_'
op|'.'
name|'sort'
op|'('
name|'cmpLength'
op|')'
newline|'\n'
name|'longest'
op|'='
name|'names_'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'names_'
op|':'
newline|'\n'
indent|'                '
name|'synonyms'
op|'['
name|'name'
op|']'
op|'='
name|'longest'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'longOpt'
op|','
name|'shortOpt'
op|','
name|'docs'
op|','
name|'settings'
op|','
name|'synonyms'
op|','
name|'dispatch'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'getSynopsis'
op|'('
op|')'
op|'+'
string|"'\\n'"
op|'+'
name|'self'
op|'.'
name|'getUsage'
op|'('
name|'width'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getSynopsis
dedent|''
name|'def'
name|'getSynopsis'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a string containing a description of these options and how to\n        pass them to the executed file.\n        """'
newline|'\n'
nl|'\n'
name|'default'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'path'
op|'.'
name|'basename'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
op|'('
name|'self'
op|'.'
name|'longOpt'
name|'and'
string|'" [options]"'
op|')'
name|'or'
string|"''"
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'parent'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'default'
op|'='
string|'"Usage: %s%s"'
op|'%'
op|'('
name|'path'
op|'.'
name|'basename'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
op|'('
name|'self'
op|'.'
name|'longOpt'
name|'and'
string|'" [options]"'
op|')'
name|'or'
string|"''"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'default'
op|'='
string|"'%s'"
op|'%'
op|'('
op|'('
name|'self'
op|'.'
name|'longOpt'
name|'and'
string|'"[options]"'
op|')'
name|'or'
string|"''"
op|')'
newline|'\n'
dedent|''
name|'synopsis'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"synopsis"'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
name|'synopsis'
op|'='
name|'synopsis'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'parent'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'synopsis'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
op|'('
name|'self'
op|'.'
name|'parent'
op|'.'
name|'getSynopsis'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'parent'
op|'.'
name|'subCommand'
op|','
name|'synopsis'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'synopsis'
newline|'\n'
nl|'\n'
DECL|member|getUsage
dedent|''
name|'def'
name|'getUsage'
op|'('
name|'self'
op|','
name|'width'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# If subOptions exists by now, then there was probably an error while'
nl|'\n'
comment|'# parsing its options.'
nl|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|"'subOptions'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'subOptions'
op|'.'
name|'getUsage'
op|'('
name|'width'
op|'='
name|'width'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'width'
op|':'
newline|'\n'
indent|'            '
name|'width'
op|'='
name|'int'
op|'('
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'COLUMNS'"
op|','
string|"'80'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|"'subCommands'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cmdDicts'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'cmd'
op|','
name|'short'
op|','
name|'parser'
op|','
name|'desc'
op|')'
name|'in'
name|'self'
op|'.'
name|'subCommands'
op|':'
newline|'\n'
indent|'                '
name|'cmdDicts'
op|'.'
name|'append'
op|'('
nl|'\n'
op|'{'
string|"'long'"
op|':'
name|'cmd'
op|','
nl|'\n'
string|"'short'"
op|':'
name|'short'
op|','
nl|'\n'
string|"'doc'"
op|':'
name|'desc'
op|','
nl|'\n'
string|"'optType'"
op|':'
string|"'command'"
op|','
nl|'\n'
string|"'default'"
op|':'
name|'None'
nl|'\n'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'chunks'
op|'='
name|'docMakeChunks'
op|'('
name|'cmdDicts'
op|','
name|'width'
op|')'
newline|'\n'
name|'commands'
op|'='
string|"'Commands:\\n'"
op|'+'
string|"''"
op|'.'
name|'join'
op|'('
name|'chunks'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'commands'
op|'='
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'longToShort'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'self'
op|'.'
name|'synonyms'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'longname'
op|'='
name|'value'
newline|'\n'
name|'if'
op|'('
name|'key'
op|'!='
name|'longname'
op|')'
name|'and'
op|'('
name|'len'
op|'('
name|'key'
op|')'
op|'=='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'longToShort'
op|'['
name|'longname'
op|']'
op|'='
name|'key'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'longname'
name|'not'
name|'in'
name|'longToShort'
op|':'
newline|'\n'
indent|'                    '
name|'longToShort'
op|'['
name|'longname'
op|']'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'optDicts'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'opt'
name|'in'
name|'self'
op|'.'
name|'longOpt'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'opt'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|"'='"
op|':'
newline|'\n'
indent|'                '
name|'optType'
op|'='
string|"'parameter'"
newline|'\n'
name|'opt'
op|'='
name|'opt'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'optType'
op|'='
string|"'flag'"
newline|'\n'
nl|'\n'
dedent|''
name|'optDicts'
op|'.'
name|'append'
op|'('
nl|'\n'
op|'{'
string|"'long'"
op|':'
name|'opt'
op|','
nl|'\n'
string|"'short'"
op|':'
name|'longToShort'
op|'['
name|'opt'
op|']'
op|','
nl|'\n'
string|"'doc'"
op|':'
name|'self'
op|'.'
name|'docs'
op|'['
name|'opt'
op|']'
op|','
nl|'\n'
string|"'optType'"
op|':'
name|'optType'
op|','
nl|'\n'
string|"'default'"
op|':'
name|'self'
op|'.'
name|'defaults'
op|'.'
name|'get'
op|'('
name|'opt'
op|','
name|'None'
op|')'
op|','
nl|'\n'
string|"'dispatch'"
op|':'
name|'self'
op|'.'
name|'_dispatch'
op|'.'
name|'get'
op|'('
name|'opt'
op|','
name|'None'
op|')'
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
op|'('
name|'getattr'
op|'('
name|'self'
op|','
string|'"longdesc"'
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'longdesc'
op|'='
name|'self'
op|'.'
name|'longdesc'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'__main__'
newline|'\n'
name|'if'
name|'getattr'
op|'('
name|'__main__'
op|','
string|"'__doc__'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'longdesc'
op|'='
name|'__main__'
op|'.'
name|'__doc__'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'longdesc'
op|'='
string|"''"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'longdesc'
op|':'
newline|'\n'
indent|'            '
name|'longdesc'
op|'='
op|'('
string|"'\\n'"
op|'+'
nl|'\n'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'text'
op|'.'
name|'wordWrap'
op|'('
name|'longdesc'
op|','
name|'width'
op|')'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
nl|'\n'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'optDicts'
op|':'
newline|'\n'
indent|'            '
name|'chunks'
op|'='
name|'docMakeChunks'
op|'('
name|'optDicts'
op|','
name|'width'
op|')'
newline|'\n'
name|'s'
op|'='
string|'"Options:\\n%s"'
op|'%'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'chunks'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'='
string|'"Options: None\\n"'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'s'
op|'+'
name|'longdesc'
op|'+'
name|'commands'
newline|'\n'
nl|'\n'
comment|'#def __repr__(self):'
nl|'\n'
comment|"#    XXX: It'd be cool if we could return a succinct representation"
nl|'\n'
comment|'#        of which flags and options are set here.'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|docMakeChunks
dedent|''
dedent|''
name|'def'
name|'docMakeChunks'
op|'('
name|'optList'
op|','
name|'width'
op|'='
number|'80'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Makes doc chunks for option declarations.\n\n    Takes a list of dictionaries, each of which may have one or more\n    of the keys \'long\', \'short\', \'doc\', \'default\', \'optType\'.\n\n    Returns a list of strings.\n    The strings may be multiple lines,\n    all of them end with a newline.\n    """'
newline|'\n'
nl|'\n'
comment|'# XXX: sanity check to make sure we have a sane combination of keys.'
nl|'\n'
nl|'\n'
name|'maxOptLen'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'opt'
name|'in'
name|'optList'
op|':'
newline|'\n'
indent|'        '
name|'optLen'
op|'='
name|'len'
op|'('
name|'opt'
op|'.'
name|'get'
op|'('
string|"'long'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'if'
name|'optLen'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'opt'
op|'.'
name|'get'
op|'('
string|"'optType'"
op|','
name|'None'
op|')'
op|'=='
string|'"parameter"'
op|':'
newline|'\n'
comment|'# these take up an extra character'
nl|'\n'
indent|'                '
name|'optLen'
op|'='
name|'optLen'
op|'+'
number|'1'
newline|'\n'
dedent|''
name|'maxOptLen'
op|'='
name|'max'
op|'('
name|'optLen'
op|','
name|'maxOptLen'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'colWidth1'
op|'='
name|'maxOptLen'
op|'+'
name|'len'
op|'('
string|'"  -s, --  "'
op|')'
newline|'\n'
name|'colWidth2'
op|'='
name|'width'
op|'-'
name|'colWidth1'
newline|'\n'
comment|'# XXX - impose some sane minimum limit.'
nl|'\n'
comment|"# Then if we don't have enough room for the option and the doc"
nl|'\n'
comment|'# to share one line, they can take turns on alternating lines.'
nl|'\n'
nl|'\n'
name|'colFiller1'
op|'='
string|'" "'
op|'*'
name|'colWidth1'
newline|'\n'
nl|'\n'
name|'optChunks'
op|'='
op|'['
op|']'
newline|'\n'
name|'seen'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'opt'
name|'in'
name|'optList'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'opt'
op|'.'
name|'get'
op|'('
string|"'short'"
op|','
name|'None'
op|')'
name|'in'
name|'seen'
name|'or'
name|'opt'
op|'.'
name|'get'
op|'('
string|"'long'"
op|','
name|'None'
op|')'
name|'in'
name|'seen'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'x'
name|'in'
name|'opt'
op|'.'
name|'get'
op|'('
string|"'short'"
op|','
name|'None'
op|')'
op|','
name|'opt'
op|'.'
name|'get'
op|'('
string|"'long'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'x'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'seen'
op|'['
name|'x'
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'optLines'
op|'='
op|'['
op|']'
newline|'\n'
name|'comma'
op|'='
string|'" "'
newline|'\n'
name|'if'
name|'opt'
op|'.'
name|'get'
op|'('
string|"'short'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'short'
op|'='
string|'"-%c"'
op|'%'
op|'('
name|'opt'
op|'['
string|"'short'"
op|']'
op|','
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'short'
op|'='
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'opt'
op|'.'
name|'get'
op|'('
string|"'long'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'long'
op|'='
name|'opt'
op|'['
string|"'long'"
op|']'
newline|'\n'
name|'if'
name|'opt'
op|'.'
name|'get'
op|'('
string|'"optType"'
op|','
name|'None'
op|')'
op|'=='
string|'"parameter"'
op|':'
newline|'\n'
indent|'                '
name|'long'
op|'='
name|'long'
op|'+'
string|"'='"
newline|'\n'
nl|'\n'
dedent|''
name|'long'
op|'='
string|'"%-*s"'
op|'%'
op|'('
name|'maxOptLen'
op|','
name|'long'
op|')'
newline|'\n'
name|'if'
name|'short'
op|':'
newline|'\n'
indent|'                '
name|'comma'
op|'='
string|'","'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'long'
op|'='
string|'" "'
op|'*'
op|'('
name|'maxOptLen'
op|'+'
name|'len'
op|'('
string|"'--'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'opt'
op|'.'
name|'get'
op|'('
string|"'optType'"
op|','
name|'None'
op|')'
op|'=='
string|"'command'"
op|':'
newline|'\n'
indent|'            '
name|'column1'
op|'='
string|"'    %s      '"
op|'%'
name|'long'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'column1'
op|'='
string|'"  %2s%c --%s  "'
op|'%'
op|'('
name|'short'
op|','
name|'comma'
op|','
name|'long'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'opt'
op|'.'
name|'get'
op|'('
string|"'doc'"
op|','
string|"''"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'doc'
op|'='
name|'opt'
op|'['
string|"'doc'"
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'doc'
op|'='
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'opt'
op|'.'
name|'get'
op|'('
string|'"optType"'
op|','
name|'None'
op|')'
op|'=='
string|'"parameter"'
op|')'
name|'and'
name|'not'
op|'('
name|'opt'
op|'.'
name|'get'
op|'('
string|"'default'"
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'doc'
op|'='
string|'"%s [default: %s]"'
op|'%'
op|'('
name|'doc'
op|','
name|'opt'
op|'['
string|"'default'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'opt'
op|'.'
name|'get'
op|'('
string|'"optType"'
op|','
name|'None'
op|')'
op|'=='
string|'"parameter"'
op|')'
name|'and'
name|'opt'
op|'.'
name|'get'
op|'('
string|"'dispatch'"
op|','
name|'None'
op|')'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'opt'
op|'['
string|"'dispatch'"
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'d'
op|','
name|'CoerceParameter'
op|')'
name|'and'
name|'d'
op|'.'
name|'doc'
op|':'
newline|'\n'
indent|'                '
name|'doc'
op|'='
string|'"%s. %s"'
op|'%'
op|'('
name|'doc'
op|','
name|'d'
op|'.'
name|'doc'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'doc'
op|':'
newline|'\n'
indent|'            '
name|'column2_l'
op|'='
name|'text'
op|'.'
name|'wordWrap'
op|'('
name|'doc'
op|','
name|'colWidth2'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'column2_l'
op|'='
op|'['
string|"''"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'optLines'
op|'.'
name|'append'
op|'('
string|'"%s%s\\n"'
op|'%'
op|'('
name|'column1'
op|','
name|'column2_l'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'column2_l'
op|':'
newline|'\n'
indent|'            '
name|'optLines'
op|'.'
name|'append'
op|'('
string|'"%s%s\\n"'
op|'%'
op|'('
name|'colFiller1'
op|','
name|'line'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'optChunks'
op|'.'
name|'append'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'optLines'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'optChunks'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|flagFunction
dedent|''
name|'def'
name|'flagFunction'
op|'('
name|'method'
op|','
name|'name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'reqArgs'
op|'='
name|'method'
op|'.'
name|'im_func'
op|'.'
name|'func_code'
op|'.'
name|'co_argcount'
newline|'\n'
name|'if'
name|'reqArgs'
op|'>'
number|'2'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'UsageError'
op|'('
string|"'Invalid Option function for %s'"
op|'%'
nl|'\n'
op|'('
name|'name'
name|'or'
name|'method'
op|'.'
name|'func_name'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'reqArgs'
op|'=='
number|'2'
op|':'
newline|'\n'
comment|'# argName = method.im_func.func_code.co_varnames[1]'
nl|'\n'
indent|'        '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'return'
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|portCoerce
dedent|''
name|'def'
name|'portCoerce'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Coerce a string value to an int port number, and checks the validity.\n    """'
newline|'\n'
name|'value'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
name|'if'
name|'value'
op|'<'
number|'0'
name|'or'
name|'value'
op|'>'
number|'65535'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|'"Port number not in range: %s"'
op|'%'
op|'('
name|'value'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'value'
newline|'\n'
dedent|''
name|'portCoerce'
op|'.'
name|'coerceDoc'
op|'='
string|'"Must be an int between 0 and 65535."'
newline|'\n'
nl|'\n'
nl|'\n'
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.python.threadable -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nA module that will allow your program to be multi-threaded,\nmicro-threaded, and single-threaded.  Currently microthreads are\nunimplemented.  The idea is to abstract away some commonly used\nfunctionality so that I don\'t have to special-case it in all programs.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'warnings'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'hook'
newline|'\n'
nl|'\n'
DECL|class|DummyLock
name|'class'
name|'DummyLock'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Hack to allow locks to be unpickled on an unthreaded system.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__reduce__
name|'def'
name|'__reduce__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'unpickle_lock'
op|','
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|unpickle_lock
dedent|''
dedent|''
name|'def'
name|'unpickle_lock'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'threadingmodule'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'XLock'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'DummyLock'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'unpickle_lock'
op|'.'
name|'__safe_for_unpickling__'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|_synchPre
name|'def'
name|'_synchPre'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'b'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
string|"'_threadable_lock'"
name|'not'
name|'in'
name|'self'
op|'.'
name|'__dict__'
op|':'
newline|'\n'
indent|'        '
name|'_synchLockCreator'
op|'.'
name|'acquire'
op|'('
op|')'
newline|'\n'
name|'if'
string|"'_threadable_lock'"
name|'not'
name|'in'
name|'self'
op|'.'
name|'__dict__'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'_threadable_lock'"
op|']'
op|'='
name|'XLock'
op|'('
op|')'
newline|'\n'
dedent|''
name|'_synchLockCreator'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_threadable_lock'
op|'.'
name|'acquire'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_synchPost
dedent|''
name|'def'
name|'_synchPost'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'b'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'_threadable_lock'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|synchronize
dedent|''
name|'def'
name|'synchronize'
op|'('
op|'*'
name|'klasses'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Make all methods listed in each class\' synchronized attribute synchronized.\n\n    The synchronized attribute should be a list of strings, consisting of the\n    names of methods that must be synchronized. If we are running in threaded\n    mode these methods will be wrapped with a lock.\n    """'
newline|'\n'
name|'if'
name|'threadmodule'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'klass'
name|'in'
name|'klasses'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'methodName'
name|'in'
name|'klass'
op|'.'
name|'synchronized'
op|':'
newline|'\n'
indent|'                '
name|'hook'
op|'.'
name|'addPre'
op|'('
name|'klass'
op|','
name|'methodName'
op|','
name|'_synchPre'
op|')'
newline|'\n'
name|'hook'
op|'.'
name|'addPost'
op|'('
name|'klass'
op|','
name|'methodName'
op|','
name|'_synchPost'
op|')'
newline|'\n'
nl|'\n'
DECL|function|init
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'init'
op|'('
name|'with_threads'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Initialize threading.\n\n    Don\'t bother calling this.  If it needs to happen, it will happen.\n    """'
newline|'\n'
name|'global'
name|'threaded'
op|','
name|'_synchLockCreator'
op|','
name|'XLock'
newline|'\n'
nl|'\n'
name|'if'
name|'with_threads'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'threaded'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'threadmodule'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'threaded'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|class|XLock
name|'class'
name|'XLock'
op|'('
name|'threadingmodule'
op|'.'
name|'_RLock'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__reduce__
indent|'                    '
name|'def'
name|'__reduce__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'return'
op|'('
name|'unpickle_lock'
op|','
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'_synchLockCreator'
op|'='
name|'XLock'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Cannot initialize threading, platform lacks thread support"'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'threaded'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Cannot uninitialize threads"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|variable|_dummyID
dedent|''
dedent|''
dedent|''
name|'_dummyID'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
DECL|function|getThreadID
name|'def'
name|'getThreadID'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'threadmodule'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_dummyID'
newline|'\n'
dedent|''
name|'return'
name|'threadmodule'
op|'.'
name|'get_ident'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|isInIOThread
dedent|''
name|'def'
name|'isInIOThread'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Are we in the thread responsable for I/O requests (the event loop)?\n    """'
newline|'\n'
name|'return'
name|'ioThread'
op|'=='
name|'getThreadID'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|registerAsIOThread
dedent|''
name|'def'
name|'registerAsIOThread'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mark the current thread as responsable for I/O requests.\n    """'
newline|'\n'
name|'global'
name|'ioThread'
newline|'\n'
name|'ioThread'
op|'='
name|'getThreadID'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|ioThread
dedent|''
name|'ioThread'
op|'='
name|'None'
newline|'\n'
DECL|variable|threaded
name|'threaded'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|function|whenThreaded
name|'def'
name|'whenThreaded'
op|'('
name|'cb'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"threadable.whenThreaded is deprecated. "'
nl|'\n'
string|'"Use application-level logic instead."'
op|','
nl|'\n'
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'cb'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'thread'
name|'as'
name|'threadmodule'
newline|'\n'
name|'import'
name|'threading'
name|'as'
name|'threadingmodule'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'threadmodule'
op|'='
name|'None'
newline|'\n'
name|'threadingmodule'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'init'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
name|'__all__'
op|'='
op|'['
string|"'isInIOThread'"
op|','
string|"'registerAsIOThread'"
op|','
string|"'getThreadID'"
op|','
string|"'XLock'"
op|','
nl|'\n'
string|"'whenThreaded'"
op|']'
newline|'\n'
endmarker|''
end_unit

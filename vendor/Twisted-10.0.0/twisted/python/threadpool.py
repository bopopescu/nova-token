begin_unit
comment|'# -*- test-case-name: twisted.test.test_threadpool -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\ntwisted.threadpool: a pool of threads to which we dispatch tasks.\n\nIn most cases you can just use reactor.callInThread and friends\ninstead of creating a thread pool directly.\n"""'
newline|'\n'
nl|'\n'
comment|'# System Imports'
nl|'\n'
name|'import'
name|'Queue'
newline|'\n'
name|'import'
name|'threading'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Twisted Imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'runtime'
op|','
name|'context'
op|','
name|'failure'
newline|'\n'
nl|'\n'
DECL|variable|WorkerStop
name|'WorkerStop'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ThreadPool
name|'class'
name|'ThreadPool'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class (hopefully) generalizes the functionality of a pool of\n    threads to which work can be dispatched.\n\n    callInThread() and stop() should only be called from\n    a single thread, unless you make a subclass where stop() and\n    _startSomeWorkers() are synchronized.\n    """'
newline|'\n'
DECL|variable|min
name|'min'
op|'='
number|'5'
newline|'\n'
DECL|variable|max
name|'max'
op|'='
number|'20'
newline|'\n'
DECL|variable|joined
name|'joined'
op|'='
name|'False'
newline|'\n'
DECL|variable|started
name|'started'
op|'='
name|'False'
newline|'\n'
DECL|variable|workers
name|'workers'
op|'='
number|'0'
newline|'\n'
DECL|variable|name
name|'name'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|threadFactory
name|'threadFactory'
op|'='
name|'threading'
op|'.'
name|'Thread'
newline|'\n'
DECL|variable|currentThread
name|'currentThread'
op|'='
name|'staticmethod'
op|'('
name|'threading'
op|'.'
name|'currentThread'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'minthreads'
op|'='
number|'5'
op|','
name|'maxthreads'
op|'='
number|'20'
op|','
name|'name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new threadpool.\n\n        @param minthreads: minimum number of threads in the pool\n\n        @param maxthreads: maximum number of threads in the pool\n        """'
newline|'\n'
name|'assert'
name|'minthreads'
op|'>='
number|'0'
op|','
string|"'minimum is negative'"
newline|'\n'
name|'assert'
name|'minthreads'
op|'<='
name|'maxthreads'
op|','
string|"'minimum is greater than maximum'"
newline|'\n'
name|'self'
op|'.'
name|'q'
op|'='
name|'Queue'
op|'.'
name|'Queue'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'min'
op|'='
name|'minthreads'
newline|'\n'
name|'self'
op|'.'
name|'max'
op|'='
name|'maxthreads'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'if'
name|'runtime'
op|'.'
name|'platform'
op|'.'
name|'getType'
op|'('
op|')'
op|'!='
string|'"java"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'waiters'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'threads'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'working'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'waiters'
op|'='
name|'ThreadSafeList'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'threads'
op|'='
name|'ThreadSafeList'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'working'
op|'='
name|'ThreadSafeList'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|start
dedent|''
dedent|''
name|'def'
name|'start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Start the threadpool.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'joined'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'started'
op|'='
name|'True'
newline|'\n'
comment|'# Start some threads.'
nl|'\n'
name|'self'
op|'.'
name|'adjustPoolsize'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|startAWorker
dedent|''
name|'def'
name|'startAWorker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'workers'
op|'+='
number|'1'
newline|'\n'
name|'name'
op|'='
string|'"PoolThread-%s-%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'name'
name|'or'
name|'id'
op|'('
name|'self'
op|')'
op|','
name|'self'
op|'.'
name|'workers'
op|')'
newline|'\n'
name|'newThread'
op|'='
name|'self'
op|'.'
name|'threadFactory'
op|'('
name|'target'
op|'='
name|'self'
op|'.'
name|'_worker'
op|','
name|'name'
op|'='
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'threads'
op|'.'
name|'append'
op|'('
name|'newThread'
op|')'
newline|'\n'
name|'newThread'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopAWorker
dedent|''
name|'def'
name|'stopAWorker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'q'
op|'.'
name|'put'
op|'('
name|'WorkerStop'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'workers'
op|'-='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|__setstate__
dedent|''
name|'def'
name|'__setstate__'
op|'('
name|'self'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__dict__'
op|'='
name|'state'
newline|'\n'
name|'ThreadPool'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'min'
op|','
name|'self'
op|'.'
name|'max'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'state'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'state'
op|'['
string|"'min'"
op|']'
op|'='
name|'self'
op|'.'
name|'min'
newline|'\n'
name|'state'
op|'['
string|"'max'"
op|']'
op|'='
name|'self'
op|'.'
name|'max'
newline|'\n'
name|'return'
name|'state'
newline|'\n'
nl|'\n'
DECL|member|_startSomeWorkers
dedent|''
name|'def'
name|'_startSomeWorkers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'neededSize'
op|'='
name|'self'
op|'.'
name|'q'
op|'.'
name|'qsize'
op|'('
op|')'
op|'+'
name|'len'
op|'('
name|'self'
op|'.'
name|'working'
op|')'
newline|'\n'
comment|'# Create enough, but not too many'
nl|'\n'
name|'while'
name|'self'
op|'.'
name|'workers'
op|'<'
name|'min'
op|'('
name|'self'
op|'.'
name|'max'
op|','
name|'neededSize'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'startAWorker'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dispatch
dedent|''
dedent|''
name|'def'
name|'dispatch'
op|'('
name|'self'
op|','
name|'owner'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        DEPRECATED: use L{callInThread} instead.\n\n        Dispatch a function to be a run in a thread.\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"dispatch() is deprecated since Twisted 8.0, "'
nl|'\n'
string|'"use callInThread() instead"'
op|','
nl|'\n'
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'callInThread'
op|'('
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callInThread
dedent|''
name|'def'
name|'callInThread'
op|'('
name|'self'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call a callable object in a separate thread.\n\n        @param func: callable object to be called in separate thread\n\n        @param *args: positional arguments to be passed to func\n\n        @param **kw: keyword args to be passed to func\n        """'
newline|'\n'
name|'self'
op|'.'
name|'callInThreadWithCallback'
op|'('
name|'None'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callInThreadWithCallback
dedent|''
name|'def'
name|'callInThreadWithCallback'
op|'('
name|'self'
op|','
name|'onResult'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call a callable object in a separate thread and call onResult\n        with the return value, or a L{twisted.python.failure.Failure}\n        if the callable raises an exception.\n\n        The callable is allowed to block, but the onResult function\n        must not block and should perform as little work as possible.\n\n        A typical action for onResult for a threadpool used with a\n        Twisted reactor would be to schedule a Deferred to fire in the\n        main reactor thread using C{.callFromThread}.  Note that\n        onResult is called inside the separate thread, not inside the\n        reactor thread.\n\n        @param onResult: a callable with the signature (success, result).\n            If the callable returns normally, onResult is called with\n            (True, result) where result is the return value of the callable.\n            If the callable throws an exception, onResult is called with\n            (False, failure).\n\n            Optionally, onResult may be None, in which case it is not\n            called at all.\n\n        @param func: callable object to be called in separate thread\n\n        @param *args: positional arguments to be passed to func\n\n        @param **kwargs: keyword arguments to be passed to func\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'joined'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'ctx'
op|'='
name|'context'
op|'.'
name|'theContextTracker'
op|'.'
name|'currentContext'
op|'('
op|')'
op|'.'
name|'contexts'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'o'
op|'='
op|'('
name|'ctx'
op|','
name|'func'
op|','
name|'args'
op|','
name|'kw'
op|','
name|'onResult'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'q'
op|'.'
name|'put'
op|'('
name|'o'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'started'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_startSomeWorkers'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_runWithCallback
dedent|''
dedent|''
name|'def'
name|'_runWithCallback'
op|'('
name|'self'
op|','
name|'callback'
op|','
name|'errback'
op|','
name|'func'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'apply'
op|'('
name|'func'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'errback'
op|'('
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'callback'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dispatchWithCallback
dedent|''
dedent|''
name|'def'
name|'dispatchWithCallback'
op|'('
name|'self'
op|','
name|'owner'
op|','
name|'callback'
op|','
name|'errback'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        DEPRECATED: use L{twisted.internet.threads.deferToThread} instead.\n\n        Dispatch a function, returning the result to a callback function.\n\n        The callback function will be called in the thread - make sure it is\n        thread-safe.\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"dispatchWithCallback() is deprecated since Twisted 8.0, "'
nl|'\n'
string|'"use twisted.internet.threads.deferToThread() instead."'
op|','
nl|'\n'
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'callInThread'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_runWithCallback'
op|','
name|'callback'
op|','
name|'errback'
op|','
name|'func'
op|','
name|'args'
op|','
name|'kw'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_worker
dedent|''
name|'def'
name|'_worker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Method used as target of the created threads: retrieve task to run\n        from the threadpool, run it, and proceed to the next task until\n        threadpool is stopped.\n        """'
newline|'\n'
name|'ct'
op|'='
name|'self'
op|'.'
name|'currentThread'
op|'('
op|')'
newline|'\n'
name|'o'
op|'='
name|'self'
op|'.'
name|'q'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
name|'while'
name|'o'
name|'is'
name|'not'
name|'WorkerStop'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'working'
op|'.'
name|'append'
op|'('
name|'ct'
op|')'
newline|'\n'
name|'ctx'
op|','
name|'function'
op|','
name|'args'
op|','
name|'kwargs'
op|','
name|'onResult'
op|'='
name|'o'
newline|'\n'
name|'del'
name|'o'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'context'
op|'.'
name|'call'
op|'('
name|'ctx'
op|','
name|'function'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'success'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'success'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'onResult'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'context'
op|'.'
name|'call'
op|'('
name|'ctx'
op|','
name|'log'
op|'.'
name|'err'
op|')'
newline|'\n'
name|'result'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'result'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'del'
name|'function'
op|','
name|'args'
op|','
name|'kwargs'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'working'
op|'.'
name|'remove'
op|'('
name|'ct'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'onResult'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'context'
op|'.'
name|'call'
op|'('
name|'ctx'
op|','
name|'onResult'
op|','
name|'success'
op|','
name|'result'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                    '
name|'context'
op|'.'
name|'call'
op|'('
name|'ctx'
op|','
name|'log'
op|'.'
name|'err'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'del'
name|'ctx'
op|','
name|'onResult'
op|','
name|'result'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'waiters'
op|'.'
name|'append'
op|'('
name|'ct'
op|')'
newline|'\n'
name|'o'
op|'='
name|'self'
op|'.'
name|'q'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'waiters'
op|'.'
name|'remove'
op|'('
name|'ct'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'threads'
op|'.'
name|'remove'
op|'('
name|'ct'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stop
dedent|''
name|'def'
name|'stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Shutdown the threads in the threadpool.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'joined'
op|'='
name|'True'
newline|'\n'
name|'threads'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'self'
op|'.'
name|'threads'
op|')'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'workers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'q'
op|'.'
name|'put'
op|'('
name|'WorkerStop'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'workers'
op|'-='
number|'1'
newline|'\n'
nl|'\n'
comment|"# and let's just make sure"
nl|'\n'
comment|'# FIXME: threads that have died before calling stop() are not joined.'
nl|'\n'
dedent|''
name|'for'
name|'thread'
name|'in'
name|'threads'
op|':'
newline|'\n'
indent|'            '
name|'thread'
op|'.'
name|'join'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|adjustPoolsize
dedent|''
dedent|''
name|'def'
name|'adjustPoolsize'
op|'('
name|'self'
op|','
name|'minthreads'
op|'='
name|'None'
op|','
name|'maxthreads'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'minthreads'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'minthreads'
op|'='
name|'self'
op|'.'
name|'min'
newline|'\n'
dedent|''
name|'if'
name|'maxthreads'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'maxthreads'
op|'='
name|'self'
op|'.'
name|'max'
newline|'\n'
nl|'\n'
dedent|''
name|'assert'
name|'minthreads'
op|'>='
number|'0'
op|','
string|"'minimum is negative'"
newline|'\n'
name|'assert'
name|'minthreads'
op|'<='
name|'maxthreads'
op|','
string|"'minimum is greater than maximum'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'min'
op|'='
name|'minthreads'
newline|'\n'
name|'self'
op|'.'
name|'max'
op|'='
name|'maxthreads'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'started'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# Kill of some threads if we have too many.'
nl|'\n'
dedent|''
name|'while'
name|'self'
op|'.'
name|'workers'
op|'>'
name|'self'
op|'.'
name|'max'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stopAWorker'
op|'('
op|')'
newline|'\n'
comment|'# Start some threads if we have too few.'
nl|'\n'
dedent|''
name|'while'
name|'self'
op|'.'
name|'workers'
op|'<'
name|'self'
op|'.'
name|'min'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'startAWorker'
op|'('
op|')'
newline|'\n'
comment|'# Start some threads if there is a need.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_startSomeWorkers'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|dumpStats
dedent|''
name|'def'
name|'dumpStats'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'queue: %s'"
op|'%'
name|'self'
op|'.'
name|'q'
op|'.'
name|'queue'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'waiters: %s'"
op|'%'
name|'self'
op|'.'
name|'waiters'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'workers: %s'"
op|'%'
name|'self'
op|'.'
name|'working'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'total: %s'"
op|'%'
name|'self'
op|'.'
name|'threads'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ThreadSafeList
dedent|''
dedent|''
name|'class'
name|'ThreadSafeList'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    In Jython 2.1 lists aren\'t thread-safe, so this wraps it.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lock'
op|'='
name|'threading'
op|'.'
name|'Lock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|append
dedent|''
name|'def'
name|'append'
op|'('
name|'self'
op|','
name|'i'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lock'
op|'.'
name|'acquire'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'l'
op|'.'
name|'append'
op|'('
name|'i'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'lock'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove
dedent|''
dedent|''
name|'def'
name|'remove'
op|'('
name|'self'
op|','
name|'i'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lock'
op|'.'
name|'acquire'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'l'
op|'.'
name|'remove'
op|'('
name|'i'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'lock'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'l'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.test.test_roots -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTwisted Python Roots: an abstract hierarchy representation for Twisted.\n\nMaintainer: Glyph Lefkowitz\n"""'
newline|'\n'
nl|'\n'
comment|'# System imports'
nl|'\n'
name|'import'
name|'types'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'reflect'
newline|'\n'
nl|'\n'
DECL|class|NotSupportedError
name|'class'
name|'NotSupportedError'
op|'('
name|'NotImplementedError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An exception meaning that the tree-manipulation operation\n    you\'re attempting to perform is not supported.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Request
dedent|''
name|'class'
name|'Request'
op|':'
newline|'\n'
indent|'    '
string|'"""I am an abstract representation of a request for an entity.\n\n    I also function as the response.  The request is responded to by calling\n    self.write(data) until there is no data left and then calling\n    self.finish().\n    """'
newline|'\n'
comment|'# This attribute should be set to the string name of the protocol being'
nl|'\n'
comment|'# responded to (e.g. HTTP or FTP)'
nl|'\n'
DECL|variable|wireProtocol
name|'wireProtocol'
op|'='
name|'None'
newline|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add some data to the response to this request.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
string|'"%s.write"'
op|'%'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish
dedent|''
name|'def'
name|'finish'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The response to this request is finished; flush all data to the network stream.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
string|'"%s.finish"'
op|'%'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Entity
dedent|''
dedent|''
name|'class'
name|'Entity'
op|':'
newline|'\n'
indent|'    '
string|'"""I am a terminal object in a hierarchy, with no children.\n\n    I represent a null interface; certain non-instance objects (strings and\n    integers, notably) are Entities.\n\n    Methods on this class are suggested to be implemented, but are not\n    required, and will be emulated on a per-protocol basis for types which do\n    not handle them.\n    """'
newline|'\n'
DECL|member|render
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        I produce a stream of bytes for the request, by calling request.write()\n        and request.finish().\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
string|'"%s.render"'
op|'%'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Collection
dedent|''
dedent|''
name|'class'
name|'Collection'
op|':'
newline|'\n'
indent|'    '
string|'"""I represent a static collection of entities.\n\n    I contain methods designed to represent collections that can be dynamically\n    created.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'entities'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize me.\n        """'
newline|'\n'
name|'if'
name|'entities'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'entities'
op|'='
name|'entities'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'entities'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|getStaticEntity
dedent|''
dedent|''
name|'def'
name|'getStaticEntity'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get an entity that was added to me using putEntity.\n\n        This method will return \'None\' if it fails.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'entities'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getDynamicEntity
dedent|''
name|'def'
name|'getDynamicEntity'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Subclass this to generate an entity on demand.\n\n        This method should return \'None\' if it fails.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getEntity
dedent|''
name|'def'
name|'getEntity'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve an entity from me.\n\n        I will first attempt to retrieve an entity statically; static entities\n        will obscure dynamic ones.  If that fails, I will retrieve the entity\n        dynamically.\n\n        If I cannot retrieve an entity, I will return \'None\'.\n        """'
newline|'\n'
name|'ent'
op|'='
name|'self'
op|'.'
name|'getStaticEntity'
op|'('
name|'name'
op|')'
newline|'\n'
name|'if'
name|'ent'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ent'
newline|'\n'
dedent|''
name|'ent'
op|'='
name|'self'
op|'.'
name|'getDynamicEntity'
op|'('
name|'name'
op|','
name|'request'
op|')'
newline|'\n'
name|'if'
name|'ent'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ent'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|putEntity
dedent|''
name|'def'
name|'putEntity'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'entity'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Store a static reference on \'name\' for \'entity\'.\n\n        Raises a KeyError if the operation fails.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'entities'
op|'['
name|'name'
op|']'
op|'='
name|'entity'
newline|'\n'
nl|'\n'
DECL|member|delEntity
dedent|''
name|'def'
name|'delEntity'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a static reference for \'name\'.\n\n        Raises a KeyError if the operation fails.\n        """'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'entities'
op|'['
name|'name'
op|']'
newline|'\n'
nl|'\n'
DECL|member|storeEntity
dedent|''
name|'def'
name|'storeEntity'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Store an entity for \'name\', based on the content of \'request\'.\n        """'
newline|'\n'
name|'raise'
name|'NotSupportedError'
op|'('
string|'"%s.storeEntity"'
op|'%'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|removeEntity
dedent|''
name|'def'
name|'removeEntity'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove an entity for \'name\', based on the content of \'request\'.\n        """'
newline|'\n'
name|'raise'
name|'NotSupportedError'
op|'('
string|'"%s.removeEntity"'
op|'%'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|listStaticEntities
dedent|''
name|'def'
name|'listStaticEntities'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve a list of all name, entity pairs that I store references to.\n\n        See getStaticEntity.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'entities'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|listDynamicEntities
dedent|''
name|'def'
name|'listDynamicEntities'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A list of all name, entity that I can generate on demand.\n\n        See getDynamicEntity.\n        """'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|listEntities
dedent|''
name|'def'
name|'listEntities'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve a list of all name, entity pairs I contain.\n\n        See getEntity.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'listStaticEntities'
op|'('
op|')'
op|'+'
name|'self'
op|'.'
name|'listDynamicEntities'
op|'('
name|'request'
op|')'
newline|'\n'
nl|'\n'
DECL|member|listStaticNames
dedent|''
name|'def'
name|'listStaticNames'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve a list of the names of entities that I store references to.\n\n        See getStaticEntity.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'entities'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|listDynamicNames
dedent|''
name|'def'
name|'listDynamicNames'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve a list of the names of entities that I store references to.\n\n        See getDynamicEntity.\n        """'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|listNames
dedent|''
name|'def'
name|'listNames'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve a list of all names for entities that I contain.\n\n        See getEntity.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'listStaticNames'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConstraintViolation
dedent|''
dedent|''
name|'class'
name|'ConstraintViolation'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An exception raised when a constraint is violated.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Constrained
dedent|''
name|'class'
name|'Constrained'
op|'('
name|'Collection'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A collection that has constraints on its names and/or entities."""'
newline|'\n'
nl|'\n'
DECL|member|nameConstraint
name|'def'
name|'nameConstraint'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A method that determines whether an entity may be added to me with a given name.\n\n        If the constraint is satisfied, return 1; if the constraint is not\n        satisfied, either return 0 or raise a descriptive ConstraintViolation.\n        """'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|entityConstraint
dedent|''
name|'def'
name|'entityConstraint'
op|'('
name|'self'
op|','
name|'entity'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A method that determines whether an entity may be added to me.\n\n        If the constraint is satisfied, return 1; if the constraint is not\n        satisfied, either return 0 or raise a descriptive ConstraintViolation.\n        """'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|reallyPutEntity
dedent|''
name|'def'
name|'reallyPutEntity'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'entity'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Collection'
op|'.'
name|'putEntity'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'entity'
op|')'
newline|'\n'
nl|'\n'
DECL|member|putEntity
dedent|''
name|'def'
name|'putEntity'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'entity'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Store an entity if it meets both constraints.\n\n        Otherwise raise a ConstraintViolation.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'nameConstraint'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'entityConstraint'
op|'('
name|'entity'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reallyPutEntity'
op|'('
name|'name'
op|','
name|'entity'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ConstraintViolation'
op|'('
string|'"Entity constraint violated."'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ConstraintViolation'
op|'('
string|'"Name constraint violated."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Locked
dedent|''
dedent|''
dedent|''
name|'class'
name|'Locked'
op|'('
name|'Constrained'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A collection that can be locked from adding entities."""'
newline|'\n'
nl|'\n'
DECL|variable|locked
name|'locked'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|lock
name|'def'
name|'lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'locked'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|entityConstraint
dedent|''
name|'def'
name|'entityConstraint'
op|'('
name|'self'
op|','
name|'entity'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'not'
name|'self'
op|'.'
name|'locked'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Homogenous
dedent|''
dedent|''
name|'class'
name|'Homogenous'
op|'('
name|'Constrained'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A homogenous collection of entities.\n\n    I will only contain entities that are an instance of the class or type\n    specified by my \'entityType\' attribute.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|entityType
name|'entityType'
op|'='
name|'types'
op|'.'
name|'InstanceType'
newline|'\n'
nl|'\n'
DECL|member|entityConstraint
name|'def'
name|'entityConstraint'
op|'('
name|'self'
op|','
name|'entity'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'entity'
op|','
name|'self'
op|'.'
name|'entityType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ConstraintViolation'
op|'('
string|'"%s of incorrect type (%s)"'
op|'%'
nl|'\n'
op|'('
name|'entity'
op|','
name|'self'
op|'.'
name|'entityType'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getNameType
dedent|''
dedent|''
name|'def'
name|'getNameType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"Name"'
newline|'\n'
nl|'\n'
DECL|member|getEntityType
dedent|''
name|'def'
name|'getEntityType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'entityType'
op|'.'
name|'__name__'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

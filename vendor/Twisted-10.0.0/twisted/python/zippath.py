begin_unit
comment|'# -*- test-case-name: twisted.test.test_paths.ZipFilePathTestCase -*-'
nl|'\n'
nl|'\n'
string|'"""\n\nThis module contains partial re-implementations of FilePath, pending some\nspecification of formal interfaces it is a duck-typing attempt to emulate them\nfor certain restricted uses.\n\nSee the constructor for ZipArchive for use.\n\n"""'
newline|'\n'
nl|'\n'
DECL|variable|__metaclass__
name|'__metaclass__'
op|'='
name|'type'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'zipstream'
name|'import'
name|'ChunkingZipFile'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
op|','
name|'_PathHelper'
newline|'\n'
nl|'\n'
comment|"# using FilePath here exclusively rather than os to make sure that we don't do"
nl|'\n'
comment|'# anything OS-path-specific here.'
nl|'\n'
nl|'\n'
DECL|variable|ZIP_PATH_SEP
name|'ZIP_PATH_SEP'
op|'='
string|"'/'"
comment|'# In zipfiles, "/" is universally used as the'
newline|'\n'
comment|'# path separator, regardless of platform.'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ZipPath
name|'class'
name|'ZipPath'
op|'('
name|'_PathHelper'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I represent a file or directory contained within a zip file.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'archive'
op|','
name|'pathInArchive'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Don\'t construct me directly.  Use ZipArchive.child().\n\n        @param archive: a ZipArchive instance.\n\n        @param pathInArchive: a ZIP_PATH_SEP-separated string.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'archive'
op|'='
name|'archive'
newline|'\n'
name|'self'
op|'.'
name|'pathInArchive'
op|'='
name|'pathInArchive'
newline|'\n'
comment|"# self.path pretends to be os-specific because that's the way the"
nl|'\n'
comment|"# 'zipimport' module does it."
nl|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'archive'
op|'.'
name|'zipfile'
op|'.'
name|'filename'
op|','
nl|'\n'
op|'*'
op|'('
name|'self'
op|'.'
name|'pathInArchive'
op|'.'
name|'split'
op|'('
name|'ZIP_PATH_SEP'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cmp__
dedent|''
name|'def'
name|'__cmp__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'other'
op|','
name|'ZipPath'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'NotImplemented'
newline|'\n'
dedent|''
name|'return'
name|'cmp'
op|'('
op|'('
name|'self'
op|'.'
name|'archive'
op|','
name|'self'
op|'.'
name|'pathInArchive'
op|')'
op|','
nl|'\n'
op|'('
name|'other'
op|'.'
name|'archive'
op|','
name|'other'
op|'.'
name|'pathInArchive'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'ZipPath(%r)'"
op|'%'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|parent
dedent|''
name|'def'
name|'parent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'splitup'
op|'='
name|'self'
op|'.'
name|'pathInArchive'
op|'.'
name|'split'
op|'('
name|'ZIP_PATH_SEP'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'splitup'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'archive'
newline|'\n'
dedent|''
name|'return'
name|'ZipPath'
op|'('
name|'self'
op|'.'
name|'archive'
op|','
name|'ZIP_PATH_SEP'
op|'.'
name|'join'
op|'('
name|'splitup'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|child
dedent|''
name|'def'
name|'child'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'ZipPath'
op|'('
name|'self'
op|'.'
name|'archive'
op|','
name|'ZIP_PATH_SEP'
op|'.'
name|'join'
op|'('
op|'['
name|'self'
op|'.'
name|'pathInArchive'
op|','
name|'path'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sibling
dedent|''
name|'def'
name|'sibling'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'parent'
op|'('
op|')'
op|'.'
name|'child'
op|'('
name|'path'
op|')'
newline|'\n'
nl|'\n'
comment|'# preauthChild = child'
nl|'\n'
nl|'\n'
DECL|member|exists
dedent|''
name|'def'
name|'exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'isdir'
op|'('
op|')'
name|'or'
name|'self'
op|'.'
name|'isfile'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|isdir
dedent|''
name|'def'
name|'isdir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'pathInArchive'
name|'in'
name|'self'
op|'.'
name|'archive'
op|'.'
name|'childmap'
newline|'\n'
nl|'\n'
DECL|member|isfile
dedent|''
name|'def'
name|'isfile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'pathInArchive'
name|'in'
name|'self'
op|'.'
name|'archive'
op|'.'
name|'zipfile'
op|'.'
name|'NameToInfo'
newline|'\n'
nl|'\n'
DECL|member|islink
dedent|''
name|'def'
name|'islink'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|listdir
dedent|''
name|'def'
name|'listdir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'exists'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'isdir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'archive'
op|'.'
name|'childmap'
op|'['
name|'self'
op|'.'
name|'pathInArchive'
op|']'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'ENOTDIR'
op|','
string|'"Leaf zip entry listed"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'ENOENT'
op|','
string|'"Non-existent zip entry listed"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|splitext
dedent|''
dedent|''
name|'def'
name|'splitext'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a value similar to that returned by os.path.splitext.\n        """'
newline|'\n'
comment|'# This happens to work out because of the fact that we use OS-specific'
nl|'\n'
comment|"# path separators in the constructor to construct our fake 'path'"
nl|'\n'
comment|'# attribute.'
nl|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|basename
dedent|''
name|'def'
name|'basename'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'pathInArchive'
op|'.'
name|'split'
op|'('
name|'ZIP_PATH_SEP'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|dirname
dedent|''
name|'def'
name|'dirname'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# XXX NOTE: This API isn't a very good idea on filepath, but it's even"
nl|'\n'
comment|'# less meaningful here.'
nl|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'parent'
op|'('
op|')'
op|'.'
name|'path'
newline|'\n'
nl|'\n'
DECL|member|open
dedent|''
name|'def'
name|'open'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'archive'
op|'.'
name|'zipfile'
op|'.'
name|'readfile'
op|'('
name|'self'
op|'.'
name|'pathInArchive'
op|')'
newline|'\n'
nl|'\n'
DECL|member|restat
dedent|''
name|'def'
name|'restat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getAccessTime
dedent|''
name|'def'
name|'getAccessTime'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve this file\'s last access-time.  This is the same as the last access\n        time for the archive.\n\n        @return: a number of seconds since the epoch\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'archive'
op|'.'
name|'getAccessTime'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getModificationTime
dedent|''
name|'def'
name|'getModificationTime'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve this file\'s last modification time.  This is the time of\n        modification recorded in the zipfile.\n\n        @return: a number of seconds since the epoch.\n        """'
newline|'\n'
name|'return'
name|'time'
op|'.'
name|'mktime'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'archive'
op|'.'
name|'zipfile'
op|'.'
name|'NameToInfo'
op|'['
name|'self'
op|'.'
name|'pathInArchive'
op|']'
op|'.'
name|'date_time'
nl|'\n'
op|'+'
op|'('
number|'0'
op|','
number|'0'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getStatusChangeTime
dedent|''
name|'def'
name|'getStatusChangeTime'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve this file\'s last modification time.  This name is provided for\n        compatibility, and returns the same value as getmtime.\n\n        @return: a number of seconds since the epoch.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'getModificationTime'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ZipArchive
dedent|''
dedent|''
name|'class'
name|'ZipArchive'
op|'('
name|'ZipPath'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" I am a FilePath-like object which can wrap a zip archive as if it were a\n    directory.\n    """'
newline|'\n'
DECL|variable|archive
name|'archive'
op|'='
name|'property'
op|'('
name|'lambda'
name|'self'
op|':'
name|'self'
op|')'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'archivePathname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a ZipArchive, treating the archive at archivePathname as a zip file.\n\n        @param archivePathname: a str, naming a path in the filesystem.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'zipfile'
op|'='
name|'ChunkingZipFile'
op|'('
name|'archivePathname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'archivePathname'
newline|'\n'
name|'self'
op|'.'
name|'pathInArchive'
op|'='
string|"''"
newline|'\n'
comment|'# zipfile is already wasting O(N) memory on cached ZipInfo instances,'
nl|'\n'
comment|"# so there's no sense in trying to do this lazily or intelligently"
nl|'\n'
name|'self'
op|'.'
name|'childmap'
op|'='
op|'{'
op|'}'
comment|'# map parent: list of children'
newline|'\n'
nl|'\n'
name|'for'
name|'name'
name|'in'
name|'self'
op|'.'
name|'zipfile'
op|'.'
name|'namelist'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'name'
op|'.'
name|'split'
op|'('
name|'ZIP_PATH_SEP'
op|')'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'name'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'child'
op|'='
name|'name'
op|'['
op|'-'
name|'x'
op|']'
newline|'\n'
name|'parent'
op|'='
name|'ZIP_PATH_SEP'
op|'.'
name|'join'
op|'('
name|'name'
op|'['
op|':'
op|'-'
name|'x'
op|']'
op|')'
newline|'\n'
name|'if'
name|'parent'
name|'not'
name|'in'
name|'self'
op|'.'
name|'childmap'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'childmap'
op|'['
name|'parent'
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'childmap'
op|'['
name|'parent'
op|']'
op|'['
name|'child'
op|']'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'parent'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|member|child
dedent|''
dedent|''
name|'def'
name|'child'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a ZipPath pointing at a path within the archive.\n\n        @param path: a str with no path separators in it, either \'/\' or the\n        system path separator, if it\'s different.\n        """'
newline|'\n'
name|'return'
name|'ZipPath'
op|'('
name|'self'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|exists
dedent|''
name|'def'
name|'exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns true if the underlying archive exists.\n        """'
newline|'\n'
name|'return'
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'zipfile'
op|'.'
name|'filename'
op|')'
op|'.'
name|'exists'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getAccessTime
dedent|''
name|'def'
name|'getAccessTime'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the archive file\'s last access time.\n        """'
newline|'\n'
name|'return'
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'zipfile'
op|'.'
name|'filename'
op|')'
op|'.'
name|'getAccessTime'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getModificationTime
dedent|''
name|'def'
name|'getModificationTime'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the archive file\'s modification time.\n        """'
newline|'\n'
name|'return'
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'zipfile'
op|'.'
name|'filename'
op|')'
op|'.'
name|'getModificationTime'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getStatusChangeTime
dedent|''
name|'def'
name|'getStatusChangeTime'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the archive file\'s status change time.\n        """'
newline|'\n'
name|'return'
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'zipfile'
op|'.'
name|'filename'
op|')'
op|'.'
name|'getStatusChangeTime'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'ZipArchive(%r)'"
op|'%'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|','
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.test.test_zshcomp -*-'
nl|'\n'
comment|'# Copyright (c) 2006 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nRebuild the completion functions for the currently active version of Twisted::\n    $ python zshcomp.py -i\n\nThis module implements a zsh code generator which generates completion code for\ncommands that use twisted.python.usage. This is the stuff that makes pressing\nTab at the command line work.\n\nMaintainer: Eric Mangold\n\nTo build completion functions for your own commands, and not Twisted commands,\nthen just do something like this::\n\n    o = mymodule.MyOptions()\n    f = file(\'_mycommand\', \'w\')\n    Builder("mycommand", o, f).write()\n\nThen all you have to do is place the generated file somewhere in your\nC{$fpath}, and restart zsh. Note the "site-functions" directory in your\nC{$fpath} where you may install 3rd-party completion functions (like the one\nyou\'re building). Call C{siteFunctionsPath} to locate this directory\nprogrammatically.\n\nSPECIAL CLASS VARIABLES. You may set these on your usage.Options subclass::\n\n    zsh_altArgDescr\n    zsh_multiUse\n    zsh_mutuallyExclusive\n    zsh_actions\n    zsh_actionDescr\n    zsh_extras\n\nHere is what they mean (with examples)::\n\n    zsh_altArgDescr = {"foo":"use this description for foo instead"}\n        A dict mapping long option names to alternate descriptions.  When this\n        variable is present, the descriptions contained here will override\n        those descriptions provided in the optFlags and optParameters\n        variables.\n\n    zsh_multiUse = ["foo", "bar"]\n        A sequence containing those long option names which may appear on the\n        command line more than once. By default, options will only be completed\n        one time.\n\n    zsh_mutuallyExclusive = [("foo", "bar"), ("bar", "baz")]\n        A sequence of sequences, with each sub-sequence containing those long\n        option names that are mutually exclusive. That is, those options that\n        cannot appear on the command line together.\n\n    zsh_actions = {"foo":\'_files -g "*.foo"\', "bar":"(one two three)",\n            "colors":"_values -s , \'colors to use\' red green blue"}\n        A dict mapping long option names to Zsh "actions". These actions\n        define what will be completed as the argument to the given option.  By\n        default, all files/dirs will be completed if no action is given.\n\n        Callables may instead be given for the values in this dict. The\n        callable should accept no arguments, and return a string that will be\n        used as the zsh "action" in the same way as the literal strings in the\n        examples above.\n\n        As you can see in the example above. The "foo" option will have files\n        that end in .foo completed when the user presses Tab. The "bar"\n        option will have either of the strings "one", "two", or "three"\n        completed when the user presses Tab.\n\n        "colors" will allow multiple arguments to be completed, seperated by\n        commas. The possible arguments are red, green, and blue. Examples::\n\n            my_command --foo some-file.foo --colors=red,green\n            my_command --colors=green\n            my_command --colors=green,blue\n\n        Actions may take many forms, and it is beyond the scope of this\n        document to illustrate them all. Please refer to the documention for\n        the Zsh _arguments function. zshcomp is basically a front-end to Zsh\'s\n        _arguments completion function.\n\n        That documentation is available on the zsh web site at this URL:\n        U{http://zsh.sunsite.dk/Doc/Release/zsh_19.html#SEC124}\n\n    zsh_actionDescr = {"logfile":"log file name", "random":"random seed"}\n        A dict mapping long option names to a description for the corresponding\n        zsh "action". These descriptions are show above the generated matches\n        when the user is doing completions for this option.\n\n        Normally Zsh does not show these descriptions unless you have\n        "verbose" completion turned on. Turn on verbosity with this in your\n        ~/.zshrc::\n\n            zstyle \':completion:*\' verbose yes\n            zstyle \':completion:*:descriptions\' format \'%B%d%b\'\n\n    zsh_extras = [":file to read from:action", ":file to write to:action"]\n        A sequence of extra arguments that will be passed verbatim to Zsh\'s\n        _arguments completion function. The _arguments function does all the\n        hard work of doing command line completions. You can see how zshcomp\n        invokes the _arguments call by looking at the generated completion\n        files that this module creates.\n\n   *** NOTE ***\n\n        You will need to use this variable to describe completions for normal\n        command line arguments. That is, those arguments that are not\n        associated with an option. That is, the arguments that are given to the\n        parseArgs method of your usage.Options subclass.\n\n        In the example above, the 1st non-option argument will be described as\n        "file to read from" and completion options will be generated in\n        accordance with the "action". (See above about zsh "actions") The\n        2nd non-option argument will be described as "file to write to" and\n        the action will be interpreted likewise.\n\n        Things you can put here are all documented under the _arguments\n        function here: U{http://zsh.sunsite.dk/Doc/Release/zsh_19.html#SEC124}\n\nZsh Notes:\n\nTo enable advanced completion add something like this to your ~/.zshrc::\n\n    autoload -U compinit\n    compinit\n\nFor some extra verbosity, and general niceness add these lines too::\n\n    zstyle \':completion:*\' verbose yes\n    zstyle \':completion:*:descriptions\' format \'%B%d%b\'\n    zstyle \':completion:*:messages\' format \'%d\'\n    zstyle \':completion:*:warnings\' format \'No matches for: %d\'\n\nHave fun!\n"""'
newline|'\n'
name|'import'
name|'itertools'
op|','
name|'sys'
op|','
name|'commands'
op|','
name|'os'
op|'.'
name|'path'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'reflect'
op|','
name|'util'
op|','
name|'usage'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'scripts'
op|'.'
name|'mktap'
name|'import'
name|'IServiceMaker'
newline|'\n'
nl|'\n'
DECL|class|MyOptions
name|'class'
name|'MyOptions'
op|'('
name|'usage'
op|'.'
name|'Options'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Options for this file\n    """'
newline|'\n'
DECL|variable|longdesc
name|'longdesc'
op|'='
string|'""'
newline|'\n'
DECL|variable|synopsis
name|'synopsis'
op|'='
string|'"Usage: python zshcomp.py [--install | -i] | <output directory>"'
newline|'\n'
DECL|variable|optFlags
name|'optFlags'
op|'='
op|'['
op|'['
string|'"install"'
op|','
string|'"i"'
op|','
nl|'\n'
string|'\'Output files to the "installation" directory \''
string|"'(twisted/python/zsh in the currently active '"
string|"'Twisted package)'"
op|']'
op|']'
newline|'\n'
DECL|variable|optParameters
name|'optParameters'
op|'='
op|'['
op|'['
string|'"directory"'
op|','
string|'"d"'
op|','
name|'None'
op|','
nl|'\n'
string|'"Output files to this directory"'
op|']'
op|']'
newline|'\n'
DECL|member|postOptions
name|'def'
name|'postOptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'['
string|"'install'"
op|']'
name|'and'
name|'self'
op|'['
string|"'directory'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'usage'
op|'.'
name|'UsageError'
op|','
string|'"Can\'t have --install and "'
string|'"--directory at the same time"'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'['
string|"'install'"
op|']'
name|'and'
name|'not'
name|'self'
op|'['
string|"'directory'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'usage'
op|'.'
name|'UsageError'
op|','
string|'"Not enough arguments"'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'['
string|"'directory'"
op|']'
name|'and'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'self'
op|'['
string|"'directory'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'usage'
op|'.'
name|'UsageError'
op|','
string|'"%s is not a directory"'
op|'%'
name|'self'
op|'['
string|"'directory'"
op|']'
newline|'\n'
nl|'\n'
DECL|class|Builder
dedent|''
dedent|''
dedent|''
name|'class'
name|'Builder'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'cmd_name'
op|','
name|'options'
op|','
name|'file'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @type cmd_name: C{str}\n        @param cmd_name: The name of the command\n\n        @type options: C{twisted.usage.Options}\n        @param options: The C{twisted.usage.Options} instance defined for\n                        this command\n\n        @type file: C{file}\n        @param file: The C{file} to write the completion function to\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'cmd_name'
op|'='
name|'cmd_name'
newline|'\n'
name|'self'
op|'.'
name|'options'
op|'='
name|'options'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'='
name|'file'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write the completion function to the file given to __init__\n        @return: C{None}\n        """'
newline|'\n'
comment|'# by default, we just write out a single call to _arguments'
nl|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
string|"'#compdef %s\\n'"
op|'%'
op|'('
name|'self'
op|'.'
name|'cmd_name'
op|','
op|')'
op|')'
newline|'\n'
name|'gen'
op|'='
name|'ArgumentsGenerator'
op|'('
name|'self'
op|'.'
name|'cmd_name'
op|','
name|'self'
op|'.'
name|'options'
op|','
name|'self'
op|'.'
name|'file'
op|')'
newline|'\n'
name|'gen'
op|'.'
name|'write'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|SubcommandBuilder
dedent|''
dedent|''
name|'class'
name|'SubcommandBuilder'
op|'('
name|'Builder'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Use this builder for commands that have sub-commands. twisted.python.usage\n    has the notion of sub-commands that are defined using an entirely seperate\n    Options class.\n    """'
newline|'\n'
DECL|variable|interface
name|'interface'
op|'='
name|'None'
newline|'\n'
DECL|variable|subcmdLabel
name|'subcmdLabel'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write the completion function to the file given to __init__\n        @return: C{None}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
string|"'#compdef %s\\n'"
op|'%'
op|'('
name|'self'
op|'.'
name|'cmd_name'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
string|"'local _zsh_subcmds_array\\n_zsh_subcmds_array=(\\n'"
op|')'
newline|'\n'
name|'from'
name|'twisted'
name|'import'
name|'plugin'
name|'as'
name|'newplugin'
newline|'\n'
name|'plugins'
op|'='
name|'newplugin'
op|'.'
name|'getPlugins'
op|'('
name|'self'
op|'.'
name|'interface'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'p'
name|'in'
name|'plugins'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
string|'\'"%s:%s"\\n\''
op|'%'
op|'('
name|'p'
op|'.'
name|'tapname'
op|','
name|'p'
op|'.'
name|'description'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
string|'")\\n\\n"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'options'
op|'.'
name|'__class__'
op|'.'
name|'zsh_extras'
op|'='
op|'['
string|"'*::subcmd:->subcmd'"
op|']'
newline|'\n'
name|'gen'
op|'='
name|'ArgumentsGenerator'
op|'('
name|'self'
op|'.'
name|'cmd_name'
op|','
name|'self'
op|'.'
name|'options'
op|','
name|'self'
op|'.'
name|'file'
op|')'
newline|'\n'
name|'gen'
op|'.'
name|'write'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
string|'"""if (( CURRENT == 1 )); then\n  _describe "%s" _zsh_subcmds_array && ret=0\nfi\n(( ret )) || return 0\n\nservice="$words[1]"\n\ncase $service in\\n"""'
op|'%'
op|'('
name|'self'
op|'.'
name|'subcmdLabel'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'plugins'
op|'='
name|'newplugin'
op|'.'
name|'getPlugins'
op|'('
name|'self'
op|'.'
name|'interface'
op|')'
newline|'\n'
name|'for'
name|'p'
name|'in'
name|'plugins'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
name|'p'
op|'.'
name|'tapname'
op|'+'
string|'")\\n"'
op|')'
newline|'\n'
name|'gen'
op|'='
name|'ArgumentsGenerator'
op|'('
name|'p'
op|'.'
name|'tapname'
op|','
name|'p'
op|'.'
name|'options'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'file'
op|')'
newline|'\n'
name|'gen'
op|'.'
name|'write'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
string|'";;\\n"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
string|'"*) _message \\"don\'t know how to"'
string|'" complete $service\\";;\\nesac"'
op|')'
newline|'\n'
nl|'\n'
DECL|class|MktapBuilder
dedent|''
dedent|''
name|'class'
name|'MktapBuilder'
op|'('
name|'SubcommandBuilder'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Builder for the mktap command\n    """'
newline|'\n'
DECL|variable|interface
name|'interface'
op|'='
name|'IServiceMaker'
newline|'\n'
DECL|variable|subcmdLabel
name|'subcmdLabel'
op|'='
string|"'tap to build'"
newline|'\n'
nl|'\n'
DECL|class|TwistdBuilder
dedent|''
name|'class'
name|'TwistdBuilder'
op|'('
name|'SubcommandBuilder'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Builder for the twistd command\n    """'
newline|'\n'
DECL|variable|interface
name|'interface'
op|'='
name|'IServiceMaker'
newline|'\n'
DECL|variable|subcmdLabel
name|'subcmdLabel'
op|'='
string|"'service to run'"
newline|'\n'
nl|'\n'
DECL|class|ArgumentsGenerator
dedent|''
name|'class'
name|'ArgumentsGenerator'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Generate a call to the zsh _arguments completion function\n    based on data in a usage.Options subclass\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'cmd_name'
op|','
name|'options'
op|','
name|'file'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @type cmd_name: C{str}\n        @param cmd_name: The name of the command\n\n        @type options: C{twisted.usage.Options}\n        @param options: The C{twisted.usage.Options} instance defined\n                        for this command\n\n        @type file: C{file}\n        @param file: The C{file} to write the completion function to\n        """'
newline|'\n'
name|'self'
op|'.'
name|'cmd_name'
op|'='
name|'cmd_name'
newline|'\n'
name|'self'
op|'.'
name|'options'
op|'='
name|'options'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'='
name|'file'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'altArgDescr'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'actionDescr'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'multiUse'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mutuallyExclusive'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'actions'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'extras'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'aCL'
op|'='
name|'reflect'
op|'.'
name|'accumulateClassList'
newline|'\n'
name|'aCD'
op|'='
name|'reflect'
op|'.'
name|'accumulateClassDict'
newline|'\n'
nl|'\n'
name|'aCD'
op|'('
name|'options'
op|'.'
name|'__class__'
op|','
string|"'zsh_altArgDescr'"
op|','
name|'self'
op|'.'
name|'altArgDescr'
op|')'
newline|'\n'
name|'aCD'
op|'('
name|'options'
op|'.'
name|'__class__'
op|','
string|"'zsh_actionDescr'"
op|','
name|'self'
op|'.'
name|'actionDescr'
op|')'
newline|'\n'
name|'aCL'
op|'('
name|'options'
op|'.'
name|'__class__'
op|','
string|"'zsh_multiUse'"
op|','
name|'self'
op|'.'
name|'multiUse'
op|')'
newline|'\n'
name|'aCL'
op|'('
name|'options'
op|'.'
name|'__class__'
op|','
string|"'zsh_mutuallyExclusive'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'mutuallyExclusive'
op|')'
newline|'\n'
name|'aCD'
op|'('
name|'options'
op|'.'
name|'__class__'
op|','
string|"'zsh_actions'"
op|','
name|'self'
op|'.'
name|'actions'
op|')'
newline|'\n'
name|'aCL'
op|'('
name|'options'
op|'.'
name|'__class__'
op|','
string|"'zsh_extras'"
op|','
name|'self'
op|'.'
name|'extras'
op|')'
newline|'\n'
nl|'\n'
name|'optFlags'
op|'='
op|'['
op|']'
newline|'\n'
name|'optParams'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'aCL'
op|'('
name|'options'
op|'.'
name|'__class__'
op|','
string|"'optFlags'"
op|','
name|'optFlags'
op|')'
newline|'\n'
name|'aCL'
op|'('
name|'options'
op|'.'
name|'__class__'
op|','
string|"'optParameters'"
op|','
name|'optParams'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
op|','
name|'optList'
name|'in'
name|'enumerate'
op|'('
name|'optFlags'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'optList'
op|')'
op|'!='
number|'3'
op|':'
newline|'\n'
indent|'                '
name|'optFlags'
op|'['
name|'i'
op|']'
op|'='
name|'util'
op|'.'
name|'padTo'
op|'('
number|'3'
op|','
name|'optList'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'i'
op|','
name|'optList'
name|'in'
name|'enumerate'
op|'('
name|'optParams'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'optList'
op|')'
op|'!='
number|'4'
op|':'
newline|'\n'
indent|'                '
name|'optParams'
op|'['
name|'i'
op|']'
op|'='
name|'util'
op|'.'
name|'padTo'
op|'('
number|'4'
op|','
name|'optList'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'optFlags'
op|'='
name|'optFlags'
newline|'\n'
name|'self'
op|'.'
name|'optParams'
op|'='
name|'optParams'
newline|'\n'
nl|'\n'
name|'optParams_d'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'optList'
name|'in'
name|'optParams'
op|':'
newline|'\n'
indent|'            '
name|'optParams_d'
op|'['
name|'optList'
op|'['
number|'0'
op|']'
op|']'
op|'='
name|'optList'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'optParams_d'
op|'='
name|'optParams_d'
newline|'\n'
nl|'\n'
name|'optFlags_d'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'optList'
name|'in'
name|'optFlags'
op|':'
newline|'\n'
indent|'            '
name|'optFlags_d'
op|'['
name|'optList'
op|'['
number|'0'
op|']'
op|']'
op|'='
name|'optList'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'optFlags_d'
op|'='
name|'optFlags_d'
newline|'\n'
nl|'\n'
name|'optAll_d'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'optAll_d'
op|'.'
name|'update'
op|'('
name|'optParams_d'
op|')'
newline|'\n'
name|'optAll_d'
op|'.'
name|'update'
op|'('
name|'optFlags_d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'optAll_d'
op|'='
name|'optAll_d'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'addAdditionalOptions'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# makes sure none of the zsh_ data structures reference option'
nl|'\n'
comment|"# names that don't exist. (great for catching typos)"
nl|'\n'
name|'self'
op|'.'
name|'verifyZshNames'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'excludes'
op|'='
name|'self'
op|'.'
name|'makeExcludesDict'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write the zsh completion code to the file given to __init__\n        @return: C{None}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'writeHeader'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'writeExtras'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'writeOptions'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'writeFooter'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeHeader
dedent|''
name|'def'
name|'writeHeader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This is the start of the code that calls _arguments\n        @return: C{None}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
string|'\'_arguments -s -A "-*" \\\\\\n\''
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeOptions
dedent|''
name|'def'
name|'writeOptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write out zsh code for each option in this command\n        @return: C{None}\n        """'
newline|'\n'
name|'optNames'
op|'='
name|'self'
op|'.'
name|'optAll_d'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'optNames'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'for'
name|'long'
name|'in'
name|'optNames'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'writeOpt'
op|'('
name|'long'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeExtras
dedent|''
dedent|''
name|'def'
name|'writeExtras'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write out the "extras" list. These are just passed verbatim to the\n        _arguments call\n        @return: C{None}\n        """'
newline|'\n'
name|'for'
name|'s'
name|'in'
name|'self'
op|'.'
name|'extras'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
name|'escape'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
string|"' \\\\\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeFooter
dedent|''
dedent|''
name|'def'
name|'writeFooter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write the last bit of code that finishes the call to _arguments\n        @return: C{None}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
string|"'&& return 0\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|verifyZshNames
dedent|''
name|'def'
name|'verifyZshNames'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Ensure that none of the names given in zsh_* variables are typoed\n        @return: C{None}\n        @raise ValueError: Raised if unknown option names have been given in\n                           zsh_* variables\n        """'
newline|'\n'
DECL|function|err
name|'def'
name|'err'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|'"Unknown option name \\"%s\\" found while\\n"'
string|'"examining zsh_ attributes for the %s command"'
op|'%'
op|'('
nl|'\n'
name|'name'
op|','
name|'self'
op|'.'
name|'cmd_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'name'
name|'in'
name|'itertools'
op|'.'
name|'chain'
op|'('
name|'self'
op|'.'
name|'altArgDescr'
op|','
name|'self'
op|'.'
name|'actionDescr'
op|','
nl|'\n'
name|'self'
op|'.'
name|'actions'
op|','
name|'self'
op|'.'
name|'multiUse'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'optAll_d'
op|':'
newline|'\n'
indent|'                '
name|'err'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'seq'
name|'in'
name|'self'
op|'.'
name|'mutuallyExclusive'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'name'
name|'in'
name|'seq'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'optAll_d'
op|':'
newline|'\n'
indent|'                    '
name|'err'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|excludeStr
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'excludeStr'
op|'('
name|'self'
op|','
name|'long'
op|','
name|'buildShort'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate an "exclusion string" for the given option\n\n        @type long: C{str}\n        @param long: The long name of the option\n                     (i.e. "verbose" instead of "v")\n\n        @type buildShort: C{bool}\n        @param buildShort: May be True to indicate we\'re building an excludes\n                           string for the short option that correspondes to\n                           the given long opt\n\n        @return: The generated C{str}\n        """'
newline|'\n'
name|'if'
name|'long'
name|'in'
name|'self'
op|'.'
name|'excludes'
op|':'
newline|'\n'
indent|'            '
name|'exclusions'
op|'='
name|'self'
op|'.'
name|'excludes'
op|'['
name|'long'
op|']'
op|'['
op|':'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'exclusions'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|"# if long isn't a multiUse option (can't appear on the cmd line more"
nl|'\n'
comment|"# than once), then we have to exclude the short option if we're"
nl|'\n'
comment|'# building for the long option, and vice versa.'
nl|'\n'
dedent|''
name|'if'
name|'long'
name|'not'
name|'in'
name|'self'
op|'.'
name|'multiUse'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'buildShort'
name|'is'
name|'False'
op|':'
newline|'\n'
indent|'                '
name|'short'
op|'='
name|'self'
op|'.'
name|'getShortOption'
op|'('
name|'long'
op|')'
newline|'\n'
name|'if'
name|'short'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'exclusions'
op|'.'
name|'append'
op|'('
name|'short'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'exclusions'
op|'.'
name|'append'
op|'('
name|'long'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'exclusions'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'strings'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'optName'
name|'in'
name|'exclusions'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'optName'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
comment|'# short option'
nl|'\n'
indent|'                '
name|'strings'
op|'.'
name|'append'
op|'('
string|'"-"'
op|'+'
name|'optName'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'strings'
op|'.'
name|'append'
op|'('
string|'"--"'
op|'+'
name|'optName'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
string|'"(%s)"'
op|'%'
string|'" "'
op|'.'
name|'join'
op|'('
name|'strings'
op|')'
newline|'\n'
nl|'\n'
DECL|member|makeExcludesDict
dedent|''
name|'def'
name|'makeExcludesDict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @return: A C{dict} that maps each option name appearing in\n        self.mutuallyExclusive to a list of those option names that\n        is it mutually exclusive with (can\'t appear on the cmd line with)\n        """'
newline|'\n'
nl|'\n'
comment|'#create a mapping of long option name -> single character name'
nl|'\n'
name|'longToShort'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'optList'
name|'in'
name|'itertools'
op|'.'
name|'chain'
op|'('
name|'self'
op|'.'
name|'optParams'
op|','
name|'self'
op|'.'
name|'optFlags'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'optList'
op|'['
number|'1'
op|']'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'longToShort'
op|'['
name|'optList'
op|'['
number|'0'
op|']'
op|']'
op|'='
name|'optList'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'excludes'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'lst'
name|'in'
name|'self'
op|'.'
name|'mutuallyExclusive'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'i'
op|','
name|'long'
name|'in'
name|'enumerate'
op|'('
name|'lst'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'tmp'
op|'='
op|'['
op|']'
newline|'\n'
name|'tmp'
op|'.'
name|'extend'
op|'('
name|'lst'
op|'['
op|':'
name|'i'
op|']'
op|')'
newline|'\n'
name|'tmp'
op|'.'
name|'extend'
op|'('
name|'lst'
op|'['
name|'i'
op|'+'
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'tmp'
op|'['
op|':'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'name'
name|'in'
name|'longToShort'
op|':'
newline|'\n'
indent|'                        '
name|'tmp'
op|'.'
name|'append'
op|'('
name|'longToShort'
op|'['
name|'name'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'long'
name|'in'
name|'excludes'
op|':'
newline|'\n'
indent|'                    '
name|'excludes'
op|'['
name|'long'
op|']'
op|'.'
name|'extend'
op|'('
name|'tmp'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'excludes'
op|'['
name|'long'
op|']'
op|'='
name|'tmp'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'excludes'
newline|'\n'
nl|'\n'
DECL|member|writeOpt
dedent|''
name|'def'
name|'writeOpt'
op|'('
name|'self'
op|','
name|'long'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write out the zsh code for the given argument. This is just part of the\n        one big call to _arguments\n\n        @type long: C{str}\n        @param long: The long name of the option\n                     (i.e. "verbose" instead of "v")\n\n        @return: C{None}\n        """'
newline|'\n'
name|'if'
name|'long'
name|'in'
name|'self'
op|'.'
name|'optFlags_d'
op|':'
newline|'\n'
comment|"# It's a flag option. Not one that takes a parameter."
nl|'\n'
indent|'            '
name|'long_field'
op|'='
string|'"--%s"'
op|'%'
name|'long'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'long_field'
op|'='
string|'"--%s="'
op|'%'
name|'long'
newline|'\n'
nl|'\n'
dedent|''
name|'short'
op|'='
name|'self'
op|'.'
name|'getShortOption'
op|'('
name|'long'
op|')'
newline|'\n'
name|'if'
name|'short'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'short_field'
op|'='
string|'"-"'
op|'+'
name|'short'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'short_field'
op|'='
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'descr'
op|'='
name|'self'
op|'.'
name|'getDescription'
op|'('
name|'long'
op|')'
newline|'\n'
name|'descr_field'
op|'='
name|'descr'
op|'.'
name|'replace'
op|'('
string|'"["'
op|','
string|'"\\["'
op|')'
newline|'\n'
name|'descr_field'
op|'='
name|'descr_field'
op|'.'
name|'replace'
op|'('
string|'"]"'
op|','
string|'"\\]"'
op|')'
newline|'\n'
name|'descr_field'
op|'='
string|"'[%s]'"
op|'%'
name|'descr_field'
newline|'\n'
nl|'\n'
name|'if'
name|'long'
name|'in'
name|'self'
op|'.'
name|'actionDescr'
op|':'
newline|'\n'
indent|'            '
name|'actionDescr_field'
op|'='
name|'self'
op|'.'
name|'actionDescr'
op|'['
name|'long'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'actionDescr_field'
op|'='
name|'descr'
newline|'\n'
nl|'\n'
dedent|''
name|'action_field'
op|'='
name|'self'
op|'.'
name|'getAction'
op|'('
name|'long'
op|')'
newline|'\n'
name|'if'
name|'long'
name|'in'
name|'self'
op|'.'
name|'multiUse'
op|':'
newline|'\n'
indent|'            '
name|'multi_field'
op|'='
string|"'*'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'multi_field'
op|'='
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'longExclusions_field'
op|'='
name|'self'
op|'.'
name|'excludeStr'
op|'('
name|'long'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'short'
op|':'
newline|'\n'
comment|'#we have to write an extra line for the short option if we have one'
nl|'\n'
indent|'            '
name|'shortExclusions_field'
op|'='
name|'self'
op|'.'
name|'excludeStr'
op|'('
name|'long'
op|','
name|'buildShort'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
name|'escape'
op|'('
string|"'%s%s%s%s%s'"
op|'%'
op|'('
name|'shortExclusions_field'
op|','
nl|'\n'
name|'multi_field'
op|','
name|'short_field'
op|','
name|'descr_field'
op|','
name|'action_field'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
string|"' \\\\\\n'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
name|'escape'
op|'('
string|"'%s%s%s%s%s'"
op|'%'
op|'('
name|'longExclusions_field'
op|','
nl|'\n'
name|'multi_field'
op|','
name|'long_field'
op|','
name|'descr_field'
op|','
name|'action_field'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
string|"' \\\\\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|getAction
dedent|''
name|'def'
name|'getAction'
op|'('
name|'self'
op|','
name|'long'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a zsh "action" string for the given argument\n        @return: C{str}\n        """'
newline|'\n'
name|'if'
name|'long'
name|'in'
name|'self'
op|'.'
name|'actions'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'callable'
op|'('
name|'self'
op|'.'
name|'actions'
op|'['
name|'long'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'action'
op|'='
name|'self'
op|'.'
name|'actions'
op|'['
name|'long'
op|']'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'action'
op|'='
name|'self'
op|'.'
name|'actions'
op|'['
name|'long'
op|']'
newline|'\n'
dedent|''
name|'return'
string|'":%s:%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'getActionDescr'
op|'('
name|'long'
op|')'
op|','
name|'action'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'long'
name|'in'
name|'self'
op|'.'
name|'optParams_d'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"':%s:_files'"
op|'%'
name|'self'
op|'.'
name|'getActionDescr'
op|'('
name|'long'
op|')'
newline|'\n'
dedent|''
name|'return'
string|"''"
newline|'\n'
nl|'\n'
DECL|member|getActionDescr
dedent|''
name|'def'
name|'getActionDescr'
op|'('
name|'self'
op|','
name|'long'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the description to be used when this argument is completed\n        @return: C{str}\n        """'
newline|'\n'
name|'if'
name|'long'
name|'in'
name|'self'
op|'.'
name|'actionDescr'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'actionDescr'
op|'['
name|'long'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'long'
newline|'\n'
nl|'\n'
DECL|member|getDescription
dedent|''
dedent|''
name|'def'
name|'getDescription'
op|'('
name|'self'
op|','
name|'long'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the description to be used for this argument\n        @return: C{str}\n        """'
newline|'\n'
comment|'#check if we have an alternate descr for this arg, and if so use it'
nl|'\n'
name|'if'
name|'long'
name|'in'
name|'self'
op|'.'
name|'altArgDescr'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'altArgDescr'
op|'['
name|'long'
op|']'
newline|'\n'
nl|'\n'
comment|'#otherwise we have to get it from the optFlags or optParams'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'descr'
op|'='
name|'self'
op|'.'
name|'optFlags_d'
op|'['
name|'long'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'descr'
op|'='
name|'self'
op|'.'
name|'optParams_d'
op|'['
name|'long'
op|']'
op|'['
number|'2'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'descr'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'descr'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'descr'
newline|'\n'
nl|'\n'
comment|'# lets try to get it from the opt_foo method doc string if there is one'
nl|'\n'
dedent|''
name|'longMangled'
op|'='
name|'long'
op|'.'
name|'replace'
op|'('
string|"'-'"
op|','
string|"'_'"
op|')'
comment|'# this is what t.p.usage does'
newline|'\n'
name|'obj'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'options'
op|','
string|"'opt_%s'"
op|'%'
name|'longMangled'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'obj'
op|':'
newline|'\n'
indent|'            '
name|'descr'
op|'='
name|'descrFromDoc'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'if'
name|'descr'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'descr'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'long'
comment|'# we really ought to have a good description to use'
newline|'\n'
nl|'\n'
DECL|member|getShortOption
dedent|''
name|'def'
name|'getShortOption'
op|'('
name|'self'
op|','
name|'long'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the short option letter or None\n        @return: C{str} or C{None}\n        """'
newline|'\n'
name|'optList'
op|'='
name|'self'
op|'.'
name|'optAll_d'
op|'['
name|'long'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'optList'
op|'['
number|'0'
op|']'
name|'or'
name|'None'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|addAdditionalOptions
dedent|''
dedent|''
name|'def'
name|'addAdditionalOptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add additional options to the optFlags and optParams lists.\n        These will be defined by \'opt_foo\' methods of the Options subclass\n        @return: C{None}\n        """'
newline|'\n'
name|'methodsDict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'reflect'
op|'.'
name|'accumulateMethods'
op|'('
name|'self'
op|'.'
name|'options'
op|','
name|'methodsDict'
op|','
string|"'opt_'"
op|')'
newline|'\n'
name|'methodToShort'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'methodsDict'
op|'.'
name|'copy'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'name'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'methodToShort'
op|'['
name|'methodsDict'
op|'['
name|'name'
op|']'
op|']'
op|'='
name|'name'
newline|'\n'
name|'del'
name|'methodsDict'
op|'['
name|'name'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'methodName'
op|','
name|'methodObj'
name|'in'
name|'methodsDict'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'long'
op|'='
name|'methodName'
op|'.'
name|'replace'
op|'('
string|"'_'"
op|','
string|"'-'"
op|')'
comment|'# t.p.usage does this'
newline|'\n'
comment|'# if this option is already defined by the optFlags or'
nl|'\n'
comment|"# optParameters then we don't want to override that data"
nl|'\n'
name|'if'
name|'long'
name|'in'
name|'self'
op|'.'
name|'optAll_d'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'descr'
op|'='
name|'self'
op|'.'
name|'getDescription'
op|'('
name|'long'
op|')'
newline|'\n'
nl|'\n'
name|'short'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'methodObj'
name|'in'
name|'methodToShort'
op|':'
newline|'\n'
indent|'                '
name|'short'
op|'='
name|'methodToShort'
op|'['
name|'methodObj'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'reqArgs'
op|'='
name|'methodObj'
op|'.'
name|'im_func'
op|'.'
name|'func_code'
op|'.'
name|'co_argcount'
newline|'\n'
name|'if'
name|'reqArgs'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'optParams'
op|'.'
name|'append'
op|'('
op|'['
name|'long'
op|','
name|'short'
op|','
name|'None'
op|','
name|'descr'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'optParams_d'
op|'['
name|'long'
op|']'
op|'='
op|'['
name|'short'
op|','
name|'None'
op|','
name|'descr'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'optAll_d'
op|'['
name|'long'
op|']'
op|'='
op|'['
name|'short'
op|','
name|'None'
op|','
name|'descr'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'reqArgs'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'optFlags'
op|'.'
name|'append'
op|'('
op|'['
name|'long'
op|','
name|'short'
op|','
name|'descr'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'optFlags_d'
op|'['
name|'long'
op|']'
op|'='
op|'['
name|'short'
op|','
name|'descr'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'optAll_d'
op|'['
name|'long'
op|']'
op|'='
op|'['
name|'short'
op|','
name|'None'
op|','
name|'descr'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'TypeError'
op|','
string|"'%r has wrong number '"
string|"'of arguments'"
op|'%'
op|'('
name|'methodObj'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|function|descrFromDoc
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'descrFromDoc'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Generate an appropriate description from docstring of the given object\n    """'
newline|'\n'
name|'if'
name|'obj'
op|'.'
name|'__doc__'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'lines'
op|'='
name|'obj'
op|'.'
name|'__doc__'
op|'.'
name|'split'
op|'('
string|'"\\n"'
op|')'
newline|'\n'
name|'descr'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'lines'
op|'['
number|'0'
op|']'
op|'!='
string|'""'
name|'and'
name|'not'
name|'lines'
op|'['
number|'0'
op|']'
op|'.'
name|'isspace'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'descr'
op|'='
name|'lines'
op|'['
number|'0'
op|']'
op|'.'
name|'lstrip'
op|'('
op|')'
newline|'\n'
comment|"# skip first line if it's blank"
nl|'\n'
dedent|''
name|'elif'
name|'lines'
op|'['
number|'1'
op|']'
op|'!='
string|'""'
name|'and'
name|'not'
name|'lines'
op|'['
number|'1'
op|']'
op|'.'
name|'isspace'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'descr'
op|'='
name|'lines'
op|'['
number|'1'
op|']'
op|'.'
name|'lstrip'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'descr'
newline|'\n'
nl|'\n'
DECL|function|firstLine
dedent|''
name|'def'
name|'firstLine'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return the first line of the given string\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'i'
op|'='
name|'s'
op|'.'
name|'index'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'return'
name|'s'
op|'['
op|':'
name|'i'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|function|escape
dedent|''
dedent|''
name|'def'
name|'escape'
op|'('
name|'str'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Shell escape the given string\n    """'
newline|'\n'
name|'return'
name|'commands'
op|'.'
name|'mkarg'
op|'('
name|'str'
op|')'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
DECL|function|siteFunctionsPath
dedent|''
name|'def'
name|'siteFunctionsPath'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return the path to the system-wide site-functions directory or\n    C{None} if it cannot be determined\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'='
string|'"zsh -f -c \'echo ${(M)fpath:#/*/site-functions}\'"'
newline|'\n'
name|'output'
op|'='
name|'commands'
op|'.'
name|'getoutput'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'output'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'output'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|variable|generateFor
dedent|''
dedent|''
name|'generateFor'
op|'='
op|'['
op|'('
string|"'conch'"
op|','
string|"'twisted.conch.scripts.conch'"
op|','
string|"'ClientOptions'"
op|')'
op|','
nl|'\n'
op|'('
string|"'mktap'"
op|','
string|"'twisted.scripts.mktap'"
op|','
string|"'FirstPassOptions'"
op|')'
op|','
nl|'\n'
op|'('
string|"'trial'"
op|','
string|"'twisted.scripts.trial'"
op|','
string|"'Options'"
op|')'
op|','
nl|'\n'
op|'('
string|"'cftp'"
op|','
string|"'twisted.conch.scripts.cftp'"
op|','
string|"'ClientOptions'"
op|')'
op|','
nl|'\n'
op|'('
string|"'tapconvert'"
op|','
string|"'twisted.scripts.tapconvert'"
op|','
string|"'ConvertOptions'"
op|')'
op|','
nl|'\n'
op|'('
string|"'twistd'"
op|','
string|"'twisted.scripts.twistd'"
op|','
string|"'ServerOptions'"
op|')'
op|','
nl|'\n'
op|'('
string|"'ckeygen'"
op|','
string|"'twisted.conch.scripts.ckeygen'"
op|','
string|"'GeneralOptions'"
op|')'
op|','
nl|'\n'
op|'('
string|"'lore'"
op|','
string|"'twisted.lore.scripts.lore'"
op|','
string|"'Options'"
op|')'
op|','
nl|'\n'
op|'('
string|"'pyhtmlizer'"
op|','
string|"'twisted.scripts.htmlizer'"
op|','
string|"'Options'"
op|')'
op|','
nl|'\n'
op|'('
string|"'tap2deb'"
op|','
string|"'twisted.scripts.tap2deb'"
op|','
string|"'MyOptions'"
op|')'
op|','
nl|'\n'
op|'('
string|"'tkconch'"
op|','
string|"'twisted.conch.scripts.tkconch'"
op|','
string|"'GeneralOptions'"
op|')'
op|','
nl|'\n'
op|'('
string|"'manhole'"
op|','
string|"'twisted.scripts.manhole'"
op|','
string|"'MyOptions'"
op|')'
op|','
nl|'\n'
op|'('
string|"'tap2rpm'"
op|','
string|"'twisted.scripts.tap2rpm'"
op|','
string|"'MyOptions'"
op|')'
op|','
nl|'\n'
op|'('
string|"'websetroot'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'tkmktap'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
comment|'# NOTE: the commands using None above are no longer included in Twisted.'
nl|'\n'
comment|"# However due to limitations in zsh's completion system the version of"
nl|'\n'
comment|"# _twisted_zsh_stub shipped with zsh contains a static list of Twisted's"
nl|'\n'
comment|'# commands. It will display errors if completion functions for these missing'
nl|'\n'
comment|'# commands are not found :( So we just include dummy (empty) completion'
nl|'\n'
comment|'# function files'
nl|'\n'
nl|'\n'
DECL|variable|specialBuilders
name|'specialBuilders'
op|'='
op|'{'
string|"'mktap'"
op|':'
name|'MktapBuilder'
op|','
nl|'\n'
string|"'twistd'"
op|':'
name|'TwistdBuilder'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|makeCompFunctionFiles
name|'def'
name|'makeCompFunctionFiles'
op|'('
name|'out_path'
op|','
name|'generateFor'
op|'='
name|'generateFor'
op|','
nl|'\n'
name|'specialBuilders'
op|'='
name|'specialBuilders'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Generate completion function files in the given directory for all\n    twisted commands\n\n    @type out_path: C{str}\n    @param out_path: The path to the directory to generate completion function\n                     fils in\n\n    @param generateFor: Sequence in the form of the \'generateFor\' top-level\n                        variable as defined in this module. Indicates what\n                        commands to build completion files for.\n\n    @param specialBuilders: Sequence in the form of the \'specialBuilders\'\n                            top-level variable as defined in this module.\n                            Indicates what commands require a special\n                            Builder class.\n\n    @return: C{list} of 2-tuples of the form (cmd_name, error) indicating\n             commands that we skipped building completions for. cmd_name\n             is the name of the skipped command, and error is the Exception\n             that was raised when trying to import the script module.\n             Commands are usually skipped due to a missing dependency,\n             e.g. Tkinter.\n    """'
newline|'\n'
name|'skips'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'cmd_name'
op|','
name|'module_name'
op|','
name|'class_name'
name|'in'
name|'generateFor'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'module_name'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# create empty file'
nl|'\n'
indent|'            '
name|'f'
op|'='
name|'_openCmdFile'
op|'('
name|'out_path'
op|','
name|'cmd_name'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'='
name|'__import__'
op|'('
string|"'%s'"
op|'%'
op|'('
name|'module_name'
op|','
op|')'
op|','
name|'None'
op|','
name|'None'
op|','
op|'('
name|'class_name'
op|')'
op|')'
newline|'\n'
name|'f'
op|'='
name|'_openCmdFile'
op|'('
name|'out_path'
op|','
name|'cmd_name'
op|')'
newline|'\n'
name|'o'
op|'='
name|'getattr'
op|'('
name|'m'
op|','
name|'class_name'
op|')'
op|'('
op|')'
comment|'# instantiate Options class'
newline|'\n'
nl|'\n'
name|'if'
name|'cmd_name'
name|'in'
name|'specialBuilders'
op|':'
newline|'\n'
indent|'                '
name|'b'
op|'='
name|'specialBuilders'
op|'['
name|'cmd_name'
op|']'
op|'('
name|'cmd_name'
op|','
name|'o'
op|','
name|'f'
op|')'
newline|'\n'
name|'b'
op|'.'
name|'write'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'b'
op|'='
name|'Builder'
op|'('
name|'cmd_name'
op|','
name|'o'
op|','
name|'f'
op|')'
newline|'\n'
name|'b'
op|'.'
name|'write'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'skips'
op|'.'
name|'append'
op|'('
op|'('
name|'cmd_name'
op|','
name|'e'
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'skips'
newline|'\n'
nl|'\n'
DECL|function|_openCmdFile
dedent|''
name|'def'
name|'_openCmdFile'
op|'('
name|'out_path'
op|','
name|'cmd_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'file'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'out_path'
op|','
string|"'_'"
op|'+'
name|'cmd_name'
op|')'
op|','
string|"'w'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|run
dedent|''
name|'def'
name|'run'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'options'
op|'='
name|'MyOptions'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'options'
op|'.'
name|'parseOptions'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'usage'
op|'.'
name|'UsageError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'print'
name|'e'
newline|'\n'
name|'print'
name|'options'
op|'.'
name|'getUsage'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'2'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'options'
op|'['
string|"'install'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'twisted'
newline|'\n'
name|'dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'twisted'
op|'.'
name|'__file__'
op|')'
op|','
string|'"python"'
op|','
string|'"zsh"'
op|')'
newline|'\n'
name|'skips'
op|'='
name|'makeCompFunctionFiles'
op|'('
name|'dir'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'skips'
op|'='
name|'makeCompFunctionFiles'
op|'('
name|'options'
op|'['
string|"'directory'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'cmd_name'
op|','
name|'error'
name|'in'
name|'skips'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
string|'"zshcomp: Skipped building for %s. Script module "'
string|'"could not be imported:\\n"'
op|'%'
op|'('
name|'cmd_name'
op|','
op|')'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
name|'str'
op|'('
name|'error'
op|')'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'skips'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'exit'
op|'('
number|'3'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'run'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.test.test_randbytes -*-'
nl|'\n'
comment|'# Copyright (c) 2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nCryptographically secure random implementation, with fallback on normal random.\n"""'
newline|'\n'
nl|'\n'
comment|'# System imports'
nl|'\n'
name|'import'
name|'warnings'
op|','
name|'os'
op|','
name|'random'
newline|'\n'
nl|'\n'
DECL|variable|getrandbits
name|'getrandbits'
op|'='
name|'getattr'
op|'('
name|'random'
op|','
string|"'getrandbits'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'Crypto'
op|'.'
name|'Util'
name|'import'
name|'randpool'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|randpool
indent|'    '
name|'randpool'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecureRandomNotAvailable
dedent|''
name|'class'
name|'SecureRandomNotAvailable'
op|'('
name|'RuntimeError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Exception raised when no secure random algorithm is found.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SourceNotAvailable
dedent|''
name|'class'
name|'SourceNotAvailable'
op|'('
name|'RuntimeError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Internal exception used when a specific random source is not available.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|RandomFactory
dedent|''
name|'class'
name|'RandomFactory'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Factory providing L{secureRandom} and L{insecureRandom} methods.\n\n    You shouldn\'t have to instantiate this class, use the module level\n    functions instead: it is an implementation detail and could be removed or\n    changed arbitrarily.\n\n    @ivar randomPool: pool of random data.\n    @type randomPool: C{randpool.RandomPool}\n\n    @cvar randomSources: list of file sources used when os.urandom is not\n        available.\n    @type randomSources: C{tuple}\n    """'
newline|'\n'
DECL|variable|randpool
name|'randpool'
op|'='
name|'randpool'
newline|'\n'
DECL|variable|randomPool
name|'randomPool'
op|'='
name|'None'
newline|'\n'
DECL|variable|randomSources
name|'randomSources'
op|'='
op|'('
string|"'/dev/urandom'"
op|','
op|')'
newline|'\n'
DECL|variable|getrandbits
name|'getrandbits'
op|'='
name|'getrandbits'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_osUrandom
name|'def'
name|'_osUrandom'
op|'('
name|'self'
op|','
name|'nbytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Wrapper around C{os.urandom} that cleanly manage its absence.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'os'
op|'.'
name|'urandom'
op|'('
name|'nbytes'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'AttributeError'
op|','
name|'NotImplementedError'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SourceNotAvailable'
op|'('
name|'e'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_fileUrandom
dedent|''
dedent|''
name|'def'
name|'_fileUrandom'
op|'('
name|'self'
op|','
name|'nbytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Wrapper around random file sources.\n\n        This method isn\'t meant to be call out of the class and could be\n        removed arbitrarily.\n        """'
newline|'\n'
name|'for'
name|'src'
name|'in'
name|'self'
op|'.'
name|'randomSources'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'='
name|'file'
op|'('
name|'src'
op|','
string|"'rb'"
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'IOError'
op|','
name|'OSError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'bytes'
op|'='
name|'f'
op|'.'
name|'read'
op|'('
name|'nbytes'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'bytes'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'SourceNotAvailable'
op|'('
string|'"File sources not available: %s"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'randomSources'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cryptoRandom
dedent|''
name|'def'
name|'_cryptoRandom'
op|'('
name|'self'
op|','
name|'nbytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Wrapper around Crypo random pool.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'randpool'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'randomPool'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'randomPool'
op|'='
name|'self'
op|'.'
name|'randpool'
op|'.'
name|'RandomPool'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'randomPool'
op|'.'
name|'stir'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'randomPool'
op|'.'
name|'get_bytes'
op|'('
name|'nbytes'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'SourceNotAvailable'
op|'('
string|'"PyCrypto isn\'t installed"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|secureRandom
dedent|''
name|'def'
name|'secureRandom'
op|'('
name|'self'
op|','
name|'nbytes'
op|','
name|'fallback'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a number of secure random bytes.\n\n        @param nbytes: number of bytes to generate.\n        @type nbytes: C{int}\n        @param fallback: Whether the function should fallback on non-secure\n            random or not.  Default to C{False}.\n        @type fallback: C{bool}\n\n        @return: a string of random bytes.\n        @rtype: C{str}\n        """'
newline|'\n'
name|'for'
name|'src'
name|'in'
op|'('
string|'"_osUrandom"'
op|','
string|'"_fileUrandom"'
op|','
string|'"_cryptoRandom"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'src'
op|')'
op|'('
name|'nbytes'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'SourceNotAvailable'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'fallback'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"Neither PyCrypto nor urandom available - "'
nl|'\n'
string|'"proceeding with non-cryptographically secure random source"'
op|','
nl|'\n'
name|'category'
op|'='
name|'RuntimeWarning'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'2'
nl|'\n'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'insecureRandom'
op|'('
name|'nbytes'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SecureRandomNotAvailable'
op|'('
string|'"No secure random source available"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_randBits
dedent|''
dedent|''
name|'def'
name|'_randBits'
op|'('
name|'self'
op|','
name|'nbytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Wrapper around C{os.getrandbits}.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'getrandbits'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'n'
op|'='
name|'self'
op|'.'
name|'getrandbits'
op|'('
name|'nbytes'
op|'*'
number|'8'
op|')'
newline|'\n'
name|'hexBytes'
op|'='
op|'('
string|'"%%0%dx"'
op|'%'
op|'('
name|'nbytes'
op|'*'
number|'2'
op|')'
op|')'
op|'%'
name|'n'
newline|'\n'
name|'return'
name|'hexBytes'
op|'.'
name|'decode'
op|'('
string|"'hex'"
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'SourceNotAvailable'
op|'('
string|'"random.getrandbits is not available"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_randRange
dedent|''
name|'def'
name|'_randRange'
op|'('
name|'self'
op|','
name|'nbytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Wrapper around C{random.randrange}.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|'""'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'nbytes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'bytes'
op|'+='
name|'chr'
op|'('
name|'random'
op|'.'
name|'randrange'
op|'('
number|'0'
op|','
number|'255'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'bytes'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|insecureRandom
dedent|''
name|'def'
name|'insecureRandom'
op|'('
name|'self'
op|','
name|'nbytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a number of non secure random bytes.\n\n        @param nbytes: number of bytes to generate.\n        @type nbytes: C{int}\n\n        @return: a string of random bytes.\n        @rtype: C{str}\n        """'
newline|'\n'
name|'for'
name|'src'
name|'in'
op|'('
string|'"_randBits"'
op|','
string|'"_randRange"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'src'
op|')'
op|'('
name|'nbytes'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'SourceNotAvailable'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|factory
dedent|''
dedent|''
dedent|''
dedent|''
name|'factory'
op|'='
name|'RandomFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|secureRandom
name|'secureRandom'
op|'='
name|'factory'
op|'.'
name|'secureRandom'
newline|'\n'
nl|'\n'
DECL|variable|insecureRandom
name|'insecureRandom'
op|'='
name|'factory'
op|'.'
name|'insecureRandom'
newline|'\n'
nl|'\n'
name|'del'
name|'factory'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
name|'__all__'
op|'='
op|'['
string|'"secureRandom"'
op|','
string|'"insecureRandom"'
op|','
string|'"SecureRandomNotAvailable"'
op|']'
newline|'\n'
nl|'\n'
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
comment|'#'
nl|'\n'
name|'import'
name|'errno'
op|','
name|'os'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'reflect'
op|','
name|'components'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'base'
op|','
name|'fdesc'
op|','
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'pair'
name|'import'
name|'ethernet'
op|','
name|'ip'
newline|'\n'
nl|'\n'
string|'"""\nYou need Eunuchs for twisted.pair.tuntap to work.\n\nEunuchs is a library containing the missing manly parts of\nUNIX API for Python.\n\nEunuchs is a library of Python extension that complement the standard\nlibraries in parts where full support for the UNIX API (or the Linux\nAPI) is missing.\n\nMost of the functions wrapped by Eunuchs are low-level, dirty, but\nabsolutely necessary functions for real systems programming. The aim is\nto have the functions added to mainstream Python libraries.\n\nCurrent list of functions included:\n\n - fchdir(2)\n - recvmsg(2) and sendmsg(2), including use of cmsg(3)\n - socketpair(2)\n - support for TUN/TAP virtual network interfaces\n\nEunuchs doesn\'t have a proper web home right now, but you can fetch\nthe source from http://ftp.debian.org/debian/pool/main/e/eunuch\n-- debian users can just use \'apt-get install python-eunuchs\'.\n\n"""'
newline|'\n'
name|'from'
name|'eunuchs'
op|'.'
name|'tuntap'
name|'import'
name|'opentuntap'
op|','
name|'TuntapPacketInfo'
op|','
name|'makePacketInfo'
newline|'\n'
nl|'\n'
DECL|class|TuntapPort
name|'class'
name|'TuntapPort'
op|'('
name|'base'
op|'.'
name|'BasePort'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Port that reads and writes packets from/to a TUN/TAP-device.\n\n    TODO: Share general start/stop etc implementation details with\n    twisted.internet.udp.Port.\n    """'
newline|'\n'
DECL|variable|maxThroughput
name|'maxThroughput'
op|'='
number|'256'
op|'*'
number|'1024'
comment|'# max bytes we read in one eventloop iteration'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'interface'
op|','
name|'proto'
op|','
name|'maxPacketSize'
op|'='
number|'8192'
op|','
name|'reactor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'components'
op|'.'
name|'implements'
op|'('
name|'proto'
op|','
name|'ethernet'
op|'.'
name|'IEthernetProtocol'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ethernet'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ethernet'
op|'='
number|'0'
newline|'\n'
name|'assert'
name|'components'
op|'.'
name|'implements'
op|'('
name|'proto'
op|','
name|'ip'
op|'.'
name|'IIPProtocol'
op|')'
comment|'# XXX: fix me'
newline|'\n'
dedent|''
name|'base'
op|'.'
name|'BasePort'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'interface'
op|'='
name|'interface'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'proto'
newline|'\n'
name|'self'
op|'.'
name|'maxPacketSize'
op|'='
name|'maxPacketSize'
newline|'\n'
name|'self'
op|'.'
name|'setLogStr'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"<%s on %s>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'__class__'
op|','
name|'self'
op|'.'
name|'interface'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startListening
dedent|''
name|'def'
name|'startListening'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create and bind my socket, and begin listening on it.\n\n        This is called on unserialization, and must be called after creating a\n        server to begin listening on the specified port.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_bindSocket'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_connectToProtocol'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_bindSocket
dedent|''
name|'def'
name|'_bindSocket'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"%s starting on %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'__class__'
op|','
name|'self'
op|'.'
name|'interface'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fd'
op|','
name|'name'
op|'='
name|'opentuntap'
op|'('
name|'name'
op|'='
name|'self'
op|'.'
name|'interface'
op|','
nl|'\n'
name|'ethernet'
op|'='
name|'self'
op|'.'
name|'ethernet'
op|','
nl|'\n'
name|'packetinfo'
op|'='
number|'0'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'CannotListenError'
op|','
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'interface'
op|','
name|'e'
op|')'
newline|'\n'
dedent|''
name|'fdesc'
op|'.'
name|'setNonBlocking'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'interface'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'fd'
op|'='
name|'fd'
newline|'\n'
nl|'\n'
DECL|member|fileno
dedent|''
name|'def'
name|'fileno'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'fd'
newline|'\n'
nl|'\n'
DECL|member|_connectToProtocol
dedent|''
name|'def'
name|'_connectToProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'startReading'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|doRead
dedent|''
name|'def'
name|'doRead'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when my socket is ready for reading."""'
newline|'\n'
name|'read'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'read'
op|'<'
name|'self'
op|'.'
name|'maxThroughput'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'data'
op|'='
name|'os'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'fd'
op|','
name|'self'
op|'.'
name|'maxPacketSize'
op|')'
newline|'\n'
name|'read'
op|'+='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
comment|'#                pkt = TuntapPacketInfo(data)'
nl|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'datagramReceived'
op|'('
name|'data'
op|','
nl|'\n'
name|'partial'
op|'='
number|'0'
comment|'# pkt.isPartial(),'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'.'
name|'errno'
name|'in'
op|'('
name|'errno'
op|'.'
name|'EWOULDBLOCK'
op|','
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'IOError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'.'
name|'errno'
name|'in'
op|'('
name|'errno'
op|'.'
name|'EAGAIN'
op|','
name|'errno'
op|'.'
name|'EINTR'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'deferr'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
dedent|''
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'datagram'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write a datagram."""'
newline|'\n'
comment|'#        header = makePacketInfo(0, 0)'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'os'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'fd'
op|','
name|'datagram'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EINTR'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'write'
op|'('
name|'datagram'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EMSGSIZE'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'error'
op|'.'
name|'MessageLengthError'
op|','
string|'"message too long"'
newline|'\n'
dedent|''
name|'elif'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ECONNREFUSED'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'error'
op|'.'
name|'ConnectionRefusedError'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
dedent|''
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'seq'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|'""'
op|'.'
name|'join'
op|'('
name|'seq'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stop accepting connections on this port.\n\n        This will shut down my socket and call self.connectionLost().\n        """'
newline|'\n'
name|'self'
op|'.'
name|'stopReading'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'connected'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'connectionLost'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|stopListening
dedent|''
dedent|''
name|'stopListening'
op|'='
name|'loseConnection'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cleans up my socket.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'(Tuntap %s Closed)'"
op|'%'
name|'self'
op|'.'
name|'interface'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'BasePort'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"protocol"'
op|')'
op|':'
newline|'\n'
comment|"# we won't have attribute in ConnectedPort, in cases"
nl|'\n'
comment|'# where there was an error in connection process'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'doStop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connected'
op|'='
number|'0'
newline|'\n'
name|'os'
op|'.'
name|'close'
op|'('
name|'self'
op|'.'
name|'fd'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'fd'
newline|'\n'
nl|'\n'
DECL|member|setLogStr
dedent|''
name|'def'
name|'setLogStr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'logstr'
op|'='
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'__class__'
op|')'
op|'+'
string|'" (TUNTAP)"'
newline|'\n'
nl|'\n'
DECL|member|logPrefix
dedent|''
name|'def'
name|'logPrefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the name of my class, to prefix log entries with.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'logstr'
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a tuple of (\'TUNTAP\', interface), indicating\n        the servers address\n        """'
newline|'\n'
name|'return'
op|'('
string|"'TUNTAP'"
op|','
op|')'
op|'+'
name|'self'
op|'.'
name|'interface'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_checkers -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nProvide L{ICredentialsChecker} implementations to be used in Conch protocols.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'base64'
op|','
name|'binascii'
op|','
name|'errno'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pwd'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|pwd
indent|'    '
name|'pwd'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'crypt'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# get this from http://www.twistedmatrix.com/users/z3p/files/pyshadow-0.2.tar.gz'
nl|'\n'
indent|'    '
name|'import'
name|'shadow'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
DECL|variable|shadow
indent|'    '
name|'shadow'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'pamauth'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|pamauth
indent|'    '
name|'pamauth'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'providedBy'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
name|'import'
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
name|'import'
name|'keys'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'checkers'
name|'import'
name|'ICredentialsChecker'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'IUsernamePassword'
op|','
name|'ISSHPrivateKey'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'error'
name|'import'
name|'UnauthorizedLogin'
op|','
name|'UnhandledCredentials'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
op|','
name|'reflect'
op|','
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'runAsEffectiveUser'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|verifyCryptedPassword
name|'def'
name|'verifyCryptedPassword'
op|'('
name|'crypted'
op|','
name|'pw'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'crypted'
op|'['
number|'0'
op|']'
op|'=='
string|"'$'"
op|':'
comment|'# md5_crypt encrypted'
newline|'\n'
indent|'        '
name|'salt'
op|'='
string|"'$1$'"
op|'+'
name|'crypted'
op|'.'
name|'split'
op|'('
string|"'$'"
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'salt'
op|'='
name|'crypted'
op|'['
op|':'
number|'2'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'crypt'
op|'.'
name|'crypt'
op|'('
name|'pw'
op|','
name|'salt'
op|')'
op|'=='
name|'crypted'
newline|'\n'
nl|'\n'
DECL|class|UNIXPasswordDatabase
dedent|''
name|'class'
name|'UNIXPasswordDatabase'
op|':'
newline|'\n'
DECL|variable|credentialInterfaces
indent|'    '
name|'credentialInterfaces'
op|'='
name|'IUsernamePassword'
op|','
newline|'\n'
name|'implements'
op|'('
name|'ICredentialsChecker'
op|')'
newline|'\n'
nl|'\n'
DECL|member|requestAvatarId
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'pwd'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'cryptedPass'
op|'='
name|'pwd'
op|'.'
name|'getpwnam'
op|'('
name|'credentials'
op|'.'
name|'username'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'UnauthorizedLogin'
op|'('
string|'"invalid username"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'cryptedPass'
name|'not'
name|'in'
op|'['
string|"'*'"
op|','
string|"'x'"
op|']'
name|'and'
name|'verifyCryptedPassword'
op|'('
name|'cryptedPass'
op|','
name|'credentials'
op|'.'
name|'password'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'credentials'
op|'.'
name|'username'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'shadow'
op|':'
newline|'\n'
indent|'            '
name|'gid'
op|'='
name|'os'
op|'.'
name|'getegid'
op|'('
op|')'
newline|'\n'
name|'uid'
op|'='
name|'os'
op|'.'
name|'geteuid'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'setegid'
op|'('
number|'0'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'seteuid'
op|'('
number|'0'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'shadowPass'
op|'='
name|'shadow'
op|'.'
name|'getspnam'
op|'('
name|'credentials'
op|'.'
name|'username'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'setegid'
op|'('
name|'gid'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'seteuid'
op|'('
name|'uid'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'UnauthorizedLogin'
op|'('
string|'"invalid username"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'os'
op|'.'
name|'setegid'
op|'('
name|'gid'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'seteuid'
op|'('
name|'uid'
op|')'
newline|'\n'
name|'if'
name|'verifyCryptedPassword'
op|'('
name|'shadowPass'
op|','
name|'credentials'
op|'.'
name|'password'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'credentials'
op|'.'
name|'username'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'UnauthorizedLogin'
op|'('
string|'"invalid password"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'UnauthorizedLogin'
op|'('
string|'"unable to verify password"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SSHPublicKeyDatabase
dedent|''
dedent|''
name|'class'
name|'SSHPublicKeyDatabase'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Checker that authenticates SSH public keys, based on public keys listed in\n    authorized_keys and authorized_keys2 files in user .ssh/ directories.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|credentialInterfaces
name|'credentialInterfaces'
op|'='
name|'ISSHPrivateKey'
op|','
newline|'\n'
name|'implements'
op|'('
name|'ICredentialsChecker'
op|')'
newline|'\n'
nl|'\n'
DECL|member|requestAvatarId
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'checkKey'
op|','
name|'credentials'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbRequestAvatarId'
op|','
name|'credentials'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebRequestAvatarId'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_cbRequestAvatarId
dedent|''
name|'def'
name|'_cbRequestAvatarId'
op|'('
name|'self'
op|','
name|'validKey'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check whether the credentials themselves are valid, now that we know\n        if the key matches the user.\n\n        @param validKey: A boolean indicating whether or not the public key\n            matches a key in the user\'s authorized_keys file.\n\n        @param credentials: The credentials offered by the user.\n        @type credentials: L{ISSHPrivateKey} provider\n\n        @raise UnauthorizedLogin: (as a failure) if the key does not match the\n            user in C{credentials}. Also raised if the user provides an invalid\n            signature.\n\n        @raise ValidPublicKey: (as a failure) if the key matches the user but\n            the credentials do not include a signature. See\n            L{error.ValidPublicKey} for more information.\n\n        @return: The user\'s username, if authentication was successful.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'validKey'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'UnauthorizedLogin'
op|'('
string|'"invalid key"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'credentials'
op|'.'
name|'signature'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ValidPublicKey'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'pubKey'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'credentials'
op|'.'
name|'blob'
op|')'
newline|'\n'
name|'if'
name|'pubKey'
op|'.'
name|'verify'
op|'('
name|'credentials'
op|'.'
name|'signature'
op|','
name|'credentials'
op|'.'
name|'sigData'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'credentials'
op|'.'
name|'username'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
comment|'# any error should be treated as a failed login'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
name|'return'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'UnauthorizedLogin'
op|'('
string|"'error while verifying key'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'UnauthorizedLogin'
op|'('
string|'"unable to verify key"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getAuthorizedKeysFiles
dedent|''
name|'def'
name|'getAuthorizedKeysFiles'
op|'('
name|'self'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a list of L{FilePath} instances for I{authorized_keys} files\n        which might contain information about authorized keys for the given\n        credentials.\n\n        On OpenSSH servers, the default location of the file containing the\n        list of authorized public keys is\n        U{$HOME/.ssh/authorized_keys<http://www.openbsd.org/cgi-bin/man.cgi?query=sshd_config>}.\n\n        I{$HOME/.ssh/authorized_keys2} is also returned, though it has been\n        U{deprecated by OpenSSH since\n        2001<http://marc.info/?m=100508718416162>}.\n\n        @return: A list of L{FilePath} instances to files with the authorized keys.\n        """'
newline|'\n'
name|'pwent'
op|'='
name|'pwd'
op|'.'
name|'getpwnam'
op|'('
name|'credentials'
op|'.'
name|'username'
op|')'
newline|'\n'
name|'root'
op|'='
name|'FilePath'
op|'('
name|'pwent'
op|'.'
name|'pw_dir'
op|')'
op|'.'
name|'child'
op|'('
string|"'.ssh'"
op|')'
newline|'\n'
name|'files'
op|'='
op|'['
string|"'authorized_keys'"
op|','
string|"'authorized_keys2'"
op|']'
newline|'\n'
name|'return'
op|'['
name|'root'
op|'.'
name|'child'
op|'('
name|'f'
op|')'
name|'for'
name|'f'
name|'in'
name|'files'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|checkKey
dedent|''
name|'def'
name|'checkKey'
op|'('
name|'self'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve files containing authorized keys and check against user\n        credentials.\n        """'
newline|'\n'
name|'uid'
op|','
name|'gid'
op|'='
name|'os'
op|'.'
name|'geteuid'
op|'('
op|')'
op|','
name|'os'
op|'.'
name|'getegid'
op|'('
op|')'
newline|'\n'
name|'ouid'
op|','
name|'ogid'
op|'='
name|'pwd'
op|'.'
name|'getpwnam'
op|'('
name|'credentials'
op|'.'
name|'username'
op|')'
op|'['
number|'2'
op|':'
number|'4'
op|']'
newline|'\n'
name|'for'
name|'filepath'
name|'in'
name|'self'
op|'.'
name|'getAuthorizedKeysFiles'
op|'('
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'filepath'
op|'.'
name|'exists'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'lines'
op|'='
name|'filepath'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EACCES'
op|':'
newline|'\n'
indent|'                    '
name|'lines'
op|'='
name|'runAsEffectiveUser'
op|'('
name|'ouid'
op|','
name|'ogid'
op|','
name|'filepath'
op|'.'
name|'open'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'l'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'                '
name|'l2'
op|'='
name|'l'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'l2'
op|')'
op|'<'
number|'2'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'base64'
op|'.'
name|'decodestring'
op|'('
name|'l2'
op|'['
number|'1'
op|']'
op|')'
op|'=='
name|'credentials'
op|'.'
name|'blob'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'binascii'
op|'.'
name|'Error'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_ebRequestAvatarId
dedent|''
name|'def'
name|'_ebRequestAvatarId'
op|'('
name|'self'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'f'
op|'.'
name|'check'
op|'('
name|'UnauthorizedLogin'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
name|'f'
op|')'
newline|'\n'
name|'return'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'UnauthorizedLogin'
op|'('
string|'"unable to get avatar id"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'f'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SSHProtocolChecker
dedent|''
dedent|''
name|'class'
name|'SSHProtocolChecker'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    SSHProtocolChecker is a checker that requires multiple authentications\n    to succeed.  To add a checker, call my registerChecker method with\n    the checker and the interface.\n\n    After each successful authenticate, I call my areDone method with the\n    avatar id.  To get a list of the successful credentials for an avatar id,\n    use C{SSHProcotolChecker.successfulCredentials[avatarId]}.  If L{areDone}\n    returns True, the authentication has succeeded.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'ICredentialsChecker'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'checkers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'successfulCredentials'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_credentialInterfaces
dedent|''
name|'def'
name|'get_credentialInterfaces'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'checkers'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|credentialInterfaces
dedent|''
name|'credentialInterfaces'
op|'='
name|'property'
op|'('
name|'get_credentialInterfaces'
op|')'
newline|'\n'
nl|'\n'
DECL|member|registerChecker
name|'def'
name|'registerChecker'
op|'('
name|'self'
op|','
name|'checker'
op|','
op|'*'
name|'credentialInterfaces'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'credentialInterfaces'
op|':'
newline|'\n'
indent|'            '
name|'credentialInterfaces'
op|'='
name|'checker'
op|'.'
name|'credentialInterfaces'
newline|'\n'
dedent|''
name|'for'
name|'credentialInterface'
name|'in'
name|'credentialInterfaces'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'checkers'
op|'['
name|'credentialInterface'
op|']'
op|'='
name|'checker'
newline|'\n'
nl|'\n'
DECL|member|requestAvatarId
dedent|''
dedent|''
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Part of the L{ICredentialsChecker} interface.  Called by a portal with\n        some credentials to check if they\'ll authenticate a user.  We check the\n        interfaces that the credentials provide against our list of acceptable\n        checkers.  If one of them matches, we ask that checker to verify the\n        credentials.  If they\'re valid, we call our L{_cbGoodAuthentication}\n        method to continue.\n\n        @param credentials: the credentials the L{Portal} wants us to verify\n        """'
newline|'\n'
name|'ifac'
op|'='
name|'providedBy'
op|'('
name|'credentials'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'ifac'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'='
name|'self'
op|'.'
name|'checkers'
op|'.'
name|'get'
op|'('
name|'i'
op|')'
newline|'\n'
name|'if'
name|'c'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'c'
op|'.'
name|'requestAvatarId'
op|','
name|'credentials'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbGoodAuthentication'
op|','
nl|'\n'
name|'credentials'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'UnhandledCredentials'
op|'('
string|'"No checker for %s"'
op|'%'
string|"', '"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'reflect'
op|'.'
name|'qual'
op|','
name|'ifac'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbGoodAuthentication
dedent|''
name|'def'
name|'_cbGoodAuthentication'
op|'('
name|'self'
op|','
name|'avatarId'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called if a checker has verified the credentials.  We call our\n        L{areDone} method to see if the whole of the successful authentications\n        are enough.  If they are, we return the avatar ID returned by the first\n        checker.\n        """'
newline|'\n'
name|'if'
name|'avatarId'
name|'not'
name|'in'
name|'self'
op|'.'
name|'successfulCredentials'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'successfulCredentials'
op|'['
name|'avatarId'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'successfulCredentials'
op|'['
name|'avatarId'
op|']'
op|'.'
name|'append'
op|'('
name|'credentials'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'areDone'
op|'('
name|'avatarId'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'successfulCredentials'
op|'['
name|'avatarId'
op|']'
newline|'\n'
name|'return'
name|'avatarId'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'NotEnoughAuthentication'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|areDone
dedent|''
dedent|''
name|'def'
name|'areDone'
op|'('
name|'self'
op|','
name|'avatarId'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override to determine if the authentication is finished for a given\n        avatarId.\n\n        @param avatarId: the avatar returned by the first checker.  For\n            this checker to function correctly, all the checkers must\n            return the same avatar ID.\n        """'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

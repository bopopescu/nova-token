begin_unit
string|'"""\nYou don\'t really want to use this module. Try insults.py instead.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
newline|'\n'
nl|'\n'
DECL|class|InsultsClient
name|'class'
name|'InsultsClient'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|escapeTimeout
indent|'    '
name|'escapeTimeout'
op|'='
number|'0.2'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'width'
op|'='
name|'self'
op|'.'
name|'height'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'xpos'
op|'='
name|'self'
op|'.'
name|'ypos'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'commandQueue'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'inEscape'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|member|setSize
dedent|''
name|'def'
name|'setSize'
op|'('
name|'self'
op|','
name|'width'
op|','
name|'height'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'call'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'width'
op|':'
newline|'\n'
indent|'            '
name|'call'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'width'
op|'='
name|'width'
newline|'\n'
name|'self'
op|'.'
name|'height'
op|'='
name|'height'
newline|'\n'
name|'if'
name|'call'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'windowSizeChanged'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'for'
name|'ch'
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ch'
op|'=='
string|"'\\x1b'"
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'inEscape'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'keyReceived'
op|'('
name|'ch'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inEscape'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'inEscape'
op|'='
name|'ch'
newline|'\n'
name|'self'
op|'.'
name|'escapeCall'
op|'='
name|'reactor'
op|'.'
name|'callLater'
op|'('
name|'self'
op|'.'
name|'escapeTimeout'
op|','
nl|'\n'
name|'self'
op|'.'
name|'endEscape'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'ch'
name|'in'
string|"'ABCD'"
name|'and'
name|'self'
op|'.'
name|'inEscape'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'inEscape'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'escapeCall'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
name|'if'
name|'ch'
op|'=='
string|"'A'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'keyReceived'
op|'('
string|"'<Up>'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'ch'
op|'=='
string|"'B'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'keyReceived'
op|'('
string|"'<Down>'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'ch'
op|'=='
string|"'C'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'keyReceived'
op|'('
string|"'<Right>'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'ch'
op|'=='
string|"'D'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'keyReceived'
op|'('
string|"'<Left>'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'inEscape'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'inEscape'
op|'+='
name|'ch'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'keyReceived'
op|'('
name|'ch'
op|')'
newline|'\n'
nl|'\n'
DECL|member|endEscape
dedent|''
dedent|''
dedent|''
name|'def'
name|'endEscape'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ch'
op|'='
name|'self'
op|'.'
name|'inEscape'
newline|'\n'
name|'self'
op|'.'
name|'inEscape'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'keyReceived'
op|'('
name|'ch'
op|')'
newline|'\n'
nl|'\n'
DECL|member|initScreen
dedent|''
name|'def'
name|'initScreen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|"'\\x1b=\\x1b[?1h'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|gotoXY
dedent|''
name|'def'
name|'gotoXY'
op|'('
name|'self'
op|','
name|'x'
op|','
name|'y'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Go to a position on the screen.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'xpos'
op|'='
name|'x'
newline|'\n'
name|'self'
op|'.'
name|'ypos'
op|'='
name|'y'
newline|'\n'
name|'self'
op|'.'
name|'commandQueue'
op|'.'
name|'append'
op|'('
op|'('
string|"'gotoxy'"
op|','
name|'x'
op|','
name|'y'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeCh
dedent|''
name|'def'
name|'writeCh'
op|'('
name|'self'
op|','
name|'ch'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write a character to the screen.  If we\'re at the end of the row,\n        ignore the write.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'xpos'
op|'<'
name|'self'
op|'.'
name|'width'
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'commandQueue'
op|'.'
name|'append'
op|'('
op|'('
string|"'write'"
op|','
name|'ch'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xpos'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|writeStr
dedent|''
dedent|''
name|'def'
name|'writeStr'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write a string to the screen.  This does not wrap a the edge of the\n        screen, and stops at \\\\r and \\\\n.\n        """'
newline|'\n'
name|'s'
op|'='
name|'s'
op|'['
op|':'
name|'self'
op|'.'
name|'width'
op|'-'
name|'self'
op|'.'
name|'xpos'
op|']'
newline|'\n'
name|'if'
string|"'\\n'"
name|'in'
name|'s'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'='
name|'s'
op|'['
op|':'
name|'s'
op|'.'
name|'find'
op|'('
string|"'\\n'"
op|')'
op|']'
newline|'\n'
dedent|''
name|'if'
string|"'\\r'"
name|'in'
name|'s'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'='
name|'s'
op|'['
op|':'
name|'s'
op|'.'
name|'find'
op|'('
string|"'\\r'"
op|')'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'commandQueue'
op|'.'
name|'append'
op|'('
op|'('
string|"'write'"
op|','
name|'s'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xpos'
op|'+='
name|'len'
op|'('
name|'s'
op|')'
newline|'\n'
nl|'\n'
DECL|member|eraseToLine
dedent|''
name|'def'
name|'eraseToLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Erase from the current position to the end of the line.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'commandQueue'
op|'.'
name|'append'
op|'('
op|'('
string|"'eraseeol'"
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|eraseToScreen
dedent|''
name|'def'
name|'eraseToScreen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Erase from the current position to the end of the screen.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'commandQueue'
op|'.'
name|'append'
op|'('
op|'('
string|"'eraseeos'"
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clearScreen
dedent|''
name|'def'
name|'clearScreen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Clear the screen, and return the cursor to 0, 0.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'commandQueue'
op|'='
op|'['
op|'('
string|"'cls'"
op|','
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'xpos'
op|'='
name|'self'
op|'.'
name|'ypos'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|setAttributes
dedent|''
name|'def'
name|'setAttributes'
op|'('
name|'self'
op|','
op|'*'
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the attributes for drawing on the screen.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'commandQueue'
op|'.'
name|'append'
op|'('
op|'('
string|"'attributes'"
op|','
name|'attrs'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh
dedent|''
name|'def'
name|'refresh'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Redraw the screen.\n        """'
newline|'\n'
name|'redraw'
op|'='
string|"''"
newline|'\n'
name|'for'
name|'command'
name|'in'
name|'self'
op|'.'
name|'commandQueue'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'command'
op|'['
number|'0'
op|']'
op|'=='
string|"'gotoxy'"
op|':'
newline|'\n'
indent|'                '
name|'redraw'
op|'+='
string|"'\\x1b[%i;%iH'"
op|'%'
op|'('
name|'command'
op|'['
number|'2'
op|']'
op|'+'
number|'1'
op|','
name|'command'
op|'['
number|'1'
op|']'
op|'+'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'command'
op|'['
number|'0'
op|']'
op|'=='
string|"'write'"
op|':'
newline|'\n'
indent|'                '
name|'redraw'
op|'+='
name|'command'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'command'
op|'['
number|'0'
op|']'
op|'=='
string|"'eraseeol'"
op|':'
newline|'\n'
indent|'                '
name|'redraw'
op|'+='
string|"'\\x1b[0K'"
newline|'\n'
dedent|''
name|'elif'
name|'command'
op|'['
number|'0'
op|']'
op|'=='
string|"'eraseeos'"
op|':'
newline|'\n'
indent|'                '
name|'redraw'
op|'+='
string|"'\\x1b[OJ'"
newline|'\n'
dedent|''
name|'elif'
name|'command'
op|'['
number|'0'
op|']'
op|'=='
string|"'cls'"
op|':'
newline|'\n'
indent|'                '
name|'redraw'
op|'+='
string|"'\\x1b[H\\x1b[J'"
newline|'\n'
dedent|''
name|'elif'
name|'command'
op|'['
number|'0'
op|']'
op|'=='
string|"'attributes'"
op|':'
newline|'\n'
indent|'                '
name|'redraw'
op|'+='
string|"'\\x1b[%sm'"
op|'%'
string|"';'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'command'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'print'
name|'command'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'commandQueue'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'redraw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|windowSizeChanged
dedent|''
name|'def'
name|'windowSizeChanged'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when the size of the window changes.\n        Might want to redraw the screen here, or something.\n        """'
newline|'\n'
nl|'\n'
DECL|member|keyReceived
dedent|''
name|'def'
name|'keyReceived'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when the user hits a key.\n        """'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

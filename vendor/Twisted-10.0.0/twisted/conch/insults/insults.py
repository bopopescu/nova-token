begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_insults -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nVT102 and VT220 terminal manipulation.\n\n@author: Jp Calderone\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'Interface'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
op|','
name|'defer'
op|','
name|'interfaces'
name|'as'
name|'iinternet'
newline|'\n'
nl|'\n'
DECL|class|ITerminalProtocol
name|'class'
name|'ITerminalProtocol'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
DECL|member|makeConnection
indent|'    '
name|'def'
name|'makeConnection'
op|'('
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called with an L{ITerminalTransport} when a connection is established.\n        """'
newline|'\n'
nl|'\n'
DECL|member|keystrokeReceived
dedent|''
name|'def'
name|'keystrokeReceived'
op|'('
name|'keyID'
op|','
name|'modifier'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A keystroke was received.\n\n        Each keystroke corresponds to one invocation of this method.\n        keyID is a string identifier for that key.  Printable characters\n        are represented by themselves.  Control keys, such as arrows and\n        function keys, are represented with symbolic constants on\n        L{ServerProtocol}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|terminalSize
dedent|''
name|'def'
name|'terminalSize'
op|'('
name|'width'
op|','
name|'height'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called to indicate the size of the terminal.\n\n        A terminal of 80x24 should be assumed if this method is not\n        called.  This method might not be called for real terminals.\n        """'
newline|'\n'
nl|'\n'
DECL|member|unhandledControlSequence
dedent|''
name|'def'
name|'unhandledControlSequence'
op|'('
name|'seq'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when an unsupported control sequence is received.\n\n        @type seq: C{str}\n        @param seq: The whole control sequence which could not be interpreted.\n        """'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when the connection has been lost.\n\n        reason is a Failure describing why.\n        """'
newline|'\n'
nl|'\n'
DECL|class|TerminalProtocol
dedent|''
dedent|''
name|'class'
name|'TerminalProtocol'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'ITerminalProtocol'
op|')'
newline|'\n'
nl|'\n'
DECL|member|makeConnection
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'terminal'
op|')'
op|':'
newline|'\n'
comment|'# assert ITerminalTransport.providedBy(transport), "TerminalProtocol.makeConnection must be passed an ITerminalTransport implementor"'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'terminal'
op|'='
name|'terminal'
newline|'\n'
name|'self'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called after a connection has been established.\n        """'
newline|'\n'
nl|'\n'
DECL|member|keystrokeReceived
dedent|''
name|'def'
name|'keystrokeReceived'
op|'('
name|'self'
op|','
name|'keyID'
op|','
name|'modifier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|terminalSize
dedent|''
name|'def'
name|'terminalSize'
op|'('
name|'self'
op|','
name|'width'
op|','
name|'height'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unhandledControlSequence
dedent|''
name|'def'
name|'unhandledControlSequence'
op|'('
name|'self'
op|','
name|'seq'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|ITerminalTransport
dedent|''
dedent|''
name|'class'
name|'ITerminalTransport'
op|'('
name|'iinternet'
op|'.'
name|'ITransport'
op|')'
op|':'
newline|'\n'
DECL|member|cursorUp
indent|'    '
name|'def'
name|'cursorUp'
op|'('
name|'n'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Move the cursor up n lines.\n        """'
newline|'\n'
nl|'\n'
DECL|member|cursorDown
dedent|''
name|'def'
name|'cursorDown'
op|'('
name|'n'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Move the cursor down n lines.\n        """'
newline|'\n'
nl|'\n'
DECL|member|cursorForward
dedent|''
name|'def'
name|'cursorForward'
op|'('
name|'n'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Move the cursor right n columns.\n        """'
newline|'\n'
nl|'\n'
DECL|member|cursorBackward
dedent|''
name|'def'
name|'cursorBackward'
op|'('
name|'n'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Move the cursor left n columns.\n        """'
newline|'\n'
nl|'\n'
DECL|member|cursorPosition
dedent|''
name|'def'
name|'cursorPosition'
op|'('
name|'column'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Move the cursor to the given line and column.\n        """'
newline|'\n'
nl|'\n'
DECL|member|cursorHome
dedent|''
name|'def'
name|'cursorHome'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Move the cursor home.\n        """'
newline|'\n'
nl|'\n'
DECL|member|index
dedent|''
name|'def'
name|'index'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Move the cursor down one line, performing scrolling if necessary.\n        """'
newline|'\n'
nl|'\n'
DECL|member|reverseIndex
dedent|''
name|'def'
name|'reverseIndex'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Move the cursor up one line, performing scrolling if necessary.\n        """'
newline|'\n'
nl|'\n'
DECL|member|nextLine
dedent|''
name|'def'
name|'nextLine'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Move the cursor to the first position on the next line, performing scrolling if necessary.\n        """'
newline|'\n'
nl|'\n'
DECL|member|saveCursor
dedent|''
name|'def'
name|'saveCursor'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Save the cursor position, character attribute, character set, and origin mode selection.\n        """'
newline|'\n'
nl|'\n'
DECL|member|restoreCursor
dedent|''
name|'def'
name|'restoreCursor'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Restore the previously saved cursor position, character attribute, character set, and origin mode selection.\n\n        If no cursor state was previously saved, move the cursor to the home position.\n        """'
newline|'\n'
nl|'\n'
DECL|member|setModes
dedent|''
name|'def'
name|'setModes'
op|'('
name|'modes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the given modes on the terminal.\n        """'
newline|'\n'
nl|'\n'
DECL|member|resetModes
dedent|''
name|'def'
name|'resetModes'
op|'('
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset the given modes on the terminal.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setPrivateModes
dedent|''
name|'def'
name|'setPrivateModes'
op|'('
name|'modes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the given DEC private modes on the terminal.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|resetPrivateModes
dedent|''
name|'def'
name|'resetPrivateModes'
op|'('
name|'modes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reset the given DEC private modes on the terminal.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|applicationKeypadMode
dedent|''
name|'def'
name|'applicationKeypadMode'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cause keypad to generate control functions.\n\n        Cursor key mode selects the type of characters generated by cursor keys.\n        """'
newline|'\n'
nl|'\n'
DECL|member|numericKeypadMode
dedent|''
name|'def'
name|'numericKeypadMode'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cause keypad to generate normal characters.\n        """'
newline|'\n'
nl|'\n'
DECL|member|selectCharacterSet
dedent|''
name|'def'
name|'selectCharacterSet'
op|'('
name|'charSet'
op|','
name|'which'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Select a character set.\n\n        charSet should be one of CS_US, CS_UK, CS_DRAWING, CS_ALTERNATE, or\n        CS_ALTERNATE_SPECIAL.\n\n        which should be one of G0 or G1.\n        """'
newline|'\n'
nl|'\n'
DECL|member|shiftIn
dedent|''
name|'def'
name|'shiftIn'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Activate the G0 character set.\n        """'
newline|'\n'
nl|'\n'
DECL|member|shiftOut
dedent|''
name|'def'
name|'shiftOut'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Activate the G1 character set.\n        """'
newline|'\n'
nl|'\n'
DECL|member|singleShift2
dedent|''
name|'def'
name|'singleShift2'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Shift to the G2 character set for a single character.\n        """'
newline|'\n'
nl|'\n'
DECL|member|singleShift3
dedent|''
name|'def'
name|'singleShift3'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Shift to the G3 character set for a single character.\n        """'
newline|'\n'
nl|'\n'
DECL|member|selectGraphicRendition
dedent|''
name|'def'
name|'selectGraphicRendition'
op|'('
op|'*'
name|'attributes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Enabled one or more character attributes.\n\n        Arguments should be one or more of UNDERLINE, REVERSE_VIDEO, BLINK, or BOLD.\n        NORMAL may also be specified to disable all character attributes.\n        """'
newline|'\n'
nl|'\n'
DECL|member|horizontalTabulationSet
dedent|''
name|'def'
name|'horizontalTabulationSet'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set a tab stop at the current cursor position.\n        """'
newline|'\n'
nl|'\n'
DECL|member|tabulationClear
dedent|''
name|'def'
name|'tabulationClear'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Clear the tab stop at the current cursor position.\n        """'
newline|'\n'
nl|'\n'
DECL|member|tabulationClearAll
dedent|''
name|'def'
name|'tabulationClearAll'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Clear all tab stops.\n        """'
newline|'\n'
nl|'\n'
DECL|member|doubleHeightLine
dedent|''
name|'def'
name|'doubleHeightLine'
op|'('
name|'top'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make the current line the top or bottom half of a double-height, double-width line.\n\n        If top is True, the current line is the top half.  Otherwise, it is the bottom half.\n        """'
newline|'\n'
nl|'\n'
DECL|member|singleWidthLine
dedent|''
name|'def'
name|'singleWidthLine'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make the current line a single-width, single-height line.\n        """'
newline|'\n'
nl|'\n'
DECL|member|doubleWidthLine
dedent|''
name|'def'
name|'doubleWidthLine'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make the current line a double-width line.\n        """'
newline|'\n'
nl|'\n'
DECL|member|eraseToLineEnd
dedent|''
name|'def'
name|'eraseToLineEnd'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Erase from the cursor to the end of line, including cursor position.\n        """'
newline|'\n'
nl|'\n'
DECL|member|eraseToLineBeginning
dedent|''
name|'def'
name|'eraseToLineBeginning'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Erase from the cursor to the beginning of the line, including the cursor position.\n        """'
newline|'\n'
nl|'\n'
DECL|member|eraseLine
dedent|''
name|'def'
name|'eraseLine'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Erase the entire cursor line.\n        """'
newline|'\n'
nl|'\n'
DECL|member|eraseToDisplayEnd
dedent|''
name|'def'
name|'eraseToDisplayEnd'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Erase from the cursor to the end of the display, including the cursor position.\n        """'
newline|'\n'
nl|'\n'
DECL|member|eraseToDisplayBeginning
dedent|''
name|'def'
name|'eraseToDisplayBeginning'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Erase from the cursor to the beginning of the display, including the cursor position.\n        """'
newline|'\n'
nl|'\n'
DECL|member|eraseDisplay
dedent|''
name|'def'
name|'eraseDisplay'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Erase the entire display.\n        """'
newline|'\n'
nl|'\n'
DECL|member|deleteCharacter
dedent|''
name|'def'
name|'deleteCharacter'
op|'('
name|'n'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete n characters starting at the cursor position.\n\n        Characters to the right of deleted characters are shifted to the left.\n        """'
newline|'\n'
nl|'\n'
DECL|member|insertLine
dedent|''
name|'def'
name|'insertLine'
op|'('
name|'n'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Insert n lines at the cursor position.\n\n        Lines below the cursor are shifted down.  Lines moved past the bottom margin are lost.\n        This command is ignored when the cursor is outside the scroll region.\n        """'
newline|'\n'
nl|'\n'
DECL|member|deleteLine
dedent|''
name|'def'
name|'deleteLine'
op|'('
name|'n'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete n lines starting at the cursor position.\n\n        Lines below the cursor are shifted up.  This command is ignored when the cursor is outside\n        the scroll region.\n        """'
newline|'\n'
nl|'\n'
DECL|member|reportCursorPosition
dedent|''
name|'def'
name|'reportCursorPosition'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a Deferred that fires with a two-tuple of (x, y) indicating the cursor position.\n        """'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset the terminal to its initial state.\n        """'
newline|'\n'
nl|'\n'
DECL|member|unhandledControlSequence
dedent|''
name|'def'
name|'unhandledControlSequence'
op|'('
name|'seq'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when an unsupported control sequence is received.\n\n        @type seq: C{str}\n        @param seq: The whole control sequence which could not be interpreted.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|CSI
dedent|''
dedent|''
name|'CSI'
op|'='
string|"'\\x1b'"
newline|'\n'
DECL|variable|CST
name|'CST'
op|'='
op|'{'
string|"'~'"
op|':'
string|"'tilde'"
op|'}'
newline|'\n'
nl|'\n'
DECL|class|modes
name|'class'
name|'modes'
op|':'
newline|'\n'
indent|'    '
string|'"""ECMA 48 standardized modes\n    """'
newline|'\n'
nl|'\n'
comment|'# BREAKS YOPUR KEYBOARD MOFO'
nl|'\n'
name|'KEYBOARD_ACTION'
op|'='
name|'KAM'
op|'='
number|'2'
newline|'\n'
nl|'\n'
comment|'# When set, enables character insertion. New display characters'
nl|'\n'
comment|'# move old display characters to the right. Characters moved past'
nl|'\n'
comment|'# the right margin are lost.'
nl|'\n'
nl|'\n'
comment|'# When reset, enables replacement mode (disables character'
nl|'\n'
comment|'# insertion). New display characters replace old display'
nl|'\n'
comment|'# characters at cursor position. The old character is erased.'
nl|'\n'
name|'INSERTION_REPLACEMENT'
op|'='
name|'IRM'
op|'='
number|'4'
newline|'\n'
nl|'\n'
comment|'# Set causes a received linefeed, form feed, or vertical tab to'
nl|'\n'
comment|'# move cursor to first column of next line. RETURN transmits both'
nl|'\n'
comment|'# a carriage return and linefeed. This selection is also called'
nl|'\n'
comment|'# new line option.'
nl|'\n'
nl|'\n'
comment|'# Reset causes a received linefeed, form feed, or vertical tab to'
nl|'\n'
comment|'# move cursor to next line in current column. RETURN transmits a'
nl|'\n'
comment|'# carriage return.'
nl|'\n'
name|'LINEFEED_NEWLINE'
op|'='
name|'LNM'
op|'='
number|'20'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|privateModes
dedent|''
name|'class'
name|'privateModes'
op|':'
newline|'\n'
indent|'    '
string|'"""ANSI-Compatible Private Modes\n    """'
newline|'\n'
DECL|variable|ERROR
name|'ERROR'
op|'='
number|'0'
newline|'\n'
DECL|variable|CURSOR_KEY
name|'CURSOR_KEY'
op|'='
number|'1'
newline|'\n'
DECL|variable|ANSI_VT52
name|'ANSI_VT52'
op|'='
number|'2'
newline|'\n'
DECL|variable|COLUMN
name|'COLUMN'
op|'='
number|'3'
newline|'\n'
DECL|variable|SCROLL
name|'SCROLL'
op|'='
number|'4'
newline|'\n'
DECL|variable|SCREEN
name|'SCREEN'
op|'='
number|'5'
newline|'\n'
DECL|variable|ORIGIN
name|'ORIGIN'
op|'='
number|'6'
newline|'\n'
DECL|variable|AUTO_WRAP
name|'AUTO_WRAP'
op|'='
number|'7'
newline|'\n'
DECL|variable|AUTO_REPEAT
name|'AUTO_REPEAT'
op|'='
number|'8'
newline|'\n'
DECL|variable|PRINTER_FORM_FEED
name|'PRINTER_FORM_FEED'
op|'='
number|'18'
newline|'\n'
DECL|variable|PRINTER_EXTENT
name|'PRINTER_EXTENT'
op|'='
number|'19'
newline|'\n'
nl|'\n'
comment|'# Toggle cursor visibility (reset hides it)'
nl|'\n'
DECL|variable|CURSOR_MODE
name|'CURSOR_MODE'
op|'='
number|'25'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Character sets'
nl|'\n'
DECL|variable|CS_US
dedent|''
name|'CS_US'
op|'='
string|"'CS_US'"
newline|'\n'
DECL|variable|CS_UK
name|'CS_UK'
op|'='
string|"'CS_UK'"
newline|'\n'
DECL|variable|CS_DRAWING
name|'CS_DRAWING'
op|'='
string|"'CS_DRAWING'"
newline|'\n'
DECL|variable|CS_ALTERNATE
name|'CS_ALTERNATE'
op|'='
string|"'CS_ALTERNATE'"
newline|'\n'
DECL|variable|CS_ALTERNATE_SPECIAL
name|'CS_ALTERNATE_SPECIAL'
op|'='
string|"'CS_ALTERNATE_SPECIAL'"
newline|'\n'
nl|'\n'
comment|'# Groupings (or something?? These are like variables that can be bound to character sets)'
nl|'\n'
DECL|variable|G0
name|'G0'
op|'='
string|"'G0'"
newline|'\n'
DECL|variable|G1
name|'G1'
op|'='
string|"'G1'"
newline|'\n'
nl|'\n'
comment|'# G2 and G3 cannot be changed, but they can be shifted to.'
nl|'\n'
DECL|variable|G2
name|'G2'
op|'='
string|"'G2'"
newline|'\n'
DECL|variable|G3
name|'G3'
op|'='
string|"'G3'"
newline|'\n'
nl|'\n'
comment|'# Character attributes'
nl|'\n'
nl|'\n'
DECL|variable|NORMAL
name|'NORMAL'
op|'='
number|'0'
newline|'\n'
DECL|variable|BOLD
name|'BOLD'
op|'='
number|'1'
newline|'\n'
DECL|variable|UNDERLINE
name|'UNDERLINE'
op|'='
number|'4'
newline|'\n'
DECL|variable|BLINK
name|'BLINK'
op|'='
number|'5'
newline|'\n'
DECL|variable|REVERSE_VIDEO
name|'REVERSE_VIDEO'
op|'='
number|'7'
newline|'\n'
nl|'\n'
DECL|class|Vector
name|'class'
name|'Vector'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'x'
op|','
name|'y'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'x'
op|'='
name|'x'
newline|'\n'
name|'self'
op|'.'
name|'y'
op|'='
name|'y'
newline|'\n'
nl|'\n'
DECL|function|log
dedent|''
dedent|''
name|'def'
name|'log'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'file'
op|'('
string|"'log'"
op|','
string|"'a'"
op|')'
op|'.'
name|'write'
op|'('
name|'str'
op|'('
name|'s'
op|')'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
comment|'# XXX TODO - These attributes are really part of the'
nl|'\n'
comment|'# ITerminalTransport interface, I think.'
nl|'\n'
DECL|variable|_KEY_NAMES
dedent|''
name|'_KEY_NAMES'
op|'='
op|'('
string|"'UP_ARROW'"
op|','
string|"'DOWN_ARROW'"
op|','
string|"'RIGHT_ARROW'"
op|','
string|"'LEFT_ARROW'"
op|','
nl|'\n'
string|"'HOME'"
op|','
string|"'INSERT'"
op|','
string|"'DELETE'"
op|','
string|"'END'"
op|','
string|"'PGUP'"
op|','
string|"'PGDN'"
op|','
string|"'NUMPAD_MIDDLE'"
op|','
nl|'\n'
string|"'F1'"
op|','
string|"'F2'"
op|','
string|"'F3'"
op|','
string|"'F4'"
op|','
string|"'F5'"
op|','
string|"'F6'"
op|','
string|"'F7'"
op|','
string|"'F8'"
op|','
string|"'F9'"
op|','
nl|'\n'
string|"'F10'"
op|','
string|"'F11'"
op|','
string|"'F12'"
op|','
nl|'\n'
nl|'\n'
string|"'ALT'"
op|','
string|"'SHIFT'"
op|','
string|"'CONTROL'"
op|')'
newline|'\n'
nl|'\n'
DECL|class|_const
name|'class'
name|'_const'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @ivar name: A string naming this constant\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'['"
op|'+'
name|'self'
op|'.'
name|'name'
op|'+'
string|"']'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FUNCTION_KEYS
dedent|''
dedent|''
name|'FUNCTION_KEYS'
op|'='
op|'['
nl|'\n'
name|'_const'
op|'('
name|'_name'
op|')'
name|'for'
name|'_name'
name|'in'
name|'_KEY_NAMES'
op|']'
newline|'\n'
nl|'\n'
DECL|class|ServerProtocol
name|'class'
name|'ServerProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'ITerminalTransport'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|protocolFactory
name|'protocolFactory'
op|'='
name|'None'
newline|'\n'
DECL|variable|terminalProtocol
name|'terminalProtocol'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|TAB
name|'TAB'
op|'='
string|"'\\t'"
newline|'\n'
DECL|variable|BACKSPACE
name|'BACKSPACE'
op|'='
string|"'\\x7f'"
newline|'\n'
comment|'##'
nl|'\n'
nl|'\n'
DECL|variable|lastWrite
name|'lastWrite'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|variable|state
name|'state'
op|'='
string|"'data'"
newline|'\n'
nl|'\n'
DECL|variable|termSize
name|'termSize'
op|'='
name|'Vector'
op|'('
number|'80'
op|','
number|'24'
op|')'
newline|'\n'
DECL|variable|cursorPos
name|'cursorPos'
op|'='
name|'Vector'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
DECL|variable|scrollRegion
name|'scrollRegion'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Factory who instantiated me'
nl|'\n'
DECL|variable|factory
name|'factory'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'protocolFactory'
op|'='
name|'None'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param protocolFactory: A callable which will be invoked with\n        *a, **kw and should return an ITerminalProtocol implementor.\n        This will be invoked when a connection to this ServerProtocol\n        is established.\n\n        @param a: Any positional arguments to pass to protocolFactory.\n        @param kw: Any keyword arguments to pass to protocolFactory.\n        """'
newline|'\n'
comment|'# assert protocolFactory is None or ITerminalProtocol.implementedBy(protocolFactory), "ServerProtocol.__init__ must be passed an ITerminalProtocol implementor"'
nl|'\n'
name|'if'
name|'protocolFactory'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'protocolFactory'
op|'='
name|'protocolFactory'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'protocolArgs'
op|'='
name|'a'
newline|'\n'
name|'self'
op|'.'
name|'protocolKwArgs'
op|'='
name|'kw'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_cursorReports'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'protocolFactory'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'terminalProtocol'
op|'='
name|'self'
op|'.'
name|'protocolFactory'
op|'('
op|'*'
name|'self'
op|'.'
name|'protocolArgs'
op|','
op|'**'
name|'self'
op|'.'
name|'protocolKwArgs'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'factory'
op|'='
name|'self'
op|'.'
name|'factory'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'terminalProtocol'
op|'.'
name|'factory'
op|'='
name|'factory'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'terminalProtocol'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'ch'
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'data'"
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'ch'
op|'=='
string|"'\\x1b'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'state'
op|'='
string|"'escaped'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'terminalProtocol'
op|'.'
name|'keystrokeReceived'
op|'('
name|'ch'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'escaped'"
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'ch'
op|'=='
string|"'['"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'state'
op|'='
string|"'bracket-escaped'"
newline|'\n'
name|'self'
op|'.'
name|'escBuf'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'ch'
op|'=='
string|"'O'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'state'
op|'='
string|"'low-function-escaped'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'state'
op|'='
string|"'data'"
newline|'\n'
name|'self'
op|'.'
name|'_handleShortControlSequence'
op|'('
name|'ch'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'bracket-escaped'"
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'ch'
op|'=='
string|"'O'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'state'
op|'='
string|"'low-function-escaped'"
newline|'\n'
dedent|''
name|'elif'
name|'ch'
op|'.'
name|'isalpha'
op|'('
op|')'
name|'or'
name|'ch'
op|'=='
string|"'~'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_handleControlSequence'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'escBuf'
op|')'
op|'+'
name|'ch'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'escBuf'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'data'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'escBuf'
op|'.'
name|'append'
op|'('
name|'ch'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'low-function-escaped'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_handleLowFunctionControlSequence'
op|'('
name|'ch'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'data'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|'"Illegal state"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handleShortControlSequence
dedent|''
dedent|''
dedent|''
name|'def'
name|'_handleShortControlSequence'
op|'('
name|'self'
op|','
name|'ch'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'terminalProtocol'
op|'.'
name|'keystrokeReceived'
op|'('
name|'ch'
op|','
name|'self'
op|'.'
name|'ALT'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handleControlSequence
dedent|''
name|'def'
name|'_handleControlSequence'
op|'('
name|'self'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'buf'
op|'='
string|"'\\x1b['"
op|'+'
name|'buf'
newline|'\n'
name|'f'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'controlSequenceParser'
op|','
name|'CST'
op|'.'
name|'get'
op|'('
name|'buf'
op|'['
op|'-'
number|'1'
op|']'
op|','
name|'buf'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'f'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'terminalProtocol'
op|','
name|'buf'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unhandledControlSequence
dedent|''
dedent|''
name|'def'
name|'unhandledControlSequence'
op|'('
name|'self'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'terminalProtocol'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handleLowFunctionControlSequence
dedent|''
name|'def'
name|'_handleLowFunctionControlSequence'
op|'('
name|'self'
op|','
name|'ch'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'map'
op|'='
op|'{'
string|"'P'"
op|':'
name|'self'
op|'.'
name|'F1'
op|','
string|"'Q'"
op|':'
name|'self'
op|'.'
name|'F2'
op|','
string|"'R'"
op|':'
name|'self'
op|'.'
name|'F3'
op|','
string|"'S'"
op|':'
name|'self'
op|'.'
name|'F4'
op|'}'
newline|'\n'
name|'keyID'
op|'='
name|'map'
op|'.'
name|'get'
op|'('
name|'ch'
op|')'
newline|'\n'
name|'if'
name|'keyID'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'terminalProtocol'
op|'.'
name|'keystrokeReceived'
op|'('
name|'keyID'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'terminalProtocol'
op|'.'
name|'unhandledControlSequence'
op|'('
string|"'\\x1b[O'"
op|'+'
name|'ch'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ControlSequenceParser
dedent|''
dedent|''
name|'class'
name|'ControlSequenceParser'
op|':'
newline|'\n'
DECL|member|A
indent|'        '
name|'def'
name|'A'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'buf'
op|'=='
string|"'\\x1b['"
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'keystrokeReceived'
op|'('
name|'proto'
op|'.'
name|'UP_ARROW'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|'+'
string|"'A'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|B
dedent|''
dedent|''
name|'def'
name|'B'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'buf'
op|'=='
string|"'\\x1b['"
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'keystrokeReceived'
op|'('
name|'proto'
op|'.'
name|'DOWN_ARROW'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|'+'
string|"'B'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|C
dedent|''
dedent|''
name|'def'
name|'C'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'buf'
op|'=='
string|"'\\x1b['"
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'keystrokeReceived'
op|'('
name|'proto'
op|'.'
name|'RIGHT_ARROW'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|'+'
string|"'C'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|D
dedent|''
dedent|''
name|'def'
name|'D'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'buf'
op|'=='
string|"'\\x1b['"
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'keystrokeReceived'
op|'('
name|'proto'
op|'.'
name|'LEFT_ARROW'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|'+'
string|"'D'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|E
dedent|''
dedent|''
name|'def'
name|'E'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'buf'
op|'=='
string|"'\\x1b['"
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'keystrokeReceived'
op|'('
name|'proto'
op|'.'
name|'NUMPAD_MIDDLE'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|'+'
string|"'E'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|F
dedent|''
dedent|''
name|'def'
name|'F'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'buf'
op|'=='
string|"'\\x1b['"
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'keystrokeReceived'
op|'('
name|'proto'
op|'.'
name|'END'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|'+'
string|"'F'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|H
dedent|''
dedent|''
name|'def'
name|'H'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'buf'
op|'=='
string|"'\\x1b['"
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'keystrokeReceived'
op|'('
name|'proto'
op|'.'
name|'HOME'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|'+'
string|"'H'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|R
dedent|''
dedent|''
name|'def'
name|'R'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'proto'
op|'.'
name|'_cursorReports'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|'+'
string|"'R'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'buf'
op|'.'
name|'startswith'
op|'('
string|"'\\x1b['"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'report'
op|'='
name|'buf'
op|'['
number|'2'
op|':'
op|']'
newline|'\n'
name|'parts'
op|'='
name|'report'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'!='
number|'2'
op|':'
newline|'\n'
indent|'                    '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|'+'
string|"'R'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'Pl'
op|','
name|'Pc'
op|'='
name|'parts'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'Pl'
op|','
name|'Pc'
op|'='
name|'int'
op|'('
name|'Pl'
op|')'
op|','
name|'int'
op|'('
name|'Pc'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                        '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|'+'
string|"'R'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'d'
op|'='
name|'proto'
op|'.'
name|'_cursorReports'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
op|'('
name|'Pc'
op|'-'
number|'1'
op|','
name|'Pl'
op|'-'
number|'1'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|'+'
string|"'R'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|Z
dedent|''
dedent|''
name|'def'
name|'Z'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'buf'
op|'=='
string|"'\\x1b['"
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'keystrokeReceived'
op|'('
name|'proto'
op|'.'
name|'TAB'
op|','
name|'proto'
op|'.'
name|'SHIFT'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|'+'
string|"'Z'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|tilde
dedent|''
dedent|''
name|'def'
name|'tilde'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'map'
op|'='
op|'{'
number|'1'
op|':'
name|'proto'
op|'.'
name|'HOME'
op|','
number|'2'
op|':'
name|'proto'
op|'.'
name|'INSERT'
op|','
number|'3'
op|':'
name|'proto'
op|'.'
name|'DELETE'
op|','
nl|'\n'
number|'4'
op|':'
name|'proto'
op|'.'
name|'END'
op|','
number|'5'
op|':'
name|'proto'
op|'.'
name|'PGUP'
op|','
number|'6'
op|':'
name|'proto'
op|'.'
name|'PGDN'
op|','
nl|'\n'
nl|'\n'
number|'15'
op|':'
name|'proto'
op|'.'
name|'F5'
op|','
number|'17'
op|':'
name|'proto'
op|'.'
name|'F6'
op|','
number|'18'
op|':'
name|'proto'
op|'.'
name|'F7'
op|','
nl|'\n'
number|'19'
op|':'
name|'proto'
op|'.'
name|'F8'
op|','
number|'20'
op|':'
name|'proto'
op|'.'
name|'F9'
op|','
number|'21'
op|':'
name|'proto'
op|'.'
name|'F10'
op|','
nl|'\n'
number|'23'
op|':'
name|'proto'
op|'.'
name|'F11'
op|','
number|'24'
op|':'
name|'proto'
op|'.'
name|'F12'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'buf'
op|'.'
name|'startswith'
op|'('
string|"'\\x1b['"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ch'
op|'='
name|'buf'
op|'['
number|'2'
op|':'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'v'
op|'='
name|'int'
op|'('
name|'ch'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|'+'
string|"'~'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'symbolic'
op|'='
name|'map'
op|'.'
name|'get'
op|'('
name|'v'
op|')'
newline|'\n'
name|'if'
name|'symbolic'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                        '
name|'handler'
op|'.'
name|'keystrokeReceived'
op|'('
name|'map'
op|'['
name|'v'
op|']'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|'+'
string|"'~'"
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
name|'buf'
op|'+'
string|"'~'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|controlSequenceParser
dedent|''
dedent|''
dedent|''
name|'controlSequenceParser'
op|'='
name|'ControlSequenceParser'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# ITerminalTransport'
nl|'\n'
DECL|member|cursorUp
name|'def'
name|'cursorUp'
op|'('
name|'self'
op|','
name|'n'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'n'
op|'>='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'y'
op|'='
name|'max'
op|'('
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'y'
op|'-'
name|'n'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[%dA'"
op|'%'
op|'('
name|'n'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cursorDown
dedent|''
name|'def'
name|'cursorDown'
op|'('
name|'self'
op|','
name|'n'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'n'
op|'>='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'y'
op|'='
name|'min'
op|'('
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'y'
op|'+'
name|'n'
op|','
name|'self'
op|'.'
name|'termSize'
op|'.'
name|'y'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[%dB'"
op|'%'
op|'('
name|'n'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cursorForward
dedent|''
name|'def'
name|'cursorForward'
op|'('
name|'self'
op|','
name|'n'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'n'
op|'>='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'x'
op|'='
name|'min'
op|'('
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'x'
op|'+'
name|'n'
op|','
name|'self'
op|'.'
name|'termSize'
op|'.'
name|'x'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[%dC'"
op|'%'
op|'('
name|'n'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cursorBackward
dedent|''
name|'def'
name|'cursorBackward'
op|'('
name|'self'
op|','
name|'n'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'n'
op|'>='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'x'
op|'='
name|'max'
op|'('
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'x'
op|'-'
name|'n'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[%dD'"
op|'%'
op|'('
name|'n'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cursorPosition
dedent|''
name|'def'
name|'cursorPosition'
op|'('
name|'self'
op|','
name|'column'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[%d;%dH'"
op|'%'
op|'('
name|'line'
op|'+'
number|'1'
op|','
name|'column'
op|'+'
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cursorHome
dedent|''
name|'def'
name|'cursorHome'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'x'
op|'='
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'y'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[H'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|index
dedent|''
name|'def'
name|'index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'y'
op|'='
name|'min'
op|'('
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'y'
op|'+'
number|'1'
op|','
name|'self'
op|'.'
name|'termSize'
op|'.'
name|'y'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1bD'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|reverseIndex
dedent|''
name|'def'
name|'reverseIndex'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'y'
op|'='
name|'max'
op|'('
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'y'
op|'-'
number|'1'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1bM'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|nextLine
dedent|''
name|'def'
name|'nextLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'x'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'y'
op|'='
name|'min'
op|'('
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'y'
op|'+'
number|'1'
op|','
name|'self'
op|'.'
name|'termSize'
op|'.'
name|'y'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|saveCursor
dedent|''
name|'def'
name|'saveCursor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_savedCursorPos'
op|'='
name|'Vector'
op|'('
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'x'
op|','
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'y'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b7'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|restoreCursor
dedent|''
name|'def'
name|'restoreCursor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cursorPos'
op|'='
name|'self'
op|'.'
name|'_savedCursorPos'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'_savedCursorPos'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b8'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|setModes
dedent|''
name|'def'
name|'setModes'
op|'('
name|'self'
op|','
name|'modes'
op|')'
op|':'
newline|'\n'
comment|'# XXX Support ANSI-Compatible private modes'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[%sh'"
op|'%'
op|'('
string|"';'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'modes'
op|')'
op|')'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setPrivateModes
dedent|''
name|'def'
name|'setPrivateModes'
op|'('
name|'self'
op|','
name|'modes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[?%sh'"
op|'%'
op|'('
string|"';'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'modes'
op|')'
op|')'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resetModes
dedent|''
name|'def'
name|'resetModes'
op|'('
name|'self'
op|','
name|'modes'
op|')'
op|':'
newline|'\n'
comment|'# XXX Support ANSI-Compatible private modes'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[%sl'"
op|'%'
op|'('
string|"';'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'modes'
op|')'
op|')'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resetPrivateModes
dedent|''
name|'def'
name|'resetPrivateModes'
op|'('
name|'self'
op|','
name|'modes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[?%sl'"
op|'%'
op|'('
string|"';'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'modes'
op|')'
op|')'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|applicationKeypadMode
dedent|''
name|'def'
name|'applicationKeypadMode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b='"
op|')'
newline|'\n'
nl|'\n'
DECL|member|numericKeypadMode
dedent|''
name|'def'
name|'numericKeypadMode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b>'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|selectCharacterSet
dedent|''
name|'def'
name|'selectCharacterSet'
op|'('
name|'self'
op|','
name|'charSet'
op|','
name|'which'
op|')'
op|':'
newline|'\n'
comment|'# XXX Rewrite these as dict lookups'
nl|'\n'
indent|'        '
name|'if'
name|'which'
op|'=='
name|'G0'
op|':'
newline|'\n'
indent|'            '
name|'which'
op|'='
string|"'('"
newline|'\n'
dedent|''
name|'elif'
name|'which'
op|'=='
name|'G1'
op|':'
newline|'\n'
indent|'            '
name|'which'
op|'='
string|"')'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"`which\' argument to selectCharacterSet must be G0 or G1"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'charSet'
op|'=='
name|'CS_UK'
op|':'
newline|'\n'
indent|'            '
name|'charSet'
op|'='
string|"'A'"
newline|'\n'
dedent|''
name|'elif'
name|'charSet'
op|'=='
name|'CS_US'
op|':'
newline|'\n'
indent|'            '
name|'charSet'
op|'='
string|"'B'"
newline|'\n'
dedent|''
name|'elif'
name|'charSet'
op|'=='
name|'CS_DRAWING'
op|':'
newline|'\n'
indent|'            '
name|'charSet'
op|'='
string|"'0'"
newline|'\n'
dedent|''
name|'elif'
name|'charSet'
op|'=='
name|'CS_ALTERNATE'
op|':'
newline|'\n'
indent|'            '
name|'charSet'
op|'='
string|"'1'"
newline|'\n'
dedent|''
name|'elif'
name|'charSet'
op|'=='
name|'CS_ALTERNATE_SPECIAL'
op|':'
newline|'\n'
indent|'            '
name|'charSet'
op|'='
string|"'2'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Invalid `charSet\' argument to selectCharacterSet"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b'"
op|'+'
name|'which'
op|'+'
name|'charSet'
op|')'
newline|'\n'
nl|'\n'
DECL|member|shiftIn
dedent|''
name|'def'
name|'shiftIn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x15'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|shiftOut
dedent|''
name|'def'
name|'shiftOut'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x14'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|singleShift2
dedent|''
name|'def'
name|'singleShift2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1bN'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|singleShift3
dedent|''
name|'def'
name|'singleShift3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1bO'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|selectGraphicRendition
dedent|''
name|'def'
name|'selectGraphicRendition'
op|'('
name|'self'
op|','
op|'*'
name|'attributes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'attrs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'a'
name|'in'
name|'attributes'
op|':'
newline|'\n'
indent|'            '
name|'attrs'
op|'.'
name|'append'
op|'('
name|'a'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[%sm'"
op|'%'
op|'('
string|"';'"
op|'.'
name|'join'
op|'('
name|'attrs'
op|')'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|horizontalTabulationSet
dedent|''
name|'def'
name|'horizontalTabulationSet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1bH'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|tabulationClear
dedent|''
name|'def'
name|'tabulationClear'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[q'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|tabulationClearAll
dedent|''
name|'def'
name|'tabulationClearAll'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[3q'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|doubleHeightLine
dedent|''
name|'def'
name|'doubleHeightLine'
op|'('
name|'self'
op|','
name|'top'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'top'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b#3'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b#4'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|singleWidthLine
dedent|''
dedent|''
name|'def'
name|'singleWidthLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b#5'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|doubleWidthLine
dedent|''
name|'def'
name|'doubleWidthLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b#6'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|eraseToLineEnd
dedent|''
name|'def'
name|'eraseToLineEnd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[K'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|eraseToLineBeginning
dedent|''
name|'def'
name|'eraseToLineBeginning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[1K'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|eraseLine
dedent|''
name|'def'
name|'eraseLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[2K'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|eraseToDisplayEnd
dedent|''
name|'def'
name|'eraseToDisplayEnd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[J'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|eraseToDisplayBeginning
dedent|''
name|'def'
name|'eraseToDisplayBeginning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[1J'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|eraseDisplay
dedent|''
name|'def'
name|'eraseDisplay'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[2J'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|deleteCharacter
dedent|''
name|'def'
name|'deleteCharacter'
op|'('
name|'self'
op|','
name|'n'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[%dP'"
op|'%'
op|'('
name|'n'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|insertLine
dedent|''
name|'def'
name|'insertLine'
op|'('
name|'self'
op|','
name|'n'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[%dL'"
op|'%'
op|'('
name|'n'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deleteLine
dedent|''
name|'def'
name|'deleteLine'
op|'('
name|'self'
op|','
name|'n'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[%dM'"
op|'%'
op|'('
name|'n'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setScrollRegion
dedent|''
name|'def'
name|'setScrollRegion'
op|'('
name|'self'
op|','
name|'first'
op|'='
name|'None'
op|','
name|'last'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'first'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'first'
op|'='
string|"'%d'"
op|'%'
op|'('
name|'first'
op|','
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'first'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'if'
name|'last'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'last'
op|'='
string|"'%d'"
op|'%'
op|'('
name|'last'
op|','
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'last'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[%s;%sr'"
op|'%'
op|'('
name|'first'
op|','
name|'last'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resetScrollRegion
dedent|''
name|'def'
name|'resetScrollRegion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'setScrollRegion'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|reportCursorPosition
dedent|''
name|'def'
name|'reportCursorPosition'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cursorReports'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1b[6n'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'x'
op|'='
name|'self'
op|'.'
name|'cursorPos'
op|'.'
name|'y'
op|'='
number|'0'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'_savedCursorPos'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\x1bc'"
op|')'
newline|'\n'
nl|'\n'
comment|'# ITransport'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'bytes'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'lastWrite'
op|'='
name|'bytes'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|"'\\r\\n'"
op|'.'
name|'join'
op|'('
name|'bytes'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'bytes'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'terminalProtocol'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'terminalProtocol'
op|'.'
name|'connectionLost'
op|'('
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'terminalProtocol'
op|'='
name|'None'
newline|'\n'
comment|'# Add symbolic names for function keys'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'for'
name|'name'
op|','
name|'const'
name|'in'
name|'zip'
op|'('
name|'_KEY_NAMES'
op|','
name|'FUNCTION_KEYS'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'setattr'
op|'('
name|'ServerProtocol'
op|','
name|'name'
op|','
name|'const'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ClientProtocol
dedent|''
name|'class'
name|'ClientProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|terminalFactory
indent|'    '
name|'terminalFactory'
op|'='
name|'None'
newline|'\n'
DECL|variable|terminal
name|'terminal'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|state
name|'state'
op|'='
string|"'data'"
newline|'\n'
nl|'\n'
DECL|variable|_escBuf
name|'_escBuf'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|_shorts
name|'_shorts'
op|'='
op|'{'
nl|'\n'
string|"'D'"
op|':'
string|"'index'"
op|','
nl|'\n'
string|"'M'"
op|':'
string|"'reverseIndex'"
op|','
nl|'\n'
string|"'E'"
op|':'
string|"'nextLine'"
op|','
nl|'\n'
string|"'7'"
op|':'
string|"'saveCursor'"
op|','
nl|'\n'
string|"'8'"
op|':'
string|"'restoreCursor'"
op|','
nl|'\n'
string|"'='"
op|':'
string|"'applicationKeypadMode'"
op|','
nl|'\n'
string|"'>'"
op|':'
string|"'numericKeypadMode'"
op|','
nl|'\n'
string|"'N'"
op|':'
string|"'singleShift2'"
op|','
nl|'\n'
string|"'O'"
op|':'
string|"'singleShift3'"
op|','
nl|'\n'
string|"'H'"
op|':'
string|"'horizontalTabulationSet'"
op|','
nl|'\n'
string|"'c'"
op|':'
string|"'reset'"
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|_longs
name|'_longs'
op|'='
op|'{'
nl|'\n'
string|"'['"
op|':'
string|"'bracket-escape'"
op|','
nl|'\n'
string|"'('"
op|':'
string|"'select-g0'"
op|','
nl|'\n'
string|"')'"
op|':'
string|"'select-g1'"
op|','
nl|'\n'
string|"'#'"
op|':'
string|"'select-height-width'"
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|_charsets
name|'_charsets'
op|'='
op|'{'
nl|'\n'
string|"'A'"
op|':'
name|'CS_UK'
op|','
nl|'\n'
string|"'B'"
op|':'
name|'CS_US'
op|','
nl|'\n'
string|"'0'"
op|':'
name|'CS_DRAWING'
op|','
nl|'\n'
string|"'1'"
op|':'
name|'CS_ALTERNATE'
op|','
nl|'\n'
string|"'2'"
op|':'
name|'CS_ALTERNATE_SPECIAL'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Factory who instantiated me'
nl|'\n'
DECL|variable|factory
name|'factory'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'terminalFactory'
op|'='
name|'None'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param terminalFactory: A callable which will be invoked with\n        *a, **kw and should return an ITerminalTransport provider.\n        This will be invoked when this ClientProtocol establishes a\n        connection.\n\n        @param a: Any positional arguments to pass to terminalFactory.\n        @param kw: Any keyword arguments to pass to terminalFactory.\n        """'
newline|'\n'
comment|'# assert terminalFactory is None or ITerminalTransport.implementedBy(terminalFactory), "ClientProtocol.__init__ must be passed an ITerminalTransport implementor"'
nl|'\n'
name|'if'
name|'terminalFactory'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'terminalFactory'
op|'='
name|'terminalFactory'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'terminalArgs'
op|'='
name|'a'
newline|'\n'
name|'self'
op|'.'
name|'terminalKwArgs'
op|'='
name|'kw'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'terminalFactory'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'terminal'
op|'='
name|'self'
op|'.'
name|'terminalFactory'
op|'('
op|'*'
name|'self'
op|'.'
name|'terminalArgs'
op|','
op|'**'
name|'self'
op|'.'
name|'terminalKwArgs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'factory'
op|'='
name|'self'
op|'.'
name|'factory'
newline|'\n'
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'terminal'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'connectionLost'
op|'('
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'self'
op|'.'
name|'terminal'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
dedent|''
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse the given data from a terminal server, dispatching to event\n        handlers defined by C{self.terminal}.\n        """'
newline|'\n'
name|'toWrite'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'b'
name|'in'
name|'bytes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'data'"
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'b'
op|'=='
string|"'\\x1b'"
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'toWrite'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'write'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'toWrite'
op|')'
op|')'
newline|'\n'
name|'del'
name|'toWrite'
op|'['
op|':'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'state'
op|'='
string|"'escaped'"
newline|'\n'
dedent|''
name|'elif'
name|'b'
op|'=='
string|"'\\x14'"
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'toWrite'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'write'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'toWrite'
op|')'
op|')'
newline|'\n'
name|'del'
name|'toWrite'
op|'['
op|':'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'shiftOut'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'b'
op|'=='
string|"'\\x15'"
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'toWrite'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'write'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'toWrite'
op|')'
op|')'
newline|'\n'
name|'del'
name|'toWrite'
op|'['
op|':'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'shiftIn'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'b'
op|'=='
string|"'\\x08'"
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'toWrite'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'write'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'toWrite'
op|')'
op|')'
newline|'\n'
name|'del'
name|'toWrite'
op|'['
op|':'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'cursorBackward'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'toWrite'
op|'.'
name|'append'
op|'('
name|'b'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'escaped'"
op|':'
newline|'\n'
indent|'                '
name|'fName'
op|'='
name|'self'
op|'.'
name|'_shorts'
op|'.'
name|'get'
op|'('
name|'b'
op|')'
newline|'\n'
name|'if'
name|'fName'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'state'
op|'='
string|"'data'"
newline|'\n'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'terminal'
op|','
name|'fName'
op|')'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'state'
op|'='
name|'self'
op|'.'
name|'_longs'
op|'.'
name|'get'
op|'('
name|'b'
op|')'
newline|'\n'
name|'if'
name|'state'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'state'
op|'='
name|'state'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'unhandledControlSequence'
op|'('
string|"'\\x1b'"
op|'+'
name|'b'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'data'"
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'bracket-escape'"
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'_escBuf'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_escBuf'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'if'
name|'b'
op|'.'
name|'isalpha'
op|'('
op|')'
name|'or'
name|'b'
op|'=='
string|"'~'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_handleControlSequence'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'_escBuf'
op|')'
op|','
name|'b'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'_escBuf'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'data'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_escBuf'
op|'.'
name|'append'
op|'('
name|'b'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'select-g0'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'selectCharacterSet'
op|'('
name|'self'
op|'.'
name|'_charsets'
op|'.'
name|'get'
op|'('
name|'b'
op|','
name|'b'
op|')'
op|','
name|'G0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'data'"
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'select-g1'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'selectCharacterSet'
op|'('
name|'self'
op|'.'
name|'_charsets'
op|'.'
name|'get'
op|'('
name|'b'
op|','
name|'b'
op|')'
op|','
name|'G1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'data'"
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'select-height-width'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_handleHeightWidth'
op|'('
name|'b'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'data'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|'"Illegal state"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'toWrite'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'write'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'toWrite'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_handleControlSequence
dedent|''
dedent|''
name|'def'
name|'_handleControlSequence'
op|'('
name|'self'
op|','
name|'buf'
op|','
name|'terminal'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'controlSequenceParser'
op|','
name|'CST'
op|'.'
name|'get'
op|'('
name|'terminal'
op|','
name|'terminal'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'f'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'unhandledControlSequence'
op|'('
string|"'\\x1b['"
op|'+'
name|'buf'
op|'+'
name|'terminal'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'terminal'
op|','
name|'buf'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ControlSequenceParser
dedent|''
dedent|''
name|'class'
name|'ControlSequenceParser'
op|':'
newline|'\n'
DECL|member|_makeSimple
indent|'        '
name|'def'
name|'_makeSimple'
op|'('
name|'ch'
op|','
name|'fName'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'n'
op|'='
string|"'cursor'"
op|'+'
name|'fName'
newline|'\n'
DECL|function|simple
name|'def'
name|'simple'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'buf'
op|':'
newline|'\n'
indent|'                    '
name|'getattr'
op|'('
name|'handler'
op|','
name|'n'
op|')'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'m'
op|'='
name|'int'
op|'('
name|'buf'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                        '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
string|"'\\x1b['"
op|'+'
name|'buf'
op|'+'
name|'ch'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'getattr'
op|'('
name|'handler'
op|','
name|'n'
op|')'
op|'('
name|'m'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'simple'
newline|'\n'
dedent|''
name|'for'
op|'('
name|'ch'
op|','
name|'fName'
op|')'
name|'in'
op|'('
op|'('
string|"'A'"
op|','
string|"'Up'"
op|')'
op|','
nl|'\n'
op|'('
string|"'B'"
op|','
string|"'Down'"
op|')'
op|','
nl|'\n'
op|'('
string|"'C'"
op|','
string|"'Forward'"
op|')'
op|','
nl|'\n'
op|'('
string|"'D'"
op|','
string|"'Backward'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'exec'
name|'ch'
op|'+'
string|'" = _makeSimple(ch, fName)"'
newline|'\n'
dedent|''
name|'del'
name|'_makeSimple'
newline|'\n'
nl|'\n'
DECL|member|h
name|'def'
name|'h'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
comment|"# XXX - Handle '?' to introduce ANSI-Compatible private modes."
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'modes'
op|'='
name|'map'
op|'('
name|'int'
op|','
name|'buf'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
string|"'\\x1b['"
op|'+'
name|'buf'
op|'+'
string|"'h'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'setModes'
op|'('
name|'modes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|l
dedent|''
dedent|''
name|'def'
name|'l'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
comment|"# XXX - Handle '?' to introduce ANSI-Compatible private modes."
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'modes'
op|'='
name|'map'
op|'('
name|'int'
op|','
name|'buf'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
string|"'\\x1b['"
op|'+'
name|'buf'
op|'+'
string|"'l'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'resetModes'
op|'('
name|'modes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|r
dedent|''
dedent|''
name|'def'
name|'r'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'parts'
op|'='
name|'buf'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'setScrollRegion'
op|'('
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'parts'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'parts'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
indent|'                        '
name|'pt'
op|'='
name|'int'
op|'('
name|'parts'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'pt'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'parts'
op|'['
number|'1'
op|']'
op|':'
newline|'\n'
indent|'                        '
name|'pb'
op|'='
name|'int'
op|'('
name|'parts'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'pb'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
string|"'\\x1b['"
op|'+'
name|'buf'
op|'+'
string|"'r'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'handler'
op|'.'
name|'setScrollRegion'
op|'('
name|'pt'
op|','
name|'pb'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
string|"'\\x1b['"
op|'+'
name|'buf'
op|'+'
string|"'r'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|K
dedent|''
dedent|''
name|'def'
name|'K'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'buf'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'eraseToLineEnd'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'buf'
op|'=='
string|"'1'"
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'eraseToLineBeginning'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'buf'
op|'=='
string|"'2'"
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'eraseLine'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
string|"'\\x1b['"
op|'+'
name|'buf'
op|'+'
string|"'K'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|H
dedent|''
dedent|''
name|'def'
name|'H'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'handler'
op|'.'
name|'cursorHome'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|J
dedent|''
name|'def'
name|'J'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'buf'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'eraseToDisplayEnd'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'buf'
op|'=='
string|"'1'"
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'eraseToDisplayBeginning'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'buf'
op|'=='
string|"'2'"
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'eraseDisplay'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
string|"'\\x1b['"
op|'+'
name|'buf'
op|'+'
string|"'J'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|P
dedent|''
dedent|''
name|'def'
name|'P'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'buf'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'deleteCharacter'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'n'
op|'='
name|'int'
op|'('
name|'buf'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
string|"'\\x1b['"
op|'+'
name|'buf'
op|'+'
string|"'P'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'handler'
op|'.'
name|'deleteCharacter'
op|'('
name|'n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|L
dedent|''
dedent|''
dedent|''
name|'def'
name|'L'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'buf'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'insertLine'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'n'
op|'='
name|'int'
op|'('
name|'buf'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
string|"'\\x1b['"
op|'+'
name|'buf'
op|'+'
string|"'L'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'handler'
op|'.'
name|'insertLine'
op|'('
name|'n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|M
dedent|''
dedent|''
dedent|''
name|'def'
name|'M'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'buf'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'deleteLine'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'n'
op|'='
name|'int'
op|'('
name|'buf'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
string|"'\\x1b['"
op|'+'
name|'buf'
op|'+'
string|"'M'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'handler'
op|'.'
name|'deleteLine'
op|'('
name|'n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|n
dedent|''
dedent|''
dedent|''
name|'def'
name|'n'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'buf'
op|'=='
string|"'6'"
op|':'
newline|'\n'
indent|'                '
name|'x'
op|','
name|'y'
op|'='
name|'handler'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|"'\\x1b[%d;%dR'"
op|'%'
op|'('
name|'x'
op|'+'
number|'1'
op|','
name|'y'
op|'+'
number|'1'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'unhandledControlSequence'
op|'('
string|"'\\x1b['"
op|'+'
name|'buf'
op|'+'
string|"'n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|m
dedent|''
dedent|''
name|'def'
name|'m'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'handler'
op|','
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'buf'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'.'
name|'selectGraphicRendition'
op|'('
name|'NORMAL'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'attrs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'a'
name|'in'
name|'buf'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'a'
op|'='
name|'int'
op|'('
name|'a'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                        '
name|'pass'
newline|'\n'
dedent|''
name|'attrs'
op|'.'
name|'append'
op|'('
name|'a'
op|')'
newline|'\n'
dedent|''
name|'handler'
op|'.'
name|'selectGraphicRendition'
op|'('
op|'*'
name|'attrs'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|controlSequenceParser
dedent|''
dedent|''
dedent|''
name|'controlSequenceParser'
op|'='
name|'ControlSequenceParser'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handleHeightWidth
name|'def'
name|'_handleHeightWidth'
op|'('
name|'self'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'b'
op|'=='
string|"'3'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'doubleHeightLine'
op|'('
name|'True'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'b'
op|'=='
string|"'4'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'doubleHeightLine'
op|'('
name|'False'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'b'
op|'=='
string|"'5'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'singleWidthLine'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'b'
op|'=='
string|"'6'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'doubleWidthLine'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'unhandledControlSequence'
op|'('
string|"'\\x1b#'"
op|'+'
name|'b'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
nl|'\n'
comment|'# Interfaces'
nl|'\n'
string|"'ITerminalProtocol'"
op|','
string|"'ITerminalTransport'"
op|','
nl|'\n'
nl|'\n'
comment|'# Symbolic constants'
nl|'\n'
string|"'modes'"
op|','
string|"'privateModes'"
op|','
string|"'FUNCTION_KEYS'"
op|','
nl|'\n'
nl|'\n'
string|"'CS_US'"
op|','
string|"'CS_UK'"
op|','
string|"'CS_DRAWING'"
op|','
string|"'CS_ALTERNATE'"
op|','
string|"'CS_ALTERNATE_SPECIAL'"
op|','
nl|'\n'
string|"'G0'"
op|','
string|"'G1'"
op|','
string|"'G2'"
op|','
string|"'G3'"
op|','
nl|'\n'
nl|'\n'
string|"'UNDERLINE'"
op|','
string|"'REVERSE_VIDEO'"
op|','
string|"'BLINK'"
op|','
string|"'BOLD'"
op|','
string|"'NORMAL'"
op|','
nl|'\n'
nl|'\n'
comment|'# Protocol classes'
nl|'\n'
string|"'ServerProtocol'"
op|','
string|"'ClientProtocol'"
op|']'
newline|'\n'
endmarker|''
end_unit

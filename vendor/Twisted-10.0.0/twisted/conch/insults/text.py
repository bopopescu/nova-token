begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_text -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nCharacter attribute manipulation API\n\nThis module provides a domain-specific language (using Python syntax)\nfor the creation of text with additional display attributes associated\nwith it.  It is intended as an alternative to manually building up\nstrings containing ECMA 48 character attribute control codes.  It\ncurrently supports foreground and background colors (black, red,\ngreen, yellow, blue, magenta, cyan, and white), intensity selection,\nunderlining, blinking and reverse video.  Character set selection\nsupport is planned.\n\nCharacter attributes are specified by using two Python operations:\nattribute lookup and indexing.  For example, the string \\"Hello\nworld\\" with red foreground and all other attributes set to their\ndefaults, assuming the name twisted.conch.insults.text.attributes has\nbeen imported and bound to the name \\"A\\" (with the statement C{from\ntwisted.conch.insults.text import attributes as A}, for example) one\nuses this expression::\n\n | A.fg.red[\\"Hello world\\"]\n\nOther foreground colors are set by substituting their name for\n\\"red\\".  To set both a foreground and a background color, this\nexpression is used::\n\n | A.fg.red[A.bg.green[\\"Hello world\\"]]\n\nNote that either A.bg.green can be nested within A.fg.red or vice\nversa.  Also note that multiple items can be nested within a single\nindex operation by separating them with commas::\n\n | A.bg.green[A.fg.red[\\"Hello\\"], " ", A.fg.blue[\\"world\\"]]\n\nOther character attributes are set in a similar fashion.  To specify a\nblinking version of the previous expression::\n\n | A.blink[A.bg.green[A.fg.red[\\"Hello\\"], " ", A.fg.blue[\\"world\\"]]]\n\nC{A.reverseVideo}, C{A.underline}, and C{A.bold} are also valid.\n\nA third operation is actually supported: unary negation.  This turns\noff an attribute when an enclosing expression would otherwise have\ncaused it to be on.  For example::\n\n | A.underline[A.fg.red[\\"Hello\\", -A.underline[\\" world\\"]]]\n\n@author: Jp Calderone\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'insults'
name|'import'
name|'helper'
op|','
name|'insults'
newline|'\n'
nl|'\n'
DECL|class|_Attribute
name|'class'
name|'_Attribute'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'children'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'isinstance'
op|'('
name|'item'
op|','
op|'('
name|'list'
op|','
name|'tuple'
op|','
name|'_Attribute'
op|','
name|'str'
op|')'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'item'
op|','
op|'('
name|'list'
op|','
name|'tuple'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'children'
op|'.'
name|'extend'
op|'('
name|'item'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'children'
op|'.'
name|'append'
op|'('
name|'item'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|serialize
dedent|''
name|'def'
name|'serialize'
op|'('
name|'self'
op|','
name|'write'
op|','
name|'attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'attrs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'attrs'
op|'='
name|'helper'
op|'.'
name|'CharacterAttribute'
op|'('
op|')'
newline|'\n'
dedent|''
name|'for'
name|'ch'
name|'in'
name|'self'
op|'.'
name|'children'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'ch'
op|','
name|'_Attribute'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ch'
op|'.'
name|'serialize'
op|'('
name|'write'
op|','
name|'attrs'
op|'.'
name|'copy'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'write'
op|'('
name|'attrs'
op|'.'
name|'toVT102'
op|'('
op|')'
op|')'
newline|'\n'
name|'write'
op|'('
name|'ch'
op|')'
newline|'\n'
nl|'\n'
DECL|class|_NormalAttr
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'_NormalAttr'
op|'('
name|'_Attribute'
op|')'
op|':'
newline|'\n'
DECL|member|serialize
indent|'    '
name|'def'
name|'serialize'
op|'('
name|'self'
op|','
name|'write'
op|','
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'attrs'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'_NormalAttr'
op|','
name|'self'
op|')'
op|'.'
name|'serialize'
op|'('
name|'write'
op|','
name|'attrs'
op|')'
newline|'\n'
nl|'\n'
DECL|class|_OtherAttr
dedent|''
dedent|''
name|'class'
name|'_OtherAttr'
op|'('
name|'_Attribute'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'attrname'
op|','
name|'attrvalue'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'attrname'
op|'='
name|'attrname'
newline|'\n'
name|'self'
op|'.'
name|'attrvalue'
op|'='
name|'attrvalue'
newline|'\n'
name|'self'
op|'.'
name|'children'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|__neg__
dedent|''
name|'def'
name|'__neg__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'_OtherAttr'
op|'('
name|'self'
op|'.'
name|'attrname'
op|','
name|'not'
name|'self'
op|'.'
name|'attrvalue'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'children'
op|'.'
name|'extend'
op|'('
name|'self'
op|'.'
name|'children'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|serialize
dedent|''
name|'def'
name|'serialize'
op|'('
name|'self'
op|','
name|'write'
op|','
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'attrs'
op|'='
name|'attrs'
op|'.'
name|'wantOne'
op|'('
op|'**'
op|'{'
name|'self'
op|'.'
name|'attrname'
op|':'
name|'self'
op|'.'
name|'attrvalue'
op|'}'
op|')'
newline|'\n'
name|'super'
op|'('
name|'_OtherAttr'
op|','
name|'self'
op|')'
op|'.'
name|'serialize'
op|'('
name|'write'
op|','
name|'attrs'
op|')'
newline|'\n'
nl|'\n'
DECL|class|_ColorAttr
dedent|''
dedent|''
name|'class'
name|'_ColorAttr'
op|'('
name|'_Attribute'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'color'
op|','
name|'ground'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'color'
op|'='
name|'color'
newline|'\n'
name|'self'
op|'.'
name|'ground'
op|'='
name|'ground'
newline|'\n'
name|'self'
op|'.'
name|'children'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|serialize
dedent|''
name|'def'
name|'serialize'
op|'('
name|'self'
op|','
name|'write'
op|','
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'attrs'
op|'='
name|'attrs'
op|'.'
name|'wantOne'
op|'('
op|'**'
op|'{'
name|'self'
op|'.'
name|'ground'
op|':'
name|'self'
op|'.'
name|'color'
op|'}'
op|')'
newline|'\n'
name|'super'
op|'('
name|'_ColorAttr'
op|','
name|'self'
op|')'
op|'.'
name|'serialize'
op|'('
name|'write'
op|','
name|'attrs'
op|')'
newline|'\n'
nl|'\n'
DECL|class|_ForegroundColorAttr
dedent|''
dedent|''
name|'class'
name|'_ForegroundColorAttr'
op|'('
name|'_ColorAttr'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'color'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'_ForegroundColorAttr'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'color'
op|','
string|"'foreground'"
op|')'
newline|'\n'
nl|'\n'
DECL|class|_BackgroundColorAttr
dedent|''
dedent|''
name|'class'
name|'_BackgroundColorAttr'
op|'('
name|'_ColorAttr'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'color'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'_BackgroundColorAttr'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'color'
op|','
string|"'background'"
op|')'
newline|'\n'
nl|'\n'
DECL|class|CharacterAttributes
dedent|''
dedent|''
name|'class'
name|'CharacterAttributes'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|class|_ColorAttribute
indent|'    '
name|'class'
name|'_ColorAttribute'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'        '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'ground'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ground'
op|'='
name|'ground'
newline|'\n'
nl|'\n'
DECL|variable|attrs
dedent|''
name|'attrs'
op|'='
op|'{'
nl|'\n'
string|"'black'"
op|':'
name|'helper'
op|'.'
name|'BLACK'
op|','
nl|'\n'
string|"'red'"
op|':'
name|'helper'
op|'.'
name|'RED'
op|','
nl|'\n'
string|"'green'"
op|':'
name|'helper'
op|'.'
name|'GREEN'
op|','
nl|'\n'
string|"'yellow'"
op|':'
name|'helper'
op|'.'
name|'YELLOW'
op|','
nl|'\n'
string|"'blue'"
op|':'
name|'helper'
op|'.'
name|'BLUE'
op|','
nl|'\n'
string|"'magenta'"
op|':'
name|'helper'
op|'.'
name|'MAGENTA'
op|','
nl|'\n'
string|"'cyan'"
op|':'
name|'helper'
op|'.'
name|'CYAN'
op|','
nl|'\n'
string|"'white'"
op|':'
name|'helper'
op|'.'
name|'WHITE'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'ground'
op|'('
name|'self'
op|'.'
name|'attrs'
op|'['
name|'name'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'AttributeError'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|fg
dedent|''
dedent|''
dedent|''
name|'fg'
op|'='
name|'_ColorAttribute'
op|'('
name|'_ForegroundColorAttr'
op|')'
newline|'\n'
DECL|variable|bg
name|'bg'
op|'='
name|'_ColorAttribute'
op|'('
name|'_BackgroundColorAttr'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|attrs
name|'attrs'
op|'='
op|'{'
nl|'\n'
string|"'bold'"
op|':'
name|'insults'
op|'.'
name|'BOLD'
op|','
nl|'\n'
string|"'blink'"
op|':'
name|'insults'
op|'.'
name|'BLINK'
op|','
nl|'\n'
string|"'underline'"
op|':'
name|'insults'
op|'.'
name|'UNDERLINE'
op|','
nl|'\n'
string|"'reverseVideo'"
op|':'
name|'insults'
op|'.'
name|'REVERSE_VIDEO'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'normal'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'_NormalAttr'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'attrs'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'_OtherAttr'
op|'('
name|'name'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'AttributeError'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|function|flatten
dedent|''
dedent|''
name|'def'
name|'flatten'
op|'('
name|'output'
op|','
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Serialize a sequence of characters with attribute information\n\n    The resulting string can be interpreted by VT102-compatible\n    terminals so that the contained characters are displayed and, for\n    those attributes which the terminal supports, have the attributes\n    specified in the input.\n\n    For example, if your terminal is VT102 compatible, you might run\n    this for a colorful variation on the \\"hello world\\" theme::\n\n     | from twisted.conch.insults.text import flatten, attributes as A\n     | from twisted.conch.insults.helper import CharacterAttribute\n     | print flatten(\n     |     A.normal[A.bold[A.fg.red[\'He\'], A.fg.green[\'ll\'], A.fg.magenta[\'o\'], \' \',\n     |                     A.fg.yellow[\'Wo\'], A.fg.blue[\'rl\'], A.fg.cyan[\'d!\']]],\n     |     CharacterAttribute())\n\n    @param output: Object returned by accessing attributes of the\n    module-level attributes object.\n\n    @param attrs: A L{twisted.conch.insults.helper.CharacterAttribute}\n    instance\n\n    @return: A VT102-friendly string\n    """'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'output'
op|'.'
name|'serialize'
op|'('
name|'L'
op|'.'
name|'append'
op|','
name|'attrs'
op|')'
newline|'\n'
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'L'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|attributes
dedent|''
name|'attributes'
op|'='
name|'CharacterAttributes'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|__all__
name|'__all__'
op|'='
op|'['
string|"'attributes'"
op|','
string|"'flatten'"
op|']'
newline|'\n'
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2007-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nThis module contains interfaces defined for the L{twisted.conch} package.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'Interface'
op|','
name|'Attribute'
newline|'\n'
nl|'\n'
DECL|class|IConchUser
name|'class'
name|'IConchUser'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A user who has been authenticated to Cred through Conch.  This is\n    the interface between the SSH connection and the user.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|conn
name|'conn'
op|'='
name|'Attribute'
op|'('
string|"'The SSHConnection object for this user.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|lookupChannel
name|'def'
name|'lookupChannel'
op|'('
name|'channelType'
op|','
name|'windowSize'
op|','
name|'maxPacket'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side requested a channel of some sort.\n        channelType is the type of channel being requested,\n        windowSize is the initial size of the remote window,\n        maxPacket is the largest packet we should send,\n        data is any other packet data (often nothing).\n\n        We return a subclass of L{SSHChannel<ssh.channel.SSHChannel>}.  If\n        an appropriate channel can not be found, an exception will be\n        raised.  If a L{ConchError<error.ConchError>} is raised, the .value\n        will be the message, and the .data will be the error code.\n\n        @type channelType:  C{str}\n        @type windowSize:   C{int}\n        @type maxPacket:    C{int}\n        @type data:         C{str}\n        @rtype:             subclass of L{SSHChannel}/C{tuple}\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupSubsystem
dedent|''
name|'def'
name|'lookupSubsystem'
op|'('
name|'subsystem'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side requested a subsystem.\n        subsystem is the name of the subsystem being requested.\n        data is any other packet data (often nothing).\n\n        We return a L{Protocol}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|gotGlobalRequest
dedent|''
name|'def'
name|'gotGlobalRequest'
op|'('
name|'requestType'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A global request was sent from the other side.\n\n        By default, this dispatches to a method \'channel_channelType\' with any\n        non-alphanumerics in the channelType replace with _\'s.  If it cannot\n        find a suitable method, it returns an OPEN_UNKNOWN_CHANNEL_TYPE error.\n        The method is called with arguments of windowSize, maxPacket, data.\n        """'
newline|'\n'
nl|'\n'
DECL|class|ISession
dedent|''
dedent|''
name|'class'
name|'ISession'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|getPty
indent|'    '
name|'def'
name|'getPty'
op|'('
name|'term'
op|','
name|'windowSize'
op|','
name|'modes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a psuedo-terminal for use by a shell or command.\n\n        If a psuedo-terminal is not available, or the request otherwise\n        fails, raise an exception.\n        """'
newline|'\n'
nl|'\n'
DECL|member|openShell
dedent|''
name|'def'
name|'openShell'
op|'('
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Open a shell and connect it to proto.\n\n        @param proto: a L{ProcessProtocol} instance.\n        """'
newline|'\n'
nl|'\n'
DECL|member|execCommand
dedent|''
name|'def'
name|'execCommand'
op|'('
name|'proto'
op|','
name|'command'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Execute a command.\n\n        @param proto: a L{ProcessProtocol} instance.\n        """'
newline|'\n'
nl|'\n'
DECL|member|windowChanged
dedent|''
name|'def'
name|'windowChanged'
op|'('
name|'newWindowSize'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the size of the remote screen has changed.\n        """'
newline|'\n'
nl|'\n'
DECL|member|eofReceived
dedent|''
name|'def'
name|'eofReceived'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the other side has indicated no more data will be sent.\n        """'
newline|'\n'
nl|'\n'
DECL|member|closed
dedent|''
name|'def'
name|'closed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the session is closed.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ISFTPServer
dedent|''
dedent|''
name|'class'
name|'ISFTPServer'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The only attribute of this class is "avatar".  It is the avatar\n    returned by the Realm that we are authenticated with, and\n    represents the logged-in user.  Each method should check to verify\n    that the user has permission for their actions.\n    """'
newline|'\n'
nl|'\n'
DECL|member|gotVersion
name|'def'
name|'gotVersion'
op|'('
name|'otherVersion'
op|','
name|'extData'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the client sends their version info.\n\n        otherVersion is an integer representing the version of the SFTP\n        protocol they are claiming.\n        extData is a dictionary of extended_name : extended_data items.\n        These items are sent by the client to indicate additional features.\n\n        This method should return a dictionary of extended_name : extended_data\n        items.  These items are the additional features (if any) supported\n        by the server.\n        """'
newline|'\n'
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|openFile
dedent|''
name|'def'
name|'openFile'
op|'('
name|'filename'
op|','
name|'flags'
op|','
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the clients asks to open a file.\n\n        @param filename: a string representing the file to open.\n\n        @param flags: an integer of the flags to open the file with, ORed together.\n        The flags and their values are listed at the bottom of this file.\n\n        @param attrs: a list of attributes to open the file with.  It is a\n        dictionary, consisting of 0 or more keys.  The possible keys are::\n\n            size: the size of the file in bytes\n            uid: the user ID of the file as an integer\n            gid: the group ID of the file as an integer\n            permissions: the permissions of the file with as an integer.\n            the bit representation of this field is defined by POSIX.\n            atime: the access time of the file as seconds since the epoch.\n            mtime: the modification time of the file as seconds since the epoch.\n            ext_*: extended attributes.  The server is not required to\n            understand this, but it may.\n\n        NOTE: there is no way to indicate text or binary files.  it is up\n        to the SFTP client to deal with this.\n\n        This method returns an object that meets the ISFTPFile interface.\n        Alternatively, it can return a L{Deferred} that will be called back\n        with the object.\n        """'
newline|'\n'
nl|'\n'
DECL|member|removeFile
dedent|''
name|'def'
name|'removeFile'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove the given file.\n\n        This method returns when the remove succeeds, or a Deferred that is\n        called back when it succeeds.\n\n        @param filename: the name of the file as a string.\n        """'
newline|'\n'
nl|'\n'
DECL|member|renameFile
dedent|''
name|'def'
name|'renameFile'
op|'('
name|'oldpath'
op|','
name|'newpath'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Rename the given file.\n\n        This method returns when the rename succeeds, or a L{Deferred} that is\n        called back when it succeeds. If the rename fails, C{renameFile} will\n        raise an implementation-dependent exception.\n\n        @param oldpath: the current location of the file.\n        @param newpath: the new file name.\n        """'
newline|'\n'
nl|'\n'
DECL|member|makeDirectory
dedent|''
name|'def'
name|'makeDirectory'
op|'('
name|'path'
op|','
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a directory.\n\n        This method returns when the directory is created, or a Deferred that\n        is called back when it is created.\n\n        @param path: the name of the directory to create as a string.\n        @param attrs: a dictionary of attributes to create the directory with.\n        Its meaning is the same as the attrs in the L{openFile} method.\n        """'
newline|'\n'
nl|'\n'
DECL|member|removeDirectory
dedent|''
name|'def'
name|'removeDirectory'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove a directory (non-recursively)\n\n        It is an error to remove a directory that has files or directories in\n        it.\n\n        This method returns when the directory is removed, or a Deferred that\n        is called back when it is removed.\n\n        @param path: the directory to remove.\n        """'
newline|'\n'
nl|'\n'
DECL|member|openDirectory
dedent|''
name|'def'
name|'openDirectory'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Open a directory for scanning.\n\n        This method returns an iterable object that has a close() method,\n        or a Deferred that is called back with same.\n\n        The close() method is called when the client is finished reading\n        from the directory.  At this point, the iterable will no longer\n        be used.\n\n        The iterable should return triples of the form (filename,\n        longname, attrs) or Deferreds that return the same.  The\n        sequence must support __getitem__, but otherwise may be any\n        \'sequence-like\' object.\n\n        filename is the name of the file relative to the directory.\n        logname is an expanded format of the filename.  The recommended format\n        is:\n        -rwxr-xr-x   1 mjos     staff      348911 Mar 25 14:29 t-filexfer\n        1234567890 123 12345678 12345678 12345678 123456789012\n\n        The first line is sample output, the second is the length of the field.\n        The fields are: permissions, link count, user owner, group owner,\n        size in bytes, modification time.\n\n        attrs is a dictionary in the format of the attrs argument to openFile.\n\n        @param path: the directory to open.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getAttrs
dedent|''
name|'def'
name|'getAttrs'
op|'('
name|'path'
op|','
name|'followLinks'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the attributes for the given path.\n\n        This method returns a dictionary in the same format as the attrs\n        argument to openFile or a Deferred that is called back with same.\n\n        @param path: the path to return attributes for as a string.\n        @param followLinks: a boolean.  If it is True, follow symbolic links\n        and return attributes for the real path at the base.  If it is False,\n        return attributes for the specified path.\n        """'
newline|'\n'
nl|'\n'
DECL|member|setAttrs
dedent|''
name|'def'
name|'setAttrs'
op|'('
name|'path'
op|','
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the attributes for the path.\n\n        This method returns when the attributes are set or a Deferred that is\n        called back when they are.\n\n        @param path: the path to set attributes for as a string.\n        @param attrs: a dictionary in the same format as the attrs argument to\n        L{openFile}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|readLink
dedent|''
name|'def'
name|'readLink'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Find the root of a set of symbolic links.\n\n        This method returns the target of the link, or a Deferred that\n        returns the same.\n\n        @param path: the path of the symlink to read.\n        """'
newline|'\n'
nl|'\n'
DECL|member|makeLink
dedent|''
name|'def'
name|'makeLink'
op|'('
name|'linkPath'
op|','
name|'targetPath'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a symbolic link.\n\n        This method returns when the link is made, or a Deferred that\n        returns the same.\n\n        @param linkPath: the pathname of the symlink as a string.\n        @param targetPath: the path of the target of the link as a string.\n        """'
newline|'\n'
nl|'\n'
DECL|member|realPath
dedent|''
name|'def'
name|'realPath'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convert any path to an absolute path.\n\n        This method returns the absolute path as a string, or a Deferred\n        that returns the same.\n\n        @param path: the path to convert as a string.\n        """'
newline|'\n'
nl|'\n'
DECL|member|extendedRequest
dedent|''
name|'def'
name|'extendedRequest'
op|'('
name|'extendedName'
op|','
name|'extendedData'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This is the extension mechanism for SFTP.  The other side can send us\n        arbitrary requests.\n\n        If we don\'t implement the request given by extendedName, raise\n        NotImplementedError.\n\n        The return value is a string, or a Deferred that will be called\n        back with a string.\n\n        @param extendedName: the name of the request as a string.\n        @param extendedData: the data the other side sent with the request,\n        as a string.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IKnownHostEntry
dedent|''
dedent|''
name|'class'
name|'IKnownHostEntry'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A L{IKnownHostEntry} is an entry in an OpenSSH-formatted C{known_hosts}\n    file.\n\n    @since: 8.2\n    """'
newline|'\n'
nl|'\n'
DECL|member|matchesKey
name|'def'
name|'matchesKey'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return True if this entry matches the given Key object, False\n        otherwise.\n\n        @param key: The key object to match against.\n        @type key: L{twisted.conch.ssh.Key}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|matchesHost
dedent|''
name|'def'
name|'matchesHost'
op|'('
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return True if this entry matches the given hostname, False otherwise.\n\n        Note that this does no name resolution; if you want to match an IP\n        address, you have to resolve it yourself, and pass it in as a dotted\n        quad string.\n\n        @param key: The hostname to match against.\n        @type key: L{str}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|toString
dedent|''
name|'def'
name|'toString'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @return: a serialized string representation of this entry, suitable for\n        inclusion in a known_hosts file.  (Newline not included.)\n\n        @rtype: L{str}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ISFTPFile
dedent|''
dedent|''
name|'class'
name|'ISFTPFile'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This represents an open file on the server.  An object adhering to this\n    interface should be returned from L{openFile}().\n    """'
newline|'\n'
nl|'\n'
DECL|member|close
name|'def'
name|'close'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close the file.\n\n        This method returns nothing if the close succeeds immediately, or a\n        Deferred that is called back when the close succeeds.\n        """'
newline|'\n'
nl|'\n'
DECL|member|readChunk
dedent|''
name|'def'
name|'readChunk'
op|'('
name|'offset'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Read from the file.\n\n        If EOF is reached before any data is read, raise EOFError.\n\n        This method returns the data as a string, or a Deferred that is\n        called back with same.\n\n        @param offset: an integer that is the index to start from in the file.\n        @param length: the maximum length of data to return.  The actual amount\n        returned may less than this.  For normal disk files, however,\n        this should read the requested number (up to the end of the file).\n        """'
newline|'\n'
nl|'\n'
DECL|member|writeChunk
dedent|''
name|'def'
name|'writeChunk'
op|'('
name|'offset'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write to the file.\n\n        This method returns when the write completes, or a Deferred that is\n        called when it completes.\n\n        @param offset: an integer that is the index to start from in the file.\n        @param data: a string that is the data to write.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getAttrs
dedent|''
name|'def'
name|'getAttrs'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the attributes for the file.\n\n        This method returns a dictionary in the same format as the attrs\n        argument to L{openFile} or a L{Deferred} that is called back with same.\n        """'
newline|'\n'
nl|'\n'
DECL|member|setAttrs
dedent|''
name|'def'
name|'setAttrs'
op|'('
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the attributes for the file.\n\n        This method returns when the attributes are set or a Deferred that is\n        called back when they are.\n\n        @param attrs: a dictionary in the same format as the attrs argument to\n        L{openFile}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

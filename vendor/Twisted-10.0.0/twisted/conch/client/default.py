begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_knownhosts,twisted.conch.test.test_default -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nVarious classes and functions for implementing user-interaction in the\ncommand-line conch client.\n\nYou probably shouldn\'t use anything in this module directly, since it assumes\nyou are sitting at an interactive terminal.  For example, to programmatically\ninteract with a known_hosts database, use L{twisted.conch.client.knownhosts}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'error'
name|'import'
name|'ConchError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
name|'import'
name|'common'
op|','
name|'keys'
op|','
name|'userauth'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'protocol'
op|','
name|'reactor'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'client'
op|'.'
name|'knownhosts'
name|'import'
name|'KnownHostsFile'
op|','
name|'ConsoleUI'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'client'
name|'import'
name|'agent'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'sys'
op|','
name|'base64'
op|','
name|'getpass'
newline|'\n'
nl|'\n'
comment|"# This name is bound so that the unit tests can use 'patch' to override it."
nl|'\n'
DECL|variable|_open
name|'_open'
op|'='
name|'open'
newline|'\n'
nl|'\n'
DECL|function|verifyHostKey
name|'def'
name|'verifyHostKey'
op|'('
name|'transport'
op|','
name|'host'
op|','
name|'pubKey'
op|','
name|'fingerprint'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Verify a host\'s key.\n\n    This function is a gross vestige of some bad factoring in the client\n    internals.  The actual implementation, and a better signature of this logic\n    is in L{KnownHostsFile.verifyHostKey}.  This function is not deprecated yet\n    because the callers have not yet been rehabilitated, but they should\n    eventually be changed to call that method instead.\n\n    However, this function does perform two functions not implemented by\n    L{KnownHostsFile.verifyHostKey}.  It determines the path to the user\'s\n    known_hosts file based on the options (which should really be the options\n    object\'s job), and it provides an opener to L{ConsoleUI} which opens\n    \'/dev/tty\' so that the user will be prompted on the tty of the process even\n    if the input and output of the process has been redirected.  This latter\n    part is, somewhat obviously, not portable, but I don\'t know of a portable\n    equivalent that could be used.\n\n    @param host: Due to a bug in L{SSHClientTransport.verifyHostKey}, this is\n    always the dotted-quad IP address of the host being connected to.\n    @type host: L{str}\n\n    @param transport: the client transport which is attempting to connect to\n    the given host.\n    @type transport: L{SSHClientTransport}\n\n    @param fingerprint: the fingerprint of the given public key, in\n    xx:xx:xx:... format.  This is ignored in favor of getting the fingerprint\n    from the key itself.\n    @type fingerprint: L{str}\n\n    @param pubKey: The public key of the server being connected to.\n    @type pubKey: L{str}\n\n    @return: a L{Deferred} which fires with C{1} if the key was successfully\n    verified, or fails if the key could not be successfully verified.  Failure\n    types may include L{HostKeyChanged}, L{UserRejectedKey}, L{IOError} or\n    L{KeyboardInterrupt}.\n    """'
newline|'\n'
name|'actualHost'
op|'='
name|'transport'
op|'.'
name|'factory'
op|'.'
name|'options'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'actualKey'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'pubKey'
op|')'
newline|'\n'
name|'kh'
op|'='
name|'KnownHostsFile'
op|'.'
name|'fromPath'
op|'('
name|'FilePath'
op|'('
nl|'\n'
name|'transport'
op|'.'
name|'factory'
op|'.'
name|'options'
op|'['
string|"'known-hosts'"
op|']'
nl|'\n'
name|'or'
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
string|'"~/.ssh/known_hosts"'
op|')'
nl|'\n'
op|')'
op|')'
newline|'\n'
name|'ui'
op|'='
name|'ConsoleUI'
op|'('
name|'lambda'
op|':'
name|'_open'
op|'('
string|'"/dev/tty"'
op|','
string|'"r+b"'
op|')'
op|')'
newline|'\n'
name|'return'
name|'kh'
op|'.'
name|'verifyHostKey'
op|'('
name|'ui'
op|','
name|'actualHost'
op|','
name|'host'
op|','
name|'actualKey'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|isInKnownHosts
dedent|''
name|'def'
name|'isInKnownHosts'
op|'('
name|'host'
op|','
name|'pubKey'
op|','
name|'options'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""checks to see if host is in the known_hosts file for the user.\n    returns 0 if it isn\'t, 1 if it is and is the same, 2 if it\'s changed.\n    """'
newline|'\n'
name|'keyType'
op|'='
name|'common'
op|'.'
name|'getNS'
op|'('
name|'pubKey'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'retVal'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'options'
op|'['
string|"'known-hosts'"
op|']'
name|'and'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
string|"'~/.ssh/'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|"'Creating ~/.ssh directory...'"
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
string|"'~/.ssh'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'kh_file'
op|'='
name|'options'
op|'['
string|"'known-hosts'"
op|']'
name|'or'
string|"'~/.ssh/known_hosts'"
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'known_hosts'
op|'='
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
name|'kh_file'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'for'
name|'line'
name|'in'
name|'known_hosts'
op|'.'
name|'xreadlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'split'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'split'
op|')'
op|'<'
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'hosts'
op|','
name|'hostKeyType'
op|','
name|'encodedKey'
op|'='
name|'split'
op|'['
op|':'
number|'3'
op|']'
newline|'\n'
name|'if'
name|'host'
name|'not'
name|'in'
name|'hosts'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|':'
comment|'# incorrect host'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'hostKeyType'
op|'!='
name|'keyType'
op|':'
comment|'# incorrect type of key'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'decodedKey'
op|'='
name|'base64'
op|'.'
name|'decodestring'
op|'('
name|'encodedKey'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'decodedKey'
op|'=='
name|'pubKey'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'retVal'
op|'='
number|'2'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'retVal'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SSHUserAuthClient
dedent|''
name|'class'
name|'SSHUserAuthClient'
op|'('
name|'userauth'
op|'.'
name|'SSHUserAuthClient'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'options'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'userauth'
op|'.'
name|'SSHUserAuthClient'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'user'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'keyAgent'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'options'
op|'='
name|'options'
newline|'\n'
name|'self'
op|'.'
name|'usedFiles'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'not'
name|'options'
op|'.'
name|'identitys'
op|':'
newline|'\n'
indent|'            '
name|'options'
op|'.'
name|'identitys'
op|'='
op|'['
string|"'~/.ssh/id_rsa'"
op|','
string|"'~/.ssh/id_dsa'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|serviceStarted
dedent|''
dedent|''
name|'def'
name|'serviceStarted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'SSH_AUTH_SOCK'"
name|'in'
name|'os'
op|'.'
name|'environ'
name|'and'
name|'not'
name|'self'
op|'.'
name|'options'
op|'['
string|"'noagent'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'using agent'"
op|')'
newline|'\n'
name|'cc'
op|'='
name|'protocol'
op|'.'
name|'ClientCreator'
op|'('
name|'reactor'
op|','
name|'agent'
op|'.'
name|'SSHAgentClient'
op|')'
newline|'\n'
name|'d'
op|'='
name|'cc'
op|'.'
name|'connectUNIX'
op|'('
name|'os'
op|'.'
name|'environ'
op|'['
string|"'SSH_AUTH_SOCK'"
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_setAgent'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebSetAgent'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'userauth'
op|'.'
name|'SSHUserAuthClient'
op|'.'
name|'serviceStarted'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|serviceStopped
dedent|''
dedent|''
name|'def'
name|'serviceStopped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'keyAgent'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'keyAgent'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'keyAgent'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_setAgent
dedent|''
dedent|''
name|'def'
name|'_setAgent'
op|'('
name|'self'
op|','
name|'a'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'keyAgent'
op|'='
name|'a'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'keyAgent'
op|'.'
name|'getPublicKeys'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'self'
op|'.'
name|'_ebSetAgent'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_ebSetAgent
dedent|''
name|'def'
name|'_ebSetAgent'
op|'('
name|'self'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'userauth'
op|'.'
name|'SSHUserAuthClient'
op|'.'
name|'serviceStarted'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_getPassword
dedent|''
name|'def'
name|'_getPassword'
op|'('
name|'self'
op|','
name|'prompt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'oldout'
op|','
name|'oldin'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|','
name|'sys'
op|'.'
name|'stdin'
newline|'\n'
name|'sys'
op|'.'
name|'stdin'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'open'
op|'('
string|"'/dev/tty'"
op|','
string|"'r+'"
op|')'
newline|'\n'
name|'p'
op|'='
name|'getpass'
op|'.'
name|'getpass'
op|'('
name|'prompt'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|','
name|'sys'
op|'.'
name|'stdin'
op|'='
name|'oldout'
op|','
name|'oldin'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'KeyboardInterrupt'
op|','
name|'IOError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'print'
newline|'\n'
name|'raise'
name|'ConchError'
op|'('
string|"'PEBKAC'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|getPassword
dedent|''
dedent|''
name|'def'
name|'getPassword'
op|'('
name|'self'
op|','
name|'prompt'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'prompt'
op|':'
newline|'\n'
indent|'            '
name|'prompt'
op|'='
string|'"%s@%s\'s password: "'
op|'%'
op|'('
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'transport'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
op|'.'
name|'host'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'='
name|'self'
op|'.'
name|'_getPassword'
op|'('
name|'prompt'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'p'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ConchError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPublicKey
dedent|''
dedent|''
name|'def'
name|'getPublicKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a public key from the key agent if possible, otherwise look in\n        the next configured identity file for one.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'keyAgent'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|'='
name|'self'
op|'.'
name|'keyAgent'
op|'.'
name|'getPublicKey'
op|'('
op|')'
newline|'\n'
name|'if'
name|'key'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'key'
newline|'\n'
dedent|''
dedent|''
name|'files'
op|'='
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'self'
op|'.'
name|'options'
op|'.'
name|'identitys'
name|'if'
name|'x'
name|'not'
name|'in'
name|'self'
op|'.'
name|'usedFiles'
op|']'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
name|'str'
op|'('
name|'self'
op|'.'
name|'options'
op|'.'
name|'identitys'
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
name|'str'
op|'('
name|'files'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'files'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'file'
op|'='
name|'files'
op|'['
number|'0'
op|']'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
name|'file'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'usedFiles'
op|'.'
name|'append'
op|'('
name|'file'
op|')'
newline|'\n'
name|'file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
name|'file'
op|')'
newline|'\n'
name|'file'
op|'+='
string|"'.pub'"
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'getPublicKey'
op|'('
op|')'
comment|'# try again'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromFile'
op|'('
name|'file'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'keys'
op|'.'
name|'BadKeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'getPublicKey'
op|'('
op|')'
comment|'# try again'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|signData
dedent|''
dedent|''
name|'def'
name|'signData'
op|'('
name|'self'
op|','
name|'publicKey'
op|','
name|'signData'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Extend the base signing behavior by using an SSH agent to sign the\n        data, if one is available.\n\n        @type publicKey: L{Key}\n        @type signData: C{str}\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'usedFiles'
op|':'
comment|'# agent key'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'keyAgent'
op|'.'
name|'signData'
op|'('
name|'publicKey'
op|'.'
name|'blob'
op|'('
op|')'
op|','
name|'signData'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'userauth'
op|'.'
name|'SSHUserAuthClient'
op|'.'
name|'signData'
op|'('
name|'self'
op|','
name|'publicKey'
op|','
name|'signData'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPrivateKey
dedent|''
dedent|''
name|'def'
name|'getPrivateKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to load the private key from the last used file identified by\n        C{getPublicKey}, potentially asking for the passphrase if the key is\n        encrypted.\n        """'
newline|'\n'
name|'file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
name|'self'
op|'.'
name|'usedFiles'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromFile'
op|'('
name|'file'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'keys'
op|'.'
name|'EncryptedKeyError'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'prompt'
op|'='
string|'"Enter passphrase for key \'%s\': "'
op|'%'
name|'self'
op|'.'
name|'usedFiles'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'p'
op|'='
name|'self'
op|'.'
name|'_getPassword'
op|'('
name|'prompt'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromFile'
op|'('
name|'file'
op|','
name|'passphrase'
op|'='
name|'p'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'keys'
op|'.'
name|'BadKeyError'
op|','
name|'ConchError'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'ConchError'
op|'('
string|"'bad password'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'KeyboardInterrupt'
op|':'
newline|'\n'
indent|'            '
name|'print'
newline|'\n'
name|'reactor'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getGenericAnswers
dedent|''
dedent|''
name|'def'
name|'getGenericAnswers'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'instruction'
op|','
name|'prompts'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'responses'
op|'='
op|'['
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'oldout'
op|','
name|'oldin'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|','
name|'sys'
op|'.'
name|'stdin'
newline|'\n'
name|'sys'
op|'.'
name|'stdin'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'open'
op|'('
string|"'/dev/tty'"
op|','
string|"'r+'"
op|')'
newline|'\n'
name|'if'
name|'name'
op|':'
newline|'\n'
indent|'                '
name|'print'
name|'name'
newline|'\n'
dedent|''
name|'if'
name|'instruction'
op|':'
newline|'\n'
indent|'                '
name|'print'
name|'instruction'
newline|'\n'
dedent|''
name|'for'
name|'prompt'
op|','
name|'echo'
name|'in'
name|'prompts'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'echo'
op|':'
newline|'\n'
indent|'                    '
name|'responses'
op|'.'
name|'append'
op|'('
name|'raw_input'
op|'('
name|'prompt'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'responses'
op|'.'
name|'append'
op|'('
name|'getpass'
op|'.'
name|'getpass'
op|'('
name|'prompt'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'stdout'
op|','
name|'sys'
op|'.'
name|'stdin'
op|'='
name|'oldout'
op|','
name|'oldin'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'responses'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

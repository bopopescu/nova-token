begin_unit
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
comment|'#'
nl|'\n'
string|'"""Module to parse ANSI escape sequences\n\nMaintainer: Jean-Paul Calderone\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'string'
newline|'\n'
nl|'\n'
comment|'# Twisted imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
nl|'\n'
DECL|class|ColorText
name|'class'
name|'ColorText'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Represents an element of text along with the texts colors and\n    additional attributes.\n    """'
newline|'\n'
nl|'\n'
comment|'# The colors to use'
nl|'\n'
DECL|variable|COLORS
name|'COLORS'
op|'='
op|'('
string|"'b'"
op|','
string|"'r'"
op|','
string|"'g'"
op|','
string|"'y'"
op|','
string|"'l'"
op|','
string|"'m'"
op|','
string|"'c'"
op|','
string|"'w'"
op|')'
newline|'\n'
DECL|variable|BOLD_COLORS
name|'BOLD_COLORS'
op|'='
name|'tuple'
op|'('
op|'['
name|'x'
op|'.'
name|'upper'
op|'('
op|')'
name|'for'
name|'x'
name|'in'
name|'COLORS'
op|']'
op|')'
newline|'\n'
name|'BLACK'
op|','
name|'RED'
op|','
name|'GREEN'
op|','
name|'YELLOW'
op|','
name|'BLUE'
op|','
name|'MAGENTA'
op|','
name|'CYAN'
op|','
name|'WHITE'
op|'='
name|'range'
op|'('
name|'len'
op|'('
name|'COLORS'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Color names'
nl|'\n'
DECL|variable|COLOR_NAMES
name|'COLOR_NAMES'
op|'='
op|'('
nl|'\n'
string|"'Black'"
op|','
string|"'Red'"
op|','
string|"'Green'"
op|','
string|"'Yellow'"
op|','
string|"'Blue'"
op|','
string|"'Magenta'"
op|','
string|"'Cyan'"
op|','
string|"'White'"
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'text'
op|','
name|'fg'
op|','
name|'bg'
op|','
name|'display'
op|','
name|'bold'
op|','
name|'underline'
op|','
name|'flash'
op|','
name|'reverse'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'text'
op|','
name|'self'
op|'.'
name|'fg'
op|','
name|'self'
op|'.'
name|'bg'
op|'='
name|'text'
op|','
name|'fg'
op|','
name|'bg'
newline|'\n'
name|'self'
op|'.'
name|'display'
op|'='
name|'display'
newline|'\n'
name|'self'
op|'.'
name|'bold'
op|'='
name|'bold'
newline|'\n'
name|'self'
op|'.'
name|'underline'
op|'='
name|'underline'
newline|'\n'
name|'self'
op|'.'
name|'flash'
op|'='
name|'flash'
newline|'\n'
name|'self'
op|'.'
name|'reverse'
op|'='
name|'reverse'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'reverse'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fg'
op|','
name|'self'
op|'.'
name|'bg'
op|'='
name|'self'
op|'.'
name|'bg'
op|','
name|'self'
op|'.'
name|'fg'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AnsiParser
dedent|''
dedent|''
dedent|''
name|'class'
name|'AnsiParser'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Parser class for ANSI codes.\n    """'
newline|'\n'
nl|'\n'
comment|'# Terminators for cursor movement ansi controls - unsupported'
nl|'\n'
DECL|variable|CURSOR_SET
name|'CURSOR_SET'
op|'='
op|'('
string|"'H'"
op|','
string|"'f'"
op|','
string|"'A'"
op|','
string|"'B'"
op|','
string|"'C'"
op|','
string|"'D'"
op|','
string|"'R'"
op|','
string|"'s'"
op|','
string|"'u'"
op|','
string|"'d'"
op|','
string|"'G'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Terminators for erasure ansi controls - unsupported'
nl|'\n'
DECL|variable|ERASE_SET
name|'ERASE_SET'
op|'='
op|'('
string|"'J'"
op|','
string|"'K'"
op|','
string|"'P'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Terminators for mode change ansi controls - unsupported'
nl|'\n'
DECL|variable|MODE_SET
name|'MODE_SET'
op|'='
op|'('
string|"'h'"
op|','
string|"'l'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Terminators for keyboard assignment ansi controls - unsupported'
nl|'\n'
DECL|variable|ASSIGN_SET
name|'ASSIGN_SET'
op|'='
op|'('
string|"'p'"
op|','
op|')'
newline|'\n'
nl|'\n'
comment|'# Terminators for color change ansi controls - supported'
nl|'\n'
DECL|variable|COLOR_SET
name|'COLOR_SET'
op|'='
op|'('
string|"'m'"
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|variable|SETS
name|'SETS'
op|'='
op|'('
name|'CURSOR_SET'
op|','
name|'ERASE_SET'
op|','
name|'MODE_SET'
op|','
name|'ASSIGN_SET'
op|','
name|'COLOR_SET'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'defaultFG'
op|','
name|'defaultBG'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'defaultFG'
op|','
name|'self'
op|'.'
name|'defaultBG'
op|'='
name|'defaultFG'
op|','
name|'defaultBG'
newline|'\n'
name|'self'
op|'.'
name|'currentFG'
op|','
name|'self'
op|'.'
name|'currentBG'
op|'='
name|'self'
op|'.'
name|'defaultFG'
op|','
name|'self'
op|'.'
name|'defaultBG'
newline|'\n'
name|'self'
op|'.'
name|'bold'
op|','
name|'self'
op|'.'
name|'flash'
op|','
name|'self'
op|'.'
name|'underline'
op|','
name|'self'
op|'.'
name|'reverse'
op|'='
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'display'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'prepend'
op|'='
string|"''"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stripEscapes
dedent|''
name|'def'
name|'stripEscapes'
op|'('
name|'self'
op|','
name|'string'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove all ANSI color escapes from the given string.\n        """'
newline|'\n'
name|'result'
op|'='
string|"''"
newline|'\n'
name|'show'
op|'='
number|'1'
newline|'\n'
name|'i'
op|'='
number|'0'
newline|'\n'
name|'L'
op|'='
name|'len'
op|'('
name|'string'
op|')'
newline|'\n'
name|'while'
name|'i'
op|'<'
name|'L'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'show'
op|'=='
number|'0'
name|'and'
name|'string'
op|'['
name|'i'
op|']'
name|'in'
name|'_sets'
op|':'
newline|'\n'
indent|'                '
name|'show'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'show'
op|':'
newline|'\n'
indent|'                '
name|'n'
op|'='
name|'string'
op|'.'
name|'find'
op|'('
string|"'\\x1B'"
op|','
name|'i'
op|')'
newline|'\n'
name|'if'
name|'n'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'result'
op|'+'
name|'string'
op|'['
name|'i'
op|':'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'result'
op|'='
name|'result'
op|'+'
name|'string'
op|'['
name|'i'
op|':'
name|'n'
op|']'
newline|'\n'
name|'i'
op|'='
name|'n'
newline|'\n'
name|'show'
op|'='
number|'0'
newline|'\n'
dedent|''
dedent|''
name|'i'
op|'='
name|'i'
op|'+'
number|'1'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|writeString
dedent|''
name|'def'
name|'writeString'
op|'('
name|'self'
op|','
name|'colorstr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|parseString
dedent|''
name|'def'
name|'parseString'
op|'('
name|'self'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Turn a string input into a list of L{ColorText} elements.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'prepend'
op|':'
newline|'\n'
indent|'            '
name|'str'
op|'='
name|'self'
op|'.'
name|'prepend'
op|'+'
name|'str'
newline|'\n'
name|'self'
op|'.'
name|'prepend'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'parts'
op|'='
name|'str'
op|'.'
name|'split'
op|'('
string|"'\\x1B'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'writeString'
op|'('
name|'self'
op|'.'
name|'formatText'
op|'('
name|'parts'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'writeString'
op|'('
name|'self'
op|'.'
name|'formatText'
op|'('
name|'parts'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
name|'for'
name|'s'
name|'in'
name|'parts'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'L'
op|'='
name|'len'
op|'('
name|'s'
op|')'
newline|'\n'
name|'i'
op|'='
number|'0'
newline|'\n'
name|'type'
op|'='
name|'None'
newline|'\n'
name|'while'
name|'i'
op|'<'
name|'L'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'s'
op|'['
name|'i'
op|']'
name|'not'
name|'in'
name|'string'
op|'.'
name|'digits'
op|'+'
string|"'[;?'"
op|':'
newline|'\n'
indent|'                        '
name|'break'
newline|'\n'
dedent|''
name|'i'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'s'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'prepend'
op|'='
string|"'\\x1b'"
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'s'
op|'['
number|'0'
op|']'
op|'!='
string|"'['"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'writeString'
op|'('
name|'self'
op|'.'
name|'formatText'
op|'('
name|'s'
op|'['
name|'i'
op|'+'
number|'1'
op|':'
op|']'
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'s'
op|'='
name|'s'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'i'
op|'-='
number|'1'
newline|'\n'
dedent|''
name|'if'
name|'i'
op|'=='
name|'L'
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'prepend'
op|'='
string|"'\\x1b['"
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'type'
op|'='
name|'_setmap'
op|'.'
name|'get'
op|'('
name|'s'
op|'['
name|'i'
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'type'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'type'
op|'=='
name|'AnsiParser'
op|'.'
name|'COLOR_SET'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'parseColor'
op|'('
name|'s'
op|'['
op|':'
name|'i'
op|'+'
number|'1'
op|']'
op|')'
newline|'\n'
name|'s'
op|'='
name|'s'
op|'['
name|'i'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'writeString'
op|'('
name|'self'
op|'.'
name|'formatText'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'type'
op|'=='
name|'AnsiParser'
op|'.'
name|'CURSOR_SET'
op|':'
newline|'\n'
indent|'                    '
name|'cursor'
op|','
name|'s'
op|'='
name|'s'
op|'['
op|':'
name|'i'
op|'+'
number|'1'
op|']'
op|','
name|'s'
op|'['
name|'i'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'parseCursor'
op|'('
name|'cursor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'writeString'
op|'('
name|'self'
op|'.'
name|'formatText'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'type'
op|'=='
name|'AnsiParser'
op|'.'
name|'ERASE_SET'
op|':'
newline|'\n'
indent|'                    '
name|'erase'
op|','
name|'s'
op|'='
name|'s'
op|'['
op|':'
name|'i'
op|'+'
number|'1'
op|']'
op|','
name|'s'
op|'['
name|'i'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'parseErase'
op|'('
name|'erase'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'writeString'
op|'('
name|'self'
op|'.'
name|'formatText'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'type'
op|'=='
name|'AnsiParser'
op|'.'
name|'MODE_SET'
op|':'
newline|'\n'
indent|'                    '
name|'mode'
op|','
name|'s'
op|'='
name|'s'
op|'['
op|':'
name|'i'
op|'+'
number|'1'
op|']'
op|','
name|'s'
op|'['
name|'i'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
comment|"#self.parseErase('2J')"
nl|'\n'
name|'self'
op|'.'
name|'writeString'
op|'('
name|'self'
op|'.'
name|'formatText'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'i'
op|'=='
name|'L'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'prepend'
op|'='
string|"'\\x1B['"
op|'+'
name|'s'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'Unhandled ANSI control type: %c'"
op|'%'
op|'('
name|'s'
op|'['
name|'i'
op|']'
op|','
op|')'
op|')'
newline|'\n'
name|'s'
op|'='
name|'s'
op|'['
name|'i'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'writeString'
op|'('
name|'self'
op|'.'
name|'formatText'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|parseColor
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'parseColor'
op|'('
name|'self'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle a single ANSI color sequence\n        """'
newline|'\n'
comment|"# Drop the trailing 'm'"
nl|'\n'
name|'str'
op|'='
name|'str'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'str'
op|':'
newline|'\n'
indent|'            '
name|'str'
op|'='
string|"'0'"
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'parts'
op|'='
name|'map'
op|'('
name|'int'
op|','
name|'str'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'Invalid ANSI color sequence (%d): %s'"
op|'%'
op|'('
name|'len'
op|'('
name|'str'
op|')'
op|','
name|'str'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'currentFG'
op|','
name|'self'
op|'.'
name|'currentBG'
op|'='
name|'self'
op|'.'
name|'defaultFG'
op|','
name|'self'
op|'.'
name|'defaultBG'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'x'
name|'in'
name|'parts'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'x'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'currentFG'
op|','
name|'self'
op|'.'
name|'currentBG'
op|'='
name|'self'
op|'.'
name|'defaultFG'
op|','
name|'self'
op|'.'
name|'defaultBG'
newline|'\n'
name|'self'
op|'.'
name|'bold'
op|','
name|'self'
op|'.'
name|'flash'
op|','
name|'self'
op|'.'
name|'underline'
op|','
name|'self'
op|'.'
name|'reverse'
op|'='
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'display'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'x'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'bold'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'elif'
number|'30'
op|'<='
name|'x'
op|'<='
number|'37'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'currentFG'
op|'='
name|'x'
op|'-'
number|'30'
newline|'\n'
dedent|''
name|'elif'
number|'40'
op|'<='
name|'x'
op|'<='
number|'47'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'currentBG'
op|'='
name|'x'
op|'-'
number|'40'
newline|'\n'
dedent|''
name|'elif'
name|'x'
op|'=='
number|'39'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'currentFG'
op|'='
name|'self'
op|'.'
name|'defaultFG'
newline|'\n'
dedent|''
name|'elif'
name|'x'
op|'=='
number|'49'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'currentBG'
op|'='
name|'self'
op|'.'
name|'defaultBG'
newline|'\n'
dedent|''
name|'elif'
name|'x'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'underline'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'x'
op|'=='
number|'5'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'flash'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'x'
op|'=='
number|'7'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reverse'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'x'
op|'=='
number|'8'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'display'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'elif'
name|'x'
op|'=='
number|'22'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'bold'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'elif'
name|'x'
op|'=='
number|'24'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'underline'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'elif'
name|'x'
op|'=='
number|'25'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'blink'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'elif'
name|'x'
op|'=='
number|'27'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reverse'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'elif'
name|'x'
op|'=='
number|'28'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'display'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'Unrecognised ANSI color command: %d'"
op|'%'
op|'('
name|'x'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|parseCursor
dedent|''
dedent|''
dedent|''
name|'def'
name|'parseCursor'
op|'('
name|'self'
op|','
name|'cursor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|parseErase
dedent|''
name|'def'
name|'parseErase'
op|'('
name|'self'
op|','
name|'erase'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|pickColor
dedent|''
name|'def'
name|'pickColor'
op|'('
name|'self'
op|','
name|'value'
op|','
name|'mode'
op|','
name|'BOLD'
op|'='
name|'ColorText'
op|'.'
name|'BOLD_COLORS'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'mode'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ColorText'
op|'.'
name|'COLORS'
op|'['
name|'value'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'bold'
name|'and'
name|'BOLD'
op|'['
name|'value'
op|']'
name|'or'
name|'ColorText'
op|'.'
name|'COLORS'
op|'['
name|'value'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|formatText
dedent|''
dedent|''
name|'def'
name|'formatText'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'ColorText'
op|'('
nl|'\n'
name|'text'
op|','
nl|'\n'
name|'self'
op|'.'
name|'pickColor'
op|'('
name|'self'
op|'.'
name|'currentFG'
op|','
number|'0'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'pickColor'
op|'('
name|'self'
op|'.'
name|'currentBG'
op|','
number|'1'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'display'
op|','
name|'self'
op|'.'
name|'bold'
op|','
name|'self'
op|'.'
name|'underline'
op|','
name|'self'
op|'.'
name|'flash'
op|','
name|'self'
op|'.'
name|'reverse'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_sets
dedent|''
dedent|''
name|'_sets'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
string|"''"
op|'.'
name|'join'
op|','
name|'AnsiParser'
op|'.'
name|'SETS'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_setmap
name|'_setmap'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'s'
name|'in'
name|'AnsiParser'
op|'.'
name|'SETS'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'r'
name|'in'
name|'s'
op|':'
newline|'\n'
indent|'        '
name|'_setmap'
op|'['
name|'r'
op|']'
op|'='
name|'s'
newline|'\n'
dedent|''
dedent|''
name|'del'
name|'s'
newline|'\n'
endmarker|''
end_unit

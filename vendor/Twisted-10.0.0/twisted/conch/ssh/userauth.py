begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_userauth -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nImplementation of the ssh-userauth service.\nCurrently implemented authentication types are public-key and password.\n\nMaintainer: Paul Swartz\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'struct'
op|','
name|'warnings'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
name|'import'
name|'error'
op|','
name|'interfaces'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
name|'import'
name|'keys'
op|','
name|'transport'
op|','
name|'service'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
op|'.'
name|'common'
name|'import'
name|'NS'
op|','
name|'getNS'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'credentials'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'error'
name|'import'
name|'UnauthorizedLogin'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
op|','
name|'log'
op|','
name|'util'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SSHUserAuthServer
name|'class'
name|'SSHUserAuthServer'
op|'('
name|'service'
op|'.'
name|'SSHService'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A service implementing the server side of the \'ssh-userauth\' service.  It\n    is used to authenticate the user on the other side as being able to access\n    this server.\n\n    @ivar name: the name of this service: \'ssh-userauth\'\n    @type name: C{str}\n    @ivar authenticatedWith: a list of authentication methods that have\n        already been used.\n    @type authenticatedWith: C{list}\n    @ivar loginTimeout: the number of seconds we wait before disconnecting\n        the user for taking too long to authenticate\n    @type loginTimeout: C{int}\n    @ivar attemptsBeforeDisconnect: the number of failed login attempts we\n        allow before disconnecting.\n    @type attemptsBeforeDisconnect: C{int}\n    @ivar loginAttempts: the number of login attempts that have been made\n    @type loginAttempts: C{int}\n    @ivar passwordDelay: the number of seconds to delay when the user gives\n        an incorrect password\n    @type passwordDelay: C{int}\n    @ivar interfaceToMethod: a C{dict} mapping credential interfaces to\n        authentication methods.  The server checks to see which of the\n        cred interfaces have checkers and tells the client that those methods\n        are valid for authentication.\n    @type interfaceToMethod: C{dict}\n    @ivar supportedAuthentications: A list of the supported authentication\n        methods.\n    @type supportedAuthentications: C{list} of C{str}\n    @ivar user: the last username the client tried to authenticate with\n    @type user: C{str}\n    @ivar method: the current authentication method\n    @type method: C{str}\n    @ivar nextService: the service the user wants started after authentication\n        has been completed.\n    @type nextService: C{str}\n    @ivar portal: the L{twisted.cred.portal.Portal} we are using for\n        authentication\n    @type portal: L{twisted.cred.portal.Portal}\n    @ivar clock: an object with a callLater method.  Stubbed out for testing.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|name
name|'name'
op|'='
string|"'ssh-userauth'"
newline|'\n'
DECL|variable|loginTimeout
name|'loginTimeout'
op|'='
number|'10'
op|'*'
number|'60'
op|'*'
number|'60'
newline|'\n'
comment|'# 10 minutes before we disconnect them'
nl|'\n'
DECL|variable|attemptsBeforeDisconnect
name|'attemptsBeforeDisconnect'
op|'='
number|'20'
newline|'\n'
comment|'# 20 login attempts before a disconnect'
nl|'\n'
DECL|variable|passwordDelay
name|'passwordDelay'
op|'='
number|'1'
comment|'# number of seconds to delay on a failed password'
newline|'\n'
DECL|variable|clock
name|'clock'
op|'='
name|'reactor'
newline|'\n'
DECL|variable|interfaceToMethod
name|'interfaceToMethod'
op|'='
op|'{'
nl|'\n'
name|'credentials'
op|'.'
name|'ISSHPrivateKey'
op|':'
string|"'publickey'"
op|','
nl|'\n'
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|':'
string|"'password'"
op|','
nl|'\n'
name|'credentials'
op|'.'
name|'IPluggableAuthenticationModules'
op|':'
string|"'keyboard-interactive'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|serviceStarted
name|'def'
name|'serviceStarted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the userauth service is started.  Set up instance\n        variables, check if we should allow password/keyboard-interactive\n        authentication (only allow if the outgoing connection is encrypted) and\n        set up a login timeout.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authenticatedWith'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'loginAttempts'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'user'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'nextService'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_pamDeferred'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'factory'
op|'.'
name|'portal'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'supportedAuthentications'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'listCredentialsInterfaces'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'i'
name|'in'
name|'self'
op|'.'
name|'interfaceToMethod'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'supportedAuthentications'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'interfaceToMethod'
op|'['
name|'i'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'isEncrypted'
op|'('
string|"'in'"
op|')'
op|':'
newline|'\n'
comment|"# don't let us transport password in plaintext"
nl|'\n'
indent|'            '
name|'if'
string|"'password'"
name|'in'
name|'self'
op|'.'
name|'supportedAuthentications'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'supportedAuthentications'
op|'.'
name|'remove'
op|'('
string|"'password'"
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'keyboard-interactive'"
name|'in'
name|'self'
op|'.'
name|'supportedAuthentications'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'supportedAuthentications'
op|'.'
name|'remove'
op|'('
string|"'keyboard-interactive'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_cancelLoginTimeout'
op|'='
name|'self'
op|'.'
name|'clock'
op|'.'
name|'callLater'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'loginTimeout'
op|','
nl|'\n'
name|'self'
op|'.'
name|'timeoutAuthentication'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|serviceStopped
dedent|''
name|'def'
name|'serviceStopped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the userauth service is stopped.  Cancel the login timeout\n        if it\'s still going.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_cancelLoginTimeout'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cancelLoginTimeout'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cancelLoginTimeout'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|timeoutAuthentication
dedent|''
dedent|''
name|'def'
name|'timeoutAuthentication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the user has timed out on authentication.  Disconnect\n        with a DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE message.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_cancelLoginTimeout'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendDisconnect'
op|'('
nl|'\n'
name|'transport'
op|'.'
name|'DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE'
op|','
nl|'\n'
string|"'you took too long'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tryAuth
dedent|''
name|'def'
name|'tryAuth'
op|'('
name|'self'
op|','
name|'kind'
op|','
name|'user'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to authenticate the user with the given method.  Dispatches to a\n        auth_* method.\n\n        @param kind: the authentication method to try.\n        @type kind: C{str}\n        @param user: the username the client is authenticating with.\n        @type user: C{str}\n        @param data: authentication specific data sent by the client.\n        @type data: C{str}\n        @return: A Deferred called back if the method succeeded, or erred back\n            if it failed.\n        @rtype: C{defer.Deferred}\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'%s trying auth %s'"
op|'%'
op|'('
name|'user'
op|','
name|'kind'
op|')'
op|')'
newline|'\n'
name|'if'
name|'kind'
name|'not'
name|'in'
name|'self'
op|'.'
name|'supportedAuthentications'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'ConchError'
op|'('
string|"'unsupported authentication, failing'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'kind'
op|'='
name|'kind'
op|'.'
name|'replace'
op|'('
string|"'-'"
op|','
string|"'_'"
op|')'
newline|'\n'
name|'f'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'auth_%s'"
op|'%'
name|'kind'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'f'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'ret'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'ConchError'
op|'('
string|"'%s return None instead of a Deferred'"
nl|'\n'
op|'%'
name|'kind'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'ret'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'error'
op|'.'
name|'ConchError'
op|'('
string|"'bad auth type: %s'"
op|'%'
name|'kind'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ssh_USERAUTH_REQUEST
dedent|''
name|'def'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The client has requested authentication.  Payload::\n            string user\n            string next service\n            string method\n            <authentication specific data>\n\n        @type packet: C{str}\n        """'
newline|'\n'
name|'user'
op|','
name|'nextService'
op|','
name|'method'
op|','
name|'rest'
op|'='
name|'getNS'
op|'('
name|'packet'
op|','
number|'3'
op|')'
newline|'\n'
name|'if'
name|'user'
op|'!='
name|'self'
op|'.'
name|'user'
name|'or'
name|'nextService'
op|'!='
name|'self'
op|'.'
name|'nextService'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authenticatedWith'
op|'='
op|'['
op|']'
comment|'# clear auth state'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'user'
op|'='
name|'user'
newline|'\n'
name|'self'
op|'.'
name|'nextService'
op|'='
name|'nextService'
newline|'\n'
name|'self'
op|'.'
name|'method'
op|'='
name|'method'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'tryAuth'
op|'('
name|'method'
op|','
name|'user'
op|','
name|'rest'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'d'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_ebBadAuth'
op|'('
nl|'\n'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConchError'
op|'('
string|"'auth returned none'"
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbFinishedAuth'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebMaybeBadAuth'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebBadAuth'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbFinishedAuth
dedent|''
name|'def'
name|'_cbFinishedAuth'
op|'('
name|'self'
op|','
op|'('
name|'interface'
op|','
name|'avatar'
op|','
name|'logout'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The callback when user has successfully been authenticated.  For a\n        description of the arguments, see L{twisted.cred.portal.Portal.login}.\n        We start the service requested by the user.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'avatar'
op|'='
name|'avatar'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'logoutFunction'
op|'='
name|'logout'
newline|'\n'
name|'service'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'factory'
op|'.'
name|'getService'
op|'('
name|'self'
op|'.'
name|'transport'
op|','
nl|'\n'
name|'self'
op|'.'
name|'nextService'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'service'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'ConchError'
op|'('
string|"'could not get next service: %s'"
nl|'\n'
op|'%'
name|'self'
op|'.'
name|'nextService'
op|')'
newline|'\n'
dedent|''
name|'log'
op|'.'
name|'msg'
op|'('
string|"'%s authenticated with %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'method'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_USERAUTH_SUCCESS'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'setService'
op|'('
name|'service'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_ebMaybeBadAuth
dedent|''
name|'def'
name|'_ebMaybeBadAuth'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An intermediate errback.  If the reason is\n        error.NotEnoughAuthentication, we send a MSG_USERAUTH_FAILURE, but\n        with the partial success indicator set.\n\n        @type reason: L{twisted.python.failure.Failure}\n        """'
newline|'\n'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'NotEnoughAuthentication'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_USERAUTH_FAILURE'
op|','
nl|'\n'
name|'NS'
op|'('
string|"','"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'supportedAuthentications'
op|')'
op|')'
op|'+'
string|"'\\xff'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_ebBadAuth
dedent|''
name|'def'
name|'_ebBadAuth'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The final errback in the authentication chain.  If the reason is\n        error.IgnoreAuthentication, we simply return; the authentication\n        method has sent its own response.  Otherwise, send a failure message\n        and (if the method is not \'none\') increment the number of login\n        attempts.\n\n        @type reason: L{twisted.python.failure.Failure}\n        """'
newline|'\n'
name|'if'
name|'reason'
op|'.'
name|'check'
op|'('
name|'error'
op|'.'
name|'IgnoreAuthentication'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'method'
op|'!='
string|"'none'"
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'%s failed auth %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'method'
op|')'
op|')'
newline|'\n'
name|'if'
name|'reason'
op|'.'
name|'check'
op|'('
name|'UnauthorizedLogin'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'unauthorized login: %s'"
op|'%'
name|'reason'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'reason'
op|'.'
name|'check'
op|'('
name|'error'
op|'.'
name|'ConchError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'reason: %s'"
op|'%'
name|'reason'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
name|'reason'
op|'.'
name|'getTraceback'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'loginAttempts'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'loginAttempts'
op|'>'
name|'self'
op|'.'
name|'attemptsBeforeDisconnect'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendDisconnect'
op|'('
nl|'\n'
name|'transport'
op|'.'
name|'DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE'
op|','
nl|'\n'
string|"'too many bad auths'"
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
nl|'\n'
name|'MSG_USERAUTH_FAILURE'
op|','
nl|'\n'
name|'NS'
op|'('
string|"','"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'supportedAuthentications'
op|')'
op|')'
op|'+'
string|"'\\x00'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|auth_publickey
dedent|''
name|'def'
name|'auth_publickey'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Public key authentication.  Payload::\n            byte has signature\n            string algorithm name\n            string key blob\n            [string signature] (if has signature is True)\n\n        Create a SSHPublicKey credential and verify it using our portal.\n        """'
newline|'\n'
name|'hasSig'
op|'='
name|'ord'
op|'('
name|'packet'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'algName'
op|','
name|'blob'
op|','
name|'rest'
op|'='
name|'getNS'
op|'('
name|'packet'
op|'['
number|'1'
op|':'
op|']'
op|','
number|'2'
op|')'
newline|'\n'
name|'pubKey'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'blob'
op|')'
newline|'\n'
name|'signature'
op|'='
name|'hasSig'
name|'and'
name|'getNS'
op|'('
name|'rest'
op|')'
op|'['
number|'0'
op|']'
name|'or'
name|'None'
newline|'\n'
name|'if'
name|'hasSig'
op|':'
newline|'\n'
indent|'            '
name|'b'
op|'='
op|'('
name|'NS'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sessionID'
op|')'
op|'+'
name|'chr'
op|'('
name|'MSG_USERAUTH_REQUEST'
op|')'
op|'+'
nl|'\n'
name|'NS'
op|'('
name|'self'
op|'.'
name|'user'
op|')'
op|'+'
name|'NS'
op|'('
name|'self'
op|'.'
name|'nextService'
op|')'
op|'+'
name|'NS'
op|'('
string|"'publickey'"
op|')'
op|'+'
nl|'\n'
name|'chr'
op|'('
name|'hasSig'
op|')'
op|'+'
name|'NS'
op|'('
name|'pubKey'
op|'.'
name|'sshType'
op|'('
op|')'
op|')'
op|'+'
name|'NS'
op|'('
name|'blob'
op|')'
op|')'
newline|'\n'
name|'c'
op|'='
name|'credentials'
op|'.'
name|'SSHPrivateKey'
op|'('
name|'self'
op|'.'
name|'user'
op|','
name|'algName'
op|','
name|'blob'
op|','
name|'b'
op|','
nl|'\n'
name|'signature'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'login'
op|'('
name|'c'
op|','
name|'None'
op|','
name|'interfaces'
op|'.'
name|'IConchUser'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'='
name|'credentials'
op|'.'
name|'SSHPrivateKey'
op|'('
name|'self'
op|'.'
name|'user'
op|','
name|'algName'
op|','
name|'blob'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'login'
op|'('
name|'c'
op|','
name|'None'
op|','
nl|'\n'
name|'interfaces'
op|'.'
name|'IConchUser'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebCheckKey'
op|','
nl|'\n'
name|'packet'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_ebCheckKey
dedent|''
dedent|''
name|'def'
name|'_ebCheckKey'
op|'('
name|'self'
op|','
name|'reason'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called back if the user did not sent a signature.  If reason is\n        error.ValidPublicKey then this key is valid for the user to\n        authenticate with.  Send MSG_USERAUTH_PK_OK.\n        """'
newline|'\n'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ValidPublicKey'
op|')'
newline|'\n'
comment|'# if we make it here, it means that the publickey is valid'
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_USERAUTH_PK_OK'
op|','
name|'packet'
op|')'
newline|'\n'
name|'return'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'IgnoreAuthentication'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|auth_password
dedent|''
name|'def'
name|'auth_password'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Password authentication.  Payload::\n            string password\n\n        Make a UsernamePassword credential and verify it with our portal.\n        """'
newline|'\n'
name|'password'
op|'='
name|'getNS'
op|'('
name|'packet'
op|'['
number|'1'
op|':'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'c'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
name|'self'
op|'.'
name|'user'
op|','
name|'password'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'login'
op|'('
name|'c'
op|','
name|'None'
op|','
name|'interfaces'
op|'.'
name|'IConchUser'
op|')'
op|'.'
name|'addErrback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_ebPassword'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_ebPassword
dedent|''
name|'def'
name|'_ebPassword'
op|'('
name|'self'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the password is invalid, wait before sending the failure in order\n        to delay brute-force password guessing.\n        """'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'callLater'
op|'('
name|'self'
op|'.'
name|'passwordDelay'
op|','
name|'d'
op|'.'
name|'callback'
op|','
name|'f'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|auth_keyboard_interactive
dedent|''
name|'def'
name|'auth_keyboard_interactive'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Keyboard interactive authentication.  No payload.  We create a\n        PluggableAuthenticationModules credential and authenticate with our\n        portal.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_pamDeferred'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendDisconnect'
op|'('
nl|'\n'
name|'transport'
op|'.'
name|'DISCONNECT_PROTOCOL_ERROR'
op|','
nl|'\n'
string|'"only one keyboard interactive attempt at a time"'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'error'
op|'.'
name|'IgnoreAuthentication'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'c'
op|'='
name|'credentials'
op|'.'
name|'PluggableAuthenticationModules'
op|'('
name|'self'
op|'.'
name|'user'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_pamConv'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'login'
op|'('
name|'c'
op|','
name|'None'
op|','
name|'interfaces'
op|'.'
name|'IConchUser'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_pamConv
dedent|''
name|'def'
name|'_pamConv'
op|'('
name|'self'
op|','
name|'items'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convert a list of PAM authentication questions into a\n        MSG_USERAUTH_INFO_REQUEST.  Returns a Deferred that will be called\n        back when the user has responses to the questions.\n\n        @param items: a list of 2-tuples (message, kind).  We only care about\n            kinds 1 (password) and 2 (text).\n        @type items: C{list}\n        @rtype: L{defer.Deferred}\n        """'
newline|'\n'
name|'resp'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'message'
op|','
name|'kind'
name|'in'
name|'items'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'kind'
op|'=='
number|'1'
op|':'
comment|'# password'
newline|'\n'
indent|'                '
name|'resp'
op|'.'
name|'append'
op|'('
op|'('
name|'message'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'kind'
op|'=='
number|'2'
op|':'
comment|'# text'
newline|'\n'
indent|'                '
name|'resp'
op|'.'
name|'append'
op|'('
op|'('
name|'message'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'kind'
name|'in'
op|'('
number|'3'
op|','
number|'4'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'error'
op|'.'
name|'ConchError'
op|'('
nl|'\n'
string|"'cannot handle PAM 3 or 4 messages'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'error'
op|'.'
name|'ConchError'
op|'('
nl|'\n'
string|"'bad PAM auth kind %i'"
op|'%'
name|'kind'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'packet'
op|'='
name|'NS'
op|'('
string|"''"
op|')'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
newline|'\n'
name|'packet'
op|'+='
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'>L'"
op|','
name|'len'
op|'('
name|'resp'
op|')'
op|')'
newline|'\n'
name|'for'
name|'prompt'
op|','
name|'echo'
name|'in'
name|'resp'
op|':'
newline|'\n'
indent|'            '
name|'packet'
op|'+='
name|'NS'
op|'('
name|'prompt'
op|')'
newline|'\n'
name|'packet'
op|'+='
name|'chr'
op|'('
name|'echo'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_USERAUTH_INFO_REQUEST'
op|','
name|'packet'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_pamDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_pamDeferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ssh_USERAUTH_INFO_RESPONSE
dedent|''
name|'def'
name|'ssh_USERAUTH_INFO_RESPONSE'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The user has responded with answers to PAMs authentication questions.\n        Parse the packet into a PAM response and callback self._pamDeferred.\n        Payload::\n            uint32 numer of responses\n            string response 1\n            ...\n            string response n\n        """'
newline|'\n'
name|'d'
op|','
name|'self'
op|'.'
name|'_pamDeferred'
op|'='
name|'self'
op|'.'
name|'_pamDeferred'
op|','
name|'None'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
op|'['
op|']'
newline|'\n'
name|'numResps'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>L'"
op|','
name|'packet'
op|'['
op|':'
number|'4'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'packet'
op|'='
name|'packet'
op|'['
number|'4'
op|':'
op|']'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'resp'
op|')'
op|'<'
name|'numResps'
op|':'
newline|'\n'
indent|'                '
name|'response'
op|','
name|'packet'
op|'='
name|'getNS'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'resp'
op|'.'
name|'append'
op|'('
op|'('
name|'response'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'packet'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'error'
op|'.'
name|'ConchError'
op|'('
string|'"%i bytes of extra data"'
op|'%'
name|'len'
op|'('
name|'packet'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'callback'
op|'('
name|'resp'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SSHUserAuthClient
dedent|''
dedent|''
dedent|''
name|'class'
name|'SSHUserAuthClient'
op|'('
name|'service'
op|'.'
name|'SSHService'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A service implementing the client side of \'ssh-userauth\'.\n\n    @ivar name: the name of this service: \'ssh-userauth\'\n    @type name: C{str}\n    @ivar preferredOrder: a list of authentication methods we support, in\n        order of preference.  The client will try authentication methods in\n        this order, making callbacks for information when necessary.\n    @type preferredOrder: C{list}\n    @ivar user: the name of the user to authenticate as\n    @type user: C{str}\n    @ivar instance: the service to start after authentication has finished\n    @type instance: L{service.SSHService}\n    @ivar authenticatedWith: a list of strings of authentication methods we\'ve tried\n    @type authenticatedWith: C{list} of C{str}\n    @ivar triedPublicKeys: a list of public key objects that we\'ve tried to\n        authenticate with\n    @type triedPublicKeys: C{list} of L{Key}\n    @ivar lastPublicKey: the last public key object we\'ve tried to authenticate\n        with\n    @type lastPublicKey: L{Key}\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|name
name|'name'
op|'='
string|"'ssh-userauth'"
newline|'\n'
DECL|variable|preferredOrder
name|'preferredOrder'
op|'='
op|'['
string|"'publickey'"
op|','
string|"'password'"
op|','
string|"'keyboard-interactive'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'user'
op|'='
name|'user'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
name|'instance'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|serviceStarted
dedent|''
name|'def'
name|'serviceStarted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'authenticatedWith'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'triedPublicKeys'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'lastPublicKey'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'askForAuth'
op|'('
string|"'none'"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|askForAuth
dedent|''
name|'def'
name|'askForAuth'
op|'('
name|'self'
op|','
name|'kind'
op|','
name|'extraData'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a MSG_USERAUTH_REQUEST.\n\n        @param kind: the authentication method to try.\n        @type kind: C{str}\n        @param extraData: method-specific data to go in the packet\n        @type extraData: C{str}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'lastAuth'
op|'='
name|'kind'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_USERAUTH_REQUEST'
op|','
name|'NS'
op|'('
name|'self'
op|'.'
name|'user'
op|')'
op|'+'
nl|'\n'
name|'NS'
op|'('
name|'self'
op|'.'
name|'instance'
op|'.'
name|'name'
op|')'
op|'+'
name|'NS'
op|'('
name|'kind'
op|')'
op|'+'
name|'extraData'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tryAuth
dedent|''
name|'def'
name|'tryAuth'
op|'('
name|'self'
op|','
name|'kind'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Dispatch to an authentication method.\n\n        @param kind: the authentication method\n        @type kind: C{str}\n        """'
newline|'\n'
name|'kind'
op|'='
name|'kind'
op|'.'
name|'replace'
op|'('
string|"'-'"
op|','
string|"'_'"
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'trying to auth with %s'"
op|'%'
op|'('
name|'kind'
op|','
op|')'
op|')'
newline|'\n'
name|'f'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'auth_%s'"
op|'%'
op|'('
name|'kind'
op|','
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'f'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_ebAuth
dedent|''
dedent|''
name|'def'
name|'_ebAuth'
op|'('
name|'self'
op|','
name|'ignored'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generic callback for a failed authentication attempt.  Respond by\n        asking for the list of accepted methods (the \'none\' method)\n        """'
newline|'\n'
name|'self'
op|'.'
name|'askForAuth'
op|'('
string|"'none'"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ssh_USERAUTH_SUCCESS
dedent|''
name|'def'
name|'ssh_USERAUTH_SUCCESS'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        We received a MSG_USERAUTH_SUCCESS.  The server has accepted our\n        authentication, so start the next service.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'setService'
op|'('
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ssh_USERAUTH_FAILURE
dedent|''
name|'def'
name|'ssh_USERAUTH_FAILURE'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        We received a MSG_USERAUTH_FAILURE.  Payload::\n            string methods\n            byte partial success\n\n        If partial success is C{True}, then the previous method succeeded but is\n        not sufficent for authentication. C{methods} is a comma-separated list\n        of accepted authentication methods.\n\n        We sort the list of methods by their position in C{self.preferredOrder},\n        removing methods that have already succeeded. We then call\n        C{self.tryAuth} with the most preferred method.\n\n        @param packet: the L{MSG_USERAUTH_FAILURE} payload.\n        @type packet: C{str}\n\n        @return: a L{defer.Deferred} that will be callbacked with C{None} as\n            soon as all authentication methods have been tried, or C{None} if no\n            more authentication methods are available.\n        @rtype: C{defer.Deferred} or C{None}\n        """'
newline|'\n'
name|'canContinue'
op|','
name|'partial'
op|'='
name|'getNS'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'partial'
op|'='
name|'ord'
op|'('
name|'partial'
op|')'
newline|'\n'
name|'if'
name|'partial'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authenticatedWith'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'lastAuth'
op|')'
newline|'\n'
nl|'\n'
DECL|function|orderByPreference
dedent|''
name|'def'
name|'orderByPreference'
op|'('
name|'meth'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Invoked once per authentication method in order to extract a\n            comparison key which is then used for sorting.\n\n            @param meth: the authentication method.\n            @type meth: C{str}\n\n            @return: the comparison key for C{meth}.\n            @rtype: C{int}\n            """'
newline|'\n'
name|'if'
name|'meth'
name|'in'
name|'self'
op|'.'
name|'preferredOrder'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'preferredOrder'
op|'.'
name|'index'
op|'('
name|'meth'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# put the element at the end of the list.'
nl|'\n'
indent|'                '
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'preferredOrder'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'canContinue'
op|'='
name|'util'
op|'.'
name|'dsu'
op|'('
op|'['
name|'meth'
name|'for'
name|'meth'
name|'in'
name|'canContinue'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
nl|'\n'
name|'if'
name|'meth'
name|'not'
name|'in'
name|'self'
op|'.'
name|'authenticatedWith'
op|']'
op|','
nl|'\n'
name|'orderByPreference'
op|')'
newline|'\n'
nl|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'can continue with: %s'"
op|'%'
name|'canContinue'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_cbUserauthFailure'
op|'('
name|'None'
op|','
name|'iter'
op|'('
name|'canContinue'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbUserauthFailure
dedent|''
name|'def'
name|'_cbUserauthFailure'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'iterator'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'result'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'method'
op|'='
name|'iterator'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendDisconnect'
op|'('
nl|'\n'
name|'transport'
op|'.'
name|'DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE'
op|','
nl|'\n'
string|"'no more authentication methods available'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'tryAuth'
op|','
name|'method'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbUserauthFailure'
op|','
name|'iterator'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ssh_USERAUTH_PK_OK
dedent|''
dedent|''
name|'def'
name|'ssh_USERAUTH_PK_OK'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This message (number 60) can mean several different messages depending\n        on the current authentication type.  We dispatch to individual methods\n        in order to handle this request.\n        """'
newline|'\n'
name|'func'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'ssh_USERAUTH_PK_OK_%s'"
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'lastAuth'
op|'.'
name|'replace'
op|'('
string|"'-'"
op|','
string|"'_'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'func'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'func'
op|'('
name|'packet'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'askForAuth'
op|'('
string|"'none'"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ssh_USERAUTH_PK_OK_publickey
dedent|''
dedent|''
name|'def'
name|'ssh_USERAUTH_PK_OK_publickey'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This is MSG_USERAUTH_PK.  Our public key is valid, so we create a\n        signature and try to authenticate with it.\n        """'
newline|'\n'
name|'publicKey'
op|'='
name|'self'
op|'.'
name|'lastPublicKey'
newline|'\n'
name|'b'
op|'='
op|'('
name|'NS'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sessionID'
op|')'
op|'+'
name|'chr'
op|'('
name|'MSG_USERAUTH_REQUEST'
op|')'
op|'+'
nl|'\n'
name|'NS'
op|'('
name|'self'
op|'.'
name|'user'
op|')'
op|'+'
name|'NS'
op|'('
name|'self'
op|'.'
name|'instance'
op|'.'
name|'name'
op|')'
op|'+'
name|'NS'
op|'('
string|"'publickey'"
op|')'
op|'+'
nl|'\n'
string|"'\\xff'"
op|'+'
name|'NS'
op|'('
name|'publicKey'
op|'.'
name|'sshType'
op|'('
op|')'
op|')'
op|'+'
name|'NS'
op|'('
name|'publicKey'
op|'.'
name|'blob'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'signData'
op|'('
name|'publicKey'
op|','
name|'b'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'d'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'askForAuth'
op|'('
string|"'none'"
op|','
string|"''"
op|')'
newline|'\n'
comment|"# this will fail, we'll move on"
nl|'\n'
name|'return'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbSignedData'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebAuth'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ssh_USERAUTH_PK_OK_password
dedent|''
name|'def'
name|'ssh_USERAUTH_PK_OK_password'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This is MSG_USERAUTH_PASSWD_CHANGEREQ.  The password given has expired.\n        We ask for an old password and a new password, then send both back to\n        the server.\n        """'
newline|'\n'
name|'prompt'
op|','
name|'language'
op|','
name|'rest'
op|'='
name|'getNS'
op|'('
name|'packet'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_oldPass'
op|'='
name|'self'
op|'.'
name|'_newPass'
op|'='
name|'None'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'getPassword'
op|'('
string|"'Old Password: '"
op|')'
newline|'\n'
name|'d'
op|'='
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_setOldPass'
op|','
name|'self'
op|'.'
name|'_ebAuth'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ignored'
op|':'
name|'self'
op|'.'
name|'getPassword'
op|'('
name|'prompt'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_setNewPass'
op|','
name|'self'
op|'.'
name|'_ebAuth'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ssh_USERAUTH_PK_OK_keyboard_interactive
dedent|''
name|'def'
name|'ssh_USERAUTH_PK_OK_keyboard_interactive'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This is MSG_USERAUTH_INFO_RESPONSE.  The server has sent us the\n        questions it wants us to answer, so we ask the user and sent the\n        responses.\n        """'
newline|'\n'
name|'name'
op|','
name|'instruction'
op|','
name|'lang'
op|','
name|'data'
op|'='
name|'getNS'
op|'('
name|'packet'
op|','
number|'3'
op|')'
newline|'\n'
name|'numPrompts'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'!L'"
op|','
name|'data'
op|'['
op|':'
number|'4'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'data'
op|'='
name|'data'
op|'['
number|'4'
op|':'
op|']'
newline|'\n'
name|'prompts'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'numPrompts'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'prompt'
op|','
name|'data'
op|'='
name|'getNS'
op|'('
name|'data'
op|')'
newline|'\n'
name|'echo'
op|'='
name|'bool'
op|'('
name|'ord'
op|'('
name|'data'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
name|'data'
op|'='
name|'data'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'prompts'
op|'.'
name|'append'
op|'('
op|'('
name|'prompt'
op|','
name|'echo'
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'getGenericAnswers'
op|'('
name|'name'
op|','
name|'instruction'
op|','
name|'prompts'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbGenericAnswers'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebAuth'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbSignedData
dedent|''
name|'def'
name|'_cbSignedData'
op|'('
name|'self'
op|','
name|'signedData'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called back out of self.signData with the signed data.  Send the\n        authentication request with the signature.\n\n        @param signedData: the data signed by the user\'s private key.\n        @type signedData: C{str}\n        """'
newline|'\n'
name|'publicKey'
op|'='
name|'self'
op|'.'
name|'lastPublicKey'
newline|'\n'
name|'self'
op|'.'
name|'askForAuth'
op|'('
string|"'publickey'"
op|','
string|"'\\xff'"
op|'+'
name|'NS'
op|'('
name|'publicKey'
op|'.'
name|'sshType'
op|'('
op|')'
op|')'
op|'+'
nl|'\n'
name|'NS'
op|'('
name|'publicKey'
op|'.'
name|'blob'
op|'('
op|')'
op|')'
op|'+'
name|'NS'
op|'('
name|'signedData'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_setOldPass
dedent|''
name|'def'
name|'_setOldPass'
op|'('
name|'self'
op|','
name|'op'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called back when we are choosing a new password.  Simply store the old\n        password for now.\n\n        @param op: the old password as entered by the user\n        @type op: C{str}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_oldPass'
op|'='
name|'op'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_setNewPass
dedent|''
name|'def'
name|'_setNewPass'
op|'('
name|'self'
op|','
name|'np'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called back when we are choosing a new password.  Get the old password\n        and send the authentication message with both.\n\n        @param np: the new password as entered by the user\n        @type np: C{str}\n        """'
newline|'\n'
name|'op'
op|'='
name|'self'
op|'.'
name|'_oldPass'
newline|'\n'
name|'self'
op|'.'
name|'_oldPass'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'askForAuth'
op|'('
string|"'password'"
op|','
string|"'\\xff'"
op|'+'
name|'NS'
op|'('
name|'op'
op|')'
op|'+'
name|'NS'
op|'('
name|'np'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbGenericAnswers
dedent|''
name|'def'
name|'_cbGenericAnswers'
op|'('
name|'self'
op|','
name|'responses'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called back when we are finished answering keyboard-interactive\n        questions.  Send the info back to the server in a\n        MSG_USERAUTH_INFO_RESPONSE.\n\n        @param responses: a list of C{str} responses\n        @type responses: C{list}\n        """'
newline|'\n'
name|'data'
op|'='
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!L'"
op|','
name|'len'
op|'('
name|'responses'
op|')'
op|')'
newline|'\n'
name|'for'
name|'r'
name|'in'
name|'responses'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'+='
name|'NS'
op|'('
name|'r'
op|'.'
name|'encode'
op|'('
string|"'UTF8'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_USERAUTH_INFO_RESPONSE'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|auth_publickey
dedent|''
name|'def'
name|'auth_publickey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to authenticate with a public key.  Ask the user for a public key;\n        if the user has one, send the request to the server and return True.\n        Otherwise, return False.\n\n        @rtype: C{bool}\n        """'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'getPublicKey'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'self'
op|'.'
name|'_cbGetPublicKey'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbGetPublicKey
dedent|''
name|'def'
name|'_cbGetPublicKey'
op|'('
name|'self'
op|','
name|'publicKey'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'publicKey'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Returning a string from "'
nl|'\n'
string|'"SSHUserAuthClient.getPublicKey() is deprecated "'
nl|'\n'
string|'"since Twisted 9.0.  Return a keys.Key() instead."'
op|','
nl|'\n'
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'publicKey'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'publicKey'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'publicKey'
op|','
name|'keys'
op|'.'
name|'Key'
op|')'
op|':'
comment|'# failure or None'
newline|'\n'
indent|'            '
name|'publicKey'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'publicKey'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'lastPublicKey'
op|'='
name|'publicKey'
newline|'\n'
name|'self'
op|'.'
name|'triedPublicKeys'
op|'.'
name|'append'
op|'('
name|'publicKey'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'using key of type %s'"
op|'%'
name|'publicKey'
op|'.'
name|'type'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'askForAuth'
op|'('
string|"'publickey'"
op|','
string|"'\\x00'"
op|'+'
name|'NS'
op|'('
name|'publicKey'
op|'.'
name|'sshType'
op|'('
op|')'
op|')'
op|'+'
nl|'\n'
name|'NS'
op|'('
name|'publicKey'
op|'.'
name|'blob'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|auth_password
dedent|''
dedent|''
name|'def'
name|'auth_password'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to authenticate with a password.  Ask the user for a password.\n        If the user will return a password, return True.  Otherwise, return\n        False.\n\n        @rtype: C{bool}\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'getPassword'
op|'('
op|')'
newline|'\n'
name|'if'
name|'d'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbPassword'
op|','
name|'self'
op|'.'
name|'_ebAuth'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
comment|"# returned None, don't do password auth"
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|auth_keyboard_interactive
dedent|''
dedent|''
name|'def'
name|'auth_keyboard_interactive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to authenticate with keyboard-interactive authentication.  Send\n        the request to the server and return True.\n\n        @rtype: C{bool}\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'authing with keyboard-interactive'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'askForAuth'
op|'('
string|"'keyboard-interactive'"
op|','
name|'NS'
op|'('
string|"''"
op|')'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbPassword
dedent|''
name|'def'
name|'_cbPassword'
op|'('
name|'self'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called back when the user gives a password.  Send the request to the\n        server.\n\n        @param password: the password the user entered\n        @type password: C{str}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'askForAuth'
op|'('
string|"'password'"
op|','
string|"'\\x00'"
op|'+'
name|'NS'
op|'('
name|'password'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|signData
dedent|''
name|'def'
name|'signData'
op|'('
name|'self'
op|','
name|'publicKey'
op|','
name|'signData'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sign the given data with the given public key.\n\n        By default, this will call getPrivateKey to get the private key,\n        then sign the data using Key.sign().\n\n        This method is factored out so that it can be overridden to use\n        alternate methods, such as a key agent.\n\n        @param publicKey: The public key object returned from L{getPublicKey}\n        @type publicKey: L{keys.Key}\n\n        @param signData: the data to be signed by the private key.\n        @type signData: C{str}\n        @return: a Deferred that\'s called back with the signature\n        @rtype: L{defer.Deferred}\n        """'
newline|'\n'
name|'key'
op|'='
name|'self'
op|'.'
name|'getPrivateKey'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'key'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'return'
name|'key'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbSignData'
op|','
name|'signData'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbSignData
dedent|''
name|'def'
name|'_cbSignData'
op|'('
name|'self'
op|','
name|'privateKey'
op|','
name|'signData'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called back when the private key is returned.  Sign the data and\n        return the signature.\n\n        @param privateKey: the private key object\n        @type publicKey: L{keys.Key}\n        @param signData: the data to be signed by the private key.\n        @type signData: C{str}\n        @return: the signature\n        @rtype: C{str}\n        """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'privateKey'
op|','
name|'keys'
op|'.'
name|'Key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Returning a PyCrypto key object from "'
nl|'\n'
string|'"SSHUserAuthClient.getPrivateKey() is deprecated "'
nl|'\n'
string|'"since Twisted 9.0.  Return a keys.Key() instead."'
op|','
nl|'\n'
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'privateKey'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'('
name|'privateKey'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'privateKey'
op|'.'
name|'sign'
op|'('
name|'signData'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPublicKey
dedent|''
name|'def'
name|'getPublicKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a public key for the user.  If no more public keys are\n        available, return C{None}.\n\n        This implementation always returns C{None}.  Override it in a\n        subclass to actually find and return a public key object.\n\n        @rtype: L{Key} or L{NoneType}\n        """'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPrivateKey
dedent|''
name|'def'
name|'getPrivateKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a L{Deferred} that will be called back with the private key\n        object corresponding to the last public key from getPublicKey().\n        If the private key is not available, errback on the Deferred.\n\n        @rtype: L{Deferred} called back with L{Key}\n        """'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'NotImplementedError'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPassword
dedent|''
name|'def'
name|'getPassword'
op|'('
name|'self'
op|','
name|'prompt'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a L{Deferred} that will be called back with a password.\n        prompt is a string to display for the password, or None for a generic\n        \'user@hostname\'s password: \'.\n\n        @type prompt: C{str}/C{None}\n        @rtype: L{defer.Deferred}\n        """'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'NotImplementedError'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getGenericAnswers
dedent|''
name|'def'
name|'getGenericAnswers'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'instruction'
op|','
name|'prompts'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a L{Deferred} with the responses to the promopts.\n\n        @param name: The name of the authentication currently in progress.\n        @param instruction: Describes what the authentication wants.\n        @param prompts: A list of (prompt, echo) pairs, where prompt is a\n        string to display and echo is a boolean indicating whether the\n        user\'s response should be echoed as they type it.\n        """'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'NotImplementedError'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|MSG_USERAUTH_REQUEST
dedent|''
dedent|''
name|'MSG_USERAUTH_REQUEST'
op|'='
number|'50'
newline|'\n'
DECL|variable|MSG_USERAUTH_FAILURE
name|'MSG_USERAUTH_FAILURE'
op|'='
number|'51'
newline|'\n'
DECL|variable|MSG_USERAUTH_SUCCESS
name|'MSG_USERAUTH_SUCCESS'
op|'='
number|'52'
newline|'\n'
DECL|variable|MSG_USERAUTH_BANNER
name|'MSG_USERAUTH_BANNER'
op|'='
number|'53'
newline|'\n'
DECL|variable|MSG_USERAUTH_PASSWD_CHANGEREQ
name|'MSG_USERAUTH_PASSWD_CHANGEREQ'
op|'='
number|'60'
newline|'\n'
DECL|variable|MSG_USERAUTH_INFO_REQUEST
name|'MSG_USERAUTH_INFO_REQUEST'
op|'='
number|'60'
newline|'\n'
DECL|variable|MSG_USERAUTH_INFO_RESPONSE
name|'MSG_USERAUTH_INFO_RESPONSE'
op|'='
number|'61'
newline|'\n'
DECL|variable|MSG_USERAUTH_PK_OK
name|'MSG_USERAUTH_PK_OK'
op|'='
number|'60'
newline|'\n'
nl|'\n'
DECL|variable|messages
name|'messages'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'locals'
op|'('
op|')'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'k'
op|'['
op|':'
number|'4'
op|']'
op|'=='
string|"'MSG_'"
op|':'
newline|'\n'
indent|'        '
name|'messages'
op|'['
name|'v'
op|']'
op|'='
name|'k'
comment|"# doesn't handle doubles"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'SSHUserAuthServer'
op|'.'
name|'protocolMessages'
op|'='
name|'messages'
newline|'\n'
name|'SSHUserAuthClient'
op|'.'
name|'protocolMessages'
op|'='
name|'messages'
newline|'\n'
name|'del'
name|'messages'
newline|'\n'
name|'del'
name|'v'
newline|'\n'
endmarker|''
end_unit

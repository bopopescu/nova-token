begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_connection -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
comment|'# '
nl|'\n'
nl|'\n'
string|'"""\nThis module contains the implementation of the ssh-connection service, which\nallows access to the shell and port-forwarding.\n\nMaintainer: Paul Swartz\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'struct'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
name|'import'
name|'service'
op|','
name|'common'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
name|'import'
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
nl|'\n'
DECL|class|SSHConnection
name|'class'
name|'SSHConnection'
op|'('
name|'service'
op|'.'
name|'SSHService'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An implementation of the \'ssh-connection\' service.  It is used to\n    multiplex multiple channels over the single SSH connection.\n\n    @ivar localChannelID: the next number to use as a local channel ID.\n    @type localChannelID: C{int}\n    @ivar channels: a C{dict} mapping a local channel ID to C{SSHChannel}\n        subclasses.\n    @type channels: C{dict}\n    @ivar localToRemoteChannel: a C{dict} mapping a local channel ID to a\n        remote channel ID.\n    @type localToRemoteChannel: C{dict}\n    @ivar channelsToRemoteChannel: a C{dict} mapping a C{SSHChannel} subclass\n        to remote channel ID.\n    @type channelsToRemoteChannel: C{dict}\n    @ivar deferreds: a C{dict} mapping a local channel ID to a C{list} of\n        C{Deferreds} for outstanding channel requests.  Also, the \'global\'\n        key stores the C{list} of pending global request C{Deferred}s.\n    """'
newline|'\n'
DECL|variable|name
name|'name'
op|'='
string|"'ssh-connection'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'localChannelID'
op|'='
number|'0'
comment|'# this is the current # to use for channel ID'
newline|'\n'
name|'self'
op|'.'
name|'localToRemoteChannel'
op|'='
op|'{'
op|'}'
comment|'# local channel ID -> remote channel ID'
newline|'\n'
name|'self'
op|'.'
name|'channels'
op|'='
op|'{'
op|'}'
comment|'# local channel ID -> subclass of SSHChannel'
newline|'\n'
name|'self'
op|'.'
name|'channelsToRemoteChannel'
op|'='
op|'{'
op|'}'
comment|'# subclass of SSHChannel -> '
newline|'\n'
comment|'# remote channel ID'
nl|'\n'
name|'self'
op|'.'
name|'deferreds'
op|'='
op|'{'
op|'}'
comment|'# local channel -> list of deferreds for pending '
newline|'\n'
comment|"# requests or 'global' -> list of deferreds for "
nl|'\n'
comment|'# global requests'
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'None'
comment|'# gets set later'
newline|'\n'
nl|'\n'
DECL|member|serviceStarted
dedent|''
name|'def'
name|'serviceStarted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'transport'
op|','
string|"'avatar'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'avatar'
op|'.'
name|'conn'
op|'='
name|'self'
newline|'\n'
nl|'\n'
DECL|member|serviceStopped
dedent|''
dedent|''
name|'def'
name|'serviceStopped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'map'
op|'('
name|'self'
op|'.'
name|'channelClosed'
op|','
name|'self'
op|'.'
name|'channels'
op|'.'
name|'values'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# packet methods'
nl|'\n'
DECL|member|ssh_GLOBAL_REQUEST
dedent|''
name|'def'
name|'ssh_GLOBAL_REQUEST'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side has made a global request.  Payload::\n            string  request type\n            bool    want reply\n            <request specific data>\n\n        This dispatches to self.gotGlobalRequest.\n        """'
newline|'\n'
name|'requestType'
op|','
name|'rest'
op|'='
name|'common'
op|'.'
name|'getNS'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'wantReply'
op|','
name|'rest'
op|'='
name|'ord'
op|'('
name|'rest'
op|'['
number|'0'
op|']'
op|')'
op|','
name|'rest'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'gotGlobalRequest'
op|'('
name|'requestType'
op|','
name|'rest'
op|')'
newline|'\n'
name|'if'
name|'wantReply'
op|':'
newline|'\n'
indent|'            '
name|'reply'
op|'='
name|'MSG_REQUEST_FAILURE'
newline|'\n'
name|'data'
op|'='
string|"''"
newline|'\n'
name|'if'
name|'ret'
op|':'
newline|'\n'
indent|'                '
name|'reply'
op|'='
name|'MSG_REQUEST_SUCCESS'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'ret'
op|','
op|'('
name|'tuple'
op|','
name|'list'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'data'
op|'='
name|'ret'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'reply'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ssh_REQUEST_SUCCESS
dedent|''
dedent|''
name|'def'
name|'ssh_REQUEST_SUCCESS'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Our global request succeeded.  Get the appropriate Deferred and call\n        it back with the packet we received.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'RS'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferreds'
op|'['
string|"'global'"
op|']'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|'.'
name|'callback'
op|'('
name|'packet'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ssh_REQUEST_FAILURE
dedent|''
name|'def'
name|'ssh_REQUEST_FAILURE'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Our global request failed.  Get the appropriate Deferred and errback\n        it with the packet we received.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'RF'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferreds'
op|'['
string|"'global'"
op|']'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|'.'
name|'errback'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'ConchError'
op|'('
string|"'global request failed'"
op|','
name|'packet'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ssh_CHANNEL_OPEN
dedent|''
name|'def'
name|'ssh_CHANNEL_OPEN'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side wants to get a channel.  Payload::\n            string  channel name\n            uint32  remote channel number\n            uint32  remote window size\n            uint32  remote maximum packet size\n            <channel specific data>\n\n        We get a channel from self.getChannel(), give it a local channel number\n        and notify the other side.  Then notify the channel by calling its\n        channelOpen method.\n        """'
newline|'\n'
name|'channelType'
op|','
name|'rest'
op|'='
name|'common'
op|'.'
name|'getNS'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'senderChannel'
op|','
name|'windowSize'
op|','
name|'maxPacket'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>3L'"
op|','
name|'rest'
op|'['
op|':'
number|'12'
op|']'
op|')'
newline|'\n'
name|'packet'
op|'='
name|'rest'
op|'['
number|'12'
op|':'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'channel'
op|'='
name|'self'
op|'.'
name|'getChannel'
op|'('
name|'channelType'
op|','
name|'windowSize'
op|','
name|'maxPacket'
op|','
nl|'\n'
name|'packet'
op|')'
newline|'\n'
name|'localChannel'
op|'='
name|'self'
op|'.'
name|'localChannelID'
newline|'\n'
name|'self'
op|'.'
name|'localChannelID'
op|'+='
number|'1'
newline|'\n'
name|'channel'
op|'.'
name|'id'
op|'='
name|'localChannel'
newline|'\n'
name|'self'
op|'.'
name|'channels'
op|'['
name|'localChannel'
op|']'
op|'='
name|'channel'
newline|'\n'
name|'self'
op|'.'
name|'channelsToRemoteChannel'
op|'['
name|'channel'
op|']'
op|'='
name|'senderChannel'
newline|'\n'
name|'self'
op|'.'
name|'localToRemoteChannel'
op|'['
name|'localChannel'
op|']'
op|'='
name|'senderChannel'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_CHANNEL_OPEN_CONFIRMATION'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'>4L'"
op|','
name|'senderChannel'
op|','
name|'localChannel'
op|','
nl|'\n'
name|'channel'
op|'.'
name|'localWindowSize'
op|','
nl|'\n'
name|'channel'
op|'.'
name|'localMaxPacket'
op|')'
op|'+'
name|'channel'
op|'.'
name|'specificData'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'callWithLogger'
op|'('
name|'channel'
op|','
name|'channel'
op|'.'
name|'channelOpen'
op|','
name|'packet'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'channel open failed'"
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'e'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'e'
op|','
name|'error'
op|'.'
name|'ConchError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'textualInfo'
op|','
name|'reason'
op|'='
name|'e'
op|'.'
name|'args'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'reason'
op|'='
name|'OPEN_CONNECT_FAILED'
newline|'\n'
name|'textualInfo'
op|'='
string|'"unknown failure"'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_CHANNEL_OPEN_FAILURE'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'>2L'"
op|','
name|'senderChannel'
op|','
name|'reason'
op|')'
op|'+'
nl|'\n'
name|'common'
op|'.'
name|'NS'
op|'('
name|'textualInfo'
op|')'
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ssh_CHANNEL_OPEN_CONFIRMATION
dedent|''
dedent|''
name|'def'
name|'ssh_CHANNEL_OPEN_CONFIRMATION'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side accepted our MSG_CHANNEL_OPEN request.  Payload::\n            uint32  local channel number\n            uint32  remote channel number\n            uint32  remote window size\n            uint32  remote maximum packet size\n            <channel specific data>\n\n        Find the channel using the local channel number and notify its\n        channelOpen method.\n        """'
newline|'\n'
op|'('
name|'localChannel'
op|','
name|'remoteChannel'
op|','
name|'windowSize'
op|','
nl|'\n'
name|'maxPacket'
op|')'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>4L'"
op|','
name|'packet'
op|'['
op|':'
number|'16'
op|']'
op|')'
newline|'\n'
name|'specificData'
op|'='
name|'packet'
op|'['
number|'16'
op|':'
op|']'
newline|'\n'
name|'channel'
op|'='
name|'self'
op|'.'
name|'channels'
op|'['
name|'localChannel'
op|']'
newline|'\n'
name|'channel'
op|'.'
name|'conn'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'localToRemoteChannel'
op|'['
name|'localChannel'
op|']'
op|'='
name|'remoteChannel'
newline|'\n'
name|'self'
op|'.'
name|'channelsToRemoteChannel'
op|'['
name|'channel'
op|']'
op|'='
name|'remoteChannel'
newline|'\n'
name|'channel'
op|'.'
name|'remoteWindowLeft'
op|'='
name|'windowSize'
newline|'\n'
name|'channel'
op|'.'
name|'remoteMaxPacket'
op|'='
name|'maxPacket'
newline|'\n'
name|'log'
op|'.'
name|'callWithLogger'
op|'('
name|'channel'
op|','
name|'channel'
op|'.'
name|'channelOpen'
op|','
name|'specificData'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ssh_CHANNEL_OPEN_FAILURE
dedent|''
name|'def'
name|'ssh_CHANNEL_OPEN_FAILURE'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side did not accept our MSG_CHANNEL_OPEN request.  Payload::\n            uint32  local channel number\n            uint32  reason code\n            string  reason description\n\n        Find the channel using the local channel number and notify it by\n        calling its openFailed() method.\n        """'
newline|'\n'
name|'localChannel'
op|','
name|'reasonCode'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>2L'"
op|','
name|'packet'
op|'['
op|':'
number|'8'
op|']'
op|')'
newline|'\n'
name|'reasonDesc'
op|'='
name|'common'
op|'.'
name|'getNS'
op|'('
name|'packet'
op|'['
number|'8'
op|':'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'channel'
op|'='
name|'self'
op|'.'
name|'channels'
op|'['
name|'localChannel'
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'channels'
op|'['
name|'localChannel'
op|']'
newline|'\n'
name|'channel'
op|'.'
name|'conn'
op|'='
name|'self'
newline|'\n'
name|'reason'
op|'='
name|'error'
op|'.'
name|'ConchError'
op|'('
name|'reasonDesc'
op|','
name|'reasonCode'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'callWithLogger'
op|'('
name|'channel'
op|','
name|'channel'
op|'.'
name|'openFailed'
op|','
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ssh_CHANNEL_WINDOW_ADJUST
dedent|''
name|'def'
name|'ssh_CHANNEL_WINDOW_ADJUST'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side is adding bytes to its window.  Payload::\n            uint32  local channel number\n            uint32  bytes to add\n\n        Call the channel\'s addWindowBytes() method to add new bytes to the\n        remote window.\n        """'
newline|'\n'
name|'localChannel'
op|','
name|'bytesToAdd'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>2L'"
op|','
name|'packet'
op|'['
op|':'
number|'8'
op|']'
op|')'
newline|'\n'
name|'channel'
op|'='
name|'self'
op|'.'
name|'channels'
op|'['
name|'localChannel'
op|']'
newline|'\n'
name|'log'
op|'.'
name|'callWithLogger'
op|'('
name|'channel'
op|','
name|'channel'
op|'.'
name|'addWindowBytes'
op|','
name|'bytesToAdd'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ssh_CHANNEL_DATA
dedent|''
name|'def'
name|'ssh_CHANNEL_DATA'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side is sending us data.  Payload::\n            uint32 local channel number\n            string data\n\n        Check to make sure the other side hasn\'t sent too much data (more\n        than what\'s in the window, or more than the maximum packet size).  If\n        they have, close the channel.  Otherwise, decrease the available\n        window and pass the data to the channel\'s dataReceived().\n        """'
newline|'\n'
name|'localChannel'
op|','
name|'dataLength'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>2L'"
op|','
name|'packet'
op|'['
op|':'
number|'8'
op|']'
op|')'
newline|'\n'
name|'channel'
op|'='
name|'self'
op|'.'
name|'channels'
op|'['
name|'localChannel'
op|']'
newline|'\n'
comment|'# XXX should this move to dataReceived to put client in charge?'
nl|'\n'
name|'if'
op|'('
name|'dataLength'
op|'>'
name|'channel'
op|'.'
name|'localWindowLeft'
name|'or'
nl|'\n'
name|'dataLength'
op|'>'
name|'channel'
op|'.'
name|'localMaxPacket'
op|')'
op|':'
comment|'# more data than we want'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'callWithLogger'
op|'('
name|'channel'
op|','
name|'log'
op|'.'
name|'msg'
op|','
string|"'too much data'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendClose'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'return'
newline|'\n'
comment|'#packet = packet[:channel.localWindowLeft+4]'
nl|'\n'
dedent|''
name|'data'
op|'='
name|'common'
op|'.'
name|'getNS'
op|'('
name|'packet'
op|'['
number|'4'
op|':'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'channel'
op|'.'
name|'localWindowLeft'
op|'-='
name|'dataLength'
newline|'\n'
name|'if'
name|'channel'
op|'.'
name|'localWindowLeft'
op|'<'
name|'channel'
op|'.'
name|'localWindowSize'
op|'/'
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'adjustWindow'
op|'('
name|'channel'
op|','
name|'channel'
op|'.'
name|'localWindowSize'
op|'-'
name|'channel'
op|'.'
name|'localWindowLeft'
op|')'
newline|'\n'
comment|"#log.msg('local window left: %s/%s' % (channel.localWindowLeft,"
nl|'\n'
comment|'#                                    channel.localWindowSize))'
nl|'\n'
dedent|''
name|'log'
op|'.'
name|'callWithLogger'
op|'('
name|'channel'
op|','
name|'channel'
op|'.'
name|'dataReceived'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ssh_CHANNEL_EXTENDED_DATA
dedent|''
name|'def'
name|'ssh_CHANNEL_EXTENDED_DATA'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side is sending us exteneded data.  Payload::\n            uint32  local channel number\n            uint32  type code\n            string  data\n\n        Check to make sure the other side hasn\'t sent too much data (more\n        than what\'s in the window, or or than the maximum packet size).  If\n        they have, close the channel.  Otherwise, decrease the available\n        window and pass the data and type code to the channel\'s\n        extReceived().\n        """'
newline|'\n'
name|'localChannel'
op|','
name|'typeCode'
op|','
name|'dataLength'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>3L'"
op|','
name|'packet'
op|'['
op|':'
number|'12'
op|']'
op|')'
newline|'\n'
name|'channel'
op|'='
name|'self'
op|'.'
name|'channels'
op|'['
name|'localChannel'
op|']'
newline|'\n'
name|'if'
op|'('
name|'dataLength'
op|'>'
name|'channel'
op|'.'
name|'localWindowLeft'
name|'or'
nl|'\n'
name|'dataLength'
op|'>'
name|'channel'
op|'.'
name|'localMaxPacket'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'callWithLogger'
op|'('
name|'channel'
op|','
name|'log'
op|'.'
name|'msg'
op|','
string|"'too much extdata'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendClose'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'data'
op|'='
name|'common'
op|'.'
name|'getNS'
op|'('
name|'packet'
op|'['
number|'8'
op|':'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'channel'
op|'.'
name|'localWindowLeft'
op|'-='
name|'dataLength'
newline|'\n'
name|'if'
name|'channel'
op|'.'
name|'localWindowLeft'
op|'<'
name|'channel'
op|'.'
name|'localWindowSize'
op|'/'
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'adjustWindow'
op|'('
name|'channel'
op|','
name|'channel'
op|'.'
name|'localWindowSize'
op|'-'
nl|'\n'
name|'channel'
op|'.'
name|'localWindowLeft'
op|')'
newline|'\n'
dedent|''
name|'log'
op|'.'
name|'callWithLogger'
op|'('
name|'channel'
op|','
name|'channel'
op|'.'
name|'extReceived'
op|','
name|'typeCode'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ssh_CHANNEL_EOF
dedent|''
name|'def'
name|'ssh_CHANNEL_EOF'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side is not sending any more data.  Payload::\n            uint32  local channel number\n\n        Notify the channel by calling its eofReceived() method.\n        """'
newline|'\n'
name|'localChannel'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>L'"
op|','
name|'packet'
op|'['
op|':'
number|'4'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'channel'
op|'='
name|'self'
op|'.'
name|'channels'
op|'['
name|'localChannel'
op|']'
newline|'\n'
name|'log'
op|'.'
name|'callWithLogger'
op|'('
name|'channel'
op|','
name|'channel'
op|'.'
name|'eofReceived'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ssh_CHANNEL_CLOSE
dedent|''
name|'def'
name|'ssh_CHANNEL_CLOSE'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side is closing its end; it does not want to receive any\n        more data.  Payload::\n            uint32  local channel number\n\n        Notify the channnel by calling its closeReceived() method.  If\n        the channel has also sent a close message, call self.channelClosed().\n        """'
newline|'\n'
name|'localChannel'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>L'"
op|','
name|'packet'
op|'['
op|':'
number|'4'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'channel'
op|'='
name|'self'
op|'.'
name|'channels'
op|'['
name|'localChannel'
op|']'
newline|'\n'
name|'log'
op|'.'
name|'callWithLogger'
op|'('
name|'channel'
op|','
name|'channel'
op|'.'
name|'closeReceived'
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'remoteClosed'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'channel'
op|'.'
name|'localClosed'
name|'and'
name|'channel'
op|'.'
name|'remoteClosed'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'channelClosed'
op|'('
name|'channel'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ssh_CHANNEL_REQUEST
dedent|''
dedent|''
name|'def'
name|'ssh_CHANNEL_REQUEST'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side is sending a request to a channel.  Payload::\n            uint32  local channel number\n            string  request name\n            bool    want reply\n            <request specific data>\n\n        Pass the message to the channel\'s requestReceived method.  If the\n        other side wants a reply, add callbacks which will send the\n        reply.\n        """'
newline|'\n'
name|'localChannel'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>L'"
op|','
name|'packet'
op|'['
op|':'
number|'4'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'requestType'
op|','
name|'rest'
op|'='
name|'common'
op|'.'
name|'getNS'
op|'('
name|'packet'
op|'['
number|'4'
op|':'
op|']'
op|')'
newline|'\n'
name|'wantReply'
op|'='
name|'ord'
op|'('
name|'rest'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'channel'
op|'='
name|'self'
op|'.'
name|'channels'
op|'['
name|'localChannel'
op|']'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'log'
op|'.'
name|'callWithLogger'
op|','
name|'channel'
op|','
nl|'\n'
name|'channel'
op|'.'
name|'requestReceived'
op|','
name|'requestType'
op|','
name|'rest'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
name|'if'
name|'wantReply'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbChannelRequest'
op|','
name|'localChannel'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebChannelRequest'
op|','
name|'localChannel'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_cbChannelRequest
dedent|''
dedent|''
name|'def'
name|'_cbChannelRequest'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'localChannel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called back if the other side wanted a reply to a channel request.  If\n        the result is true, send a MSG_CHANNEL_SUCCESS.  Otherwise, raise\n        a C{error.ConchError}\n\n        @param result: the value returned from the channel\'s requestReceived()\n            method.  If it\'s False, the request failed.\n        @type result: C{bool}\n        @param localChannel: the local channel ID of the channel to which the\n            request was made.\n        @type localChannel: C{int}\n        @raises ConchError: if the result is False.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'result'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'ConchError'
op|'('
string|"'failed request'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_CHANNEL_SUCCESS'
op|','
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'>L'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'localToRemoteChannel'
op|'['
name|'localChannel'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebChannelRequest
dedent|''
name|'def'
name|'_ebChannelRequest'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'localChannel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called if the other wisde wanted a reply to the channel requeset and\n        the channel request failed.\n\n        @param result: a Failure, but it\'s not used.\n        @param localChannel: the local channel ID of the channel to which the\n            request was made.\n        @type localChannel: C{int}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_CHANNEL_FAILURE'
op|','
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'>L'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'localToRemoteChannel'
op|'['
name|'localChannel'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ssh_CHANNEL_SUCCESS
dedent|''
name|'def'
name|'ssh_CHANNEL_SUCCESS'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Our channel request to the other other side succeeded.  Payload::\n            uint32  local channel number\n\n        Get the C{Deferred} out of self.deferreds and call it back.\n        """'
newline|'\n'
name|'localChannel'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>L'"
op|','
name|'packet'
op|'['
op|':'
number|'4'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'deferreds'
op|'.'
name|'get'
op|'('
name|'localChannel'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'deferreds'
op|'['
name|'localChannel'
op|']'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'callWithLogger'
op|'('
name|'self'
op|'.'
name|'channels'
op|'['
name|'localChannel'
op|']'
op|','
nl|'\n'
name|'d'
op|'.'
name|'callback'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|ssh_CHANNEL_FAILURE
dedent|''
dedent|''
name|'def'
name|'ssh_CHANNEL_FAILURE'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Our channel request to the other side failed.  Payload::\n            uint32  local channel number\n\n        Get the C{Deferred} out of self.deferreds and errback it with a\n        C{error.ConchError}.\n        """'
newline|'\n'
name|'localChannel'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>L'"
op|','
name|'packet'
op|'['
op|':'
number|'4'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'deferreds'
op|'.'
name|'get'
op|'('
name|'localChannel'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'deferreds'
op|'['
name|'localChannel'
op|']'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'callWithLogger'
op|'('
name|'self'
op|'.'
name|'channels'
op|'['
name|'localChannel'
op|']'
op|','
nl|'\n'
name|'d'
op|'.'
name|'errback'
op|','
nl|'\n'
name|'error'
op|'.'
name|'ConchError'
op|'('
string|"'channel request failed'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# methods for users of the connection to call'
nl|'\n'
nl|'\n'
DECL|member|sendGlobalRequest
dedent|''
dedent|''
name|'def'
name|'sendGlobalRequest'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'data'
op|','
name|'wantReply'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a global request for this connection.  Current this is only used\n        for remote->local TCP forwarding.\n\n        @type request:      C{str}\n        @type data:         C{str}\n        @type wantReply:    C{bool}\n        @rtype              C{Deferred}/C{None}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_GLOBAL_REQUEST'
op|','
nl|'\n'
name|'common'
op|'.'
name|'NS'
op|'('
name|'request'
op|')'
nl|'\n'
op|'+'
op|'('
name|'wantReply'
name|'and'
string|"'\\xff'"
name|'or'
string|"'\\x00'"
op|')'
nl|'\n'
op|'+'
name|'data'
op|')'
newline|'\n'
name|'if'
name|'wantReply'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferreds'
op|'.'
name|'setdefault'
op|'('
string|"'global'"
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|openChannel
dedent|''
dedent|''
name|'def'
name|'openChannel'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'extra'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Open a new channel on this connection.\n\n        @type channel:  subclass of C{SSHChannel}\n        @type extra:    C{str}\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'opening channel %s with %s %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'localChannelID'
op|','
nl|'\n'
name|'channel'
op|'.'
name|'localWindowSize'
op|','
name|'channel'
op|'.'
name|'localMaxPacket'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_CHANNEL_OPEN'
op|','
name|'common'
op|'.'
name|'NS'
op|'('
name|'channel'
op|'.'
name|'name'
op|')'
nl|'\n'
op|'+'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'>3L'"
op|','
name|'self'
op|'.'
name|'localChannelID'
op|','
nl|'\n'
name|'channel'
op|'.'
name|'localWindowSize'
op|','
name|'channel'
op|'.'
name|'localMaxPacket'
op|')'
nl|'\n'
op|'+'
name|'extra'
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'id'
op|'='
name|'self'
op|'.'
name|'localChannelID'
newline|'\n'
name|'self'
op|'.'
name|'channels'
op|'['
name|'self'
op|'.'
name|'localChannelID'
op|']'
op|'='
name|'channel'
newline|'\n'
name|'self'
op|'.'
name|'localChannelID'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|sendRequest
dedent|''
name|'def'
name|'sendRequest'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'requestType'
op|','
name|'data'
op|','
name|'wantReply'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a request to a channel.\n\n        @type channel:      subclass of C{SSHChannel}\n        @type requestType:  C{str}\n        @type data:         C{str}\n        @type wantReply:    C{bool}\n        @rtype              C{Deferred}/C{None}\n        """'
newline|'\n'
name|'if'
name|'channel'
op|'.'
name|'localClosed'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'log'
op|'.'
name|'msg'
op|'('
string|"'sending request %s'"
op|'%'
name|'requestType'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_CHANNEL_REQUEST'
op|','
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'>L'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'channelsToRemoteChannel'
op|'['
name|'channel'
op|']'
op|')'
nl|'\n'
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
name|'requestType'
op|')'
op|'+'
name|'chr'
op|'('
name|'wantReply'
op|')'
nl|'\n'
op|'+'
name|'data'
op|')'
newline|'\n'
name|'if'
name|'wantReply'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferreds'
op|'.'
name|'setdefault'
op|'('
name|'channel'
op|'.'
name|'id'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|adjustWindow
dedent|''
dedent|''
name|'def'
name|'adjustWindow'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'bytesToAdd'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Tell the other side that we will receive more data.  This should not\n        normally need to be called as it is managed automatically.\n\n        @type channel:      subclass of L{SSHChannel}\n        @type bytesToAdd:   C{int}\n        """'
newline|'\n'
name|'if'
name|'channel'
op|'.'
name|'localClosed'
op|':'
newline|'\n'
indent|'            '
name|'return'
comment|"# we're already closed"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_CHANNEL_WINDOW_ADJUST'
op|','
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'>2L'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'channelsToRemoteChannel'
op|'['
name|'channel'
op|']'
op|','
nl|'\n'
name|'bytesToAdd'
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'adding %i to %i in channel %i'"
op|'%'
op|'('
name|'bytesToAdd'
op|','
nl|'\n'
name|'channel'
op|'.'
name|'localWindowLeft'
op|','
name|'channel'
op|'.'
name|'id'
op|')'
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'localWindowLeft'
op|'+='
name|'bytesToAdd'
newline|'\n'
nl|'\n'
DECL|member|sendData
dedent|''
name|'def'
name|'sendData'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send data to a channel.  This should not normally be used: instead use\n        channel.write(data) as it manages the window automatically.\n\n        @type channel:  subclass of L{SSHChannel}\n        @type data:     C{str}\n        """'
newline|'\n'
name|'if'
name|'channel'
op|'.'
name|'localClosed'
op|':'
newline|'\n'
indent|'            '
name|'return'
comment|"# we're already closed"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_CHANNEL_DATA'
op|','
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'>L'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'channelsToRemoteChannel'
op|'['
name|'channel'
op|']'
op|')'
op|'+'
nl|'\n'
name|'common'
op|'.'
name|'NS'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendExtendedData
dedent|''
name|'def'
name|'sendExtendedData'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'dataType'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send extended data to a channel.  This should not normally be used:\n        instead use channel.writeExtendedData(data, dataType) as it manages\n        the window automatically.\n\n        @type channel:  subclass of L{SSHChannel}\n        @type dataType: C{int}\n        @type data:     C{str}\n        """'
newline|'\n'
name|'if'
name|'channel'
op|'.'
name|'localClosed'
op|':'
newline|'\n'
indent|'            '
name|'return'
comment|"# we're already closed"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_CHANNEL_EXTENDED_DATA'
op|','
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'>2L'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'channelsToRemoteChannel'
op|'['
name|'channel'
op|']'
op|','
name|'dataType'
op|')'
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendEOF
dedent|''
name|'def'
name|'sendEOF'
op|'('
name|'self'
op|','
name|'channel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send an EOF (End of File) for a channel.\n\n        @type channel:  subclass of L{SSHChannel}\n        """'
newline|'\n'
name|'if'
name|'channel'
op|'.'
name|'localClosed'
op|':'
newline|'\n'
indent|'            '
name|'return'
comment|"# we're already closed"
newline|'\n'
dedent|''
name|'log'
op|'.'
name|'msg'
op|'('
string|"'sending eof'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_CHANNEL_EOF'
op|','
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'>L'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'channelsToRemoteChannel'
op|'['
name|'channel'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendClose
dedent|''
name|'def'
name|'sendClose'
op|'('
name|'self'
op|','
name|'channel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close a channel.\n\n        @type channel:  subclass of L{SSHChannel}\n        """'
newline|'\n'
name|'if'
name|'channel'
op|'.'
name|'localClosed'
op|':'
newline|'\n'
indent|'            '
name|'return'
comment|"# we're already closed"
newline|'\n'
dedent|''
name|'log'
op|'.'
name|'msg'
op|'('
string|"'sending close %i'"
op|'%'
name|'channel'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
name|'MSG_CHANNEL_CLOSE'
op|','
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'>L'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'channelsToRemoteChannel'
op|'['
name|'channel'
op|']'
op|')'
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'localClosed'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'channel'
op|'.'
name|'localClosed'
name|'and'
name|'channel'
op|'.'
name|'remoteClosed'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'channelClosed'
op|'('
name|'channel'
op|')'
newline|'\n'
nl|'\n'
comment|'# methods to override'
nl|'\n'
DECL|member|getChannel
dedent|''
dedent|''
name|'def'
name|'getChannel'
op|'('
name|'self'
op|','
name|'channelType'
op|','
name|'windowSize'
op|','
name|'maxPacket'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side requested a channel of some sort.\n        channelType is the type of channel being requested,\n        windowSize is the initial size of the remote window,\n        maxPacket is the largest packet we should send,\n        data is any other packet data (often nothing).\n\n        We return a subclass of L{SSHChannel}.\n\n        By default, this dispatches to a method \'channel_channelType\' with any\n        non-alphanumerics in the channelType replace with _\'s.  If it cannot\n        find a suitable method, it returns an OPEN_UNKNOWN_CHANNEL_TYPE error. \n        The method is called with arguments of windowSize, maxPacket, data.\n\n        @type channelType:  C{str}\n        @type windowSize:   C{int}\n        @type maxPacket:    C{int}\n        @type data:         C{str}\n        @rtype:             subclass of L{SSHChannel}/C{tuple}\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'got channel %s request'"
op|'%'
name|'channelType'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'transport'
op|','
string|'"avatar"'
op|')'
op|':'
comment|'# this is a server!'
newline|'\n'
indent|'            '
name|'chan'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'avatar'
op|'.'
name|'lookupChannel'
op|'('
name|'channelType'
op|','
nl|'\n'
name|'windowSize'
op|','
nl|'\n'
name|'maxPacket'
op|','
nl|'\n'
name|'data'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'channelType'
op|'='
name|'channelType'
op|'.'
name|'translate'
op|'('
name|'TRANSLATE_TABLE'
op|')'
newline|'\n'
name|'f'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'channel_%s'"
op|'%'
name|'channelType'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'f'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'chan'
op|'='
name|'f'
op|'('
name|'windowSize'
op|','
name|'maxPacket'
op|','
name|'data'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'chan'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'chan'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'ConchError'
op|'('
string|"'unknown channel'"
op|','
nl|'\n'
name|'OPEN_UNKNOWN_CHANNEL_TYPE'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'chan'
op|'.'
name|'conn'
op|'='
name|'self'
newline|'\n'
name|'return'
name|'chan'
newline|'\n'
nl|'\n'
DECL|member|gotGlobalRequest
dedent|''
dedent|''
name|'def'
name|'gotGlobalRequest'
op|'('
name|'self'
op|','
name|'requestType'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        We got a global request.  pretty much, this is just used by the client\n        to request that we forward a port from the server to the client.\n        Returns either:\n            - 1: request accepted\n            - 1, <data>: request accepted with request specific data\n            - 0: request denied\n\n        By default, this dispatches to a method \'global_requestType\' with\n        -\'s in requestType replaced with _\'s.  The found method is passed data.\n        If this method cannot be found, this method returns 0.  Otherwise, it\n        returns the return value of that method.\n\n        @type requestType:  C{str}\n        @type data:         C{str}\n        @rtype:             C{int}/C{tuple}\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'got global %s request'"
op|'%'
name|'requestType'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'transport'
op|','
string|"'avatar'"
op|')'
op|':'
comment|'# this is a server!'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'avatar'
op|'.'
name|'gotGlobalRequest'
op|'('
name|'requestType'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'requestType'
op|'='
name|'requestType'
op|'.'
name|'replace'
op|'('
string|"'-'"
op|','
string|"'_'"
op|')'
newline|'\n'
name|'f'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'global_%s'"
op|'%'
name|'requestType'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'return'
name|'f'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|channelClosed
dedent|''
name|'def'
name|'channelClosed'
op|'('
name|'self'
op|','
name|'channel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a channel is closed.\n        It clears the local state related to the channel, and calls\n        channel.closed().\n        MAKE SURE YOU CALL THIS METHOD, even if you subclass L{SSHConnection}.\n        If you don\'t, things will break mysteriously.\n        """'
newline|'\n'
name|'if'
name|'channel'
name|'in'
name|'self'
op|'.'
name|'channelsToRemoteChannel'
op|':'
comment|'# actually open'
newline|'\n'
indent|'            '
name|'channel'
op|'.'
name|'localClosed'
op|'='
name|'channel'
op|'.'
name|'remoteClosed'
op|'='
name|'True'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'localToRemoteChannel'
op|'['
name|'channel'
op|'.'
name|'id'
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'channels'
op|'['
name|'channel'
op|'.'
name|'id'
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'channelsToRemoteChannel'
op|'['
name|'channel'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'deferreds'
op|'['
name|'channel'
op|'.'
name|'id'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'log'
op|'.'
name|'callWithLogger'
op|'('
name|'channel'
op|','
name|'channel'
op|'.'
name|'closed'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|MSG_GLOBAL_REQUEST
dedent|''
dedent|''
dedent|''
name|'MSG_GLOBAL_REQUEST'
op|'='
number|'80'
newline|'\n'
DECL|variable|MSG_REQUEST_SUCCESS
name|'MSG_REQUEST_SUCCESS'
op|'='
number|'81'
newline|'\n'
DECL|variable|MSG_REQUEST_FAILURE
name|'MSG_REQUEST_FAILURE'
op|'='
number|'82'
newline|'\n'
DECL|variable|MSG_CHANNEL_OPEN
name|'MSG_CHANNEL_OPEN'
op|'='
number|'90'
newline|'\n'
DECL|variable|MSG_CHANNEL_OPEN_CONFIRMATION
name|'MSG_CHANNEL_OPEN_CONFIRMATION'
op|'='
number|'91'
newline|'\n'
DECL|variable|MSG_CHANNEL_OPEN_FAILURE
name|'MSG_CHANNEL_OPEN_FAILURE'
op|'='
number|'92'
newline|'\n'
DECL|variable|MSG_CHANNEL_WINDOW_ADJUST
name|'MSG_CHANNEL_WINDOW_ADJUST'
op|'='
number|'93'
newline|'\n'
DECL|variable|MSG_CHANNEL_DATA
name|'MSG_CHANNEL_DATA'
op|'='
number|'94'
newline|'\n'
DECL|variable|MSG_CHANNEL_EXTENDED_DATA
name|'MSG_CHANNEL_EXTENDED_DATA'
op|'='
number|'95'
newline|'\n'
DECL|variable|MSG_CHANNEL_EOF
name|'MSG_CHANNEL_EOF'
op|'='
number|'96'
newline|'\n'
DECL|variable|MSG_CHANNEL_CLOSE
name|'MSG_CHANNEL_CLOSE'
op|'='
number|'97'
newline|'\n'
DECL|variable|MSG_CHANNEL_REQUEST
name|'MSG_CHANNEL_REQUEST'
op|'='
number|'98'
newline|'\n'
DECL|variable|MSG_CHANNEL_SUCCESS
name|'MSG_CHANNEL_SUCCESS'
op|'='
number|'99'
newline|'\n'
DECL|variable|MSG_CHANNEL_FAILURE
name|'MSG_CHANNEL_FAILURE'
op|'='
number|'100'
newline|'\n'
nl|'\n'
DECL|variable|OPEN_ADMINISTRATIVELY_PROHIBITED
name|'OPEN_ADMINISTRATIVELY_PROHIBITED'
op|'='
number|'1'
newline|'\n'
DECL|variable|OPEN_CONNECT_FAILED
name|'OPEN_CONNECT_FAILED'
op|'='
number|'2'
newline|'\n'
DECL|variable|OPEN_UNKNOWN_CHANNEL_TYPE
name|'OPEN_UNKNOWN_CHANNEL_TYPE'
op|'='
number|'3'
newline|'\n'
DECL|variable|OPEN_RESOURCE_SHORTAGE
name|'OPEN_RESOURCE_SHORTAGE'
op|'='
number|'4'
newline|'\n'
nl|'\n'
DECL|variable|EXTENDED_DATA_STDERR
name|'EXTENDED_DATA_STDERR'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|variable|messages
name|'messages'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name'
op|','
name|'value'
name|'in'
name|'locals'
op|'('
op|')'
op|'.'
name|'copy'
op|'('
op|')'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'name'
op|'['
op|':'
number|'4'
op|']'
op|'=='
string|"'MSG_'"
op|':'
newline|'\n'
indent|'        '
name|'messages'
op|'['
name|'value'
op|']'
op|'='
name|'name'
comment|"# doesn't handle doubles"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'import'
name|'string'
newline|'\n'
DECL|variable|alphanums
name|'alphanums'
op|'='
name|'string'
op|'.'
name|'letters'
op|'+'
name|'string'
op|'.'
name|'digits'
newline|'\n'
DECL|variable|TRANSLATE_TABLE
name|'TRANSLATE_TABLE'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'chr'
op|'('
name|'i'
op|')'
name|'in'
name|'alphanums'
name|'and'
name|'chr'
op|'('
name|'i'
op|')'
name|'or'
string|"'_'"
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'256'
op|')'
op|']'
op|')'
newline|'\n'
name|'SSHConnection'
op|'.'
name|'protocolMessages'
op|'='
name|'messages'
newline|'\n'
endmarker|''
end_unit

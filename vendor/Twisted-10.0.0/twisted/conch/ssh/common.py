begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_ssh -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nCommon functions for the SSH classes.\n\nMaintainer: Paul Swartz\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'struct'
op|','
name|'warnings'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'Crypto'
name|'import'
name|'Util'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"PyCrypto not installed, but continuing anyways!"'
op|','
nl|'\n'
name|'RuntimeWarning'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'randbytes'
newline|'\n'
nl|'\n'
DECL|class|Entropy
name|'class'
name|'Entropy'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A Crypto.Util.randpool.RandomPool mock for compatibility.\n    """'
newline|'\n'
DECL|member|get_bytes
name|'def'
name|'get_bytes'
op|'('
name|'self'
op|','
name|'numBytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a number of random bytes.\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"entropy.get_bytes is deprecated, please use "'
nl|'\n'
string|'"twisted.python.randbytes.secureRandom instead."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'return'
name|'randbytes'
op|'.'
name|'secureRandom'
op|'('
name|'numBytes'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|entropy
dedent|''
dedent|''
name|'entropy'
op|'='
name|'Entropy'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|NS
name|'def'
name|'NS'
op|'('
name|'t'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    net string\n    """'
newline|'\n'
name|'return'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!L'"
op|','
name|'len'
op|'('
name|'t'
op|')'
op|')'
op|'+'
name|'t'
newline|'\n'
nl|'\n'
DECL|function|getNS
dedent|''
name|'def'
name|'getNS'
op|'('
name|'s'
op|','
name|'count'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    get net string\n    """'
newline|'\n'
name|'ns'
op|'='
op|'['
op|']'
newline|'\n'
name|'c'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'count'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|','
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'!L'"
op|','
name|'s'
op|'['
name|'c'
op|':'
name|'c'
op|'+'
number|'4'
op|']'
op|')'
newline|'\n'
name|'ns'
op|'.'
name|'append'
op|'('
name|'s'
op|'['
name|'c'
op|'+'
number|'4'
op|':'
number|'4'
op|'+'
name|'l'
op|'+'
name|'c'
op|']'
op|')'
newline|'\n'
name|'c'
op|'+='
number|'4'
op|'+'
name|'l'
newline|'\n'
dedent|''
name|'return'
name|'tuple'
op|'('
name|'ns'
op|')'
op|'+'
op|'('
name|'s'
op|'['
name|'c'
op|':'
op|']'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|function|MP
dedent|''
name|'def'
name|'MP'
op|'('
name|'number'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'number'
op|'=='
number|'0'
op|':'
name|'return'
string|"'\\000'"
op|'*'
number|'4'
newline|'\n'
name|'assert'
name|'number'
op|'>'
number|'0'
newline|'\n'
name|'bn'
op|'='
name|'Util'
op|'.'
name|'number'
op|'.'
name|'long_to_bytes'
op|'('
name|'number'
op|')'
newline|'\n'
name|'if'
name|'ord'
op|'('
name|'bn'
op|'['
number|'0'
op|']'
op|')'
op|'&'
number|'128'
op|':'
newline|'\n'
indent|'        '
name|'bn'
op|'='
string|"'\\000'"
op|'+'
name|'bn'
newline|'\n'
dedent|''
name|'return'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'>L'"
op|','
name|'len'
op|'('
name|'bn'
op|')'
op|')'
op|'+'
name|'bn'
newline|'\n'
nl|'\n'
DECL|function|getMP
dedent|''
name|'def'
name|'getMP'
op|'('
name|'data'
op|','
name|'count'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get multiple precision integer out of the string.  A multiple precision\n    integer is stored as a 4-byte length followed by length bytes of the\n    integer.  If count is specified, get count integers out of the string.\n    The return value is a tuple of count integers followed by the rest of\n    the data.\n    """'
newline|'\n'
name|'mp'
op|'='
op|'['
op|']'
newline|'\n'
name|'c'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'count'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'length'
op|','
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>L'"
op|','
name|'data'
op|'['
name|'c'
op|':'
name|'c'
op|'+'
number|'4'
op|']'
op|')'
newline|'\n'
name|'mp'
op|'.'
name|'append'
op|'('
name|'Util'
op|'.'
name|'number'
op|'.'
name|'bytes_to_long'
op|'('
name|'data'
op|'['
name|'c'
op|'+'
number|'4'
op|':'
name|'c'
op|'+'
number|'4'
op|'+'
name|'length'
op|']'
op|')'
op|')'
newline|'\n'
name|'c'
op|'+='
number|'4'
op|'+'
name|'length'
newline|'\n'
dedent|''
name|'return'
name|'tuple'
op|'('
name|'mp'
op|')'
op|'+'
op|'('
name|'data'
op|'['
name|'c'
op|':'
op|']'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|function|_MPpow
dedent|''
name|'def'
name|'_MPpow'
op|'('
name|'x'
op|','
name|'y'
op|','
name|'z'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""return the MP version of (x**y)%z\n    """'
newline|'\n'
name|'return'
name|'MP'
op|'('
name|'pow'
op|'('
name|'x'
op|','
name|'y'
op|','
name|'z'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|ffs
dedent|''
name|'def'
name|'ffs'
op|'('
name|'c'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    first from second\n    goes through the first list, looking for items in the second, returns the first one\n    """'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'c'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'i'
name|'in'
name|'s'
op|':'
name|'return'
name|'i'
newline|'\n'
nl|'\n'
DECL|variable|getMP_py
dedent|''
dedent|''
name|'getMP_py'
op|'='
name|'getMP'
newline|'\n'
DECL|variable|MP_py
name|'MP_py'
op|'='
name|'MP'
newline|'\n'
DECL|variable|_MPpow_py
name|'_MPpow_py'
op|'='
name|'_MPpow'
newline|'\n'
DECL|variable|pyPow
name|'pyPow'
op|'='
name|'pow'
newline|'\n'
nl|'\n'
DECL|function|_fastgetMP
name|'def'
name|'_fastgetMP'
op|'('
name|'data'
op|','
name|'count'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'mp'
op|'='
op|'['
op|']'
newline|'\n'
name|'c'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'count'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'length'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'!L'"
op|','
name|'data'
op|'['
name|'c'
op|':'
name|'c'
op|'+'
number|'4'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'mp'
op|'.'
name|'append'
op|'('
name|'long'
op|'('
name|'gmpy'
op|'.'
name|'mpz'
op|'('
name|'data'
op|'['
name|'c'
op|'+'
number|'4'
op|':'
name|'c'
op|'+'
number|'4'
op|'+'
name|'length'
op|']'
op|'['
op|':'
op|':'
op|'-'
number|'1'
op|']'
op|'+'
string|"'\\x00'"
op|','
number|'256'
op|')'
op|')'
op|')'
newline|'\n'
name|'c'
op|'+='
name|'length'
op|'+'
number|'4'
newline|'\n'
dedent|''
name|'return'
name|'tuple'
op|'('
name|'mp'
op|')'
op|'+'
op|'('
name|'data'
op|'['
name|'c'
op|':'
op|']'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|function|_fastMP
dedent|''
name|'def'
name|'_fastMP'
op|'('
name|'i'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'i2'
op|'='
name|'gmpy'
op|'.'
name|'mpz'
op|'('
name|'i'
op|')'
op|'.'
name|'binary'
op|'('
op|')'
op|'['
op|':'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'return'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!L'"
op|','
name|'len'
op|'('
name|'i2'
op|')'
op|')'
op|'+'
name|'i2'
newline|'\n'
nl|'\n'
DECL|function|_fastMPpow
dedent|''
name|'def'
name|'_fastMPpow'
op|'('
name|'x'
op|','
name|'y'
op|','
name|'z'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'r'
op|'='
name|'pyPow'
op|'('
name|'gmpy'
op|'.'
name|'mpz'
op|'('
name|'x'
op|')'
op|','
name|'y'
op|','
name|'z'
op|')'
op|'.'
name|'binary'
op|'('
op|')'
op|'['
op|':'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'return'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!L'"
op|','
name|'len'
op|'('
name|'r'
op|')'
op|')'
op|'+'
name|'r'
newline|'\n'
nl|'\n'
DECL|function|_fastpow
dedent|''
name|'def'
name|'_fastpow'
op|'('
name|'x'
op|','
name|'y'
op|','
name|'z'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'pyPow'
op|'('
name|'gmpy'
op|'.'
name|'mpz'
op|'('
name|'x'
op|')'
op|','
name|'y'
op|','
name|'z'
op|')'
newline|'\n'
nl|'\n'
DECL|function|install
dedent|''
name|'def'
name|'install'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'getMP'
op|','
name|'MP'
op|','
name|'_MPpow'
newline|'\n'
name|'getMP'
op|'='
name|'_fastgetMP'
newline|'\n'
name|'MP'
op|'='
name|'_fastMP'
newline|'\n'
name|'_MPpow'
op|'='
name|'_fastMPpow'
newline|'\n'
name|'__builtins__'
op|'['
string|"'pow'"
op|']'
op|'='
name|'_fastpow'
comment|'# evil evil'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'gmpy'
newline|'\n'
name|'install'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
endmarker|''
end_unit

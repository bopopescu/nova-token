begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_telnet -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.conch.telnet}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
name|'import'
name|'telnet'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
name|'import'
name|'proto_helpers'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestProtocol
name|'class'
name|'TestProtocol'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'telnet'
op|'.'
name|'ITelnetProtocol'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|localEnableable
name|'localEnableable'
op|'='
op|'('
op|')'
newline|'\n'
DECL|variable|remoteEnableable
name|'remoteEnableable'
op|'='
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'bytes'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'subcmd'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'calls'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'enabledLocal'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'enabledRemote'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'disabledLocal'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'disabledRemote'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|makeConnection
dedent|''
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'transport'
op|'.'
name|'negotiationMap'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'d'
op|'['
string|"'\\x12'"
op|']'
op|'='
name|'self'
op|'.'
name|'neg_TEST_COMMAND'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'transport'
op|'.'
name|'commandMap'
op|'='
name|'transport'
op|'.'
name|'commandMap'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'for'
name|'cmd'
name|'in'
op|'('
string|"'NOP'"
op|','
string|"'DM'"
op|','
string|"'BRK'"
op|','
string|"'IP'"
op|','
string|"'AO'"
op|','
string|"'AYT'"
op|','
string|"'EC'"
op|','
string|"'EL'"
op|','
string|"'GA'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'['
name|'getattr'
op|'('
name|'telnet'
op|','
name|'cmd'
op|')'
op|']'
op|'='
name|'lambda'
name|'arg'
op|','
name|'cmd'
op|'='
name|'cmd'
op|':'
name|'self'
op|'.'
name|'calls'
op|'.'
name|'append'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'bytes'
op|'+='
name|'bytes'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|neg_TEST_COMMAND
dedent|''
name|'def'
name|'neg_TEST_COMMAND'
op|'('
name|'self'
op|','
name|'payload'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'subcmd'
op|'='
name|'payload'
newline|'\n'
nl|'\n'
DECL|member|enableLocal
dedent|''
name|'def'
name|'enableLocal'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'option'
name|'in'
name|'self'
op|'.'
name|'localEnableable'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'enabledLocal'
op|'.'
name|'append'
op|'('
name|'option'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|disableLocal
dedent|''
name|'def'
name|'disableLocal'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'disabledLocal'
op|'.'
name|'append'
op|'('
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|enableRemote
dedent|''
name|'def'
name|'enableRemote'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'option'
name|'in'
name|'self'
op|'.'
name|'remoteEnableable'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'enabledRemote'
op|'.'
name|'append'
op|'('
name|'option'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|disableRemote
dedent|''
name|'def'
name|'disableRemote'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'disabledRemote'
op|'.'
name|'append'
op|'('
name|'option'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TelnetTransportTestCase
dedent|''
dedent|''
name|'class'
name|'TelnetTransportTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{telnet.TelnetTransport}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'p'
op|'='
name|'telnet'
op|'.'
name|'TelnetTransport'
op|'('
name|'TestProtocol'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'t'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'t'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRegularBytes
dedent|''
name|'def'
name|'testRegularBytes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Just send a bunch of bytes.  None of these do anything'
nl|'\n'
comment|'# with telnet.  They should pass right through to the'
nl|'\n'
comment|'# application layer.'
nl|'\n'
indent|'        '
name|'h'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
newline|'\n'
nl|'\n'
name|'L'
op|'='
op|'['
string|'"here are some bytes la la la"'
op|','
nl|'\n'
string|'"some more arrive here"'
op|','
nl|'\n'
string|'"lots of bytes to play with"'
op|','
nl|'\n'
string|'"la la la"'
op|','
nl|'\n'
string|'"ta de da"'
op|','
nl|'\n'
string|'"dum"'
op|']'
newline|'\n'
name|'for'
name|'b'
name|'in'
name|'L'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'b'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'h'
op|'.'
name|'bytes'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'L'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNewlineHandling
dedent|''
name|'def'
name|'testNewlineHandling'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Send various kinds of newlines and make sure they get translated'
nl|'\n'
comment|'# into \\n.'
nl|'\n'
indent|'        '
name|'h'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
newline|'\n'
nl|'\n'
name|'L'
op|'='
op|'['
string|'"here is the first line\\r\\n"'
op|','
nl|'\n'
string|'"here is the second line\\r\\0"'
op|','
nl|'\n'
string|'"here is the third line\\r\\n"'
op|','
nl|'\n'
string|'"here is the last line\\r\\0"'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'b'
name|'in'
name|'L'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'b'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'h'
op|'.'
name|'bytes'
op|','
name|'L'
op|'['
number|'0'
op|']'
op|'['
op|':'
op|'-'
number|'2'
op|']'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
name|'L'
op|'['
number|'1'
op|']'
op|'['
op|':'
op|'-'
number|'2'
op|']'
op|'+'
string|"'\\r'"
op|'+'
nl|'\n'
name|'L'
op|'['
number|'2'
op|']'
op|'['
op|':'
op|'-'
number|'2'
op|']'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
name|'L'
op|'['
number|'3'
op|']'
op|'['
op|':'
op|'-'
number|'2'
op|']'
op|'+'
string|"'\\r'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testIACEscape
dedent|''
name|'def'
name|'testIACEscape'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Send a bunch of bytes and a couple quoted \\xFFs.  Unquoted,'
nl|'\n'
comment|'# \\xFF is a telnet command.  Quoted, one of them from each pair'
nl|'\n'
comment|'# should be passed through to the application layer.'
nl|'\n'
indent|'        '
name|'h'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
newline|'\n'
nl|'\n'
name|'L'
op|'='
op|'['
string|'"here are some bytes\\xff\\xff with an embedded IAC"'
op|','
nl|'\n'
string|'"and here is a test of a border escape\\xff"'
op|','
nl|'\n'
string|'"\\xff did you get that IAC?"'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'b'
name|'in'
name|'L'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'b'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'h'
op|'.'
name|'bytes'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'L'
op|')'
op|'.'
name|'replace'
op|'('
string|"'\\xff\\xff'"
op|','
string|"'\\xff'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_simpleCommandTest
dedent|''
name|'def'
name|'_simpleCommandTest'
op|'('
name|'self'
op|','
name|'cmdName'
op|')'
op|':'
newline|'\n'
comment|'# Send a single simple telnet command and make sure'
nl|'\n'
comment|'# it gets noticed and the appropriate method gets'
nl|'\n'
comment|'# called.'
nl|'\n'
indent|'        '
name|'h'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
newline|'\n'
nl|'\n'
name|'cmd'
op|'='
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'getattr'
op|'('
name|'telnet'
op|','
name|'cmdName'
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
string|'"Here\'s some bytes, tra la la"'
op|','
nl|'\n'
string|'"But ono!"'
op|'+'
name|'cmd'
op|'+'
string|'" an interrupt"'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'b'
name|'in'
name|'L'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'b'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'h'
op|'.'
name|'calls'
op|','
op|'['
name|'cmdName'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'h'
op|'.'
name|'bytes'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'L'
op|')'
op|'.'
name|'replace'
op|'('
name|'cmd'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInterrupt
dedent|''
name|'def'
name|'testInterrupt'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_simpleCommandTest'
op|'('
string|'"IP"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNoOperation
dedent|''
name|'def'
name|'testNoOperation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_simpleCommandTest'
op|'('
string|'"NOP"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDataMark
dedent|''
name|'def'
name|'testDataMark'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_simpleCommandTest'
op|'('
string|'"DM"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testBreak
dedent|''
name|'def'
name|'testBreak'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_simpleCommandTest'
op|'('
string|'"BRK"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAbortOutput
dedent|''
name|'def'
name|'testAbortOutput'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_simpleCommandTest'
op|'('
string|'"AO"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAreYouThere
dedent|''
name|'def'
name|'testAreYouThere'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_simpleCommandTest'
op|'('
string|'"AYT"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEraseCharacter
dedent|''
name|'def'
name|'testEraseCharacter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_simpleCommandTest'
op|'('
string|'"EC"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEraseLine
dedent|''
name|'def'
name|'testEraseLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_simpleCommandTest'
op|'('
string|'"EL"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testGoAhead
dedent|''
name|'def'
name|'testGoAhead'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_simpleCommandTest'
op|'('
string|'"GA"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSubnegotiation
dedent|''
name|'def'
name|'testSubnegotiation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Send a subnegotiation command and make sure it gets'
nl|'\n'
comment|'# parsed and that the correct method is called.'
nl|'\n'
indent|'        '
name|'h'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
newline|'\n'
nl|'\n'
name|'cmd'
op|'='
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'SB'
op|'+'
string|"'\\x12hello world'"
op|'+'
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'SE'
newline|'\n'
name|'L'
op|'='
op|'['
string|'"These are some bytes but soon"'
op|'+'
name|'cmd'
op|','
nl|'\n'
string|'"there will be some more"'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'b'
name|'in'
name|'L'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'b'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'h'
op|'.'
name|'bytes'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'L'
op|')'
op|'.'
name|'replace'
op|'('
name|'cmd'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'h'
op|'.'
name|'subcmd'
op|','
name|'list'
op|'('
string|'"hello world"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSubnegotiationWithEmbeddedSE
dedent|''
name|'def'
name|'testSubnegotiationWithEmbeddedSE'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Send a subnegotiation command with an embedded SE.  Make sure'
nl|'\n'
comment|'# that SE gets passed to the correct method.'
nl|'\n'
indent|'        '
name|'h'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
newline|'\n'
nl|'\n'
name|'cmd'
op|'='
op|'('
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'SB'
op|'+'
nl|'\n'
string|"'\\x12'"
op|'+'
name|'telnet'
op|'.'
name|'SE'
op|'+'
nl|'\n'
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'SE'
op|')'
newline|'\n'
nl|'\n'
name|'L'
op|'='
op|'['
string|'"Some bytes are here"'
op|'+'
name|'cmd'
op|'+'
string|'"and here"'
op|','
nl|'\n'
string|'"and here"'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'b'
name|'in'
name|'L'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'b'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'h'
op|'.'
name|'bytes'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'L'
op|')'
op|'.'
name|'replace'
op|'('
name|'cmd'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'h'
op|'.'
name|'subcmd'
op|','
op|'['
name|'telnet'
op|'.'
name|'SE'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testBoundarySubnegotiation
dedent|''
name|'def'
name|'testBoundarySubnegotiation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Send a subnegotiation command.  Split it at every possible byte boundary'
nl|'\n'
comment|'# and make sure it always gets parsed and that it is passed to the correct'
nl|'\n'
comment|'# method.'
nl|'\n'
indent|'        '
name|'cmd'
op|'='
op|'('
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'SB'
op|'+'
nl|'\n'
string|"'\\x12'"
op|'+'
name|'telnet'
op|'.'
name|'SE'
op|'+'
string|"'hello'"
op|'+'
nl|'\n'
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'SE'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'cmd'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'h'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|'='
name|'TestProtocol'
op|'('
op|')'
newline|'\n'
name|'h'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'p'
op|')'
newline|'\n'
nl|'\n'
name|'a'
op|','
name|'b'
op|'='
name|'cmd'
op|'['
op|':'
name|'i'
op|']'
op|','
name|'cmd'
op|'['
name|'i'
op|':'
op|']'
newline|'\n'
name|'L'
op|'='
op|'['
string|'"first part"'
op|'+'
name|'a'
op|','
nl|'\n'
name|'b'
op|'+'
string|'"last part"'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'bytes'
name|'in'
name|'L'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'h'
op|'.'
name|'bytes'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'L'
op|')'
op|'.'
name|'replace'
op|'('
name|'cmd'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'h'
op|'.'
name|'subcmd'
op|','
op|'['
name|'telnet'
op|'.'
name|'SE'
op|']'
op|'+'
name|'list'
op|'('
string|"'hello'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_enabledHelper
dedent|''
dedent|''
name|'def'
name|'_enabledHelper'
op|'('
name|'self'
op|','
name|'o'
op|','
name|'eL'
op|'='
op|'['
op|']'
op|','
name|'eR'
op|'='
op|'['
op|']'
op|','
name|'dL'
op|'='
op|'['
op|']'
op|','
name|'dR'
op|'='
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'o'
op|'.'
name|'enabledLocal'
op|','
name|'eL'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'o'
op|'.'
name|'enabledRemote'
op|','
name|'eR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'o'
op|'.'
name|'disabledLocal'
op|','
name|'dL'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'o'
op|'.'
name|'disabledRemote'
op|','
name|'dR'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRefuseWill
dedent|''
name|'def'
name|'testRefuseWill'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Try to enable an option.  The server should refuse to enable it.'
nl|'\n'
indent|'        '
name|'cmd'
op|'='
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'WILL'
op|'+'
string|"'\\x12'"
newline|'\n'
nl|'\n'
name|'bytes'
op|'='
string|'"surrounding bytes"'
op|'+'
name|'cmd'
op|'+'
string|'"to spice things up"'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|'.'
name|'bytes'
op|','
name|'bytes'
op|'.'
name|'replace'
op|'('
name|'cmd'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|','
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'DONT'
op|'+'
string|"'\\x12'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_enabledHelper'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRefuseDo
dedent|''
name|'def'
name|'testRefuseDo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Try to enable an option.  The server should refuse to enable it.'
nl|'\n'
indent|'        '
name|'cmd'
op|'='
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'DO'
op|'+'
string|"'\\x12'"
newline|'\n'
nl|'\n'
name|'bytes'
op|'='
string|'"surrounding bytes"'
op|'+'
name|'cmd'
op|'+'
string|'"to spice things up"'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|'.'
name|'bytes'
op|','
name|'bytes'
op|'.'
name|'replace'
op|'('
name|'cmd'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|','
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'WONT'
op|'+'
string|"'\\x12'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_enabledHelper'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAcceptDo
dedent|''
name|'def'
name|'testAcceptDo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Try to enable an option.  The option is in our allowEnable'
nl|'\n'
comment|'# list, so we will allow it to be enabled.'
nl|'\n'
indent|'        '
name|'cmd'
op|'='
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'DO'
op|'+'
string|"'\\x19'"
newline|'\n'
name|'bytes'
op|'='
string|"'padding'"
op|'+'
name|'cmd'
op|'+'
string|"'trailer'"
newline|'\n'
nl|'\n'
name|'h'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
newline|'\n'
name|'h'
op|'.'
name|'localEnableable'
op|'='
op|'('
string|"'\\x19'"
op|','
op|')'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|','
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'WILL'
op|'+'
string|"'\\x19'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_enabledHelper'
op|'('
name|'h'
op|','
name|'eL'
op|'='
op|'['
string|"'\\x19'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAcceptWill
dedent|''
name|'def'
name|'testAcceptWill'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Same as testAcceptDo, but reversed.'
nl|'\n'
indent|'        '
name|'cmd'
op|'='
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'WILL'
op|'+'
string|"'\\x91'"
newline|'\n'
name|'bytes'
op|'='
string|"'header'"
op|'+'
name|'cmd'
op|'+'
string|"'padding'"
newline|'\n'
nl|'\n'
name|'h'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
newline|'\n'
name|'h'
op|'.'
name|'remoteEnableable'
op|'='
op|'('
string|"'\\x91'"
op|','
op|')'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|','
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'DO'
op|'+'
string|"'\\x91'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_enabledHelper'
op|'('
name|'h'
op|','
name|'eR'
op|'='
op|'['
string|"'\\x91'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAcceptWont
dedent|''
name|'def'
name|'testAcceptWont'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Try to disable an option.  The server must allow any option to'
nl|'\n'
comment|'# be disabled at any time.  Make sure it disables it and sends'
nl|'\n'
comment|'# back an acknowledgement of this.'
nl|'\n'
indent|'        '
name|'cmd'
op|'='
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'WONT'
op|'+'
string|"'\\x29'"
newline|'\n'
nl|'\n'
comment|'# Jimmy it - after these two lines, the server will be in a state'
nl|'\n'
comment|'# such that it believes the option to have been previously enabled'
nl|'\n'
comment|'# via normal negotiation.'
nl|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'getOptionState'
op|'('
string|"'\\x29'"
op|')'
newline|'\n'
name|'s'
op|'.'
name|'him'
op|'.'
name|'state'
op|'='
string|"'yes'"
newline|'\n'
nl|'\n'
name|'bytes'
op|'='
string|'"fiddle dee"'
op|'+'
name|'cmd'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|'.'
name|'bytes'
op|','
name|'bytes'
op|'.'
name|'replace'
op|'('
name|'cmd'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|','
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'DONT'
op|'+'
string|"'\\x29'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'s'
op|'.'
name|'him'
op|'.'
name|'state'
op|','
string|"'no'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_enabledHelper'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|','
name|'dR'
op|'='
op|'['
string|"'\\x29'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAcceptDont
dedent|''
name|'def'
name|'testAcceptDont'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Try to disable an option.  The server must allow any option to'
nl|'\n'
comment|'# be disabled at any time.  Make sure it disables it and sends'
nl|'\n'
comment|'# back an acknowledgement of this.'
nl|'\n'
indent|'        '
name|'cmd'
op|'='
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'DONT'
op|'+'
string|"'\\x29'"
newline|'\n'
nl|'\n'
comment|'# Jimmy it - after these two lines, the server will be in a state'
nl|'\n'
comment|'# such that it believes the option to have beenp previously enabled'
nl|'\n'
comment|'# via normal negotiation.'
nl|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'getOptionState'
op|'('
string|"'\\x29'"
op|')'
newline|'\n'
name|'s'
op|'.'
name|'us'
op|'.'
name|'state'
op|'='
string|"'yes'"
newline|'\n'
nl|'\n'
name|'bytes'
op|'='
string|'"fiddle dum "'
op|'+'
name|'cmd'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|'.'
name|'bytes'
op|','
name|'bytes'
op|'.'
name|'replace'
op|'('
name|'cmd'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|','
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'WONT'
op|'+'
string|"'\\x29'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'s'
op|'.'
name|'us'
op|'.'
name|'state'
op|','
string|"'no'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_enabledHelper'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|','
name|'dL'
op|'='
op|'['
string|"'\\x29'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testIgnoreWont
dedent|''
name|'def'
name|'testIgnoreWont'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Try to disable an option.  The option is already disabled.  The'
nl|'\n'
comment|'# server should send nothing in response to this.'
nl|'\n'
indent|'        '
name|'cmd'
op|'='
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'WONT'
op|'+'
string|"'\\x47'"
newline|'\n'
nl|'\n'
name|'bytes'
op|'='
string|'"dum de dum"'
op|'+'
name|'cmd'
op|'+'
string|'"tra la la"'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|'.'
name|'bytes'
op|','
name|'bytes'
op|'.'
name|'replace'
op|'('
name|'cmd'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_enabledHelper'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testIgnoreDont
dedent|''
name|'def'
name|'testIgnoreDont'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Try to disable an option.  The option is already disabled.  The'
nl|'\n'
comment|'# server should send nothing in response to this.  Doing so could'
nl|'\n'
comment|'# lead to a negotiation loop.'
nl|'\n'
indent|'        '
name|'cmd'
op|'='
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'DONT'
op|'+'
string|"'\\x47'"
newline|'\n'
nl|'\n'
name|'bytes'
op|'='
string|'"dum de dum"'
op|'+'
name|'cmd'
op|'+'
string|'"tra la la"'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|'.'
name|'bytes'
op|','
name|'bytes'
op|'.'
name|'replace'
op|'('
name|'cmd'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_enabledHelper'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testIgnoreWill
dedent|''
name|'def'
name|'testIgnoreWill'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Try to enable an option.  The option is already enabled.  The'
nl|'\n'
comment|'# server should send nothing in response to this.  Doing so could'
nl|'\n'
comment|'# lead to a negotiation loop.'
nl|'\n'
indent|'        '
name|'cmd'
op|'='
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'WILL'
op|'+'
string|"'\\x56'"
newline|'\n'
nl|'\n'
comment|'# Jimmy it - after these two lines, the server will be in a state'
nl|'\n'
comment|'# such that it believes the option to have been previously enabled'
nl|'\n'
comment|'# via normal negotiation.'
nl|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'getOptionState'
op|'('
string|"'\\x56'"
op|')'
newline|'\n'
name|'s'
op|'.'
name|'him'
op|'.'
name|'state'
op|'='
string|"'yes'"
newline|'\n'
nl|'\n'
name|'bytes'
op|'='
string|'"tra la la"'
op|'+'
name|'cmd'
op|'+'
string|'"dum de dum"'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|'.'
name|'bytes'
op|','
name|'bytes'
op|'.'
name|'replace'
op|'('
name|'cmd'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_enabledHelper'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testIgnoreDo
dedent|''
name|'def'
name|'testIgnoreDo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Try to enable an option.  The option is already enabled.  The'
nl|'\n'
comment|'# server should send nothing in response to this.  Doing so could'
nl|'\n'
comment|'# lead to a negotiation loop.'
nl|'\n'
indent|'        '
name|'cmd'
op|'='
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'DO'
op|'+'
string|"'\\x56'"
newline|'\n'
nl|'\n'
comment|'# Jimmy it - after these two lines, the server will be in a state'
nl|'\n'
comment|'# such that it believes the option to have been previously enabled'
nl|'\n'
comment|'# via normal negotiation.'
nl|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'getOptionState'
op|'('
string|"'\\x56'"
op|')'
newline|'\n'
name|'s'
op|'.'
name|'us'
op|'.'
name|'state'
op|'='
string|"'yes'"
newline|'\n'
nl|'\n'
name|'bytes'
op|'='
string|'"tra la la"'
op|'+'
name|'cmd'
op|'+'
string|'"dum de dum"'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|'.'
name|'bytes'
op|','
name|'bytes'
op|'.'
name|'replace'
op|'('
name|'cmd'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_enabledHelper'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAcceptedEnableRequest
dedent|''
name|'def'
name|'testAcceptedEnableRequest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Try to enable an option through the user-level API.  This'
nl|'\n'
comment|'# returns a Deferred that fires when negotiation about the option'
nl|'\n'
comment|'# finishes.  Make sure it fires, make sure state gets updated'
nl|'\n'
comment|'# properly, make sure the result indicates the option was enabled.'
nl|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'do'
op|'('
string|"'\\x42'"
op|')'
newline|'\n'
nl|'\n'
name|'h'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
newline|'\n'
name|'h'
op|'.'
name|'remoteEnableable'
op|'='
op|'('
string|"'\\x42'"
op|','
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|','
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'DO'
op|'+'
string|"'\\x42'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'WILL'
op|'+'
string|"'\\x42'"
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'True'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'_enabledHelper'
op|'('
name|'h'
op|','
name|'eR'
op|'='
op|'['
string|"'\\x42'"
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testRefusedEnableRequest
dedent|''
name|'def'
name|'testRefusedEnableRequest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Try to enable an option through the user-level API.  This'
nl|'\n'
comment|'# returns a Deferred that fires when negotiation about the option'
nl|'\n'
comment|'# finishes.  Make sure it fires, make sure state gets updated'
nl|'\n'
comment|'# properly, make sure the result indicates the option was enabled.'
nl|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'do'
op|'('
string|"'\\x42'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|','
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'DO'
op|'+'
string|"'\\x42'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'WONT'
op|'+'
string|"'\\x42'"
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'telnet'
op|'.'
name|'OptionRefused'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'_enabledHelper'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testAcceptedDisableRequest
dedent|''
name|'def'
name|'testAcceptedDisableRequest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Try to disable an option through the user-level API.  This'
nl|'\n'
comment|'# returns a Deferred that fires when negotiation about the option'
nl|'\n'
comment|'# finishes.  Make sure it fires, make sure state gets updated'
nl|'\n'
comment|'# properly, make sure the result indicates the option was enabled.'
nl|'\n'
indent|'        '
name|'s'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'getOptionState'
op|'('
string|"'\\x42'"
op|')'
newline|'\n'
name|'s'
op|'.'
name|'him'
op|'.'
name|'state'
op|'='
string|"'yes'"
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'dont'
op|'('
string|"'\\x42'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|','
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'DONT'
op|'+'
string|"'\\x42'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'WONT'
op|'+'
string|"'\\x42'"
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'True'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'_enabledHelper'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|','
nl|'\n'
name|'dR'
op|'='
op|'['
string|"'\\x42'"
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testNegotiationBlocksFurtherNegotiation
dedent|''
name|'def'
name|'testNegotiationBlocksFurtherNegotiation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Try to disable an option, then immediately try to enable it, then'
nl|'\n'
comment|'# immediately try to disable it.  Ensure that the 2nd and 3rd calls'
nl|'\n'
comment|'# fail quickly with the right exception.'
nl|'\n'
indent|'        '
name|'s'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'getOptionState'
op|'('
string|"'\\x24'"
op|')'
newline|'\n'
name|'s'
op|'.'
name|'him'
op|'.'
name|'state'
op|'='
string|"'yes'"
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'dont'
op|'('
string|"'\\x24'"
op|')'
comment|'# fires after the first line of _final'
newline|'\n'
nl|'\n'
DECL|function|_do
name|'def'
name|'_do'
op|'('
name|'x'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'do'
op|'('
string|"'\\x24'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'telnet'
op|'.'
name|'AlreadyNegotiating'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_dont
dedent|''
name|'def'
name|'_dont'
op|'('
name|'x'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'dont'
op|'('
string|"'\\x24'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'telnet'
op|'.'
name|'AlreadyNegotiating'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_final
dedent|''
name|'def'
name|'_final'
op|'('
name|'x'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'WONT'
op|'+'
string|"'\\x24'"
op|')'
newline|'\n'
comment|'# an assertion that only passes if d2 has fired'
nl|'\n'
name|'self'
op|'.'
name|'_enabledHelper'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|','
name|'dR'
op|'='
op|'['
string|"'\\x24'"
op|']'
op|')'
newline|'\n'
comment|'# Make sure we allow this'
nl|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|'.'
name|'remoteEnableable'
op|'='
op|'('
string|"'\\x24'"
op|','
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'do'
op|'('
string|"'\\x24'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'dataReceived'
op|'('
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'WILL'
op|'+'
string|"'\\x24'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'True'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'_enabledHelper'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'protocol'
op|','
nl|'\n'
name|'eR'
op|'='
op|'['
string|"'\\x24'"
op|']'
op|','
nl|'\n'
name|'dR'
op|'='
op|'['
string|"'\\x24'"
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'_do'
op|'('
name|'None'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_dont'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_final'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testSuperfluousDisableRequestRaises
dedent|''
name|'def'
name|'testSuperfluousDisableRequestRaises'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Try to disable a disabled option.  Make sure it fails properly.'
nl|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'dont'
op|'('
string|"'\\xab'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'telnet'
op|'.'
name|'AlreadyDisabled'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSuperfluousEnableRequestRaises
dedent|''
name|'def'
name|'testSuperfluousEnableRequestRaises'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Try to disable a disabled option.  Make sure it fails properly.'
nl|'\n'
indent|'        '
name|'s'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'getOptionState'
op|'('
string|"'\\xab'"
op|')'
newline|'\n'
name|'s'
op|'.'
name|'him'
op|'.'
name|'state'
op|'='
string|"'yes'"
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'do'
op|'('
string|"'\\xab'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'telnet'
op|'.'
name|'AlreadyEnabled'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLostConnectionFailsDeferreds
dedent|''
name|'def'
name|'testLostConnectionFailsDeferreds'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d1'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'do'
op|'('
string|"'\\x12'"
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'do'
op|'('
string|"'\\x23'"
op|')'
newline|'\n'
name|'d3'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'do'
op|'('
string|"'\\x34'"
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestException
name|'class'
name|'TestException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'p'
op|'.'
name|'connectionLost'
op|'('
name|'TestException'
op|'('
string|'"Total failure!"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'d1'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d1'
op|','
name|'TestException'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d2'
op|','
name|'TestException'
op|')'
newline|'\n'
name|'d3'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d3'
op|','
name|'TestException'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|','
name|'d3'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestTelnet
dedent|''
dedent|''
name|'class'
name|'TestTelnet'
op|'('
name|'telnet'
op|'.'
name|'Telnet'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A trivial extension of the telnet protocol class useful to unit tests.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'telnet'
op|'.'
name|'Telnet'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'events'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|applicationDataReceived
dedent|''
name|'def'
name|'applicationDataReceived'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record the given data in C{self.events}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'events'
op|'.'
name|'append'
op|'('
op|'('
string|"'bytes'"
op|','
name|'bytes'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unhandledCommand
dedent|''
name|'def'
name|'unhandledCommand'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record the given command in C{self.events}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'events'
op|'.'
name|'append'
op|'('
op|'('
string|"'command'"
op|','
name|'command'
op|','
name|'bytes'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unhandledSubnegotiation
dedent|''
name|'def'
name|'unhandledSubnegotiation'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record the given subnegotiation command in C{self.events}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'events'
op|'.'
name|'append'
op|'('
op|'('
string|"'negotiate'"
op|','
name|'command'
op|','
name|'bytes'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TelnetTests
dedent|''
dedent|''
name|'class'
name|'TelnetTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{telnet.Telnet}.\n\n    L{telnet.Telnet} implements the TELNET protocol (RFC 854), including option\n    and suboption negotiation, and option state tracking.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create an unconnected L{telnet.Telnet} to be used by tests.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'TestTelnet'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_enableLocal
dedent|''
name|'def'
name|'test_enableLocal'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{telnet.Telnet.enableLocal} should reject all options, since\n        L{telnet.Telnet} does not know how to implement any options.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'enableLocal'
op|'('
string|"'\\0'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_enableRemote
dedent|''
name|'def'
name|'test_enableRemote'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{telnet.Telnet.enableRemote} should reject all options, since\n        L{telnet.Telnet} does not know how to implement any options.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'enableRemote'
op|'('
string|"'\\0'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disableLocal
dedent|''
name|'def'
name|'test_disableLocal'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        It is an error for L{telnet.Telnet.disableLocal} to be called, since\n        L{telnet.Telnet.enableLocal} will never allow any options to be enabled\n        locally.  If a subclass overrides enableLocal, it must also override\n        disableLocal.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'disableLocal'
op|','
string|"'\\0'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disableRemote
dedent|''
name|'def'
name|'test_disableRemote'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        It is an error for L{telnet.Telnet.disableRemote} to be called, since\n        L{telnet.Telnet.enableRemote} will never allow any options to be\n        enabled remotely.  If a subclass overrides enableRemote, it must also\n        override disableRemote.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'disableRemote'
op|','
string|"'\\0'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requestNegotiation
dedent|''
name|'def'
name|'test_requestNegotiation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{telnet.Telnet.requestNegotiation} formats the feature byte and the\n        payload bytes into the subnegotiation format and sends them.\n\n        See RFC 855.\n        """'
newline|'\n'
name|'transport'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'requestNegotiation'
op|'('
string|"'\\x01'"
op|','
string|"'\\x02\\x03'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
comment|'# IAC SB feature bytes IAC SE'
nl|'\n'
string|"'\\xff\\xfa\\x01\\x02\\x03\\xff\\xf0'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requestNegotiationEscapesIAC
dedent|''
name|'def'
name|'test_requestNegotiationEscapesIAC'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the payload for a subnegotiation includes I{IAC}, it is escaped by\n        L{telnet.Telnet.requestNegotiation} with another I{IAC}.\n\n        See RFC 855.\n        """'
newline|'\n'
name|'transport'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'requestNegotiation'
op|'('
string|"'\\x01'"
op|','
string|"'\\xff'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|"'\\xff\\xfa\\x01\\xff\\xff\\xff\\xf0'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_deliver
dedent|''
name|'def'
name|'_deliver'
op|'('
name|'self'
op|','
name|'bytes'
op|','
op|'*'
name|'expected'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Pass the given bytes to the protocol\'s C{dataReceived} method and\n        assert that the given events occur.\n        """'
newline|'\n'
name|'received'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'events'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
name|'bytes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'received'
op|','
name|'list'
op|'('
name|'expected'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_oneApplicationDataByte
dedent|''
name|'def'
name|'test_oneApplicationDataByte'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        One application-data byte in the default state gets delivered right\n        away.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
string|"'a'"
op|','
op|'('
string|"'bytes'"
op|','
string|"'a'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_twoApplicationDataBytes
dedent|''
name|'def'
name|'test_twoApplicationDataBytes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two application-data bytes in the default state get delivered\n        together.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
string|"'bc'"
op|','
op|'('
string|"'bytes'"
op|','
string|"'bc'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_threeApplicationDataBytes
dedent|''
name|'def'
name|'test_threeApplicationDataBytes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Three application-data bytes followed by a control byte get\n        delivered, but the control byte doesn\'t.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
string|"'def'"
op|'+'
name|'telnet'
op|'.'
name|'IAC'
op|','
op|'('
string|"'bytes'"
op|','
string|"'def'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_escapedControl
dedent|''
name|'def'
name|'test_escapedControl'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        IAC in the escaped state gets delivered and so does another\n        application-data byte following it.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
name|'telnet'
op|'.'
name|'IAC'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
name|'telnet'
op|'.'
name|'IAC'
op|'+'
string|"'g'"
op|','
op|'('
string|"'bytes'"
op|','
name|'telnet'
op|'.'
name|'IAC'
op|'+'
string|"'g'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_carriageReturn
dedent|''
name|'def'
name|'test_carriageReturn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A carriage return only puts the protocol into the newline state.  A\n        linefeed in the newline state causes just the newline to be\n        delivered.  A nul in the newline state causes a carriage return to\n        be delivered.  An IAC in the newline state causes a carriage return\n        to be delivered and puts the protocol into the escaped state. \n        Anything else causes a carriage return and that thing to be\n        delivered.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
string|"'\\r'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
string|"'\\n'"
op|','
op|'('
string|"'bytes'"
op|','
string|"'\\n'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
string|"'\\r\\n'"
op|','
op|'('
string|"'bytes'"
op|','
string|"'\\n'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
string|"'\\r'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
string|"'\\0'"
op|','
op|'('
string|"'bytes'"
op|','
string|"'\\r'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
string|"'\\r\\0'"
op|','
op|'('
string|"'bytes'"
op|','
string|"'\\r'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
string|"'\\r'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
string|"'a'"
op|','
op|'('
string|"'bytes'"
op|','
string|"'\\ra'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
string|"'\\ra'"
op|','
op|'('
string|"'bytes'"
op|','
string|"'\\ra'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
string|"'\\r'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
nl|'\n'
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'IAC'
op|'+'
string|"'x'"
op|','
op|'('
string|"'bytes'"
op|','
string|"'\\r'"
op|'+'
name|'telnet'
op|'.'
name|'IAC'
op|'+'
string|"'x'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_applicationDataBeforeSimpleCommand
dedent|''
name|'def'
name|'test_applicationDataBeforeSimpleCommand'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Application bytes received before a command are delivered before the\n        command is processed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
nl|'\n'
string|"'x'"
op|'+'
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'NOP'
op|','
nl|'\n'
op|'('
string|"'bytes'"
op|','
string|"'x'"
op|')'
op|','
op|'('
string|"'command'"
op|','
name|'telnet'
op|'.'
name|'NOP'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_applicationDataBeforeCommand
dedent|''
name|'def'
name|'test_applicationDataBeforeCommand'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Application bytes received before a WILL/WONT/DO/DONT are delivered\n        before the command is processed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'commandMap'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
nl|'\n'
string|"'y'"
op|'+'
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'WILL'
op|'+'
string|"'\\x00'"
op|','
nl|'\n'
op|'('
string|"'bytes'"
op|','
string|"'y'"
op|')'
op|','
op|'('
string|"'command'"
op|','
name|'telnet'
op|'.'
name|'WILL'
op|','
string|"'\\x00'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_applicationDataBeforeSubnegotiation
dedent|''
name|'def'
name|'test_applicationDataBeforeSubnegotiation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Application bytes received before a subnegotiation command are\n        delivered before the negotiation is processed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_deliver'
op|'('
nl|'\n'
string|"'z'"
op|'+'
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'SB'
op|'+'
string|"'Qx'"
op|'+'
name|'telnet'
op|'.'
name|'IAC'
op|'+'
name|'telnet'
op|'.'
name|'SE'
op|','
nl|'\n'
op|'('
string|"'bytes'"
op|','
string|"'z'"
op|')'
op|','
op|'('
string|"'negotiate'"
op|','
string|"'Q'"
op|','
op|'['
string|"'x'"
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

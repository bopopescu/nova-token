begin_unit
comment|'# Copyright (C) 2007-2008 Twisted Matrix Laboratories'
nl|'\n'
comment|'# See LICENSE for details'
nl|'\n'
nl|'\n'
string|'"""\nTest ssh/channel.py.\n"""'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
name|'import'
name|'channel'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockTransport
name|'class'
name|'MockTransport'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mock Transport.  All we use is the getPeer() and getHost() methods.\n    Channels implement the ITransport interface, and their getPeer() and\n    getHost() methods return (\'SSH\', <transport\'s getPeer/Host value>) so\n    we need to implement these methods so they have something to draw\n    from.\n    """'
newline|'\n'
DECL|member|getPeer
name|'def'
name|'getPeer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|"'MockPeer'"
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|"'MockHost'"
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockConnection
dedent|''
dedent|''
name|'class'
name|'MockConnection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mock for twisted.conch.ssh.connection.SSHConnection.  Record the data\n    that channels send, and when they try to close the connection.\n\n    @ivar data: a C{dict} mapping channel id #s to lists of data sent by that\n        channel.\n    @ivar extData: a C{dict} mapping channel id #s to lists of 2-tuples\n        (extended data type, data) sent by that channel.\n    @ivar closes: a C{dict} mapping channel id #s to True if that channel sent\n        a close message.\n    """'
newline|'\n'
DECL|variable|transport
name|'transport'
op|'='
name|'MockTransport'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'extData'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'closes'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|logPrefix
dedent|''
name|'def'
name|'logPrefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return our logging prefix.\n        """'
newline|'\n'
name|'return'
string|'"MockConnection"'
newline|'\n'
nl|'\n'
DECL|member|sendData
dedent|''
name|'def'
name|'sendData'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record the sent data.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'.'
name|'setdefault'
op|'('
name|'channel'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendExtendedData
dedent|''
name|'def'
name|'sendExtendedData'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'type'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record the sent extended data.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'extData'
op|'.'
name|'setdefault'
op|'('
name|'channel'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
op|'('
name|'type'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendClose
dedent|''
name|'def'
name|'sendClose'
op|'('
name|'self'
op|','
name|'channel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record that the channel sent a close message.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'closes'
op|'['
name|'channel'
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ChannelTestCase
dedent|''
dedent|''
name|'class'
name|'ChannelTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initialize the channel.  remoteMaxPacket is 10 so that data is able\n        to be sent (the default of 0 means no data is sent because no packets\n        are made).\n        """'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'='
name|'MockConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'='
name|'channel'
op|'.'
name|'SSHChannel'
op|'('
name|'conn'
op|'='
name|'self'
op|'.'
name|'conn'
op|','
nl|'\n'
name|'remoteMaxPacket'
op|'='
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'name'
op|'='
string|"'channel'"
newline|'\n'
nl|'\n'
DECL|member|test_init
dedent|''
name|'def'
name|'test_init'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that SSHChannel initializes correctly.  localWindowSize defaults\n        to 131072 (2**17) and localMaxPacket to 32768 (2**15) as reasonable\n        defaults (what OpenSSH uses for those variables).\n\n        The values in the second set of assertions are meaningless; they serve\n        only to verify that the instance variables are assigned in the correct\n        order.\n        """'
newline|'\n'
name|'c'
op|'='
name|'channel'
op|'.'
name|'SSHChannel'
op|'('
name|'conn'
op|'='
name|'self'
op|'.'
name|'conn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c'
op|'.'
name|'localWindowSize'
op|','
number|'131072'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c'
op|'.'
name|'localWindowLeft'
op|','
number|'131072'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c'
op|'.'
name|'localMaxPacket'
op|','
number|'32768'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c'
op|'.'
name|'remoteWindowLeft'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c'
op|'.'
name|'remoteMaxPacket'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c'
op|'.'
name|'conn'
op|','
name|'self'
op|'.'
name|'conn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c'
op|'.'
name|'data'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c'
op|'.'
name|'avatar'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'c2'
op|'='
name|'channel'
op|'.'
name|'SSHChannel'
op|'('
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|','
number|'6'
op|','
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c2'
op|'.'
name|'localWindowSize'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c2'
op|'.'
name|'localWindowLeft'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c2'
op|'.'
name|'localMaxPacket'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c2'
op|'.'
name|'remoteWindowLeft'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c2'
op|'.'
name|'remoteMaxPacket'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c2'
op|'.'
name|'conn'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c2'
op|'.'
name|'data'
op|','
number|'6'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c2'
op|'.'
name|'avatar'
op|','
number|'7'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_str
dedent|''
name|'def'
name|'test_str'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that str(SSHChannel) works gives the channel name and local and\n        remote windows at a glance..\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'self'
op|'.'
name|'channel'
op|')'
op|','
string|"'<SSHChannel channel (lw 131072 '"
nl|'\n'
string|"'rw 0)>'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_logPrefix
dedent|''
name|'def'
name|'test_logPrefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that SSHChannel.logPrefix gives the name of the channel, the\n        local channel ID and the underlying connection.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'logPrefix'
op|'('
op|')'
op|','
string|"'SSHChannel channel '"
nl|'\n'
string|"'(unknown) on MockConnection'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_addWindowBytes
dedent|''
name|'def'
name|'test_addWindowBytes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that addWindowBytes adds bytes to the window and resumes writing\n        if it was paused.\n        """'
newline|'\n'
name|'cb'
op|'='
op|'['
name|'False'
op|']'
newline|'\n'
DECL|function|stubStartWriting
name|'def'
name|'stubStartWriting'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cb'
op|'['
number|'0'
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'channel'
op|'.'
name|'startWriting'
op|'='
name|'stubStartWriting'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'write'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'writeExtended'
op|'('
number|'1'
op|','
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'addWindowBytes'
op|'('
number|'50'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'remoteWindowLeft'
op|','
number|'50'
op|'-'
number|'4'
op|'-'
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'areWriting'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'cb'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'buf'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'data'
op|'['
name|'self'
op|'.'
name|'channel'
op|']'
op|','
op|'['
string|"'test'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'extBuf'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'extData'
op|'['
name|'self'
op|'.'
name|'channel'
op|']'
op|','
op|'['
op|'('
number|'1'
op|','
string|"'test'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'cb'
op|'['
number|'0'
op|']'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'addWindowBytes'
op|'('
number|'20'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'cb'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'write'
op|'('
string|"'a'"
op|'*'
number|'80'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'addWindowBytes'
op|'('
number|'20'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'cb'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_requestReceived
dedent|''
name|'def'
name|'test_requestReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that requestReceived handles requests by dispatching them to\n        request_* methods.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'request_test_method'
op|'='
name|'lambda'
name|'data'
op|':'
name|'data'
op|'=='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'requestReceived'
op|'('
string|"'test-method'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'requestReceived'
op|'('
string|"'test-method'"
op|','
string|"'a'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'requestReceived'
op|'('
string|"'bad-method'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_closeReceieved
dedent|''
name|'def'
name|'test_closeReceieved'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the default closeReceieved closes the connection.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'closing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'closeReceived'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'closing'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_write
dedent|''
name|'def'
name|'test_write'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that write handles data correctly.  Send data up to the size\n        of the remote window, splitting the data into packets of length\n        remoteMaxPacket.\n        """'
newline|'\n'
name|'cb'
op|'='
op|'['
name|'False'
op|']'
newline|'\n'
DECL|function|stubStopWriting
name|'def'
name|'stubStopWriting'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cb'
op|'['
number|'0'
op|']'
op|'='
name|'True'
newline|'\n'
comment|'# no window to start with'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'channel'
op|'.'
name|'stopWriting'
op|'='
name|'stubStopWriting'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'write'
op|'('
string|"'d'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'write'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'areWriting'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'cb'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
comment|'# regular write'
nl|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'addWindowBytes'
op|'('
number|'20'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'write'
op|'('
string|"'ta'"
op|')'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'data'
op|'['
name|'self'
op|'.'
name|'channel'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'data'
op|','
op|'['
string|"'da'"
op|','
string|"'ta'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'remoteWindowLeft'
op|','
number|'16'
op|')'
newline|'\n'
comment|'# larger than max packet'
nl|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'write'
op|'('
string|"'12345678901'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'data'
op|','
op|'['
string|"'da'"
op|','
string|"'ta'"
op|','
string|"'1234567890'"
op|','
string|"'1'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'remoteWindowLeft'
op|','
number|'5'
op|')'
newline|'\n'
comment|'# running out of window'
nl|'\n'
name|'cb'
op|'['
number|'0'
op|']'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'write'
op|'('
string|"'123456'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'areWriting'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'cb'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'data'
op|','
op|'['
string|"'da'"
op|','
string|"'ta'"
op|','
string|"'1234567890'"
op|','
string|"'1'"
op|','
string|"'12345'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'buf'
op|','
string|"'6'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'remoteWindowLeft'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_writeExtended
dedent|''
name|'def'
name|'test_writeExtended'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that writeExtended handles data correctly.  Send extended data\n        up to the size of the window, splitting the extended data into packets\n        of length remoteMaxPacket.\n        """'
newline|'\n'
name|'cb'
op|'='
op|'['
name|'False'
op|']'
newline|'\n'
DECL|function|stubStopWriting
name|'def'
name|'stubStopWriting'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cb'
op|'['
number|'0'
op|']'
op|'='
name|'True'
newline|'\n'
comment|'# no window to start with'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'channel'
op|'.'
name|'stopWriting'
op|'='
name|'stubStopWriting'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'writeExtended'
op|'('
number|'1'
op|','
string|"'d'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'writeExtended'
op|'('
number|'1'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'writeExtended'
op|'('
number|'2'
op|','
string|"'t'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'areWriting'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'cb'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
comment|'# regular write'
nl|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'addWindowBytes'
op|'('
number|'20'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'writeExtended'
op|'('
number|'2'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'extData'
op|'['
name|'self'
op|'.'
name|'channel'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'data'
op|','
op|'['
op|'('
number|'1'
op|','
string|"'da'"
op|')'
op|','
op|'('
number|'2'
op|','
string|"'t'"
op|')'
op|','
op|'('
number|'2'
op|','
string|"'a'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'remoteWindowLeft'
op|','
number|'16'
op|')'
newline|'\n'
comment|'# larger than max packet'
nl|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'writeExtended'
op|'('
number|'3'
op|','
string|"'12345678901'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'data'
op|','
op|'['
op|'('
number|'1'
op|','
string|"'da'"
op|')'
op|','
op|'('
number|'2'
op|','
string|"'t'"
op|')'
op|','
op|'('
number|'2'
op|','
string|"'a'"
op|')'
op|','
nl|'\n'
op|'('
number|'3'
op|','
string|"'1234567890'"
op|')'
op|','
op|'('
number|'3'
op|','
string|"'1'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'remoteWindowLeft'
op|','
number|'5'
op|')'
newline|'\n'
comment|'# running out of window'
nl|'\n'
name|'cb'
op|'['
number|'0'
op|']'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'writeExtended'
op|'('
number|'4'
op|','
string|"'123456'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'areWriting'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'cb'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'data'
op|','
op|'['
op|'('
number|'1'
op|','
string|"'da'"
op|')'
op|','
op|'('
number|'2'
op|','
string|"'t'"
op|')'
op|','
op|'('
number|'2'
op|','
string|"'a'"
op|')'
op|','
nl|'\n'
op|'('
number|'3'
op|','
string|"'1234567890'"
op|')'
op|','
op|'('
number|'3'
op|','
string|"'1'"
op|')'
op|','
op|'('
number|'4'
op|','
string|"'12345'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'extBuf'
op|','
op|'['
op|'['
number|'4'
op|','
string|"'6'"
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'remoteWindowLeft'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_writeSequence
dedent|''
name|'def'
name|'test_writeSequence'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that writeSequence is equivalent to write(\'\'.join(sequece)).\n        """'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'addWindowBytes'
op|'('
number|'20'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'writeSequence'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'range'
op|'('
number|'10'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'data'
op|'['
name|'self'
op|'.'
name|'channel'
op|']'
op|','
op|'['
string|"'0123456789'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loseConnection
dedent|''
name|'def'
name|'test_loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Tesyt that loseConnection() doesn\'t close the channel until all\n        the data is sent.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'write'
op|'('
string|"'data'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'writeExtended'
op|'('
number|'1'
op|','
string|"'datadata'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'closes'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'channel'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'addWindowBytes'
op|'('
number|'4'
op|')'
comment|'# send regular data'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'closes'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'channel'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'addWindowBytes'
op|'('
number|'8'
op|')'
comment|'# send extended data'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'closes'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'channel'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getPeer
dedent|''
name|'def'
name|'test_getPeer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that getPeer() returns (\'SSH\', <connection transport peer>).\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'getPeer'
op|'('
op|')'
op|','
op|'('
string|"'SSH'"
op|','
string|"'MockPeer'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getHost
dedent|''
name|'def'
name|'test_getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that getHost() returns (\'SSH\', <connection transport host>).\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'channel'
op|'.'
name|'getHost'
op|'('
op|')'
op|','
op|'('
string|"'SSH'"
op|','
string|"'MockHost'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

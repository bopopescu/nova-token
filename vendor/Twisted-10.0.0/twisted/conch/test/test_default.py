begin_unit
comment|'# Copyright (c) 2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.conch.client.default}.\n"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'Crypto'
op|'.'
name|'Cipher'
op|'.'
name|'DES3'
newline|'\n'
name|'import'
name|'pyasn1'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|skip
indent|'    '
name|'skip'
op|'='
string|'"PyCrypto and PyASN1 required for twisted.conch.client.default."'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'client'
op|'.'
name|'agent'
name|'import'
name|'SSHAgentClient'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'client'
op|'.'
name|'default'
name|'import'
name|'SSHUserAuthClient'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'client'
op|'.'
name|'options'
name|'import'
name|'ConchOptions'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
op|'.'
name|'keys'
name|'import'
name|'Key'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
name|'import'
name|'keydata'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'StringTransport'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SSHUserAuthClientTest
name|'class'
name|'SSHUserAuthClientTest'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{SSHUserAuthClient}.\n\n    @type rsaPublic: L{Key}\n    @ivar rsaPublic: A public RSA key.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'rsaPublic'
op|'='
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tmpdir'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tmpdir'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rsaFile'
op|'='
name|'self'
op|'.'
name|'tmpdir'
op|'.'
name|'child'
op|'('
string|"'id_rsa'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rsaFile'
op|'.'
name|'setContent'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tmpdir'
op|'.'
name|'child'
op|'('
string|"'id_rsa.pub'"
op|')'
op|'.'
name|'setContent'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_signDataWithAgent
dedent|''
name|'def'
name|'test_signDataWithAgent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When connected to an agent, L{SSHUserAuthClient} can use it to\n        request signatures of particular data with a particular L{Key}.\n        """'
newline|'\n'
name|'client'
op|'='
name|'SSHUserAuthClient'
op|'('
string|'"user"'
op|','
name|'ConchOptions'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'agent'
op|'='
name|'SSHAgentClient'
op|'('
op|')'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'agent'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'keyAgent'
op|'='
name|'agent'
newline|'\n'
name|'cleartext'
op|'='
string|'"Sign here"'
newline|'\n'
name|'client'
op|'.'
name|'signData'
op|'('
name|'self'
op|'.'
name|'rsaPublic'
op|','
name|'cleartext'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|'"\\x00\\x00\\x00\\x8b\\r\\x00\\x00\\x00u"'
op|'+'
name|'self'
op|'.'
name|'rsaPublic'
op|'.'
name|'blob'
op|'('
op|')'
op|'+'
nl|'\n'
string|'"\\x00\\x00\\x00\\t"'
op|'+'
name|'cleartext'
op|'+'
nl|'\n'
string|'"\\x00\\x00\\x00\\x00"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_agentGetPublicKey
dedent|''
name|'def'
name|'test_agentGetPublicKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SSHUserAuthClient} looks up public keys from the agent using the\n        L{SSHAgentClient} class.  That L{SSHAgentClient.getPublicKey} returns a\n        L{Key} object with one of the public keys in the agent.  If no more\n        keys are present, it returns C{None}.\n        """'
newline|'\n'
name|'agent'
op|'='
name|'SSHAgentClient'
op|'('
op|')'
newline|'\n'
name|'agent'
op|'.'
name|'blobs'
op|'='
op|'['
name|'self'
op|'.'
name|'rsaPublic'
op|'.'
name|'blob'
op|'('
op|')'
op|']'
newline|'\n'
name|'key'
op|'='
name|'agent'
op|'.'
name|'getPublicKey'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'isPublic'
op|'('
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|','
name|'self'
op|'.'
name|'rsaPublic'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'agent'
op|'.'
name|'getPublicKey'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPublicKeyFromFile
dedent|''
name|'def'
name|'test_getPublicKeyFromFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SSHUserAuthClient.getPublicKey()} is able to get a public key from\n        the first file described by its options\' C{identitys} list, and return\n        the corresponding public L{Key} object.\n        """'
newline|'\n'
name|'options'
op|'='
name|'ConchOptions'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'identitys'
op|'='
op|'['
name|'self'
op|'.'
name|'rsaFile'
op|'.'
name|'path'
op|']'
newline|'\n'
name|'client'
op|'='
name|'SSHUserAuthClient'
op|'('
string|'"user"'
op|','
name|'options'
op|','
name|'None'
op|')'
newline|'\n'
name|'key'
op|'='
name|'client'
op|'.'
name|'getPublicKey'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'isPublic'
op|'('
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|','
name|'self'
op|'.'
name|'rsaPublic'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPublicKeyAgentFallback
dedent|''
name|'def'
name|'test_getPublicKeyAgentFallback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an agent is present, but doesn\'t return a key,\n        L{SSHUserAuthClient.getPublicKey} continue with the normal key lookup.\n        """'
newline|'\n'
name|'options'
op|'='
name|'ConchOptions'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'identitys'
op|'='
op|'['
name|'self'
op|'.'
name|'rsaFile'
op|'.'
name|'path'
op|']'
newline|'\n'
name|'agent'
op|'='
name|'SSHAgentClient'
op|'('
op|')'
newline|'\n'
name|'client'
op|'='
name|'SSHUserAuthClient'
op|'('
string|'"user"'
op|','
name|'options'
op|','
name|'None'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'keyAgent'
op|'='
name|'agent'
newline|'\n'
name|'key'
op|'='
name|'client'
op|'.'
name|'getPublicKey'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'isPublic'
op|'('
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|','
name|'self'
op|'.'
name|'rsaPublic'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPublicKeyBadKeyError
dedent|''
name|'def'
name|'test_getPublicKeyBadKeyError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If L{keys.Key.fromFile} raises a L{keys.BadKeyError}, the\n        L{SSHUserAuthClient.getPublicKey} tries again to get a public key by\n        calling itself recursively.\n        """'
newline|'\n'
name|'options'
op|'='
name|'ConchOptions'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tmpdir'
op|'.'
name|'child'
op|'('
string|"'id_dsa.pub'"
op|')'
op|'.'
name|'setContent'
op|'('
name|'keydata'
op|'.'
name|'publicDSA_openssh'
op|')'
newline|'\n'
name|'dsaFile'
op|'='
name|'self'
op|'.'
name|'tmpdir'
op|'.'
name|'child'
op|'('
string|"'id_dsa'"
op|')'
newline|'\n'
name|'dsaFile'
op|'.'
name|'setContent'
op|'('
name|'keydata'
op|'.'
name|'privateDSA_openssh'
op|')'
newline|'\n'
name|'options'
op|'.'
name|'identitys'
op|'='
op|'['
name|'self'
op|'.'
name|'rsaFile'
op|'.'
name|'path'
op|','
name|'dsaFile'
op|'.'
name|'path'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'tmpdir'
op|'.'
name|'child'
op|'('
string|"'id_rsa.pub'"
op|')'
op|'.'
name|'setContent'
op|'('
string|"'not a key!'"
op|')'
newline|'\n'
name|'client'
op|'='
name|'SSHUserAuthClient'
op|'('
string|'"user"'
op|','
name|'options'
op|','
name|'None'
op|')'
newline|'\n'
name|'key'
op|'='
name|'client'
op|'.'
name|'getPublicKey'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'isPublic'
op|'('
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|','
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicDSA_openssh'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'client'
op|'.'
name|'usedFiles'
op|','
op|'['
name|'self'
op|'.'
name|'rsaFile'
op|'.'
name|'path'
op|','
name|'dsaFile'
op|'.'
name|'path'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPrivateKey
dedent|''
name|'def'
name|'test_getPrivateKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SSHUserAuthClient.getPrivateKey} will load a private key from the\n        last used file populated by L{SSHUserAuthClient.getPublicKey}, and\n        return a L{Deferred} which fires with the corresponding private L{Key}.\n        """'
newline|'\n'
name|'rsaPrivate'
op|'='
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'options'
op|'='
name|'ConchOptions'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'identitys'
op|'='
op|'['
name|'self'
op|'.'
name|'rsaFile'
op|'.'
name|'path'
op|']'
newline|'\n'
name|'client'
op|'='
name|'SSHUserAuthClient'
op|'('
string|'"user"'
op|','
name|'options'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# Populate the list of used files'
nl|'\n'
name|'client'
op|'.'
name|'getPublicKey'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_cbGetPrivateKey
name|'def'
name|'_cbGetPrivateKey'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'isPublic'
op|'('
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|','
name|'rsaPrivate'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'client'
op|'.'
name|'getPrivateKey'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'_cbGetPrivateKey'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPrivateKeyPassphrase
dedent|''
name|'def'
name|'test_getPrivateKeyPassphrase'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SSHUserAuthClient} can get a private key from a file, and return a\n        Deferred called back with a private L{Key} object, even if the key is\n        encrypted.\n        """'
newline|'\n'
name|'rsaPrivate'
op|'='
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'passphrase'
op|'='
string|"'this is the passphrase'"
newline|'\n'
name|'self'
op|'.'
name|'rsaFile'
op|'.'
name|'setContent'
op|'('
name|'rsaPrivate'
op|'.'
name|'toString'
op|'('
string|"'openssh'"
op|','
name|'passphrase'
op|')'
op|')'
newline|'\n'
name|'options'
op|'='
name|'ConchOptions'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'identitys'
op|'='
op|'['
name|'self'
op|'.'
name|'rsaFile'
op|'.'
name|'path'
op|']'
newline|'\n'
name|'client'
op|'='
name|'SSHUserAuthClient'
op|'('
string|'"user"'
op|','
name|'options'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# Populate the list of used files'
nl|'\n'
name|'client'
op|'.'
name|'getPublicKey'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_getPassword
name|'def'
name|'_getPassword'
op|'('
name|'prompt'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'prompt'
op|','
nl|'\n'
string|'"Enter passphrase for key \'%s\': "'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'rsaFile'
op|'.'
name|'path'
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'passphrase'
newline|'\n'
nl|'\n'
DECL|function|_cbGetPrivateKey
dedent|''
name|'def'
name|'_cbGetPrivateKey'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'isPublic'
op|'('
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|','
name|'rsaPrivate'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'client'
op|','
string|"'_getPassword'"
op|','
name|'_getPassword'
op|')'
newline|'\n'
name|'return'
name|'client'
op|'.'
name|'getPrivateKey'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'_cbGetPrivateKey'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

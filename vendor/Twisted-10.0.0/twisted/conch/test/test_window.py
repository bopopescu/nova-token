begin_unit
nl|'\n'
string|'"""\nTests for the insults windowing module, L{twisted.conch.insults.window}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'insults'
op|'.'
name|'window'
name|'import'
name|'TopWindow'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TopWindowTests
name|'class'
name|'TopWindowTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{TopWindow}, the root window container class.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_paintScheduling
name|'def'
name|'test_paintScheduling'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that L{TopWindow.repaint} schedules an actual paint to occur\n        using the scheduling object passed to its initializer.\n        """'
newline|'\n'
name|'paints'
op|'='
op|'['
op|']'
newline|'\n'
name|'scheduled'
op|'='
op|'['
op|']'
newline|'\n'
name|'root'
op|'='
name|'TopWindow'
op|'('
name|'lambda'
op|':'
name|'paints'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
op|','
name|'scheduled'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
comment|'# Nothing should have happened yet.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'paints'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'scheduled'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Cause a paint to be scheduled.'
nl|'\n'
name|'root'
op|'.'
name|'repaint'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'paints'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'scheduled'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Do another one to verify nothing else happens as long as the previous'
nl|'\n'
comment|'# one is still pending.'
nl|'\n'
name|'root'
op|'.'
name|'repaint'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'paints'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'scheduled'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Run the actual paint call.'
nl|'\n'
name|'scheduled'
op|'.'
name|'pop'
op|'('
op|')'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'paints'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'scheduled'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Do one more to verify that now that the previous one is finished'
nl|'\n'
comment|'# future paints will succeed.'
nl|'\n'
name|'root'
op|'.'
name|'repaint'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'paints'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'scheduled'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

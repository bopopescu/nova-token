begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_helper -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'insults'
name|'import'
name|'helper'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'insults'
op|'.'
name|'insults'
name|'import'
name|'G0'
op|','
name|'G1'
op|','
name|'G2'
op|','
name|'G3'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'insults'
op|'.'
name|'insults'
name|'import'
name|'modes'
op|','
name|'privateModes'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'insults'
op|'.'
name|'insults'
name|'import'
name|'NORMAL'
op|','
name|'BOLD'
op|','
name|'UNDERLINE'
op|','
name|'BLINK'
op|','
name|'REVERSE_VIDEO'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
DECL|variable|WIDTH
name|'WIDTH'
op|'='
number|'80'
newline|'\n'
DECL|variable|HEIGHT
name|'HEIGHT'
op|'='
number|'24'
newline|'\n'
nl|'\n'
DECL|class|BufferTestCase
name|'class'
name|'BufferTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'term'
op|'='
name|'helper'
op|'.'
name|'TerminalBuffer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInitialState
dedent|''
name|'def'
name|'testInitialState'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'width'
op|','
name|'WIDTH'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'height'
op|','
name|'HEIGHT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'self'
op|'.'
name|'term'
op|')'
op|','
nl|'\n'
string|"'\\n'"
op|'*'
op|'('
name|'HEIGHT'
op|'-'
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_initialPrivateModes
dedent|''
name|'def'
name|'test_initialPrivateModes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that only DEC Auto Wrap Mode (DECAWM) and DEC Text Cursor Enable\n        Mode (DECTCEM) are initially in the Set Mode (SM) state.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
op|'{'
name|'privateModes'
op|'.'
name|'AUTO_WRAP'
op|':'
name|'True'
op|','
nl|'\n'
name|'privateModes'
op|'.'
name|'CURSOR_MODE'
op|':'
name|'True'
op|'}'
op|','
nl|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'privateModes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_carriageReturn
dedent|''
name|'def'
name|'test_carriageReturn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{"\\r"} moves the cursor to the first column in the current row.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorForward'
op|'('
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorDown'
op|'('
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'5'
op|','
number|'3'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'insertAtCursor'
op|'('
string|'"\\r"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
number|'3'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_linefeed
dedent|''
name|'def'
name|'test_linefeed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{"\\n"} moves the cursor to the next row without changing the column.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorForward'
op|'('
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'5'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'insertAtCursor'
op|'('
string|'"\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'5'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_newline
dedent|''
name|'def'
name|'test_newline'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{write} transforms C{"\\n"} into C{"\\r\\n"}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorForward'
op|'('
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorDown'
op|'('
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'5'
op|','
number|'3'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'"\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
number|'4'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setPrivateModes
dedent|''
name|'def'
name|'test_setPrivateModes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that L{helper.TerminalBuffer.setPrivateModes} changes the Set\n        Mode (SM) state to "set" for the private modes it is passed.\n        """'
newline|'\n'
name|'expected'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'privateModes'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'setPrivateModes'
op|'('
op|'['
name|'privateModes'
op|'.'
name|'SCROLL'
op|','
name|'privateModes'
op|'.'
name|'SCREEN'
op|']'
op|')'
newline|'\n'
name|'expected'
op|'['
name|'privateModes'
op|'.'
name|'SCROLL'
op|']'
op|'='
name|'True'
newline|'\n'
name|'expected'
op|'['
name|'privateModes'
op|'.'
name|'SCREEN'
op|']'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'self'
op|'.'
name|'term'
op|'.'
name|'privateModes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_resetPrivateModes
dedent|''
name|'def'
name|'test_resetPrivateModes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that L{helper.TerminalBuffer.resetPrivateModes} changes the Set\n        Mode (SM) state to "reset" for the private modes it is passed.\n        """'
newline|'\n'
name|'expected'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'privateModes'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'resetPrivateModes'
op|'('
op|'['
name|'privateModes'
op|'.'
name|'AUTO_WRAP'
op|','
name|'privateModes'
op|'.'
name|'CURSOR_MODE'
op|']'
op|')'
newline|'\n'
name|'del'
name|'expected'
op|'['
name|'privateModes'
op|'.'
name|'AUTO_WRAP'
op|']'
newline|'\n'
name|'del'
name|'expected'
op|'['
name|'privateModes'
op|'.'
name|'CURSOR_MODE'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'self'
op|'.'
name|'term'
op|'.'
name|'privateModes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testCursorDown
dedent|''
name|'def'
name|'testCursorDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorDown'
op|'('
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
number|'3'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorDown'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
number|'4'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorDown'
op|'('
name|'HEIGHT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
name|'HEIGHT'
op|'-'
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCursorUp
dedent|''
name|'def'
name|'testCursorUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorUp'
op|'('
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorDown'
op|'('
number|'20'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorUp'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
number|'19'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorUp'
op|'('
number|'19'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCursorForward
dedent|''
name|'def'
name|'testCursorForward'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorForward'
op|'('
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'2'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorForward'
op|'('
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'4'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorForward'
op|'('
name|'WIDTH'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
name|'WIDTH'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCursorBackward
dedent|''
name|'def'
name|'testCursorBackward'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorForward'
op|'('
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorBackward'
op|'('
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'8'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorBackward'
op|'('
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'1'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorBackward'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorBackward'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCursorPositioning
dedent|''
name|'def'
name|'testCursorPositioning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorPosition'
op|'('
number|'3'
op|','
number|'9'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'3'
op|','
number|'9'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSimpleWriting
dedent|''
name|'def'
name|'testSimpleWriting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
string|'"Hello, world."'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
name|'s'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'self'
op|'.'
name|'term'
op|')'
op|','
nl|'\n'
name|'s'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
string|"'\\n'"
op|'*'
op|'('
name|'HEIGHT'
op|'-'
number|'2'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testOvertype
dedent|''
name|'def'
name|'testOvertype'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
string|'"hello, world."'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
name|'s'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorBackward'
op|'('
name|'len'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'resetModes'
op|'('
op|'['
name|'modes'
op|'.'
name|'IRM'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'"H"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'self'
op|'.'
name|'term'
op|')'
op|','
nl|'\n'
op|'('
string|'"H"'
op|'+'
name|'s'
op|'['
number|'1'
op|':'
op|']'
op|')'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
string|"'\\n'"
op|'*'
op|'('
name|'HEIGHT'
op|'-'
number|'2'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInsert
dedent|''
name|'def'
name|'testInsert'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
string|'"ello, world."'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
name|'s'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorBackward'
op|'('
name|'len'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'setModes'
op|'('
op|'['
name|'modes'
op|'.'
name|'IRM'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'"H"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'self'
op|'.'
name|'term'
op|')'
op|','
nl|'\n'
op|'('
string|'"H"'
op|'+'
name|'s'
op|')'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
string|"'\\n'"
op|'*'
op|'('
name|'HEIGHT'
op|'-'
number|'2'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testWritingInTheMiddle
dedent|''
name|'def'
name|'testWritingInTheMiddle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
string|'"Hello, world."'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorDown'
op|'('
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorForward'
op|'('
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
name|'s'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'self'
op|'.'
name|'term'
op|')'
op|','
nl|'\n'
string|"'\\n'"
op|'*'
number|'5'
op|'+'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'fill'
op|'*'
number|'5'
op|')'
op|'+'
name|'s'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
string|"'\\n'"
op|'*'
op|'('
name|'HEIGHT'
op|'-'
number|'7'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testWritingWrappedAtEndOfLine
dedent|''
name|'def'
name|'testWritingWrappedAtEndOfLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
string|'"Hello, world."'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorForward'
op|'('
name|'WIDTH'
op|'-'
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
name|'s'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'self'
op|'.'
name|'term'
op|')'
op|','
nl|'\n'
name|'s'
op|'['
op|':'
number|'5'
op|']'
op|'.'
name|'rjust'
op|'('
name|'WIDTH'
op|')'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
name|'s'
op|'['
number|'5'
op|':'
op|']'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
string|"'\\n'"
op|'*'
op|'('
name|'HEIGHT'
op|'-'
number|'3'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testIndex
dedent|''
name|'def'
name|'testIndex'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'term'
op|'.'
name|'index'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorDown'
op|'('
name|'HEIGHT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
name|'HEIGHT'
op|'-'
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'index'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
name|'HEIGHT'
op|'-'
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testReverseIndex
dedent|''
name|'def'
name|'testReverseIndex'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'term'
op|'.'
name|'reverseIndex'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorDown'
op|'('
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
number|'2'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'reverseIndex'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_nextLine
dedent|''
name|'def'
name|'test_nextLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{nextLine} positions the cursor at the beginning of the row below the\n        current row.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'nextLine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorForward'
op|'('
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'5'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'nextLine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'0'
op|','
number|'2'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSaveCursor
dedent|''
name|'def'
name|'testSaveCursor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorDown'
op|'('
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorForward'
op|'('
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'7'
op|','
number|'5'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'saveCursor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorDown'
op|'('
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorBackward'
op|'('
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'4'
op|','
number|'12'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'restoreCursor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'term'
op|'.'
name|'reportCursorPosition'
op|'('
op|')'
op|','
op|'('
number|'7'
op|','
number|'5'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSingleShifts
dedent|''
name|'def'
name|'testSingleShifts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'term'
op|'.'
name|'singleShift2'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|"'Hi'"
op|')'
newline|'\n'
nl|'\n'
name|'ch'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'getCharacter'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'0'
op|']'
op|','
string|"'H'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'charset'
op|','
name|'G2'
op|')'
newline|'\n'
nl|'\n'
name|'ch'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'getCharacter'
op|'('
number|'1'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'0'
op|']'
op|','
string|"'i'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'charset'
op|','
name|'G0'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'singleShift3'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|"'!!'"
op|')'
newline|'\n'
nl|'\n'
name|'ch'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'getCharacter'
op|'('
number|'2'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'0'
op|']'
op|','
string|"'!'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'charset'
op|','
name|'G3'
op|')'
newline|'\n'
nl|'\n'
name|'ch'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'getCharacter'
op|'('
number|'3'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'0'
op|']'
op|','
string|"'!'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'charset'
op|','
name|'G0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testShifting
dedent|''
name|'def'
name|'testShifting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s1'
op|'='
string|'"Hello"'
newline|'\n'
name|'s2'
op|'='
string|'"World"'
newline|'\n'
name|'s3'
op|'='
string|'"Bye!"'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'"Hello\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'shiftOut'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'"World\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'shiftIn'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'"Bye!\\n"'
op|')'
newline|'\n'
nl|'\n'
name|'g'
op|'='
name|'G0'
newline|'\n'
name|'h'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'s'
name|'in'
op|'('
name|'s1'
op|','
name|'s2'
op|','
name|'s3'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'s'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ch'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'getCharacter'
op|'('
name|'i'
op|','
name|'h'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'0'
op|']'
op|','
name|'s'
op|'['
name|'i'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'charset'
op|','
name|'g'
op|')'
newline|'\n'
dedent|''
name|'g'
op|'='
name|'g'
op|'=='
name|'G0'
name|'and'
name|'G1'
name|'or'
name|'G0'
newline|'\n'
name|'h'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|testGraphicRendition
dedent|''
dedent|''
name|'def'
name|'testGraphicRendition'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'term'
op|'.'
name|'selectGraphicRendition'
op|'('
name|'BOLD'
op|','
name|'UNDERLINE'
op|','
name|'BLINK'
op|','
name|'REVERSE_VIDEO'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|"'W'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'selectGraphicRendition'
op|'('
name|'NORMAL'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|"'X'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'selectGraphicRendition'
op|'('
name|'BLINK'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|"'Y'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'selectGraphicRendition'
op|'('
name|'BOLD'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|"'Z'"
op|')'
newline|'\n'
nl|'\n'
name|'ch'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'getCharacter'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'0'
op|']'
op|','
string|"'W'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'bold'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'underline'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'blink'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'reverseVideo'
op|')'
newline|'\n'
nl|'\n'
name|'ch'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'getCharacter'
op|'('
number|'1'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'0'
op|']'
op|','
string|"'X'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'bold'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'underline'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'blink'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'reverseVideo'
op|')'
newline|'\n'
nl|'\n'
name|'ch'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'getCharacter'
op|'('
number|'2'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'0'
op|']'
op|','
string|"'Y'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'blink'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'bold'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'underline'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'reverseVideo'
op|')'
newline|'\n'
nl|'\n'
name|'ch'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'getCharacter'
op|'('
number|'3'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'0'
op|']'
op|','
string|"'Z'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'blink'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'bold'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'underline'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'reverseVideo'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testColorAttributes
dedent|''
name|'def'
name|'testColorAttributes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s1'
op|'='
string|'"Merry xmas"'
newline|'\n'
name|'s2'
op|'='
string|'"Just kidding"'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'selectGraphicRendition'
op|'('
name|'helper'
op|'.'
name|'FOREGROUND'
op|'+'
name|'helper'
op|'.'
name|'RED'
op|','
nl|'\n'
name|'helper'
op|'.'
name|'BACKGROUND'
op|'+'
name|'helper'
op|'.'
name|'GREEN'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
name|'s1'
op|'+'
string|'"\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'selectGraphicRendition'
op|'('
name|'NORMAL'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
name|'s2'
op|'+'
string|'"\\n"'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'s1'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ch'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'getCharacter'
op|'('
name|'i'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'0'
op|']'
op|','
name|'s1'
op|'['
name|'i'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'charset'
op|','
name|'G0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'bold'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'underline'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'blink'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'reverseVideo'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'foreground'
op|','
name|'helper'
op|'.'
name|'RED'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'background'
op|','
name|'helper'
op|'.'
name|'GREEN'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'s2'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ch'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'getCharacter'
op|'('
name|'i'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'0'
op|']'
op|','
name|'s2'
op|'['
name|'i'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'charset'
op|','
name|'G0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'bold'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'underline'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'blink'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'reverseVideo'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'foreground'
op|','
name|'helper'
op|'.'
name|'WHITE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ch'
op|'['
number|'1'
op|']'
op|'.'
name|'background'
op|','
name|'helper'
op|'.'
name|'BLACK'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEraseLine
dedent|''
dedent|''
name|'def'
name|'testEraseLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s1'
op|'='
string|"'line 1'"
newline|'\n'
name|'s2'
op|'='
string|"'line 2'"
newline|'\n'
name|'s3'
op|'='
string|"'line 3'"
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|'.'
name|'join'
op|'('
op|'('
name|'s1'
op|','
name|'s2'
op|','
name|'s3'
op|')'
op|')'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorPosition'
op|'('
number|'1'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'eraseLine'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'self'
op|'.'
name|'term'
op|')'
op|','
nl|'\n'
name|'s1'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
string|"'\\n'"
op|'+'
nl|'\n'
name|'s3'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
string|"'\\n'"
op|'*'
op|'('
name|'HEIGHT'
op|'-'
number|'4'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEraseToLineEnd
dedent|''
name|'def'
name|'testEraseToLineEnd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
string|"'Hello, world.'"
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
name|'s'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorBackward'
op|'('
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'eraseToLineEnd'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'self'
op|'.'
name|'term'
op|')'
op|','
nl|'\n'
name|'s'
op|'['
op|':'
op|'-'
number|'5'
op|']'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
string|"'\\n'"
op|'*'
op|'('
name|'HEIGHT'
op|'-'
number|'2'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEraseToLineBeginning
dedent|''
name|'def'
name|'testEraseToLineBeginning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
string|"'Hello, world.'"
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
name|'s'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorBackward'
op|'('
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'eraseToLineBeginning'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'self'
op|'.'
name|'term'
op|')'
op|','
nl|'\n'
name|'s'
op|'['
op|'-'
number|'4'
op|':'
op|']'
op|'.'
name|'rjust'
op|'('
name|'len'
op|'('
name|'s'
op|')'
op|')'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
string|"'\\n'"
op|'*'
op|'('
name|'HEIGHT'
op|'-'
number|'2'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEraseDisplay
dedent|''
name|'def'
name|'testEraseDisplay'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|"'Hello world\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|"'Goodbye world\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'eraseDisplay'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'self'
op|'.'
name|'term'
op|')'
op|','
nl|'\n'
string|"'\\n'"
op|'*'
op|'('
name|'HEIGHT'
op|'-'
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEraseToDisplayEnd
dedent|''
name|'def'
name|'testEraseToDisplayEnd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s1'
op|'='
string|'"Hello world"'
newline|'\n'
name|'s2'
op|'='
string|'"Goodbye world"'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|'.'
name|'join'
op|'('
op|'('
name|'s1'
op|','
name|'s2'
op|','
string|"''"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorPosition'
op|'('
number|'5'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'eraseToDisplayEnd'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'self'
op|'.'
name|'term'
op|')'
op|','
nl|'\n'
name|'s1'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
name|'s2'
op|'['
op|':'
number|'5'
op|']'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
string|"'\\n'"
op|'*'
op|'('
name|'HEIGHT'
op|'-'
number|'3'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEraseToDisplayBeginning
dedent|''
name|'def'
name|'testEraseToDisplayBeginning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s1'
op|'='
string|'"Hello world"'
newline|'\n'
name|'s2'
op|'='
string|'"Goodbye world"'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|'.'
name|'join'
op|'('
op|'('
name|'s1'
op|','
name|'s2'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorPosition'
op|'('
number|'5'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'eraseToDisplayBeginning'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'self'
op|'.'
name|'term'
op|')'
op|','
nl|'\n'
string|"'\\n'"
op|'+'
nl|'\n'
name|'s2'
op|'['
number|'6'
op|':'
op|']'
op|'.'
name|'rjust'
op|'('
name|'len'
op|'('
name|'s2'
op|')'
op|')'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
string|"'\\n'"
op|'*'
op|'('
name|'HEIGHT'
op|'-'
number|'3'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLineInsertion
dedent|''
name|'def'
name|'testLineInsertion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s1'
op|'='
string|'"Hello world"'
newline|'\n'
name|'s2'
op|'='
string|'"Goodbye world"'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|'.'
name|'join'
op|'('
op|'('
name|'s1'
op|','
name|'s2'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorPosition'
op|'('
number|'7'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'insertLine'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'self'
op|'.'
name|'term'
op|')'
op|','
nl|'\n'
name|'s1'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
string|"'\\n'"
op|'+'
nl|'\n'
name|'s2'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
string|"'\\n'"
op|'*'
op|'('
name|'HEIGHT'
op|'-'
number|'4'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLineDeletion
dedent|''
name|'def'
name|'testLineDeletion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s1'
op|'='
string|'"Hello world"'
newline|'\n'
name|'s2'
op|'='
string|'"Middle words"'
newline|'\n'
name|'s3'
op|'='
string|'"Goodbye world"'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|'.'
name|'join'
op|'('
op|'('
name|'s1'
op|','
name|'s2'
op|','
name|'s3'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'cursorPosition'
op|'('
number|'9'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'deleteLine'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'self'
op|'.'
name|'term'
op|')'
op|','
nl|'\n'
name|'s1'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
name|'s3'
op|'+'
string|"'\\n'"
op|'+'
nl|'\n'
string|"'\\n'"
op|'*'
op|'('
name|'HEIGHT'
op|'-'
number|'3'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|FakeDelayedCall
dedent|''
dedent|''
name|'class'
name|'FakeDelayedCall'
op|':'
newline|'\n'
DECL|variable|called
indent|'    '
name|'called'
op|'='
name|'False'
newline|'\n'
DECL|variable|cancelled
name|'cancelled'
op|'='
name|'False'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'fs'
op|','
name|'timeout'
op|','
name|'f'
op|','
name|'a'
op|','
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fs'
op|'='
name|'fs'
newline|'\n'
name|'self'
op|'.'
name|'timeout'
op|'='
name|'timeout'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'='
name|'f'
newline|'\n'
name|'self'
op|'.'
name|'a'
op|'='
name|'a'
newline|'\n'
name|'self'
op|'.'
name|'kw'
op|'='
name|'kw'
newline|'\n'
nl|'\n'
DECL|member|active
dedent|''
name|'def'
name|'active'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'not'
op|'('
name|'self'
op|'.'
name|'cancelled'
name|'or'
name|'self'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cancel
dedent|''
name|'def'
name|'cancel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cancelled'
op|'='
name|'True'
newline|'\n'
comment|'#        self.fs.calls.remove(self)'
nl|'\n'
nl|'\n'
DECL|member|call
dedent|''
name|'def'
name|'call'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'called'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'('
op|'*'
name|'self'
op|'.'
name|'a'
op|','
op|'**'
name|'self'
op|'.'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|class|FakeScheduler
dedent|''
dedent|''
name|'class'
name|'FakeScheduler'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'calls'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|callLater
dedent|''
name|'def'
name|'callLater'
op|'('
name|'self'
op|','
name|'timeout'
op|','
name|'f'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'calls'
op|'.'
name|'append'
op|'('
name|'FakeDelayedCall'
op|'('
name|'self'
op|','
name|'timeout'
op|','
name|'f'
op|','
name|'a'
op|','
name|'kw'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'calls'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|class|ExpectTestCase
dedent|''
dedent|''
name|'class'
name|'ExpectTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'term'
op|'='
name|'helper'
op|'.'
name|'ExpectableBuffer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fs'
op|'='
name|'FakeScheduler'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSimpleString
dedent|''
name|'def'
name|'testSimpleString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'expect'
op|'('
string|'"hello world"'
op|','
name|'timeout'
op|'='
number|'1'
op|','
name|'scheduler'
op|'='
name|'self'
op|'.'
name|'fs'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'result'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'"greeting puny earthlings\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'"hello world\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'group'
op|'('
op|')'
op|','
string|'"hello world"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'fs'
op|'.'
name|'calls'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'fs'
op|'.'
name|'calls'
op|'['
number|'0'
op|']'
op|'.'
name|'active'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testBrokenUpString
dedent|''
name|'def'
name|'testBrokenUpString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'expect'
op|'('
string|'"hello world"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'result'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'"hello "'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'"worl"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'"d"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'group'
op|'('
op|')'
op|','
string|'"hello world"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testMultiple
dedent|''
name|'def'
name|'testMultiple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'d1'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'expect'
op|'('
string|'"hello "'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'result'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'expect'
op|'('
string|'"world"'
op|')'
newline|'\n'
name|'d2'
op|'.'
name|'addCallback'
op|'('
name|'result'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'" "'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'"world"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'result'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'group'
op|'('
op|')'
op|','
string|'"hello "'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'['
number|'1'
op|']'
op|'.'
name|'group'
op|'('
op|')'
op|','
string|'"world"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSynchronous
dedent|''
name|'def'
name|'testSynchronous'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'"hello world"'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'expect'
op|'('
string|'"hello world"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'result'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'group'
op|'('
op|')'
op|','
string|'"hello world"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMultipleSynchronous
dedent|''
name|'def'
name|'testMultipleSynchronous'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'"goodbye world"'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'d1'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'expect'
op|'('
string|'"bye"'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'result'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'expect'
op|'('
string|'"world"'
op|')'
newline|'\n'
name|'d2'
op|'.'
name|'addCallback'
op|'('
name|'result'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'result'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'group'
op|'('
op|')'
op|','
string|'"bye"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'['
number|'1'
op|']'
op|'.'
name|'group'
op|'('
op|')'
op|','
string|'"world"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestTimeoutFailure
dedent|''
name|'def'
name|'_cbTestTimeoutFailure'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'hasattr'
op|'('
name|'res'
op|','
string|"'type'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'.'
name|'type'
op|','
name|'helper'
op|'.'
name|'ExpectationTimeout'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testTimeoutFailure
dedent|''
name|'def'
name|'testTimeoutFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'expect'
op|'('
string|'"hello world"'
op|','
name|'timeout'
op|'='
number|'1'
op|','
name|'scheduler'
op|'='
name|'self'
op|'.'
name|'fs'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'self'
op|'.'
name|'_cbTestTimeoutFailure'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fs'
op|'.'
name|'calls'
op|'['
number|'0'
op|']'
op|'.'
name|'call'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testOverlappingTimeout
dedent|''
name|'def'
name|'testOverlappingTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'term'
op|'.'
name|'write'
op|'('
string|'"not zoomtastic"'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'d1'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'expect'
op|'('
string|'"hello world"'
op|','
name|'timeout'
op|'='
number|'1'
op|','
name|'scheduler'
op|'='
name|'self'
op|'.'
name|'fs'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addBoth'
op|'('
name|'self'
op|'.'
name|'_cbTestTimeoutFailure'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'term'
op|'.'
name|'expect'
op|'('
string|'"zoom"'
op|')'
newline|'\n'
name|'d2'
op|'.'
name|'addCallback'
op|'('
name|'result'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fs'
op|'.'
name|'calls'
op|'['
number|'0'
op|']'
op|'.'
name|'call'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'group'
op|'('
op|')'
op|','
string|'"zoom"'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_userauth -*-'
nl|'\n'
comment|'# Copyright (c) 2007-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for the implementation of the ssh-userauth service.\n\nMaintainer: Paul Swartz\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'checkers'
name|'import'
name|'ICredentialsChecker'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'IUsernamePassword'
op|','
name|'ISSHPrivateKey'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'IPluggableAuthenticationModules'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'IAnonymous'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'error'
name|'import'
name|'UnauthorizedLogin'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'portal'
name|'import'
name|'IRealm'
op|','
name|'Portal'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'error'
name|'import'
name|'ConchError'
op|','
name|'ValidPublicKey'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'task'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'loopback'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'Crypto'
op|'.'
name|'Cipher'
op|'.'
name|'DES3'
op|','
name|'Crypto'
op|'.'
name|'Cipher'
op|'.'
name|'XOR'
newline|'\n'
name|'import'
name|'pyasn1'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|keys
indent|'    '
name|'keys'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|transport
name|'class'
name|'transport'
op|':'
newline|'\n'
DECL|class|SSHTransportBase
indent|'        '
name|'class'
name|'SSHTransportBase'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            A stub class so that later class definitions won\'t die.\n            """'
newline|'\n'
nl|'\n'
DECL|class|userauth
dedent|''
dedent|''
name|'class'
name|'userauth'
op|':'
newline|'\n'
DECL|class|SSHUserAuthClient
indent|'        '
name|'class'
name|'SSHUserAuthClient'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            A stub class so that leter class definitions won\'t die.\n            """'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
op|'.'
name|'common'
name|'import'
name|'NS'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'checkers'
name|'import'
name|'SSHProtocolChecker'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
name|'import'
name|'keys'
op|','
name|'userauth'
op|','
name|'transport'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
name|'import'
name|'keydata'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ClientUserAuth
dedent|''
name|'class'
name|'ClientUserAuth'
op|'('
name|'userauth'
op|'.'
name|'SSHUserAuthClient'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mock user auth client.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPublicKey
name|'def'
name|'getPublicKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If this is the first time we\'ve been called, return a blob for\n        the DSA key.  Otherwise, return a blob\n        for the RSA key.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'lastPublicKey'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicDSA_openssh'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPrivateKey
dedent|''
dedent|''
name|'def'
name|'getPrivateKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the private key object for the RSA key.\n        """'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPassword
dedent|''
name|'def'
name|'getPassword'
op|'('
name|'self'
op|','
name|'prompt'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return \'foo\' as the password.\n        """'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getGenericAnswers
dedent|''
name|'def'
name|'getGenericAnswers'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'information'
op|','
name|'answers'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return \'foo\' as the answer to two questions.\n        """'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
op|'('
string|"'foo'"
op|','
string|"'foo'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|OldClientAuth
dedent|''
dedent|''
name|'class'
name|'OldClientAuth'
op|'('
name|'userauth'
op|'.'
name|'SSHUserAuthClient'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The old SSHUserAuthClient returned a PyCrypto key object from\n    getPrivateKey() and a string from getPublicKey\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPrivateKey
name|'def'
name|'getPrivateKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
nl|'\n'
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
op|'.'
name|'keyObject'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPublicKey
dedent|''
name|'def'
name|'getPublicKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
op|'.'
name|'blob'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|ClientAuthWithoutPrivateKey
dedent|''
dedent|''
name|'class'
name|'ClientAuthWithoutPrivateKey'
op|'('
name|'userauth'
op|'.'
name|'SSHUserAuthClient'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This client doesn\'t have a private key, but it does have a public key.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPrivateKey
name|'def'
name|'getPrivateKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPublicKey
dedent|''
name|'def'
name|'getPublicKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeTransport
dedent|''
dedent|''
name|'class'
name|'FakeTransport'
op|'('
name|'transport'
op|'.'
name|'SSHTransportBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{userauth.SSHUserAuthServer} expects an SSH transport which has a factory\n    attribute which has a portal attribute. Because the portal is important for\n    testing authentication, we need to be able to provide an interesting portal\n    object to the L{SSHUserAuthServer}.\n\n    In addition, we want to be able to capture any packets sent over the\n    transport.\n\n    @ivar packets: a list of 2-tuples: (messageType, data).  Each 2-tuple is\n        a sent packet.\n    @type packets: C{list}\n    @param lostConnecion: True if loseConnection has been called on us.\n    @type lostConnection: C{bool}\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Service
name|'class'
name|'Service'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A mock service, representing the other service offered by the server.\n        """'
newline|'\n'
DECL|variable|name
name|'name'
op|'='
string|"'nancy'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|serviceStarted
name|'def'
name|'serviceStarted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Factory
dedent|''
dedent|''
name|'class'
name|'Factory'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A mock factory, representing the factory that spawned this user auth\n        service.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getService
name|'def'
name|'getService'
op|'('
name|'self'
op|','
name|'transport'
op|','
name|'service'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Return our fake service.\n            """'
newline|'\n'
name|'if'
name|'service'
op|'=='
string|"'none'"
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'FakeTransport'
op|'.'
name|'Service'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
dedent|''
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'portal'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'='
name|'self'
op|'.'
name|'Factory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'portal'
op|'='
name|'portal'
newline|'\n'
name|'self'
op|'.'
name|'lostConnection'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|sendPacket
dedent|''
name|'def'
name|'sendPacket'
op|'('
name|'self'
op|','
name|'messageType'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record the packet sent by the service.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'packets'
op|'.'
name|'append'
op|'('
op|'('
name|'messageType'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isEncrypted
dedent|''
name|'def'
name|'isEncrypted'
op|'('
name|'self'
op|','
name|'direction'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Pretend that this transport encrypts traffic in both directions. The\n        SSHUserAuthServer disables password authentication if the transport\n        isn\'t encrypted.\n        """'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lostConnection'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Realm
dedent|''
dedent|''
name|'class'
name|'Realm'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mock realm for testing L{userauth.SSHUserAuthServer}.\n\n    This realm is not actually used in the course of testing, so it returns the\n    simplest thing that could possibly work.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IRealm'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|requestAvatar
name|'def'
name|'requestAvatar'
op|'('
name|'self'
op|','
name|'avatarId'
op|','
name|'mind'
op|','
op|'*'
name|'interfaces'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
op|'('
name|'interfaces'
op|'['
number|'0'
op|']'
op|','
name|'None'
op|','
name|'lambda'
op|':'
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PasswordChecker
dedent|''
dedent|''
name|'class'
name|'PasswordChecker'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A very simple username/password checker which authenticates anyone whose\n    password matches their username and rejects all others.\n    """'
newline|'\n'
DECL|variable|credentialInterfaces
name|'credentialInterfaces'
op|'='
op|'('
name|'IUsernamePassword'
op|','
op|')'
newline|'\n'
name|'implements'
op|'('
name|'ICredentialsChecker'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|requestAvatarId
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'creds'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'creds'
op|'.'
name|'username'
op|'=='
name|'creds'
op|'.'
name|'password'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'creds'
op|'.'
name|'username'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'UnauthorizedLogin'
op|'('
string|'"Invalid username/password pair"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PrivateKeyChecker
dedent|''
dedent|''
name|'class'
name|'PrivateKeyChecker'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A very simple public key checker which authenticates anyone whose\n    public/private keypair is the same keydata.public/privateRSA_openssh.\n    """'
newline|'\n'
DECL|variable|credentialInterfaces
name|'credentialInterfaces'
op|'='
op|'('
name|'ISSHPrivateKey'
op|','
op|')'
newline|'\n'
name|'implements'
op|'('
name|'ICredentialsChecker'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|requestAvatarId
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'creds'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'creds'
op|'.'
name|'blob'
op|'=='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
op|'.'
name|'blob'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'creds'
op|'.'
name|'signature'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'obj'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'creds'
op|'.'
name|'blob'
op|')'
newline|'\n'
name|'if'
name|'obj'
op|'.'
name|'verify'
op|'('
name|'creds'
op|'.'
name|'signature'
op|','
name|'creds'
op|'.'
name|'sigData'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'creds'
op|'.'
name|'username'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValidPublicKey'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'UnauthorizedLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PAMChecker
dedent|''
dedent|''
name|'class'
name|'PAMChecker'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A simple PAM checker which asks the user for a password, verifying them\n    if the password is the same as their username.\n    """'
newline|'\n'
DECL|variable|credentialInterfaces
name|'credentialInterfaces'
op|'='
op|'('
name|'IPluggableAuthenticationModules'
op|','
op|')'
newline|'\n'
name|'implements'
op|'('
name|'ICredentialsChecker'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|requestAvatarId
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'creds'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'creds'
op|'.'
name|'pamConversion'
op|'('
op|'['
op|'('
string|"'Name: '"
op|','
number|'2'
op|')'
op|','
op|'('
string|'"Password: "'
op|','
number|'1'
op|')'
op|']'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'values'
op|'=='
op|'['
op|'('
name|'creds'
op|'.'
name|'username'
op|','
number|'0'
op|')'
op|','
op|'('
name|'creds'
op|'.'
name|'username'
op|','
number|'0'
op|')'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'creds'
op|'.'
name|'username'
newline|'\n'
dedent|''
name|'raise'
name|'UnauthorizedLogin'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AnonymousChecker
dedent|''
dedent|''
name|'class'
name|'AnonymousChecker'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A simple checker which isn\'t supported by L{SSHUserAuthServer}.\n    """'
newline|'\n'
DECL|variable|credentialInterfaces
name|'credentialInterfaces'
op|'='
op|'('
name|'IAnonymous'
op|','
op|')'
newline|'\n'
name|'implements'
op|'('
name|'ICredentialsChecker'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SSHUserAuthServerTestCase
dedent|''
name|'class'
name|'SSHUserAuthServerTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for SSHUserAuthServer.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
name|'if'
name|'keys'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyCrypto"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'realm'
op|'='
name|'Realm'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'='
name|'Portal'
op|'('
name|'self'
op|'.'
name|'realm'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'PasswordChecker'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'PrivateKeyChecker'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'PAMChecker'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'='
name|'userauth'
op|'.'
name|'SSHUserAuthServer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'transport'
op|'='
name|'FakeTransport'
op|'('
name|'self'
op|'.'
name|'portal'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'serviceStarted'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'supportedAuthentications'
op|'.'
name|'sort'
op|'('
op|')'
comment|'# give a consistent'
newline|'\n'
comment|'# order'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'serviceStopped'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_checkFailed
dedent|''
name|'def'
name|'_checkFailed'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that the authentication has failed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_FAILURE'
op|','
nl|'\n'
name|'NS'
op|'('
string|"'keyboard-interactive,password,publickey'"
op|')'
op|'+'
string|"'\\x00'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noneAuthentication
dedent|''
name|'def'
name|'test_noneAuthentication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A client may request a list of authentication \'method name\' values\n        that may continue by using the "none" authentication \'method name\'.\n\n        See RFC 4252 Section 5.2.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'service'"
op|')'
op|'+'
nl|'\n'
name|'NS'
op|'('
string|"'none'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_checkFailed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_successfulPasswordAuthentication
dedent|''
name|'def'
name|'test_successfulPasswordAuthentication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When provided with correct password authentication information, the\n        server should respond by sending a MSG_USERAUTH_SUCCESS message with\n        no other data.\n\n        See RFC 4252, Section 5.1.\n        """'
newline|'\n'
name|'packet'
op|'='
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'none'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'password'"
op|')'
op|'+'
name|'chr'
op|'('
number|'0'
op|')'
op|'+'
name|'NS'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'packet'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_SUCCESS'
op|','
string|"''"
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failedPasswordAuthentication
dedent|''
name|'def'
name|'test_failedPasswordAuthentication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When provided with invalid authentication details, the server should\n        respond by sending a MSG_USERAUTH_FAILURE message which states whether\n        the authentication was partially successful, and provides other, open\n        options for authentication.\n\n        See RFC 4252, Section 5.1.\n        """'
newline|'\n'
comment|'# packet = username, next_service, authentication type, FALSE, password'
nl|'\n'
name|'packet'
op|'='
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'none'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'password'"
op|')'
op|'+'
name|'chr'
op|'('
number|'0'
op|')'
op|'+'
name|'NS'
op|'('
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'clock'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'2'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_checkFailed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_successfulPrivateKeyAuthentication
dedent|''
name|'def'
name|'test_successfulPrivateKeyAuthentication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that private key authentication completes sucessfully,\n        """'
newline|'\n'
name|'blob'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
op|'.'
name|'blob'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'packet'
op|'='
op|'('
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'none'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'publickey'"
op|')'
op|'+'
string|"'\\xff'"
nl|'\n'
op|'+'
name|'NS'
op|'('
name|'obj'
op|'.'
name|'sshType'
op|'('
op|')'
op|')'
op|'+'
name|'NS'
op|'('
name|'blob'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'transport'
op|'.'
name|'sessionID'
op|'='
string|"'test'"
newline|'\n'
name|'signature'
op|'='
name|'obj'
op|'.'
name|'sign'
op|'('
name|'NS'
op|'('
string|"'test'"
op|')'
op|'+'
name|'chr'
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_REQUEST'
op|')'
nl|'\n'
op|'+'
name|'packet'
op|')'
newline|'\n'
name|'packet'
op|'+='
name|'NS'
op|'('
name|'signature'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'packet'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_SUCCESS'
op|','
string|"''"
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requestRaisesConchError
dedent|''
name|'def'
name|'test_requestRaisesConchError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        ssh_USERAUTH_REQUEST should raise a ConchError if tryAuth returns\n        None. Added to catch a bug noticed by pyflakes.\n        """'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|mockCbFinishedAuth
name|'def'
name|'mockCbFinishedAuth'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'request should have raised ConochError'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|mockTryAuth
dedent|''
name|'def'
name|'mockTryAuth'
op|'('
name|'kind'
op|','
name|'user'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|function|mockEbBadAuth
dedent|''
name|'def'
name|'mockEbBadAuth'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'errback'
op|'('
name|'reason'
op|'.'
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'authServer'
op|','
string|"'tryAuth'"
op|','
name|'mockTryAuth'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'authServer'
op|','
string|"'_cbFinishedAuth'"
op|','
name|'mockCbFinishedAuth'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'authServer'
op|','
string|"'_ebBadAuth'"
op|','
name|'mockEbBadAuth'
op|')'
newline|'\n'
nl|'\n'
name|'packet'
op|'='
name|'NS'
op|'('
string|"'user'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'none'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'public-key'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'data'"
op|')'
newline|'\n'
comment|'# If an error other than ConchError is raised, this will trigger an'
nl|'\n'
comment|'# exception.'
nl|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ConchError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_verifyValidPrivateKey
dedent|''
name|'def'
name|'test_verifyValidPrivateKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that verifying a valid private key works.\n        """'
newline|'\n'
name|'blob'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
op|'.'
name|'blob'
op|'('
op|')'
newline|'\n'
name|'packet'
op|'='
op|'('
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'none'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'publickey'"
op|')'
op|'+'
string|"'\\x00'"
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'ssh-rsa'"
op|')'
op|'+'
name|'NS'
op|'('
name|'blob'
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'packet'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_PK_OK'
op|','
name|'NS'
op|'('
string|"'ssh-rsa'"
op|')'
op|'+'
name|'NS'
op|'('
name|'blob'
op|')'
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failedPrivateKeyAuthenticationWithoutSignature
dedent|''
name|'def'
name|'test_failedPrivateKeyAuthenticationWithoutSignature'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that private key authentication fails when the public key\n        is invalid.\n        """'
newline|'\n'
name|'blob'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicDSA_openssh'
op|')'
op|'.'
name|'blob'
op|'('
op|')'
newline|'\n'
name|'packet'
op|'='
op|'('
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'none'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'publickey'"
op|')'
op|'+'
string|"'\\x00'"
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'ssh-dsa'"
op|')'
op|'+'
name|'NS'
op|'('
name|'blob'
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_checkFailed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failedPrivateKeyAuthenticationWithSignature
dedent|''
name|'def'
name|'test_failedPrivateKeyAuthenticationWithSignature'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that private key authentication fails when the public key\n        is invalid.\n        """'
newline|'\n'
name|'blob'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
op|'.'
name|'blob'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'packet'
op|'='
op|'('
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'none'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'publickey'"
op|')'
op|'+'
string|"'\\xff'"
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'ssh-rsa'"
op|')'
op|'+'
name|'NS'
op|'('
name|'blob'
op|')'
op|'+'
name|'NS'
op|'('
name|'obj'
op|'.'
name|'sign'
op|'('
name|'blob'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'transport'
op|'.'
name|'sessionID'
op|'='
string|"'test'"
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_checkFailed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_successfulPAMAuthentication
dedent|''
name|'def'
name|'test_successfulPAMAuthentication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that keyboard-interactive authentication succeeds.\n        """'
newline|'\n'
name|'packet'
op|'='
op|'('
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'none'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'keyboard-interactive'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|')'
newline|'\n'
name|'response'
op|'='
string|"'\\x00\\x00\\x00\\x02'"
op|'+'
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_INFO_RESPONSE'
op|'('
name|'response'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_INFO_REQUEST'
op|','
op|'('
name|'NS'
op|'('
string|"''"
op|')'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|'+'
string|"'\\x00\\x00\\x00\\x02'"
op|'+'
name|'NS'
op|'('
string|"'Name: '"
op|')'
op|'+'
string|"'\\x01'"
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'Password: '"
op|')'
op|'+'
string|"'\\x00'"
op|')'
op|')'
op|','
nl|'\n'
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_SUCCESS'
op|','
string|"''"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failedPAMAuthentication
dedent|''
name|'def'
name|'test_failedPAMAuthentication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that keyboard-interactive authentication fails.\n        """'
newline|'\n'
name|'packet'
op|'='
op|'('
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'none'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'keyboard-interactive'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|')'
newline|'\n'
name|'response'
op|'='
string|"'\\x00\\x00\\x00\\x02'"
op|'+'
name|'NS'
op|'('
string|"'bar'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'bar'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_INFO_RESPONSE'
op|'('
name|'response'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_INFO_REQUEST'
op|','
op|'('
name|'NS'
op|'('
string|"''"
op|')'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|'+'
string|"'\\x00\\x00\\x00\\x02'"
op|'+'
name|'NS'
op|'('
string|"'Name: '"
op|')'
op|'+'
string|"'\\x01'"
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'Password: '"
op|')'
op|'+'
string|"'\\x00'"
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_checkFailed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalid_USERAUTH_INFO_RESPONSE_not_enough_data
dedent|''
name|'def'
name|'test_invalid_USERAUTH_INFO_RESPONSE_not_enough_data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If ssh_USERAUTH_INFO_RESPONSE gets an invalid packet,\n        the user authentication should fail.\n        """'
newline|'\n'
name|'packet'
op|'='
op|'('
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'none'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'keyboard-interactive'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_INFO_RESPONSE'
op|'('
name|'NS'
op|'('
string|"'\\x00\\x00\\x00\\x00'"
op|'+'
nl|'\n'
name|'NS'
op|'('
string|"'hi'"
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_checkFailed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalid_USERAUTH_INFO_RESPONSE_too_much_data
dedent|''
name|'def'
name|'test_invalid_USERAUTH_INFO_RESPONSE_too_much_data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If ssh_USERAUTH_INFO_RESPONSE gets too much data, the user\n        authentication should fail.\n        """'
newline|'\n'
name|'packet'
op|'='
op|'('
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'none'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'keyboard-interactive'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|')'
newline|'\n'
name|'response'
op|'='
string|"'\\x00\\x00\\x00\\x02'"
op|'+'
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_INFO_RESPONSE'
op|'('
name|'response'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_checkFailed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_onlyOnePAMAuthentication
dedent|''
name|'def'
name|'test_onlyOnePAMAuthentication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Because it requires an intermediate message, one can\'t send a second\n        keyboard-interactive request while the first is still pending.\n        """'
newline|'\n'
name|'packet'
op|'='
op|'('
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'none'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'keyboard-interactive'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'transport'
op|'.'
name|'MSG_DISCONNECT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'3'
op|']'
op|','
nl|'\n'
name|'chr'
op|'('
name|'transport'
op|'.'
name|'DISCONNECT_PROTOCOL_ERROR'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ignoreUnknownCredInterfaces
dedent|''
name|'def'
name|'test_ignoreUnknownCredInterfaces'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SSHUserAuthServer} sets up\n        C{SSHUserAuthServer.supportedAuthentications} by checking the portal\'s\n        credentials interfaces and mapping them to SSH authentication method\n        strings.  If the Portal advertises an interface that\n        L{SSHUserAuthServer} can\'t map, it should be ignored.  This is a white\n        box test.\n        """'
newline|'\n'
name|'server'
op|'='
name|'userauth'
op|'.'
name|'SSHUserAuthServer'
op|'('
op|')'
newline|'\n'
name|'server'
op|'.'
name|'transport'
op|'='
name|'FakeTransport'
op|'('
name|'self'
op|'.'
name|'portal'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'AnonymousChecker'
op|'('
op|')'
op|')'
newline|'\n'
name|'server'
op|'.'
name|'serviceStarted'
op|'('
op|')'
newline|'\n'
name|'server'
op|'.'
name|'serviceStopped'
op|'('
op|')'
newline|'\n'
name|'server'
op|'.'
name|'supportedAuthentications'
op|'.'
name|'sort'
op|'('
op|')'
comment|'# give a consistent order'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'server'
op|'.'
name|'supportedAuthentications'
op|','
nl|'\n'
op|'['
string|"'keyboard-interactive'"
op|','
string|"'password'"
op|','
string|"'publickey'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removePasswordIfUnencrypted
dedent|''
name|'def'
name|'test_removePasswordIfUnencrypted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the userauth service does not advertise password\n        authentication if the password would be send in cleartext.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'password'"
op|','
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'supportedAuthentications'
op|')'
newline|'\n'
comment|'# no encryption'
nl|'\n'
name|'clearAuthServer'
op|'='
name|'userauth'
op|'.'
name|'SSHUserAuthServer'
op|'('
op|')'
newline|'\n'
name|'clearAuthServer'
op|'.'
name|'transport'
op|'='
name|'FakeTransport'
op|'('
name|'self'
op|'.'
name|'portal'
op|')'
newline|'\n'
name|'clearAuthServer'
op|'.'
name|'transport'
op|'.'
name|'isEncrypted'
op|'='
name|'lambda'
name|'x'
op|':'
name|'False'
newline|'\n'
name|'clearAuthServer'
op|'.'
name|'serviceStarted'
op|'('
op|')'
newline|'\n'
name|'clearAuthServer'
op|'.'
name|'serviceStopped'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfIn'
op|'('
string|"'password'"
op|','
name|'clearAuthServer'
op|'.'
name|'supportedAuthentications'
op|')'
newline|'\n'
comment|'# only encrypt incoming (the direction the password is sent)'
nl|'\n'
name|'halfAuthServer'
op|'='
name|'userauth'
op|'.'
name|'SSHUserAuthServer'
op|'('
op|')'
newline|'\n'
name|'halfAuthServer'
op|'.'
name|'transport'
op|'='
name|'FakeTransport'
op|'('
name|'self'
op|'.'
name|'portal'
op|')'
newline|'\n'
name|'halfAuthServer'
op|'.'
name|'transport'
op|'.'
name|'isEncrypted'
op|'='
name|'lambda'
name|'x'
op|':'
name|'x'
op|'=='
string|"'in'"
newline|'\n'
name|'halfAuthServer'
op|'.'
name|'serviceStarted'
op|'('
op|')'
newline|'\n'
name|'halfAuthServer'
op|'.'
name|'serviceStopped'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'password'"
op|','
name|'halfAuthServer'
op|'.'
name|'supportedAuthentications'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeKeyboardInteractiveIfUnencrypted
dedent|''
name|'def'
name|'test_removeKeyboardInteractiveIfUnencrypted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the userauth service does not advertise keyboard-interactive\n        authentication if the password would be send in cleartext.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'keyboard-interactive'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'supportedAuthentications'
op|')'
newline|'\n'
comment|'# no encryption'
nl|'\n'
name|'clearAuthServer'
op|'='
name|'userauth'
op|'.'
name|'SSHUserAuthServer'
op|'('
op|')'
newline|'\n'
name|'clearAuthServer'
op|'.'
name|'transport'
op|'='
name|'FakeTransport'
op|'('
name|'self'
op|'.'
name|'portal'
op|')'
newline|'\n'
name|'clearAuthServer'
op|'.'
name|'transport'
op|'.'
name|'isEncrypted'
op|'='
name|'lambda'
name|'x'
op|':'
name|'False'
newline|'\n'
name|'clearAuthServer'
op|'.'
name|'serviceStarted'
op|'('
op|')'
newline|'\n'
name|'clearAuthServer'
op|'.'
name|'serviceStopped'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfIn'
op|'('
string|"'keyboard-interactive'"
op|','
nl|'\n'
name|'clearAuthServer'
op|'.'
name|'supportedAuthentications'
op|')'
newline|'\n'
comment|'# only encrypt incoming (the direction the password is sent)'
nl|'\n'
name|'halfAuthServer'
op|'='
name|'userauth'
op|'.'
name|'SSHUserAuthServer'
op|'('
op|')'
newline|'\n'
name|'halfAuthServer'
op|'.'
name|'transport'
op|'='
name|'FakeTransport'
op|'('
name|'self'
op|'.'
name|'portal'
op|')'
newline|'\n'
name|'halfAuthServer'
op|'.'
name|'transport'
op|'.'
name|'isEncrypted'
op|'='
name|'lambda'
name|'x'
op|':'
name|'x'
op|'=='
string|"'in'"
newline|'\n'
name|'halfAuthServer'
op|'.'
name|'serviceStarted'
op|'('
op|')'
newline|'\n'
name|'halfAuthServer'
op|'.'
name|'serviceStopped'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'keyboard-interactive'"
op|','
nl|'\n'
name|'halfAuthServer'
op|'.'
name|'supportedAuthentications'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unencryptedConnectionWithoutPasswords
dedent|''
name|'def'
name|'test_unencryptedConnectionWithoutPasswords'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the L{SSHUserAuthServer} is not advertising passwords, then an\n        unencrypted connection should not cause any warnings or exceptions.\n        This is a white box test.\n        """'
newline|'\n'
comment|'# create a Portal without password authentication'
nl|'\n'
name|'portal'
op|'='
name|'Portal'
op|'('
name|'self'
op|'.'
name|'realm'
op|')'
newline|'\n'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'PrivateKeyChecker'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# no encryption'
nl|'\n'
name|'clearAuthServer'
op|'='
name|'userauth'
op|'.'
name|'SSHUserAuthServer'
op|'('
op|')'
newline|'\n'
name|'clearAuthServer'
op|'.'
name|'transport'
op|'='
name|'FakeTransport'
op|'('
name|'portal'
op|')'
newline|'\n'
name|'clearAuthServer'
op|'.'
name|'transport'
op|'.'
name|'isEncrypted'
op|'='
name|'lambda'
name|'x'
op|':'
name|'False'
newline|'\n'
name|'clearAuthServer'
op|'.'
name|'serviceStarted'
op|'('
op|')'
newline|'\n'
name|'clearAuthServer'
op|'.'
name|'serviceStopped'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'clearAuthServer'
op|'.'
name|'supportedAuthentications'
op|','
nl|'\n'
op|'['
string|"'publickey'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# only encrypt incoming (the direction the password is sent)'
nl|'\n'
name|'halfAuthServer'
op|'='
name|'userauth'
op|'.'
name|'SSHUserAuthServer'
op|'('
op|')'
newline|'\n'
name|'halfAuthServer'
op|'.'
name|'transport'
op|'='
name|'FakeTransport'
op|'('
name|'portal'
op|')'
newline|'\n'
name|'halfAuthServer'
op|'.'
name|'transport'
op|'.'
name|'isEncrypted'
op|'='
name|'lambda'
name|'x'
op|':'
name|'x'
op|'=='
string|"'in'"
newline|'\n'
name|'halfAuthServer'
op|'.'
name|'serviceStarted'
op|'('
op|')'
newline|'\n'
name|'halfAuthServer'
op|'.'
name|'serviceStopped'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'clearAuthServer'
op|'.'
name|'supportedAuthentications'
op|','
nl|'\n'
op|'['
string|"'publickey'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_loginTimeout
dedent|''
name|'def'
name|'test_loginTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the login times out.\n        """'
newline|'\n'
name|'timeoutAuthServer'
op|'='
name|'userauth'
op|'.'
name|'SSHUserAuthServer'
op|'('
op|')'
newline|'\n'
name|'timeoutAuthServer'
op|'.'
name|'clock'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'timeoutAuthServer'
op|'.'
name|'transport'
op|'='
name|'FakeTransport'
op|'('
name|'self'
op|'.'
name|'portal'
op|')'
newline|'\n'
name|'timeoutAuthServer'
op|'.'
name|'serviceStarted'
op|'('
op|')'
newline|'\n'
name|'timeoutAuthServer'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'11'
op|'*'
number|'60'
op|'*'
number|'60'
op|')'
newline|'\n'
name|'timeoutAuthServer'
op|'.'
name|'serviceStopped'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timeoutAuthServer'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'transport'
op|'.'
name|'MSG_DISCONNECT'
op|','
nl|'\n'
string|"'\\x00'"
op|'*'
number|'3'
op|'+'
nl|'\n'
name|'chr'
op|'('
name|'transport'
op|'.'
name|'DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE'
op|')'
op|'+'
nl|'\n'
name|'NS'
op|'('
string|'"you took too long"'
op|')'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'timeoutAuthServer'
op|'.'
name|'transport'
op|'.'
name|'lostConnection'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cancelLoginTimeout
dedent|''
name|'def'
name|'test_cancelLoginTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that stopping the service also stops the login timeout.\n        """'
newline|'\n'
name|'timeoutAuthServer'
op|'='
name|'userauth'
op|'.'
name|'SSHUserAuthServer'
op|'('
op|')'
newline|'\n'
name|'timeoutAuthServer'
op|'.'
name|'clock'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'timeoutAuthServer'
op|'.'
name|'transport'
op|'='
name|'FakeTransport'
op|'('
name|'self'
op|'.'
name|'portal'
op|')'
newline|'\n'
name|'timeoutAuthServer'
op|'.'
name|'serviceStarted'
op|'('
op|')'
newline|'\n'
name|'timeoutAuthServer'
op|'.'
name|'serviceStopped'
op|'('
op|')'
newline|'\n'
name|'timeoutAuthServer'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'11'
op|'*'
number|'60'
op|'*'
number|'60'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timeoutAuthServer'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'timeoutAuthServer'
op|'.'
name|'transport'
op|'.'
name|'lostConnection'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_tooManyAttempts
dedent|''
name|'def'
name|'test_tooManyAttempts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the server disconnects if the client fails authentication\n        too many times.\n        """'
newline|'\n'
name|'packet'
op|'='
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'none'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'password'"
op|')'
op|'+'
name|'chr'
op|'('
number|'0'
op|')'
op|'+'
name|'NS'
op|'('
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'clock'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'21'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'2'
op|')'
newline|'\n'
DECL|function|check
dedent|''
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
op|'('
name|'transport'
op|'.'
name|'MSG_DISCONNECT'
op|','
nl|'\n'
string|"'\\x00'"
op|'*'
number|'3'
op|'+'
nl|'\n'
name|'chr'
op|'('
name|'transport'
op|'.'
name|'DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE'
op|')'
op|'+'
nl|'\n'
name|'NS'
op|'('
string|'"too many bad auths"'
op|')'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failIfUnknownService
dedent|''
name|'def'
name|'test_failIfUnknownService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the user requests a service that we don\'t support, the\n        authentication should fail.\n        """'
newline|'\n'
name|'packet'
op|'='
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|'+'
name|'NS'
op|'('
string|"'password'"
op|')'
op|'+'
name|'chr'
op|'('
number|'0'
op|')'
op|'+'
name|'NS'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'clock'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'ssh_USERAUTH_REQUEST'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_checkFailed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test__pamConvErrors
dedent|''
name|'def'
name|'test__pamConvErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        _pamConv should fail if it gets a message that\'s not 1 or 2.\n        """'
newline|'\n'
DECL|function|secondTest
name|'def'
name|'secondTest'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d2'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'_pamConv'
op|'('
op|'['
op|'('
string|"''"
op|','
number|'90'
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d2'
op|','
name|'ConchError'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'_pamConv'
op|'('
op|'['
op|'('
string|"''"
op|','
number|'3'
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ConchError'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'secondTest'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_tryAuthEdgeCases
dedent|''
name|'def'
name|'test_tryAuthEdgeCases'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        tryAuth() has two edge cases that are difficult to reach.\n\n        1) an authentication method auth_* returns None instead of a Deferred.\n        2) an authentication type that is defined does not have a matching\n           auth_* method.\n\n        Both these cases should return a Deferred which fails with a\n        ConchError.\n        """'
newline|'\n'
DECL|function|mockAuth
name|'def'
name|'mockAuth'
op|'('
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'authServer'
op|','
string|"'auth_publickey'"
op|','
name|'mockAuth'
op|')'
comment|'# first case'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'authServer'
op|','
string|"'auth_password'"
op|','
name|'None'
op|')'
comment|'# second case'
newline|'\n'
nl|'\n'
DECL|function|secondTest
name|'def'
name|'secondTest'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d2'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'tryAuth'
op|'('
string|"'password'"
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d2'
op|','
name|'ConchError'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'authServer'
op|'.'
name|'tryAuth'
op|'('
string|"'publickey'"
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d1'
op|','
name|'ConchError'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'secondTest'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SSHUserAuthClientTestCase
dedent|''
dedent|''
name|'class'
name|'SSHUserAuthClientTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for SSHUserAuthClient.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
name|'if'
name|'keys'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyCrypto"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'authClient'
op|'='
name|'ClientUserAuth'
op|'('
string|"'foo'"
op|','
name|'FakeTransport'
op|'.'
name|'Service'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'='
name|'FakeTransport'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'sessionID'
op|'='
string|"'test'"
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'serviceStarted'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'serviceStopped'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_init
dedent|''
name|'def'
name|'test_init'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that client is initialized properly.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'user'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'instance'
op|'.'
name|'name'
op|','
string|"'nancy'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_REQUEST'
op|','
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'nancy'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'none'"
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_USERAUTH_SUCCESS
dedent|''
name|'def'
name|'test_USERAUTH_SUCCESS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the client succeeds properly.\n        """'
newline|'\n'
name|'instance'
op|'='
op|'['
name|'None'
op|']'
newline|'\n'
DECL|function|stubSetService
name|'def'
name|'stubSetService'
op|'('
name|'service'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'['
number|'0'
op|']'
op|'='
name|'service'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'setService'
op|'='
name|'stubSetService'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'ssh_USERAUTH_SUCCESS'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'instance'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_publickey
dedent|''
name|'def'
name|'test_publickey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the client can authenticate with a public key.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'ssh_USERAUTH_FAILURE'
op|'('
name|'NS'
op|'('
string|"'publickey'"
op|')'
op|'+'
string|"'\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_REQUEST'
op|','
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'nancy'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'publickey'"
op|')'
op|'+'
string|"'\\x00'"
op|'+'
name|'NS'
op|'('
string|"'ssh-dss'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
nl|'\n'
name|'keydata'
op|'.'
name|'publicDSA_openssh'
op|')'
op|'.'
name|'blob'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
comment|"# that key isn't good"
nl|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'ssh_USERAUTH_FAILURE'
op|'('
name|'NS'
op|'('
string|"'publickey'"
op|')'
op|'+'
string|"'\\x00'"
op|')'
newline|'\n'
name|'blob'
op|'='
name|'NS'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
op|'.'
name|'blob'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_REQUEST'
op|','
op|'('
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'nancy'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'publickey'"
op|')'
op|'+'
string|"'\\x00'"
op|'+'
name|'NS'
op|'('
string|"'ssh-rsa'"
op|')'
op|'+'
name|'blob'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'ssh_USERAUTH_PK_OK'
op|'('
name|'NS'
op|'('
string|"'ssh-rsa'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
op|'.'
name|'blob'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'sigData'
op|'='
op|'('
name|'NS'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'sessionID'
op|')'
nl|'\n'
op|'+'
name|'chr'
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_REQUEST'
op|')'
op|'+'
name|'NS'
op|'('
string|"'foo'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'nancy'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'publickey'"
op|')'
op|'+'
string|"'\\xff'"
op|'+'
name|'NS'
op|'('
string|"'ssh-rsa'"
op|')'
nl|'\n'
op|'+'
name|'blob'
op|')'
newline|'\n'
name|'obj'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_REQUEST'
op|','
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'nancy'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'publickey'"
op|')'
op|'+'
string|"'\\xff'"
op|'+'
name|'NS'
op|'('
string|"'ssh-rsa'"
op|')'
op|'+'
name|'blob'
nl|'\n'
op|'+'
name|'NS'
op|'('
name|'obj'
op|'.'
name|'sign'
op|'('
name|'sigData'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_publickey_without_privatekey
dedent|''
name|'def'
name|'test_publickey_without_privatekey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the SSHUserAuthClient doesn\'t return anything from signData,\n        the client should start the authentication over again by requesting\n        \'none\' authentication.\n        """'
newline|'\n'
name|'authClient'
op|'='
name|'ClientAuthWithoutPrivateKey'
op|'('
string|"'foo'"
op|','
nl|'\n'
name|'FakeTransport'
op|'.'
name|'Service'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'authClient'
op|'.'
name|'transport'
op|'='
name|'FakeTransport'
op|'('
name|'None'
op|')'
newline|'\n'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'sessionID'
op|'='
string|"'test'"
newline|'\n'
name|'authClient'
op|'.'
name|'serviceStarted'
op|'('
op|')'
newline|'\n'
name|'authClient'
op|'.'
name|'tryAuth'
op|'('
string|"'publickey'"
op|')'
newline|'\n'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'authClient'
op|'.'
name|'ssh_USERAUTH_PK_OK'
op|'('
string|"''"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
op|'['
nl|'\n'
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_REQUEST'
op|','
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'nancy'"
op|')'
op|'+'
nl|'\n'
name|'NS'
op|'('
string|"'none'"
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_old_publickey_getPublicKey
dedent|''
name|'def'
name|'test_old_publickey_getPublicKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Old SSHUserAuthClients returned strings of public key blobs from\n        getPublicKey().  Test that a Deprecation warning is raised but the key is\n        verified correctly.\n        """'
newline|'\n'
name|'oldAuth'
op|'='
name|'OldClientAuth'
op|'('
string|"'foo'"
op|','
name|'FakeTransport'
op|'.'
name|'Service'
op|'('
op|')'
op|')'
newline|'\n'
name|'oldAuth'
op|'.'
name|'transport'
op|'='
name|'FakeTransport'
op|'('
name|'None'
op|')'
newline|'\n'
name|'oldAuth'
op|'.'
name|'transport'
op|'.'
name|'sessionID'
op|'='
string|"'test'"
newline|'\n'
name|'oldAuth'
op|'.'
name|'serviceStarted'
op|'('
op|')'
newline|'\n'
name|'oldAuth'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"Returning a string from "'
nl|'\n'
string|'"SSHUserAuthClient.getPublicKey() is deprecated since "'
nl|'\n'
string|'"Twisted 9.0.  Return a keys.Key() instead."'
op|','
nl|'\n'
name|'userauth'
op|'.'
name|'__file__'
op|','
name|'oldAuth'
op|'.'
name|'tryAuth'
op|','
string|"'publickey'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'oldAuth'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
op|'['
nl|'\n'
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_REQUEST'
op|','
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'nancy'"
op|')'
op|'+'
nl|'\n'
name|'NS'
op|'('
string|"'publickey'"
op|')'
op|'+'
string|"'\\x00'"
op|'+'
name|'NS'
op|'('
string|"'ssh-rsa'"
op|')'
op|'+'
nl|'\n'
name|'NS'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
op|'.'
name|'blob'
op|'('
op|')'
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_old_publickey_getPrivateKey
dedent|''
name|'def'
name|'test_old_publickey_getPrivateKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Old SSHUserAuthClients returned a PyCrypto key object from\n        getPrivateKey().  Test that _cbSignData signs the data warns the\n        user about the deprecation, but signs the data correctly.\n        """'
newline|'\n'
name|'oldAuth'
op|'='
name|'OldClientAuth'
op|'('
string|"'foo'"
op|','
name|'FakeTransport'
op|'.'
name|'Service'
op|'('
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"Returning a PyCrypto key "'
nl|'\n'
string|'"object from SSHUserAuthClient.getPrivateKey() is "'
nl|'\n'
string|'"deprecated since Twisted 9.0.  "'
nl|'\n'
string|'"Return a keys.Key() instead."'
op|','
name|'userauth'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'oldAuth'
op|'.'
name|'signData'
op|','
name|'None'
op|','
string|"'data'"
op|')'
newline|'\n'
DECL|function|_checkSignedData
name|'def'
name|'_checkSignedData'
op|'('
name|'sig'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sig'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
op|'.'
name|'sign'
op|'('
nl|'\n'
string|"'data'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_checkSignedData'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_no_publickey
dedent|''
name|'def'
name|'test_no_publickey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If there\'s no public key, auth_publickey should return a Deferred\n        called back with a False value.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'getPublicKey'
op|'='
name|'lambda'
name|'x'
op|':'
name|'None'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'tryAuth'
op|'('
string|"'publickey'"
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_password
dedent|''
name|'def'
name|'test_password'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the client can authentication with a password.  This\n        includes changing the password.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'ssh_USERAUTH_FAILURE'
op|'('
name|'NS'
op|'('
string|"'password'"
op|')'
op|'+'
string|"'\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_REQUEST'
op|','
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'nancy'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'password'"
op|')'
op|'+'
string|"'\\x00'"
op|'+'
name|'NS'
op|'('
string|"'foo'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'ssh_USERAUTH_PK_OK'
op|'('
name|'NS'
op|'('
string|"''"
op|')'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_REQUEST'
op|','
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'nancy'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'password'"
op|')'
op|'+'
string|"'\\xff'"
op|'+'
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'*'
number|'2'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_no_password
dedent|''
name|'def'
name|'test_no_password'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If getPassword returns None, tryAuth should return False.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'getPassword'
op|'='
name|'lambda'
op|':'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'tryAuth'
op|'('
string|"'password'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_keyboardInteractive
dedent|''
name|'def'
name|'test_keyboardInteractive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the client can authenticate using keyboard-interactive\n        authentication.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'ssh_USERAUTH_FAILURE'
op|'('
name|'NS'
op|'('
string|"'keyboard-interactive'"
op|')'
nl|'\n'
op|'+'
string|"'\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_REQUEST'
op|','
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'nancy'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'keyboard-interactive'"
op|')'
op|'+'
name|'NS'
op|'('
string|"''"
op|')'
op|'*'
number|'2'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'ssh_USERAUTH_PK_OK'
op|'('
name|'NS'
op|'('
string|"''"
op|')'
op|'*'
number|'3'
op|'+'
string|"'\\x00\\x00\\x00\\x02'"
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'Name: '"
op|')'
op|'+'
string|"'\\xff'"
op|'+'
name|'NS'
op|'('
string|"'Password: '"
op|')'
op|'+'
string|"'\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_INFO_RESPONSE'
op|','
string|"'\\x00\\x00\\x00\\x02'"
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'*'
number|'2'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_USERAUTH_PK_OK_unknown_method
dedent|''
name|'def'
name|'test_USERAUTH_PK_OK_unknown_method'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If C{SSHUserAuthClient} gets a MSG_USERAUTH_PK_OK packet when it\'s not\n        expecting it, it should fail the current authentication and move on to\n        the next type.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'lastAuth'
op|'='
string|"'unknown'"
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'ssh_USERAUTH_PK_OK'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_REQUEST'
op|','
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
nl|'\n'
name|'NS'
op|'('
string|"'nancy'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'none'"
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_USERAUTH_FAILURE_sorting
dedent|''
name|'def'
name|'test_USERAUTH_FAILURE_sorting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        ssh_USERAUTH_FAILURE should sort the methods by their position\n        in SSHUserAuthClient.preferredOrder.  Methods that are not in\n        preferredOrder should be sorted at the end of that list.\n        """'
newline|'\n'
DECL|function|auth_firstmethod
name|'def'
name|'auth_firstmethod'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
number|'255'
op|','
string|"'here is data'"
op|')'
newline|'\n'
DECL|function|auth_anothermethod
dedent|''
name|'def'
name|'auth_anothermethod'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
number|'254'
op|','
string|"'other data'"
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'auth_firstmethod'
op|'='
name|'auth_firstmethod'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'auth_anothermethod'
op|'='
name|'auth_anothermethod'
newline|'\n'
nl|'\n'
comment|"# although they shouldn't get called, method callbacks auth_* MUST"
nl|'\n'
comment|'# exist in order for the test to work properly.'
nl|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'ssh_USERAUTH_FAILURE'
op|'('
name|'NS'
op|'('
string|"'anothermethod,password'"
op|')'
op|'+'
nl|'\n'
string|"'\\x00'"
op|')'
newline|'\n'
comment|'# should send password packet'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_REQUEST'
op|','
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'nancy'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'password'"
op|')'
op|'+'
string|"'\\x00'"
op|'+'
name|'NS'
op|'('
string|"'foo'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'ssh_USERAUTH_FAILURE'
op|'('
nl|'\n'
name|'NS'
op|'('
string|"'firstmethod,anothermethod,password'"
op|')'
op|'+'
string|"'\\xff'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'['
op|'-'
number|'2'
op|':'
op|']'
op|','
nl|'\n'
op|'['
op|'('
number|'255'
op|','
string|"'here is data'"
op|')'
op|','
op|'('
number|'254'
op|','
string|"'other data'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disconnectIfNoMoreAuthentication
dedent|''
name|'def'
name|'test_disconnectIfNoMoreAuthentication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If there are no more available user authentication messages,\n        the SSHUserAuthClient should disconnect with code\n        DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'ssh_USERAUTH_FAILURE'
op|'('
name|'NS'
op|'('
string|"'password'"
op|')'
op|'+'
string|"'\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'ssh_USERAUTH_FAILURE'
op|'('
name|'NS'
op|'('
string|"'password'"
op|')'
op|'+'
string|"'\\xff'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
op|'('
name|'transport'
op|'.'
name|'MSG_DISCONNECT'
op|','
string|"'\\x00\\x00\\x00\\x0e'"
op|'+'
nl|'\n'
name|'NS'
op|'('
string|"'no more authentication methods available'"
op|')'
op|'+'
nl|'\n'
string|"'\\x00\\x00\\x00\\x00'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ebAuth
dedent|''
name|'def'
name|'test_ebAuth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        _ebAuth (the generic authentication error handler) should send\n        a request for the \'none\' authentication method.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'_ebAuth'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authClient'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'userauth'
op|'.'
name|'MSG_USERAUTH_REQUEST'
op|','
name|'NS'
op|'('
string|"'foo'"
op|')'
op|'+'
name|'NS'
op|'('
string|"'nancy'"
op|')'
nl|'\n'
op|'+'
name|'NS'
op|'('
string|"'none'"
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_defaults
dedent|''
name|'def'
name|'test_defaults'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        getPublicKey() should return None.  getPrivateKey() should return a\n        failed Deferred.  getPassword() should return a failed Deferred.\n        getGenericAnswers() should return a failed Deferred.\n        """'
newline|'\n'
name|'authClient'
op|'='
name|'userauth'
op|'.'
name|'SSHUserAuthClient'
op|'('
string|"'foo'"
op|','
name|'FakeTransport'
op|'.'
name|'Service'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'authClient'
op|'.'
name|'getPublicKey'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'trap'
op|'('
name|'NotImplementedError'
op|')'
newline|'\n'
name|'d'
op|'='
name|'authClient'
op|'.'
name|'getPassword'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'fail'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'check2'
op|')'
newline|'\n'
DECL|function|check2
dedent|''
name|'def'
name|'check2'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'trap'
op|'('
name|'NotImplementedError'
op|')'
newline|'\n'
name|'d'
op|'='
name|'authClient'
op|'.'
name|'getGenericAnswers'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'fail'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'check3'
op|')'
newline|'\n'
DECL|function|check3
dedent|''
name|'def'
name|'check3'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'trap'
op|'('
name|'NotImplementedError'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'authClient'
op|'.'
name|'getPrivateKey'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'fail'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoopbackTestCase
dedent|''
dedent|''
name|'class'
name|'LoopbackTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
nl|'\n'
indent|'    '
name|'if'
name|'keys'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyCrypto or PyASN1"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Factory
dedent|''
name|'class'
name|'Factory'
op|':'
newline|'\n'
DECL|class|Service
indent|'        '
name|'class'
name|'Service'
op|':'
newline|'\n'
DECL|variable|name
indent|'            '
name|'name'
op|'='
string|"'TestService'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|serviceStarted
name|'def'
name|'serviceStarted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|serviceStopped
dedent|''
name|'def'
name|'serviceStopped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getService
dedent|''
dedent|''
name|'def'
name|'getService'
op|'('
name|'self'
op|','
name|'avatar'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'Service'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_loopback
dedent|''
dedent|''
name|'def'
name|'test_loopback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the userauth server and client play nicely with each other.\n        """'
newline|'\n'
name|'server'
op|'='
name|'userauth'
op|'.'
name|'SSHUserAuthServer'
op|'('
op|')'
newline|'\n'
name|'client'
op|'='
name|'ClientUserAuth'
op|'('
string|"'foo'"
op|','
name|'self'
op|'.'
name|'Factory'
op|'.'
name|'Service'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# set up transports'
nl|'\n'
name|'server'
op|'.'
name|'transport'
op|'='
name|'transport'
op|'.'
name|'SSHTransportBase'
op|'('
op|')'
newline|'\n'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'service'
op|'='
name|'server'
newline|'\n'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'isEncrypted'
op|'='
name|'lambda'
name|'x'
op|':'
name|'True'
newline|'\n'
name|'client'
op|'.'
name|'transport'
op|'='
name|'transport'
op|'.'
name|'SSHTransportBase'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'service'
op|'='
name|'client'
newline|'\n'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'sessionID'
op|'='
name|'client'
op|'.'
name|'transport'
op|'.'
name|'sessionID'
op|'='
string|"''"
newline|'\n'
comment|"# don't send key exchange packet"
nl|'\n'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'sendKexInit'
op|'='
name|'client'
op|'.'
name|'transport'
op|'.'
name|'sendKexInit'
op|'='
name|'lambda'
op|':'
name|'None'
newline|'\n'
nl|'\n'
comment|'# set up server authentication'
nl|'\n'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'factory'
op|'='
name|'self'
op|'.'
name|'Factory'
op|'('
op|')'
newline|'\n'
name|'server'
op|'.'
name|'passwordDelay'
op|'='
number|'0'
comment|'# remove bad password delay'
newline|'\n'
name|'realm'
op|'='
name|'Realm'
op|'('
op|')'
newline|'\n'
name|'portal'
op|'='
name|'Portal'
op|'('
name|'realm'
op|')'
newline|'\n'
name|'checker'
op|'='
name|'SSHProtocolChecker'
op|'('
op|')'
newline|'\n'
name|'checker'
op|'.'
name|'registerChecker'
op|'('
name|'PasswordChecker'
op|'('
op|')'
op|')'
newline|'\n'
name|'checker'
op|'.'
name|'registerChecker'
op|'('
name|'PrivateKeyChecker'
op|'('
op|')'
op|')'
newline|'\n'
name|'checker'
op|'.'
name|'registerChecker'
op|'('
name|'PAMChecker'
op|'('
op|')'
op|')'
newline|'\n'
name|'checker'
op|'.'
name|'areDone'
op|'='
name|'lambda'
name|'aId'
op|':'
op|'('
nl|'\n'
name|'len'
op|'('
name|'checker'
op|'.'
name|'successfulCredentials'
op|'['
name|'aId'
op|']'
op|')'
op|'=='
number|'3'
op|')'
newline|'\n'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'checker'
op|')'
newline|'\n'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'factory'
op|'.'
name|'portal'
op|'='
name|'portal'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'loopback'
op|'.'
name|'loopbackAsync'
op|'('
name|'server'
op|'.'
name|'transport'
op|','
name|'client'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'transport'
op|'.'
name|'logPrefix'
op|'='
name|'lambda'
op|':'
string|"'_ServerLoopback'"
newline|'\n'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'transport'
op|'.'
name|'logPrefix'
op|'='
name|'lambda'
op|':'
string|"'_ClientLoopback'"
newline|'\n'
nl|'\n'
name|'server'
op|'.'
name|'serviceStarted'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'serviceStarted'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'server'
op|'.'
name|'transport'
op|'.'
name|'service'
op|'.'
name|'name'
op|','
string|"'TestService'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

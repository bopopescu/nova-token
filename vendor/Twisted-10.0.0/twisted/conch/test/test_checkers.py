begin_unit
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.conch.checkers}.\n"""'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pwd'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|pwd
indent|'    '
name|'pwd'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'import'
name|'os'
op|','
name|'base64'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'checkers'
name|'import'
name|'InMemoryUsernamePasswordDatabaseDontUse'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'UsernamePassword'
op|','
name|'IUsernamePassword'
op|','
name|'SSHPrivateKey'
op|','
name|'ISSHPrivateKey'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'error'
name|'import'
name|'UnhandledCredentials'
op|','
name|'UnauthorizedLogin'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'fakepwd'
name|'import'
name|'UserDatabase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'test_process'
name|'import'
name|'MockOS'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'Crypto'
op|'.'
name|'Cipher'
op|'.'
name|'DES3'
newline|'\n'
name|'import'
name|'pyasn1'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|SSHPublicKeyDatabase
indent|'    '
name|'SSHPublicKeyDatabase'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
name|'import'
name|'keys'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'checkers'
name|'import'
name|'SSHPublicKeyDatabase'
op|','
name|'SSHProtocolChecker'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'error'
name|'import'
name|'NotEnoughAuthentication'
op|','
name|'ValidPublicKey'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
name|'import'
name|'keydata'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SSHPublicKeyDatabaseTestCase
dedent|''
name|'class'
name|'SSHPublicKeyDatabaseTestCase'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{SSHPublicKeyDatabase}.\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'pwd'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"Cannot run without pwd module"'
newline|'\n'
dedent|''
name|'elif'
name|'SSHPublicKeyDatabase'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"Cannot run without PyCrypto or PyASN1"'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'checker'
op|'='
name|'SSHPublicKeyDatabase'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'key1'
op|'='
name|'base64'
op|'.'
name|'encodestring'
op|'('
string|'"foobar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'key2'
op|'='
name|'base64'
op|'.'
name|'encodestring'
op|'('
string|'"eggspam"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'content'
op|'='
string|'"t1 %s foo\\nt2 %s egg\\n"'
op|'%'
op|'('
name|'self'
op|'.'
name|'key1'
op|','
name|'self'
op|'.'
name|'key2'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mockos'
op|'='
name|'MockOS'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'path'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'path'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sshDir'
op|'='
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'path'
op|'.'
name|'child'
op|'('
string|"'.ssh'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sshDir'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'userdb'
op|'='
name|'UserDatabase'
op|'('
op|')'
newline|'\n'
name|'userdb'
op|'.'
name|'addUser'
op|'('
string|"'user'"
op|','
string|"'password'"
op|','
number|'1'
op|','
number|'2'
op|','
string|"'first last'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'path'
op|'.'
name|'path'
op|','
string|"'/bin/shell'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'pwd'
op|','
string|'"getpwnam"'
op|','
name|'userdb'
op|'.'
name|'getpwnam'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'os'
op|','
string|'"seteuid"'
op|','
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'seteuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'os'
op|','
string|'"setegid"'
op|','
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'setegid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_testCheckKey
dedent|''
name|'def'
name|'_testCheckKey'
op|'('
name|'self'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sshDir'
op|'.'
name|'child'
op|'('
name|'filename'
op|')'
op|'.'
name|'setContent'
op|'('
name|'self'
op|'.'
name|'content'
op|')'
newline|'\n'
name|'user'
op|'='
name|'UsernamePassword'
op|'('
string|'"user"'
op|','
string|'"password"'
op|')'
newline|'\n'
name|'user'
op|'.'
name|'blob'
op|'='
string|'"foobar"'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'checker'
op|'.'
name|'checkKey'
op|'('
name|'user'
op|')'
op|')'
newline|'\n'
name|'user'
op|'.'
name|'blob'
op|'='
string|'"eggspam"'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'checker'
op|'.'
name|'checkKey'
op|'('
name|'user'
op|')'
op|')'
newline|'\n'
name|'user'
op|'.'
name|'blob'
op|'='
string|'"notallowed"'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'checker'
op|'.'
name|'checkKey'
op|'('
name|'user'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_checkKey
dedent|''
name|'def'
name|'test_checkKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SSHPublicKeyDatabase.checkKey} should retrieve the content of the\n        authorized_keys file and check the keys against that file.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testCheckKey'
op|'('
string|'"authorized_keys"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'seteuidCalls'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'setegidCalls'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_checkKey2
dedent|''
name|'def'
name|'test_checkKey2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SSHPublicKeyDatabase.checkKey} should retrieve the content of the\n        authorized_keys2 file and check the keys against that file.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testCheckKey'
op|'('
string|'"authorized_keys2"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'seteuidCalls'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'setegidCalls'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_checkKeyAsRoot
dedent|''
name|'def'
name|'test_checkKeyAsRoot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the key file is readable, L{SSHPublicKeyDatabase.checkKey} should\n        switch its uid/gid to the ones of the authenticated user.\n        """'
newline|'\n'
name|'keyFile'
op|'='
name|'self'
op|'.'
name|'sshDir'
op|'.'
name|'child'
op|'('
string|'"authorized_keys"'
op|')'
newline|'\n'
name|'keyFile'
op|'.'
name|'setContent'
op|'('
name|'self'
op|'.'
name|'content'
op|')'
newline|'\n'
comment|'# Fake permission error by changing the mode'
nl|'\n'
name|'keyFile'
op|'.'
name|'chmod'
op|'('
number|'0000'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'keyFile'
op|'.'
name|'chmod'
op|','
number|'0777'
op|')'
newline|'\n'
comment|'# And restore the right mode when seteuid is called'
nl|'\n'
name|'savedSeteuid'
op|'='
name|'os'
op|'.'
name|'seteuid'
newline|'\n'
DECL|function|seteuid
name|'def'
name|'seteuid'
op|'('
name|'euid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'keyFile'
op|'.'
name|'chmod'
op|'('
number|'0777'
op|')'
newline|'\n'
name|'return'
name|'savedSeteuid'
op|'('
name|'euid'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'os'
op|','
string|'"seteuid"'
op|','
name|'seteuid'
op|')'
newline|'\n'
name|'user'
op|'='
name|'UsernamePassword'
op|'('
string|'"user"'
op|','
string|'"password"'
op|')'
newline|'\n'
name|'user'
op|'.'
name|'blob'
op|'='
string|'"foobar"'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'checker'
op|'.'
name|'checkKey'
op|'('
name|'user'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'seteuidCalls'
op|','
op|'['
number|'0'
op|','
number|'1'
op|','
number|'0'
op|','
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'setegidCalls'
op|','
op|'['
number|'2'
op|','
name|'os'
op|'.'
name|'getgid'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requestAvatarId
dedent|''
name|'def'
name|'test_requestAvatarId'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SSHPublicKeyDatabase.requestAvatarId} should return the avatar id\n        passed in if its C{_checkKey} method returns True.\n        """'
newline|'\n'
DECL|function|_checkKey
name|'def'
name|'_checkKey'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'checker'
op|','
string|"'checkKey'"
op|','
name|'_checkKey'
op|')'
newline|'\n'
name|'credentials'
op|'='
name|'SSHPrivateKey'
op|'('
string|"'test'"
op|','
string|"'ssh-rsa'"
op|','
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|','
nl|'\n'
string|"'foo'"
op|','
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
op|'.'
name|'sign'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'credentials'
op|')'
newline|'\n'
DECL|function|_verify
name|'def'
name|'_verify'
op|'('
name|'avatarId'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'avatarId'
op|','
string|"'test'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_verify'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requestAvatarIdWithoutSignature
dedent|''
name|'def'
name|'test_requestAvatarIdWithoutSignature'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SSHPublicKeyDatabase.requestAvatarId} should raise L{ValidPublicKey}\n        if the credentials represent a valid key without a signature.  This\n        tells the user that the key is valid for login, but does not actually\n        allow that user to do so without a signature.\n        """'
newline|'\n'
DECL|function|_checkKey
name|'def'
name|'_checkKey'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'checker'
op|','
string|"'checkKey'"
op|','
name|'_checkKey'
op|')'
newline|'\n'
name|'credentials'
op|'='
name|'SSHPrivateKey'
op|'('
string|"'test'"
op|','
string|"'ssh-rsa'"
op|','
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'credentials'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ValidPublicKey'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requestAvatarIdInvalidKey
dedent|''
name|'def'
name|'test_requestAvatarIdInvalidKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If L{SSHPublicKeyDatabase.checkKey} returns False,\n        C{_cbRequestAvatarId} should raise L{UnauthorizedLogin}.\n        """'
newline|'\n'
DECL|function|_checkKey
name|'def'
name|'_checkKey'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'checker'
op|','
string|"'checkKey'"
op|','
name|'_checkKey'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'None'
op|')'
op|';'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'UnauthorizedLogin'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requestAvatarIdInvalidSignature
dedent|''
name|'def'
name|'test_requestAvatarIdInvalidSignature'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Valid keys with invalid signatures should cause\n        L{SSHPublicKeyDatabase.requestAvatarId} to return a {UnauthorizedLogin}\n        failure\n        """'
newline|'\n'
DECL|function|_checkKey
name|'def'
name|'_checkKey'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'checker'
op|','
string|"'checkKey'"
op|','
name|'_checkKey'
op|')'
newline|'\n'
name|'credentials'
op|'='
name|'SSHPrivateKey'
op|'('
string|"'test'"
op|','
string|"'ssh-rsa'"
op|','
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|','
nl|'\n'
string|"'foo'"
op|','
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateDSA_openssh'
op|')'
op|'.'
name|'sign'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'credentials'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'UnauthorizedLogin'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requestAvatarIdNormalizeException
dedent|''
name|'def'
name|'test_requestAvatarIdNormalizeException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Exceptions raised while verifying the key should be normalized into an\n        C{UnauthorizedLogin} failure.\n        """'
newline|'\n'
DECL|function|_checkKey
name|'def'
name|'_checkKey'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'checker'
op|','
string|"'checkKey'"
op|','
name|'_checkKey'
op|')'
newline|'\n'
name|'credentials'
op|'='
name|'SSHPrivateKey'
op|'('
string|"'test'"
op|','
name|'None'
op|','
string|"'blob'"
op|','
string|"'sigData'"
op|','
string|"'sig'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'credentials'
op|')'
newline|'\n'
DECL|function|_verifyLoggedException
name|'def'
name|'_verifyLoggedException'
op|'('
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'keys'
op|'.'
name|'BadKeyError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'failure'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'_verifyLoggedException'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'UnauthorizedLogin'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SSHProtocolCheckerTestCase
dedent|''
dedent|''
name|'class'
name|'SSHProtocolCheckerTestCase'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{SSHProtocolChecker}.\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'SSHPublicKeyDatabase'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"Cannot run without PyCrypto"'
newline|'\n'
nl|'\n'
DECL|member|test_registerChecker
dedent|''
name|'def'
name|'test_registerChecker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SSHProcotolChecker.registerChecker} should add the given checker to\n        the list of registered checkers.\n        """'
newline|'\n'
name|'checker'
op|'='
name|'SSHProtocolChecker'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'checker'
op|'.'
name|'credentialInterfaces'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'checker'
op|'.'
name|'registerChecker'
op|'('
name|'SSHPublicKeyDatabase'
op|'('
op|')'
op|','
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'checker'
op|'.'
name|'credentialInterfaces'
op|','
op|'['
name|'ISSHPrivateKey'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'checker'
op|'.'
name|'checkers'
op|'['
name|'ISSHPrivateKey'
op|']'
op|','
nl|'\n'
name|'SSHPublicKeyDatabase'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_registerCheckerWithInterface
dedent|''
name|'def'
name|'test_registerCheckerWithInterface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a apecific interface is passed into\n        L{SSHProtocolChecker.registerChecker}, that interface should be\n        registered instead of what the checker specifies in\n        credentialIntefaces.\n        """'
newline|'\n'
name|'checker'
op|'='
name|'SSHProtocolChecker'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'checker'
op|'.'
name|'credentialInterfaces'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'checker'
op|'.'
name|'registerChecker'
op|'('
name|'SSHPublicKeyDatabase'
op|'('
op|')'
op|','
name|'IUsernamePassword'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'checker'
op|'.'
name|'credentialInterfaces'
op|','
op|'['
name|'IUsernamePassword'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'checker'
op|'.'
name|'checkers'
op|'['
name|'IUsernamePassword'
op|']'
op|','
nl|'\n'
name|'SSHPublicKeyDatabase'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requestAvatarId
dedent|''
name|'def'
name|'test_requestAvatarId'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SSHProtocolChecker.requestAvatarId} should defer to one if its\n        registered checkers to authenticate a user.\n        """'
newline|'\n'
name|'checker'
op|'='
name|'SSHProtocolChecker'
op|'('
op|')'
newline|'\n'
name|'passwordDatabase'
op|'='
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
op|')'
newline|'\n'
name|'passwordDatabase'
op|'.'
name|'addUser'
op|'('
string|"'test'"
op|','
string|"'test'"
op|')'
newline|'\n'
name|'checker'
op|'.'
name|'registerChecker'
op|'('
name|'passwordDatabase'
op|')'
newline|'\n'
name|'d'
op|'='
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'UsernamePassword'
op|'('
string|"'test'"
op|','
string|"'test'"
op|')'
op|')'
newline|'\n'
DECL|function|_callback
name|'def'
name|'_callback'
op|'('
name|'avatarId'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'avatarId'
op|','
string|"'test'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_callback'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requestAvatarIdWithNotEnoughAuthentication
dedent|''
name|'def'
name|'test_requestAvatarIdWithNotEnoughAuthentication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the client indicates that it is never satisfied, by always returning\n        False from _areDone, then L{SSHProtocolChecker} should raise\n        L{NotEnoughAuthentication}.\n        """'
newline|'\n'
name|'checker'
op|'='
name|'SSHProtocolChecker'
op|'('
op|')'
newline|'\n'
DECL|function|_areDone
name|'def'
name|'_areDone'
op|'('
name|'avatarId'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'checker'
op|','
string|"'areDone'"
op|','
name|'_areDone'
op|')'
newline|'\n'
nl|'\n'
name|'passwordDatabase'
op|'='
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
op|')'
newline|'\n'
name|'passwordDatabase'
op|'.'
name|'addUser'
op|'('
string|"'test'"
op|','
string|"'test'"
op|')'
newline|'\n'
name|'checker'
op|'.'
name|'registerChecker'
op|'('
name|'passwordDatabase'
op|')'
newline|'\n'
name|'d'
op|'='
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'UsernamePassword'
op|'('
string|"'test'"
op|','
string|"'test'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'NotEnoughAuthentication'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requestAvatarIdInvalidCredential
dedent|''
name|'def'
name|'test_requestAvatarIdInvalidCredential'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the passed credentials aren\'t handled by any registered checker,\n        L{SSHProtocolChecker} should raise L{UnhandledCredentials}.\n        """'
newline|'\n'
name|'checker'
op|'='
name|'SSHProtocolChecker'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'UsernamePassword'
op|'('
string|"'test'"
op|','
string|"'test'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'UnhandledCredentials'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_areDone
dedent|''
name|'def'
name|'test_areDone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The default L{SSHProcotolChecker.areDone} should simply return True.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'SSHProtocolChecker'
op|'('
op|')'
op|'.'
name|'areDone'
op|'('
name|'None'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

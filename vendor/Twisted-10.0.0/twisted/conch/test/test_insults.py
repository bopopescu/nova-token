begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_insults -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'StringTransport'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'insults'
op|'.'
name|'insults'
name|'import'
name|'ServerProtocol'
op|','
name|'ClientProtocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'insults'
op|'.'
name|'insults'
name|'import'
name|'CS_UK'
op|','
name|'CS_US'
op|','
name|'CS_DRAWING'
op|','
name|'CS_ALTERNATE'
op|','
name|'CS_ALTERNATE_SPECIAL'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'insults'
op|'.'
name|'insults'
name|'import'
name|'G0'
op|','
name|'G1'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'insults'
op|'.'
name|'insults'
name|'import'
name|'modes'
newline|'\n'
nl|'\n'
DECL|function|_getattr
name|'def'
name|'_getattr'
op|'('
name|'mock'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'super'
op|'('
name|'Mock'
op|','
name|'mock'
op|')'
op|'.'
name|'__getattribute__'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|function|occurrences
dedent|''
name|'def'
name|'occurrences'
op|'('
name|'mock'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'_getattr'
op|'('
name|'mock'
op|','
string|"'occurrences'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|methods
dedent|''
name|'def'
name|'methods'
op|'('
name|'mock'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'_getattr'
op|'('
name|'mock'
op|','
string|"'methods'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|_append
dedent|''
name|'def'
name|'_append'
op|'('
name|'mock'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'occurrences'
op|'('
name|'mock'
op|')'
op|'.'
name|'append'
op|'('
name|'obj'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|default
dedent|''
name|'default'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|Mock
name|'class'
name|'Mock'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|callReturnValue
indent|'    '
name|'callReturnValue'
op|'='
name|'default'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'methods'
op|'='
name|'None'
op|','
name|'callReturnValue'
op|'='
name|'default'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param methods: Mapping of names to return values\n        @param callReturnValue: object __call__ should return\n        """'
newline|'\n'
name|'self'
op|'.'
name|'occurrences'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'methods'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'methods'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'methods'
op|'='
name|'methods'
newline|'\n'
name|'if'
name|'callReturnValue'
name|'is'
name|'not'
name|'default'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'callReturnValue'
op|'='
name|'callReturnValue'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'returnValue'
op|'='
name|'_getattr'
op|'('
name|'self'
op|','
string|"'callReturnValue'"
op|')'
newline|'\n'
name|'if'
name|'returnValue'
name|'is'
name|'default'
op|':'
newline|'\n'
indent|'            '
name|'returnValue'
op|'='
name|'Mock'
op|'('
op|')'
newline|'\n'
comment|"# _getattr(self, 'occurrences').append(('__call__', returnValue, a, kw))"
nl|'\n'
dedent|''
name|'_append'
op|'('
name|'self'
op|','
op|'('
string|"'__call__'"
op|','
name|'returnValue'
op|','
name|'a'
op|','
name|'kw'
op|')'
op|')'
newline|'\n'
name|'return'
name|'returnValue'
newline|'\n'
nl|'\n'
DECL|member|__getattribute__
dedent|''
name|'def'
name|'__getattribute__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'methods'
op|'='
name|'_getattr'
op|'('
name|'self'
op|','
string|"'methods'"
op|')'
newline|'\n'
name|'if'
name|'name'
name|'in'
name|'methods'
op|':'
newline|'\n'
indent|'            '
name|'attrValue'
op|'='
name|'Mock'
op|'('
name|'callReturnValue'
op|'='
name|'methods'
op|'['
name|'name'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'attrValue'
op|'='
name|'Mock'
op|'('
op|')'
newline|'\n'
comment|"# _getattr(self, 'occurrences').append((name, attrValue))"
nl|'\n'
dedent|''
name|'_append'
op|'('
name|'self'
op|','
op|'('
name|'name'
op|','
name|'attrValue'
op|')'
op|')'
newline|'\n'
name|'return'
name|'attrValue'
newline|'\n'
nl|'\n'
DECL|class|MockMixin
dedent|''
dedent|''
name|'class'
name|'MockMixin'
op|':'
newline|'\n'
DECL|member|assertCall
indent|'    '
name|'def'
name|'assertCall'
op|'('
name|'self'
op|','
name|'occurrence'
op|','
name|'methodName'
op|','
name|'expectedPositionalArgs'
op|'='
op|'('
op|')'
op|','
nl|'\n'
name|'expectedKeywordArgs'
op|'='
op|'{'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'attr'
op|','
name|'mock'
op|'='
name|'occurrence'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'attr'
op|','
name|'methodName'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'occurrences'
op|'('
name|'mock'
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
op|'['
op|'('
name|'call'
op|','
name|'result'
op|','
name|'args'
op|','
name|'kw'
op|')'
op|']'
op|'='
name|'occurrences'
op|'('
name|'mock'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'call'
op|','
string|'"__call__"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'args'
op|','
name|'expectedPositionalArgs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'kw'
op|','
name|'expectedKeywordArgs'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'_byteGroupingTestTemplate'
op|'='
string|'"""\\\ndef testByte%(groupName)s(self):\n    transport = StringTransport()\n    proto = Mock()\n    parser = self.protocolFactory(lambda: proto)\n    parser.factory = self\n    parser.makeConnection(transport)\n\n    bytes = self.TEST_BYTES\n    while bytes:\n        chunk = bytes[:%(bytesPer)d]\n        bytes = bytes[%(bytesPer)d:]\n        parser.dataReceived(chunk)\n\n    self.verifyResults(transport, proto, parser)\n"""'
newline|'\n'
DECL|class|ByteGroupingsMixin
name|'class'
name|'ByteGroupingsMixin'
op|'('
name|'MockMixin'
op|')'
op|':'
newline|'\n'
DECL|variable|protocolFactory
indent|'    '
name|'protocolFactory'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'for'
name|'word'
op|','
name|'n'
name|'in'
op|'['
op|'('
string|"'Pairs'"
op|','
number|'2'
op|')'
op|','
op|'('
string|"'Triples'"
op|','
number|'3'
op|')'
op|','
op|'('
string|"'Quads'"
op|','
number|'4'
op|')'
op|','
op|'('
string|"'Quints'"
op|','
number|'5'
op|')'
op|','
op|'('
string|"'Sexes'"
op|','
number|'6'
op|')'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'exec'
name|'_byteGroupingTestTemplate'
op|'%'
op|'{'
string|"'groupName'"
op|':'
name|'word'
op|','
string|"'bytesPer'"
op|':'
name|'n'
op|'}'
newline|'\n'
dedent|''
name|'del'
name|'word'
op|','
name|'n'
newline|'\n'
nl|'\n'
DECL|member|verifyResults
name|'def'
name|'verifyResults'
op|'('
name|'self'
op|','
name|'transport'
op|','
name|'proto'
op|','
name|'parser'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occurrences'
op|'('
name|'proto'
op|')'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"makeConnection"'
op|','
op|'('
name|'parser'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'del'
name|'_byteGroupingTestTemplate'
newline|'\n'
nl|'\n'
DECL|class|ServerArrowKeys
name|'class'
name|'ServerArrowKeys'
op|'('
name|'ByteGroupingsMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|protocolFactory
indent|'    '
name|'protocolFactory'
op|'='
name|'ServerProtocol'
newline|'\n'
nl|'\n'
comment|'# All the arrow keys once'
nl|'\n'
DECL|variable|TEST_BYTES
name|'TEST_BYTES'
op|'='
string|"'\\x1b[A\\x1b[B\\x1b[C\\x1b[D'"
newline|'\n'
nl|'\n'
DECL|member|verifyResults
name|'def'
name|'verifyResults'
op|'('
name|'self'
op|','
name|'transport'
op|','
name|'proto'
op|','
name|'parser'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ByteGroupingsMixin'
op|'.'
name|'verifyResults'
op|'('
name|'self'
op|','
name|'transport'
op|','
name|'proto'
op|','
name|'parser'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'arrow'
name|'in'
op|'('
name|'parser'
op|'.'
name|'UP_ARROW'
op|','
name|'parser'
op|'.'
name|'DOWN_ARROW'
op|','
nl|'\n'
name|'parser'
op|'.'
name|'RIGHT_ARROW'
op|','
name|'parser'
op|'.'
name|'LEFT_ARROW'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occurrences'
op|'('
name|'proto'
op|')'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"keystrokeReceived"'
op|','
op|'('
name|'arrow'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'proto'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PrintableCharacters
dedent|''
dedent|''
name|'class'
name|'PrintableCharacters'
op|'('
name|'ByteGroupingsMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|protocolFactory
indent|'    '
name|'protocolFactory'
op|'='
name|'ServerProtocol'
newline|'\n'
nl|'\n'
comment|'# Some letters and digits, first on their own, then capitalized,'
nl|'\n'
comment|'# then modified with alt'
nl|'\n'
nl|'\n'
DECL|variable|TEST_BYTES
name|'TEST_BYTES'
op|'='
string|"'abc123ABC!@#\\x1ba\\x1bb\\x1bc\\x1b1\\x1b2\\x1b3'"
newline|'\n'
nl|'\n'
DECL|member|verifyResults
name|'def'
name|'verifyResults'
op|'('
name|'self'
op|','
name|'transport'
op|','
name|'proto'
op|','
name|'parser'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ByteGroupingsMixin'
op|'.'
name|'verifyResults'
op|'('
name|'self'
op|','
name|'transport'
op|','
name|'proto'
op|','
name|'parser'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'char'
name|'in'
string|"'abc123ABC!@#'"
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occurrences'
op|'('
name|'proto'
op|')'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"keystrokeReceived"'
op|','
op|'('
name|'char'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'char'
name|'in'
string|"'abc123'"
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occurrences'
op|'('
name|'proto'
op|')'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"keystrokeReceived"'
op|','
op|'('
name|'char'
op|','
name|'parser'
op|'.'
name|'ALT'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'proto'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occs'
op|','
string|'"%r should have been []"'
op|'%'
op|'('
name|'occs'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ServerFunctionKeys
dedent|''
dedent|''
name|'class'
name|'ServerFunctionKeys'
op|'('
name|'ByteGroupingsMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test for parsing and dispatching function keys (F1 - F12)\n    """'
newline|'\n'
DECL|variable|protocolFactory
name|'protocolFactory'
op|'='
name|'ServerProtocol'
newline|'\n'
nl|'\n'
DECL|variable|byteList
name|'byteList'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'bytes'
name|'in'
op|'('
string|"'OP'"
op|','
string|"'OQ'"
op|','
string|"'OR'"
op|','
string|"'OS'"
op|','
comment|'# F1 - F4'
nl|'\n'
string|"'15~'"
op|','
string|"'17~'"
op|','
string|"'18~'"
op|','
string|"'19~'"
op|','
comment|'# F5 - F8'
nl|'\n'
string|"'20~'"
op|','
string|"'21~'"
op|','
string|"'23~'"
op|','
string|"'24~'"
op|')'
op|':'
comment|'# F9 - F12'
newline|'\n'
indent|'        '
name|'byteList'
op|'.'
name|'append'
op|'('
string|"'\\x1b['"
op|'+'
name|'bytes'
op|')'
newline|'\n'
DECL|variable|TEST_BYTES
dedent|''
name|'TEST_BYTES'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'byteList'
op|')'
newline|'\n'
name|'del'
name|'byteList'
op|','
name|'bytes'
newline|'\n'
nl|'\n'
DECL|member|verifyResults
name|'def'
name|'verifyResults'
op|'('
name|'self'
op|','
name|'transport'
op|','
name|'proto'
op|','
name|'parser'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ByteGroupingsMixin'
op|'.'
name|'verifyResults'
op|'('
name|'self'
op|','
name|'transport'
op|','
name|'proto'
op|','
name|'parser'
op|')'
newline|'\n'
name|'for'
name|'funcNum'
name|'in'
name|'range'
op|'('
number|'1'
op|','
number|'13'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'funcArg'
op|'='
name|'getattr'
op|'('
name|'parser'
op|','
string|"'F%d'"
op|'%'
op|'('
name|'funcNum'
op|','
op|')'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occurrences'
op|'('
name|'proto'
op|')'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"keystrokeReceived"'
op|','
op|'('
name|'funcArg'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'proto'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ClientCursorMovement
dedent|''
dedent|''
name|'class'
name|'ClientCursorMovement'
op|'('
name|'ByteGroupingsMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|protocolFactory
indent|'    '
name|'protocolFactory'
op|'='
name|'ClientProtocol'
newline|'\n'
nl|'\n'
DECL|variable|d2
name|'d2'
op|'='
string|'"\\x1b[2B"'
newline|'\n'
DECL|variable|r4
name|'r4'
op|'='
string|'"\\x1b[4C"'
newline|'\n'
DECL|variable|u1
name|'u1'
op|'='
string|'"\\x1b[A"'
newline|'\n'
DECL|variable|l2
name|'l2'
op|'='
string|'"\\x1b[2D"'
newline|'\n'
comment|'# Move the cursor down two, right four, up one, left two, up one, left two'
nl|'\n'
DECL|variable|TEST_BYTES
name|'TEST_BYTES'
op|'='
name|'d2'
op|'+'
name|'r4'
op|'+'
name|'u1'
op|'+'
name|'l2'
op|'+'
name|'u1'
op|'+'
name|'l2'
newline|'\n'
name|'del'
name|'d2'
op|','
name|'r4'
op|','
name|'u1'
op|','
name|'l2'
newline|'\n'
nl|'\n'
DECL|member|verifyResults
name|'def'
name|'verifyResults'
op|'('
name|'self'
op|','
name|'transport'
op|','
name|'proto'
op|','
name|'parser'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ByteGroupingsMixin'
op|'.'
name|'verifyResults'
op|'('
name|'self'
op|','
name|'transport'
op|','
name|'proto'
op|','
name|'parser'
op|')'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'method'
op|','
name|'count'
op|')'
name|'in'
op|'['
op|'('
string|"'Down'"
op|','
number|'2'
op|')'
op|','
op|'('
string|"'Forward'"
op|','
number|'4'
op|')'
op|','
op|'('
string|"'Up'"
op|','
number|'1'
op|')'
op|','
nl|'\n'
op|'('
string|"'Backward'"
op|','
number|'2'
op|')'
op|','
op|'('
string|"'Up'"
op|','
number|'1'
op|')'
op|','
op|'('
string|"'Backward'"
op|','
number|'2'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occurrences'
op|'('
name|'proto'
op|')'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"cursor"'
op|'+'
name|'method'
op|','
op|'('
name|'count'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'proto'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ClientControlSequences
dedent|''
dedent|''
name|'class'
name|'ClientControlSequences'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'MockMixin'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'='
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'='
name|'ClientProtocol'
op|'('
name|'lambda'
op|':'
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"makeConnection"'
op|','
op|'('
name|'self'
op|'.'
name|'parser'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSimpleCardinals
dedent|''
name|'def'
name|'testSimpleCardinals'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
op|'['
string|"''"
op|'.'
name|'join'
op|'('
op|'['
string|"'\\x1b['"
op|'+'
name|'str'
op|'('
name|'n'
op|')'
op|'+'
name|'ch'
name|'for'
name|'n'
name|'in'
op|'('
string|"''"
op|','
number|'2'
op|','
number|'20'
op|','
number|'200'
op|')'
op|']'
op|')'
name|'for'
name|'ch'
name|'in'
string|"'BACD'"
op|']'
op|')'
op|')'
newline|'\n'
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'meth'
name|'in'
op|'('
string|'"Down"'
op|','
string|'"Up"'
op|','
string|'"Forward"'
op|','
string|'"Backward"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'count'
name|'in'
op|'('
number|'1'
op|','
number|'2'
op|','
number|'20'
op|','
number|'200'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"cursor"'
op|'+'
name|'meth'
op|','
op|'('
name|'count'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testScrollRegion
dedent|''
name|'def'
name|'testScrollRegion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
string|"'\\x1b[5;22r\\x1b[r'"
op|')'
newline|'\n'
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"setScrollRegion"'
op|','
op|'('
number|'5'
op|','
number|'22'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"setScrollRegion"'
op|','
op|'('
name|'None'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testHeightAndWidth
dedent|''
name|'def'
name|'testHeightAndWidth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
string|'"\\x1b#3\\x1b#4\\x1b#5\\x1b#6"'
op|')'
newline|'\n'
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"doubleHeightLine"'
op|','
op|'('
name|'True'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"doubleHeightLine"'
op|','
op|'('
name|'False'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"singleWidthLine"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"doubleWidthLine"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCharacterSet
dedent|''
name|'def'
name|'testCharacterSet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
op|'['
string|"''"
op|'.'
name|'join'
op|'('
op|'['
string|"'\\x1b'"
op|'+'
name|'g'
op|'+'
name|'n'
name|'for'
name|'n'
name|'in'
string|"'AB012'"
op|']'
op|')'
name|'for'
name|'g'
name|'in'
string|"'()'"
op|']'
op|')'
op|')'
newline|'\n'
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'which'
name|'in'
op|'('
name|'G0'
op|','
name|'G1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'charset'
name|'in'
op|'('
name|'CS_UK'
op|','
name|'CS_US'
op|','
name|'CS_DRAWING'
op|','
name|'CS_ALTERNATE'
op|','
name|'CS_ALTERNATE_SPECIAL'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"selectCharacterSet"'
op|','
op|'('
name|'charset'
op|','
name|'which'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testShifting
dedent|''
name|'def'
name|'testShifting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
string|'"\\x15\\x14"'
op|')'
newline|'\n'
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"shiftIn"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"shiftOut"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSingleShifts
dedent|''
name|'def'
name|'testSingleShifts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
string|'"\\x1bN\\x1bO"'
op|')'
newline|'\n'
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"singleShift2"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"singleShift3"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testKeypadMode
dedent|''
name|'def'
name|'testKeypadMode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
string|'"\\x1b=\\x1b>"'
op|')'
newline|'\n'
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"applicationKeypadMode"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"numericKeypadMode"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCursor
dedent|''
name|'def'
name|'testCursor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
string|'"\\x1b7\\x1b8"'
op|')'
newline|'\n'
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"saveCursor"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"restoreCursor"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testReset
dedent|''
name|'def'
name|'testReset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
string|'"\\x1bc"'
op|')'
newline|'\n'
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"reset"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testIndex
dedent|''
name|'def'
name|'testIndex'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
string|'"\\x1bD\\x1bM\\x1bE"'
op|')'
newline|'\n'
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"index"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"reverseIndex"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"nextLine"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testModes
dedent|''
name|'def'
name|'testModes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
string|'"\\x1b["'
op|'+'
string|"';'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
op|'['
name|'modes'
op|'.'
name|'KAM'
op|','
name|'modes'
op|'.'
name|'IRM'
op|','
name|'modes'
op|'.'
name|'LNM'
op|']'
op|')'
op|')'
op|'+'
string|'"h"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
string|'"\\x1b["'
op|'+'
string|"';'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
op|'['
name|'modes'
op|'.'
name|'KAM'
op|','
name|'modes'
op|'.'
name|'IRM'
op|','
name|'modes'
op|'.'
name|'LNM'
op|']'
op|')'
op|')'
op|'+'
string|'"l"'
op|')'
newline|'\n'
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"setModes"'
op|','
op|'('
op|'['
name|'modes'
op|'.'
name|'KAM'
op|','
name|'modes'
op|'.'
name|'IRM'
op|','
name|'modes'
op|'.'
name|'LNM'
op|']'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"resetModes"'
op|','
op|'('
op|'['
name|'modes'
op|'.'
name|'KAM'
op|','
name|'modes'
op|'.'
name|'IRM'
op|','
name|'modes'
op|'.'
name|'LNM'
op|']'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testErasure
dedent|''
name|'def'
name|'testErasure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
string|'"\\x1b[K\\x1b[1K\\x1b[2K\\x1b[J\\x1b[1J\\x1b[2J\\x1b[3P"'
op|')'
newline|'\n'
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'meth'
name|'in'
op|'('
string|'"eraseToLineEnd"'
op|','
string|'"eraseToLineBeginning"'
op|','
string|'"eraseLine"'
op|','
nl|'\n'
string|'"eraseToDisplayEnd"'
op|','
string|'"eraseToDisplayBeginning"'
op|','
nl|'\n'
string|'"eraseDisplay"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
name|'meth'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"deleteCharacter"'
op|','
op|'('
number|'3'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLineDeletion
dedent|''
name|'def'
name|'testLineDeletion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
string|'"\\x1b[M\\x1b[3M"'
op|')'
newline|'\n'
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'arg'
name|'in'
op|'('
number|'1'
op|','
number|'3'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"deleteLine"'
op|','
op|'('
name|'arg'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLineInsertion
dedent|''
name|'def'
name|'testLineInsertion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
string|'"\\x1b[L\\x1b[3L"'
op|')'
newline|'\n'
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'arg'
name|'in'
op|'('
number|'1'
op|','
number|'3'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"insertLine"'
op|','
op|'('
name|'arg'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occurrences'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'failIf'
op|'('
name|'occs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCursorPosition
dedent|''
name|'def'
name|'testCursorPosition'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'methods'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
op|'['
string|"'reportCursorPosition'"
op|']'
op|'='
op|'('
number|'6'
op|','
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
string|'"\\x1b[6n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|'"\\x1b[7;8R"'
op|')'
newline|'\n'
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"reportCursorPosition"'
op|')'
newline|'\n'
comment|"# This isn't really an interesting assert, since it only tests that"
nl|'\n'
comment|"# our mock setup is working right, but I'll include it anyway."
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
op|'('
number|'6'
op|','
number|'7'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_applicationDataBytes
dedent|''
name|'def'
name|'test_applicationDataBytes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Contiguous non-control bytes are passed to a single call to the\n        C{write} method of the terminal to which the L{ClientProtocol} is\n        connected.\n        """'
newline|'\n'
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"write"'
op|','
op|'('
string|'"a"'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
string|"'bc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
string|'"write"'
op|','
op|'('
string|'"bc"'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_applicationDataTest
dedent|''
name|'def'
name|'_applicationDataTest'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'calls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'occs'
op|'='
name|'occurrences'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'dataReceived'
op|'('
name|'data'
op|')'
newline|'\n'
name|'while'
name|'calls'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertCall'
op|'('
name|'occs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
op|'*'
name|'calls'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'occs'
op|','
string|'"No other calls should happen: %r"'
op|'%'
op|'('
name|'occs'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_shiftInAfterApplicationData
dedent|''
name|'def'
name|'test_shiftInAfterApplicationData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Application data bytes followed by a shift-in command are passed to a\n        call to C{write} before the terminal\'s C{shiftIn} method is called.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_applicationDataTest'
op|'('
nl|'\n'
string|"'ab\\x15'"
op|','
op|'['
nl|'\n'
op|'('
string|'"write"'
op|','
op|'('
string|'"ab"'
op|','
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|'"shiftIn"'
op|','
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_shiftOutAfterApplicationData
dedent|''
name|'def'
name|'test_shiftOutAfterApplicationData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Application data bytes followed by a shift-out command are passed to a\n        call to C{write} before the terminal\'s C{shiftOut} method is called.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_applicationDataTest'
op|'('
nl|'\n'
string|"'ab\\x14'"
op|','
op|'['
nl|'\n'
op|'('
string|'"write"'
op|','
op|'('
string|'"ab"'
op|','
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|'"shiftOut"'
op|','
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cursorBackwardAfterApplicationData
dedent|''
name|'def'
name|'test_cursorBackwardAfterApplicationData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Application data bytes followed by a cursor-backward command are passed\n        to a call to C{write} before the terminal\'s C{cursorBackward} method is\n        called.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_applicationDataTest'
op|'('
nl|'\n'
string|"'ab\\x08'"
op|','
op|'['
nl|'\n'
op|'('
string|'"write"'
op|','
op|'('
string|'"ab"'
op|','
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|'"cursorBackward"'
op|','
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_escapeAfterApplicationData
dedent|''
name|'def'
name|'test_escapeAfterApplicationData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Application data bytes followed by an escape character are passed to a\n        call to C{write} before the terminal\'s handler method for the escape is\n        called.\n        """'
newline|'\n'
comment|'# Test a short escape'
nl|'\n'
name|'self'
op|'.'
name|'_applicationDataTest'
op|'('
nl|'\n'
string|"'ab\\x1bD'"
op|','
op|'['
nl|'\n'
op|'('
string|'"write"'
op|','
op|'('
string|'"ab"'
op|','
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|'"index"'
op|','
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# And a long escape'
nl|'\n'
name|'self'
op|'.'
name|'_applicationDataTest'
op|'('
nl|'\n'
string|"'ab\\x1b[4h'"
op|','
op|'['
nl|'\n'
op|'('
string|'"write"'
op|','
op|'('
string|'"ab"'
op|','
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|'"setModes"'
op|','
op|'('
op|'['
number|'4'
op|']'
op|','
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# There's some other cases too, but they're all handled by the same"
nl|'\n'
comment|'# codepaths as above.'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServerProtocolOutputTests
dedent|''
dedent|''
name|'class'
name|'ServerProtocolOutputTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the bytes L{ServerProtocol} writes to its transport when its\n    methods are called.\n    """'
newline|'\n'
DECL|member|test_nextLine
name|'def'
name|'test_nextLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ServerProtocol.nextLine} writes C{"\\r\\n"} to its transport.\n        """'
newline|'\n'
comment|"# Why doesn't it write ESC E?  Because ESC E is poorly supported.  For"
nl|'\n'
comment|'# example, gnome-terminal (many different versions) fails to scroll if'
nl|'\n'
comment|'# it receives ESC E and the cursor is already on the last row.'
nl|'\n'
name|'protocol'
op|'='
name|'ServerProtocol'
op|'('
op|')'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'nextLine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|'"\\r\\n"'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

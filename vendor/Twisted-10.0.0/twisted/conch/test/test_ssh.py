begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_ssh -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'import'
name|'struct'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'Crypto'
op|'.'
name|'Cipher'
op|'.'
name|'DES3'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|Crypto
indent|'    '
name|'Crypto'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pyasn1'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|pyasn1
indent|'    '
name|'pyasn1'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
name|'import'
name|'common'
op|','
name|'session'
op|','
name|'forwarding'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
name|'import'
name|'avatar'
op|','
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
op|'.'
name|'keydata'
name|'import'
name|'publicRSA_openssh'
op|','
name|'privateRSA_openssh'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
op|'.'
name|'keydata'
name|'import'
name|'publicDSA_openssh'
op|','
name|'privateDSA_openssh'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'portal'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'protocol'
op|','
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'ProcessTerminated'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
op|','
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'from'
name|'test_recvline'
name|'import'
name|'LoopbackRelay'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConchTestRealm
name|'class'
name|'ConchTestRealm'
op|':'
newline|'\n'
nl|'\n'
DECL|member|requestAvatar
indent|'    '
name|'def'
name|'requestAvatar'
op|'('
name|'self'
op|','
name|'avatarID'
op|','
name|'mind'
op|','
op|'*'
name|'interfaces'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'avatarID'
op|','
string|"'testuser'"
op|')'
newline|'\n'
name|'a'
op|'='
name|'ConchTestAvatar'
op|'('
op|')'
newline|'\n'
name|'return'
name|'interfaces'
op|'['
number|'0'
op|']'
op|','
name|'a'
op|','
name|'a'
op|'.'
name|'logout'
newline|'\n'
nl|'\n'
DECL|class|ConchTestAvatar
dedent|''
dedent|''
name|'class'
name|'ConchTestAvatar'
op|'('
name|'avatar'
op|'.'
name|'ConchUser'
op|')'
op|':'
newline|'\n'
DECL|variable|loggedOut
indent|'    '
name|'loggedOut'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'avatar'
op|'.'
name|'ConchUser'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'listeners'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'channelLookup'
op|'.'
name|'update'
op|'('
op|'{'
string|"'session'"
op|':'
name|'session'
op|'.'
name|'SSHSession'
op|','
nl|'\n'
string|"'direct-tcpip'"
op|':'
name|'forwarding'
op|'.'
name|'openConnectForwardingClient'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'subsystemLookup'
op|'.'
name|'update'
op|'('
op|'{'
string|"'crazy'"
op|':'
name|'CrazySubsystem'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|global_foo
dedent|''
name|'def'
name|'global_foo'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'data'
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|global_foo_2
dedent|''
name|'def'
name|'global_foo_2'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'data'
op|','
string|"'bar2'"
op|')'
newline|'\n'
name|'return'
number|'1'
op|','
string|"'data'"
newline|'\n'
nl|'\n'
DECL|member|global_tcpip_forward
dedent|''
name|'def'
name|'global_tcpip_forward'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|','
name|'port'
op|'='
name|'forwarding'
op|'.'
name|'unpackGlobal_tcpip_forward'
op|'('
name|'data'
op|')'
newline|'\n'
name|'try'
op|':'
name|'listener'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
name|'port'
op|','
nl|'\n'
name|'forwarding'
op|'.'
name|'SSHListenForwardingFactory'
op|'('
name|'self'
op|'.'
name|'conn'
op|','
nl|'\n'
op|'('
name|'host'
op|','
name|'port'
op|')'
op|','
nl|'\n'
name|'forwarding'
op|'.'
name|'SSHListenServerForwardingChannel'
op|')'
op|','
nl|'\n'
name|'interface'
op|'='
name|'host'
op|')'
newline|'\n'
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'fail'
op|'('
string|'"something went wrong with remote->local forwarding"'
op|')'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'listeners'
op|'['
op|'('
name|'host'
op|','
name|'port'
op|')'
op|']'
op|'='
name|'listener'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|global_cancel_tcpip_forward
dedent|''
dedent|''
name|'def'
name|'global_cancel_tcpip_forward'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|','
name|'port'
op|'='
name|'forwarding'
op|'.'
name|'unpackGlobal_tcpip_forward'
op|'('
name|'data'
op|')'
newline|'\n'
name|'listener'
op|'='
name|'self'
op|'.'
name|'listeners'
op|'.'
name|'get'
op|'('
op|'('
name|'host'
op|','
name|'port'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'listener'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'listeners'
op|'['
op|'('
name|'host'
op|','
name|'port'
op|')'
op|']'
newline|'\n'
name|'listener'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|logout
dedent|''
name|'def'
name|'logout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loggedOut'
op|'='
name|'True'
newline|'\n'
name|'for'
name|'listener'
name|'in'
name|'self'
op|'.'
name|'listeners'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'stopListening %s'"
op|'%'
name|'listener'
op|')'
newline|'\n'
name|'listener'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|ConchSessionForTestAvatar
dedent|''
dedent|''
dedent|''
name|'class'
name|'ConchSessionForTestAvatar'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'avatar'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'unittest'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'avatar'
op|','
name|'ConchTestAvatar'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'avatar'
op|'='
name|'avatar'
newline|'\n'
name|'self'
op|'.'
name|'cmd'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'ptyReq'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'eof'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|getPty
dedent|''
name|'def'
name|'getPty'
op|'('
name|'self'
op|','
name|'term'
op|','
name|'windowSize'
op|','
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'pty req'"
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'term'
op|','
string|"'conch-test-term'"
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'windowSize'
op|','
op|'('
number|'24'
op|','
number|'80'
op|','
number|'0'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ptyReq'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|openShell
dedent|''
name|'def'
name|'openShell'
op|'('
name|'self'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'openning shell'"
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'ptyReq'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'='
name|'proto'
newline|'\n'
name|'EchoTransport'
op|'('
name|'proto'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cmd'
op|'='
string|"'shell'"
newline|'\n'
nl|'\n'
DECL|member|execCommand
dedent|''
name|'def'
name|'execCommand'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'cmd'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cmd'
op|'='
name|'cmd'
newline|'\n'
name|'unittest'
op|'.'
name|'assert_'
op|'('
name|'cmd'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'0'
op|']'
name|'in'
op|'['
string|"'false'"
op|','
string|"'echo'"
op|','
string|"'secho'"
op|','
string|"'eecho'"
op|','
string|"'jumboliah'"
op|']'
op|','
nl|'\n'
string|"'invalid command: %s'"
op|'%'
name|'cmd'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'cmd'
op|'=='
string|"'jumboliah'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'ConchError'
op|'('
string|"'bad exec'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'proto'
op|'='
name|'proto'
newline|'\n'
name|'f'
op|'='
name|'cmd'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'f'
op|'=='
string|"'false'"
op|':'
newline|'\n'
indent|'            '
name|'FalseTransport'
op|'('
name|'proto'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'f'
op|'=='
string|"'echo'"
op|':'
newline|'\n'
indent|'            '
name|'t'
op|'='
name|'EchoTransport'
op|'('
name|'proto'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'write'
op|'('
name|'cmd'
op|'['
number|'5'
op|':'
op|']'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'f'
op|'=='
string|"'secho'"
op|':'
newline|'\n'
indent|'            '
name|'t'
op|'='
name|'SuperEchoTransport'
op|'('
name|'proto'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'write'
op|'('
name|'cmd'
op|'['
number|'6'
op|':'
op|']'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'f'
op|'=='
string|"'eecho'"
op|':'
newline|'\n'
indent|'            '
name|'t'
op|'='
name|'ErrEchoTransport'
op|'('
name|'proto'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'write'
op|'('
name|'cmd'
op|'['
number|'6'
op|':'
op|']'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'avatar'
op|'.'
name|'conn'
op|'.'
name|'transport'
op|'.'
name|'expectedLoseConnection'
op|'='
number|'1'
newline|'\n'
nl|'\n'
comment|'#    def closeReceived(self):'
nl|'\n'
comment|'#        #if self.proto:'
nl|'\n'
comment|'#        #   self.proto.transport.loseConnection()'
nl|'\n'
comment|'#        self.loseConnection()'
nl|'\n'
nl|'\n'
DECL|member|eofReceived
dedent|''
name|'def'
name|'eofReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'eof'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|closed
dedent|''
name|'def'
name|'closed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|'\'closed cmd "%s"\''
op|'%'
name|'self'
op|'.'
name|'cmd'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'cmd'
op|'=='
string|"'echo hello'"
op|':'
newline|'\n'
indent|'            '
name|'rwl'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'session'
op|'.'
name|'remoteWindowLeft'
newline|'\n'
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'rwl'
op|','
number|'4'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'cmd'
op|'=='
string|"'eecho hello'"
op|':'
newline|'\n'
indent|'            '
name|'rwl'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'session'
op|'.'
name|'remoteWindowLeft'
newline|'\n'
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'rwl'
op|','
number|'4'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'cmd'
op|'=='
string|"'shell'"
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'eof'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'components'
newline|'\n'
name|'components'
op|'.'
name|'registerAdapter'
op|'('
name|'ConchSessionForTestAvatar'
op|','
name|'ConchTestAvatar'
op|','
name|'session'
op|'.'
name|'ISession'
op|')'
newline|'\n'
nl|'\n'
DECL|class|CrazySubsystem
name|'class'
name|'CrazySubsystem'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        good ... good\n        """'
newline|'\n'
nl|'\n'
DECL|class|FalseTransport
dedent|''
dedent|''
name|'class'
name|'FalseTransport'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'p'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'processEnded'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'ProcessTerminated'
op|'('
number|'255'
op|','
name|'None'
op|','
name|'None'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|EchoTransport
dedent|''
dedent|''
name|'class'
name|'EchoTransport'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'p'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proto'
op|'='
name|'p'
newline|'\n'
name|'p'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'closed'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
name|'repr'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'outReceived'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'outReceived'
op|'('
string|"'\\r\\n'"
op|')'
newline|'\n'
name|'if'
string|"'\\x00'"
name|'in'
name|'data'
op|':'
comment|"# mimic 'exit' for the shell test"
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'closed'
op|':'
name|'return'
newline|'\n'
name|'self'
op|'.'
name|'closed'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'inConnectionLost'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'outConnectionLost'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'errConnectionLost'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'processEnded'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'ProcessTerminated'
op|'('
number|'0'
op|','
name|'None'
op|','
name|'None'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ErrEchoTransport
dedent|''
dedent|''
name|'class'
name|'ErrEchoTransport'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'p'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proto'
op|'='
name|'p'
newline|'\n'
name|'p'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'closed'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proto'
op|'.'
name|'errReceived'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'errReceived'
op|'('
string|"'\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'closed'
op|':'
name|'return'
newline|'\n'
name|'self'
op|'.'
name|'closed'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'inConnectionLost'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'outConnectionLost'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'errConnectionLost'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'processEnded'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'ProcessTerminated'
op|'('
number|'0'
op|','
name|'None'
op|','
name|'None'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|SuperEchoTransport
dedent|''
dedent|''
name|'class'
name|'SuperEchoTransport'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'p'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proto'
op|'='
name|'p'
newline|'\n'
name|'p'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'closed'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proto'
op|'.'
name|'outReceived'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'outReceived'
op|'('
string|"'\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'errReceived'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'errReceived'
op|'('
string|"'\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'closed'
op|':'
name|'return'
newline|'\n'
name|'self'
op|'.'
name|'closed'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'inConnectionLost'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'outConnectionLost'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'errConnectionLost'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'processEnded'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'ProcessTerminated'
op|'('
number|'0'
op|','
name|'None'
op|','
name|'None'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'Crypto'
name|'is'
name|'not'
name|'None'
name|'and'
name|'pyasn1'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'conch'
name|'import'
name|'checkers'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
name|'import'
name|'channel'
op|','
name|'connection'
op|','
name|'factory'
op|','
name|'keys'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
name|'import'
name|'transport'
op|','
name|'userauth'
newline|'\n'
nl|'\n'
DECL|class|UtilityTestCase
name|'class'
name|'UtilityTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testCounter
indent|'        '
name|'def'
name|'testCounter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'='
name|'transport'
op|'.'
name|'_Counter'
op|'('
string|"'\\x00\\x00'"
op|','
number|'2'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'256'
op|'*'
number|'256'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c'
op|'('
op|')'
op|','
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!H'"
op|','
op|'('
name|'i'
op|'+'
number|'1'
op|')'
op|'%'
op|'('
number|'2'
op|'**'
number|'16'
op|')'
op|')'
op|')'
newline|'\n'
comment|'# It should wrap around, too.'
nl|'\n'
dedent|''
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'256'
op|'*'
number|'256'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c'
op|'('
op|')'
op|','
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!H'"
op|','
op|'('
name|'i'
op|'+'
number|'1'
op|')'
op|'%'
op|'('
number|'2'
op|'**'
number|'16'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConchTestPublicKeyChecker
dedent|''
dedent|''
dedent|''
name|'class'
name|'ConchTestPublicKeyChecker'
op|'('
name|'checkers'
op|'.'
name|'SSHPublicKeyDatabase'
op|')'
op|':'
newline|'\n'
DECL|member|checkKey
indent|'        '
name|'def'
name|'checkKey'
op|'('
name|'self'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'credentials'
op|'.'
name|'username'
op|','
string|"'testuser'"
op|','
string|"'bad username'"
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'credentials'
op|'.'
name|'blob'
op|','
name|'keys'
op|'.'
name|'getPublicKeyString'
op|'('
name|'data'
op|'='
name|'publicDSA_openssh'
op|')'
op|')'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|class|ConchTestPasswordChecker
dedent|''
dedent|''
name|'class'
name|'ConchTestPasswordChecker'
op|':'
newline|'\n'
DECL|variable|credentialInterfaces
indent|'        '
name|'credentialInterfaces'
op|'='
name|'checkers'
op|'.'
name|'IUsernamePassword'
op|','
newline|'\n'
nl|'\n'
DECL|member|requestAvatarId
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'credentials'
op|'.'
name|'username'
op|','
string|"'testuser'"
op|','
string|"'bad username'"
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'credentials'
op|'.'
name|'password'
op|','
string|"'testpass'"
op|','
string|"'bad password'"
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'credentials'
op|'.'
name|'username'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ConchTestSSHChecker
dedent|''
dedent|''
name|'class'
name|'ConchTestSSHChecker'
op|'('
name|'checkers'
op|'.'
name|'SSHProtocolChecker'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|areDone
indent|'        '
name|'def'
name|'areDone'
op|'('
name|'self'
op|','
name|'avatarId'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'avatarId'
op|','
string|"'testuser'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'successfulCredentials'
op|'['
name|'avatarId'
op|']'
op|')'
op|'<'
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|class|ConchTestServerFactory
dedent|''
dedent|''
dedent|''
name|'class'
name|'ConchTestServerFactory'
op|'('
name|'factory'
op|'.'
name|'SSHFactory'
op|')'
op|':'
newline|'\n'
DECL|variable|noisy
indent|'        '
name|'noisy'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|variable|services
name|'services'
op|'='
op|'{'
nl|'\n'
string|"'ssh-userauth'"
op|':'
name|'userauth'
op|'.'
name|'SSHUserAuthServer'
op|','
nl|'\n'
string|"'ssh-connection'"
op|':'
name|'connection'
op|'.'
name|'SSHConnection'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'proto'
op|'='
name|'ConchTestServer'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'supportedPublicKeys'
op|'='
name|'self'
op|'.'
name|'privateKeys'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
nl|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|"'expectedLoseConnection'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'proto'
op|'.'
name|'expectedLoseConnection'
op|'='
name|'self'
op|'.'
name|'expectedLoseConnection'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'proto'
op|'='
name|'proto'
newline|'\n'
name|'return'
name|'proto'
newline|'\n'
nl|'\n'
DECL|member|getPublicKeys
dedent|''
name|'def'
name|'getPublicKeys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
nl|'\n'
string|"'ssh-rsa'"
op|':'
name|'keys'
op|'.'
name|'getPublicKeyString'
op|'('
name|'data'
op|'='
name|'publicRSA_openssh'
op|')'
op|','
nl|'\n'
string|"'ssh-dss'"
op|':'
name|'keys'
op|'.'
name|'getPublicKeyString'
op|'('
name|'data'
op|'='
name|'publicDSA_openssh'
op|')'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|getPrivateKeys
dedent|''
name|'def'
name|'getPrivateKeys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
nl|'\n'
string|"'ssh-rsa'"
op|':'
name|'keys'
op|'.'
name|'getPrivateKeyObject'
op|'('
name|'data'
op|'='
name|'privateRSA_openssh'
op|')'
op|','
nl|'\n'
string|"'ssh-dss'"
op|':'
name|'keys'
op|'.'
name|'getPrivateKeyObject'
op|'('
name|'data'
op|'='
name|'privateDSA_openssh'
op|')'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|getPrimes
dedent|''
name|'def'
name|'getPrimes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
nl|'\n'
number|'2048'
op|':'
op|'['
op|'('
name|'transport'
op|'.'
name|'DH_GENERATOR'
op|','
name|'transport'
op|'.'
name|'DH_PRIME'
op|')'
op|']'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|getService
dedent|''
name|'def'
name|'getService'
op|'('
name|'self'
op|','
name|'trans'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'factory'
op|'.'
name|'SSHFactory'
op|'.'
name|'getService'
op|'('
name|'self'
op|','
name|'trans'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ConchTestBase
dedent|''
dedent|''
name|'class'
name|'ConchTestBase'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|done
indent|'        '
name|'done'
op|'='
number|'0'
newline|'\n'
DECL|variable|allowedToError
name|'allowedToError'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'done'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|"'expectedLoseConnection'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'unexpectedly lost connection %s\\n%s'"
op|'%'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'done'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|receiveError
dedent|''
name|'def'
name|'receiveError'
op|'('
name|'self'
op|','
name|'reasonCode'
op|','
name|'desc'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'expectedLoseConnection'
op|'='
number|'1'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'allowedToError'
op|':'
newline|'\n'
indent|'                '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'got disconnect for %s: reason %s, desc: %s'"
op|'%'
nl|'\n'
op|'('
name|'self'
op|','
name|'reasonCode'
op|','
name|'desc'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|receiveUnimplemented
dedent|''
name|'def'
name|'receiveUnimplemented'
op|'('
name|'self'
op|','
name|'seqID'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'got unimplemented: seqid %s'"
op|'%'
name|'seqID'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'expectedLoseConnection'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|ConchTestServer
dedent|''
dedent|''
name|'class'
name|'ConchTestServer'
op|'('
name|'ConchTestBase'
op|','
name|'transport'
op|'.'
name|'SSHServerTransport'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
indent|'        '
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ConchTestBase'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
name|'transport'
op|'.'
name|'SSHServerTransport'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ConchTestClient
dedent|''
dedent|''
name|'class'
name|'ConchTestClient'
op|'('
name|'ConchTestBase'
op|','
name|'transport'
op|'.'
name|'SSHClientTransport'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
indent|'        '
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ConchTestBase'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
name|'transport'
op|'.'
name|'SSHClientTransport'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|verifyHostKey
dedent|''
name|'def'
name|'verifyHostKey'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'fp'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|','
name|'keys'
op|'.'
name|'getPublicKeyString'
op|'('
name|'data'
op|'='
name|'publicRSA_openssh'
op|')'
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'fp'
op|','
string|"'3d:13:5f:cb:c9:79:8a:93:06:27:65:bc:3d:0b:8f:af'"
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionSecure
dedent|''
name|'def'
name|'connectionSecure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'requestService'
op|'('
name|'ConchTestClientAuth'
op|'('
string|"'testuser'"
op|','
nl|'\n'
name|'ConchTestClientConnection'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ConchTestClientAuth
dedent|''
dedent|''
name|'class'
name|'ConchTestClientAuth'
op|'('
name|'userauth'
op|'.'
name|'SSHUserAuthClient'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|hasTriedNone
indent|'        '
name|'hasTriedNone'
op|'='
number|'0'
comment|"# have we tried the 'none' auth yet?"
newline|'\n'
DECL|variable|canSucceedPublicKey
name|'canSucceedPublicKey'
op|'='
number|'0'
comment|'# can we succed with this yet?'
newline|'\n'
DECL|variable|canSucceedPassword
name|'canSucceedPassword'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|ssh_USERAUTH_SUCCESS
name|'def'
name|'ssh_USERAUTH_SUCCESS'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'canSucceedPassword'
name|'and'
name|'self'
op|'.'
name|'canSucceedPublicKey'
op|':'
newline|'\n'
indent|'                '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'got USERAUTH_SUCESS before password and publickey'"
op|')'
newline|'\n'
dedent|''
name|'userauth'
op|'.'
name|'SSHUserAuthClient'
op|'.'
name|'ssh_USERAUTH_SUCCESS'
op|'('
name|'self'
op|','
name|'packet'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getPassword
dedent|''
name|'def'
name|'getPassword'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'canSucceedPassword'
op|'='
number|'1'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
string|"'testpass'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|getPrivateKey
dedent|''
name|'def'
name|'getPrivateKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'canSucceedPublicKey'
op|'='
number|'1'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'keys'
op|'.'
name|'getPrivateKeyObject'
op|'('
name|'data'
op|'='
name|'privateDSA_openssh'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getPublicKey
dedent|''
name|'def'
name|'getPublicKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'keys'
op|'.'
name|'getPublicKeyString'
op|'('
name|'data'
op|'='
name|'publicDSA_openssh'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ConchTestClientConnection
dedent|''
dedent|''
name|'class'
name|'ConchTestClientConnection'
op|'('
name|'connection'
op|'.'
name|'SSHConnection'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|name
indent|'        '
name|'name'
op|'='
string|"'ssh-connection'"
newline|'\n'
DECL|variable|results
name|'results'
op|'='
number|'0'
newline|'\n'
DECL|variable|totalResults
name|'totalResults'
op|'='
number|'8'
newline|'\n'
nl|'\n'
DECL|member|serviceStarted
name|'def'
name|'serviceStarted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'openChannel'
op|'('
name|'SSHTestFailExecChannel'
op|'('
name|'conn'
op|'='
name|'self'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'openChannel'
op|'('
name|'SSHTestFalseChannel'
op|'('
name|'conn'
op|'='
name|'self'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'openChannel'
op|'('
name|'SSHTestEchoChannel'
op|'('
name|'localWindow'
op|'='
number|'4'
op|','
name|'localMaxPacket'
op|'='
number|'5'
op|','
name|'conn'
op|'='
name|'self'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'openChannel'
op|'('
name|'SSHTestErrChannel'
op|'('
name|'localWindow'
op|'='
number|'4'
op|','
name|'localMaxPacket'
op|'='
number|'5'
op|','
name|'conn'
op|'='
name|'self'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'openChannel'
op|'('
name|'SSHTestMaxPacketChannel'
op|'('
name|'localWindow'
op|'='
number|'12'
op|','
name|'localMaxPacket'
op|'='
number|'1'
op|','
name|'conn'
op|'='
name|'self'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'openChannel'
op|'('
name|'SSHTestShellChannel'
op|'('
name|'conn'
op|'='
name|'self'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'openChannel'
op|'('
name|'SSHTestSubsystemChannel'
op|'('
name|'conn'
op|'='
name|'self'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'openChannel'
op|'('
name|'SSHUnknownChannel'
op|'('
name|'conn'
op|'='
name|'self'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addResult
dedent|''
name|'def'
name|'addResult'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'results'
op|'+='
number|'1'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'got %s of %s results'"
op|'%'
op|'('
name|'self'
op|'.'
name|'results'
op|','
name|'self'
op|'.'
name|'totalResults'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'results'
op|'=='
name|'self'
op|'.'
name|'totalResults'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'expectedLoseConnection'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'serviceStopped'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|SSHUnknownChannel
dedent|''
dedent|''
dedent|''
name|'class'
name|'SSHUnknownChannel'
op|'('
name|'channel'
op|'.'
name|'SSHChannel'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|name
indent|'        '
name|'name'
op|'='
string|"'crazy-unknown-channel'"
newline|'\n'
nl|'\n'
DECL|member|openFailed
name|'def'
name|'openFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            good .... good\n            """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'unknown open failed'"
op|')'
newline|'\n'
name|'log'
op|'.'
name|'flushErrors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'addResult'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|channelOpen
dedent|''
name|'def'
name|'channelOpen'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|'"opened unknown channel"'
op|')'
newline|'\n'
nl|'\n'
DECL|class|SSHTestFailExecChannel
dedent|''
dedent|''
name|'class'
name|'SSHTestFailExecChannel'
op|'('
name|'channel'
op|'.'
name|'SSHChannel'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|name
indent|'        '
name|'name'
op|'='
string|"'session'"
newline|'\n'
nl|'\n'
DECL|member|openFailed
name|'def'
name|'openFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'fail exec open failed: %s'"
op|'%'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|channelOpen
dedent|''
name|'def'
name|'channelOpen'
op|'('
name|'self'
op|','
name|'ignore'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendRequest'
op|'('
name|'self'
op|','
string|"'exec'"
op|','
name|'common'
op|'.'
name|'NS'
op|'('
string|"'jumboliah'"
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbRequestWorked'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebRequestWorked'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'opened fail exec'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbRequestWorked
dedent|''
name|'def'
name|'_cbRequestWorked'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'fail exec succeeded'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebRequestWorked
dedent|''
name|'def'
name|'_ebRequestWorked'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'fail exec finished'"
op|')'
newline|'\n'
name|'log'
op|'.'
name|'flushErrors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'addResult'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|SSHTestFalseChannel
dedent|''
dedent|''
name|'class'
name|'SSHTestFalseChannel'
op|'('
name|'channel'
op|'.'
name|'SSHChannel'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|name
indent|'        '
name|'name'
op|'='
string|"'session'"
newline|'\n'
nl|'\n'
DECL|member|openFailed
name|'def'
name|'openFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'false open failed: %s'"
op|'%'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|channelOpen
dedent|''
name|'def'
name|'channelOpen'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendRequest'
op|'('
name|'self'
op|','
string|"'exec'"
op|','
name|'common'
op|'.'
name|'NS'
op|'('
string|"'false'"
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbRequestWorked'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebRequestFailed'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'opened false'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbRequestWorked
dedent|''
name|'def'
name|'_cbRequestWorked'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_ebRequestFailed
dedent|''
name|'def'
name|'_ebRequestFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'false exec failed: %s'"
op|'%'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'got data when using false'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|request_exit_status
dedent|''
name|'def'
name|'request_exit_status'
op|'('
name|'self'
op|','
name|'status'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'status'
op|','
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>L'"
op|','
name|'status'
op|')'
newline|'\n'
name|'if'
name|'status'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'false exit status was 0'"
op|')'
newline|'\n'
dedent|''
name|'log'
op|'.'
name|'msg'
op|'('
string|"'finished false'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'addResult'
op|'('
op|')'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|class|SSHTestEchoChannel
dedent|''
dedent|''
name|'class'
name|'SSHTestEchoChannel'
op|'('
name|'channel'
op|'.'
name|'SSHChannel'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|name
indent|'        '
name|'name'
op|'='
string|"'session'"
newline|'\n'
DECL|variable|testBuf
name|'testBuf'
op|'='
string|"''"
newline|'\n'
DECL|variable|eofCalled
name|'eofCalled'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|openFailed
name|'def'
name|'openFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'echo open failed: %s'"
op|'%'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|channelOpen
dedent|''
name|'def'
name|'channelOpen'
op|'('
name|'self'
op|','
name|'ignore'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendRequest'
op|'('
name|'self'
op|','
string|"'exec'"
op|','
name|'common'
op|'.'
name|'NS'
op|'('
string|"'echo hello'"
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebRequestFailed'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'opened echo'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebRequestFailed
dedent|''
name|'def'
name|'_ebRequestFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'echo exec failed: %s'"
op|'%'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'testBuf'
op|'+='
name|'data'
newline|'\n'
nl|'\n'
DECL|member|errReceived
dedent|''
name|'def'
name|'errReceived'
op|'('
name|'self'
op|','
name|'dataType'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'echo channel got extended data'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|request_exit_status
dedent|''
name|'def'
name|'request_exit_status'
op|'('
name|'self'
op|','
name|'status'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'status'
op|','
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>L'"
op|','
name|'status'
op|')'
newline|'\n'
nl|'\n'
DECL|member|eofReceived
dedent|''
name|'def'
name|'eofReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'eof received'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'eofCalled'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|closed
dedent|''
name|'def'
name|'closed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'status'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'echo exit status was not 0: %i'"
op|'%'
name|'self'
op|'.'
name|'status'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'testBuf'
op|'!='
string|'"hello\\r\\n"'
op|':'
newline|'\n'
indent|'                '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'echo did not return hello: %s'"
op|'%'
name|'repr'
op|'('
name|'self'
op|'.'
name|'testBuf'
op|')'
op|')'
newline|'\n'
dedent|''
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'localWindowLeft'
op|','
number|'4'
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'eofCalled'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'finished echo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'addResult'
op|'('
op|')'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|class|SSHTestErrChannel
dedent|''
dedent|''
name|'class'
name|'SSHTestErrChannel'
op|'('
name|'channel'
op|'.'
name|'SSHChannel'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|name
indent|'        '
name|'name'
op|'='
string|"'session'"
newline|'\n'
DECL|variable|testBuf
name|'testBuf'
op|'='
string|"''"
newline|'\n'
DECL|variable|eofCalled
name|'eofCalled'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|openFailed
name|'def'
name|'openFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'err open failed: %s'"
op|'%'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|channelOpen
dedent|''
name|'def'
name|'channelOpen'
op|'('
name|'self'
op|','
name|'ignore'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendRequest'
op|'('
name|'self'
op|','
string|"'exec'"
op|','
name|'common'
op|'.'
name|'NS'
op|'('
string|"'eecho hello'"
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebRequestFailed'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'opened err'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebRequestFailed
dedent|''
name|'def'
name|'_ebRequestFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'err exec failed: %s'"
op|'%'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'err channel got regular data: %s'"
op|'%'
name|'repr'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|extReceived
dedent|''
name|'def'
name|'extReceived'
op|'('
name|'self'
op|','
name|'dataType'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'dataType'
op|','
name|'connection'
op|'.'
name|'EXTENDED_DATA_STDERR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'testBuf'
op|'+='
name|'data'
newline|'\n'
nl|'\n'
DECL|member|request_exit_status
dedent|''
name|'def'
name|'request_exit_status'
op|'('
name|'self'
op|','
name|'status'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'status'
op|','
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>L'"
op|','
name|'status'
op|')'
newline|'\n'
nl|'\n'
DECL|member|eofReceived
dedent|''
name|'def'
name|'eofReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'eof received'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'eofCalled'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|closed
dedent|''
name|'def'
name|'closed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'status'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'err exit status was not 0: %i'"
op|'%'
name|'self'
op|'.'
name|'status'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'testBuf'
op|'!='
string|'"hello\\r\\n"'
op|':'
newline|'\n'
indent|'                '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'err did not return hello: %s'"
op|'%'
name|'repr'
op|'('
name|'self'
op|'.'
name|'testBuf'
op|')'
op|')'
newline|'\n'
dedent|''
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'localWindowLeft'
op|','
number|'4'
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'eofCalled'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'finished err'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'addResult'
op|'('
op|')'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|class|SSHTestMaxPacketChannel
dedent|''
dedent|''
name|'class'
name|'SSHTestMaxPacketChannel'
op|'('
name|'channel'
op|'.'
name|'SSHChannel'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|name
indent|'        '
name|'name'
op|'='
string|"'session'"
newline|'\n'
DECL|variable|testBuf
name|'testBuf'
op|'='
string|"''"
newline|'\n'
DECL|variable|testExtBuf
name|'testExtBuf'
op|'='
string|"''"
newline|'\n'
DECL|variable|eofCalled
name|'eofCalled'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|openFailed
name|'def'
name|'openFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'max packet open failed: %s'"
op|'%'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|channelOpen
dedent|''
name|'def'
name|'channelOpen'
op|'('
name|'self'
op|','
name|'ignore'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendRequest'
op|'('
name|'self'
op|','
string|"'exec'"
op|','
name|'common'
op|'.'
name|'NS'
op|'('
string|"'secho hello'"
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebRequestFailed'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'opened max packet'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebRequestFailed
dedent|''
name|'def'
name|'_ebRequestFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'max packet exec failed: %s'"
op|'%'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'testBuf'
op|'+='
name|'data'
newline|'\n'
nl|'\n'
DECL|member|extReceived
dedent|''
name|'def'
name|'extReceived'
op|'('
name|'self'
op|','
name|'dataType'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'dataType'
op|','
name|'connection'
op|'.'
name|'EXTENDED_DATA_STDERR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'testExtBuf'
op|'+='
name|'data'
newline|'\n'
nl|'\n'
DECL|member|request_exit_status
dedent|''
name|'def'
name|'request_exit_status'
op|'('
name|'self'
op|','
name|'status'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'status'
op|','
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>L'"
op|','
name|'status'
op|')'
newline|'\n'
nl|'\n'
DECL|member|eofReceived
dedent|''
name|'def'
name|'eofReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'eof received'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'eofCalled'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|closed
dedent|''
name|'def'
name|'closed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'status'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'echo exit status was not 0: %i'"
op|'%'
name|'self'
op|'.'
name|'status'
op|')'
newline|'\n'
dedent|''
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'testBuf'
op|','
string|"'hello\\r\\n'"
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'testExtBuf'
op|','
string|"'hello\\r\\n'"
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'localWindowLeft'
op|','
number|'12'
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'eofCalled'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'finished max packet'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'addResult'
op|'('
op|')'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|class|SSHTestShellChannel
dedent|''
dedent|''
name|'class'
name|'SSHTestShellChannel'
op|'('
name|'channel'
op|'.'
name|'SSHChannel'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|name
indent|'        '
name|'name'
op|'='
string|"'session'"
newline|'\n'
DECL|variable|testBuf
name|'testBuf'
op|'='
string|"''"
newline|'\n'
DECL|variable|eofCalled
name|'eofCalled'
op|'='
number|'0'
newline|'\n'
DECL|variable|closeCalled
name|'closeCalled'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|openFailed
name|'def'
name|'openFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'shell open failed: %s'"
op|'%'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|channelOpen
dedent|''
name|'def'
name|'channelOpen'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
name|'session'
op|'.'
name|'packRequest_pty_req'
op|'('
string|"'conch-test-term'"
op|','
op|'('
number|'24'
op|','
number|'80'
op|','
number|'0'
op|','
number|'0'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendRequest'
op|'('
name|'self'
op|','
string|"'pty-req'"
op|','
name|'data'
op|','
number|'1'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbPtyReq'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebPtyReq'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'opened shell'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbPtyReq
dedent|''
name|'def'
name|'_cbPtyReq'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendRequest'
op|'('
name|'self'
op|','
string|"'shell'"
op|','
string|"''"
op|','
number|'1'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbShellOpen'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebShellOpen'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebPtyReq
dedent|''
name|'def'
name|'_ebPtyReq'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'pty request failed: %s'"
op|'%'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbShellOpen
dedent|''
name|'def'
name|'_cbShellOpen'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'('
string|"'testing the shell!\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendEOF'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebShellOpen
dedent|''
name|'def'
name|'_ebShellOpen'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'shell request failed: %s'"
op|'%'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'testBuf'
op|'+='
name|'data'
newline|'\n'
nl|'\n'
DECL|member|request_exit_status
dedent|''
name|'def'
name|'request_exit_status'
op|'('
name|'self'
op|','
name|'status'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'status'
op|','
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'>L'"
op|','
name|'status'
op|')'
newline|'\n'
nl|'\n'
DECL|member|eofReceived
dedent|''
name|'def'
name|'eofReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'eofCalled'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|closed
dedent|''
name|'def'
name|'closed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'calling shell closed'"
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'status'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'shell exit status was not 0: %i'"
op|'%'
name|'self'
op|'.'
name|'status'
op|')'
newline|'\n'
dedent|''
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'testBuf'
op|','
string|"'testing the shell!\\x00\\r\\n'"
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'eofCalled'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'finished shell'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'addResult'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|SSHTestSubsystemChannel
dedent|''
dedent|''
name|'class'
name|'SSHTestSubsystemChannel'
op|'('
name|'channel'
op|'.'
name|'SSHChannel'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|name
indent|'        '
name|'name'
op|'='
string|"'session'"
newline|'\n'
nl|'\n'
DECL|member|openFailed
name|'def'
name|'openFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'subsystem open failed: %s'"
op|'%'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|channelOpen
dedent|''
name|'def'
name|'channelOpen'
op|'('
name|'self'
op|','
name|'ignore'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendRequest'
op|'('
name|'self'
op|','
string|"'subsystem'"
op|','
name|'common'
op|'.'
name|'NS'
op|'('
string|"'not-crazy'"
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbRequestWorked'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebRequestFailed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbRequestWorked
dedent|''
name|'def'
name|'_cbRequestWorked'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'opened non-crazy subsystem'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebRequestFailed
dedent|''
name|'def'
name|'_ebRequestFailed'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendRequest'
op|'('
name|'self'
op|','
string|"'subsystem'"
op|','
name|'common'
op|'.'
name|'NS'
op|'('
string|"'crazy'"
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbRealRequestWorked'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebRealRequestFailed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbRealRequestWorked
dedent|''
name|'def'
name|'_cbRealRequestWorked'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d1'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendGlobalRequest'
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|','
number|'1'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebFirstGlobal'
op|')'
newline|'\n'
nl|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendGlobalRequest'
op|'('
string|"'foo-2'"
op|','
string|"'bar2'"
op|','
number|'1'
op|')'
newline|'\n'
name|'d2'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'unittest'
op|'.'
name|'assertEquals'
op|'('
name|'x'
op|','
string|"'data'"
op|')'
op|')'
newline|'\n'
name|'d2'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebSecondGlobal'
op|')'
newline|'\n'
nl|'\n'
name|'d3'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendGlobalRequest'
op|'('
string|"'bar'"
op|','
string|"'foo'"
op|','
number|'1'
op|')'
newline|'\n'
name|'d3'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbThirdGlobal'
op|')'
newline|'\n'
name|'d3'
op|'.'
name|'addErrback'
op|'('
name|'lambda'
name|'x'
op|','
name|'s'
op|'='
name|'self'
op|':'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'subsystem finished'"
op|')'
name|'or'
name|'s'
op|'.'
name|'conn'
op|'.'
name|'addResult'
op|'('
op|')'
name|'or'
name|'s'
op|'.'
name|'loseConnection'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebRealRequestFailed
dedent|''
name|'def'
name|'_ebRealRequestFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'opening crazy subsystem failed: %s'"
op|'%'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebFirstGlobal
dedent|''
name|'def'
name|'_ebFirstGlobal'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'first global request failed: %s'"
op|'%'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebSecondGlobal
dedent|''
name|'def'
name|'_ebSecondGlobal'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'second global request failed: %s'"
op|'%'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbThirdGlobal
dedent|''
name|'def'
name|'_cbThirdGlobal'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'fail'
op|'('
string|"'second global request succeeded'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SSHProtocolTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'SSHProtocolTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'if'
name|'not'
name|'Crypto'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"can\'t run w/o PyCrypto"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'pyasn1'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"can\'t run w/o PyASN1"'
newline|'\n'
nl|'\n'
DECL|member|testOurServerOurClient
dedent|''
name|'def'
name|'testOurServerOurClient'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""test the Conch server against the Conch client\n        """'
newline|'\n'
name|'realm'
op|'='
name|'ConchTestRealm'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'portal'
op|'.'
name|'Portal'
op|'('
name|'realm'
op|')'
newline|'\n'
name|'sshpc'
op|'='
name|'ConchTestSSHChecker'
op|'('
op|')'
newline|'\n'
name|'sshpc'
op|'.'
name|'registerChecker'
op|'('
name|'ConchTestPasswordChecker'
op|'('
op|')'
op|')'
newline|'\n'
name|'sshpc'
op|'.'
name|'registerChecker'
op|'('
name|'ConchTestPublicKeyChecker'
op|'('
op|')'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'registerChecker'
op|'('
name|'sshpc'
op|')'
newline|'\n'
name|'fac'
op|'='
name|'ConchTestServerFactory'
op|'('
op|')'
newline|'\n'
name|'fac'
op|'.'
name|'portal'
op|'='
name|'p'
newline|'\n'
name|'fac'
op|'.'
name|'startFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'='
name|'fac'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clientTransport'
op|'='
name|'LoopbackRelay'
op|'('
name|'self'
op|'.'
name|'server'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'='
name|'ConchTestClient'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serverTransport'
op|'='
name|'LoopbackRelay'
op|'('
name|'self'
op|'.'
name|'client'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'serverTransport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'clientTransport'
op|')'
newline|'\n'
nl|'\n'
name|'while'
name|'self'
op|'.'
name|'serverTransport'
op|'.'
name|'buffer'
name|'or'
name|'self'
op|'.'
name|'clientTransport'
op|'.'
name|'buffer'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'callWithContext'
op|'('
op|'{'
string|"'system'"
op|':'
string|"'serverTransport'"
op|'}'
op|','
nl|'\n'
name|'self'
op|'.'
name|'serverTransport'
op|'.'
name|'clearBuffer'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'callWithContext'
op|'('
op|'{'
string|"'system'"
op|':'
string|"'clientTransport'"
op|'}'
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientTransport'
op|'.'
name|'clearBuffer'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'done'
name|'and'
name|'self'
op|'.'
name|'client'
op|'.'
name|'done'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSSHFactory
dedent|''
dedent|''
name|'class'
name|'TestSSHFactory'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'if'
name|'not'
name|'Crypto'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"can\'t run w/o PyCrypto"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'pyasn1'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"can\'t run w/o PyASN1"'
newline|'\n'
nl|'\n'
DECL|member|makeSSHFactory
dedent|''
name|'def'
name|'makeSSHFactory'
op|'('
name|'self'
op|','
name|'primes'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sshFactory'
op|'='
name|'factory'
op|'.'
name|'SSHFactory'
op|'('
op|')'
newline|'\n'
name|'gpk'
op|'='
name|'lambda'
op|':'
op|'{'
string|"'ssh-rsa'"
op|':'
name|'keys'
op|'.'
name|'Key'
op|'('
name|'None'
op|')'
op|'}'
newline|'\n'
name|'sshFactory'
op|'.'
name|'getPrimes'
op|'='
name|'lambda'
op|':'
name|'primes'
newline|'\n'
name|'sshFactory'
op|'.'
name|'getPublicKeys'
op|'='
name|'sshFactory'
op|'.'
name|'getPrivateKeys'
op|'='
name|'gpk'
newline|'\n'
name|'sshFactory'
op|'.'
name|'startFactory'
op|'('
op|')'
newline|'\n'
name|'return'
name|'sshFactory'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildProtocol
dedent|''
name|'def'
name|'test_buildProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        By default, buildProtocol() constructs an instance of\n        SSHServerTransport.\n        """'
newline|'\n'
name|'factory'
op|'='
name|'self'
op|'.'
name|'makeSSHFactory'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'protocol'
op|','
name|'transport'
op|'.'
name|'SSHServerTransport'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildProtocolRespectsProtocol
dedent|''
name|'def'
name|'test_buildProtocolRespectsProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        buildProtocol() calls \'self.protocol()\' to construct a protocol\n        instance.\n        """'
newline|'\n'
name|'calls'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|makeProtocol
name|'def'
name|'makeProtocol'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'calls'
op|'.'
name|'append'
op|'('
name|'args'
op|')'
newline|'\n'
name|'return'
name|'transport'
op|'.'
name|'SSHServerTransport'
op|'('
op|')'
newline|'\n'
dedent|''
name|'factory'
op|'='
name|'self'
op|'.'
name|'makeSSHFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'protocol'
op|'='
name|'makeProtocol'
newline|'\n'
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'('
op|')'
op|']'
op|','
name|'calls'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleFactories
dedent|''
name|'def'
name|'test_multipleFactories'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f1'
op|'='
name|'self'
op|'.'
name|'makeSSHFactory'
op|'('
name|'primes'
op|'='
name|'None'
op|')'
newline|'\n'
name|'f2'
op|'='
name|'self'
op|'.'
name|'makeSSHFactory'
op|'('
name|'primes'
op|'='
op|'{'
number|'1'
op|':'
op|'('
number|'2'
op|','
number|'3'
op|')'
op|'}'
op|')'
newline|'\n'
name|'p1'
op|'='
name|'f1'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'p2'
op|'='
name|'f2'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
string|"'diffie-hellman-group-exchange-sha1'"
name|'in'
name|'p1'
op|'.'
name|'supportedKeyExchanges'
op|','
nl|'\n'
name|'p1'
op|'.'
name|'supportedKeyExchanges'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
string|"'diffie-hellman-group-exchange-sha1'"
name|'in'
name|'p2'
op|'.'
name|'supportedKeyExchanges'
op|','
nl|'\n'
name|'p2'
op|'.'
name|'supportedKeyExchanges'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|EntropyTestCase
dedent|''
dedent|''
name|'class'
name|'EntropyTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{common.entropy}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_deprecation
name|'def'
name|'test_deprecation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the deprecation of L{common.entropy.get_bytes}.\n        """'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'common'
op|'.'
name|'entropy'
op|'.'
name|'get_bytes'
op|'('
number|'10'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"entropy.get_bytes is deprecated, please use "'
nl|'\n'
string|'"twisted.python.randbytes.secureRandom instead."'
op|','
nl|'\n'
name|'__file__'
op|','
name|'wrapper'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MPTestCase
dedent|''
dedent|''
name|'class'
name|'MPTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{common.getMP}.\n\n    @cvar getMP: a method providing a MP parser.\n    @type getMP: C{callable}\n    """'
newline|'\n'
DECL|variable|getMP
name|'getMP'
op|'='
name|'staticmethod'
op|'('
name|'common'
op|'.'
name|'getMP'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'Crypto'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"can\'t run w/o PyCrypto"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'pyasn1'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"can\'t run w/o PyASN1"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getMP
dedent|''
name|'def'
name|'test_getMP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{common.getMP} should parse the a multiple precision integer from a\n        string: a 4-byte length followed by length bytes of the integer.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getMP'
op|'('
string|"'\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x01'"
op|')'
op|','
nl|'\n'
op|'('
number|'1'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getMPBigInteger
dedent|''
name|'def'
name|'test_getMPBigInteger'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{common.getMP} should be able to parse a big enough integer\n        (that doesn\'t fit on one byte).\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getMP'
op|'('
string|"'\\x00\\x00\\x00\\x04\\x01\\x02\\x03\\x04'"
op|')'
op|','
nl|'\n'
op|'('
number|'16909060'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleGetMP
dedent|''
name|'def'
name|'test_multipleGetMP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{common.getMP} has the ability to parse multiple integer in the same\n        string.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getMP'
op|'('
string|"'\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x01'"
nl|'\n'
string|"'\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x02'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
op|'('
number|'1'
op|','
number|'2'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getMPRemainingData
dedent|''
name|'def'
name|'test_getMPRemainingData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When more data than needed is sent to L{common.getMP}, it should return\n        the remaining data.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getMP'
op|'('
string|"'\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x01foo'"
op|')'
op|','
nl|'\n'
op|'('
number|'1'
op|','
string|"'foo'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_notEnoughData
dedent|''
name|'def'
name|'test_notEnoughData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When the string passed to L{common.getMP} doesn\'t even make 5 bytes,\n        it should raise a L{struct.error}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'struct'
op|'.'
name|'error'
op|','
name|'self'
op|'.'
name|'getMP'
op|','
string|"'\\x02\\x00'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PyMPTestCase
dedent|''
dedent|''
name|'class'
name|'PyMPTestCase'
op|'('
name|'MPTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the python implementation of L{common.getMP}.\n    """'
newline|'\n'
DECL|variable|getMP
name|'getMP'
op|'='
name|'staticmethod'
op|'('
name|'common'
op|'.'
name|'getMP_py'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|GMPYMPTestCase
dedent|''
name|'class'
name|'GMPYMPTestCase'
op|'('
name|'MPTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the gmpy implementation of L{common.getMP}.\n    """'
newline|'\n'
DECL|variable|getMP
name|'getMP'
op|'='
name|'staticmethod'
op|'('
name|'common'
op|'.'
name|'_fastgetMP'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'gmpy'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'GMPYMPTestCase'
op|'.'
name|'skip'
op|'='
string|'"gmpy not available"'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.conch.openssh_compat}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'Crypto'
op|'.'
name|'Cipher'
op|'.'
name|'DES3'
newline|'\n'
name|'import'
name|'pyasn1'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|OpenSSHFactory
indent|'    '
name|'OpenSSHFactory'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'openssh_compat'
op|'.'
name|'factory'
name|'import'
name|'OpenSSHFactory'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
name|'import'
name|'keydata'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'test_process'
name|'import'
name|'MockOS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|OpenSSHFactoryTests
name|'class'
name|'OpenSSHFactoryTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{OpenSSHFactory}.\n    """'
newline|'\n'
name|'if'
name|'getattr'
op|'('
name|'os'
op|','
string|'"geteuid"'
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"geteuid/seteuid not available"'
newline|'\n'
dedent|''
name|'elif'
name|'OpenSSHFactory'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"Cannot run without PyCrypto or PyASN1"'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'='
name|'OpenSSHFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'keysDir'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'keysDir'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'dataRoot'
op|'='
name|'self'
op|'.'
name|'keysDir'
op|'.'
name|'path'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'keysDir'
op|'.'
name|'child'
op|'('
string|'"ssh_host_foo"'
op|')'
op|'.'
name|'setContent'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'keysDir'
op|'.'
name|'child'
op|'('
string|'"bar_key"'
op|')'
op|'.'
name|'setContent'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'keysDir'
op|'.'
name|'child'
op|'('
string|'"ssh_host_one_key"'
op|')'
op|'.'
name|'setContent'
op|'('
nl|'\n'
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'keysDir'
op|'.'
name|'child'
op|'('
string|'"ssh_host_two_key"'
op|')'
op|'.'
name|'setContent'
op|'('
nl|'\n'
name|'keydata'
op|'.'
name|'privateDSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'keysDir'
op|'.'
name|'child'
op|'('
string|'"ssh_host_three_key"'
op|')'
op|'.'
name|'setContent'
op|'('
nl|'\n'
string|'"not a key content"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'keysDir'
op|'.'
name|'child'
op|'('
string|'"ssh_host_one_key.pub"'
op|')'
op|'.'
name|'setContent'
op|'('
nl|'\n'
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mockos'
op|'='
name|'MockOS'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'os'
op|','
string|'"seteuid"'
op|','
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'seteuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'os'
op|','
string|'"setegid"'
op|','
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'setegid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPublicKeys
dedent|''
name|'def'
name|'test_getPublicKeys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{OpenSSHFactory.getPublicKeys} should return the available public keys\n        in the data directory\n        """'
newline|'\n'
name|'keys'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'getPublicKeys'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'keys'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'keyTypes'
op|'='
name|'keys'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'keyTypes'
op|','
op|'['
string|"'ssh-rsa'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPrivateKeys
dedent|''
name|'def'
name|'test_getPrivateKeys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{OpenSSHFactory.getPrivateKeys} should return the available private\n        keys in the data directory.\n        """'
newline|'\n'
name|'keys'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'getPrivateKeys'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'keys'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'keyTypes'
op|'='
name|'keys'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'keyTypes'
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'ssh-rsa'"
op|','
string|"'ssh-dss'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'seteuidCalls'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'setegidCalls'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPrivateKeysAsRoot
dedent|''
name|'def'
name|'test_getPrivateKeysAsRoot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{OpenSSHFactory.getPrivateKeys} should switch to root if the keys\n        aren\'t readable by the current user.\n        """'
newline|'\n'
name|'keyFile'
op|'='
name|'self'
op|'.'
name|'keysDir'
op|'.'
name|'child'
op|'('
string|'"ssh_host_two_key"'
op|')'
newline|'\n'
comment|'# Fake permission error by changing the mode'
nl|'\n'
name|'keyFile'
op|'.'
name|'chmod'
op|'('
number|'0000'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'keyFile'
op|'.'
name|'chmod'
op|','
number|'0777'
op|')'
newline|'\n'
comment|'# And restore the right mode when seteuid is called'
nl|'\n'
name|'savedSeteuid'
op|'='
name|'os'
op|'.'
name|'seteuid'
newline|'\n'
DECL|function|seteuid
name|'def'
name|'seteuid'
op|'('
name|'euid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'keyFile'
op|'.'
name|'chmod'
op|'('
number|'0777'
op|')'
newline|'\n'
name|'return'
name|'savedSeteuid'
op|'('
name|'euid'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'os'
op|','
string|'"seteuid"'
op|','
name|'seteuid'
op|')'
newline|'\n'
name|'keys'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'getPrivateKeys'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'keys'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'keyTypes'
op|'='
name|'keys'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'keyTypes'
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'ssh-rsa'"
op|','
string|"'ssh-dss'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'seteuidCalls'
op|','
op|'['
number|'0'
op|','
name|'os'
op|'.'
name|'geteuid'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'setegidCalls'
op|','
op|'['
number|'0'
op|','
name|'os'
op|'.'
name|'getegid'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

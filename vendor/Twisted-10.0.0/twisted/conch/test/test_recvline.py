begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_recvline -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.conch.recvline} and fixtures for testing related\nfunctionality.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'insults'
name|'import'
name|'insults'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
name|'import'
name|'recvline'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'reflect'
op|','
name|'components'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'portal'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'StringTransport'
newline|'\n'
nl|'\n'
DECL|class|Arrows
name|'class'
name|'Arrows'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'underlyingTransport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pt'
op|'='
name|'insults'
op|'.'
name|'ServerProtocol'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'='
name|'recvline'
op|'.'
name|'HistoricRecvLine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pt'
op|'.'
name|'protocolFactory'
op|'='
name|'lambda'
op|':'
name|'self'
op|'.'
name|'p'
newline|'\n'
name|'self'
op|'.'
name|'pt'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'pt'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'underlyingTransport'
op|')'
newline|'\n'
comment|'# self.p.makeConnection(self.pt)'
nl|'\n'
nl|'\n'
DECL|member|testPrintableCharacters
dedent|''
name|'def'
name|'testPrintableCharacters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'p'
op|'.'
name|'keystrokeReceived'
op|'('
string|"'x'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'keystrokeReceived'
op|'('
string|"'y'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'keystrokeReceived'
op|'('
string|"'z'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xyz'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testHorizontalArrows
dedent|''
name|'def'
name|'testHorizontalArrows'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kR'
op|'='
name|'lambda'
name|'ch'
op|':'
name|'self'
op|'.'
name|'p'
op|'.'
name|'keystrokeReceived'
op|'('
name|'ch'
op|','
name|'None'
op|')'
newline|'\n'
name|'for'
name|'ch'
name|'in'
string|"'xyz'"
op|':'
newline|'\n'
indent|'            '
name|'kR'
op|'('
name|'ch'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xyz'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'RIGHT_ARROW'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xyz'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'LEFT_ARROW'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xy'"
op|','
string|"'z'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'LEFT_ARROW'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'x'"
op|','
string|"'yz'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'LEFT_ARROW'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"''"
op|','
string|"'xyz'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'LEFT_ARROW'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"''"
op|','
string|"'xyz'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'RIGHT_ARROW'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'x'"
op|','
string|"'yz'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'RIGHT_ARROW'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xy'"
op|','
string|"'z'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'RIGHT_ARROW'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xyz'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'RIGHT_ARROW'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xyz'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNewline
dedent|''
name|'def'
name|'testNewline'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kR'
op|'='
name|'lambda'
name|'ch'
op|':'
name|'self'
op|'.'
name|'p'
op|'.'
name|'keystrokeReceived'
op|'('
name|'ch'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'ch'
name|'in'
string|"'xyz\\nabc\\n123\\n'"
op|':'
newline|'\n'
indent|'            '
name|'kR'
op|'('
name|'ch'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentHistoryBuffer'
op|'('
op|')'
op|','
nl|'\n'
op|'('
op|'('
string|"'xyz'"
op|','
string|"'abc'"
op|','
string|"'123'"
op|')'
op|','
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
string|"'c'"
op|')'
newline|'\n'
name|'kR'
op|'('
string|"'b'"
op|')'
newline|'\n'
name|'kR'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentHistoryBuffer'
op|'('
op|')'
op|','
nl|'\n'
op|'('
op|'('
string|"'xyz'"
op|','
string|"'abc'"
op|','
string|"'123'"
op|')'
op|','
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentHistoryBuffer'
op|'('
op|')'
op|','
nl|'\n'
op|'('
op|'('
string|"'xyz'"
op|','
string|"'abc'"
op|','
string|"'123'"
op|','
string|"'cba'"
op|')'
op|','
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testVerticalArrows
dedent|''
name|'def'
name|'testVerticalArrows'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kR'
op|'='
name|'lambda'
name|'ch'
op|':'
name|'self'
op|'.'
name|'p'
op|'.'
name|'keystrokeReceived'
op|'('
name|'ch'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'ch'
name|'in'
string|"'xyz\\nabc\\n123\\n'"
op|':'
newline|'\n'
indent|'            '
name|'kR'
op|'('
name|'ch'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentHistoryBuffer'
op|'('
op|')'
op|','
nl|'\n'
op|'('
op|'('
string|"'xyz'"
op|','
string|"'abc'"
op|','
string|"'123'"
op|')'
op|','
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"''"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'UP_ARROW'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentHistoryBuffer'
op|'('
op|')'
op|','
nl|'\n'
op|'('
op|'('
string|"'xyz'"
op|','
string|"'abc'"
op|')'
op|','
op|'('
string|"'123'"
op|','
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'123'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'UP_ARROW'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentHistoryBuffer'
op|'('
op|')'
op|','
nl|'\n'
op|'('
op|'('
string|"'xyz'"
op|','
op|')'
op|','
op|'('
string|"'abc'"
op|','
string|"'123'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'abc'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'UP_ARROW'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentHistoryBuffer'
op|'('
op|')'
op|','
nl|'\n'
op|'('
op|'('
op|')'
op|','
op|'('
string|"'xyz'"
op|','
string|"'abc'"
op|','
string|"'123'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xyz'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'UP_ARROW'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentHistoryBuffer'
op|'('
op|')'
op|','
nl|'\n'
op|'('
op|'('
op|')'
op|','
op|'('
string|"'xyz'"
op|','
string|"'abc'"
op|','
string|"'123'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xyz'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'4'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'DOWN_ARROW'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentHistoryBuffer'
op|'('
op|')'
op|','
nl|'\n'
op|'('
op|'('
string|"'xyz'"
op|','
string|"'abc'"
op|','
string|"'123'"
op|')'
op|','
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testHome
dedent|''
name|'def'
name|'testHome'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kR'
op|'='
name|'lambda'
name|'ch'
op|':'
name|'self'
op|'.'
name|'p'
op|'.'
name|'keystrokeReceived'
op|'('
name|'ch'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'ch'
name|'in'
string|"'hello, world'"
op|':'
newline|'\n'
indent|'            '
name|'kR'
op|'('
name|'ch'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'hello, world'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'HOME'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"''"
op|','
string|"'hello, world'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEnd
dedent|''
name|'def'
name|'testEnd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kR'
op|'='
name|'lambda'
name|'ch'
op|':'
name|'self'
op|'.'
name|'p'
op|'.'
name|'keystrokeReceived'
op|'('
name|'ch'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'ch'
name|'in'
string|"'hello, world'"
op|':'
newline|'\n'
indent|'            '
name|'kR'
op|'('
name|'ch'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'hello, world'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'HOME'
op|')'
newline|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'END'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'hello, world'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testBackspace
dedent|''
name|'def'
name|'testBackspace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kR'
op|'='
name|'lambda'
name|'ch'
op|':'
name|'self'
op|'.'
name|'p'
op|'.'
name|'keystrokeReceived'
op|'('
name|'ch'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'ch'
name|'in'
string|"'xyz'"
op|':'
newline|'\n'
indent|'            '
name|'kR'
op|'('
name|'ch'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xyz'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'BACKSPACE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xy'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'LEFT_ARROW'
op|')'
newline|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'BACKSPACE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"''"
op|','
string|"'y'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'BACKSPACE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"''"
op|','
string|"'y'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDelete
dedent|''
name|'def'
name|'testDelete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kR'
op|'='
name|'lambda'
name|'ch'
op|':'
name|'self'
op|'.'
name|'p'
op|'.'
name|'keystrokeReceived'
op|'('
name|'ch'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'ch'
name|'in'
string|"'xyz'"
op|':'
newline|'\n'
indent|'            '
name|'kR'
op|'('
name|'ch'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xyz'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'DELETE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xyz'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'LEFT_ARROW'
op|')'
newline|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'DELETE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xy'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'LEFT_ARROW'
op|')'
newline|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'DELETE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'x'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'LEFT_ARROW'
op|')'
newline|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'DELETE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"''"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'DELETE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"''"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInsert
dedent|''
name|'def'
name|'testInsert'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kR'
op|'='
name|'lambda'
name|'ch'
op|':'
name|'self'
op|'.'
name|'p'
op|'.'
name|'keystrokeReceived'
op|'('
name|'ch'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'ch'
name|'in'
string|"'xyz'"
op|':'
newline|'\n'
indent|'            '
name|'kR'
op|'('
name|'ch'
op|')'
newline|'\n'
nl|'\n'
comment|'# kR(self.pt.INSERT)'
nl|'\n'
nl|'\n'
dedent|''
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'LEFT_ARROW'
op|')'
newline|'\n'
name|'kR'
op|'('
string|"'A'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xyA'"
op|','
string|"'z'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'LEFT_ARROW'
op|')'
newline|'\n'
name|'kR'
op|'('
string|"'B'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xyB'"
op|','
string|"'Az'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testTypeover
dedent|''
name|'def'
name|'testTypeover'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kR'
op|'='
name|'lambda'
name|'ch'
op|':'
name|'self'
op|'.'
name|'p'
op|'.'
name|'keystrokeReceived'
op|'('
name|'ch'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'ch'
name|'in'
string|"'xyz'"
op|':'
newline|'\n'
indent|'            '
name|'kR'
op|'('
name|'ch'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'INSERT'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'LEFT_ARROW'
op|')'
newline|'\n'
name|'kR'
op|'('
string|"'A'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xyA'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kR'
op|'('
name|'self'
op|'.'
name|'pt'
op|'.'
name|'LEFT_ARROW'
op|')'
newline|'\n'
name|'kR'
op|'('
string|"'B'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'currentLineBuffer'
op|'('
op|')'
op|','
op|'('
string|"'xyB'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'conch'
name|'import'
name|'telnet'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'insults'
name|'import'
name|'helper'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'loopback'
newline|'\n'
nl|'\n'
DECL|class|EchoServer
name|'class'
name|'EchoServer'
op|'('
name|'recvline'
op|'.'
name|'HistoricRecvLine'
op|')'
op|':'
newline|'\n'
DECL|member|lineReceived
indent|'    '
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'terminal'
op|'.'
name|'write'
op|'('
name|'line'
op|'+'
string|"'\\n'"
op|'+'
name|'self'
op|'.'
name|'ps'
op|'['
name|'self'
op|'.'
name|'pn'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# An insults API for this would be nice.'
nl|'\n'
DECL|variable|left
dedent|''
dedent|''
name|'left'
op|'='
string|'"\\x1b[D"'
newline|'\n'
DECL|variable|right
name|'right'
op|'='
string|'"\\x1b[C"'
newline|'\n'
DECL|variable|up
name|'up'
op|'='
string|'"\\x1b[A"'
newline|'\n'
DECL|variable|down
name|'down'
op|'='
string|'"\\x1b[B"'
newline|'\n'
DECL|variable|insert
name|'insert'
op|'='
string|'"\\x1b[2~"'
newline|'\n'
DECL|variable|home
name|'home'
op|'='
string|'"\\x1b[1~"'
newline|'\n'
DECL|variable|delete
name|'delete'
op|'='
string|'"\\x1b[3~"'
newline|'\n'
DECL|variable|end
name|'end'
op|'='
string|'"\\x1b[4~"'
newline|'\n'
DECL|variable|backspace
name|'backspace'
op|'='
string|'"\\x7f"'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'checkers'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
name|'import'
name|'userauth'
op|','
name|'transport'
op|','
name|'channel'
op|','
name|'connection'
op|','
name|'session'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'manhole_ssh'
name|'import'
name|'TerminalUser'
op|','
name|'TerminalSession'
op|','
name|'TerminalRealm'
op|','
name|'TerminalSessionTransport'
op|','
name|'ConchFactory'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|ssh
indent|'    '
name|'ssh'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|ssh
indent|'    '
name|'ssh'
op|'='
name|'True'
newline|'\n'
DECL|class|SessionChannel
name|'class'
name|'SessionChannel'
op|'('
name|'channel'
op|'.'
name|'SSHChannel'
op|')'
op|':'
newline|'\n'
DECL|variable|name
indent|'        '
name|'name'
op|'='
string|"'session'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'protocolFactory'
op|','
name|'protocolArgs'
op|','
name|'protocolKwArgs'
op|','
name|'width'
op|','
name|'height'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'channel'
op|'.'
name|'SSHChannel'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'protocolFactory'
op|'='
name|'protocolFactory'
newline|'\n'
name|'self'
op|'.'
name|'protocolArgs'
op|'='
name|'protocolArgs'
newline|'\n'
name|'self'
op|'.'
name|'protocolKwArgs'
op|'='
name|'protocolKwArgs'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'width'
op|'='
name|'width'
newline|'\n'
name|'self'
op|'.'
name|'height'
op|'='
name|'height'
newline|'\n'
nl|'\n'
DECL|member|channelOpen
dedent|''
name|'def'
name|'channelOpen'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'term'
op|'='
name|'session'
op|'.'
name|'packRequest_pty_req'
op|'('
string|'"vt102"'
op|','
op|'('
name|'self'
op|'.'
name|'height'
op|','
name|'self'
op|'.'
name|'width'
op|','
number|'0'
op|','
number|'0'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendRequest'
op|'('
name|'self'
op|','
string|"'pty-req'"
op|','
name|'term'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendRequest'
op|'('
name|'self'
op|','
string|"'shell'"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_protocolInstance'
op|'='
name|'self'
op|'.'
name|'protocolFactory'
op|'('
op|'*'
name|'self'
op|'.'
name|'protocolArgs'
op|','
op|'**'
name|'self'
op|'.'
name|'protocolKwArgs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_protocolInstance'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'_protocolInstance'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|closed
dedent|''
name|'def'
name|'closed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_protocolInstance'
op|'.'
name|'connectionLost'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_protocolInstance'
op|'.'
name|'dataReceived'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestConnection
dedent|''
dedent|''
name|'class'
name|'TestConnection'
op|'('
name|'connection'
op|'.'
name|'SSHConnection'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'        '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'protocolFactory'
op|','
name|'protocolArgs'
op|','
name|'protocolKwArgs'
op|','
name|'width'
op|','
name|'height'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'connection'
op|'.'
name|'SSHConnection'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'protocolFactory'
op|'='
name|'protocolFactory'
newline|'\n'
name|'self'
op|'.'
name|'protocolArgs'
op|'='
name|'protocolArgs'
newline|'\n'
name|'self'
op|'.'
name|'protocolKwArgs'
op|'='
name|'protocolKwArgs'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'width'
op|'='
name|'width'
newline|'\n'
name|'self'
op|'.'
name|'height'
op|'='
name|'height'
newline|'\n'
nl|'\n'
DECL|member|serviceStarted
dedent|''
name|'def'
name|'serviceStarted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__channel'
op|'='
name|'SessionChannel'
op|'('
name|'self'
op|'.'
name|'protocolFactory'
op|','
name|'self'
op|'.'
name|'protocolArgs'
op|','
name|'self'
op|'.'
name|'protocolKwArgs'
op|','
name|'self'
op|'.'
name|'width'
op|','
name|'self'
op|'.'
name|'height'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'openChannel'
op|'('
name|'self'
op|'.'
name|'__channel'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'__channel'
op|'.'
name|'write'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestAuth
dedent|''
dedent|''
name|'class'
name|'TestAuth'
op|'('
name|'userauth'
op|'.'
name|'SSHUserAuthClient'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'        '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'password'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'userauth'
op|'.'
name|'SSHUserAuthClient'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'username'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'password'
op|'='
name|'password'
newline|'\n'
nl|'\n'
DECL|member|getPassword
dedent|''
name|'def'
name|'getPassword'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'self'
op|'.'
name|'password'
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestTransport
dedent|''
dedent|''
name|'class'
name|'TestTransport'
op|'('
name|'transport'
op|'.'
name|'SSHClientTransport'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'        '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'protocolFactory'
op|','
name|'protocolArgs'
op|','
name|'protocolKwArgs'
op|','
name|'username'
op|','
name|'password'
op|','
name|'width'
op|','
name|'height'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
comment|'# transport.SSHClientTransport.__init__(self, *a, **kw)'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'protocolFactory'
op|'='
name|'protocolFactory'
newline|'\n'
name|'self'
op|'.'
name|'protocolArgs'
op|'='
name|'protocolArgs'
newline|'\n'
name|'self'
op|'.'
name|'protocolKwArgs'
op|'='
name|'protocolKwArgs'
newline|'\n'
name|'self'
op|'.'
name|'username'
op|'='
name|'username'
newline|'\n'
name|'self'
op|'.'
name|'password'
op|'='
name|'password'
newline|'\n'
name|'self'
op|'.'
name|'width'
op|'='
name|'width'
newline|'\n'
name|'self'
op|'.'
name|'height'
op|'='
name|'height'
newline|'\n'
nl|'\n'
DECL|member|verifyHostKey
dedent|''
name|'def'
name|'verifyHostKey'
op|'('
name|'self'
op|','
name|'hostKey'
op|','
name|'fingerprint'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionSecure
dedent|''
name|'def'
name|'connectionSecure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__connection'
op|'='
name|'TestConnection'
op|'('
name|'self'
op|'.'
name|'protocolFactory'
op|','
name|'self'
op|'.'
name|'protocolArgs'
op|','
name|'self'
op|'.'
name|'protocolKwArgs'
op|','
name|'self'
op|'.'
name|'width'
op|','
name|'self'
op|'.'
name|'height'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'requestService'
op|'('
nl|'\n'
name|'TestAuth'
op|'('
name|'self'
op|'.'
name|'username'
op|','
name|'self'
op|'.'
name|'password'
op|','
name|'self'
op|'.'
name|'__connection'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'__connection'
op|'.'
name|'write'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestSessionTransport
dedent|''
dedent|''
name|'class'
name|'TestSessionTransport'
op|'('
name|'TerminalSessionTransport'
op|')'
op|':'
newline|'\n'
DECL|member|protocolFactory
indent|'        '
name|'def'
name|'protocolFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'avatar'
op|'.'
name|'conn'
op|'.'
name|'transport'
op|'.'
name|'factory'
op|'.'
name|'serverProtocol'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestSession
dedent|''
dedent|''
name|'class'
name|'TestSession'
op|'('
name|'TerminalSession'
op|')'
op|':'
newline|'\n'
DECL|variable|transportFactory
indent|'        '
name|'transportFactory'
op|'='
name|'TestSessionTransport'
newline|'\n'
nl|'\n'
DECL|class|TestUser
dedent|''
name|'class'
name|'TestUser'
op|'('
name|'TerminalUser'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'components'
op|'.'
name|'registerAdapter'
op|'('
name|'TestSession'
op|','
name|'TestUser'
op|','
name|'session'
op|'.'
name|'ISession'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoopbackRelay
dedent|''
name|'class'
name|'LoopbackRelay'
op|'('
name|'loopback'
op|'.'
name|'LoopbackRelay'
op|')'
op|':'
newline|'\n'
DECL|variable|clearCall
indent|'    '
name|'clearCall'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|logPrefix
name|'def'
name|'logPrefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"LoopbackRelay(%r)"'
op|'%'
op|'('
name|'self'
op|'.'
name|'target'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'loopback'
op|'.'
name|'LoopbackRelay'
op|'.'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'clearCall'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'clearCall'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'self'
op|'.'
name|'clearCall'
op|'='
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'_clearBuffer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_clearBuffer
dedent|''
name|'def'
name|'_clearBuffer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'clearCall'
op|'='
name|'None'
newline|'\n'
name|'loopback'
op|'.'
name|'LoopbackRelay'
op|'.'
name|'clearBuffer'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NotifyingExpectableBuffer
dedent|''
dedent|''
name|'class'
name|'NotifyingExpectableBuffer'
op|'('
name|'helper'
op|'.'
name|'ExpectableBuffer'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'onConnection'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'onDisconnection'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'helper'
op|'.'
name|'ExpectableBuffer'
op|'.'
name|'connectionMade'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'onConnection'
op|'.'
name|'callback'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'onDisconnection'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_BaseMixin
dedent|''
dedent|''
name|'class'
name|'_BaseMixin'
op|':'
newline|'\n'
DECL|variable|WIDTH
indent|'    '
name|'WIDTH'
op|'='
number|'80'
newline|'\n'
DECL|variable|HEIGHT
name|'HEIGHT'
op|'='
number|'24'
newline|'\n'
nl|'\n'
DECL|member|_assertBuffer
name|'def'
name|'_assertBuffer'
op|'('
name|'self'
op|','
name|'lines'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'receivedLines'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'recvlineClient'
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
name|'expectedLines'
op|'='
name|'lines'
op|'+'
op|'('
op|'['
string|"''"
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'HEIGHT'
op|'-'
name|'len'
op|'('
name|'lines'
op|')'
op|'-'
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'receivedLines'
op|')'
op|','
name|'len'
op|'('
name|'expectedLines'
op|')'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'receivedLines'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'receivedLines'
op|'['
name|'i'
op|']'
op|','
name|'expectedLines'
op|'['
name|'i'
op|']'
op|','
nl|'\n'
name|'str'
op|'('
name|'receivedLines'
op|'['
name|'max'
op|'('
number|'0'
op|','
name|'i'
op|'-'
number|'1'
op|')'
op|':'
name|'i'
op|'+'
number|'1'
op|']'
op|')'
op|'+'
nl|'\n'
string|'" != "'
op|'+'
nl|'\n'
name|'str'
op|'('
name|'expectedLines'
op|'['
name|'max'
op|'('
number|'0'
op|','
name|'i'
op|'-'
number|'1'
op|')'
op|':'
name|'i'
op|'+'
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_trivialTest
dedent|''
dedent|''
name|'def'
name|'_trivialTest'
op|'('
name|'self'
op|','
name|'input'
op|','
name|'output'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'done'
op|'='
name|'self'
op|'.'
name|'recvlineClient'
op|'.'
name|'expect'
op|'('
string|'"done"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_testwrite'
op|'('
name|'input'
op|')'
newline|'\n'
nl|'\n'
DECL|function|finished
name|'def'
name|'finished'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_assertBuffer'
op|'('
name|'output'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'done'
op|'.'
name|'addCallback'
op|'('
name|'finished'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_SSHMixin
dedent|''
dedent|''
name|'class'
name|'_SSHMixin'
op|'('
name|'_BaseMixin'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'ssh'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'unittest'
op|'.'
name|'SkipTest'
op|'('
string|'"Crypto requirements missing, can\'t run historic recvline tests over ssh"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'u'
op|','
name|'p'
op|'='
string|"'testuser'"
op|','
string|"'testpass'"
newline|'\n'
name|'rlm'
op|'='
name|'TerminalRealm'
op|'('
op|')'
newline|'\n'
name|'rlm'
op|'.'
name|'userFactory'
op|'='
name|'TestUser'
newline|'\n'
name|'rlm'
op|'.'
name|'chainedProtocolFactory'
op|'='
name|'lambda'
op|':'
name|'insultsServer'
newline|'\n'
nl|'\n'
name|'ptl'
op|'='
name|'portal'
op|'.'
name|'Portal'
op|'('
nl|'\n'
name|'rlm'
op|','
nl|'\n'
op|'['
name|'checkers'
op|'.'
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
op|'**'
op|'{'
name|'u'
op|':'
name|'p'
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
name|'sshFactory'
op|'='
name|'ConchFactory'
op|'('
name|'ptl'
op|')'
newline|'\n'
name|'sshFactory'
op|'.'
name|'serverProtocol'
op|'='
name|'self'
op|'.'
name|'serverProtocol'
newline|'\n'
name|'sshFactory'
op|'.'
name|'startFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'recvlineServer'
op|'='
name|'self'
op|'.'
name|'serverProtocol'
op|'('
op|')'
newline|'\n'
name|'insultsServer'
op|'='
name|'insults'
op|'.'
name|'ServerProtocol'
op|'('
name|'lambda'
op|':'
name|'recvlineServer'
op|')'
newline|'\n'
name|'sshServer'
op|'='
name|'sshFactory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'clientTransport'
op|'='
name|'LoopbackRelay'
op|'('
name|'sshServer'
op|')'
newline|'\n'
nl|'\n'
name|'recvlineClient'
op|'='
name|'NotifyingExpectableBuffer'
op|'('
op|')'
newline|'\n'
name|'insultsClient'
op|'='
name|'insults'
op|'.'
name|'ClientProtocol'
op|'('
name|'lambda'
op|':'
name|'recvlineClient'
op|')'
newline|'\n'
name|'sshClient'
op|'='
name|'TestTransport'
op|'('
name|'lambda'
op|':'
name|'insultsClient'
op|','
op|'('
op|')'
op|','
op|'{'
op|'}'
op|','
name|'u'
op|','
name|'p'
op|','
name|'self'
op|'.'
name|'WIDTH'
op|','
name|'self'
op|'.'
name|'HEIGHT'
op|')'
newline|'\n'
name|'serverTransport'
op|'='
name|'LoopbackRelay'
op|'('
name|'sshClient'
op|')'
newline|'\n'
nl|'\n'
name|'sshClient'
op|'.'
name|'makeConnection'
op|'('
name|'clientTransport'
op|')'
newline|'\n'
name|'sshServer'
op|'.'
name|'makeConnection'
op|'('
name|'serverTransport'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'recvlineClient'
op|'='
name|'recvlineClient'
newline|'\n'
name|'self'
op|'.'
name|'sshClient'
op|'='
name|'sshClient'
newline|'\n'
name|'self'
op|'.'
name|'sshServer'
op|'='
name|'sshServer'
newline|'\n'
name|'self'
op|'.'
name|'clientTransport'
op|'='
name|'clientTransport'
newline|'\n'
name|'self'
op|'.'
name|'serverTransport'
op|'='
name|'serverTransport'
newline|'\n'
nl|'\n'
name|'return'
name|'recvlineClient'
op|'.'
name|'onConnection'
newline|'\n'
nl|'\n'
DECL|member|_testwrite
dedent|''
name|'def'
name|'_testwrite'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sshClient'
op|'.'
name|'write'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
name|'import'
name|'test_telnet'
newline|'\n'
nl|'\n'
name|'class'
name|'TestInsultsClientProtocol'
op|'('
name|'insults'
op|'.'
name|'ClientProtocol'
op|','
nl|'\n'
DECL|class|TestInsultsClientProtocol
name|'test_telnet'
op|'.'
name|'TestProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'class'
name|'TestInsultsServerProtocol'
op|'('
name|'insults'
op|'.'
name|'ServerProtocol'
op|','
nl|'\n'
DECL|class|TestInsultsServerProtocol
name|'test_telnet'
op|'.'
name|'TestProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|_TelnetMixin
dedent|''
name|'class'
name|'_TelnetMixin'
op|'('
name|'_BaseMixin'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'recvlineServer'
op|'='
name|'self'
op|'.'
name|'serverProtocol'
op|'('
op|')'
newline|'\n'
name|'insultsServer'
op|'='
name|'TestInsultsServerProtocol'
op|'('
name|'lambda'
op|':'
name|'recvlineServer'
op|')'
newline|'\n'
name|'telnetServer'
op|'='
name|'telnet'
op|'.'
name|'TelnetTransport'
op|'('
name|'lambda'
op|':'
name|'insultsServer'
op|')'
newline|'\n'
name|'clientTransport'
op|'='
name|'LoopbackRelay'
op|'('
name|'telnetServer'
op|')'
newline|'\n'
nl|'\n'
name|'recvlineClient'
op|'='
name|'NotifyingExpectableBuffer'
op|'('
op|')'
newline|'\n'
name|'insultsClient'
op|'='
name|'TestInsultsClientProtocol'
op|'('
name|'lambda'
op|':'
name|'recvlineClient'
op|')'
newline|'\n'
name|'telnetClient'
op|'='
name|'telnet'
op|'.'
name|'TelnetTransport'
op|'('
name|'lambda'
op|':'
name|'insultsClient'
op|')'
newline|'\n'
name|'serverTransport'
op|'='
name|'LoopbackRelay'
op|'('
name|'telnetClient'
op|')'
newline|'\n'
nl|'\n'
name|'telnetClient'
op|'.'
name|'makeConnection'
op|'('
name|'clientTransport'
op|')'
newline|'\n'
name|'telnetServer'
op|'.'
name|'makeConnection'
op|'('
name|'serverTransport'
op|')'
newline|'\n'
nl|'\n'
name|'serverTransport'
op|'.'
name|'clearBuffer'
op|'('
op|')'
newline|'\n'
name|'clientTransport'
op|'.'
name|'clearBuffer'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'recvlineClient'
op|'='
name|'recvlineClient'
newline|'\n'
name|'self'
op|'.'
name|'telnetClient'
op|'='
name|'telnetClient'
newline|'\n'
name|'self'
op|'.'
name|'clientTransport'
op|'='
name|'clientTransport'
newline|'\n'
name|'self'
op|'.'
name|'serverTransport'
op|'='
name|'serverTransport'
newline|'\n'
nl|'\n'
name|'return'
name|'recvlineClient'
op|'.'
name|'onConnection'
newline|'\n'
nl|'\n'
DECL|member|_testwrite
dedent|''
name|'def'
name|'_testwrite'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'telnetClient'
op|'.'
name|'write'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'conch'
name|'import'
name|'stdio'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|stdio
indent|'    '
name|'stdio'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|class|_StdioMixin
dedent|''
name|'class'
name|'_StdioMixin'
op|'('
name|'_BaseMixin'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# A memory-only terminal emulator, into which the server will'
nl|'\n'
comment|'# write things and make other state changes.  What ends up'
nl|'\n'
comment|'# here is basically what a user would have seen on their'
nl|'\n'
comment|'# screen.'
nl|'\n'
indent|'        '
name|'testTerminal'
op|'='
name|'NotifyingExpectableBuffer'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# An insults client protocol which will translate bytes'
nl|'\n'
comment|'# received from the child process into keystroke commands for'
nl|'\n'
comment|'# an ITerminalProtocol.'
nl|'\n'
name|'insultsClient'
op|'='
name|'insults'
op|'.'
name|'ClientProtocol'
op|'('
name|'lambda'
op|':'
name|'testTerminal'
op|')'
newline|'\n'
nl|'\n'
comment|'# A process protocol which will translate stdout and stderr'
nl|'\n'
comment|'# received from the child process to dataReceived calls and'
nl|'\n'
comment|'# error reporting on an insults client protocol.'
nl|'\n'
name|'processClient'
op|'='
name|'stdio'
op|'.'
name|'TerminalProcessProtocol'
op|'('
name|'insultsClient'
op|')'
newline|'\n'
nl|'\n'
comment|'# Run twisted/conch/stdio.py with the name of a class'
nl|'\n'
comment|'# implementing ITerminalProtocol.  This class will be used to'
nl|'\n'
comment|'# handle bytes we send to the child process.'
nl|'\n'
name|'exe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'module'
op|'='
name|'stdio'
op|'.'
name|'__file__'
newline|'\n'
name|'if'
name|'module'
op|'.'
name|'endswith'
op|'('
string|"'.pyc'"
op|')'
name|'or'
name|'module'
op|'.'
name|'endswith'
op|'('
string|"'.pyo'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'module'
op|'='
name|'module'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'args'
op|'='
op|'['
name|'exe'
op|','
name|'module'
op|','
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'serverProtocol'
op|')'
op|']'
newline|'\n'
name|'env'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'env'
op|'['
string|'"PYTHONPATH"'
op|']'
op|'='
name|'os'
op|'.'
name|'pathsep'
op|'.'
name|'join'
op|'('
name|'sys'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'clientTransport'
op|'='
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'processClient'
op|','
name|'exe'
op|','
name|'args'
op|','
nl|'\n'
name|'env'
op|'='
name|'env'
op|','
name|'usePTY'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'recvlineClient'
op|'='
name|'self'
op|'.'
name|'testTerminal'
op|'='
name|'testTerminal'
newline|'\n'
name|'self'
op|'.'
name|'processClient'
op|'='
name|'processClient'
newline|'\n'
name|'self'
op|'.'
name|'clientTransport'
op|'='
name|'clientTransport'
newline|'\n'
nl|'\n'
comment|'# Wait for the process protocol and test terminal to become'
nl|'\n'
comment|'# connected before proceeding.  The former should always'
nl|'\n'
comment|"# happen first, but it doesn't hurt to be safe."
nl|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
name|'filter'
op|'('
name|'None'
op|','
op|'['
nl|'\n'
name|'processClient'
op|'.'
name|'onConnection'
op|','
nl|'\n'
name|'testTerminal'
op|'.'
name|'expect'
op|'('
string|'">>> "'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Kill the child process.  We're done with it."
nl|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'clientTransport'
op|'.'
name|'signalProcess'
op|'('
string|'"KILL"'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'error'
op|'.'
name|'ProcessExitedAlready'
op|','
name|'OSError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
DECL|function|trap
dedent|''
name|'def'
name|'trap'
op|'('
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'failure'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ProcessTerminated'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'failure'
op|'.'
name|'value'
op|'.'
name|'exitCode'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'failure'
op|'.'
name|'value'
op|'.'
name|'status'
op|','
number|'9'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'testTerminal'
op|'.'
name|'onDisconnection'
op|'.'
name|'addErrback'
op|'('
name|'trap'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_testwrite
dedent|''
name|'def'
name|'_testwrite'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'clientTransport'
op|'.'
name|'write'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
DECL|class|RecvlineLoopbackMixin
dedent|''
dedent|''
name|'class'
name|'RecvlineLoopbackMixin'
op|':'
newline|'\n'
DECL|variable|serverProtocol
indent|'    '
name|'serverProtocol'
op|'='
name|'EchoServer'
newline|'\n'
nl|'\n'
DECL|member|testSimple
name|'def'
name|'testSimple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_trivialTest'
op|'('
nl|'\n'
string|'"first line\\ndone"'
op|','
nl|'\n'
op|'['
string|'">>> first line"'
op|','
nl|'\n'
string|'"first line"'
op|','
nl|'\n'
string|'">>> done"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLeftArrow
dedent|''
name|'def'
name|'testLeftArrow'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_trivialTest'
op|'('
nl|'\n'
name|'insert'
op|'+'
string|"'first line'"
op|'+'
name|'left'
op|'*'
number|'4'
op|'+'
string|'"xxxx\\ndone"'
op|','
nl|'\n'
op|'['
string|'">>> first xxxx"'
op|','
nl|'\n'
string|'"first xxxx"'
op|','
nl|'\n'
string|'">>> done"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRightArrow
dedent|''
name|'def'
name|'testRightArrow'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_trivialTest'
op|'('
nl|'\n'
name|'insert'
op|'+'
string|"'right line'"
op|'+'
name|'left'
op|'*'
number|'4'
op|'+'
name|'right'
op|'*'
number|'2'
op|'+'
string|'"xx\\ndone"'
op|','
nl|'\n'
op|'['
string|'">>> right lixx"'
op|','
nl|'\n'
string|'"right lixx"'
op|','
nl|'\n'
string|'">>> done"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testBackspace
dedent|''
name|'def'
name|'testBackspace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_trivialTest'
op|'('
nl|'\n'
string|'"second line"'
op|'+'
name|'backspace'
op|'*'
number|'4'
op|'+'
string|'"xxxx\\ndone"'
op|','
nl|'\n'
op|'['
string|'">>> second xxxx"'
op|','
nl|'\n'
string|'"second xxxx"'
op|','
nl|'\n'
string|'">>> done"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDelete
dedent|''
name|'def'
name|'testDelete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_trivialTest'
op|'('
nl|'\n'
string|'"delete xxxx"'
op|'+'
name|'left'
op|'*'
number|'4'
op|'+'
name|'delete'
op|'*'
number|'4'
op|'+'
string|'"line\\ndone"'
op|','
nl|'\n'
op|'['
string|'">>> delete line"'
op|','
nl|'\n'
string|'"delete line"'
op|','
nl|'\n'
string|'">>> done"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInsert
dedent|''
name|'def'
name|'testInsert'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_trivialTest'
op|'('
nl|'\n'
string|'"third ine"'
op|'+'
name|'left'
op|'*'
number|'3'
op|'+'
string|'"l\\ndone"'
op|','
nl|'\n'
op|'['
string|'">>> third line"'
op|','
nl|'\n'
string|'"third line"'
op|','
nl|'\n'
string|'">>> done"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testTypeover
dedent|''
name|'def'
name|'testTypeover'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_trivialTest'
op|'('
nl|'\n'
string|'"fourth xine"'
op|'+'
name|'left'
op|'*'
number|'4'
op|'+'
name|'insert'
op|'+'
string|'"l\\ndone"'
op|','
nl|'\n'
op|'['
string|'">>> fourth line"'
op|','
nl|'\n'
string|'"fourth line"'
op|','
nl|'\n'
string|'">>> done"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testHome
dedent|''
name|'def'
name|'testHome'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_trivialTest'
op|'('
nl|'\n'
name|'insert'
op|'+'
string|'"blah line"'
op|'+'
name|'home'
op|'+'
string|'"home\\ndone"'
op|','
nl|'\n'
op|'['
string|'">>> home line"'
op|','
nl|'\n'
string|'"home line"'
op|','
nl|'\n'
string|'">>> done"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEnd
dedent|''
name|'def'
name|'testEnd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_trivialTest'
op|'('
nl|'\n'
string|'"end "'
op|'+'
name|'left'
op|'*'
number|'4'
op|'+'
name|'end'
op|'+'
string|'"line\\ndone"'
op|','
nl|'\n'
op|'['
string|'">>> end line"'
op|','
nl|'\n'
string|'"end line"'
op|','
nl|'\n'
string|'">>> done"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|class|RecvlineLoopbackTelnet
dedent|''
dedent|''
name|'class'
name|'RecvlineLoopbackTelnet'
op|'('
name|'_TelnetMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'RecvlineLoopbackMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|RecvlineLoopbackSSH
dedent|''
name|'class'
name|'RecvlineLoopbackSSH'
op|'('
name|'_SSHMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'RecvlineLoopbackMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|RecvlineLoopbackStdio
dedent|''
name|'class'
name|'RecvlineLoopbackStdio'
op|'('
name|'_StdioMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'RecvlineLoopbackMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'stdio'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"Terminal requirements missing, can\'t run recvline tests over stdio"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HistoricRecvlineLoopbackMixin
dedent|''
dedent|''
name|'class'
name|'HistoricRecvlineLoopbackMixin'
op|':'
newline|'\n'
DECL|variable|serverProtocol
indent|'    '
name|'serverProtocol'
op|'='
name|'EchoServer'
newline|'\n'
nl|'\n'
DECL|member|testUpArrow
name|'def'
name|'testUpArrow'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_trivialTest'
op|'('
nl|'\n'
string|'"first line\\n"'
op|'+'
name|'up'
op|'+'
string|'"\\ndone"'
op|','
nl|'\n'
op|'['
string|'">>> first line"'
op|','
nl|'\n'
string|'"first line"'
op|','
nl|'\n'
string|'">>> first line"'
op|','
nl|'\n'
string|'"first line"'
op|','
nl|'\n'
string|'">>> done"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDownArrow
dedent|''
name|'def'
name|'testDownArrow'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_trivialTest'
op|'('
nl|'\n'
string|'"first line\\nsecond line\\n"'
op|'+'
name|'up'
op|'*'
number|'2'
op|'+'
name|'down'
op|'+'
string|'"\\ndone"'
op|','
nl|'\n'
op|'['
string|'">>> first line"'
op|','
nl|'\n'
string|'"first line"'
op|','
nl|'\n'
string|'">>> second line"'
op|','
nl|'\n'
string|'"second line"'
op|','
nl|'\n'
string|'">>> second line"'
op|','
nl|'\n'
string|'"second line"'
op|','
nl|'\n'
string|'">>> done"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|class|HistoricRecvlineLoopbackTelnet
dedent|''
dedent|''
name|'class'
name|'HistoricRecvlineLoopbackTelnet'
op|'('
name|'_TelnetMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'HistoricRecvlineLoopbackMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|HistoricRecvlineLoopbackSSH
dedent|''
name|'class'
name|'HistoricRecvlineLoopbackSSH'
op|'('
name|'_SSHMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'HistoricRecvlineLoopbackMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|HistoricRecvlineLoopbackStdio
dedent|''
name|'class'
name|'HistoricRecvlineLoopbackStdio'
op|'('
name|'_StdioMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'HistoricRecvlineLoopbackMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'stdio'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"Terminal requirements missing, can\'t run historic recvline tests over stdio"'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

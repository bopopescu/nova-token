begin_unit
comment|'# Copyright (c) 2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.conch.ssh.agent}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'struct'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'OpenSSL'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|iosim
indent|'    '
name|'iosim'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'test'
name|'import'
name|'iosim'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'Crypto'
op|'.'
name|'Cipher'
op|'.'
name|'DES3'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|Crypto
indent|'    '
name|'Crypto'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pyasn1'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|pyasn1
indent|'    '
name|'pyasn1'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'Crypto'
name|'and'
name|'pyasn1'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
name|'import'
name|'keys'
op|','
name|'agent'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'keys'
op|'='
name|'agent'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
name|'import'
name|'keydata'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'error'
name|'import'
name|'ConchError'
op|','
name|'MissingKeyStoreError'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StubFactory
name|'class'
name|'StubFactory'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Mock factory that provides the keys attribute required by the\n    SSHAgentServerProtocol\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'keys'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AgentTestBase
dedent|''
dedent|''
name|'class'
name|'AgentTestBase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for SSHAgentServer/Client.\n    """'
newline|'\n'
name|'if'
name|'iosim'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"iosim requires SSL, but SSL is not available"'
newline|'\n'
dedent|''
name|'elif'
name|'agent'
name|'is'
name|'None'
name|'or'
name|'keys'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"Cannot run without PyCrypto or PyASN1"'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# wire up our client <-> server'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|','
name|'self'
op|'.'
name|'server'
op|','
name|'self'
op|'.'
name|'pump'
op|'='
name|'iosim'
op|'.'
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'agent'
op|'.'
name|'SSHAgentServer'
op|','
name|'agent'
op|'.'
name|'SSHAgentClient'
op|')'
newline|'\n'
nl|'\n'
comment|"# the server's end of the protocol is stateful and we store it on the"
nl|'\n'
comment|'# factory, for which we only need a mock'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'='
name|'StubFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# pub/priv keys of each kind'
nl|'\n'
name|'self'
op|'.'
name|'rsaPrivate'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dsaPrivate'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateDSA_openssh'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'rsaPublic'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dsaPublic'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicDSA_openssh'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestServerProtocolContractWithFactory
dedent|''
dedent|''
name|'class'
name|'TestServerProtocolContractWithFactory'
op|'('
name|'AgentTestBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The server protocol is stateful and so uses its factory to track state\n    across requests.  This test asserts that the protocol raises if its factory\n    doesn\'t provide the necessary storage for that state.\n    """'
newline|'\n'
DECL|member|test_factorySuppliesKeyStorageForServerProtocol
name|'def'
name|'test_factorySuppliesKeyStorageForServerProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# need a message to send into the server'
nl|'\n'
indent|'        '
name|'msg'
op|'='
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!LB'"
op|','
number|'1'
op|','
name|'agent'
op|'.'
name|'AGENTC_REQUEST_IDENTITIES'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'__dict__'
op|'['
string|"'keys'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'MissingKeyStoreError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestUnimplementedVersionOneServer
dedent|''
dedent|''
name|'class'
name|'TestUnimplementedVersionOneServer'
op|'('
name|'AgentTestBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for methods with no-op implementations on the server. We need these\n    for clients, such as openssh, that try v1 methods before going to v2.\n\n    Because the client doesn\'t expose these operations with nice method names,\n    we invoke sendRequest directly with an op code.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_agentc_REQUEST_RSA_IDENTITIES
name|'def'
name|'test_agentc_REQUEST_RSA_IDENTITIES'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        assert that we get the correct op code for an RSA identities request\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'sendRequest'
op|'('
name|'agent'
op|'.'
name|'AGENTC_REQUEST_RSA_IDENTITIES'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
DECL|function|_cb
name|'def'
name|'_cb'
op|'('
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'agent'
op|'.'
name|'AGENT_RSA_IDENTITIES_ANSWER'
op|','
name|'ord'
op|'('
name|'packet'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_cb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_agentc_REMOVE_RSA_IDENTITY
dedent|''
name|'def'
name|'test_agentc_REMOVE_RSA_IDENTITY'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        assert that we get the correct op code for an RSA remove identity request\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'sendRequest'
op|'('
name|'agent'
op|'.'
name|'AGENTC_REMOVE_RSA_IDENTITY'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_agentc_REMOVE_ALL_RSA_IDENTITIES
dedent|''
name|'def'
name|'test_agentc_REMOVE_ALL_RSA_IDENTITIES'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        assert that we get the correct op code for an RSA remove all identities\n        request.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'sendRequest'
op|'('
name|'agent'
op|'.'
name|'AGENTC_REMOVE_ALL_RSA_IDENTITIES'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'agent'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
DECL|class|CorruptServer
indent|'    '
name|'class'
name|'CorruptServer'
op|'('
name|'agent'
op|'.'
name|'SSHAgentServer'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A misbehaving server that returns bogus response op codes so that we can\n        verify that our callbacks that deal with these op codes handle such\n        miscreants.\n        """'
newline|'\n'
DECL|member|agentc_REQUEST_IDENTITIES
name|'def'
name|'agentc_REQUEST_IDENTITIES'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendResponse'
op|'('
number|'254'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|agentc_SIGN_REQUEST
dedent|''
name|'def'
name|'agentc_SIGN_REQUEST'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendResponse'
op|'('
number|'254'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestClientWithBrokenServer
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestClientWithBrokenServer'
op|'('
name|'AgentTestBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    verify error handling code in the client using a misbehaving server\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'AgentTestBase'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|','
name|'self'
op|'.'
name|'server'
op|','
name|'self'
op|'.'
name|'pump'
op|'='
name|'iosim'
op|'.'
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'CorruptServer'
op|','
name|'agent'
op|'.'
name|'SSHAgentClient'
op|')'
newline|'\n'
comment|"# the server's end of the protocol is stateful and we store it on the"
nl|'\n'
comment|'# factory, for which we only need a mock'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'='
name|'StubFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_signDataCallbackErrorHandling
dedent|''
name|'def'
name|'test_signDataCallbackErrorHandling'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that L{SSHAgentClient.signData} raises a ConchError\n        if we get a response from the server whose opcode doesn\'t match\n        the protocol for data signing requests.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'signData'
op|'('
name|'self'
op|'.'
name|'rsaPublic'
op|'.'
name|'blob'
op|'('
op|')'
op|','
string|'"John Hancock"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ConchError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requestIdentitiesCallbackErrorHandling
dedent|''
name|'def'
name|'test_requestIdentitiesCallbackErrorHandling'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that L{SSHAgentClient.requestIdentities} raises a ConchError\n        if we get a response from the server whose opcode doesn\'t match\n        the protocol for identity requests.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'requestIdentities'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ConchError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestAgentKeyAddition
dedent|''
dedent|''
name|'class'
name|'TestAgentKeyAddition'
op|'('
name|'AgentTestBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test adding different flavors of keys to an agent.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_addRSAIdentityNoComment
name|'def'
name|'test_addRSAIdentityNoComment'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SSHAgentClient.addIdentity} adds the private key it is called\n        with to the SSH agent server to which it is connected, associating\n        it with the comment it is called with.\n\n        This test asserts that ommitting the comment produces an\n        empty string for the comment on the server.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'addIdentity'
op|'('
name|'self'
op|'.'
name|'rsaPrivate'
op|'.'
name|'privateBlob'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'serverKey'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'keys'
op|'['
name|'self'
op|'.'
name|'rsaPrivate'
op|'.'
name|'blob'
op|'('
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'rsaPrivate'
op|','
name|'serverKey'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|','
name|'serverKey'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addDSAIdentityNoComment
dedent|''
name|'def'
name|'test_addDSAIdentityNoComment'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SSHAgentClient.addIdentity} adds the private key it is called\n        with to the SSH agent server to which it is connected, associating\n        it with the comment it is called with.\n\n        This test asserts that ommitting the comment produces an\n        empty string for the comment on the server.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'addIdentity'
op|'('
name|'self'
op|'.'
name|'dsaPrivate'
op|'.'
name|'privateBlob'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'serverKey'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'keys'
op|'['
name|'self'
op|'.'
name|'dsaPrivate'
op|'.'
name|'blob'
op|'('
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'dsaPrivate'
op|','
name|'serverKey'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|','
name|'serverKey'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addRSAIdentityWithComment
dedent|''
name|'def'
name|'test_addRSAIdentityWithComment'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SSHAgentClient.addIdentity} adds the private key it is called\n        with to the SSH agent server to which it is connected, associating\n        it with the comment it is called with.\n\n        This test asserts that the server receives/stores the comment\n        as sent by the client.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'addIdentity'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'rsaPrivate'
op|'.'
name|'privateBlob'
op|'('
op|')'
op|','
name|'comment'
op|'='
string|"'My special key'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'serverKey'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'keys'
op|'['
name|'self'
op|'.'
name|'rsaPrivate'
op|'.'
name|'blob'
op|'('
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'rsaPrivate'
op|','
name|'serverKey'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'My special key'"
op|','
name|'serverKey'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addDSAIdentityWithComment
dedent|''
name|'def'
name|'test_addDSAIdentityWithComment'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{SSHAgentClient.addIdentity} adds the private key it is called\n        with to the SSH agent server to which it is connected, associating\n        it with the comment it is called with.\n\n        This test asserts that the server receives/stores the comment\n        as sent by the client.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'addIdentity'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'dsaPrivate'
op|'.'
name|'privateBlob'
op|'('
op|')'
op|','
name|'comment'
op|'='
string|"'My special key'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'serverKey'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'keys'
op|'['
name|'self'
op|'.'
name|'dsaPrivate'
op|'.'
name|'blob'
op|'('
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'dsaPrivate'
op|','
name|'serverKey'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'My special key'"
op|','
name|'serverKey'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestAgentClientFailure
dedent|''
dedent|''
name|'class'
name|'TestAgentClientFailure'
op|'('
name|'AgentTestBase'
op|')'
op|':'
newline|'\n'
DECL|member|test_agentFailure
indent|'    '
name|'def'
name|'test_agentFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        verify that the client raises ConchError on AGENT_FAILURE\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'sendRequest'
op|'('
number|'254'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ConchError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestAgentIdentityRequests
dedent|''
dedent|''
name|'class'
name|'TestAgentIdentityRequests'
op|'('
name|'AgentTestBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test operations against a server with identities already loaded.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'AgentTestBase'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'keys'
op|'['
name|'self'
op|'.'
name|'dsaPrivate'
op|'.'
name|'blob'
op|'('
op|')'
op|']'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'dsaPrivate'
op|','
string|"'a comment'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'keys'
op|'['
name|'self'
op|'.'
name|'rsaPrivate'
op|'.'
name|'blob'
op|'('
op|')'
op|']'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'rsaPrivate'
op|','
string|"'another comment'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_signDataRSA
dedent|''
name|'def'
name|'test_signDataRSA'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sign data with an RSA private key and then verify it with the public\n        key.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'signData'
op|'('
name|'self'
op|'.'
name|'rsaPublic'
op|'.'
name|'blob'
op|'('
op|')'
op|','
string|'"John Hancock"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'sig'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
name|'self'
op|'.'
name|'rsaPrivate'
op|'.'
name|'sign'
op|'('
string|'"John Hancock"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'sig'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'rsaPublic'
op|'.'
name|'verify'
op|'('
name|'sig'
op|','
string|'"John Hancock"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_signDataDSA
dedent|''
name|'def'
name|'test_signDataDSA'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sign data with a DSA private key and then verify it with the public\n        key.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'signData'
op|'('
name|'self'
op|'.'
name|'dsaPublic'
op|'.'
name|'blob'
op|'('
op|')'
op|','
string|'"John Hancock"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'sig'
op|')'
op|':'
newline|'\n'
comment|'# Cannot do this b/c DSA uses random numbers when signing'
nl|'\n'
comment|'#   expected = self.dsaPrivate.sign("John Hancock")'
nl|'\n'
comment|'#   self.assertEquals(expected, sig)'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'dsaPublic'
op|'.'
name|'verify'
op|'('
name|'sig'
op|','
string|'"John Hancock"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_signDataRSAErrbackOnUnknownBlob
dedent|''
name|'def'
name|'test_signDataRSAErrbackOnUnknownBlob'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that we get an errback if we try to sign data using a key that\n        wasn\'t added.\n        """'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'keys'
op|'['
name|'self'
op|'.'
name|'rsaPublic'
op|'.'
name|'blob'
op|'('
op|')'
op|']'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'signData'
op|'('
name|'self'
op|'.'
name|'rsaPublic'
op|'.'
name|'blob'
op|'('
op|')'
op|','
string|'"John Hancock"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ConchError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requestIdentities
dedent|''
name|'def'
name|'test_requestIdentities'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that we get all of the keys/comments that we add when we issue a\n        request for all identities.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'requestIdentities'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'keyt'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'expected'
op|'['
name|'self'
op|'.'
name|'dsaPublic'
op|'.'
name|'blob'
op|'('
op|')'
op|']'
op|'='
string|"'a comment'"
newline|'\n'
name|'expected'
op|'['
name|'self'
op|'.'
name|'rsaPublic'
op|'.'
name|'blob'
op|'('
op|')'
op|']'
op|'='
string|"'another comment'"
newline|'\n'
nl|'\n'
name|'received'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'k'
name|'in'
name|'keyt'
op|':'
newline|'\n'
indent|'                '
name|'received'
op|'['
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'k'
op|'['
number|'0'
op|']'
op|','
name|'type'
op|'='
string|"'blob'"
op|')'
op|'.'
name|'blob'
op|'('
op|')'
op|']'
op|'='
name|'k'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|','
name|'received'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestAgentKeyRemoval
dedent|''
dedent|''
name|'class'
name|'TestAgentKeyRemoval'
op|'('
name|'AgentTestBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test support for removing keys in a remote server.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'AgentTestBase'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'keys'
op|'['
name|'self'
op|'.'
name|'dsaPrivate'
op|'.'
name|'blob'
op|'('
op|')'
op|']'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'dsaPrivate'
op|','
string|"'a comment'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'keys'
op|'['
name|'self'
op|'.'
name|'rsaPrivate'
op|'.'
name|'blob'
op|'('
op|')'
op|']'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'rsaPrivate'
op|','
string|"'another comment'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeRSAIdentity
dedent|''
name|'def'
name|'test_removeRSAIdentity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that we can remove an RSA identity.\n        """'
newline|'\n'
comment|'# only need public key for this'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'removeIdentity'
op|'('
name|'self'
op|'.'
name|'rsaPrivate'
op|'.'
name|'blob'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'keys'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'self'
op|'.'
name|'dsaPrivate'
op|'.'
name|'blob'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'keys'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'self'
op|'.'
name|'rsaPrivate'
op|'.'
name|'blob'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'keys'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeDSAIdentity
dedent|''
name|'def'
name|'test_removeDSAIdentity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that we can remove a DSA identity.\n        """'
newline|'\n'
comment|'# only need public key for this'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'removeIdentity'
op|'('
name|'self'
op|'.'
name|'dsaPrivate'
op|'.'
name|'blob'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'keys'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'self'
op|'.'
name|'rsaPrivate'
op|'.'
name|'blob'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'keys'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeAllIdentities
dedent|''
name|'def'
name|'test_removeAllIdentities'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that we can remove all identities.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'removeAllIdentities'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'keys'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

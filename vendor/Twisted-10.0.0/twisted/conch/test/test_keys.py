begin_unit
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.conch.ssh.keys}.\n"""'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'Crypto'
op|'.'
name|'Cipher'
op|'.'
name|'DES3'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
comment|"# we'll have to skip these tests without PyCypto and pyasn1"
nl|'\n'
DECL|variable|Crypto
indent|'    '
name|'Crypto'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pyasn1'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|pyasn1
indent|'    '
name|'pyasn1'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'Crypto'
name|'and'
name|'pyasn1'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
name|'import'
name|'asn1'
op|','
name|'keys'
op|','
name|'common'
op|','
name|'sexpy'
newline|'\n'
nl|'\n'
dedent|''
name|'import'
name|'os'
op|','
name|'base64'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
name|'import'
name|'keydata'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'randbytes'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'hashlib'
name|'import'
name|'sha1'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
DECL|class|SSHKeysHandlingTestCase
name|'class'
name|'SSHKeysHandlingTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    test the handling of reading/signing/verifying with RSA and DSA keys\n    assumed test keys are in test/\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'Crypto'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyCrypto"'
newline|'\n'
dedent|''
name|'if'
name|'pyasn1'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o/ PyASN1"'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'tmpdir'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'privateKeyFile'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|','
string|"'private'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'publicKeyFile'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|','
string|"'public'"
op|')'
newline|'\n'
name|'file'
op|'('
name|'self'
op|'.'
name|'privateKeyFile'
op|','
string|"'wb'"
op|')'
op|'.'
name|'write'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'file'
op|'('
name|'self'
op|'.'
name|'publicKeyFile'
op|','
string|"'wb'"
op|')'
op|'.'
name|'write'
op|'('
string|"'first line\\n'"
op|'+'
nl|'\n'
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readFile
dedent|''
name|'def'
name|'test_readFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that reading a key from a file works as expected.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"getPublicKeyString is deprecated since Twisted Conch 0.9.  "'
nl|'\n'
string|'"Use Key.fromString().blob()."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'getPublicKeyString'
op|','
name|'self'
op|'.'
name|'publicKeyFile'
op|','
number|'1'
op|')'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
op|'.'
name|'blob'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"getPrivateKeyObject is deprecated since Twisted Conch 0.9.  "'
nl|'\n'
string|'"Use Key.fromString()."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'getPrivateKeyObject'
op|','
name|'self'
op|'.'
name|'privateKeyFile'
op|')'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
op|'.'
name|'keyObject'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_DSA
dedent|''
name|'def'
name|'test_DSA'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test DSA keys using both OpenSSH and LSH formats.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testKey'
op|'('
name|'keydata'
op|'.'
name|'publicDSA_openssh'
op|','
name|'keydata'
op|'.'
name|'privateDSA_openssh'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'DSAData'
op|','
string|"'openssh'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testKey'
op|'('
name|'keydata'
op|'.'
name|'publicDSA_lsh'
op|','
name|'keydata'
op|'.'
name|'privateDSA_lsh'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'DSAData'
op|','
string|"'lsh'"
op|')'
newline|'\n'
name|'obj'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"getPrivateKeyObject is "'
nl|'\n'
string|'"deprecated since Twisted Conch 0.9.  Use Key.fromString()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'keys'
op|'.'
name|'getPrivateKeyObject'
op|','
nl|'\n'
name|'data'
op|'='
name|'keydata'
op|'.'
name|'privateDSA_agentv3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testGeneratePrivateKey'
op|'('
name|'obj'
op|','
name|'keydata'
op|'.'
name|'privateDSA_agentv3'
op|','
nl|'\n'
string|"'agentv3'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_RSA
dedent|''
name|'def'
name|'test_RSA'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Same as test_DSA but for RSA keys.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testKey'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|','
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'RSAData'
op|','
string|"'openssh'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testKey'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_lsh'
op|','
name|'keydata'
op|'.'
name|'privateRSA_lsh'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'RSAData'
op|','
string|"'lsh'"
op|')'
newline|'\n'
name|'obj'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"getPrivateKeyObject is "'
nl|'\n'
string|'"deprecated since Twisted Conch 0.9.  Use Key.fromString()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'keys'
op|'.'
name|'getPrivateKeyObject'
op|','
nl|'\n'
name|'data'
op|'='
name|'keydata'
op|'.'
name|'privateRSA_agentv3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testGeneratePrivateKey'
op|'('
name|'obj'
op|','
name|'keydata'
op|'.'
name|'privateRSA_agentv3'
op|','
nl|'\n'
string|"'agentv3'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fingerprint
dedent|''
name|'def'
name|'test_fingerprint'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Key.fingerprint} returns a hex-encoded colon-separated md5 sum of the\n        public key.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
string|"'3d:13:5f:cb:c9:79:8a:93:06:27:65:bc:3d:0b:8f:af'"
op|','
nl|'\n'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
op|'.'
name|'fingerprint'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_testKey
dedent|''
name|'def'
name|'_testKey'
op|'('
name|'self'
op|','
name|'pubStr'
op|','
name|'privStr'
op|','
name|'data'
op|','
name|'keyType'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run each of the key tests with the public/private keypairs.\n\n        @param pubStr: The data for a public key in the format defined by\n            keyType.\n        @param privStr: The data for a private key in the format defined by\n            keyType.\n        @param data: The numerical values encoded in the key.\n        @param keyType: the type of the public and private key data: either\n            "openssh" or "lsh".\n        """'
newline|'\n'
name|'pubBlob'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"getPublicKeyString is "'
nl|'\n'
string|'"deprecated since Twisted Conch 0.9.  "'
nl|'\n'
string|'"Use Key.fromString().blob()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'keys'
op|'.'
name|'getPublicKeyString'
op|','
name|'data'
op|'='
name|'pubStr'
op|')'
newline|'\n'
name|'pubObj'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"getPublicKeyObject is "'
nl|'\n'
string|'"deprecated since Twisted Conch 0.9.  Use Key.fromString()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'keys'
op|'.'
name|'getPublicKeyObject'
op|','
name|'pubBlob'
op|')'
newline|'\n'
name|'privObj'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"getPrivateKeyObject is "'
nl|'\n'
string|'"deprecated since Twisted Conch 0.9.  Use Key.fromString()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'keys'
op|'.'
name|'getPrivateKeyObject'
op|','
name|'data'
op|'='
name|'privStr'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_testKeySignVerify'
op|'('
name|'privObj'
op|','
name|'pubObj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testKeyFromString'
op|'('
name|'privObj'
op|','
name|'pubObj'
op|','
name|'data'
op|','
name|'keyType'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testGeneratePublicKey'
op|'('
name|'privObj'
op|','
name|'pubObj'
op|','
name|'pubStr'
op|','
name|'keyType'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testGeneratePrivateKey'
op|'('
name|'privObj'
op|','
name|'privStr'
op|','
name|'keyType'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testGenerateBlob'
op|'('
name|'privObj'
op|','
name|'pubObj'
op|','
name|'pubBlob'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_testKeySignVerify
dedent|''
name|'def'
name|'_testKeySignVerify'
op|'('
name|'self'
op|','
name|'privObj'
op|','
name|'pubObj'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that signing and verifying works correctly.\n        @param privObj: a private key object.\n        @type privObj: C{Crypto.PublicKey.pubkey.pubkey}\n        @param pubObj: a public key object.\n        @type pubObj: C{Crypto.PublicKey.pubkey.pubkey}\n        """'
newline|'\n'
nl|'\n'
name|'testData'
op|'='
string|"'this is the test data'"
newline|'\n'
name|'sig'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"signData is deprecated since Twisted Conch 0.9.  "'
nl|'\n'
string|'"Use Key(obj).sign(data)."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'keys'
op|'.'
name|'signData'
op|','
nl|'\n'
name|'privObj'
op|','
name|'testData'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"verifySignature is deprecated since Twisted Conch 0.9.  "'
nl|'\n'
string|'"Use Key(obj).verify(signature, data)."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'verifySignature'
op|','
name|'privObj'
op|','
name|'sig'
op|','
name|'testData'
op|')'
op|','
nl|'\n'
string|"'verifying with private %s failed'"
op|'%'
nl|'\n'
name|'keys'
op|'.'
name|'objectType'
op|'('
name|'privObj'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"verifySignature is deprecated since Twisted Conch 0.9.  "'
nl|'\n'
string|'"Use Key(obj).verify(signature, data)."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'verifySignature'
op|','
name|'pubObj'
op|','
name|'sig'
op|','
name|'testData'
op|')'
op|','
nl|'\n'
string|"'verifying with public %s failed'"
op|'%'
nl|'\n'
name|'keys'
op|'.'
name|'objectType'
op|'('
name|'pubObj'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"verifySignature is deprecated since Twisted Conch 0.9.  "'
nl|'\n'
string|'"Use Key(obj).verify(signature, data)."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'verifySignature'
op|','
name|'privObj'
op|','
name|'sig'
op|','
string|"'other data'"
op|')'
op|','
nl|'\n'
string|"'verified bad data with %s'"
op|'%'
nl|'\n'
name|'keys'
op|'.'
name|'objectType'
op|'('
name|'privObj'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"verifySignature is deprecated since Twisted Conch 0.9.  "'
nl|'\n'
string|'"Use Key(obj).verify(signature, data)."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'verifySignature'
op|','
name|'privObj'
op|','
string|"'bad sig'"
op|','
name|'testData'
op|')'
op|','
nl|'\n'
string|"'verified badsign with %s'"
op|'%'
nl|'\n'
name|'keys'
op|'.'
name|'objectType'
op|'('
name|'privObj'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_testKeyFromString
dedent|''
name|'def'
name|'_testKeyFromString'
op|'('
name|'self'
op|','
name|'privObj'
op|','
name|'pubObj'
op|','
name|'data'
op|','
name|'keyType'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test key object generation from a string.  The public key objects\n        were generated in _testKey; just check that they were created\n        correctly.\n        """'
newline|'\n'
name|'for'
name|'k'
name|'in'
name|'data'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'getattr'
op|'('
name|'privObj'
op|','
name|'k'
op|')'
op|','
name|'data'
op|'['
name|'k'
op|']'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'k'
name|'in'
name|'pubObj'
op|'.'
name|'keydata'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'hasattr'
op|'('
name|'pubObj'
op|','
name|'k'
op|')'
op|':'
comment|"# public key objects don't have all the"
newline|'\n'
comment|'# attributes'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'getattr'
op|'('
name|'pubObj'
op|','
name|'k'
op|')'
op|','
name|'data'
op|'['
name|'k'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_testGeneratePublicKey
dedent|''
dedent|''
dedent|''
name|'def'
name|'_testGeneratePublicKey'
op|'('
name|'self'
op|','
name|'privObj'
op|','
name|'pubObj'
op|','
name|'pubStr'
op|','
name|'keyType'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test public key string generation from an object.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"makePublicKeyString is deprecated since Twisted Conch 0.9.  "'
nl|'\n'
string|'"Use Key(obj).public().toString()."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'makePublicKeyString'
op|','
name|'pubObj'
op|','
string|"'comment'"
op|','
nl|'\n'
name|'keyType'
op|')'
op|','
name|'pubStr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"makePublicKeyString is deprecated since Twisted Conch 0.9.  "'
nl|'\n'
string|'"Use Key(obj).public().toString()."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'makePublicKeyString'
op|','
name|'privObj'
op|','
string|"'comment'"
op|','
nl|'\n'
name|'keyType'
op|')'
op|','
name|'pubStr'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_testGeneratePrivateKey
dedent|''
name|'def'
name|'_testGeneratePrivateKey'
op|'('
name|'self'
op|','
name|'privObj'
op|','
name|'privStr'
op|','
name|'keyType'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test private key string generation from an object.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"makePrivateKeyString is deprecated since Twisted Conch 0.9.  "'
nl|'\n'
string|'"Use Key(obj).toString()."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'makePrivateKeyString'
op|','
name|'privObj'
op|','
name|'kind'
op|'='
name|'keyType'
op|')'
op|','
nl|'\n'
name|'privStr'
op|')'
newline|'\n'
name|'if'
name|'keyType'
op|'=='
string|"'openssh'"
op|':'
newline|'\n'
indent|'            '
name|'encData'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"makePrivateKeyString is deprecated since Twisted Conch "'
nl|'\n'
string|'"0.9.  Use Key(obj).toString()."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'makePrivateKeyString'
op|','
name|'privObj'
op|','
name|'passphrase'
op|'='
string|"'test'"
op|','
nl|'\n'
name|'kind'
op|'='
name|'keyType'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"getPrivateKeyObject is deprecated since Twisted Conch 0.9.  "'
nl|'\n'
string|'"Use Key.fromString()."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'getPrivateKeyObject'
op|','
name|'data'
op|'='
name|'encData'
op|','
name|'passphrase'
op|'='
string|"'test'"
op|')'
op|','
nl|'\n'
name|'privObj'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_testGenerateBlob
dedent|''
dedent|''
name|'def'
name|'_testGenerateBlob'
op|'('
name|'self'
op|','
name|'privObj'
op|','
name|'pubObj'
op|','
name|'pubBlob'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test wire-format blob generation.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"makePublicKeyBlob is deprecated since Twisted Conch 0.9.  "'
nl|'\n'
string|'"Use Key(obj).blob()."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'makePublicKeyBlob'
op|','
name|'pubObj'
op|')'
op|','
name|'pubBlob'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"makePublicKeyBlob is deprecated since Twisted Conch 0.9.  "'
nl|'\n'
string|'"Use Key(obj).blob()."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'makePublicKeyBlob'
op|','
name|'privObj'
op|')'
op|','
name|'pubBlob'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getPublicKeyStringErrors
dedent|''
name|'def'
name|'test_getPublicKeyStringErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that getPublicKeyString raises errors in appropriate cases.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"getPublicKeyString is deprecated"'
nl|'\n'
string|'" since Twisted Conch 0.9.  Use Key.fromString().blob()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'self'
op|'.'
name|'assertRaises'
op|','
name|'keys'
op|'.'
name|'BadKeyError'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'getPublicKeyString'
op|','
name|'self'
op|'.'
name|'publicKeyFile'
op|','
number|'1'
op|','
nl|'\n'
name|'data'
op|'='
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"getPublicKeyString is deprecated"'
nl|'\n'
string|'" since Twisted Conch 0.9.  Use Key.fromString().blob()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'self'
op|'.'
name|'assertRaises'
op|','
name|'keys'
op|'.'
name|'BadKeyError'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'getPublicKeyString'
op|','
name|'data'
op|'='
string|"'invalid key'"
op|')'
newline|'\n'
name|'sexp'
op|'='
name|'sexpy'
op|'.'
name|'pack'
op|'('
op|'['
op|'['
string|"'public-key'"
op|','
op|'['
string|"'bad-key'"
op|','
op|'['
string|"'p'"
op|','
string|"'2'"
op|']'
op|']'
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"getPublicKeyString is deprecated"'
nl|'\n'
string|'" since Twisted Conch 0.9.  Use Key.fromString().blob()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'self'
op|'.'
name|'assertRaises'
op|','
name|'keys'
op|'.'
name|'BadKeyError'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'getPublicKeyString'
op|','
name|'data'
op|'='
string|"'{'"
op|'+'
name|'base64'
op|'.'
name|'encodestring'
op|'('
name|'sexp'
op|')'
op|'+'
string|"'}'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getPrivateKeyObjectErrors
dedent|''
name|'def'
name|'test_getPrivateKeyObjectErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that getPrivateKeyObject raises errors in appropriate cases.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"getPrivateKeyObject is deprecated"'
nl|'\n'
string|'" since Twisted Conch 0.9.  Use Key.fromString()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'self'
op|'.'
name|'assertRaises'
op|','
name|'keys'
op|'.'
name|'BadKeyError'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'getPrivateKeyObject'
op|','
name|'self'
op|'.'
name|'privateKeyFile'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"getPrivateKeyObject is deprecated"'
nl|'\n'
string|'" since Twisted Conch 0.9.  Use Key.fromString()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'self'
op|'.'
name|'assertRaises'
op|','
name|'keys'
op|'.'
name|'BadKeyError'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'getPrivateKeyObject'
op|','
name|'data'
op|'='
string|"'invalid key'"
op|')'
newline|'\n'
name|'sexp'
op|'='
name|'sexpy'
op|'.'
name|'pack'
op|'('
op|'['
op|'['
string|"'private-key'"
op|','
op|'['
string|"'bad-key'"
op|','
op|'['
string|"'p'"
op|','
string|"'2'"
op|']'
op|']'
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"getPrivateKeyObject is deprecated"'
nl|'\n'
string|'" since Twisted Conch 0.9.  Use Key.fromString()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'self'
op|'.'
name|'assertRaises'
op|','
name|'keys'
op|'.'
name|'BadKeyError'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'getPrivateKeyObject'
op|','
name|'data'
op|'='
name|'sexp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"getPrivateKeyObject is deprecated"'
nl|'\n'
string|'" since Twisted Conch 0.9.  Use Key.fromString()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'self'
op|'.'
name|'assertRaises'
op|','
name|'keys'
op|'.'
name|'BadKeyError'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'getPrivateKeyObject'
op|','
nl|'\n'
name|'data'
op|'='
string|"'\\x00\\x00\\x00\\x07ssh-foo'"
op|'+'
string|"'\\x00\\x00\\x00\\x01\\x01'"
op|'*'
number|'5'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_makePublicKeyStringErrors
dedent|''
name|'def'
name|'test_makePublicKeyStringErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that makePublicKeyString raises errors in appropriate cases.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"makePublicKeyString is deprecated"'
nl|'\n'
string|'" since Twisted Conch 0.9.  Use Key(obj).public().toString()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'self'
op|'.'
name|'assertRaises'
op|','
name|'Exception'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'makePublicKeyString'
op|','
name|'None'
op|','
name|'kind'
op|'='
string|"'bad type'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"makePublicKeyString is deprecated"'
nl|'\n'
string|'" since Twisted Conch 0.9.  Use Key(obj).public().toString()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'self'
op|'.'
name|'assertRaises'
op|','
name|'Exception'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'makePublicKeyString'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"makePublicKeyString is deprecated"'
nl|'\n'
string|'" since Twisted Conch 0.9.  Use Key(obj).public().toString()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'self'
op|'.'
name|'assertRaises'
op|','
name|'Exception'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'makePublicKeyString'
op|','
name|'None'
op|','
name|'kind'
op|'='
string|"'lsh'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getPublicKeyObjectErrors
dedent|''
name|'def'
name|'test_getPublicKeyObjectErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that getPublicKeyObject raises errors in appropriate cases.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"getPublicKeyObject is deprecated"'
nl|'\n'
string|'" since Twisted Conch 0.9.  Use Key.fromString()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'self'
op|'.'
name|'assertRaises'
op|','
name|'keys'
op|'.'
name|'BadKeyError'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'getPublicKeyObject'
op|','
string|"'\\x00\\x00\\x00\\x01A'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_makePrivateKeyStringErrors
dedent|''
name|'def'
name|'test_makePrivateKeyStringErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that makePrivateKeyString raises errors in appropriate cases.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"makePrivateKeyString is "'
nl|'\n'
string|'"deprecated since Twisted Conch 0.9.  Use Key(obj).toString()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'self'
op|'.'
name|'assertRaises'
op|','
name|'Exception'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'makePrivateKeyString'
op|','
name|'None'
op|','
name|'kind'
op|'='
string|"'bad type'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"makePrivateKeyString is "'
nl|'\n'
string|'"deprecated since Twisted Conch 0.9.  Use Key(obj).toString()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'self'
op|'.'
name|'assertRaises'
op|','
name|'Exception'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'makePrivateKeyString'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"makePrivateKeyString is "'
nl|'\n'
string|'"deprecated since Twisted Conch 0.9.  Use Key(obj).toString()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'self'
op|'.'
name|'assertRaises'
op|','
name|'Exception'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'makePrivateKeyString'
op|','
name|'None'
op|','
name|'kind'
op|'='
string|"'lsh'"
op|')'
newline|'\n'
nl|'\n'
DECL|class|HelpersTestCase
dedent|''
dedent|''
name|'class'
name|'HelpersTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'if'
name|'Crypto'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyCrypto"'
newline|'\n'
dedent|''
name|'if'
name|'pyasn1'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o/ PyASN1"'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_secureRandom'
op|'='
name|'randbytes'
op|'.'
name|'secureRandom'
newline|'\n'
name|'randbytes'
op|'.'
name|'secureRandom'
op|'='
name|'lambda'
name|'x'
op|':'
string|"'\\x55'"
op|'*'
name|'x'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'randbytes'
op|'.'
name|'secureRandom'
op|'='
name|'self'
op|'.'
name|'_secureRandom'
newline|'\n'
name|'self'
op|'.'
name|'_secureRandom'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|test_pkcs1
dedent|''
name|'def'
name|'test_pkcs1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test Public Key Cryptographic Standard #1 functions.\n        """'
newline|'\n'
name|'data'
op|'='
string|"'ABC'"
newline|'\n'
name|'messageSize'
op|'='
number|'6'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'pkcs1Pad'
op|'('
name|'data'
op|','
name|'messageSize'
op|')'
op|','
nl|'\n'
string|"'\\x01\\xff\\x00ABC'"
op|')'
newline|'\n'
name|'hash'
op|'='
name|'sha1'
op|'('
op|')'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
name|'messageSize'
op|'='
number|'40'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'pkcs1Digest'
op|'('
string|"''"
op|','
name|'messageSize'
op|')'
op|','
nl|'\n'
string|"'\\x01\\xff\\xff\\xff\\x00'"
op|'+'
name|'keys'
op|'.'
name|'ID_SHA1'
op|'+'
name|'hash'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_signRSA
dedent|''
name|'def'
name|'_signRSA'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'key'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'sig'
op|'='
name|'key'
op|'.'
name|'sign'
op|'('
name|'data'
op|')'
newline|'\n'
name|'return'
name|'key'
op|'.'
name|'keyObject'
op|','
name|'sig'
newline|'\n'
nl|'\n'
DECL|member|_signDSA
dedent|''
name|'def'
name|'_signDSA'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'key'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateDSA_openssh'
op|')'
newline|'\n'
name|'sig'
op|'='
name|'key'
op|'.'
name|'sign'
op|'('
name|'data'
op|')'
newline|'\n'
name|'return'
name|'key'
op|'.'
name|'keyObject'
op|','
name|'sig'
newline|'\n'
nl|'\n'
DECL|member|test_signRSA
dedent|''
name|'def'
name|'test_signRSA'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that RSA keys return appropriate signatures.\n        """'
newline|'\n'
name|'data'
op|'='
string|"'data'"
newline|'\n'
name|'key'
op|','
name|'sig'
op|'='
name|'self'
op|'.'
name|'_signRSA'
op|'('
name|'data'
op|')'
newline|'\n'
name|'sigData'
op|'='
name|'keys'
op|'.'
name|'pkcs1Digest'
op|'('
name|'data'
op|','
name|'keys'
op|'.'
name|'lenSig'
op|'('
name|'key'
op|')'
op|')'
newline|'\n'
name|'v'
op|'='
name|'key'
op|'.'
name|'sign'
op|'('
name|'sigData'
op|','
string|"''"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sig'
op|','
name|'common'
op|'.'
name|'NS'
op|'('
string|"'ssh-rsa'"
op|')'
op|'+'
name|'common'
op|'.'
name|'MP'
op|'('
name|'v'
op|')'
op|')'
newline|'\n'
name|'return'
name|'key'
op|','
name|'sig'
newline|'\n'
nl|'\n'
DECL|member|test_signDSA
dedent|''
name|'def'
name|'test_signDSA'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that DSA keys return appropriate signatures.\n        """'
newline|'\n'
name|'data'
op|'='
string|"'data'"
newline|'\n'
name|'key'
op|','
name|'sig'
op|'='
name|'self'
op|'.'
name|'_signDSA'
op|'('
name|'data'
op|')'
newline|'\n'
name|'sigData'
op|'='
name|'sha1'
op|'('
name|'data'
op|')'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
name|'v'
op|'='
name|'key'
op|'.'
name|'sign'
op|'('
name|'sigData'
op|','
string|"'\\x55'"
op|'*'
number|'19'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sig'
op|','
name|'common'
op|'.'
name|'NS'
op|'('
string|"'ssh-dss'"
op|')'
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
nl|'\n'
name|'Crypto'
op|'.'
name|'Util'
op|'.'
name|'number'
op|'.'
name|'long_to_bytes'
op|'('
name|'v'
op|'['
number|'0'
op|']'
op|','
number|'20'
op|')'
op|'+'
nl|'\n'
name|'Crypto'
op|'.'
name|'Util'
op|'.'
name|'number'
op|'.'
name|'long_to_bytes'
op|'('
name|'v'
op|'['
number|'1'
op|']'
op|','
number|'20'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'key'
op|','
name|'sig'
newline|'\n'
nl|'\n'
DECL|member|test_verifyRSA
dedent|''
name|'def'
name|'test_verifyRSA'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that RSA signatures are verified appropriately.\n        """'
newline|'\n'
name|'data'
op|'='
string|"'data'"
newline|'\n'
name|'key'
op|','
name|'sig'
op|'='
name|'self'
op|'.'
name|'_signRSA'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"verifySignature "'
nl|'\n'
string|'"is deprecated since Twisted Conch 0.9.  Use "'
nl|'\n'
string|'"Key(obj).verify(signature, data)."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'verifySignature'
op|','
name|'key'
op|','
name|'sig'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_verifyDSA
dedent|''
name|'def'
name|'test_verifyDSA'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that RSA signatures are verified appropriately.\n        """'
newline|'\n'
name|'data'
op|'='
string|"'data'"
newline|'\n'
name|'key'
op|','
name|'sig'
op|'='
name|'self'
op|'.'
name|'_signDSA'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"verifySignature "'
nl|'\n'
string|'"is deprecated since Twisted Conch 0.9.  Use "'
nl|'\n'
string|'"Key(obj).verify(signature, data)."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'verifySignature'
op|','
name|'key'
op|','
name|'sig'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_objectType
dedent|''
name|'def'
name|'test_objectType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that objectType, returns the correct type for objects.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'objectType'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
nl|'\n'
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
op|'.'
name|'keyObject'
op|')'
op|','
string|"'ssh-rsa'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'objectType'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
nl|'\n'
name|'keydata'
op|'.'
name|'privateDSA_openssh'
op|')'
op|'.'
name|'keyObject'
op|')'
op|','
string|"'ssh-dss'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'keys'
op|'.'
name|'BadKeyError'
op|','
name|'keys'
op|'.'
name|'objectType'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_asn1PackError
dedent|''
name|'def'
name|'test_asn1PackError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{asn1.pack} should raise a C{ValueError} when given a type not\n        handled.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'asn1'
op|'.'
name|'pack'
op|','
op|'['
name|'object'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_asn1DeprecationWarnings
dedent|''
name|'def'
name|'test_asn1DeprecationWarnings'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{asn1.pack} and L{asn1.parse} were deprecated in Twisted 9.0.0.  Make\n        sure that they tell their callers.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'callDeprecated'
op|'('
name|'asn1'
op|'.'
name|'Twisted9point0'
op|','
name|'asn1'
op|'.'
name|'pack'
op|','
op|'['
op|']'
op|')'
op|','
nl|'\n'
string|"'0\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'len'
op|'('
name|'self'
op|'.'
name|'callDeprecated'
op|'('
name|'asn1'
op|'.'
name|'Twisted9point0'
op|','
name|'asn1'
op|'.'
name|'parse'
op|','
nl|'\n'
string|"'\\x10\\x00\\x00'"
op|')'
op|')'
op|','
nl|'\n'
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_printKey
dedent|''
name|'def'
name|'test_printKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the printKey function prints correctly.\n        """'
newline|'\n'
name|'obj'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
op|'.'
name|'keyObject'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"printKey is "'
nl|'\n'
string|'"deprecated since Twisted Conch 0.9.  Use repr(Key(obj))."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'keys'
op|'.'
name|'printKey'
op|','
name|'obj'
op|')'
op|','
nl|'\n'
string|'"""RSA Private Key (767 bits)\nattr e:\n\\t23\nattr d:\n\\t6e:1f:b5:55:97:eb:ed:67:ed:2b:99:6e:ec:c1:ed:\n\\ta8:4d:52:d6:f3:d6:65:06:04:df:e5:54:9f:cc:89:\n\\t00:3c:9b:67:87:ec:65:a0:ab:cd:6f:65:90:8a:97:\n\\t90:4d:c6:21:8f:a8:8d:d8:59:86:43:b5:81:b1:b4:\n\\td7:5f:2c:22:0a:61:c1:25:8a:47:12:b4:9a:f8:7a:\n\\t11:1c:4a:a8:8b:75:c4:91:09:3b:be:04:ca:45:d9:\n\\t57:8a:0d:27:cb:23\nattr n:\n\\t00:af:32:71:f0:e6:0e:9c:99:b3:7f:8b:5f:04:4b:\n\\tcb:8b:c0:d5:3e:b2:77:fd:cf:64:d8:8f:c0:cf:ae:\n\\t1f:c6:31:df:f6:29:b2:44:96:e2:c6:d4:21:94:7f:\n\\t65:7c:d8:d4:23:1f:b8:2e:6a:c9:1f:94:0d:46:c1:\n\\t69:a2:b7:07:0c:a3:93:c1:34:d8:2e:1e:4a:99:1a:\n\\t6c:96:46:07:46:2b:dc:25:29:1b:87:f0:be:05:1d:\n\\tee:b4:34:b9:e7:99:95\nattr q:\n\\t00:dc:9f:6b:d9:98:21:56:11:8d:e9:5f:03:9d:0a:\n\\td3:93:6e:13:77:41:3c:85:4f:00:70:fd:05:54:ff:\n\\tbc:3d:09:bf:83:f6:97:7f:64:10:91:04:fe:a2:67:\n\\t47:54:42:6b\nattr p:\n\\t00:cb:4a:4b:d0:40:47:e8:45:52:f7:c7:af:0c:20:\n\\t6d:43:0d:b6:39:94:f9:da:a5:e5:03:06:76:83:24:\n\\teb:88:a1:55:a2:a8:de:12:3b:77:49:92:8a:a9:71:\n\\td2:02:93:ff\nattr u:\n\\t00:b4:73:97:4b:50:10:a3:17:b3:a8:47:f1:3a:14:\n\\t76:52:d1:38:2a:cf:12:14:34:c1:a8:54:4c:29:35:\n\\t80:a0:38:b8:f0:fa:4c:c4:c2:85:ab:db:87:82:ba:\n\\tdc:eb:db:2a"""'
op|')'
newline|'\n'
nl|'\n'
DECL|class|KeyTestCase
dedent|''
dedent|''
name|'class'
name|'KeyTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'if'
name|'Crypto'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyCrypto"'
newline|'\n'
dedent|''
name|'if'
name|'pyasn1'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o/ PyASN1"'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'rsaObj'
op|'='
name|'Crypto'
op|'.'
name|'PublicKey'
op|'.'
name|'RSA'
op|'.'
name|'construct'
op|'('
op|'('
number|'1L'
op|','
number|'2L'
op|','
number|'3L'
op|','
number|'4L'
op|','
number|'5L'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dsaObj'
op|'='
name|'Crypto'
op|'.'
name|'PublicKey'
op|'.'
name|'DSA'
op|'.'
name|'construct'
op|'('
op|'('
number|'1L'
op|','
number|'2L'
op|','
number|'3L'
op|','
number|'4L'
op|','
number|'5L'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rsaSignature'
op|'='
op|'('
string|"'\\x00\\x00\\x00\\x07ssh-rsa\\x00'"
nl|'\n'
string|"'\\x00\\x00`N\\xac\\xb4@qK\\xa0(\\xc3\\xf2h \\xd3\\xdd\\xee6Np\\x9d_'"
nl|'\n'
string|"'\\xb0>\\xe3\\x0c(L\\x9d{\\txUd|!\\xf6m\\x9c\\xd3\\x93\\x842\\x7fU'"
nl|'\n'
string|"'\\x05\\xf4\\xf7\\xfaD\\xda\\xce\\x81\\x8ea\\x7f=Y\\xed*\\xb7\\xba\\x81'"
nl|'\n'
string|"'\\xf2\\xad\\xda\\xeb(\\x97\\x03S\\x08\\x81\\xc7\\xb1\\xb7\\xe6\\xe3'"
nl|'\n'
string|"'\\xcd*\\xd4\\xbd\\xc0wt\\xf7y\\xcd\\xf0\\xb7\\x7f\\xfb\\x1e>\\xf9r'"
nl|'\n'
string|"'\\x8c\\xba'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dsaSignature'
op|'='
op|'('
string|"'\\x00\\x00\\x00\\x07ssh-dss\\x00\\x00'"
nl|'\n'
string|"'\\x00(\\x18z)H\\x8a\\x1b\\xc6\\r\\xbbq\\xa2\\xd7f\\x7f$\\xa7\\xbf'"
nl|'\n'
string|"'\\xe8\\x87\\x8c\\x88\\xef\\xd9k\\x1a\\x98\\xdd{=\\xdec\\x18\\t\\xe3'"
nl|'\n'
string|"'\\x87\\xa9\\xc72h\\x95'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'oldSecureRandom'
op|'='
name|'randbytes'
op|'.'
name|'secureRandom'
newline|'\n'
name|'randbytes'
op|'.'
name|'secureRandom'
op|'='
name|'lambda'
name|'x'
op|':'
string|"'\\xff'"
op|'*'
name|'x'
newline|'\n'
name|'self'
op|'.'
name|'keyFile'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'file'
op|'('
name|'self'
op|'.'
name|'keyFile'
op|','
string|"'wb'"
op|')'
op|'.'
name|'write'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_lsh'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'randbytes'
op|'.'
name|'secureRandom'
op|'='
name|'self'
op|'.'
name|'oldSecureRandom'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'oldSecureRandom'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'self'
op|'.'
name|'keyFile'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__guessStringType
dedent|''
name|'def'
name|'test__guessStringType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the _guessStringType method guesses string types\n        correctly.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'_guessStringType'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
op|','
nl|'\n'
string|"'public_openssh'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'_guessStringType'
op|'('
name|'keydata'
op|'.'
name|'publicDSA_openssh'
op|')'
op|','
nl|'\n'
string|"'public_openssh'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'_guessStringType'
op|'('
nl|'\n'
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
op|','
string|"'private_openssh'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'_guessStringType'
op|'('
nl|'\n'
name|'keydata'
op|'.'
name|'privateDSA_openssh'
op|')'
op|','
string|"'private_openssh'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'_guessStringType'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_lsh'
op|')'
op|','
nl|'\n'
string|"'public_lsh'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'_guessStringType'
op|'('
name|'keydata'
op|'.'
name|'publicDSA_lsh'
op|')'
op|','
nl|'\n'
string|"'public_lsh'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'_guessStringType'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_lsh'
op|')'
op|','
nl|'\n'
string|"'private_lsh'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'_guessStringType'
op|'('
name|'keydata'
op|'.'
name|'privateDSA_lsh'
op|')'
op|','
nl|'\n'
string|"'private_lsh'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'_guessStringType'
op|'('
nl|'\n'
name|'keydata'
op|'.'
name|'privateRSA_agentv3'
op|')'
op|','
string|"'agentv3'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'_guessStringType'
op|'('
nl|'\n'
name|'keydata'
op|'.'
name|'privateDSA_agentv3'
op|')'
op|','
string|"'agentv3'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'_guessStringType'
op|'('
nl|'\n'
string|"'\\x00\\x00\\x00\\x07ssh-rsa\\x00\\x00\\x00\\x01\\x01'"
op|')'
op|','
nl|'\n'
string|"'blob'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'_guessStringType'
op|'('
nl|'\n'
string|"'\\x00\\x00\\x00\\x07ssh-dss\\x00\\x00\\x00\\x01\\x01'"
op|')'
op|','
nl|'\n'
string|"'blob'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'_guessStringType'
op|'('
string|"'not a key'"
op|')'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_testPublicPrivateFromString
dedent|''
name|'def'
name|'_testPublicPrivateFromString'
op|'('
name|'self'
op|','
name|'public'
op|','
name|'private'
op|','
name|'type'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_testPublicFromString'
op|'('
name|'public'
op|','
name|'type'
op|','
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testPrivateFromString'
op|'('
name|'private'
op|','
name|'type'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_testPublicFromString
dedent|''
name|'def'
name|'_testPublicFromString'
op|'('
name|'self'
op|','
name|'public'
op|','
name|'type'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'publicKey'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'public'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'publicKey'
op|'.'
name|'isPublic'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'publicKey'
op|'.'
name|'type'
op|'('
op|')'
op|','
name|'type'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'publicKey'
op|'.'
name|'data'
op|'('
op|')'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'data'
op|'['
name|'k'
op|']'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_testPrivateFromString
dedent|''
dedent|''
name|'def'
name|'_testPrivateFromString'
op|'('
name|'self'
op|','
name|'private'
op|','
name|'type'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'privateKey'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'private'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'privateKey'
op|'.'
name|'isPublic'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'privateKey'
op|'.'
name|'type'
op|'('
op|')'
op|','
name|'type'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'data'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'privateKey'
op|'.'
name|'data'
op|'('
op|')'
op|'['
name|'k'
op|']'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fromOpenSSH
dedent|''
dedent|''
name|'def'
name|'test_fromOpenSSH'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that keys are correctly generated from OpenSSH strings.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testPublicPrivateFromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|','
string|"'RSA'"
op|','
name|'keydata'
op|'.'
name|'RSAData'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
nl|'\n'
name|'keydata'
op|'.'
name|'privateRSA_openssh_encrypted'
op|','
nl|'\n'
name|'passphrase'
op|'='
string|"'encrypted'"
op|')'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
nl|'\n'
name|'keydata'
op|'.'
name|'privateRSA_openssh_alternate'
op|')'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testPublicPrivateFromString'
op|'('
name|'keydata'
op|'.'
name|'publicDSA_openssh'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'privateDSA_openssh'
op|','
string|"'DSA'"
op|','
name|'keydata'
op|'.'
name|'DSAData'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fromOpenSSH_with_whitespace
dedent|''
name|'def'
name|'test_fromOpenSSH_with_whitespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If key strings have trailing whitespace, it should be ignored.\n        """'
newline|'\n'
comment|"# from bug #3391, since our test key data doesn't have"
nl|'\n'
comment|'# an issue with appended newlines'
nl|'\n'
name|'privateDSAData'
op|'='
string|'"""-----BEGIN DSA PRIVATE KEY-----\nMIIBuwIBAAKBgQDylESNuc61jq2yatCzZbenlr9llG+p9LhIpOLUbXhhHcwC6hrh\nEZIdCKqTO0USLrGoP5uS9UHAUoeN62Z0KXXWTwOWGEQn/syyPzNJtnBorHpNUT9D\nQzwl1yUa53NNgEctpo4NoEFOx8PuU6iFLyvgHCjNn2MsuGuzkZm7sI9ZpQIVAJiR\n9dPc08KLdpJyRxz8T74b4FQRAoGAGBc4Z5Y6R/HZi7AYM/iNOM8su6hrk8ypkBwR\na3Dbhzk97fuV3SF1SDrcQu4zF7c4CtH609N5nfZs2SUjLLGPWln83Ysb8qhh55Em\nAcHXuROrHS/sDsnqu8FQp86MaudrqMExCOYyVPE7jaBWW+/JWFbKCxmgOCSdViUJ\nesJpBFsCgYEA7+jtVvSt9yrwsS/YU1QGP5wRAiDYB+T5cK4HytzAqJKRdC5qS4zf\nC7R0eKcDHHLMYO39aPnCwXjscisnInEhYGNblTDyPyiyNxAOXuC8x7luTmwzMbNJ\n/ow0IqSj0VF72VJN9uSoPpFd4lLT0zN8v42RWja0M8ohWNf+YNJluPgCFE0PT4Vm\nSUrCyZXsNh6VXwjs3gKQ\n-----END DSA PRIVATE KEY-----"""'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'privateDSAData'
op|')'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'privateDSAData'
op|'+'
string|"'\\n'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_fromLSH
dedent|''
name|'def'
name|'test_fromLSH'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that keys are correctly generated from LSH strings.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testPublicPrivateFromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_lsh'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'privateRSA_lsh'
op|','
string|"'RSA'"
op|','
name|'keydata'
op|'.'
name|'RSAData'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testPublicPrivateFromString'
op|'('
name|'keydata'
op|'.'
name|'publicDSA_lsh'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'privateDSA_lsh'
op|','
string|"'DSA'"
op|','
name|'keydata'
op|'.'
name|'DSAData'
op|')'
newline|'\n'
name|'sexp'
op|'='
name|'sexpy'
op|'.'
name|'pack'
op|'('
op|'['
op|'['
string|"'public-key'"
op|','
op|'['
string|"'bad-key'"
op|','
op|'['
string|"'p'"
op|','
string|"'2'"
op|']'
op|']'
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'keys'
op|'.'
name|'BadKeyError'
op|','
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|','
nl|'\n'
name|'data'
op|'='
string|"'{'"
op|'+'
name|'base64'
op|'.'
name|'encodestring'
op|'('
name|'sexp'
op|')'
op|'+'
string|"'}'"
op|')'
newline|'\n'
name|'sexp'
op|'='
name|'sexpy'
op|'.'
name|'pack'
op|'('
op|'['
op|'['
string|"'private-key'"
op|','
op|'['
string|"'bad-key'"
op|','
op|'['
string|"'p'"
op|','
string|"'2'"
op|']'
op|']'
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'keys'
op|'.'
name|'BadKeyError'
op|','
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|','
nl|'\n'
name|'sexp'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_fromAgentv3
dedent|''
name|'def'
name|'test_fromAgentv3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that keys are correctly generated from Agent v3 strings.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testPrivateFromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_agentv3'
op|','
string|"'RSA'"
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'RSAData'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testPrivateFromString'
op|'('
name|'keydata'
op|'.'
name|'privateDSA_agentv3'
op|','
string|"'DSA'"
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'DSAData'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'keys'
op|'.'
name|'BadKeyError'
op|','
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|','
nl|'\n'
string|"'\\x00\\x00\\x00\\x07ssh-foo'"
op|'+'
string|"'\\x00\\x00\\x00\\x01\\x01'"
op|'*'
number|'5'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_fromStringErrors
dedent|''
name|'def'
name|'test_fromStringErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        keys.Key.fromString should raise BadKeyError when the key is invalid.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'keys'
op|'.'
name|'BadKeyError'
op|','
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|','
string|"''"
op|')'
newline|'\n'
comment|'# no key data with a bad key type'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'keys'
op|'.'
name|'BadKeyError'
op|','
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|','
string|"''"
op|','
nl|'\n'
string|"'bad_type'"
op|')'
newline|'\n'
comment|"# trying to decrypt a key which doesn't support encryption"
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'keys'
op|'.'
name|'BadKeyError'
op|','
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'publicRSA_lsh'
op|','
name|'passphrase'
op|'='
string|"'unencrypted'"
op|')'
newline|'\n'
comment|'# trying to decrypt an unencrypted key'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'keys'
op|'.'
name|'EncryptedKeyError'
op|','
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'rsaObj'
op|')'
op|'.'
name|'toString'
op|'('
string|"'openssh'"
op|','
string|"'encrypted'"
op|')'
op|')'
newline|'\n'
comment|'# key with no key data'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'keys'
op|'.'
name|'BadKeyError'
op|','
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|','
nl|'\n'
string|"'-----BEGIN RSA KEY-----\\nwA==\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_fromFile
dedent|''
name|'def'
name|'test_fromFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that fromFile works correctly.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromFile'
op|'('
name|'self'
op|'.'
name|'keyFile'
op|')'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_lsh'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'keys'
op|'.'
name|'BadKeyError'
op|','
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromFile'
op|','
nl|'\n'
name|'self'
op|'.'
name|'keyFile'
op|','
string|"'bad_type'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'keys'
op|'.'
name|'BadKeyError'
op|','
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromFile'
op|','
nl|'\n'
name|'self'
op|'.'
name|'keyFile'
op|','
name|'passphrase'
op|'='
string|"'unencrypted'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_init
dedent|''
name|'def'
name|'test_init'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the PublicKey object is initialized correctly.\n        """'
newline|'\n'
name|'obj'
op|'='
name|'Crypto'
op|'.'
name|'PublicKey'
op|'.'
name|'RSA'
op|'.'
name|'construct'
op|'('
op|'('
number|'1L'
op|','
number|'2L'
op|')'
op|')'
newline|'\n'
name|'key'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'keyObject'
op|','
name|'obj'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_equal
dedent|''
name|'def'
name|'test_equal'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that Key objects are compared correctly.\n        """'
newline|'\n'
name|'rsa1'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'rsaObj'
op|')'
newline|'\n'
name|'rsa2'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'rsaObj'
op|')'
newline|'\n'
name|'rsa3'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'('
name|'Crypto'
op|'.'
name|'PublicKey'
op|'.'
name|'RSA'
op|'.'
name|'construct'
op|'('
op|'('
number|'1L'
op|','
number|'2L'
op|')'
op|')'
op|')'
newline|'\n'
name|'dsa'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'dsaObj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'rsa1'
op|'=='
name|'rsa2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'rsa1'
op|'=='
name|'rsa3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'rsa1'
op|'=='
name|'dsa'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'rsa1'
op|'=='
name|'object'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'rsa1'
op|'=='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_notEqual
dedent|''
name|'def'
name|'test_notEqual'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that Key objects are not-compared correctly.\n        """'
newline|'\n'
name|'rsa1'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'rsaObj'
op|')'
newline|'\n'
name|'rsa2'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'rsaObj'
op|')'
newline|'\n'
name|'rsa3'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'('
name|'Crypto'
op|'.'
name|'PublicKey'
op|'.'
name|'RSA'
op|'.'
name|'construct'
op|'('
op|'('
number|'1L'
op|','
number|'2L'
op|')'
op|')'
op|')'
newline|'\n'
name|'dsa'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'dsaObj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'rsa1'
op|'!='
name|'rsa2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'rsa1'
op|'!='
name|'rsa3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'rsa1'
op|'!='
name|'dsa'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'rsa1'
op|'!='
name|'object'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'rsa1'
op|'!='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_type
dedent|''
name|'def'
name|'test_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the type method returns the correct type for an object.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'rsaObj'
op|')'
op|'.'
name|'type'
op|'('
op|')'
op|','
string|"'RSA'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'rsaObj'
op|')'
op|'.'
name|'sshType'
op|'('
op|')'
op|','
string|"'ssh-rsa'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'dsaObj'
op|')'
op|'.'
name|'type'
op|'('
op|')'
op|','
string|"'DSA'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'dsaObj'
op|')'
op|'.'
name|'sshType'
op|'('
op|')'
op|','
string|"'ssh-dss'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'keys'
op|'.'
name|'Key'
op|'('
name|'None'
op|')'
op|'.'
name|'type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'keys'
op|'.'
name|'Key'
op|'('
name|'None'
op|')'
op|'.'
name|'sshType'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|')'
op|'.'
name|'type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|')'
op|'.'
name|'sshType'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_fromBlob
dedent|''
name|'def'
name|'test_fromBlob'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a public key is correctly generated from a public key blob.\n        """'
newline|'\n'
name|'rsaBlob'
op|'='
name|'common'
op|'.'
name|'NS'
op|'('
string|"'ssh-rsa'"
op|')'
op|'+'
name|'common'
op|'.'
name|'MP'
op|'('
number|'2'
op|')'
op|'+'
name|'common'
op|'.'
name|'MP'
op|'('
number|'3'
op|')'
newline|'\n'
name|'rsaKey'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'rsaBlob'
op|')'
newline|'\n'
name|'dsaBlob'
op|'='
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
string|"'ssh-dss'"
op|')'
op|'+'
name|'common'
op|'.'
name|'MP'
op|'('
number|'2'
op|')'
op|'+'
name|'common'
op|'.'
name|'MP'
op|'('
number|'3'
op|')'
op|'+'
nl|'\n'
name|'common'
op|'.'
name|'MP'
op|'('
number|'4'
op|')'
op|'+'
name|'common'
op|'.'
name|'MP'
op|'('
number|'5'
op|')'
op|')'
newline|'\n'
name|'dsaKey'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'dsaBlob'
op|')'
newline|'\n'
name|'badBlob'
op|'='
name|'common'
op|'.'
name|'NS'
op|'('
string|"'ssh-bad'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'rsaKey'
op|'.'
name|'isPublic'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'rsaKey'
op|'.'
name|'data'
op|'('
op|')'
op|','
op|'{'
string|"'e'"
op|':'
number|'2L'
op|','
string|"'n'"
op|':'
number|'3L'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'dsaKey'
op|'.'
name|'isPublic'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'dsaKey'
op|'.'
name|'data'
op|'('
op|')'
op|','
op|'{'
string|"'p'"
op|':'
number|'2L'
op|','
string|"'q'"
op|':'
number|'3L'
op|','
string|"'g'"
op|':'
number|'4L'
op|','
string|"'y'"
op|':'
number|'5L'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'keys'
op|'.'
name|'BadKeyError'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|','
name|'badBlob'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|test_fromPrivateBlob
dedent|''
name|'def'
name|'test_fromPrivateBlob'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a private key is correctly generated from a private key blob.\n        """'
newline|'\n'
name|'rsaBlob'
op|'='
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
string|"'ssh-rsa'"
op|')'
op|'+'
name|'common'
op|'.'
name|'MP'
op|'('
number|'2'
op|')'
op|'+'
name|'common'
op|'.'
name|'MP'
op|'('
number|'3'
op|')'
op|'+'
nl|'\n'
name|'common'
op|'.'
name|'MP'
op|'('
number|'4'
op|')'
op|'+'
name|'common'
op|'.'
name|'MP'
op|'('
number|'5'
op|')'
op|'+'
name|'common'
op|'.'
name|'MP'
op|'('
number|'6'
op|')'
op|'+'
name|'common'
op|'.'
name|'MP'
op|'('
number|'7'
op|')'
op|')'
newline|'\n'
name|'rsaKey'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'_fromString_PRIVATE_BLOB'
op|'('
name|'rsaBlob'
op|')'
newline|'\n'
name|'dsaBlob'
op|'='
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
string|"'ssh-dss'"
op|')'
op|'+'
name|'common'
op|'.'
name|'MP'
op|'('
number|'2'
op|')'
op|'+'
name|'common'
op|'.'
name|'MP'
op|'('
number|'3'
op|')'
op|'+'
nl|'\n'
name|'common'
op|'.'
name|'MP'
op|'('
number|'4'
op|')'
op|'+'
name|'common'
op|'.'
name|'MP'
op|'('
number|'5'
op|')'
op|'+'
name|'common'
op|'.'
name|'MP'
op|'('
number|'6'
op|')'
op|')'
newline|'\n'
name|'dsaKey'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'_fromString_PRIVATE_BLOB'
op|'('
name|'dsaBlob'
op|')'
newline|'\n'
name|'badBlob'
op|'='
name|'common'
op|'.'
name|'NS'
op|'('
string|"'ssh-bad'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'rsaKey'
op|'.'
name|'isPublic'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'rsaKey'
op|'.'
name|'data'
op|'('
op|')'
op|','
op|'{'
string|"'n'"
op|':'
number|'2L'
op|','
string|"'e'"
op|':'
number|'3L'
op|','
string|"'d'"
op|':'
number|'4L'
op|','
string|"'u'"
op|':'
number|'5L'
op|','
string|"'p'"
op|':'
number|'6L'
op|','
string|"'q'"
op|':'
number|'7L'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'dsaKey'
op|'.'
name|'isPublic'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'dsaKey'
op|'.'
name|'data'
op|'('
op|')'
op|','
op|'{'
string|"'p'"
op|':'
number|'2L'
op|','
string|"'q'"
op|':'
number|'3L'
op|','
string|"'g'"
op|':'
number|'4L'
op|','
string|"'y'"
op|':'
number|'5L'
op|','
string|"'x'"
op|':'
number|'6L'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'keys'
op|'.'
name|'BadKeyError'
op|','
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'_fromString_PRIVATE_BLOB'
op|','
name|'badBlob'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|test_blob
dedent|''
name|'def'
name|'test_blob'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the Key object generates blobs correctly.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'rsaObj'
op|')'
op|'.'
name|'blob'
op|'('
op|')'
op|','
nl|'\n'
string|"'\\x00\\x00\\x00\\x07ssh-rsa\\x00\\x00\\x00\\x01\\x02'"
nl|'\n'
string|"'\\x00\\x00\\x00\\x01\\x01'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'dsaObj'
op|')'
op|'.'
name|'blob'
op|'('
op|')'
op|','
nl|'\n'
string|"'\\x00\\x00\\x00\\x07ssh-dss\\x00\\x00\\x00\\x01\\x03'"
nl|'\n'
string|"'\\x00\\x00\\x00\\x01\\x04\\x00\\x00\\x00\\x01\\x02'"
nl|'\n'
string|"'\\x00\\x00\\x00\\x01\\x01'"
op|')'
newline|'\n'
nl|'\n'
name|'badKey'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'badKey'
op|'.'
name|'blob'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|test_privateBlob
dedent|''
name|'def'
name|'test_privateBlob'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Key.privateBlob} returns the SSH protocol-level format of the private\n        key and raises L{RuntimeError} if the underlying key object is invalid.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'rsaObj'
op|')'
op|'.'
name|'privateBlob'
op|'('
op|')'
op|','
nl|'\n'
string|"'\\x00\\x00\\x00\\x07ssh-rsa\\x00\\x00\\x00\\x01\\x01'"
nl|'\n'
string|"'\\x00\\x00\\x00\\x01\\x02\\x00\\x00\\x00\\x01\\x03\\x00'"
nl|'\n'
string|"'\\x00\\x00\\x01\\x04\\x00\\x00\\x00\\x01\\x04\\x00\\x00'"
nl|'\n'
string|"'\\x00\\x01\\x05'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'dsaObj'
op|')'
op|'.'
name|'privateBlob'
op|'('
op|')'
op|','
nl|'\n'
string|"'\\x00\\x00\\x00\\x07ssh-dss\\x00\\x00\\x00\\x01\\x03'"
nl|'\n'
string|"'\\x00\\x00\\x00\\x01\\x04\\x00\\x00\\x00\\x01\\x02\\x00'"
nl|'\n'
string|"'\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x01\\x05'"
op|')'
newline|'\n'
nl|'\n'
name|'badKey'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'badKey'
op|'.'
name|'privateBlob'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|test_toOpenSSH
dedent|''
name|'def'
name|'test_toOpenSSH'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the Key object generates OpenSSH keys correctly.\n        """'
newline|'\n'
name|'key'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_lsh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'toString'
op|'('
string|"'openssh'"
op|')'
op|','
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'toString'
op|'('
string|"'openssh'"
op|','
string|"'encrypted'"
op|')'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'privateRSA_openssh_encrypted'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'public'
op|'('
op|')'
op|'.'
name|'toString'
op|'('
string|"'openssh'"
op|')'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|'['
op|':'
op|'-'
number|'8'
op|']'
op|')'
comment|'# no comment'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'public'
op|'('
op|')'
op|'.'
name|'toString'
op|'('
string|"'openssh'"
op|','
string|"'comment'"
op|')'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
newline|'\n'
name|'key'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateDSA_lsh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'toString'
op|'('
string|"'openssh'"
op|')'
op|','
name|'keydata'
op|'.'
name|'privateDSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'public'
op|'('
op|')'
op|'.'
name|'toString'
op|'('
string|"'openssh'"
op|','
string|"'comment'"
op|')'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'publicDSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'public'
op|'('
op|')'
op|'.'
name|'toString'
op|'('
string|"'openssh'"
op|')'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'publicDSA_openssh'
op|'['
op|':'
op|'-'
number|'8'
op|']'
op|')'
comment|'# no comment'
newline|'\n'
nl|'\n'
DECL|function|test_toLSH
dedent|''
name|'def'
name|'test_toLSH'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the Key object generates LSH keys correctly.\n        """'
newline|'\n'
name|'key'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'toString'
op|'('
string|"'lsh'"
op|')'
op|','
name|'keydata'
op|'.'
name|'privateRSA_lsh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'public'
op|'('
op|')'
op|'.'
name|'toString'
op|'('
string|"'lsh'"
op|')'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'publicRSA_lsh'
op|')'
newline|'\n'
name|'key'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateDSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'toString'
op|'('
string|"'lsh'"
op|')'
op|','
name|'keydata'
op|'.'
name|'privateDSA_lsh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'public'
op|'('
op|')'
op|'.'
name|'toString'
op|'('
string|"'lsh'"
op|')'
op|','
nl|'\n'
name|'keydata'
op|'.'
name|'publicDSA_lsh'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_toAgentv3
dedent|''
name|'def'
name|'test_toAgentv3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the Key object generates Agent v3 keys correctly.\n        """'
newline|'\n'
name|'key'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'toString'
op|'('
string|"'agentv3'"
op|')'
op|','
name|'keydata'
op|'.'
name|'privateRSA_agentv3'
op|')'
newline|'\n'
name|'key'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateDSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'toString'
op|'('
string|"'agentv3'"
op|')'
op|','
name|'keydata'
op|'.'
name|'privateDSA_agentv3'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_toStringErrors
dedent|''
name|'def'
name|'test_toStringErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that toString raises errors appropriately.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'keys'
op|'.'
name|'BadKeyError'
op|','
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'rsaObj'
op|')'
op|'.'
name|'toString'
op|','
nl|'\n'
string|"'bad_type'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_sign
dedent|''
name|'def'
name|'test_sign'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the Key object generates correct signatures.\n        """'
newline|'\n'
name|'key'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'sign'
op|'('
string|"''"
op|')'
op|','
name|'self'
op|'.'
name|'rsaSignature'
op|')'
newline|'\n'
name|'key'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateDSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'key'
op|'.'
name|'sign'
op|'('
string|"''"
op|')'
op|','
name|'self'
op|'.'
name|'dsaSignature'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|test_verify
dedent|''
name|'def'
name|'test_verify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the Key object correctly verifies signatures.\n        """'
newline|'\n'
name|'key'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'key'
op|'.'
name|'verify'
op|'('
name|'self'
op|'.'
name|'rsaSignature'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'key'
op|'.'
name|'verify'
op|'('
name|'self'
op|'.'
name|'rsaSignature'
op|','
string|"'a'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'key'
op|'.'
name|'verify'
op|'('
name|'self'
op|'.'
name|'dsaSignature'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'key'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicDSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'key'
op|'.'
name|'verify'
op|'('
name|'self'
op|'.'
name|'dsaSignature'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'key'
op|'.'
name|'verify'
op|'('
name|'self'
op|'.'
name|'dsaSignature'
op|','
string|"'a'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'key'
op|'.'
name|'verify'
op|'('
name|'self'
op|'.'
name|'rsaSignature'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_repr
dedent|''
name|'def'
name|'test_repr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the pretty representation of Key.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'repr'
op|'('
name|'keys'
op|'.'
name|'Key'
op|'('
name|'self'
op|'.'
name|'rsaObj'
op|')'
op|')'
op|','
nl|'\n'
string|'"""<RSA Private Key (0 bits)\nattr e:\n\\t02\nattr d:\n\\t03\nattr n:\n\\t01\nattr q:\n\\t05\nattr p:\n\\t04\nattr u:\n\\t04>"""'
op|')'
newline|'\n'
nl|'\n'
DECL|class|WarningsTestCase
dedent|''
dedent|''
name|'class'
name|'WarningsTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test that deprecated functions warn the user of their deprecation.\n    """'
newline|'\n'
name|'if'
name|'Crypto'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyCrypto"'
newline|'\n'
dedent|''
name|'if'
name|'pyasn1'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o/ PyASN1"'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'keyObject'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_lsh'
op|')'
op|'.'
name|'keyObject'
newline|'\n'
nl|'\n'
DECL|member|test_getPublicKeyString
dedent|''
name|'def'
name|'test_getPublicKeyString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that getPublicKeyString warns with a DeprecationWarning.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"getPublicKeyString is deprecated since Twisted Conch 0.9."'
nl|'\n'
string|'"  Use Key.fromString().blob()."'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'__file__'
op|','
name|'keys'
op|'.'
name|'getPublicKeyString'
op|','
nl|'\n'
name|'data'
op|'='
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_makePublicKeyString
dedent|''
name|'def'
name|'test_makePublicKeyString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that makePublicKeyString warns with a DeprecationWarning.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"makePublicKeyString is deprecated since Twisted Conch 0.9."'
nl|'\n'
string|'"  Use Key(obj).public().toString()."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'makePublicKeyString'
op|','
name|'self'
op|'.'
name|'keyObject'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getPublicKeyObject
dedent|''
name|'def'
name|'test_getPublicKeyObject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that getPublicKeyObject warns with a DeprecationWarning.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"getPublicKeyObject is deprecated since Twisted Conch 0.9."'
nl|'\n'
string|'"  Use Key.fromString()."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'getPublicKeyObject'
op|','
name|'keydata'
op|'.'
name|'publicRSA_lsh'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getPrivateKeyObject
dedent|''
name|'def'
name|'test_getPrivateKeyObject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that getPrivateKeyObject warns with a DeprecationWarning.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"getPrivateKeyObject is deprecated since Twisted Conch 0.9."'
nl|'\n'
string|'"  Use Key.fromString()."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'getPrivateKeyObject'
op|','
name|'data'
op|'='
name|'keydata'
op|'.'
name|'privateRSA_lsh'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_makePrivateKeyString
dedent|''
name|'def'
name|'test_makePrivateKeyString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that makePrivateKeyString warns with a DeprecationWarning.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"makePrivateKeyString is deprecated since Twisted Conch 0.9."'
nl|'\n'
string|'"  Use Key(obj).toString()."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'makePrivateKeyString'
op|','
name|'self'
op|'.'
name|'keyObject'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_makePublicKeyBlob
dedent|''
name|'def'
name|'test_makePublicKeyBlob'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that makePublicKeyBlob warns with a DeprecationWarning.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"makePublicKeyBlob is deprecated since Twisted Conch 0.9."'
nl|'\n'
string|'"  Use Key(obj).blob()."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'makePublicKeyBlob'
op|','
name|'self'
op|'.'
name|'keyObject'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_signData
dedent|''
name|'def'
name|'test_signData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that signData warns with a DeprecationWarning.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"signData is deprecated since Twisted Conch 0.9."'
nl|'\n'
string|'"  Use Key(obj).sign(data)."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'signData'
op|','
name|'self'
op|'.'
name|'keyObject'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_verifySignature
dedent|''
name|'def'
name|'test_verifySignature'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that signData warns with a DeprecationWarning.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"verifySignature is deprecated since Twisted Conch 0.9."'
nl|'\n'
string|'"  Use Key(obj).verify(signature, data)."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'verifySignature'
op|','
name|'self'
op|'.'
name|'keyObject'
op|','
string|"'\\x00\\x00\\x00\\x00'"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_printKey
dedent|''
name|'def'
name|'test_printKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that signData warns with a DeprecationWarning.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"printKey is deprecated since Twisted Conch 0.9."'
nl|'\n'
string|'"  Use repr(Key(obj))."'
op|','
name|'unittest'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'keys'
op|'.'
name|'printKey'
op|','
name|'self'
op|'.'
name|'keyObject'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_cftp -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE file for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.conch.scripts.cftp}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'time'
op|','
name|'sys'
op|','
name|'os'
op|','
name|'operator'
op|','
name|'getpass'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
op|'.'
name|'test_ssh'
name|'import'
name|'Crypto'
op|','
name|'pyasn1'
newline|'\n'
nl|'\n'
DECL|variable|_reason
name|'_reason'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'Crypto'
name|'and'
name|'pyasn1'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'conch'
name|'import'
name|'unix'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'scripts'
name|'import'
name|'cftp'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
op|'.'
name|'test_filetransfer'
name|'import'
name|'FileTransferForTestAvatar'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# Python 2.3 compatibility fix'
nl|'\n'
indent|'        '
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'pop'
op|'('
string|'"twisted.conch.unix"'
op|','
name|'None'
op|')'
newline|'\n'
DECL|variable|unix
name|'unix'
op|'='
name|'None'
newline|'\n'
DECL|variable|_reason
name|'_reason'
op|'='
name|'str'
op|'('
name|'e'
op|')'
newline|'\n'
name|'del'
name|'e'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|unix
indent|'    '
name|'unix'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'fakepwd'
name|'import'
name|'UserDatabase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'portal'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
op|','
name|'protocol'
op|','
name|'interfaces'
op|','
name|'defer'
op|','
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'utils'
name|'import'
name|'getProcessOutputAndValue'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
name|'import'
name|'ls'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'StringTransport'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
name|'import'
name|'test_ssh'
op|','
name|'test_conch'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
op|'.'
name|'test_filetransfer'
name|'import'
name|'SFTPTestBase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
op|'.'
name|'test_filetransfer'
name|'import'
name|'FileTransferTestAvatar'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListingTests
name|'class'
name|'ListingTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{lsLine}, the function which generates an entry for a file or\n    directory in an SFTP I{ls} command\'s output.\n    """'
newline|'\n'
name|'if'
name|'getattr'
op|'('
name|'time'
op|','
string|"'tzset'"
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"Cannot test timestamp formatting code without time.tzset"'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Patch the L{ls} module\'s time function so the results of L{lsLine} are\n        deterministic.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'now'
op|'='
number|'123456789'
newline|'\n'
DECL|function|fakeTime
name|'def'
name|'fakeTime'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'now'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'ls'
op|','
string|"'time'"
op|','
name|'fakeTime'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure that the timezone ends up the same after these tests as'
nl|'\n'
comment|'# it was before.'
nl|'\n'
name|'if'
string|"'TZ'"
name|'in'
name|'os'
op|'.'
name|'environ'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'operator'
op|'.'
name|'setitem'
op|','
name|'os'
op|'.'
name|'environ'
op|','
string|"'TZ'"
op|','
name|'os'
op|'.'
name|'environ'
op|'['
string|"'TZ'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'time'
op|'.'
name|'tzset'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|function|cleanup
indent|'            '
name|'def'
name|'cleanup'
op|'('
op|')'
op|':'
newline|'\n'
comment|"# os.environ.pop is broken!  Don't use it!  Ever!  Or die!"
nl|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'del'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'TZ'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'tzset'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'cleanup'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_lsInTimezone
dedent|''
dedent|''
name|'def'
name|'_lsInTimezone'
op|'('
name|'self'
op|','
name|'timezone'
op|','
name|'stat'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call L{ls.lsLine} after setting the timezone to C{timezone} and return\n        the result.\n        """'
newline|'\n'
comment|'# Set the timezone to a well-known value so the timestamps are'
nl|'\n'
comment|'# predictable.'
nl|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'TZ'"
op|']'
op|'='
name|'timezone'
newline|'\n'
name|'time'
op|'.'
name|'tzset'
op|'('
op|')'
newline|'\n'
name|'return'
name|'ls'
op|'.'
name|'lsLine'
op|'('
string|"'foo'"
op|','
name|'stat'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_oldFile
dedent|''
name|'def'
name|'test_oldFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A file with an mtime six months (approximately) or more in the past has\n        a listing including a low-resolution timestamp.\n        """'
newline|'\n'
comment|"# Go with 7 months.  That's more than 6 months."
nl|'\n'
name|'then'
op|'='
name|'self'
op|'.'
name|'now'
op|'-'
op|'('
number|'60'
op|'*'
number|'60'
op|'*'
number|'24'
op|'*'
number|'31'
op|'*'
number|'7'
op|')'
newline|'\n'
name|'stat'
op|'='
name|'os'
op|'.'
name|'stat_result'
op|'('
op|'('
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
name|'then'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_lsInTimezone'
op|'('
string|"'America/New_York'"
op|','
name|'stat'
op|')'
op|','
nl|'\n'
string|"'!---------    0 0        0               0 Apr 26  1973 foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_lsInTimezone'
op|'('
string|"'Pacific/Auckland'"
op|','
name|'stat'
op|')'
op|','
nl|'\n'
string|"'!---------    0 0        0               0 Apr 27  1973 foo'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_oldSingleDigitDayOfMonth
dedent|''
name|'def'
name|'test_oldSingleDigitDayOfMonth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A file with a high-resolution timestamp which falls on a day of the\n        month which can be represented by one decimal digit is formatted with\n        one padding 0 to preserve the columns which come after it.\n        """'
newline|'\n'
comment|'# A point about 7 months in the past, tweaked to fall on the first of a'
nl|'\n'
comment|'# month so we test the case we want to test.'
nl|'\n'
name|'then'
op|'='
name|'self'
op|'.'
name|'now'
op|'-'
op|'('
number|'60'
op|'*'
number|'60'
op|'*'
number|'24'
op|'*'
number|'31'
op|'*'
number|'7'
op|')'
op|'+'
op|'('
number|'60'
op|'*'
number|'60'
op|'*'
number|'24'
op|'*'
number|'5'
op|')'
newline|'\n'
name|'stat'
op|'='
name|'os'
op|'.'
name|'stat_result'
op|'('
op|'('
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
name|'then'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_lsInTimezone'
op|'('
string|"'America/New_York'"
op|','
name|'stat'
op|')'
op|','
nl|'\n'
string|"'!---------    0 0        0               0 May 01  1973 foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_lsInTimezone'
op|'('
string|"'Pacific/Auckland'"
op|','
name|'stat'
op|')'
op|','
nl|'\n'
string|"'!---------    0 0        0               0 May 02  1973 foo'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_newFile
dedent|''
name|'def'
name|'test_newFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A file with an mtime fewer than six months (approximately) in the past\n        has a listing including a high-resolution timestamp excluding the year.\n        """'
newline|'\n'
comment|'# A point about three months in the past.'
nl|'\n'
name|'then'
op|'='
name|'self'
op|'.'
name|'now'
op|'-'
op|'('
number|'60'
op|'*'
number|'60'
op|'*'
number|'24'
op|'*'
number|'31'
op|'*'
number|'3'
op|')'
newline|'\n'
name|'stat'
op|'='
name|'os'
op|'.'
name|'stat_result'
op|'('
op|'('
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
name|'then'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_lsInTimezone'
op|'('
string|"'America/New_York'"
op|','
name|'stat'
op|')'
op|','
nl|'\n'
string|"'!---------    0 0        0               0 Aug 28 17:33 foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_lsInTimezone'
op|'('
string|"'Pacific/Auckland'"
op|','
name|'stat'
op|')'
op|','
nl|'\n'
string|"'!---------    0 0        0               0 Aug 29 09:33 foo'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_newSingleDigitDayOfMonth
dedent|''
name|'def'
name|'test_newSingleDigitDayOfMonth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A file with a high-resolution timestamp which falls on a day of the\n        month which can be represented by one decimal digit is formatted with\n        one padding 0 to preserve the columns which come after it.\n        """'
newline|'\n'
comment|'# A point about three months in the past, tweaked to fall on the first'
nl|'\n'
comment|'# of a month so we test the case we want to test.'
nl|'\n'
name|'then'
op|'='
name|'self'
op|'.'
name|'now'
op|'-'
op|'('
number|'60'
op|'*'
number|'60'
op|'*'
number|'24'
op|'*'
number|'31'
op|'*'
number|'3'
op|')'
op|'+'
op|'('
number|'60'
op|'*'
number|'60'
op|'*'
number|'24'
op|'*'
number|'4'
op|')'
newline|'\n'
name|'stat'
op|'='
name|'os'
op|'.'
name|'stat_result'
op|'('
op|'('
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
name|'then'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_lsInTimezone'
op|'('
string|"'America/New_York'"
op|','
name|'stat'
op|')'
op|','
nl|'\n'
string|"'!---------    0 0        0               0 Sep 01 17:33 foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_lsInTimezone'
op|'('
string|"'Pacific/Auckland'"
op|','
name|'stat'
op|')'
op|','
nl|'\n'
string|"'!---------    0 0        0               0 Sep 02 09:33 foo'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StdioClientTests
dedent|''
dedent|''
name|'class'
name|'StdioClientTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{cftp.StdioClient}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a L{cftp.StdioClient} hooked up to dummy transport and a fake\n        user database.\n        """'
newline|'\n'
DECL|class|Connection
name|'class'
name|'Connection'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'conn'
op|'='
name|'Connection'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'transport'
op|'.'
name|'localClosed'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'='
name|'cftp'
op|'.'
name|'StdioClient'
op|'('
name|'conn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'database'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'_pwd'
op|'='
name|'UserDatabase'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Intentionally bypassing makeConnection - that triggers some code'
nl|'\n'
comment|'# which uses features not provided by our dumb Connection fake.'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_exec
dedent|''
name|'def'
name|'test_exec'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The I{exec} command runs its arguments locally in a child process\n        using the user\'s shell.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'database'
op|'.'
name|'addUser'
op|'('
nl|'\n'
name|'getpass'
op|'.'
name|'getuser'
op|'('
op|')'
op|','
string|"'secret'"
op|','
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
op|','
number|'1234'
op|','
string|"'foo'"
op|','
string|"'bar'"
op|','
nl|'\n'
name|'sys'
op|'.'
name|'executable'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'_dispatchCommand'
op|'('
string|'"exec print 1 + 2"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"3\\n"'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_execWithoutShell
dedent|''
name|'def'
name|'test_execWithoutShell'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the local user has no shell, the I{exec} command runs its arguments\n        using I{/bin/sh}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'database'
op|'.'
name|'addUser'
op|'('
nl|'\n'
name|'getpass'
op|'.'
name|'getuser'
op|'('
op|')'
op|','
string|"'secret'"
op|','
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
op|','
number|'1234'
op|','
string|"'foo'"
op|','
string|"'bar'"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'_dispatchCommand'
op|'('
string|'"exec echo hello"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"hello\\n"'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_bang
dedent|''
name|'def'
name|'test_bang'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The I{exec} command is run for lines which start with C{"!"}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'database'
op|'.'
name|'addUser'
op|'('
nl|'\n'
name|'getpass'
op|'.'
name|'getuser'
op|'('
op|')'
op|','
string|"'secret'"
op|','
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
op|','
number|'1234'
op|','
string|"'foo'"
op|','
string|"'bar'"
op|','
nl|'\n'
string|"'/bin/sh'"
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'_dispatchCommand'
op|'('
string|'"!echo hello"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|'"hello\\n"'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FileTransferTestRealm
dedent|''
dedent|''
name|'class'
name|'FileTransferTestRealm'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'testDir'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'testDir'
op|'='
name|'testDir'
newline|'\n'
nl|'\n'
DECL|member|requestAvatar
dedent|''
name|'def'
name|'requestAvatar'
op|'('
name|'self'
op|','
name|'avatarID'
op|','
name|'mind'
op|','
op|'*'
name|'interfaces'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'a'
op|'='
name|'FileTransferTestAvatar'
op|'('
name|'self'
op|'.'
name|'testDir'
op|')'
newline|'\n'
name|'return'
name|'interfaces'
op|'['
number|'0'
op|']'
op|','
name|'a'
op|','
name|'lambda'
op|':'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SFTPTestProcess
dedent|''
dedent|''
name|'class'
name|'SFTPTestProcess'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Protocol for testing cftp. Provides an interface between Python (where all\n    the tests are) and the cftp client process (which does the work that is\n    being tested).\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'onOutReceived'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param onOutReceived: A L{Deferred} to be fired as soon as data is\n        received from stdout.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'clearBuffer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'onOutReceived'
op|'='
name|'onOutReceived'
newline|'\n'
name|'self'
op|'.'
name|'onProcessEnd'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_expectingCommand'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_processEnded'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|clearBuffer
dedent|''
name|'def'
name|'clearBuffer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Clear any buffered data received from stdout. Should be private.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'_linesReceived'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_lineBuffer'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|member|outReceived
dedent|''
name|'def'
name|'outReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called by Twisted when the cftp client prints data to stdout.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'got %s'"
op|'%'
name|'data'
op|')'
newline|'\n'
name|'lines'
op|'='
op|'('
name|'self'
op|'.'
name|'_lineBuffer'
op|'+'
name|'data'
op|')'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_lineBuffer'
op|'='
name|'lines'
op|'.'
name|'pop'
op|'('
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_linesReceived'
op|'.'
name|'extend'
op|'('
name|'lines'
op|')'
newline|'\n'
comment|'# XXX - not strictly correct.'
nl|'\n'
comment|"# We really want onOutReceived to fire after the first 'cftp>' prompt"
nl|'\n'
comment|'# has been received. (See use in TestOurServerCmdLineClient.setUp)'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'onOutReceived'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'self'
op|'.'
name|'onOutReceived'
op|'='
name|'self'
op|'.'
name|'onOutReceived'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'buffer'
op|'+='
name|'data'
newline|'\n'
name|'self'
op|'.'
name|'_checkForCommand'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_checkForCommand
dedent|''
name|'def'
name|'_checkForCommand'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'prompt'
op|'='
string|"'cftp> '"
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_expectingCommand'
name|'and'
name|'self'
op|'.'
name|'_lineBuffer'
op|'=='
name|'prompt'
op|':'
newline|'\n'
indent|'            '
name|'buf'
op|'='
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'_linesReceived'
op|')'
newline|'\n'
name|'if'
name|'buf'
op|'.'
name|'startswith'
op|'('
name|'prompt'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'buf'
op|'='
name|'buf'
op|'['
name|'len'
op|'('
name|'prompt'
op|')'
op|':'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'clearBuffer'
op|'('
op|')'
newline|'\n'
name|'d'
op|','
name|'self'
op|'.'
name|'_expectingCommand'
op|'='
name|'self'
op|'.'
name|'_expectingCommand'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'buf'
op|')'
newline|'\n'
nl|'\n'
DECL|member|errReceived
dedent|''
dedent|''
name|'def'
name|'errReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called by Twisted when the cftp client prints data to stderr.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'err: %s'"
op|'%'
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getBuffer
dedent|''
name|'def'
name|'getBuffer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the contents of the buffer of data received from stdout.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'buffer'
newline|'\n'
nl|'\n'
DECL|member|runCommand
dedent|''
name|'def'
name|'runCommand'
op|'('
name|'self'
op|','
name|'command'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Issue the given command via the cftp client. Return a C{Deferred} that\n        fires when the server returns a result. Note that the C{Deferred} will\n        callback even if the server returns some kind of error.\n\n        @param command: A string containing an sftp command.\n\n        @return: A C{Deferred} that fires when the sftp server returns a\n        result. The payload is the server\'s response string.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_expectingCommand'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clearBuffer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'command'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_expectingCommand'
newline|'\n'
nl|'\n'
DECL|member|runScript
dedent|''
name|'def'
name|'runScript'
op|'('
name|'self'
op|','
name|'commands'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run each command in sequence and return a Deferred that fires when all\n        commands are completed.\n\n        @param commands: A list of strings containing sftp commands.\n\n        @return: A C{Deferred} that fires when all commands are completed. The\n        payload is a list of response strings from the server, in the same\n        order as the commands.\n        """'
newline|'\n'
name|'sem'
op|'='
name|'defer'
op|'.'
name|'DeferredSemaphore'
op|'('
number|'1'
op|')'
newline|'\n'
name|'dl'
op|'='
op|'['
name|'sem'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'runCommand'
op|','
name|'command'
op|')'
name|'for'
name|'command'
name|'in'
name|'commands'
op|']'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
name|'dl'
op|')'
newline|'\n'
nl|'\n'
DECL|member|killProcess
dedent|''
name|'def'
name|'killProcess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Kill the process if it is still running.\n\n        If the process is still running, sends a KILL signal to the transport\n        and returns a C{Deferred} which fires when L{processEnded} is called.\n\n        @return: a C{Deferred}.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_processEnded'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'onProcessEnd'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'signalProcess'
op|'('
string|"'KILL'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'onProcessEnd'
newline|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called by Twisted when the cftp client process ends.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_processEnded'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'onProcessEnd'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'self'
op|'.'
name|'onProcessEnd'
op|'='
name|'self'
op|'.'
name|'onProcessEnd'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CFTPClientTestBase
dedent|''
dedent|''
dedent|''
name|'class'
name|'CFTPClientTestBase'
op|'('
name|'SFTPTestBase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'open'
op|'('
string|"'dsa_test.pub'"
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
name|'test_ssh'
op|'.'
name|'publicDSA_openssh'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
string|"'dsa_test'"
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
name|'test_ssh'
op|'.'
name|'privateDSA_openssh'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
string|"'dsa_test'"
op|','
number|'33152'
op|')'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
string|"'kh_test'"
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|"'127.0.0.1 '"
op|'+'
name|'test_ssh'
op|'.'
name|'publicRSA_openssh'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'SFTPTestBase'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startServer
dedent|''
name|'def'
name|'startServer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'realm'
op|'='
name|'FileTransferTestRealm'
op|'('
name|'self'
op|'.'
name|'testDir'
op|')'
newline|'\n'
name|'p'
op|'='
name|'portal'
op|'.'
name|'Portal'
op|'('
name|'realm'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'registerChecker'
op|'('
name|'test_ssh'
op|'.'
name|'ConchTestPublicKeyChecker'
op|'('
op|')'
op|')'
newline|'\n'
name|'fac'
op|'='
name|'test_ssh'
op|'.'
name|'ConchTestServerFactory'
op|'('
op|')'
newline|'\n'
name|'fac'
op|'.'
name|'portal'
op|'='
name|'p'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'fac'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopServer
dedent|''
name|'def'
name|'stopServer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|','
string|"'proto'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_cbStopServer'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'proto'
op|'.'
name|'expectedLoseConnection'
op|'='
number|'1'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'proto'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbStopServer'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_cbStopServer
dedent|''
name|'def'
name|'_cbStopServer'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'f'
name|'in'
op|'['
string|"'dsa_test.pub'"
op|','
string|"'dsa_test'"
op|','
string|"'kh_test'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'remove'
op|'('
name|'f'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'SFTPTestBase'
op|'.'
name|'tearDown'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestOurServerCmdLineClient
dedent|''
dedent|''
name|'class'
name|'TestOurServerCmdLineClient'
op|'('
name|'CFTPClientTestBase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'CFTPClientTestBase'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'startServer'
op|'('
op|')'
newline|'\n'
name|'cmds'
op|'='
op|'('
string|"'-p %i -l testuser '"
nl|'\n'
string|"'--known-hosts kh_test '"
nl|'\n'
string|"'--user-authentications publickey '"
nl|'\n'
string|"'--host-key-algorithms ssh-rsa '"
nl|'\n'
string|"'-i dsa_test '"
nl|'\n'
string|"'-a '"
nl|'\n'
string|"'-v '"
nl|'\n'
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'cmds'
op|'='
name|'test_conch'
op|'.'
name|'_makeArgs'
op|'('
op|'('
name|'cmds'
op|'%'
name|'port'
op|')'
op|'.'
name|'split'
op|'('
op|')'
op|','
name|'mod'
op|'='
string|"'cftp'"
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'running %s %s'"
op|'%'
op|'('
name|'sys'
op|'.'
name|'executable'
op|','
name|'cmds'
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'processProtocol'
op|'='
name|'SFTPTestProcess'
op|'('
name|'d'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'processProtocol'
op|'.'
name|'clearBuffer'
op|'('
op|')'
op|')'
newline|'\n'
name|'env'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'env'
op|'['
string|"'PYTHONPATH'"
op|']'
op|'='
name|'os'
op|'.'
name|'pathsep'
op|'.'
name|'join'
op|'('
name|'sys'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'self'
op|'.'
name|'processProtocol'
op|','
name|'sys'
op|'.'
name|'executable'
op|','
name|'cmds'
op|','
nl|'\n'
name|'env'
op|'='
name|'env'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'stopServer'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'processProtocol'
op|'.'
name|'killProcess'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_killProcess
dedent|''
name|'def'
name|'_killProcess'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'processProtocol'
op|'.'
name|'transport'
op|'.'
name|'signalProcess'
op|'('
string|"'KILL'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'error'
op|'.'
name|'ProcessExitedAlready'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|runCommand
dedent|''
dedent|''
name|'def'
name|'runCommand'
op|'('
name|'self'
op|','
name|'command'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run the given command with the cftp client. Return a C{Deferred} that\n        fires when the command is complete. Payload is the server\'s output for\n        that command.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'processProtocol'
op|'.'
name|'runCommand'
op|'('
name|'command'
op|')'
newline|'\n'
nl|'\n'
DECL|member|runScript
dedent|''
name|'def'
name|'runScript'
op|'('
name|'self'
op|','
op|'*'
name|'commands'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run the given commands with the cftp client. Returns a C{Deferred}\n        that fires when the commands are all complete. The C{Deferred}\'s\n        payload is a list of output for each command.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'processProtocol'
op|'.'
name|'runScript'
op|'('
name|'commands'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCdPwd
dedent|''
name|'def'
name|'testCdPwd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that \'pwd\' reports the current remote directory, that \'lpwd\'\n        reports the current local directory, and that changing to a\n        subdirectory then changing to its parent leaves you in the original\n        remote directory.\n        """'
newline|'\n'
comment|'# XXX - not actually a unit test, see docstring.'
nl|'\n'
name|'homeDir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'testDir'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'runScript'
op|'('
string|"'pwd'"
op|','
string|"'lpwd'"
op|','
string|"'cd testDirectory'"
op|','
string|"'cd ..'"
op|','
string|"'pwd'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'xs'
op|':'
name|'xs'
op|'['
op|':'
number|'3'
op|']'
op|'+'
name|'xs'
op|'['
number|'4'
op|':'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
nl|'\n'
op|'['
name|'homeDir'
op|','
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
op|','
string|"''"
op|','
name|'homeDir'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testChAttrs
dedent|''
name|'def'
name|'testChAttrs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that \'ls -l\' output includes the access permissions and that\n        this output changes appropriately with \'chmod\'.\n        """'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'results'
op|'['
number|'0'
op|']'
op|'.'
name|'startswith'
op|'('
string|"'-rw-r--r--'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'results'
op|'['
number|'1'
op|']'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'results'
op|'['
number|'2'
op|']'
op|'.'
name|'startswith'
op|'('
string|"'----------'"
op|')'
op|','
name|'results'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'results'
op|'['
number|'3'
op|']'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'runScript'
op|'('
string|"'ls -l testfile1'"
op|','
string|"'chmod 0 testfile1'"
op|','
nl|'\n'
string|"'ls -l testfile1'"
op|','
string|"'chmod 644 testfile1'"
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
comment|'# XXX test chgrp/own'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|testList
dedent|''
name|'def'
name|'testList'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check \'ls\' works as expected. Checks for wildcards, hidden files,\n        listing directories and listing empty directories.\n        """'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'results'
op|'['
number|'0'
op|']'
op|','
op|'['
string|"'testDirectory'"
op|','
string|"'testRemoveFile'"
op|','
nl|'\n'
string|"'testRenameFile'"
op|','
string|"'testfile1'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'results'
op|'['
number|'1'
op|']'
op|','
op|'['
string|"'testDirectory'"
op|','
string|"'testRemoveFile'"
op|','
nl|'\n'
string|"'testRenameFile'"
op|','
string|"'testfile1'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'results'
op|'['
number|'2'
op|']'
op|','
op|'['
string|"'testRemoveFile'"
op|','
string|"'testRenameFile'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'results'
op|'['
number|'3'
op|']'
op|','
op|'['
string|"'.testHiddenFile'"
op|','
string|"'testRemoveFile'"
op|','
nl|'\n'
string|"'testRenameFile'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'results'
op|'['
number|'4'
op|']'
op|','
op|'['
string|"''"
op|']'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'runScript'
op|'('
string|"'ls'"
op|','
string|"'ls ../'"
op|'+'
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'self'
op|'.'
name|'testDir'
op|')'
op|','
nl|'\n'
string|"'ls *File'"
op|','
string|"'ls -a *File'"
op|','
string|"'ls -l testDirectory'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'xs'
op|':'
op|'['
name|'x'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
name|'for'
name|'x'
name|'in'
name|'xs'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testHelp
dedent|''
name|'def'
name|'testHelp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that running the \'?\' command returns help.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'runCommand'
op|'('
string|"'?'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
nl|'\n'
name|'cftp'
op|'.'
name|'StdioClient'
op|'('
name|'None'
op|')'
op|'.'
name|'cmd_HELP'
op|'('
string|"''"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|assertFilesEqual
dedent|''
name|'def'
name|'assertFilesEqual'
op|'('
name|'self'
op|','
name|'name1'
op|','
name|'name2'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that the files at C{name1} and C{name2} contain exactly the\n        same data.\n        """'
newline|'\n'
name|'f1'
op|'='
name|'file'
op|'('
name|'name1'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'f2'
op|'='
name|'file'
op|'('
name|'name2'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'f1'
op|','
name|'f2'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testGet
dedent|''
name|'def'
name|'testGet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that \'get\' saves the remote file to the correct local location,\n        that the output of \'get\' is correct and that \'rm\' actually removes\n        the file.\n        """'
newline|'\n'
comment|'# XXX - not actually a unit test'
nl|'\n'
name|'expectedOutput'
op|'='
op|'('
string|'"Transferred %s/%s/testfile1 to %s/test file2"'
nl|'\n'
op|'%'
op|'('
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'testDir'
op|','
name|'self'
op|'.'
name|'testDir'
op|')'
op|')'
newline|'\n'
DECL|function|_checkGet
name|'def'
name|'_checkGet'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'result'
op|'.'
name|'endswith'
op|'('
name|'expectedOutput'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFilesEqual'
op|'('
name|'self'
op|'.'
name|'testDir'
op|'+'
string|"'/testfile1'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'testDir'
op|'+'
string|"'/test file2'"
op|','
nl|'\n'
string|'"get failed"'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'runCommand'
op|'('
string|'\'rm "test file2"\''
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'runCommand'
op|'('
string|'\'get testfile1 "%s/test file2"\''
op|'%'
op|'('
name|'self'
op|'.'
name|'testDir'
op|','
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_checkGet'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'failIf'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'testDir'
op|'+'
string|"'/test file2'"
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testWildcardGet
dedent|''
name|'def'
name|'testWildcardGet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that \'get\' works correctly when given wildcard parameters.\n        """'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFilesEqual'
op|'('
name|'self'
op|'.'
name|'testDir'
op|'+'
string|"'/testRemoveFile'"
op|','
nl|'\n'
string|"'testRemoveFile'"
op|','
nl|'\n'
string|"'testRemoveFile get failed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFilesEqual'
op|'('
name|'self'
op|'.'
name|'testDir'
op|'+'
string|"'/testRenameFile'"
op|','
nl|'\n'
string|"'testRenameFile'"
op|','
nl|'\n'
string|"'testRenameFile get failed'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'runCommand'
op|'('
string|"'get testR*'"
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testPut
dedent|''
name|'def'
name|'testPut'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that \'put\' uploads files correctly and that they can be\n        successfully removed. Also check the output of the put command.\n        """'
newline|'\n'
comment|'# XXX - not actually a unit test'
nl|'\n'
name|'expectedOutput'
op|'='
op|'('
string|'\'Transferred %s/testfile1 to %s/%s/test"file2\''
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'testDir'
op|','
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'testDir'
op|')'
op|')'
newline|'\n'
DECL|function|_checkPut
name|'def'
name|'_checkPut'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFilesEqual'
op|'('
name|'self'
op|'.'
name|'testDir'
op|'+'
string|"'/testfile1'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'testDir'
op|'+'
string|'\'/test"file2\''
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'result'
op|'.'
name|'endswith'
op|'('
name|'expectedOutput'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'runCommand'
op|'('
string|'\'rm "test\\\\"file2"\''
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'runCommand'
op|'('
string|'\'put %s/testfile1 "test\\\\"file2"\''
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'testDir'
op|','
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_checkPut'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'failIf'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'testDir'
op|'+'
string|'\'/test"file2\''
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_putOverLongerFile
dedent|''
name|'def'
name|'test_putOverLongerFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that \'put\' uploads files correctly when overwriting a longer\n        file.\n        """'
newline|'\n'
comment|'# XXX - not actually a unit test'
nl|'\n'
name|'f'
op|'='
name|'file'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testDir'
op|','
string|"'shorterFile'"
op|')'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|'"a"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'file'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testDir'
op|','
string|"'longerFile'"
op|')'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|'"bb"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
DECL|function|_checkPut
name|'def'
name|'_checkPut'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFilesEqual'
op|'('
name|'self'
op|'.'
name|'testDir'
op|'+'
string|"'/shorterFile'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'testDir'
op|'+'
string|"'/longerFile'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'runCommand'
op|'('
string|"'put %s/shorterFile longerFile'"
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'testDir'
op|','
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_checkPut'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_putMultipleOverLongerFile
dedent|''
name|'def'
name|'test_putMultipleOverLongerFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that \'put\' uploads files correctly when overwriting a longer\n        file and you use a wildcard to specify the files to upload.\n        """'
newline|'\n'
comment|'# XXX - not actually a unit test'
nl|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testDir'
op|','
string|"'dir'"
op|')'
op|')'
newline|'\n'
name|'f'
op|'='
name|'file'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testDir'
op|','
string|"'dir'"
op|','
string|"'file'"
op|')'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|'"a"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'file'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testDir'
op|','
string|"'file'"
op|')'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|'"bb"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
DECL|function|_checkPut
name|'def'
name|'_checkPut'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFilesEqual'
op|'('
name|'self'
op|'.'
name|'testDir'
op|'+'
string|"'/dir/file'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'testDir'
op|'+'
string|"'/file'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'runCommand'
op|'('
string|"'put %s/dir/*'"
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'testDir'
op|','
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_checkPut'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testWildcardPut
dedent|''
name|'def'
name|'testWildcardPut'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        What happens if you issue a \'put\' command and include a wildcard (i.e.\n        \'*\') in parameter? Check that all files matching the wildcard are\n        uploaded to the correct directory.\n        """'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'results'
op|'['
number|'0'
op|']'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'results'
op|'['
number|'2'
op|']'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFilesEqual'
op|'('
name|'self'
op|'.'
name|'testDir'
op|'+'
string|"'/testRemoveFile'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'testDir'
op|'+'
string|"'/../testRemoveFile'"
op|','
nl|'\n'
string|"'testRemoveFile get failed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFilesEqual'
op|'('
name|'self'
op|'.'
name|'testDir'
op|'+'
string|"'/testRenameFile'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'testDir'
op|'+'
string|"'/../testRenameFile'"
op|','
nl|'\n'
string|"'testRenameFile get failed'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'runScript'
op|'('
string|"'cd ..'"
op|','
nl|'\n'
string|"'put %s/testR*'"
op|'%'
op|'('
name|'self'
op|'.'
name|'testDir'
op|','
op|')'
op|','
nl|'\n'
string|"'cd %s'"
op|'%'
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'self'
op|'.'
name|'testDir'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testLink
dedent|''
name|'def'
name|'testLink'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that \'ln\' creates a file which appears as a link in the output of\n        \'ls\'. Check that removing the new file succeeds without output.\n        """'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'results'
op|'['
number|'0'
op|']'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'results'
op|'['
number|'1'
op|']'
op|'.'
name|'startswith'
op|'('
string|"'l'"
op|')'
op|','
string|"'link failed'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'runCommand'
op|'('
string|"'rm testLink'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'runScript'
op|'('
string|"'ln testLink testfile1'"
op|','
string|"'ls -l testLink'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
string|"''"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testRemoteDirectory
dedent|''
name|'def'
name|'testRemoteDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that we can create and remove directories with the cftp client.\n        """'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'results'
op|'['
number|'0'
op|']'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'results'
op|'['
number|'1'
op|']'
op|'.'
name|'startswith'
op|'('
string|"'d'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'runCommand'
op|'('
string|"'rmdir testMakeDirectory'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'runScript'
op|'('
string|"'mkdir testMakeDirectory'"
op|','
nl|'\n'
string|"'ls -l testMakeDirector?'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
string|"''"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_existingRemoteDirectory
dedent|''
name|'def'
name|'test_existingRemoteDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a C{mkdir} on an existing directory fails with the\n        appropriate error, and doesn\'t log an useless error server side.\n        """'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'results'
op|'['
number|'0'
op|']'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'results'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|"'remote error 11: mkdir failed'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'runScript'
op|'('
string|"'mkdir testMakeDirectory'"
op|','
nl|'\n'
string|"'mkdir testMakeDirectory'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testLocalDirectory
dedent|''
name|'def'
name|'testLocalDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that we can create a directory locally and remove it with the\n        cftp client. This test works because the \'remote\' server is running\n        out of a local directory.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'runCommand'
op|'('
string|"'lmkdir %s/testLocalDirectory'"
op|'%'
op|'('
name|'self'
op|'.'
name|'testDir'
op|','
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
string|"''"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'runCommand'
op|'('
string|"'rmdir testLocalDirectory'"
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
string|"''"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testRename
dedent|''
name|'def'
name|'testRename'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that we can rename a file.\n        """'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'results'
op|'['
number|'0'
op|']'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'results'
op|'['
number|'1'
op|']'
op|','
string|"'testfile2'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'runCommand'
op|'('
string|"'rename testfile2 testfile1'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'runScript'
op|'('
string|"'rename testfile1 testfile2'"
op|','
string|"'ls testfile?'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
string|"''"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestOurServerBatchFile
dedent|''
dedent|''
name|'class'
name|'TestOurServerBatchFile'
op|'('
name|'CFTPClientTestBase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'CFTPClientTestBase'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'startServer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'CFTPClientTestBase'
op|'.'
name|'tearDown'
op|'('
name|'self'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'stopServer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_getBatchOutput
dedent|''
name|'def'
name|'_getBatchOutput'
op|'('
name|'self'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fn'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'open'
op|'('
name|'fn'
op|','
string|"'w'"
op|')'
op|'.'
name|'write'
op|'('
name|'f'
op|')'
newline|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'cmds'
op|'='
op|'('
string|"'-p %i -l testuser '"
nl|'\n'
string|"'--known-hosts kh_test '"
nl|'\n'
string|"'--user-authentications publickey '"
nl|'\n'
string|"'--host-key-algorithms ssh-rsa '"
nl|'\n'
string|"'-i dsa_test '"
nl|'\n'
string|"'-a '"
nl|'\n'
string|"'-v -b %s 127.0.0.1'"
op|')'
op|'%'
op|'('
name|'port'
op|','
name|'fn'
op|')'
newline|'\n'
name|'cmds'
op|'='
name|'test_conch'
op|'.'
name|'_makeArgs'
op|'('
name|'cmds'
op|'.'
name|'split'
op|'('
op|')'
op|','
name|'mod'
op|'='
string|"'cftp'"
op|')'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'running %s %s'"
op|'%'
op|'('
name|'sys'
op|'.'
name|'executable'
op|','
name|'cmds'
op|')'
op|')'
newline|'\n'
name|'env'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'env'
op|'['
string|"'PYTHONPATH'"
op|']'
op|'='
name|'os'
op|'.'
name|'pathsep'
op|'.'
name|'join'
op|'('
name|'sys'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'expectedLoseConnection'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'getProcessOutputAndValue'
op|'('
name|'sys'
op|'.'
name|'executable'
op|','
name|'cmds'
op|','
name|'env'
op|'='
name|'env'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_cleanup
name|'def'
name|'_cleanup'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'remove'
op|'('
name|'fn'
op|')'
newline|'\n'
name|'return'
name|'res'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'res'
op|':'
name|'res'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'_cleanup'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testBatchFile
dedent|''
name|'def'
name|'testBatchFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test whether batch file function of cftp (\'cftp -b batchfile\').\n        This works by treating the file as a list of commands to be run.\n        """'
newline|'\n'
name|'cmds'
op|'='
string|'"""pwd\nls\nexit\n"""'
newline|'\n'
DECL|function|_cbCheckResult
name|'def'
name|'_cbCheckResult'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
name|'res'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'RES %s'"
op|'%'
name|'str'
op|'('
name|'res'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'res'
op|'['
number|'1'
op|']'
op|'.'
name|'find'
op|'('
name|'self'
op|'.'
name|'testDir'
op|')'
op|'!='
op|'-'
number|'1'
op|','
name|'repr'
op|'('
name|'res'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'res'
op|'['
number|'3'
op|':'
op|'-'
number|'2'
op|']'
op|','
op|'['
string|"'testDirectory'"
op|','
string|"'testRemoveFile'"
op|','
nl|'\n'
string|"'testRenameFile'"
op|','
string|"'testfile1'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'_getBatchOutput'
op|'('
name|'cmds'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_cbCheckResult'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|testError
dedent|''
name|'def'
name|'testError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test that an error in the batch file stops running the batch.\n        """'
newline|'\n'
name|'cmds'
op|'='
string|'"""chown 0 missingFile\npwd\nexit\n"""'
newline|'\n'
DECL|function|_cbCheckResult
name|'def'
name|'_cbCheckResult'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'res'
op|'.'
name|'find'
op|'('
name|'self'
op|'.'
name|'testDir'
op|')'
op|'!='
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'_getBatchOutput'
op|'('
name|'cmds'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_cbCheckResult'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|testIgnoredError
dedent|''
name|'def'
name|'testIgnoredError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test that a minus sign \'-\' at the front of a line ignores\n        any errors.\n        """'
newline|'\n'
name|'cmds'
op|'='
string|'"""-chown 0 missingFile\npwd\nexit\n"""'
newline|'\n'
DECL|function|_cbCheckResult
name|'def'
name|'_cbCheckResult'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'res'
op|'.'
name|'find'
op|'('
name|'self'
op|'.'
name|'testDir'
op|')'
op|'=='
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'_getBatchOutput'
op|'('
name|'cmds'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_cbCheckResult'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestOurServerSftpClient
dedent|''
dedent|''
name|'class'
name|'TestOurServerSftpClient'
op|'('
name|'CFTPClientTestBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test the sftp server against sftp command line client.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'CFTPClientTestBase'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'startServer'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'stopServer'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_extendedAttributes
dedent|''
name|'def'
name|'test_extendedAttributes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the return of extended attributes by the server: the sftp client\n        should ignore them, but still be able to parse the response correctly.\n\n        This test is mainly here to check that\n        L{filetransfer.FILEXFER_ATTR_EXTENDED} has the correct value.\n        """'
newline|'\n'
name|'fn'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'open'
op|'('
name|'fn'
op|','
string|"'w'"
op|')'
op|'.'
name|'write'
op|'('
string|'"ls .\\nexit"'
op|')'
newline|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
name|'oldGetAttr'
op|'='
name|'FileTransferForTestAvatar'
op|'.'
name|'_getAttrs'
newline|'\n'
DECL|function|_getAttrs
name|'def'
name|'_getAttrs'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'attrs'
op|'='
name|'oldGetAttr'
op|'('
name|'self'
op|','
name|'s'
op|')'
newline|'\n'
name|'attrs'
op|'['
string|'"ext_foo"'
op|']'
op|'='
string|'"bar"'
newline|'\n'
name|'return'
name|'attrs'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'FileTransferForTestAvatar'
op|','
string|'"_getAttrs"'
op|','
name|'_getAttrs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'expectedLoseConnection'
op|'='
name|'True'
newline|'\n'
name|'cmds'
op|'='
op|'('
string|"'-o'"
op|','
string|"'IdentityFile=dsa_test'"
op|','
nl|'\n'
string|"'-o'"
op|','
string|"'UserKnownHostsFile=kh_test'"
op|','
nl|'\n'
string|"'-o'"
op|','
string|"'HostKeyAlgorithms=ssh-rsa'"
op|','
nl|'\n'
string|"'-o'"
op|','
string|"'Port=%i'"
op|'%'
op|'('
name|'port'
op|','
op|')'
op|','
string|"'-b'"
op|','
name|'fn'
op|','
string|"'testuser@127.0.0.1'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'getProcessOutputAndValue'
op|'('
string|'"sftp"'
op|','
name|'cmds'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'['
number|'2'
op|']'
op|','
number|'0'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
op|'['
string|"'testDirectory'"
op|','
string|"'testRemoveFile'"
op|','
nl|'\n'
string|"'testRenameFile'"
op|','
string|"'testfile1'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'i'
op|','
name|'result'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'unix'
name|'is'
name|'None'
name|'or'
name|'Crypto'
name|'is'
name|'None'
name|'or'
name|'pyasn1'
name|'is'
name|'None'
name|'or'
name|'interfaces'
op|'.'
name|'IReactorProcess'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'_reason'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'_reason'
op|'='
string|'"don\'t run w/o spawnProcess or PyCrypto or pyasn1"'
newline|'\n'
dedent|''
name|'TestOurServerCmdLineClient'
op|'.'
name|'skip'
op|'='
name|'_reason'
newline|'\n'
name|'TestOurServerBatchFile'
op|'.'
name|'skip'
op|'='
name|'_reason'
newline|'\n'
name|'TestOurServerSftpClient'
op|'.'
name|'skip'
op|'='
name|'_reason'
newline|'\n'
name|'StdioClientTests'
op|'.'
name|'skip'
op|'='
name|'_reason'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'procutils'
name|'import'
name|'which'
newline|'\n'
name|'if'
name|'not'
name|'which'
op|'('
string|"'sftp'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'TestOurServerSftpClient'
op|'.'
name|'skip'
op|'='
string|'"no sftp command-line client available"'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details'
nl|'\n'
nl|'\n'
string|'"""\nThis module tests twisted.conch.ssh.connection.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'struct'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
name|'import'
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
name|'import'
name|'channel'
op|','
name|'common'
op|','
name|'connection'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
name|'import'
name|'test_userauth'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestChannel
name|'class'
name|'TestChannel'
op|'('
name|'channel'
op|'.'
name|'SSHChannel'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mocked-up version of twisted.conch.ssh.channel.SSHChannel.\n\n    @ivar gotOpen: True if channelOpen has been called.\n    @type gotOpen: C{bool}\n    @ivar specificData: the specific channel open data passed to channelOpen.\n    @type specificData: C{str}\n    @ivar openFailureReason: the reason passed to openFailed.\n    @type openFailed: C{error.ConchError}\n    @ivar inBuffer: a C{list} of strings received by the channel.\n    @type inBuffer: C{list}\n    @ivar extBuffer: a C{list} of 2-tuples (type, extended data) of received by\n        the channel.\n    @type extBuffer: C{list}\n    @ivar numberRequests: the number of requests that have been made to this\n        channel.\n    @type numberRequests: C{int}\n    @ivar gotEOF: True if the other side sent EOF.\n    @type gotEOF: C{bool}\n    @ivar gotOneClose: True if the other side closed the connection.\n    @type gotOneClose: C{bool}\n    @ivar gotClosed: True if the channel is closed.\n    @type gotClosed: C{bool}\n    """'
newline|'\n'
DECL|variable|name
name|'name'
op|'='
string|'"TestChannel"'
newline|'\n'
DECL|variable|gotOpen
name|'gotOpen'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|logPrefix
name|'def'
name|'logPrefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"TestChannel %i"'
op|'%'
name|'self'
op|'.'
name|'id'
newline|'\n'
nl|'\n'
DECL|member|channelOpen
dedent|''
name|'def'
name|'channelOpen'
op|'('
name|'self'
op|','
name|'specificData'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The channel is open.  Set up the instance variables.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'gotOpen'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'specificData'
op|'='
name|'specificData'
newline|'\n'
name|'self'
op|'.'
name|'inBuffer'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'extBuffer'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'numberRequests'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'gotEOF'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'gotOneClose'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'gotClosed'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|openFailed
dedent|''
name|'def'
name|'openFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Opening the channel failed.  Store the reason why.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'openFailureReason'
op|'='
name|'reason'
newline|'\n'
nl|'\n'
DECL|member|request_test
dedent|''
name|'def'
name|'request_test'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A test request.  Return True if data is \'data\'.\n\n        @type data: C{str}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'numberRequests'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'data'
op|'=='
string|"'data'"
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Data was received.  Store it in the buffer.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'inBuffer'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|extReceived
dedent|''
name|'def'
name|'extReceived'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Extended data was received.  Store it in the buffer.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'extBuffer'
op|'.'
name|'append'
op|'('
op|'('
name|'code'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|eofReceived
dedent|''
name|'def'
name|'eofReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        EOF was received.  Remember it.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'gotEOF'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|closeReceived
dedent|''
name|'def'
name|'closeReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close was received.  Remember it.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'gotOneClose'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|closed
dedent|''
name|'def'
name|'closed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The channel is closed.  Rembember it.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'gotClosed'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|class|TestAvatar
dedent|''
dedent|''
name|'class'
name|'TestAvatar'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mocked-up version of twisted.conch.avatar.ConchUser\n    """'
newline|'\n'
nl|'\n'
DECL|member|lookupChannel
name|'def'
name|'lookupChannel'
op|'('
name|'self'
op|','
name|'channelType'
op|','
name|'windowSize'
op|','
name|'maxPacket'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The server wants us to return a channel.  If the requested channel is\n        our TestChannel, return it, otherwise return None.\n        """'
newline|'\n'
name|'if'
name|'channelType'
op|'=='
name|'TestChannel'
op|'.'
name|'name'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'TestChannel'
op|'('
name|'remoteWindow'
op|'='
name|'windowSize'
op|','
nl|'\n'
name|'remoteMaxPacket'
op|'='
name|'maxPacket'
op|','
nl|'\n'
name|'data'
op|'='
name|'data'
op|','
name|'avatar'
op|'='
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|gotGlobalRequest
dedent|''
dedent|''
name|'def'
name|'gotGlobalRequest'
op|'('
name|'self'
op|','
name|'requestType'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The client has made a global request.  If the global request is\n        \'TestGlobal\', return True.  If the global request is \'TestData\',\n        return True and the request-specific data we received.  Otherwise,\n        return False.\n        """'
newline|'\n'
name|'if'
name|'requestType'
op|'=='
string|"'TestGlobal'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'requestType'
op|'=='
string|"'TestData'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
op|','
name|'data'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|class|TestConnection
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestConnection'
op|'('
name|'connection'
op|'.'
name|'SSHConnection'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A subclass of SSHConnection for testing.\n\n    @ivar channel: the current channel.\n    @type channel. C{TestChannel}\n    """'
newline|'\n'
nl|'\n'
DECL|member|logPrefix
name|'def'
name|'logPrefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"TestConnection"'
newline|'\n'
nl|'\n'
DECL|member|global_TestGlobal
dedent|''
name|'def'
name|'global_TestGlobal'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side made the \'TestGlobal\' global request.  Return True.\n        """'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|global_Test_Data
dedent|''
name|'def'
name|'global_Test_Data'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side made the \'Test-Data\' global request.  Return True and\n        the data we received.\n        """'
newline|'\n'
name|'return'
name|'True'
op|','
name|'data'
newline|'\n'
nl|'\n'
DECL|member|channel_TestChannel
dedent|''
name|'def'
name|'channel_TestChannel'
op|'('
name|'self'
op|','
name|'windowSize'
op|','
name|'maxPacket'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side is requesting the TestChannel.  Create a C{TestChannel}\n        instance, store it, and return it.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'='
name|'TestChannel'
op|'('
name|'remoteWindow'
op|'='
name|'windowSize'
op|','
nl|'\n'
name|'remoteMaxPacket'
op|'='
name|'maxPacket'
op|','
name|'data'
op|'='
name|'data'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
newline|'\n'
nl|'\n'
DECL|member|channel_ErrorChannel
dedent|''
name|'def'
name|'channel_ErrorChannel'
op|'('
name|'self'
op|','
name|'windowSize'
op|','
name|'maxPacket'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The other side is requesting the ErrorChannel.  Raise an exception.\n        """'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|"'no such thing'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConnectionTestCase
dedent|''
dedent|''
name|'class'
name|'ConnectionTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'if'
name|'test_userauth'
op|'.'
name|'transport'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"Cannot run without PyCrypto"'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'='
name|'test_userauth'
op|'.'
name|'FakeTransport'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'avatar'
op|'='
name|'TestAvatar'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'='
name|'TestConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'transport'
op|'='
name|'self'
op|'.'
name|'transport'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'serviceStarted'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_openChannel
dedent|''
name|'def'
name|'_openChannel'
op|'('
name|'self'
op|','
name|'channel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Open the channel with the default connection.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_OPEN_CONFIRMATION'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'>2L'"
op|','
nl|'\n'
name|'channel'
op|'.'
name|'id'
op|','
number|'255'
op|')'
op|'+'
string|"'\\x00\\x02\\x00\\x00\\x00\\x00\\x80\\x00'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'conn'
op|'.'
name|'serviceStopped'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_linkAvatar
dedent|''
name|'def'
name|'test_linkAvatar'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the connection links itself to the avatar in the\n        transport.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'avatar'
op|'.'
name|'conn'
op|','
name|'self'
op|'.'
name|'conn'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_serviceStopped
dedent|''
name|'def'
name|'test_serviceStopped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that serviceStopped() closes any open channels.\n        """'
newline|'\n'
name|'channel1'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'channel2'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'openChannel'
op|'('
name|'channel1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'openChannel'
op|'('
name|'channel2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_OPEN_CONFIRMATION'
op|'('
string|"'\\x00\\x00\\x00\\x00'"
op|'*'
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'channel1'
op|'.'
name|'gotOpen'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'channel2'
op|'.'
name|'gotOpen'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'serviceStopped'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'channel1'
op|'.'
name|'gotClosed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GLOBAL_REQUEST
dedent|''
name|'def'
name|'test_GLOBAL_REQUEST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that global request packets are dispatched to the global_*\n        methods and the return values are translated into success or failure\n        messages.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_GLOBAL_REQUEST'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
string|"'TestGlobal'"
op|')'
op|'+'
string|"'\\xff'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_REQUEST_SUCCESS'
op|','
string|"''"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_GLOBAL_REQUEST'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
string|"'TestData'"
op|')'
op|'+'
string|"'\\xff'"
op|'+'
nl|'\n'
string|"'test data'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_REQUEST_SUCCESS'
op|','
string|"'test data'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_GLOBAL_REQUEST'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
string|"'TestBad'"
op|')'
op|'+'
string|"'\\xff'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_REQUEST_FAILURE'
op|','
string|"''"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_GLOBAL_REQUEST'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
string|"'TestGlobal'"
op|')'
op|'+'
string|"'\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_REQUEST_SUCCESS
dedent|''
name|'def'
name|'test_REQUEST_SUCCESS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that global request success packets cause the Deferred to be\n        called back.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendGlobalRequest'
op|'('
string|"'request'"
op|','
string|"'data'"
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_REQUEST_SUCCESS'
op|'('
string|"'data'"
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'data'
op|','
string|"'data'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'fail'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_REQUEST_FAILURE
dedent|''
name|'def'
name|'test_REQUEST_FAILURE'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that global request failure packets cause the Deferred to be\n        erred back.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendGlobalRequest'
op|'('
string|"'request'"
op|','
string|"'data'"
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_REQUEST_FAILURE'
op|'('
string|"'data'"
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'f'
op|'.'
name|'value'
op|'.'
name|'data'
op|','
string|"'data'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'fail'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_CHANNEL_OPEN
dedent|''
name|'def'
name|'test_CHANNEL_OPEN'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that open channel packets cause a channel to be created and\n        opened or a failure message to be returned.\n        """'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'avatar'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_OPEN'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
string|"'TestChannel'"
op|')'
op|'+'
nl|'\n'
string|"'\\x00\\x00\\x00\\x01'"
op|'*'
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'channel'
op|'.'
name|'gotOpen'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'channel'
op|'.'
name|'conn'
op|','
name|'self'
op|'.'
name|'conn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'channel'
op|'.'
name|'data'
op|','
string|"'\\x00\\x00\\x00\\x01'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'channel'
op|'.'
name|'specificData'
op|','
string|"'\\x00\\x00\\x00\\x01'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'channel'
op|'.'
name|'remoteWindowLeft'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'channel'
op|'.'
name|'remoteMaxPacket'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_OPEN_CONFIRMATION'
op|','
nl|'\n'
string|"'\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00'"
nl|'\n'
string|"'\\x00\\x00\\x80\\x00'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_OPEN'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
string|"'BadChannel'"
op|')'
op|'+'
nl|'\n'
string|"'\\x00\\x00\\x00\\x02'"
op|'*'
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_OPEN_FAILURE'
op|','
nl|'\n'
string|"'\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03'"
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
nl|'\n'
string|"'unknown channel'"
op|')'
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
string|"''"
op|')'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_OPEN'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
string|"'ErrorChannel'"
op|')'
op|'+'
nl|'\n'
string|"'\\x00\\x00\\x00\\x02'"
op|'*'
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_OPEN_FAILURE'
op|','
nl|'\n'
string|"'\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x02'"
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
nl|'\n'
string|"'unknown failure'"
op|')'
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
string|"''"
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_CHANNEL_OPEN_CONFIRMATION
dedent|''
name|'def'
name|'test_CHANNEL_OPEN_CONFIRMATION'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel open confirmation packets cause the channel to be\n        notified that it\'s open.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_OPEN_CONFIRMATION'
op|'('
string|"'\\x00\\x00\\x00\\x00'"
op|'*'
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'remoteWindowLeft'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'remoteMaxPacket'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'specificData'
op|','
string|"'\\x00\\x00\\x00\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'channelsToRemoteChannel'
op|'['
name|'channel'
op|']'
op|','
nl|'\n'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'localToRemoteChannel'
op|'['
number|'0'
op|']'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_CHANNEL_OPEN_FAILURE
dedent|''
name|'def'
name|'test_CHANNEL_OPEN_FAILURE'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel open failure packets cause the channel to be\n        notified that its opening failed.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_OPEN_FAILURE'
op|'('
string|"'\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"
nl|'\n'
string|"'\\x01'"
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
string|"'failure!'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'openFailureReason'
op|'.'
name|'args'
op|','
op|'('
string|"'failure!'"
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'channels'
op|'.'
name|'get'
op|'('
name|'channel'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_CHANNEL_WINDOW_ADJUST
dedent|''
name|'def'
name|'test_CHANNEL_WINDOW_ADJUST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel window adjust messages add bytes to the channel\n        window.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'oldWindowSize'
op|'='
name|'channel'
op|'.'
name|'remoteWindowLeft'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_WINDOW_ADJUST'
op|'('
string|"'\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"
nl|'\n'
string|"'\\x01'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'remoteWindowLeft'
op|','
name|'oldWindowSize'
op|'+'
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_CHANNEL_DATA
dedent|''
name|'def'
name|'test_CHANNEL_DATA'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel data messages are passed up to the channel, or\n        cause the channel to be closed if the data is too large.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
name|'localWindow'
op|'='
number|'6'
op|','
name|'localMaxPacket'
op|'='
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_DATA'
op|'('
string|"'\\x00\\x00\\x00\\x00'"
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
string|"'data'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'inBuffer'
op|','
op|'['
string|"'data'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_WINDOW_ADJUST'
op|','
string|"'\\x00\\x00\\x00\\xff'"
nl|'\n'
string|"'\\x00\\x00\\x00\\x04'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
name|'longData'
op|'='
string|"'a'"
op|'*'
op|'('
name|'channel'
op|'.'
name|'localWindowLeft'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_DATA'
op|'('
string|"'\\x00\\x00\\x00\\x00'"
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
name|'longData'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'inBuffer'
op|','
op|'['
string|"'data'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_CLOSE'
op|','
string|"'\\x00\\x00\\x00\\xff'"
op|')'
op|']'
op|')'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'bigData'
op|'='
string|"'a'"
op|'*'
op|'('
name|'channel'
op|'.'
name|'localMaxPacket'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_DATA'
op|'('
string|"'\\x00\\x00\\x00\\x01'"
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
name|'bigData'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'inBuffer'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_CLOSE'
op|','
string|"'\\x00\\x00\\x00\\xff'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_CHANNEL_EXTENDED_DATA
dedent|''
name|'def'
name|'test_CHANNEL_EXTENDED_DATA'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel extended data messages are passed up to the channel,\n        or cause the channel to be closed if they\'re too big.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
name|'localWindow'
op|'='
number|'6'
op|','
name|'localMaxPacket'
op|'='
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_EXTENDED_DATA'
op|'('
string|"'\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"
nl|'\n'
string|"'\\x00'"
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
string|"'data'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'extBuffer'
op|','
op|'['
op|'('
number|'0'
op|','
string|"'data'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_WINDOW_ADJUST'
op|','
string|"'\\x00\\x00\\x00\\xff'"
nl|'\n'
string|"'\\x00\\x00\\x00\\x04'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
name|'longData'
op|'='
string|"'a'"
op|'*'
op|'('
name|'channel'
op|'.'
name|'localWindowLeft'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_EXTENDED_DATA'
op|'('
string|"'\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"
nl|'\n'
string|"'\\x00'"
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
name|'longData'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'extBuffer'
op|','
op|'['
op|'('
number|'0'
op|','
string|"'data'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_CLOSE'
op|','
string|"'\\x00\\x00\\x00\\xff'"
op|')'
op|']'
op|')'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'bigData'
op|'='
string|"'a'"
op|'*'
op|'('
name|'channel'
op|'.'
name|'localMaxPacket'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_EXTENDED_DATA'
op|'('
string|"'\\x00\\x00\\x00\\x01\\x00\\x00\\x00'"
nl|'\n'
string|"'\\x00'"
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
name|'bigData'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'extBuffer'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_CLOSE'
op|','
string|"'\\x00\\x00\\x00\\xff'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_CHANNEL_EOF
dedent|''
name|'def'
name|'test_CHANNEL_EOF'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel eof messages are passed up to the channel.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_EOF'
op|'('
string|"'\\x00\\x00\\x00\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'channel'
op|'.'
name|'gotEOF'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_CHANNEL_CLOSE
dedent|''
name|'def'
name|'test_CHANNEL_CLOSE'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel close messages are passed up to the channel.  Also,\n        test that channel.close() is called if both sides are closed when this\n        message is received.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendClose'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_CLOSE'
op|'('
string|"'\\x00\\x00\\x00\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'channel'
op|'.'
name|'gotOneClose'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'channel'
op|'.'
name|'gotClosed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_CHANNEL_REQUEST_success
dedent|''
name|'def'
name|'test_CHANNEL_REQUEST_success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel requests that succeed send MSG_CHANNEL_SUCCESS.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_REQUEST'
op|'('
string|"'\\x00\\x00\\x00\\x00'"
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
string|"'test'"
op|')'
nl|'\n'
op|'+'
string|"'\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'numberRequests'
op|','
number|'1'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_REQUEST'
op|'('
string|"'\\x00\\x00\\x00\\x00'"
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
nl|'\n'
string|"'test'"
op|')'
op|'+'
string|"'\\xff'"
op|'+'
string|"'data'"
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_SUCCESS'
op|','
string|"'\\x00\\x00\\x00\\xff'"
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_CHANNEL_REQUEST_failure
dedent|''
name|'def'
name|'test_CHANNEL_REQUEST_failure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel requests that fail send MSG_CHANNEL_FAILURE.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_REQUEST'
op|'('
string|"'\\x00\\x00\\x00\\x00'"
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
nl|'\n'
string|"'test'"
op|')'
op|'+'
string|"'\\xff'"
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_FAILURE'
op|','
string|"'\\x00\\x00\\x00\\xff'"
nl|'\n'
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'fail'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_CHANNEL_REQUEST_SUCCESS
dedent|''
name|'def'
name|'test_CHANNEL_REQUEST_SUCCESS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel request success messages cause the Deferred to be\n        called back.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendRequest'
op|'('
name|'channel'
op|','
string|"'test'"
op|','
string|"'data'"
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_SUCCESS'
op|'('
string|"'\\x00\\x00\\x00\\x00'"
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_CHANNEL_REQUEST_FAILURE
dedent|''
name|'def'
name|'test_CHANNEL_REQUEST_FAILURE'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel request failure messages cause the Deferred to be\n        erred back.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendRequest'
op|'('
name|'channel'
op|','
string|"'test'"
op|','
string|"''"
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'ssh_CHANNEL_FAILURE'
op|'('
string|"'\\x00\\x00\\x00\\x00'"
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'.'
name|'value'
op|'.'
name|'value'
op|','
string|"'channel request failed'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'fail'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_sendGlobalRequest
dedent|''
name|'def'
name|'test_sendGlobalRequest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that global request messages are sent in the right format.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendGlobalRequest'
op|'('
string|"'wantReply'"
op|','
string|"'data'"
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendGlobalRequest'
op|'('
string|"'noReply'"
op|','
string|"''"
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_GLOBAL_REQUEST'
op|','
name|'common'
op|'.'
name|'NS'
op|'('
string|"'wantReply'"
op|')'
op|'+'
nl|'\n'
string|"'\\xffdata'"
op|')'
op|','
nl|'\n'
op|'('
name|'connection'
op|'.'
name|'MSG_GLOBAL_REQUEST'
op|','
name|'common'
op|'.'
name|'NS'
op|'('
string|"'noReply'"
op|')'
op|'+'
nl|'\n'
string|"'\\x00'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'deferreds'
op|','
op|'{'
string|"'global'"
op|':'
op|'['
name|'d'
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_openChannel
dedent|''
name|'def'
name|'test_openChannel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that open channel messages are sent in the right format.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'openChannel'
op|'('
name|'channel'
op|','
string|"'aaaa'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_OPEN'
op|','
name|'common'
op|'.'
name|'NS'
op|'('
string|"'TestChannel'"
op|')'
op|'+'
nl|'\n'
string|"'\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x80\\x00aaaa'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'id'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'localChannelID'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sendRequest
dedent|''
name|'def'
name|'test_sendRequest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel request messages are sent in the right format.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendRequest'
op|'('
name|'channel'
op|','
string|"'test'"
op|','
string|"'test'"
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendRequest'
op|'('
name|'channel'
op|','
string|"'test2'"
op|','
string|"''"
op|','
name|'False'
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'localClosed'
op|'='
name|'True'
comment|'# emulate sending a close message'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendRequest'
op|'('
name|'channel'
op|','
string|"'test3'"
op|','
string|"''"
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_REQUEST'
op|','
string|"'\\x00\\x00\\x00\\xff'"
op|'+'
nl|'\n'
name|'common'
op|'.'
name|'NS'
op|'('
string|"'test'"
op|')'
op|'+'
string|"'\\x01test'"
op|')'
op|','
nl|'\n'
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_REQUEST'
op|','
string|"'\\x00\\x00\\x00\\xff'"
op|'+'
nl|'\n'
name|'common'
op|'.'
name|'NS'
op|'('
string|"'test2'"
op|')'
op|'+'
string|"'\\x00'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'deferreds'
op|','
op|'{'
number|'0'
op|':'
op|'['
name|'d'
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_adjustWindow
dedent|''
name|'def'
name|'test_adjustWindow'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel window adjust messages cause bytes to be added\n        to the window.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
name|'localWindow'
op|'='
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'localWindowLeft'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'adjustWindow'
op|'('
name|'channel'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'localWindowLeft'
op|','
number|'1'
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'localClosed'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'adjustWindow'
op|'('
name|'channel'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'localWindowLeft'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_WINDOW_ADJUST'
op|','
string|"'\\x00\\x00\\x00\\xff'"
nl|'\n'
string|"'\\x00\\x00\\x00\\x01'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sendData
dedent|''
name|'def'
name|'test_sendData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel data messages are sent in the right format.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendData'
op|'('
name|'channel'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'localClosed'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendData'
op|'('
name|'channel'
op|','
string|"'b'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_DATA'
op|','
string|"'\\x00\\x00\\x00\\xff'"
op|'+'
nl|'\n'
name|'common'
op|'.'
name|'NS'
op|'('
string|"'a'"
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sendExtendedData
dedent|''
name|'def'
name|'test_sendExtendedData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel extended data messages are sent in the right format.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendExtendedData'
op|'('
name|'channel'
op|','
number|'1'
op|','
string|"'test'"
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'localClosed'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendExtendedData'
op|'('
name|'channel'
op|','
number|'2'
op|','
string|"'test2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_EXTENDED_DATA'
op|','
string|"'\\x00\\x00\\x00\\xff'"
op|'+'
nl|'\n'
string|"'\\x00\\x00\\x00\\x01'"
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
string|"'test'"
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sendEOF
dedent|''
name|'def'
name|'test_sendEOF'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel EOF messages are sent in the right format.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendEOF'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_EOF'
op|','
string|"'\\x00\\x00\\x00\\xff'"
op|')'
op|']'
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'localClosed'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendEOF'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_EOF'
op|','
string|"'\\x00\\x00\\x00\\xff'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sendClose
dedent|''
name|'def'
name|'test_sendClose'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that channel close messages are sent in the right format.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendClose'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'channel'
op|'.'
name|'localClosed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_CLOSE'
op|','
string|"'\\x00\\x00\\x00\\xff'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendClose'
op|'('
name|'channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'connection'
op|'.'
name|'MSG_CHANNEL_CLOSE'
op|','
string|"'\\x00\\x00\\x00\\xff'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'channel2'
op|'='
name|'TestChannel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_openChannel'
op|'('
name|'channel2'
op|')'
newline|'\n'
name|'channel2'
op|'.'
name|'remoteClosed'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'sendClose'
op|'('
name|'channel2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'channel2'
op|'.'
name|'gotClosed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getChannelWithAvatar
dedent|''
name|'def'
name|'test_getChannelWithAvatar'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that getChannel dispatches to the avatar when an avatar is\n        present. Correct functioning without the avatar is verified in\n        test_CHANNEL_OPEN.\n        """'
newline|'\n'
name|'channel'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'getChannel'
op|'('
string|"'TestChannel'"
op|','
number|'50'
op|','
number|'30'
op|','
string|"'data'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'data'
op|','
string|"'data'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'remoteWindowLeft'
op|','
number|'50'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'channel'
op|'.'
name|'remoteMaxPacket'
op|','
number|'30'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'error'
op|'.'
name|'ConchError'
op|','
name|'self'
op|'.'
name|'conn'
op|'.'
name|'getChannel'
op|','
nl|'\n'
string|"'BadChannel'"
op|','
number|'50'
op|','
number|'30'
op|','
string|"'data'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_gotGlobalRequestWithoutAvatar
dedent|''
name|'def'
name|'test_gotGlobalRequestWithoutAvatar'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that gotGlobalRequests dispatches to global_* without an avatar.\n        """'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'avatar'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'gotGlobalRequest'
op|'('
string|"'TestGlobal'"
op|','
string|"'data'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'gotGlobalRequest'
op|'('
string|"'Test-Data'"
op|','
string|"'data'"
op|')'
op|','
nl|'\n'
op|'('
name|'True'
op|','
string|"'data'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'conn'
op|'.'
name|'gotGlobalRequest'
op|'('
string|"'BadGlobal'"
op|','
string|"'data'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

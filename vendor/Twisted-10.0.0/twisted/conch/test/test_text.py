begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_text -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'insults'
name|'import'
name|'helper'
op|','
name|'text'
newline|'\n'
nl|'\n'
DECL|variable|A
name|'A'
op|'='
name|'text'
op|'.'
name|'attributes'
newline|'\n'
nl|'\n'
DECL|class|Serialization
name|'class'
name|'Serialization'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'attrs'
op|'='
name|'helper'
op|'.'
name|'CharacterAttribute'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testTrivial
dedent|''
name|'def'
name|'testTrivial'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'text'
op|'.'
name|'flatten'
op|'('
name|'A'
op|'.'
name|'normal'
op|'['
string|"'Hello, world.'"
op|']'
op|','
name|'self'
op|'.'
name|'attrs'
op|')'
op|','
nl|'\n'
string|"'Hello, world.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testBold
dedent|''
name|'def'
name|'testBold'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'text'
op|'.'
name|'flatten'
op|'('
name|'A'
op|'.'
name|'bold'
op|'['
string|"'Hello, world.'"
op|']'
op|','
name|'self'
op|'.'
name|'attrs'
op|')'
op|','
nl|'\n'
string|"'\\x1b[1mHello, world.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUnderline
dedent|''
name|'def'
name|'testUnderline'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'text'
op|'.'
name|'flatten'
op|'('
name|'A'
op|'.'
name|'underline'
op|'['
string|"'Hello, world.'"
op|']'
op|','
name|'self'
op|'.'
name|'attrs'
op|')'
op|','
nl|'\n'
string|"'\\x1b[4mHello, world.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testBlink
dedent|''
name|'def'
name|'testBlink'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'text'
op|'.'
name|'flatten'
op|'('
name|'A'
op|'.'
name|'blink'
op|'['
string|"'Hello, world.'"
op|']'
op|','
name|'self'
op|'.'
name|'attrs'
op|')'
op|','
nl|'\n'
string|"'\\x1b[5mHello, world.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testReverseVideo
dedent|''
name|'def'
name|'testReverseVideo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'text'
op|'.'
name|'flatten'
op|'('
name|'A'
op|'.'
name|'reverseVideo'
op|'['
string|"'Hello, world.'"
op|']'
op|','
name|'self'
op|'.'
name|'attrs'
op|')'
op|','
nl|'\n'
string|"'\\x1b[7mHello, world.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMinus
dedent|''
name|'def'
name|'testMinus'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'text'
op|'.'
name|'flatten'
op|'('
nl|'\n'
name|'A'
op|'.'
name|'bold'
op|'['
name|'A'
op|'.'
name|'blink'
op|'['
string|"'Hello'"
op|','
op|'-'
name|'A'
op|'.'
name|'bold'
op|'['
string|"' world'"
op|']'
op|','
string|"'.'"
op|']'
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'attrs'
op|')'
op|','
nl|'\n'
string|"'\\x1b[1;5mHello\\x1b[0;5m world\\x1b[1;5m.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testForeground
dedent|''
name|'def'
name|'testForeground'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'text'
op|'.'
name|'flatten'
op|'('
nl|'\n'
name|'A'
op|'.'
name|'normal'
op|'['
name|'A'
op|'.'
name|'fg'
op|'.'
name|'red'
op|'['
string|"'Hello, '"
op|']'
op|','
name|'A'
op|'.'
name|'fg'
op|'.'
name|'green'
op|'['
string|"'world!'"
op|']'
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'attrs'
op|')'
op|','
nl|'\n'
string|"'\\x1b[31mHello, \\x1b[32mworld!'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testBackground
dedent|''
name|'def'
name|'testBackground'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'text'
op|'.'
name|'flatten'
op|'('
nl|'\n'
name|'A'
op|'.'
name|'normal'
op|'['
name|'A'
op|'.'
name|'bg'
op|'.'
name|'red'
op|'['
string|"'Hello, '"
op|']'
op|','
name|'A'
op|'.'
name|'bg'
op|'.'
name|'green'
op|'['
string|"'world!'"
op|']'
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'attrs'
op|')'
op|','
nl|'\n'
string|"'\\x1b[41mHello, \\x1b[42mworld!'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|EfficiencyTestCase
dedent|''
dedent|''
name|'class'
name|'EfficiencyTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|todo
indent|'    '
name|'todo'
op|'='
op|'('
string|'"flatten() isn\'t quite stateful enough to avoid emitting a few extra bytes in "'
nl|'\n'
string|'"certain circumstances, so these tests fail.  The failures take the form of "'
nl|'\n'
string|'"additional elements in the ;-delimited character attribute lists.  For example, "'
nl|'\n'
string|'"\\\\x1b[0;31;46m might be emitted instead of \\\\x[46m, even if 31 has already been "'
nl|'\n'
string|'"activated and no conflicting attributes are set which need to be cleared."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'attrs'
op|'='
name|'helper'
op|'.'
name|'CharacterAttribute'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testComplexStructure
dedent|''
name|'def'
name|'testComplexStructure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'output'
op|'='
name|'A'
op|'.'
name|'normal'
op|'['
nl|'\n'
name|'A'
op|'.'
name|'bold'
op|'['
nl|'\n'
name|'A'
op|'.'
name|'bg'
op|'.'
name|'cyan'
op|'['
nl|'\n'
name|'A'
op|'.'
name|'fg'
op|'.'
name|'red'
op|'['
nl|'\n'
string|'"Foreground Red, Background Cyan, Bold"'
op|','
nl|'\n'
name|'A'
op|'.'
name|'blink'
op|'['
nl|'\n'
string|'"Blinking"'
op|']'
op|','
nl|'\n'
op|'-'
name|'A'
op|'.'
name|'bold'
op|'['
nl|'\n'
string|'"Foreground Red, Background Cyan, normal"'
op|']'
op|']'
op|','
nl|'\n'
name|'A'
op|'.'
name|'fg'
op|'.'
name|'green'
op|'['
nl|'\n'
string|'"Foreground Green, Background Cyan, Bold"'
op|']'
op|']'
op|']'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'text'
op|'.'
name|'flatten'
op|'('
name|'output'
op|','
name|'self'
op|'.'
name|'attrs'
op|')'
op|','
nl|'\n'
string|'"\\x1b[1;31;46mForeground Red, Background Cyan, Bold"'
nl|'\n'
string|'"\\x1b[5mBlinking"'
nl|'\n'
string|'"\\x1b[0;31;46mForeground Red, Background Cyan, normal"'
nl|'\n'
string|'"\\x1b[1;32;46mForeground Green, Background Cyan, Bold"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNesting
dedent|''
name|'def'
name|'testNesting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'text'
op|'.'
name|'flatten'
op|'('
name|'A'
op|'.'
name|'bold'
op|'['
string|"'Hello, '"
op|','
name|'A'
op|'.'
name|'underline'
op|'['
string|"'world.'"
op|']'
op|']'
op|','
name|'self'
op|'.'
name|'attrs'
op|')'
op|','
nl|'\n'
string|"'\\x1b[1mHello, \\x1b[4mworld.'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'text'
op|'.'
name|'flatten'
op|'('
nl|'\n'
name|'A'
op|'.'
name|'bold'
op|'['
name|'A'
op|'.'
name|'reverseVideo'
op|'['
string|"'Hello, '"
op|','
name|'A'
op|'.'
name|'normal'
op|'['
string|"'world'"
op|']'
op|','
string|"'.'"
op|']'
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'attrs'
op|')'
op|','
nl|'\n'
string|"'\\x1b[1;7mHello, \\x1b[0mworld\\x1b[1;7m.'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

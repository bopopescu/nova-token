begin_unit
comment|'# Copyright (c) 2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.conch.tap}.\n"""'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'Crypto'
op|'.'
name|'Cipher'
op|'.'
name|'DES3'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
DECL|variable|Crypto
indent|'    '
name|'Crypto'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pyasn1'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|pyasn1
indent|'    '
name|'pyasn1'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'conch'
name|'import'
name|'unix'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|unix
indent|'    '
name|'unix'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'Crypto'
name|'and'
name|'pyasn1'
name|'and'
name|'unix'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'conch'
name|'import'
name|'tap'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'openssh_compat'
op|'.'
name|'factory'
name|'import'
name|'OpenSSHFactory'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'application'
op|'.'
name|'internet'
name|'import'
name|'TCPServer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'IPluggableAuthenticationModules'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'ISSHPrivateKey'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'IUsernamePassword'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MakeServiceTest
name|'class'
name|'MakeServiceTest'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{tap.makeService}.\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'Crypto'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"can\'t run w/o PyCrypto"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'pyasn1'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"can\'t run w/o PyASN1"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'unix'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"can\'t run on non-posix computers"'
newline|'\n'
nl|'\n'
DECL|member|test_basic
dedent|''
name|'def'
name|'test_basic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{tap.makeService} returns a L{TCPServer} instance running on port 22,\n        and the linked protocol factory is an instance of L{OpenSSHFactory}.\n        """'
newline|'\n'
name|'config'
op|'='
name|'tap'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'service'
op|'='
name|'tap'
op|'.'
name|'makeService'
op|'('
name|'config'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'service'
op|','
name|'TCPServer'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'service'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|','
number|'22'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'service'
op|'.'
name|'args'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'factory'
op|','
name|'OpenSSHFactory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_checkersPamAuth
dedent|''
name|'def'
name|'test_checkersPamAuth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{OpenSSHFactory} built by L{tap.makeService} has a portal with\n        L{IPluggableAuthenticationModules}, L{ISSHPrivateKey} and\n        L{IUsernamePassword} interfaces registered as checkers if C{pamauth} is\n        available.\n        """'
newline|'\n'
comment|'# Fake the presence of pamauth, even if PyPAM is not installed'
nl|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'tap'
op|','
string|'"pamauth"'
op|','
name|'object'
op|'('
op|')'
op|')'
newline|'\n'
name|'config'
op|'='
name|'tap'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'service'
op|'='
name|'tap'
op|'.'
name|'makeService'
op|'('
name|'config'
op|')'
newline|'\n'
name|'portal'
op|'='
name|'service'
op|'.'
name|'args'
op|'['
number|'1'
op|']'
op|'.'
name|'portal'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'set'
op|'('
name|'portal'
op|'.'
name|'checkers'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
name|'IPluggableAuthenticationModules'
op|','
name|'ISSHPrivateKey'
op|','
nl|'\n'
name|'IUsernamePassword'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_checkersWithoutPamAuth
dedent|''
name|'def'
name|'test_checkersWithoutPamAuth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{OpenSSHFactory} built by L{tap.makeService} has a portal with\n        L{ISSHPrivateKey} and L{IUsernamePassword} interfaces registered as\n        checkers if C{pamauth} is not available.\n        """'
newline|'\n'
comment|'# Fake the absence of pamauth, even if PyPAM is installed'
nl|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'tap'
op|','
string|'"pamauth"'
op|','
name|'None'
op|')'
newline|'\n'
name|'config'
op|'='
name|'tap'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'service'
op|'='
name|'tap'
op|'.'
name|'makeService'
op|'('
name|'config'
op|')'
newline|'\n'
name|'portal'
op|'='
name|'service'
op|'.'
name|'args'
op|'['
number|'1'
op|']'
op|'.'
name|'portal'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'set'
op|'('
name|'portal'
op|'.'
name|'checkers'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
name|'ISSHPrivateKey'
op|','
name|'IUsernamePassword'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

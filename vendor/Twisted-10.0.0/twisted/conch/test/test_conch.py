begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_conch -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'sys'
op|','
name|'socket'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'portal'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
op|','
name|'defer'
op|','
name|'protocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'ProcessExitedAlready'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'runtime'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'error'
name|'import'
name|'ConchError'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'scripts'
op|'.'
name|'conch'
name|'import'
name|'SSHSession'
name|'as'
name|'StdioInteractingSession'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|','
name|'e'
op|':'
newline|'\n'
DECL|variable|StdioInteractingSession
indent|'    '
name|'StdioInteractingSession'
op|'='
name|'None'
newline|'\n'
DECL|variable|_reason
name|'_reason'
op|'='
name|'str'
op|'('
name|'e'
op|')'
newline|'\n'
name|'del'
name|'e'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
op|'.'
name|'test_ssh'
name|'import'
name|'ConchTestRealm'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'procutils'
name|'import'
name|'which'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
op|'.'
name|'keydata'
name|'import'
name|'publicRSA_openssh'
op|','
name|'privateRSA_openssh'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
op|'.'
name|'keydata'
name|'import'
name|'publicDSA_openssh'
op|','
name|'privateDSA_openssh'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
op|'.'
name|'test_ssh'
name|'import'
name|'Crypto'
op|','
name|'pyasn1'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
op|'.'
name|'test_ssh'
name|'import'
name|'ConchTestServerFactory'
op|','
name|'ConchTestPublicKeyChecker'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StdioInteractingSessionTests
dedent|''
name|'class'
name|'StdioInteractingSessionTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{twisted.conch.scripts.conch.SSHSession}.\n    """'
newline|'\n'
name|'if'
name|'StdioInteractingSession'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
name|'_reason'
newline|'\n'
nl|'\n'
DECL|member|test_eofReceived
dedent|''
name|'def'
name|'test_eofReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{twisted.conch.scripts.conch.SSHSession.eofReceived} loses the\n        write half of its stdio connection.\n        """'
newline|'\n'
DECL|class|FakeStdio
name|'class'
name|'FakeStdio'
op|':'
newline|'\n'
DECL|variable|writeConnLost
indent|'            '
name|'writeConnLost'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|loseWriteConnection
name|'def'
name|'loseWriteConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'writeConnLost'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'stdio'
op|'='
name|'FakeStdio'
op|'('
op|')'
newline|'\n'
name|'channel'
op|'='
name|'StdioInteractingSession'
op|'('
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'stdio'
op|'='
name|'stdio'
newline|'\n'
name|'channel'
op|'.'
name|'eofReceived'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'stdio'
op|'.'
name|'writeConnLost'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Echo
dedent|''
dedent|''
name|'class'
name|'Echo'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
DECL|member|connectionMade
indent|'    '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'ECHO CONNECTION MADE'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'ECHO CONNECTION DONE'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
string|"'\\n'"
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|EchoFactory
dedent|''
dedent|''
dedent|''
name|'class'
name|'EchoFactory'
op|'('
name|'protocol'
op|'.'
name|'Factory'
op|')'
op|':'
newline|'\n'
DECL|variable|protocol
indent|'    '
name|'protocol'
op|'='
name|'Echo'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConchTestOpenSSHProcess
dedent|''
name|'class'
name|'ConchTestOpenSSHProcess'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test protocol for launching an OpenSSH client process.\n\n    @ivar deferred: Set by whatever uses this object. Accessed using\n    L{_getDeferred}, which destroys the value so the Deferred is not\n    fired twice. Fires when the process is terminated.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|deferred
name|'deferred'
op|'='
name|'None'
newline|'\n'
DECL|variable|buf
name|'buf'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|member|_getDeferred
name|'def'
name|'_getDeferred'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|','
name|'self'
op|'.'
name|'deferred'
op|'='
name|'self'
op|'.'
name|'deferred'
op|','
name|'None'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|outReceived
dedent|''
name|'def'
name|'outReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buf'
op|'+='
name|'data'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the process has ended.\n\n        @param reason: a Failure giving the reason for the process\' end.\n        """'
newline|'\n'
name|'if'
name|'reason'
op|'.'
name|'value'
op|'.'
name|'exitCode'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_getDeferred'
op|'('
op|')'
op|'.'
name|'errback'
op|'('
nl|'\n'
name|'ConchError'
op|'('
string|'"exit code was not 0: %s"'
op|'%'
nl|'\n'
name|'reason'
op|'.'
name|'value'
op|'.'
name|'exitCode'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'buf'
op|'='
name|'self'
op|'.'
name|'buf'
op|'.'
name|'replace'
op|'('
string|"'\\r\\n'"
op|','
string|"'\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_getDeferred'
op|'('
op|')'
op|'.'
name|'callback'
op|'('
name|'buf'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConchTestForwardingProcess
dedent|''
dedent|''
dedent|''
name|'class'
name|'ConchTestForwardingProcess'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Manages a third-party process which launches a server.\n\n    Uses L{ConchTestForwardingPort} to connect to the third-party server.\n    Once L{ConchTestForwardingPort} has disconnected, kill the process and fire\n    a Deferred with the data received by the L{ConchTestForwardingPort}.\n\n    @ivar deferred: Set by whatever uses this object. Accessed using\n    L{_getDeferred}, which destroys the value so the Deferred is not\n    fired twice. Fires when the process is terminated.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|deferred
name|'deferred'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'port'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @type port: C{int}\n        @param port: The port on which the third-party server is listening.\n        (it is assumed that the server is running on localhost).\n\n        @type data: C{str}\n        @param data: This is sent to the third-party server. Must end with \'\\n\'\n        in order to trigger a disconnect.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
name|'data'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getDeferred
dedent|''
name|'def'
name|'_getDeferred'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|','
name|'self'
op|'.'
name|'deferred'
op|'='
name|'self'
op|'.'
name|'deferred'
op|','
name|'None'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_connect'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_connect
dedent|''
name|'def'
name|'_connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connect to the server, which is often a third-party process.\n        Tries to reconnect if it fails because we have no way of determining\n        exactly when the port becomes available for listening -- we can only\n        know when the process starts.\n        """'
newline|'\n'
name|'cc'
op|'='
name|'protocol'
op|'.'
name|'ClientCreator'
op|'('
name|'reactor'
op|','
name|'ConchTestForwardingPort'
op|','
name|'self'
op|','
nl|'\n'
name|'self'
op|'.'
name|'data'
op|')'
newline|'\n'
name|'d'
op|'='
name|'cc'
op|'.'
name|'connectTCP'
op|'('
string|"'127.0.0.1'"
op|','
name|'self'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebConnect'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_ebConnect
dedent|''
name|'def'
name|'_ebConnect'
op|'('
name|'self'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'.1'
op|','
name|'self'
op|'.'
name|'_connect'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|forwardingPortDisconnected
dedent|''
name|'def'
name|'forwardingPortDisconnected'
op|'('
name|'self'
op|','
name|'buffer'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The network connection has died; save the buffer of output\n        from the network and attempt to quit the process gracefully,\n        and then (after the reactor has spun) send it a KILL signal.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
name|'buffer'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|"'\\x03'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'_reallyDie'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_reallyDie
dedent|''
name|'def'
name|'_reallyDie'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'signalProcess'
op|'('
string|"'KILL'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ProcessExitedAlready'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fire the Deferred at self.deferred with the data collected\n        from the L{ConchTestForwardingPort} connection, if any.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_getDeferred'
op|'('
op|')'
op|'.'
name|'callback'
op|'('
name|'self'
op|'.'
name|'buffer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConchTestForwardingPort
dedent|''
dedent|''
name|'class'
name|'ConchTestForwardingPort'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Connects to server launched by a third-party process (managed by\n    L{ConchTestForwardingProcess}) sends data, then reports whatever it\n    received back to the L{ConchTestForwardingProcess} once the connection\n    is ended.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'protocol'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @type protocol: L{ConchTestForwardingProcess}\n        @param protocol: The L{ProcessProtocol} which made this connection.\n\n        @type data: str\n        @param data: The data to be sent to the third-party server.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'protocol'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
name|'data'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'+='
name|'data'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'forwardingPortDisconnected'
op|'('
name|'self'
op|'.'
name|'buffer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_makeArgs
dedent|''
dedent|''
name|'def'
name|'_makeArgs'
op|'('
name|'args'
op|','
name|'mod'
op|'='
string|'"conch"'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'start'
op|'='
op|'['
name|'sys'
op|'.'
name|'executable'
op|','
string|"'-c'"
nl|'\n'
string|'"""\n### Twisted Preamble\nimport sys, os\npath = os.path.abspath(sys.argv[0])\nwhile os.path.dirname(path) != path:\n    if os.path.basename(path).startswith(\'Twisted\'):\n        sys.path.insert(0, path)\n        break\n    path = os.path.dirname(path)\n\nfrom twisted.conch.scripts.%s import run\nrun()"""'
op|'%'
name|'mod'
op|']'
newline|'\n'
name|'return'
name|'start'
op|'+'
name|'list'
op|'('
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ForwardingTestBase
dedent|''
name|'class'
name|'ForwardingTestBase'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Template class for tests of the Conch server\'s ability to forward arbitrary\n    protocols over SSH.\n\n    These tests are integration tests, not unit tests. They launch a Conch\n    server, a custom TCP server (just an L{EchoProtocol}) and then call\n    L{execute}.\n\n    L{execute} is implemented by subclasses of L{ForwardingTestBase}. It should\n    cause an SSH client to connect to the Conch server, asking it to forward\n    data to the custom TCP server.\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'Crypto'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"can\'t run w/o PyCrypto"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'pyasn1'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"can\'t run w/o PyASN1"'
newline|'\n'
nl|'\n'
DECL|member|_createFiles
dedent|''
name|'def'
name|'_createFiles'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'f'
name|'in'
op|'['
string|"'rsa_test'"
op|','
string|"'rsa_test.pub'"
op|','
string|"'dsa_test'"
op|','
string|"'dsa_test.pub'"
op|','
nl|'\n'
string|"'kh_test'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'remove'
op|'('
name|'f'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'open'
op|'('
string|"'rsa_test'"
op|','
string|"'w'"
op|')'
op|'.'
name|'write'
op|'('
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'open'
op|'('
string|"'rsa_test.pub'"
op|','
string|"'w'"
op|')'
op|'.'
name|'write'
op|'('
name|'publicRSA_openssh'
op|')'
newline|'\n'
name|'open'
op|'('
string|"'dsa_test.pub'"
op|','
string|"'w'"
op|')'
op|'.'
name|'write'
op|'('
name|'publicDSA_openssh'
op|')'
newline|'\n'
name|'open'
op|'('
string|"'dsa_test'"
op|','
string|"'w'"
op|')'
op|'.'
name|'write'
op|'('
name|'privateDSA_openssh'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
string|"'dsa_test'"
op|','
number|'33152'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
string|"'rsa_test'"
op|','
number|'33152'
op|')'
newline|'\n'
name|'open'
op|'('
string|"'kh_test'"
op|','
string|"'w'"
op|')'
op|'.'
name|'write'
op|'('
string|"'127.0.0.1 '"
op|'+'
name|'publicRSA_openssh'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getFreePort
dedent|''
name|'def'
name|'_getFreePort'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'bind'
op|'('
op|'('
string|"''"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'port'
op|'='
name|'s'
op|'.'
name|'getsockname'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'s'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'port'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_makeConchFactory
dedent|''
name|'def'
name|'_makeConchFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a L{ConchTestServerFactory}, which allows us to start a\n        L{ConchTestServer} -- i.e. an actually listening conch.\n        """'
newline|'\n'
name|'realm'
op|'='
name|'ConchTestRealm'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'portal'
op|'.'
name|'Portal'
op|'('
name|'realm'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'registerChecker'
op|'('
name|'ConchTestPublicKeyChecker'
op|'('
op|')'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'ConchTestServerFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'portal'
op|'='
name|'p'
newline|'\n'
name|'return'
name|'factory'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_createFiles'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conchFactory'
op|'='
name|'self'
op|'.'
name|'_makeConchFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conchFactory'
op|'.'
name|'expectedLoseConnection'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'conchServer'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'conchFactory'
op|','
nl|'\n'
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'echoServer'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'EchoFactory'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'echoPort'
op|'='
name|'self'
op|'.'
name|'echoServer'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conchFactory'
op|'.'
name|'proto'
op|'.'
name|'done'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conchFactory'
op|'.'
name|'proto'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'conchServer'
op|'.'
name|'stopListening'
op|')'
op|','
nl|'\n'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'echoServer'
op|'.'
name|'stopListening'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_exec
dedent|''
name|'def'
name|'test_exec'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that we can use whatever client to send the command "echo goodbye"\n        to the Conch server. Make sure we receive "goodbye" back from the\n        server.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'execute'
op|'('
string|"'echo goodbye'"
op|','
name|'ConchTestOpenSSHProcess'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|"'goodbye\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_localToRemoteForwarding
dedent|''
name|'def'
name|'test_localToRemoteForwarding'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that we can use whatever client to forward a local port to a\n        specified port on the server.\n        """'
newline|'\n'
name|'localPort'
op|'='
name|'self'
op|'.'
name|'_getFreePort'
op|'('
op|')'
newline|'\n'
name|'process'
op|'='
name|'ConchTestForwardingProcess'
op|'('
name|'localPort'
op|','
string|"'test\\n'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'execute'
op|'('
string|"''"
op|','
name|'process'
op|','
nl|'\n'
name|'sshArgs'
op|'='
string|"'-N -L%i:127.0.0.1:%i'"
nl|'\n'
op|'%'
op|'('
name|'localPort'
op|','
name|'self'
op|'.'
name|'echoPort'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
string|"'test\\n'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_remoteToLocalForwarding
dedent|''
name|'def'
name|'test_remoteToLocalForwarding'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that we can use whatever client to forward a port from the server\n        to a port locally.\n        """'
newline|'\n'
name|'localPort'
op|'='
name|'self'
op|'.'
name|'_getFreePort'
op|'('
op|')'
newline|'\n'
name|'process'
op|'='
name|'ConchTestForwardingProcess'
op|'('
name|'localPort'
op|','
string|"'test\\n'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'execute'
op|'('
string|"''"
op|','
name|'process'
op|','
nl|'\n'
name|'sshArgs'
op|'='
string|"'-N -R %i:127.0.0.1:%i'"
nl|'\n'
op|'%'
op|'('
name|'localPort'
op|','
name|'self'
op|'.'
name|'echoPort'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
string|"'test\\n'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|OpenSSHClientTestCase
dedent|''
dedent|''
name|'class'
name|'OpenSSHClientTestCase'
op|'('
name|'ForwardingTestBase'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'if'
name|'not'
name|'which'
op|'('
string|"'ssh'"
op|')'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"no ssh command-line client available"'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
name|'remoteCommand'
op|','
name|'process'
op|','
name|'sshArgs'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connects to the SSH server started in L{ForwardingTestBase.setUp} by\n        running the \'ssh\' command line tool.\n\n        @type remoteCommand: str\n        @param remoteCommand: The command (with arguments) to run on the\n        remote end.\n\n        @type process: L{ConchTestOpenSSHProcess}\n\n        @type sshArgs: str\n        @param sshArgs: Arguments to pass to the \'ssh\' process.\n\n        @return: L{defer.Deferred}\n        """'
newline|'\n'
name|'process'
op|'.'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'cmdline'
op|'='
op|'('
string|"'ssh -2 -l testuser -p %i '"
nl|'\n'
string|"'-oUserKnownHostsFile=kh_test '"
nl|'\n'
string|"'-oPasswordAuthentication=no '"
nl|'\n'
comment|"# Always use the RSA key, since that's the one in kh_test."
nl|'\n'
string|"'-oHostKeyAlgorithms=ssh-rsa '"
nl|'\n'
string|"'-a '"
nl|'\n'
string|"'-i dsa_test '"
op|')'
op|'+'
name|'sshArgs'
op|'+'
string|"' 127.0.0.1 '"
op|'+'
name|'remoteCommand'
newline|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'conchServer'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'cmds'
op|'='
op|'('
name|'cmdline'
op|'%'
name|'port'
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'process'
op|','
string|'"ssh"'
op|','
name|'cmds'
op|')'
newline|'\n'
name|'return'
name|'process'
op|'.'
name|'deferred'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CmdLineClientTestCase
dedent|''
dedent|''
name|'class'
name|'CmdLineClientTestCase'
op|'('
name|'ForwardingTestBase'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'runtime'
op|'.'
name|'platformType'
op|'=='
string|"'win32'"
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"can\'t run cmdline client on win32"'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
name|'remoteCommand'
op|','
name|'process'
op|','
name|'sshArgs'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        As for L{OpenSSHClientTestCase.execute}, except it runs the \'conch\'\n        command line tool, not \'ssh\'.\n        """'
newline|'\n'
name|'process'
op|'.'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'conchServer'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'cmd'
op|'='
op|'('
string|"'-p %i -l testuser '"
nl|'\n'
string|"'--known-hosts kh_test '"
nl|'\n'
string|"'--user-authentications publickey '"
nl|'\n'
string|"'--host-key-algorithms ssh-rsa '"
nl|'\n'
string|"'-a '"
nl|'\n'
string|"'-i dsa_test '"
nl|'\n'
string|"'-v '"
op|')'
op|'%'
name|'port'
op|'+'
name|'sshArgs'
op|'+'
string|"' 127.0.0.1 '"
op|'+'
name|'remoteCommand'
newline|'\n'
name|'cmds'
op|'='
name|'_makeArgs'
op|'('
name|'cmd'
op|'.'
name|'split'
op|'('
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
name|'str'
op|'('
name|'cmds'
op|')'
op|')'
newline|'\n'
name|'env'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'env'
op|'['
string|"'PYTHONPATH'"
op|']'
op|'='
name|'os'
op|'.'
name|'pathsep'
op|'.'
name|'join'
op|'('
name|'sys'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'process'
op|','
name|'sys'
op|'.'
name|'executable'
op|','
name|'cmds'
op|','
name|'env'
op|'='
name|'env'
op|')'
newline|'\n'
name|'return'
name|'process'
op|'.'
name|'deferred'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

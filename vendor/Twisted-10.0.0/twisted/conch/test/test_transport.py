begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for ssh/transport.py and the classes therein.\n"""'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pyasn1'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|pyasn1
indent|'    '
name|'pyasn1'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'Crypto'
op|'.'
name|'Cipher'
op|'.'
name|'DES3'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|Crypto
indent|'    '
name|'Crypto'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'pyasn1'
name|'is'
name|'None'
name|'or'
name|'Crypto'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|class|transport
indent|'    '
name|'class'
name|'transport'
op|':'
comment|'# fictional modules to make classes work'
newline|'\n'
DECL|class|SSHTransportBase
indent|'        '
name|'class'
name|'SSHTransportBase'
op|':'
name|'pass'
newline|'\n'
DECL|class|SSHServerTransport
name|'class'
name|'SSHServerTransport'
op|':'
name|'pass'
newline|'\n'
DECL|class|SSHClientTransport
name|'class'
name|'SSHClientTransport'
op|':'
name|'pass'
newline|'\n'
DECL|class|factory
dedent|''
name|'class'
name|'factory'
op|':'
newline|'\n'
DECL|class|SSHFactory
indent|'        '
name|'class'
name|'SSHFactory'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
name|'import'
name|'transport'
op|','
name|'common'
op|','
name|'keys'
op|','
name|'factory'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'test'
name|'import'
name|'keydata'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'loopback'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'randbytes'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'reflect'
name|'import'
name|'qual'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'hashlib'
name|'import'
name|'md5'
op|','
name|'sha1'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'ssh'
name|'import'
name|'service'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
name|'import'
name|'proto_helpers'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'error'
name|'import'
name|'ConchError'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockTransportBase
name|'class'
name|'MockTransportBase'
op|'('
name|'transport'
op|'.'
name|'SSHTransportBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A base class for the client and server protocols.  Stores the messages\n    it receieves instead of ignoring them.\n\n    @ivar errors: a list of tuples: (reasonCode, description)\n    @ivar unimplementeds: a list of integers: sequence number\n    @ivar debugs: a list of tuples: (alwaysDisplay, message, lang)\n    @ivar ignoreds: a list of strings: ignored data\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set up instance variables.\n        """'
newline|'\n'
name|'transport'
op|'.'
name|'SSHTransportBase'
op|'.'
name|'connectionMade'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'errors'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'unimplementeds'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'debugs'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'ignoreds'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|receiveError
dedent|''
name|'def'
name|'receiveError'
op|'('
name|'self'
op|','
name|'reasonCode'
op|','
name|'description'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store any errors received.\n\n        @type reasonCode: C{int}\n        @type description: C{str}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'errors'
op|'.'
name|'append'
op|'('
op|'('
name|'reasonCode'
op|','
name|'description'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|receiveUnimplemented
dedent|''
name|'def'
name|'receiveUnimplemented'
op|'('
name|'self'
op|','
name|'seqnum'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store any unimplemented packet messages.\n\n        @type seqnum: C{int}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'unimplementeds'
op|'.'
name|'append'
op|'('
name|'seqnum'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|receiveDebug
dedent|''
name|'def'
name|'receiveDebug'
op|'('
name|'self'
op|','
name|'alwaysDisplay'
op|','
name|'message'
op|','
name|'lang'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store any debug messages.\n\n        @type alwaysDisplay: C{bool}\n        @type message: C{str}\n        @type lang: C{str}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'debugs'
op|'.'
name|'append'
op|'('
op|'('
name|'alwaysDisplay'
op|','
name|'message'
op|','
name|'lang'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ssh_IGNORE
dedent|''
name|'def'
name|'ssh_IGNORE'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store any ignored data.\n\n        @type packet: C{str}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'ignoreds'
op|'.'
name|'append'
op|'('
name|'packet'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockCipher
dedent|''
dedent|''
name|'class'
name|'MockCipher'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mocked-up version of twisted.conch.ssh.transport.SSHCiphers.\n    """'
newline|'\n'
DECL|variable|outCipType
name|'outCipType'
op|'='
string|"'test'"
newline|'\n'
DECL|variable|encBlockSize
name|'encBlockSize'
op|'='
number|'6'
newline|'\n'
DECL|variable|inCipType
name|'inCipType'
op|'='
string|"'test'"
newline|'\n'
DECL|variable|decBlockSize
name|'decBlockSize'
op|'='
number|'6'
newline|'\n'
DECL|variable|inMACType
name|'inMACType'
op|'='
string|"'test'"
newline|'\n'
DECL|variable|outMACType
name|'outMACType'
op|'='
string|"'test'"
newline|'\n'
DECL|variable|verifyDigestSize
name|'verifyDigestSize'
op|'='
number|'1'
newline|'\n'
DECL|variable|usedEncrypt
name|'usedEncrypt'
op|'='
name|'False'
newline|'\n'
DECL|variable|usedDecrypt
name|'usedDecrypt'
op|'='
name|'False'
newline|'\n'
DECL|variable|outMAC
name|'outMAC'
op|'='
op|'('
name|'None'
op|','
string|"''"
op|','
string|"''"
op|','
number|'1'
op|')'
newline|'\n'
DECL|variable|inMAC
name|'inMAC'
op|'='
op|'('
name|'None'
op|','
string|"''"
op|','
string|"''"
op|','
number|'1'
op|')'
newline|'\n'
DECL|variable|keys
name|'keys'
op|'='
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|encrypt
name|'def'
name|'encrypt'
op|'('
name|'self'
op|','
name|'x'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called to encrypt the packet.  Simply record that encryption was used\n        and return the data unchanged.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'usedEncrypt'
op|'='
name|'True'
newline|'\n'
name|'if'
op|'('
name|'len'
op|'('
name|'x'
op|')'
op|'%'
name|'self'
op|'.'
name|'encBlockSize'
op|')'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"length %i modulo blocksize %i is not 0: %i"'
op|'%'
nl|'\n'
op|'('
name|'len'
op|'('
name|'x'
op|')'
op|','
name|'self'
op|'.'
name|'encBlockSize'
op|','
name|'len'
op|'('
name|'x'
op|')'
op|'%'
name|'self'
op|'.'
name|'encBlockSize'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'x'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decrypt
dedent|''
name|'def'
name|'decrypt'
op|'('
name|'self'
op|','
name|'x'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called to decrypt the packet.  Simply record that decryption was used\n        and return the data unchanged.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'usedDecrypt'
op|'='
name|'True'
newline|'\n'
name|'if'
op|'('
name|'len'
op|'('
name|'x'
op|')'
op|'%'
name|'self'
op|'.'
name|'encBlockSize'
op|')'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"length %i modulo blocksize %i is not 0: %i"'
op|'%'
nl|'\n'
op|'('
name|'len'
op|'('
name|'x'
op|')'
op|','
name|'self'
op|'.'
name|'decBlockSize'
op|','
name|'len'
op|'('
name|'x'
op|')'
op|'%'
name|'self'
op|'.'
name|'decBlockSize'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'x'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeMAC
dedent|''
name|'def'
name|'makeMAC'
op|'('
name|'self'
op|','
name|'outgoingPacketSequence'
op|','
name|'payload'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a Message Authentication Code by sending the character value of\n        the outgoing packet.\n        """'
newline|'\n'
name|'return'
name|'chr'
op|'('
name|'outgoingPacketSequence'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|verify
dedent|''
name|'def'
name|'verify'
op|'('
name|'self'
op|','
name|'incomingPacketSequence'
op|','
name|'packet'
op|','
name|'macData'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify the Message Authentication Code by checking that the packet\n        sequence number is the same.\n        """'
newline|'\n'
name|'return'
name|'chr'
op|'('
name|'incomingPacketSequence'
op|')'
op|'=='
name|'macData'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setKeys
dedent|''
name|'def'
name|'setKeys'
op|'('
name|'self'
op|','
name|'ivOut'
op|','
name|'keyOut'
op|','
name|'ivIn'
op|','
name|'keyIn'
op|','
name|'macIn'
op|','
name|'macOut'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record the keys.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'keys'
op|'='
op|'('
name|'ivOut'
op|','
name|'keyOut'
op|','
name|'ivIn'
op|','
name|'keyIn'
op|','
name|'macIn'
op|','
name|'macOut'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockCompression
dedent|''
dedent|''
name|'class'
name|'MockCompression'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mocked-up compression, based on the zlib interface.  Instead of\n    compressing, it reverses the data and adds a 0x66 byte to the end.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|compress
name|'def'
name|'compress'
op|'('
name|'self'
op|','
name|'payload'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'payload'
op|'['
op|':'
op|':'
op|'-'
number|'1'
op|']'
comment|'# reversed'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|decompress
dedent|''
name|'def'
name|'decompress'
op|'('
name|'self'
op|','
name|'payload'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'payload'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|'['
op|':'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|flush
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|','
name|'kind'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\x66'"
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockService
dedent|''
dedent|''
name|'class'
name|'MockService'
op|'('
name|'service'
op|'.'
name|'SSHService'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mocked-up service, based on twisted.conch.ssh.service.SSHService.\n\n    @ivar started: True if this service has been started.\n    @ivar stopped: True if this service has been stopped.\n    """'
newline|'\n'
DECL|variable|name
name|'name'
op|'='
string|'"MockService"'
newline|'\n'
DECL|variable|started
name|'started'
op|'='
name|'False'
newline|'\n'
DECL|variable|stopped
name|'stopped'
op|'='
name|'False'
newline|'\n'
DECL|variable|protocolMessages
name|'protocolMessages'
op|'='
op|'{'
number|'0xff'
op|':'
string|'"MSG_TEST"'
op|','
number|'71'
op|':'
string|'"MSG_fiction"'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|logPrefix
name|'def'
name|'logPrefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"MockService"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|serviceStarted
dedent|''
name|'def'
name|'serviceStarted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record that the service was started.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'started'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|serviceStopped
dedent|''
name|'def'
name|'serviceStopped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record that the service was stopped.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'stopped'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ssh_TEST
dedent|''
name|'def'
name|'ssh_TEST'
op|'('
name|'self'
op|','
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A message that this service responds to.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'sendPacket'
op|'('
number|'0xff'
op|','
name|'packet'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockFactory
dedent|''
dedent|''
name|'class'
name|'MockFactory'
op|'('
name|'factory'
op|'.'
name|'SSHFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A mocked-up factory based on twisted.conch.ssh.factory.SSHFactory.\n    """'
newline|'\n'
DECL|variable|services
name|'services'
op|'='
op|'{'
nl|'\n'
string|"'ssh-userauth'"
op|':'
name|'MockService'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPublicKeys
name|'def'
name|'getPublicKeys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the public keys that authenticate this server.\n        """'
newline|'\n'
name|'return'
op|'{'
nl|'\n'
string|"'ssh-rsa'"
op|':'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
op|','
nl|'\n'
string|"'ssh-dsa'"
op|':'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicDSA_openssh'
op|')'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPrivateKeys
dedent|''
name|'def'
name|'getPrivateKeys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the private keys that authenticate this server.\n        """'
newline|'\n'
name|'return'
op|'{'
nl|'\n'
string|"'ssh-rsa'"
op|':'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
op|','
nl|'\n'
string|"'ssh-dsa'"
op|':'
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateDSA_openssh'
op|')'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPrimes
dedent|''
name|'def'
name|'getPrimes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the Diffie-Hellman primes that can be used for the\n        diffie-hellman-group-exchange-sha1 key exchange.\n        """'
newline|'\n'
name|'return'
op|'{'
nl|'\n'
number|'1024'
op|':'
op|'('
op|'('
number|'2'
op|','
name|'transport'
op|'.'
name|'DH_PRIME'
op|')'
op|','
op|')'
op|','
nl|'\n'
number|'2048'
op|':'
op|'('
op|'('
number|'3'
op|','
name|'transport'
op|'.'
name|'DH_PRIME'
op|')'
op|','
op|')'
op|','
nl|'\n'
number|'4096'
op|':'
op|'('
op|'('
number|'5'
op|','
number|'7'
op|')'
op|','
op|')'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockOldFactoryPublicKeys
dedent|''
dedent|''
name|'class'
name|'MockOldFactoryPublicKeys'
op|'('
name|'MockFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The old SSHFactory returned mappings from key names to strings from\n    getPublicKeys().  We return those here for testing.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPublicKeys
name|'def'
name|'getPublicKeys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        We used to map key types to public key blobs as strings.\n        """'
newline|'\n'
name|'keys'
op|'='
name|'MockFactory'
op|'.'
name|'getPublicKeys'
op|'('
name|'self'
op|')'
newline|'\n'
name|'for'
name|'name'
op|','
name|'key'
name|'in'
name|'keys'
op|'.'
name|'items'
op|'('
op|')'
op|'['
op|':'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'keys'
op|'['
name|'name'
op|']'
op|'='
name|'key'
op|'.'
name|'blob'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'keys'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockOldFactoryPrivateKeys
dedent|''
dedent|''
name|'class'
name|'MockOldFactoryPrivateKeys'
op|'('
name|'MockFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The old SSHFactory returned mappings from key names to PyCrypto key\n    objects from getPrivateKeys().  We return those here for testing.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPrivateKeys
name|'def'
name|'getPrivateKeys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        We used to map key types to PyCrypto key objects.\n        """'
newline|'\n'
name|'keys'
op|'='
name|'MockFactory'
op|'.'
name|'getPrivateKeys'
op|'('
name|'self'
op|')'
newline|'\n'
name|'for'
name|'name'
op|','
name|'key'
name|'in'
name|'keys'
op|'.'
name|'items'
op|'('
op|')'
op|'['
op|':'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'keys'
op|'['
name|'name'
op|']'
op|'='
name|'key'
op|'.'
name|'keyObject'
newline|'\n'
dedent|''
name|'return'
name|'keys'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TransportTestCase
dedent|''
dedent|''
name|'class'
name|'TransportTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Base class for transport test cases.\n    """'
newline|'\n'
DECL|variable|klass
name|'klass'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'if'
name|'Crypto'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyCrypto"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'pyasn1'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyASN1"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'='
name|'self'
op|'.'
name|'klass'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|secureRandom
name|'def'
name|'secureRandom'
op|'('
name|'len'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Return a consistent entropy value\n            """'
newline|'\n'
name|'return'
string|"'\\x99'"
op|'*'
name|'len'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'oldSecureRandom'
op|'='
name|'randbytes'
op|'.'
name|'secureRandom'
newline|'\n'
name|'randbytes'
op|'.'
name|'secureRandom'
op|'='
name|'secureRandom'
newline|'\n'
DECL|function|stubSendPacket
name|'def'
name|'stubSendPacket'
op|'('
name|'messageType'
op|','
name|'payload'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'packets'
op|'.'
name|'append'
op|'('
op|'('
name|'messageType'
op|','
name|'payload'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
comment|'# we just let the kex packet go into the transport'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'sendPacket'
op|'='
name|'stubSendPacket'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'randbytes'
op|'.'
name|'secureRandom'
op|'='
name|'self'
op|'.'
name|'oldSecureRandom'
newline|'\n'
name|'self'
op|'.'
name|'oldSecureRandom'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseSSHTransportTestCase
dedent|''
dedent|''
name|'class'
name|'BaseSSHTransportTestCase'
op|'('
name|'TransportTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test TransportBase.  It implements the non-server/client specific\n    parts of the SSH transport protocol.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|klass
name|'klass'
op|'='
name|'MockTransportBase'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendVersion
name|'def'
name|'test_sendVersion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the first thing sent over the connection is the version\n        string.\n        """'
newline|'\n'
comment|'# the other setup was done in the setup method'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
string|'"SSH-2.0-Twisted"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendPacketPlain
dedent|''
name|'def'
name|'test_sendPacketPlain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that plain (unencrypted, uncompressed) packets are sent\n        correctly.  The format is::\n            uint32 length (including type and padding length)\n            byte padding length\n            byte type\n            bytes[length-padding length-2] data\n            bytes[padding length] padding\n        """'
newline|'\n'
name|'proto'
op|'='
name|'MockTransportBase'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'message'
op|'='
name|'ord'
op|'('
string|"'A'"
op|')'
newline|'\n'
name|'payload'
op|'='
string|"'BCDEFG'"
newline|'\n'
name|'proto'
op|'.'
name|'sendPacket'
op|'('
name|'message'
op|','
name|'payload'
op|')'
newline|'\n'
name|'value'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'value'
op|','
string|"'\\x00\\x00\\x00\\x0c\\x04ABCDEFG\\x99\\x99\\x99\\x99'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendPacketEncrypted
dedent|''
name|'def'
name|'test_sendPacketEncrypted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that packets sent while encryption is enabled are sent\n        correctly.  The whole packet should be encrypted.\n        """'
newline|'\n'
name|'proto'
op|'='
name|'MockTransportBase'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'currentEncryptions'
op|'='
name|'testCipher'
op|'='
name|'MockCipher'
op|'('
op|')'
newline|'\n'
name|'message'
op|'='
name|'ord'
op|'('
string|"'A'"
op|')'
newline|'\n'
name|'payload'
op|'='
string|"'BC'"
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'sendPacket'
op|'('
name|'message'
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'testCipher'
op|'.'
name|'usedEncrypt'
op|')'
newline|'\n'
name|'value'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'value'
op|','
string|"'\\x00\\x00\\x00\\x08\\x04ABC\\x99\\x99\\x99\\x99\\x01'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendPacketCompressed
dedent|''
name|'def'
name|'test_sendPacketCompressed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that packets sent while compression is enabled are sent\n        correctly.  The packet type and data should be encrypted.\n        """'
newline|'\n'
name|'proto'
op|'='
name|'MockTransportBase'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'outgoingCompression'
op|'='
name|'MockCompression'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'sendPacket'
op|'('
name|'ord'
op|'('
string|"'A'"
op|')'
op|','
string|"'B'"
op|')'
newline|'\n'
name|'value'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'value'
op|','
nl|'\n'
string|"'\\x00\\x00\\x00\\x0c\\x08BA\\x66\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendPacketBoth
dedent|''
name|'def'
name|'test_sendPacketBoth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that packets sent while compression and encryption are\n        enabled are sent correctly.  The packet type and data should be\n        compressed and then the whole packet should be encrypted.\n        """'
newline|'\n'
name|'proto'
op|'='
name|'MockTransportBase'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'currentEncryptions'
op|'='
name|'testCipher'
op|'='
name|'MockCipher'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'outgoingCompression'
op|'='
name|'MockCompression'
op|'('
op|')'
newline|'\n'
name|'message'
op|'='
name|'ord'
op|'('
string|"'A'"
op|')'
newline|'\n'
name|'payload'
op|'='
string|"'BC'"
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'sendPacket'
op|'('
name|'message'
op|','
name|'payload'
op|')'
newline|'\n'
name|'value'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'value'
op|','
nl|'\n'
string|"'\\x00\\x00\\x00\\x0e\\x09CBA\\x66\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99'"
nl|'\n'
string|"'\\x01'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPacketPlain
dedent|''
name|'def'
name|'test_getPacketPlain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that packets are retrieved correctly out of the buffer when\n        no encryption is enabled.\n        """'
newline|'\n'
name|'proto'
op|'='
name|'MockTransportBase'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'sendPacket'
op|'('
name|'ord'
op|'('
string|"'A'"
op|')'
op|','
string|"'BC'"
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'buf'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'+'
string|"'extra'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'getPacket'
op|'('
op|')'
op|','
string|"'ABC'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'buf'
op|','
string|"'extra'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPacketEncrypted
dedent|''
name|'def'
name|'test_getPacketEncrypted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that encrypted packets are retrieved correctly.\n        See test_sendPacketEncrypted.\n        """'
newline|'\n'
name|'proto'
op|'='
name|'MockTransportBase'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'sendKexInit'
op|'='
name|'lambda'
op|':'
name|'None'
comment|"# don't send packets"
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'currentEncryptions'
op|'='
name|'testCipher'
op|'='
name|'MockCipher'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'sendPacket'
op|'('
name|'ord'
op|'('
string|"'A'"
op|')'
op|','
string|"'BCD'"
op|')'
newline|'\n'
name|'value'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'buf'
op|'='
name|'value'
op|'['
op|':'
name|'MockCipher'
op|'.'
name|'decBlockSize'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'getPacket'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'testCipher'
op|'.'
name|'usedDecrypt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'first'
op|','
string|"'\\x00\\x00\\x00\\x0e\\x09A'"
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'buf'
op|'+='
name|'value'
op|'['
name|'MockCipher'
op|'.'
name|'decBlockSize'
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'getPacket'
op|'('
op|')'
op|','
string|"'ABCD'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'buf'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPacketCompressed
dedent|''
name|'def'
name|'test_getPacketCompressed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that compressed packets are retrieved correctly.  See\n        test_sendPacketCompressed.\n        """'
newline|'\n'
name|'proto'
op|'='
name|'MockTransportBase'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'outgoingCompression'
op|'='
name|'MockCompression'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'incomingCompression'
op|'='
name|'proto'
op|'.'
name|'outgoingCompression'
newline|'\n'
name|'proto'
op|'.'
name|'sendPacket'
op|'('
name|'ord'
op|'('
string|"'A'"
op|')'
op|','
string|"'BCD'"
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'buf'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'getPacket'
op|'('
op|')'
op|','
string|"'ABCD'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPacketBoth
dedent|''
name|'def'
name|'test_getPacketBoth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that compressed and encrypted packets are retrieved correctly.\n        See test_sendPacketBoth.\n        """'
newline|'\n'
name|'proto'
op|'='
name|'MockTransportBase'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'sendKexInit'
op|'='
name|'lambda'
op|':'
name|'None'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'currentEncryptions'
op|'='
name|'testCipher'
op|'='
name|'MockCipher'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'outgoingCompression'
op|'='
name|'MockCompression'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'incomingCompression'
op|'='
name|'proto'
op|'.'
name|'outgoingCompression'
newline|'\n'
name|'proto'
op|'.'
name|'sendPacket'
op|'('
name|'ord'
op|'('
string|"'A'"
op|')'
op|','
string|"'BCDEFG'"
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'buf'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'getPacket'
op|'('
op|')'
op|','
string|"'ABCDEFG'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ciphersAreValid
dedent|''
name|'def'
name|'test_ciphersAreValid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that all the supportedCiphers are valid.\n        """'
newline|'\n'
name|'ciphers'
op|'='
name|'transport'
op|'.'
name|'SSHCiphers'
op|'('
string|"'A'"
op|','
string|"'B'"
op|','
string|"'C'"
op|','
string|"'D'"
op|')'
newline|'\n'
name|'iv'
op|'='
name|'key'
op|'='
string|"'\\x00'"
op|'*'
number|'16'
newline|'\n'
name|'for'
name|'cipName'
name|'in'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedCiphers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'ciphers'
op|'.'
name|'_getCipher'
op|'('
name|'cipName'
op|','
name|'iv'
op|','
name|'key'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendKexInit
dedent|''
dedent|''
name|'def'
name|'test_sendKexInit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the KEXINIT (key exchange initiation) message is sent\n        correctly.  Payload::\n            bytes[16] cookie\n            string key exchange algorithms\n            string public key algorithms\n            string outgoing ciphers\n            string incoming ciphers\n            string outgoing MACs\n            string incoming MACs\n            string outgoing compressions\n            string incoming compressions\n            bool first packet follows\n            uint32 0\n        """'
newline|'\n'
name|'value'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'buf'
op|'='
name|'value'
newline|'\n'
name|'packet'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'getPacket'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'packet'
op|'['
number|'0'
op|']'
op|','
name|'chr'
op|'('
name|'transport'
op|'.'
name|'MSG_KEXINIT'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'packet'
op|'['
number|'1'
op|':'
number|'17'
op|']'
op|','
string|"'\\x99'"
op|'*'
number|'16'
op|')'
newline|'\n'
op|'('
name|'kex'
op|','
name|'pubkeys'
op|','
name|'ciphers1'
op|','
name|'ciphers2'
op|','
name|'macs1'
op|','
name|'macs2'
op|','
name|'compressions1'
op|','
nl|'\n'
name|'compressions2'
op|','
name|'languages1'
op|','
name|'languages2'
op|','
nl|'\n'
name|'buf'
op|')'
op|'='
name|'common'
op|'.'
name|'getNS'
op|'('
name|'packet'
op|'['
number|'17'
op|':'
op|']'
op|','
number|'10'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'kex'
op|','
string|"','"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedKeyExchanges'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'pubkeys'
op|','
string|"','"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedPublicKeys'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ciphers1'
op|','
string|"','"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedCiphers'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ciphers2'
op|','
string|"','"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedCiphers'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'macs1'
op|','
string|"','"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedMACs'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'macs2'
op|','
string|"','"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedMACs'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'compressions1'
op|','
nl|'\n'
string|"','"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedCompressions'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'compressions2'
op|','
nl|'\n'
string|"','"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedCompressions'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'languages1'
op|','
string|"','"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedLanguages'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'languages2'
op|','
string|"','"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedLanguages'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'buf'
op|','
string|"'\\x00'"
op|'*'
number|'5'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendDebug
dedent|''
name|'def'
name|'test_sendDebug'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that debug messages are sent correctly.  Payload::\n            bool always display\n            string debug message\n            string language\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'sendDebug'
op|'('
string|'"test"'
op|','
name|'True'
op|','
string|"'en'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'transport'
op|'.'
name|'MSG_DEBUG'
op|','
nl|'\n'
string|'"\\x01\\x00\\x00\\x00\\x04test\\x00\\x00\\x00\\x02en"'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_receiveDebug
dedent|''
name|'def'
name|'test_receiveDebug'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that debug messages are received correctly.  See test_sendDebug.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dispatchMessage'
op|'('
nl|'\n'
name|'transport'
op|'.'
name|'MSG_DEBUG'
op|','
nl|'\n'
string|"'\\x01\\x00\\x00\\x00\\x04test\\x00\\x00\\x00\\x02en'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'debugs'
op|','
op|'['
op|'('
name|'True'
op|','
string|"'test'"
op|','
string|"'en'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendIgnore
dedent|''
name|'def'
name|'test_sendIgnore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that ignored messages are sent correctly.  Payload::\n            string ignored data\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'sendIgnore'
op|'('
string|'"test"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'packets'
op|','
op|'['
op|'('
name|'transport'
op|'.'
name|'MSG_IGNORE'
op|','
nl|'\n'
string|"'\\x00\\x00\\x00\\x04test'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_receiveIgnore
dedent|''
name|'def'
name|'test_receiveIgnore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that ignored messages are received correctly.  See\n        test_sendIgnore.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dispatchMessage'
op|'('
name|'transport'
op|'.'
name|'MSG_IGNORE'
op|','
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ignoreds'
op|','
op|'['
string|"'test'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendUnimplemented
dedent|''
name|'def'
name|'test_sendUnimplemented'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that unimplemented messages are sent correctly.  Payload::\n            uint32 sequence number\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'sendUnimplemented'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'packets'
op|','
op|'['
op|'('
name|'transport'
op|'.'
name|'MSG_UNIMPLEMENTED'
op|','
nl|'\n'
string|"'\\x00\\x00\\x00\\x00'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_receiveUnimplemented
dedent|''
name|'def'
name|'test_receiveUnimplemented'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that unimplemented messages are received correctly.  See\n        test_sendUnimplemented.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dispatchMessage'
op|'('
name|'transport'
op|'.'
name|'MSG_UNIMPLEMENTED'
op|','
nl|'\n'
string|"'\\x00\\x00\\x00\\xff'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'unimplementeds'
op|','
op|'['
number|'255'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendDisconnect
dedent|''
name|'def'
name|'test_sendDisconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that disconnection messages are sent correctly.  Payload::\n            uint32 reason code\n            string reason description\n            string language\n        """'
newline|'\n'
name|'disconnected'
op|'='
op|'['
name|'False'
op|']'
newline|'\n'
DECL|function|stubLoseConnection
name|'def'
name|'stubLoseConnection'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'disconnected'
op|'['
number|'0'
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'='
name|'stubLoseConnection'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'sendDisconnect'
op|'('
number|'0xff'
op|','
string|'"test"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'transport'
op|'.'
name|'MSG_DISCONNECT'
op|','
nl|'\n'
string|'"\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x04test\\x00\\x00\\x00\\x00"'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'disconnected'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_receiveDisconnect
dedent|''
name|'def'
name|'test_receiveDisconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that disconnection messages are received correctly.  See\n        test_sendDisconnect.\n        """'
newline|'\n'
name|'disconnected'
op|'='
op|'['
name|'False'
op|']'
newline|'\n'
DECL|function|stubLoseConnection
name|'def'
name|'stubLoseConnection'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'disconnected'
op|'['
number|'0'
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'='
name|'stubLoseConnection'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dispatchMessage'
op|'('
name|'transport'
op|'.'
name|'MSG_DISCONNECT'
op|','
nl|'\n'
string|"'\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x04test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'errors'
op|','
op|'['
op|'('
number|'255'
op|','
string|"'test'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'disconnected'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_dataReceived
dedent|''
name|'def'
name|'test_dataReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that dataReceived parses packets and dispatches them to\n        ssh_* methods.\n        """'
newline|'\n'
name|'kexInit'
op|'='
op|'['
name|'False'
op|']'
newline|'\n'
DECL|function|stubKEXINIT
name|'def'
name|'stubKEXINIT'
op|'('
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'kexInit'
op|'['
number|'0'
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_KEXINIT'
op|'='
name|'stubKEXINIT'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'gotVersion'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ourVersionString'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'otherVersionString'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'kexInit'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_service
dedent|''
name|'def'
name|'test_service'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the transport can set the running service and dispatches\n        packets to the service\'s packetReceived method.\n        """'
newline|'\n'
name|'service'
op|'='
name|'MockService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'setService'
op|'('
name|'service'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'service'
op|','
name|'service'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'service'
op|'.'
name|'started'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dispatchMessage'
op|'('
number|'0xff'
op|','
string|'"test"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|','
op|'['
op|'('
number|'0xff'
op|','
string|'"test"'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'service2'
op|'='
name|'MockService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'setService'
op|'('
name|'service2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'service2'
op|'.'
name|'started'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'service'
op|'.'
name|'stopped'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'connectionLost'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'service2'
op|'.'
name|'stopped'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_avatar
dedent|''
name|'def'
name|'test_avatar'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the transport notifies the avatar of disconnections.\n        """'
newline|'\n'
name|'disconnected'
op|'='
op|'['
name|'False'
op|']'
newline|'\n'
DECL|function|logout
name|'def'
name|'logout'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'disconnected'
op|'['
number|'0'
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'proto'
op|'.'
name|'logoutFunction'
op|'='
name|'logout'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'avatar'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'connectionLost'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'disconnected'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_isEncrypted
dedent|''
name|'def'
name|'test_isEncrypted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the transport accurately reflects its encrypted status.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isEncrypted'
op|'('
string|"'in'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isEncrypted'
op|'('
string|"'out'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isEncrypted'
op|'('
string|"'both'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'currentEncryptions'
op|'='
name|'MockCipher'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isEncrypted'
op|'('
string|"'in'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isEncrypted'
op|'('
string|"'out'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isEncrypted'
op|'('
string|"'both'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'currentEncryptions'
op|'='
name|'transport'
op|'.'
name|'SSHCiphers'
op|'('
string|"'none'"
op|','
string|"'none'"
op|','
nl|'\n'
string|"'none'"
op|','
string|"'none'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isEncrypted'
op|'('
string|"'in'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isEncrypted'
op|'('
string|"'out'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isEncrypted'
op|'('
string|"'both'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isEncrypted'
op|','
string|"'bad'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_isVerified
dedent|''
name|'def'
name|'test_isVerified'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the transport accurately reflects its verified status.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isVerified'
op|'('
string|"'in'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isVerified'
op|'('
string|"'out'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isVerified'
op|'('
string|"'both'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'currentEncryptions'
op|'='
name|'MockCipher'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isVerified'
op|'('
string|"'in'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isVerified'
op|'('
string|"'out'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isVerified'
op|'('
string|"'both'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'currentEncryptions'
op|'='
name|'transport'
op|'.'
name|'SSHCiphers'
op|'('
string|"'none'"
op|','
string|"'none'"
op|','
nl|'\n'
string|"'none'"
op|','
string|"'none'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isVerified'
op|'('
string|"'in'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isVerified'
op|'('
string|"'out'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isVerified'
op|'('
string|"'both'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'self'
op|'.'
name|'proto'
op|'.'
name|'isVerified'
op|','
string|"'bad'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_loseConnection
dedent|''
name|'def'
name|'test_loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that loseConnection sends a disconnect message and closes the\n        connection.\n        """'
newline|'\n'
name|'disconnected'
op|'='
op|'['
name|'False'
op|']'
newline|'\n'
DECL|function|stubLoseConnection
name|'def'
name|'stubLoseConnection'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'disconnected'
op|'['
number|'0'
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'='
name|'stubLoseConnection'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'transport'
op|'.'
name|'MSG_DISCONNECT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'3'
op|']'
op|','
nl|'\n'
name|'chr'
op|'('
name|'transport'
op|'.'
name|'DISCONNECT_CONNECTION_LOST'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_badVersion
dedent|''
name|'def'
name|'test_badVersion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the transport disconnects when it receives a bad version.\n        """'
newline|'\n'
DECL|function|testBad
name|'def'
name|'testBad'
op|'('
name|'version'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'gotVersion'
op|'='
name|'False'
newline|'\n'
name|'disconnected'
op|'='
op|'['
name|'False'
op|']'
newline|'\n'
DECL|function|stubLoseConnection
name|'def'
name|'stubLoseConnection'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'disconnected'
op|'['
number|'0'
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'='
name|'stubLoseConnection'
newline|'\n'
name|'for'
name|'c'
name|'in'
name|'version'
op|'+'
string|"'\\r\\n'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
name|'c'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'disconnected'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'transport'
op|'.'
name|'MSG_DISCONNECT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'packets'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'3'
op|']'
op|','
nl|'\n'
name|'chr'
op|'('
name|'transport'
op|'.'
name|'DISCONNECT_PROTOCOL_VERSION_NOT_SUPPORTED'
op|')'
op|')'
newline|'\n'
dedent|''
name|'testBad'
op|'('
string|"'SSH-1.5-OpenSSH'"
op|')'
newline|'\n'
name|'testBad'
op|'('
string|"'SSH-3.0-Twisted'"
op|')'
newline|'\n'
name|'testBad'
op|'('
string|"'GET / HTTP/1.1'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_dataBeforeVersion
dedent|''
name|'def'
name|'test_dataBeforeVersion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the transport ignores data sent before the version string.\n        """'
newline|'\n'
name|'proto'
op|'='
name|'MockTransportBase'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'data'
op|'='
op|'('
string|'"""here\'s some stuff beforehand\nhere\'s some other stuff\n"""'
op|'+'
name|'proto'
op|'.'
name|'ourVersionString'
op|'+'
string|'"\\r\\n"'
op|')'
newline|'\n'
op|'['
name|'proto'
op|'.'
name|'dataReceived'
op|'('
name|'c'
op|')'
name|'for'
name|'c'
name|'in'
name|'data'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'proto'
op|'.'
name|'gotVersion'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'otherVersionString'
op|','
name|'proto'
op|'.'
name|'ourVersionString'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_compatabilityVersion
dedent|''
name|'def'
name|'test_compatabilityVersion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the transport treats the compatbility version (1.99)\n        as equivalent to version 2.0.\n        """'
newline|'\n'
name|'proto'
op|'='
name|'MockTransportBase'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|'"SSH-1.99-OpenSSH\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'proto'
op|'.'
name|'gotVersion'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'otherVersionString'
op|','
string|'"SSH-1.99-OpenSSH"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_badPackets
dedent|''
name|'def'
name|'test_badPackets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the transport disconnects with an error when it receives\n        bad packets.\n        """'
newline|'\n'
DECL|function|testBad
name|'def'
name|'testBad'
op|'('
name|'packet'
op|','
name|'error'
op|'='
name|'transport'
op|'.'
name|'DISCONNECT_PROTOCOL_ERROR'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'buf'
op|'='
name|'packet'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'getPacket'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'packets'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'transport'
op|'.'
name|'MSG_DISCONNECT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'3'
op|']'
op|','
name|'chr'
op|'('
name|'error'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'testBad'
op|'('
string|"'\\xff'"
op|'*'
number|'8'
op|')'
comment|'# big packet'
newline|'\n'
name|'testBad'
op|'('
string|"'\\x00\\x00\\x00\\x05\\x00BCDE'"
op|')'
comment|'# length not modulo blocksize'
newline|'\n'
name|'oldEncryptions'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'currentEncryptions'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'currentEncryptions'
op|'='
name|'MockCipher'
op|'('
op|')'
newline|'\n'
name|'testBad'
op|'('
string|"'\\x00\\x00\\x00\\x08\\x06AB123456'"
op|','
comment|'# bad MAC'
nl|'\n'
name|'transport'
op|'.'
name|'DISCONNECT_MAC_ERROR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'currentEncryptions'
op|'.'
name|'decrypt'
op|'='
name|'lambda'
name|'x'
op|':'
name|'x'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'testBad'
op|'('
string|"'\\x00\\x00\\x00\\x08\\x06BCDEFGHIJK'"
op|')'
comment|'# bad decryption'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'currentEncryptions'
op|'='
name|'oldEncryptions'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'incomingCompression'
op|'='
name|'MockCompression'
op|'('
op|')'
newline|'\n'
DECL|function|stubDecompress
name|'def'
name|'stubDecompress'
op|'('
name|'payload'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|"'bad compression'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'proto'
op|'.'
name|'incomingCompression'
op|'.'
name|'decompress'
op|'='
name|'stubDecompress'
newline|'\n'
name|'testBad'
op|'('
string|"'\\x00\\x00\\x00\\x04\\x00BCDE'"
op|','
comment|'# bad decompression'
nl|'\n'
name|'transport'
op|'.'
name|'DISCONNECT_COMPRESSION_ERROR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unimplementedPackets
dedent|''
name|'def'
name|'test_unimplementedPackets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that unimplemented packet types cause MSG_UNIMPLEMENTED packets\n        to be sent.\n        """'
newline|'\n'
name|'seqnum'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'incomingPacketSequence'
newline|'\n'
DECL|function|checkUnimplemented
name|'def'
name|'checkUnimplemented'
op|'('
name|'seqnum'
op|'='
name|'seqnum'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'transport'
op|'.'
name|'MSG_UNIMPLEMENTED'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'3'
op|']'
op|','
name|'chr'
op|'('
name|'seqnum'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
name|'seqnum'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dispatchMessage'
op|'('
number|'40'
op|','
string|"''"
op|')'
newline|'\n'
name|'checkUnimplemented'
op|'('
op|')'
newline|'\n'
name|'transport'
op|'.'
name|'messages'
op|'['
number|'41'
op|']'
op|'='
string|"'MSG_fiction'"
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dispatchMessage'
op|'('
number|'41'
op|','
string|"''"
op|')'
newline|'\n'
name|'checkUnimplemented'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dispatchMessage'
op|'('
number|'60'
op|','
string|"''"
op|')'
newline|'\n'
name|'checkUnimplemented'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'setService'
op|'('
name|'MockService'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dispatchMessage'
op|'('
number|'70'
op|','
string|"''"
op|')'
newline|'\n'
name|'checkUnimplemented'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dispatchMessage'
op|'('
number|'71'
op|','
string|"''"
op|')'
newline|'\n'
name|'checkUnimplemented'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getKey
dedent|''
name|'def'
name|'test_getKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that _getKey generates the correct keys.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'sessionID'
op|'='
string|"'EF'"
newline|'\n'
nl|'\n'
name|'k1'
op|'='
name|'sha1'
op|'('
string|"'AB'"
op|'+'
string|"'CD'"
op|'+'
string|"'K'"
op|'+'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'sessionID'
op|')'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
name|'k2'
op|'='
name|'sha1'
op|'('
string|"'ABCD'"
op|'+'
name|'k1'
op|')'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'_getKey'
op|'('
string|"'K'"
op|','
string|"'AB'"
op|','
string|"'CD'"
op|')'
op|','
name|'k1'
op|'+'
name|'k2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleClasses
dedent|''
name|'def'
name|'test_multipleClasses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that multiple instances have distinct states.\n        """'
newline|'\n'
name|'proto'
op|'='
name|'self'
op|'.'
name|'proto'
newline|'\n'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'currentEncryptions'
op|'='
name|'MockCipher'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'outgoingCompression'
op|'='
name|'MockCompression'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'incomingCompression'
op|'='
name|'MockCompression'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'setService'
op|'('
name|'MockService'
op|'('
op|')'
op|')'
newline|'\n'
name|'proto2'
op|'='
name|'MockTransportBase'
op|'('
op|')'
newline|'\n'
name|'proto2'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'proto2'
op|'.'
name|'sendIgnore'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfEquals'
op|'('
name|'proto'
op|'.'
name|'gotVersion'
op|','
name|'proto2'
op|'.'
name|'gotVersion'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfEquals'
op|'('
name|'proto'
op|'.'
name|'transport'
op|','
name|'proto2'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfEquals'
op|'('
name|'proto'
op|'.'
name|'outgoingPacketSequence'
op|','
nl|'\n'
name|'proto2'
op|'.'
name|'outgoingPacketSequence'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfEquals'
op|'('
name|'proto'
op|'.'
name|'incomingPacketSequence'
op|','
nl|'\n'
name|'proto2'
op|'.'
name|'incomingPacketSequence'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfEquals'
op|'('
name|'proto'
op|'.'
name|'currentEncryptions'
op|','
nl|'\n'
name|'proto2'
op|'.'
name|'currentEncryptions'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfEquals'
op|'('
name|'proto'
op|'.'
name|'service'
op|','
name|'proto2'
op|'.'
name|'service'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServerAndClientSSHTransportBaseCase
dedent|''
dedent|''
name|'class'
name|'ServerAndClientSSHTransportBaseCase'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests that need to be run on both the server and the client.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|checkDisconnected
name|'def'
name|'checkDisconnected'
op|'('
name|'self'
op|','
name|'kind'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Helper function to check if the transport disconnected.\n        """'
newline|'\n'
name|'if'
name|'kind'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'kind'
op|'='
name|'transport'
op|'.'
name|'DISCONNECT_PROTOCOL_ERROR'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'transport'
op|'.'
name|'MSG_DISCONNECT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'3'
op|']'
op|','
name|'chr'
op|'('
name|'kind'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectModifiedProtocol
dedent|''
name|'def'
name|'connectModifiedProtocol'
op|'('
name|'self'
op|','
name|'protoModification'
op|','
nl|'\n'
name|'kind'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Helper function to connect a modified protocol to the test protocol\n        and test for disconnection.\n        """'
newline|'\n'
name|'if'
name|'kind'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'kind'
op|'='
name|'transport'
op|'.'
name|'DISCONNECT_KEY_EXCHANGE_FAILED'
newline|'\n'
dedent|''
name|'proto2'
op|'='
name|'self'
op|'.'
name|'klass'
op|'('
op|')'
newline|'\n'
name|'protoModification'
op|'('
name|'proto2'
op|')'
newline|'\n'
name|'proto2'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
name|'proto2'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'kind'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'checkDisconnected'
op|'('
name|'kind'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'proto2'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disconnectIfCantMatchKex
dedent|''
name|'def'
name|'test_disconnectIfCantMatchKex'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the transport disconnects if it can\'t match the key\n        exchange\n        """'
newline|'\n'
DECL|function|blankKeyExchanges
name|'def'
name|'blankKeyExchanges'
op|'('
name|'proto2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'proto2'
op|'.'
name|'supportedKeyExchanges'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connectModifiedProtocol'
op|'('
name|'blankKeyExchanges'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disconnectIfCantMatchKeyAlg
dedent|''
name|'def'
name|'test_disconnectIfCantMatchKeyAlg'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like test_disconnectIfCantMatchKex, but for the key algorithm.\n        """'
newline|'\n'
DECL|function|blankPublicKeys
name|'def'
name|'blankPublicKeys'
op|'('
name|'proto2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'proto2'
op|'.'
name|'supportedPublicKeys'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connectModifiedProtocol'
op|'('
name|'blankPublicKeys'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disconnectIfCantMatchCompression
dedent|''
name|'def'
name|'test_disconnectIfCantMatchCompression'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like test_disconnectIfCantMatchKex, but for the compression.\n        """'
newline|'\n'
DECL|function|blankCompressions
name|'def'
name|'blankCompressions'
op|'('
name|'proto2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'proto2'
op|'.'
name|'supportedCompressions'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connectModifiedProtocol'
op|'('
name|'blankCompressions'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disconnectIfCantMatchCipher
dedent|''
name|'def'
name|'test_disconnectIfCantMatchCipher'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like test_disconnectIfCantMatchKex, but for the encryption.\n        """'
newline|'\n'
DECL|function|blankCiphers
name|'def'
name|'blankCiphers'
op|'('
name|'proto2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'proto2'
op|'.'
name|'supportedCiphers'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connectModifiedProtocol'
op|'('
name|'blankCiphers'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disconnectIfCantMatchMAC
dedent|''
name|'def'
name|'test_disconnectIfCantMatchMAC'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like test_disconnectIfCantMatchKex, but for the MAC.\n        """'
newline|'\n'
DECL|function|blankMACs
name|'def'
name|'blankMACs'
op|'('
name|'proto2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'proto2'
op|'.'
name|'supportedMACs'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connectModifiedProtocol'
op|'('
name|'blankMACs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'ServerSSHTransportTestCase'
op|'('
name|'ServerAndClientSSHTransportBaseCase'
op|','
nl|'\n'
DECL|class|ServerSSHTransportTestCase
name|'TransportTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the SSHServerTransport.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|klass
name|'klass'
op|'='
name|'transport'
op|'.'
name|'SSHServerTransport'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'TransportTestCase'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'factory'
op|'='
name|'MockFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'factory'
op|'.'
name|'startFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'TransportTestCase'
op|'.'
name|'tearDown'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'factory'
op|'.'
name|'stopFactory'
op|'('
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'factory'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_KEXINIT
dedent|''
name|'def'
name|'test_KEXINIT'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that receiving a KEXINIT packet sets up the correct values on the\n        server.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|"'SSH-2.0-Twisted\\r\\n\\x00\\x00\\x01\\xd4\\t\\x14'"
nl|'\n'
string|"'\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99'"
nl|'\n'
string|"'\\x99\\x00\\x00\\x00=diffie-hellman-group1-sha1,diffie-hellman-g'"
nl|'\n'
string|"'roup-exchange-sha1\\x00\\x00\\x00\\x0fssh-dss,ssh-rsa\\x00\\x00\\x00'"
nl|'\n'
string|"'\\x85aes128-ctr,aes128-cbc,aes192-ctr,aes192-cbc,aes256-ctr,ae'"
nl|'\n'
string|"'s256-cbc,cast128-ctr,cast128-cbc,blowfish-ctr,blowfish-cbc,3d'"
nl|'\n'
string|"'es-ctr,3des-cbc\\x00\\x00\\x00\\x85aes128-ctr,aes128-cbc,aes192-c'"
nl|'\n'
string|"'tr,aes192-cbc,aes256-ctr,aes256-cbc,cast128-ctr,cast128-cbc,b'"
nl|'\n'
string|"'lowfish-ctr,blowfish-cbc,3des-ctr,3des-cbc\\x00\\x00\\x00\\x12hma'"
nl|'\n'
string|"'c-md5,hmac-sha1\\x00\\x00\\x00\\x12hmac-md5,hmac-sha1\\x00\\x00\\x00'"
nl|'\n'
string|"'\\tnone,zlib\\x00\\x00\\x00\\tnone,zlib\\x00\\x00\\x00\\x00\\x00\\x00'"
nl|'\n'
string|"'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99'"
nl|'\n'
string|"'\\x99'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'kexAlg'
op|','
nl|'\n'
string|"'diffie-hellman-group1-sha1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'keyAlg'
op|','
nl|'\n'
string|"'ssh-dss'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'outgoingCompressionType'
op|','
nl|'\n'
string|"'none'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'incomingCompressionType'
op|','
nl|'\n'
string|"'none'"
op|')'
newline|'\n'
name|'ne'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'nextEncryptions'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ne'
op|'.'
name|'outCipType'
op|','
string|"'aes128-ctr'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ne'
op|'.'
name|'inCipType'
op|','
string|"'aes128-ctr'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ne'
op|'.'
name|'outMACType'
op|','
string|"'hmac-md5'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ne'
op|'.'
name|'inMACType'
op|','
string|"'hmac-md5'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ignoreGuessPacketKex
dedent|''
name|'def'
name|'test_ignoreGuessPacketKex'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The client is allowed to send a guessed key exchange packet\n        after it sends the KEXINIT packet.  However, if the key exchanges\n        do not match, that guess packet must be ignored.  This tests that\n        the packet is ignored in the case of the key exchange method not\n        matching.\n        """'
newline|'\n'
name|'kexInitPacket'
op|'='
string|"'\\x00'"
op|'*'
number|'16'
op|'+'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'common'
op|'.'
name|'NS'
op|'('
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
nl|'\n'
op|'['
string|"','"
op|'.'
name|'join'
op|'('
name|'y'
op|')'
name|'for'
name|'y'
name|'in'
nl|'\n'
op|'['
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedKeyExchanges'
op|'['
op|':'
op|':'
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedPublicKeys'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedCiphers'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedCiphers'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedMACs'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedMACs'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedCompressions'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedCompressions'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedLanguages'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedLanguages'
op|']'
op|']'
op|']'
op|')'
op|')'
op|'+'
op|'('
nl|'\n'
string|"'\\xff\\x00\\x00\\x00\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_KEXINIT'
op|'('
name|'kexInitPacket'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ignoreNextPacket'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_DEBUG'
op|'('
string|'"\\x01\\x00\\x00\\x00\\x04test\\x00\\x00\\x00\\x00"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ignoreNextPacket'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_KEX_DH_GEX_REQUEST_OLD'
op|'('
string|"'\\x00\\x00\\x08\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ignoreNextPacket'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ignoreNextPacket'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_KEX_DH_GEX_REQUEST'
op|'('
string|"'\\x00\\x00\\x08\\x00'"
op|'*'
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ignoreNextPacket'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ignoreGuessPacketKey
dedent|''
name|'def'
name|'test_ignoreGuessPacketKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like test_ignoreGuessPacketKex, but for an incorrectly guessed\n        public key format.\n        """'
newline|'\n'
name|'kexInitPacket'
op|'='
string|"'\\x00'"
op|'*'
number|'16'
op|'+'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'common'
op|'.'
name|'NS'
op|'('
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
nl|'\n'
op|'['
string|"','"
op|'.'
name|'join'
op|'('
name|'y'
op|')'
name|'for'
name|'y'
name|'in'
nl|'\n'
op|'['
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedKeyExchanges'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedPublicKeys'
op|'['
op|':'
op|':'
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedCiphers'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedCiphers'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedMACs'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedMACs'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedCompressions'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedCompressions'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedLanguages'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedLanguages'
op|']'
op|']'
op|']'
op|')'
op|')'
op|'+'
op|'('
nl|'\n'
string|"'\\xff\\x00\\x00\\x00\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_KEXINIT'
op|'('
name|'kexInitPacket'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ignoreNextPacket'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_DEBUG'
op|'('
string|'"\\x01\\x00\\x00\\x00\\x04test\\x00\\x00\\x00\\x00"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ignoreNextPacket'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_KEX_DH_GEX_REQUEST_OLD'
op|'('
string|"'\\x00\\x00\\x08\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ignoreNextPacket'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ignoreNextPacket'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_KEX_DH_GEX_REQUEST'
op|'('
string|"'\\x00\\x00\\x08\\x00'"
op|'*'
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ignoreNextPacket'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_KEXDH_INIT
dedent|''
name|'def'
name|'test_KEXDH_INIT'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the KEXDH_INIT packet causes the server to send a\n        KEXDH_REPLY with the server\'s public key and a signature.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedKeyExchanges'
op|'='
op|'['
string|"'diffie-hellman-group1-sha1'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedPublicKeys'
op|'='
op|'['
string|"'ssh-rsa'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'e'
op|'='
name|'pow'
op|'('
name|'transport'
op|'.'
name|'DH_GENERATOR'
op|','
number|'5000'
op|','
nl|'\n'
name|'transport'
op|'.'
name|'DH_PRIME'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_KEX_DH_GEX_REQUEST_OLD'
op|'('
name|'common'
op|'.'
name|'MP'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'y'
op|'='
name|'common'
op|'.'
name|'getMP'
op|'('
string|"'\\x00\\x00\\x00\\x40'"
op|'+'
string|"'\\x99'"
op|'*'
number|'64'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'f'
op|'='
name|'common'
op|'.'
name|'_MPpow'
op|'('
name|'transport'
op|'.'
name|'DH_GENERATOR'
op|','
name|'y'
op|','
name|'transport'
op|'.'
name|'DH_PRIME'
op|')'
newline|'\n'
name|'sharedSecret'
op|'='
name|'common'
op|'.'
name|'_MPpow'
op|'('
name|'e'
op|','
name|'y'
op|','
name|'transport'
op|'.'
name|'DH_PRIME'
op|')'
newline|'\n'
nl|'\n'
name|'h'
op|'='
name|'sha1'
op|'('
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ourVersionString'
op|')'
op|'*'
number|'2'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ourKexInitPayload'
op|')'
op|'*'
number|'2'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'factory'
op|'.'
name|'publicKeys'
op|'['
string|"'ssh-rsa'"
op|']'
op|'.'
name|'blob'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'MP'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'f'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'sharedSecret'
op|')'
newline|'\n'
name|'exchangeHash'
op|'='
name|'h'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'signature'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'factory'
op|'.'
name|'privateKeys'
op|'['
string|"'ssh-rsa'"
op|']'
op|'.'
name|'sign'
op|'('
nl|'\n'
name|'exchangeHash'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'transport'
op|'.'
name|'MSG_KEXDH_REPLY'
op|','
nl|'\n'
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'factory'
op|'.'
name|'publicKeys'
op|'['
string|"'ssh-rsa'"
op|']'
op|'.'
name|'blob'
op|'('
op|')'
op|')'
nl|'\n'
op|'+'
name|'f'
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
name|'signature'
op|')'
op|')'
op|','
nl|'\n'
op|'('
name|'transport'
op|'.'
name|'MSG_NEWKEYS'
op|','
string|"''"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_KEX_DH_GEX_REQUEST_OLD
dedent|''
name|'def'
name|'test_KEX_DH_GEX_REQUEST_OLD'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the KEX_DH_GEX_REQUEST_OLD message causes the server\n        to reply with a KEX_DH_GEX_GROUP message with the correct\n        Diffie-Hellman group.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedKeyExchanges'
op|'='
op|'['
nl|'\n'
string|"'diffie-hellman-group-exchange-sha1'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedPublicKeys'
op|'='
op|'['
string|"'ssh-rsa'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_KEX_DH_GEX_REQUEST_OLD'
op|'('
string|"'\\x00\\x00\\x04\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'transport'
op|'.'
name|'MSG_KEX_DH_GEX_GROUP'
op|','
nl|'\n'
name|'common'
op|'.'
name|'MP'
op|'('
name|'transport'
op|'.'
name|'DH_PRIME'
op|')'
op|'+'
string|"'\\x00\\x00\\x00\\x01\\x02'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'g'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'p'
op|','
name|'transport'
op|'.'
name|'DH_PRIME'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_KEX_DH_GEX_REQUEST_OLD_badKexAlg
dedent|''
name|'def'
name|'test_KEX_DH_GEX_REQUEST_OLD_badKexAlg'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that if the server recieves a KEX_DH_GEX_REQUEST_OLD message\n        and the key exchange algorithm is not \'diffie-hellman-group1-sha1\' or\n        \'diffie-hellman-group-exchange-sha1\', we raise a ConchError.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'kexAlg'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ConchError'
op|','
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_KEX_DH_GEX_REQUEST_OLD'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_KEX_DH_GEX_REQUEST
dedent|''
name|'def'
name|'test_KEX_DH_GEX_REQUEST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the KEX_DH_GEX_REQUEST message causes the server to reply\n        with a KEX_DH_GEX_GROUP message with the correct Diffie-Hellman\n        group.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedKeyExchanges'
op|'='
op|'['
nl|'\n'
string|"'diffie-hellman-group-exchange-sha1'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedPublicKeys'
op|'='
op|'['
string|"'ssh-rsa'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_KEX_DH_GEX_REQUEST'
op|'('
string|"'\\x00\\x00\\x04\\x00\\x00\\x00\\x08\\x00'"
op|'+'
nl|'\n'
string|"'\\x00\\x00\\x0c\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'transport'
op|'.'
name|'MSG_KEX_DH_GEX_GROUP'
op|','
nl|'\n'
name|'common'
op|'.'
name|'MP'
op|'('
name|'transport'
op|'.'
name|'DH_PRIME'
op|')'
op|'+'
string|"'\\x00\\x00\\x00\\x01\\x03'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'g'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'p'
op|','
name|'transport'
op|'.'
name|'DH_PRIME'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_KEX_DH_GEX_INIT_after_REQUEST
dedent|''
name|'def'
name|'test_KEX_DH_GEX_INIT_after_REQUEST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the KEX_DH_GEX_INIT message after the client sends\n        KEX_DH_GEX_REQUEST causes the server to send a KEX_DH_GEX_INIT message\n        with a public key and signature.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_KEX_DH_GEX_REQUEST'
op|'('
op|')'
newline|'\n'
name|'e'
op|'='
name|'pow'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'g'
op|','
number|'3'
op|','
name|'self'
op|'.'
name|'proto'
op|'.'
name|'p'
op|')'
newline|'\n'
name|'y'
op|'='
name|'common'
op|'.'
name|'getMP'
op|'('
string|"'\\x00\\x00\\x00\\x80'"
op|'+'
string|"'\\x99'"
op|'*'
number|'128'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'f'
op|'='
name|'common'
op|'.'
name|'_MPpow'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'g'
op|','
name|'y'
op|','
name|'self'
op|'.'
name|'proto'
op|'.'
name|'p'
op|')'
newline|'\n'
name|'sharedSecret'
op|'='
name|'common'
op|'.'
name|'_MPpow'
op|'('
name|'e'
op|','
name|'y'
op|','
name|'self'
op|'.'
name|'proto'
op|'.'
name|'p'
op|')'
newline|'\n'
name|'h'
op|'='
name|'sha1'
op|'('
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ourVersionString'
op|')'
op|'*'
number|'2'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ourKexInitPayload'
op|')'
op|'*'
number|'2'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'factory'
op|'.'
name|'publicKeys'
op|'['
string|"'ssh-rsa'"
op|']'
op|'.'
name|'blob'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
string|"'\\x00\\x00\\x04\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x0c\\x00'"
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'MP'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'p'
op|')'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'MP'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'g'
op|')'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'MP'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'f'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'sharedSecret'
op|')'
newline|'\n'
name|'exchangeHash'
op|'='
name|'h'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_KEX_DH_GEX_INIT'
op|'('
name|'common'
op|'.'
name|'MP'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'packets'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
op|'('
name|'transport'
op|'.'
name|'MSG_KEX_DH_GEX_REPLY'
op|','
nl|'\n'
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'factory'
op|'.'
name|'publicKeys'
op|'['
string|"'ssh-rsa'"
op|']'
op|'.'
name|'blob'
op|'('
op|')'
op|')'
op|'+'
nl|'\n'
name|'f'
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'factory'
op|'.'
name|'privateKeys'
op|'['
string|"'ssh-rsa'"
op|']'
op|'.'
name|'sign'
op|'('
nl|'\n'
name|'exchangeHash'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_KEX_DH_GEX_INIT_after_REQUEST_OLD
dedent|''
name|'def'
name|'test_KEX_DH_GEX_INIT_after_REQUEST_OLD'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the KEX_DH_GEX_INIT message after the client sends\n        KEX_DH_GEX_REQUEST_OLD causes the server to sent a KEX_DH_GEX_INIT\n        message with a public key and signature.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_KEX_DH_GEX_REQUEST_OLD'
op|'('
op|')'
newline|'\n'
name|'e'
op|'='
name|'pow'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'g'
op|','
number|'3'
op|','
name|'self'
op|'.'
name|'proto'
op|'.'
name|'p'
op|')'
newline|'\n'
name|'y'
op|'='
name|'common'
op|'.'
name|'getMP'
op|'('
string|"'\\x00\\x00\\x00\\x80'"
op|'+'
string|"'\\x99'"
op|'*'
number|'128'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'f'
op|'='
name|'common'
op|'.'
name|'_MPpow'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'g'
op|','
name|'y'
op|','
name|'self'
op|'.'
name|'proto'
op|'.'
name|'p'
op|')'
newline|'\n'
name|'sharedSecret'
op|'='
name|'common'
op|'.'
name|'_MPpow'
op|'('
name|'e'
op|','
name|'y'
op|','
name|'self'
op|'.'
name|'proto'
op|'.'
name|'p'
op|')'
newline|'\n'
name|'h'
op|'='
name|'sha1'
op|'('
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ourVersionString'
op|')'
op|'*'
number|'2'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ourKexInitPayload'
op|')'
op|'*'
number|'2'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'factory'
op|'.'
name|'publicKeys'
op|'['
string|"'ssh-rsa'"
op|']'
op|'.'
name|'blob'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
string|"'\\x00\\x00\\x04\\x00'"
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'MP'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'p'
op|')'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'MP'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'g'
op|')'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'MP'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'f'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'sharedSecret'
op|')'
newline|'\n'
name|'exchangeHash'
op|'='
name|'h'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_KEX_DH_GEX_INIT'
op|'('
name|'common'
op|'.'
name|'MP'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'packets'
op|'['
number|'1'
op|':'
op|']'
op|','
nl|'\n'
op|'['
op|'('
name|'transport'
op|'.'
name|'MSG_KEX_DH_GEX_REPLY'
op|','
nl|'\n'
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'factory'
op|'.'
name|'publicKeys'
op|'['
string|"'ssh-rsa'"
op|']'
op|'.'
name|'blob'
op|'('
op|')'
op|')'
op|'+'
nl|'\n'
name|'f'
op|'+'
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'factory'
op|'.'
name|'privateKeys'
op|'['
string|"'ssh-rsa'"
op|']'
op|'.'
name|'sign'
op|'('
nl|'\n'
name|'exchangeHash'
op|')'
op|')'
op|')'
op|','
nl|'\n'
op|'('
name|'transport'
op|'.'
name|'MSG_NEWKEYS'
op|','
string|"''"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_keySetup
dedent|''
name|'def'
name|'test_keySetup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that _keySetup sets up the next encryption keys.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'nextEncryptions'
op|'='
name|'MockCipher'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'_keySetup'
op|'('
string|"'AB'"
op|','
string|"'CD'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'sessionID'
op|','
string|"'CD'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'_keySetup'
op|'('
string|"'AB'"
op|','
string|"'EF'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'sessionID'
op|','
string|"'CD'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|','
op|'('
name|'transport'
op|'.'
name|'MSG_NEWKEYS'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'newKeys'
op|'='
op|'['
name|'self'
op|'.'
name|'proto'
op|'.'
name|'_getKey'
op|'('
name|'c'
op|','
string|"'AB'"
op|','
string|"'EF'"
op|')'
name|'for'
name|'c'
name|'in'
string|"'ABCDEF'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'nextEncryptions'
op|'.'
name|'keys'
op|','
nl|'\n'
op|'('
name|'newKeys'
op|'['
number|'1'
op|']'
op|','
name|'newKeys'
op|'['
number|'3'
op|']'
op|','
name|'newKeys'
op|'['
number|'0'
op|']'
op|','
name|'newKeys'
op|'['
number|'2'
op|']'
op|','
name|'newKeys'
op|'['
number|'5'
op|']'
op|','
nl|'\n'
name|'newKeys'
op|'['
number|'4'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_NEWKEYS
dedent|''
name|'def'
name|'test_NEWKEYS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that NEWKEYS transitions the keys in nextEncryptions to\n        currentEncryptions.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_KEXINIT'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'nextEncryptions'
op|'='
name|'transport'
op|'.'
name|'SSHCiphers'
op|'('
string|"'none'"
op|','
string|"'none'"
op|','
nl|'\n'
string|"'none'"
op|','
string|"'none'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_NEWKEYS'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'currentEncryptions'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'nextEncryptions'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'outgoingCompression'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'incomingCompression'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'outgoingCompressionType'
op|'='
string|"'zlib'"
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_NEWKEYS'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfIdentical'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'outgoingCompression'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'incomingCompressionType'
op|'='
string|"'zlib'"
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_NEWKEYS'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfIdentical'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'incomingCompression'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_SERVICE_REQUEST
dedent|''
name|'def'
name|'test_SERVICE_REQUEST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the SERVICE_REQUEST message requests and starts a\n        service.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_SERVICE_REQUEST'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
string|"'ssh-userauth'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|','
op|'['
op|'('
name|'transport'
op|'.'
name|'MSG_SERVICE_ACCEPT'
op|','
nl|'\n'
name|'common'
op|'.'
name|'NS'
op|'('
string|"'ssh-userauth'"
op|')'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'service'
op|'.'
name|'name'
op|','
string|"'MockService'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disconnectNEWKEYSData
dedent|''
name|'def'
name|'test_disconnectNEWKEYSData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that NEWKEYS disconnects if it receives data.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_NEWKEYS'
op|'('
string|'"bad packet"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checkDisconnected'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disconnectSERVICE_REQUESTBadService
dedent|''
name|'def'
name|'test_disconnectSERVICE_REQUESTBadService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that SERVICE_REQUESTS disconnects if an unknown service is\n        requested.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_SERVICE_REQUEST'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
string|"'no service'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checkDisconnected'
op|'('
name|'transport'
op|'.'
name|'DISCONNECT_SERVICE_NOT_AVAILABLE'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'ClientSSHTransportTestCase'
op|'('
name|'ServerAndClientSSHTransportBaseCase'
op|','
nl|'\n'
DECL|class|ClientSSHTransportTestCase
name|'TransportTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for SSHClientTransport.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|klass
name|'klass'
op|'='
name|'transport'
op|'.'
name|'SSHClientTransport'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_KEXINIT
name|'def'
name|'test_KEXINIT'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that receiving a KEXINIT packet sets up the correct values on the\n        client.  The way algorithms are picks is that the first item in the\n        client\'s list that is also in the server\'s list is chosen.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|"'SSH-2.0-Twisted\\r\\n\\x00\\x00\\x01\\xd4\\t\\x14'"
nl|'\n'
string|"'\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99'"
nl|'\n'
string|"'\\x99\\x00\\x00\\x00=diffie-hellman-group1-sha1,diffie-hellman-g'"
nl|'\n'
string|"'roup-exchange-sha1\\x00\\x00\\x00\\x0fssh-dss,ssh-rsa\\x00\\x00\\x00'"
nl|'\n'
string|"'\\x85aes128-ctr,aes128-cbc,aes192-ctr,aes192-cbc,aes256-ctr,ae'"
nl|'\n'
string|"'s256-cbc,cast128-ctr,cast128-cbc,blowfish-ctr,blowfish-cbc,3d'"
nl|'\n'
string|"'es-ctr,3des-cbc\\x00\\x00\\x00\\x85aes128-ctr,aes128-cbc,aes192-c'"
nl|'\n'
string|"'tr,aes192-cbc,aes256-ctr,aes256-cbc,cast128-ctr,cast128-cbc,b'"
nl|'\n'
string|"'lowfish-ctr,blowfish-cbc,3des-ctr,3des-cbc\\x00\\x00\\x00\\x12hma'"
nl|'\n'
string|"'c-md5,hmac-sha1\\x00\\x00\\x00\\x12hmac-md5,hmac-sha1\\x00\\x00\\x00'"
nl|'\n'
string|"'\\tzlib,none\\x00\\x00\\x00\\tzlib,none\\x00\\x00\\x00\\x00\\x00\\x00'"
nl|'\n'
string|"'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x99\\x99\\x99\\x99\\x99\\x99\\x99\\x99'"
nl|'\n'
string|"'\\x99'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'kexAlg'
op|','
nl|'\n'
string|"'diffie-hellman-group-exchange-sha1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'keyAlg'
op|','
nl|'\n'
string|"'ssh-rsa'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'outgoingCompressionType'
op|','
nl|'\n'
string|"'none'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'incomingCompressionType'
op|','
nl|'\n'
string|"'none'"
op|')'
newline|'\n'
name|'ne'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'nextEncryptions'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ne'
op|'.'
name|'outCipType'
op|','
string|"'aes256-ctr'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ne'
op|'.'
name|'inCipType'
op|','
string|"'aes256-ctr'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ne'
op|'.'
name|'outMACType'
op|','
string|"'hmac-sha1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ne'
op|'.'
name|'inMACType'
op|','
string|"'hmac-sha1'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|verifyHostKey
dedent|''
name|'def'
name|'verifyHostKey'
op|'('
name|'self'
op|','
name|'pubKey'
op|','
name|'fingerprint'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mock version of SSHClientTransport.verifyHostKey.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'calledVerifyHostKey'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'pubKey'
op|','
name|'self'
op|'.'
name|'blob'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'fingerprint'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
name|'md5'
op|'('
name|'pubKey'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'TransportTestCase'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'blob'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'publicRSA_openssh'
op|')'
op|'.'
name|'blob'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'privObj'
op|'='
name|'keys'
op|'.'
name|'Key'
op|'.'
name|'fromString'
op|'('
name|'keydata'
op|'.'
name|'privateRSA_openssh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'calledVerifyHostKey'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'verifyHostKey'
op|'='
name|'self'
op|'.'
name|'verifyHostKey'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_notImplementedClientMethods
dedent|''
name|'def'
name|'test_notImplementedClientMethods'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        verifyHostKey() should return a Deferred which fails with a\n        NotImplementedError exception.  connectionSecure() should raise\n        NotImplementedError().\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
name|'self'
op|'.'
name|'klass'
op|'('
op|')'
op|'.'
name|'connectionSecure'
op|')'
newline|'\n'
DECL|function|_checkRaises
name|'def'
name|'_checkRaises'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'.'
name|'trap'
op|'('
name|'NotImplementedError'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'klass'
op|'('
op|')'
op|'.'
name|'verifyHostKey'
op|'('
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'fail'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'_checkRaises'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_KEXINIT_groupexchange
dedent|''
name|'def'
name|'test_KEXINIT_groupexchange'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a KEXINIT packet with a group-exchange key exchange results\n        in a KEX_DH_GEX_REQUEST_OLD message..\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedKeyExchanges'
op|'='
op|'['
nl|'\n'
string|"'diffie-hellman-group-exchange-sha1'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|','
op|'['
op|'('
name|'transport'
op|'.'
name|'MSG_KEX_DH_GEX_REQUEST_OLD'
op|','
nl|'\n'
string|"'\\x00\\x00\\x08\\x00'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_KEXINIT_group1
dedent|''
name|'def'
name|'test_KEXINIT_group1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like test_KEXINIT_groupexchange, but for the group-1 key exchange.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedKeyExchanges'
op|'='
op|'['
string|"'diffie-hellman-group1-sha1'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'common'
op|'.'
name|'MP'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'x'
op|')'
op|'['
number|'5'
op|':'
op|']'
op|','
string|"'\\x99'"
op|'*'
number|'64'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
name|'transport'
op|'.'
name|'MSG_KEXDH_INIT'
op|','
name|'self'
op|'.'
name|'proto'
op|'.'
name|'e'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_KEXINIT_badKexAlg
dedent|''
name|'def'
name|'test_KEXINIT_badKexAlg'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the client raises a ConchError if it receives a\n        KEXINIT message bug doesn\'t have a key exchange algorithm that we\n        understand.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'supportedKeyExchanges'
op|'='
op|'['
string|"'diffie-hellman-group2-sha1'"
op|']'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'.'
name|'replace'
op|'('
string|"'group1'"
op|','
string|"'group2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ConchError'
op|','
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dataReceived'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_KEXDH_REPLY
dedent|''
name|'def'
name|'test_KEXDH_REPLY'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the KEXDH_REPLY message verifies the server.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_KEXINIT_group1'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'sharedSecret'
op|'='
name|'common'
op|'.'
name|'_MPpow'
op|'('
name|'transport'
op|'.'
name|'DH_GENERATOR'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'x'
op|','
name|'transport'
op|'.'
name|'DH_PRIME'
op|')'
newline|'\n'
name|'h'
op|'='
name|'sha1'
op|'('
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ourVersionString'
op|')'
op|'*'
number|'2'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ourKexInitPayload'
op|')'
op|'*'
number|'2'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'blob'
op|')'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'e'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
string|"'\\x00\\x00\\x00\\x01\\x02'"
op|')'
comment|'# f'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'sharedSecret'
op|')'
newline|'\n'
name|'exchangeHash'
op|'='
name|'h'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_cbTestKEXDH_REPLY
name|'def'
name|'_cbTestKEXDH_REPLY'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'value'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'calledVerifyHostKey'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'sessionID'
op|','
name|'exchangeHash'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'signature'
op|'='
name|'self'
op|'.'
name|'privObj'
op|'.'
name|'sign'
op|'('
name|'exchangeHash'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_KEX_DH_GEX_GROUP'
op|'('
nl|'\n'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'blob'
op|')'
op|'+'
string|"'\\x00\\x00\\x00\\x01\\x02'"
op|'+'
nl|'\n'
name|'common'
op|'.'
name|'NS'
op|'('
name|'signature'
op|')'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_cbTestKEXDH_REPLY'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_KEX_DH_GEX_GROUP
dedent|''
name|'def'
name|'test_KEX_DH_GEX_GROUP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the KEX_DH_GEX_GROUP message results in a\n        KEX_DH_GEX_INIT message with the client\'s Diffie-Hellman public key.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_KEXINIT_groupexchange'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_KEX_DH_GEX_GROUP'
op|'('
nl|'\n'
string|"'\\x00\\x00\\x00\\x01\\x0f\\x00\\x00\\x00\\x01\\x02'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'p'
op|','
number|'15'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'g'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'common'
op|'.'
name|'MP'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'x'
op|')'
op|'['
number|'5'
op|':'
op|']'
op|','
string|"'\\x99'"
op|'*'
number|'40'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'e'
op|','
nl|'\n'
name|'common'
op|'.'
name|'MP'
op|'('
name|'pow'
op|'('
number|'2'
op|','
name|'self'
op|'.'
name|'proto'
op|'.'
name|'x'
op|','
number|'15'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|'['
number|'1'
op|':'
op|']'
op|','
op|'['
op|'('
name|'transport'
op|'.'
name|'MSG_KEX_DH_GEX_INIT'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'e'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_KEX_DH_GEX_REPLY
dedent|''
name|'def'
name|'test_KEX_DH_GEX_REPLY'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the KEX_DH_GEX_REPLY message results in a verified\n        server.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'test_KEX_DH_GEX_GROUP'
op|'('
op|')'
newline|'\n'
name|'sharedSecret'
op|'='
name|'common'
op|'.'
name|'_MPpow'
op|'('
number|'3'
op|','
name|'self'
op|'.'
name|'proto'
op|'.'
name|'x'
op|','
name|'self'
op|'.'
name|'proto'
op|'.'
name|'p'
op|')'
newline|'\n'
name|'h'
op|'='
name|'sha1'
op|'('
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ourVersionString'
op|')'
op|'*'
number|'2'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ourKexInitPayload'
op|')'
op|'*'
number|'2'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'blob'
op|')'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
string|"'\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x01\\x0f\\x00\\x00\\x00\\x01\\x02'"
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'e'
op|')'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
string|"'\\x00\\x00\\x00\\x01\\x03'"
op|')'
comment|'# f'
newline|'\n'
name|'h'
op|'.'
name|'update'
op|'('
name|'sharedSecret'
op|')'
newline|'\n'
name|'exchangeHash'
op|'='
name|'h'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_cbTestKEX_DH_GEX_REPLY
name|'def'
name|'_cbTestKEX_DH_GEX_REPLY'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'value'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'calledVerifyHostKey'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'sessionID'
op|','
name|'exchangeHash'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'signature'
op|'='
name|'self'
op|'.'
name|'privObj'
op|'.'
name|'sign'
op|'('
name|'exchangeHash'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_KEX_DH_GEX_REPLY'
op|'('
nl|'\n'
name|'common'
op|'.'
name|'NS'
op|'('
name|'self'
op|'.'
name|'blob'
op|')'
op|'+'
nl|'\n'
string|"'\\x00\\x00\\x00\\x01\\x03'"
op|'+'
nl|'\n'
name|'common'
op|'.'
name|'NS'
op|'('
name|'signature'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_cbTestKEX_DH_GEX_REPLY'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_keySetup
dedent|''
name|'def'
name|'test_keySetup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that _keySetup sets up the next encryption keys.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'nextEncryptions'
op|'='
name|'MockCipher'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'_keySetup'
op|'('
string|"'AB'"
op|','
string|"'CD'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'sessionID'
op|','
string|"'CD'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'_keySetup'
op|'('
string|"'AB'"
op|','
string|"'EF'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'sessionID'
op|','
string|"'CD'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|'['
op|'-'
number|'1'
op|']'
op|','
op|'('
name|'transport'
op|'.'
name|'MSG_NEWKEYS'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'newKeys'
op|'='
op|'['
name|'self'
op|'.'
name|'proto'
op|'.'
name|'_getKey'
op|'('
name|'c'
op|','
string|"'AB'"
op|','
string|"'EF'"
op|')'
name|'for'
name|'c'
name|'in'
string|"'ABCDEF'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'nextEncryptions'
op|'.'
name|'keys'
op|','
nl|'\n'
op|'('
name|'newKeys'
op|'['
number|'0'
op|']'
op|','
name|'newKeys'
op|'['
number|'2'
op|']'
op|','
name|'newKeys'
op|'['
number|'1'
op|']'
op|','
name|'newKeys'
op|'['
number|'3'
op|']'
op|','
nl|'\n'
name|'newKeys'
op|'['
number|'4'
op|']'
op|','
name|'newKeys'
op|'['
number|'5'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_NEWKEYS
dedent|''
name|'def'
name|'test_NEWKEYS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that NEWKEYS transitions the keys from nextEncryptions to\n        currentEncryptions.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_KEXINIT'
op|'('
op|')'
newline|'\n'
name|'secure'
op|'='
op|'['
name|'False'
op|']'
newline|'\n'
DECL|function|stubConnectionSecure
name|'def'
name|'stubConnectionSecure'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'secure'
op|'['
number|'0'
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'proto'
op|'.'
name|'connectionSecure'
op|'='
name|'stubConnectionSecure'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'nextEncryptions'
op|'='
name|'transport'
op|'.'
name|'SSHCiphers'
op|'('
string|"'none'"
op|','
string|"'none'"
op|','
nl|'\n'
string|"'none'"
op|','
string|"'none'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_NEWKEYS'
op|'('
string|"''"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failIfIdentical'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'currentEncryptions'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'nextEncryptions'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'nextEncryptions'
op|'='
name|'MockCipher'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'_keySetup'
op|'('
string|"'AB'"
op|','
string|"'EF'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'outgoingCompression'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'incomingCompression'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'currentEncryptions'
op|','
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'nextEncryptions'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'secure'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'outgoingCompressionType'
op|'='
string|"'zlib'"
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_NEWKEYS'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfIdentical'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'outgoingCompression'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'incomingCompressionType'
op|'='
string|"'zlib'"
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_NEWKEYS'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfIdentical'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'incomingCompression'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_SERVICE_ACCEPT
dedent|''
name|'def'
name|'test_SERVICE_ACCEPT'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the SERVICE_ACCEPT packet starts the requested service.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'instance'
op|'='
name|'MockService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_SERVICE_ACCEPT'
op|'('
string|"'\\x00\\x00\\x00\\x0bMockService'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'instance'
op|'.'
name|'started'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requestService
dedent|''
name|'def'
name|'test_requestService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that requesting a service sends a SERVICE_REQUEST packet.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'requestService'
op|'('
name|'MockService'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'packets'
op|','
op|'['
op|'('
name|'transport'
op|'.'
name|'MSG_SERVICE_REQUEST'
op|','
nl|'\n'
string|"'\\x00\\x00\\x00\\x0bMockService'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disconnectKEXDH_REPLYBadSignature
dedent|''
name|'def'
name|'test_disconnectKEXDH_REPLYBadSignature'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that KEXDH_REPLY disconnects if the signature is bad.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_KEXDH_REPLY'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'_continueKEXDH_REPLY'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'blob'
op|','
number|'3'
op|','
string|'"bad signature"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checkDisconnected'
op|'('
name|'transport'
op|'.'
name|'DISCONNECT_KEY_EXCHANGE_FAILED'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disconnectGEX_REPLYBadSignature
dedent|''
name|'def'
name|'test_disconnectGEX_REPLYBadSignature'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like test_disconnectKEXDH_REPLYBadSignature, but for DH_GEX_REPLY.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_KEX_DH_GEX_REPLY'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'_continueGEX_REPLY'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'blob'
op|','
number|'3'
op|','
string|'"bad signature"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checkDisconnected'
op|'('
name|'transport'
op|'.'
name|'DISCONNECT_KEY_EXCHANGE_FAILED'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disconnectNEWKEYSData
dedent|''
name|'def'
name|'test_disconnectNEWKEYSData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that NEWKEYS disconnects if it receives data.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_NEWKEYS'
op|'('
string|'"bad packet"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checkDisconnected'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disconnectSERVICE_ACCEPT
dedent|''
name|'def'
name|'test_disconnectSERVICE_ACCEPT'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that SERVICE_ACCEPT disconnects if the accepted protocol is\n        differet from the asked-for protocol.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'instance'
op|'='
name|'MockService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'ssh_SERVICE_ACCEPT'
op|'('
string|"'\\x00\\x00\\x00\\x03bad'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checkDisconnected'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SSHCiphersTestCase
dedent|''
dedent|''
name|'class'
name|'SSHCiphersTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the SSHCiphers helper class.\n    """'
newline|'\n'
name|'if'
name|'Crypto'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyCrypto"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'pyasn1'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyASN1"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_init
dedent|''
name|'def'
name|'test_init'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the initializer sets up the SSHCiphers object.\n        """'
newline|'\n'
name|'ciphers'
op|'='
name|'transport'
op|'.'
name|'SSHCiphers'
op|'('
string|"'A'"
op|','
string|"'B'"
op|','
string|"'C'"
op|','
string|"'D'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ciphers'
op|'.'
name|'outCipType'
op|','
string|"'A'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ciphers'
op|'.'
name|'inCipType'
op|','
string|"'B'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ciphers'
op|'.'
name|'outMACType'
op|','
string|"'C'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ciphers'
op|'.'
name|'inMACType'
op|','
string|"'D'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getCipher
dedent|''
name|'def'
name|'test_getCipher'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the _getCipher method returns the correct cipher.\n        """'
newline|'\n'
name|'ciphers'
op|'='
name|'transport'
op|'.'
name|'SSHCiphers'
op|'('
string|"'A'"
op|','
string|"'B'"
op|','
string|"'C'"
op|','
string|"'D'"
op|')'
newline|'\n'
name|'iv'
op|'='
name|'key'
op|'='
string|"'\\x00'"
op|'*'
number|'16'
newline|'\n'
name|'for'
name|'cipName'
op|','
op|'('
name|'modName'
op|','
name|'keySize'
op|','
name|'counter'
op|')'
name|'in'
name|'ciphers'
op|'.'
name|'cipherMap'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cip'
op|'='
name|'ciphers'
op|'.'
name|'_getCipher'
op|'('
name|'cipName'
op|','
name|'iv'
op|','
name|'key'
op|')'
newline|'\n'
name|'if'
name|'cipName'
op|'=='
string|"'none'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'cip'
op|','
name|'transport'
op|'.'
name|'_DummyCipher'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'str'
op|'('
name|'cip'
op|')'
op|'.'
name|'startswith'
op|'('
string|"'<'"
op|'+'
name|'modName'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getMAC
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_getMAC'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the _getMAC method returns the correct MAC.\n        """'
newline|'\n'
name|'ciphers'
op|'='
name|'transport'
op|'.'
name|'SSHCiphers'
op|'('
string|"'A'"
op|','
string|"'B'"
op|','
string|"'C'"
op|','
string|"'D'"
op|')'
newline|'\n'
name|'key'
op|'='
string|"'\\x00'"
op|'*'
number|'64'
newline|'\n'
name|'for'
name|'macName'
op|','
name|'mac'
name|'in'
name|'ciphers'
op|'.'
name|'macMap'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mod'
op|'='
name|'ciphers'
op|'.'
name|'_getMAC'
op|'('
name|'macName'
op|','
name|'key'
op|')'
newline|'\n'
name|'if'
name|'macName'
op|'=='
string|"'none'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'mac'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mod'
op|'['
number|'0'
op|']'
op|','
name|'mac'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mod'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
name|'Crypto'
op|'.'
name|'Cipher'
op|'.'
name|'XOR'
op|'.'
name|'new'
op|'('
string|"'\\x36'"
op|')'
op|'.'
name|'encrypt'
op|'('
name|'key'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mod'
op|'['
number|'2'
op|']'
op|','
nl|'\n'
name|'Crypto'
op|'.'
name|'Cipher'
op|'.'
name|'XOR'
op|'.'
name|'new'
op|'('
string|"'\\x5c'"
op|')'
op|'.'
name|'encrypt'
op|'('
name|'key'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mod'
op|'['
number|'3'
op|']'
op|','
name|'len'
op|'('
name|'mod'
op|'['
number|'0'
op|']'
op|'('
op|')'
op|'.'
name|'digest'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setKeysCiphers
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_setKeysCiphers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that setKeys sets up the ciphers.\n        """'
newline|'\n'
name|'key'
op|'='
string|"'\\x00'"
op|'*'
number|'64'
newline|'\n'
name|'cipherItems'
op|'='
name|'transport'
op|'.'
name|'SSHCiphers'
op|'.'
name|'cipherMap'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
name|'for'
name|'cipName'
op|','
op|'('
name|'modName'
op|','
name|'keySize'
op|','
name|'counter'
op|')'
name|'in'
name|'cipherItems'
op|':'
newline|'\n'
indent|'            '
name|'encCipher'
op|'='
name|'transport'
op|'.'
name|'SSHCiphers'
op|'('
name|'cipName'
op|','
string|"'none'"
op|','
string|"'none'"
op|','
string|"'none'"
op|')'
newline|'\n'
name|'decCipher'
op|'='
name|'transport'
op|'.'
name|'SSHCiphers'
op|'('
string|"'none'"
op|','
name|'cipName'
op|','
string|"'none'"
op|','
string|"'none'"
op|')'
newline|'\n'
name|'cip'
op|'='
name|'encCipher'
op|'.'
name|'_getCipher'
op|'('
name|'cipName'
op|','
name|'key'
op|','
name|'key'
op|')'
newline|'\n'
name|'bs'
op|'='
name|'cip'
op|'.'
name|'block_size'
newline|'\n'
name|'encCipher'
op|'.'
name|'setKeys'
op|'('
name|'key'
op|','
name|'key'
op|','
string|"''"
op|','
string|"''"
op|','
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
name|'decCipher'
op|'.'
name|'setKeys'
op|'('
string|"''"
op|','
string|"''"
op|','
name|'key'
op|','
name|'key'
op|','
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'encCipher'
op|'.'
name|'encBlockSize'
op|','
name|'bs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'decCipher'
op|'.'
name|'decBlockSize'
op|','
name|'bs'
op|')'
newline|'\n'
name|'enc'
op|'='
name|'cip'
op|'.'
name|'encrypt'
op|'('
name|'key'
op|'['
op|':'
name|'bs'
op|']'
op|')'
newline|'\n'
name|'enc2'
op|'='
name|'cip'
op|'.'
name|'encrypt'
op|'('
name|'key'
op|'['
op|':'
name|'bs'
op|']'
op|')'
newline|'\n'
name|'if'
name|'counter'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failIfEquals'
op|'('
name|'enc'
op|','
name|'enc2'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'encCipher'
op|'.'
name|'encrypt'
op|'('
name|'key'
op|'['
op|':'
name|'bs'
op|']'
op|')'
op|','
name|'enc'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'encCipher'
op|'.'
name|'encrypt'
op|'('
name|'key'
op|'['
op|':'
name|'bs'
op|']'
op|')'
op|','
name|'enc2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'decCipher'
op|'.'
name|'decrypt'
op|'('
name|'enc'
op|')'
op|','
name|'key'
op|'['
op|':'
name|'bs'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'decCipher'
op|'.'
name|'decrypt'
op|'('
name|'enc2'
op|')'
op|','
name|'key'
op|'['
op|':'
name|'bs'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setKeysMACs
dedent|''
dedent|''
name|'def'
name|'test_setKeysMACs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that setKeys sets up the MACs.\n        """'
newline|'\n'
name|'key'
op|'='
string|"'\\x00'"
op|'*'
number|'64'
newline|'\n'
name|'for'
name|'macName'
op|','
name|'mod'
name|'in'
name|'transport'
op|'.'
name|'SSHCiphers'
op|'.'
name|'macMap'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'outMac'
op|'='
name|'transport'
op|'.'
name|'SSHCiphers'
op|'('
string|"'none'"
op|','
string|"'none'"
op|','
name|'macName'
op|','
string|"'none'"
op|')'
newline|'\n'
name|'inMac'
op|'='
name|'transport'
op|'.'
name|'SSHCiphers'
op|'('
string|"'none'"
op|','
string|"'none'"
op|','
string|"'none'"
op|','
name|'macName'
op|')'
newline|'\n'
name|'outMac'
op|'.'
name|'setKeys'
op|'('
string|"''"
op|','
string|"''"
op|','
string|"''"
op|','
string|"''"
op|','
name|'key'
op|','
string|"''"
op|')'
newline|'\n'
name|'inMac'
op|'.'
name|'setKeys'
op|'('
string|"''"
op|','
string|"''"
op|','
string|"''"
op|','
string|"''"
op|','
string|"''"
op|','
name|'key'
op|')'
newline|'\n'
name|'if'
name|'mod'
op|':'
newline|'\n'
indent|'                '
name|'ds'
op|'='
name|'mod'
op|'('
op|')'
op|'.'
name|'digest_size'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'ds'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'inMac'
op|'.'
name|'verifyDigestSize'
op|','
name|'ds'
op|')'
newline|'\n'
name|'if'
name|'mod'
op|':'
newline|'\n'
indent|'                '
name|'mod'
op|','
name|'i'
op|','
name|'o'
op|','
name|'ds'
op|'='
name|'outMac'
op|'.'
name|'_getMAC'
op|'('
name|'macName'
op|','
name|'key'
op|')'
newline|'\n'
dedent|''
name|'seqid'
op|'='
number|'0'
newline|'\n'
name|'data'
op|'='
name|'key'
newline|'\n'
name|'packet'
op|'='
string|"'\\x00'"
op|'*'
number|'4'
op|'+'
name|'key'
newline|'\n'
name|'if'
name|'mod'
op|':'
newline|'\n'
indent|'                '
name|'mac'
op|'='
name|'mod'
op|'('
name|'o'
op|'+'
name|'mod'
op|'('
name|'i'
op|'+'
name|'packet'
op|')'
op|'.'
name|'digest'
op|'('
op|')'
op|')'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'mac'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'outMac'
op|'.'
name|'makeMAC'
op|'('
name|'seqid'
op|','
name|'data'
op|')'
op|','
name|'mac'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'inMac'
op|'.'
name|'verify'
op|'('
name|'seqid'
op|','
name|'data'
op|','
name|'mac'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CounterTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'CounterTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the _Counter helper class.\n    """'
newline|'\n'
name|'if'
name|'Crypto'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyCrypto"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'pyasn1'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyASN1"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_init
dedent|''
name|'def'
name|'test_init'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the counter is initialized correctly.\n        """'
newline|'\n'
name|'counter'
op|'='
name|'transport'
op|'.'
name|'_Counter'
op|'('
string|"'\\x00'"
op|'*'
number|'8'
op|'+'
string|"'\\xff'"
op|'*'
number|'8'
op|','
number|'8'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'counter'
op|'.'
name|'blockSize'
op|','
number|'8'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'counter'
op|'.'
name|'count'
op|'.'
name|'tostring'
op|'('
op|')'
op|','
string|"'\\x00'"
op|'*'
number|'8'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_count
dedent|''
name|'def'
name|'test_count'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the counter counts incrementally and wraps at the top.\n        """'
newline|'\n'
name|'counter'
op|'='
name|'transport'
op|'.'
name|'_Counter'
op|'('
string|"'\\x00'"
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'counter'
op|'('
op|')'
op|','
string|"'\\x01'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'counter'
op|'('
op|')'
op|','
string|"'\\x02'"
op|')'
newline|'\n'
op|'['
name|'counter'
op|'('
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'252'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'counter'
op|'('
op|')'
op|','
string|"'\\xff'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'counter'
op|'('
op|')'
op|','
string|"'\\x00'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TransportLoopbackTestCase
dedent|''
dedent|''
name|'class'
name|'TransportLoopbackTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test the server transport and client transport against each other,\n    """'
newline|'\n'
name|'if'
name|'Crypto'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyCrypto"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'pyasn1'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyASN1"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_runClientServer
dedent|''
name|'def'
name|'_runClientServer'
op|'('
name|'self'
op|','
name|'mod'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run an async client and server, modifying each using the mod function\n        provided.  Returns a Deferred called back when both Protocols have\n        disconnected.\n\n        @type mod: C{func}\n        @rtype: C{defer.Deferred}\n        """'
newline|'\n'
name|'factory'
op|'='
name|'MockFactory'
op|'('
op|')'
newline|'\n'
name|'server'
op|'='
name|'transport'
op|'.'
name|'SSHServerTransport'
op|'('
op|')'
newline|'\n'
name|'server'
op|'.'
name|'factory'
op|'='
name|'factory'
newline|'\n'
name|'factory'
op|'.'
name|'startFactory'
op|'('
op|')'
newline|'\n'
name|'server'
op|'.'
name|'errors'
op|'='
op|'['
op|']'
newline|'\n'
name|'server'
op|'.'
name|'receiveError'
op|'='
name|'lambda'
name|'code'
op|','
name|'desc'
op|':'
name|'server'
op|'.'
name|'errors'
op|'.'
name|'append'
op|'('
op|'('
nl|'\n'
name|'code'
op|','
name|'desc'
op|')'
op|')'
newline|'\n'
name|'client'
op|'='
name|'transport'
op|'.'
name|'SSHClientTransport'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'verifyHostKey'
op|'='
name|'lambda'
name|'x'
op|','
name|'y'
op|':'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'errors'
op|'='
op|'['
op|']'
newline|'\n'
name|'client'
op|'.'
name|'receiveError'
op|'='
name|'lambda'
name|'code'
op|','
name|'desc'
op|':'
name|'client'
op|'.'
name|'errors'
op|'.'
name|'append'
op|'('
op|'('
nl|'\n'
name|'code'
op|','
name|'desc'
op|')'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'connectionSecure'
op|'='
name|'lambda'
op|':'
name|'client'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'server'
op|'='
name|'mod'
op|'('
name|'server'
op|')'
newline|'\n'
name|'client'
op|'='
name|'mod'
op|'('
name|'client'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|','
name|'server'
op|','
name|'client'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'repr'
op|'('
op|'['
name|'server'
op|'.'
name|'supportedCiphers'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'server'
op|'.'
name|'supportedMACs'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'server'
op|'.'
name|'supportedKeyExchanges'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'server'
op|'.'
name|'supportedCompressions'
op|'['
number|'0'
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'client'
op|'.'
name|'errors'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'server'
op|'.'
name|'errors'
op|','
op|'['
op|'('
nl|'\n'
name|'transport'
op|'.'
name|'DISCONNECT_CONNECTION_LOST'
op|','
nl|'\n'
string|'"user closed connection"'
op|')'
op|']'
op|')'
newline|'\n'
name|'if'
name|'server'
op|'.'
name|'supportedCiphers'
op|'['
number|'0'
op|']'
op|'=='
string|"'none'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'server'
op|'.'
name|'isEncrypted'
op|'('
op|')'
op|','
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'client'
op|'.'
name|'isEncrypted'
op|'('
op|')'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'server'
op|'.'
name|'isEncrypted'
op|'('
op|')'
op|','
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'client'
op|'.'
name|'isEncrypted'
op|'('
op|')'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'server'
op|'.'
name|'supportedMACs'
op|'['
number|'0'
op|']'
op|'=='
string|"'none'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'server'
op|'.'
name|'isVerified'
op|'('
op|')'
op|','
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'client'
op|'.'
name|'isVerified'
op|'('
op|')'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'server'
op|'.'
name|'isVerified'
op|'('
op|')'
op|','
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'client'
op|'.'
name|'isVerified'
op|'('
op|')'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'d'
op|'='
name|'loopback'
op|'.'
name|'loopbackAsync'
op|'('
name|'server'
op|','
name|'client'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|','
name|'server'
op|','
name|'client'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ciphers
dedent|''
name|'def'
name|'test_ciphers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the client and server play nicely together, in all\n        the various combinations of ciphers.\n        """'
newline|'\n'
name|'deferreds'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'cipher'
name|'in'
name|'transport'
op|'.'
name|'SSHTransportBase'
op|'.'
name|'supportedCiphers'
op|'+'
op|'['
string|"'none'"
op|']'
op|':'
newline|'\n'
DECL|function|setCipher
indent|'            '
name|'def'
name|'setCipher'
op|'('
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'proto'
op|'.'
name|'supportedCiphers'
op|'='
op|'['
name|'cipher'
op|']'
newline|'\n'
name|'return'
name|'proto'
newline|'\n'
dedent|''
name|'deferreds'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'_runClientServer'
op|'('
name|'setCipher'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'deferreds'
op|','
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_macs
dedent|''
name|'def'
name|'test_macs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like test_ciphers, but for the various MACs.\n        """'
newline|'\n'
name|'deferreds'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'mac'
name|'in'
name|'transport'
op|'.'
name|'SSHTransportBase'
op|'.'
name|'supportedMACs'
op|'+'
op|'['
string|"'none'"
op|']'
op|':'
newline|'\n'
DECL|function|setMAC
indent|'            '
name|'def'
name|'setMAC'
op|'('
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'proto'
op|'.'
name|'supportedMACs'
op|'='
op|'['
name|'mac'
op|']'
newline|'\n'
name|'return'
name|'proto'
newline|'\n'
dedent|''
name|'deferreds'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'_runClientServer'
op|'('
name|'setMAC'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'deferreds'
op|','
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_keyexchanges
dedent|''
name|'def'
name|'test_keyexchanges'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like test_ciphers, but for the various key exchanges.\n        """'
newline|'\n'
name|'deferreds'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'kex'
name|'in'
name|'transport'
op|'.'
name|'SSHTransportBase'
op|'.'
name|'supportedKeyExchanges'
op|':'
newline|'\n'
DECL|function|setKeyExchange
indent|'            '
name|'def'
name|'setKeyExchange'
op|'('
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'proto'
op|'.'
name|'supportedKeyExchanges'
op|'='
op|'['
name|'kex'
op|']'
newline|'\n'
name|'return'
name|'proto'
newline|'\n'
dedent|''
name|'deferreds'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'_runClientServer'
op|'('
name|'setKeyExchange'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'deferreds'
op|','
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_compressions
dedent|''
name|'def'
name|'test_compressions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like test_ciphers, but for the various compressions.\n        """'
newline|'\n'
name|'deferreds'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'compression'
name|'in'
name|'transport'
op|'.'
name|'SSHTransportBase'
op|'.'
name|'supportedCompressions'
op|':'
newline|'\n'
DECL|function|setCompression
indent|'            '
name|'def'
name|'setCompression'
op|'('
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'proto'
op|'.'
name|'supportedCompressions'
op|'='
op|'['
name|'compression'
op|']'
newline|'\n'
name|'return'
name|'proto'
newline|'\n'
dedent|''
name|'deferreds'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'_runClientServer'
op|'('
name|'setCompression'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'deferreds'
op|','
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|OldFactoryTestCase
dedent|''
dedent|''
name|'class'
name|'OldFactoryTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The old C{SSHFactory.getPublicKeys}() returned mappings of key names to\n    strings of key blobs and mappings of key names to PyCrypto key objects from\n    C{SSHFactory.getPrivateKeys}() (they could also be specified with the\n    C{publicKeys} and C{privateKeys} attributes).  This is no longer supported\n    by the C{SSHServerTransport}, so we warn the user if they create an old\n    factory.\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'Crypto'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyCrypto"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'pyasn1'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"cannot run w/o PyASN1"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPublicKeysWarning
dedent|''
name|'def'
name|'test_getPublicKeysWarning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the return value of C{getPublicKeys}() isn\'t a mapping from key\n        names to C{Key} objects, then warn the user and convert the mapping.\n        """'
newline|'\n'
name|'sshFactory'
op|'='
name|'MockOldFactoryPublicKeys'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"Returning a mapping from strings to strings from"'
nl|'\n'
string|'" getPublicKeys()/publicKeys (in %s) is deprecated.  Return "'
nl|'\n'
string|'"a mapping from strings to Key objects instead."'
op|'%'
nl|'\n'
op|'('
name|'qual'
op|'('
name|'MockOldFactoryPublicKeys'
op|')'
op|','
op|')'
op|','
nl|'\n'
name|'factory'
op|'.'
name|'__file__'
op|','
name|'sshFactory'
op|'.'
name|'startFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sshFactory'
op|'.'
name|'publicKeys'
op|','
name|'MockFactory'
op|'('
op|')'
op|'.'
name|'getPublicKeys'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPrivateKeysWarning
dedent|''
name|'def'
name|'test_getPrivateKeysWarning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the return value of C{getPrivateKeys}() isn\'t a mapping from key\n        names to C{Key} objects, then warn the user and convert the mapping.\n        """'
newline|'\n'
name|'sshFactory'
op|'='
name|'MockOldFactoryPrivateKeys'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"Returning a mapping from strings to PyCrypto key objects from"'
nl|'\n'
string|'" getPrivateKeys()/privateKeys (in %s) is deprecated.  Return"'
nl|'\n'
string|'" a mapping from strings to Key objects instead."'
op|'%'
nl|'\n'
op|'('
name|'qual'
op|'('
name|'MockOldFactoryPrivateKeys'
op|')'
op|','
op|')'
op|','
nl|'\n'
name|'factory'
op|'.'
name|'__file__'
op|','
name|'sshFactory'
op|'.'
name|'startFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sshFactory'
op|'.'
name|'privateKeys'
op|','
nl|'\n'
name|'MockFactory'
op|'('
op|')'
op|'.'
name|'getPrivateKeys'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_publicKeysWarning
dedent|''
name|'def'
name|'test_publicKeysWarning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the value of the C{publicKeys} attribute isn\'t a mapping from key\n        names to C{Key} objects, then warn the user and convert the mapping.\n        """'
newline|'\n'
name|'sshFactory'
op|'='
name|'MockOldFactoryPublicKeys'
op|'('
op|')'
newline|'\n'
name|'sshFactory'
op|'.'
name|'publicKeys'
op|'='
name|'sshFactory'
op|'.'
name|'getPublicKeys'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"Returning a mapping from strings to strings from"'
nl|'\n'
string|'" getPublicKeys()/publicKeys (in %s) is deprecated.  Return "'
nl|'\n'
string|'"a mapping from strings to Key objects instead."'
op|'%'
nl|'\n'
op|'('
name|'qual'
op|'('
name|'MockOldFactoryPublicKeys'
op|')'
op|','
op|')'
op|','
nl|'\n'
name|'factory'
op|'.'
name|'__file__'
op|','
name|'sshFactory'
op|'.'
name|'startFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sshFactory'
op|'.'
name|'publicKeys'
op|','
name|'MockFactory'
op|'('
op|')'
op|'.'
name|'getPublicKeys'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_privateKeysWarning
dedent|''
name|'def'
name|'test_privateKeysWarning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the return value of C{privateKeys} attribute isn\'t a mapping from\n        key names to C{Key} objects, then warn the user and convert the\n        mapping.\n        """'
newline|'\n'
name|'sshFactory'
op|'='
name|'MockOldFactoryPrivateKeys'
op|'('
op|')'
newline|'\n'
name|'sshFactory'
op|'.'
name|'privateKeys'
op|'='
name|'sshFactory'
op|'.'
name|'getPrivateKeys'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"Returning a mapping from strings to PyCrypto key objects from"'
nl|'\n'
string|'" getPrivateKeys()/privateKeys (in %s) is deprecated.  Return"'
nl|'\n'
string|'" a mapping from strings to Key objects instead."'
op|'%'
nl|'\n'
op|'('
name|'qual'
op|'('
name|'MockOldFactoryPrivateKeys'
op|')'
op|','
op|')'
op|','
nl|'\n'
name|'factory'
op|'.'
name|'__file__'
op|','
name|'sshFactory'
op|'.'
name|'startFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sshFactory'
op|'.'
name|'privateKeys'
op|','
nl|'\n'
name|'MockFactory'
op|'('
op|')'
op|'.'
name|'getPrivateKeys'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.conch.test.test_telnet -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTelnet protocol implementation.\n\n@author: Jp Calderone\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'struct'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
op|','
name|'interfaces'
name|'as'
name|'iinternet'
op|','
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
nl|'\n'
DECL|variable|MODE
name|'MODE'
op|'='
name|'chr'
op|'('
number|'1'
op|')'
newline|'\n'
DECL|variable|EDIT
name|'EDIT'
op|'='
number|'1'
newline|'\n'
DECL|variable|TRAPSIG
name|'TRAPSIG'
op|'='
number|'2'
newline|'\n'
DECL|variable|MODE_ACK
name|'MODE_ACK'
op|'='
number|'4'
newline|'\n'
DECL|variable|SOFT_TAB
name|'SOFT_TAB'
op|'='
number|'8'
newline|'\n'
DECL|variable|LIT_ECHO
name|'LIT_ECHO'
op|'='
number|'16'
newline|'\n'
nl|'\n'
comment|'# Characters gleaned from the various (and conflicting) RFCs.  Not all of these are correct.'
nl|'\n'
nl|'\n'
DECL|variable|NULL
name|'NULL'
op|'='
name|'chr'
op|'('
number|'0'
op|')'
comment|'# No operation.'
newline|'\n'
DECL|variable|BEL
name|'BEL'
op|'='
name|'chr'
op|'('
number|'7'
op|')'
comment|'# Produces an audible or'
newline|'\n'
comment|'# visible signal (which does'
nl|'\n'
comment|'# NOT move the print head).'
nl|'\n'
DECL|variable|BS
name|'BS'
op|'='
name|'chr'
op|'('
number|'8'
op|')'
comment|'# Moves the print head one'
newline|'\n'
comment|'# character position towards'
nl|'\n'
comment|'# the left margin.'
nl|'\n'
DECL|variable|HT
name|'HT'
op|'='
name|'chr'
op|'('
number|'9'
op|')'
comment|'# Moves the printer to the'
newline|'\n'
comment|'# next horizontal tab stop.'
nl|'\n'
comment|'# It remains unspecified how'
nl|'\n'
comment|'# either party determines or'
nl|'\n'
comment|'# establishes where such tab'
nl|'\n'
comment|'# stops are located.'
nl|'\n'
DECL|variable|LF
name|'LF'
op|'='
name|'chr'
op|'('
number|'10'
op|')'
comment|'# Moves the printer to the'
newline|'\n'
comment|'# next print line, keeping the'
nl|'\n'
comment|'# same horizontal position.'
nl|'\n'
DECL|variable|VT
name|'VT'
op|'='
name|'chr'
op|'('
number|'11'
op|')'
comment|'# Moves the printer to the'
newline|'\n'
comment|'# next vertical tab stop.  It'
nl|'\n'
comment|'# remains unspecified how'
nl|'\n'
comment|'# either party determines or'
nl|'\n'
comment|'# establishes where such tab'
nl|'\n'
comment|'# stops are located.'
nl|'\n'
DECL|variable|FF
name|'FF'
op|'='
name|'chr'
op|'('
number|'12'
op|')'
comment|'# Moves the printer to the top'
newline|'\n'
comment|'# of the next page, keeping'
nl|'\n'
comment|'# the same horizontal position.'
nl|'\n'
DECL|variable|CR
name|'CR'
op|'='
name|'chr'
op|'('
number|'13'
op|')'
comment|'# Moves the printer to the left'
newline|'\n'
comment|'# margin of the current line.'
nl|'\n'
nl|'\n'
DECL|variable|ECHO
name|'ECHO'
op|'='
name|'chr'
op|'('
number|'1'
op|')'
comment|'# User-to-Server:  Asks the server to send'
newline|'\n'
comment|'# Echos of the transmitted data.'
nl|'\n'
DECL|variable|SGA
name|'SGA'
op|'='
name|'chr'
op|'('
number|'3'
op|')'
comment|'# Suppress Go Ahead.  Go Ahead is silly'
newline|'\n'
comment|'# and most modern servers should suppress'
nl|'\n'
comment|'# it.'
nl|'\n'
DECL|variable|NAWS
name|'NAWS'
op|'='
name|'chr'
op|'('
number|'31'
op|')'
comment|'# Negotiate About Window Size.  Indicate that'
newline|'\n'
comment|'# information about the size of the terminal'
nl|'\n'
comment|'# can be communicated.'
nl|'\n'
DECL|variable|LINEMODE
name|'LINEMODE'
op|'='
name|'chr'
op|'('
number|'34'
op|')'
comment|'# Allow line buffering to be'
newline|'\n'
comment|'# negotiated about.'
nl|'\n'
nl|'\n'
DECL|variable|SE
name|'SE'
op|'='
name|'chr'
op|'('
number|'240'
op|')'
comment|'# End of subnegotiation parameters.'
newline|'\n'
DECL|variable|NOP
name|'NOP'
op|'='
name|'chr'
op|'('
number|'241'
op|')'
comment|'# No operation.'
newline|'\n'
DECL|variable|DM
name|'DM'
op|'='
name|'chr'
op|'('
number|'242'
op|')'
comment|'# "Data Mark": The data stream portion'
newline|'\n'
comment|'# of a Synch.  This should always be'
nl|'\n'
comment|'# accompanied by a TCP Urgent'
nl|'\n'
comment|'# notification.'
nl|'\n'
DECL|variable|BRK
name|'BRK'
op|'='
name|'chr'
op|'('
number|'243'
op|')'
comment|'# NVT character Break.'
newline|'\n'
DECL|variable|IP
name|'IP'
op|'='
name|'chr'
op|'('
number|'244'
op|')'
comment|'# The function Interrupt Process.'
newline|'\n'
DECL|variable|AO
name|'AO'
op|'='
name|'chr'
op|'('
number|'245'
op|')'
comment|'# The function Abort Output'
newline|'\n'
DECL|variable|AYT
name|'AYT'
op|'='
name|'chr'
op|'('
number|'246'
op|')'
comment|'# The function Are You There.'
newline|'\n'
DECL|variable|EC
name|'EC'
op|'='
name|'chr'
op|'('
number|'247'
op|')'
comment|'# The function Erase Character.'
newline|'\n'
DECL|variable|EL
name|'EL'
op|'='
name|'chr'
op|'('
number|'248'
op|')'
comment|'# The function Erase Line'
newline|'\n'
DECL|variable|GA
name|'GA'
op|'='
name|'chr'
op|'('
number|'249'
op|')'
comment|'# The Go Ahead signal.'
newline|'\n'
DECL|variable|SB
name|'SB'
op|'='
name|'chr'
op|'('
number|'250'
op|')'
comment|'# Indicates that what follows is'
newline|'\n'
comment|'# subnegotiation of the indicated'
nl|'\n'
comment|'# option.'
nl|'\n'
DECL|variable|WILL
name|'WILL'
op|'='
name|'chr'
op|'('
number|'251'
op|')'
comment|'# Indicates the desire to begin'
newline|'\n'
comment|'# performing, or confirmation that'
nl|'\n'
comment|'# you are now performing, the'
nl|'\n'
comment|'# indicated option.'
nl|'\n'
DECL|variable|WONT
name|'WONT'
op|'='
name|'chr'
op|'('
number|'252'
op|')'
comment|'# Indicates the refusal to perform,'
newline|'\n'
comment|'# or continue performing, the'
nl|'\n'
comment|'# indicated option.'
nl|'\n'
DECL|variable|DO
name|'DO'
op|'='
name|'chr'
op|'('
number|'253'
op|')'
comment|'# Indicates the request that the'
newline|'\n'
comment|'# other party perform, or'
nl|'\n'
comment|'# confirmation that you are expecting'
nl|'\n'
comment|'# the other party to perform, the'
nl|'\n'
comment|'# indicated option.'
nl|'\n'
DECL|variable|DONT
name|'DONT'
op|'='
name|'chr'
op|'('
number|'254'
op|')'
comment|'# Indicates the demand that the'
newline|'\n'
comment|'# other party stop performing,'
nl|'\n'
comment|'# or confirmation that you are no'
nl|'\n'
comment|'# longer expecting the other party'
nl|'\n'
comment|'# to perform, the indicated option.'
nl|'\n'
DECL|variable|IAC
name|'IAC'
op|'='
name|'chr'
op|'('
number|'255'
op|')'
comment|'# Data Byte 255.  Introduces a'
newline|'\n'
comment|'# telnet command.'
nl|'\n'
nl|'\n'
DECL|variable|LINEMODE_MODE
name|'LINEMODE_MODE'
op|'='
name|'chr'
op|'('
number|'1'
op|')'
newline|'\n'
DECL|variable|LINEMODE_EDIT
name|'LINEMODE_EDIT'
op|'='
name|'chr'
op|'('
number|'1'
op|')'
newline|'\n'
DECL|variable|LINEMODE_TRAPSIG
name|'LINEMODE_TRAPSIG'
op|'='
name|'chr'
op|'('
number|'2'
op|')'
newline|'\n'
DECL|variable|LINEMODE_MODE_ACK
name|'LINEMODE_MODE_ACK'
op|'='
name|'chr'
op|'('
number|'4'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SOFT_TAB
name|'LINEMODE_SOFT_TAB'
op|'='
name|'chr'
op|'('
number|'8'
op|')'
newline|'\n'
DECL|variable|LINEMODE_LIT_ECHO
name|'LINEMODE_LIT_ECHO'
op|'='
name|'chr'
op|'('
number|'16'
op|')'
newline|'\n'
DECL|variable|LINEMODE_FORWARDMASK
name|'LINEMODE_FORWARDMASK'
op|'='
name|'chr'
op|'('
number|'2'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC
name|'LINEMODE_SLC'
op|'='
name|'chr'
op|'('
number|'3'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_SYNCH
name|'LINEMODE_SLC_SYNCH'
op|'='
name|'chr'
op|'('
number|'1'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_BRK
name|'LINEMODE_SLC_BRK'
op|'='
name|'chr'
op|'('
number|'2'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_IP
name|'LINEMODE_SLC_IP'
op|'='
name|'chr'
op|'('
number|'3'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_AO
name|'LINEMODE_SLC_AO'
op|'='
name|'chr'
op|'('
number|'4'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_AYT
name|'LINEMODE_SLC_AYT'
op|'='
name|'chr'
op|'('
number|'5'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_EOR
name|'LINEMODE_SLC_EOR'
op|'='
name|'chr'
op|'('
number|'6'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_ABORT
name|'LINEMODE_SLC_ABORT'
op|'='
name|'chr'
op|'('
number|'7'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_EOF
name|'LINEMODE_SLC_EOF'
op|'='
name|'chr'
op|'('
number|'8'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_SUSP
name|'LINEMODE_SLC_SUSP'
op|'='
name|'chr'
op|'('
number|'9'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_EC
name|'LINEMODE_SLC_EC'
op|'='
name|'chr'
op|'('
number|'10'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_EL
name|'LINEMODE_SLC_EL'
op|'='
name|'chr'
op|'('
number|'11'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LINEMODE_SLC_EW
name|'LINEMODE_SLC_EW'
op|'='
name|'chr'
op|'('
number|'12'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_RP
name|'LINEMODE_SLC_RP'
op|'='
name|'chr'
op|'('
number|'13'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_LNEXT
name|'LINEMODE_SLC_LNEXT'
op|'='
name|'chr'
op|'('
number|'14'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_XON
name|'LINEMODE_SLC_XON'
op|'='
name|'chr'
op|'('
number|'15'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_XOFF
name|'LINEMODE_SLC_XOFF'
op|'='
name|'chr'
op|'('
number|'16'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_FORW1
name|'LINEMODE_SLC_FORW1'
op|'='
name|'chr'
op|'('
number|'17'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_FORW2
name|'LINEMODE_SLC_FORW2'
op|'='
name|'chr'
op|'('
number|'18'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_MCL
name|'LINEMODE_SLC_MCL'
op|'='
name|'chr'
op|'('
number|'19'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_MCR
name|'LINEMODE_SLC_MCR'
op|'='
name|'chr'
op|'('
number|'20'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_MCWL
name|'LINEMODE_SLC_MCWL'
op|'='
name|'chr'
op|'('
number|'21'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_MCWR
name|'LINEMODE_SLC_MCWR'
op|'='
name|'chr'
op|'('
number|'22'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_MCBOL
name|'LINEMODE_SLC_MCBOL'
op|'='
name|'chr'
op|'('
number|'23'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_MCEOL
name|'LINEMODE_SLC_MCEOL'
op|'='
name|'chr'
op|'('
number|'24'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_INSRT
name|'LINEMODE_SLC_INSRT'
op|'='
name|'chr'
op|'('
number|'25'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_OVER
name|'LINEMODE_SLC_OVER'
op|'='
name|'chr'
op|'('
number|'26'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_ECR
name|'LINEMODE_SLC_ECR'
op|'='
name|'chr'
op|'('
number|'27'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_EWR
name|'LINEMODE_SLC_EWR'
op|'='
name|'chr'
op|'('
number|'28'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_EBOL
name|'LINEMODE_SLC_EBOL'
op|'='
name|'chr'
op|'('
number|'29'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_EEOL
name|'LINEMODE_SLC_EEOL'
op|'='
name|'chr'
op|'('
number|'30'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LINEMODE_SLC_DEFAULT
name|'LINEMODE_SLC_DEFAULT'
op|'='
name|'chr'
op|'('
number|'3'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_VALUE
name|'LINEMODE_SLC_VALUE'
op|'='
name|'chr'
op|'('
number|'2'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_CANTCHANGE
name|'LINEMODE_SLC_CANTCHANGE'
op|'='
name|'chr'
op|'('
number|'1'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_NOSUPPORT
name|'LINEMODE_SLC_NOSUPPORT'
op|'='
name|'chr'
op|'('
number|'0'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_LEVELBITS
name|'LINEMODE_SLC_LEVELBITS'
op|'='
name|'chr'
op|'('
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LINEMODE_SLC_ACK
name|'LINEMODE_SLC_ACK'
op|'='
name|'chr'
op|'('
number|'128'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_FLUSHIN
name|'LINEMODE_SLC_FLUSHIN'
op|'='
name|'chr'
op|'('
number|'64'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SLC_FLUSHOUT
name|'LINEMODE_SLC_FLUSHOUT'
op|'='
name|'chr'
op|'('
number|'32'
op|')'
newline|'\n'
DECL|variable|LINEMODE_EOF
name|'LINEMODE_EOF'
op|'='
name|'chr'
op|'('
number|'236'
op|')'
newline|'\n'
DECL|variable|LINEMODE_SUSP
name|'LINEMODE_SUSP'
op|'='
name|'chr'
op|'('
number|'237'
op|')'
newline|'\n'
DECL|variable|LINEMODE_ABORT
name|'LINEMODE_ABORT'
op|'='
name|'chr'
op|'('
number|'238'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ITelnetProtocol
name|'class'
name|'ITelnetProtocol'
op|'('
name|'iinternet'
op|'.'
name|'IProtocol'
op|')'
op|':'
newline|'\n'
DECL|member|unhandledCommand
indent|'    '
name|'def'
name|'unhandledCommand'
op|'('
name|'command'
op|','
name|'argument'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A command was received but not understood.\n        """'
newline|'\n'
nl|'\n'
DECL|member|unhandledSubnegotiation
dedent|''
name|'def'
name|'unhandledSubnegotiation'
op|'('
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A subnegotiation command was received but not understood.\n        """'
newline|'\n'
nl|'\n'
DECL|member|enableLocal
dedent|''
name|'def'
name|'enableLocal'
op|'('
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Enable the given option locally.\n\n        This should enable the given option on this side of the\n        telnet connection and return True.  If False is returned,\n        the option will be treated as still disabled and the peer\n        will be notified.\n        """'
newline|'\n'
nl|'\n'
DECL|member|enableRemote
dedent|''
name|'def'
name|'enableRemote'
op|'('
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicate whether the peer should be allowed to enable this option.\n\n        Returns True if the peer should be allowed to enable this option,\n        False otherwise.\n        """'
newline|'\n'
nl|'\n'
DECL|member|disableLocal
dedent|''
name|'def'
name|'disableLocal'
op|'('
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disable the given option locally.\n\n        Unlike enableLocal, this method cannot fail.  The option must be\n        disabled.\n        """'
newline|'\n'
nl|'\n'
DECL|member|disableRemote
dedent|''
name|'def'
name|'disableRemote'
op|'('
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicate that the peer has disabled this option.\n        """'
newline|'\n'
nl|'\n'
DECL|class|ITelnetTransport
dedent|''
dedent|''
name|'class'
name|'ITelnetTransport'
op|'('
name|'iinternet'
op|'.'
name|'ITransport'
op|')'
op|':'
newline|'\n'
DECL|member|do
indent|'    '
name|'def'
name|'do'
op|'('
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicate a desire for the peer to begin performing the given option.\n\n        Returns a Deferred that fires with True when the peer begins performing\n        the option, or False when the peer refuses to perform it.  If the peer\n        is already performing the given option, the Deferred will fail with\n        L{AlreadyEnabled}.  If a negotiation regarding this option is already\n        in progress, the Deferred will fail with L{AlreadyNegotiating}.\n\n        Note: It is currently possible that this Deferred will never fire,\n        if the peer never responds, or if the peer believes the option to\n        already be enabled.\n        """'
newline|'\n'
nl|'\n'
DECL|member|dont
dedent|''
name|'def'
name|'dont'
op|'('
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicate a desire for the peer to cease performing the given option.\n\n        Returns a Deferred that fires with True when the peer ceases performing\n        the option.  If the peer is not performing the given option, the\n        Deferred will fail with L{AlreadyDisabled}.  If negotiation regarding\n        this option is already in progress, the Deferred will fail with\n        L{AlreadyNegotiating}.\n\n        Note: It is currently possible that this Deferred will never fire,\n        if the peer never responds, or if the peer believes the option to\n        already be disabled.\n        """'
newline|'\n'
nl|'\n'
DECL|member|will
dedent|''
name|'def'
name|'will'
op|'('
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicate our willingness to begin performing this option locally.\n\n        Returns a Deferred that fires with True when the peer agrees to allow\n        us to begin performing this option, or False if the peer refuses to\n        allow us to begin performing it.  If the option is already enabled\n        locally, the Deferred will fail with L{AlreadyEnabled}.  If negotiation\n        regarding this option is already in progress, the Deferred will fail with\n        L{AlreadyNegotiating}.\n\n        Note: It is currently possible that this Deferred will never fire,\n        if the peer never responds, or if the peer believes the option to\n        already be enabled.\n        """'
newline|'\n'
nl|'\n'
DECL|member|wont
dedent|''
name|'def'
name|'wont'
op|'('
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicate that we will stop performing the given option.\n\n        Returns a Deferred that fires with True when the peer acknowledges\n        we have stopped performing this option.  If the option is already\n        disabled locally, the Deferred will fail with L{AlreadyDisabled}.\n        If negotiation regarding this option is already in progress,\n        the Deferred will fail with L{AlreadyNegotiating}.\n\n        Note: It is currently possible that this Deferred will never fire,\n        if the peer never responds, or if the peer believes the option to\n        already be disabled.\n        """'
newline|'\n'
nl|'\n'
DECL|member|requestNegotiation
dedent|''
name|'def'
name|'requestNegotiation'
op|'('
name|'about'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a subnegotiation request.\n\n        @param about: A byte indicating the feature being negotiated.\n        @param bytes: Any number of bytes containing specific information\n        about the negotiation being requested.  No values in this string\n        need to be escaped, as this function will escape any value which\n        requires it.\n        """'
newline|'\n'
nl|'\n'
DECL|class|TelnetError
dedent|''
dedent|''
name|'class'
name|'TelnetError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|NegotiationError
dedent|''
name|'class'
name|'NegotiationError'
op|'('
name|'TelnetError'
op|')'
op|':'
newline|'\n'
DECL|member|__str__
indent|'    '
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__module__'
op|'+'
string|"'.'"
op|'+'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'+'
string|"':'"
op|'+'
name|'repr'
op|'('
name|'self'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|class|OptionRefused
dedent|''
dedent|''
name|'class'
name|'OptionRefused'
op|'('
name|'NegotiationError'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|AlreadyEnabled
dedent|''
name|'class'
name|'AlreadyEnabled'
op|'('
name|'NegotiationError'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|AlreadyDisabled
dedent|''
name|'class'
name|'AlreadyDisabled'
op|'('
name|'NegotiationError'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|AlreadyNegotiating
dedent|''
name|'class'
name|'AlreadyNegotiating'
op|'('
name|'NegotiationError'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|TelnetProtocol
dedent|''
name|'class'
name|'TelnetProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'ITelnetProtocol'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unhandledCommand
name|'def'
name|'unhandledCommand'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'argument'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unhandledSubnegotiation
dedent|''
name|'def'
name|'unhandledSubnegotiation'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|enableLocal
dedent|''
name|'def'
name|'enableLocal'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|enableRemote
dedent|''
name|'def'
name|'enableRemote'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|disableLocal
dedent|''
name|'def'
name|'disableLocal'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|disableRemote
dedent|''
name|'def'
name|'disableRemote'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Telnet
dedent|''
dedent|''
name|'class'
name|'Telnet'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @ivar commandMap: A mapping of bytes to callables.  When a\n    telnet command is received, the command byte (the first byte\n    after IAC) is looked up in this dictionary.  If a callable is\n    found, it is invoked with the argument of the command, or None\n    if the command takes no argument.  Values should be added to\n    this dictionary if commands wish to be handled.  By default,\n    only WILL, WONT, DO, and DONT are handled.  These should not\n    be overridden, as this class handles them correctly and\n    provides an API for interacting with them.\n\n    @ivar negotiationMap: A mapping of bytes to callables.  When\n    a subnegotiation command is received, the command byte (the\n    first byte after SB) is looked up in this dictionary.  If\n    a callable is found, it is invoked with the argument of the\n    subnegotiation.  Values should be added to this dictionary if\n    subnegotiations are to be handled.  By default, no values are\n    handled.\n\n    @ivar options: A mapping of option bytes to their current\n    state.  This state is likely of little use to user code.\n    Changes should not be made to it.\n\n    @ivar state: A string indicating the current parse state.  It\n    can take on the values "data", "escaped", "command", "newline",\n    "subnegotiation", and "subnegotiation-escaped".  Changes\n    should not be made to it.\n\n    @ivar transport: This protocol\'s transport object.\n    """'
newline|'\n'
nl|'\n'
comment|'# One of a lot of things'
nl|'\n'
DECL|variable|state
name|'state'
op|'='
string|"'data'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'options'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'negotiationMap'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'commandMap'
op|'='
op|'{'
nl|'\n'
name|'WILL'
op|':'
name|'self'
op|'.'
name|'telnet_WILL'
op|','
nl|'\n'
name|'WONT'
op|':'
name|'self'
op|'.'
name|'telnet_WONT'
op|','
nl|'\n'
name|'DO'
op|':'
name|'self'
op|'.'
name|'telnet_DO'
op|','
nl|'\n'
name|'DONT'
op|':'
name|'self'
op|'.'
name|'telnet_DONT'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_write
dedent|''
name|'def'
name|'_write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
DECL|class|_OptionState
dedent|''
name|'class'
name|'_OptionState'
op|':'
newline|'\n'
DECL|class|_Perspective
indent|'        '
name|'class'
name|'_Perspective'
op|':'
newline|'\n'
DECL|variable|state
indent|'            '
name|'state'
op|'='
string|"'no'"
newline|'\n'
DECL|variable|negotiating
name|'negotiating'
op|'='
name|'False'
newline|'\n'
DECL|variable|onResult
name|'onResult'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__str__
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'state'
op|'+'
op|'('
string|"'*'"
op|'*'
name|'self'
op|'.'
name|'negotiating'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'us'
op|'='
name|'self'
op|'.'
name|'_Perspective'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'him'
op|'='
name|'self'
op|'.'
name|'_Perspective'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'<_OptionState us=%s him=%s>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'us'
op|','
name|'self'
op|'.'
name|'him'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getOptionState
dedent|''
dedent|''
name|'def'
name|'getOptionState'
op|'('
name|'self'
op|','
name|'opt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'options'
op|'.'
name|'setdefault'
op|'('
name|'opt'
op|','
name|'self'
op|'.'
name|'_OptionState'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do
dedent|''
name|'def'
name|'_do'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_write'
op|'('
name|'IAC'
op|'+'
name|'DO'
op|'+'
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_dont
dedent|''
name|'def'
name|'_dont'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_write'
op|'('
name|'IAC'
op|'+'
name|'DONT'
op|'+'
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_will
dedent|''
name|'def'
name|'_will'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_write'
op|'('
name|'IAC'
op|'+'
name|'WILL'
op|'+'
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_wont
dedent|''
name|'def'
name|'_wont'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_write'
op|'('
name|'IAC'
op|'+'
name|'WONT'
op|'+'
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|will
dedent|''
name|'def'
name|'will'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicate our willingness to enable an option.\n        """'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'getOptionState'
op|'('
name|'option'
op|')'
newline|'\n'
name|'if'
name|'s'
op|'.'
name|'us'
op|'.'
name|'negotiating'
name|'or'
name|'s'
op|'.'
name|'him'
op|'.'
name|'negotiating'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'AlreadyNegotiating'
op|'('
name|'option'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'s'
op|'.'
name|'us'
op|'.'
name|'state'
op|'=='
string|"'yes'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'AlreadyEnabled'
op|'('
name|'option'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'.'
name|'us'
op|'.'
name|'negotiating'
op|'='
name|'True'
newline|'\n'
name|'s'
op|'.'
name|'us'
op|'.'
name|'onResult'
op|'='
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_will'
op|'('
name|'option'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|wont
dedent|''
dedent|''
name|'def'
name|'wont'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicate we are not willing to enable an option.\n        """'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'getOptionState'
op|'('
name|'option'
op|')'
newline|'\n'
name|'if'
name|'s'
op|'.'
name|'us'
op|'.'
name|'negotiating'
name|'or'
name|'s'
op|'.'
name|'him'
op|'.'
name|'negotiating'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'AlreadyNegotiating'
op|'('
name|'option'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'s'
op|'.'
name|'us'
op|'.'
name|'state'
op|'=='
string|"'no'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'AlreadyDisabled'
op|'('
name|'option'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'.'
name|'us'
op|'.'
name|'negotiating'
op|'='
name|'True'
newline|'\n'
name|'s'
op|'.'
name|'us'
op|'.'
name|'onResult'
op|'='
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wont'
op|'('
name|'option'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|do
dedent|''
dedent|''
name|'def'
name|'do'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'self'
op|'.'
name|'getOptionState'
op|'('
name|'option'
op|')'
newline|'\n'
name|'if'
name|'s'
op|'.'
name|'us'
op|'.'
name|'negotiating'
name|'or'
name|'s'
op|'.'
name|'him'
op|'.'
name|'negotiating'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'AlreadyNegotiating'
op|'('
name|'option'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'s'
op|'.'
name|'him'
op|'.'
name|'state'
op|'=='
string|"'yes'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'AlreadyEnabled'
op|'('
name|'option'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'.'
name|'him'
op|'.'
name|'negotiating'
op|'='
name|'True'
newline|'\n'
name|'s'
op|'.'
name|'him'
op|'.'
name|'onResult'
op|'='
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_do'
op|'('
name|'option'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|dont
dedent|''
dedent|''
name|'def'
name|'dont'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'self'
op|'.'
name|'getOptionState'
op|'('
name|'option'
op|')'
newline|'\n'
name|'if'
name|'s'
op|'.'
name|'us'
op|'.'
name|'negotiating'
name|'or'
name|'s'
op|'.'
name|'him'
op|'.'
name|'negotiating'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'AlreadyNegotiating'
op|'('
name|'option'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'s'
op|'.'
name|'him'
op|'.'
name|'state'
op|'=='
string|"'no'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'AlreadyDisabled'
op|'('
name|'option'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'.'
name|'him'
op|'.'
name|'negotiating'
op|'='
name|'True'
newline|'\n'
name|'s'
op|'.'
name|'him'
op|'.'
name|'onResult'
op|'='
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_dont'
op|'('
name|'option'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|requestNegotiation
dedent|''
dedent|''
name|'def'
name|'requestNegotiation'
op|'('
name|'self'
op|','
name|'about'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a negotiation message for the option C{about} with C{bytes} as the\n        payload.\n\n        @see: L{ITelnetTransport.requestNegotiation}\n        """'
newline|'\n'
name|'bytes'
op|'='
name|'bytes'
op|'.'
name|'replace'
op|'('
name|'IAC'
op|','
name|'IAC'
op|'*'
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
name|'IAC'
op|'+'
name|'SB'
op|'+'
name|'about'
op|'+'
name|'bytes'
op|'+'
name|'IAC'
op|'+'
name|'SE'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'appDataBuffer'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'b'
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'data'"
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'b'
op|'=='
name|'IAC'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'state'
op|'='
string|"'escaped'"
newline|'\n'
dedent|''
name|'elif'
name|'b'
op|'=='
string|"'\\r'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'state'
op|'='
string|"'newline'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'appDataBuffer'
op|'.'
name|'append'
op|'('
name|'b'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'escaped'"
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'b'
op|'=='
name|'IAC'
op|':'
newline|'\n'
indent|'                    '
name|'appDataBuffer'
op|'.'
name|'append'
op|'('
name|'b'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'data'"
newline|'\n'
dedent|''
name|'elif'
name|'b'
op|'=='
name|'SB'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'state'
op|'='
string|"'subnegotiation'"
newline|'\n'
name|'self'
op|'.'
name|'commands'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'b'
name|'in'
op|'('
name|'NOP'
op|','
name|'DM'
op|','
name|'BRK'
op|','
name|'IP'
op|','
name|'AO'
op|','
name|'AYT'
op|','
name|'EC'
op|','
name|'EL'
op|','
name|'GA'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'state'
op|'='
string|"'data'"
newline|'\n'
name|'if'
name|'appDataBuffer'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'applicationDataReceived'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'appDataBuffer'
op|')'
op|')'
newline|'\n'
name|'del'
name|'appDataBuffer'
op|'['
op|':'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'commandReceived'
op|'('
name|'b'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'b'
name|'in'
op|'('
name|'WILL'
op|','
name|'WONT'
op|','
name|'DO'
op|','
name|'DONT'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'state'
op|'='
string|"'command'"
newline|'\n'
name|'self'
op|'.'
name|'command'
op|'='
name|'b'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ValueError'
op|'('
string|'"Stumped"'
op|','
name|'b'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'command'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'state'
op|'='
string|"'data'"
newline|'\n'
name|'command'
op|'='
name|'self'
op|'.'
name|'command'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'command'
newline|'\n'
name|'if'
name|'appDataBuffer'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'applicationDataReceived'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'appDataBuffer'
op|')'
op|')'
newline|'\n'
name|'del'
name|'appDataBuffer'
op|'['
op|':'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'commandReceived'
op|'('
name|'command'
op|','
name|'b'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'newline'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'state'
op|'='
string|"'data'"
newline|'\n'
name|'if'
name|'b'
op|'=='
string|"'\\n'"
op|':'
newline|'\n'
indent|'                    '
name|'appDataBuffer'
op|'.'
name|'append'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'b'
op|'=='
string|"'\\0'"
op|':'
newline|'\n'
indent|'                    '
name|'appDataBuffer'
op|'.'
name|'append'
op|'('
string|"'\\r'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'b'
op|'=='
name|'IAC'
op|':'
newline|'\n'
comment|"# IAC isn't really allowed after \\r, according to the"
nl|'\n'
comment|'# RFC, but handling it this way is less surprising than'
nl|'\n'
comment|'# delivering the IAC to the app as application data. '
nl|'\n'
comment|'# The purpose of the restriction is to allow terminals'
nl|'\n'
comment|'# to unambiguously interpret the behavior of the CR'
nl|'\n'
comment|'# after reading only one more byte.  CR LF is supposed'
nl|'\n'
comment|'# to mean one thing (cursor to next line, first column),'
nl|'\n'
comment|'# CR NUL another (cursor to first column).  Absent the'
nl|'\n'
comment|'# NUL, it still makes sense to interpret this as CR and'
nl|'\n'
comment|'# then apply all the usual interpretation to the IAC.'
nl|'\n'
indent|'                    '
name|'appDataBuffer'
op|'.'
name|'append'
op|'('
string|"'\\r'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'escaped'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'appDataBuffer'
op|'.'
name|'append'
op|'('
string|"'\\r'"
op|'+'
name|'b'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'subnegotiation'"
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'b'
op|'=='
name|'IAC'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'state'
op|'='
string|"'subnegotiation-escaped'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'commands'
op|'.'
name|'append'
op|'('
name|'b'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'subnegotiation-escaped'"
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'b'
op|'=='
name|'SE'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'state'
op|'='
string|"'data'"
newline|'\n'
name|'commands'
op|'='
name|'self'
op|'.'
name|'commands'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'commands'
newline|'\n'
name|'if'
name|'appDataBuffer'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'applicationDataReceived'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'appDataBuffer'
op|')'
op|')'
newline|'\n'
name|'del'
name|'appDataBuffer'
op|'['
op|':'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'negotiate'
op|'('
name|'commands'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'state'
op|'='
string|"'subnegotiation'"
newline|'\n'
name|'self'
op|'.'
name|'commands'
op|'.'
name|'append'
op|'('
name|'b'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|'"How\'d you do this?"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'appDataBuffer'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'applicationDataReceived'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'appDataBuffer'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'state'
name|'in'
name|'self'
op|'.'
name|'options'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'state'
op|'.'
name|'us'
op|'.'
name|'onResult'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'='
name|'state'
op|'.'
name|'us'
op|'.'
name|'onResult'
newline|'\n'
name|'state'
op|'.'
name|'us'
op|'.'
name|'onResult'
op|'='
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'state'
op|'.'
name|'him'
op|'.'
name|'onResult'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'='
name|'state'
op|'.'
name|'him'
op|'.'
name|'onResult'
newline|'\n'
name|'state'
op|'.'
name|'him'
op|'.'
name|'onResult'
op|'='
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|applicationDataReceived
dedent|''
dedent|''
dedent|''
name|'def'
name|'applicationDataReceived'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called with application-level data.\n        """'
newline|'\n'
nl|'\n'
DECL|member|unhandledCommand
dedent|''
name|'def'
name|'unhandledCommand'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'argument'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called for commands for which no handler is installed.\n        """'
newline|'\n'
nl|'\n'
DECL|member|commandReceived
dedent|''
name|'def'
name|'commandReceived'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'argument'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cmdFunc'
op|'='
name|'self'
op|'.'
name|'commandMap'
op|'.'
name|'get'
op|'('
name|'command'
op|')'
newline|'\n'
name|'if'
name|'cmdFunc'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unhandledCommand'
op|'('
name|'command'
op|','
name|'argument'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'cmdFunc'
op|'('
name|'argument'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unhandledSubnegotiation
dedent|''
dedent|''
name|'def'
name|'unhandledSubnegotiation'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called for subnegotiations for which no handler is installed.\n        """'
newline|'\n'
nl|'\n'
DECL|member|negotiate
dedent|''
name|'def'
name|'negotiate'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'command'
op|','
name|'bytes'
op|'='
name|'bytes'
op|'['
number|'0'
op|']'
op|','
name|'bytes'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'cmdFunc'
op|'='
name|'self'
op|'.'
name|'negotiationMap'
op|'.'
name|'get'
op|'('
name|'command'
op|')'
newline|'\n'
name|'if'
name|'cmdFunc'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unhandledSubnegotiation'
op|'('
name|'command'
op|','
name|'bytes'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'cmdFunc'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|telnet_WILL
dedent|''
dedent|''
name|'def'
name|'telnet_WILL'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'self'
op|'.'
name|'getOptionState'
op|'('
name|'option'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'willMap'
op|'['
name|'s'
op|'.'
name|'him'
op|'.'
name|'state'
op|','
name|'s'
op|'.'
name|'him'
op|'.'
name|'negotiating'
op|']'
op|'('
name|'self'
op|','
name|'s'
op|','
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|will_no_false
dedent|''
name|'def'
name|'will_no_false'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
comment|'# He is unilaterally offering to enable an option.'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'enableRemote'
op|'('
name|'option'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'.'
name|'him'
op|'.'
name|'state'
op|'='
string|"'yes'"
newline|'\n'
name|'self'
op|'.'
name|'_do'
op|'('
name|'option'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_dont'
op|'('
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|will_no_true
dedent|''
dedent|''
name|'def'
name|'will_no_true'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
comment|'# Peer agreed to enable an option in response to our request.'
nl|'\n'
indent|'        '
name|'state'
op|'.'
name|'him'
op|'.'
name|'state'
op|'='
string|"'yes'"
newline|'\n'
name|'state'
op|'.'
name|'him'
op|'.'
name|'negotiating'
op|'='
name|'False'
newline|'\n'
name|'d'
op|'='
name|'state'
op|'.'
name|'him'
op|'.'
name|'onResult'
newline|'\n'
name|'state'
op|'.'
name|'him'
op|'.'
name|'onResult'
op|'='
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'True'
op|')'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'enableRemote'
op|'('
name|'option'
op|')'
op|','
string|'"enableRemote must return True in this context (for option %r)"'
op|'%'
op|'('
name|'option'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|will_yes_false
dedent|''
name|'def'
name|'will_yes_false'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
comment|'# He is unilaterally offering to enable an already-enabled option.'
nl|'\n'
comment|'# Ignore this.'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|will_yes_true
dedent|''
name|'def'
name|'will_yes_true'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
comment|'# This is a bogus state.  It is here for completeness.  It will'
nl|'\n'
comment|'# never be entered.'
nl|'\n'
indent|'        '
name|'assert'
name|'False'
op|','
string|'"will_yes_true can never be entered, but was called with %r, %r"'
op|'%'
op|'('
name|'state'
op|','
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|willMap
dedent|''
name|'willMap'
op|'='
op|'{'
op|'('
string|"'no'"
op|','
name|'False'
op|')'
op|':'
name|'will_no_false'
op|','
op|'('
string|"'no'"
op|','
name|'True'
op|')'
op|':'
name|'will_no_true'
op|','
nl|'\n'
op|'('
string|"'yes'"
op|','
name|'False'
op|')'
op|':'
name|'will_yes_false'
op|','
op|'('
string|"'yes'"
op|','
name|'True'
op|')'
op|':'
name|'will_yes_true'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|telnet_WONT
name|'def'
name|'telnet_WONT'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'self'
op|'.'
name|'getOptionState'
op|'('
name|'option'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'wontMap'
op|'['
name|'s'
op|'.'
name|'him'
op|'.'
name|'state'
op|','
name|'s'
op|'.'
name|'him'
op|'.'
name|'negotiating'
op|']'
op|'('
name|'self'
op|','
name|'s'
op|','
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|wont_no_false
dedent|''
name|'def'
name|'wont_no_false'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
comment|'# He is unilaterally demanding that an already-disabled option be/remain disabled.'
nl|'\n'
comment|'# Ignore this (although we could record it and refuse subsequent enable attempts'
nl|'\n'
comment|"# from our side - he can always refuse them again though, so we won't)"
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|wont_no_true
dedent|''
name|'def'
name|'wont_no_true'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
comment|'# Peer refused to enable an option in response to our request.'
nl|'\n'
indent|'        '
name|'state'
op|'.'
name|'him'
op|'.'
name|'negotiating'
op|'='
name|'False'
newline|'\n'
name|'d'
op|'='
name|'state'
op|'.'
name|'him'
op|'.'
name|'onResult'
newline|'\n'
name|'state'
op|'.'
name|'him'
op|'.'
name|'onResult'
op|'='
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'errback'
op|'('
name|'OptionRefused'
op|'('
name|'option'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|wont_yes_false
dedent|''
name|'def'
name|'wont_yes_false'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
comment|'# Peer is unilaterally demanding that an option be disabled.'
nl|'\n'
indent|'        '
name|'state'
op|'.'
name|'him'
op|'.'
name|'state'
op|'='
string|"'no'"
newline|'\n'
name|'self'
op|'.'
name|'disableRemote'
op|'('
name|'option'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_dont'
op|'('
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|wont_yes_true
dedent|''
name|'def'
name|'wont_yes_true'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
comment|'# Peer agreed to disable an option at our request.'
nl|'\n'
indent|'        '
name|'state'
op|'.'
name|'him'
op|'.'
name|'state'
op|'='
string|"'no'"
newline|'\n'
name|'state'
op|'.'
name|'him'
op|'.'
name|'negotiating'
op|'='
name|'False'
newline|'\n'
name|'d'
op|'='
name|'state'
op|'.'
name|'him'
op|'.'
name|'onResult'
newline|'\n'
name|'state'
op|'.'
name|'him'
op|'.'
name|'onResult'
op|'='
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'disableRemote'
op|'('
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|wontMap
dedent|''
name|'wontMap'
op|'='
op|'{'
op|'('
string|"'no'"
op|','
name|'False'
op|')'
op|':'
name|'wont_no_false'
op|','
op|'('
string|"'no'"
op|','
name|'True'
op|')'
op|':'
name|'wont_no_true'
op|','
nl|'\n'
op|'('
string|"'yes'"
op|','
name|'False'
op|')'
op|':'
name|'wont_yes_false'
op|','
op|'('
string|"'yes'"
op|','
name|'True'
op|')'
op|':'
name|'wont_yes_true'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|telnet_DO
name|'def'
name|'telnet_DO'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'self'
op|'.'
name|'getOptionState'
op|'('
name|'option'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'doMap'
op|'['
name|'s'
op|'.'
name|'us'
op|'.'
name|'state'
op|','
name|'s'
op|'.'
name|'us'
op|'.'
name|'negotiating'
op|']'
op|'('
name|'self'
op|','
name|'s'
op|','
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_no_false
dedent|''
name|'def'
name|'do_no_false'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
comment|'# Peer is unilaterally requesting that we enable an option.'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'enableLocal'
op|'('
name|'option'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'.'
name|'us'
op|'.'
name|'state'
op|'='
string|"'yes'"
newline|'\n'
name|'self'
op|'.'
name|'_will'
op|'('
name|'option'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_wont'
op|'('
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_no_true
dedent|''
dedent|''
name|'def'
name|'do_no_true'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
comment|'# Peer agreed to allow us to enable an option at our request.'
nl|'\n'
indent|'        '
name|'state'
op|'.'
name|'us'
op|'.'
name|'state'
op|'='
string|"'yes'"
newline|'\n'
name|'state'
op|'.'
name|'us'
op|'.'
name|'negotiating'
op|'='
name|'False'
newline|'\n'
name|'d'
op|'='
name|'state'
op|'.'
name|'us'
op|'.'
name|'onResult'
newline|'\n'
name|'state'
op|'.'
name|'us'
op|'.'
name|'onResult'
op|'='
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'enableLocal'
op|'('
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_yes_false
dedent|''
name|'def'
name|'do_yes_false'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
comment|'# Peer is unilaterally requesting us to enable an already-enabled option.'
nl|'\n'
comment|'# Ignore this.'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|do_yes_true
dedent|''
name|'def'
name|'do_yes_true'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
comment|'# This is a bogus state.  It is here for completeness.  It will never be'
nl|'\n'
comment|'# entered.'
nl|'\n'
indent|'        '
name|'assert'
name|'False'
op|','
string|'"do_yes_true can never be entered, but was called with %r, %r"'
op|'%'
op|'('
name|'state'
op|','
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|doMap
dedent|''
name|'doMap'
op|'='
op|'{'
op|'('
string|"'no'"
op|','
name|'False'
op|')'
op|':'
name|'do_no_false'
op|','
op|'('
string|"'no'"
op|','
name|'True'
op|')'
op|':'
name|'do_no_true'
op|','
nl|'\n'
op|'('
string|"'yes'"
op|','
name|'False'
op|')'
op|':'
name|'do_yes_false'
op|','
op|'('
string|"'yes'"
op|','
name|'True'
op|')'
op|':'
name|'do_yes_true'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|telnet_DONT
name|'def'
name|'telnet_DONT'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'self'
op|'.'
name|'getOptionState'
op|'('
name|'option'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dontMap'
op|'['
name|'s'
op|'.'
name|'us'
op|'.'
name|'state'
op|','
name|'s'
op|'.'
name|'us'
op|'.'
name|'negotiating'
op|']'
op|'('
name|'self'
op|','
name|'s'
op|','
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dont_no_false
dedent|''
name|'def'
name|'dont_no_false'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
comment|'# Peer is unilaterally demanding us to disable an already-disabled option.'
nl|'\n'
comment|'# Ignore this.'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|dont_no_true
dedent|''
name|'def'
name|'dont_no_true'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
comment|'# This is a bogus state.  It is here for completeness.  It will never be'
nl|'\n'
comment|'# entered.'
nl|'\n'
indent|'        '
name|'assert'
name|'False'
op|','
string|'"dont_no_true can never be entered, but was called with %r, %r"'
op|'%'
op|'('
name|'state'
op|','
name|'option'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dont_yes_false
dedent|''
name|'def'
name|'dont_yes_false'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
comment|'# Peer is unilaterally demanding we disable an option.'
nl|'\n'
indent|'        '
name|'state'
op|'.'
name|'us'
op|'.'
name|'state'
op|'='
string|"'no'"
newline|'\n'
name|'self'
op|'.'
name|'disableLocal'
op|'('
name|'option'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wont'
op|'('
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dont_yes_true
dedent|''
name|'def'
name|'dont_yes_true'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
comment|'# Peer acknowledged our notice that we will disable an option.'
nl|'\n'
indent|'        '
name|'state'
op|'.'
name|'us'
op|'.'
name|'state'
op|'='
string|"'no'"
newline|'\n'
name|'state'
op|'.'
name|'us'
op|'.'
name|'negotiating'
op|'='
name|'False'
newline|'\n'
name|'d'
op|'='
name|'state'
op|'.'
name|'us'
op|'.'
name|'onResult'
newline|'\n'
name|'state'
op|'.'
name|'us'
op|'.'
name|'onResult'
op|'='
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'disableLocal'
op|'('
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|dontMap
dedent|''
name|'dontMap'
op|'='
op|'{'
op|'('
string|"'no'"
op|','
name|'False'
op|')'
op|':'
name|'dont_no_false'
op|','
op|'('
string|"'no'"
op|','
name|'True'
op|')'
op|':'
name|'dont_no_true'
op|','
nl|'\n'
op|'('
string|"'yes'"
op|','
name|'False'
op|')'
op|':'
name|'dont_yes_false'
op|','
op|'('
string|"'yes'"
op|','
name|'True'
op|')'
op|':'
name|'dont_yes_true'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|enableLocal
name|'def'
name|'enableLocal'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reject all attempts to enable options.\n        """'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|enableRemote
dedent|''
name|'def'
name|'enableRemote'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reject all attempts to enable options.\n        """'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|disableLocal
dedent|''
name|'def'
name|'disableLocal'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Signal a programming error by raising an exception.\n\n        L{enableLocal} must return true for the given value of C{option} in\n        order for this method to be called.  If a subclass of L{Telnet}\n        overrides enableLocal to allow certain options to be enabled, it must\n        also override disableLocal to disable those options.\n\n        @raise NotImplementedError: Always raised.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
string|'"Don\'t know how to disable local telnet option %r"'
op|'%'
op|'('
name|'option'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|disableRemote
dedent|''
name|'def'
name|'disableRemote'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Signal a programming error by raising an exception.\n\n        L{enableRemote} must return true for the given value of C{option} in\n        order for this method to be called.  If a subclass of L{Telnet}\n        overrides enableRemote to allow certain options to be enabled, it must\n        also override disableRemote tto disable those options.\n\n        @raise NotImplementedError: Always raised.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
string|'"Don\'t know how to disable remote telnet option %r"'
op|'%'
op|'('
name|'option'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProtocolTransportMixin
dedent|''
dedent|''
name|'class'
name|'ProtocolTransportMixin'
op|':'
newline|'\n'
DECL|member|write
indent|'    '
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'bytes'
op|'.'
name|'replace'
op|'('
string|"'\\n'"
op|','
string|"'\\r\\n'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'seq'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'writeSequence'
op|'('
name|'seq'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getPeer
dedent|''
name|'def'
name|'getPeer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|TelnetTransport
dedent|''
dedent|''
name|'class'
name|'TelnetTransport'
op|'('
name|'Telnet'
op|','
name|'ProtocolTransportMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @ivar protocol: An instance of the protocol to which this\n    transport is connected, or None before the connection is\n    established and after it is lost.\n\n    @ivar protocolFactory: A callable which returns protocol instances\n    which provide L{ITelnetProtocol}.  This will be invoked when a\n    connection is established.  It is passed *protocolArgs and\n    **protocolKwArgs.\n\n    @ivar protocolArgs: A tuple of additional arguments to\n    pass to protocolFactory.\n\n    @ivar protocolKwArgs: A dictionary of additional arguments\n    to pass to protocolFactory.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|disconnecting
name|'disconnecting'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|variable|protocolFactory
name|'protocolFactory'
op|'='
name|'None'
newline|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'protocolFactory'
op|'='
name|'None'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Telnet'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'if'
name|'protocolFactory'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'protocolFactory'
op|'='
name|'protocolFactory'
newline|'\n'
name|'self'
op|'.'
name|'protocolArgs'
op|'='
name|'a'
newline|'\n'
name|'self'
op|'.'
name|'protocolKwArgs'
op|'='
name|'kw'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'protocolFactory'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'protocolFactory'
op|'('
op|'*'
name|'self'
op|'.'
name|'protocolArgs'
op|','
op|'**'
name|'self'
op|'.'
name|'protocolKwArgs'
op|')'
newline|'\n'
name|'assert'
name|'ITelnetProtocol'
op|'.'
name|'providedBy'
op|'('
name|'self'
op|'.'
name|'protocol'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'factory'
op|'='
name|'self'
op|'.'
name|'factory'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'factory'
op|'='
name|'factory'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Telnet'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'protocol'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'connectionLost'
op|'('
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'self'
op|'.'
name|'protocol'
newline|'\n'
nl|'\n'
DECL|member|enableLocal
dedent|''
dedent|''
dedent|''
name|'def'
name|'enableLocal'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'enableLocal'
op|'('
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|enableRemote
dedent|''
name|'def'
name|'enableRemote'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'enableRemote'
op|'('
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|disableLocal
dedent|''
name|'def'
name|'disableLocal'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'disableLocal'
op|'('
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|disableRemote
dedent|''
name|'def'
name|'disableRemote'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'disableRemote'
op|'('
name|'option'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unhandledSubnegotiation
dedent|''
name|'def'
name|'unhandledSubnegotiation'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'unhandledSubnegotiation'
op|'('
name|'command'
op|','
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unhandledCommand
dedent|''
name|'def'
name|'unhandledCommand'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'argument'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'unhandledCommand'
op|'('
name|'command'
op|','
name|'argument'
op|')'
newline|'\n'
nl|'\n'
DECL|member|applicationDataReceived
dedent|''
name|'def'
name|'applicationDataReceived'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ProtocolTransportMixin'
op|'.'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|'.'
name|'replace'
op|'('
string|"'\\xff'"
op|','
string|"'\\xff\\xff'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TelnetBootstrapProtocol
dedent|''
dedent|''
name|'class'
name|'TelnetBootstrapProtocol'
op|'('
name|'TelnetProtocol'
op|','
name|'ProtocolTransportMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'protocolFactory'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'protocolFactory'
op|'='
name|'protocolFactory'
newline|'\n'
name|'self'
op|'.'
name|'protocolArgs'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'protocolKwArgs'
op|'='
name|'kw'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'negotiationMap'
op|'['
name|'NAWS'
op|']'
op|'='
name|'self'
op|'.'
name|'telnet_NAWS'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'negotiationMap'
op|'['
name|'LINEMODE'
op|']'
op|'='
name|'self'
op|'.'
name|'telnet_LINEMODE'
newline|'\n'
nl|'\n'
name|'for'
name|'opt'
name|'in'
op|'('
name|'LINEMODE'
op|','
name|'NAWS'
op|','
name|'SGA'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'do'
op|'('
name|'opt'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'log'
op|'.'
name|'err'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'opt'
name|'in'
op|'('
name|'ECHO'
op|','
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'will'
op|'('
name|'opt'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'log'
op|'.'
name|'err'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'protocolFactory'
op|'('
op|'*'
name|'self'
op|'.'
name|'protocolArgs'
op|','
op|'**'
name|'self'
op|'.'
name|'protocolKwArgs'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'factory'
op|'='
name|'self'
op|'.'
name|'factory'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'factory'
op|'='
name|'factory'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'protocol'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'connectionLost'
op|'('
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'self'
op|'.'
name|'protocol'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
dedent|''
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|enableLocal
dedent|''
name|'def'
name|'enableLocal'
op|'('
name|'self'
op|','
name|'opt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'opt'
op|'=='
name|'ECHO'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'opt'
op|'=='
name|'SGA'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|enableRemote
dedent|''
dedent|''
name|'def'
name|'enableRemote'
op|'('
name|'self'
op|','
name|'opt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'opt'
op|'=='
name|'LINEMODE'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'requestNegotiation'
op|'('
name|'LINEMODE'
op|','
name|'MODE'
op|'+'
name|'chr'
op|'('
name|'TRAPSIG'
op|')'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'opt'
op|'=='
name|'NAWS'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'opt'
op|'=='
name|'SGA'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|telnet_NAWS
dedent|''
dedent|''
name|'def'
name|'telnet_NAWS'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
comment|'# NAWS is client -> server *only*.  self.protocol will'
nl|'\n'
comment|"# therefore be an ITerminalTransport, the `.protocol'"
nl|'\n'
comment|'# attribute of which will be an ITerminalProtocol.  Maybe.'
nl|'\n'
comment|'# You know what, XXX TODO clean this up.'
nl|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'bytes'
op|')'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'            '
name|'width'
op|','
name|'height'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'!HH'"
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'bytes'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'terminalProtocol'
op|'.'
name|'terminalSize'
op|'('
name|'width'
op|','
name|'height'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Wrong number of NAWS bytes"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|linemodeSubcommands
dedent|''
dedent|''
name|'linemodeSubcommands'
op|'='
op|'{'
nl|'\n'
name|'LINEMODE_SLC'
op|':'
string|"'SLC'"
op|'}'
newline|'\n'
DECL|member|telnet_LINEMODE
name|'def'
name|'telnet_LINEMODE'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'revmap'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'linemodeSubcommand'
op|'='
name|'bytes'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
number|'0'
op|':'
newline|'\n'
comment|'# XXX TODO: This should be enabled to parse linemode subnegotiation.'
nl|'\n'
indent|'            '
name|'getattr'
op|'('
name|'self'
op|','
string|"'linemode_'"
op|'+'
name|'self'
op|'.'
name|'linemodeSubcommands'
op|'['
name|'linemodeSubcommand'
op|']'
op|')'
op|'('
name|'bytes'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|linemode_SLC
dedent|''
dedent|''
name|'def'
name|'linemode_SLC'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'chunks'
op|'='
name|'zip'
op|'('
op|'*'
op|'['
name|'iter'
op|'('
name|'bytes'
op|')'
op|']'
op|'*'
number|'3'
op|')'
newline|'\n'
name|'for'
name|'slcFunction'
op|','
name|'slcValue'
op|','
name|'slcWhat'
name|'in'
name|'chunks'
op|':'
newline|'\n'
comment|'# Later, we should parse stuff.'
nl|'\n'
indent|'            '
string|"'SLC'"
op|','
name|'ord'
op|'('
name|'slcFunction'
op|')'
op|','
name|'ord'
op|'('
name|'slcValue'
op|')'
op|','
name|'ord'
op|'('
name|'slcWhat'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
newline|'\n'
nl|'\n'
DECL|class|StatefulTelnetProtocol
name|'class'
name|'StatefulTelnetProtocol'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|','
name|'TelnetProtocol'
op|')'
op|':'
newline|'\n'
DECL|variable|delimiter
indent|'    '
name|'delimiter'
op|'='
string|"'\\n'"
newline|'\n'
nl|'\n'
DECL|variable|state
name|'state'
op|'='
string|"'Discard'"
newline|'\n'
nl|'\n'
DECL|member|connectionLost
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'basic'
op|'.'
name|'LineReceiver'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
name|'TelnetProtocol'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'oldState'
op|'='
name|'self'
op|'.'
name|'state'
newline|'\n'
name|'newState'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"telnet_"'
op|'+'
name|'oldState'
op|')'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'newState'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
name|'oldState'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'state'
op|'='
name|'newState'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Warning: state changed and new state returned"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|telnet_Discard
dedent|''
dedent|''
dedent|''
name|'def'
name|'telnet_Discard'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'credentials'
newline|'\n'
nl|'\n'
DECL|class|AuthenticatingTelnetProtocol
name|'class'
name|'AuthenticatingTelnetProtocol'
op|'('
name|'StatefulTelnetProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A protocol which prompts for credentials and attempts to authenticate them.\n\n    Username and password prompts are given (the password is obscured).  When the\n    information is collected, it is passed to a portal and an avatar implementing\n    L{ITelnetProtocol} is requested.  If an avatar is returned, it connected to this\n    protocol\'s transport, and this protocol\'s transport is connected to it.\n    Otherwise, the user is re-prompted for credentials.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|state
name|'state'
op|'='
string|'"User"'
newline|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'portal'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'portal'
op|'='
name|'portal'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"Username: "'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'StatefulTelnetProtocol'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'protocol'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'connectionLost'
op|'('
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logout'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'self'
op|'.'
name|'protocol'
op|','
name|'self'
op|'.'
name|'logout'
newline|'\n'
nl|'\n'
DECL|member|telnet_User
dedent|''
dedent|''
dedent|''
name|'def'
name|'telnet_User'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'username'
op|'='
name|'line'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'will'
op|'('
name|'ECHO'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"Password: "'
op|')'
newline|'\n'
name|'return'
string|"'Password'"
newline|'\n'
nl|'\n'
DECL|member|telnet_Password
dedent|''
name|'def'
name|'telnet_Password'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'username'
op|','
name|'password'
op|'='
name|'self'
op|'.'
name|'username'
op|','
name|'line'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'username'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'creds'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
name|'username'
op|','
name|'password'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'portal'
op|'.'
name|'login'
op|'('
name|'creds'
op|','
name|'None'
op|','
name|'ITelnetProtocol'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbLogin'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebLogin'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'wont'
op|'('
name|'ECHO'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'login'
op|')'
newline|'\n'
name|'return'
string|"'Discard'"
newline|'\n'
nl|'\n'
DECL|member|_cbLogin
dedent|''
name|'def'
name|'_cbLogin'
op|'('
name|'self'
op|','
name|'ial'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'interface'
op|','
name|'protocol'
op|','
name|'logout'
op|'='
name|'ial'
newline|'\n'
name|'assert'
name|'interface'
name|'is'
name|'ITelnetProtocol'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'protocol'
newline|'\n'
name|'self'
op|'.'
name|'logout'
op|'='
name|'logout'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'Command'"
newline|'\n'
nl|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'protocol'
op|'='
name|'protocol'
newline|'\n'
nl|'\n'
DECL|member|_ebLogin
dedent|''
name|'def'
name|'_ebLogin'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"\\nAuthentication failed\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"Username: "'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|'"User"'
newline|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
nl|'\n'
comment|'# Exceptions'
nl|'\n'
string|"'TelnetError'"
op|','
string|"'NegotiationError'"
op|','
string|"'OptionRefused'"
op|','
nl|'\n'
string|"'AlreadyNegotiating'"
op|','
string|"'AlreadyEnabled'"
op|','
string|"'AlreadyDisabled'"
op|','
nl|'\n'
nl|'\n'
comment|'# Interfaces'
nl|'\n'
string|"'ITelnetProtocol'"
op|','
string|"'ITelnetTransport'"
op|','
nl|'\n'
nl|'\n'
comment|'# Other stuff, protocols, etc.'
nl|'\n'
string|"'Telnet'"
op|','
string|"'TelnetProtocol'"
op|','
string|"'TelnetTransport'"
op|','
nl|'\n'
string|"'TelnetBootstrapProtocol'"
op|','
nl|'\n'
nl|'\n'
op|']'
newline|'\n'
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.mail.test.test_pop3client -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2004 Divmod Inc.'
nl|'\n'
comment|'# Copyright (c) 2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nPOP3 client protocol implementation\n\nDon\'t use this module directly.  Use twisted.mail.pop3 instead.\n\n@author: Jp Calderone\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'policies'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'interfaces'
newline|'\n'
nl|'\n'
DECL|variable|OK
name|'OK'
op|'='
string|"'+OK'"
newline|'\n'
DECL|variable|ERR
name|'ERR'
op|'='
string|"'-ERR'"
newline|'\n'
nl|'\n'
DECL|class|POP3ClientError
name|'class'
name|'POP3ClientError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for all exceptions raised by POP3Client.\n    """'
newline|'\n'
nl|'\n'
DECL|class|InsecureAuthenticationDisallowed
dedent|''
name|'class'
name|'InsecureAuthenticationDisallowed'
op|'('
name|'POP3ClientError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Secure authentication was required but no mechanism could be found.\n    """'
newline|'\n'
nl|'\n'
DECL|class|TLSError
dedent|''
name|'class'
name|'TLSError'
op|'('
name|'POP3ClientError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Secure authentication was required but either the transport does\n    not support TLS or no TLS context factory was supplied.\n    """'
newline|'\n'
nl|'\n'
DECL|class|TLSNotSupportedError
dedent|''
name|'class'
name|'TLSNotSupportedError'
op|'('
name|'POP3ClientError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Secure authentication was required but the server does not support\n    TLS.\n    """'
newline|'\n'
nl|'\n'
DECL|class|ServerErrorResponse
dedent|''
name|'class'
name|'ServerErrorResponse'
op|'('
name|'POP3ClientError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The server returned an error response to a request.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reason'
op|','
name|'consumer'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'POP3ClientError'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consumer'
op|'='
name|'consumer'
newline|'\n'
nl|'\n'
DECL|class|LineTooLong
dedent|''
dedent|''
name|'class'
name|'LineTooLong'
op|'('
name|'POP3ClientError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The server sent an extremely long line.\n    """'
newline|'\n'
nl|'\n'
DECL|class|_ListSetter
dedent|''
name|'class'
name|'_ListSetter'
op|':'
newline|'\n'
comment|'# Internal helper.  POP3 responses sometimes occur in the'
nl|'\n'
comment|'# form of a list of lines containing two pieces of data,'
nl|'\n'
comment|'# a message index and a value of some sort.  When a message'
nl|'\n'
comment|'# is deleted, it is omitted from these responses.  The'
nl|'\n'
comment|'# setitem method of this class is meant to be called with'
nl|'\n'
comment|'# these two values.  In the cases where indexes are skipped,'
nl|'\n'
comment|'# it takes care of padding out the missing values with None.'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'L'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'L'
op|'='
name|'L'
newline|'\n'
DECL|member|setitem
dedent|''
name|'def'
name|'setitem'
op|'('
name|'self'
op|','
op|'('
name|'item'
op|','
name|'value'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'diff'
op|'='
name|'item'
op|'-'
name|'len'
op|'('
name|'self'
op|'.'
name|'L'
op|')'
op|'+'
number|'1'
newline|'\n'
name|'if'
name|'diff'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'L'
op|'.'
name|'extend'
op|'('
op|'['
name|'None'
op|']'
op|'*'
name|'diff'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'L'
op|'['
name|'item'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_statXform
dedent|''
dedent|''
name|'def'
name|'_statXform'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
comment|'# Parse a STAT response'
nl|'\n'
indent|'    '
name|'numMsgs'
op|','
name|'totalSize'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'int'
op|'('
name|'numMsgs'
op|')'
op|','
name|'int'
op|'('
name|'totalSize'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_listXform
dedent|''
name|'def'
name|'_listXform'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
comment|'# Parse a LIST response'
nl|'\n'
indent|'    '
name|'index'
op|','
name|'size'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'int'
op|'('
name|'index'
op|')'
op|'-'
number|'1'
op|','
name|'int'
op|'('
name|'size'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_uidXform
dedent|''
name|'def'
name|'_uidXform'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
comment|'# Parse a UIDL response'
nl|'\n'
indent|'    '
name|'index'
op|','
name|'uid'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'int'
op|'('
name|'index'
op|')'
op|'-'
number|'1'
op|','
name|'uid'
newline|'\n'
nl|'\n'
DECL|function|_codeStatusSplit
dedent|''
name|'def'
name|'_codeStatusSplit'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
comment|'# Parse an +OK or -ERR response'
nl|'\n'
indent|'    '
name|'parts'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'parts'
op|'['
number|'0'
op|']'
op|','
string|"''"
newline|'\n'
dedent|''
name|'return'
name|'parts'
newline|'\n'
nl|'\n'
DECL|function|_dotUnquoter
dedent|''
name|'def'
name|'_dotUnquoter'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    C{\'.\'} characters which begin a line of a message are doubled to avoid\n    confusing with the terminating C{\'.\\\\r\\\\n\'} sequence.  This function\n    unquotes them.\n    """'
newline|'\n'
name|'if'
name|'line'
op|'.'
name|'startswith'
op|'('
string|"'..'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'line'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'line'
newline|'\n'
nl|'\n'
DECL|class|POP3Client
dedent|''
name|'class'
name|'POP3Client'
op|'('
name|'basic'
op|'.'
name|'LineOnlyReceiver'
op|','
name|'policies'
op|'.'
name|'TimeoutMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""POP3 client protocol implementation class\n\n    Instances of this class provide a convenient, efficient API for\n    retrieving and deleting messages from a POP3 server.\n\n    @type startedTLS: C{bool}\n    @ivar startedTLS: Whether TLS has been negotiated successfully.\n\n\n    @type allowInsecureLogin: C{bool}\n    @ivar allowInsecureLogin: Indicate whether login() should be\n    allowed if the server offers no authentication challenge and if\n    our transport does not offer any protection via encryption.\n\n    @type serverChallenge: C{str} or C{None}\n    @ivar serverChallenge: Challenge received from the server\n\n    @type timeout: C{int}\n    @ivar timeout: Number of seconds to wait before timing out a\n    connection.  If the number is <= 0, no timeout checking will be\n    performed.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|startedTLS
name|'startedTLS'
op|'='
name|'False'
newline|'\n'
DECL|variable|allowInsecureLogin
name|'allowInsecureLogin'
op|'='
name|'False'
newline|'\n'
DECL|variable|timeout
name|'timeout'
op|'='
number|'0'
newline|'\n'
DECL|variable|serverChallenge
name|'serverChallenge'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Capabilities are not allowed to change during the session'
nl|'\n'
comment|'# (except when TLS is negotiated), so cache the first response and'
nl|'\n'
comment|'# use that for all later lookups'
nl|'\n'
DECL|variable|_capCache
name|'_capCache'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Regular expression to search for in the challenge string in the server'
nl|'\n'
comment|'# greeting line.'
nl|'\n'
DECL|variable|_challengeMagicRe
name|'_challengeMagicRe'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'(<[^>]+>)'"
op|')'
newline|'\n'
nl|'\n'
comment|'# List of pending calls.'
nl|'\n'
comment|"# We are a pipelining API but don't actually"
nl|'\n'
comment|'# support pipelining on the network yet.'
nl|'\n'
DECL|variable|_blockedQueue
name|'_blockedQueue'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# The Deferred to which the very next result will go.'
nl|'\n'
DECL|variable|_waiting
name|'_waiting'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Whether we dropped the connection because of a timeout'
nl|'\n'
DECL|variable|_timedOut
name|'_timedOut'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# If the server sends an initial -ERR, this is the message it sent'
nl|'\n'
comment|'# with it.'
nl|'\n'
DECL|variable|_greetingError
name|'_greetingError'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_blocked
name|'def'
name|'_blocked'
op|'('
name|'self'
op|','
name|'f'
op|','
op|'*'
name|'a'
op|')'
op|':'
newline|'\n'
comment|'# Internal helper.  If commands are being blocked, append'
nl|'\n'
comment|'# the given command and arguments to a list and return a Deferred'
nl|'\n'
comment|'# that will be chained with the return value of the function'
nl|'\n'
comment|'# when it eventually runs.  Otherwise, set up for commands to be'
nl|'\n'
nl|'\n'
comment|'# blocked and return None.'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_blockedQueue'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_blockedQueue'
op|'.'
name|'append'
op|'('
op|'('
name|'d'
op|','
name|'f'
op|','
name|'a'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_blockedQueue'
op|'='
op|'['
op|']'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_unblock
dedent|''
name|'def'
name|'_unblock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Internal helper.  Indicate that a function has completed.'
nl|'\n'
comment|'# If there are blocked commands, run the next one.  If there'
nl|'\n'
comment|'# are not, set up for the next command to not be blocked.'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_blockedQueue'
op|'=='
op|'['
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_blockedQueue'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'_blockedQueue'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'_blockedQueue'
op|'='
name|'self'
op|'.'
name|'_blockedQueue'
newline|'\n'
name|'self'
op|'.'
name|'_blockedQueue'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'d'
op|','
name|'f'
op|','
name|'a'
op|'='
name|'_blockedQueue'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'f'
op|'('
op|'*'
name|'a'
op|')'
newline|'\n'
name|'d2'
op|'.'
name|'chainDeferred'
op|'('
name|'d'
op|')'
newline|'\n'
comment|"# f is a function which uses _blocked (otherwise it wouldn't"
nl|'\n'
comment|'# have gotten into the blocked queue), which means it will have'
nl|'\n'
comment|'# re-set _blockedQueue to an empty list, so we can put the rest'
nl|'\n'
comment|'# of the blocked queue back into it now.'
nl|'\n'
name|'self'
op|'.'
name|'_blockedQueue'
op|'.'
name|'extend'
op|'('
name|'_blockedQueue'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|sendShort
dedent|''
dedent|''
name|'def'
name|'sendShort'
op|'('
name|'self'
op|','
name|'cmd'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
comment|'# Internal helper.  Send a command to which a short response'
nl|'\n'
comment|'# is expected.  Return a Deferred that fires when the response'
nl|'\n'
comment|'# is received.  Block all further commands from being sent until'
nl|'\n'
comment|'# the response is received.  Transition the state to SHORT.'
nl|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'_blocked'
op|'('
name|'self'
op|'.'
name|'sendShort'
op|','
name|'cmd'
op|','
name|'args'
op|')'
newline|'\n'
name|'if'
name|'d'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'cmd'
op|'+'
string|"' '"
op|'+'
name|'args'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'cmd'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'state'
op|'='
string|"'SHORT'"
newline|'\n'
name|'self'
op|'.'
name|'_waiting'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_waiting'
newline|'\n'
nl|'\n'
DECL|member|sendLong
dedent|''
name|'def'
name|'sendLong'
op|'('
name|'self'
op|','
name|'cmd'
op|','
name|'args'
op|','
name|'consumer'
op|','
name|'xform'
op|')'
op|':'
newline|'\n'
comment|'# Internal helper.  Send a command to which a multiline'
nl|'\n'
comment|'# response is expected.  Return a Deferred that fires when'
nl|'\n'
comment|'# the entire response is received.  Block all further commands'
nl|'\n'
comment|'# from being sent until the entire response is received.'
nl|'\n'
comment|'# Transition the state to LONG_INITIAL.'
nl|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'_blocked'
op|'('
name|'self'
op|'.'
name|'sendLong'
op|','
name|'cmd'
op|','
name|'args'
op|','
name|'consumer'
op|','
name|'xform'
op|')'
newline|'\n'
name|'if'
name|'d'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'cmd'
op|'+'
string|"' '"
op|'+'
name|'args'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'cmd'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'state'
op|'='
string|"'LONG_INITIAL'"
newline|'\n'
name|'self'
op|'.'
name|'_xform'
op|'='
name|'xform'
newline|'\n'
name|'self'
op|'.'
name|'_consumer'
op|'='
name|'consumer'
newline|'\n'
name|'self'
op|'.'
name|'_waiting'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_waiting'
newline|'\n'
nl|'\n'
comment|'# Twisted protocol callback'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'state'
op|'='
string|"'WELCOME'"
newline|'\n'
name|'self'
op|'.'
name|'_blockedQueue'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|timeoutConnection
dedent|''
name|'def'
name|'timeoutConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_timedOut'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_timedOut'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'error'
op|'.'
name|'TimeoutError'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'_greetingError'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'ServerErrorResponse'
op|'('
name|'self'
op|'.'
name|'_greetingError'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_waiting'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'_waiting'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_waiting'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_blockedQueue'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'extend'
op|'('
op|'['
name|'deferred'
name|'for'
op|'('
name|'deferred'
op|','
name|'f'
op|','
name|'a'
op|')'
name|'in'
name|'self'
op|'.'
name|'_blockedQueue'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_blockedQueue'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'for'
name|'w'
name|'in'
name|'d'
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'state'
op|'='
name|'self'
op|'.'
name|'state'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
name|'None'
newline|'\n'
name|'state'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'state_'"
op|'+'
name|'state'
op|')'
op|'('
name|'line'
op|')'
name|'or'
name|'state'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'state'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'state'
op|'='
name|'state'
newline|'\n'
nl|'\n'
DECL|member|lineLengthExceeded
dedent|''
dedent|''
name|'def'
name|'lineLengthExceeded'
op|'('
name|'self'
op|','
name|'buffer'
op|')'
op|':'
newline|'\n'
comment|'# XXX - We need to be smarter about this'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_waiting'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'waiting'
op|','
name|'self'
op|'.'
name|'_waiting'
op|'='
name|'self'
op|'.'
name|'_waiting'
op|','
name|'None'
newline|'\n'
name|'waiting'
op|'.'
name|'errback'
op|'('
name|'LineTooLong'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# POP3 Client state logic - don't touch this."
nl|'\n'
DECL|member|state_WELCOME
dedent|''
name|'def'
name|'state_WELCOME'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
comment|'# WELCOME is the first state.  The server sends one line of text'
nl|'\n'
comment|'# greeting us, possibly with an APOP challenge.  Transition the'
nl|'\n'
comment|'# state to WAITING.'
nl|'\n'
indent|'        '
name|'code'
op|','
name|'status'
op|'='
name|'_codeStatusSplit'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'code'
op|'!='
name|'OK'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_greetingError'
op|'='
name|'status'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'='
name|'self'
op|'.'
name|'_challengeMagicRe'
op|'.'
name|'search'
op|'('
name|'status'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'m'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'serverChallenge'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'serverGreeting'
op|'('
name|'status'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_unblock'
op|'('
op|')'
newline|'\n'
name|'return'
string|"'WAITING'"
newline|'\n'
nl|'\n'
DECL|member|state_WAITING
dedent|''
name|'def'
name|'state_WAITING'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
comment|"# The server isn't supposed to send us anything in this state."
nl|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Illegal line from server: "'
op|'+'
name|'repr'
op|'('
name|'line'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|state_SHORT
dedent|''
name|'def'
name|'state_SHORT'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
comment|'# This is the state we are in when waiting for a single'
nl|'\n'
comment|'# line response.  Parse it and fire the appropriate callback'
nl|'\n'
comment|'# or errback.  Transition the state back to WAITING.'
nl|'\n'
indent|'        '
name|'deferred'
op|','
name|'self'
op|'.'
name|'_waiting'
op|'='
name|'self'
op|'.'
name|'_waiting'
op|','
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_unblock'
op|'('
op|')'
newline|'\n'
name|'code'
op|','
name|'status'
op|'='
name|'_codeStatusSplit'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'code'
op|'=='
name|'OK'
op|':'
newline|'\n'
indent|'            '
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'status'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'ServerErrorResponse'
op|'('
name|'status'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
string|"'WAITING'"
newline|'\n'
nl|'\n'
DECL|member|state_LONG_INITIAL
dedent|''
name|'def'
name|'state_LONG_INITIAL'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
comment|'# This is the state we are in when waiting for the first'
nl|'\n'
comment|'# line of a long response.  Parse it and transition the'
nl|'\n'
comment|'# state to LONG if it is an okay response; if it is an'
nl|'\n'
comment|'# error response, fire an errback, clean up the things'
nl|'\n'
comment|'# waiting for a long response, and transition the state'
nl|'\n'
comment|'# to WAITING.'
nl|'\n'
indent|'        '
name|'code'
op|','
name|'status'
op|'='
name|'_codeStatusSplit'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'code'
op|'=='
name|'OK'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'LONG'"
newline|'\n'
dedent|''
name|'consumer'
op|'='
name|'self'
op|'.'
name|'_consumer'
newline|'\n'
name|'deferred'
op|'='
name|'self'
op|'.'
name|'_waiting'
newline|'\n'
name|'self'
op|'.'
name|'_consumer'
op|'='
name|'self'
op|'.'
name|'_waiting'
op|'='
name|'self'
op|'.'
name|'_xform'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_unblock'
op|'('
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'ServerErrorResponse'
op|'('
name|'status'
op|','
name|'consumer'
op|')'
op|')'
newline|'\n'
name|'return'
string|"'WAITING'"
newline|'\n'
nl|'\n'
DECL|member|state_LONG
dedent|''
name|'def'
name|'state_LONG'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
comment|'# This is the state for each line of a long response.'
nl|'\n'
comment|'# If it is the last line, finish things, fire the'
nl|'\n'
comment|'# Deferred, and transition the state to WAITING.'
nl|'\n'
comment|'# Otherwise, pass the line to the consumer.'
nl|'\n'
indent|'        '
name|'if'
name|'line'
op|'=='
string|"'.'"
op|':'
newline|'\n'
indent|'            '
name|'consumer'
op|'='
name|'self'
op|'.'
name|'_consumer'
newline|'\n'
name|'deferred'
op|'='
name|'self'
op|'.'
name|'_waiting'
newline|'\n'
name|'self'
op|'.'
name|'_consumer'
op|'='
name|'self'
op|'.'
name|'_waiting'
op|'='
name|'self'
op|'.'
name|'_xform'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_unblock'
op|'('
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'consumer'
op|')'
newline|'\n'
name|'return'
string|"'WAITING'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_xform'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_consumer'
op|'('
name|'self'
op|'.'
name|'_xform'
op|'('
name|'line'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_consumer'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'return'
string|"'LONG'"
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Callbacks - override these'
nl|'\n'
DECL|member|serverGreeting
dedent|''
dedent|''
name|'def'
name|'serverGreeting'
op|'('
name|'self'
op|','
name|'greeting'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when the server has sent us a greeting.\n\n        @type greeting: C{str} or C{None}\n        @param greeting: The status message sent with the server\n        greeting.  For servers implementing APOP authentication, this\n        will be a challenge string.  .\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
comment|"# External API - call these (most of 'em anyway)"
nl|'\n'
DECL|member|startTLS
dedent|''
name|'def'
name|'startTLS'
op|'('
name|'self'
op|','
name|'contextFactory'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initiates a \'STLS\' request and negotiates the TLS / SSL\n        Handshake.\n\n        @type contextFactory: C{ssl.ClientContextFactory} @param\n        contextFactory: The context factory with which to negotiate\n        TLS.  If C{None}, try to create a new one.\n\n        @return: A Deferred which fires when the transport has been\n        secured according to the given contextFactory, or which fails\n        if the transport cannot be secured.\n        """'
newline|'\n'
name|'tls'
op|'='
name|'interfaces'
op|'.'
name|'ITLSTransport'
op|'('
name|'self'
op|'.'
name|'transport'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'tls'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'TLSError'
op|'('
nl|'\n'
string|'"POP3Client transport does not implement "'
nl|'\n'
string|'"interfaces.ITLSTransport"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'contextFactory'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'contextFactory'
op|'='
name|'self'
op|'.'
name|'_getContextFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'contextFactory'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'TLSError'
op|'('
nl|'\n'
string|'"POP3Client requires a TLS context to "'
nl|'\n'
string|'"initiate the STLS handshake"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'capabilities'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_startTLS'
op|','
name|'contextFactory'
op|','
name|'tls'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_startTLS
dedent|''
name|'def'
name|'_startTLS'
op|'('
name|'self'
op|','
name|'caps'
op|','
name|'contextFactory'
op|','
name|'tls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'not'
name|'self'
op|'.'
name|'startedTLS'
op|','
string|'"Client and Server are currently communicating via TLS"'
newline|'\n'
nl|'\n'
name|'if'
string|"'STLS'"
name|'not'
name|'in'
name|'caps'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'TLSNotSupportedError'
op|'('
nl|'\n'
string|'"Server does not support secure communication "'
nl|'\n'
string|'"via TLS / SSL"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'sendShort'
op|'('
string|"'STLS'"
op|','
name|'None'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_startedTLS'
op|','
name|'contextFactory'
op|','
name|'tls'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'capabilities'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_startedTLS
dedent|''
name|'def'
name|'_startedTLS'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'context'
op|','
name|'tls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'='
name|'tls'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'startTLS'
op|'('
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_capCache'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'startedTLS'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getContextFactory
dedent|''
name|'def'
name|'_getContextFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'ssl'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'context'
op|'='
name|'ssl'
op|'.'
name|'ClientContextFactory'
op|'('
op|')'
newline|'\n'
name|'context'
op|'.'
name|'method'
op|'='
name|'ssl'
op|'.'
name|'SSL'
op|'.'
name|'TLSv1_METHOD'
newline|'\n'
name|'return'
name|'context'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|login
dedent|''
dedent|''
name|'def'
name|'login'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Log into the server.\n\n        If APOP is available it will be used.  Otherwise, if TLS is\n        available an \'STLS\' session will be started and plaintext\n        login will proceed.  Otherwise, if the instance attribute\n        allowInsecureLogin is set to True, insecure plaintext login\n        will proceed.  Otherwise, InsecureAuthenticationDisallowed\n        will be raised (asynchronously).\n\n        @param username: The username with which to log in.\n        @param password: The password with which to log in.\n\n        @rtype: C{Deferred}\n        @return: A deferred which fires when login has\n        completed.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'capabilities'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_login'
op|','
name|'username'
op|','
name|'password'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_login
dedent|''
name|'def'
name|'_login'
op|'('
name|'self'
op|','
name|'caps'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'serverChallenge'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_apop'
op|'('
name|'username'
op|','
name|'password'
op|','
name|'self'
op|'.'
name|'serverChallenge'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'tryTLS'
op|'='
string|"'STLS'"
name|'in'
name|'caps'
newline|'\n'
nl|'\n'
comment|'#If our transport supports switching to TLS, we might want to try to switch to TLS.'
nl|'\n'
name|'tlsableTransport'
op|'='
name|'interfaces'
op|'.'
name|'ITLSTransport'
op|'('
name|'self'
op|'.'
name|'transport'
op|','
name|'None'
op|')'
name|'is'
name|'not'
name|'None'
newline|'\n'
nl|'\n'
comment|'# If our transport is not already using TLS, we might want to try to switch to TLS.'
nl|'\n'
name|'nontlsTransport'
op|'='
name|'interfaces'
op|'.'
name|'ISSLTransport'
op|'('
name|'self'
op|'.'
name|'transport'
op|','
name|'None'
op|')'
name|'is'
name|'None'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'startedTLS'
name|'and'
name|'tryTLS'
name|'and'
name|'tlsableTransport'
name|'and'
name|'nontlsTransport'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'startTLS'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_loginTLS'
op|','
name|'username'
op|','
name|'password'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'startedTLS'
name|'or'
name|'not'
name|'nontlsTransport'
name|'or'
name|'self'
op|'.'
name|'allowInsecureLogin'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_plaintext'
op|'('
name|'username'
op|','
name|'password'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'InsecureAuthenticationDisallowed'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_loginTLS
dedent|''
dedent|''
name|'def'
name|'_loginTLS'
op|'('
name|'self'
op|','
name|'res'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_plaintext'
op|'('
name|'username'
op|','
name|'password'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_plaintext
dedent|''
name|'def'
name|'_plaintext'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
comment|'# Internal helper.  Send a username/password pair, returning a Deferred'
nl|'\n'
comment|'# that fires when both have succeeded or fails when the server rejects'
nl|'\n'
comment|'# either.'
nl|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'user'
op|'('
name|'username'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'r'
op|':'
name|'self'
op|'.'
name|'password'
op|'('
name|'password'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_apop
dedent|''
name|'def'
name|'_apop'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'password'
op|','
name|'challenge'
op|')'
op|':'
newline|'\n'
comment|'# Internal helper.  Computes and sends an APOP response.  Returns'
nl|'\n'
comment|'# a Deferred that fires when the server responds to the response.'
nl|'\n'
indent|'        '
name|'digest'
op|'='
name|'md5'
op|'('
name|'challenge'
op|'+'
name|'password'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'apop'
op|'('
name|'username'
op|','
name|'digest'
op|')'
newline|'\n'
nl|'\n'
DECL|member|apop
dedent|''
name|'def'
name|'apop'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'digest'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Perform APOP login.\n\n        This should be used in special circumstances only, when it is\n        known that the server supports APOP authentication, and APOP\n        authentication is absolutely required.  For the common case,\n        use L{login} instead.\n\n        @param username: The username with which to log in.\n        @param digest: The challenge response to authenticate with.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendShort'
op|'('
string|"'APOP'"
op|','
name|'username'
op|'+'
string|"' '"
op|'+'
name|'digest'
op|')'
newline|'\n'
nl|'\n'
DECL|member|user
dedent|''
name|'def'
name|'user'
op|'('
name|'self'
op|','
name|'username'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send the user command.\n\n        This performs the first half of plaintext login.  Unless this\n        is absolutely required, use the L{login} method instead.\n\n        @param username: The username with which to log in.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendShort'
op|'('
string|"'USER'"
op|','
name|'username'
op|')'
newline|'\n'
nl|'\n'
DECL|member|password
dedent|''
name|'def'
name|'password'
op|'('
name|'self'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send the password command.\n\n        This performs the second half of plaintext login.  Unless this\n        is absolutely required, use the L{login} method instead.\n\n        @param password: The plaintext password with which to authenticate.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendShort'
op|'('
string|"'PASS'"
op|','
name|'password'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'index'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete a message from the server.\n\n        @type index: C{int}\n        @param index: The index of the message to delete.\n        This is 0-based.\n\n        @rtype: C{Deferred}\n        @return: A deferred which fires when the delete command\n        is successful, or fails if the server returns an error.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendShort'
op|'('
string|"'DELE'"
op|','
name|'str'
op|'('
name|'index'
op|'+'
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_consumeOrSetItem
dedent|''
name|'def'
name|'_consumeOrSetItem'
op|'('
name|'self'
op|','
name|'cmd'
op|','
name|'args'
op|','
name|'consumer'
op|','
name|'xform'
op|')'
op|':'
newline|'\n'
comment|'# Internal helper.  Send a long command.  If no consumer is'
nl|'\n'
comment|'# provided, create a consumer that puts results into a list'
nl|'\n'
comment|'# and return a Deferred that fires with that list when it'
nl|'\n'
comment|'# is complete.'
nl|'\n'
indent|'        '
name|'if'
name|'consumer'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'consumer'
op|'='
name|'_ListSetter'
op|'('
name|'L'
op|')'
op|'.'
name|'setitem'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendLong'
op|'('
name|'cmd'
op|','
name|'args'
op|','
name|'consumer'
op|','
name|'xform'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'r'
op|':'
name|'L'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'sendLong'
op|'('
name|'cmd'
op|','
name|'args'
op|','
name|'consumer'
op|','
name|'xform'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_consumeOrAppend
dedent|''
name|'def'
name|'_consumeOrAppend'
op|'('
name|'self'
op|','
name|'cmd'
op|','
name|'args'
op|','
name|'consumer'
op|','
name|'xform'
op|')'
op|':'
newline|'\n'
comment|'# Internal helper.  Send a long command.  If no consumer is'
nl|'\n'
comment|'# provided, create a consumer that appends results to a list'
nl|'\n'
comment|'# and return a Deferred that fires with that list when it is'
nl|'\n'
comment|'# complete.'
nl|'\n'
indent|'        '
name|'if'
name|'consumer'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'consumer'
op|'='
name|'L'
op|'.'
name|'append'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendLong'
op|'('
name|'cmd'
op|','
name|'args'
op|','
name|'consumer'
op|','
name|'xform'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'r'
op|':'
name|'L'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'sendLong'
op|'('
name|'cmd'
op|','
name|'args'
op|','
name|'consumer'
op|','
name|'xform'
op|')'
newline|'\n'
nl|'\n'
DECL|member|capabilities
dedent|''
name|'def'
name|'capabilities'
op|'('
name|'self'
op|','
name|'useCache'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the capabilities supported by this server.\n\n        Not all servers support this command.  If the server does not\n        support this, it is treated as though it returned a successful\n        response listing no capabilities.  At some future time, this may be\n        changed to instead seek out information about a server\'s\n        capabilities in some other fashion (only if it proves useful to do\n        so, and only if there are servers still in use which do not support\n        CAPA but which do support POP3 extensions that are useful).\n\n        @type useCache: C{bool}\n        @param useCache: If set, and if capabilities have been\n        retrieved previously, just return the previously retrieved\n        results.\n\n        @return: A Deferred which fires with a C{dict} mapping C{str}\n        to C{None} or C{list}s of C{str}.  For example::\n\n            C: CAPA\n            S: +OK Capability list follows\n            S: TOP\n            S: USER\n            S: SASL CRAM-MD5 KERBEROS_V4\n            S: RESP-CODES\n            S: LOGIN-DELAY 900\n            S: PIPELINING\n            S: EXPIRE 60\n            S: UIDL\n            S: IMPLEMENTATION Shlemazle-Plotz-v302\n            S: .\n\n        will be lead to a result of::\n\n            | {\'TOP\': None,\n            |  \'USER\': None,\n            |  \'SASL\': [\'CRAM-MD5\', \'KERBEROS_V4\'],\n            |  \'RESP-CODES\': None,\n            |  \'LOGIN-DELAY\': [\'900\'],\n            |  \'PIPELINING\': None,\n            |  \'EXPIRE\': [\'60\'],\n            |  \'UIDL\': None,\n            |  \'IMPLEMENTATION\': [\'Shlemazle-Plotz-v302\']}\n        """'
newline|'\n'
name|'if'
name|'useCache'
name|'and'
name|'self'
op|'.'
name|'_capCache'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'self'
op|'.'
name|'_capCache'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cache'
op|'='
op|'{'
op|'}'
newline|'\n'
DECL|function|consume
name|'def'
name|'consume'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'tmp'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'tmp'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'cache'
op|'['
name|'tmp'
op|'['
number|'0'
op|']'
op|']'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'tmp'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'cache'
op|'['
name|'tmp'
op|'['
number|'0'
op|']'
op|']'
op|'='
name|'tmp'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
DECL|function|capaNotSupported
dedent|''
dedent|''
name|'def'
name|'capaNotSupported'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'err'
op|'.'
name|'trap'
op|'('
name|'ServerErrorResponse'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|function|gotCapabilities
dedent|''
name|'def'
name|'gotCapabilities'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_capCache'
op|'='
name|'cache'
newline|'\n'
name|'return'
name|'cache'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'_consumeOrAppend'
op|'('
string|"'CAPA'"
op|','
name|'None'
op|','
name|'consume'
op|','
name|'None'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'capaNotSupported'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'gotCapabilities'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|noop
dedent|''
name|'def'
name|'noop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do nothing, with the help of the server.\n\n        No operation is performed.  The returned Deferred fires when\n        the server responds.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendShort'
op|'('
string|'"NOOP"'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove the deleted flag from any messages which have it.\n\n        The returned Deferred fires when the server responds.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendShort'
op|'('
string|'"RSET"'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|retrieve
dedent|''
name|'def'
name|'retrieve'
op|'('
name|'self'
op|','
name|'index'
op|','
name|'consumer'
op|'='
name|'None'
op|','
name|'lines'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve a message from the server.\n\n        If L{consumer} is not None, it will be called with\n        each line of the message as it is received.  Otherwise,\n        the returned Deferred will be fired with a list of all\n        the lines when the message has been completely received.\n        """'
newline|'\n'
name|'idx'
op|'='
name|'str'
op|'('
name|'index'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'if'
name|'lines'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_consumeOrAppend'
op|'('
string|"'RETR'"
op|','
name|'idx'
op|','
name|'consumer'
op|','
name|'_dotUnquoter'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_consumeOrAppend'
op|'('
string|"'TOP'"
op|','
string|"'%s %d'"
op|'%'
op|'('
name|'idx'
op|','
name|'lines'
op|')'
op|','
name|'consumer'
op|','
name|'_dotUnquoter'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stat
dedent|''
name|'def'
name|'stat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get information about the size of this mailbox.\n\n        The returned Deferred will be fired with a tuple containing\n        the number or messages in the mailbox and the size (in bytes)\n        of the mailbox.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendShort'
op|'('
string|"'STAT'"
op|','
name|'None'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'_statXform'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|listSize
dedent|''
name|'def'
name|'listSize'
op|'('
name|'self'
op|','
name|'consumer'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve a list of the size of all messages on the server.\n\n        If L{consumer} is not None, it will be called with two-tuples\n        of message index number and message size as they are received.\n        Otherwise, a Deferred which will fire with a list of B{only}\n        message sizes will be returned.  For messages which have been\n        deleted, None will be used in place of the message size.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_consumeOrSetItem'
op|'('
string|"'LIST'"
op|','
name|'None'
op|','
name|'consumer'
op|','
name|'_listXform'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|listUID
dedent|''
name|'def'
name|'listUID'
op|'('
name|'self'
op|','
name|'consumer'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve a list of the UIDs of all messages on the server.\n\n        If L{consumer} is not None, it will be called with two-tuples\n        of message index number and message UID as they are received.\n        Otherwise, a Deferred which will fire with of list of B{only}\n        message UIDs will be returned.  For messages which have been\n        deleted, None will be used in place of the message UID.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_consumeOrSetItem'
op|'('
string|"'UIDL'"
op|','
name|'None'
op|','
name|'consumer'
op|','
name|'_uidXform'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|quit
dedent|''
name|'def'
name|'quit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disconnect from the server.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendShort'
op|'('
string|"'QUIT'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
nl|'\n'
comment|'# Exceptions'
nl|'\n'
string|"'InsecureAuthenticationDisallowed'"
op|','
string|"'LineTooLong'"
op|','
string|"'POP3ClientError'"
op|','
nl|'\n'
string|"'ServerErrorResponse'"
op|','
string|"'TLSError'"
op|','
string|"'TLSNotSupportedError'"
op|','
nl|'\n'
nl|'\n'
comment|'# Protocol classes'
nl|'\n'
string|"'POP3Client'"
op|']'
newline|'\n'
endmarker|''
end_unit

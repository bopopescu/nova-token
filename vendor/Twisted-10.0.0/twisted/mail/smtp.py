begin_unit
comment|'# -*- test-case-name: twisted.mail.test.test_smtp -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nSimple Mail Transfer Protocol implementation.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'time'
op|','
name|'re'
op|','
name|'base64'
op|','
name|'types'
op|','
name|'socket'
op|','
name|'os'
op|','
name|'random'
op|','
name|'hmac'
newline|'\n'
name|'import'
name|'MimeWriter'
op|','
name|'tempfile'
op|','
name|'rfc822'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
name|'import'
name|'binascii'
newline|'\n'
name|'from'
name|'email'
op|'.'
name|'base64MIME'
name|'import'
name|'encode'
name|'as'
name|'encode_base64'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'Interface'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'copyright'
name|'import'
name|'longversion'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'policies'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'ITLSTransport'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
name|'import'
name|'cred'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'checkers'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'runtime'
name|'import'
name|'platform'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'StringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
comment|'# Cache the hostname (XXX Yes - this is broken)'
nl|'\n'
dedent|''
name|'if'
name|'platform'
op|'.'
name|'isMacOSX'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# On OS X, getfqdn() is ridiculously slow - use the'
nl|'\n'
comment|'# probably-identical-but-sometimes-not gethostname() there.'
nl|'\n'
DECL|variable|DNSNAME
indent|'    '
name|'DNSNAME'
op|'='
name|'socket'
op|'.'
name|'gethostname'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|DNSNAME
indent|'    '
name|'DNSNAME'
op|'='
name|'socket'
op|'.'
name|'getfqdn'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Used for fast success code lookup'
nl|'\n'
DECL|variable|SUCCESS
dedent|''
name|'SUCCESS'
op|'='
name|'dict'
op|'('
name|'map'
op|'('
name|'None'
op|','
name|'range'
op|'('
number|'200'
op|','
number|'300'
op|')'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|IMessageDelivery
name|'class'
name|'IMessageDelivery'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
DECL|member|receivedHeader
indent|'    '
name|'def'
name|'receivedHeader'
op|'('
name|'helo'
op|','
name|'origin'
op|','
name|'recipients'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate the Received header for a message\n\n        @type helo: C{(str, str)}\n        @param helo: The argument to the HELO command and the client\'s IP\n        address.\n\n        @type origin: C{Address}\n        @param origin: The address the message is from\n\n        @type recipients: C{list} of L{User}\n        @param recipients: A list of the addresses for which this message\n        is bound.\n\n        @rtype: C{str}\n        @return: The full \\"Received\\" header string.\n        """'
newline|'\n'
nl|'\n'
DECL|member|validateTo
dedent|''
name|'def'
name|'validateTo'
op|'('
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Validate the address for which the message is destined.\n\n        @type user: C{User}\n        @param user: The address to validate.\n\n        @rtype: no-argument callable\n        @return: A C{Deferred} which becomes, or a callable which\n        takes no arguments and returns an object implementing C{IMessage}.\n        This will be called and the returned object used to deliver the\n        message when it arrives.\n\n        @raise SMTPBadRcpt: Raised if messages to the address are\n        not to be accepted.\n        """'
newline|'\n'
nl|'\n'
DECL|member|validateFrom
dedent|''
name|'def'
name|'validateFrom'
op|'('
name|'helo'
op|','
name|'origin'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Validate the address from which the message originates.\n\n        @type helo: C{(str, str)}\n        @param helo: The argument to the HELO command and the client\'s IP\n        address.\n\n        @type origin: C{Address}\n        @param origin: The address the message is from\n\n        @rtype: C{Deferred} or C{Address}\n        @return: C{origin} or a C{Deferred} whose callback will be\n        passed C{origin}.\n\n        @raise SMTPBadSender: Raised of messages from this address are\n        not to be accepted.\n        """'
newline|'\n'
nl|'\n'
DECL|class|IMessageDeliveryFactory
dedent|''
dedent|''
name|'class'
name|'IMessageDeliveryFactory'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An alternate interface to implement for handling message delivery.\n\n    It is useful to implement this interface instead of L{IMessageDelivery}\n    directly because it allows the implementor to distinguish between\n    different messages delivery over the same connection.  This can be\n    used to optimize delivery of a single message to multiple recipients,\n    something which cannot be done by L{IMessageDelivery} implementors\n    due to their lack of information.\n    """'
newline|'\n'
DECL|member|getMessageDelivery
name|'def'
name|'getMessageDelivery'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return an L{IMessageDelivery} object.\n\n        This will be called once per message.\n        """'
newline|'\n'
nl|'\n'
DECL|class|SMTPError
dedent|''
dedent|''
name|'class'
name|'SMTPError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SMTPClientError
dedent|''
name|'class'
name|'SMTPClientError'
op|'('
name|'SMTPError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for SMTP client errors.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|','
name|'log'
op|'='
name|'None'
op|','
name|'addresses'
op|'='
name|'None'
op|','
name|'isFatal'
op|'='
name|'False'
op|','
name|'retry'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param code: The SMTP response code associated with this error.\n        @param resp: The string response associated with this error.\n\n        @param log: A string log of the exchange leading up to and including\n            the error.\n        @type log: L{str}\n\n        @param isFatal: A boolean indicating whether this connection can\n            proceed or not.  If True, the connection will be dropped.\n\n        @param retry: A boolean indicating whether the delivery should be\n            retried.  If True and the factory indicates further retries are\n            desirable, they will be attempted, otherwise the delivery will\n            be failed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'code'
op|'='
name|'code'
newline|'\n'
name|'self'
op|'.'
name|'resp'
op|'='
name|'resp'
newline|'\n'
name|'self'
op|'.'
name|'log'
op|'='
name|'log'
newline|'\n'
name|'self'
op|'.'
name|'addresses'
op|'='
name|'addresses'
newline|'\n'
name|'self'
op|'.'
name|'isFatal'
op|'='
name|'isFatal'
newline|'\n'
name|'self'
op|'.'
name|'retry'
op|'='
name|'retry'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'code'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
op|'['
string|'"%.3d %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'code'
op|','
name|'self'
op|'.'
name|'resp'
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
op|'['
name|'self'
op|'.'
name|'resp'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'log'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'log'
op|')'
newline|'\n'
name|'res'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
dedent|''
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'res'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ESMTPClientError
dedent|''
dedent|''
name|'class'
name|'ESMTPClientError'
op|'('
name|'SMTPClientError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for ESMTP client errors.\n    """'
newline|'\n'
nl|'\n'
DECL|class|EHLORequiredError
dedent|''
name|'class'
name|'EHLORequiredError'
op|'('
name|'ESMTPClientError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The server does not support EHLO.\n\n    This is considered a non-fatal error (the connection will not be\n    dropped).\n    """'
newline|'\n'
nl|'\n'
DECL|class|AUTHRequiredError
dedent|''
name|'class'
name|'AUTHRequiredError'
op|'('
name|'ESMTPClientError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Authentication was required but the server does not support it.\n\n    This is considered a non-fatal error (the connection will not be\n    dropped).\n    """'
newline|'\n'
nl|'\n'
DECL|class|TLSRequiredError
dedent|''
name|'class'
name|'TLSRequiredError'
op|'('
name|'ESMTPClientError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Transport security was required but the server does not support it.\n\n    This is considered a non-fatal error (the connection will not be\n    dropped).\n    """'
newline|'\n'
nl|'\n'
DECL|class|AUTHDeclinedError
dedent|''
name|'class'
name|'AUTHDeclinedError'
op|'('
name|'ESMTPClientError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The server rejected our credentials.\n\n    Either the username, password, or challenge response\n    given to the server was rejected.\n\n    This is considered a non-fatal error (the connection will not be\n    dropped).\n    """'
newline|'\n'
nl|'\n'
DECL|class|AuthenticationError
dedent|''
name|'class'
name|'AuthenticationError'
op|'('
name|'ESMTPClientError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An error ocurred while authenticating.\n\n    Either the server rejected our request for authentication or the\n    challenge received was malformed.\n\n    This is considered a non-fatal error (the connection will not be\n    dropped).\n    """'
newline|'\n'
nl|'\n'
DECL|class|TLSError
dedent|''
name|'class'
name|'TLSError'
op|'('
name|'ESMTPClientError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An error occurred while negiotiating for transport security.\n\n    This is considered a non-fatal error (the connection will not be\n    dropped).\n    """'
newline|'\n'
nl|'\n'
DECL|class|SMTPConnectError
dedent|''
name|'class'
name|'SMTPConnectError'
op|'('
name|'SMTPClientError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Failed to connect to the mail exchange host.\n\n    This is considered a fatal error.  A retry will be made.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|','
name|'log'
op|'='
name|'None'
op|','
name|'addresses'
op|'='
name|'None'
op|','
name|'isFatal'
op|'='
name|'True'
op|','
name|'retry'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SMTPClientError'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|','
name|'log'
op|','
name|'addresses'
op|','
name|'isFatal'
op|','
name|'retry'
op|')'
newline|'\n'
nl|'\n'
DECL|class|SMTPTimeoutError
dedent|''
dedent|''
name|'class'
name|'SMTPTimeoutError'
op|'('
name|'SMTPClientError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Failed to receive a response from the server in the expected time period.\n\n    This is considered a fatal error.  A retry will be made.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|','
name|'log'
op|'='
name|'None'
op|','
name|'addresses'
op|'='
name|'None'
op|','
name|'isFatal'
op|'='
name|'True'
op|','
name|'retry'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SMTPClientError'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|','
name|'log'
op|','
name|'addresses'
op|','
name|'isFatal'
op|','
name|'retry'
op|')'
newline|'\n'
nl|'\n'
DECL|class|SMTPProtocolError
dedent|''
dedent|''
name|'class'
name|'SMTPProtocolError'
op|'('
name|'SMTPClientError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The server sent a mangled response.\n\n    This is considered a fatal error.  A retry will not be made.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|','
name|'log'
op|'='
name|'None'
op|','
name|'addresses'
op|'='
name|'None'
op|','
name|'isFatal'
op|'='
name|'True'
op|','
name|'retry'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SMTPClientError'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|','
name|'log'
op|','
name|'addresses'
op|','
name|'isFatal'
op|','
name|'retry'
op|')'
newline|'\n'
nl|'\n'
DECL|class|SMTPDeliveryError
dedent|''
dedent|''
name|'class'
name|'SMTPDeliveryError'
op|'('
name|'SMTPClientError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Indicates that a delivery attempt has had an error.\n    """'
newline|'\n'
nl|'\n'
DECL|class|SMTPServerError
dedent|''
name|'class'
name|'SMTPServerError'
op|'('
name|'SMTPError'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'code'
op|'='
name|'code'
newline|'\n'
name|'self'
op|'.'
name|'resp'
op|'='
name|'resp'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"%.3d %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'code'
op|','
name|'self'
op|'.'
name|'resp'
op|')'
newline|'\n'
nl|'\n'
DECL|class|SMTPAddressError
dedent|''
dedent|''
name|'class'
name|'SMTPAddressError'
op|'('
name|'SMTPServerError'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'addr'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SMTPServerError'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addr'
op|'='
name|'Address'
op|'('
name|'addr'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"%.3d <%s>... %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'code'
op|','
name|'self'
op|'.'
name|'addr'
op|','
name|'self'
op|'.'
name|'resp'
op|')'
newline|'\n'
nl|'\n'
DECL|class|SMTPBadRcpt
dedent|''
dedent|''
name|'class'
name|'SMTPBadRcpt'
op|'('
name|'SMTPAddressError'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'addr'
op|','
name|'code'
op|'='
number|'550'
op|','
nl|'\n'
name|'resp'
op|'='
string|"'Cannot receive for specified address'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SMTPAddressError'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'addr'
op|','
name|'code'
op|','
name|'resp'
op|')'
newline|'\n'
nl|'\n'
DECL|class|SMTPBadSender
dedent|''
dedent|''
name|'class'
name|'SMTPBadSender'
op|'('
name|'SMTPAddressError'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'addr'
op|','
name|'code'
op|'='
number|'550'
op|','
name|'resp'
op|'='
string|"'Sender not acceptable'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SMTPAddressError'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'addr'
op|','
name|'code'
op|','
name|'resp'
op|')'
newline|'\n'
nl|'\n'
DECL|function|rfc822date
dedent|''
dedent|''
name|'def'
name|'rfc822date'
op|'('
name|'timeinfo'
op|'='
name|'None'
op|','
name|'local'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Format an RFC-2822 compliant date string.\n\n    @param timeinfo: (optional) A sequence as returned by C{time.localtime()}\n        or C{time.gmtime()}. Default is now.\n    @param local: (optional) Indicates if the supplied time is local or\n        universal time, or if no time is given, whether now should be local or\n        universal time. Default is local, as suggested (SHOULD) by rfc-2822.\n\n    @returns: A string representing the time and date in RFC-2822 format.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'timeinfo'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'local'
op|':'
newline|'\n'
indent|'            '
name|'timeinfo'
op|'='
name|'time'
op|'.'
name|'localtime'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'timeinfo'
op|'='
name|'time'
op|'.'
name|'gmtime'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'local'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'timeinfo'
op|'['
number|'8'
op|']'
op|':'
newline|'\n'
comment|'# DST'
nl|'\n'
indent|'            '
name|'tz'
op|'='
op|'-'
name|'time'
op|'.'
name|'altzone'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'tz'
op|'='
op|'-'
name|'time'
op|'.'
name|'timezone'
newline|'\n'
nl|'\n'
dedent|''
op|'('
name|'tzhr'
op|','
name|'tzmin'
op|')'
op|'='
name|'divmod'
op|'('
name|'abs'
op|'('
name|'tz'
op|')'
op|','
number|'3600'
op|')'
newline|'\n'
name|'if'
name|'tz'
op|':'
newline|'\n'
indent|'            '
name|'tzhr'
op|'*='
name|'int'
op|'('
name|'abs'
op|'('
name|'tz'
op|')'
op|'/'
name|'tz'
op|')'
newline|'\n'
dedent|''
op|'('
name|'tzmin'
op|','
name|'tzsec'
op|')'
op|'='
name|'divmod'
op|'('
name|'tzmin'
op|','
number|'60'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
op|'('
name|'tzhr'
op|','
name|'tzmin'
op|')'
op|'='
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
string|'"%s, %02d %s %04d %02d:%02d:%02d %+03d%02d"'
op|'%'
op|'('
nl|'\n'
op|'['
string|"'Mon'"
op|','
string|"'Tue'"
op|','
string|"'Wed'"
op|','
string|"'Thu'"
op|','
string|"'Fri'"
op|','
string|"'Sat'"
op|','
string|"'Sun'"
op|']'
op|'['
name|'timeinfo'
op|'['
number|'6'
op|']'
op|']'
op|','
nl|'\n'
name|'timeinfo'
op|'['
number|'2'
op|']'
op|','
nl|'\n'
op|'['
string|"'Jan'"
op|','
string|"'Feb'"
op|','
string|"'Mar'"
op|','
string|"'Apr'"
op|','
string|"'May'"
op|','
string|"'Jun'"
op|','
nl|'\n'
string|"'Jul'"
op|','
string|"'Aug'"
op|','
string|"'Sep'"
op|','
string|"'Oct'"
op|','
string|"'Nov'"
op|','
string|"'Dec'"
op|']'
op|'['
name|'timeinfo'
op|'['
number|'1'
op|']'
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
name|'timeinfo'
op|'['
number|'0'
op|']'
op|','
name|'timeinfo'
op|'['
number|'3'
op|']'
op|','
name|'timeinfo'
op|'['
number|'4'
op|']'
op|','
name|'timeinfo'
op|'['
number|'5'
op|']'
op|','
nl|'\n'
name|'tzhr'
op|','
name|'tzmin'
op|')'
newline|'\n'
nl|'\n'
DECL|function|idGenerator
dedent|''
name|'def'
name|'idGenerator'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'i'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'        '
name|'yield'
name|'i'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|function|messageid
dedent|''
dedent|''
name|'def'
name|'messageid'
op|'('
name|'uniq'
op|'='
name|'None'
op|','
name|'N'
op|'='
name|'idGenerator'
op|'('
op|')'
op|'.'
name|'next'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a globally unique random string in RFC 2822 Message-ID format\n\n    <datetime.pid.random@host.dom.ain>\n\n    Optional uniq string will be added to strenghten uniqueness if given.\n    """'
newline|'\n'
name|'datetime'
op|'='
name|'time'
op|'.'
name|'strftime'
op|'('
string|"'%Y%m%d%H%M%S'"
op|','
name|'time'
op|'.'
name|'gmtime'
op|'('
op|')'
op|')'
newline|'\n'
name|'pid'
op|'='
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
newline|'\n'
name|'rand'
op|'='
name|'random'
op|'.'
name|'randrange'
op|'('
number|'2'
op|'**'
number|'31L'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'if'
name|'uniq'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'uniq'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'uniq'
op|'='
string|"'.'"
op|'+'
name|'uniq'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
string|"'<%s.%s.%s%s.%s@%s>'"
op|'%'
op|'('
name|'datetime'
op|','
name|'pid'
op|','
name|'rand'
op|','
name|'uniq'
op|','
name|'N'
op|'('
op|')'
op|','
name|'DNSNAME'
op|')'
newline|'\n'
nl|'\n'
DECL|function|quoteaddr
dedent|''
name|'def'
name|'quoteaddr'
op|'('
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Turn an email address, possibly with realname part etc, into\n    a form suitable for and SMTP envelope.\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'addr'
op|','
name|'Address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<%s>'"
op|'%'
name|'str'
op|'('
name|'addr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'res'
op|'='
name|'rfc822'
op|'.'
name|'parseaddr'
op|'('
name|'addr'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'res'
op|'=='
op|'('
name|'None'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
comment|"# It didn't parse, use it as-is"
nl|'\n'
indent|'        '
name|'return'
string|"'<%s>'"
op|'%'
name|'str'
op|'('
name|'addr'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<%s>'"
op|'%'
name|'str'
op|'('
name|'res'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'COMMAND'
op|','
name|'DATA'
op|','
name|'AUTH'
op|'='
string|"'COMMAND'"
op|','
string|"'DATA'"
op|','
string|"'AUTH'"
newline|'\n'
nl|'\n'
DECL|class|AddressError
name|'class'
name|'AddressError'
op|'('
name|'SMTPError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"Parse error in address"'
newline|'\n'
nl|'\n'
comment|'# Character classes for parsing addresses'
nl|'\n'
DECL|variable|atom
dedent|''
name|'atom'
op|'='
string|'r"[-A-Za-z0-9!\\#$%&\'*+/=?^_`{|}~]"'
newline|'\n'
nl|'\n'
DECL|class|Address
name|'class'
name|'Address'
op|':'
newline|'\n'
indent|'    '
string|'"""Parse and hold an RFC 2821 address.\n\n    Source routes are stipped and ignored, UUCP-style bang-paths\n    and %-style routing are not parsed.\n\n    @type domain: C{str}\n    @ivar domain: The domain within which this address resides.\n\n    @type local: C{str}\n    @ivar local: The local (\\"user\\") portion of this address.\n    """'
newline|'\n'
nl|'\n'
name|'tstring'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r\'\'\'( # A string of\n                          (?:"[^"]*" # quoted string\n                          |\\\\. # backslash-escaped characted\n                          |\'\'\''
op|'+'
name|'atom'
op|'+'
string|"r''' # atom character\n                          )+|.) # or any single character'''"
op|','
name|'re'
op|'.'
name|'X'
op|')'
newline|'\n'
DECL|variable|atomre
name|'atomre'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'atom'
op|')'
comment|'# match any one atom character'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'addr'
op|','
name|'defaultDomain'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'addr'
op|','
name|'User'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'addr'
op|'='
name|'addr'
op|'.'
name|'dest'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'addr'
op|','
name|'Address'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__dict__'
op|'='
name|'addr'
op|'.'
name|'__dict__'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'isinstance'
op|'('
name|'addr'
op|','
name|'types'
op|'.'
name|'StringTypes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'addr'
op|'='
name|'str'
op|'('
name|'addr'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'addrstr'
op|'='
name|'addr'
newline|'\n'
nl|'\n'
comment|'# Tokenize'
nl|'\n'
name|'atl'
op|'='
name|'filter'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'tstring'
op|'.'
name|'split'
op|'('
name|'addr'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'local'
op|'='
op|'['
op|']'
newline|'\n'
name|'domain'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'while'
name|'atl'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'atl'
op|'['
number|'0'
op|']'
op|'=='
string|"'<'"
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'atl'
op|'['
op|'-'
number|'1'
op|']'
op|'!='
string|"'>'"
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'AddressError'
op|','
string|'"Unbalanced <>"'
newline|'\n'
dedent|''
name|'atl'
op|'='
name|'atl'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'atl'
op|'['
number|'0'
op|']'
op|'=='
string|"'@'"
op|':'
newline|'\n'
indent|'                '
name|'atl'
op|'='
name|'atl'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'local'
op|':'
newline|'\n'
comment|'# Source route'
nl|'\n'
indent|'                    '
name|'while'
name|'atl'
name|'and'
name|'atl'
op|'['
number|'0'
op|']'
op|'!='
string|"':'"
op|':'
newline|'\n'
comment|'# remove it'
nl|'\n'
indent|'                        '
name|'atl'
op|'='
name|'atl'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'atl'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'AddressError'
op|','
string|'"Malformed source route"'
newline|'\n'
dedent|''
name|'atl'
op|'='
name|'atl'
op|'['
number|'1'
op|':'
op|']'
comment|'# remove :'
newline|'\n'
dedent|''
name|'elif'
name|'domain'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'AddressError'
op|','
string|'"Too many @"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Now in domain'
nl|'\n'
indent|'                    '
name|'domain'
op|'='
op|'['
string|"''"
op|']'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'len'
op|'('
name|'atl'
op|'['
number|'0'
op|']'
op|')'
op|'=='
number|'1'
name|'and'
name|'not'
name|'self'
op|'.'
name|'atomre'
op|'.'
name|'match'
op|'('
name|'atl'
op|'['
number|'0'
op|']'
op|')'
name|'and'
name|'atl'
op|'['
number|'0'
op|']'
op|'!='
string|"'.'"
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'AddressError'
op|','
string|'"Parse error at %r of %r"'
op|'%'
op|'('
name|'atl'
op|'['
number|'0'
op|']'
op|','
op|'('
name|'addr'
op|','
name|'atl'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'domain'
op|':'
newline|'\n'
indent|'                    '
name|'local'
op|'.'
name|'append'
op|'('
name|'atl'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'domain'
op|'.'
name|'append'
op|'('
name|'atl'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'atl'
op|'='
name|'atl'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'local'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'local'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'domain'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'domain'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'local'
op|'!='
string|"''"
name|'and'
name|'self'
op|'.'
name|'domain'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'defaultDomain'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'defaultDomain'
op|'='
name|'DNSNAME'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'domain'
op|'='
name|'defaultDomain'
newline|'\n'
nl|'\n'
DECL|variable|dequotebs
dedent|''
dedent|''
name|'dequotebs'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'\\\\(.)'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|dequote
name|'def'
name|'dequote'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove RFC-2821 quotes from address."""'
newline|'\n'
name|'res'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'atl'
op|'='
name|'filter'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'tstring'
op|'.'
name|'split'
op|'('
name|'str'
op|'('
name|'addr'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'t'
name|'in'
name|'atl'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'t'
op|'['
number|'0'
op|']'
op|'=='
string|'\'"\''
name|'and'
name|'t'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|'\'"\''
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'.'
name|'append'
op|'('
name|'t'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
string|"'\\\\'"
name|'in'
name|'t'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'dequotebs'
op|'.'
name|'sub'
op|'('
string|"r'\\1'"
op|','
name|'t'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'.'
name|'append'
op|'('
name|'t'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'res'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'local'
name|'or'
name|'self'
op|'.'
name|'domain'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'@'"
op|'.'
name|'join'
op|'('
op|'('
name|'self'
op|'.'
name|'local'
op|','
name|'self'
op|'.'
name|'domain'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"%s.%s(%s)"'
op|'%'
op|'('
name|'self'
op|'.'
name|'__module__'
op|','
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'repr'
op|'('
name|'str'
op|'('
name|'self'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|User
dedent|''
dedent|''
name|'class'
name|'User'
op|':'
newline|'\n'
indent|'    '
string|'"""Hold information about and SMTP message recipient,\n    including information on where the message came from\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'destination'
op|','
name|'helo'
op|','
name|'protocol'
op|','
name|'orig'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|'='
name|'getattr'
op|'('
name|'protocol'
op|','
string|"'host'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dest'
op|'='
name|'Address'
op|'('
name|'destination'
op|','
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'helo'
op|'='
name|'helo'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'protocol'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'orig'
op|','
name|'Address'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'orig'
op|'='
name|'orig'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'orig'
op|'='
name|'Address'
op|'('
name|'orig'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Helper for pickle.\n\n        protocol isn\'t picklabe, but we want User to be, so skip it in\n        the pickle.\n        """'
newline|'\n'
name|'return'
op|'{'
string|"'dest'"
op|':'
name|'self'
op|'.'
name|'dest'
op|','
nl|'\n'
string|"'helo'"
op|':'
name|'self'
op|'.'
name|'helo'
op|','
nl|'\n'
string|"'protocol'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'orig'"
op|':'
name|'self'
op|'.'
name|'orig'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'self'
op|'.'
name|'dest'
op|')'
newline|'\n'
nl|'\n'
DECL|class|IMessage
dedent|''
dedent|''
name|'class'
name|'IMessage'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Interface definition for messages that can be sent via SMTP."""'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
name|'def'
name|'lineReceived'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""handle another line"""'
newline|'\n'
nl|'\n'
DECL|member|eomReceived
dedent|''
name|'def'
name|'eomReceived'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""handle end of message\n\n        return a deferred. The deferred should be called with either:\n        callback(string) or errback(error)\n        """'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""handle message truncated\n\n        semantics should be to discard the message\n        """'
newline|'\n'
nl|'\n'
DECL|class|SMTP
dedent|''
dedent|''
name|'class'
name|'SMTP'
op|'('
name|'basic'
op|'.'
name|'LineOnlyReceiver'
op|','
name|'policies'
op|'.'
name|'TimeoutMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""SMTP server-side protocol."""'
newline|'\n'
nl|'\n'
DECL|variable|timeout
name|'timeout'
op|'='
number|'600'
newline|'\n'
DECL|variable|host
name|'host'
op|'='
name|'DNSNAME'
newline|'\n'
DECL|variable|portal
name|'portal'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Control whether we log SMTP events'
nl|'\n'
DECL|variable|noisy
name|'noisy'
op|'='
name|'True'
newline|'\n'
nl|'\n'
comment|'# A factory for IMessageDelivery objects.  If an'
nl|'\n'
comment|'# avatar implementing IMessageDeliveryFactory can'
nl|'\n'
comment|'# be acquired from the portal, it will be used to'
nl|'\n'
comment|'# create a new IMessageDelivery object for each'
nl|'\n'
comment|'# message which is received.'
nl|'\n'
DECL|variable|deliveryFactory
name|'deliveryFactory'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# An IMessageDelivery object.  A new instance is'
nl|'\n'
comment|'# used for each message received if we can get an'
nl|'\n'
comment|'# IMessageDeliveryFactory from the portal.  Otherwise,'
nl|'\n'
comment|'# a single instance is used throughout the lifetime'
nl|'\n'
comment|'# of the connection.'
nl|'\n'
DECL|variable|delivery
name|'delivery'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Cred cleanup function.'
nl|'\n'
DECL|variable|_onLogout
name|'_onLogout'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'delivery'
op|'='
name|'None'
op|','
name|'deliveryFactory'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mode'
op|'='
name|'COMMAND'
newline|'\n'
name|'self'
op|'.'
name|'_from'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_helo'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_to'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'delivery'
op|'='
name|'delivery'
newline|'\n'
name|'self'
op|'.'
name|'deliveryFactory'
op|'='
name|'deliveryFactory'
newline|'\n'
nl|'\n'
DECL|member|timeoutConnection
dedent|''
name|'def'
name|'timeoutConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
string|"'%s Timeout. Try talking faster next time!'"
op|'%'
op|'('
name|'self'
op|'.'
name|'host'
op|','
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'421'
op|','
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|greeting
dedent|''
name|'def'
name|'greeting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%s NO UCE NO UBE NO RELAY PROBES'"
op|'%'
op|'('
name|'self'
op|'.'
name|'host'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure user-code always gets something sane for _helo'
nl|'\n'
indent|'        '
name|'peer'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'peer'
op|'.'
name|'host'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
comment|'# not an IPv4Address'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'str'
op|'('
name|'peer'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_helo'
op|'='
op|'('
name|'None'
op|','
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'220'
op|','
name|'self'
op|'.'
name|'greeting'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendCode
dedent|''
name|'def'
name|'sendCode'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'message'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Send an SMTP code with a message."'
newline|'\n'
name|'lines'
op|'='
name|'message'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
name|'lastline'
op|'='
name|'lines'
op|'['
op|'-'
number|'1'
op|':'
op|']'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'lines'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'%3.3d-%s'"
op|'%'
op|'('
name|'code'
op|','
name|'line'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'%3.3d %s'"
op|'%'
op|'('
name|'code'
op|','
nl|'\n'
name|'lastline'
name|'and'
name|'lastline'
op|'['
number|'0'
op|']'
name|'or'
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
string|"'state_'"
op|'+'
name|'self'
op|'.'
name|'mode'
op|')'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|state_COMMAND
dedent|''
name|'def'
name|'state_COMMAND'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
comment|'# Ignore leading and trailing whitespace, as well as an arbitrary'
nl|'\n'
comment|'# amount of whitespace between the command and its argument, though'
nl|'\n'
comment|'# it is not required by the protocol, for it is a nice thing to do.'
nl|'\n'
indent|'        '
name|'line'
op|'='
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'parts'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'parts'
op|':'
newline|'\n'
indent|'            '
name|'method'
op|'='
name|'self'
op|'.'
name|'lookupMethod'
op|'('
name|'parts'
op|'['
number|'0'
op|']'
op|')'
name|'or'
name|'self'
op|'.'
name|'do_UNKNOWN'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'method'
op|'('
name|'parts'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'method'
op|'('
string|"''"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendSyntaxError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendSyntaxError
dedent|''
dedent|''
name|'def'
name|'sendSyntaxError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'500'
op|','
string|"'Error: bad syntax'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|lookupMethod
dedent|''
name|'def'
name|'lookupMethod'
op|'('
name|'self'
op|','
name|'command'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
string|"'do_'"
op|'+'
name|'command'
op|'.'
name|'upper'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lineLengthExceeded
dedent|''
name|'def'
name|'lineLengthExceeded'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'mode'
name|'is'
name|'DATA'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'message'
name|'in'
name|'self'
op|'.'
name|'__messages'
op|':'
newline|'\n'
indent|'                '
name|'message'
op|'.'
name|'connectionLost'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mode'
op|'='
name|'COMMAND'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'__messages'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'500'
op|','
string|"'Line too long'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_UNKNOWN
dedent|''
name|'def'
name|'do_UNKNOWN'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'500'
op|','
string|"'Command not implemented'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_HELO
dedent|''
name|'def'
name|'do_HELO'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'peer'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'peer'
op|'.'
name|'host'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'str'
op|'('
name|'peer'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_helo'
op|'='
op|'('
name|'rest'
op|','
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_from'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_to'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'250'
op|','
string|"'%s Hello %s, nice to meet you'"
op|'%'
op|'('
name|'self'
op|'.'
name|'host'
op|','
name|'host'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_QUIT
dedent|''
name|'def'
name|'do_QUIT'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'221'
op|','
string|"'See you later'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# A string of quoted strings, backslash-escaped character or'
nl|'\n'
comment|"# atom characters + '@.,:'"
nl|'\n'
DECL|variable|qstring
dedent|''
name|'qstring'
op|'='
string|'r\'("[^"]*"|\\\\.|\''
op|'+'
name|'atom'
op|'+'
string|"r'|[@.,:])+'"
newline|'\n'
nl|'\n'
name|'mail_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'''\\s*FROM:\\s*(?P<path><> # Empty <>\n                         |<'''"
op|'+'
name|'qstring'
op|'+'
string|"r'''> # <addr>\n                         |'''"
op|'+'
name|'qstring'
op|'+'
string|"r''' # addr\n                         )\\s*(\\s(?P<opts>.*))? # Optional WS + ESMTP options\n                         $'''"
op|','
name|'re'
op|'.'
name|'I'
op|'|'
name|'re'
op|'.'
name|'X'
op|')'
newline|'\n'
name|'rcpt_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'\\s*TO:\\s*(?P<path><'"
op|'+'
name|'qstring'
op|'+'
string|"r'''> # <addr>\n                         |'''"
op|'+'
name|'qstring'
op|'+'
string|"r''' # addr\n                         )\\s*(\\s(?P<opts>.*))? # Optional WS + ESMTP options\n                         $'''"
op|','
name|'re'
op|'.'
name|'I'
op|'|'
name|'re'
op|'.'
name|'X'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_MAIL
name|'def'
name|'do_MAIL'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_from'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'503'
op|','
string|'"Only one sender per message, please"'
op|')'
newline|'\n'
name|'return'
newline|'\n'
comment|'# Clear old recipient list'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_to'
op|'='
op|'['
op|']'
newline|'\n'
name|'m'
op|'='
name|'self'
op|'.'
name|'mail_re'
op|'.'
name|'match'
op|'('
name|'rest'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'m'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'501'
op|','
string|'"Syntax error"'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'addr'
op|'='
name|'Address'
op|'('
name|'m'
op|'.'
name|'group'
op|'('
string|"'path'"
op|')'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AddressError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'553'
op|','
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'validated'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'validateFrom'
op|','
name|'self'
op|'.'
name|'_helo'
op|','
name|'addr'
op|')'
newline|'\n'
name|'validated'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbFromValidate'
op|','
name|'self'
op|'.'
name|'_ebFromValidate'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbFromValidate
dedent|''
name|'def'
name|'_cbFromValidate'
op|'('
name|'self'
op|','
name|'from_'
op|','
name|'code'
op|'='
number|'250'
op|','
name|'msg'
op|'='
string|"'Sender address accepted'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_from'
op|'='
name|'from_'
newline|'\n'
name|'self'
op|'.'
name|'sendCode'
op|'('
name|'code'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_ebFromValidate
dedent|''
name|'def'
name|'_ebFromValidate'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'failure'
op|'.'
name|'check'
op|'('
name|'SMTPBadSender'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
name|'failure'
op|'.'
name|'value'
op|'.'
name|'code'
op|','
nl|'\n'
string|"'Cannot receive from specified address %s: %s'"
nl|'\n'
op|'%'
op|'('
name|'quoteaddr'
op|'('
name|'failure'
op|'.'
name|'value'
op|'.'
name|'addr'
op|')'
op|','
name|'failure'
op|'.'
name|'value'
op|'.'
name|'resp'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'failure'
op|'.'
name|'check'
op|'('
name|'SMTPServerError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
name|'failure'
op|'.'
name|'value'
op|'.'
name|'code'
op|','
name|'failure'
op|'.'
name|'value'
op|'.'
name|'resp'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|','
string|'"SMTP sender validation failure"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendCode'
op|'('
nl|'\n'
number|'451'
op|','
nl|'\n'
string|"'Requested action aborted: local error in processing'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|do_RCPT
dedent|''
dedent|''
name|'def'
name|'do_RCPT'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_from'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'503'
op|','
string|'"Must have sender before recipient"'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'m'
op|'='
name|'self'
op|'.'
name|'rcpt_re'
op|'.'
name|'match'
op|'('
name|'rest'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'m'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'501'
op|','
string|'"Syntax error"'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'user'
op|'='
name|'User'
op|'('
name|'m'
op|'.'
name|'group'
op|'('
string|"'path'"
op|')'
op|','
name|'self'
op|'.'
name|'_helo'
op|','
name|'self'
op|','
name|'self'
op|'.'
name|'_from'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AddressError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'553'
op|','
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'validateTo'
op|','
name|'user'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_cbToValidate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_ebToValidate'
op|','
nl|'\n'
name|'callbackArgs'
op|'='
op|'('
name|'user'
op|','
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbToValidate
dedent|''
name|'def'
name|'_cbToValidate'
op|'('
name|'self'
op|','
name|'to'
op|','
name|'user'
op|'='
name|'None'
op|','
name|'code'
op|'='
number|'250'
op|','
name|'msg'
op|'='
string|"'Recipient address accepted'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'user'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'user'
op|'='
name|'to'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_to'
op|'.'
name|'append'
op|'('
op|'('
name|'user'
op|','
name|'to'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendCode'
op|'('
name|'code'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebToValidate
dedent|''
name|'def'
name|'_ebToValidate'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'failure'
op|'.'
name|'check'
op|'('
name|'SMTPBadRcpt'
op|','
name|'SMTPServerError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
name|'failure'
op|'.'
name|'value'
op|'.'
name|'code'
op|','
name|'failure'
op|'.'
name|'value'
op|'.'
name|'resp'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendCode'
op|'('
nl|'\n'
number|'451'
op|','
nl|'\n'
string|"'Requested action aborted: local error in processing'"
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_disconnect
dedent|''
dedent|''
name|'def'
name|'_disconnect'
op|'('
name|'self'
op|','
name|'msgs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'msg'
name|'in'
name|'msgs'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'.'
name|'connectionLost'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"msg raised exception from connectionLost"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_DATA
dedent|''
dedent|''
dedent|''
name|'def'
name|'do_DATA'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_from'
name|'is'
name|'None'
name|'or'
op|'('
name|'not'
name|'self'
op|'.'
name|'_to'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'503'
op|','
string|"'Must have valid receiver and originator'"
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mode'
op|'='
name|'DATA'
newline|'\n'
name|'helo'
op|','
name|'origin'
op|'='
name|'self'
op|'.'
name|'_helo'
op|','
name|'self'
op|'.'
name|'_from'
newline|'\n'
name|'recipients'
op|'='
name|'self'
op|'.'
name|'_to'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_from'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_to'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'datafailed'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'msgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'user'
op|','
name|'msgFunc'
op|')'
name|'in'
name|'recipients'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'msgFunc'
op|'('
op|')'
newline|'\n'
name|'rcvdhdr'
op|'='
name|'self'
op|'.'
name|'receivedHeader'
op|'('
name|'helo'
op|','
name|'origin'
op|','
op|'['
name|'user'
op|']'
op|')'
newline|'\n'
name|'if'
name|'rcvdhdr'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'.'
name|'lineReceived'
op|'('
name|'rcvdhdr'
op|')'
newline|'\n'
dedent|''
name|'msgs'
op|'.'
name|'append'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'SMTPServerError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sendCode'
op|'('
name|'e'
op|'.'
name|'code'
op|','
name|'e'
op|'.'
name|'resp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
name|'COMMAND'
newline|'\n'
name|'self'
op|'.'
name|'_disconnect'
op|'('
name|'msgs'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'550'
op|','
string|'"Internal server error"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
name|'COMMAND'
newline|'\n'
name|'self'
op|'.'
name|'_disconnect'
op|'('
name|'msgs'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'__messages'
op|'='
name|'msgs'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'__inheader'
op|'='
name|'self'
op|'.'
name|'__inbody'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'354'
op|','
string|"'Continue'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'noisy'
op|':'
newline|'\n'
indent|'            '
name|'fmt'
op|'='
string|"'Receiving message for delivery: from=%s to=%s'"
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
name|'fmt'
op|'%'
op|'('
name|'origin'
op|','
op|'['
name|'str'
op|'('
name|'u'
op|')'
name|'for'
op|'('
name|'u'
op|','
name|'f'
op|')'
name|'in'
name|'recipients'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
comment|"# self.sendCode(421, 'Dropping connection.') # This does nothing..."
nl|'\n'
comment|'# Ideally, if we (rather than the other side) lose the connection,'
nl|'\n'
comment|'# we should be able to tell the other side that we are going away.'
nl|'\n'
comment|'# RFC-2821 requires that we try.'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'mode'
name|'is'
name|'DATA'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'message'
name|'in'
name|'self'
op|'.'
name|'__messages'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'message'
op|'.'
name|'connectionLost'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                        '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'del'
name|'self'
op|'.'
name|'__messages'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'_onLogout'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_onLogout'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_onLogout'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_RSET
dedent|''
name|'def'
name|'do_RSET'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_from'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_to'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'250'
op|','
string|"'I remember nothing.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataLineReceived
dedent|''
name|'def'
name|'dataLineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'line'
op|'['
op|':'
number|'1'
op|']'
op|'=='
string|"'.'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'line'
op|'=='
string|"'.'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'mode'
op|'='
name|'COMMAND'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'datafailed'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'sendCode'
op|'('
name|'self'
op|'.'
name|'datafailed'
op|'.'
name|'code'
op|','
nl|'\n'
name|'self'
op|'.'
name|'datafailed'
op|'.'
name|'resp'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'__messages'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_messageHandled'
op|'('
string|'"thrown away"'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
nl|'\n'
name|'m'
op|'.'
name|'eomReceived'
op|'('
op|')'
name|'for'
name|'m'
name|'in'
name|'self'
op|'.'
name|'__messages'
nl|'\n'
op|']'
op|','
name|'consumeErrors'
op|'='
name|'True'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_messageHandled'
nl|'\n'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'__messages'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'line'
op|'='
name|'line'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'datafailed'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# Add a blank line between the generated Received:-header'
nl|'\n'
comment|'# and the message body if the message comes in without any'
nl|'\n'
comment|'# headers'
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'__inheader'
name|'and'
name|'not'
name|'self'
op|'.'
name|'__inbody'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"':'"
name|'in'
name|'line'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'__inheader'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'line'
op|':'
newline|'\n'
indent|'                    '
name|'for'
name|'message'
name|'in'
name|'self'
op|'.'
name|'__messages'
op|':'
newline|'\n'
indent|'                        '
name|'message'
op|'.'
name|'lineReceived'
op|'('
string|"''"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'__inbody'
op|'='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'line'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'__inbody'
op|'='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'message'
name|'in'
name|'self'
op|'.'
name|'__messages'
op|':'
newline|'\n'
indent|'                '
name|'message'
op|'.'
name|'lineReceived'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'SMTPServerError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'datafailed'
op|'='
name|'e'
newline|'\n'
name|'for'
name|'message'
name|'in'
name|'self'
op|'.'
name|'__messages'
op|':'
newline|'\n'
indent|'                '
name|'message'
op|'.'
name|'connectionLost'
op|'('
op|')'
newline|'\n'
DECL|variable|state_DATA
dedent|''
dedent|''
dedent|''
name|'state_DATA'
op|'='
name|'dataLineReceived'
newline|'\n'
nl|'\n'
DECL|member|_messageHandled
name|'def'
name|'_messageHandled'
op|'('
name|'self'
op|','
name|'resultList'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'failures'
op|'='
number|'0'
newline|'\n'
name|'for'
op|'('
name|'success'
op|','
name|'result'
op|')'
name|'in'
name|'resultList'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'success'
op|':'
newline|'\n'
indent|'                '
name|'failures'
op|'+='
number|'1'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'failures'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|"'Could not send e-mail'"
newline|'\n'
name|'L'
op|'='
name|'len'
op|'('
name|'resultList'
op|')'
newline|'\n'
name|'if'
name|'L'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'+='
string|"' (%d failures out of %d recipients)'"
op|'%'
op|'('
name|'failures'
op|','
name|'L'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'550'
op|','
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'250'
op|','
string|"'Delivery in progress'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbAnonymousAuthentication
dedent|''
dedent|''
name|'def'
name|'_cbAnonymousAuthentication'
op|'('
name|'self'
op|','
op|'('
name|'iface'
op|','
name|'avatar'
op|','
name|'logout'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Save the state resulting from a successful anonymous cred login.\n        """'
newline|'\n'
name|'if'
name|'issubclass'
op|'('
name|'iface'
op|','
name|'IMessageDeliveryFactory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deliveryFactory'
op|'='
name|'avatar'
newline|'\n'
name|'self'
op|'.'
name|'delivery'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'elif'
name|'issubclass'
op|'('
name|'iface'
op|','
name|'IMessageDelivery'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deliveryFactory'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'delivery'
op|'='
name|'avatar'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"%s is not a supported interface"'
op|'%'
op|'('
name|'iface'
op|'.'
name|'__name__'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_onLogout'
op|'='
name|'logout'
newline|'\n'
name|'self'
op|'.'
name|'challenger'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# overridable methods:'
nl|'\n'
DECL|member|validateFrom
dedent|''
name|'def'
name|'validateFrom'
op|'('
name|'self'
op|','
name|'helo'
op|','
name|'origin'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Validate the address from which the message originates.\n\n        @type helo: C{(str, str)}\n        @param helo: The argument to the HELO command and the client\'s IP\n        address.\n\n        @type origin: C{Address}\n        @param origin: The address the message is from\n\n        @rtype: C{Deferred} or C{Address}\n        @return: C{origin} or a C{Deferred} whose callback will be\n        passed C{origin}.\n\n        @raise SMTPBadSender: Raised of messages from this address are\n        not to be accepted.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'deliveryFactory'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'delivery'
op|'='
name|'self'
op|'.'
name|'deliveryFactory'
op|'.'
name|'getMessageDelivery'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'delivery'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'delivery'
op|'.'
name|'validateFrom'
op|','
nl|'\n'
name|'helo'
op|','
name|'origin'
op|')'
newline|'\n'
nl|'\n'
comment|'# No login has been performed, no default delivery object has been'
nl|'\n'
comment|'# provided: try to perform an anonymous login and then invoke this'
nl|'\n'
comment|'# method again.'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'portal'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'result'
op|'='
name|'self'
op|'.'
name|'portal'
op|'.'
name|'login'
op|'('
nl|'\n'
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'Anonymous'
op|'('
op|')'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'IMessageDeliveryFactory'
op|','
name|'IMessageDelivery'
op|')'
newline|'\n'
nl|'\n'
DECL|function|ebAuthentication
name|'def'
name|'ebAuthentication'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""\n                Translate cred exceptions into SMTP exceptions so that the\n                protocol code which invokes C{validateFrom} can properly report\n                the failure.\n                """'
newline|'\n'
name|'if'
name|'err'
op|'.'
name|'check'
op|'('
name|'cred'
op|'.'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'exc'
op|'='
name|'SMTPBadSender'
op|'('
name|'origin'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'err'
op|'.'
name|'check'
op|'('
name|'cred'
op|'.'
name|'error'
op|'.'
name|'UnhandledCredentials'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'exc'
op|'='
name|'SMTPBadSender'
op|'('
nl|'\n'
name|'origin'
op|','
name|'resp'
op|'='
string|'"Unauthenticated senders not allowed"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'err'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'exc'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'result'
op|'.'
name|'addCallbacks'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_cbAnonymousAuthentication'
op|','
name|'ebAuthentication'
op|')'
newline|'\n'
nl|'\n'
DECL|function|continueValidation
name|'def'
name|'continueValidation'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""\n                Re-attempt from address validation.\n                """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'validateFrom'
op|'('
name|'helo'
op|','
name|'origin'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'result'
op|'.'
name|'addCallback'
op|'('
name|'continueValidation'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
dedent|''
name|'raise'
name|'SMTPBadSender'
op|'('
name|'origin'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|validateTo
dedent|''
name|'def'
name|'validateTo'
op|'('
name|'self'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Validate the address for which the message is destined.\n\n        @type user: C{User}\n        @param user: The address to validate.\n\n        @rtype: no-argument callable\n        @return: A C{Deferred} which becomes, or a callable which\n        takes no arguments and returns an object implementing C{IMessage}.\n        This will be called and the returned object used to deliver the\n        message when it arrives.\n\n        @raise SMTPBadRcpt: Raised if messages to the address are\n        not to be accepted.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'delivery'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'delivery'
op|'.'
name|'validateTo'
op|'('
name|'user'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'SMTPBadRcpt'
op|'('
name|'user'
op|')'
newline|'\n'
nl|'\n'
DECL|member|receivedHeader
dedent|''
name|'def'
name|'receivedHeader'
op|'('
name|'self'
op|','
name|'helo'
op|','
name|'origin'
op|','
name|'recipients'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'delivery'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'delivery'
op|'.'
name|'receivedHeader'
op|'('
name|'helo'
op|','
name|'origin'
op|','
name|'recipients'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'heloStr'
op|'='
string|'""'
newline|'\n'
name|'if'
name|'helo'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'heloStr'
op|'='
string|'" helo=%s"'
op|'%'
op|'('
name|'helo'
op|'['
number|'0'
op|']'
op|','
op|')'
newline|'\n'
dedent|''
name|'domain'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'host'
newline|'\n'
name|'from_'
op|'='
string|'"from %s ([%s]%s)"'
op|'%'
op|'('
name|'helo'
op|'['
number|'0'
op|']'
op|','
name|'helo'
op|'['
number|'1'
op|']'
op|','
name|'heloStr'
op|')'
newline|'\n'
name|'by'
op|'='
string|'"by %s with %s (%s)"'
op|'%'
op|'('
name|'domain'
op|','
nl|'\n'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'longversion'
op|')'
newline|'\n'
name|'for_'
op|'='
string|'"for %s; %s"'
op|'%'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'recipients'
op|')'
op|')'
op|','
nl|'\n'
name|'rfc822date'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
string|'"Received: %s\\n\\t%s\\n\\t%s"'
op|'%'
op|'('
name|'from_'
op|','
name|'by'
op|','
name|'for_'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startMessage
dedent|''
name|'def'
name|'startMessage'
op|'('
name|'self'
op|','
name|'recipients'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'delivery'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'delivery'
op|'.'
name|'startMessage'
op|'('
name|'recipients'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SMTPFactory
dedent|''
dedent|''
name|'class'
name|'SMTPFactory'
op|'('
name|'protocol'
op|'.'
name|'ServerFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Factory for SMTP."""'
newline|'\n'
nl|'\n'
comment|'# override in instances or subclasses'
nl|'\n'
DECL|variable|domain
name|'domain'
op|'='
name|'DNSNAME'
newline|'\n'
DECL|variable|timeout
name|'timeout'
op|'='
number|'600'
newline|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'SMTP'
newline|'\n'
nl|'\n'
DECL|variable|portal
name|'portal'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'portal'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'portal'
op|'='
name|'portal'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'protocol'
op|'.'
name|'ServerFactory'
op|'.'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'portal'
op|'='
name|'self'
op|'.'
name|'portal'
newline|'\n'
name|'p'
op|'.'
name|'host'
op|'='
name|'self'
op|'.'
name|'domain'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
DECL|class|SMTPClient
dedent|''
dedent|''
name|'class'
name|'SMTPClient'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|','
name|'policies'
op|'.'
name|'TimeoutMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    SMTP client for sending emails.\n    \n    After the client has connected to the SMTP server, it repeatedly calls\n    L{SMTPClient.getMailFrom}, L{SMTPClient.getMailTo} and\n    L{SMTPClient.getMailData} and uses this information to send an email.\n    It then calls L{SMTPClient.getMailFrom} again; if it returns C{None}, the\n    client will disconnect, otherwise it will continue as normal i.e. call\n    L{SMTPClient.getMailTo} and L{SMTPClient.getMailData} and send a new email.\n    """'
newline|'\n'
nl|'\n'
comment|'# If enabled then log SMTP client server communication'
nl|'\n'
DECL|variable|debug
name|'debug'
op|'='
name|'True'
newline|'\n'
nl|'\n'
comment|'# Number of seconds to wait before timing out a connection.  If'
nl|'\n'
comment|'# None, perform no timeout checking.'
nl|'\n'
DECL|variable|timeout
name|'timeout'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'identity'
op|','
name|'logsize'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'identity'
op|'='
name|'identity'
name|'or'
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'toAddressesResult'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'successAddresses'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_from'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'resp'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'code'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'log'
op|'='
name|'util'
op|'.'
name|'LineLog'
op|'('
name|'logsize'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendLine
dedent|''
name|'def'
name|'sendLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
comment|'# Log sendLine only if you are in debug mode for performance'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'debug'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'log'
op|'.'
name|'append'
op|'('
string|"'>>> '"
op|'+'
name|'line'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'basic'
op|'.'
name|'LineReceiver'
op|'.'
name|'sendLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_expected'
op|'='
op|'['
number|'220'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_okresponse'
op|'='
name|'self'
op|'.'
name|'smtpState_helo'
newline|'\n'
name|'self'
op|'.'
name|'_failresponse'
op|'='
name|'self'
op|'.'
name|'smtpConnectionFailed'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|'='
name|'protocol'
op|'.'
name|'connectionDone'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""We are no longer connected"""'
newline|'\n'
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mailFile'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|timeoutConnection
dedent|''
name|'def'
name|'timeoutConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendError'
op|'('
nl|'\n'
name|'SMTPTimeoutError'
op|'('
nl|'\n'
op|'-'
number|'1'
op|','
string|'"Timeout waiting for SMTP server response"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'log'
op|'.'
name|'str'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Log lineReceived only if you are in debug mode for performance'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'debug'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'log'
op|'.'
name|'append'
op|'('
string|"'<<< '"
op|'+'
name|'line'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'why'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'code'
op|'='
name|'int'
op|'('
name|'line'
op|'['
op|':'
number|'3'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
comment|'# This is a fatal error and will disconnect the transport lineReceived will not be called again'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendError'
op|'('
name|'SMTPProtocolError'
op|'('
op|'-'
number|'1'
op|','
string|'"Invalid response from SMTP server: %s"'
op|'%'
name|'line'
op|','
name|'self'
op|'.'
name|'log'
op|'.'
name|'str'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'line'
op|'['
number|'0'
op|']'
op|'=='
string|"'0'"
op|':'
newline|'\n'
comment|'# Verbose informational message, ignore it'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'resp'
op|'.'
name|'append'
op|'('
name|'line'
op|'['
number|'4'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'line'
op|'['
number|'3'
op|':'
number|'4'
op|']'
op|'=='
string|"'-'"
op|':'
newline|'\n'
comment|'# continuation'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'code'
name|'in'
name|'self'
op|'.'
name|'_expected'
op|':'
newline|'\n'
indent|'            '
name|'why'
op|'='
name|'self'
op|'.'
name|'_okresponse'
op|'('
name|'self'
op|'.'
name|'code'
op|','
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'resp'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'why'
op|'='
name|'self'
op|'.'
name|'_failresponse'
op|'('
name|'self'
op|'.'
name|'code'
op|','
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'resp'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'code'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'resp'
op|'='
op|'['
op|']'
newline|'\n'
name|'return'
name|'why'
newline|'\n'
nl|'\n'
DECL|member|smtpConnectionFailed
dedent|''
name|'def'
name|'smtpConnectionFailed'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendError'
op|'('
name|'SMTPConnectError'
op|'('
name|'code'
op|','
name|'resp'
op|','
name|'self'
op|'.'
name|'log'
op|'.'
name|'str'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|smtpTransferFailed
dedent|''
name|'def'
name|'smtpTransferFailed'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'code'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendError'
op|'('
name|'SMTPProtocolError'
op|'('
name|'code'
op|','
name|'resp'
op|','
name|'self'
op|'.'
name|'log'
op|'.'
name|'str'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'smtpState_msgSent'
op|'('
name|'code'
op|','
name|'resp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|smtpState_helo
dedent|''
dedent|''
name|'def'
name|'smtpState_helo'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'HELO '"
op|'+'
name|'self'
op|'.'
name|'identity'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_expected'
op|'='
name|'SUCCESS'
newline|'\n'
name|'self'
op|'.'
name|'_okresponse'
op|'='
name|'self'
op|'.'
name|'smtpState_from'
newline|'\n'
nl|'\n'
DECL|member|smtpState_from
dedent|''
name|'def'
name|'smtpState_from'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_from'
op|'='
name|'self'
op|'.'
name|'getMailFrom'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_failresponse'
op|'='
name|'self'
op|'.'
name|'smtpTransferFailed'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_from'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'MAIL FROM:%s'"
op|'%'
name|'quoteaddr'
op|'('
name|'self'
op|'.'
name|'_from'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_expected'
op|'='
op|'['
number|'250'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_okresponse'
op|'='
name|'self'
op|'.'
name|'smtpState_to'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# All messages have been sent, disconnect'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_disconnectFromServer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|smtpState_disconnect
dedent|''
dedent|''
name|'def'
name|'smtpState_disconnect'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|smtpState_to
dedent|''
name|'def'
name|'smtpState_to'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'toAddresses'
op|'='
name|'iter'
op|'('
name|'self'
op|'.'
name|'getMailTo'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'toAddressesResult'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'successAddresses'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_okresponse'
op|'='
name|'self'
op|'.'
name|'smtpState_toOrData'
newline|'\n'
name|'self'
op|'.'
name|'_expected'
op|'='
name|'xrange'
op|'('
number|'0'
op|','
number|'1000'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lastAddress'
op|'='
name|'None'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'smtpState_toOrData'
op|'('
number|'0'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|smtpState_toOrData
dedent|''
name|'def'
name|'smtpState_toOrData'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'lastAddress'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'toAddressesResult'
op|'.'
name|'append'
op|'('
op|'('
name|'self'
op|'.'
name|'lastAddress'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|')'
newline|'\n'
name|'if'
name|'code'
name|'in'
name|'SUCCESS'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'successAddresses'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'lastAddress'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'lastAddress'
op|'='
name|'self'
op|'.'
name|'toAddresses'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'successAddresses'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'DATA'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_expected'
op|'='
op|'['
number|'354'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_okresponse'
op|'='
name|'self'
op|'.'
name|'smtpState_data'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'smtpState_msgSent'
op|'('
name|'code'
op|','
string|"'No recipients accepted'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'RCPT TO:%s'"
op|'%'
name|'quoteaddr'
op|'('
name|'self'
op|'.'
name|'lastAddress'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|smtpState_data
dedent|''
dedent|''
name|'def'
name|'smtpState_data'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'basic'
op|'.'
name|'FileSender'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'s'
op|'.'
name|'beginFileTransfer'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getMailData'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'transport'
op|','
name|'self'
op|'.'
name|'transformChunk'
op|')'
newline|'\n'
DECL|function|ebTransfer
name|'def'
name|'ebTransfer'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendError'
op|'('
name|'err'
op|'.'
name|'value'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'finishedFileTransfer'
op|','
name|'ebTransfer'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_expected'
op|'='
name|'SUCCESS'
newline|'\n'
name|'self'
op|'.'
name|'_okresponse'
op|'='
name|'self'
op|'.'
name|'smtpState_msgSent'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|smtpState_msgSent
dedent|''
name|'def'
name|'smtpState_msgSent'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_from'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sentMail'
op|'('
name|'code'
op|','
name|'resp'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'successAddresses'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'toAddressesResult'
op|','
name|'self'
op|'.'
name|'log'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'toAddressesResult'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_from'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'RSET'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_expected'
op|'='
name|'SUCCESS'
newline|'\n'
name|'self'
op|'.'
name|'_okresponse'
op|'='
name|'self'
op|'.'
name|'smtpState_from'
newline|'\n'
nl|'\n'
comment|'##'
nl|'\n'
comment|'## Helpers for FileSender'
nl|'\n'
comment|'##'
nl|'\n'
DECL|member|transformChunk
dedent|''
name|'def'
name|'transformChunk'
op|'('
name|'self'
op|','
name|'chunk'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Perform the necessary local to network newline conversion and escape\n        leading periods.\n\n        This method also resets the idle timeout so that as long as process is\n        being made sending the message body, the client will not time out.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
name|'return'
name|'chunk'
op|'.'
name|'replace'
op|'('
string|"'\\n'"
op|','
string|"'\\r\\n'"
op|')'
op|'.'
name|'replace'
op|'('
string|"'\\r\\n.'"
op|','
string|"'\\r\\n..'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|finishedFileTransfer
dedent|''
name|'def'
name|'finishedFileTransfer'
op|'('
name|'self'
op|','
name|'lastsent'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'lastsent'
op|'!='
string|"'\\n'"
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
string|"'\\r\\n.'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
string|"'.'"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
comment|'##'
nl|'\n'
comment|'# these methods should be overriden in subclasses'
nl|'\n'
DECL|member|getMailFrom
dedent|''
name|'def'
name|'getMailFrom'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the email address the mail is from."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|getMailTo
dedent|''
name|'def'
name|'getMailTo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a list of emails to send to."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|getMailData
dedent|''
name|'def'
name|'getMailData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return file-like object containing data of message to be sent.\n\n        Lines in the file should be delimited by \'\\\\n\'.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|sendError
dedent|''
name|'def'
name|'sendError'
op|'('
name|'self'
op|','
name|'exc'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an error occurs before a mail message is sent sendError will be\n        called.  This base class method sends a QUIT if the error is\n        non-fatal and disconnects the connection.\n\n        @param exc: The SMTPClientError (or child class) raised\n        @type exc: C{SMTPClientError}\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'exc'
op|','
name|'SMTPClientError'
op|')'
name|'and'
name|'not'
name|'exc'
op|'.'
name|'isFatal'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_disconnectFromServer'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# If the error was fatal then the communication channel with the'
nl|'\n'
comment|'# SMTP Server is broken so just close the transport connection'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'smtpState_disconnect'
op|'('
op|'-'
number|'1'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|sentMail
dedent|''
dedent|''
name|'def'
name|'sentMail'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|','
name|'numOk'
op|','
name|'addresses'
op|','
name|'log'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when an attempt to send an email is completed.\n\n        If some addresses were accepted, code and resp are the response\n        to the DATA command. If no addresses were accepted, code is -1\n        and resp is an informative message.\n\n        @param code: the code returned by the SMTP Server\n        @param resp: The string response returned from the SMTP Server\n        @param numOK: the number of addresses accepted by the remote host.\n        @param addresses: is a list of tuples (address, code, resp) listing\n                          the response to each RCPT command.\n        @param log: is the SMTP session log\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|_disconnectFromServer
dedent|''
name|'def'
name|'_disconnectFromServer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_expected'
op|'='
name|'xrange'
op|'('
number|'0'
op|','
number|'1000'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_okresponse'
op|'='
name|'self'
op|'.'
name|'smtpState_disconnect'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'QUIT'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ESMTPClient
dedent|''
dedent|''
name|'class'
name|'ESMTPClient'
op|'('
name|'SMTPClient'
op|')'
op|':'
newline|'\n'
comment|'# Fall back to HELO if the server does not support EHLO'
nl|'\n'
DECL|variable|heloFallback
indent|'    '
name|'heloFallback'
op|'='
name|'True'
newline|'\n'
nl|'\n'
comment|'# Refuse to proceed if authentication cannot be performed'
nl|'\n'
DECL|variable|requireAuthentication
name|'requireAuthentication'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# Refuse to proceed if TLS is not available'
nl|'\n'
DECL|variable|requireTransportSecurity
name|'requireTransportSecurity'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# Indicate whether or not our transport can be considered secure.'
nl|'\n'
DECL|variable|tlsMode
name|'tlsMode'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# ClientContextFactory to use for STARTTLS'
nl|'\n'
DECL|variable|context
name|'context'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'secret'
op|','
name|'contextFactory'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SMTPClient'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authenticators'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'secret'
op|'='
name|'secret'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'contextFactory'
newline|'\n'
name|'self'
op|'.'
name|'tlsMode'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|esmtpEHLORequired
dedent|''
name|'def'
name|'esmtpEHLORequired'
op|'('
name|'self'
op|','
name|'code'
op|'='
op|'-'
number|'1'
op|','
name|'resp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendError'
op|'('
name|'EHLORequiredError'
op|'('
number|'502'
op|','
string|'"Server does not support ESMTP Authentication"'
op|','
name|'self'
op|'.'
name|'log'
op|'.'
name|'str'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|esmtpAUTHRequired
dedent|''
name|'def'
name|'esmtpAUTHRequired'
op|'('
name|'self'
op|','
name|'code'
op|'='
op|'-'
number|'1'
op|','
name|'resp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmp'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'a'
name|'in'
name|'self'
op|'.'
name|'authenticators'
op|':'
newline|'\n'
indent|'            '
name|'tmp'
op|'.'
name|'append'
op|'('
name|'a'
op|'.'
name|'getName'
op|'('
op|')'
op|'.'
name|'upper'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'auth'
op|'='
string|'"[%s]"'
op|'%'
string|"', '"
op|'.'
name|'join'
op|'('
name|'tmp'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'sendError'
op|'('
name|'AUTHRequiredError'
op|'('
number|'502'
op|','
string|'"Server does not support Client Authentication schemes %s"'
op|'%'
name|'auth'
op|','
nl|'\n'
name|'self'
op|'.'
name|'log'
op|'.'
name|'str'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|esmtpTLSRequired
dedent|''
name|'def'
name|'esmtpTLSRequired'
op|'('
name|'self'
op|','
name|'code'
op|'='
op|'-'
number|'1'
op|','
name|'resp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendError'
op|'('
name|'TLSRequiredError'
op|'('
number|'502'
op|','
string|'"Server does not support secure communication via TLS / SSL"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'log'
op|'.'
name|'str'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|esmtpTLSFailed
dedent|''
name|'def'
name|'esmtpTLSFailed'
op|'('
name|'self'
op|','
name|'code'
op|'='
op|'-'
number|'1'
op|','
name|'resp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendError'
op|'('
name|'TLSError'
op|'('
name|'code'
op|','
string|'"Could not complete the SSL/TLS handshake"'
op|','
name|'self'
op|'.'
name|'log'
op|'.'
name|'str'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|esmtpAUTHDeclined
dedent|''
name|'def'
name|'esmtpAUTHDeclined'
op|'('
name|'self'
op|','
name|'code'
op|'='
op|'-'
number|'1'
op|','
name|'resp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendError'
op|'('
name|'AUTHDeclinedError'
op|'('
name|'code'
op|','
name|'resp'
op|','
name|'self'
op|'.'
name|'log'
op|'.'
name|'str'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|esmtpAUTHMalformedChallenge
dedent|''
name|'def'
name|'esmtpAUTHMalformedChallenge'
op|'('
name|'self'
op|','
name|'code'
op|'='
op|'-'
number|'1'
op|','
name|'resp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'str'
op|'='
string|'"Login failed because the SMTP Server returned a malformed Authentication Challenge"'
newline|'\n'
name|'self'
op|'.'
name|'sendError'
op|'('
name|'AuthenticationError'
op|'('
number|'501'
op|','
name|'str'
op|','
name|'self'
op|'.'
name|'log'
op|'.'
name|'str'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|esmtpAUTHServerError
dedent|''
name|'def'
name|'esmtpAUTHServerError'
op|'('
name|'self'
op|','
name|'code'
op|'='
op|'-'
number|'1'
op|','
name|'resp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendError'
op|'('
name|'AuthenticationError'
op|'('
name|'code'
op|','
name|'resp'
op|','
name|'self'
op|'.'
name|'log'
op|'.'
name|'str'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|registerAuthenticator
dedent|''
name|'def'
name|'registerAuthenticator'
op|'('
name|'self'
op|','
name|'auth'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Registers an Authenticator with the ESMTPClient. The ESMTPClient\n           will attempt to login to the SMTP Server in the order the\n           Authenticators are registered. The most secure Authentication\n           mechanism should be registered first.\n\n           @param auth: The Authentication mechanism to register\n           @type auth: class implementing C{IClientAuthentication}\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'authenticators'
op|'.'
name|'append'
op|'('
name|'auth'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SMTPClient'
op|'.'
name|'connectionMade'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_okresponse'
op|'='
name|'self'
op|'.'
name|'esmtpState_ehlo'
newline|'\n'
nl|'\n'
DECL|member|esmtpState_ehlo
dedent|''
name|'def'
name|'esmtpState_ehlo'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_expected'
op|'='
name|'SUCCESS'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_okresponse'
op|'='
name|'self'
op|'.'
name|'esmtpState_serverConfig'
newline|'\n'
name|'self'
op|'.'
name|'_failresponse'
op|'='
name|'self'
op|'.'
name|'esmtpEHLORequired'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'heloFallback'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_failresponse'
op|'='
name|'self'
op|'.'
name|'smtpState_helo'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'EHLO '"
op|'+'
name|'self'
op|'.'
name|'identity'
op|')'
newline|'\n'
nl|'\n'
DECL|member|esmtpState_serverConfig
dedent|''
name|'def'
name|'esmtpState_serverConfig'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'items'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'resp'
op|'.'
name|'splitlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'e'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'e'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'items'
op|'['
name|'e'
op|'['
number|'0'
op|']'
op|']'
op|'='
name|'e'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'items'
op|'['
name|'e'
op|'['
number|'0'
op|']'
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'tlsMode'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authenticate'
op|'('
name|'code'
op|','
name|'resp'
op|','
name|'items'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'tryTLS'
op|'('
name|'code'
op|','
name|'resp'
op|','
name|'items'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tryTLS
dedent|''
dedent|''
name|'def'
name|'tryTLS'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|','
name|'items'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'context'
name|'and'
string|"'STARTTLS'"
name|'in'
name|'items'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_expected'
op|'='
op|'['
number|'220'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_okresponse'
op|'='
name|'self'
op|'.'
name|'esmtpState_starttls'
newline|'\n'
name|'self'
op|'.'
name|'_failresponse'
op|'='
name|'self'
op|'.'
name|'esmtpTLSFailed'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'STARTTLS'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'requireTransportSecurity'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'tlsMode'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'esmtpTLSRequired'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'tlsMode'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'authenticate'
op|'('
name|'code'
op|','
name|'resp'
op|','
name|'items'
op|')'
newline|'\n'
nl|'\n'
DECL|member|esmtpState_starttls
dedent|''
dedent|''
name|'def'
name|'esmtpState_starttls'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'startTLS'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tlsMode'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'esmtpTLSFailed'
op|'('
number|'451'
op|')'
newline|'\n'
nl|'\n'
comment|'# Send another EHLO once TLS has been started to'
nl|'\n'
comment|'# get the TLS / AUTH schemes. Some servers only allow AUTH in TLS mode.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'esmtpState_ehlo'
op|'('
name|'code'
op|','
name|'resp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|authenticate
dedent|''
name|'def'
name|'authenticate'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|','
name|'items'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'secret'
name|'and'
name|'items'
op|'.'
name|'get'
op|'('
string|"'AUTH'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'schemes'
op|'='
name|'items'
op|'['
string|"'AUTH'"
op|']'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'tmpSchemes'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'#XXX: May want to come up with a more efficient way to do this'
nl|'\n'
name|'for'
name|'s'
name|'in'
name|'schemes'
op|':'
newline|'\n'
indent|'                '
name|'tmpSchemes'
op|'['
name|'s'
op|'.'
name|'upper'
op|'('
op|')'
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'a'
name|'in'
name|'self'
op|'.'
name|'authenticators'
op|':'
newline|'\n'
indent|'                '
name|'auth'
op|'='
name|'a'
op|'.'
name|'getName'
op|'('
op|')'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'auth'
name|'in'
name|'tmpSchemes'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_authinfo'
op|'='
name|'a'
newline|'\n'
nl|'\n'
comment|'# Special condition handled'
nl|'\n'
name|'if'
name|'auth'
op|'=='
string|'"PLAIN"'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'_okresponse'
op|'='
name|'self'
op|'.'
name|'smtpState_from'
newline|'\n'
name|'self'
op|'.'
name|'_failresponse'
op|'='
name|'self'
op|'.'
name|'_esmtpState_plainAuth'
newline|'\n'
name|'self'
op|'.'
name|'_expected'
op|'='
op|'['
number|'235'
op|']'
newline|'\n'
name|'challenge'
op|'='
name|'encode_base64'
op|'('
name|'self'
op|'.'
name|'_authinfo'
op|'.'
name|'challengeResponse'
op|'('
name|'self'
op|'.'
name|'secret'
op|','
number|'1'
op|')'
op|','
name|'eol'
op|'='
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'AUTH '"
op|'+'
name|'auth'
op|'+'
string|"' '"
op|'+'
name|'challenge'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'_expected'
op|'='
op|'['
number|'334'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_okresponse'
op|'='
name|'self'
op|'.'
name|'esmtpState_challenge'
newline|'\n'
comment|'# If some error occurs here, the server declined the AUTH'
nl|'\n'
comment|'# before the user / password phase. This would be'
nl|'\n'
comment|'# a very rare case'
nl|'\n'
name|'self'
op|'.'
name|'_failresponse'
op|'='
name|'self'
op|'.'
name|'esmtpAUTHServerError'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'AUTH '"
op|'+'
name|'auth'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'requireAuthentication'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'esmtpAUTHRequired'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'smtpState_from'
op|'('
name|'code'
op|','
name|'resp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_esmtpState_plainAuth
dedent|''
dedent|''
name|'def'
name|'_esmtpState_plainAuth'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_okresponse'
op|'='
name|'self'
op|'.'
name|'smtpState_from'
newline|'\n'
name|'self'
op|'.'
name|'_failresponse'
op|'='
name|'self'
op|'.'
name|'esmtpAUTHDeclined'
newline|'\n'
name|'self'
op|'.'
name|'_expected'
op|'='
op|'['
number|'235'
op|']'
newline|'\n'
name|'challenge'
op|'='
name|'encode_base64'
op|'('
name|'self'
op|'.'
name|'_authinfo'
op|'.'
name|'challengeResponse'
op|'('
name|'self'
op|'.'
name|'secret'
op|','
number|'2'
op|')'
op|','
name|'eol'
op|'='
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'AUTH PLAIN '"
op|'+'
name|'challenge'
op|')'
newline|'\n'
nl|'\n'
DECL|member|esmtpState_challenge
dedent|''
name|'def'
name|'esmtpState_challenge'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_authResponse'
op|'('
name|'self'
op|'.'
name|'_authinfo'
op|','
name|'resp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_authResponse
dedent|''
name|'def'
name|'_authResponse'
op|'('
name|'self'
op|','
name|'auth'
op|','
name|'challenge'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_failresponse'
op|'='
name|'self'
op|'.'
name|'esmtpAUTHDeclined'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'challenge'
op|'='
name|'base64'
op|'.'
name|'decodestring'
op|'('
name|'challenge'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'binascii'
op|'.'
name|'Error'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# Illegal challenge, give up, then quit'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'*'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_okresponse'
op|'='
name|'self'
op|'.'
name|'esmtpAUTHMalformedChallenge'
newline|'\n'
name|'self'
op|'.'
name|'_failresponse'
op|'='
name|'self'
op|'.'
name|'esmtpAUTHMalformedChallenge'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'auth'
op|'.'
name|'challengeResponse'
op|'('
name|'self'
op|'.'
name|'secret'
op|','
name|'challenge'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_expected'
op|'='
op|'['
number|'235'
op|','
number|'334'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_okresponse'
op|'='
name|'self'
op|'.'
name|'smtpState_maybeAuthenticated'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'encode_base64'
op|'('
name|'resp'
op|','
name|'eol'
op|'='
string|'""'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|smtpState_maybeAuthenticated
dedent|''
dedent|''
name|'def'
name|'smtpState_maybeAuthenticated'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called to handle the next message from the server after sending a\n        response to a SASL challenge.  The server response might be another\n        challenge or it might indicate authentication has succeeded.\n        """'
newline|'\n'
name|'if'
name|'code'
op|'=='
number|'235'
op|':'
newline|'\n'
comment|'# Yes, authenticated!'
nl|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'_authinfo'
newline|'\n'
name|'self'
op|'.'
name|'smtpState_from'
op|'('
name|'code'
op|','
name|'resp'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# No, not authenticated yet.  Keep trying.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_authResponse'
op|'('
name|'self'
op|'.'
name|'_authinfo'
op|','
name|'resp'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ESMTP
dedent|''
dedent|''
dedent|''
name|'class'
name|'ESMTP'
op|'('
name|'SMTP'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|ctx
indent|'    '
name|'ctx'
op|'='
name|'None'
newline|'\n'
DECL|variable|canStartTLS
name|'canStartTLS'
op|'='
name|'False'
newline|'\n'
DECL|variable|startedTLS
name|'startedTLS'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|variable|authenticated
name|'authenticated'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'chal'
op|'='
name|'None'
op|','
name|'contextFactory'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SMTP'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'if'
name|'chal'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'chal'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'challengers'
op|'='
name|'chal'
newline|'\n'
name|'self'
op|'.'
name|'authenticated'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'ctx'
op|'='
name|'contextFactory'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SMTP'
op|'.'
name|'connectionMade'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'canStartTLS'
op|'='
name|'ITLSTransport'
op|'.'
name|'providedBy'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'canStartTLS'
op|'='
name|'self'
op|'.'
name|'canStartTLS'
name|'and'
op|'('
name|'self'
op|'.'
name|'ctx'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|greeting
dedent|''
name|'def'
name|'greeting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'SMTP'
op|'.'
name|'greeting'
op|'('
name|'self'
op|')'
op|'+'
string|"' ESMTP'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|extensions
dedent|''
name|'def'
name|'extensions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ext'
op|'='
op|'{'
string|"'AUTH'"
op|':'
name|'self'
op|'.'
name|'challengers'
op|'.'
name|'keys'
op|'('
op|')'
op|'}'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'canStartTLS'
name|'and'
name|'not'
name|'self'
op|'.'
name|'startedTLS'
op|':'
newline|'\n'
indent|'            '
name|'ext'
op|'['
string|"'STARTTLS'"
op|']'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'ext'
newline|'\n'
nl|'\n'
DECL|member|lookupMethod
dedent|''
name|'def'
name|'lookupMethod'
op|'('
name|'self'
op|','
name|'command'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'='
name|'SMTP'
op|'.'
name|'lookupMethod'
op|'('
name|'self'
op|','
name|'command'
op|')'
newline|'\n'
name|'if'
name|'m'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'ext_'"
op|'+'
name|'command'
op|'.'
name|'upper'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'m'
newline|'\n'
nl|'\n'
DECL|member|listExtensions
dedent|''
name|'def'
name|'listExtensions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'r'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'c'
op|','
name|'v'
op|')'
name|'in'
name|'self'
op|'.'
name|'extensions'
op|'('
op|')'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'v'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'v'
op|':'
newline|'\n'
comment|'# Intentionally omit extensions with empty argument lists'
nl|'\n'
indent|'                    '
name|'r'
op|'.'
name|'append'
op|'('
string|"'%s %s'"
op|'%'
op|'('
name|'c'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
name|'v'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'r'
op|'.'
name|'append'
op|'('
name|'c'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'r'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_EHLO
dedent|''
name|'def'
name|'do_EHLO'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'peer'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
op|'.'
name|'host'
newline|'\n'
name|'self'
op|'.'
name|'_helo'
op|'='
op|'('
name|'rest'
op|','
name|'peer'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_from'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_to'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sendCode'
op|'('
nl|'\n'
number|'250'
op|','
nl|'\n'
string|"'%s Hello %s, nice to meet you\\n%s'"
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
name|'peer'
op|','
nl|'\n'
name|'self'
op|'.'
name|'listExtensions'
op|'('
op|')'
op|','
nl|'\n'
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ext_STARTTLS
dedent|''
name|'def'
name|'ext_STARTTLS'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'startedTLS'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'503'
op|','
string|"'TLS already negotiated'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'ctx'
name|'and'
name|'self'
op|'.'
name|'canStartTLS'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'220'
op|','
string|"'Begin TLS negotiation now'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'startTLS'
op|'('
name|'self'
op|'.'
name|'ctx'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'startedTLS'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'454'
op|','
string|"'TLS not available'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|ext_AUTH
dedent|''
dedent|''
name|'def'
name|'ext_AUTH'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'authenticated'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'503'
op|','
string|"'Already authenticated'"
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'parts'
op|'='
name|'rest'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'1'
op|')'
newline|'\n'
name|'chal'
op|'='
name|'self'
op|'.'
name|'challengers'
op|'.'
name|'get'
op|'('
name|'parts'
op|'['
number|'0'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|','
name|'lambda'
op|':'
name|'None'
op|')'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'chal'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'504'
op|','
string|"'Unrecognized authentication type'"
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mode'
op|'='
name|'AUTH'
newline|'\n'
name|'self'
op|'.'
name|'challenger'
op|'='
name|'chal'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'chal'
op|'.'
name|'getChallenge'
op|'('
op|')'
comment|'# Discard it, apparently the client does not'
newline|'\n'
comment|'# care about it.'
nl|'\n'
name|'rest'
op|'='
name|'parts'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'rest'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'state_AUTH'
op|'('
name|'rest'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbAuthenticated
dedent|''
name|'def'
name|'_cbAuthenticated'
op|'('
name|'self'
op|','
name|'loginInfo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Save the state resulting from a successful cred login and mark this\n        connection as authenticated.\n        """'
newline|'\n'
name|'result'
op|'='
name|'SMTP'
op|'.'
name|'_cbAnonymousAuthentication'
op|'('
name|'self'
op|','
name|'loginInfo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authenticated'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_ebAuthenticated
dedent|''
name|'def'
name|'_ebAuthenticated'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle cred login errors by translating them to the SMTP authenticate\n        failed.  Translate all other errors into a generic SMTP error code and\n        log the failure for inspection.  Stop all errors from propagating.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'challenge'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'reason'
op|'.'
name|'check'
op|'('
name|'cred'
op|'.'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'535'
op|','
string|"'Authentication failed'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
name|'reason'
op|','
string|'"SMTP authentication failure"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendCode'
op|'('
nl|'\n'
number|'451'
op|','
nl|'\n'
string|"'Requested action aborted: local error in processing'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|state_AUTH
dedent|''
dedent|''
name|'def'
name|'state_AUTH'
op|'('
name|'self'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle one step of challenge/response authentication.\n\n        @param response: The text of a response. If None, this\n        function has been called as a result of an AUTH command with\n        no initial response. A response of \'*\' aborts authentication,\n        as per RFC 2554.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'portal'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'454'
op|','
string|"'Temporary authentication failure'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
name|'COMMAND'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'response'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'challenge'
op|'='
name|'self'
op|'.'
name|'challenger'
op|'.'
name|'getChallenge'
op|'('
op|')'
newline|'\n'
name|'encoded'
op|'='
name|'challenge'
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'334'
op|','
name|'encoded'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'response'
op|'=='
string|"'*'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'501'
op|','
string|"'Authentication aborted'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'challenger'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
name|'COMMAND'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'uncoded'
op|'='
name|'response'
op|'.'
name|'decode'
op|'('
string|"'base64'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'binascii'
op|'.'
name|'Error'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'501'
op|','
string|"'Syntax error in parameters or arguments'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'challenger'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
name|'COMMAND'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'challenger'
op|'.'
name|'setResponse'
op|'('
name|'uncoded'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'challenger'
op|'.'
name|'moreChallenges'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'challenge'
op|'='
name|'self'
op|'.'
name|'challenger'
op|'.'
name|'getChallenge'
op|'('
op|')'
newline|'\n'
name|'coded'
op|'='
name|'challenge'
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'334'
op|','
name|'coded'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mode'
op|'='
name|'COMMAND'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'portal'
op|'.'
name|'login'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'challenger'
op|','
name|'None'
op|','
nl|'\n'
name|'IMessageDeliveryFactory'
op|','
name|'IMessageDelivery'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbAuthenticated'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ign'
op|':'
name|'self'
op|'.'
name|'sendCode'
op|'('
number|'235'
op|','
string|"'Authentication successful.'"
op|')'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebAuthenticated'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SenderMixin
dedent|''
dedent|''
name|'class'
name|'SenderMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""Utility class for sending emails easily.\n\n    Use with SMTPSenderFactory or ESMTPSenderFactory.\n    """'
newline|'\n'
DECL|variable|done
name|'done'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|getMailFrom
name|'def'
name|'getMailFrom'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'done'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'done'
op|'='
number|'1'
newline|'\n'
name|'return'
name|'str'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'fromEmail'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|getMailTo
dedent|''
dedent|''
name|'def'
name|'getMailTo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'toEmail'
newline|'\n'
nl|'\n'
DECL|member|getMailData
dedent|''
name|'def'
name|'getMailData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'file'
newline|'\n'
nl|'\n'
DECL|member|sendError
dedent|''
name|'def'
name|'sendError'
op|'('
name|'self'
op|','
name|'exc'
op|')'
op|':'
newline|'\n'
comment|'# Call the base class to close the connection with the SMTP server'
nl|'\n'
indent|'        '
name|'SMTPClient'
op|'.'
name|'sendError'
op|'('
name|'self'
op|','
name|'exc'
op|')'
newline|'\n'
nl|'\n'
comment|'#  Do not retry to connect to SMTP Server if:'
nl|'\n'
comment|'#   1. No more retries left (This allows the correct error to be returned to the errorback)'
nl|'\n'
comment|'#   2. retry is false'
nl|'\n'
comment|'#   3. The error code is not in the 4xx range (Communication Errors)'
nl|'\n'
nl|'\n'
name|'if'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'retries'
op|'>='
number|'0'
name|'or'
nl|'\n'
op|'('
name|'not'
name|'exc'
op|'.'
name|'retry'
name|'and'
name|'not'
op|'('
name|'exc'
op|'.'
name|'code'
op|'>='
number|'400'
name|'and'
name|'exc'
op|'.'
name|'code'
op|'<'
number|'500'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'sendFinished'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'result'
op|'.'
name|'errback'
op|'('
name|'exc'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sentMail
dedent|''
dedent|''
name|'def'
name|'sentMail'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|','
name|'numOk'
op|','
name|'addresses'
op|','
name|'log'
op|')'
op|':'
newline|'\n'
comment|'# Do not retry, the SMTP server acknowledged the request'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'sendFinished'
op|'='
number|'1'
newline|'\n'
name|'if'
name|'code'
name|'not'
name|'in'
name|'SUCCESS'
op|':'
newline|'\n'
indent|'            '
name|'errlog'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'addr'
op|','
name|'acode'
op|','
name|'aresp'
name|'in'
name|'addresses'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'acode'
name|'not'
name|'in'
name|'SUCCESS'
op|':'
newline|'\n'
indent|'                    '
name|'errlog'
op|'.'
name|'append'
op|'('
string|'"%s: %03d %s"'
op|'%'
op|'('
name|'addr'
op|','
name|'acode'
op|','
name|'aresp'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'errlog'
op|'.'
name|'append'
op|'('
name|'log'
op|'.'
name|'str'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'exc'
op|'='
name|'SMTPDeliveryError'
op|'('
name|'code'
op|','
name|'resp'
op|','
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'errlog'
op|')'
op|','
name|'addresses'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'result'
op|'.'
name|'errback'
op|'('
name|'exc'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'result'
op|'.'
name|'callback'
op|'('
op|'('
name|'numOk'
op|','
name|'addresses'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SMTPSender
dedent|''
dedent|''
dedent|''
name|'class'
name|'SMTPSender'
op|'('
name|'SenderMixin'
op|','
name|'SMTPClient'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    SMTP protocol that sends a single email based on information it \n    gets from its factory, a L{SMTPSenderFactory}.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SMTPSenderFactory
dedent|''
name|'class'
name|'SMTPSenderFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Utility factory for sending emails easily.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|domain
name|'domain'
op|'='
name|'DNSNAME'
newline|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'SMTPSender'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'fromEmail'
op|','
name|'toEmail'
op|','
name|'file'
op|','
name|'deferred'
op|','
name|'retries'
op|'='
number|'5'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param fromEmail: The RFC 2821 address from which to send this\n        message.\n\n        @param toEmail: A sequence of RFC 2821 addresses to which to\n        send this message.\n\n        @param file: A file-like object containing the message to send.\n\n        @param deferred: A Deferred to callback or errback when sending\n        of this message completes.\n\n        @param retries: The number of times to retry delivery of this\n        message.\n\n        @param timeout: Period, in seconds, for which to wait for\n        server responses, or None to wait forever.\n        """'
newline|'\n'
name|'assert'
name|'isinstance'
op|'('
name|'retries'
op|','
op|'('
name|'int'
op|','
name|'long'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'toEmail'
op|','
name|'types'
op|'.'
name|'StringTypes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'toEmail'
op|'='
op|'['
name|'toEmail'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'fromEmail'
op|'='
name|'Address'
op|'('
name|'fromEmail'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nEmails'
op|'='
name|'len'
op|'('
name|'toEmail'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'toEmail'
op|'='
name|'toEmail'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'='
name|'file'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'deferred'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addBoth'
op|'('
name|'self'
op|'.'
name|'_removeDeferred'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendFinished'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'retries'
op|'='
op|'-'
name|'retries'
newline|'\n'
name|'self'
op|'.'
name|'timeout'
op|'='
name|'timeout'
newline|'\n'
nl|'\n'
DECL|member|_removeDeferred
dedent|''
name|'def'
name|'_removeDeferred'
op|'('
name|'self'
op|','
name|'argh'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'self'
op|'.'
name|'result'
newline|'\n'
name|'return'
name|'argh'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
dedent|''
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'err'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_processConnectionError'
op|'('
name|'connector'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionLost
dedent|''
name|'def'
name|'clientConnectionLost'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'err'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_processConnectionError'
op|'('
name|'connector'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_processConnectionError
dedent|''
name|'def'
name|'_processConnectionError'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'err'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'retries'
op|'<'
name|'self'
op|'.'
name|'sendFinished'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"SMTP Client retrying server. Retry: %s"'
op|'%'
op|'-'
name|'self'
op|'.'
name|'retries'
op|')'
newline|'\n'
nl|'\n'
comment|'# Rewind the file in case part of it was read while attempting to'
nl|'\n'
comment|'# send the message.'
nl|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'connector'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'retries'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'sendFinished'
op|'<='
number|'0'
op|':'
newline|'\n'
comment|'# If we were unable to communicate with the SMTP server a ConnectionDone will be'
nl|'\n'
comment|'# returned. We want a more clear error message for debugging'
nl|'\n'
indent|'            '
name|'if'
name|'err'
op|'.'
name|'check'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'err'
op|'.'
name|'value'
op|'='
name|'SMTPConnectError'
op|'('
op|'-'
number|'1'
op|','
string|'"Unable to connect to server."'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'result'
op|'.'
name|'errback'
op|'('
name|'err'
op|'.'
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'('
name|'self'
op|'.'
name|'domain'
op|','
name|'self'
op|'.'
name|'nEmails'
op|'*'
number|'2'
op|'+'
number|'2'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'p'
op|'.'
name|'timeout'
op|'='
name|'self'
op|'.'
name|'timeout'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'mail'
op|'.'
name|'imap4'
name|'import'
name|'IClientAuthentication'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'mail'
op|'.'
name|'imap4'
name|'import'
name|'CramMD5ClientAuthenticator'
op|','
name|'LOGINAuthenticator'
newline|'\n'
nl|'\n'
DECL|class|PLAINAuthenticator
name|'class'
name|'PLAINAuthenticator'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IClientAuthentication'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'user'
op|'='
name|'user'
newline|'\n'
nl|'\n'
DECL|member|getName
dedent|''
name|'def'
name|'getName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"PLAIN"'
newline|'\n'
nl|'\n'
DECL|member|challengeResponse
dedent|''
name|'def'
name|'challengeResponse'
op|'('
name|'self'
op|','
name|'secret'
op|','
name|'chal'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'chal'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'           '
name|'return'
string|'"%s\\0%s\\0%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'user'
op|','
name|'secret'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'           '
name|'return'
string|'"%s\\0%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'user'
op|','
name|'secret'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ESMTPSender
dedent|''
dedent|''
dedent|''
name|'class'
name|'ESMTPSender'
op|'('
name|'SenderMixin'
op|','
name|'ESMTPClient'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|requireAuthentication
indent|'    '
name|'requireAuthentication'
op|'='
name|'True'
newline|'\n'
DECL|variable|requireTransportSecurity
name|'requireTransportSecurity'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'secret'
op|','
name|'contextFactory'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'heloFallback'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'username'
op|'='
name|'username'
newline|'\n'
nl|'\n'
name|'if'
name|'contextFactory'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'contextFactory'
op|'='
name|'self'
op|'.'
name|'_getContextFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ESMTPClient'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'secret'
op|','
name|'contextFactory'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_registerAuthenticators'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_registerAuthenticators
dedent|''
name|'def'
name|'_registerAuthenticators'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Register Authenticator in order from most secure to least secure'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'registerAuthenticator'
op|'('
name|'CramMD5ClientAuthenticator'
op|'('
name|'self'
op|'.'
name|'username'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'registerAuthenticator'
op|'('
name|'LOGINAuthenticator'
op|'('
name|'self'
op|'.'
name|'username'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'registerAuthenticator'
op|'('
name|'PLAINAuthenticator'
op|'('
name|'self'
op|'.'
name|'username'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_getContextFactory
dedent|''
name|'def'
name|'_getContextFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'context'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'context'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'ssl'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'context'
op|'='
name|'ssl'
op|'.'
name|'ClientContextFactory'
op|'('
op|')'
newline|'\n'
name|'context'
op|'.'
name|'method'
op|'='
name|'ssl'
op|'.'
name|'SSL'
op|'.'
name|'TLSv1_METHOD'
newline|'\n'
name|'return'
name|'context'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ESMTPSenderFactory
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'ESMTPSenderFactory'
op|'('
name|'SMTPSenderFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Utility factory for sending emails easily.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'ESMTPSender'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'password'
op|','
name|'fromEmail'
op|','
name|'toEmail'
op|','
name|'file'
op|','
nl|'\n'
name|'deferred'
op|','
name|'retries'
op|'='
number|'5'
op|','
name|'timeout'
op|'='
name|'None'
op|','
nl|'\n'
name|'contextFactory'
op|'='
name|'None'
op|','
name|'heloFallback'
op|'='
name|'False'
op|','
nl|'\n'
name|'requireAuthentication'
op|'='
name|'True'
op|','
nl|'\n'
name|'requireTransportSecurity'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'SMTPSenderFactory'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'fromEmail'
op|','
name|'toEmail'
op|','
name|'file'
op|','
name|'deferred'
op|','
name|'retries'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'username'
op|'='
name|'username'
newline|'\n'
name|'self'
op|'.'
name|'password'
op|'='
name|'password'
newline|'\n'
name|'self'
op|'.'
name|'_contextFactory'
op|'='
name|'contextFactory'
newline|'\n'
name|'self'
op|'.'
name|'_heloFallback'
op|'='
name|'heloFallback'
newline|'\n'
name|'self'
op|'.'
name|'_requireAuthentication'
op|'='
name|'requireAuthentication'
newline|'\n'
name|'self'
op|'.'
name|'_requireTransportSecurity'
op|'='
name|'requireTransportSecurity'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'('
name|'self'
op|'.'
name|'username'
op|','
name|'self'
op|'.'
name|'password'
op|','
name|'self'
op|'.'
name|'_contextFactory'
op|','
name|'self'
op|'.'
name|'domain'
op|','
name|'self'
op|'.'
name|'nEmails'
op|'*'
number|'2'
op|'+'
number|'2'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'heloFallback'
op|'='
name|'self'
op|'.'
name|'_heloFallback'
newline|'\n'
name|'p'
op|'.'
name|'requireAuthentication'
op|'='
name|'self'
op|'.'
name|'_requireAuthentication'
newline|'\n'
name|'p'
op|'.'
name|'requireTransportSecurity'
op|'='
name|'self'
op|'.'
name|'_requireTransportSecurity'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'p'
op|'.'
name|'timeout'
op|'='
name|'self'
op|'.'
name|'timeout'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
DECL|function|sendmail
dedent|''
dedent|''
name|'def'
name|'sendmail'
op|'('
name|'smtphost'
op|','
name|'from_addr'
op|','
name|'to_addrs'
op|','
name|'msg'
op|','
name|'senderDomainName'
op|'='
name|'None'
op|','
name|'port'
op|'='
number|'25'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Send an email\n\n    This interface is intended to be a direct replacement for\n    smtplib.SMTP.sendmail() (with the obvious change that\n    you specify the smtphost as well). Also, ESMTP options\n    are not accepted, as we don\'t do ESMTP yet. I reserve the\n    right to implement the ESMTP options differently.\n\n    @param smtphost: The host the message should be sent to\n    @param from_addr: The (envelope) address sending this mail.\n    @param to_addrs: A list of addresses to send this mail to.  A string will\n        be treated as a list of one address\n    @param msg: The message, including headers, either as a file or a string.\n        File-like objects need to support read() and close(). Lines must be\n        delimited by \'\\\\n\'. If you pass something that doesn\'t look like a\n        file, we try to convert it to a string (so you should be able to\n        pass an email.Message directly, but doing the conversion with\n        email.Generator manually will give you more control over the\n        process).\n\n    @param senderDomainName: Name by which to identify.  If None, try\n    to pick something sane (but this depends on external configuration\n    and may not succeed).\n\n    @param port: Remote port to which to connect.\n\n    @rtype: L{Deferred}\n    @returns: A L{Deferred}, its callback will be called if a message is sent\n        to ANY address, the errback if no message is sent.\n\n        The callback will be called with a tuple (numOk, addresses) where numOk\n        is the number of successful recipient addresses and addresses is a list\n        of tuples (address, code, resp) giving the response to the RCPT command\n        for each address.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'msg'
op|','
string|"'read'"
op|')'
op|':'
newline|'\n'
comment|"# It's not a file"
nl|'\n'
indent|'        '
name|'msg'
op|'='
name|'StringIO'
op|'('
name|'str'
op|'('
name|'msg'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'='
name|'SMTPSenderFactory'
op|'('
name|'from_addr'
op|','
name|'to_addrs'
op|','
name|'msg'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'senderDomainName'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'factory'
op|'.'
name|'domain'
op|'='
name|'senderDomainName'
newline|'\n'
nl|'\n'
dedent|''
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
name|'smtphost'
op|','
name|'port'
op|','
name|'factory'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|sendEmail
dedent|''
name|'def'
name|'sendEmail'
op|'('
name|'smtphost'
op|','
name|'fromEmail'
op|','
name|'toEmail'
op|','
name|'content'
op|','
name|'headers'
op|'='
name|'None'
op|','
name|'attachments'
op|'='
name|'None'
op|','
name|'multipartbody'
op|'='
string|'"mixed"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Send an email, optionally with attachments.\n\n    @type smtphost: str\n    @param smtphost: hostname of SMTP server to which to connect\n\n    @type fromEmail: str\n    @param fromEmail: email address to indicate this email is from\n\n    @type toEmail: str\n    @param toEmail: email address to which to send this email\n\n    @type content: str\n    @param content: The body if this email.\n\n    @type headers: dict\n    @param headers: Dictionary of headers to include in the email\n\n    @type attachments: list of 3-tuples\n    @param attachments: Each 3-tuple should consist of the name of the\n      attachment, the mime-type of the attachment, and a string that is\n      the attachment itself.\n\n    @type multipartbody: str\n    @param multipartbody: The type of MIME multi-part body.  Generally\n      either "mixed" (as in text and images) or "alternative" (html email\n      with a fallback to text/plain).\n\n    @rtype: Deferred\n    @return: The returned Deferred has its callback or errback invoked when\n      the mail is successfully sent or when an error occurs, respectively.\n    """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"smtp.sendEmail may go away in the future.\\n"'
nl|'\n'
string|'"  Consider revising your code to use the email module\\n"'
nl|'\n'
string|'"  and smtp.sendmail."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'tempfile'
op|'.'
name|'TemporaryFile'
op|'('
op|')'
newline|'\n'
name|'writer'
op|'='
name|'MimeWriter'
op|'.'
name|'MimeWriter'
op|'('
name|'f'
op|')'
newline|'\n'
nl|'\n'
name|'writer'
op|'.'
name|'addheader'
op|'('
string|'"Mime-Version"'
op|','
string|'"1.0"'
op|')'
newline|'\n'
name|'if'
name|'headers'
op|':'
newline|'\n'
comment|'# Setup the mail headers'
nl|'\n'
indent|'        '
name|'for'
op|'('
name|'header'
op|','
name|'value'
op|')'
name|'in'
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'writer'
op|'.'
name|'addheader'
op|'('
name|'header'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'headkeys'
op|'='
op|'['
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
name|'for'
name|'k'
name|'in'
name|'headers'
op|'.'
name|'keys'
op|'('
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'headkeys'
op|'='
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Add required headers if not present'
nl|'\n'
dedent|''
name|'if'
string|'"message-id"'
name|'not'
name|'in'
name|'headkeys'
op|':'
newline|'\n'
indent|'        '
name|'writer'
op|'.'
name|'addheader'
op|'('
string|'"Message-ID"'
op|','
name|'messageid'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
string|'"date"'
name|'not'
name|'in'
name|'headkeys'
op|':'
newline|'\n'
indent|'        '
name|'writer'
op|'.'
name|'addheader'
op|'('
string|'"Date"'
op|','
name|'rfc822date'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
string|'"from"'
name|'not'
name|'in'
name|'headkeys'
name|'and'
string|'"sender"'
name|'not'
name|'in'
name|'headkeys'
op|':'
newline|'\n'
indent|'        '
name|'writer'
op|'.'
name|'addheader'
op|'('
string|'"From"'
op|','
name|'fromEmail'
op|')'
newline|'\n'
dedent|''
name|'if'
string|'"to"'
name|'not'
name|'in'
name|'headkeys'
name|'and'
string|'"cc"'
name|'not'
name|'in'
name|'headkeys'
name|'and'
string|'"bcc"'
name|'not'
name|'in'
name|'headkeys'
op|':'
newline|'\n'
indent|'        '
name|'writer'
op|'.'
name|'addheader'
op|'('
string|'"To"'
op|','
name|'toEmail'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'writer'
op|'.'
name|'startmultipartbody'
op|'('
name|'multipartbody'
op|')'
newline|'\n'
nl|'\n'
comment|'# message body'
nl|'\n'
name|'part'
op|'='
name|'writer'
op|'.'
name|'nextpart'
op|'('
op|')'
newline|'\n'
name|'body'
op|'='
name|'part'
op|'.'
name|'startbody'
op|'('
string|'"text/plain"'
op|')'
newline|'\n'
name|'body'
op|'.'
name|'write'
op|'('
name|'content'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'attachments'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|'# add attachments'
nl|'\n'
indent|'        '
name|'for'
op|'('
name|'file'
op|','
name|'mime'
op|','
name|'attachment'
op|')'
name|'in'
name|'attachments'
op|':'
newline|'\n'
indent|'            '
name|'part'
op|'='
name|'writer'
op|'.'
name|'nextpart'
op|'('
op|')'
newline|'\n'
name|'if'
name|'mime'
op|'.'
name|'startswith'
op|'('
string|"'text'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'encoding'
op|'='
string|'"7bit"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'attachment'
op|'='
name|'base64'
op|'.'
name|'encodestring'
op|'('
name|'attachment'
op|')'
newline|'\n'
name|'encoding'
op|'='
string|'"base64"'
newline|'\n'
dedent|''
name|'part'
op|'.'
name|'addheader'
op|'('
string|'"Content-Transfer-Encoding"'
op|','
name|'encoding'
op|')'
newline|'\n'
name|'body'
op|'='
name|'part'
op|'.'
name|'startbody'
op|'('
string|'"%s; name=%s"'
op|'%'
op|'('
name|'mime'
op|','
name|'file'
op|')'
op|')'
newline|'\n'
name|'body'
op|'.'
name|'write'
op|'('
name|'attachment'
op|')'
newline|'\n'
nl|'\n'
comment|'# finish'
nl|'\n'
dedent|''
dedent|''
name|'writer'
op|'.'
name|'lastpart'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# send message'
nl|'\n'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'='
name|'SMTPSenderFactory'
op|'('
name|'fromEmail'
op|','
name|'toEmail'
op|','
name|'f'
op|','
name|'d'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
name|'smtphost'
op|','
number|'25'
op|','
name|'factory'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
comment|'##'
nl|'\n'
comment|'## Yerg.  Codecs!'
nl|'\n'
comment|'##'
nl|'\n'
dedent|''
name|'import'
name|'codecs'
newline|'\n'
DECL|function|xtext_encode
name|'def'
name|'xtext_encode'
op|'('
name|'s'
op|','
name|'errors'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'r'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'ch'
name|'in'
name|'s'
op|':'
newline|'\n'
indent|'        '
name|'o'
op|'='
name|'ord'
op|'('
name|'ch'
op|')'
newline|'\n'
name|'if'
name|'ch'
op|'=='
string|"'+'"
name|'or'
name|'ch'
op|'=='
string|"'='"
name|'or'
name|'o'
op|'<'
number|'33'
name|'or'
name|'o'
op|'>'
number|'126'
op|':'
newline|'\n'
indent|'            '
name|'r'
op|'.'
name|'append'
op|'('
string|"'+%02X'"
op|'%'
name|'o'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'r'
op|'.'
name|'append'
op|'('
name|'chr'
op|'('
name|'o'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'r'
op|')'
op|','
name|'len'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_slowXTextDecode
dedent|''
name|'def'
name|'_slowXTextDecode'
op|'('
name|'s'
op|','
name|'errors'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Decode the xtext-encoded string C{s}.\n    """'
newline|'\n'
name|'r'
op|'='
op|'['
op|']'
newline|'\n'
name|'i'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'i'
op|'<'
name|'len'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'s'
op|'['
name|'i'
op|']'
op|'=='
string|"'+'"
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'r'
op|'.'
name|'append'
op|'('
name|'chr'
op|'('
name|'int'
op|'('
name|'s'
op|'['
name|'i'
op|'+'
number|'1'
op|':'
name|'i'
op|'+'
number|'3'
op|']'
op|','
number|'16'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'r'
op|'.'
name|'append'
op|'('
name|'s'
op|'['
name|'i'
op|':'
name|'i'
op|'+'
number|'3'
op|']'
op|')'
newline|'\n'
dedent|''
name|'i'
op|'+='
number|'3'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'r'
op|'.'
name|'append'
op|'('
name|'s'
op|'['
name|'i'
op|']'
op|')'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'r'
op|')'
op|','
name|'len'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'protocols'
op|'.'
name|'_c_urlarg'
name|'import'
name|'unquote'
name|'as'
name|'_helper_unquote'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|xtext_decode
indent|'    '
name|'xtext_decode'
op|'='
name|'_slowXTextDecode'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|function|xtext_decode
indent|'    '
name|'def'
name|'xtext_decode'
op|'('
name|'s'
op|','
name|'errors'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Decode the xtext-encoded string C{s} using a fast extension function.\n        """'
newline|'\n'
name|'return'
op|'('
name|'_helper_unquote'
op|'('
name|'s'
op|','
string|"'+'"
op|')'
op|','
name|'len'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|xtextStreamReader
dedent|''
dedent|''
name|'class'
name|'xtextStreamReader'
op|'('
name|'codecs'
op|'.'
name|'StreamReader'
op|')'
op|':'
newline|'\n'
DECL|member|decode
indent|'    '
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'s'
op|','
name|'errors'
op|'='
string|"'strict'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'xtext_decode'
op|'('
name|'s'
op|')'
newline|'\n'
nl|'\n'
DECL|class|xtextStreamWriter
dedent|''
dedent|''
name|'class'
name|'xtextStreamWriter'
op|'('
name|'codecs'
op|'.'
name|'StreamWriter'
op|')'
op|':'
newline|'\n'
DECL|member|decode
indent|'    '
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'s'
op|','
name|'errors'
op|'='
string|"'strict'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'xtext_encode'
op|'('
name|'s'
op|')'
newline|'\n'
nl|'\n'
DECL|function|xtext_codec
dedent|''
dedent|''
name|'def'
name|'xtext_codec'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'name'
op|'=='
string|"'xtext'"
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'xtext_encode'
op|','
name|'xtext_decode'
op|','
name|'xtextStreamReader'
op|','
name|'xtextStreamWriter'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'codecs'
op|'.'
name|'register'
op|'('
name|'xtext_codec'
op|')'
newline|'\n'
endmarker|''
end_unit

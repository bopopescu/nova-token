begin_unit
comment|'# -*- test-case-name: twisted.mail.test.test_mail -*-'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nSupport for aliases(5) configuration files\n\n@author: Jp Calderone\n\nTODO::\n    Monitor files for reparsing\n    Handle non-local alias targets\n    Handle maildir alias targets\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'mail'
name|'import'
name|'smtp'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'Interface'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|handle
name|'def'
name|'handle'
op|'('
name|'result'
op|','
name|'line'
op|','
name|'filename'
op|','
name|'lineNo'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'parts'
op|'='
op|'['
name|'p'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'p'
name|'in'
name|'line'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'!='
number|'2'
op|':'
newline|'\n'
indent|'        '
name|'fmt'
op|'='
string|'"Invalid format on line %d of alias file %s."'
newline|'\n'
name|'arg'
op|'='
op|'('
name|'lineNo'
op|','
name|'filename'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'fmt'
op|'%'
name|'arg'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'user'
op|','
name|'alias'
op|'='
name|'parts'
newline|'\n'
name|'result'
op|'.'
name|'setdefault'
op|'('
name|'user'
op|'.'
name|'strip'
op|'('
op|')'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'extend'
op|'('
name|'map'
op|'('
name|'str'
op|'.'
name|'strip'
op|','
name|'alias'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|loadAliasFile
dedent|''
dedent|''
name|'def'
name|'loadAliasFile'
op|'('
name|'domains'
op|','
name|'filename'
op|'='
name|'None'
op|','
name|'fp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Load a file containing email aliases.\n\n    Lines in the file should be formatted like so::\n\n        username: alias1,alias2,...,aliasN\n\n    Aliases beginning with a | will be treated as programs, will be run, and\n    the message will be written to their stdin.\n\n    Aliases without a host part will be assumed to be addresses on localhost.\n\n    If a username is specified multiple times, the aliases for each are joined\n    together as if they had all been on one line.\n\n    @type domains: C{dict} of implementor of C{IDomain}\n    @param domains: The domains to which these aliases will belong.\n\n    @type filename: C{str}\n    @param filename: The filename from which to load aliases.\n\n    @type fp: Any file-like object.\n    @param fp: If specified, overrides C{filename}, and aliases are read from\n    it.\n\n    @rtype: C{dict}\n    @return: A dictionary mapping usernames to C{AliasGroup} objects.\n    """'
newline|'\n'
name|'result'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'fp'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'fp'
op|'='
name|'file'
op|'('
name|'filename'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'filename'
op|'='
name|'getattr'
op|'('
name|'fp'
op|','
string|"'name'"
op|','
string|"'<unknown>'"
op|')'
newline|'\n'
dedent|''
name|'i'
op|'='
number|'0'
newline|'\n'
name|'prev'
op|'='
string|"''"
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'fp'
op|':'
newline|'\n'
indent|'        '
name|'i'
op|'+='
number|'1'
newline|'\n'
name|'line'
op|'='
name|'line'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'line'
op|'.'
name|'lstrip'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
string|"'#'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'elif'
name|'line'
op|'.'
name|'startswith'
op|'('
string|"' '"
op|')'
name|'or'
name|'line'
op|'.'
name|'startswith'
op|'('
string|"'\\t'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'prev'
op|'='
name|'prev'
op|'+'
name|'line'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'prev'
op|':'
newline|'\n'
indent|'                '
name|'handle'
op|'('
name|'result'
op|','
name|'prev'
op|','
name|'filename'
op|','
name|'i'
op|')'
newline|'\n'
dedent|''
name|'prev'
op|'='
name|'line'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'prev'
op|':'
newline|'\n'
indent|'        '
name|'handle'
op|'('
name|'result'
op|','
name|'prev'
op|','
name|'filename'
op|','
name|'i'
op|')'
newline|'\n'
dedent|''
name|'for'
op|'('
name|'u'
op|','
name|'a'
op|')'
name|'in'
name|'result'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'addr'
op|'='
name|'smtp'
op|'.'
name|'Address'
op|'('
name|'u'
op|')'
newline|'\n'
name|'result'
op|'['
name|'u'
op|']'
op|'='
name|'AliasGroup'
op|'('
name|'a'
op|','
name|'domains'
op|','
name|'u'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|class|IAlias
dedent|''
name|'class'
name|'IAlias'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
DECL|member|createMessageReceiver
indent|'    '
name|'def'
name|'createMessageReceiver'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|AliasBase
dedent|''
dedent|''
name|'class'
name|'AliasBase'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'domains'
op|','
name|'original'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'domains'
op|'='
name|'domains'
newline|'\n'
name|'self'
op|'.'
name|'original'
op|'='
name|'smtp'
op|'.'
name|'Address'
op|'('
name|'original'
op|')'
newline|'\n'
nl|'\n'
DECL|member|domain
dedent|''
name|'def'
name|'domain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'domains'
op|'['
name|'self'
op|'.'
name|'original'
op|'.'
name|'domain'
op|']'
newline|'\n'
nl|'\n'
DECL|member|resolve
dedent|''
name|'def'
name|'resolve'
op|'('
name|'self'
op|','
name|'aliasmap'
op|','
name|'memo'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'memo'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'memo'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'str'
op|'('
name|'self'
op|')'
name|'in'
name|'memo'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'memo'
op|'['
name|'str'
op|'('
name|'self'
op|')'
op|']'
op|'='
name|'None'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'createMessageReceiver'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|AddressAlias
dedent|''
dedent|''
name|'class'
name|'AddressAlias'
op|'('
name|'AliasBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The simplest alias, translating one email address into another."""'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IAlias'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'alias'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'AliasBase'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'alias'
op|'='
name|'smtp'
op|'.'
name|'Address'
op|'('
name|'alias'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<Address %s>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'alias'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|createMessageReceiver
dedent|''
name|'def'
name|'createMessageReceiver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'domain'
op|'('
op|')'
op|'.'
name|'startMessage'
op|'('
name|'str'
op|'('
name|'self'
op|'.'
name|'alias'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resolve
dedent|''
name|'def'
name|'resolve'
op|'('
name|'self'
op|','
name|'aliasmap'
op|','
name|'memo'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'memo'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'memo'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'str'
op|'('
name|'self'
op|')'
name|'in'
name|'memo'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'memo'
op|'['
name|'str'
op|'('
name|'self'
op|')'
op|']'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'domain'
op|'('
op|')'
op|'.'
name|'exists'
op|'('
name|'smtp'
op|'.'
name|'User'
op|'('
name|'self'
op|'.'
name|'alias'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
name|'memo'
op|')'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'smtp'
op|'.'
name|'SMTPBadRcpt'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'alias'
op|'.'
name|'local'
name|'in'
name|'aliasmap'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'aliasmap'
op|'['
name|'self'
op|'.'
name|'alias'
op|'.'
name|'local'
op|']'
op|'.'
name|'resolve'
op|'('
name|'aliasmap'
op|','
name|'memo'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|class|FileWrapper
dedent|''
dedent|''
name|'class'
name|'FileWrapper'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'smtp'
op|'.'
name|'IMessage'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fp'
op|'='
name|'tempfile'
op|'.'
name|'TemporaryFile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'finalname'
op|'='
name|'filename'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fp'
op|'.'
name|'write'
op|'('
name|'line'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|eomReceived
dedent|''
name|'def'
name|'eomReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fp'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'file'
op|'('
name|'self'
op|'.'
name|'finalname'
op|','
string|"'a'"
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'f'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'fp'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'self'
op|'.'
name|'finalname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fp'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<FileWrapper %s>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'finalname'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FileAlias
dedent|''
dedent|''
name|'class'
name|'FileAlias'
op|'('
name|'AliasBase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'implements'
op|'('
name|'IAlias'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'filename'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'AliasBase'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'filename'
op|'='
name|'filename'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<File %s>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'filename'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|createMessageReceiver
dedent|''
name|'def'
name|'createMessageReceiver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'FileWrapper'
op|'('
name|'self'
op|'.'
name|'filename'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProcessAliasTimeout
dedent|''
dedent|''
name|'class'
name|'ProcessAliasTimeout'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A timeout occurred while processing aliases.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MessageWrapper
dedent|''
name|'class'
name|'MessageWrapper'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A message receiver which delivers content to a child process.\n\n    @type completionTimeout: C{int} or C{float}\n    @ivar completionTimeout: The number of seconds to wait for the child\n        process to exit before reporting the delivery as a failure.\n\n    @type _timeoutCallID: C{NoneType} or L{IDelayedCall}\n    @ivar _timeoutCallID: The call used to time out delivery, started when the\n        connection to the child process is closed.\n\n    @type done: C{bool}\n    @ivar done: Flag indicating whether the child process has exited or not.\n\n    @ivar reactor: An L{IReactorTime} provider which will be used to schedule\n        timeouts.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'smtp'
op|'.'
name|'IMessage'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|done
name|'done'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|variable|completionTimeout
name|'completionTimeout'
op|'='
number|'60'
newline|'\n'
DECL|variable|_timeoutCallID
name|'_timeoutCallID'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|reactor
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'protocol'
op|','
name|'process'
op|'='
name|'None'
op|','
name|'reactor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'processName'
op|'='
name|'process'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'protocol'
newline|'\n'
name|'self'
op|'.'
name|'completion'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'onEnd'
op|'='
name|'self'
op|'.'
name|'completion'
newline|'\n'
name|'self'
op|'.'
name|'completion'
op|'.'
name|'addBoth'
op|'('
name|'self'
op|'.'
name|'_processEnded'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'reactor'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_processEnded
dedent|''
dedent|''
name|'def'
name|'_processEnded'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record process termination and cancel the timeout call if it is active.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'done'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_timeoutCallID'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|"# eomReceived was called, we're actually waiting for the process to"
nl|'\n'
comment|'# exit.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_timeoutCallID'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_timeoutCallID'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# eomReceived was not called, this is unexpected, propagate the'
nl|'\n'
comment|'# error.'
nl|'\n'
indent|'            '
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'done'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'line'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|eomReceived
dedent|''
name|'def'
name|'eomReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Disconnect from the child process, set up a timeout to wait for it to\n        exit, and return a Deferred which will be called back when the child\n        process exits.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'done'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_timeoutCallID'
op|'='
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'callLater'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'completionTimeout'
op|','
name|'self'
op|'.'
name|'_completionCancel'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'completion'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_completionCancel
dedent|''
name|'def'
name|'_completionCancel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle the expiration of the timeout for the child process to exit by\n        terminating the child process forcefully and issuing a failure to the\n        completion deferred returned by L{eomReceived}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_timeoutCallID'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'signalProcess'
op|'('
string|"'KILL'"
op|')'
newline|'\n'
name|'exc'
op|'='
name|'ProcessAliasTimeout'
op|'('
nl|'\n'
string|'"No answer after %s seconds"'
op|'%'
op|'('
name|'self'
op|'.'
name|'completionTimeout'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'onEnd'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'completion'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'exc'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Heh heh'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<ProcessWrapper %s>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'processName'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProcessAliasProtocol
dedent|''
dedent|''
name|'class'
name|'ProcessAliasProtocol'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Trivial process protocol which will callback a Deferred when the associated\n    process ends.\n\n    @ivar onEnd: If not C{None}, a L{Deferred} which will be called back with\n        the failure passed to C{processEnded}, when C{processEnded} is called.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|onEnd
name|'onEnd'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|processEnded
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call back C{onEnd} if it is set.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'onEnd'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'onEnd'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProcessAlias
dedent|''
dedent|''
dedent|''
name|'class'
name|'ProcessAlias'
op|'('
name|'AliasBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An alias which is handled by the execution of a particular program.\n\n    @ivar reactor: An L{IReactorProcess} and L{IReactorTime} provider which\n        will be used to create and timeout the alias child process.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IAlias'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|reactor
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'path'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'AliasBase'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'program'
op|'='
name|'self'
op|'.'
name|'path'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build a string representation containing the path.\n        """'
newline|'\n'
name|'return'
string|"'<Process %s>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'path'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|spawnProcess
dedent|''
name|'def'
name|'spawnProcess'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'program'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Wrapper around C{reactor.spawnProcess}, to be customized for tests\n        purpose.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'proto'
op|','
name|'program'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|createMessageReceiver
dedent|''
name|'def'
name|'createMessageReceiver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a message receiver by launching a process.\n        """'
newline|'\n'
name|'p'
op|'='
name|'ProcessAliasProtocol'
op|'('
op|')'
newline|'\n'
name|'m'
op|'='
name|'MessageWrapper'
op|'('
name|'p'
op|','
name|'self'
op|'.'
name|'program'
op|','
name|'self'
op|'.'
name|'reactor'
op|')'
newline|'\n'
name|'fd'
op|'='
name|'self'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'self'
op|'.'
name|'program'
op|','
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'return'
name|'m'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MultiWrapper
dedent|''
dedent|''
name|'class'
name|'MultiWrapper'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wrapper to deliver a single message to multiple recipients.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'smtp'
op|'.'
name|'IMessage'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'objs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'objs'
op|'='
name|'objs'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'o'
name|'in'
name|'self'
op|'.'
name|'objs'
op|':'
newline|'\n'
indent|'            '
name|'o'
op|'.'
name|'lineReceived'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|eomReceived
dedent|''
dedent|''
name|'def'
name|'eomReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
nl|'\n'
name|'o'
op|'.'
name|'eomReceived'
op|'('
op|')'
name|'for'
name|'o'
name|'in'
name|'self'
op|'.'
name|'objs'
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'o'
name|'in'
name|'self'
op|'.'
name|'objs'
op|':'
newline|'\n'
indent|'            '
name|'o'
op|'.'
name|'connectionLost'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<GroupWrapper %r>'"
op|'%'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'self'
op|'.'
name|'objs'
op|')'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AliasGroup
dedent|''
dedent|''
name|'class'
name|'AliasGroup'
op|'('
name|'AliasBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An alias which points to more than one recipient.\n\n    @ivar processAliasFactory: a factory for resolving process aliases.\n    @type processAliasFactory: C{class}\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IAlias'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|processAliasFactory
name|'processAliasFactory'
op|'='
name|'ProcessAlias'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'items'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'AliasBase'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'aliases'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'items'
op|':'
newline|'\n'
indent|'            '
name|'addr'
op|'='
name|'items'
op|'.'
name|'pop'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'addr'
op|'.'
name|'startswith'
op|'('
string|"':'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'f'
op|'='
name|'file'
op|'('
name|'addr'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                    '
name|'log'
op|'.'
name|'err'
op|'('
string|'"Invalid filename in alias file %r"'
op|'%'
op|'('
name|'addr'
op|'['
number|'1'
op|':'
op|']'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'addr'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
op|'['
name|'l'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'l'
name|'in'
name|'f'
op|']'
op|')'
newline|'\n'
name|'items'
op|'.'
name|'extend'
op|'('
name|'addr'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'addr'
op|'.'
name|'startswith'
op|'('
string|"'|'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'aliases'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'processAliasFactory'
op|'('
name|'addr'
op|'['
number|'1'
op|':'
op|']'
op|','
op|'*'
name|'args'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'addr'
op|'.'
name|'startswith'
op|'('
string|"'/'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'log'
op|'.'
name|'err'
op|'('
string|'"Directory delivery not supported"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'aliases'
op|'.'
name|'append'
op|'('
name|'FileAlias'
op|'('
name|'addr'
op|','
op|'*'
name|'args'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'aliases'
op|'.'
name|'append'
op|'('
name|'AddressAlias'
op|'('
name|'addr'
op|','
op|'*'
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
dedent|''
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'aliases'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<AliasGroup [%s]>'"
op|'%'
op|'('
string|"', '"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'self'
op|'.'
name|'aliases'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|createMessageReceiver
dedent|''
name|'def'
name|'createMessageReceiver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'MultiWrapper'
op|'('
op|'['
name|'a'
op|'.'
name|'createMessageReceiver'
op|'('
op|')'
name|'for'
name|'a'
name|'in'
name|'self'
op|'.'
name|'aliases'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resolve
dedent|''
name|'def'
name|'resolve'
op|'('
name|'self'
op|','
name|'aliasmap'
op|','
name|'memo'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'memo'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'memo'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'r'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'a'
name|'in'
name|'self'
op|'.'
name|'aliases'
op|':'
newline|'\n'
indent|'            '
name|'r'
op|'.'
name|'append'
op|'('
name|'a'
op|'.'
name|'resolve'
op|'('
name|'aliasmap'
op|','
name|'memo'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'MultiWrapper'
op|'('
name|'filter'
op|'('
name|'None'
op|','
name|'r'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

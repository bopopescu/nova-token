begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for large portions of L{twisted.mail}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'pickle'
newline|'\n'
name|'import'
name|'StringIO'
newline|'\n'
name|'import'
name|'rfc822'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'signal'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'Interface'
op|','
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'mail'
name|'import'
name|'smtp'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'mail'
name|'import'
name|'pop3'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
name|'import'
name|'dns'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'interfaces'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'task'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'DNSLookupError'
op|','
name|'CannotListenError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'ProcessDone'
op|','
name|'ProcessTerminated'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'address'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
name|'import'
name|'mail'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'mail'
op|'.'
name|'mail'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'mail'
op|'.'
name|'maildir'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'mail'
op|'.'
name|'relay'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'mail'
op|'.'
name|'relaymanager'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'mail'
op|'.'
name|'protocols'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'mail'
op|'.'
name|'alias'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'error'
name|'import'
name|'DNSNameError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
op|'.'
name|'dns'
name|'import'
name|'RRHeader'
op|','
name|'Record_CNAME'
op|','
name|'Record_MX'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
name|'import'
name|'cred'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'checkers'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'portal'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'LineSendingProtocol'
newline|'\n'
nl|'\n'
DECL|class|DomainWithDefaultsTestCase
name|'class'
name|'DomainWithDefaultsTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testMethods
indent|'    '
name|'def'
name|'testMethods'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'dict'
op|'('
op|'['
op|'('
name|'x'
op|','
name|'x'
op|'+'
number|'10'
op|')'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
number|'10'
op|')'
op|']'
op|')'
newline|'\n'
name|'d'
op|'='
name|'mail'
op|'.'
name|'mail'
op|'.'
name|'DomainWithDefaultDict'
op|'('
name|'d'
op|','
string|"'Default'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'d'
op|')'
op|','
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'list'
op|'('
name|'iter'
op|'('
name|'d'
op|')'
op|')'
op|','
name|'range'
op|'('
number|'10'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'list'
op|'('
name|'d'
op|'.'
name|'iterkeys'
op|'('
op|')'
op|')'
op|','
name|'list'
op|'('
name|'iter'
op|'('
name|'d'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'items'
op|'='
name|'list'
op|'('
name|'d'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
name|'items'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'items'
op|','
op|'['
op|'('
name|'x'
op|','
name|'x'
op|'+'
number|'10'
op|')'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
number|'10'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'values'
op|'='
name|'list'
op|'('
name|'d'
op|'.'
name|'itervalues'
op|'('
op|')'
op|')'
newline|'\n'
name|'values'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'values'
op|','
name|'range'
op|'('
number|'10'
op|','
number|'20'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'items'
op|'='
name|'d'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
name|'items'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'items'
op|','
op|'['
op|'('
name|'x'
op|','
name|'x'
op|'+'
number|'10'
op|')'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
number|'10'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'values'
op|'='
name|'d'
op|'.'
name|'values'
op|'('
op|')'
newline|'\n'
name|'values'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'values'
op|','
name|'range'
op|'('
number|'10'
op|','
number|'20'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
number|'10'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'d'
op|'['
name|'x'
op|']'
op|','
name|'x'
op|'+'
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'d'
op|'.'
name|'get'
op|'('
name|'x'
op|')'
op|','
name|'x'
op|'+'
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'x'
name|'in'
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'d'
op|'.'
name|'has_key'
op|'('
name|'x'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'del'
name|'d'
op|'['
number|'2'
op|']'
op|','
name|'d'
op|'['
number|'4'
op|']'
op|','
name|'d'
op|'['
number|'6'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'d'
op|')'
op|','
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'d'
op|'['
number|'2'
op|']'
op|','
string|"'Default'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'d'
op|'['
number|'4'
op|']'
op|','
string|"'Default'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'d'
op|'['
number|'6'
op|']'
op|','
string|"'Default'"
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'update'
op|'('
op|'{'
string|"'a'"
op|':'
name|'None'
op|','
string|"'b'"
op|':'
op|'('
op|')'
op|','
string|"'c'"
op|':'
string|"'*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'d'
op|')'
op|','
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'d'
op|'['
string|"'a'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'d'
op|'['
string|"'b'"
op|']'
op|','
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'d'
op|'['
string|"'c'"
op|']'
op|','
string|"'*'"
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'d'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'d'
op|'.'
name|'setdefault'
op|'('
string|"'key'"
op|','
string|"'value'"
op|')'
op|','
string|"'value'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'d'
op|'['
string|"'key'"
op|']'
op|','
string|"'value'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'d'
op|'.'
name|'popitem'
op|'('
op|')'
op|','
op|'('
string|"'key'"
op|','
string|"'value'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'d'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'dcopy'
op|'='
name|'d'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'d'
op|'.'
name|'domains'
op|','
name|'dcopy'
op|'.'
name|'domains'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'d'
op|'.'
name|'default'
op|','
name|'dcopy'
op|'.'
name|'default'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_stringificationTest
dedent|''
name|'def'
name|'_stringificationTest'
op|'('
name|'self'
op|','
name|'stringifier'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that the class name of a L{mail.mail.DomainWithDefaultDict}\n        instance and the string-formatted underlying domain dictionary both\n        appear in the string produced by the given string-returning function.\n\n        @type stringifier: one-argument callable\n        @param stringifier: either C{str} or C{repr}, to be used to get a\n            string to make assertions against.\n        """'
newline|'\n'
name|'domain'
op|'='
name|'mail'
op|'.'
name|'mail'
op|'.'
name|'DomainWithDefaultDict'
op|'('
op|'{'
op|'}'
op|','
string|"'Default'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'domain'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
name|'stringifier'
op|'('
name|'domain'
op|')'
op|')'
newline|'\n'
name|'domain'
op|'['
string|"'key'"
op|']'
op|'='
string|"'value'"
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'str'
op|'('
op|'{'
string|"'key'"
op|':'
string|"'value'"
op|'}'
op|')'
op|','
name|'stringifier'
op|'('
name|'domain'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_str
dedent|''
name|'def'
name|'test_str'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DomainWithDefaultDict.__str__} should return a string including\n        the class name and the domain mapping held by the instance.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_stringificationTest'
op|'('
name|'str'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_repr
dedent|''
name|'def'
name|'test_repr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DomainWithDefaultDict.__repr__} should return a string including\n        the class name and the domain mapping held by the instance.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_stringificationTest'
op|'('
name|'repr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BounceTestCase
dedent|''
dedent|''
name|'class'
name|'BounceTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'domain'
op|'='
name|'mail'
op|'.'
name|'mail'
op|'.'
name|'BounceDomain'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testExists
dedent|''
name|'def'
name|'testExists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'smtp'
op|'.'
name|'AddressError'
op|','
name|'self'
op|'.'
name|'domain'
op|'.'
name|'exists'
op|','
string|'"any user"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRelay
dedent|''
name|'def'
name|'testRelay'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'domain'
op|'.'
name|'willRelay'
op|'('
string|'"random q emailer"'
op|','
string|'"protocol"'
op|')'
op|','
nl|'\n'
name|'False'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMessage
dedent|''
name|'def'
name|'testMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
name|'self'
op|'.'
name|'domain'
op|'.'
name|'startMessage'
op|','
string|'"whomever"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAddUser
dedent|''
name|'def'
name|'testAddUser'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'domain'
op|'.'
name|'addUser'
op|'('
string|'"bob"'
op|','
string|'"password"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'smtp'
op|'.'
name|'SMTPBadRcpt'
op|','
name|'self'
op|'.'
name|'domain'
op|'.'
name|'exists'
op|','
string|'"bob"'
op|')'
newline|'\n'
nl|'\n'
DECL|class|FileMessageTestCase
dedent|''
dedent|''
name|'class'
name|'FileMessageTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
string|'"fileMessage.testFile"'
newline|'\n'
name|'self'
op|'.'
name|'final'
op|'='
string|'"final.fileMessage.testFile"'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'='
name|'file'
op|'('
name|'self'
op|'.'
name|'name'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fp'
op|'='
name|'mail'
op|'.'
name|'mail'
op|'.'
name|'FileMessage'
op|'('
name|'self'
op|'.'
name|'f'
op|','
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'final'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'remove'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'remove'
op|'('
name|'self'
op|'.'
name|'final'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|testFinalName
dedent|''
dedent|''
name|'def'
name|'testFinalName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'fp'
op|'.'
name|'eomReceived'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbFinalName'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbFinalName
dedent|''
name|'def'
name|'_cbFinalName'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
name|'self'
op|'.'
name|'final'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'f'
op|'.'
name|'closed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testContents
dedent|''
name|'def'
name|'testContents'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'contents'
op|'='
string|'"first line\\nsecond line\\nthird line\\n"'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'contents'
op|'.'
name|'splitlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fp'
op|'.'
name|'lineReceived'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'fp'
op|'.'
name|'eomReceived'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'file'
op|'('
name|'self'
op|'.'
name|'final'
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|','
name|'contents'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInterrupted
dedent|''
name|'def'
name|'testInterrupted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'contents'
op|'='
string|'"first line\\nsecond line\\n"'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'contents'
op|'.'
name|'splitlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fp'
op|'.'
name|'lineReceived'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'fp'
op|'.'
name|'connectionLost'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'final'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|MailServiceTestCase
dedent|''
dedent|''
name|'class'
name|'MailServiceTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'service'
op|'='
name|'mail'
op|'.'
name|'mail'
op|'.'
name|'MailService'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFactories
dedent|''
name|'def'
name|'testFactories'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'self'
op|'.'
name|'service'
op|'.'
name|'getPOP3Factory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'f'
op|','
name|'protocol'
op|'.'
name|'ServerFactory'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'f'
op|'.'
name|'buildProtocol'
op|'('
op|'('
string|"'127.0.0.1'"
op|','
number|'12345'
op|')'
op|')'
op|','
name|'pop3'
op|'.'
name|'POP3'
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'self'
op|'.'
name|'service'
op|'.'
name|'getSMTPFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'f'
op|','
name|'protocol'
op|'.'
name|'ServerFactory'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'f'
op|'.'
name|'buildProtocol'
op|'('
op|'('
string|"'127.0.0.1'"
op|','
number|'12345'
op|')'
op|')'
op|','
name|'smtp'
op|'.'
name|'SMTP'
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'self'
op|'.'
name|'service'
op|'.'
name|'getESMTPFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'f'
op|','
name|'protocol'
op|'.'
name|'ServerFactory'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'f'
op|'.'
name|'buildProtocol'
op|'('
op|'('
string|"'127.0.0.1'"
op|','
number|'12345'
op|')'
op|')'
op|','
name|'smtp'
op|'.'
name|'ESMTP'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPortals
dedent|''
name|'def'
name|'testPortals'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'o1'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'o2'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'service'
op|'.'
name|'portals'
op|'['
string|"'domain'"
op|']'
op|'='
name|'o1'
newline|'\n'
name|'self'
op|'.'
name|'service'
op|'.'
name|'portals'
op|'['
string|"''"
op|']'
op|'='
name|'o2'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'service'
op|'.'
name|'lookupPortal'
op|'('
string|"'domain'"
op|')'
name|'is'
name|'o1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'service'
op|'.'
name|'defaultPortal'
op|'('
op|')'
name|'is'
name|'o2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StringListMailboxTests
dedent|''
dedent|''
name|'class'
name|'StringListMailboxTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{StringListMailbox}, an in-memory only implementation of\n    L{pop3.IMailbox}.\n    """'
newline|'\n'
DECL|member|test_listOneMessage
name|'def'
name|'test_listOneMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringListMailbox.listMessages} returns the length of the message at\n        the offset into the mailbox passed to it.\n        """'
newline|'\n'
name|'mailbox'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'StringListMailbox'
op|'('
op|'['
string|'"abc"'
op|','
string|'"ab"'
op|','
string|'"a"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mailbox'
op|'.'
name|'listMessages'
op|'('
number|'0'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mailbox'
op|'.'
name|'listMessages'
op|'('
number|'1'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mailbox'
op|'.'
name|'listMessages'
op|'('
number|'2'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_listAllMessages
dedent|''
name|'def'
name|'test_listAllMessages'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringListMailbox.listMessages} returns a list of the lengths of all\n        messages if not passed an index.\n        """'
newline|'\n'
name|'mailbox'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'StringListMailbox'
op|'('
op|'['
string|'"a"'
op|','
string|'"abc"'
op|','
string|'"ab"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mailbox'
op|'.'
name|'listMessages'
op|'('
op|')'
op|','
op|'['
number|'1'
op|','
number|'3'
op|','
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getMessage
dedent|''
name|'def'
name|'test_getMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringListMailbox.getMessage} returns a file-like object from which\n        the contents of the message at the given offset into the mailbox can be\n        read.\n        """'
newline|'\n'
name|'mailbox'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'StringListMailbox'
op|'('
op|'['
string|'"foo"'
op|','
string|'"real contents"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mailbox'
op|'.'
name|'getMessage'
op|'('
number|'1'
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|'"real contents"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getUidl
dedent|''
name|'def'
name|'test_getUidl'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringListMailbox.getUidl} returns a unique identifier for the\n        message at the given offset into the mailbox.\n        """'
newline|'\n'
name|'mailbox'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'StringListMailbox'
op|'('
op|'['
string|'"foo"'
op|','
string|'"bar"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'mailbox'
op|'.'
name|'getUidl'
op|'('
number|'0'
op|')'
op|','
name|'mailbox'
op|'.'
name|'getUidl'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_deleteMessage
dedent|''
name|'def'
name|'test_deleteMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringListMailbox.deleteMessage} marks a message for deletion causing\n        further requests for its length to return 0.\n        """'
newline|'\n'
name|'mailbox'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'StringListMailbox'
op|'('
op|'['
string|'"foo"'
op|']'
op|')'
newline|'\n'
name|'mailbox'
op|'.'
name|'deleteMessage'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mailbox'
op|'.'
name|'listMessages'
op|'('
number|'0'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mailbox'
op|'.'
name|'listMessages'
op|'('
op|')'
op|','
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_undeleteMessages
dedent|''
name|'def'
name|'test_undeleteMessages'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringListMailbox.undeleteMessages} causes any messages marked for\n        deletion to be returned to their original state.\n        """'
newline|'\n'
name|'mailbox'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'StringListMailbox'
op|'('
op|'['
string|'"foo"'
op|']'
op|')'
newline|'\n'
name|'mailbox'
op|'.'
name|'deleteMessage'
op|'('
number|'0'
op|')'
newline|'\n'
name|'mailbox'
op|'.'
name|'undeleteMessages'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mailbox'
op|'.'
name|'listMessages'
op|'('
number|'0'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mailbox'
op|'.'
name|'listMessages'
op|'('
op|')'
op|','
op|'['
number|'3'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sync
dedent|''
name|'def'
name|'test_sync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringListMailbox.sync} causes any messages as marked for deletion to\n        be permanently deleted.\n        """'
newline|'\n'
name|'mailbox'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'StringListMailbox'
op|'('
op|'['
string|'"foo"'
op|']'
op|')'
newline|'\n'
name|'mailbox'
op|'.'
name|'deleteMessage'
op|'('
number|'0'
op|')'
newline|'\n'
name|'mailbox'
op|'.'
name|'sync'
op|'('
op|')'
newline|'\n'
name|'mailbox'
op|'.'
name|'undeleteMessages'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mailbox'
op|'.'
name|'listMessages'
op|'('
number|'0'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mailbox'
op|'.'
name|'listMessages'
op|'('
op|')'
op|','
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FailingMaildirMailboxAppendMessageTask
dedent|''
dedent|''
name|'class'
name|'FailingMaildirMailboxAppendMessageTask'
op|'('
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'_MaildirMailboxAppendMessageTask'
op|')'
op|':'
newline|'\n'
DECL|variable|_openstate
indent|'    '
name|'_openstate'
op|'='
name|'True'
newline|'\n'
DECL|variable|_writestate
name|'_writestate'
op|'='
name|'True'
newline|'\n'
DECL|variable|_renamestate
name|'_renamestate'
op|'='
name|'True'
newline|'\n'
DECL|member|osopen
name|'def'
name|'osopen'
op|'('
name|'self'
op|','
name|'fn'
op|','
name|'attr'
op|','
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_openstate'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'os'
op|'.'
name|'open'
op|'('
name|'fn'
op|','
name|'attr'
op|','
name|'mode'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'EPERM'
op|','
string|'"Faked Permission Problem"'
op|')'
newline|'\n'
DECL|member|oswrite
dedent|''
dedent|''
name|'def'
name|'oswrite'
op|'('
name|'self'
op|','
name|'fh'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_writestate'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'os'
op|'.'
name|'write'
op|'('
name|'fh'
op|','
name|'data'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'ENOSPC'
op|','
string|'"Faked Space problem"'
op|')'
newline|'\n'
DECL|member|osrename
dedent|''
dedent|''
name|'def'
name|'osrename'
op|'('
name|'self'
op|','
name|'oldname'
op|','
name|'newname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_renamestate'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'os'
op|'.'
name|'rename'
op|'('
name|'oldname'
op|','
name|'newname'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'EPERM'
op|','
string|'"Faked Permission Problem"'
op|')'
newline|'\n'
nl|'\n'
DECL|class|MaildirAppendStringTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'MaildirAppendStringTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'d'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'initializeMaildir'
op|'('
name|'self'
op|'.'
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_append
dedent|''
name|'def'
name|'_append'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'mbox'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'mbox'
op|'.'
name|'appendMessage'
op|'('
string|"'TEST'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'Exception'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setState
dedent|''
name|'def'
name|'_setState'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'mbox'
op|','
name|'rename'
op|'='
name|'None'
op|','
name|'write'
op|'='
name|'None'
op|','
name|'open'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'rename'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'mbox'
op|'.'
name|'AppendFactory'
op|'.'
name|'_renameState'
op|'='
name|'rename'
newline|'\n'
dedent|''
name|'if'
name|'write'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'mbox'
op|'.'
name|'AppendFactory'
op|'.'
name|'_writeState'
op|'='
name|'write'
newline|'\n'
dedent|''
name|'if'
name|'open'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'mbox'
op|'.'
name|'AppendFactory'
op|'.'
name|'_openstate'
op|'='
name|'open'
newline|'\n'
nl|'\n'
DECL|member|testAppend
dedent|''
dedent|''
name|'def'
name|'testAppend'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mbox'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'MaildirMailbox'
op|'('
name|'self'
op|'.'
name|'d'
op|')'
newline|'\n'
name|'mbox'
op|'.'
name|'AppendFactory'
op|'='
name|'FailingMaildirMailboxAppendMessageTask'
newline|'\n'
name|'ds'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'1'
op|','
number|'11'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ds'
op|'.'
name|'append'
op|'('
name|'mbox'
op|'.'
name|'appendMessage'
op|'('
string|'"X"'
op|'*'
name|'i'
op|')'
op|')'
newline|'\n'
name|'ds'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
name|'ds'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestAppend'
op|','
name|'mbox'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_cbTestAppend
dedent|''
name|'def'
name|'_cbTestAppend'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'mbox'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'mbox'
op|'.'
name|'listMessages'
op|'('
op|')'
op|')'
op|','
nl|'\n'
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'mbox'
op|'.'
name|'getMessage'
op|'('
number|'5'
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|')'
op|','
number|'6'
op|')'
newline|'\n'
comment|'# test in the right order: last to first error location.'
nl|'\n'
name|'mbox'
op|'.'
name|'AppendFactory'
op|'.'
name|'_renamestate'
op|'='
name|'False'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_append'
op|'('
name|'None'
op|','
name|'mbox'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_setState'
op|','
name|'mbox'
op|','
name|'rename'
op|'='
name|'True'
op|','
name|'write'
op|'='
name|'False'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_append'
op|','
name|'mbox'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_setState'
op|','
name|'mbox'
op|','
name|'write'
op|'='
name|'True'
op|','
name|'open'
op|'='
name|'False'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_append'
op|','
name|'mbox'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_setState'
op|','
name|'mbox'
op|','
name|'open'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MaildirAppendFileTestCase
dedent|''
dedent|''
name|'class'
name|'MaildirAppendFileTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'d'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'initializeMaildir'
op|'('
name|'self'
op|'.'
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAppend
dedent|''
name|'def'
name|'testAppend'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mbox'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'MaildirMailbox'
op|'('
name|'self'
op|'.'
name|'d'
op|')'
newline|'\n'
name|'ds'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'res'
op|','
name|'t'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'t'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'1'
op|','
number|'11'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'temp'
op|'='
name|'tempfile'
op|'.'
name|'TemporaryFile'
op|'('
op|')'
newline|'\n'
name|'temp'
op|'.'
name|'write'
op|'('
string|'"X"'
op|'*'
name|'i'
op|')'
newline|'\n'
name|'temp'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'ds'
op|'.'
name|'append'
op|'('
name|'mbox'
op|'.'
name|'appendMessage'
op|'('
name|'temp'
op|')'
op|')'
newline|'\n'
name|'ds'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|','
name|'temp'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
name|'ds'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestAppend'
op|','
name|'mbox'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestAppend
dedent|''
name|'def'
name|'_cbTestAppend'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'mbox'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'mbox'
op|'.'
name|'listMessages'
op|'('
op|')'
op|')'
op|','
nl|'\n'
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'mbox'
op|'.'
name|'getMessage'
op|'('
number|'5'
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|')'
op|','
number|'6'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MaildirTestCase
dedent|''
dedent|''
name|'class'
name|'MaildirTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'d'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'initializeMaildir'
op|'('
name|'self'
op|'.'
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInitializer
dedent|''
name|'def'
name|'testInitializer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'d'
newline|'\n'
name|'trash'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'d'
op|','
string|"'.Trash'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'d'
op|')'
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'d'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'d'
op|','
string|"'new'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'d'
op|','
string|"'cur'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'d'
op|','
string|"'tmp'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'d'
op|','
string|"'new'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'d'
op|','
string|"'cur'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'d'
op|','
string|"'tmp'"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'trash'
op|','
string|"'new'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'trash'
op|','
string|"'cur'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'trash'
op|','
string|"'tmp'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'trash'
op|','
string|"'new'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'trash'
op|','
string|"'cur'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'trash'
op|','
string|"'tmp'"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nameGenerator
dedent|''
name|'def'
name|'test_nameGenerator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Each call to L{_MaildirNameGenerator.generate} returns a unique\n        string suitable for use as the basename of a new message file.  The\n        names are ordered such that those generated earlier sort less than\n        those generated later.\n        """'
newline|'\n'
name|'clock'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'0.05'
op|')'
newline|'\n'
name|'generator'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'_MaildirNameGenerator'
op|'('
name|'clock'
op|')'
newline|'\n'
nl|'\n'
name|'firstName'
op|'='
name|'generator'
op|'.'
name|'generate'
op|'('
op|')'
newline|'\n'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'0.05'
op|')'
newline|'\n'
name|'secondName'
op|'='
name|'generator'
op|'.'
name|'generate'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'firstName'
op|'<'
name|'secondName'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mailbox
dedent|''
name|'def'
name|'test_mailbox'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Exercise the methods of L{IMailbox} as implemented by\n        L{MaildirMailbox}.\n        """'
newline|'\n'
name|'j'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
newline|'\n'
name|'n'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'_generateMaildirName'
newline|'\n'
name|'msgs'
op|'='
op|'['
name|'j'
op|'('
name|'b'
op|','
name|'n'
op|'('
op|')'
op|')'
name|'for'
name|'b'
name|'in'
op|'('
string|"'cur'"
op|','
string|"'new'"
op|')'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
number|'5'
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'# Toss a few files into the mailbox'
nl|'\n'
name|'i'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'msgs'
op|':'
newline|'\n'
indent|'            '
name|'fObj'
op|'='
name|'file'
op|'('
name|'j'
op|'('
name|'self'
op|'.'
name|'d'
op|','
name|'f'
op|')'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'fObj'
op|'.'
name|'write'
op|'('
string|"'x'"
op|'*'
name|'i'
op|')'
newline|'\n'
name|'fObj'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'i'
op|'='
name|'i'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'mb'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'MaildirMailbox'
op|'('
name|'self'
op|'.'
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mb'
op|'.'
name|'listMessages'
op|'('
op|')'
op|','
name|'range'
op|'('
number|'1'
op|','
number|'11'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mb'
op|'.'
name|'listMessages'
op|'('
number|'1'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mb'
op|'.'
name|'listMessages'
op|'('
number|'5'
op|')'
op|','
number|'6'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mb'
op|'.'
name|'getMessage'
op|'('
number|'6'
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|"'x'"
op|'*'
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mb'
op|'.'
name|'getMessage'
op|'('
number|'1'
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|"'x'"
op|'*'
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'10'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'u'
op|'='
name|'mb'
op|'.'
name|'getUidl'
op|'('
name|'i'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'u'
name|'in'
name|'d'
op|')'
newline|'\n'
name|'d'
op|'['
name|'u'
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'p'
op|','
name|'f'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'msgs'
op|'['
number|'5'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'mb'
op|'.'
name|'deleteMessage'
op|'('
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mb'
op|'.'
name|'listMessages'
op|'('
number|'5'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'j'
op|'('
name|'self'
op|'.'
name|'d'
op|','
string|"'.Trash'"
op|','
string|"'cur'"
op|','
name|'f'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'j'
op|'('
name|'self'
op|'.'
name|'d'
op|','
name|'msgs'
op|'['
number|'5'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'mb'
op|'.'
name|'undeleteMessages'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mb'
op|'.'
name|'listMessages'
op|'('
number|'5'
op|')'
op|','
number|'6'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'j'
op|'('
name|'self'
op|'.'
name|'d'
op|','
string|"'.Trash'"
op|','
string|"'cur'"
op|','
name|'f'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'j'
op|'('
name|'self'
op|'.'
name|'d'
op|','
name|'msgs'
op|'['
number|'5'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|MaildirDirdbmDomainTestCase
dedent|''
dedent|''
name|'class'
name|'MaildirDirdbmDomainTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'P'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'S'
op|'='
name|'mail'
op|'.'
name|'mail'
op|'.'
name|'MailService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'D'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'MaildirDirdbmDomain'
op|'('
name|'self'
op|'.'
name|'S'
op|','
name|'self'
op|'.'
name|'P'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'P'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAddUser
dedent|''
name|'def'
name|'testAddUser'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'toAdd'
op|'='
op|'('
op|'('
string|"'user1'"
op|','
string|"'pwd1'"
op|')'
op|','
op|'('
string|"'user2'"
op|','
string|"'pwd2'"
op|')'
op|','
op|'('
string|"'user3'"
op|','
string|"'pwd3'"
op|')'
op|')'
newline|'\n'
name|'for'
op|'('
name|'u'
op|','
name|'p'
op|')'
name|'in'
name|'toAdd'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'D'
op|'.'
name|'addUser'
op|'('
name|'u'
op|','
name|'p'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
op|'('
name|'u'
op|','
name|'p'
op|')'
name|'in'
name|'toAdd'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'u'
name|'in'
name|'self'
op|'.'
name|'D'
op|'.'
name|'dbm'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'D'
op|'.'
name|'dbm'
op|'['
name|'u'
op|']'
op|','
name|'p'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'P'
op|','
name|'u'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCredentials
dedent|''
dedent|''
name|'def'
name|'testCredentials'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'creds'
op|'='
name|'self'
op|'.'
name|'D'
op|'.'
name|'getCredentialsCheckers'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'creds'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'cred'
op|'.'
name|'checkers'
op|'.'
name|'ICredentialsChecker'
op|'.'
name|'providedBy'
op|'('
name|'creds'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'IUsernamePassword'
name|'in'
name|'creds'
op|'['
number|'0'
op|']'
op|'.'
name|'credentialInterfaces'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRequestAvatar
dedent|''
name|'def'
name|'testRequestAvatar'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|ISomething
indent|'        '
name|'class'
name|'ISomething'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'D'
op|'.'
name|'addUser'
op|'('
string|"'user'"
op|','
string|"'password'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'NotImplementedError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'D'
op|'.'
name|'requestAvatar'
op|','
string|"'user'"
op|','
name|'None'
op|','
name|'ISomething'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'t'
op|'='
name|'self'
op|'.'
name|'D'
op|'.'
name|'requestAvatar'
op|'('
string|"'user'"
op|','
name|'None'
op|','
name|'pop3'
op|'.'
name|'IMailbox'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'t'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'t'
op|'['
number|'0'
op|']'
name|'is'
name|'pop3'
op|'.'
name|'IMailbox'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'pop3'
op|'.'
name|'IMailbox'
op|'.'
name|'providedBy'
op|'('
name|'t'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'t'
op|'['
number|'2'
op|']'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRequestAvatarId
dedent|''
name|'def'
name|'testRequestAvatarId'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'D'
op|'.'
name|'addUser'
op|'('
string|"'user'"
op|','
string|"'password'"
op|')'
newline|'\n'
name|'database'
op|'='
name|'self'
op|'.'
name|'D'
op|'.'
name|'getCredentialsCheckers'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'creds'
op|'='
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'user'"
op|','
string|"'wrong password'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'cred'
op|'.'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|','
nl|'\n'
name|'database'
op|'.'
name|'requestAvatarId'
op|','
name|'creds'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'creds'
op|'='
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'user'"
op|','
string|"'password'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'database'
op|'.'
name|'requestAvatarId'
op|'('
name|'creds'
op|')'
op|','
string|"'user'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StubAliasableDomain
dedent|''
dedent|''
name|'class'
name|'StubAliasableDomain'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Minimal testable implementation of IAliasableDomain.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'mail'
op|'.'
name|'mail'
op|'.'
name|'IAliasableDomain'
op|')'
newline|'\n'
nl|'\n'
DECL|member|exists
name|'def'
name|'exists'
op|'('
name|'self'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        No test coverage for invocations of this method on domain objects,\n        so we just won\'t implement it.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addUser
dedent|''
name|'def'
name|'addUser'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        No test coverage for invocations of this method on domain objects,\n        so we just won\'t implement it.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getCredentialsCheckers
dedent|''
name|'def'
name|'getCredentialsCheckers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This needs to succeed in order for other tests to complete\n        successfully, but we don\'t actually assert anything about its\n        behavior.  Return an empty list.  Sometime later we should return\n        something else and assert that a portal got set up properly.\n        """'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setAliasGroup
dedent|''
name|'def'
name|'setAliasGroup'
op|'('
name|'self'
op|','
name|'aliases'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Just record the value so the test can check it later.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'aliasGroup'
op|'='
name|'aliases'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServiceDomainTestCase
dedent|''
dedent|''
name|'class'
name|'ServiceDomainTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'S'
op|'='
name|'mail'
op|'.'
name|'mail'
op|'.'
name|'MailService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'D'
op|'='
name|'mail'
op|'.'
name|'protocols'
op|'.'
name|'DomainDeliveryBase'
op|'('
name|'self'
op|'.'
name|'S'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'D'
op|'.'
name|'service'
op|'='
name|'self'
op|'.'
name|'S'
newline|'\n'
name|'self'
op|'.'
name|'D'
op|'.'
name|'protocolName'
op|'='
string|"'TEST'"
newline|'\n'
name|'self'
op|'.'
name|'D'
op|'.'
name|'host'
op|'='
string|"'hostname'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'tmpdir'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'domain'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'MaildirDirdbmDomain'
op|'('
name|'self'
op|'.'
name|'S'
op|','
name|'self'
op|'.'
name|'tmpdir'
op|')'
newline|'\n'
name|'domain'
op|'.'
name|'addUser'
op|'('
string|"'user'"
op|','
string|"'password'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'S'
op|'.'
name|'addDomain'
op|'('
string|"'test.domain'"
op|','
name|'domain'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testAddAliasableDomain
dedent|''
name|'def'
name|'testAddAliasableDomain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that adding an IAliasableDomain to a mail service properly sets\n        up alias group references and such.\n        """'
newline|'\n'
name|'aliases'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'domain'
op|'='
name|'StubAliasableDomain'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'S'
op|'.'
name|'aliases'
op|'='
name|'aliases'
newline|'\n'
name|'self'
op|'.'
name|'S'
op|'.'
name|'addDomain'
op|'('
string|"'example.com'"
op|','
name|'domain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'domain'
op|'.'
name|'aliasGroup'
op|','
name|'aliases'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testReceivedHeader
dedent|''
name|'def'
name|'testReceivedHeader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'         '
name|'hdr'
op|'='
name|'self'
op|'.'
name|'D'
op|'.'
name|'receivedHeader'
op|'('
nl|'\n'
op|'('
string|"'remotehost'"
op|','
string|"'123.232.101.234'"
op|')'
op|','
nl|'\n'
name|'smtp'
op|'.'
name|'Address'
op|'('
string|"'<someguy@somplace>'"
op|')'
op|','
nl|'\n'
op|'['
string|"'user@host.name'"
op|']'
nl|'\n'
op|')'
newline|'\n'
name|'fp'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
name|'hdr'
op|')'
newline|'\n'
name|'m'
op|'='
name|'rfc822'
op|'.'
name|'Message'
op|'('
name|'fp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'m'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'m'
op|'.'
name|'has_key'
op|'('
string|"'Received'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testValidateTo
dedent|''
name|'def'
name|'testValidateTo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user'
op|'='
name|'smtp'
op|'.'
name|'User'
op|'('
string|"'user@test.domain'"
op|','
string|"'helo'"
op|','
name|'None'
op|','
string|"'wherever@whatever'"
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'D'
op|'.'
name|'validateTo'
op|','
name|'user'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbValidateTo'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbValidateTo
dedent|''
name|'def'
name|'_cbValidateTo'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'callable'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testValidateToBadUsername
dedent|''
name|'def'
name|'testValidateToBadUsername'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user'
op|'='
name|'smtp'
op|'.'
name|'User'
op|'('
string|"'resu@test.domain'"
op|','
string|"'helo'"
op|','
name|'None'
op|','
string|"'wherever@whatever'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
nl|'\n'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'D'
op|'.'
name|'validateTo'
op|','
name|'user'
op|')'
op|','
nl|'\n'
name|'smtp'
op|'.'
name|'SMTPBadRcpt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testValidateToBadDomain
dedent|''
name|'def'
name|'testValidateToBadDomain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user'
op|'='
name|'smtp'
op|'.'
name|'User'
op|'('
string|"'user@domain.test'"
op|','
string|"'helo'"
op|','
name|'None'
op|','
string|"'wherever@whatever'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
nl|'\n'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'D'
op|'.'
name|'validateTo'
op|','
name|'user'
op|')'
op|','
nl|'\n'
name|'smtp'
op|'.'
name|'SMTPBadRcpt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testValidateFrom
dedent|''
name|'def'
name|'testValidateFrom'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'helo'
op|'='
op|'('
string|"'hostname'"
op|','
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'origin'
op|'='
name|'smtp'
op|'.'
name|'Address'
op|'('
string|"'<user@hostname>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'D'
op|'.'
name|'validateFrom'
op|'('
name|'helo'
op|','
name|'origin'
op|')'
name|'is'
name|'origin'
op|')'
newline|'\n'
nl|'\n'
name|'helo'
op|'='
op|'('
string|"'hostname'"
op|','
string|"'1.2.3.4'"
op|')'
newline|'\n'
name|'origin'
op|'='
name|'smtp'
op|'.'
name|'Address'
op|'('
string|"'<user@hostname>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'D'
op|'.'
name|'validateFrom'
op|'('
name|'helo'
op|','
name|'origin'
op|')'
name|'is'
name|'origin'
op|')'
newline|'\n'
nl|'\n'
name|'helo'
op|'='
op|'('
string|"'hostname'"
op|','
string|"'1.2.3.4'"
op|')'
newline|'\n'
name|'origin'
op|'='
name|'smtp'
op|'.'
name|'Address'
op|'('
string|"'<>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'D'
op|'.'
name|'validateFrom'
op|'('
name|'helo'
op|','
name|'origin'
op|')'
name|'is'
name|'origin'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'smtp'
op|'.'
name|'SMTPBadSender'
op|','
nl|'\n'
name|'self'
op|'.'
name|'D'
op|'.'
name|'validateFrom'
op|','
name|'None'
op|','
name|'origin'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|class|VirtualPOP3TestCase
dedent|''
dedent|''
name|'class'
name|'VirtualPOP3TestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'tmpdir'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'S'
op|'='
name|'mail'
op|'.'
name|'mail'
op|'.'
name|'MailService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'D'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'MaildirDirdbmDomain'
op|'('
name|'self'
op|'.'
name|'S'
op|','
name|'self'
op|'.'
name|'tmpdir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'D'
op|'.'
name|'addUser'
op|'('
string|"'user'"
op|','
string|"'password'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'S'
op|'.'
name|'addDomain'
op|'('
string|"'test.domain'"
op|','
name|'self'
op|'.'
name|'D'
op|')'
newline|'\n'
nl|'\n'
name|'portal'
op|'='
name|'cred'
op|'.'
name|'portal'
op|'.'
name|'Portal'
op|'('
name|'self'
op|'.'
name|'D'
op|')'
newline|'\n'
name|'map'
op|'('
name|'portal'
op|'.'
name|'registerChecker'
op|','
name|'self'
op|'.'
name|'D'
op|'.'
name|'getCredentialsCheckers'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'S'
op|'.'
name|'portals'
op|'['
string|"''"
op|']'
op|'='
name|'self'
op|'.'
name|'S'
op|'.'
name|'portals'
op|'['
string|"'test.domain'"
op|']'
op|'='
name|'portal'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'P'
op|'='
name|'mail'
op|'.'
name|'protocols'
op|'.'
name|'VirtualPOP3'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'P'
op|'.'
name|'service'
op|'='
name|'self'
op|'.'
name|'S'
newline|'\n'
name|'self'
op|'.'
name|'P'
op|'.'
name|'magic'
op|'='
string|"'<unit test magic>'"
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAuthenticateAPOP
dedent|''
name|'def'
name|'testAuthenticateAPOP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resp'
op|'='
name|'md5'
op|'('
name|'self'
op|'.'
name|'P'
op|'.'
name|'magic'
op|'+'
string|"'password'"
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'P'
op|'.'
name|'authenticateUserAPOP'
op|'('
string|"'user'"
op|','
name|'resp'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbAuthenticateAPOP'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbAuthenticateAPOP
dedent|''
name|'def'
name|'_cbAuthenticateAPOP'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'result'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'['
number|'0'
op|']'
op|','
name|'pop3'
op|'.'
name|'IMailbox'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'pop3'
op|'.'
name|'IMailbox'
op|'.'
name|'providedBy'
op|'('
name|'result'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
name|'result'
op|'['
number|'2'
op|']'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAuthenticateIncorrectUserAPOP
dedent|''
name|'def'
name|'testAuthenticateIncorrectUserAPOP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resp'
op|'='
name|'md5'
op|'('
name|'self'
op|'.'
name|'P'
op|'.'
name|'magic'
op|'+'
string|"'password'"
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'P'
op|'.'
name|'authenticateUserAPOP'
op|'('
string|"'resu'"
op|','
name|'resp'
op|')'
op|','
nl|'\n'
name|'cred'
op|'.'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAuthenticateIncorrectResponseAPOP
dedent|''
name|'def'
name|'testAuthenticateIncorrectResponseAPOP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resp'
op|'='
name|'md5'
op|'('
string|"'wrong digest'"
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'P'
op|'.'
name|'authenticateUserAPOP'
op|'('
string|"'user'"
op|','
name|'resp'
op|')'
op|','
nl|'\n'
name|'cred'
op|'.'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAuthenticatePASS
dedent|''
name|'def'
name|'testAuthenticatePASS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'P'
op|'.'
name|'authenticateUserPASS'
op|'('
string|"'user'"
op|','
string|"'password'"
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbAuthenticatePASS'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbAuthenticatePASS
dedent|''
name|'def'
name|'_cbAuthenticatePASS'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'result'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'['
number|'0'
op|']'
op|','
name|'pop3'
op|'.'
name|'IMailbox'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'pop3'
op|'.'
name|'IMailbox'
op|'.'
name|'providedBy'
op|'('
name|'result'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
name|'result'
op|'['
number|'2'
op|']'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAuthenticateBadUserPASS
dedent|''
name|'def'
name|'testAuthenticateBadUserPASS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'P'
op|'.'
name|'authenticateUserPASS'
op|'('
string|"'resu'"
op|','
string|"'password'"
op|')'
op|','
nl|'\n'
name|'cred'
op|'.'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAuthenticateBadPasswordPASS
dedent|''
name|'def'
name|'testAuthenticateBadPasswordPASS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'P'
op|'.'
name|'authenticateUserPASS'
op|'('
string|"'user'"
op|','
string|"'wrong password'"
op|')'
op|','
nl|'\n'
name|'cred'
op|'.'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|')'
newline|'\n'
nl|'\n'
DECL|class|empty
dedent|''
dedent|''
name|'class'
name|'empty'
op|'('
name|'smtp'
op|'.'
name|'User'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|RelayTestCase
dedent|''
dedent|''
name|'class'
name|'RelayTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testExists
indent|'    '
name|'def'
name|'testExists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'service'
op|'='
name|'mail'
op|'.'
name|'mail'
op|'.'
name|'MailService'
op|'('
op|')'
newline|'\n'
name|'domain'
op|'='
name|'mail'
op|'.'
name|'relay'
op|'.'
name|'DomainQueuer'
op|'('
name|'service'
op|')'
newline|'\n'
nl|'\n'
name|'doRelay'
op|'='
op|'['
nl|'\n'
name|'address'
op|'.'
name|'UNIXAddress'
op|'('
string|"'/var/run/mail-relay'"
op|')'
op|','
nl|'\n'
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'127.0.0.1'"
op|','
number|'12345'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'dontRelay'
op|'='
op|'['
nl|'\n'
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'192.168.2.1'"
op|','
number|'62'
op|')'
op|','
nl|'\n'
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'1.2.3.4'"
op|','
number|'1943'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'peer'
name|'in'
name|'doRelay'
op|':'
newline|'\n'
indent|'            '
name|'user'
op|'='
name|'empty'
op|'('
op|')'
newline|'\n'
name|'user'
op|'.'
name|'orig'
op|'='
string|"'user@host'"
newline|'\n'
name|'user'
op|'.'
name|'dest'
op|'='
string|"'tsoh@resu'"
newline|'\n'
name|'user'
op|'.'
name|'protocol'
op|'='
name|'empty'
op|'('
op|')'
newline|'\n'
name|'user'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'='
name|'empty'
op|'('
op|')'
newline|'\n'
name|'user'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'='
name|'lambda'
op|':'
name|'peer'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'callable'
op|'('
name|'domain'
op|'.'
name|'exists'
op|'('
name|'user'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'peer'
name|'in'
name|'dontRelay'
op|':'
newline|'\n'
indent|'            '
name|'user'
op|'='
name|'empty'
op|'('
op|')'
newline|'\n'
name|'user'
op|'.'
name|'orig'
op|'='
string|"'some@place'"
newline|'\n'
name|'user'
op|'.'
name|'protocol'
op|'='
name|'empty'
op|'('
op|')'
newline|'\n'
name|'user'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'='
name|'empty'
op|'('
op|')'
newline|'\n'
name|'user'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'='
name|'lambda'
op|':'
name|'peer'
newline|'\n'
name|'user'
op|'.'
name|'dest'
op|'='
string|"'who@cares'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'smtp'
op|'.'
name|'SMTPBadRcpt'
op|','
name|'domain'
op|'.'
name|'exists'
op|','
name|'user'
op|')'
newline|'\n'
nl|'\n'
DECL|class|RelayerTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'RelayerTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'tmpdir'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'messageFiles'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'10'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|','
string|"'body-%d'"
op|'%'
op|'('
name|'i'
op|','
op|')'
op|')'
newline|'\n'
name|'f'
op|'='
name|'file'
op|'('
name|'name'
op|'+'
string|"'-H'"
op|','
string|"'w'"
op|')'
newline|'\n'
name|'pickle'
op|'.'
name|'dump'
op|'('
op|'['
string|"'from-%d'"
op|'%'
op|'('
name|'i'
op|','
op|')'
op|','
string|"'to-%d'"
op|'%'
op|'('
name|'i'
op|','
op|')'
op|']'
op|','
name|'f'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'file'
op|'('
name|'name'
op|'+'
string|"'-D'"
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
name|'name'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'messageFiles'
op|'.'
name|'append'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'R'
op|'='
name|'mail'
op|'.'
name|'relay'
op|'.'
name|'RelayerMixin'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'R'
op|'.'
name|'loadMessages'
op|'('
name|'self'
op|'.'
name|'messageFiles'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMailFrom
dedent|''
name|'def'
name|'testMailFrom'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'10'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'R'
op|'.'
name|'getMailFrom'
op|'('
op|')'
op|','
string|"'from-%d'"
op|'%'
op|'('
name|'i'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'R'
op|'.'
name|'sentMail'
op|'('
number|'250'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'R'
op|'.'
name|'getMailFrom'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMailTo
dedent|''
name|'def'
name|'testMailTo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'10'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'R'
op|'.'
name|'getMailTo'
op|'('
op|')'
op|','
op|'['
string|"'to-%d'"
op|'%'
op|'('
name|'i'
op|','
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'R'
op|'.'
name|'sentMail'
op|'('
number|'250'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'R'
op|'.'
name|'getMailTo'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMailData
dedent|''
name|'def'
name|'testMailData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'10'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|','
string|"'body-%d'"
op|'%'
op|'('
name|'i'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'R'
op|'.'
name|'getMailData'
op|'('
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|','
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'R'
op|'.'
name|'sentMail'
op|'('
number|'250'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'R'
op|'.'
name|'getMailData'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|class|Manager
dedent|''
dedent|''
name|'class'
name|'Manager'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'success'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failure'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'done'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|notifySuccess
dedent|''
name|'def'
name|'notifySuccess'
op|'('
name|'self'
op|','
name|'factory'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'success'
op|'.'
name|'append'
op|'('
op|'('
name|'factory'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|notifyFailure
dedent|''
name|'def'
name|'notifyFailure'
op|'('
name|'self'
op|','
name|'factory'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failure'
op|'.'
name|'append'
op|'('
op|'('
name|'factory'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|notifyDone
dedent|''
name|'def'
name|'notifyDone'
op|'('
name|'self'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'done'
op|'.'
name|'append'
op|'('
name|'factory'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ManagedRelayerTestCase
dedent|''
dedent|''
name|'class'
name|'ManagedRelayerTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'manager'
op|'='
name|'Manager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
name|'range'
op|'('
number|'0'
op|','
number|'20'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'relay'
op|'='
name|'mail'
op|'.'
name|'relaymanager'
op|'.'
name|'ManagedRelayerMixin'
op|'('
name|'self'
op|'.'
name|'manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'relay'
op|'.'
name|'messages'
op|'='
name|'self'
op|'.'
name|'messages'
op|'['
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'relay'
op|'.'
name|'names'
op|'='
name|'self'
op|'.'
name|'messages'
op|'['
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'relay'
op|'.'
name|'factory'
op|'='
name|'self'
op|'.'
name|'factory'
newline|'\n'
nl|'\n'
DECL|member|testSuccessfulSentMail
dedent|''
name|'def'
name|'testSuccessfulSentMail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
name|'in'
name|'self'
op|'.'
name|'messages'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'relay'
op|'.'
name|'sentMail'
op|'('
number|'250'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'success'
op|','
nl|'\n'
op|'['
op|'('
name|'self'
op|'.'
name|'factory'
op|','
name|'m'
op|')'
name|'for'
name|'m'
name|'in'
name|'self'
op|'.'
name|'messages'
op|']'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFailedSentMail
dedent|''
name|'def'
name|'testFailedSentMail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
name|'in'
name|'self'
op|'.'
name|'messages'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'relay'
op|'.'
name|'sentMail'
op|'('
number|'550'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'failure'
op|','
nl|'\n'
op|'['
op|'('
name|'self'
op|'.'
name|'factory'
op|','
name|'m'
op|')'
name|'for'
name|'m'
name|'in'
name|'self'
op|'.'
name|'messages'
op|']'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testConnectionLost
dedent|''
name|'def'
name|'testConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'relay'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'Exception'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'manager'
op|'.'
name|'done'
op|','
op|'['
name|'self'
op|'.'
name|'factory'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|class|DirectoryQueueTestCase
dedent|''
dedent|''
name|'class'
name|'DirectoryQueueTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# This is almost a test case itself.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'tmpdir'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'='
name|'mail'
op|'.'
name|'relaymanager'
op|'.'
name|'Queue'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'.'
name|'noisy'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'m'
name|'in'
name|'range'
op|'('
number|'25'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'hdrF'
op|','
name|'msgF'
op|'='
name|'self'
op|'.'
name|'queue'
op|'.'
name|'createNewMessage'
op|'('
op|')'
newline|'\n'
name|'pickle'
op|'.'
name|'dump'
op|'('
op|'['
string|"'header'"
op|','
name|'m'
op|']'
op|','
name|'hdrF'
op|')'
newline|'\n'
name|'hdrF'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'msgF'
op|'.'
name|'lineReceived'
op|'('
string|"'body: %d'"
op|'%'
op|'('
name|'m'
op|','
op|')'
op|')'
newline|'\n'
name|'msgF'
op|'.'
name|'eomReceived'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'queue'
op|'.'
name|'readDirectory'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testWaiting
dedent|''
name|'def'
name|'testWaiting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'queue'
op|'.'
name|'hasWaiting'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getWaiting'
op|'('
op|')'
op|')'
op|','
number|'25'
op|')'
newline|'\n'
nl|'\n'
name|'waiting'
op|'='
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getWaiting'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'.'
name|'setRelaying'
op|'('
name|'waiting'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getWaiting'
op|'('
op|')'
op|')'
op|','
number|'24'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'queue'
op|'.'
name|'setWaiting'
op|'('
name|'waiting'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getWaiting'
op|'('
op|')'
op|')'
op|','
number|'25'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRelaying
dedent|''
name|'def'
name|'testRelaying'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'m'
name|'in'
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getWaiting'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'queue'
op|'.'
name|'setRelaying'
op|'('
name|'m'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'len'
op|'('
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getRelayed'
op|'('
op|')'
op|')'
op|','
nl|'\n'
number|'25'
op|'-'
name|'len'
op|'('
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getWaiting'
op|'('
op|')'
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'queue'
op|'.'
name|'hasWaiting'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'relayed'
op|'='
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getRelayed'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'.'
name|'setWaiting'
op|'('
name|'relayed'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getWaiting'
op|'('
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getRelayed'
op|'('
op|')'
op|')'
op|','
number|'24'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDone
dedent|''
name|'def'
name|'testDone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getWaiting'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'.'
name|'setRelaying'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'.'
name|'done'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getWaiting'
op|'('
op|')'
op|')'
op|','
number|'24'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getRelayed'
op|'('
op|')'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'msg'
name|'in'
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getWaiting'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'msg'
name|'in'
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getRelayed'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEnvelope
dedent|''
name|'def'
name|'testEnvelope'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'envelopes'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'msg'
name|'in'
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getWaiting'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'envelopes'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'queue'
op|'.'
name|'getEnvelope'
op|'('
name|'msg'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'envelopes'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'25'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'envelopes'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
nl|'\n'
op|'['
string|"'header'"
op|','
name|'i'
op|']'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'names'
name|'import'
name|'server'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
name|'import'
name|'client'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'names'
name|'import'
name|'common'
newline|'\n'
nl|'\n'
DECL|class|TestAuthority
name|'class'
name|'TestAuthority'
op|'('
name|'common'
op|'.'
name|'ResolverBase'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'common'
op|'.'
name|'ResolverBase'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addresses'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_lookup
dedent|''
name|'def'
name|'_lookup'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'cls'
op|','
name|'type'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'addresses'
name|'and'
name|'type'
op|'=='
name|'dns'
op|'.'
name|'MX'
op|':'
newline|'\n'
indent|'            '
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'a'
name|'in'
name|'self'
op|'.'
name|'addresses'
op|'['
name|'name'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'hdr'
op|'='
name|'dns'
op|'.'
name|'RRHeader'
op|'('
nl|'\n'
name|'name'
op|','
name|'dns'
op|'.'
name|'MX'
op|','
name|'dns'
op|'.'
name|'IN'
op|','
number|'60'
op|','
name|'dns'
op|'.'
name|'Record_MX'
op|'('
number|'0'
op|','
name|'a'
op|')'
nl|'\n'
op|')'
newline|'\n'
name|'results'
op|'.'
name|'append'
op|'('
name|'hdr'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
op|'('
name|'results'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'dns'
op|'.'
name|'DomainError'
op|'('
name|'name'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|setUpDNS
dedent|''
dedent|''
name|'def'
name|'setUpDNS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'auth'
op|'='
name|'TestAuthority'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'='
name|'server'
op|'.'
name|'DNSServerFactory'
op|'('
op|'['
name|'self'
op|'.'
name|'auth'
op|']'
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'dns'
op|'.'
name|'DNSDatagramProtocol'
op|'('
name|'factory'
op|')'
newline|'\n'
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'factory'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'portNumber'
op|'='
name|'self'
op|'.'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'udpPort'
op|'='
name|'reactor'
op|'.'
name|'listenUDP'
op|'('
name|'portNumber'
op|','
name|'protocol'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'CannotListenError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'port'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'resolver'
op|'='
name|'client'
op|'.'
name|'Resolver'
op|'('
name|'servers'
op|'='
op|'['
op|'('
string|"'127.0.0.1'"
op|','
name|'portNumber'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|tearDownDNS
dedent|''
name|'def'
name|'tearDownDNS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'dl'
op|'='
op|'['
op|']'
newline|'\n'
name|'dl'
op|'.'
name|'append'
op|'('
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'port'
op|'.'
name|'stopListening'
op|')'
op|')'
newline|'\n'
name|'dl'
op|'.'
name|'append'
op|'('
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'udpPort'
op|'.'
name|'stopListening'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'resolver'
op|'.'
name|'protocol'
op|'.'
name|'transport'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'dl'
op|'.'
name|'append'
op|'('
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'resolver'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'stopListening'
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resolver'
op|'.'
name|'_parseCall'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'dl'
op|')'
newline|'\n'
nl|'\n'
DECL|class|MXTestCase
dedent|''
name|'class'
name|'MXTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{mail.relaymanager.MXCalculator}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'setUpDNS'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mx'
op|'='
name|'mail'
op|'.'
name|'relaymanager'
op|'.'
name|'MXCalculator'
op|'('
name|'self'
op|'.'
name|'resolver'
op|','
name|'self'
op|'.'
name|'clock'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'tearDownDNS'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_defaultClock
dedent|''
name|'def'
name|'test_defaultClock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{MXCalculator}\'s default clock is C{twisted.internet.reactor}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'mail'
op|'.'
name|'relaymanager'
op|'.'
name|'MXCalculator'
op|'('
name|'self'
op|'.'
name|'resolver'
op|')'
op|'.'
name|'clock'
op|','
nl|'\n'
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testSimpleSuccess
dedent|''
name|'def'
name|'testSimpleSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'auth'
op|'.'
name|'addresses'
op|'['
string|"'test.domain'"
op|']'
op|'='
op|'['
string|"'the.email.test.domain'"
op|']'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'mx'
op|'.'
name|'getMX'
op|'('
string|"'test.domain'"
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbSimpleSuccess'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbSimpleSuccess
dedent|''
name|'def'
name|'_cbSimpleSuccess'
op|'('
name|'self'
op|','
name|'mx'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mx'
op|'.'
name|'preference'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'mx'
op|'.'
name|'name'
op|')'
op|','
string|"'the.email.test.domain'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSimpleFailure
dedent|''
name|'def'
name|'testSimpleFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mx'
op|'.'
name|'fallbackToDomain'
op|'='
name|'False'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'self'
op|'.'
name|'mx'
op|'.'
name|'getMX'
op|'('
string|"'test.domain'"
op|')'
op|','
name|'IOError'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSimpleFailureWithFallback
dedent|''
name|'def'
name|'testSimpleFailureWithFallback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'self'
op|'.'
name|'mx'
op|'.'
name|'getMX'
op|'('
string|"'test.domain'"
op|')'
op|','
name|'DNSLookupError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_exchangeTest
dedent|''
name|'def'
name|'_exchangeTest'
op|'('
name|'self'
op|','
name|'domain'
op|','
name|'records'
op|','
name|'correctMailExchange'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Issue an MX request for the given domain and arrange for it to be\n        responded to with the given records.  Verify that the resulting mail\n        exchange is the indicated host.\n\n        @type domain: C{str}\n        @type records: C{list} of L{RRHeader}\n        @type correctMailExchange: C{str}\n        @rtype: L{Deferred}\n        """'
newline|'\n'
DECL|class|DummyResolver
name|'class'
name|'DummyResolver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|lookupMailExchange
indent|'            '
name|'def'
name|'lookupMailExchange'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'name'
op|'=='
name|'domain'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
op|'('
nl|'\n'
name|'records'
op|','
nl|'\n'
op|'['
op|']'
op|','
nl|'\n'
op|'['
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'DNSNameError'
op|'('
name|'domain'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'mx'
op|'.'
name|'resolver'
op|'='
name|'DummyResolver'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'mx'
op|'.'
name|'getMX'
op|'('
name|'domain'
op|')'
newline|'\n'
DECL|function|gotMailExchange
name|'def'
name|'gotMailExchange'
op|'('
name|'record'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'record'
op|'.'
name|'name'
op|')'
op|','
name|'correctMailExchange'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'gotMailExchange'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mailExchangePreference
dedent|''
name|'def'
name|'test_mailExchangePreference'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The MX record with the lowest preference is returned by\n        L{MXCalculator.getMX}.\n        """'
newline|'\n'
name|'domain'
op|'='
string|'"example.com"'
newline|'\n'
name|'good'
op|'='
string|'"good.example.com"'
newline|'\n'
name|'bad'
op|'='
string|'"bad.example.com"'
newline|'\n'
nl|'\n'
name|'records'
op|'='
op|'['
nl|'\n'
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'domain'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_MX'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_MX'
op|'('
number|'1'
op|','
name|'bad'
op|')'
op|')'
op|','
nl|'\n'
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'domain'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_MX'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_MX'
op|'('
number|'0'
op|','
name|'good'
op|')'
op|')'
op|','
nl|'\n'
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'domain'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_MX'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_MX'
op|'('
number|'2'
op|','
name|'bad'
op|')'
op|')'
op|']'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_exchangeTest'
op|'('
name|'domain'
op|','
name|'records'
op|','
name|'good'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_badExchangeExcluded
dedent|''
name|'def'
name|'test_badExchangeExcluded'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{MXCalculator.getMX} returns the MX record with the lowest preference\n        which is not also marked as bad.\n        """'
newline|'\n'
name|'domain'
op|'='
string|'"example.com"'
newline|'\n'
name|'good'
op|'='
string|'"good.example.com"'
newline|'\n'
name|'bad'
op|'='
string|'"bad.example.com"'
newline|'\n'
nl|'\n'
name|'records'
op|'='
op|'['
nl|'\n'
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'domain'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_MX'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_MX'
op|'('
number|'0'
op|','
name|'bad'
op|')'
op|')'
op|','
nl|'\n'
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'domain'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_MX'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_MX'
op|'('
number|'1'
op|','
name|'good'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mx'
op|'.'
name|'markBad'
op|'('
name|'bad'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_exchangeTest'
op|'('
name|'domain'
op|','
name|'records'
op|','
name|'good'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fallbackForAllBadExchanges
dedent|''
name|'def'
name|'test_fallbackForAllBadExchanges'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{MXCalculator.getMX} returns the MX record with the lowest preference\n        if all the MX records in the response have been marked bad.\n        """'
newline|'\n'
name|'domain'
op|'='
string|'"example.com"'
newline|'\n'
name|'bad'
op|'='
string|'"bad.example.com"'
newline|'\n'
name|'worse'
op|'='
string|'"worse.example.com"'
newline|'\n'
nl|'\n'
name|'records'
op|'='
op|'['
nl|'\n'
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'domain'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_MX'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_MX'
op|'('
number|'0'
op|','
name|'bad'
op|')'
op|')'
op|','
nl|'\n'
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'domain'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_MX'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_MX'
op|'('
number|'1'
op|','
name|'worse'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mx'
op|'.'
name|'markBad'
op|'('
name|'bad'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mx'
op|'.'
name|'markBad'
op|'('
name|'worse'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_exchangeTest'
op|'('
name|'domain'
op|','
name|'records'
op|','
name|'bad'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_badExchangeExpires
dedent|''
name|'def'
name|'test_badExchangeExpires'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{MXCalculator.getMX} returns the MX record with the lowest preference\n        if it was last marked bad longer than L{MXCalculator.timeOutBadMX}\n        seconds ago.\n        """'
newline|'\n'
name|'domain'
op|'='
string|'"example.com"'
newline|'\n'
name|'good'
op|'='
string|'"good.example.com"'
newline|'\n'
name|'previouslyBad'
op|'='
string|'"bad.example.com"'
newline|'\n'
nl|'\n'
name|'records'
op|'='
op|'['
nl|'\n'
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'domain'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_MX'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_MX'
op|'('
number|'0'
op|','
name|'previouslyBad'
op|')'
op|')'
op|','
nl|'\n'
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'domain'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_MX'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_MX'
op|'('
number|'1'
op|','
name|'good'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mx'
op|'.'
name|'markBad'
op|'('
name|'previouslyBad'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
name|'self'
op|'.'
name|'mx'
op|'.'
name|'timeOutBadMX'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_exchangeTest'
op|'('
name|'domain'
op|','
name|'records'
op|','
name|'previouslyBad'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_goodExchangeUsed
dedent|''
name|'def'
name|'test_goodExchangeUsed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{MXCalculator.getMX} returns the MX record with the lowest preference\n        if it was marked good after it was marked bad.\n        """'
newline|'\n'
name|'domain'
op|'='
string|'"example.com"'
newline|'\n'
name|'good'
op|'='
string|'"good.example.com"'
newline|'\n'
name|'previouslyBad'
op|'='
string|'"bad.example.com"'
newline|'\n'
nl|'\n'
name|'records'
op|'='
op|'['
nl|'\n'
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'domain'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_MX'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_MX'
op|'('
number|'0'
op|','
name|'previouslyBad'
op|')'
op|')'
op|','
nl|'\n'
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'domain'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_MX'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_MX'
op|'('
number|'1'
op|','
name|'good'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mx'
op|'.'
name|'markBad'
op|'('
name|'previouslyBad'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mx'
op|'.'
name|'markGood'
op|'('
name|'previouslyBad'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
name|'self'
op|'.'
name|'mx'
op|'.'
name|'timeOutBadMX'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_exchangeTest'
op|'('
name|'domain'
op|','
name|'records'
op|','
name|'previouslyBad'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_successWithoutResults
dedent|''
name|'def'
name|'test_successWithoutResults'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an MX lookup succeeds but the result set is empty,\n        L{MXCalculator.getMX} should try to look up an I{A} record for the\n        requested name and call back its returned Deferred with that\n        address.\n        """'
newline|'\n'
name|'ip'
op|'='
string|"'1.2.3.4'"
newline|'\n'
name|'domain'
op|'='
string|"'example.org'"
newline|'\n'
nl|'\n'
DECL|class|DummyResolver
name|'class'
name|'DummyResolver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Fake resolver which will respond to an MX lookup with an empty\n            result set.\n\n            @ivar mx: A dictionary mapping hostnames to three-tuples of\n                results to be returned from I{MX} lookups.\n\n            @ivar a: A dictionary mapping hostnames to addresses to be\n                returned from I{A} lookups.\n            """'
newline|'\n'
DECL|variable|mx
name|'mx'
op|'='
op|'{'
name|'domain'
op|':'
op|'('
op|'['
op|']'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
op|'}'
newline|'\n'
DECL|variable|a
name|'a'
op|'='
op|'{'
name|'domain'
op|':'
name|'ip'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|lookupMailExchange
name|'def'
name|'lookupMailExchange'
op|'('
name|'self'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'self'
op|'.'
name|'mx'
op|'['
name|'domain'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getHostByName
dedent|''
name|'def'
name|'getHostByName'
op|'('
name|'self'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'self'
op|'.'
name|'a'
op|'['
name|'domain'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'mx'
op|'.'
name|'resolver'
op|'='
name|'DummyResolver'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'mx'
op|'.'
name|'getMX'
op|'('
name|'domain'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
name|'Record_MX'
op|'('
name|'name'
op|'='
name|'ip'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failureWithSuccessfulFallback
dedent|''
name|'def'
name|'test_failureWithSuccessfulFallback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that if the MX record lookup fails, fallback is enabled, and an A\n        record is available for the name, then the Deferred returned by\n        L{MXCalculator.getMX} ultimately fires with a Record_MX instance which\n        gives the address in the A record for the name.\n        """'
newline|'\n'
DECL|class|DummyResolver
name|'class'
name|'DummyResolver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Fake resolver which will fail an MX lookup but then succeed a\n            getHostByName call.\n            """'
newline|'\n'
DECL|member|lookupMailExchange
name|'def'
name|'lookupMailExchange'
op|'('
name|'self'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'DNSNameError'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getHostByName
dedent|''
name|'def'
name|'getHostByName'
op|'('
name|'self'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
string|'"1.2.3.4"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'mx'
op|'.'
name|'resolver'
op|'='
name|'DummyResolver'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'mx'
op|'.'
name|'getMX'
op|'('
string|'"domain"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
name|'Record_MX'
op|'('
name|'name'
op|'='
string|'"1.2.3.4"'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cnameWithoutGlueRecords
dedent|''
name|'def'
name|'test_cnameWithoutGlueRecords'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an MX lookup returns a single CNAME record as a result, MXCalculator\n        will perform an MX lookup for the canonical name indicated and return\n        the MX record which results.\n        """'
newline|'\n'
name|'alias'
op|'='
string|'"alias.example.com"'
newline|'\n'
name|'canonical'
op|'='
string|'"canonical.example.com"'
newline|'\n'
name|'exchange'
op|'='
string|'"mail.example.com"'
newline|'\n'
nl|'\n'
DECL|class|DummyResolver
name|'class'
name|'DummyResolver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Fake resolver which will return a CNAME for an MX lookup of a name\n            which is an alias and an MX for an MX lookup of the canonical name.\n            """'
newline|'\n'
DECL|member|lookupMailExchange
name|'def'
name|'lookupMailExchange'
op|'('
name|'self'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'domain'
op|'=='
name|'alias'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
op|'('
nl|'\n'
op|'['
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'domain'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_CNAME'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_CNAME'
op|'('
name|'canonical'
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'domain'
op|'=='
name|'canonical'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
op|'('
nl|'\n'
op|'['
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'domain'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_MX'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_MX'
op|'('
number|'0'
op|','
name|'exchange'
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'DNSNameError'
op|'('
name|'domain'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'mx'
op|'.'
name|'resolver'
op|'='
name|'DummyResolver'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'mx'
op|'.'
name|'getMX'
op|'('
name|'alias'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
name|'Record_MX'
op|'('
name|'name'
op|'='
name|'exchange'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cnameChain
dedent|''
name|'def'
name|'test_cnameChain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If L{MXCalculator.getMX} encounters a CNAME chain which is longer than\n        the length specified, the returned L{Deferred} should errback with\n        L{CanonicalNameChainTooLong}.\n        """'
newline|'\n'
DECL|class|DummyResolver
name|'class'
name|'DummyResolver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Fake resolver which generates a CNAME chain of infinite length in\n            response to MX lookups.\n            """'
newline|'\n'
DECL|variable|chainCounter
name|'chainCounter'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|lookupMailExchange
name|'def'
name|'lookupMailExchange'
op|'('
name|'self'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'chainCounter'
op|'+='
number|'1'
newline|'\n'
name|'name'
op|'='
string|"'x-%d.example.com'"
op|'%'
op|'('
name|'self'
op|'.'
name|'chainCounter'
op|','
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
op|'('
nl|'\n'
op|'['
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'domain'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_CNAME'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_CNAME'
op|'('
name|'name'
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'cnameLimit'
op|'='
number|'3'
newline|'\n'
name|'self'
op|'.'
name|'mx'
op|'.'
name|'resolver'
op|'='
name|'DummyResolver'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'mx'
op|'.'
name|'getMX'
op|'('
string|'"mail.example.com"'
op|','
name|'cnameLimit'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
nl|'\n'
name|'d'
op|','
name|'twisted'
op|'.'
name|'mail'
op|'.'
name|'relaymanager'
op|'.'
name|'CanonicalNameChainTooLong'
op|')'
newline|'\n'
DECL|function|cbChainTooLong
name|'def'
name|'cbChainTooLong'
op|'('
name|'error'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'error'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|','
name|'Record_CNAME'
op|'('
string|'"x-%d.example.com"'
op|'%'
op|'('
name|'cnameLimit'
op|'+'
number|'1'
op|','
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'mx'
op|'.'
name|'resolver'
op|'.'
name|'chainCounter'
op|','
name|'cnameLimit'
op|'+'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbChainTooLong'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cnameWithGlueRecords
dedent|''
name|'def'
name|'test_cnameWithGlueRecords'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an MX lookup returns a CNAME and the MX record for the CNAME, the\n        L{Deferred} returned by L{MXCalculator.getMX} should be called back\n        with the name from the MX record without further lookups being\n        attempted.\n        """'
newline|'\n'
name|'lookedUp'
op|'='
op|'['
op|']'
newline|'\n'
name|'alias'
op|'='
string|'"alias.example.com"'
newline|'\n'
name|'canonical'
op|'='
string|'"canonical.example.com"'
newline|'\n'
name|'exchange'
op|'='
string|'"mail.example.com"'
newline|'\n'
nl|'\n'
DECL|class|DummyResolver
name|'class'
name|'DummyResolver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|lookupMailExchange
indent|'            '
name|'def'
name|'lookupMailExchange'
op|'('
name|'self'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'domain'
op|'!='
name|'alias'
name|'or'
name|'lookedUp'
op|':'
newline|'\n'
comment|"# Don't give back any results for anything except the alias"
nl|'\n'
comment|'# or on any request after the first.'
nl|'\n'
indent|'                    '
name|'return'
op|'('
op|'['
op|']'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
op|'('
nl|'\n'
op|'['
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'alias'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_CNAME'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_CNAME'
op|'('
name|'canonical'
op|')'
op|')'
op|','
nl|'\n'
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'canonical'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_MX'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_MX'
op|'('
name|'name'
op|'='
name|'exchange'
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'mx'
op|'.'
name|'resolver'
op|'='
name|'DummyResolver'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'mx'
op|'.'
name|'getMX'
op|'('
name|'alias'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
name|'Record_MX'
op|'('
name|'name'
op|'='
name|'exchange'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cnameLoopWithGlueRecords
dedent|''
name|'def'
name|'test_cnameLoopWithGlueRecords'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an MX lookup returns two CNAME records which point to each other,\n        the loop should be detected and the L{Deferred} returned by\n        L{MXCalculator.getMX} should be errbacked with L{CanonicalNameLoop}.\n        """'
newline|'\n'
name|'firstAlias'
op|'='
string|'"cname1.example.com"'
newline|'\n'
name|'secondAlias'
op|'='
string|'"cname2.example.com"'
newline|'\n'
nl|'\n'
DECL|class|DummyResolver
name|'class'
name|'DummyResolver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|lookupMailExchange
indent|'            '
name|'def'
name|'lookupMailExchange'
op|'('
name|'self'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
op|'('
nl|'\n'
op|'['
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'firstAlias'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_CNAME'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_CNAME'
op|'('
name|'secondAlias'
op|')'
op|')'
op|','
nl|'\n'
name|'RRHeader'
op|'('
name|'name'
op|'='
name|'secondAlias'
op|','
nl|'\n'
name|'type'
op|'='
name|'Record_CNAME'
op|'.'
name|'TYPE'
op|','
nl|'\n'
name|'payload'
op|'='
name|'Record_CNAME'
op|'('
name|'firstAlias'
op|')'
op|')'
op|']'
op|','
nl|'\n'
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'mx'
op|'.'
name|'resolver'
op|'='
name|'DummyResolver'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'mx'
op|'.'
name|'getMX'
op|'('
name|'firstAlias'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'twisted'
op|'.'
name|'mail'
op|'.'
name|'relaymanager'
op|'.'
name|'CanonicalNameLoop'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testManyRecords
dedent|''
name|'def'
name|'testManyRecords'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'auth'
op|'.'
name|'addresses'
op|'['
string|"'test.domain'"
op|']'
op|'='
op|'['
nl|'\n'
string|"'mx1.test.domain'"
op|','
string|"'mx2.test.domain'"
op|','
string|"'mx3.test.domain'"
nl|'\n'
op|']'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'mx'
op|'.'
name|'getMX'
op|'('
string|"'test.domain'"
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbManyRecordsSuccessfulLookup'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbManyRecordsSuccessfulLookup
dedent|''
name|'def'
name|'_cbManyRecordsSuccessfulLookup'
op|'('
name|'self'
op|','
name|'mx'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'str'
op|'('
name|'mx'
op|'.'
name|'name'
op|')'
op|'.'
name|'split'
op|'('
string|"'.'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
name|'in'
op|'('
string|"'mx1'"
op|','
string|"'mx2'"
op|','
string|"'mx3'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mx'
op|'.'
name|'markBad'
op|'('
name|'str'
op|'('
name|'mx'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'mx'
op|'.'
name|'getMX'
op|'('
string|"'test.domain'"
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbManyRecordsDifferentResult'
op|','
name|'mx'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbManyRecordsDifferentResult
dedent|''
name|'def'
name|'_cbManyRecordsDifferentResult'
op|'('
name|'self'
op|','
name|'nextMX'
op|','
name|'mx'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'str'
op|'('
name|'mx'
op|'.'
name|'name'
op|')'
op|','
name|'str'
op|'('
name|'nextMX'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mx'
op|'.'
name|'markBad'
op|'('
name|'str'
op|'('
name|'nextMX'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'mx'
op|'.'
name|'getMX'
op|'('
string|"'test.domain'"
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbManyRecordsLastResult'
op|','
name|'mx'
op|','
name|'nextMX'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbManyRecordsLastResult
dedent|''
name|'def'
name|'_cbManyRecordsLastResult'
op|'('
name|'self'
op|','
name|'lastMX'
op|','
name|'mx'
op|','
name|'nextMX'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'str'
op|'('
name|'mx'
op|'.'
name|'name'
op|')'
op|','
name|'str'
op|'('
name|'lastMX'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'str'
op|'('
name|'nextMX'
op|'.'
name|'name'
op|')'
op|','
name|'str'
op|'('
name|'lastMX'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mx'
op|'.'
name|'markBad'
op|'('
name|'str'
op|'('
name|'lastMX'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mx'
op|'.'
name|'markGood'
op|'('
name|'str'
op|'('
name|'nextMX'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'mx'
op|'.'
name|'getMX'
op|'('
string|"'test.domain'"
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbManyRecordsRepeatSpecificResult'
op|','
name|'nextMX'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbManyRecordsRepeatSpecificResult
dedent|''
name|'def'
name|'_cbManyRecordsRepeatSpecificResult'
op|'('
name|'self'
op|','
name|'againMX'
op|','
name|'nextMX'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'againMX'
op|'.'
name|'name'
op|')'
op|','
name|'str'
op|'('
name|'nextMX'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|LiveFireExercise
dedent|''
dedent|''
name|'class'
name|'LiveFireExercise'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'interfaces'
op|'.'
name|'IReactorUDP'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"UDP support is required to determining MX records"'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'setUpDNS'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tmpdirs'
op|'='
op|'['
nl|'\n'
string|"'domainDir'"
op|','
string|"'insertionDomain'"
op|','
string|"'insertionQueue'"
op|','
nl|'\n'
string|"'destinationDomain'"
op|','
string|"'destinationQueue'"
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'d'
name|'in'
name|'self'
op|'.'
name|'tmpdirs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'d'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'tearDownDNS'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLocalDelivery
dedent|''
name|'def'
name|'testLocalDelivery'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'service'
op|'='
name|'mail'
op|'.'
name|'mail'
op|'.'
name|'MailService'
op|'('
op|')'
newline|'\n'
name|'service'
op|'.'
name|'smtpPortal'
op|'.'
name|'registerChecker'
op|'('
name|'cred'
op|'.'
name|'checkers'
op|'.'
name|'AllowAnonymousAccess'
op|'('
op|')'
op|')'
newline|'\n'
name|'domain'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'MaildirDirdbmDomain'
op|'('
name|'service'
op|','
string|"'domainDir'"
op|')'
newline|'\n'
name|'domain'
op|'.'
name|'addUser'
op|'('
string|"'user'"
op|','
string|"'password'"
op|')'
newline|'\n'
name|'service'
op|'.'
name|'addDomain'
op|'('
string|"'test.domain'"
op|','
name|'domain'
op|')'
newline|'\n'
name|'service'
op|'.'
name|'portals'
op|'['
string|"''"
op|']'
op|'='
name|'service'
op|'.'
name|'portals'
op|'['
string|"'test.domain'"
op|']'
newline|'\n'
name|'map'
op|'('
name|'service'
op|'.'
name|'portals'
op|'['
string|"''"
op|']'
op|'.'
name|'registerChecker'
op|','
name|'domain'
op|'.'
name|'getCredentialsCheckers'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'service'
op|'.'
name|'setQueue'
op|'('
name|'mail'
op|'.'
name|'relay'
op|'.'
name|'DomainQueuer'
op|'('
name|'service'
op|')'
op|')'
newline|'\n'
name|'manager'
op|'='
name|'mail'
op|'.'
name|'relaymanager'
op|'.'
name|'SmartHostSMTPRelayingManager'
op|'('
name|'service'
op|'.'
name|'queue'
op|','
name|'None'
op|')'
newline|'\n'
name|'helper'
op|'='
name|'mail'
op|'.'
name|'relaymanager'
op|'.'
name|'RelayStateHelper'
op|'('
name|'manager'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'service'
op|'.'
name|'getSMTPFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'smtpServer'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'LineSendingProtocol'
op|'('
op|'['
nl|'\n'
string|"'HELO meson'"
op|','
nl|'\n'
string|"'MAIL FROM: <user@hostname>'"
op|','
nl|'\n'
string|"'RCPT TO: <user@test.domain>'"
op|','
nl|'\n'
string|"'DATA'"
op|','
nl|'\n'
string|"'This is the message'"
op|','
nl|'\n'
string|"'.'"
op|','
nl|'\n'
string|"'QUIT'"
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'done'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'protocol'
op|'.'
name|'ClientFactory'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'protocol'
op|'='
name|'lambda'
op|':'
name|'client'
newline|'\n'
name|'f'
op|'.'
name|'clientConnectionLost'
op|'='
name|'lambda'
op|'*'
name|'args'
op|':'
name|'done'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|"'127.0.0.1'"
op|','
name|'self'
op|'.'
name|'smtpServer'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
DECL|function|finished
name|'def'
name|'finished'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mbox'
op|'='
name|'domain'
op|'.'
name|'requestAvatar'
op|'('
string|"'user'"
op|','
name|'None'
op|','
name|'pop3'
op|'.'
name|'IMailbox'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'msg'
op|'='
name|'mbox'
op|'.'
name|'getMessage'
op|'('
number|'0'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfEqual'
op|'('
name|'msg'
op|'.'
name|'find'
op|'('
string|"'This is the message'"
op|')'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'smtpServer'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
dedent|''
name|'done'
op|'.'
name|'addCallback'
op|'('
name|'finished'
op|')'
newline|'\n'
name|'return'
name|'done'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testRelayDelivery
dedent|''
name|'def'
name|'testRelayDelivery'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Here is the service we will connect to and send mail from'
nl|'\n'
indent|'        '
name|'insServ'
op|'='
name|'mail'
op|'.'
name|'mail'
op|'.'
name|'MailService'
op|'('
op|')'
newline|'\n'
name|'insServ'
op|'.'
name|'smtpPortal'
op|'.'
name|'registerChecker'
op|'('
name|'cred'
op|'.'
name|'checkers'
op|'.'
name|'AllowAnonymousAccess'
op|'('
op|')'
op|')'
newline|'\n'
name|'domain'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'MaildirDirdbmDomain'
op|'('
name|'insServ'
op|','
string|"'insertionDomain'"
op|')'
newline|'\n'
name|'insServ'
op|'.'
name|'addDomain'
op|'('
string|"'insertion.domain'"
op|','
name|'domain'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
string|"'insertionQueue'"
op|')'
newline|'\n'
name|'insServ'
op|'.'
name|'setQueue'
op|'('
name|'mail'
op|'.'
name|'relaymanager'
op|'.'
name|'Queue'
op|'('
string|"'insertionQueue'"
op|')'
op|')'
newline|'\n'
name|'insServ'
op|'.'
name|'domains'
op|'.'
name|'setDefaultDomain'
op|'('
name|'mail'
op|'.'
name|'relay'
op|'.'
name|'DomainQueuer'
op|'('
name|'insServ'
op|')'
op|')'
newline|'\n'
name|'manager'
op|'='
name|'mail'
op|'.'
name|'relaymanager'
op|'.'
name|'SmartHostSMTPRelayingManager'
op|'('
name|'insServ'
op|'.'
name|'queue'
op|')'
newline|'\n'
name|'manager'
op|'.'
name|'fArgs'
op|'+='
op|'('
string|"'test.identity.hostname'"
op|','
op|')'
newline|'\n'
name|'helper'
op|'='
name|'mail'
op|'.'
name|'relaymanager'
op|'.'
name|'RelayStateHelper'
op|'('
name|'manager'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# Yoink!  Now the internet obeys OUR every whim!'
nl|'\n'
name|'manager'
op|'.'
name|'mxcalc'
op|'='
name|'mail'
op|'.'
name|'relaymanager'
op|'.'
name|'MXCalculator'
op|'('
name|'self'
op|'.'
name|'resolver'
op|')'
newline|'\n'
comment|'# And this is our whim.'
nl|'\n'
name|'self'
op|'.'
name|'auth'
op|'.'
name|'addresses'
op|'['
string|"'destination.domain'"
op|']'
op|'='
op|'['
string|"'127.0.0.1'"
op|']'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'insServ'
op|'.'
name|'getSMTPFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'insServer'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Here is the service the previous one will connect to for final'
nl|'\n'
comment|'# delivery'
nl|'\n'
name|'destServ'
op|'='
name|'mail'
op|'.'
name|'mail'
op|'.'
name|'MailService'
op|'('
op|')'
newline|'\n'
name|'destServ'
op|'.'
name|'smtpPortal'
op|'.'
name|'registerChecker'
op|'('
name|'cred'
op|'.'
name|'checkers'
op|'.'
name|'AllowAnonymousAccess'
op|'('
op|')'
op|')'
newline|'\n'
name|'domain'
op|'='
name|'mail'
op|'.'
name|'maildir'
op|'.'
name|'MaildirDirdbmDomain'
op|'('
name|'destServ'
op|','
string|"'destinationDomain'"
op|')'
newline|'\n'
name|'domain'
op|'.'
name|'addUser'
op|'('
string|"'user'"
op|','
string|"'password'"
op|')'
newline|'\n'
name|'destServ'
op|'.'
name|'addDomain'
op|'('
string|"'destination.domain'"
op|','
name|'domain'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
string|"'destinationQueue'"
op|')'
newline|'\n'
name|'destServ'
op|'.'
name|'setQueue'
op|'('
name|'mail'
op|'.'
name|'relaymanager'
op|'.'
name|'Queue'
op|'('
string|"'destinationQueue'"
op|')'
op|')'
newline|'\n'
name|'manager2'
op|'='
name|'mail'
op|'.'
name|'relaymanager'
op|'.'
name|'SmartHostSMTPRelayingManager'
op|'('
name|'destServ'
op|'.'
name|'queue'
op|')'
newline|'\n'
name|'helper'
op|'='
name|'mail'
op|'.'
name|'relaymanager'
op|'.'
name|'RelayStateHelper'
op|'('
name|'manager'
op|','
number|'1'
op|')'
newline|'\n'
name|'helper'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'destServ'
op|'.'
name|'getSMTPFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'destServer'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
comment|"# Update the port number the *first* relay will connect to, because we can't use"
nl|'\n'
comment|'# port 25'
nl|'\n'
name|'manager'
op|'.'
name|'PORT'
op|'='
name|'self'
op|'.'
name|'destServer'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'LineSendingProtocol'
op|'('
op|'['
nl|'\n'
string|"'HELO meson'"
op|','
nl|'\n'
string|"'MAIL FROM: <user@wherever>'"
op|','
nl|'\n'
string|"'RCPT TO: <user@destination.domain>'"
op|','
nl|'\n'
string|"'DATA'"
op|','
nl|'\n'
string|"'This is the message'"
op|','
nl|'\n'
string|"'.'"
op|','
nl|'\n'
string|"'QUIT'"
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'done'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'protocol'
op|'.'
name|'ClientFactory'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'protocol'
op|'='
name|'lambda'
op|':'
name|'client'
newline|'\n'
name|'f'
op|'.'
name|'clientConnectionLost'
op|'='
name|'lambda'
op|'*'
name|'args'
op|':'
name|'done'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|"'127.0.0.1'"
op|','
name|'self'
op|'.'
name|'insServer'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
DECL|function|finished
name|'def'
name|'finished'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
comment|'# First part of the delivery is done.  Poke the queue manually now'
nl|'\n'
comment|"# so we don't have to wait for the queue to be flushed."
nl|'\n'
indent|'            '
name|'delivery'
op|'='
name|'manager'
op|'.'
name|'checkState'
op|'('
op|')'
newline|'\n'
DECL|function|delivered
name|'def'
name|'delivered'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'mbox'
op|'='
name|'domain'
op|'.'
name|'requestAvatar'
op|'('
string|"'user'"
op|','
name|'None'
op|','
name|'pop3'
op|'.'
name|'IMailbox'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'msg'
op|'='
name|'mbox'
op|'.'
name|'getMessage'
op|'('
number|'0'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfEqual'
op|'('
name|'msg'
op|'.'
name|'find'
op|'('
string|"'This is the message'"
op|')'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'insServer'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'destServer'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
name|'helper'
op|'.'
name|'stopService'
op|'('
op|')'
newline|'\n'
dedent|''
name|'delivery'
op|'.'
name|'addCallback'
op|'('
name|'delivered'
op|')'
newline|'\n'
name|'return'
name|'delivery'
newline|'\n'
dedent|''
name|'done'
op|'.'
name|'addCallback'
op|'('
name|'finished'
op|')'
newline|'\n'
name|'return'
name|'done'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'aliasFile'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
string|'"""\\\n# Here\'s a comment\n   # woop another one\ntestuser:                   address1,address2, address3,\n    continuation@address, |/bin/process/this\n\nusertwo:thisaddress,thataddress, lastaddress\nlastuser:       :/includable, /filename, |/program, address\n"""'
op|')'
newline|'\n'
nl|'\n'
DECL|class|LineBufferMessage
name|'class'
name|'LineBufferMessage'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lines'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'eom'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'lost'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lines'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|eomReceived
dedent|''
name|'def'
name|'eomReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'eom'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
string|"'<Whatever>'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lost'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|class|AliasTestCase
dedent|''
dedent|''
name|'class'
name|'AliasTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|lines
indent|'    '
name|'lines'
op|'='
op|'['
nl|'\n'
string|"'First line'"
op|','
nl|'\n'
string|"'Next line'"
op|','
nl|'\n'
string|"''"
op|','
nl|'\n'
string|"'After a blank line'"
op|','
nl|'\n'
string|"'Last line'"
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'aliasFile'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testHandle
dedent|''
name|'def'
name|'testHandle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'lines'
op|'='
op|'['
nl|'\n'
string|"'user:  another@host\\n'"
op|','
nl|'\n'
string|"'nextuser:  |/bin/program\\n'"
op|','
nl|'\n'
string|"'user:  me@again\\n'"
op|','
nl|'\n'
string|"'moreusers: :/etc/include/filename\\n'"
op|','
nl|'\n'
string|"'multiuser: first@host, second@host,last@anotherhost'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'l'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'handle'
op|'('
name|'result'
op|','
name|'l'
op|','
string|"'TestCase'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'['
string|"'user'"
op|']'
op|','
op|'['
string|"'another@host'"
op|','
string|"'me@again'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'['
string|"'nextuser'"
op|']'
op|','
op|'['
string|"'|/bin/program'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'['
string|"'moreusers'"
op|']'
op|','
op|'['
string|"':/etc/include/filename'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'['
string|"'multiuser'"
op|']'
op|','
op|'['
string|"'first@host'"
op|','
string|"'second@host'"
op|','
string|"'last@anotherhost'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFileLoader
dedent|''
name|'def'
name|'testFileLoader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'domains'
op|'='
op|'{'
string|"''"
op|':'
name|'object'
op|'('
op|')'
op|'}'
newline|'\n'
name|'result'
op|'='
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'loadAliasFile'
op|'('
name|'domains'
op|','
name|'fp'
op|'='
name|'aliasFile'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'result'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
name|'group'
op|'='
name|'result'
op|'['
string|"'testuser'"
op|']'
newline|'\n'
name|'s'
op|'='
name|'str'
op|'('
name|'group'
op|')'
newline|'\n'
name|'for'
name|'a'
name|'in'
op|'('
string|"'address1'"
op|','
string|"'address2'"
op|','
string|"'address3'"
op|','
string|"'continuation@address'"
op|','
string|"'/bin/process/this'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIfEqual'
op|'('
name|'s'
op|'.'
name|'find'
op|'('
name|'a'
op|')'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'group'
op|')'
op|','
number|'5'
op|')'
newline|'\n'
nl|'\n'
name|'group'
op|'='
name|'result'
op|'['
string|"'usertwo'"
op|']'
newline|'\n'
name|'s'
op|'='
name|'str'
op|'('
name|'group'
op|')'
newline|'\n'
name|'for'
name|'a'
name|'in'
op|'('
string|"'thisaddress'"
op|','
string|"'thataddress'"
op|','
string|"'lastaddress'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIfEqual'
op|'('
name|'s'
op|'.'
name|'find'
op|'('
name|'a'
op|')'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'group'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
name|'group'
op|'='
name|'result'
op|'['
string|"'lastuser'"
op|']'
newline|'\n'
name|'s'
op|'='
name|'str'
op|'('
name|'group'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'s'
op|'.'
name|'find'
op|'('
string|"'/includable'"
op|')'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'for'
name|'a'
name|'in'
op|'('
string|"'/filename'"
op|','
string|"'program'"
op|','
string|"'address'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIfEqual'
op|'('
name|'s'
op|'.'
name|'find'
op|'('
name|'a'
op|')'
op|','
op|'-'
number|'1'
op|','
string|"'%s not found'"
op|'%'
name|'a'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'group'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMultiWrapper
dedent|''
name|'def'
name|'testMultiWrapper'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msgs'
op|'='
name|'LineBufferMessage'
op|'('
op|')'
op|','
name|'LineBufferMessage'
op|'('
op|')'
op|','
name|'LineBufferMessage'
op|'('
op|')'
newline|'\n'
name|'msg'
op|'='
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'MultiWrapper'
op|'('
name|'msgs'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'L'
name|'in'
name|'self'
op|'.'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'.'
name|'lineReceived'
op|'('
name|'L'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'msg'
op|'.'
name|'eomReceived'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbMultiWrapper'
op|','
name|'msgs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbMultiWrapper
dedent|''
name|'def'
name|'_cbMultiWrapper'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'msgs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'m'
name|'in'
name|'msgs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'m'
op|'.'
name|'eom'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'m'
op|'.'
name|'lost'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'lines'
op|','
name|'m'
op|'.'
name|'lines'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFileAlias
dedent|''
dedent|''
name|'def'
name|'testFileAlias'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmpfile'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'a'
op|'='
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'FileAlias'
op|'('
name|'tmpfile'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'m'
op|'='
name|'a'
op|'.'
name|'createMessageReceiver'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'l'
name|'in'
name|'self'
op|'.'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'.'
name|'lineReceived'
op|'('
name|'l'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'m'
op|'.'
name|'eomReceived'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestFileAlias'
op|','
name|'tmpfile'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestFileAlias
dedent|''
name|'def'
name|'_cbTestFileAlias'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'tmpfile'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lines'
op|'='
name|'file'
op|'('
name|'tmpfile'
op|')'
op|'.'
name|'readlines'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
name|'L'
op|'['
op|':'
op|'-'
number|'1'
op|']'
name|'for'
name|'L'
name|'in'
name|'lines'
op|']'
op|','
name|'self'
op|'.'
name|'lines'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyProcess
dedent|''
dedent|''
name|'class'
name|'DummyProcess'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|__slots__
indent|'    '
name|'__slots__'
op|'='
op|'['
string|"'onEnd'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockProcessAlias
dedent|''
name|'class'
name|'MockProcessAlias'
op|'('
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'ProcessAlias'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A alias processor that doesn\'t actually launch processes.\n    """'
newline|'\n'
nl|'\n'
DECL|member|spawnProcess
name|'def'
name|'spawnProcess'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'program'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Don\'t spawn a process.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockAliasGroup
dedent|''
dedent|''
name|'class'
name|'MockAliasGroup'
op|'('
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'AliasGroup'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An alias group using C{MockProcessAlias}.\n    """'
newline|'\n'
DECL|variable|processAliasFactory
name|'processAliasFactory'
op|'='
name|'MockProcessAlias'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StubProcess
dedent|''
name|'class'
name|'StubProcess'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Fake implementation of L{IProcessTransport}.\n\n    @ivar signals: A list of all the signals which have been sent to this fake\n        process.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'signals'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        No-op implementation of disconnection.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|signalProcess
dedent|''
name|'def'
name|'signalProcess'
op|'('
name|'self'
op|','
name|'signal'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record a signal sent to this process for later inspection.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'signals'
op|'.'
name|'append'
op|'('
name|'signal'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProcessAliasTestCase
dedent|''
dedent|''
name|'class'
name|'ProcessAliasTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for alias resolution.\n    """'
newline|'\n'
name|'if'
name|'interfaces'
op|'.'
name|'IReactorProcess'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"IReactorProcess not supported"'
newline|'\n'
nl|'\n'
DECL|variable|lines
dedent|''
name|'lines'
op|'='
op|'['
nl|'\n'
string|"'First line'"
op|','
nl|'\n'
string|"'Next line'"
op|','
nl|'\n'
string|"''"
op|','
nl|'\n'
string|"'After a blank line'"
op|','
nl|'\n'
string|"'Last line'"
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|exitStatus
name|'def'
name|'exitStatus'
op|'('
name|'self'
op|','
name|'code'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Construct a status from the given exit code.\n\n        @type code: L{int} between 0 and 255 inclusive.\n        @param code: The exit status which the code will represent.\n\n        @rtype: L{int}\n        @return: A status integer for the given exit code.\n        """'
newline|'\n'
comment|'# /* Macros for constructing status values.  */'
nl|'\n'
comment|'# #define __W_EXITCODE(ret, sig)  ((ret) << 8 | (sig))'
nl|'\n'
name|'status'
op|'='
op|'('
name|'code'
op|'<<'
number|'8'
op|')'
op|'|'
number|'0'
newline|'\n'
nl|'\n'
comment|'# Sanity check'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'WIFEXITED'
op|'('
name|'status'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'os'
op|'.'
name|'WEXITSTATUS'
op|'('
name|'status'
op|')'
op|','
name|'code'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'WIFSIGNALED'
op|'('
name|'status'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'status'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|signalStatus
dedent|''
name|'def'
name|'signalStatus'
op|'('
name|'self'
op|','
name|'signal'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Construct a status from the given signal.\n\n        @type signal: L{int} between 0 and 255 inclusive.\n        @param signal: The signal number which the status will represent.\n\n        @rtype: L{int}\n        @return: A status integer for the given signal.\n        """'
newline|'\n'
comment|'# /* If WIFSIGNALED(STATUS), the terminating signal.  */'
nl|'\n'
comment|'# #define __WTERMSIG(status)      ((status) & 0x7f)'
nl|'\n'
comment|'# /* Nonzero if STATUS indicates termination by a signal.  */'
nl|'\n'
comment|'# #define __WIFSIGNALED(status) \\'
nl|'\n'
comment|'#    (((signed char) (((status) & 0x7f) + 1) >> 1) > 0)'
nl|'\n'
name|'status'
op|'='
name|'signal'
newline|'\n'
nl|'\n'
comment|'# Sanity check'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'WIFSIGNALED'
op|'('
name|'status'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'os'
op|'.'
name|'WTERMSIG'
op|'('
name|'status'
op|')'
op|','
name|'signal'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'WIFEXITED'
op|'('
name|'status'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'status'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Replace L{smtp.DNSNAME} with a well-known value.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'DNSNAME'
op|'='
name|'smtp'
op|'.'
name|'DNSNAME'
newline|'\n'
name|'smtp'
op|'.'
name|'DNSNAME'
op|'='
string|"''"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Restore the original value of L{smtp.DNSNAME}.\n        """'
newline|'\n'
name|'smtp'
op|'.'
name|'DNSNAME'
op|'='
name|'self'
op|'.'
name|'DNSNAME'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_processAlias
dedent|''
name|'def'
name|'test_processAlias'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Standard call to C{mail.alias.ProcessAlias}: check that the specified\n        script is called, and that the input is correctly transferred to it.\n        """'
newline|'\n'
name|'sh'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'sh'
op|'.'
name|'setContent'
op|'('
string|'"""\\\n#!/bin/sh\nrm -f process.alias.out\nwhile read i; do\n    echo $i >> process.alias.out\ndone"""'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
name|'sh'
op|'.'
name|'path'
op|','
number|'0700'
op|')'
newline|'\n'
name|'a'
op|'='
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'ProcessAlias'
op|'('
name|'sh'
op|'.'
name|'path'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'m'
op|'='
name|'a'
op|'.'
name|'createMessageReceiver'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'l'
name|'in'
name|'self'
op|'.'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'.'
name|'lineReceived'
op|'('
name|'l'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_cbProcessAlias
dedent|''
name|'def'
name|'_cbProcessAlias'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'lines'
op|'='
name|'file'
op|'('
string|"'process.alias.out'"
op|')'
op|'.'
name|'readlines'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
name|'L'
op|'['
op|':'
op|'-'
number|'1'
op|']'
name|'for'
name|'L'
name|'in'
name|'lines'
op|']'
op|','
name|'self'
op|'.'
name|'lines'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'m'
op|'.'
name|'eomReceived'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'_cbProcessAlias'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_processAliasTimeout
dedent|''
name|'def'
name|'test_processAliasTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the alias child process does not exit within a particular period of\n        time, the L{Deferred} returned by L{MessageWrapper.eomReceived} should\n        fail with L{ProcessAliasTimeout} and send the I{KILL} signal to the\n        child process..\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'transport'
op|'='
name|'StubProcess'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'='
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'ProcessAliasProtocol'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
nl|'\n'
name|'receiver'
op|'='
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'MessageWrapper'
op|'('
name|'proto'
op|','
name|'None'
op|','
name|'reactor'
op|')'
newline|'\n'
name|'d'
op|'='
name|'receiver'
op|'.'
name|'eomReceived'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'advance'
op|'('
name|'receiver'
op|'.'
name|'completionTimeout'
op|')'
newline|'\n'
DECL|function|timedOut
name|'def'
name|'timedOut'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'transport'
op|'.'
name|'signals'
op|','
op|'['
string|"'KILL'"
op|']'
op|')'
newline|'\n'
comment|'# Now that it has been killed, disconnect the protocol associated'
nl|'\n'
comment|'# with it.'
nl|'\n'
name|'proto'
op|'.'
name|'processEnded'
op|'('
nl|'\n'
name|'ProcessTerminated'
op|'('
name|'self'
op|'.'
name|'signalStatus'
op|'('
name|'signal'
op|'.'
name|'SIGKILL'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'ProcessAliasTimeout'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'timedOut'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_earlyProcessTermination
dedent|''
name|'def'
name|'test_earlyProcessTermination'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the process associated with an L{mail.alias.MessageWrapper} exits\n        before I{eomReceived} is called, the L{Deferred} returned by\n        I{eomReceived} should fail.\n        """'
newline|'\n'
name|'transport'
op|'='
name|'StubProcess'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'ProcessAliasProtocol'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'receiver'
op|'='
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'MessageWrapper'
op|'('
name|'protocol'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'processEnded'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'ProcessDone'
op|'('
number|'0'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'receiver'
op|'.'
name|'eomReceived'
op|'('
op|')'
op|','
name|'ProcessDone'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_terminationTest
dedent|''
name|'def'
name|'_terminationTest'
op|'('
name|'self'
op|','
name|'status'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that if the process associated with an\n        L{mail.alias.MessageWrapper} exits with the given status, the\n        L{Deferred} returned by I{eomReceived} fails with L{ProcessTerminated}.\n        """'
newline|'\n'
name|'transport'
op|'='
name|'StubProcess'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'ProcessAliasProtocol'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'receiver'
op|'='
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'MessageWrapper'
op|'('
name|'protocol'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'processEnded'
op|'('
nl|'\n'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'ProcessTerminated'
op|'('
name|'status'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'receiver'
op|'.'
name|'eomReceived'
op|'('
op|')'
op|','
name|'ProcessTerminated'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_errorProcessTermination
dedent|''
name|'def'
name|'test_errorProcessTermination'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the process associated with an L{mail.alias.MessageWrapper} exits\n        with a non-zero exit code, the L{Deferred} returned by I{eomReceived}\n        should fail.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_terminationTest'
op|'('
name|'self'
op|'.'
name|'exitStatus'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_signalProcessTermination
dedent|''
name|'def'
name|'test_signalProcessTermination'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the process associated with an L{mail.alias.MessageWrapper} exits\n        because it received a signal, the L{Deferred} returned by\n        I{eomReceived} should fail.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_terminationTest'
op|'('
name|'self'
op|'.'
name|'signalStatus'
op|'('
name|'signal'
op|'.'
name|'SIGHUP'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_aliasResolution
dedent|''
name|'def'
name|'test_aliasResolution'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that the C{resolve} method of alias processors produce the correct\n        set of objects:\n            - direct alias with L{mail.alias.AddressAlias} if a simple input is passed\n            - aliases in a file with L{mail.alias.FileWrapper} if an input in the format\n              \'/file\' is given\n            - aliases resulting of a process call wrapped by L{mail.alias.MessageWrapper}\n              if the format is \'|process\'\n        """'
newline|'\n'
name|'aliases'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'domain'
op|'='
op|'{'
string|"''"
op|':'
name|'TestDomain'
op|'('
name|'aliases'
op|','
op|'['
string|"'user1'"
op|','
string|"'user2'"
op|','
string|"'user3'"
op|']'
op|')'
op|'}'
newline|'\n'
name|'A1'
op|'='
name|'MockAliasGroup'
op|'('
op|'['
string|"'user1'"
op|','
string|"'|echo'"
op|','
string|"'/file'"
op|']'
op|','
name|'domain'
op|','
string|"'alias1'"
op|')'
newline|'\n'
name|'A2'
op|'='
name|'MockAliasGroup'
op|'('
op|'['
string|"'user2'"
op|','
string|"'user3'"
op|']'
op|','
name|'domain'
op|','
string|"'alias2'"
op|')'
newline|'\n'
name|'A3'
op|'='
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'AddressAlias'
op|'('
string|"'alias1'"
op|','
name|'domain'
op|','
string|"'alias3'"
op|')'
newline|'\n'
name|'aliases'
op|'.'
name|'update'
op|'('
op|'{'
nl|'\n'
string|"'alias1'"
op|':'
name|'A1'
op|','
nl|'\n'
string|"'alias2'"
op|':'
name|'A2'
op|','
nl|'\n'
string|"'alias3'"
op|':'
name|'A3'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'res1'
op|'='
name|'A1'
op|'.'
name|'resolve'
op|'('
name|'aliases'
op|')'
newline|'\n'
name|'r1'
op|'='
name|'map'
op|'('
name|'str'
op|','
name|'res1'
op|'.'
name|'objs'
op|')'
newline|'\n'
name|'r1'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
name|'map'
op|'('
name|'str'
op|','
op|'['
nl|'\n'
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'AddressAlias'
op|'('
string|"'user1'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'MessageWrapper'
op|'('
name|'DummyProcess'
op|'('
op|')'
op|','
string|"'echo'"
op|')'
op|','
nl|'\n'
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'FileWrapper'
op|'('
string|"'/file'"
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'expected'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'r1'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
name|'res2'
op|'='
name|'A2'
op|'.'
name|'resolve'
op|'('
name|'aliases'
op|')'
newline|'\n'
name|'r2'
op|'='
name|'map'
op|'('
name|'str'
op|','
name|'res2'
op|'.'
name|'objs'
op|')'
newline|'\n'
name|'r2'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
name|'map'
op|'('
name|'str'
op|','
op|'['
nl|'\n'
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'AddressAlias'
op|'('
string|"'user2'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'AddressAlias'
op|'('
string|"'user3'"
op|','
name|'None'
op|','
name|'None'
op|')'
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'expected'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'r2'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
name|'res3'
op|'='
name|'A3'
op|'.'
name|'resolve'
op|'('
name|'aliases'
op|')'
newline|'\n'
name|'r3'
op|'='
name|'map'
op|'('
name|'str'
op|','
name|'res3'
op|'.'
name|'objs'
op|')'
newline|'\n'
name|'r3'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
name|'map'
op|'('
name|'str'
op|','
op|'['
nl|'\n'
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'AddressAlias'
op|'('
string|"'user1'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'MessageWrapper'
op|'('
name|'DummyProcess'
op|'('
op|')'
op|','
string|"'echo'"
op|')'
op|','
nl|'\n'
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'FileWrapper'
op|'('
string|"'/file'"
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'expected'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'r3'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cyclicAlias
dedent|''
name|'def'
name|'test_cyclicAlias'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that a cycle in alias resolution is correctly handled.\n        """'
newline|'\n'
name|'aliases'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'domain'
op|'='
op|'{'
string|"''"
op|':'
name|'TestDomain'
op|'('
name|'aliases'
op|','
op|'['
op|']'
op|')'
op|'}'
newline|'\n'
name|'A1'
op|'='
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'AddressAlias'
op|'('
string|"'alias2'"
op|','
name|'domain'
op|','
string|"'alias1'"
op|')'
newline|'\n'
name|'A2'
op|'='
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'AddressAlias'
op|'('
string|"'alias3'"
op|','
name|'domain'
op|','
string|"'alias2'"
op|')'
newline|'\n'
name|'A3'
op|'='
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'AddressAlias'
op|'('
string|"'alias1'"
op|','
name|'domain'
op|','
string|"'alias3'"
op|')'
newline|'\n'
name|'aliases'
op|'.'
name|'update'
op|'('
op|'{'
nl|'\n'
string|"'alias1'"
op|':'
name|'A1'
op|','
nl|'\n'
string|"'alias2'"
op|':'
name|'A2'
op|','
nl|'\n'
string|"'alias3'"
op|':'
name|'A3'
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'aliases'
op|'['
string|"'alias1'"
op|']'
op|'.'
name|'resolve'
op|'('
name|'aliases'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'aliases'
op|'['
string|"'alias2'"
op|']'
op|'.'
name|'resolve'
op|'('
name|'aliases'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'aliases'
op|'['
string|"'alias3'"
op|']'
op|'.'
name|'resolve'
op|'('
name|'aliases'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'A4'
op|'='
name|'MockAliasGroup'
op|'('
op|'['
string|"'|echo'"
op|','
string|"'alias1'"
op|']'
op|','
name|'domain'
op|','
string|"'alias4'"
op|')'
newline|'\n'
name|'aliases'
op|'['
string|"'alias4'"
op|']'
op|'='
name|'A4'
newline|'\n'
nl|'\n'
name|'res'
op|'='
name|'A4'
op|'.'
name|'resolve'
op|'('
name|'aliases'
op|')'
newline|'\n'
name|'r'
op|'='
name|'map'
op|'('
name|'str'
op|','
name|'res'
op|'.'
name|'objs'
op|')'
newline|'\n'
name|'r'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
name|'map'
op|'('
name|'str'
op|','
op|'['
nl|'\n'
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'MessageWrapper'
op|'('
name|'DummyProcess'
op|'('
op|')'
op|','
string|"'echo'"
op|')'
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'expected'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'r'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestDomain
dedent|''
dedent|''
name|'class'
name|'TestDomain'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'aliases'
op|','
name|'users'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'aliases'
op|'='
name|'aliases'
newline|'\n'
name|'self'
op|'.'
name|'users'
op|'='
name|'users'
newline|'\n'
nl|'\n'
DECL|member|exists
dedent|''
name|'def'
name|'exists'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'memo'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user'
op|'='
name|'user'
op|'.'
name|'dest'
op|'.'
name|'local'
newline|'\n'
name|'if'
name|'user'
name|'in'
name|'self'
op|'.'
name|'users'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'lambda'
op|':'
name|'mail'
op|'.'
name|'alias'
op|'.'
name|'AddressAlias'
op|'('
name|'user'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'a'
op|'='
name|'self'
op|'.'
name|'aliases'
op|'['
name|'user'
op|']'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'smtp'
op|'.'
name|'SMTPBadRcpt'
op|'('
name|'user'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'aliases'
op|'='
name|'a'
op|'.'
name|'resolve'
op|'('
name|'self'
op|'.'
name|'aliases'
op|','
name|'memo'
op|')'
newline|'\n'
name|'if'
name|'aliases'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'lambda'
op|':'
name|'aliases'
newline|'\n'
dedent|''
name|'raise'
name|'smtp'
op|'.'
name|'SMTPBadRcpt'
op|'('
name|'user'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'runtime'
name|'import'
name|'platformType'
newline|'\n'
name|'import'
name|'types'
newline|'\n'
name|'if'
name|'platformType'
op|'!='
string|'"posix"'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'o'
name|'in'
name|'locals'
op|'('
op|')'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'o'
op|','
op|'('
name|'types'
op|'.'
name|'ClassType'
op|','
name|'type'
op|')'
op|')'
name|'and'
name|'issubclass'
op|'('
name|'o'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'o'
op|'.'
name|'skip'
op|'='
string|'"twisted.mail only works on posix"'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.mail.test.test_imap -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nTest case for twisted.mail.imap4\n"""'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'StringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
dedent|''
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'types'
newline|'\n'
name|'import'
name|'codecs'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'mail'
op|'.'
name|'imap4'
name|'import'
name|'MessageSet'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'mail'
name|'import'
name|'imap4'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'loopback'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'interfaces'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'task'
name|'import'
name|'Clock'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
name|'import'
name|'cred'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'error'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'checkers'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'portal'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'StringTransport'
op|','
name|'StringTransportWithDisconnection'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'ssl_helpers'
name|'import'
name|'ClientTLSContext'
op|','
name|'ServerTLSContext'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'ClientTLSContext'
op|'='
name|'ServerTLSContext'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|strip
dedent|''
name|'def'
name|'strip'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'lambda'
name|'result'
op|','
name|'f'
op|'='
name|'f'
op|':'
name|'f'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|sortNest
dedent|''
name|'def'
name|'sortNest'
op|'('
name|'l'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'l'
op|'='
name|'l'
op|'['
op|':'
op|']'
newline|'\n'
name|'l'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'l'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'l'
op|'['
name|'i'
op|']'
op|','
name|'types'
op|'.'
name|'ListType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'['
name|'i'
op|']'
op|'='
name|'sortNest'
op|'('
name|'l'
op|'['
name|'i'
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'l'
op|'['
name|'i'
op|']'
op|','
name|'types'
op|'.'
name|'TupleType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'['
name|'i'
op|']'
op|'='
name|'tuple'
op|'('
name|'sortNest'
op|'('
name|'list'
op|'('
name|'l'
op|'['
name|'i'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'l'
newline|'\n'
nl|'\n'
DECL|class|IMAP4UTF7TestCase
dedent|''
name|'class'
name|'IMAP4UTF7TestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|tests
indent|'    '
name|'tests'
op|'='
op|'['
nl|'\n'
op|'['
string|"u'Hello world'"
op|','
string|"'Hello world'"
op|']'
op|','
nl|'\n'
op|'['
string|"u'Hello & world'"
op|','
string|"'Hello &- world'"
op|']'
op|','
nl|'\n'
op|'['
string|"u'Hello\\xffworld'"
op|','
string|"'Hello&AP8-world'"
op|']'
op|','
nl|'\n'
op|'['
string|"u'\\xff\\xfe\\xfd\\xfc'"
op|','
string|"'&AP8A,gD9APw-'"
op|']'
op|','
nl|'\n'
op|'['
string|"u'~peter/mail/\\u65e5\\u672c\\u8a9e/\\u53f0\\u5317'"
op|','
nl|'\n'
string|"'~peter/mail/&ZeVnLIqe-/&U,BTFw-'"
op|']'
op|','
comment|'# example from RFC 2060'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_encodeWithErrors
name|'def'
name|'test_encodeWithErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Specifying an error policy to C{unicode.encode} with the\n        I{imap4-utf-7} codec should produce the same result as not\n        specifying the error policy.\n        """'
newline|'\n'
name|'text'
op|'='
string|"u'Hello world'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'text'
op|'.'
name|'encode'
op|'('
string|"'imap4-utf-7'"
op|','
string|"'strict'"
op|')'
op|','
nl|'\n'
name|'text'
op|'.'
name|'encode'
op|'('
string|"'imap4-utf-7'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_decodeWithErrors
dedent|''
name|'def'
name|'test_decodeWithErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Similar to L{test_encodeWithErrors}, but for C{str.decode}.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|"'Hello world'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'bytes'
op|'.'
name|'decode'
op|'('
string|"'imap4-utf-7'"
op|','
string|"'strict'"
op|')'
op|','
nl|'\n'
name|'bytes'
op|'.'
name|'decode'
op|'('
string|"'imap4-utf-7'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getreader
dedent|''
name|'def'
name|'test_getreader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{codecs.getreader(\'imap4-utf-7\')} returns the I{imap4-utf-7} stream\n        reader class.\n        """'
newline|'\n'
name|'reader'
op|'='
name|'codecs'
op|'.'
name|'getreader'
op|'('
string|"'imap4-utf-7'"
op|')'
op|'('
name|'StringIO'
op|'('
string|"'Hello&AP8-world'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reader'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|"u'Hello\\xffworld'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getwriter
dedent|''
name|'def'
name|'test_getwriter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{codecs.getwriter(\'imap4-utf-7\')} returns the I{imap4-utf-7} stream\n        writer class.\n        """'
newline|'\n'
name|'output'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'writer'
op|'='
name|'codecs'
op|'.'
name|'getwriter'
op|'('
string|"'imap4-utf-7'"
op|')'
op|'('
name|'output'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
string|"u'Hello\\xffworld'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'output'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'Hello&AP8-world'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_encode
dedent|''
name|'def'
name|'test_encode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The I{imap4-utf-7} can be used to encode a unicode string into a byte\n        string according to the IMAP4 modified UTF-7 encoding rules.\n        """'
newline|'\n'
name|'for'
op|'('
name|'input'
op|','
name|'output'
op|')'
name|'in'
name|'self'
op|'.'
name|'tests'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'input'
op|'.'
name|'encode'
op|'('
string|"'imap4-utf-7'"
op|')'
op|','
name|'output'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_decode
dedent|''
dedent|''
name|'def'
name|'test_decode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The I{imap4-utf-7} can be used to decode a byte string into a unicode\n        string according to the IMAP4 modified UTF-7 encoding rules.\n        """'
newline|'\n'
name|'for'
op|'('
name|'input'
op|','
name|'output'
op|')'
name|'in'
name|'self'
op|'.'
name|'tests'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'input'
op|','
name|'output'
op|'.'
name|'decode'
op|'('
string|"'imap4-utf-7'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_printableSingletons
dedent|''
dedent|''
name|'def'
name|'test_printableSingletons'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The IMAP4 modified UTF-7 implementation encodes all printable\n        characters which are in ASCII using the corresponding ASCII byte.\n        """'
newline|'\n'
comment|'# All printables represent themselves'
nl|'\n'
name|'for'
name|'o'
name|'in'
name|'range'
op|'('
number|'0x20'
op|','
number|'0x26'
op|')'
op|'+'
name|'range'
op|'('
number|'0x27'
op|','
number|'0x7f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'chr'
op|'('
name|'o'
op|')'
op|','
name|'chr'
op|'('
name|'o'
op|')'
op|'.'
name|'encode'
op|'('
string|"'imap4-utf-7'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'chr'
op|'('
name|'o'
op|')'
op|','
name|'chr'
op|'('
name|'o'
op|')'
op|'.'
name|'decode'
op|'('
string|"'imap4-utf-7'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
string|"'&'"
op|'.'
name|'encode'
op|'('
string|"'imap4-utf-7'"
op|')'
op|','
string|"'&-'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
string|"'&-'"
op|'.'
name|'decode'
op|'('
string|"'imap4-utf-7'"
op|')'
op|','
string|"'&'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BufferingConsumer
dedent|''
dedent|''
name|'class'
name|'BufferingConsumer'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'.'
name|'append'
op|'('
name|'bytes'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'consumer'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|registerProducer
dedent|''
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'consumer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'consumer'
op|'='
name|'consumer'
newline|'\n'
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'consumer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|class|MessageProducerTestCase
dedent|''
dedent|''
name|'class'
name|'MessageProducerTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testSinglePart
indent|'    '
name|'def'
name|'testSinglePart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'body'
op|'='
string|"'This is body text.  Rar.'"
newline|'\n'
name|'headers'
op|'='
name|'util'
op|'.'
name|'OrderedDict'
op|'('
op|')'
newline|'\n'
name|'headers'
op|'['
string|"'from'"
op|']'
op|'='
string|"'sender@host'"
newline|'\n'
name|'headers'
op|'['
string|"'to'"
op|']'
op|'='
string|"'recipient@domain'"
newline|'\n'
name|'headers'
op|'['
string|"'subject'"
op|']'
op|'='
string|"'booga booga boo'"
newline|'\n'
name|'headers'
op|'['
string|"'content-type'"
op|']'
op|'='
string|"'text/plain'"
newline|'\n'
nl|'\n'
name|'msg'
op|'='
name|'FakeyMessage'
op|'('
name|'headers'
op|','
op|'('
op|')'
op|','
name|'None'
op|','
name|'body'
op|','
number|'123'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'c'
op|'='
name|'BufferingConsumer'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'imap4'
op|'.'
name|'MessageProducer'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'beginProducing'
op|'('
name|'c'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbProduced
name|'def'
name|'cbProduced'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'result'
op|','
name|'p'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'c'
op|'.'
name|'buffer'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'{119}\\r\\n'"
nl|'\n'
string|"'From: sender@host\\r\\n'"
nl|'\n'
string|"'To: recipient@domain\\r\\n'"
nl|'\n'
string|"'Subject: booga booga boo\\r\\n'"
nl|'\n'
string|"'Content-Type: text/plain\\r\\n'"
nl|'\n'
string|"'\\r\\n'"
nl|'\n'
op|'+'
name|'body'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbProduced'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testSingleMultiPart
dedent|''
name|'def'
name|'testSingleMultiPart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'outerBody'
op|'='
string|"''"
newline|'\n'
name|'innerBody'
op|'='
string|"'Contained body message text.  Squarge.'"
newline|'\n'
name|'headers'
op|'='
name|'util'
op|'.'
name|'OrderedDict'
op|'('
op|')'
newline|'\n'
name|'headers'
op|'['
string|"'from'"
op|']'
op|'='
string|"'sender@host'"
newline|'\n'
name|'headers'
op|'['
string|"'to'"
op|']'
op|'='
string|"'recipient@domain'"
newline|'\n'
name|'headers'
op|'['
string|"'subject'"
op|']'
op|'='
string|"'booga booga boo'"
newline|'\n'
name|'headers'
op|'['
string|"'content-type'"
op|']'
op|'='
string|'\'multipart/alternative; boundary="xyz"\''
newline|'\n'
nl|'\n'
name|'innerHeaders'
op|'='
name|'util'
op|'.'
name|'OrderedDict'
op|'('
op|')'
newline|'\n'
name|'innerHeaders'
op|'['
string|"'subject'"
op|']'
op|'='
string|"'this is subject text'"
newline|'\n'
name|'innerHeaders'
op|'['
string|"'content-type'"
op|']'
op|'='
string|"'text/plain'"
newline|'\n'
name|'msg'
op|'='
name|'FakeyMessage'
op|'('
name|'headers'
op|','
op|'('
op|')'
op|','
name|'None'
op|','
name|'outerBody'
op|','
number|'123'
op|','
nl|'\n'
op|'['
name|'FakeyMessage'
op|'('
name|'innerHeaders'
op|','
op|'('
op|')'
op|','
name|'None'
op|','
name|'innerBody'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|')'
op|']'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'c'
op|'='
name|'BufferingConsumer'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'imap4'
op|'.'
name|'MessageProducer'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'beginProducing'
op|'('
name|'c'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbProduced
name|'def'
name|'cbProduced'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnlessIdentical'
op|'('
name|'result'
op|','
name|'p'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'c'
op|'.'
name|'buffer'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'{239}\\r\\n'"
nl|'\n'
string|"'From: sender@host\\r\\n'"
nl|'\n'
string|"'To: recipient@domain\\r\\n'"
nl|'\n'
string|"'Subject: booga booga boo\\r\\n'"
nl|'\n'
string|'\'Content-Type: multipart/alternative; boundary="xyz"\\r\\n\''
nl|'\n'
string|"'\\r\\n'"
nl|'\n'
string|"'\\r\\n'"
nl|'\n'
string|"'--xyz\\r\\n'"
nl|'\n'
string|"'Subject: this is subject text\\r\\n'"
nl|'\n'
string|"'Content-Type: text/plain\\r\\n'"
nl|'\n'
string|"'\\r\\n'"
nl|'\n'
op|'+'
name|'innerBody'
nl|'\n'
op|'+'
string|"'\\r\\n--xyz--\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbProduced'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testMultipleMultiPart
dedent|''
name|'def'
name|'testMultipleMultiPart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'outerBody'
op|'='
string|"''"
newline|'\n'
name|'innerBody1'
op|'='
string|"'Contained body message text.  Squarge.'"
newline|'\n'
name|'innerBody2'
op|'='
string|"'Secondary <i>message</i> text of squarge body.'"
newline|'\n'
name|'headers'
op|'='
name|'util'
op|'.'
name|'OrderedDict'
op|'('
op|')'
newline|'\n'
name|'headers'
op|'['
string|"'from'"
op|']'
op|'='
string|"'sender@host'"
newline|'\n'
name|'headers'
op|'['
string|"'to'"
op|']'
op|'='
string|"'recipient@domain'"
newline|'\n'
name|'headers'
op|'['
string|"'subject'"
op|']'
op|'='
string|"'booga booga boo'"
newline|'\n'
name|'headers'
op|'['
string|"'content-type'"
op|']'
op|'='
string|'\'multipart/alternative; boundary="xyz"\''
newline|'\n'
name|'innerHeaders'
op|'='
name|'util'
op|'.'
name|'OrderedDict'
op|'('
op|')'
newline|'\n'
name|'innerHeaders'
op|'['
string|"'subject'"
op|']'
op|'='
string|"'this is subject text'"
newline|'\n'
name|'innerHeaders'
op|'['
string|"'content-type'"
op|']'
op|'='
string|"'text/plain'"
newline|'\n'
name|'innerHeaders2'
op|'='
name|'util'
op|'.'
name|'OrderedDict'
op|'('
op|')'
newline|'\n'
name|'innerHeaders2'
op|'['
string|"'subject'"
op|']'
op|'='
string|"'<b>this is subject</b>'"
newline|'\n'
name|'innerHeaders2'
op|'['
string|"'content-type'"
op|']'
op|'='
string|"'text/html'"
newline|'\n'
name|'msg'
op|'='
name|'FakeyMessage'
op|'('
name|'headers'
op|','
op|'('
op|')'
op|','
name|'None'
op|','
name|'outerBody'
op|','
number|'123'
op|','
op|'['
nl|'\n'
name|'FakeyMessage'
op|'('
name|'innerHeaders'
op|','
op|'('
op|')'
op|','
name|'None'
op|','
name|'innerBody1'
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'FakeyMessage'
op|'('
name|'innerHeaders2'
op|','
op|'('
op|')'
op|','
name|'None'
op|','
name|'innerBody2'
op|','
name|'None'
op|','
name|'None'
op|')'
nl|'\n'
op|']'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'c'
op|'='
name|'BufferingConsumer'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'imap4'
op|'.'
name|'MessageProducer'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'beginProducing'
op|'('
name|'c'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbProduced
name|'def'
name|'cbProduced'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnlessIdentical'
op|'('
name|'result'
op|','
name|'p'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'c'
op|'.'
name|'buffer'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'{354}\\r\\n'"
nl|'\n'
string|"'From: sender@host\\r\\n'"
nl|'\n'
string|"'To: recipient@domain\\r\\n'"
nl|'\n'
string|"'Subject: booga booga boo\\r\\n'"
nl|'\n'
string|'\'Content-Type: multipart/alternative; boundary="xyz"\\r\\n\''
nl|'\n'
string|"'\\r\\n'"
nl|'\n'
string|"'\\r\\n'"
nl|'\n'
string|"'--xyz\\r\\n'"
nl|'\n'
string|"'Subject: this is subject text\\r\\n'"
nl|'\n'
string|"'Content-Type: text/plain\\r\\n'"
nl|'\n'
string|"'\\r\\n'"
nl|'\n'
op|'+'
name|'innerBody1'
nl|'\n'
op|'+'
string|"'\\r\\n--xyz\\r\\n'"
nl|'\n'
string|"'Subject: <b>this is subject</b>\\r\\n'"
nl|'\n'
string|"'Content-Type: text/html\\r\\n'"
nl|'\n'
string|"'\\r\\n'"
nl|'\n'
op|'+'
name|'innerBody2'
nl|'\n'
op|'+'
string|"'\\r\\n--xyz--\\r\\n'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbProduced'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IMAP4HelperTestCase
dedent|''
dedent|''
name|'class'
name|'IMAP4HelperTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testFileProducer
indent|'    '
name|'def'
name|'testFileProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'b'
op|'='
op|'('
op|'('
string|"'x'"
op|'*'
number|'1'
op|')'
op|'+'
op|'('
string|"'y'"
op|'*'
number|'1'
op|')'
op|'+'
op|'('
string|"'z'"
op|'*'
number|'1'
op|')'
op|')'
op|'*'
number|'10'
newline|'\n'
name|'c'
op|'='
name|'BufferingConsumer'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'StringIO'
op|'('
name|'b'
op|')'
newline|'\n'
name|'p'
op|'='
name|'imap4'
op|'.'
name|'FileProducer'
op|'('
name|'f'
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'beginProducing'
op|'('
name|'c'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbProduced
name|'def'
name|'cbProduced'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnlessIdentical'
op|'('
name|'result'
op|','
name|'p'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
op|'('
string|"'{%d}\\r\\n'"
op|'%'
name|'len'
op|'('
name|'b'
op|')'
op|')'
op|'+'
name|'b'
op|','
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'c'
op|'.'
name|'buffer'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbProduced'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testWildcard
dedent|''
name|'def'
name|'testWildcard'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cases'
op|'='
op|'['
nl|'\n'
op|'['
string|"'foo/%gum/bar'"
op|','
nl|'\n'
op|'['
string|"'foo/bar'"
op|','
string|"'oo/lalagum/bar'"
op|','
string|"'foo/gumx/bar'"
op|','
string|"'foo/gum/baz'"
op|']'
op|','
nl|'\n'
op|'['
string|"'foo/xgum/bar'"
op|','
string|"'foo/gum/bar'"
op|']'
op|','
nl|'\n'
op|']'
op|','
op|'['
string|"'foo/x%x/bar'"
op|','
nl|'\n'
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|','
string|"'fuz fuz fuz'"
op|','
string|"'foo/*/bar'"
op|','
string|"'foo/xyz/bar'"
op|','
string|"'foo/xx/baz'"
op|']'
op|','
nl|'\n'
op|'['
string|"'foo/xyx/bar'"
op|','
string|"'foo/xx/bar'"
op|','
string|"'foo/xxxxxxxxxxxxxx/bar'"
op|']'
op|','
nl|'\n'
op|']'
op|','
op|'['
string|"'foo/xyz*abc/bar'"
op|','
nl|'\n'
op|'['
string|"'foo/xyz/bar'"
op|','
string|"'foo/abc/bar'"
op|','
string|"'foo/xyzab/cbar'"
op|','
string|"'foo/xyza/bcbar'"
op|']'
op|','
nl|'\n'
op|'['
string|"'foo/xyzabc/bar'"
op|','
string|"'foo/xyz/abc/bar'"
op|','
string|"'foo/xyz/123/abc/bar'"
op|']'
op|','
nl|'\n'
op|']'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'wildcard'
op|','
name|'fail'
op|','
name|'succeed'
op|')'
name|'in'
name|'cases'
op|':'
newline|'\n'
indent|'            '
name|'wildcard'
op|'='
name|'imap4'
op|'.'
name|'wildcardToRegexp'
op|'('
name|'wildcard'
op|','
string|"'/'"
op|')'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'fail'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'wildcard'
op|'.'
name|'match'
op|'('
name|'x'
op|')'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'x'
name|'in'
name|'succeed'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'wildcard'
op|'.'
name|'match'
op|'('
name|'x'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testWildcardNoDelim
dedent|''
dedent|''
dedent|''
name|'def'
name|'testWildcardNoDelim'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cases'
op|'='
op|'['
nl|'\n'
op|'['
string|"'foo/%gum/bar'"
op|','
nl|'\n'
op|'['
string|"'foo/bar'"
op|','
string|"'oo/lalagum/bar'"
op|','
string|"'foo/gumx/bar'"
op|','
string|"'foo/gum/baz'"
op|']'
op|','
nl|'\n'
op|'['
string|"'foo/xgum/bar'"
op|','
string|"'foo/gum/bar'"
op|','
string|"'foo/x/gum/bar'"
op|']'
op|','
nl|'\n'
op|']'
op|','
op|'['
string|"'foo/x%x/bar'"
op|','
nl|'\n'
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|','
string|"'fuz fuz fuz'"
op|','
string|"'foo/*/bar'"
op|','
string|"'foo/xyz/bar'"
op|','
string|"'foo/xx/baz'"
op|']'
op|','
nl|'\n'
op|'['
string|"'foo/xyx/bar'"
op|','
string|"'foo/xx/bar'"
op|','
string|"'foo/xxxxxxxxxxxxxx/bar'"
op|','
string|"'foo/x/x/bar'"
op|']'
op|','
nl|'\n'
op|']'
op|','
op|'['
string|"'foo/xyz*abc/bar'"
op|','
nl|'\n'
op|'['
string|"'foo/xyz/bar'"
op|','
string|"'foo/abc/bar'"
op|','
string|"'foo/xyzab/cbar'"
op|','
string|"'foo/xyza/bcbar'"
op|']'
op|','
nl|'\n'
op|'['
string|"'foo/xyzabc/bar'"
op|','
string|"'foo/xyz/abc/bar'"
op|','
string|"'foo/xyz/123/abc/bar'"
op|']'
op|','
nl|'\n'
op|']'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'wildcard'
op|','
name|'fail'
op|','
name|'succeed'
op|')'
name|'in'
name|'cases'
op|':'
newline|'\n'
indent|'            '
name|'wildcard'
op|'='
name|'imap4'
op|'.'
name|'wildcardToRegexp'
op|'('
name|'wildcard'
op|','
name|'None'
op|')'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'fail'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'wildcard'
op|'.'
name|'match'
op|'('
name|'x'
op|')'
op|','
name|'x'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'x'
name|'in'
name|'succeed'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'wildcard'
op|'.'
name|'match'
op|'('
name|'x'
op|')'
op|','
name|'x'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testHeaderFormatter
dedent|''
dedent|''
dedent|''
name|'def'
name|'testHeaderFormatter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cases'
op|'='
op|'['
nl|'\n'
op|'('
op|'{'
string|"'Header1'"
op|':'
string|"'Value1'"
op|','
string|"'Header2'"
op|':'
string|"'Value2'"
op|'}'
op|','
string|"'Header2: Value2\\r\\nHeader1: Value1\\r\\n'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'input'
op|','
name|'output'
op|')'
name|'in'
name|'cases'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'imap4'
op|'.'
name|'_formatHeaders'
op|'('
name|'input'
op|')'
op|','
name|'output'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMessageSet
dedent|''
dedent|''
name|'def'
name|'testMessageSet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'m1'
op|'='
name|'MessageSet'
op|'('
op|')'
newline|'\n'
name|'m2'
op|'='
name|'MessageSet'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'m1'
op|','
name|'m2'
op|')'
newline|'\n'
nl|'\n'
name|'m1'
op|'='
name|'m1'
op|'+'
op|'('
number|'1'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'m1'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'list'
op|'('
name|'m1'
op|')'
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'m2'
op|'='
name|'m2'
op|'+'
op|'('
number|'1'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'m1'
op|','
name|'m2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'list'
op|'('
name|'m1'
op|'+'
name|'m2'
op|')'
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testQuotedSplitter
dedent|''
name|'def'
name|'testQuotedSplitter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cases'
op|'='
op|'['
nl|'\n'
string|"'''Hello World'''"
op|','
nl|'\n'
string|'\'\'\'Hello "World!"\'\'\''
op|','
nl|'\n'
string|'\'\'\'World "Hello" "How are you?"\'\'\''
op|','
nl|'\n'
string|'\'\'\'"Hello world" How "are you?"\'\'\''
op|','
nl|'\n'
string|'\'\'\'foo bar "baz buz" NIL\'\'\''
op|','
nl|'\n'
string|'\'\'\'foo bar "baz buz" "NIL"\'\'\''
op|','
nl|'\n'
string|'\'\'\'foo NIL "baz buz" bar\'\'\''
op|','
nl|'\n'
string|'\'\'\'foo "NIL" "baz buz" bar\'\'\''
op|','
nl|'\n'
string|'\'\'\'"NIL" bar "baz buz" foo\'\'\''
op|','
nl|'\n'
string|'\'oo \\\\"oo\\\\" oo\''
op|','
nl|'\n'
string|'\'"oo \\\\"oo\\\\" oo"\''
op|','
nl|'\n'
string|"'oo \\t oo'"
op|','
nl|'\n'
string|'\'"oo \\t oo"\''
op|','
nl|'\n'
string|"'oo \\\\t oo'"
op|','
nl|'\n'
string|'\'"oo \\\\t oo"\''
op|','
nl|'\n'
string|"'oo \\o oo'"
op|','
nl|'\n'
string|'\'"oo \\o oo"\''
op|','
nl|'\n'
string|"'oo \\\\o oo'"
op|','
nl|'\n'
string|'\'"oo \\\\o oo"\''
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'answers'
op|'='
op|'['
nl|'\n'
op|'['
string|"'Hello'"
op|','
string|"'World'"
op|']'
op|','
nl|'\n'
op|'['
string|"'Hello'"
op|','
string|"'World!'"
op|']'
op|','
nl|'\n'
op|'['
string|"'World'"
op|','
string|"'Hello'"
op|','
string|"'How are you?'"
op|']'
op|','
nl|'\n'
op|'['
string|"'Hello world'"
op|','
string|"'How'"
op|','
string|"'are you?'"
op|']'
op|','
nl|'\n'
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|','
string|"'baz buz'"
op|','
name|'None'
op|']'
op|','
nl|'\n'
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|','
string|"'baz buz'"
op|','
string|"'NIL'"
op|']'
op|','
nl|'\n'
op|'['
string|"'foo'"
op|','
name|'None'
op|','
string|"'baz buz'"
op|','
string|"'bar'"
op|']'
op|','
nl|'\n'
op|'['
string|"'foo'"
op|','
string|"'NIL'"
op|','
string|"'baz buz'"
op|','
string|"'bar'"
op|']'
op|','
nl|'\n'
op|'['
string|"'NIL'"
op|','
string|"'bar'"
op|','
string|"'baz buz'"
op|','
string|"'foo'"
op|']'
op|','
nl|'\n'
op|'['
string|"'oo'"
op|','
string|'\'"oo"\''
op|','
string|"'oo'"
op|']'
op|','
nl|'\n'
op|'['
string|'\'oo "oo" oo\''
op|']'
op|','
nl|'\n'
op|'['
string|"'oo'"
op|','
string|"'oo'"
op|']'
op|','
nl|'\n'
op|'['
string|"'oo \\t oo'"
op|']'
op|','
nl|'\n'
op|'['
string|"'oo'"
op|','
string|"'\\\\t'"
op|','
string|"'oo'"
op|']'
op|','
nl|'\n'
op|'['
string|"'oo \\\\t oo'"
op|']'
op|','
nl|'\n'
op|'['
string|"'oo'"
op|','
string|"'\\o'"
op|','
string|"'oo'"
op|']'
op|','
nl|'\n'
op|'['
string|"'oo \\o oo'"
op|']'
op|','
nl|'\n'
op|'['
string|"'oo'"
op|','
string|"'\\\\o'"
op|','
string|"'oo'"
op|']'
op|','
nl|'\n'
op|'['
string|"'oo \\\\o oo'"
op|']'
op|','
nl|'\n'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'errors'
op|'='
op|'['
nl|'\n'
string|'\'"mismatched quote\''
op|','
nl|'\n'
string|'\'mismatched quote"\''
op|','
nl|'\n'
string|'\'mismatched"quote\''
op|','
nl|'\n'
string|'\'"oops here is" another"\''
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'s'
name|'in'
name|'errors'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'imap4'
op|'.'
name|'MismatchedQuoting'
op|','
name|'imap4'
op|'.'
name|'splitQuoted'
op|','
name|'s'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
op|'('
name|'case'
op|','
name|'expected'
op|')'
name|'in'
name|'zip'
op|'('
name|'cases'
op|','
name|'answers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'imap4'
op|'.'
name|'splitQuoted'
op|'('
name|'case'
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testStringCollapser
dedent|''
dedent|''
name|'def'
name|'testStringCollapser'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cases'
op|'='
op|'['
nl|'\n'
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|','
string|"'d'"
op|','
string|"'e'"
op|']'
op|','
nl|'\n'
op|'['
string|"'a'"
op|','
string|"' '"
op|','
string|'\'"\''
op|','
string|"'b'"
op|','
string|"'c'"
op|','
string|"' '"
op|','
string|'\'"\''
op|','
string|"' '"
op|','
string|"'d'"
op|','
string|"'e'"
op|']'
op|','
nl|'\n'
op|'['
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|','
string|"'d'"
op|','
string|"'e'"
op|']'
op|','
nl|'\n'
op|'['
string|"'a'"
op|','
op|'['
string|"'b'"
op|','
string|"'c'"
op|','
string|"'d'"
op|']'
op|','
string|"'e'"
op|']'
op|','
nl|'\n'
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
op|'['
string|"'c'"
op|','
string|"'d'"
op|','
string|"'e'"
op|']'
op|']'
op|','
nl|'\n'
op|'['
string|'\'"\''
op|','
string|"'a'"
op|','
string|"' '"
op|','
string|'\'"\''
op|','
op|'['
string|"'b'"
op|','
string|"'c'"
op|','
string|"'d'"
op|']'
op|','
string|'\'"\''
op|','
string|"' '"
op|','
string|"'e'"
op|','
string|'\'"\''
op|']'
op|','
nl|'\n'
op|'['
string|"'a'"
op|','
op|'['
string|'\'"\''
op|','
string|"' '"
op|','
string|"'b'"
op|','
string|"'c'"
op|','
string|"' '"
op|','
string|"' '"
op|','
string|'\'"\''
op|']'
op|','
string|"'d'"
op|','
string|"'e'"
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'answers'
op|'='
op|'['
nl|'\n'
op|'['
string|"'abcde'"
op|']'
op|','
nl|'\n'
op|'['
string|"'a'"
op|','
string|"'bc '"
op|','
string|"'de'"
op|']'
op|','
nl|'\n'
op|'['
op|'['
string|"'abc'"
op|']'
op|','
string|"'de'"
op|']'
op|','
nl|'\n'
op|'['
string|"'a'"
op|','
op|'['
string|"'bcd'"
op|']'
op|','
string|"'e'"
op|']'
op|','
nl|'\n'
op|'['
string|"'ab'"
op|','
op|'['
string|"'cde'"
op|']'
op|']'
op|','
nl|'\n'
op|'['
string|"'a '"
op|','
op|'['
string|"'bcd'"
op|']'
op|','
string|"' e'"
op|']'
op|','
nl|'\n'
op|'['
string|"'a'"
op|','
op|'['
string|"' bc  '"
op|']'
op|','
string|"'de'"
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'case'
op|','
name|'expected'
op|')'
name|'in'
name|'zip'
op|'('
name|'cases'
op|','
name|'answers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'imap4'
op|'.'
name|'collapseStrings'
op|'('
name|'case'
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testParenParser
dedent|''
dedent|''
name|'def'
name|'testParenParser'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
string|"'\\r\\n'"
op|'.'
name|'join'
op|'('
op|'['
string|"'xx'"
op|']'
op|'*'
number|'4'
op|')'
newline|'\n'
name|'cases'
op|'='
op|'['
nl|'\n'
string|"'(BODY.PEEK[HEADER.FIELDS.NOT (subject bcc cc)] {%d}\\r\\n%s)'"
op|'%'
op|'('
name|'len'
op|'('
name|'s'
op|')'
op|','
name|'s'
op|','
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'#            \'(FLAGS (\\Seen) INTERNALDATE "17-Jul-1996 02:44:25 -0700" \''
nl|'\n'
comment|'#            \'RFC822.SIZE 4286 ENVELOPE ("Wed, 17 Jul 1996 02:23:25 -0700 (PDT)" \''
nl|'\n'
comment|'#            \'"IMAP4rev1 WG mtg summary and minutes" \''
nl|'\n'
comment|'#            \'(("Terry Gray" NIL "gray" "cac.washington.edu")) \''
nl|'\n'
comment|'#            \'(("Terry Gray" NIL "gray" "cac.washington.edu")) \''
nl|'\n'
comment|'#            \'(("Terry Gray" NIL "gray" "cac.washington.edu")) \''
nl|'\n'
comment|'#            \'((NIL NIL "imap" "cac.washington.edu")) \''
nl|'\n'
comment|'#            \'((NIL NIL "minutes" "CNRI.Reston.VA.US") \''
nl|'\n'
comment|'#            \'("John Klensin" NIL "KLENSIN" "INFOODS.MIT.EDU")) NIL NIL \''
nl|'\n'
comment|'#            \'"<B27397-0100000@cac.washington.edu>") \''
nl|'\n'
comment|'#            \'BODY ("TEXT" "PLAIN" ("CHARSET" "US-ASCII") NIL NIL "7BIT" 3028 92))\','
nl|'\n'
nl|'\n'
string|'\'(FLAGS (\\Seen) INTERNALDATE "17-Jul-1996 02:44:25 -0700" \''
nl|'\n'
string|'\'RFC822.SIZE 4286 ENVELOPE ("Wed, 17 Jul 1996 02:23:25 -0700 (PDT)" \''
nl|'\n'
string|'\'"IMAP4rev1 WG mtg summary and minutes" \''
nl|'\n'
string|'\'(("Terry Gray" NIL gray cac.washington.edu)) \''
nl|'\n'
string|'\'(("Terry Gray" NIL gray cac.washington.edu)) \''
nl|'\n'
string|'\'(("Terry Gray" NIL gray cac.washington.edu)) \''
nl|'\n'
string|"'((NIL NIL imap cac.washington.edu)) '"
nl|'\n'
string|"'((NIL NIL minutes CNRI.Reston.VA.US) '"
nl|'\n'
string|'\'("John Klensin" NIL KLENSIN INFOODS.MIT.EDU)) NIL NIL \''
nl|'\n'
string|"'<B27397-0100000@cac.washington.edu>) '"
nl|'\n'
string|"'BODY (TEXT PLAIN (CHARSET US-ASCII) NIL NIL 7BIT 3028 92))'"
op|','
nl|'\n'
string|'\'("oo \\\\"oo\\\\" oo")\''
op|','
nl|'\n'
string|'\'("oo \\\\\\\\ oo")\''
op|','
nl|'\n'
string|'\'("oo \\\\ oo")\''
op|','
nl|'\n'
string|'\'("oo \\\\o")\''
op|','
nl|'\n'
string|'\'("oo \\o")\''
op|','
nl|'\n'
string|"'(oo \\o)'"
op|','
nl|'\n'
string|"'(oo \\\\o)'"
op|','
nl|'\n'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'answers'
op|'='
op|'['
nl|'\n'
op|'['
string|"'BODY.PEEK'"
op|','
op|'['
string|"'HEADER.FIELDS.NOT'"
op|','
op|'['
string|"'subject'"
op|','
string|"'bcc'"
op|','
string|"'cc'"
op|']'
op|']'
op|','
name|'s'
op|']'
op|','
nl|'\n'
nl|'\n'
op|'['
string|"'FLAGS'"
op|','
op|'['
string|"r'\\Seen'"
op|']'
op|','
string|"'INTERNALDATE'"
op|','
nl|'\n'
string|"'17-Jul-1996 02:44:25 -0700'"
op|','
string|"'RFC822.SIZE'"
op|','
string|"'4286'"
op|','
string|"'ENVELOPE'"
op|','
nl|'\n'
op|'['
string|"'Wed, 17 Jul 1996 02:23:25 -0700 (PDT)'"
op|','
nl|'\n'
string|"'IMAP4rev1 WG mtg summary and minutes'"
op|','
op|'['
op|'['
string|'"Terry Gray"'
op|','
name|'None'
op|','
nl|'\n'
string|'"gray"'
op|','
string|'"cac.washington.edu"'
op|']'
op|']'
op|','
op|'['
op|'['
string|'"Terry Gray"'
op|','
name|'None'
op|','
nl|'\n'
string|'"gray"'
op|','
string|'"cac.washington.edu"'
op|']'
op|']'
op|','
op|'['
op|'['
string|'"Terry Gray"'
op|','
name|'None'
op|','
nl|'\n'
string|'"gray"'
op|','
string|'"cac.washington.edu"'
op|']'
op|']'
op|','
op|'['
op|'['
name|'None'
op|','
name|'None'
op|','
string|'"imap"'
op|','
nl|'\n'
string|'"cac.washington.edu"'
op|']'
op|']'
op|','
op|'['
op|'['
name|'None'
op|','
name|'None'
op|','
string|'"minutes"'
op|','
nl|'\n'
string|'"CNRI.Reston.VA.US"'
op|']'
op|','
op|'['
string|'"John Klensin"'
op|','
name|'None'
op|','
string|'"KLENSIN"'
op|','
nl|'\n'
string|'"INFOODS.MIT.EDU"'
op|']'
op|']'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
string|'"<B27397-0100000@cac.washington.edu>"'
op|']'
op|','
string|'"BODY"'
op|','
op|'['
string|'"TEXT"'
op|','
string|'"PLAIN"'
op|','
nl|'\n'
op|'['
string|'"CHARSET"'
op|','
string|'"US-ASCII"'
op|']'
op|','
name|'None'
op|','
name|'None'
op|','
string|'"7BIT"'
op|','
string|'"3028"'
op|','
string|'"92"'
op|']'
op|']'
op|','
nl|'\n'
op|'['
string|'\'oo "oo" oo\''
op|']'
op|','
nl|'\n'
op|'['
string|"'oo \\\\\\\\ oo'"
op|']'
op|','
nl|'\n'
op|'['
string|"'oo \\\\ oo'"
op|']'
op|','
nl|'\n'
op|'['
string|"'oo \\\\o'"
op|']'
op|','
nl|'\n'
op|'['
string|"'oo \\o'"
op|']'
op|','
nl|'\n'
op|'['
string|"'oo'"
op|','
string|"'\\o'"
op|']'
op|','
nl|'\n'
op|'['
string|"'oo'"
op|','
string|"'\\\\o'"
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'case'
op|','
name|'expected'
op|')'
name|'in'
name|'zip'
op|'('
name|'cases'
op|','
name|'answers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'imap4'
op|'.'
name|'parseNestedParens'
op|'('
name|'case'
op|')'
op|','
op|'['
name|'expected'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# XXX This code used to work, but changes occurred within the'
nl|'\n'
comment|'# imap4.py module which made it no longer necessary for *all* of it'
nl|'\n'
comment|'# to work.  In particular, only the part that makes'
nl|'\n'
comment|"# 'BODY.PEEK[HEADER.FIELDS.NOT (Subject Bcc Cc)]' come out correctly"
nl|'\n'
comment|'# no longer needs to work.  So, I am loathe to delete the entire'
nl|'\n'
comment|'# section of the test. --exarkun'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
comment|'#        for (case, expected) in zip(answers, cases):'
nl|'\n'
comment|"#            self.assertEquals('(' + imap4.collapseNestedLists(case) + ')', expected)"
nl|'\n'
nl|'\n'
DECL|member|testFetchParserSimple
dedent|''
dedent|''
name|'def'
name|'testFetchParserSimple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cases'
op|'='
op|'['
nl|'\n'
op|'['
string|"'ENVELOPE'"
op|','
string|"'Envelope'"
op|']'
op|','
nl|'\n'
op|'['
string|"'FLAGS'"
op|','
string|"'Flags'"
op|']'
op|','
nl|'\n'
op|'['
string|"'INTERNALDATE'"
op|','
string|"'InternalDate'"
op|']'
op|','
nl|'\n'
op|'['
string|"'RFC822.HEADER'"
op|','
string|"'RFC822Header'"
op|']'
op|','
nl|'\n'
op|'['
string|"'RFC822.SIZE'"
op|','
string|"'RFC822Size'"
op|']'
op|','
nl|'\n'
op|'['
string|"'RFC822.TEXT'"
op|','
string|"'RFC822Text'"
op|']'
op|','
nl|'\n'
op|'['
string|"'RFC822'"
op|','
string|"'RFC822'"
op|']'
op|','
nl|'\n'
op|'['
string|"'UID'"
op|','
string|"'UID'"
op|']'
op|','
nl|'\n'
op|'['
string|"'BODYSTRUCTURE'"
op|','
string|"'BodyStructure'"
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'inp'
op|','
name|'outp'
op|')'
name|'in'
name|'cases'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'='
name|'imap4'
op|'.'
name|'_FetchParser'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'parseString'
op|'('
name|'inp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'p'
op|'.'
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|','
name|'getattr'
op|'('
name|'p'
op|','
name|'outp'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchParserMacros
dedent|''
dedent|''
name|'def'
name|'testFetchParserMacros'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cases'
op|'='
op|'['
nl|'\n'
op|'['
string|"'ALL'"
op|','
op|'('
number|'4'
op|','
op|'['
string|"'flags'"
op|','
string|"'internaldate'"
op|','
string|"'rfc822.size'"
op|','
string|"'envelope'"
op|']'
op|')'
op|']'
op|','
nl|'\n'
op|'['
string|"'FULL'"
op|','
op|'('
number|'5'
op|','
op|'['
string|"'flags'"
op|','
string|"'internaldate'"
op|','
string|"'rfc822.size'"
op|','
string|"'envelope'"
op|','
string|"'body'"
op|']'
op|')'
op|']'
op|','
nl|'\n'
op|'['
string|"'FAST'"
op|','
op|'('
number|'3'
op|','
op|'['
string|"'flags'"
op|','
string|"'internaldate'"
op|','
string|"'rfc822.size'"
op|']'
op|')'
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'inp'
op|','
name|'outp'
op|')'
name|'in'
name|'cases'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'='
name|'imap4'
op|'.'
name|'_FetchParser'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'parseString'
op|'('
name|'inp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'p'
op|'.'
name|'result'
op|')'
op|','
name|'outp'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'p'
op|'='
op|'['
name|'str'
op|'('
name|'p'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
name|'for'
name|'p'
name|'in'
name|'p'
op|'.'
name|'result'
op|']'
newline|'\n'
name|'p'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'outp'
op|'['
number|'1'
op|']'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|','
name|'outp'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchParserBody
dedent|''
dedent|''
name|'def'
name|'testFetchParserBody'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'P'
op|'='
name|'imap4'
op|'.'
name|'_FetchParser'
newline|'\n'
nl|'\n'
name|'p'
op|'='
name|'P'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'parseString'
op|'('
string|"'BODY'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'p'
op|'.'
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|','
name|'p'
op|'.'
name|'Body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'peek'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|')'
op|','
string|"'BODY'"
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'='
name|'P'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'parseString'
op|'('
string|"'BODY.PEEK'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'p'
op|'.'
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|','
name|'p'
op|'.'
name|'Body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'peek'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|')'
op|','
string|"'BODY'"
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'='
name|'P'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'parseString'
op|'('
string|"'BODY[]'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'p'
op|'.'
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|','
name|'p'
op|'.'
name|'Body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'empty'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|')'
op|','
string|"'BODY[]'"
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'='
name|'P'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'parseString'
op|'('
string|"'BODY[HEADER]'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'p'
op|'.'
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|','
name|'p'
op|'.'
name|'Body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'peek'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|','
name|'p'
op|'.'
name|'Header'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|'.'
name|'negate'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|'.'
name|'fields'
op|','
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'empty'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|')'
op|','
string|"'BODY[HEADER]'"
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'='
name|'P'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'parseString'
op|'('
string|"'BODY.PEEK[HEADER]'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'p'
op|'.'
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|','
name|'p'
op|'.'
name|'Body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'peek'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|','
name|'p'
op|'.'
name|'Header'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|'.'
name|'negate'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|'.'
name|'fields'
op|','
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'empty'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|')'
op|','
string|"'BODY[HEADER]'"
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'='
name|'P'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'parseString'
op|'('
string|"'BODY[HEADER.FIELDS (Subject Cc Message-Id)]'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'p'
op|'.'
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|','
name|'p'
op|'.'
name|'Body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'peek'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|','
name|'p'
op|'.'
name|'Header'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|'.'
name|'negate'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|'.'
name|'fields'
op|','
op|'['
string|"'SUBJECT'"
op|','
string|"'CC'"
op|','
string|"'MESSAGE-ID'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'empty'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|')'
op|','
string|"'BODY[HEADER.FIELDS (Subject Cc Message-Id)]'"
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'='
name|'P'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'parseString'
op|'('
string|"'BODY.PEEK[HEADER.FIELDS (Subject Cc Message-Id)]'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'p'
op|'.'
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|','
name|'p'
op|'.'
name|'Body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'peek'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|','
name|'p'
op|'.'
name|'Header'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|'.'
name|'negate'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|'.'
name|'fields'
op|','
op|'['
string|"'SUBJECT'"
op|','
string|"'CC'"
op|','
string|"'MESSAGE-ID'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'empty'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|')'
op|','
string|"'BODY[HEADER.FIELDS (Subject Cc Message-Id)]'"
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'='
name|'P'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'parseString'
op|'('
string|"'BODY.PEEK[HEADER.FIELDS.NOT (Subject Cc Message-Id)]'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'p'
op|'.'
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|','
name|'p'
op|'.'
name|'Body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'peek'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|','
name|'p'
op|'.'
name|'Header'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|'.'
name|'negate'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|'.'
name|'fields'
op|','
op|'['
string|"'SUBJECT'"
op|','
string|"'CC'"
op|','
string|"'MESSAGE-ID'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'empty'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|')'
op|','
string|"'BODY[HEADER.FIELDS.NOT (Subject Cc Message-Id)]'"
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'='
name|'P'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'parseString'
op|'('
string|"'BODY[1.MIME]<10.50>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'p'
op|'.'
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|','
name|'p'
op|'.'
name|'Body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'peek'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'mime'
op|','
name|'p'
op|'.'
name|'MIME'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'part'
op|','
op|'('
number|'0'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'partialBegin'
op|','
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'partialLength'
op|','
number|'50'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'empty'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|')'
op|','
string|"'BODY[1.MIME]<10.50>'"
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'='
name|'P'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'parseString'
op|'('
string|"'BODY.PEEK[1.3.9.11.HEADER.FIELDS.NOT (Message-Id Date)]<103.69>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'p'
op|'.'
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|','
name|'p'
op|'.'
name|'Body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'peek'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|','
name|'p'
op|'.'
name|'Header'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'part'
op|','
op|'('
number|'0'
op|','
number|'2'
op|','
number|'8'
op|','
number|'10'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'header'
op|'.'
name|'fields'
op|','
op|'['
string|"'MESSAGE-ID'"
op|','
string|"'DATE'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'partialBegin'
op|','
number|'103'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'partialLength'
op|','
number|'69'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'empty'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'p'
op|'.'
name|'result'
op|'['
number|'0'
op|']'
op|')'
op|','
string|"'BODY[1.3.9.11.HEADER.FIELDS.NOT (Message-Id Date)]<103.69>'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testFiles
dedent|''
name|'def'
name|'testFiles'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inputStructure'
op|'='
op|'['
nl|'\n'
string|"'foo'"
op|','
string|"'bar'"
op|','
string|"'baz'"
op|','
name|'StringIO'
op|'('
string|"'this is a file\\r\\n'"
op|')'
op|','
string|"'buz'"
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'output'
op|'='
string|'\'"foo" "bar" "baz" {16}\\r\\nthis is a file\\r\\n "buz"\''
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'imap4'
op|'.'
name|'collapseNestedLists'
op|'('
name|'inputStructure'
op|')'
op|','
name|'output'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testQuoteAvoider
dedent|''
name|'def'
name|'testQuoteAvoider'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'input'
op|'='
op|'['
nl|'\n'
string|"'foo'"
op|','
name|'imap4'
op|'.'
name|'DontQuoteMe'
op|'('
string|"'bar'"
op|')'
op|','
string|'"baz"'
op|','
name|'StringIO'
op|'('
string|"'this is a file\\r\\n'"
op|')'
op|','
nl|'\n'
name|'imap4'
op|'.'
name|'DontQuoteMe'
op|'('
string|"'buz'"
op|')'
op|','
string|'""'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'output'
op|'='
string|'\'"foo" bar "baz" {16}\\r\\nthis is a file\\r\\n buz ""\''
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'imap4'
op|'.'
name|'collapseNestedLists'
op|'('
name|'input'
op|')'
op|','
name|'output'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLiterals
dedent|''
name|'def'
name|'testLiterals'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cases'
op|'='
op|'['
nl|'\n'
op|'('
string|"'({10}\\r\\n0123456789)'"
op|','
op|'['
op|'['
string|"'0123456789'"
op|']'
op|']'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'case'
op|','
name|'expected'
op|')'
name|'in'
name|'cases'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'imap4'
op|'.'
name|'parseNestedParens'
op|'('
name|'case'
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testQueryBuilder
dedent|''
dedent|''
name|'def'
name|'testQueryBuilder'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inputs'
op|'='
op|'['
nl|'\n'
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'flagged'
op|'='
number|'1'
op|')'
op|','
nl|'\n'
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'sorted'
op|'='
number|'1'
op|','
name|'unflagged'
op|'='
number|'1'
op|','
name|'deleted'
op|'='
number|'1'
op|')'
op|','
nl|'\n'
name|'imap4'
op|'.'
name|'Or'
op|'('
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'flagged'
op|'='
number|'1'
op|')'
op|','
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'deleted'
op|'='
number|'1'
op|')'
op|')'
op|','
nl|'\n'
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'before'
op|'='
string|"'today'"
op|')'
op|','
nl|'\n'
name|'imap4'
op|'.'
name|'Or'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'deleted'
op|'='
number|'1'
op|')'
op|','
nl|'\n'
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'unseen'
op|'='
number|'1'
op|')'
op|','
nl|'\n'
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'new'
op|'='
number|'1'
op|')'
nl|'\n'
op|')'
op|','
nl|'\n'
name|'imap4'
op|'.'
name|'Or'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'Not'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'Or'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'sorted'
op|'='
number|'1'
op|','
name|'since'
op|'='
string|"'yesterday'"
op|','
name|'smaller'
op|'='
number|'1000'
op|')'
op|','
nl|'\n'
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'sorted'
op|'='
number|'1'
op|','
name|'before'
op|'='
string|"'tuesday'"
op|','
name|'larger'
op|'='
number|'10000'
op|')'
op|','
nl|'\n'
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'sorted'
op|'='
number|'1'
op|','
name|'unseen'
op|'='
number|'1'
op|','
name|'deleted'
op|'='
number|'1'
op|','
name|'before'
op|'='
string|"'today'"
op|')'
op|','
nl|'\n'
name|'imap4'
op|'.'
name|'Not'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'subject'
op|'='
string|"'spam'"
op|')'
nl|'\n'
op|')'
op|','
nl|'\n'
op|')'
op|','
nl|'\n'
op|')'
op|','
nl|'\n'
name|'imap4'
op|'.'
name|'Not'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'uid'
op|'='
string|"'1:5'"
op|')'
nl|'\n'
op|')'
op|','
nl|'\n'
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'outputs'
op|'='
op|'['
nl|'\n'
string|"'FLAGGED'"
op|','
nl|'\n'
string|"'(DELETED UNFLAGGED)'"
op|','
nl|'\n'
string|"'(OR FLAGGED DELETED)'"
op|','
nl|'\n'
string|'\'(BEFORE "today")\''
op|','
nl|'\n'
string|"'(OR DELETED (OR UNSEEN NEW))'"
op|','
nl|'\n'
string|'\'(OR (NOT (OR (SINCE "yesterday" SMALLER 1000) \''
comment|'# Continuing'
nl|'\n'
string|'\'(OR (BEFORE "tuesday" LARGER 10000) (OR (BEFORE \''
comment|'# Some more'
nl|'\n'
string|'\'"today" DELETED UNSEEN) (NOT (SUBJECT "spam")))))) \''
comment|'# And more'
nl|'\n'
string|"'(NOT (UID 1:5)))'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'query'
op|','
name|'expected'
op|')'
name|'in'
name|'zip'
op|'('
name|'inputs'
op|','
name|'outputs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'query'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testIdListParser
dedent|''
dedent|''
name|'def'
name|'testIdListParser'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inputs'
op|'='
op|'['
nl|'\n'
string|"'1:*'"
op|','
nl|'\n'
string|"'5:*'"
op|','
nl|'\n'
string|"'1:2,5:*'"
op|','
nl|'\n'
string|"'1'"
op|','
nl|'\n'
string|"'1,2'"
op|','
nl|'\n'
string|"'1,3,5'"
op|','
nl|'\n'
string|"'1:10'"
op|','
nl|'\n'
string|"'1:10,11'"
op|','
nl|'\n'
string|"'1:5,10:20'"
op|','
nl|'\n'
string|"'1,5:10'"
op|','
nl|'\n'
string|"'1,5:10,15:20'"
op|','
nl|'\n'
string|"'1:10,15,20:25'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'outputs'
op|'='
op|'['
nl|'\n'
name|'MessageSet'
op|'('
number|'1'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'MessageSet'
op|'('
number|'5'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'MessageSet'
op|'('
number|'5'
op|','
name|'None'
op|')'
op|'+'
name|'MessageSet'
op|'('
number|'1'
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'MessageSet'
op|'('
number|'1'
op|')'
op|','
nl|'\n'
name|'MessageSet'
op|'('
number|'1'
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'MessageSet'
op|'('
number|'1'
op|')'
op|'+'
name|'MessageSet'
op|'('
number|'3'
op|')'
op|'+'
name|'MessageSet'
op|'('
number|'5'
op|')'
op|','
nl|'\n'
name|'MessageSet'
op|'('
number|'1'
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'MessageSet'
op|'('
number|'1'
op|','
number|'11'
op|')'
op|','
nl|'\n'
name|'MessageSet'
op|'('
number|'1'
op|','
number|'5'
op|')'
op|'+'
name|'MessageSet'
op|'('
number|'10'
op|','
number|'20'
op|')'
op|','
nl|'\n'
name|'MessageSet'
op|'('
number|'1'
op|')'
op|'+'
name|'MessageSet'
op|'('
number|'5'
op|','
number|'10'
op|')'
op|','
nl|'\n'
name|'MessageSet'
op|'('
number|'1'
op|')'
op|'+'
name|'MessageSet'
op|'('
number|'5'
op|','
number|'10'
op|')'
op|'+'
name|'MessageSet'
op|'('
number|'15'
op|','
number|'20'
op|')'
op|','
nl|'\n'
name|'MessageSet'
op|'('
number|'1'
op|','
number|'10'
op|')'
op|'+'
name|'MessageSet'
op|'('
number|'15'
op|')'
op|'+'
name|'MessageSet'
op|'('
number|'20'
op|','
number|'25'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'lengths'
op|'='
op|'['
nl|'\n'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'10'
op|','
number|'11'
op|','
number|'16'
op|','
number|'7'
op|','
number|'13'
op|','
number|'17'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'input'
op|','
name|'expected'
op|')'
name|'in'
name|'zip'
op|'('
name|'inputs'
op|','
name|'outputs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'imap4'
op|'.'
name|'parseIdList'
op|'('
name|'input'
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
op|'('
name|'input'
op|','
name|'expected'
op|')'
name|'in'
name|'zip'
op|'('
name|'inputs'
op|','
name|'lengths'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'L'
op|'='
name|'len'
op|'('
name|'imap4'
op|'.'
name|'parseIdList'
op|'('
name|'input'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'                '
name|'L'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|','
name|'expected'
op|','
nl|'\n'
string|'"len(%r) = %r != %r"'
op|'%'
op|'('
name|'input'
op|','
name|'L'
op|','
name|'expected'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|SimpleMailbox
dedent|''
dedent|''
dedent|''
name|'class'
name|'SimpleMailbox'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'imap4'
op|'.'
name|'IMailboxInfo'
op|','
name|'imap4'
op|'.'
name|'IMailbox'
op|','
name|'imap4'
op|'.'
name|'ICloseableMailbox'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|flags
name|'flags'
op|'='
op|'('
string|"'\\\\Flag1'"
op|','
string|"'Flag2'"
op|','
string|"'\\\\AnotherSysFlag'"
op|','
string|"'LastFlag'"
op|')'
newline|'\n'
DECL|variable|messages
name|'messages'
op|'='
op|'['
op|']'
newline|'\n'
DECL|variable|mUID
name|'mUID'
op|'='
number|'0'
newline|'\n'
DECL|variable|rw
name|'rw'
op|'='
number|'1'
newline|'\n'
DECL|variable|closed
name|'closed'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'listeners'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'addListener'
op|'='
name|'self'
op|'.'
name|'listeners'
op|'.'
name|'append'
newline|'\n'
name|'self'
op|'.'
name|'removeListener'
op|'='
name|'self'
op|'.'
name|'listeners'
op|'.'
name|'remove'
newline|'\n'
nl|'\n'
DECL|member|getFlags
dedent|''
name|'def'
name|'getFlags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'flags'
newline|'\n'
nl|'\n'
DECL|member|getUIDValidity
dedent|''
name|'def'
name|'getUIDValidity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'42'
newline|'\n'
nl|'\n'
DECL|member|getUIDNext
dedent|''
name|'def'
name|'getUIDNext'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'messages'
op|')'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|getMessageCount
dedent|''
name|'def'
name|'getMessageCount'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'9'
newline|'\n'
nl|'\n'
DECL|member|getRecentCount
dedent|''
name|'def'
name|'getRecentCount'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'3'
newline|'\n'
nl|'\n'
DECL|member|getUnseenCount
dedent|''
name|'def'
name|'getUnseenCount'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'4'
newline|'\n'
nl|'\n'
DECL|member|isWriteable
dedent|''
name|'def'
name|'isWriteable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'rw'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|getHierarchicalDelimiter
dedent|''
name|'def'
name|'getHierarchicalDelimiter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'/'"
newline|'\n'
nl|'\n'
DECL|member|requestStatus
dedent|''
name|'def'
name|'requestStatus'
op|'('
name|'self'
op|','
name|'names'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'r'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
string|"'MESSAGES'"
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'            '
name|'r'
op|'['
string|"'MESSAGES'"
op|']'
op|'='
name|'self'
op|'.'
name|'getMessageCount'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'RECENT'"
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'            '
name|'r'
op|'['
string|"'RECENT'"
op|']'
op|'='
name|'self'
op|'.'
name|'getRecentCount'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'UIDNEXT'"
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'            '
name|'r'
op|'['
string|"'UIDNEXT'"
op|']'
op|'='
name|'self'
op|'.'
name|'getMessageCount'
op|'('
op|')'
op|'+'
number|'1'
newline|'\n'
dedent|''
name|'if'
string|"'UIDVALIDITY'"
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'            '
name|'r'
op|'['
string|"'UIDVALIDITY'"
op|']'
op|'='
name|'self'
op|'.'
name|'getUID'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'UNSEEN'"
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'            '
name|'r'
op|'['
string|"'UNSEEN'"
op|']'
op|'='
name|'self'
op|'.'
name|'getUnseenCount'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'r'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addMessage
dedent|''
name|'def'
name|'addMessage'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'flags'
op|','
name|'date'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'messages'
op|'.'
name|'append'
op|'('
op|'('
name|'message'
op|','
name|'flags'
op|','
name|'date'
op|','
name|'self'
op|'.'
name|'mUID'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mUID'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|expunge
dedent|''
name|'def'
name|'expunge'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'delete'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'self'
op|'.'
name|'messages'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'\\\\Deleted'"
name|'in'
name|'i'
op|'['
number|'1'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'delete'
op|'.'
name|'append'
op|'('
name|'i'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'i'
name|'in'
name|'delete'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'messages'
op|'.'
name|'remove'
op|'('
name|'i'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'['
name|'i'
op|'['
number|'3'
op|']'
name|'for'
name|'i'
name|'in'
name|'delete'
op|']'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'closed'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|class|Account
dedent|''
dedent|''
name|'class'
name|'Account'
op|'('
name|'imap4'
op|'.'
name|'MemoryAccount'
op|')'
op|':'
newline|'\n'
DECL|variable|mailboxFactory
indent|'    '
name|'mailboxFactory'
op|'='
name|'SimpleMailbox'
newline|'\n'
DECL|member|_emptyMailbox
name|'def'
name|'_emptyMailbox'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'mailboxFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|select
dedent|''
name|'def'
name|'select'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'rw'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mbox'
op|'='
name|'imap4'
op|'.'
name|'MemoryAccount'
op|'.'
name|'select'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
name|'if'
name|'mbox'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'mbox'
op|'.'
name|'rw'
op|'='
name|'rw'
newline|'\n'
dedent|''
name|'return'
name|'mbox'
newline|'\n'
nl|'\n'
DECL|class|SimpleServer
dedent|''
dedent|''
name|'class'
name|'SimpleServer'
op|'('
name|'imap4'
op|'.'
name|'IMAP4Server'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'imap4'
op|'.'
name|'IMAP4Server'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'realm'
op|'='
name|'TestRealm'
op|'('
op|')'
newline|'\n'
name|'realm'
op|'.'
name|'theAccount'
op|'='
name|'Account'
op|'('
string|"'testuser'"
op|')'
newline|'\n'
name|'portal'
op|'='
name|'cred'
op|'.'
name|'portal'
op|'.'
name|'Portal'
op|'('
name|'realm'
op|')'
newline|'\n'
name|'c'
op|'='
name|'cred'
op|'.'
name|'checkers'
op|'.'
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checker'
op|'='
name|'c'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'='
name|'portal'
newline|'\n'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'c'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'timeoutTest'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'timeoutTest'
op|':'
newline|'\n'
comment|'#Do not send a respones'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'imap4'
op|'.'
name|'IMAP4Server'
op|'.'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_username
dedent|''
name|'_username'
op|'='
string|"'testuser'"
newline|'\n'
DECL|variable|_password
name|'_password'
op|'='
string|"'password-test'"
newline|'\n'
DECL|member|authenticateLogin
name|'def'
name|'authenticateLogin'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'username'
op|'=='
name|'self'
op|'.'
name|'_username'
name|'and'
name|'password'
op|'=='
name|'self'
op|'.'
name|'_password'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'imap4'
op|'.'
name|'IAccount'
op|','
name|'self'
op|'.'
name|'theAccount'
op|','
name|'lambda'
op|':'
name|'None'
newline|'\n'
dedent|''
name|'raise'
name|'cred'
op|'.'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleClient
dedent|''
dedent|''
name|'class'
name|'SimpleClient'
op|'('
name|'imap4'
op|'.'
name|'IMAP4Client'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'deferred'
op|','
name|'contextFactory'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'imap4'
op|'.'
name|'IMAP4Client'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'contextFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'deferred'
newline|'\n'
name|'self'
op|'.'
name|'events'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|serverGreeting
dedent|''
name|'def'
name|'serverGreeting'
op|'('
name|'self'
op|','
name|'caps'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|modeChanged
dedent|''
name|'def'
name|'modeChanged'
op|'('
name|'self'
op|','
name|'writeable'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'events'
op|'.'
name|'append'
op|'('
op|'['
string|"'modeChanged'"
op|','
name|'writeable'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|flagsChanged
dedent|''
name|'def'
name|'flagsChanged'
op|'('
name|'self'
op|','
name|'newFlags'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'events'
op|'.'
name|'append'
op|'('
op|'['
string|"'flagsChanged'"
op|','
name|'newFlags'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|newMessages
dedent|''
name|'def'
name|'newMessages'
op|'('
name|'self'
op|','
name|'exists'
op|','
name|'recent'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'events'
op|'.'
name|'append'
op|'('
op|'['
string|"'newMessages'"
op|','
name|'exists'
op|','
name|'recent'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IMAP4HelperMixin
dedent|''
dedent|''
name|'class'
name|'IMAP4HelperMixin'
op|':'
newline|'\n'
DECL|variable|serverCTX
indent|'    '
name|'serverCTX'
op|'='
name|'None'
newline|'\n'
DECL|variable|clientCTX
name|'clientCTX'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'='
name|'SimpleServer'
op|'('
name|'contextFactory'
op|'='
name|'self'
op|'.'
name|'serverCTX'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'='
name|'SimpleClient'
op|'('
name|'d'
op|','
name|'contextFactory'
op|'='
name|'self'
op|'.'
name|'clientCTX'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
name|'d'
newline|'\n'
nl|'\n'
name|'SimpleMailbox'
op|'.'
name|'messages'
op|'='
op|'['
op|']'
newline|'\n'
name|'theAccount'
op|'='
name|'Account'
op|'('
string|"'testuser'"
op|')'
newline|'\n'
name|'theAccount'
op|'.'
name|'mboxType'
op|'='
name|'SimpleMailbox'
newline|'\n'
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'='
name|'theAccount'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'self'
op|'.'
name|'server'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'connected'
newline|'\n'
nl|'\n'
DECL|member|_cbStopClient
dedent|''
name|'def'
name|'_cbStopClient'
op|'('
name|'self'
op|','
name|'ignore'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebGeneral
dedent|''
name|'def'
name|'_ebGeneral'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'failure'
op|'.'
name|'raiseException'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|loopback
dedent|''
name|'def'
name|'loopback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'loopback'
op|'.'
name|'loopbackAsync'
op|'('
name|'self'
op|'.'
name|'server'
op|','
name|'self'
op|'.'
name|'client'
op|')'
newline|'\n'
nl|'\n'
DECL|class|IMAP4ServerTestCase
dedent|''
dedent|''
name|'class'
name|'IMAP4ServerTestCase'
op|'('
name|'IMAP4HelperMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testCapability
indent|'    '
name|'def'
name|'testCapability'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'caps'
op|'='
op|'{'
op|'}'
newline|'\n'
DECL|function|getCaps
name|'def'
name|'getCaps'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|gotCaps
indent|'            '
name|'def'
name|'gotCaps'
op|'('
name|'c'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'caps'
op|'.'
name|'update'
op|'('
name|'c'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'getCapabilities'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'gotCaps'
op|')'
newline|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'getCaps'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|','
name|'d1'
op|']'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'IMAP4rev1'"
op|':'
name|'None'
op|','
string|"'NAMESPACE'"
op|':'
name|'None'
op|','
string|"'IDLE'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|','
name|'caps'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCapabilityWithAuth
dedent|''
name|'def'
name|'testCapabilityWithAuth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'caps'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'challengers'
op|'['
string|"'CRAM-MD5'"
op|']'
op|'='
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'CramMD5Credentials'
newline|'\n'
DECL|function|getCaps
name|'def'
name|'getCaps'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|gotCaps
indent|'            '
name|'def'
name|'gotCaps'
op|'('
name|'c'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'caps'
op|'.'
name|'update'
op|'('
name|'c'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'getCapabilities'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'gotCaps'
op|')'
newline|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'getCaps'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|','
name|'d1'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'expCap'
op|'='
op|'{'
string|"'IMAP4rev1'"
op|':'
name|'None'
op|','
string|"'NAMESPACE'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'IDLE'"
op|':'
name|'None'
op|','
string|"'AUTH'"
op|':'
op|'['
string|"'CRAM-MD5'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expCap'
op|','
name|'caps'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLogout
dedent|''
name|'def'
name|'testLogout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loggedOut'
op|'='
number|'0'
newline|'\n'
DECL|function|logout
name|'def'
name|'logout'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|setLoggedOut
indent|'            '
name|'def'
name|'setLoggedOut'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'loggedOut'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'logout'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'setLoggedOut'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'logout'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'loggedOut'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNoop
dedent|''
name|'def'
name|'testNoop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'responses'
op|'='
name|'None'
newline|'\n'
DECL|function|noop
name|'def'
name|'noop'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|setResponses
indent|'            '
name|'def'
name|'setResponses'
op|'('
name|'responses'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'responses'
op|'='
name|'responses'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'noop'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'setResponses'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'noop'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'responses'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLogin
dedent|''
name|'def'
name|'testLogin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|login
indent|'        '
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|')'
newline|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestLogin'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestLogin
dedent|''
name|'def'
name|'_cbTestLogin'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'account'
op|','
name|'SimpleServer'
op|'.'
name|'theAccount'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'state'
op|','
string|"'auth'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFailedLogin
dedent|''
name|'def'
name|'testFailedLogin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|login
indent|'        '
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'wrong-password'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestFailedLogin'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestFailedLogin
dedent|''
name|'def'
name|'_cbTestFailedLogin'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'account'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'state'
op|','
string|"'unauth'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testLoginRequiringQuoting
dedent|''
name|'def'
name|'testLoginRequiringQuoting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'server'
op|'.'
name|'_username'
op|'='
string|"'{test}user'"
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'_password'
op|'='
string|"'{test}password'"
newline|'\n'
nl|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'{test}user'"
op|','
string|"'{test}password'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|','
name|'d1'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestLoginRequiringQuoting'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestLoginRequiringQuoting
dedent|''
name|'def'
name|'_cbTestLoginRequiringQuoting'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'account'
op|','
name|'SimpleServer'
op|'.'
name|'theAccount'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'state'
op|','
string|"'auth'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testNamespace
dedent|''
name|'def'
name|'testNamespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'namespaceArgs'
op|'='
name|'None'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|namespace
dedent|''
name|'def'
name|'namespace'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|gotNamespace
indent|'            '
name|'def'
name|'gotNamespace'
op|'('
name|'args'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'namespaceArgs'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'_cbStopClient'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'namespace'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'gotNamespace'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'namespace'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'namespaceArgs'
op|','
nl|'\n'
op|'['
op|'['
op|'['
string|"''"
op|','
string|"'/'"
op|']'
op|']'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testSelect
dedent|''
name|'def'
name|'testSelect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'test-mailbox'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'selectedArgs'
op|'='
name|'None'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|select
dedent|''
name|'def'
name|'select'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|selected
indent|'            '
name|'def'
name|'selected'
op|'('
name|'args'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'selectedArgs'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'_cbStopClient'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'select'
op|'('
string|"'test-mailbox'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'selected'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'select'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestSelect'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestSelect
dedent|''
name|'def'
name|'_cbTestSelect'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mbox'
op|'='
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'mailboxes'
op|'['
string|"'TEST-MAILBOX'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'mbox'
op|','
name|'mbox'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'selectedArgs'
op|','
op|'{'
nl|'\n'
string|"'EXISTS'"
op|':'
number|'9'
op|','
string|"'RECENT'"
op|':'
number|'3'
op|','
string|"'UIDVALIDITY'"
op|':'
number|'42'
op|','
nl|'\n'
string|"'FLAGS'"
op|':'
op|'('
string|"'\\\\Flag1'"
op|','
string|"'Flag2'"
op|','
string|"'\\\\AnotherSysFlag'"
op|','
string|"'LastFlag'"
op|')'
op|','
nl|'\n'
string|"'READ-WRITE'"
op|':'
number|'1'
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_examine
dedent|''
name|'def'
name|'test_examine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.examine} issues an I{EXAMINE} command to the server and\n        returns a L{Deferred} which fires with a C{dict} with as many of the\n        following keys as the server includes in its response: C{\'FLAGS\'},\n        C{\'EXISTS\'}, C{\'RECENT\'}, C{\'UNSEEN\'}, C{\'READ-WRITE\'}, C{\'READ-ONLY\'},\n        C{\'UIDVALIDITY\'}, and C{\'PERMANENTFLAGS\'}.\n\n        Unfortunately the server doesn\'t generate all of these so it\'s hard to\n        test the client\'s handling of them here.  See\n        L{IMAP4ClientExamineTests} below.\n\n        See U{RFC 3501<http://www.faqs.org/rfcs/rfc3501.html>}, section 6.3.2,\n        for details.\n        """'
newline|'\n'
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'test-mailbox'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'examinedArgs'
op|'='
name|'None'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|examine
dedent|''
name|'def'
name|'examine'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|examined
indent|'            '
name|'def'
name|'examined'
op|'('
name|'args'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'examinedArgs'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'_cbStopClient'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'examine'
op|'('
string|"'test-mailbox'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'examined'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'examine'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestExamine'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbTestExamine
dedent|''
name|'def'
name|'_cbTestExamine'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mbox'
op|'='
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'mailboxes'
op|'['
string|"'TEST-MAILBOX'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'mbox'
op|','
name|'mbox'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'examinedArgs'
op|','
op|'{'
nl|'\n'
string|"'EXISTS'"
op|':'
number|'9'
op|','
string|"'RECENT'"
op|':'
number|'3'
op|','
string|"'UIDVALIDITY'"
op|':'
number|'42'
op|','
nl|'\n'
string|"'FLAGS'"
op|':'
op|'('
string|"'\\\\Flag1'"
op|','
string|"'Flag2'"
op|','
string|"'\\\\AnotherSysFlag'"
op|','
string|"'LastFlag'"
op|')'
op|','
nl|'\n'
string|"'READ-WRITE'"
op|':'
name|'False'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testCreate
dedent|''
name|'def'
name|'testCreate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'succeed'
op|'='
op|'('
string|"'testbox'"
op|','
string|"'test/box'"
op|','
string|"'test/'"
op|','
string|"'test/box/box'"
op|','
string|"'INBOX'"
op|')'
newline|'\n'
name|'fail'
op|'='
op|'('
string|"'testbox'"
op|','
string|"'test/box'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
op|')'
op|':'
name|'self'
op|'.'
name|'result'
op|'.'
name|'append'
op|'('
number|'1'
op|')'
newline|'\n'
DECL|function|eb
name|'def'
name|'eb'
op|'('
name|'failure'
op|')'
op|':'
name|'self'
op|'.'
name|'result'
op|'.'
name|'append'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|create
dedent|''
name|'def'
name|'create'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'name'
name|'in'
name|'succeed'
op|'+'
name|'fail'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'create'
op|'('
name|'name'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'cb'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'eb'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'create'
op|')'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestCreate'
op|','
name|'succeed'
op|','
name|'fail'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestCreate
dedent|''
name|'def'
name|'_cbTestCreate'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'succeed'
op|','
name|'fail'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'result'
op|','
op|'['
number|'1'
op|']'
op|'*'
name|'len'
op|'('
name|'succeed'
op|')'
op|'+'
op|'['
number|'0'
op|']'
op|'*'
name|'len'
op|'('
name|'fail'
op|')'
op|')'
newline|'\n'
name|'mbox'
op|'='
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'mailboxes'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'answers'
op|'='
op|'['
string|"'inbox'"
op|','
string|"'testbox'"
op|','
string|"'test/box'"
op|','
string|"'test'"
op|','
string|"'test/box/box'"
op|']'
newline|'\n'
name|'mbox'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'answers'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mbox'
op|','
op|'['
name|'a'
op|'.'
name|'upper'
op|'('
op|')'
name|'for'
name|'a'
name|'in'
name|'answers'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDelete
dedent|''
name|'def'
name|'testDelete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'delete/me'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|delete
dedent|''
name|'def'
name|'delete'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'delete'
op|'('
string|"'delete/me'"
op|')'
newline|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'delete'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'mailboxes'
op|'.'
name|'keys'
op|'('
op|')'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testIllegalInboxDelete
dedent|''
name|'def'
name|'testIllegalInboxDelete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stashed'
op|'='
name|'None'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|delete
dedent|''
name|'def'
name|'delete'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'delete'
op|'('
string|"'inbox'"
op|')'
newline|'\n'
DECL|function|stash
dedent|''
name|'def'
name|'stash'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stashed'
op|'='
name|'result'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'delete'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addBoth'
op|'('
name|'stash'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'stashed'
op|','
nl|'\n'
name|'failure'
op|'.'
name|'Failure'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testNonExistentDelete
dedent|''
name|'def'
name|'testNonExistentDelete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|login
indent|'        '
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|delete
dedent|''
name|'def'
name|'delete'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'delete'
op|'('
string|"'delete/me'"
op|')'
newline|'\n'
DECL|function|deleteFailed
dedent|''
name|'def'
name|'deleteFailed'
op|'('
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failure'
op|'='
name|'failure'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'failure'
op|'='
name|'None'
newline|'\n'
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'delete'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'deleteFailed'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'self'
op|'.'
name|'failure'
op|'.'
name|'value'
op|')'
op|','
nl|'\n'
string|"'No such mailbox'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testIllegalDelete
dedent|''
name|'def'
name|'testIllegalDelete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'='
name|'SimpleMailbox'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'flags'
op|'='
op|'('
string|"r'\\Noselect'"
op|','
op|')'
newline|'\n'
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'delete'"
op|','
name|'m'
op|')'
newline|'\n'
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'delete/me'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|delete
dedent|''
name|'def'
name|'delete'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'delete'
op|'('
string|"'delete'"
op|')'
newline|'\n'
DECL|function|deleteFailed
dedent|''
name|'def'
name|'deleteFailed'
op|'('
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failure'
op|'='
name|'failure'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'failure'
op|'='
name|'None'
newline|'\n'
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'delete'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'deleteFailed'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'expected'
op|'='
string|'"Hierarchically inferior mailboxes exist and \\\\Noselect is set"'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'self'
op|'.'
name|'failure'
op|'.'
name|'value'
op|')'
op|','
name|'expected'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testRename
dedent|''
name|'def'
name|'testRename'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'oldmbox'"
op|')'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|rename
dedent|''
name|'def'
name|'rename'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'rename'
op|'('
string|"'oldmbox'"
op|','
string|"'newname'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'rename'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'mailboxes'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
op|'['
string|"'NEWNAME'"
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testIllegalInboxRename
dedent|''
name|'def'
name|'testIllegalInboxRename'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stashed'
op|'='
name|'None'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|rename
dedent|''
name|'def'
name|'rename'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'rename'
op|'('
string|"'inbox'"
op|','
string|"'frotz'"
op|')'
newline|'\n'
DECL|function|stash
dedent|''
name|'def'
name|'stash'
op|'('
name|'stuff'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stashed'
op|'='
name|'stuff'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'rename'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addBoth'
op|'('
name|'stash'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'stashed'
op|','
name|'failure'
op|'.'
name|'Failure'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testHierarchicalRename
dedent|''
name|'def'
name|'testHierarchicalRename'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'create'
op|'('
string|"'oldmbox/m1'"
op|')'
newline|'\n'
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'create'
op|'('
string|"'oldmbox/m2'"
op|')'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|rename
dedent|''
name|'def'
name|'rename'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'rename'
op|'('
string|"'oldmbox'"
op|','
string|"'newname'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'rename'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestHierarchicalRename'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestHierarchicalRename
dedent|''
name|'def'
name|'_cbTestHierarchicalRename'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mboxes'
op|'='
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'mailboxes'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
string|"'newname'"
op|','
string|"'newname/m1'"
op|','
string|"'newname/m2'"
op|']'
newline|'\n'
name|'mboxes'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mboxes'
op|','
op|'['
name|'s'
op|'.'
name|'upper'
op|'('
op|')'
name|'for'
name|'s'
name|'in'
name|'expected'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSubscribe
dedent|''
name|'def'
name|'testSubscribe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|login
indent|'        '
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|subscribe
dedent|''
name|'def'
name|'subscribe'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'subscribe'
op|'('
string|"'this/mbox'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'subscribe'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'subscriptions'
op|','
nl|'\n'
op|'['
string|"'THIS/MBOX'"
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testUnsubscribe
dedent|''
name|'def'
name|'testUnsubscribe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'subscriptions'
op|'='
op|'['
string|"'THIS/MBOX'"
op|','
string|"'THAT/MBOX'"
op|']'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|unsubscribe
dedent|''
name|'def'
name|'unsubscribe'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'unsubscribe'
op|'('
string|"'this/mbox'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'unsubscribe'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'subscriptions'
op|','
nl|'\n'
op|'['
string|"'THAT/MBOX'"
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_listSetup
dedent|''
name|'def'
name|'_listSetup'
op|'('
name|'self'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'root/subthing'"
op|')'
newline|'\n'
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'root/another-thing'"
op|')'
newline|'\n'
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'non-root/subthing'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|listed
dedent|''
name|'def'
name|'listed'
op|'('
name|'answers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'listed'
op|'='
name|'answers'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'listed'
op|'='
name|'None'
newline|'\n'
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'f'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'listed'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'listed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testList
dedent|''
name|'def'
name|'testList'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|list
indent|'        '
name|'def'
name|'list'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'list'
op|'('
string|"'root'"
op|','
string|"'%'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'_listSetup'
op|'('
name|'list'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'listed'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'sortNest'
op|'('
name|'listed'
op|')'
op|','
nl|'\n'
name|'sortNest'
op|'('
op|'['
nl|'\n'
op|'('
name|'SimpleMailbox'
op|'.'
name|'flags'
op|','
string|'"/"'
op|','
string|'"ROOT/SUBTHING"'
op|')'
op|','
nl|'\n'
op|'('
name|'SimpleMailbox'
op|'.'
name|'flags'
op|','
string|'"/"'
op|','
string|'"ROOT/ANOTHER-THING"'
op|')'
nl|'\n'
op|']'
op|')'
nl|'\n'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testLSub
dedent|''
name|'def'
name|'testLSub'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'subscribe'
op|'('
string|"'ROOT/SUBTHING'"
op|')'
newline|'\n'
DECL|function|lsub
name|'def'
name|'lsub'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lsub'
op|'('
string|"'root'"
op|','
string|"'%'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'_listSetup'
op|'('
name|'lsub'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
nl|'\n'
op|'['
op|'('
name|'SimpleMailbox'
op|'.'
name|'flags'
op|','
string|'"/"'
op|','
string|'"ROOT/SUBTHING"'
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testStatus
dedent|''
name|'def'
name|'testStatus'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'root/subthing'"
op|')'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|status
dedent|''
name|'def'
name|'status'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'status'
op|'('
string|"'root/subthing'"
op|','
string|"'MESSAGES'"
op|','
string|"'UIDNEXT'"
op|','
string|"'UNSEEN'"
op|')'
newline|'\n'
DECL|function|statused
dedent|''
name|'def'
name|'statused'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'statused'
op|'='
name|'result'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'statused'
op|'='
name|'None'
newline|'\n'
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'status'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'statused'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'statused'
op|','
nl|'\n'
op|'{'
string|"'MESSAGES'"
op|':'
number|'9'
op|','
string|"'UIDNEXT'"
op|':'
string|"'10'"
op|','
string|"'UNSEEN'"
op|':'
number|'4'
op|'}'
nl|'\n'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testFailedStatus
dedent|''
name|'def'
name|'testFailedStatus'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|login
indent|'        '
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|status
dedent|''
name|'def'
name|'status'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'status'
op|'('
string|"'root/nonexistent'"
op|','
string|"'MESSAGES'"
op|','
string|"'UIDNEXT'"
op|','
string|"'UNSEEN'"
op|')'
newline|'\n'
DECL|function|statused
dedent|''
name|'def'
name|'statused'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'statused'
op|'='
name|'result'
newline|'\n'
DECL|function|failed
dedent|''
name|'def'
name|'failed'
op|'('
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failure'
op|'='
name|'failure'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'statused'
op|'='
name|'self'
op|'.'
name|'failure'
op|'='
name|'None'
newline|'\n'
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'status'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'statused'
op|','
name|'failed'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestFailedStatus'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestFailedStatus
dedent|''
name|'def'
name|'_cbTestFailedStatus'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'statused'
op|','
name|'None'
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'failure'
op|'.'
name|'value'
op|'.'
name|'args'
op|','
nl|'\n'
op|'('
string|"'Could not open mailbox'"
op|','
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFullAppend
dedent|''
name|'def'
name|'testFullAppend'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'infile'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|"'rfc822.message'"
op|')'
newline|'\n'
name|'message'
op|'='
name|'open'
op|'('
name|'infile'
op|')'
newline|'\n'
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'root/subthing'"
op|')'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|append
dedent|''
name|'def'
name|'append'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'append'
op|'('
nl|'\n'
string|"'root/subthing'"
op|','
nl|'\n'
name|'message'
op|','
nl|'\n'
op|'('
string|"'\\\\SEEN'"
op|','
string|"'\\\\DELETED'"
op|')'
op|','
nl|'\n'
string|"'Tue, 17 Jun 2003 11:22:16 -0600 (MDT)'"
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'append'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestFullAppend'
op|','
name|'infile'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestFullAppend
dedent|''
name|'def'
name|'_cbTestFullAppend'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'infile'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mb'
op|'='
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'mailboxes'
op|'['
string|"'ROOT/SUBTHING'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'mb'
op|'.'
name|'messages'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
op|'('
op|'['
string|"'\\\\SEEN'"
op|','
string|"'\\\\DELETED'"
op|']'
op|','
string|"'Tue, 17 Jun 2003 11:22:16 -0600 (MDT)'"
op|','
number|'0'
op|')'
op|','
nl|'\n'
name|'mb'
op|'.'
name|'messages'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|':'
op|']'
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'open'
op|'('
name|'infile'
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|','
name|'mb'
op|'.'
name|'messages'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPartialAppend
dedent|''
name|'def'
name|'testPartialAppend'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'infile'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|"'rfc822.message'"
op|')'
newline|'\n'
name|'message'
op|'='
name|'open'
op|'('
name|'infile'
op|')'
newline|'\n'
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'PARTIAL/SUBTHING'"
op|')'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|append
dedent|''
name|'def'
name|'append'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'message'
op|'='
name|'file'
op|'('
name|'infile'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'sendCommand'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'Command'
op|'('
nl|'\n'
string|"'APPEND'"
op|','
nl|'\n'
string|'\'PARTIAL/SUBTHING (\\\\SEEN) "Right now" {%d}\''
op|'%'
name|'os'
op|'.'
name|'path'
op|'.'
name|'getsize'
op|'('
name|'infile'
op|')'
op|','
nl|'\n'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'_IMAP4Client__cbContinueAppend'
op|','
name|'message'
nl|'\n'
op|')'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'append'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestPartialAppend'
op|','
name|'infile'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestPartialAppend
dedent|''
name|'def'
name|'_cbTestPartialAppend'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'infile'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mb'
op|'='
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'mailboxes'
op|'['
string|"'PARTIAL/SUBTHING'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'mb'
op|'.'
name|'messages'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
op|'('
op|'['
string|"'\\\\SEEN'"
op|']'
op|','
string|"'Right now'"
op|','
number|'0'
op|')'
op|','
nl|'\n'
name|'mb'
op|'.'
name|'messages'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|':'
op|']'
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'open'
op|'('
name|'infile'
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|','
name|'mb'
op|'.'
name|'messages'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCheck
dedent|''
name|'def'
name|'testCheck'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'root/subthing'"
op|')'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|select
dedent|''
name|'def'
name|'select'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'select'
op|'('
string|"'root/subthing'"
op|')'
newline|'\n'
DECL|function|check
dedent|''
name|'def'
name|'check'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'check'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'select'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'check'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Okay, that was fun'
nl|'\n'
nl|'\n'
DECL|member|testClose
dedent|''
name|'def'
name|'testClose'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'='
name|'SimpleMailbox'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'messages'
op|'='
op|'['
nl|'\n'
op|'('
string|"'Message 1'"
op|','
op|'('
string|"'\\\\Deleted'"
op|','
string|"'AnotherFlag'"
op|')'
op|','
name|'None'
op|','
number|'0'
op|')'
op|','
nl|'\n'
op|'('
string|"'Message 2'"
op|','
op|'('
string|"'AnotherFlag'"
op|','
op|')'
op|','
name|'None'
op|','
number|'1'
op|')'
op|','
nl|'\n'
op|'('
string|"'Message 3'"
op|','
op|'('
string|"'\\\\Deleted'"
op|','
op|')'
op|','
name|'None'
op|','
number|'2'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'mailbox'"
op|','
name|'m'
op|')'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|select
dedent|''
name|'def'
name|'select'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'select'
op|'('
string|"'mailbox'"
op|')'
newline|'\n'
DECL|function|close
dedent|''
name|'def'
name|'close'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'select'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'close'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d'
op|','
name|'d2'
op|']'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestClose'
op|','
name|'m'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestClose
dedent|''
name|'def'
name|'_cbTestClose'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'m'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'m'
op|'.'
name|'messages'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'m'
op|'.'
name|'messages'
op|'['
number|'0'
op|']'
op|','
op|'('
string|"'Message 2'"
op|','
op|'('
string|"'AnotherFlag'"
op|','
op|')'
op|','
name|'None'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'m'
op|'.'
name|'closed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testExpunge
dedent|''
name|'def'
name|'testExpunge'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'='
name|'SimpleMailbox'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'messages'
op|'='
op|'['
nl|'\n'
op|'('
string|"'Message 1'"
op|','
op|'('
string|"'\\\\Deleted'"
op|','
string|"'AnotherFlag'"
op|')'
op|','
name|'None'
op|','
number|'0'
op|')'
op|','
nl|'\n'
op|'('
string|"'Message 2'"
op|','
op|'('
string|"'AnotherFlag'"
op|','
op|')'
op|','
name|'None'
op|','
number|'1'
op|')'
op|','
nl|'\n'
op|'('
string|"'Message 3'"
op|','
op|'('
string|"'\\\\Deleted'"
op|','
op|')'
op|','
name|'None'
op|','
number|'2'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'mailbox'"
op|','
name|'m'
op|')'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|select
dedent|''
name|'def'
name|'select'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'select'
op|'('
string|"'mailbox'"
op|')'
newline|'\n'
DECL|function|expunge
dedent|''
name|'def'
name|'expunge'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'expunge'
op|'('
op|')'
newline|'\n'
DECL|function|expunged
dedent|''
name|'def'
name|'expunged'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'mbox'
name|'is'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'results'
op|'='
name|'results'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'results'
op|'='
name|'None'
newline|'\n'
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'select'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'expunge'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'expunged'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestExpunge'
op|','
name|'m'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestExpunge
dedent|''
name|'def'
name|'_cbTestExpunge'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'m'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'m'
op|'.'
name|'messages'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'m'
op|'.'
name|'messages'
op|'['
number|'0'
op|']'
op|','
op|'('
string|"'Message 2'"
op|','
op|'('
string|"'AnotherFlag'"
op|','
op|')'
op|','
name|'None'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'results'
op|','
op|'['
number|'0'
op|','
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IMAP4ServerSearchTestCase
dedent|''
dedent|''
name|'class'
name|'IMAP4ServerSearchTestCase'
op|'('
name|'IMAP4HelperMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the behavior of the search_* functions in L{imap4.IMAP4Server}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'IMAP4HelperMixin'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'earlierQuery'
op|'='
op|'['
string|'"10-Dec-2009"'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sameDateQuery'
op|'='
op|'['
string|'"13-Dec-2009"'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'laterQuery'
op|'='
op|'['
string|'"16-Dec-2009"'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'seq'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'msg'
op|'='
name|'FakeyMessage'
op|'('
op|'{'
string|'"date"'
op|':'
string|'"Mon, 13 Dec 2009 21:25:10 GMT"'
op|'}'
op|','
op|'['
op|']'
op|','
nl|'\n'
string|"''"
op|','
string|"''"
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_searchSentBefore
dedent|''
name|'def'
name|'test_searchSentBefore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{imap4.IMAP4Server.search_SENTBEFORE} returns True if the message date\n        is earlier than the query date.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'search_SENTBEFORE'
op|'('
name|'self'
op|'.'
name|'earlierQuery'
op|','
name|'self'
op|'.'
name|'seq'
op|','
name|'self'
op|'.'
name|'msg'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'search_SENTBEFORE'
op|'('
name|'self'
op|'.'
name|'laterQuery'
op|','
name|'self'
op|'.'
name|'seq'
op|','
name|'self'
op|'.'
name|'msg'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_searchSentOn
dedent|''
name|'def'
name|'test_searchSentOn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{imap4.IMAP4Server.search_SENTON} returns True if the message date is\n        the same as the query date.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'search_SENTON'
op|'('
name|'self'
op|'.'
name|'earlierQuery'
op|','
name|'self'
op|'.'
name|'seq'
op|','
name|'self'
op|'.'
name|'msg'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'search_SENTON'
op|'('
name|'self'
op|'.'
name|'sameDateQuery'
op|','
name|'self'
op|'.'
name|'seq'
op|','
name|'self'
op|'.'
name|'msg'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'search_SENTON'
op|'('
name|'self'
op|'.'
name|'laterQuery'
op|','
name|'self'
op|'.'
name|'seq'
op|','
name|'self'
op|'.'
name|'msg'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_searchSentSince
dedent|''
name|'def'
name|'test_searchSentSince'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{imap4.IMAP4Server.search_SENTSINCE} returns True if the message date\n        is later than the query date.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'search_SENTSINCE'
op|'('
name|'self'
op|'.'
name|'earlierQuery'
op|','
name|'self'
op|'.'
name|'seq'
op|','
name|'self'
op|'.'
name|'msg'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'search_SENTSINCE'
op|'('
name|'self'
op|'.'
name|'laterQuery'
op|','
name|'self'
op|'.'
name|'seq'
op|','
name|'self'
op|'.'
name|'msg'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_searchOr
dedent|''
name|'def'
name|'test_searchOr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{imap4.IMAP4Server.search_OR} returns true if either of the two\n        expressions supplied to it returns true and returns false if neither\n        does.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'search_OR'
op|'('
nl|'\n'
op|'['
string|'"SENTSINCE"'
op|']'
op|'+'
name|'self'
op|'.'
name|'earlierQuery'
op|'+'
nl|'\n'
op|'['
string|'"SENTSINCE"'
op|']'
op|'+'
name|'self'
op|'.'
name|'laterQuery'
op|','
nl|'\n'
name|'self'
op|'.'
name|'seq'
op|','
name|'self'
op|'.'
name|'msg'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'search_OR'
op|'('
nl|'\n'
op|'['
string|'"SENTSINCE"'
op|']'
op|'+'
name|'self'
op|'.'
name|'laterQuery'
op|'+'
nl|'\n'
op|'['
string|'"SENTSINCE"'
op|']'
op|'+'
name|'self'
op|'.'
name|'earlierQuery'
op|','
nl|'\n'
name|'self'
op|'.'
name|'seq'
op|','
name|'self'
op|'.'
name|'msg'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'search_OR'
op|'('
nl|'\n'
op|'['
string|'"SENTON"'
op|']'
op|'+'
name|'self'
op|'.'
name|'laterQuery'
op|'+'
nl|'\n'
op|'['
string|'"SENTSINCE"'
op|']'
op|'+'
name|'self'
op|'.'
name|'laterQuery'
op|','
nl|'\n'
name|'self'
op|'.'
name|'seq'
op|','
name|'self'
op|'.'
name|'msg'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_searchNot
dedent|''
name|'def'
name|'test_searchNot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{imap4.IMAP4Server.search_NOT} returns the negation of the result\n        of the expression supplied to it.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'search_NOT'
op|'('
nl|'\n'
op|'['
string|'"SENTSINCE"'
op|']'
op|'+'
name|'self'
op|'.'
name|'earlierQuery'
op|','
name|'self'
op|'.'
name|'seq'
op|','
name|'self'
op|'.'
name|'msg'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'search_NOT'
op|'('
nl|'\n'
op|'['
string|'"SENTON"'
op|']'
op|'+'
name|'self'
op|'.'
name|'laterQuery'
op|','
name|'self'
op|'.'
name|'seq'
op|','
name|'self'
op|'.'
name|'msg'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestRealm
dedent|''
dedent|''
name|'class'
name|'TestRealm'
op|':'
newline|'\n'
DECL|variable|theAccount
indent|'    '
name|'theAccount'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|requestAvatar
name|'def'
name|'requestAvatar'
op|'('
name|'self'
op|','
name|'avatarId'
op|','
name|'mind'
op|','
op|'*'
name|'interfaces'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'imap4'
op|'.'
name|'IAccount'
op|','
name|'self'
op|'.'
name|'theAccount'
op|','
name|'lambda'
op|':'
name|'None'
newline|'\n'
nl|'\n'
DECL|class|TestChecker
dedent|''
dedent|''
name|'class'
name|'TestChecker'
op|':'
newline|'\n'
DECL|variable|credentialInterfaces
indent|'    '
name|'credentialInterfaces'
op|'='
op|'('
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'IUsernameHashedPassword'
op|','
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|users
name|'users'
op|'='
op|'{'
nl|'\n'
string|"'testuser'"
op|':'
string|"'secret'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|requestAvatarId
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'credentials'
op|'.'
name|'username'
name|'in'
name|'self'
op|'.'
name|'users'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
nl|'\n'
name|'credentials'
op|'.'
name|'checkPassword'
op|','
name|'self'
op|'.'
name|'users'
op|'['
name|'credentials'
op|'.'
name|'username'
op|']'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbCheck'
op|','
name|'credentials'
op|'.'
name|'username'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbCheck
dedent|''
dedent|''
name|'def'
name|'_cbCheck'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'username'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'result'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'username'
newline|'\n'
dedent|''
name|'raise'
name|'cred'
op|'.'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|AuthenticatorTestCase
dedent|''
dedent|''
name|'class'
name|'AuthenticatorTestCase'
op|'('
name|'IMAP4HelperMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'IMAP4HelperMixin'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
name|'realm'
op|'='
name|'TestRealm'
op|'('
op|')'
newline|'\n'
name|'realm'
op|'.'
name|'theAccount'
op|'='
name|'Account'
op|'('
string|"'testuser'"
op|')'
newline|'\n'
name|'portal'
op|'='
name|'cred'
op|'.'
name|'portal'
op|'.'
name|'Portal'
op|'('
name|'realm'
op|')'
newline|'\n'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'TestChecker'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'portal'
op|'='
name|'portal'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'authenticated'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'account'
op|'='
name|'realm'
op|'.'
name|'theAccount'
newline|'\n'
nl|'\n'
DECL|member|testCramMD5
dedent|''
name|'def'
name|'testCramMD5'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'server'
op|'.'
name|'challengers'
op|'['
string|"'CRAM-MD5'"
op|']'
op|'='
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'CramMD5Credentials'
newline|'\n'
name|'cAuth'
op|'='
name|'imap4'
op|'.'
name|'CramMD5ClientAuthenticator'
op|'('
string|"'testuser'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'registerAuthenticator'
op|'('
name|'cAuth'
op|')'
newline|'\n'
nl|'\n'
DECL|function|auth
name|'def'
name|'auth'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'authenticate'
op|'('
string|"'secret'"
op|')'
newline|'\n'
DECL|function|authed
dedent|''
name|'def'
name|'authed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authenticated'
op|'='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'auth'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'authed'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestCramMD5'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestCramMD5
dedent|''
name|'def'
name|'_cbTestCramMD5'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authenticated'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'account'
op|','
name|'self'
op|'.'
name|'account'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFailedCramMD5
dedent|''
name|'def'
name|'testFailedCramMD5'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'server'
op|'.'
name|'challengers'
op|'['
string|"'CRAM-MD5'"
op|']'
op|'='
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'CramMD5Credentials'
newline|'\n'
name|'cAuth'
op|'='
name|'imap4'
op|'.'
name|'CramMD5ClientAuthenticator'
op|'('
string|"'testuser'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'registerAuthenticator'
op|'('
name|'cAuth'
op|')'
newline|'\n'
nl|'\n'
DECL|function|misauth
name|'def'
name|'misauth'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'authenticate'
op|'('
string|"'not the secret'"
op|')'
newline|'\n'
DECL|function|authed
dedent|''
name|'def'
name|'authed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authenticated'
op|'='
number|'1'
newline|'\n'
DECL|function|misauthed
dedent|''
name|'def'
name|'misauthed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authenticated'
op|'='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'misauth'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'authed'
op|')'
op|','
name|'strip'
op|'('
name|'misauthed'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|','
name|'d1'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestFailedCramMD5'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestFailedCramMD5
dedent|''
name|'def'
name|'_cbTestFailedCramMD5'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authenticated'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'account'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLOGIN
dedent|''
name|'def'
name|'testLOGIN'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'server'
op|'.'
name|'challengers'
op|'['
string|"'LOGIN'"
op|']'
op|'='
name|'imap4'
op|'.'
name|'LOGINCredentials'
newline|'\n'
name|'cAuth'
op|'='
name|'imap4'
op|'.'
name|'LOGINAuthenticator'
op|'('
string|"'testuser'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'registerAuthenticator'
op|'('
name|'cAuth'
op|')'
newline|'\n'
nl|'\n'
DECL|function|auth
name|'def'
name|'auth'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'authenticate'
op|'('
string|"'secret'"
op|')'
newline|'\n'
DECL|function|authed
dedent|''
name|'def'
name|'authed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authenticated'
op|'='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'auth'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'authed'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|','
name|'d1'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestLOGIN'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestLOGIN
dedent|''
name|'def'
name|'_cbTestLOGIN'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authenticated'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'account'
op|','
name|'self'
op|'.'
name|'account'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFailedLOGIN
dedent|''
name|'def'
name|'testFailedLOGIN'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'server'
op|'.'
name|'challengers'
op|'['
string|"'LOGIN'"
op|']'
op|'='
name|'imap4'
op|'.'
name|'LOGINCredentials'
newline|'\n'
name|'cAuth'
op|'='
name|'imap4'
op|'.'
name|'LOGINAuthenticator'
op|'('
string|"'testuser'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'registerAuthenticator'
op|'('
name|'cAuth'
op|')'
newline|'\n'
nl|'\n'
DECL|function|misauth
name|'def'
name|'misauth'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'authenticate'
op|'('
string|"'not the secret'"
op|')'
newline|'\n'
DECL|function|authed
dedent|''
name|'def'
name|'authed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authenticated'
op|'='
number|'1'
newline|'\n'
DECL|function|misauthed
dedent|''
name|'def'
name|'misauthed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authenticated'
op|'='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'misauth'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'authed'
op|')'
op|','
name|'strip'
op|'('
name|'misauthed'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|','
name|'d1'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestFailedLOGIN'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestFailedLOGIN
dedent|''
name|'def'
name|'_cbTestFailedLOGIN'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authenticated'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'account'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPLAIN
dedent|''
name|'def'
name|'testPLAIN'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'server'
op|'.'
name|'challengers'
op|'['
string|"'PLAIN'"
op|']'
op|'='
name|'imap4'
op|'.'
name|'PLAINCredentials'
newline|'\n'
name|'cAuth'
op|'='
name|'imap4'
op|'.'
name|'PLAINAuthenticator'
op|'('
string|"'testuser'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'registerAuthenticator'
op|'('
name|'cAuth'
op|')'
newline|'\n'
nl|'\n'
DECL|function|auth
name|'def'
name|'auth'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'authenticate'
op|'('
string|"'secret'"
op|')'
newline|'\n'
DECL|function|authed
dedent|''
name|'def'
name|'authed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authenticated'
op|'='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'auth'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'authed'
op|')'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|','
name|'d1'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestPLAIN'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestPLAIN
dedent|''
name|'def'
name|'_cbTestPLAIN'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authenticated'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'account'
op|','
name|'self'
op|'.'
name|'account'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFailedPLAIN
dedent|''
name|'def'
name|'testFailedPLAIN'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'server'
op|'.'
name|'challengers'
op|'['
string|"'PLAIN'"
op|']'
op|'='
name|'imap4'
op|'.'
name|'PLAINCredentials'
newline|'\n'
name|'cAuth'
op|'='
name|'imap4'
op|'.'
name|'PLAINAuthenticator'
op|'('
string|"'testuser'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'registerAuthenticator'
op|'('
name|'cAuth'
op|')'
newline|'\n'
nl|'\n'
DECL|function|misauth
name|'def'
name|'misauth'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'authenticate'
op|'('
string|"'not the secret'"
op|')'
newline|'\n'
DECL|function|authed
dedent|''
name|'def'
name|'authed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authenticated'
op|'='
number|'1'
newline|'\n'
DECL|function|misauthed
dedent|''
name|'def'
name|'misauthed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authenticated'
op|'='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'misauth'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'strip'
op|'('
name|'authed'
op|')'
op|','
name|'strip'
op|'('
name|'misauthed'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|','
name|'d1'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestFailedPLAIN'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestFailedPLAIN
dedent|''
name|'def'
name|'_cbTestFailedPLAIN'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authenticated'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'account'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SASLPLAINTestCase
dedent|''
dedent|''
name|'class'
name|'SASLPLAINTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for I{SASL PLAIN} authentication, as implemented by\n    L{imap4.PLAINAuthenticator} and L{imap4.PLAINCredentials}.\n\n    @see: U{http://www.faqs.org/rfcs/rfc2595.html}\n    @see: U{http://www.faqs.org/rfcs/rfc4616.html}\n    """'
newline|'\n'
DECL|member|test_authenticatorChallengeResponse
name|'def'
name|'test_authenticatorChallengeResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{PLAINAuthenticator.challengeResponse} returns challenge strings of\n        the form::\n\n            NUL<authn-id>NUL<secret>\n        """'
newline|'\n'
name|'username'
op|'='
string|"'testuser'"
newline|'\n'
name|'secret'
op|'='
string|"'secret'"
newline|'\n'
name|'chal'
op|'='
string|"'challenge'"
newline|'\n'
name|'cAuth'
op|'='
name|'imap4'
op|'.'
name|'PLAINAuthenticator'
op|'('
name|'username'
op|')'
newline|'\n'
name|'response'
op|'='
name|'cAuth'
op|'.'
name|'challengeResponse'
op|'('
name|'secret'
op|','
name|'chal'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'response'
op|','
string|"'\\0%s\\0%s'"
op|'%'
op|'('
name|'username'
op|','
name|'secret'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_credentialsSetResponse
dedent|''
name|'def'
name|'test_credentialsSetResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{PLAINCredentials.setResponse} parses challenge strings of the\n        form::\n\n            NUL<authn-id>NUL<secret>\n        """'
newline|'\n'
name|'cred'
op|'='
name|'imap4'
op|'.'
name|'PLAINCredentials'
op|'('
op|')'
newline|'\n'
name|'cred'
op|'.'
name|'setResponse'
op|'('
string|"'\\0testuser\\0secret'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cred'
op|'.'
name|'username'
op|','
string|"'testuser'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cred'
op|'.'
name|'password'
op|','
string|"'secret'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_credentialsInvalidResponse
dedent|''
name|'def'
name|'test_credentialsInvalidResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{PLAINCredentials.setResponse} raises L{imap4.IllegalClientResponse}\n        when passed a string not of the expected form.\n        """'
newline|'\n'
name|'cred'
op|'='
name|'imap4'
op|'.'
name|'PLAINCredentials'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'IllegalClientResponse'
op|','
name|'cred'
op|'.'
name|'setResponse'
op|','
string|"'hello'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'IllegalClientResponse'
op|','
name|'cred'
op|'.'
name|'setResponse'
op|','
string|"'hello\\0world'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'IllegalClientResponse'
op|','
name|'cred'
op|'.'
name|'setResponse'
op|','
nl|'\n'
string|"'hello\\0world\\0Zoom!\\0'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnsolicitedResponseTestCase
dedent|''
dedent|''
name|'class'
name|'UnsolicitedResponseTestCase'
op|'('
name|'IMAP4HelperMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testReadWrite
indent|'    '
name|'def'
name|'testReadWrite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|login
indent|'        '
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|loggedIn
dedent|''
name|'def'
name|'loggedIn'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'server'
op|'.'
name|'modeChanged'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'loggedIn'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|','
name|'d1'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestReadWrite'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestReadWrite
dedent|''
name|'def'
name|'_cbTestReadWrite'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'E'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'events'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'E'
op|','
op|'['
op|'['
string|"'modeChanged'"
op|','
number|'1'
op|']'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testReadOnly
dedent|''
name|'def'
name|'testReadOnly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|login
indent|'        '
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|loggedIn
dedent|''
name|'def'
name|'loggedIn'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'server'
op|'.'
name|'modeChanged'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'loggedIn'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|','
name|'d1'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestReadOnly'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestReadOnly
dedent|''
name|'def'
name|'_cbTestReadOnly'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'E'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'events'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'E'
op|','
op|'['
op|'['
string|"'modeChanged'"
op|','
number|'0'
op|']'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFlagChange
dedent|''
name|'def'
name|'testFlagChange'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flags'
op|'='
op|'{'
nl|'\n'
number|'1'
op|':'
op|'['
string|"'\\\\Answered'"
op|','
string|"'\\\\Deleted'"
op|']'
op|','
nl|'\n'
number|'5'
op|':'
op|'['
op|']'
op|','
nl|'\n'
number|'10'
op|':'
op|'['
string|"'\\\\Recent'"
op|']'
nl|'\n'
op|'}'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|loggedIn
dedent|''
name|'def'
name|'loggedIn'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'server'
op|'.'
name|'flagsChanged'
op|'('
name|'flags'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'loggedIn'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|','
name|'d1'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestFlagChange'
op|','
name|'flags'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestFlagChange
dedent|''
name|'def'
name|'_cbTestFlagChange'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'flags'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'E'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'events'
newline|'\n'
name|'expect'
op|'='
op|'['
op|'['
string|"'flagsChanged'"
op|','
op|'{'
name|'x'
op|'['
number|'0'
op|']'
op|':'
name|'x'
op|'['
number|'1'
op|']'
op|'}'
op|']'
name|'for'
name|'x'
name|'in'
name|'flags'
op|'.'
name|'items'
op|'('
op|')'
op|']'
newline|'\n'
name|'E'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'expect'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'E'
op|','
name|'expect'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNewMessages
dedent|''
name|'def'
name|'testNewMessages'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|login
indent|'        '
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|loggedIn
dedent|''
name|'def'
name|'loggedIn'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'server'
op|'.'
name|'newMessages'
op|'('
number|'10'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'loggedIn'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|','
name|'d1'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestNewMessages'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestNewMessages
dedent|''
name|'def'
name|'_cbTestNewMessages'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'E'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'events'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'E'
op|','
op|'['
op|'['
string|"'newMessages'"
op|','
number|'10'
op|','
name|'None'
op|']'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNewRecentMessages
dedent|''
name|'def'
name|'testNewRecentMessages'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|login
indent|'        '
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|loggedIn
dedent|''
name|'def'
name|'loggedIn'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'server'
op|'.'
name|'newMessages'
op|'('
name|'None'
op|','
number|'10'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'loggedIn'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|','
name|'d1'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestNewRecentMessages'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestNewRecentMessages
dedent|''
name|'def'
name|'_cbTestNewRecentMessages'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'E'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'events'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'E'
op|','
op|'['
op|'['
string|"'newMessages'"
op|','
name|'None'
op|','
number|'10'
op|']'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNewMessagesAndRecent
dedent|''
name|'def'
name|'testNewMessagesAndRecent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|login
indent|'        '
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|loggedIn
dedent|''
name|'def'
name|'loggedIn'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'server'
op|'.'
name|'newMessages'
op|'('
number|'20'
op|','
number|'10'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'loggedIn'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|','
name|'d1'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestNewMessagesAndRecent'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestNewMessagesAndRecent
dedent|''
name|'def'
name|'_cbTestNewMessagesAndRecent'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'E'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'events'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'E'
op|','
op|'['
op|'['
string|"'newMessages'"
op|','
number|'20'
op|','
name|'None'
op|']'
op|','
op|'['
string|"'newMessages'"
op|','
name|'None'
op|','
number|'10'
op|']'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ClientCapabilityTests
dedent|''
dedent|''
name|'class'
name|'ClientCapabilityTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for issuance of the CAPABILITY command and handling of its response.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create an L{imap4.IMAP4Client} connected to a L{StringTransport}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'imap4'
op|'.'
name|'IMAP4Client'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'* OK [IMAP4rev1]\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_simpleAtoms
dedent|''
name|'def'
name|'test_simpleAtoms'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A capability response consisting only of atoms without C{\'=\'} in them\n        should result in a dict mapping those atoms to C{None}.\n        """'
newline|'\n'
name|'capabilitiesResult'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'getCapabilities'
op|'('
name|'useCache'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'* CAPABILITY IMAP4rev1 LOGINDISABLED\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'0001 OK Capability completed.\\r\\n'"
op|')'
newline|'\n'
DECL|function|gotCapabilities
name|'def'
name|'gotCapabilities'
op|'('
name|'capabilities'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'capabilities'
op|','
op|'{'
string|"'IMAP4rev1'"
op|':'
name|'None'
op|','
string|"'LOGINDISABLED'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'capabilitiesResult'
op|'.'
name|'addCallback'
op|'('
name|'gotCapabilities'
op|')'
newline|'\n'
name|'return'
name|'capabilitiesResult'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_categoryAtoms
dedent|''
name|'def'
name|'test_categoryAtoms'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A capability response consisting of atoms including C{\'=\'} should have\n        those atoms split on that byte and have capabilities in the same\n        category aggregated into lists in the resulting dictionary.\n\n        (n.b. - I made up the word "category atom"; the protocol has no notion\n        of structure here, but rather allows each capability to define the\n        semantics of its entry in the capability response in a freeform manner.\n        If I had realized this earlier, the API for capabilities would look\n        different.  As it is, we can hope that no one defines any crazy\n        semantics which are incompatible with this API, or try to figure out a\n        better API when someone does. -exarkun)\n        """'
newline|'\n'
name|'capabilitiesResult'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'getCapabilities'
op|'('
name|'useCache'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'* CAPABILITY IMAP4rev1 AUTH=LOGIN AUTH=PLAIN\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'0001 OK Capability completed.\\r\\n'"
op|')'
newline|'\n'
DECL|function|gotCapabilities
name|'def'
name|'gotCapabilities'
op|'('
name|'capabilities'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'capabilities'
op|','
op|'{'
string|"'IMAP4rev1'"
op|':'
name|'None'
op|','
string|"'AUTH'"
op|':'
op|'['
string|"'LOGIN'"
op|','
string|"'PLAIN'"
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'capabilitiesResult'
op|'.'
name|'addCallback'
op|'('
name|'gotCapabilities'
op|')'
newline|'\n'
name|'return'
name|'capabilitiesResult'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mixedAtoms
dedent|''
name|'def'
name|'test_mixedAtoms'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A capability response consisting of both simple and category atoms of\n        the same type should result in a list containing C{None} as well as the\n        values for the category.\n        """'
newline|'\n'
name|'capabilitiesResult'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'getCapabilities'
op|'('
name|'useCache'
op|'='
name|'False'
op|')'
newline|'\n'
comment|'# Exercise codepath for both orderings of =-having and =-missing'
nl|'\n'
comment|'# capabilities.'
nl|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
string|"'* CAPABILITY IMAP4rev1 FOO FOO=BAR BAR=FOO BAR\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'0001 OK Capability completed.\\r\\n'"
op|')'
newline|'\n'
DECL|function|gotCapabilities
name|'def'
name|'gotCapabilities'
op|'('
name|'capabilities'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'capabilities'
op|','
op|'{'
string|"'IMAP4rev1'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'FOO'"
op|':'
op|'['
name|'None'
op|','
string|"'BAR'"
op|']'
op|','
nl|'\n'
string|"'BAR'"
op|':'
op|'['
string|"'FOO'"
op|','
name|'None'
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'capabilitiesResult'
op|'.'
name|'addCallback'
op|'('
name|'gotCapabilities'
op|')'
newline|'\n'
name|'return'
name|'capabilitiesResult'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StillSimplerClient
dedent|''
dedent|''
name|'class'
name|'StillSimplerClient'
op|'('
name|'imap4'
op|'.'
name|'IMAP4Client'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An IMAP4 client which keeps track of unsolicited flag changes.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'imap4'
op|'.'
name|'IMAP4Client'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|flagsChanged
dedent|''
name|'def'
name|'flagsChanged'
op|'('
name|'self'
op|','
name|'newFlags'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'.'
name|'update'
op|'('
name|'newFlags'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|HandCraftedTestCase
dedent|''
dedent|''
name|'class'
name|'HandCraftedTestCase'
op|'('
name|'IMAP4HelperMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testTrailingLiteral
indent|'    '
name|'def'
name|'testTrailingLiteral'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'c'
op|'='
name|'imap4'
op|'.'
name|'IMAP4Client'
op|'('
op|')'
newline|'\n'
name|'c'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'lineReceived'
op|'('
string|"'* OK [IMAP4rev1]'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbSelect
name|'def'
name|'cbSelect'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'c'
op|'.'
name|'fetchMessage'
op|'('
string|"'1'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'* 1 FETCH (RFC822 {10}\\r\\n0123456789\\r\\n RFC822.SIZE 10)\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'0003 OK FETCH\\r\\n'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|cbLogin
dedent|''
name|'def'
name|'cbLogin'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'c'
op|'.'
name|'select'
op|'('
string|"'inbox'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'lineReceived'
op|'('
string|"'0002 OK SELECT'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbSelect'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'c'
op|'.'
name|'login'
op|'('
string|"'blah'"
op|','
string|"'blah'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'0001 OK LOGIN\\r\\n'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbLogin'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testPathelogicalScatteringOfLiterals
dedent|''
name|'def'
name|'testPathelogicalScatteringOfLiterals'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'server'
op|'.'
name|'checker'
op|'.'
name|'addUser'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
nl|'\n'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|'('
string|'"01 LOGIN {8}\\r\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|'"+ Ready for 8 octets of text\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|'('
string|'"testuser {13}\\r\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|'"+ Ready for 13 octets of text\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|'('
string|'"password-test\\r\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|'"01 OK LOGIN succeeded\\r\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'state'
op|','
string|"'auth'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'connectionLost'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
string|'"Connection done."'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unsolicitedResponseMixedWithSolicitedResponse
dedent|''
name|'def'
name|'test_unsolicitedResponseMixedWithSolicitedResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If unsolicited data is received along with solicited data in the\n        response to a I{FETCH} command issued by L{IMAP4Client.fetchSpecific},\n        the unsolicited data is passed to the appropriate callback and not\n        included in the result with wihch the L{Deferred} returned by\n        L{IMAP4Client.fetchSpecific} fires.\n        """'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'c'
op|'='
name|'StillSimplerClient'
op|'('
op|')'
newline|'\n'
name|'c'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'lineReceived'
op|'('
string|"'* OK [IMAP4rev1]'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'c'
op|'.'
name|'login'
op|'('
string|"'blah'"
op|','
string|"'blah'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'0001 OK LOGIN\\r\\n'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
DECL|function|select
dedent|''
name|'def'
name|'select'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'c'
op|'.'
name|'select'
op|'('
string|"'inbox'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'lineReceived'
op|'('
string|"'0002 OK SELECT'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
DECL|function|fetch
dedent|''
name|'def'
name|'fetch'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'c'
op|'.'
name|'fetchSpecific'
op|'('
string|"'1:*'"
op|','
nl|'\n'
name|'headerType'
op|'='
string|"'HEADER.FIELDS'"
op|','
nl|'\n'
name|'headerArgs'
op|'='
op|'['
string|"'SUBJECT'"
op|']'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|'\'* 1 FETCH (BODY[HEADER.FIELDS ("SUBJECT")] {38}\\r\\n\''
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'Subject: Suprise for your woman...\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"')\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'* 1 FETCH (FLAGS (\\Seen))\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|'\'* 2 FETCH (BODY[HEADER.FIELDS ("SUBJECT")] {75}\\r\\n\''
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'Subject: What you been doing. Order your meds here . ,. handcuff madsen\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"')\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'0003 OK FETCH completed\\r\\n'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
DECL|function|test
dedent|''
name|'def'
name|'test'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|','
op|'{'
nl|'\n'
number|'1'
op|':'
op|'['
op|'['
string|"'BODY'"
op|','
op|'['
string|"'HEADER.FIELDS'"
op|','
op|'['
string|"'SUBJECT'"
op|']'
op|']'
op|','
nl|'\n'
string|"'Subject: Suprise for your woman...\\r\\n\\r\\n'"
op|']'
op|']'
op|','
nl|'\n'
number|'2'
op|':'
op|'['
op|'['
string|"'BODY'"
op|','
op|'['
string|"'HEADER.FIELDS'"
op|','
op|'['
string|"'SUBJECT'"
op|']'
op|']'
op|','
nl|'\n'
string|"'Subject: What you been doing. Order your meds here . ,. handcuff madsen\\r\\n\\r\\n'"
op|']'
op|']'
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c'
op|'.'
name|'flags'
op|','
op|'{'
number|'1'
op|':'
op|'['
string|"'\\\\Seen'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'login'
op|'('
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'select'
op|')'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'fetch'
op|')'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'test'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_literalWithoutPrecedingWhitespace
dedent|''
name|'def'
name|'test_literalWithoutPrecedingWhitespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Literals should be recognized even when they are not preceded by\n        whitespace.\n        """'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'imap4'
op|'.'
name|'IMAP4Client'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'lineReceived'
op|'('
string|"'* OK [IMAP4rev1]'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'protocol'
op|'.'
name|'login'
op|'('
string|"'blah'"
op|','
string|"'blah'"
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'0001 OK LOGIN\\r\\n'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
DECL|function|select
dedent|''
name|'def'
name|'select'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'protocol'
op|'.'
name|'select'
op|'('
string|"'inbox'"
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'lineReceived'
op|'('
string|"'0002 OK SELECT'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
DECL|function|fetch
dedent|''
name|'def'
name|'fetch'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'protocol'
op|'.'
name|'fetchSpecific'
op|'('
string|"'1:*'"
op|','
nl|'\n'
name|'headerType'
op|'='
string|"'HEADER.FIELDS'"
op|','
nl|'\n'
name|'headerArgs'
op|'='
op|'['
string|"'SUBJECT'"
op|']'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
string|'\'* 1 FETCH (BODY[HEADER.FIELDS ({7}\\r\\nSUBJECT)] "Hello")\\r\\n\''
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'0003 OK FETCH completed\\r\\n'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
DECL|function|test
dedent|''
name|'def'
name|'test'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'result'
op|','
op|'{'
number|'1'
op|':'
op|'['
op|'['
string|"'BODY'"
op|','
op|'['
string|"'HEADER.FIELDS'"
op|','
op|'['
string|"'SUBJECT'"
op|']'
op|']'
op|','
string|"'Hello'"
op|']'
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'login'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'select'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'fetch'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'test'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nonIntegerLiteralLength
dedent|''
name|'def'
name|'test_nonIntegerLiteralLength'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server sends a literal length which cannot be parsed as an\n        integer, L{IMAP4Client.lineReceived} should cause the protocol to be\n        disconnected by raising L{imap4.IllegalServerResponse}.\n        """'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'imap4'
op|'.'
name|'IMAP4Client'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'lineReceived'
op|'('
string|"'* OK [IMAP4rev1]'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'protocol'
op|'.'
name|'login'
op|'('
string|"'blah'"
op|','
string|"'blah'"
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'0001 OK LOGIN\\r\\n'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
DECL|function|select
dedent|''
name|'def'
name|'select'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'protocol'
op|'.'
name|'select'
op|'('
string|"'inbox'"
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'lineReceived'
op|'('
string|"'0002 OK SELECT'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
DECL|function|fetch
dedent|''
name|'def'
name|'fetch'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'protocol'
op|'.'
name|'fetchSpecific'
op|'('
string|"'1:*'"
op|','
nl|'\n'
name|'headerType'
op|'='
string|"'HEADER.FIELDS'"
op|','
nl|'\n'
name|'headerArgs'
op|'='
op|'['
string|"'SUBJECT'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'IllegalServerResponse'
op|','
nl|'\n'
name|'protocol'
op|'.'
name|'dataReceived'
op|','
nl|'\n'
string|"'* 1 FETCH {xyz}\\r\\n...'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'login'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'select'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'fetch'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_flagsChangedInsideFetchSpecificResponse
dedent|''
name|'def'
name|'test_flagsChangedInsideFetchSpecificResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Any unrequested flag information received along with other requested\n        information in an untagged I{FETCH} received in response to a request\n        issued with L{IMAP4Client.fetchSpecific} is passed to the\n        C{flagsChanged} callback.\n        """'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'c'
op|'='
name|'StillSimplerClient'
op|'('
op|')'
newline|'\n'
name|'c'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'lineReceived'
op|'('
string|"'* OK [IMAP4rev1]'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'c'
op|'.'
name|'login'
op|'('
string|"'blah'"
op|','
string|"'blah'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'0001 OK LOGIN\\r\\n'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
DECL|function|select
dedent|''
name|'def'
name|'select'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'c'
op|'.'
name|'select'
op|'('
string|"'inbox'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'lineReceived'
op|'('
string|"'0002 OK SELECT'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
DECL|function|fetch
dedent|''
name|'def'
name|'fetch'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'c'
op|'.'
name|'fetchSpecific'
op|'('
string|"'1:*'"
op|','
nl|'\n'
name|'headerType'
op|'='
string|"'HEADER.FIELDS'"
op|','
nl|'\n'
name|'headerArgs'
op|'='
op|'['
string|"'SUBJECT'"
op|']'
op|')'
newline|'\n'
comment|'# This response includes FLAGS after the requested data.'
nl|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|'\'* 1 FETCH (BODY[HEADER.FIELDS ("SUBJECT")] {22}\\r\\n\''
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'Subject: subject one\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"' FLAGS (\\\\Recent))\\r\\n'"
op|')'
newline|'\n'
comment|'# And this one includes it before!  Either is possible.'
nl|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|'\'* 2 FETCH (FLAGS (\\\\Seen) BODY[HEADER.FIELDS ("SUBJECT")] {22}\\r\\n\''
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'Subject: subject two\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"')\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'0003 OK FETCH completed\\r\\n'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|test
dedent|''
name|'def'
name|'test'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|','
op|'{'
nl|'\n'
number|'1'
op|':'
op|'['
op|'['
string|"'BODY'"
op|','
op|'['
string|"'HEADER.FIELDS'"
op|','
op|'['
string|"'SUBJECT'"
op|']'
op|']'
op|','
nl|'\n'
string|"'Subject: subject one\\r\\n'"
op|']'
op|']'
op|','
nl|'\n'
number|'2'
op|':'
op|'['
op|'['
string|"'BODY'"
op|','
op|'['
string|"'HEADER.FIELDS'"
op|','
op|'['
string|"'SUBJECT'"
op|']'
op|']'
op|','
nl|'\n'
string|"'Subject: subject two\\r\\n'"
op|']'
op|']'
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c'
op|'.'
name|'flags'
op|','
op|'{'
number|'1'
op|':'
op|'['
string|"'\\\\Recent'"
op|']'
op|','
number|'2'
op|':'
op|'['
string|"'\\\\Seen'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'login'
op|'('
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'select'
op|')'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'fetch'
op|')'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'test'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_flagsChangedInsideFetchMessageResponse
dedent|''
name|'def'
name|'test_flagsChangedInsideFetchMessageResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Any unrequested flag information received along with other requested\n        information in an untagged I{FETCH} received in response to a request\n        issued with L{IMAP4Client.fetchMessage} is passed to the\n        C{flagsChanged} callback.\n        """'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'c'
op|'='
name|'StillSimplerClient'
op|'('
op|')'
newline|'\n'
name|'c'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'lineReceived'
op|'('
string|"'* OK [IMAP4rev1]'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'c'
op|'.'
name|'login'
op|'('
string|"'blah'"
op|','
string|"'blah'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'0001 OK LOGIN\\r\\n'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
DECL|function|select
dedent|''
name|'def'
name|'select'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'c'
op|'.'
name|'select'
op|'('
string|"'inbox'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'lineReceived'
op|'('
string|"'0002 OK SELECT'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
DECL|function|fetch
dedent|''
name|'def'
name|'fetch'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'c'
op|'.'
name|'fetchMessage'
op|'('
string|"'1:*'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'* 1 FETCH (RFC822 {24}\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'Subject: first subject\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"' FLAGS (\\Seen))\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'* 2 FETCH (FLAGS (\\Recent \\Seen) RFC822 {25}\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'Subject: second subject\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"')\\r\\n'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dataReceived'
op|'('
string|"'0003 OK FETCH completed\\r\\n'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|test
dedent|''
name|'def'
name|'test'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|','
op|'{'
nl|'\n'
number|'1'
op|':'
op|'{'
string|"'RFC822'"
op|':'
string|"'Subject: first subject\\r\\n'"
op|'}'
op|','
nl|'\n'
number|'2'
op|':'
op|'{'
string|"'RFC822'"
op|':'
string|"'Subject: second subject\\r\\n'"
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'c'
op|'.'
name|'flags'
op|','
op|'{'
number|'1'
op|':'
op|'['
string|"'\\\\Seen'"
op|']'
op|','
number|'2'
op|':'
op|'['
string|"'\\\\Recent'"
op|','
string|"'\\\\Seen'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'login'
op|'('
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'select'
op|')'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'fetch'
op|')'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'test'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PreauthIMAP4ClientMixin
dedent|''
dedent|''
name|'class'
name|'PreauthIMAP4ClientMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Mixin for L{unittest.TestCase} subclasses which provides a C{setUp} method\n    which creates an L{IMAP4Client} connected to a L{StringTransport} and puts\n    it into the I{authenticated} state.\n\n    @ivar transport: A L{StringTransport} to which C{client} is connected.\n    @ivar client: An L{IMAP4Client} which is connected to C{transport}.\n    """'
newline|'\n'
DECL|variable|clientProtocol
name|'clientProtocol'
op|'='
name|'imap4'
op|'.'
name|'IMAP4Client'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create an IMAP4Client connected to a fake transport and in the\n        authenticated state.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'='
name|'self'
op|'.'
name|'clientProtocol'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'dataReceived'
op|'('
string|"'* PREAUTH Hello unittest\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_extractDeferredResult
dedent|''
name|'def'
name|'_extractDeferredResult'
op|'('
name|'self'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Synchronously extract the result of the given L{Deferred}.  Fail the\n        test if that is not possible.\n        """'
newline|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'error'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'result'
op|'.'
name|'append'
op|','
name|'error'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'if'
name|'result'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'result'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'error'
op|'['
number|'0'
op|']'
op|'.'
name|'raiseException'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected result not available"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IMAP4ClientExamineTests
dedent|''
dedent|''
dedent|''
name|'class'
name|'IMAP4ClientExamineTests'
op|'('
name|'PreauthIMAP4ClientMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the L{IMAP4Client.examine} method.\n\n    An example of usage of the EXAMINE command from RFC 3501, section 6.3.2::\n\n        S: * 17 EXISTS\n        S: * 2 RECENT\n        S: * OK [UNSEEN 8] Message 8 is first unseen\n        S: * OK [UIDVALIDITY 3857529045] UIDs valid\n        S: * OK [UIDNEXT 4392] Predicted next UID\n        S: * FLAGS (\\\\Answered \\\\Flagged \\\\Deleted \\\\Seen \\\\Draft)\n        S: * OK [PERMANENTFLAGS ()] No permanent flags permitted\n        S: A932 OK [READ-ONLY] EXAMINE completed\n    """'
newline|'\n'
DECL|member|_examine
name|'def'
name|'_examine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Issue an examine command, assert that the correct bytes are written to\n        the transport, and return the L{Deferred} returned by the C{examine}\n        method.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'examine'
op|'('
string|"'foobox'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'0001 EXAMINE foobox\\r\\n'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_response
dedent|''
name|'def'
name|'_response'
op|'('
name|'self'
op|','
op|'*'
name|'lines'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Deliver the given (unterminated) response lines to C{self.client} and\n        then deliver a tagged EXAMINE completion line to finish the EXAMINE\n        response.\n        """'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'client'
op|'.'
name|'dataReceived'
op|'('
name|'line'
op|'+'
string|"'\\r\\n'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'dataReceived'
op|'('
string|"'0001 OK [READ-ONLY] EXAMINE completed\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_exists
dedent|''
name|'def'
name|'test_exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server response to an I{EXAMINE} command includes an I{EXISTS}\n        response, the L{Deferred} return by L{IMAP4Client.examine} fires with a\n        C{dict} including the value associated with the C{\'EXISTS\'} key.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_examine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
string|"'* 3 EXISTS'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
nl|'\n'
op|'{'
string|"'READ-WRITE'"
op|':'
name|'False'
op|','
string|"'EXISTS'"
op|':'
number|'3'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nonIntegerExists
dedent|''
name|'def'
name|'test_nonIntegerExists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server returns a non-integer EXISTS value in its response to an\n        I{EXAMINE} command, the L{Deferred} returned by L{IMAP4Client.examine}\n        fails with L{IllegalServerResponse}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_examine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
string|"'* foo EXISTS'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'IllegalServerResponse'
op|','
name|'self'
op|'.'
name|'_extractDeferredResult'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_recent
dedent|''
name|'def'
name|'test_recent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server response to an I{EXAMINE} command includes an I{RECENT}\n        response, the L{Deferred} return by L{IMAP4Client.examine} fires with a\n        C{dict} including the value associated with the C{\'RECENT\'} key.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_examine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
string|"'* 5 RECENT'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
nl|'\n'
op|'{'
string|"'READ-WRITE'"
op|':'
name|'False'
op|','
string|"'RECENT'"
op|':'
number|'5'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nonIntegerRecent
dedent|''
name|'def'
name|'test_nonIntegerRecent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server returns a non-integer RECENT value in its response to an\n        I{EXAMINE} command, the L{Deferred} returned by L{IMAP4Client.examine}\n        fails with L{IllegalServerResponse}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_examine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
string|"'* foo RECENT'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'IllegalServerResponse'
op|','
name|'self'
op|'.'
name|'_extractDeferredResult'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unseen
dedent|''
name|'def'
name|'test_unseen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server response to an I{EXAMINE} command includes an I{UNSEEN}\n        response, the L{Deferred} returned by L{IMAP4Client.examine} fires with\n        a C{dict} including the value associated with the C{\'UNSEEN\'} key.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_examine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
string|"'* OK [UNSEEN 8] Message 8 is first unseen'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
nl|'\n'
op|'{'
string|"'READ-WRITE'"
op|':'
name|'False'
op|','
string|"'UNSEEN'"
op|':'
number|'8'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nonIntegerUnseen
dedent|''
name|'def'
name|'test_nonIntegerUnseen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server returns a non-integer UNSEEN value in its response to an\n        I{EXAMINE} command, the L{Deferred} returned by L{IMAP4Client.examine}\n        fails with L{IllegalServerResponse}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_examine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
string|"'* OK [UNSEEN foo] Message foo is first unseen'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'IllegalServerResponse'
op|','
name|'self'
op|'.'
name|'_extractDeferredResult'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_uidvalidity
dedent|''
name|'def'
name|'test_uidvalidity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server response to an I{EXAMINE} command includes an\n        I{UIDVALIDITY} response, the L{Deferred} returned by\n        L{IMAP4Client.examine} fires with a C{dict} including the value\n        associated with the C{\'UIDVALIDITY\'} key.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_examine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
string|"'* OK [UIDVALIDITY 12345] UIDs valid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
nl|'\n'
op|'{'
string|"'READ-WRITE'"
op|':'
name|'False'
op|','
string|"'UIDVALIDITY'"
op|':'
number|'12345'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nonIntegerUIDVALIDITY
dedent|''
name|'def'
name|'test_nonIntegerUIDVALIDITY'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server returns a non-integer UIDVALIDITY value in its response\n        to an I{EXAMINE} command, the L{Deferred} returned by\n        L{IMAP4Client.examine} fails with L{IllegalServerResponse}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_examine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
string|"'* OK [UIDVALIDITY foo] UIDs valid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'IllegalServerResponse'
op|','
name|'self'
op|'.'
name|'_extractDeferredResult'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_uidnext
dedent|''
name|'def'
name|'test_uidnext'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server response to an I{EXAMINE} command includes an I{UIDNEXT}\n        response, the L{Deferred} returned by L{IMAP4Client.examine} fires with\n        a C{dict} including the value associated with the C{\'UIDNEXT\'} key.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_examine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
string|"'* OK [UIDNEXT 4392] Predicted next UID'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
nl|'\n'
op|'{'
string|"'READ-WRITE'"
op|':'
name|'False'
op|','
string|"'UIDNEXT'"
op|':'
number|'4392'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nonIntegerUIDNEXT
dedent|''
name|'def'
name|'test_nonIntegerUIDNEXT'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server returns a non-integer UIDNEXT value in its response to an\n        I{EXAMINE} command, the L{Deferred} returned by L{IMAP4Client.examine}\n        fails with L{IllegalServerResponse}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_examine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
string|"'* OK [UIDNEXT foo] Predicted next UID'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'IllegalServerResponse'
op|','
name|'self'
op|'.'
name|'_extractDeferredResult'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_flags
dedent|''
name|'def'
name|'test_flags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server response to an I{EXAMINE} command includes an I{FLAGS}\n        response, the L{Deferred} returned by L{IMAP4Client.examine} fires with\n        a C{dict} including the value associated with the C{\'FLAGS\'} key.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_examine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
nl|'\n'
string|"'* FLAGS (\\\\Answered \\\\Flagged \\\\Deleted \\\\Seen \\\\Draft)'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
op|'{'
nl|'\n'
string|"'READ-WRITE'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'FLAGS'"
op|':'
op|'('
string|"'\\\\Answered'"
op|','
string|"'\\\\Flagged'"
op|','
string|"'\\\\Deleted'"
op|','
string|"'\\\\Seen'"
op|','
nl|'\n'
string|"'\\\\Draft'"
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_permanentflags
dedent|''
name|'def'
name|'test_permanentflags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server response to an I{EXAMINE} command includes an I{FLAGS}\n        response, the L{Deferred} returned by L{IMAP4Client.examine} fires with\n        a C{dict} including the value associated with the C{\'FLAGS\'} key.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_examine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
nl|'\n'
string|"'* OK [PERMANENTFLAGS (\\\\Starred)] Just one permanent flag in '"
nl|'\n'
string|"'that list up there'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
op|'{'
nl|'\n'
string|"'READ-WRITE'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'PERMANENTFLAGS'"
op|':'
op|'('
string|"'\\\\Starred'"
op|','
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unrecognizedOk
dedent|''
name|'def'
name|'test_unrecognizedOk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server response to an I{EXAMINE} command includes an I{OK} with\n        unrecognized response code text, parsing does not fail.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_examine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
nl|'\n'
string|"'* OK [X-MADE-UP] I just made this response text up.'"
op|')'
newline|'\n'
comment|"# The value won't show up in the result.  It would be okay if it did"
nl|'\n'
comment|"# someday, perhaps.  This shouldn't ever happen, though."
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
op|'{'
string|"'READ-WRITE'"
op|':'
name|'False'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_bareOk
dedent|''
name|'def'
name|'test_bareOk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server response to an I{EXAMINE} command includes an I{OK} with\n        no response code text, parsing does not fail.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_examine'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
string|"'* OK'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
op|'{'
string|"'READ-WRITE'"
op|':'
name|'False'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IMAP4ClientExpungeTests
dedent|''
dedent|''
name|'class'
name|'IMAP4ClientExpungeTests'
op|'('
name|'PreauthIMAP4ClientMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the L{IMAP4Client.expunge} method.\n\n    An example of usage of the EXPUNGE command from RFC 3501, section 6.4.3::\n\n        C: A202 EXPUNGE\n        S: * 3 EXPUNGE\n        S: * 3 EXPUNGE\n        S: * 5 EXPUNGE\n        S: * 8 EXPUNGE\n        S: A202 OK EXPUNGE completed\n    """'
newline|'\n'
DECL|member|_expunge
name|'def'
name|'_expunge'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'expunge'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'0001 EXPUNGE\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_response
dedent|''
name|'def'
name|'_response'
op|'('
name|'self'
op|','
name|'sequenceNumbers'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'number'
name|'in'
name|'sequenceNumbers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'* %s EXPUNGE'"
op|'%'
op|'('
name|'number'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK EXPUNGE COMPLETED'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_expunge
dedent|''
name|'def'
name|'test_expunge'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.expunge} sends the I{EXPUNGE} command and returns a\n        L{Deferred} which fires with a C{list} of message sequence numbers\n        given by the server\'s response.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_expunge'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
op|'['
number|'3'
op|','
number|'3'
op|','
number|'5'
op|','
number|'8'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
op|'['
number|'3'
op|','
number|'3'
op|','
number|'5'
op|','
number|'8'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nonIntegerExpunged
dedent|''
name|'def'
name|'test_nonIntegerExpunged'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server responds with a non-integer where a message sequence\n        number is expected, the L{Deferred} returned by L{IMAP4Client.expunge}\n        fails with L{IllegalServerResponse}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_expunge'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
op|'['
number|'3'
op|','
number|'3'
op|','
string|"'foo'"
op|','
number|'8'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'IllegalServerResponse'
op|','
name|'self'
op|'.'
name|'_extractDeferredResult'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IMAP4ClientSearchTests
dedent|''
dedent|''
name|'class'
name|'IMAP4ClientSearchTests'
op|'('
name|'PreauthIMAP4ClientMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the L{IMAP4Client.search} method.\n\n    An example of usage of the SEARCH command from RFC 3501, section 6.4.4::\n\n        C: A282 SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM "Smith"\n        S: * SEARCH 2 84 882\n        S: A282 OK SEARCH completed\n        C: A283 SEARCH TEXT "string not in mailbox"\n        S: * SEARCH\n        S: A283 OK SEARCH completed\n        C: A284 SEARCH CHARSET UTF-8 TEXT {6}\n        C: XXXXXX\n        S: * SEARCH 43\n        S: A284 OK SEARCH completed\n    """'
newline|'\n'
DECL|member|_search
name|'def'
name|'_search'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'search'
op|'('
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'text'
op|'='
string|'"ABCDEF"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|'\'0001 SEARCH (TEXT "ABCDEF")\\r\\n\''
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_response
dedent|''
name|'def'
name|'_response'
op|'('
name|'self'
op|','
name|'messageNumbers'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
nl|'\n'
string|'"* SEARCH "'
op|'+'
string|'" "'
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'messageNumbers'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|'"0001 OK SEARCH completed"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_search
dedent|''
name|'def'
name|'test_search'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.search} sends the I{SEARCH} command and returns a\n        L{Deferred} which fires with a C{list} of message sequence numbers\n        given by the server\'s response.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_search'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
op|'['
number|'2'
op|','
number|'5'
op|','
number|'10'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
op|'['
number|'2'
op|','
number|'5'
op|','
number|'10'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nonIntegerFound
dedent|''
name|'def'
name|'test_nonIntegerFound'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server responds with a non-integer where a message sequence\n        number is expected, the L{Deferred} returned by L{IMAP4Client.search}\n        fails with L{IllegalServerResponse}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_search'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_response'
op|'('
op|'['
number|'2'
op|','
string|'"foo"'
op|','
number|'10'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'IllegalServerResponse'
op|','
name|'self'
op|'.'
name|'_extractDeferredResult'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IMAP4ClientFetchTests
dedent|''
dedent|''
name|'class'
name|'IMAP4ClientFetchTests'
op|'('
name|'PreauthIMAP4ClientMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the L{IMAP4Client.fetch} method.\n\n    See RFC 3501, section 6.4.5.\n    """'
newline|'\n'
DECL|member|test_fetchUID
name|'def'
name|'test_fetchUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.fetchUID} sends the I{FETCH UID} command and returns a\n        L{Deferred} which fires with a C{dict} mapping message sequence numbers\n        to C{dict}s mapping C{\'UID\'} to that message\'s I{UID} in the server\'s\n        response.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchUID'
op|'('
string|"'1:7'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'0001 FETCH 1:7 (UID)\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'* 2 FETCH (UID 22)'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'* 3 FETCH (UID 23)'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'* 4 FETCH (UID 24)'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'* 5 FETCH (UID 25)'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK FETCH completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
op|'{'
nl|'\n'
number|'2'
op|':'
op|'{'
string|"'UID'"
op|':'
string|"'22'"
op|'}'
op|','
nl|'\n'
number|'3'
op|':'
op|'{'
string|"'UID'"
op|':'
string|"'23'"
op|'}'
op|','
nl|'\n'
number|'4'
op|':'
op|'{'
string|"'UID'"
op|':'
string|"'24'"
op|'}'
op|','
nl|'\n'
number|'5'
op|':'
op|'{'
string|"'UID'"
op|':'
string|"'25'"
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fetchUIDNonIntegerFound
dedent|''
name|'def'
name|'test_fetchUIDNonIntegerFound'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server responds with a non-integer where a message sequence\n        number is expected, the L{Deferred} returned by L{IMAP4Client.fetchUID}\n        fails with L{IllegalServerResponse}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchUID'
op|'('
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'0001 FETCH 1 (UID)\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'* foo FETCH (UID 22)'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK FETCH completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'IllegalServerResponse'
op|','
name|'self'
op|'.'
name|'_extractDeferredResult'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_incompleteFetchUIDResponse
dedent|''
name|'def'
name|'test_incompleteFetchUIDResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server responds with an incomplete I{FETCH} response line, the\n        L{Deferred} returned by L{IMAP4Client.fetchUID} fails with\n        L{IllegalServerResponse}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchUID'
op|'('
string|"'1:7'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'0001 FETCH 1:7 (UID)\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'* 2 FETCH (UID 22)'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'* 3 FETCH (UID)'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'* 4 FETCH (UID 24)'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK FETCH completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'IllegalServerResponse'
op|','
name|'self'
op|'.'
name|'_extractDeferredResult'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fetchBody
dedent|''
name|'def'
name|'test_fetchBody'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.fetchBody} sends the I{FETCH BODY} command and returns a\n        L{Deferred} which fires with a C{dict} mapping message sequence numbers\n        to C{dict}s mapping C{\'RFC822.TEXT\'} to that message\'s body as given in\n        the server\'s response.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchBody'
op|'('
string|"'3'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'0001 FETCH 3 (RFC822.TEXT)\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|'\'* 3 FETCH (RFC822.TEXT "Message text")\''
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK FETCH completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
nl|'\n'
op|'{'
number|'3'
op|':'
op|'{'
string|"'RFC822.TEXT'"
op|':'
string|"'Message text'"
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fetchSpecific
dedent|''
name|'def'
name|'test_fetchSpecific'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.fetchSpecific} sends the I{BODY[]} command if no\n        parameters beyond the message set to retrieve are given.  It returns a\n        L{Deferred} which fires with a C{dict} mapping message sequence numbers\n        to C{list}s of corresponding message data given by the server\'s\n        response.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchSpecific'
op|'('
string|"'7'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'0001 FETCH 7 BODY[]\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|'\'* 7 FETCH (BODY[] "Some body")\''
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK FETCH completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
op|'{'
number|'7'
op|':'
op|'['
op|'['
string|"'BODY'"
op|','
op|'['
op|']'
op|','
string|'"Some body"'
op|']'
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fetchSpecificPeek
dedent|''
name|'def'
name|'test_fetchSpecificPeek'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.fetchSpecific} issues a I{BODY.PEEK[]} command if passed\n        C{True} for the C{peek} parameter.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchSpecific'
op|'('
string|"'6'"
op|','
name|'peek'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'0001 FETCH 6 BODY.PEEK[]\\r\\n'"
op|')'
newline|'\n'
comment|'# BODY.PEEK responses are just BODY'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|'\'* 6 FETCH (BODY[] "Some body")\''
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK FETCH completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
op|'{'
number|'6'
op|':'
op|'['
op|'['
string|"'BODY'"
op|','
op|'['
op|']'
op|','
string|'"Some body"'
op|']'
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fetchSpecificNumbered
dedent|''
name|'def'
name|'test_fetchSpecificNumbered'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.fetchSpecific}, when passed a sequence for for\n        C{headerNumber}, sends the I{BODY[N.M]} command.  It returns a\n        L{Deferred} which fires with a C{dict} mapping message sequence numbers\n        to C{list}s of corresponding message data given by the server\'s\n        response.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchSpecific'
op|'('
string|"'7'"
op|','
name|'headerNumber'
op|'='
op|'('
number|'1'
op|','
number|'2'
op|','
number|'3'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'0001 FETCH 7 BODY[1.2.3]\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|'\'* 7 FETCH (BODY[1.2.3] "Some body")\''
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK FETCH completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
nl|'\n'
op|'{'
number|'7'
op|':'
op|'['
op|'['
string|"'BODY'"
op|','
op|'['
string|"'1.2.3'"
op|']'
op|','
string|'"Some body"'
op|']'
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fetchSpecificText
dedent|''
name|'def'
name|'test_fetchSpecificText'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.fetchSpecific}, when passed C{\'TEXT\'} for C{headerType},\n        sends the I{BODY[TEXT]} command.  It returns a L{Deferred} which fires\n        with a C{dict} mapping message sequence numbers to C{list}s of\n        corresponding message data given by the server\'s response.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchSpecific'
op|'('
string|"'8'"
op|','
name|'headerType'
op|'='
string|"'TEXT'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'0001 FETCH 8 BODY[TEXT]\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|'\'* 8 FETCH (BODY[TEXT] "Some body")\''
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK FETCH completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
nl|'\n'
op|'{'
number|'8'
op|':'
op|'['
op|'['
string|"'BODY'"
op|','
op|'['
string|"'TEXT'"
op|']'
op|','
string|'"Some body"'
op|']'
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fetchSpecificNumberedText
dedent|''
name|'def'
name|'test_fetchSpecificNumberedText'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If passed a value for the C{headerNumber} parameter and C{\'TEXT\'} for\n        the C{headerType} parameter, L{IMAP4Client.fetchSpecific} sends a\n        I{BODY[number.TEXT]} request and returns a L{Deferred} which fires with\n        a C{dict} mapping message sequence numbers to C{list}s of message data\n        given by the server\'s response.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchSpecific'
op|'('
string|"'4'"
op|','
name|'headerType'
op|'='
string|"'TEXT'"
op|','
name|'headerNumber'
op|'='
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'0001 FETCH 4 BODY[7.TEXT]\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|'\'* 4 FETCH (BODY[7.TEXT] "Some body")\''
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK FETCH completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
nl|'\n'
op|'{'
number|'4'
op|':'
op|'['
op|'['
string|"'BODY'"
op|','
op|'['
string|"'7.TEXT'"
op|']'
op|','
string|'"Some body"'
op|']'
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_incompleteFetchSpecificTextResponse
dedent|''
name|'def'
name|'test_incompleteFetchSpecificTextResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server responds to a I{BODY[TEXT]} request with a I{FETCH} line\n        which is truncated after the I{BODY[TEXT]} tokens, the L{Deferred}\n        returned by L{IMAP4Client.fetchUID} fails with\n        L{IllegalServerResponse}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchSpecific'
op|'('
string|"'8'"
op|','
name|'headerType'
op|'='
string|"'TEXT'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'0001 FETCH 8 BODY[TEXT]\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'* 8 FETCH (BODY[TEXT])'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK FETCH completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'IllegalServerResponse'
op|','
name|'self'
op|'.'
name|'_extractDeferredResult'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fetchSpecificMIME
dedent|''
name|'def'
name|'test_fetchSpecificMIME'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.fetchSpecific}, when passed C{\'MIME\'} for C{headerType},\n        sends the I{BODY[MIME]} command.  It returns a L{Deferred} which fires\n        with a C{dict} mapping message sequence numbers to C{list}s of\n        corresponding message data given by the server\'s response.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchSpecific'
op|'('
string|"'8'"
op|','
name|'headerType'
op|'='
string|"'MIME'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'0001 FETCH 8 BODY[MIME]\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|'\'* 8 FETCH (BODY[MIME] "Some body")\''
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK FETCH completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
nl|'\n'
op|'{'
number|'8'
op|':'
op|'['
op|'['
string|"'BODY'"
op|','
op|'['
string|"'MIME'"
op|']'
op|','
string|'"Some body"'
op|']'
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fetchSpecificPartial
dedent|''
name|'def'
name|'test_fetchSpecificPartial'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.fetchSpecific}, when passed C{offset} and C{length},\n        sends a partial content request (like I{BODY[TEXT]<offset.length>}).\n        It returns a L{Deferred} which fires with a C{dict} mapping message\n        sequence numbers to C{list}s of corresponding message data given by the\n        server\'s response.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchSpecific'
op|'('
nl|'\n'
string|"'9'"
op|','
name|'headerType'
op|'='
string|"'TEXT'"
op|','
name|'offset'
op|'='
number|'17'
op|','
name|'length'
op|'='
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'0001 FETCH 9 BODY[TEXT]<17.3>\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|'\'* 9 FETCH (BODY[TEXT]<17> "foo")\''
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK FETCH completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
nl|'\n'
op|'{'
number|'9'
op|':'
op|'['
op|'['
string|"'BODY'"
op|','
op|'['
string|"'TEXT'"
op|']'
op|','
string|"'<17>'"
op|','
string|"'foo'"
op|']'
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_incompleteFetchSpecificPartialResponse
dedent|''
name|'def'
name|'test_incompleteFetchSpecificPartialResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server responds to a I{BODY[TEXT]} request with a I{FETCH} line\n        which is truncated after the I{BODY[TEXT]<offset>} tokens, the\n        L{Deferred} returned by L{IMAP4Client.fetchUID} fails with\n        L{IllegalServerResponse}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchSpecific'
op|'('
string|"'8'"
op|','
name|'headerType'
op|'='
string|"'TEXT'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'0001 FETCH 8 BODY[TEXT]\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'* 8 FETCH (BODY[TEXT]<17>)'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK FETCH completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'IllegalServerResponse'
op|','
name|'self'
op|'.'
name|'_extractDeferredResult'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fetchSpecificHTML
dedent|''
name|'def'
name|'test_fetchSpecificHTML'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the body of a message begins with I{<} and ends with I{>} (as,\n        for example, HTML bodies typically will), this is still interpreted\n        as the body by L{IMAP4Client.fetchSpecific} (and particularly, not\n        as a length indicator for a response to a request for a partial\n        body).\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchSpecific'
op|'('
string|"'7'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'0001 FETCH 7 BODY[]\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|'\'* 7 FETCH (BODY[] "<html>test</html>")\''
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK FETCH completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
op|'{'
number|'7'
op|':'
op|'['
op|'['
string|"'BODY'"
op|','
op|'['
op|']'
op|','
string|'"<html>test</html>"'
op|']'
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IMAP4ClientStoreTests
dedent|''
dedent|''
name|'class'
name|'IMAP4ClientStoreTests'
op|'('
name|'PreauthIMAP4ClientMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the L{IMAP4Client.setFlags}, L{IMAP4Client.addFlags}, and\n    L{IMAP4Client.removeFlags} methods.\n\n    An example of usage of the STORE command, in terms of which these three\n    methods are implemented, from RFC 3501, section 6.4.6::\n\n        C: A003 STORE 2:4 +FLAGS (\\Deleted)\n        S: * 2 FETCH (FLAGS (\\Deleted \\Seen))\n        S: * 3 FETCH (FLAGS (\\Deleted))\n        S: * 4 FETCH (FLAGS (\\Deleted \\Flagged \\Seen))\n        S: A003 OK STORE completed\n    """'
newline|'\n'
DECL|variable|clientProtocol
name|'clientProtocol'
op|'='
name|'StillSimplerClient'
newline|'\n'
nl|'\n'
DECL|member|_flagsTest
name|'def'
name|'_flagsTest'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a non-silent flag modifying method.  Call the method, assert that\n        the correct bytes are sent, deliver a I{FETCH} response, and assert\n        that the result of the Deferred returned by the method is correct.\n\n        @param method: The name of the method to test.\n        @param item: The data item which is expected to be specified.\n        """'
newline|'\n'
name|'d'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'client'
op|','
name|'method'
op|')'
op|'('
string|"'3'"
op|','
op|'('
string|"'\\\\Read'"
op|','
string|"'\\\\Seen'"
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|"'0001 STORE 3 '"
op|'+'
name|'item'
op|'+'
string|"' (\\\\Read \\\\Seen)\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'* 3 FETCH (FLAGS (\\\\Read \\\\Seen))'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK STORE completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
nl|'\n'
op|'{'
number|'3'
op|':'
op|'{'
string|"'FLAGS'"
op|':'
op|'['
string|"'\\\\Read'"
op|','
string|"'\\\\Seen'"
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_flagsSilentlyTest
dedent|''
name|'def'
name|'_flagsSilentlyTest'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a silent flag modifying method.  Call the method, assert that the\n        correct bytes are sent, deliver an I{OK} response, and assert that the\n        result of the Deferred returned by the method is correct.\n\n        @param method: The name of the method to test.\n        @param item: The data item which is expected to be specified.\n        """'
newline|'\n'
name|'d'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'client'
op|','
name|'method'
op|')'
op|'('
string|"'3'"
op|','
op|'('
string|"'\\\\Read'"
op|','
string|"'\\\\Seen'"
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|"'0001 STORE 3 '"
op|'+'
name|'item'
op|'+'
string|"' (\\\\Read \\\\Seen)\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK STORE completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_flagsSilentlyWithUnsolicitedDataTest
dedent|''
name|'def'
name|'_flagsSilentlyWithUnsolicitedDataTest'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test unsolicited data received in response to a silent flag modifying\n        method.  Call the method, assert that the correct bytes are sent,\n        deliver the unsolicited I{FETCH} response, and assert that the result\n        of the Deferred returned by the method is correct.\n\n        @param method: The name of the method to test.\n        @param item: The data item which is expected to be specified.\n        """'
newline|'\n'
name|'d'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'client'
op|','
name|'method'
op|')'
op|'('
string|"'3'"
op|','
op|'('
string|"'\\\\Read'"
op|','
string|"'\\\\Seen'"
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|"'0001 STORE 3 '"
op|'+'
name|'item'
op|'+'
string|"' (\\\\Read \\\\Seen)\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'* 2 FETCH (FLAGS (\\\\Read \\\\Seen))'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'0001 OK STORE completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'_extractDeferredResult'
op|'('
name|'d'
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'flags'
op|','
op|'{'
number|'2'
op|':'
op|'['
string|"'\\\\Read'"
op|','
string|"'\\\\Seen'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setFlags
dedent|''
name|'def'
name|'test_setFlags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When passed a C{False} value for the C{silent} parameter,\n        L{IMAP4Client.setFlags} sends the I{STORE} command with a I{FLAGS} data\n        item and returns a L{Deferred} which fires with a C{dict} mapping\n        message sequence numbers to C{dict}s mapping C{\'FLAGS\'} to the new\n        flags of those messages.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_flagsTest'
op|'('
string|"'setFlags'"
op|','
string|"'FLAGS'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setFlagsSilently
dedent|''
name|'def'
name|'test_setFlagsSilently'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When passed a C{True} value for the C{silent} parameter,\n        L{IMAP4Client.setFlags} sends the I{STORE} command with a\n        I{FLAGS.SILENT} data item and returns a L{Deferred} which fires with an\n        empty dictionary.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_flagsSilentlyTest'
op|'('
string|"'setFlags'"
op|','
string|"'FLAGS.SILENT'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setFlagsSilentlyWithUnsolicitedData
dedent|''
name|'def'
name|'test_setFlagsSilentlyWithUnsolicitedData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If unsolicited flag data is received in response to a I{STORE}\n        I{FLAGS.SILENT} request, that data is passed to the C{flagsChanged}\n        callback.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_flagsSilentlyWithUnsolicitedDataTest'
op|'('
string|"'setFlags'"
op|','
string|"'FLAGS.SILENT'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addFlags
dedent|''
name|'def'
name|'test_addFlags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.addFlags} is like L{IMAP4Client.setFlags}, but sends\n        I{+FLAGS} instead of I{FLAGS}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_flagsTest'
op|'('
string|"'addFlags'"
op|','
string|"'+FLAGS'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addFlagsSilently
dedent|''
name|'def'
name|'test_addFlagsSilently'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.addFlags} with a C{True} value for C{silent} behaves like\n        L{IMAP4Client.setFlags} with a C{True} value for C{silent}, but it\n        sends I{+FLAGS.SILENT} instead of I{FLAGS.SILENT}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_flagsSilentlyTest'
op|'('
string|"'addFlags'"
op|','
string|"'+FLAGS.SILENT'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addFlagsSilentlyWithUnsolicitedData
dedent|''
name|'def'
name|'test_addFlagsSilentlyWithUnsolicitedData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.addFlags} behaves like L{IMAP4Client.setFlags} when used\n        in silent mode and unsolicited data is received.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_flagsSilentlyWithUnsolicitedDataTest'
op|'('
string|"'addFlags'"
op|','
string|"'+FLAGS.SILENT'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeFlags
dedent|''
name|'def'
name|'test_removeFlags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.removeFlags} is like L{IMAP4Client.setFlags}, but sends\n        I{-FLAGS} instead of I{FLAGS}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_flagsTest'
op|'('
string|"'removeFlags'"
op|','
string|"'-FLAGS'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeFlagsSilently
dedent|''
name|'def'
name|'test_removeFlagsSilently'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.removeFlags} with a C{True} value for C{silent} behaves\n        like L{IMAP4Client.setFlags} with a C{True} value for C{silent}, but it\n        sends I{-FLAGS.SILENT} instead of I{FLAGS.SILENT}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_flagsSilentlyTest'
op|'('
string|"'removeFlags'"
op|','
string|"'-FLAGS.SILENT'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeFlagsSilentlyWithUnsolicitedData
dedent|''
name|'def'
name|'test_removeFlagsSilentlyWithUnsolicitedData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.removeFlags} behaves like L{IMAP4Client.setFlags} when\n        used in silent mode and unsolicited data is received.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_flagsSilentlyWithUnsolicitedDataTest'
op|'('
string|"'removeFlags'"
op|','
string|"'-FLAGS.SILENT'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeyServer
dedent|''
dedent|''
name|'class'
name|'FakeyServer'
op|'('
name|'imap4'
op|'.'
name|'IMAP4Server'
op|')'
op|':'
newline|'\n'
DECL|variable|state
indent|'    '
name|'state'
op|'='
string|"'select'"
newline|'\n'
DECL|variable|timeout
name|'timeout'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|sendServerGreeting
name|'def'
name|'sendServerGreeting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|FakeyMessage
dedent|''
dedent|''
name|'class'
name|'FakeyMessage'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'imap4'
op|'.'
name|'IMessage'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'headers'
op|','
name|'flags'
op|','
name|'date'
op|','
name|'body'
op|','
name|'uid'
op|','
name|'subpart'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'headers'
op|'='
name|'headers'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'='
name|'flags'
newline|'\n'
name|'self'
op|'.'
name|'body'
op|'='
name|'StringIO'
op|'('
name|'body'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'size'
op|'='
name|'len'
op|'('
name|'body'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'date'
op|'='
name|'date'
newline|'\n'
name|'self'
op|'.'
name|'uid'
op|'='
name|'uid'
newline|'\n'
name|'self'
op|'.'
name|'subpart'
op|'='
name|'subpart'
newline|'\n'
nl|'\n'
DECL|member|getHeaders
dedent|''
name|'def'
name|'getHeaders'
op|'('
name|'self'
op|','
name|'negate'
op|','
op|'*'
name|'names'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'got_headers'
op|'='
name|'negate'
op|','
name|'names'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'headers'
newline|'\n'
nl|'\n'
DECL|member|getFlags
dedent|''
name|'def'
name|'getFlags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'flags'
newline|'\n'
nl|'\n'
DECL|member|getInternalDate
dedent|''
name|'def'
name|'getInternalDate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'date'
newline|'\n'
nl|'\n'
DECL|member|getBodyFile
dedent|''
name|'def'
name|'getBodyFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'body'
newline|'\n'
nl|'\n'
DECL|member|getSize
dedent|''
name|'def'
name|'getSize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'size'
newline|'\n'
nl|'\n'
DECL|member|getUID
dedent|''
name|'def'
name|'getUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'uid'
newline|'\n'
nl|'\n'
DECL|member|isMultipart
dedent|''
name|'def'
name|'isMultipart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'subpart'
name|'is'
name|'not'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|getSubPart
dedent|''
name|'def'
name|'getSubPart'
op|'('
name|'self'
op|','
name|'part'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'got_subpart'
op|'='
name|'part'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'subpart'
op|'['
name|'part'
op|']'
newline|'\n'
nl|'\n'
DECL|class|NewStoreTestCase
dedent|''
dedent|''
name|'class'
name|'NewStoreTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'IMAP4HelperMixin'
op|')'
op|':'
newline|'\n'
DECL|variable|result
indent|'    '
name|'result'
op|'='
name|'None'
newline|'\n'
DECL|variable|storeArgs
name|'storeArgs'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'received_messages'
op|'='
name|'self'
op|'.'
name|'received_uid'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'='
name|'imap4'
op|'.'
name|'IMAP4Server'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'state'
op|'='
string|"'select'"
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'mbox'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'='
name|'SimpleClient'
op|'('
name|'self'
op|'.'
name|'connected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addListener
dedent|''
name|'def'
name|'addListener'
op|'('
name|'self'
op|','
name|'x'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
DECL|member|removeListener
dedent|''
name|'def'
name|'removeListener'
op|'('
name|'self'
op|','
name|'x'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|store
dedent|''
name|'def'
name|'store'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'storeArgs'
op|'='
name|'args'
op|','
name|'kw'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'response'
newline|'\n'
nl|'\n'
DECL|member|_storeWork
dedent|''
name|'def'
name|'_storeWork'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|connected
indent|'        '
name|'def'
name|'connected'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'function'
op|'('
name|'self'
op|'.'
name|'messages'
op|','
name|'self'
op|'.'
name|'flags'
op|','
name|'self'
op|'.'
name|'silent'
op|','
name|'self'
op|'.'
name|'uid'
op|')'
newline|'\n'
DECL|function|result
dedent|''
name|'def'
name|'result'
op|'('
name|'R'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'='
name|'R'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'connected'
op|')'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'result'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
nl|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'result'
op|','
name|'self'
op|'.'
name|'expected'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'storeArgs'
op|','
name|'self'
op|'.'
name|'expectedArgs'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'loopback'
op|'.'
name|'loopbackTCP'
op|'('
name|'self'
op|'.'
name|'server'
op|','
name|'self'
op|'.'
name|'client'
op|','
name|'noisy'
op|'='
name|'False'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testSetFlags
dedent|''
name|'def'
name|'testSetFlags'
op|'('
name|'self'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'setFlags'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'1,5,9'"
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'='
op|'['
string|"'\\\\A'"
op|','
string|"'\\\\B'"
op|','
string|"'C'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'silent'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'uid'
op|'='
name|'uid'
newline|'\n'
name|'self'
op|'.'
name|'response'
op|'='
op|'{'
nl|'\n'
number|'1'
op|':'
op|'['
string|"'\\\\A'"
op|','
string|"'\\\\B'"
op|','
string|"'C'"
op|']'
op|','
nl|'\n'
number|'5'
op|':'
op|'['
string|"'\\\\A'"
op|','
string|"'\\\\B'"
op|','
string|"'C'"
op|']'
op|','
nl|'\n'
number|'9'
op|':'
op|'['
string|"'\\\\A'"
op|','
string|"'\\\\B'"
op|','
string|"'C'"
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
nl|'\n'
number|'1'
op|':'
op|'{'
string|"'FLAGS'"
op|':'
op|'['
string|"'\\\\A'"
op|','
string|"'\\\\B'"
op|','
string|"'C'"
op|']'
op|'}'
op|','
nl|'\n'
number|'5'
op|':'
op|'{'
string|"'FLAGS'"
op|':'
op|'['
string|"'\\\\A'"
op|','
string|"'\\\\B'"
op|','
string|"'C'"
op|']'
op|'}'
op|','
nl|'\n'
number|'9'
op|':'
op|'{'
string|"'FLAGS'"
op|':'
op|'['
string|"'\\\\A'"
op|','
string|"'\\\\B'"
op|','
string|"'C'"
op|']'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'msg'
op|'='
name|'imap4'
op|'.'
name|'MessageSet'
op|'('
op|')'
newline|'\n'
name|'msg'
op|'.'
name|'add'
op|'('
number|'1'
op|')'
newline|'\n'
name|'msg'
op|'.'
name|'add'
op|'('
number|'5'
op|')'
newline|'\n'
name|'msg'
op|'.'
name|'add'
op|'('
number|'9'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'expectedArgs'
op|'='
op|'('
op|'('
name|'msg'
op|','
op|'['
string|"'\\\\A'"
op|','
string|"'\\\\B'"
op|','
string|"'C'"
op|']'
op|','
number|'0'
op|')'
op|','
op|'{'
string|"'uid'"
op|':'
number|'0'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_storeWork'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NewFetchTestCase
dedent|''
dedent|''
name|'class'
name|'NewFetchTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'IMAP4HelperMixin'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'received_messages'
op|'='
name|'self'
op|'.'
name|'received_uid'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'='
name|'imap4'
op|'.'
name|'IMAP4Server'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'state'
op|'='
string|"'select'"
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'mbox'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'='
name|'SimpleClient'
op|'('
name|'self'
op|'.'
name|'connected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addListener
dedent|''
name|'def'
name|'addListener'
op|'('
name|'self'
op|','
name|'x'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
DECL|member|removeListener
dedent|''
name|'def'
name|'removeListener'
op|'('
name|'self'
op|','
name|'x'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|fetch
dedent|''
name|'def'
name|'fetch'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'received_messages'
op|'='
name|'messages'
newline|'\n'
name|'self'
op|'.'
name|'received_uid'
op|'='
name|'uid'
newline|'\n'
name|'return'
name|'iter'
op|'('
name|'zip'
op|'('
name|'range'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'msgObjs'
op|')'
op|')'
op|','
name|'self'
op|'.'
name|'msgObjs'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_fetchWork
dedent|''
name|'def'
name|'_fetchWork'
op|'('
name|'self'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'uid'
op|':'
newline|'\n'
indent|'            '
name|'for'
op|'('
name|'i'
op|','
name|'msg'
op|')'
name|'in'
name|'zip'
op|'('
name|'range'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'msgObjs'
op|')'
op|')'
op|','
name|'self'
op|'.'
name|'msgObjs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'expected'
op|'['
name|'i'
op|']'
op|'['
string|"'UID'"
op|']'
op|'='
name|'str'
op|'('
name|'msg'
op|'.'
name|'getUID'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|result
dedent|''
dedent|''
name|'def'
name|'result'
op|'('
name|'R'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'='
name|'R'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'function'
op|'('
name|'self'
op|'.'
name|'messages'
op|','
name|'uid'
op|')'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'result'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'loopback'
op|'.'
name|'loopbackTCP'
op|'('
name|'self'
op|'.'
name|'server'
op|','
name|'self'
op|'.'
name|'client'
op|','
name|'noisy'
op|'='
name|'False'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'result'
op|','
name|'self'
op|'.'
name|'expected'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testFetchUID
dedent|''
name|'def'
name|'testFetchUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'function'
op|'='
name|'lambda'
name|'m'
op|','
name|'u'
op|':'
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchUID'
op|'('
name|'m'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'7'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
op|')'
op|','
string|"''"
op|','
string|"''"
op|','
number|'12345'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
op|')'
op|','
string|"''"
op|','
string|"''"
op|','
number|'999'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
op|')'
op|','
string|"''"
op|','
string|"''"
op|','
number|'10101'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
nl|'\n'
number|'0'
op|':'
op|'{'
string|"'UID'"
op|':'
string|"'12345'"
op|'}'
op|','
nl|'\n'
number|'1'
op|':'
op|'{'
string|"'UID'"
op|':'
string|"'999'"
op|'}'
op|','
nl|'\n'
number|'2'
op|':'
op|'{'
string|"'UID'"
op|':'
string|"'10101'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetchWork'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchFlags
dedent|''
name|'def'
name|'testFetchFlags'
op|'('
name|'self'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchFlags'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'9'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'['
string|"'FlagA'"
op|','
string|"'FlagB'"
op|','
string|"'\\\\FlagC'"
op|']'
op|','
string|"''"
op|','
string|"''"
op|','
number|'54321'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'['
string|"'\\\\FlagC'"
op|','
string|"'FlagA'"
op|','
string|"'FlagB'"
op|']'
op|','
string|"''"
op|','
string|"''"
op|','
number|'12345'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
nl|'\n'
number|'0'
op|':'
op|'{'
string|"'FLAGS'"
op|':'
op|'['
string|"'FlagA'"
op|','
string|"'FlagB'"
op|','
string|"'\\\\FlagC'"
op|']'
op|'}'
op|','
nl|'\n'
number|'1'
op|':'
op|'{'
string|"'FLAGS'"
op|':'
op|'['
string|"'\\\\FlagC'"
op|','
string|"'FlagA'"
op|','
string|"'FlagB'"
op|']'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetchWork'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchFlagsUID
dedent|''
name|'def'
name|'testFetchFlagsUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'testFetchFlags'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchInternalDate
dedent|''
name|'def'
name|'testFetchInternalDate'
op|'('
name|'self'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchInternalDate'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'13'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
op|')'
op|','
string|"'Fri, 02 Nov 2003 21:25:10 GMT'"
op|','
string|"''"
op|','
number|'23232'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
op|')'
op|','
string|"'Thu, 29 Dec 2013 11:31:52 EST'"
op|','
string|"''"
op|','
number|'101'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
op|')'
op|','
string|"'Mon, 10 Mar 1992 02:44:30 CST'"
op|','
string|"''"
op|','
number|'202'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
op|')'
op|','
string|"'Sat, 11 Jan 2000 14:40:24 PST'"
op|','
string|"''"
op|','
number|'303'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
nl|'\n'
number|'0'
op|':'
op|'{'
string|"'INTERNALDATE'"
op|':'
string|"'02-Nov-2003 21:25:10 +0000'"
op|'}'
op|','
nl|'\n'
number|'1'
op|':'
op|'{'
string|"'INTERNALDATE'"
op|':'
string|"'29-Dec-2013 11:31:52 -0500'"
op|'}'
op|','
nl|'\n'
number|'2'
op|':'
op|'{'
string|"'INTERNALDATE'"
op|':'
string|"'10-Mar-1992 02:44:30 -0600'"
op|'}'
op|','
nl|'\n'
number|'3'
op|':'
op|'{'
string|"'INTERNALDATE'"
op|':'
string|"'11-Jan-2000 14:40:24 -0800'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetchWork'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchInternalDateUID
dedent|''
name|'def'
name|'testFetchInternalDateUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'testFetchInternalDate'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchEnvelope
dedent|''
name|'def'
name|'testFetchEnvelope'
op|'('
name|'self'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchEnvelope'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'15'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
nl|'\n'
string|"'from'"
op|':'
string|"'user@domain'"
op|','
string|"'to'"
op|':'
string|"'resu@domain'"
op|','
nl|'\n'
string|"'date'"
op|':'
string|"'thursday'"
op|','
string|"'subject'"
op|':'
string|"'it is a message'"
op|','
nl|'\n'
string|"'message-id'"
op|':'
string|"'id-id-id-yayaya'"
op|'}'
op|','
op|'('
op|')'
op|','
string|"''"
op|','
string|"''"
op|','
number|'65656'
op|','
nl|'\n'
name|'None'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
nl|'\n'
number|'0'
op|':'
op|'{'
string|"'ENVELOPE'"
op|':'
nl|'\n'
op|'['
string|"'thursday'"
op|','
string|"'it is a message'"
op|','
nl|'\n'
op|'['
op|'['
name|'None'
op|','
name|'None'
op|','
string|"'user'"
op|','
string|"'domain'"
op|']'
op|']'
op|','
nl|'\n'
op|'['
op|'['
name|'None'
op|','
name|'None'
op|','
string|"'user'"
op|','
string|"'domain'"
op|']'
op|']'
op|','
nl|'\n'
op|'['
op|'['
name|'None'
op|','
name|'None'
op|','
string|"'user'"
op|','
string|"'domain'"
op|']'
op|']'
op|','
nl|'\n'
op|'['
op|'['
name|'None'
op|','
name|'None'
op|','
string|"'resu'"
op|','
string|"'domain'"
op|']'
op|']'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
string|"'id-id-id-yayaya'"
op|']'
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetchWork'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchEnvelopeUID
dedent|''
name|'def'
name|'testFetchEnvelopeUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'testFetchEnvelope'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchBodyStructure
dedent|''
name|'def'
name|'testFetchBodyStructure'
op|'('
name|'self'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchBodyStructure'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'3:9,10:*'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
name|'FakeyMessage'
op|'('
op|'{'
nl|'\n'
string|"'content-type'"
op|':'
string|'\'text/plain; name=thing; key="value"\''
op|','
nl|'\n'
string|"'content-id'"
op|':'
string|"'this-is-the-content-id'"
op|','
nl|'\n'
string|"'content-description'"
op|':'
string|"'describing-the-content-goes-here!'"
op|','
nl|'\n'
string|"'content-transfer-encoding'"
op|':'
string|"'8BIT'"
op|','
nl|'\n'
op|'}'
op|','
op|'('
op|')'
op|','
string|"''"
op|','
string|"'Body\\nText\\nGoes\\nHere\\n'"
op|','
number|'919293'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
number|'0'
op|':'
op|'{'
string|"'BODYSTRUCTURE'"
op|':'
op|'['
nl|'\n'
string|"'text'"
op|','
string|"'plain'"
op|','
op|'['
op|'['
string|"'name'"
op|','
string|"'thing'"
op|']'
op|','
op|'['
string|"'key'"
op|','
string|"'value'"
op|']'
op|']'
op|','
nl|'\n'
string|"'this-is-the-content-id'"
op|','
string|"'describing-the-content-goes-here!'"
op|','
nl|'\n'
string|"'8BIT'"
op|','
string|"'20'"
op|','
string|"'4'"
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|'}'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetchWork'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchBodyStructureUID
dedent|''
name|'def'
name|'testFetchBodyStructureUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'testFetchBodyStructure'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchSimplifiedBody
dedent|''
name|'def'
name|'testFetchSimplifiedBody'
op|'('
name|'self'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchSimplifiedBody'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'21'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
op|')'
op|','
string|"''"
op|','
string|"'Yea whatever'"
op|','
number|'91825'
op|','
nl|'\n'
op|'['
name|'FakeyMessage'
op|'('
op|'{'
string|"'content-type'"
op|':'
string|"'image/jpg'"
op|'}'
op|','
op|'('
op|')'
op|','
string|"''"
op|','
nl|'\n'
string|"'Body Body Body'"
op|','
name|'None'
op|','
name|'None'
nl|'\n'
op|')'
op|']'
nl|'\n'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
number|'0'
op|':'
nl|'\n'
op|'{'
string|"'BODY'"
op|':'
nl|'\n'
op|'['
name|'None'
op|','
name|'None'
op|','
op|'['
op|']'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
string|"'12'"
nl|'\n'
op|']'
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetchWork'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchSimplifiedBodyUID
dedent|''
name|'def'
name|'testFetchSimplifiedBodyUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'testFetchSimplifiedBody'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchSimplifiedBodyText
dedent|''
name|'def'
name|'testFetchSimplifiedBodyText'
op|'('
name|'self'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchSimplifiedBody'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'21'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
name|'FakeyMessage'
op|'('
op|'{'
string|"'content-type'"
op|':'
string|"'text/plain'"
op|'}'
op|','
nl|'\n'
op|'('
op|')'
op|','
string|"''"
op|','
string|"'Yea whatever'"
op|','
number|'91825'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
number|'0'
op|':'
nl|'\n'
op|'{'
string|"'BODY'"
op|':'
nl|'\n'
op|'['
string|"'text'"
op|','
string|"'plain'"
op|','
op|'['
op|']'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
string|"'12'"
op|','
string|"'1'"
nl|'\n'
op|']'
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetchWork'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchSimplifiedBodyTextUID
dedent|''
name|'def'
name|'testFetchSimplifiedBodyTextUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'testFetchSimplifiedBodyText'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchSimplifiedBodyRFC822
dedent|''
name|'def'
name|'testFetchSimplifiedBodyRFC822'
op|'('
name|'self'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchSimplifiedBody'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'21'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
name|'FakeyMessage'
op|'('
op|'{'
string|"'content-type'"
op|':'
string|"'message/rfc822'"
op|'}'
op|','
nl|'\n'
op|'('
op|')'
op|','
string|"''"
op|','
string|"'Yea whatever'"
op|','
number|'91825'
op|','
nl|'\n'
op|'['
name|'FakeyMessage'
op|'('
op|'{'
string|"'content-type'"
op|':'
string|"'image/jpg'"
op|'}'
op|','
op|'('
op|')'
op|','
string|"''"
op|','
nl|'\n'
string|"'Body Body Body'"
op|','
name|'None'
op|','
name|'None'
nl|'\n'
op|')'
op|']'
nl|'\n'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
number|'0'
op|':'
nl|'\n'
op|'{'
string|"'BODY'"
op|':'
nl|'\n'
op|'['
string|"'message'"
op|','
string|"'rfc822'"
op|','
op|'['
op|']'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
string|"'12'"
op|','
op|'['
name|'None'
op|','
name|'None'
op|','
op|'['
op|'['
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|']'
op|','
nl|'\n'
op|'['
op|'['
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|']'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|','
op|'['
string|"'image'"
op|','
string|"'jpg'"
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
string|"'14'"
op|']'
op|','
string|"'1'"
nl|'\n'
op|']'
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetchWork'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchSimplifiedBodyRFC822UID
dedent|''
name|'def'
name|'testFetchSimplifiedBodyRFC822UID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'testFetchSimplifiedBodyRFC822'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchMessage
dedent|''
name|'def'
name|'testFetchMessage'
op|'('
name|'self'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchMessage'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'1,3,7,10101'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
string|"'Header'"
op|':'
string|"'Value'"
op|'}'
op|','
op|'('
op|')'
op|','
string|"''"
op|','
string|"'BODY TEXT\\r\\n'"
op|','
number|'91'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
nl|'\n'
number|'0'
op|':'
op|'{'
string|"'RFC822'"
op|':'
string|"'Header: Value\\r\\n\\r\\nBODY TEXT\\r\\n'"
op|'}'
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetchWork'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchMessageUID
dedent|''
name|'def'
name|'testFetchMessageUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'testFetchMessage'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchHeaders
dedent|''
name|'def'
name|'testFetchHeaders'
op|'('
name|'self'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchHeaders'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'9,6,2'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
string|"'H1'"
op|':'
string|"'V1'"
op|','
string|"'H2'"
op|':'
string|"'V2'"
op|'}'
op|','
op|'('
op|')'
op|','
string|"''"
op|','
string|"''"
op|','
number|'99'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
nl|'\n'
number|'0'
op|':'
op|'{'
string|"'RFC822.HEADER'"
op|':'
name|'imap4'
op|'.'
name|'_formatHeaders'
op|'('
op|'{'
string|"'H1'"
op|':'
string|"'V1'"
op|','
string|"'H2'"
op|':'
string|"'V2'"
op|'}'
op|')'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetchWork'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchHeadersUID
dedent|''
name|'def'
name|'testFetchHeadersUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'testFetchHeaders'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchBody
dedent|''
name|'def'
name|'testFetchBody'
op|'('
name|'self'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchBody'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'1,2,3,4,5,6,7'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
string|"'Header'"
op|':'
string|"'Value'"
op|'}'
op|','
op|'('
op|')'
op|','
string|"''"
op|','
string|"'Body goes here\\r\\n'"
op|','
number|'171'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
nl|'\n'
number|'0'
op|':'
op|'{'
string|"'RFC822.TEXT'"
op|':'
string|"'Body goes here\\r\\n'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetchWork'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchBodyUID
dedent|''
name|'def'
name|'testFetchBodyUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'testFetchBody'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchBodyParts
dedent|''
name|'def'
name|'testFetchBodyParts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the server\'s handling of requests for specific body sections.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchSpecific'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'1'"
newline|'\n'
name|'outerBody'
op|'='
string|"''"
newline|'\n'
name|'innerBody1'
op|'='
string|"'Contained body message text.  Squarge.'"
newline|'\n'
name|'innerBody2'
op|'='
string|"'Secondary <i>message</i> text of squarge body.'"
newline|'\n'
name|'headers'
op|'='
name|'util'
op|'.'
name|'OrderedDict'
op|'('
op|')'
newline|'\n'
name|'headers'
op|'['
string|"'from'"
op|']'
op|'='
string|"'sender@host'"
newline|'\n'
name|'headers'
op|'['
string|"'to'"
op|']'
op|'='
string|"'recipient@domain'"
newline|'\n'
name|'headers'
op|'['
string|"'subject'"
op|']'
op|'='
string|"'booga booga boo'"
newline|'\n'
name|'headers'
op|'['
string|"'content-type'"
op|']'
op|'='
string|'\'multipart/alternative; boundary="xyz"\''
newline|'\n'
name|'innerHeaders'
op|'='
name|'util'
op|'.'
name|'OrderedDict'
op|'('
op|')'
newline|'\n'
name|'innerHeaders'
op|'['
string|"'subject'"
op|']'
op|'='
string|"'this is subject text'"
newline|'\n'
name|'innerHeaders'
op|'['
string|"'content-type'"
op|']'
op|'='
string|"'text/plain'"
newline|'\n'
name|'innerHeaders2'
op|'='
name|'util'
op|'.'
name|'OrderedDict'
op|'('
op|')'
newline|'\n'
name|'innerHeaders2'
op|'['
string|"'subject'"
op|']'
op|'='
string|"'<b>this is subject</b>'"
newline|'\n'
name|'innerHeaders2'
op|'['
string|"'content-type'"
op|']'
op|'='
string|"'text/html'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
name|'FakeyMessage'
op|'('
nl|'\n'
name|'headers'
op|','
op|'('
op|')'
op|','
name|'None'
op|','
name|'outerBody'
op|','
number|'123'
op|','
nl|'\n'
op|'['
name|'FakeyMessage'
op|'('
name|'innerHeaders'
op|','
op|'('
op|')'
op|','
name|'None'
op|','
name|'innerBody1'
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'FakeyMessage'
op|'('
name|'innerHeaders2'
op|','
op|'('
op|')'
op|','
name|'None'
op|','
name|'innerBody2'
op|','
name|'None'
op|','
name|'None'
op|')'
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
nl|'\n'
number|'0'
op|':'
op|'['
op|'['
string|"'BODY'"
op|','
op|'['
string|"'1'"
op|']'
op|','
string|"'Contained body message text.  Squarge.'"
op|']'
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|result
name|'def'
name|'result'
op|'('
name|'R'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'='
name|'R'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'function'
op|'('
name|'self'
op|'.'
name|'messages'
op|','
name|'headerNumber'
op|'='
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'loopback'
op|'.'
name|'loopbackTCP'
op|'('
name|'self'
op|'.'
name|'server'
op|','
name|'self'
op|'.'
name|'client'
op|','
name|'noisy'
op|'='
name|'False'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ign'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'result'
op|','
name|'self'
op|'.'
name|'expected'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fetchBodyPartOfNonMultipart
dedent|''
name|'def'
name|'test_fetchBodyPartOfNonMultipart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Single-part messages have an implicit first part which clients\n        should be able to retrieve explicitly.  Test that a client\n        requesting part 1 of a text/plain message receives the body of the\n        text/plain part.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchSpecific'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'1'"
newline|'\n'
name|'parts'
op|'='
op|'['
number|'1'
op|']'
newline|'\n'
name|'outerBody'
op|'='
string|"'DA body'"
newline|'\n'
name|'headers'
op|'='
name|'util'
op|'.'
name|'OrderedDict'
op|'('
op|')'
newline|'\n'
name|'headers'
op|'['
string|"'from'"
op|']'
op|'='
string|"'sender@host'"
newline|'\n'
name|'headers'
op|'['
string|"'to'"
op|']'
op|'='
string|"'recipient@domain'"
newline|'\n'
name|'headers'
op|'['
string|"'subject'"
op|']'
op|'='
string|"'booga booga boo'"
newline|'\n'
name|'headers'
op|'['
string|"'content-type'"
op|']'
op|'='
string|"'text/plain'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
name|'FakeyMessage'
op|'('
nl|'\n'
name|'headers'
op|','
op|'('
op|')'
op|','
name|'None'
op|','
name|'outerBody'
op|','
number|'123'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
number|'0'
op|':'
op|'['
op|'['
string|"'BODY'"
op|','
op|'['
string|"'1'"
op|']'
op|','
string|"'DA body'"
op|']'
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|result
name|'def'
name|'result'
op|'('
name|'R'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'='
name|'R'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'function'
op|'('
name|'self'
op|'.'
name|'messages'
op|','
name|'headerNumber'
op|'='
name|'parts'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'loopback'
op|'.'
name|'loopbackTCP'
op|'('
name|'self'
op|'.'
name|'server'
op|','
name|'self'
op|'.'
name|'client'
op|','
name|'noisy'
op|'='
name|'False'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ign'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'result'
op|','
name|'self'
op|'.'
name|'expected'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testFetchSize
dedent|''
name|'def'
name|'testFetchSize'
op|'('
name|'self'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchSize'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'1:100,2:*'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
op|')'
op|','
string|"''"
op|','
string|"'x'"
op|'*'
number|'20'
op|','
number|'123'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
nl|'\n'
number|'0'
op|':'
op|'{'
string|"'RFC822.SIZE'"
op|':'
string|"'20'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetchWork'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchSizeUID
dedent|''
name|'def'
name|'testFetchSizeUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'testFetchSize'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchFull
dedent|''
name|'def'
name|'testFetchFull'
op|'('
name|'self'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchFull'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'1,3'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
string|"'\\\\XYZ'"
op|','
string|"'\\\\YZX'"
op|','
string|"'Abc'"
op|')'
op|','
nl|'\n'
string|"'Sun, 25 Jul 2010 06:20:30 -0400 (EDT)'"
op|','
nl|'\n'
string|"'xyz'"
op|'*'
number|'2'
op|','
number|'654'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
string|"'\\\\One'"
op|','
string|"'\\\\Two'"
op|','
string|"'Three'"
op|')'
op|','
nl|'\n'
string|"'Mon, 14 Apr 2003 19:43:44 -0400'"
op|','
nl|'\n'
string|"'abc'"
op|'*'
number|'4'
op|','
number|'555'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
nl|'\n'
number|'0'
op|':'
op|'{'
string|"'FLAGS'"
op|':'
op|'['
string|"'\\\\XYZ'"
op|','
string|"'\\\\YZX'"
op|','
string|"'Abc'"
op|']'
op|','
nl|'\n'
string|"'INTERNALDATE'"
op|':'
string|"'25-Jul-2010 06:20:30 -0400'"
op|','
nl|'\n'
string|"'RFC822.SIZE'"
op|':'
string|"'6'"
op|','
nl|'\n'
string|"'ENVELOPE'"
op|':'
op|'['
name|'None'
op|','
name|'None'
op|','
op|'['
op|'['
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|']'
op|','
op|'['
op|'['
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|']'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|','
nl|'\n'
string|"'BODY'"
op|':'
op|'['
name|'None'
op|','
name|'None'
op|','
op|'['
op|']'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
string|"'6'"
op|']'
op|'}'
op|','
nl|'\n'
number|'1'
op|':'
op|'{'
string|"'FLAGS'"
op|':'
op|'['
string|"'\\\\One'"
op|','
string|"'\\\\Two'"
op|','
string|"'Three'"
op|']'
op|','
nl|'\n'
string|"'INTERNALDATE'"
op|':'
string|"'14-Apr-2003 19:43:44 -0400'"
op|','
nl|'\n'
string|"'RFC822.SIZE'"
op|':'
string|"'12'"
op|','
nl|'\n'
string|"'ENVELOPE'"
op|':'
op|'['
name|'None'
op|','
name|'None'
op|','
op|'['
op|'['
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|']'
op|','
op|'['
op|'['
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|']'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|','
nl|'\n'
string|"'BODY'"
op|':'
op|'['
name|'None'
op|','
name|'None'
op|','
op|'['
op|']'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
string|"'12'"
op|']'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetchWork'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchFullUID
dedent|''
name|'def'
name|'testFetchFullUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'testFetchFull'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchAll
dedent|''
name|'def'
name|'testFetchAll'
op|'('
name|'self'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchAll'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'1,2:3'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
op|')'
op|','
string|"'Mon, 14 Apr 2003 19:43:44 +0400'"
op|','
nl|'\n'
string|"'Lalala'"
op|','
number|'10101'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
op|')'
op|','
string|"'Tue, 15 Apr 2003 19:43:44 +0200'"
op|','
nl|'\n'
string|"'Alalal'"
op|','
number|'20202'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
nl|'\n'
number|'0'
op|':'
op|'{'
string|"'ENVELOPE'"
op|':'
op|'['
name|'None'
op|','
name|'None'
op|','
op|'['
op|'['
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|']'
op|','
op|'['
op|'['
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|']'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|','
nl|'\n'
string|"'RFC822.SIZE'"
op|':'
string|"'6'"
op|','
nl|'\n'
string|"'INTERNALDATE'"
op|':'
string|"'14-Apr-2003 19:43:44 +0400'"
op|','
nl|'\n'
string|"'FLAGS'"
op|':'
op|'['
op|']'
op|'}'
op|','
nl|'\n'
number|'1'
op|':'
op|'{'
string|"'ENVELOPE'"
op|':'
op|'['
name|'None'
op|','
name|'None'
op|','
op|'['
op|'['
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|']'
op|','
op|'['
op|'['
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|']'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|','
nl|'\n'
string|"'RFC822.SIZE'"
op|':'
string|"'6'"
op|','
nl|'\n'
string|"'INTERNALDATE'"
op|':'
string|"'15-Apr-2003 19:43:44 +0200'"
op|','
nl|'\n'
string|"'FLAGS'"
op|':'
op|'['
op|']'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetchWork'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchAllUID
dedent|''
name|'def'
name|'testFetchAllUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'testFetchAll'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchFast
dedent|''
name|'def'
name|'testFetchFast'
op|'('
name|'self'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'function'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchFast'
newline|'\n'
name|'self'
op|'.'
name|'messages'
op|'='
string|"'1'"
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
string|"'\\\\X'"
op|','
op|')'
op|','
string|"'19 Mar 2003 19:22:21 -0500'"
op|','
string|"''"
op|','
number|'9'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'{'
nl|'\n'
number|'0'
op|':'
op|'{'
string|"'FLAGS'"
op|':'
op|'['
string|"'\\\\X'"
op|']'
op|','
nl|'\n'
string|"'INTERNALDATE'"
op|':'
string|"'19-Mar-2003 19:22:21 -0500'"
op|','
nl|'\n'
string|"'RFC822.SIZE'"
op|':'
string|"'0'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetchWork'
op|'('
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFetchFastUID
dedent|''
name|'def'
name|'testFetchFastUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'testFetchFast'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DefaultSearchTestCase
dedent|''
dedent|''
name|'class'
name|'DefaultSearchTestCase'
op|'('
name|'IMAP4HelperMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test the behavior of the server\'s SEARCH implementation, particularly in\n    the face of unhandled search terms.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'server'
op|'='
name|'imap4'
op|'.'
name|'IMAP4Server'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'state'
op|'='
string|"'select'"
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'mbox'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'='
name|'SimpleClient'
op|'('
name|'self'
op|'.'
name|'connected'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'msgObjs'
op|'='
op|'['
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
op|')'
op|','
string|"''"
op|','
string|"''"
op|','
number|'999'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
op|')'
op|','
string|"''"
op|','
string|"''"
op|','
number|'10101'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'('
op|')'
op|','
string|"''"
op|','
string|"''"
op|','
number|'12345'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fetch
dedent|''
name|'def'
name|'fetch'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Pretend to be a mailbox and let C{self.server} lookup messages on me.\n        """'
newline|'\n'
name|'return'
name|'zip'
op|'('
name|'range'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'msgObjs'
op|')'
op|'+'
number|'1'
op|')'
op|','
name|'self'
op|'.'
name|'msgObjs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_messageSetSearchTest
dedent|''
name|'def'
name|'_messageSetSearchTest'
op|'('
name|'self'
op|','
name|'queryTerms'
op|','
name|'expectedMessages'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Issue a search with given query and verify that the returned messages\n        match the given expected messages.\n\n        @param queryTerms: A string giving the search query.\n        @param expectedMessages: A list of the message sequence numbers\n            expected as the result of the search.\n        @return: A L{Deferred} which fires when the test is complete.\n        """'
newline|'\n'
DECL|function|search
name|'def'
name|'search'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'search'
op|'('
name|'queryTerms'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'search'
op|')'
op|')'
newline|'\n'
DECL|function|searched
name|'def'
name|'searched'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'results'
op|','
name|'expectedMessages'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'searched'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_searchMessageSet
dedent|''
name|'def'
name|'test_searchMessageSet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a search which starts with a message set properly limits\n        the search results to messages in that set.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_messageSetSearchTest'
op|'('
string|"'1'"
op|','
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_searchMessageSetWithStar
dedent|''
name|'def'
name|'test_searchMessageSetWithStar'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the search filter ends with a star, all the message from the\n        starting point are returned.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_messageSetSearchTest'
op|'('
string|"'2:*'"
op|','
op|'['
number|'2'
op|','
number|'3'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_searchMessageSetWithList
dedent|''
name|'def'
name|'test_searchMessageSetWithList'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the search filter contains nesting terms, one of which includes a\n        message sequence set with a wildcard, IT ALL WORKS GOOD.\n        """'
newline|'\n'
comment|"# 5 is bigger than the biggest message sequence number, but that's"
nl|'\n'
comment|'# okay, because N:* includes the biggest message sequence number even'
nl|'\n'
comment|'# if N is bigger than that (read the rfc nub).'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_messageSetSearchTest'
op|'('
string|"'(5:*)'"
op|','
op|'['
number|'3'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_searchOr
dedent|''
name|'def'
name|'test_searchOr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the search filter contains an I{OR} term, all messages\n        which match either subexpression are returned.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_messageSetSearchTest'
op|'('
string|"'OR 1 2'"
op|','
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_searchOrMessageSet
dedent|''
name|'def'
name|'test_searchOrMessageSet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the search filter contains an I{OR} term with a\n        subexpression which includes a message sequence set wildcard,\n        all messages in that set are considered for inclusion in the\n        results.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_messageSetSearchTest'
op|'('
string|"'OR 2:* 2:*'"
op|','
op|'['
number|'2'
op|','
number|'3'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_searchNot
dedent|''
name|'def'
name|'test_searchNot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the search filter contains a I{NOT} term, all messages\n        which do not match the subexpression are returned.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_messageSetSearchTest'
op|'('
string|"'NOT 3'"
op|','
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_searchNotMessageSet
dedent|''
name|'def'
name|'test_searchNotMessageSet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the search filter contains a I{NOT} term with a\n        subexpression which includes a message sequence set wildcard,\n        no messages in that set are considered for inclusion in the\n        result.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_messageSetSearchTest'
op|'('
string|"'NOT 2:*'"
op|','
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_searchAndMessageSet
dedent|''
name|'def'
name|'test_searchAndMessageSet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the search filter contains multiple terms implicitly\n        conjoined with a message sequence set wildcard, only the\n        intersection of the results of each term are returned.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_messageSetSearchTest'
op|'('
string|"'2:* 3'"
op|','
op|'['
number|'3'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FetchSearchStoreTestCase
dedent|''
dedent|''
name|'class'
name|'FetchSearchStoreTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'IMAP4HelperMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'imap4'
op|'.'
name|'ISearchableMailbox'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'expected'
op|'='
name|'self'
op|'.'
name|'result'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'server_received_query'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'server_received_uid'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'server_received_parts'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'server_received_messages'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'='
name|'imap4'
op|'.'
name|'IMAP4Server'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'state'
op|'='
string|"'select'"
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'mbox'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'='
name|'SimpleClient'
op|'('
name|'self'
op|'.'
name|'connected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|search
dedent|''
name|'def'
name|'search'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'server_received_query'
op|'='
name|'query'
newline|'\n'
name|'self'
op|'.'
name|'server_received_uid'
op|'='
name|'uid'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'expected'
newline|'\n'
nl|'\n'
DECL|member|addListener
dedent|''
name|'def'
name|'addListener'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
DECL|variable|removeListener
dedent|''
name|'removeListener'
op|'='
name|'addListener'
newline|'\n'
nl|'\n'
DECL|member|_searchWork
name|'def'
name|'_searchWork'
op|'('
name|'self'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
DECL|function|search
indent|'        '
name|'def'
name|'search'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'search'
op|'('
name|'self'
op|'.'
name|'query'
op|','
name|'uid'
op|'='
name|'uid'
op|')'
newline|'\n'
DECL|function|result
dedent|''
name|'def'
name|'result'
op|'('
name|'R'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'='
name|'R'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'search'
op|')'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'result'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
nl|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
comment|'# Ensure no short-circuiting wierdness is going on'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'result'
name|'is'
name|'self'
op|'.'
name|'expected'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'result'
op|','
name|'self'
op|'.'
name|'expected'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'uid'
op|','
name|'self'
op|'.'
name|'server_received_uid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'parseNestedParens'
op|'('
name|'self'
op|'.'
name|'query'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'server_received_query'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'loopback'
op|'.'
name|'loopbackTCP'
op|'('
name|'self'
op|'.'
name|'server'
op|','
name|'self'
op|'.'
name|'client'
op|','
name|'noisy'
op|'='
name|'False'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testSearch
dedent|''
name|'def'
name|'testSearch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'query'
op|'='
name|'imap4'
op|'.'
name|'Or'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'header'
op|'='
op|'('
string|"'subject'"
op|','
string|"'substring'"
op|')'
op|')'
op|','
nl|'\n'
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'larger'
op|'='
number|'1024'
op|','
name|'smaller'
op|'='
number|'4096'
op|')'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'['
number|'1'
op|','
number|'4'
op|','
number|'5'
op|','
number|'7'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'uid'
op|'='
number|'0'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_searchWork'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUIDSearch
dedent|''
name|'def'
name|'testUIDSearch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'query'
op|'='
name|'imap4'
op|'.'
name|'Or'
op|'('
nl|'\n'
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'header'
op|'='
op|'('
string|"'subject'"
op|','
string|"'substring'"
op|')'
op|')'
op|','
nl|'\n'
name|'imap4'
op|'.'
name|'Query'
op|'('
name|'larger'
op|'='
number|'1024'
op|','
name|'smaller'
op|'='
number|'4096'
op|')'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'uid'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_searchWork'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getUID
dedent|''
name|'def'
name|'getUID'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'expected'
op|'['
name|'msg'
op|']'
op|'['
string|"'UID'"
op|']'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'IndexError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'expected'
op|'['
name|'msg'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'42'
newline|'\n'
nl|'\n'
DECL|member|fetch
dedent|''
dedent|''
name|'def'
name|'fetch'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'server_received_uid'
op|'='
name|'uid'
newline|'\n'
name|'self'
op|'.'
name|'server_received_messages'
op|'='
name|'str'
op|'('
name|'messages'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'expected'
newline|'\n'
nl|'\n'
DECL|member|_fetchWork
dedent|''
name|'def'
name|'_fetchWork'
op|'('
name|'self'
op|','
name|'fetch'
op|')'
op|':'
newline|'\n'
DECL|function|result
indent|'        '
name|'def'
name|'result'
op|'('
name|'R'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'='
name|'R'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'fetch'
op|')'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'result'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
nl|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
comment|'# Ensure no short-circuiting wierdness is going on'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'result'
name|'is'
name|'self'
op|'.'
name|'expected'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'parts'
name|'and'
name|'self'
op|'.'
name|'parts'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server_received_parts'
name|'and'
name|'self'
op|'.'
name|'server_received_parts'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'uid'
op|':'
newline|'\n'
indent|'                '
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
name|'self'
op|'.'
name|'expected'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'v'
op|'['
string|"'UID'"
op|']'
op|'='
name|'str'
op|'('
name|'k'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'result'
op|','
name|'self'
op|'.'
name|'expected'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'uid'
op|','
name|'self'
op|'.'
name|'server_received_uid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'parts'
op|','
name|'self'
op|'.'
name|'server_received_parts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'imap4'
op|'.'
name|'parseIdList'
op|'('
name|'self'
op|'.'
name|'messages'
op|')'
op|','
nl|'\n'
name|'imap4'
op|'.'
name|'parseIdList'
op|'('
name|'self'
op|'.'
name|'server_received_messages'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'loopback'
op|'.'
name|'loopbackTCP'
op|'('
name|'self'
op|'.'
name|'server'
op|','
name|'self'
op|'.'
name|'client'
op|','
name|'noisy'
op|'='
name|'False'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeMailbox
dedent|''
dedent|''
name|'class'
name|'FakeMailbox'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'args'
op|'='
op|'['
op|']'
newline|'\n'
DECL|member|addMessage
dedent|''
name|'def'
name|'addMessage'
op|'('
name|'self'
op|','
name|'body'
op|','
name|'flags'
op|','
name|'date'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'args'
op|'.'
name|'append'
op|'('
op|'('
name|'body'
op|','
name|'flags'
op|','
name|'date'
op|')'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|class|FeaturefulMessage
dedent|''
dedent|''
name|'class'
name|'FeaturefulMessage'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'imap4'
op|'.'
name|'IMessageFile'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getFlags
name|'def'
name|'getFlags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'flags'"
newline|'\n'
nl|'\n'
DECL|member|getInternalDate
dedent|''
name|'def'
name|'getInternalDate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'internaldate'"
newline|'\n'
nl|'\n'
DECL|member|open
dedent|''
name|'def'
name|'open'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'StringIO'
op|'('
string|'"open"'
op|')'
newline|'\n'
nl|'\n'
DECL|class|MessageCopierMailbox
dedent|''
dedent|''
name|'class'
name|'MessageCopierMailbox'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'imap4'
op|'.'
name|'IMessageCopier'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'msgs'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|copy
dedent|''
name|'def'
name|'copy'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'msgs'
op|'.'
name|'append'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'msgs'
op|')'
newline|'\n'
nl|'\n'
DECL|class|CopyWorkerTestCase
dedent|''
dedent|''
name|'class'
name|'CopyWorkerTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testFeaturefulMessage
indent|'    '
name|'def'
name|'testFeaturefulMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'imap4'
op|'.'
name|'IMAP4Server'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Yes.  I am grabbing this uber-non-public method to test it.'
nl|'\n'
comment|'# It is complex.  It needs to be tested directly!'
nl|'\n'
comment|'# Perhaps it should be refactored, simplified, or split up into'
nl|'\n'
comment|'# not-so-private components, but that is a task for another day.'
nl|'\n'
nl|'\n'
comment|'# Ha ha! Addendum!  Soon it will be split up, and this test will'
nl|'\n'
comment|'# be re-written to just use the default adapter for IMailbox to'
nl|'\n'
comment|'# IMessageCopier and call .copy on that adapter.'
nl|'\n'
name|'f'
op|'='
name|'s'
op|'.'
name|'_IMAP4Server__cbCopy'
newline|'\n'
nl|'\n'
name|'m'
op|'='
name|'FakeMailbox'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'f'
op|'('
op|'['
op|'('
name|'i'
op|','
name|'FeaturefulMessage'
op|'('
op|')'
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'1'
op|','
number|'11'
op|')'
op|']'
op|','
string|"'tag'"
op|','
name|'m'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbCopy
name|'def'
name|'cbCopy'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'a'
name|'in'
name|'m'
op|'.'
name|'args'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'a'
op|'['
number|'0'
op|']'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|'"open"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'a'
op|'['
number|'1'
op|']'
op|','
string|'"flags"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'a'
op|'['
number|'2'
op|']'
op|','
string|'"internaldate"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
op|'('
name|'status'
op|','
name|'result'
op|')'
name|'in'
name|'results'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'status'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbCopy'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testUnfeaturefulMessage
dedent|''
name|'def'
name|'testUnfeaturefulMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'imap4'
op|'.'
name|'IMAP4Server'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# See above comment'
nl|'\n'
name|'f'
op|'='
name|'s'
op|'.'
name|'_IMAP4Server__cbCopy'
newline|'\n'
nl|'\n'
name|'m'
op|'='
name|'FakeMailbox'
op|'('
op|')'
newline|'\n'
name|'msgs'
op|'='
op|'['
name|'FakeyMessage'
op|'('
op|'{'
string|"'Header-Counter'"
op|':'
name|'str'
op|'('
name|'i'
op|')'
op|'}'
op|','
op|'('
op|')'
op|','
string|"'Date'"
op|','
string|"'Body %d'"
op|'%'
op|'('
name|'i'
op|','
op|')'
op|','
name|'i'
op|'+'
number|'10'
op|','
name|'None'
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'1'
op|','
number|'11'
op|')'
op|']'
newline|'\n'
name|'d'
op|'='
name|'f'
op|'('
op|'['
name|'im'
name|'for'
name|'im'
name|'in'
name|'zip'
op|'('
name|'range'
op|'('
number|'1'
op|','
number|'11'
op|')'
op|','
name|'msgs'
op|')'
op|']'
op|','
string|"'tag'"
op|','
name|'m'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbCopy
name|'def'
name|'cbCopy'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'seen'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'a'
name|'in'
name|'m'
op|'.'
name|'args'
op|':'
newline|'\n'
indent|'                '
name|'seen'
op|'.'
name|'append'
op|'('
name|'a'
op|'['
number|'0'
op|']'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'a'
op|'['
number|'1'
op|']'
op|','
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'a'
op|'['
number|'2'
op|']'
op|','
string|'"Date"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'seen'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'exp'
op|'='
op|'['
string|'"Header-Counter: %d\\r\\n\\r\\nBody %d"'
op|'%'
op|'('
name|'i'
op|','
name|'i'
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'1'
op|','
number|'11'
op|')'
op|']'
newline|'\n'
name|'exp'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'seen'
op|','
name|'exp'
op|')'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'status'
op|','
name|'result'
op|')'
name|'in'
name|'results'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'status'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbCopy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMessageCopier
dedent|''
name|'def'
name|'testMessageCopier'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'imap4'
op|'.'
name|'IMAP4Server'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# See above comment'
nl|'\n'
name|'f'
op|'='
name|'s'
op|'.'
name|'_IMAP4Server__cbCopy'
newline|'\n'
nl|'\n'
name|'m'
op|'='
name|'MessageCopierMailbox'
op|'('
op|')'
newline|'\n'
name|'msgs'
op|'='
op|'['
name|'object'
op|'('
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'1'
op|','
number|'11'
op|')'
op|']'
newline|'\n'
name|'d'
op|'='
name|'f'
op|'('
op|'['
name|'im'
name|'for'
name|'im'
name|'in'
name|'zip'
op|'('
name|'range'
op|'('
number|'1'
op|','
number|'11'
op|')'
op|','
name|'msgs'
op|')'
op|']'
op|','
string|"'tag'"
op|','
name|'m'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbCopy
name|'def'
name|'cbCopy'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'results'
op|','
name|'zip'
op|'('
op|'['
number|'1'
op|']'
op|'*'
number|'10'
op|','
name|'range'
op|'('
number|'1'
op|','
number|'11'
op|')'
op|')'
op|')'
newline|'\n'
name|'for'
op|'('
name|'orig'
op|','
name|'new'
op|')'
name|'in'
name|'zip'
op|'('
name|'msgs'
op|','
name|'m'
op|'.'
name|'msgs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'orig'
op|','
name|'new'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbCopy'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TLSTestCase
dedent|''
dedent|''
name|'class'
name|'TLSTestCase'
op|'('
name|'IMAP4HelperMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|serverCTX
indent|'    '
name|'serverCTX'
op|'='
name|'ServerTLSContext'
name|'and'
name|'ServerTLSContext'
op|'('
op|')'
newline|'\n'
DECL|variable|clientCTX
name|'clientCTX'
op|'='
name|'ClientTLSContext'
name|'and'
name|'ClientTLSContext'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|loopback
name|'def'
name|'loopback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'loopback'
op|'.'
name|'loopbackTCP'
op|'('
name|'self'
op|'.'
name|'server'
op|','
name|'self'
op|'.'
name|'client'
op|','
name|'noisy'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAPileOfThings
dedent|''
name|'def'
name|'testAPileOfThings'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'inbox'"
op|')'
newline|'\n'
name|'called'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|list
dedent|''
name|'def'
name|'list'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'list'
op|'('
string|"'inbox'"
op|','
string|"'%'"
op|')'
newline|'\n'
DECL|function|status
dedent|''
name|'def'
name|'status'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'status'
op|'('
string|"'inbox'"
op|','
string|"'UIDNEXT'"
op|')'
newline|'\n'
DECL|function|examine
dedent|''
name|'def'
name|'examine'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'examine'
op|'('
string|"'inbox'"
op|')'
newline|'\n'
DECL|function|logout
dedent|''
name|'def'
name|'logout'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'logout'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'requireTransportSecurity'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'methods'
op|'='
op|'['
name|'login'
op|','
name|'list'
op|','
name|'status'
op|','
name|'examine'
op|','
name|'logout'
op|']'
newline|'\n'
name|'map'
op|'('
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|','
name|'map'
op|'('
name|'strip'
op|','
name|'methods'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|','
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'startedTLS'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'startedTLS'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'called'
op|')'
op|','
name|'len'
op|'('
name|'methods'
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testLoginLogin
dedent|''
name|'def'
name|'testLoginLogin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'server'
op|'.'
name|'checker'
op|'.'
name|'addUser'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
name|'success'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'registerAuthenticator'
op|'('
name|'imap4'
op|'.'
name|'LOGINAuthenticator'
op|'('
string|"'testuser'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'client'
op|'.'
name|'authenticate'
op|'('
string|"'password-test'"
op|')'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'client'
op|'.'
name|'logout'
op|'('
op|')'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'success'
op|'.'
name|'append'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'success'
op|')'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_startTLS
dedent|''
name|'def'
name|'test_startTLS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IMAP4Client.startTLS} triggers TLS negotiation and returns a\n        L{Deferred} which fires after the client\'s transport is using\n        encryption.\n        """'
newline|'\n'
name|'success'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'client'
op|'.'
name|'startTLS'
op|'('
op|')'
op|')'
newline|'\n'
DECL|function|checkSecure
name|'def'
name|'checkSecure'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'interfaces'
op|'.'
name|'ISSLTransport'
op|'.'
name|'providedBy'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'checkSecure'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'success'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'success'
op|')'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d'
op|','
name|'self'
op|'.'
name|'connected'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testFailedStartTLS
dedent|''
name|'def'
name|'testFailedStartTLS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'failure'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|breakServerTLS
name|'def'
name|'breakServerTLS'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'server'
op|'.'
name|'canStartTLS'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'breakServerTLS'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ign'
op|':'
name|'self'
op|'.'
name|'client'
op|'.'
name|'startTLS'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addErrback'
op|'('
name|'lambda'
name|'err'
op|':'
name|'failure'
op|'.'
name|'append'
op|'('
name|'err'
op|'.'
name|'trap'
op|'('
name|'imap4'
op|'.'
name|'IMAP4Exception'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
nl|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'failure'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'failure'
op|'['
number|'0'
op|']'
op|','
name|'imap4'
op|'.'
name|'IMAP4Exception'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SlowMailbox
dedent|''
dedent|''
name|'class'
name|'SlowMailbox'
op|'('
name|'SimpleMailbox'
op|')'
op|':'
newline|'\n'
DECL|variable|howSlow
indent|'    '
name|'howSlow'
op|'='
number|'2'
newline|'\n'
DECL|variable|callLater
name|'callLater'
op|'='
name|'None'
newline|'\n'
DECL|variable|fetchDeferred
name|'fetchDeferred'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|"# Not a very nice implementation of fetch(), but it'll"
nl|'\n'
comment|'# do for the purposes of testing.'
nl|'\n'
DECL|member|fetch
name|'def'
name|'fetch'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'callLater'
op|'('
name|'self'
op|'.'
name|'howSlow'
op|','
name|'d'
op|'.'
name|'callback'
op|','
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fetchDeferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|class|Timeout
dedent|''
dedent|''
name|'class'
name|'Timeout'
op|'('
name|'IMAP4HelperMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_serverTimeout
indent|'    '
name|'def'
name|'test_serverTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The *client* has a timeout mechanism which will close connections that\n        are inactive for a period.\n        """'
newline|'\n'
name|'c'
op|'='
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'timeoutTest'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'timeout'
op|'='
number|'5'
comment|'#seconds'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'callLater'
op|'='
name|'c'
op|'.'
name|'callLater'
newline|'\n'
name|'self'
op|'.'
name|'selectedArgs'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
name|'c'
op|'.'
name|'advance'
op|'('
number|'5'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'timedOut'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|timedOut
dedent|''
name|'def'
name|'timedOut'
op|'('
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cbStopClient'
op|'('
name|'None'
op|')'
newline|'\n'
name|'failure'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'TimeoutError'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d'
op|','
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_longFetchDoesntTimeout
dedent|''
name|'def'
name|'test_longFetchDoesntTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The connection timeout does not take effect during fetches.\n        """'
newline|'\n'
name|'c'
op|'='
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'SlowMailbox'
op|'.'
name|'callLater'
op|'='
name|'c'
op|'.'
name|'callLater'
newline|'\n'
name|'SlowMailbox'
op|'.'
name|'fetchDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'callLater'
op|'='
name|'c'
op|'.'
name|'callLater'
newline|'\n'
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'mailboxFactory'
op|'='
name|'SlowMailbox'
newline|'\n'
name|'SimpleServer'
op|'.'
name|'theAccount'
op|'.'
name|'addMailbox'
op|'('
string|"'mailbox-test'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'setTimeout'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|function|login
name|'def'
name|'login'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'password-test'"
op|')'
newline|'\n'
DECL|function|select
dedent|''
name|'def'
name|'select'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'server'
op|'.'
name|'setTimeout'
op|'('
number|'1'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'select'
op|'('
string|"'mailbox-test'"
op|')'
newline|'\n'
DECL|function|fetch
dedent|''
name|'def'
name|'fetch'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'fetchUID'
op|'('
string|"'1:*'"
op|')'
newline|'\n'
DECL|function|stillConnected
dedent|''
name|'def'
name|'stillConnected'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'state'
op|','
string|"'timeout'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbAdvance
dedent|''
name|'def'
name|'cbAdvance'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'4'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'c'
op|'.'
name|'advance'
op|'('
number|'.5'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'SlowMailbox'
op|'.'
name|'fetchDeferred'
op|'.'
name|'addCallback'
op|'('
name|'cbAdvance'
op|')'
newline|'\n'
nl|'\n'
name|'d1'
op|'='
name|'self'
op|'.'
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'login'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'select'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'fetch'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'strip'
op|'('
name|'stillConnected'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbStopClient'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebGeneral'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'self'
op|'.'
name|'loopback'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_idleClientDoesDisconnect
dedent|''
name|'def'
name|'test_idleClientDoesDisconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The *server* has a timeout mechanism which will close connections that\n        are inactive for a period.\n        """'
newline|'\n'
name|'c'
op|'='
name|'Clock'
op|'('
op|')'
newline|'\n'
comment|'# Hook up our server protocol'
nl|'\n'
name|'transport'
op|'='
name|'StringTransportWithDisconnection'
op|'('
op|')'
newline|'\n'
name|'transport'
op|'.'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'server'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'callLater'
op|'='
name|'c'
op|'.'
name|'callLater'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure we can notice when the connection goes away'
nl|'\n'
name|'lost'
op|'='
op|'['
op|']'
newline|'\n'
name|'connLost'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'connectionLost'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'connectionLost'
op|'='
name|'lambda'
name|'reason'
op|':'
op|'('
name|'lost'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
op|','
name|'connLost'
op|'('
name|'reason'
op|')'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
comment|'# 2/3rds of the idle timeout elapses...'
nl|'\n'
name|'c'
op|'.'
name|'pump'
op|'('
op|'['
number|'0.0'
op|']'
op|'+'
op|'['
name|'self'
op|'.'
name|'server'
op|'.'
name|'timeOut'
op|'/'
number|'3.0'
op|']'
op|'*'
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'lost'
op|','
name|'lost'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now some more'
nl|'\n'
name|'c'
op|'.'
name|'pump'
op|'('
op|'['
number|'0.0'
op|','
name|'self'
op|'.'
name|'server'
op|'.'
name|'timeOut'
op|'/'
number|'2.0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'lost'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Disconnection
dedent|''
dedent|''
name|'class'
name|'Disconnection'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testClientDisconnectFailsDeferreds
indent|'    '
name|'def'
name|'testClientDisconnectFailsDeferreds'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'imap4'
op|'.'
name|'IMAP4Client'
op|'('
op|')'
newline|'\n'
name|'t'
op|'='
name|'StringTransportWithDisconnection'
op|'('
op|')'
newline|'\n'
name|'c'
op|'.'
name|'makeConnection'
op|'('
name|'t'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'c'
op|'.'
name|'login'
op|'('
string|"'testuser'"
op|','
string|"'example.com'"
op|')'
op|','
name|'error'
op|'.'
name|'ConnectionDone'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'connectionLost'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
string|'"Connection closed"'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SynchronousMailbox
dedent|''
dedent|''
name|'class'
name|'SynchronousMailbox'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Trivial, in-memory mailbox implementation which can produce a message\n    synchronously.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'messages'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'messages'
op|'='
name|'messages'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fetch
dedent|''
name|'def'
name|'fetch'
op|'('
name|'self'
op|','
name|'msgset'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'not'
name|'uid'
op|','
string|'"Cannot handle uid requests."'
newline|'\n'
name|'for'
name|'msg'
name|'in'
name|'msgset'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'msg'
op|','
name|'self'
op|'.'
name|'messages'
op|'['
name|'msg'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StringTransportConsumer
dedent|''
dedent|''
dedent|''
name|'class'
name|'StringTransportConsumer'
op|'('
name|'StringTransport'
op|')'
op|':'
newline|'\n'
DECL|variable|producer
indent|'    '
name|'producer'
op|'='
name|'None'
newline|'\n'
DECL|variable|streaming
name|'streaming'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|registerProducer
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'producer'
op|'='
name|'producer'
newline|'\n'
name|'self'
op|'.'
name|'streaming'
op|'='
name|'streaming'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Pipelining
dedent|''
dedent|''
name|'class'
name|'Pipelining'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for various aspects of the IMAP4 server\'s pipelining support.\n    """'
newline|'\n'
DECL|variable|messages
name|'messages'
op|'='
op|'['
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'['
op|']'
op|','
string|"''"
op|','
string|"'0'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'['
op|']'
op|','
string|"''"
op|','
string|"'1'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'FakeyMessage'
op|'('
op|'{'
op|'}'
op|','
op|'['
op|']'
op|','
string|"''"
op|','
string|"'2'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'iterators'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'StringTransportConsumer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'='
name|'imap4'
op|'.'
name|'IMAP4Server'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'self'
op|'.'
name|'iterateInReactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|iterateInReactor
dedent|''
name|'def'
name|'iterateInReactor'
op|'('
name|'self'
op|','
name|'iterator'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iterators'
op|'.'
name|'append'
op|'('
op|'('
name|'iterator'
op|','
name|'d'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'server'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_synchronousFetch
dedent|''
name|'def'
name|'test_synchronousFetch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that pipelined FETCH commands which can be responded to\n        synchronously are responded to correctly.\n        """'
newline|'\n'
name|'mailbox'
op|'='
name|'SynchronousMailbox'
op|'('
name|'self'
op|'.'
name|'messages'
op|')'
newline|'\n'
nl|'\n'
comment|'# Skip over authentication and folder selection'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'state'
op|'='
string|"'select'"
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'mbox'
op|'='
name|'mailbox'
newline|'\n'
nl|'\n'
comment|'# Get rid of any greeting junk'
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# Here's some pipelined stuff"
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
string|"'01 FETCH 1 BODY[]\\r\\n'"
nl|'\n'
string|"'02 FETCH 2 BODY[]\\r\\n'"
nl|'\n'
string|"'03 FETCH 3 BODY[]\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Flush anything the server has scheduled to run'
nl|'\n'
name|'while'
name|'self'
op|'.'
name|'iterators'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'e'
name|'in'
name|'self'
op|'.'
name|'iterators'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'iterators'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|"# The bodies are empty because we aren't simulating a transport"
nl|'\n'
comment|'# exactly correctly (we have StringTransportConsumer but we never'
nl|'\n'
comment|"# call resumeProducing on its producer).  It doesn't matter: just"
nl|'\n'
comment|'# make sure the surrounding structure is okay, and that no'
nl|'\n'
comment|'# exceptions occurred.'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|"'* 1 FETCH (BODY[] )\\r\\n'"
nl|'\n'
string|"'01 OK FETCH completed\\r\\n'"
nl|'\n'
string|"'* 2 FETCH (BODY[] )\\r\\n'"
nl|'\n'
string|"'02 OK FETCH completed\\r\\n'"
nl|'\n'
string|"'* 3 FETCH (BODY[] )\\r\\n'"
nl|'\n'
string|"'03 OK FETCH completed\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'ClientTLSContext'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'case'
name|'in'
op|'('
name|'TLSTestCase'
op|','
op|')'
op|':'
newline|'\n'
indent|'        '
name|'case'
op|'.'
name|'skip'
op|'='
string|'"OpenSSL not present"'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'interfaces'
op|'.'
name|'IReactorSSL'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'case'
name|'in'
op|'('
name|'TLSTestCase'
op|','
op|')'
op|':'
newline|'\n'
indent|'        '
name|'case'
op|'.'
name|'skip'
op|'='
string|'"Reactor doesn\'t support SSL"'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTest cases for Ltwisted.mail.pop3} module.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'StringIO'
newline|'\n'
name|'import'
name|'hmac'
newline|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
op|','
name|'util'
newline|'\n'
name|'from'
name|'twisted'
name|'import'
name|'mail'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'mail'
op|'.'
name|'protocols'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'mail'
op|'.'
name|'pop3'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'protocol'
newline|'\n'
name|'from'
name|'twisted'
name|'import'
name|'internet'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'mail'
name|'import'
name|'pop3'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'loopback'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
name|'import'
name|'cred'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'portal'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'checkers'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'LineSendingProtocol'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UtilityTestCase
name|'class'
name|'UtilityTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test the various helper functions and classes used by the POP3 server\n    protocol implementation.\n    """'
newline|'\n'
nl|'\n'
DECL|member|testLineBuffering
name|'def'
name|'testLineBuffering'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test creating a LineBuffer and feeding it some lines.  The lines should\n        build up in its internal buffer for a while and then get spat out to\n        the writer.\n        """'
newline|'\n'
name|'output'
op|'='
op|'['
op|']'
newline|'\n'
name|'input'
op|'='
name|'iter'
op|'('
name|'itertools'
op|'.'
name|'cycle'
op|'('
op|'['
string|"'012'"
op|','
string|"'345'"
op|','
string|"'6'"
op|','
string|"'7'"
op|','
string|"'8'"
op|','
string|"'9'"
op|']'
op|')'
op|')'
newline|'\n'
name|'c'
op|'='
name|'pop3'
op|'.'
name|'_IteratorBuffer'
op|'('
name|'output'
op|'.'
name|'extend'
op|','
name|'input'
op|','
number|'6'
op|')'
newline|'\n'
name|'i'
op|'='
name|'iter'
op|'('
name|'c'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'output'
op|','
op|'['
op|']'
op|')'
comment|'# nothing is buffer'
newline|'\n'
name|'i'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'output'
op|','
op|'['
op|']'
op|')'
comment|"# '012' is buffered"
newline|'\n'
name|'i'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'output'
op|','
op|'['
op|']'
op|')'
comment|"# '012345' is buffered"
newline|'\n'
name|'i'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'output'
op|','
op|'['
string|"'012'"
op|','
string|"'345'"
op|','
string|"'6'"
op|']'
op|')'
comment|'# nothing is buffered'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'range'
op|'('
number|'5'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'i'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'output'
op|','
op|'['
string|"'012'"
op|','
string|"'345'"
op|','
string|"'6'"
op|','
string|"'7'"
op|','
string|"'8'"
op|','
string|"'9'"
op|','
string|"'012'"
op|','
string|"'345'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testFinishLineBuffering
dedent|''
name|'def'
name|'testFinishLineBuffering'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a LineBuffer flushes everything when its iterator is\n        exhausted, and itself raises StopIteration.\n        """'
newline|'\n'
name|'output'
op|'='
op|'['
op|']'
newline|'\n'
name|'input'
op|'='
name|'iter'
op|'('
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
name|'c'
op|'='
name|'pop3'
op|'.'
name|'_IteratorBuffer'
op|'('
name|'output'
op|'.'
name|'extend'
op|','
name|'input'
op|','
number|'5'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'c'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'output'
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testSuccessResponseFormatter
dedent|''
name|'def'
name|'testSuccessResponseFormatter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the thing that spits out POP3 \'success responses\' works\n        right.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'pop3'
op|'.'
name|'successResponse'
op|'('
string|"'Great.'"
op|')'
op|','
nl|'\n'
string|"'+OK Great.\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testStatLineFormatter
dedent|''
name|'def'
name|'testStatLineFormatter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the function which formats stat lines does so appropriately.\n        """'
newline|'\n'
name|'statLine'
op|'='
name|'list'
op|'('
name|'pop3'
op|'.'
name|'formatStatResponse'
op|'('
op|'['
op|']'
op|')'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'statLine'
op|','
string|"'+OK 0 0\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
name|'statLine'
op|'='
name|'list'
op|'('
name|'pop3'
op|'.'
name|'formatStatResponse'
op|'('
op|'['
number|'10'
op|','
number|'31'
op|','
number|'0'
op|','
number|'10101'
op|']'
op|')'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'statLine'
op|','
string|"'+OK 4 10142\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testListLineFormatter
dedent|''
name|'def'
name|'testListLineFormatter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the function which formats the lines in response to a LIST\n        command does so appropriately.\n        """'
newline|'\n'
name|'listLines'
op|'='
name|'list'
op|'('
name|'pop3'
op|'.'
name|'formatListResponse'
op|'('
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'listLines'
op|','
nl|'\n'
op|'['
string|"'+OK 0\\r\\n'"
op|','
string|"'.\\r\\n'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'listLines'
op|'='
name|'list'
op|'('
name|'pop3'
op|'.'
name|'formatListResponse'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'100'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'listLines'
op|','
nl|'\n'
op|'['
string|"'+OK 4\\r\\n'"
op|','
string|"'1 1\\r\\n'"
op|','
string|"'2 2\\r\\n'"
op|','
string|"'3 3\\r\\n'"
op|','
string|"'4 100\\r\\n'"
op|','
string|"'.\\r\\n'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|testUIDListLineFormatter
dedent|''
name|'def'
name|'testUIDListLineFormatter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the function which formats lines in response to a UIDL\n        command does so appropriately.\n        """'
newline|'\n'
name|'UIDs'
op|'='
op|'['
string|"'abc'"
op|','
string|"'def'"
op|','
string|"'ghi'"
op|']'
newline|'\n'
name|'listLines'
op|'='
name|'list'
op|'('
name|'pop3'
op|'.'
name|'formatUIDListResponse'
op|'('
op|'['
op|']'
op|','
name|'UIDs'
op|'.'
name|'__getitem__'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'listLines'
op|','
nl|'\n'
op|'['
string|"'+OK \\r\\n'"
op|','
string|"'.\\r\\n'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'listLines'
op|'='
name|'list'
op|'('
name|'pop3'
op|'.'
name|'formatUIDListResponse'
op|'('
op|'['
number|'123'
op|','
number|'431'
op|','
number|'591'
op|']'
op|','
name|'UIDs'
op|'.'
name|'__getitem__'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'listLines'
op|','
nl|'\n'
op|'['
string|"'+OK \\r\\n'"
op|','
string|"'1 abc\\r\\n'"
op|','
string|"'2 def\\r\\n'"
op|','
string|"'3 ghi\\r\\n'"
op|','
string|"'.\\r\\n'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'listLines'
op|'='
name|'list'
op|'('
name|'pop3'
op|'.'
name|'formatUIDListResponse'
op|'('
op|'['
number|'0'
op|','
name|'None'
op|','
number|'591'
op|']'
op|','
name|'UIDs'
op|'.'
name|'__getitem__'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'listLines'
op|','
nl|'\n'
op|'['
string|"'+OK \\r\\n'"
op|','
string|"'1 abc\\r\\n'"
op|','
string|"'3 ghi\\r\\n'"
op|','
string|"'.\\r\\n'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyVirtualPOP3
dedent|''
dedent|''
name|'class'
name|'MyVirtualPOP3'
op|'('
name|'mail'
op|'.'
name|'protocols'
op|'.'
name|'VirtualPOP3'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|magic
indent|'    '
name|'magic'
op|'='
string|"'<moshez>'"
newline|'\n'
nl|'\n'
DECL|member|authenticateUserAPOP
name|'def'
name|'authenticateUserAPOP'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'digest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user'
op|','
name|'domain'
op|'='
name|'self'
op|'.'
name|'lookupDomain'
op|'('
name|'user'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'service'
op|'.'
name|'domains'
op|'['
string|"'baz.com'"
op|']'
op|'.'
name|'authenticateUserAPOP'
op|'('
name|'user'
op|','
name|'digest'
op|','
name|'self'
op|'.'
name|'magic'
op|','
name|'domain'
op|')'
newline|'\n'
nl|'\n'
DECL|class|DummyDomain
dedent|''
dedent|''
name|'class'
name|'DummyDomain'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'   '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'       '
name|'self'
op|'.'
name|'users'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|addUser
dedent|''
name|'def'
name|'addUser'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'       '
name|'self'
op|'.'
name|'users'
op|'['
name|'name'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|addMessage
dedent|''
name|'def'
name|'addMessage'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'       '
name|'self'
op|'.'
name|'users'
op|'['
name|'name'
op|']'
op|'.'
name|'append'
op|'('
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|authenticateUserAPOP
dedent|''
name|'def'
name|'authenticateUserAPOP'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'digest'
op|','
name|'magic'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'       '
name|'return'
name|'pop3'
op|'.'
name|'IMailbox'
op|','
name|'ListMailbox'
op|'('
name|'self'
op|'.'
name|'users'
op|'['
name|'name'
op|']'
op|')'
op|','
name|'lambda'
op|':'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListMailbox
dedent|''
dedent|''
name|'class'
name|'ListMailbox'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'list'
op|'='
name|'list'
newline|'\n'
nl|'\n'
DECL|member|listMessages
dedent|''
name|'def'
name|'listMessages'
op|'('
name|'self'
op|','
name|'i'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'i'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'map'
op|'('
name|'len'
op|','
name|'self'
op|'.'
name|'list'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'list'
op|'['
name|'i'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getMessage
dedent|''
name|'def'
name|'getMessage'
op|'('
name|'self'
op|','
name|'i'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
name|'self'
op|'.'
name|'list'
op|'['
name|'i'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getUidl
dedent|''
name|'def'
name|'getUidl'
op|'('
name|'self'
op|','
name|'i'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'i'
newline|'\n'
nl|'\n'
DECL|member|deleteMessage
dedent|''
name|'def'
name|'deleteMessage'
op|'('
name|'self'
op|','
name|'i'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'list'
op|'['
name|'i'
op|']'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|member|sync
dedent|''
name|'def'
name|'sync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|MyPOP3Downloader
dedent|''
dedent|''
name|'class'
name|'MyPOP3Downloader'
op|'('
name|'pop3'
op|'.'
name|'POP3Client'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|handle_WELCOME
indent|'    '
name|'def'
name|'handle_WELCOME'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pop3'
op|'.'
name|'POP3Client'
op|'.'
name|'handle_WELCOME'
op|'('
name|'self'
op|','
name|'line'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'apop'
op|'('
string|"'hello@baz.com'"
op|','
string|"'world'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_APOP
dedent|''
name|'def'
name|'handle_APOP'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parts'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'code'
op|'='
name|'parts'
op|'['
number|'0'
op|']'
newline|'\n'
name|'data'
op|'='
op|'('
name|'parts'
op|'['
number|'1'
op|':'
op|']'
name|'or'
op|'['
string|"'NONE'"
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'code'
op|'!='
string|"'+OK'"
op|':'
newline|'\n'
indent|'            '
name|'print'
name|'parts'
newline|'\n'
name|'raise'
name|'AssertionError'
op|','
string|"'code is '"
op|'+'
name|'code'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'lines'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'retr'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_RETR_continue
dedent|''
name|'def'
name|'handle_RETR_continue'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lines'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_RETR_end
dedent|''
name|'def'
name|'handle_RETR_end'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'message'
op|'='
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'lines'
op|')'
op|'+'
string|"'\\n'"
newline|'\n'
name|'self'
op|'.'
name|'quit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_QUIT
dedent|''
name|'def'
name|'handle_QUIT'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'line'
op|'['
op|':'
number|'3'
op|']'
op|'!='
string|"'+OK'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'AssertionError'
op|','
string|"'code is '"
op|'+'
name|'line'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|POP3TestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'POP3TestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'message'
op|'='
string|"'''\\\nSubject: urgent\n\nSomeone set up us the bomb!\n'''"
newline|'\n'
nl|'\n'
name|'expectedOutput'
op|'='
string|"'''\\\n+OK <moshez>\\015\n+OK Authentication succeeded\\015\n+OK \\015\n1 0\\015\n.\\015\n+OK %d\\015\nSubject: urgent\\015\n\\015\nSomeone set up us the bomb!\\015\n.\\015\n+OK \\015\n'''"
op|'%'
name|'len'
op|'('
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'='
name|'internet'
op|'.'
name|'protocol'
op|'.'
name|'Factory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'domains'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'domains'
op|'['
string|"'baz.com'"
op|']'
op|'='
name|'DummyDomain'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'domains'
op|'['
string|"'baz.com'"
op|']'
op|'.'
name|'addUser'
op|'('
string|"'hello'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'domains'
op|'['
string|"'baz.com'"
op|']'
op|'.'
name|'addMessage'
op|'('
string|"'hello'"
op|','
name|'self'
op|'.'
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMessages
dedent|''
name|'def'
name|'testMessages'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'client'
op|'='
name|'LineSendingProtocol'
op|'('
op|'['
nl|'\n'
string|"'APOP hello@baz.com world'"
op|','
nl|'\n'
string|"'UIDL'"
op|','
nl|'\n'
string|"'RETR 1'"
op|','
nl|'\n'
string|"'QUIT'"
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'server'
op|'='
name|'MyVirtualPOP3'
op|'('
op|')'
newline|'\n'
name|'server'
op|'.'
name|'service'
op|'='
name|'self'
op|'.'
name|'factory'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'output'
op|'='
string|"'\\r\\n'"
op|'.'
name|'join'
op|'('
name|'client'
op|'.'
name|'response'
op|')'
op|'+'
string|"'\\r\\n'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'output'
op|','
name|'self'
op|'.'
name|'expectedOutput'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'loopback'
op|'.'
name|'loopbackTCP'
op|'('
name|'server'
op|','
name|'client'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLoopback
dedent|''
name|'def'
name|'testLoopback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'protocol'
op|'='
name|'MyVirtualPOP3'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'service'
op|'='
name|'self'
op|'.'
name|'factory'
newline|'\n'
name|'clientProtocol'
op|'='
name|'MyPOP3Downloader'
op|'('
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'clientProtocol'
op|'.'
name|'message'
op|','
name|'self'
op|'.'
name|'message'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'connectionLost'
op|'('
nl|'\n'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'Exception'
op|'('
string|'"Test harness disconnect"'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'loopback'
op|'.'
name|'loopbackAsync'
op|'('
name|'protocol'
op|','
name|'clientProtocol'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
dedent|''
name|'testLoopback'
op|'.'
name|'suppress'
op|'='
op|'['
name|'util'
op|'.'
name|'suppress'
op|'('
name|'message'
op|'='
string|'"twisted.mail.pop3.POP3Client is deprecated"'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyPOP3
dedent|''
name|'class'
name|'DummyPOP3'
op|'('
name|'pop3'
op|'.'
name|'POP3'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|magic
indent|'    '
name|'magic'
op|'='
string|"'<moshez>'"
newline|'\n'
nl|'\n'
DECL|member|authenticateUserAPOP
name|'def'
name|'authenticateUserAPOP'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'pop3'
op|'.'
name|'IMailbox'
op|','
name|'DummyMailbox'
op|'('
name|'ValueError'
op|')'
op|','
name|'lambda'
op|':'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyMailbox
dedent|''
dedent|''
name|'class'
name|'DummyMailbox'
op|'('
name|'pop3'
op|'.'
name|'Mailbox'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|messages
indent|'    '
name|'messages'
op|'='
op|'['
string|"'From: moshe\\nTo: moshe\\n\\nHow are you, friend?\\n'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'exceptionType'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'messages'
op|'='
name|'DummyMailbox'
op|'.'
name|'messages'
op|'['
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'exceptionType'
op|'='
name|'exceptionType'
newline|'\n'
nl|'\n'
DECL|member|listMessages
dedent|''
name|'def'
name|'listMessages'
op|'('
name|'self'
op|','
name|'i'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'i'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'map'
op|'('
name|'len'
op|','
name|'self'
op|'.'
name|'messages'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'i'
op|'>='
name|'len'
op|'('
name|'self'
op|'.'
name|'messages'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'exceptionType'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'messages'
op|'['
name|'i'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getMessage
dedent|''
name|'def'
name|'getMessage'
op|'('
name|'self'
op|','
name|'i'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
name|'self'
op|'.'
name|'messages'
op|'['
name|'i'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getUidl
dedent|''
name|'def'
name|'getUidl'
op|'('
name|'self'
op|','
name|'i'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'i'
op|'>='
name|'len'
op|'('
name|'self'
op|'.'
name|'messages'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'exceptionType'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'str'
op|'('
name|'i'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deleteMessage
dedent|''
name|'def'
name|'deleteMessage'
op|'('
name|'self'
op|','
name|'i'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'messages'
op|'['
name|'i'
op|']'
op|'='
string|"''"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AnotherPOP3TestCase
dedent|''
dedent|''
name|'class'
name|'AnotherPOP3TestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|runTest
indent|'    '
name|'def'
name|'runTest'
op|'('
name|'self'
op|','
name|'lines'
op|','
name|'expectedOutput'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dummy'
op|'='
name|'DummyPOP3'
op|'('
op|')'
newline|'\n'
name|'client'
op|'='
name|'LineSendingProtocol'
op|'('
name|'lines'
op|')'
newline|'\n'
name|'d'
op|'='
name|'loopback'
op|'.'
name|'loopbackAsync'
op|'('
name|'dummy'
op|','
name|'client'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbRunTest'
op|','
name|'client'
op|','
name|'dummy'
op|','
name|'expectedOutput'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbRunTest
dedent|''
name|'def'
name|'_cbRunTest'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'client'
op|','
name|'dummy'
op|','
name|'expectedOutput'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
string|"'\\r\\n'"
op|'.'
name|'join'
op|'('
name|'expectedOutput'
op|')'
op|','
nl|'\n'
string|"'\\r\\n'"
op|'.'
name|'join'
op|'('
name|'client'
op|'.'
name|'response'
op|')'
op|')'
newline|'\n'
name|'dummy'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'Exception'
op|'('
string|'"Test harness disconnect"'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'ignored'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buffer
dedent|''
name|'def'
name|'test_buffer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a lot of different POP3 commands in an extremely pipelined\n        scenario.\n\n        This test may cover legitimate behavior, but the intent and\n        granularity are not very good.  It would likely be an improvement to\n        split it into a number of smaller, more focused tests.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'runTest'
op|'('
nl|'\n'
op|'['
string|'"APOP moshez dummy"'
op|','
nl|'\n'
string|'"LIST"'
op|','
nl|'\n'
string|'"UIDL"'
op|','
nl|'\n'
string|'"RETR 1"'
op|','
nl|'\n'
string|'"RETR 2"'
op|','
nl|'\n'
string|'"DELE 1"'
op|','
nl|'\n'
string|'"RETR 1"'
op|','
nl|'\n'
string|'"QUIT"'
op|']'
op|','
nl|'\n'
op|'['
string|"'+OK <moshez>'"
op|','
nl|'\n'
string|"'+OK Authentication succeeded'"
op|','
nl|'\n'
string|"'+OK 1'"
op|','
nl|'\n'
string|"'1 44'"
op|','
nl|'\n'
string|"'.'"
op|','
nl|'\n'
string|"'+OK '"
op|','
nl|'\n'
string|"'1 0'"
op|','
nl|'\n'
string|"'.'"
op|','
nl|'\n'
string|"'+OK 44'"
op|','
nl|'\n'
string|"'From: moshe'"
op|','
nl|'\n'
string|"'To: moshe'"
op|','
nl|'\n'
string|"''"
op|','
nl|'\n'
string|"'How are you, friend?'"
op|','
nl|'\n'
string|"'.'"
op|','
nl|'\n'
string|"'-ERR Bad message number argument'"
op|','
nl|'\n'
string|"'+OK '"
op|','
nl|'\n'
string|"'-ERR message deleted'"
op|','
nl|'\n'
string|"'+OK '"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noop
dedent|''
name|'def'
name|'test_noop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the no-op command.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'runTest'
op|'('
nl|'\n'
op|'['
string|"'APOP spiv dummy'"
op|','
nl|'\n'
string|"'NOOP'"
op|','
nl|'\n'
string|"'QUIT'"
op|']'
op|','
nl|'\n'
op|'['
string|"'+OK <moshez>'"
op|','
nl|'\n'
string|"'+OK Authentication succeeded'"
op|','
nl|'\n'
string|"'+OK '"
op|','
nl|'\n'
string|"'+OK '"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testAuthListing
dedent|''
name|'def'
name|'testAuthListing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'DummyPOP3'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'internet'
op|'.'
name|'protocol'
op|'.'
name|'Factory'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'.'
name|'challengers'
op|'='
op|'{'
string|"'Auth1'"
op|':'
name|'None'
op|','
string|"'secondAuth'"
op|':'
name|'None'
op|','
string|"'authLast'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'client'
op|'='
name|'LineSendingProtocol'
op|'('
op|'['
nl|'\n'
string|'"AUTH"'
op|','
nl|'\n'
string|'"QUIT"'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'loopback'
op|'.'
name|'loopbackAsync'
op|'('
name|'p'
op|','
name|'client'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestAuthListing'
op|','
name|'client'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestAuthListing
dedent|''
name|'def'
name|'_cbTestAuthListing'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'client'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'client'
op|'.'
name|'response'
op|'['
number|'1'
op|']'
op|'.'
name|'startswith'
op|'('
string|"'+OK'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'client'
op|'.'
name|'response'
op|'['
number|'2'
op|':'
number|'6'
op|']'
op|','
nl|'\n'
op|'['
string|'"AUTH1"'
op|','
string|'"SECONDAUTH"'
op|','
string|'"AUTHLAST"'
op|','
string|'"."'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testIllegalPASS
dedent|''
name|'def'
name|'testIllegalPASS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dummy'
op|'='
name|'DummyPOP3'
op|'('
op|')'
newline|'\n'
name|'client'
op|'='
name|'LineSendingProtocol'
op|'('
op|'['
nl|'\n'
string|'"PASS fooz"'
op|','
nl|'\n'
string|'"QUIT"'
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'d'
op|'='
name|'loopback'
op|'.'
name|'loopbackAsync'
op|'('
name|'dummy'
op|','
name|'client'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestIllegalPASS'
op|','
name|'client'
op|','
name|'dummy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestIllegalPASS
dedent|''
name|'def'
name|'_cbTestIllegalPASS'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'client'
op|','
name|'dummy'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'expected_output'
op|'='
string|"'+OK <moshez>\\r\\n-ERR USER required before PASS\\r\\n+OK \\r\\n'"
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'expected_output'
op|','
string|"'\\r\\n'"
op|'.'
name|'join'
op|'('
name|'client'
op|'.'
name|'response'
op|')'
op|'+'
string|"'\\r\\n'"
op|')'
newline|'\n'
name|'dummy'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'Exception'
op|'('
string|'"Test harness disconnect"'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEmptyPASS
dedent|''
name|'def'
name|'testEmptyPASS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dummy'
op|'='
name|'DummyPOP3'
op|'('
op|')'
newline|'\n'
name|'client'
op|'='
name|'LineSendingProtocol'
op|'('
op|'['
nl|'\n'
string|'"PASS "'
op|','
nl|'\n'
string|'"QUIT"'
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'d'
op|'='
name|'loopback'
op|'.'
name|'loopbackAsync'
op|'('
name|'dummy'
op|','
name|'client'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestEmptyPASS'
op|','
name|'client'
op|','
name|'dummy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbTestEmptyPASS
dedent|''
name|'def'
name|'_cbTestEmptyPASS'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'client'
op|','
name|'dummy'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'expected_output'
op|'='
string|"'+OK <moshez>\\r\\n-ERR USER required before PASS\\r\\n+OK \\r\\n'"
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'expected_output'
op|','
string|"'\\r\\n'"
op|'.'
name|'join'
op|'('
name|'client'
op|'.'
name|'response'
op|')'
op|'+'
string|"'\\r\\n'"
op|')'
newline|'\n'
name|'dummy'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'Exception'
op|'('
string|'"Test harness disconnect"'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestServerFactory
dedent|''
dedent|''
name|'class'
name|'TestServerFactory'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'pop3'
op|'.'
name|'IServerFactory'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cap_IMPLEMENTATION
name|'def'
name|'cap_IMPLEMENTATION'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"Test Implementation String"'
newline|'\n'
nl|'\n'
DECL|member|cap_EXPIRE
dedent|''
name|'def'
name|'cap_EXPIRE'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'60'
newline|'\n'
nl|'\n'
DECL|variable|challengers
dedent|''
name|'challengers'
op|'='
op|'{'
string|'"SCHEME_1"'
op|':'
name|'None'
op|','
string|'"SCHEME_2"'
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|cap_LOGIN_DELAY
name|'def'
name|'cap_LOGIN_DELAY'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'120'
newline|'\n'
nl|'\n'
DECL|variable|pue
dedent|''
name|'pue'
op|'='
name|'True'
newline|'\n'
DECL|member|perUserExpiration
name|'def'
name|'perUserExpiration'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'pue'
newline|'\n'
nl|'\n'
DECL|variable|puld
dedent|''
name|'puld'
op|'='
name|'True'
newline|'\n'
DECL|member|perUserLoginDelay
name|'def'
name|'perUserLoginDelay'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'puld'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestMailbox
dedent|''
dedent|''
name|'class'
name|'TestMailbox'
op|':'
newline|'\n'
DECL|variable|loginDelay
indent|'    '
name|'loginDelay'
op|'='
number|'100'
newline|'\n'
DECL|variable|messageExpiration
name|'messageExpiration'
op|'='
number|'25'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CapabilityTestCase
dedent|''
name|'class'
name|'CapabilityTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'pop3'
op|'.'
name|'POP3'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'TestServerFactory'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'transport'
op|'='
name|'internet'
op|'.'
name|'protocol'
op|'.'
name|'FileWrapper'
op|'('
name|'s'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'do_CAPA'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'caps'
op|'='
name|'p'
op|'.'
name|'listCapabilities'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pcaps'
op|'='
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'s'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'mbox'
op|'='
name|'TestMailbox'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'transport'
op|'='
name|'internet'
op|'.'
name|'protocol'
op|'.'
name|'FileWrapper'
op|'('
name|'s'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'do_CAPA'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'lpcaps'
op|'='
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'Exception'
op|'('
string|'"Test harness disconnect"'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|contained
dedent|''
name|'def'
name|'contained'
op|'('
name|'self'
op|','
name|'s'
op|','
op|'*'
name|'caps'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'c'
name|'in'
name|'caps'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'s'
op|','
name|'c'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUIDL
dedent|''
dedent|''
name|'def'
name|'testUIDL'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'contained'
op|'('
string|'"UIDL"'
op|','
name|'self'
op|'.'
name|'caps'
op|','
name|'self'
op|'.'
name|'pcaps'
op|','
name|'self'
op|'.'
name|'lpcaps'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testTOP
dedent|''
name|'def'
name|'testTOP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'contained'
op|'('
string|'"TOP"'
op|','
name|'self'
op|'.'
name|'caps'
op|','
name|'self'
op|'.'
name|'pcaps'
op|','
name|'self'
op|'.'
name|'lpcaps'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUSER
dedent|''
name|'def'
name|'testUSER'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'contained'
op|'('
string|'"USER"'
op|','
name|'self'
op|'.'
name|'caps'
op|','
name|'self'
op|'.'
name|'pcaps'
op|','
name|'self'
op|'.'
name|'lpcaps'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEXPIRE
dedent|''
name|'def'
name|'testEXPIRE'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'contained'
op|'('
string|'"EXPIRE 60 USER"'
op|','
name|'self'
op|'.'
name|'caps'
op|','
name|'self'
op|'.'
name|'pcaps'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'contained'
op|'('
string|'"EXPIRE 25"'
op|','
name|'self'
op|'.'
name|'lpcaps'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testIMPLEMENTATION
dedent|''
name|'def'
name|'testIMPLEMENTATION'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'contained'
op|'('
nl|'\n'
string|'"IMPLEMENTATION Test Implementation String"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'caps'
op|','
name|'self'
op|'.'
name|'pcaps'
op|','
name|'self'
op|'.'
name|'lpcaps'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSASL
dedent|''
name|'def'
name|'testSASL'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'contained'
op|'('
nl|'\n'
string|'"SASL SCHEME_1 SCHEME_2"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'caps'
op|','
name|'self'
op|'.'
name|'pcaps'
op|','
name|'self'
op|'.'
name|'lpcaps'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLOGIN_DELAY
dedent|''
name|'def'
name|'testLOGIN_DELAY'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'contained'
op|'('
string|'"LOGIN-DELAY 120 USER"'
op|','
name|'self'
op|'.'
name|'caps'
op|','
name|'self'
op|'.'
name|'pcaps'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"LOGIN-DELAY 100"'
op|','
name|'self'
op|'.'
name|'lpcaps'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|GlobalCapabilitiesTestCase
dedent|''
dedent|''
name|'class'
name|'GlobalCapabilitiesTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'pop3'
op|'.'
name|'POP3'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'TestServerFactory'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'.'
name|'pue'
op|'='
name|'p'
op|'.'
name|'factory'
op|'.'
name|'puld'
op|'='
name|'False'
newline|'\n'
name|'p'
op|'.'
name|'transport'
op|'='
name|'internet'
op|'.'
name|'protocol'
op|'.'
name|'FileWrapper'
op|'('
name|'s'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'do_CAPA'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'caps'
op|'='
name|'p'
op|'.'
name|'listCapabilities'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pcaps'
op|'='
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'s'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'mbox'
op|'='
name|'TestMailbox'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'transport'
op|'='
name|'internet'
op|'.'
name|'protocol'
op|'.'
name|'FileWrapper'
op|'('
name|'s'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'do_CAPA'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'lpcaps'
op|'='
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'Exception'
op|'('
string|'"Test harness disconnect"'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|contained
dedent|''
name|'def'
name|'contained'
op|'('
name|'self'
op|','
name|'s'
op|','
op|'*'
name|'caps'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'c'
name|'in'
name|'caps'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'s'
op|','
name|'c'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEXPIRE
dedent|''
dedent|''
name|'def'
name|'testEXPIRE'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'contained'
op|'('
string|'"EXPIRE 60"'
op|','
name|'self'
op|'.'
name|'caps'
op|','
name|'self'
op|'.'
name|'pcaps'
op|','
name|'self'
op|'.'
name|'lpcaps'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLOGIN_DELAY
dedent|''
name|'def'
name|'testLOGIN_DELAY'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'contained'
op|'('
string|'"LOGIN-DELAY 120"'
op|','
name|'self'
op|'.'
name|'caps'
op|','
name|'self'
op|'.'
name|'pcaps'
op|','
name|'self'
op|'.'
name|'lpcaps'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestRealm
dedent|''
dedent|''
name|'class'
name|'TestRealm'
op|':'
newline|'\n'
DECL|member|requestAvatar
indent|'    '
name|'def'
name|'requestAvatar'
op|'('
name|'self'
op|','
name|'avatarId'
op|','
name|'mind'
op|','
op|'*'
name|'interfaces'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'avatarId'
op|'=='
string|"'testuser'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'pop3'
op|'.'
name|'IMailbox'
op|','
name|'DummyMailbox'
op|'('
name|'ValueError'
op|')'
op|','
name|'lambda'
op|':'
name|'None'
newline|'\n'
dedent|''
name|'assert'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SASLTestCase
dedent|''
dedent|''
name|'class'
name|'SASLTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testValidLogin
indent|'    '
name|'def'
name|'testValidLogin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'pop3'
op|'.'
name|'POP3'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'TestServerFactory'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'.'
name|'challengers'
op|'='
op|'{'
string|"'CRAM-MD5'"
op|':'
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'CramMD5Credentials'
op|'}'
newline|'\n'
name|'p'
op|'.'
name|'portal'
op|'='
name|'cred'
op|'.'
name|'portal'
op|'.'
name|'Portal'
op|'('
name|'TestRealm'
op|'('
op|')'
op|')'
newline|'\n'
name|'ch'
op|'='
name|'cred'
op|'.'
name|'checkers'
op|'.'
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
op|')'
newline|'\n'
name|'ch'
op|'.'
name|'addUser'
op|'('
string|"'testuser'"
op|','
string|"'testpassword'"
op|')'
newline|'\n'
name|'p'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'ch'
op|')'
newline|'\n'
nl|'\n'
name|'s'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'transport'
op|'='
name|'internet'
op|'.'
name|'protocol'
op|'.'
name|'FileWrapper'
op|'('
name|'s'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"CAPA"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'find'
op|'('
string|'"SASL CRAM-MD5"'
op|')'
op|'>='
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"AUTH CRAM-MD5"'
op|')'
newline|'\n'
name|'chal'
op|'='
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'2'
op|':'
op|']'
newline|'\n'
name|'chal'
op|'='
name|'base64'
op|'.'
name|'decodestring'
op|'('
name|'chal'
op|')'
newline|'\n'
name|'response'
op|'='
name|'hmac'
op|'.'
name|'HMAC'
op|'('
string|"'testpassword'"
op|','
name|'chal'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
name|'base64'
op|'.'
name|'encodestring'
op|'('
string|"'testuser '"
op|'+'
name|'response'
op|')'
op|'.'
name|'rstrip'
op|'('
string|"'\\n'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'p'
op|'.'
name|'mbox'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'find'
op|'('
string|'"+OK"'
op|')'
op|'>='
number|'0'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'Exception'
op|'('
string|'"Test harness disconnect"'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommandMixin
dedent|''
dedent|''
name|'class'
name|'CommandMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for all the commands a POP3 server is allowed to receive.\n    """'
newline|'\n'
nl|'\n'
name|'extraMessage'
op|'='
string|"'''\\\nFrom: guy\nTo: fellow\n\nMore message text for you.\n'''"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a POP3 server protocol instance hooked up to a simple mailbox and\n        a transport that buffers output to a StringIO.\n        """'
newline|'\n'
name|'p'
op|'='
name|'pop3'
op|'.'
name|'POP3'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'mbox'
op|'='
name|'self'
op|'.'
name|'mailboxType'
op|'('
name|'self'
op|'.'
name|'exceptionType'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'schedule'
op|'='
name|'list'
newline|'\n'
name|'self'
op|'.'
name|'pop3Server'
op|'='
name|'p'
newline|'\n'
nl|'\n'
name|'s'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'transport'
op|'='
name|'internet'
op|'.'
name|'protocol'
op|'.'
name|'FileWrapper'
op|'('
name|'s'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pop3Transport'
op|'='
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Disconnect the server protocol so it can clean up anything it might\n        need to clean up.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'pop3Server'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'Exception'
op|'('
string|'"Test harness disconnect"'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_flush
dedent|''
name|'def'
name|'_flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Do some of the things that the reactor would take care of, if the\n        reactor were actually running.\n        """'
newline|'\n'
comment|'# Oh man FileWrapper is pooh.'
nl|'\n'
name|'self'
op|'.'
name|'pop3Server'
op|'.'
name|'transport'
op|'.'
name|'_checkProducer'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testLIST
dedent|''
name|'def'
name|'testLIST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the two forms of list: with a message index number, which should\n        return a short-form response, and without a message index number, which\n        should return a long-form response, one line per message.\n        """'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'pop3Server'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'pop3Transport'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"LIST 1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"+OK 1 44\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"LIST"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"+OK 1\\r\\n1 44\\r\\n.\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testLISTWithBadArgument
dedent|''
name|'def'
name|'testLISTWithBadArgument'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that non-integers and out-of-bound integers produce appropriate\n        error responses.\n        """'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'pop3Server'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'pop3Transport'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"LIST a"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"-ERR Invalid message-number: \'a\'\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"LIST 0"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"-ERR Invalid message-number: 0\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"LIST 2"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"-ERR Invalid message-number: 2\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testUIDL
dedent|''
name|'def'
name|'testUIDL'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the two forms of the UIDL command.  These are just like the two\n        forms of the LIST command.\n        """'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'pop3Server'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'pop3Transport'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"UIDL 1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"+OK 0\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"UIDL"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"+OK \\r\\n1 0\\r\\n.\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testUIDLWithBadArgument
dedent|''
name|'def'
name|'testUIDLWithBadArgument'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that UIDL with a non-integer or an out-of-bounds integer produces\n        the appropriate error response.\n        """'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'pop3Server'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'pop3Transport'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"UIDL a"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"-ERR Bad message number argument\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"UIDL 0"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"-ERR Bad message number argument\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"UIDL 2"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"-ERR Bad message number argument\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testSTAT
dedent|''
name|'def'
name|'testSTAT'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the single form of the STAT command, which returns a short-form\n        response of the number of messages in the mailbox and their total size.\n        """'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'pop3Server'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'pop3Transport'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"STAT"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"+OK 1 44\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testRETR
dedent|''
name|'def'
name|'testRETR'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test downloading a message.\n        """'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'pop3Server'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'pop3Transport'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"RETR 1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"+OK 44\\r\\n"'
nl|'\n'
string|'"From: moshe\\r\\n"'
nl|'\n'
string|'"To: moshe\\r\\n"'
nl|'\n'
string|'"\\r\\n"'
nl|'\n'
string|'"How are you, friend?\\r\\n"'
nl|'\n'
string|'".\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testRETRWithBadArgument
dedent|''
name|'def'
name|'testRETRWithBadArgument'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that trying to download a message with a bad argument, either not\n        an integer or an out-of-bounds integer, fails with the appropriate\n        error response.\n        """'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'pop3Server'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'pop3Transport'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"RETR a"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"-ERR Bad message number argument\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"RETR 0"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"-ERR Bad message number argument\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"RETR 2"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"-ERR Bad message number argument\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testTOP
dedent|''
name|'def'
name|'testTOP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test downloading the headers and part of the body of a message.\n        """'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'pop3Server'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'pop3Transport'
newline|'\n'
name|'p'
op|'.'
name|'mbox'
op|'.'
name|'messages'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'extraMessage'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"TOP 1 0"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"+OK Top of message follows\\r\\n"'
nl|'\n'
string|'"From: moshe\\r\\n"'
nl|'\n'
string|'"To: moshe\\r\\n"'
nl|'\n'
string|'"\\r\\n"'
nl|'\n'
string|'".\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testTOPWithBadArgument
dedent|''
name|'def'
name|'testTOPWithBadArgument'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that trying to download a message with a bad argument, either a\n        message number which isn\'t an integer or is an out-of-bounds integer or\n        a number of lines which isn\'t an integer or is a negative integer,\n        fails with the appropriate error response.\n        """'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'pop3Server'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'pop3Transport'
newline|'\n'
name|'p'
op|'.'
name|'mbox'
op|'.'
name|'messages'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'extraMessage'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"TOP 1 a"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"-ERR Bad line count argument\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"TOP 1 -1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"-ERR Bad line count argument\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"TOP a 1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"-ERR Bad message number argument\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"TOP 0 1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"-ERR Bad message number argument\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|'"TOP 3 1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"-ERR Bad message number argument\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testLAST
dedent|''
name|'def'
name|'testLAST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the exceedingly pointless LAST command, which tells you the\n        highest message index which you have already downloaded.\n        """'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'pop3Server'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'pop3Transport'
newline|'\n'
name|'p'
op|'.'
name|'mbox'
op|'.'
name|'messages'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'extraMessage'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|"'LAST'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"+OK 0\\r\\n"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testRetrieveUpdatesHighest
dedent|''
name|'def'
name|'testRetrieveUpdatesHighest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that issuing a RETR command updates the LAST response.\n        """'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'pop3Server'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'pop3Transport'
newline|'\n'
name|'p'
op|'.'
name|'mbox'
op|'.'
name|'messages'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'extraMessage'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|"'RETR 2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_flush'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|"'LAST'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|"'+OK 2\\r\\n'"
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testTopUpdatesHighest
dedent|''
name|'def'
name|'testTopUpdatesHighest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that issuing a TOP command updates the LAST response.\n        """'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'pop3Server'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'pop3Transport'
newline|'\n'
name|'p'
op|'.'
name|'mbox'
op|'.'
name|'messages'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'extraMessage'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|"'TOP 2 10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_flush'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|"'LAST'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|"'+OK 2\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testHighestOnlyProgresses
dedent|''
name|'def'
name|'testHighestOnlyProgresses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that downloading a message with a smaller index than the current\n        LAST response doesn\'t change the LAST response.\n        """'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'pop3Server'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'pop3Transport'
newline|'\n'
name|'p'
op|'.'
name|'mbox'
op|'.'
name|'messages'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'extraMessage'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|"'RETR 2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_flush'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|"'TOP 1 10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_flush'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|"'LAST'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|"'+OK 2\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testResetClearsHighest
dedent|''
name|'def'
name|'testResetClearsHighest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that issuing RSET changes the LAST response to 0.\n        """'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'pop3Server'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'pop3Transport'
newline|'\n'
name|'p'
op|'.'
name|'mbox'
op|'.'
name|'messages'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'extraMessage'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|"'RETR 2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_flush'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|"'RSET'"
op|')'
newline|'\n'
name|'s'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'lineReceived'
op|'('
string|"'LAST'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|"'+OK 0\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_listMessageDeprecation
dedent|''
dedent|''
name|'_listMessageDeprecation'
op|'='
op|'('
nl|'\n'
string|'"twisted.mail.pop3.IMailbox.listMessages may not "'
nl|'\n'
string|'"raise IndexError for out-of-bounds message numbers: "'
nl|'\n'
string|'"raise ValueError instead."'
op|')'
newline|'\n'
DECL|variable|_listMessageSuppression
name|'_listMessageSuppression'
op|'='
name|'util'
op|'.'
name|'suppress'
op|'('
nl|'\n'
DECL|variable|message
name|'message'
op|'='
name|'_listMessageDeprecation'
op|','
nl|'\n'
DECL|variable|category
name|'category'
op|'='
name|'PendingDeprecationWarning'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_getUidlDeprecation
name|'_getUidlDeprecation'
op|'='
op|'('
nl|'\n'
string|'"twisted.mail.pop3.IMailbox.getUidl may not "'
nl|'\n'
string|'"raise IndexError for out-of-bounds message numbers: "'
nl|'\n'
string|'"raise ValueError instead."'
op|')'
newline|'\n'
DECL|variable|_getUidlSuppression
name|'_getUidlSuppression'
op|'='
name|'util'
op|'.'
name|'suppress'
op|'('
nl|'\n'
DECL|variable|message
name|'message'
op|'='
name|'_getUidlDeprecation'
op|','
nl|'\n'
DECL|variable|category
name|'category'
op|'='
name|'PendingDeprecationWarning'
op|')'
newline|'\n'
nl|'\n'
DECL|class|IndexErrorCommandTestCase
name|'class'
name|'IndexErrorCommandTestCase'
op|'('
name|'CommandMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Run all of the command tests against a mailbox which raises IndexError\n    when an out of bounds request is made.  This behavior will be deprecated\n    shortly and then removed.\n    """'
newline|'\n'
DECL|variable|exceptionType
name|'exceptionType'
op|'='
name|'IndexError'
newline|'\n'
DECL|variable|mailboxType
name|'mailboxType'
op|'='
name|'DummyMailbox'
newline|'\n'
nl|'\n'
DECL|member|testLISTWithBadArgument
name|'def'
name|'testLISTWithBadArgument'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'CommandMixin'
op|'.'
name|'testLISTWithBadArgument'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'testLISTWithBadArgument'
op|'.'
name|'suppress'
op|'='
op|'['
name|'_listMessageSuppression'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testUIDLWithBadArgument
name|'def'
name|'testUIDLWithBadArgument'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'CommandMixin'
op|'.'
name|'testUIDLWithBadArgument'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'testUIDLWithBadArgument'
op|'.'
name|'suppress'
op|'='
op|'['
name|'_getUidlSuppression'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testTOPWithBadArgument
name|'def'
name|'testTOPWithBadArgument'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'CommandMixin'
op|'.'
name|'testTOPWithBadArgument'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'testTOPWithBadArgument'
op|'.'
name|'suppress'
op|'='
op|'['
name|'_listMessageSuppression'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testRETRWithBadArgument
name|'def'
name|'testRETRWithBadArgument'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'CommandMixin'
op|'.'
name|'testRETRWithBadArgument'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'testRETRWithBadArgument'
op|'.'
name|'suppress'
op|'='
op|'['
name|'_listMessageSuppression'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ValueErrorCommandTestCase
dedent|''
name|'class'
name|'ValueErrorCommandTestCase'
op|'('
name|'CommandMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Run all of the command tests against a mailbox which raises ValueError\n    when an out of bounds request is made.  This is the correct behavior and\n    after support for mailboxes which raise IndexError is removed, this will\n    become just C{CommandTestCase}.\n    """'
newline|'\n'
DECL|variable|exceptionType
name|'exceptionType'
op|'='
name|'ValueError'
newline|'\n'
DECL|variable|mailboxType
name|'mailboxType'
op|'='
name|'DummyMailbox'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SyncDeferredMailbox
dedent|''
name|'class'
name|'SyncDeferredMailbox'
op|'('
name|'DummyMailbox'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Mailbox which has a listMessages implementation which returns a Deferred\n    which has already fired.\n    """'
newline|'\n'
DECL|member|listMessages
name|'def'
name|'listMessages'
op|'('
name|'self'
op|','
name|'n'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'DummyMailbox'
op|'.'
name|'listMessages'
op|'('
name|'self'
op|','
name|'n'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IndexErrorSyncDeferredCommandTestCase
dedent|''
dedent|''
name|'class'
name|'IndexErrorSyncDeferredCommandTestCase'
op|'('
name|'IndexErrorCommandTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Run all of the L{IndexErrorCommandTestCase} tests with a\n    synchronous-Deferred returning IMailbox implementation.\n    """'
newline|'\n'
DECL|variable|mailboxType
name|'mailboxType'
op|'='
name|'SyncDeferredMailbox'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ValueErrorSyncDeferredCommandTestCase
dedent|''
name|'class'
name|'ValueErrorSyncDeferredCommandTestCase'
op|'('
name|'ValueErrorCommandTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Run all of the L{ValueErrorCommandTestCase} tests with a\n    synchronous-Deferred returning IMailbox implementation.\n    """'
newline|'\n'
DECL|variable|mailboxType
name|'mailboxType'
op|'='
name|'SyncDeferredMailbox'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AsyncDeferredMailbox
dedent|''
name|'class'
name|'AsyncDeferredMailbox'
op|'('
name|'DummyMailbox'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Mailbox which has a listMessages implementation which returns a Deferred\n    which has not yet fired.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'waiting'
op|'='
op|'['
op|']'
newline|'\n'
name|'DummyMailbox'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|listMessages
dedent|''
name|'def'
name|'listMessages'
op|'('
name|'self'
op|','
name|'n'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
comment|'# See AsyncDeferredMailbox._flush'
nl|'\n'
name|'self'
op|'.'
name|'waiting'
op|'.'
name|'append'
op|'('
op|'('
name|'d'
op|','
name|'DummyMailbox'
op|'.'
name|'listMessages'
op|'('
name|'self'
op|','
name|'n'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IndexErrorAsyncDeferredCommandTestCase
dedent|''
dedent|''
name|'class'
name|'IndexErrorAsyncDeferredCommandTestCase'
op|'('
name|'IndexErrorCommandTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Run all of the L{IndexErrorCommandTestCase} tests with an asynchronous-Deferred\n    returning IMailbox implementation.\n    """'
newline|'\n'
DECL|variable|mailboxType
name|'mailboxType'
op|'='
name|'AsyncDeferredMailbox'
newline|'\n'
nl|'\n'
DECL|member|_flush
name|'def'
name|'_flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fire whatever Deferreds we\'ve built up in our mailbox.\n        """'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'pop3Server'
op|'.'
name|'mbox'
op|'.'
name|'waiting'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'a'
op|'='
name|'self'
op|'.'
name|'pop3Server'
op|'.'
name|'mbox'
op|'.'
name|'waiting'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'a'
op|')'
newline|'\n'
dedent|''
name|'IndexErrorCommandTestCase'
op|'.'
name|'_flush'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ValueErrorAsyncDeferredCommandTestCase
dedent|''
dedent|''
name|'class'
name|'ValueErrorAsyncDeferredCommandTestCase'
op|'('
name|'ValueErrorCommandTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Run all of the L{IndexErrorCommandTestCase} tests with an asynchronous-Deferred\n    returning IMailbox implementation.\n    """'
newline|'\n'
DECL|variable|mailboxType
name|'mailboxType'
op|'='
name|'AsyncDeferredMailbox'
newline|'\n'
nl|'\n'
DECL|member|_flush
name|'def'
name|'_flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fire whatever Deferreds we\'ve built up in our mailbox.\n        """'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'pop3Server'
op|'.'
name|'mbox'
op|'.'
name|'waiting'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'a'
op|'='
name|'self'
op|'.'
name|'pop3Server'
op|'.'
name|'mbox'
op|'.'
name|'waiting'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'a'
op|')'
newline|'\n'
dedent|''
name|'ValueErrorCommandTestCase'
op|'.'
name|'_flush'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|class|POP3MiscTestCase
dedent|''
dedent|''
name|'class'
name|'POP3MiscTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Miscellaneous tests more to do with module/package structure than\n    anything to do with the Post Office Protocol.\n    """'
newline|'\n'
DECL|member|test_all
name|'def'
name|'test_all'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This test checks that all names listed in\n        twisted.mail.pop3.__all__ are actually present in the module.\n        """'
newline|'\n'
name|'mod'
op|'='
name|'twisted'
op|'.'
name|'mail'
op|'.'
name|'pop3'
newline|'\n'
name|'for'
name|'attr'
name|'in'
name|'mod'
op|'.'
name|'__all__'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'hasattr'
op|'('
name|'mod'
op|','
name|'attr'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTest cases for twisted.mail.smtp module.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'LineLog'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
op|','
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
op|','
name|'loopback'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'mail'
name|'import'
name|'smtp'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'protocol'
op|','
name|'reactor'
op|','
name|'interfaces'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'address'
op|','
name|'error'
op|','
name|'task'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'StringTransport'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
name|'import'
name|'cred'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'error'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'portal'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'checkers'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'portal'
name|'import'
name|'IRealm'
op|','
name|'Portal'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'checkers'
name|'import'
name|'ICredentialsChecker'
op|','
name|'AllowAnonymousAccess'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'IAnonymous'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'error'
name|'import'
name|'UnauthorizedLogin'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'mail'
name|'import'
name|'imap4'
newline|'\n'
nl|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'ssl_helpers'
name|'import'
name|'ClientTLSContext'
op|','
name|'ServerTLSContext'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'ClientTLSContext'
op|'='
name|'ServerTLSContext'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'import'
name|'re'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'StringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|spameater
dedent|''
name|'def'
name|'spameater'
op|'('
op|'*'
name|'spam'
op|','
op|'**'
name|'eggs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BrokenMessage
dedent|''
name|'class'
name|'BrokenMessage'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{BrokenMessage} is an L{IMessage} which raises an unexpected exception\n    from its C{eomReceived} method.  This is useful for creating a server which\n    can be used to test client retry behavior.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'smtp'
op|'.'
name|'IMessage'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|eomReceived
dedent|''
name|'def'
name|'eomReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Some problem, delivery is failing."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyMessage
dedent|''
dedent|''
name|'class'
name|'DummyMessage'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{BrokenMessage} is an L{IMessage} which saves the message delivered to it\n    to its domain object.\n\n    @ivar domain: A L{DummyDomain} which will be used to store the message once\n        it is received.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'domain'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'domain'
op|'='
name|'domain'
newline|'\n'
name|'self'
op|'.'
name|'user'
op|'='
name|'user'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
comment|'# Throw away the generated Received: header'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'re'
op|'.'
name|'match'
op|'('
string|"'Received: From yyy.com \\(\\[.*\\]\\) by localhost;'"
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'buffer'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|eomReceived
dedent|''
dedent|''
name|'def'
name|'eomReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'message'
op|'='
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'buffer'
op|')'
op|'+'
string|"'\\n'"
newline|'\n'
name|'self'
op|'.'
name|'domain'
op|'.'
name|'messages'
op|'['
name|'self'
op|'.'
name|'user'
op|'.'
name|'dest'
op|'.'
name|'local'
op|']'
op|'.'
name|'append'
op|'('
name|'message'
op|')'
newline|'\n'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'callback'
op|'('
string|'"saved"'
op|')'
newline|'\n'
name|'return'
name|'deferred'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyDomain
dedent|''
dedent|''
name|'class'
name|'DummyDomain'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{DummyDomain} is an L{IDomain} which keeps track of messages delivered to\n    it in memory.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'names'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'messages'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'messages'
op|'['
name|'name'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|exists
dedent|''
dedent|''
name|'def'
name|'exists'
op|'('
name|'self'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'user'
op|'.'
name|'dest'
op|'.'
name|'local'
name|'in'
name|'self'
op|'.'
name|'messages'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'lambda'
op|':'
name|'self'
op|'.'
name|'startMessage'
op|'('
name|'user'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'smtp'
op|'.'
name|'SMTPBadRcpt'
op|'('
name|'user'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|startMessage
dedent|''
name|'def'
name|'startMessage'
op|'('
name|'self'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'DummyMessage'
op|'('
name|'self'
op|','
name|'user'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SMTPTestCase
dedent|''
dedent|''
name|'class'
name|'SMTPTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'messages'
op|'='
op|'['
op|'('
string|"'foo@bar.com'"
op|','
op|'['
string|"'foo@baz.com'"
op|','
string|"'qux@baz.com'"
op|']'
op|','
string|"'''\\\nSubject: urgent\\015\n\\015\nSomeone set up us the bomb!\\015\n'''"
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|mbox
name|'mbox'
op|'='
op|'{'
string|"'foo'"
op|':'
op|'['
string|"'Subject: urgent\\n\\nSomeone set up us the bomb!\\n'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create an in-memory mail domain to which messages may be delivered by\n        tests and create a factory and transport to do the delivering.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'='
name|'smtp'
op|'.'
name|'SMTPFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'domains'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'domains'
op|'['
string|"'baz.com'"
op|']'
op|'='
name|'DummyDomain'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testMessages
dedent|''
name|'def'
name|'testMessages'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'mail'
name|'import'
name|'protocols'
newline|'\n'
name|'protocol'
op|'='
name|'protocols'
op|'.'
name|'DomainSMTP'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'service'
op|'='
name|'self'
op|'.'
name|'factory'
newline|'\n'
name|'protocol'
op|'.'
name|'factory'
op|'='
name|'self'
op|'.'
name|'factory'
newline|'\n'
name|'protocol'
op|'.'
name|'receivedHeader'
op|'='
name|'spameater'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'lineReceived'
op|'('
string|"'HELO yyy.com'"
op|')'
newline|'\n'
name|'for'
name|'message'
name|'in'
name|'self'
op|'.'
name|'messages'
op|':'
newline|'\n'
indent|'            '
name|'protocol'
op|'.'
name|'lineReceived'
op|'('
string|"'MAIL FROM:<%s>'"
op|'%'
name|'message'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'for'
name|'target'
name|'in'
name|'message'
op|'['
number|'1'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'protocol'
op|'.'
name|'lineReceived'
op|'('
string|"'RCPT TO:<%s>'"
op|'%'
name|'target'
op|')'
newline|'\n'
dedent|''
name|'protocol'
op|'.'
name|'lineReceived'
op|'('
string|"'DATA'"
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
name|'message'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'lineReceived'
op|'('
string|"'.'"
op|')'
newline|'\n'
dedent|''
name|'protocol'
op|'.'
name|'lineReceived'
op|'('
string|"'QUIT'"
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'mbox'
op|'!='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'domains'
op|'['
string|"'baz.com'"
op|']'
op|'.'
name|'messages'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'AssertionError'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'domains'
op|'['
string|"'baz.com'"
op|']'
op|'.'
name|'messages'
op|')'
newline|'\n'
dedent|''
name|'protocol'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'testMessages'
op|'.'
name|'suppress'
op|'='
op|'['
name|'util'
op|'.'
name|'suppress'
op|'('
name|'message'
op|'='
string|"'DomainSMTP'"
op|','
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'mail'
op|'='
string|"'''\\\nSubject: hello\n\nGoodbye\n'''"
newline|'\n'
nl|'\n'
DECL|class|MyClient
name|'class'
name|'MyClient'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'messageInfo'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'messageInfo'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'messageInfo'
op|'='
op|'('
nl|'\n'
string|"'moshez@foo.bar'"
op|','
op|'['
string|"'moshez@foo.bar'"
op|']'
op|','
name|'StringIO'
op|'('
name|'mail'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_sender'
op|'='
name|'messageInfo'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_recipient'
op|'='
name|'messageInfo'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_data'
op|'='
name|'messageInfo'
op|'['
number|'2'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getMailFrom
dedent|''
name|'def'
name|'getMailFrom'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_sender'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getMailTo
dedent|''
name|'def'
name|'getMailTo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_recipient'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getMailData
dedent|''
name|'def'
name|'getMailData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_data'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|sendError
dedent|''
name|'def'
name|'sendError'
op|'('
name|'self'
op|','
name|'exc'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_error'
op|'='
name|'exc'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|sentMail
dedent|''
name|'def'
name|'sentMail'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|','
name|'numOk'
op|','
name|'addresses'
op|','
name|'log'
op|')'
op|':'
newline|'\n'
comment|'# Prevent another mail from being sent.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_sender'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_recipient'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_data'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MySMTPClient
dedent|''
dedent|''
name|'class'
name|'MySMTPClient'
op|'('
name|'MyClient'
op|','
name|'smtp'
op|'.'
name|'SMTPClient'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'messageInfo'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'smtp'
op|'.'
name|'SMTPClient'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
string|"'foo.baz'"
op|')'
newline|'\n'
name|'MyClient'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'messageInfo'
op|')'
newline|'\n'
nl|'\n'
DECL|class|MyESMTPClient
dedent|''
dedent|''
name|'class'
name|'MyESMTPClient'
op|'('
name|'MyClient'
op|','
name|'smtp'
op|'.'
name|'ESMTPClient'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'secret'
op|'='
string|"''"
op|','
name|'contextFactory'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'smtp'
op|'.'
name|'ESMTPClient'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'secret'
op|','
name|'contextFactory'
op|','
string|"'foo.baz'"
op|')'
newline|'\n'
name|'MyClient'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|class|LoopbackMixin
dedent|''
dedent|''
name|'class'
name|'LoopbackMixin'
op|':'
newline|'\n'
DECL|member|loopback
indent|'    '
name|'def'
name|'loopback'
op|'('
name|'self'
op|','
name|'server'
op|','
name|'client'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'loopback'
op|'.'
name|'loopbackTCP'
op|'('
name|'server'
op|','
name|'client'
op|')'
newline|'\n'
nl|'\n'
DECL|class|LoopbackTestCase
dedent|''
dedent|''
name|'class'
name|'LoopbackTestCase'
op|'('
name|'LoopbackMixin'
op|')'
op|':'
newline|'\n'
DECL|member|testMessages
indent|'    '
name|'def'
name|'testMessages'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'factory'
op|'='
name|'smtp'
op|'.'
name|'SMTPFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'domains'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'factory'
op|'.'
name|'domains'
op|'['
string|"'foo.bar'"
op|']'
op|'='
name|'DummyDomain'
op|'('
op|'['
string|"'moshez'"
op|']'
op|')'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'mail'
op|'.'
name|'protocols'
name|'import'
name|'DomainSMTP'
newline|'\n'
name|'protocol'
op|'='
name|'DomainSMTP'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'service'
op|'='
name|'factory'
newline|'\n'
name|'protocol'
op|'.'
name|'factory'
op|'='
name|'factory'
newline|'\n'
name|'clientProtocol'
op|'='
name|'self'
op|'.'
name|'clientClass'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'loopback'
op|'('
name|'protocol'
op|','
name|'clientProtocol'
op|')'
newline|'\n'
dedent|''
name|'testMessages'
op|'.'
name|'suppress'
op|'='
op|'['
name|'util'
op|'.'
name|'suppress'
op|'('
name|'message'
op|'='
string|"'DomainSMTP'"
op|','
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|class|LoopbackSMTPTestCase
dedent|''
name|'class'
name|'LoopbackSMTPTestCase'
op|'('
name|'LoopbackTestCase'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|clientClass
indent|'    '
name|'clientClass'
op|'='
name|'MySMTPClient'
newline|'\n'
nl|'\n'
DECL|class|LoopbackESMTPTestCase
dedent|''
name|'class'
name|'LoopbackESMTPTestCase'
op|'('
name|'LoopbackTestCase'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|clientClass
indent|'    '
name|'clientClass'
op|'='
name|'MyESMTPClient'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeSMTPServer
dedent|''
name|'class'
name|'FakeSMTPServer'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|clientData
indent|'    '
name|'clientData'
op|'='
op|'['
nl|'\n'
string|"'220 hello'"
op|','
string|"'250 nice to meet you'"
op|','
nl|'\n'
string|"'250 great'"
op|','
string|"'250 great'"
op|','
string|"'354 go on, lad'"
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'clientData'
op|'='
name|'self'
op|'.'
name|'clientData'
op|'['
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'clientData'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'self'
op|'.'
name|'clientData'
op|'.'
name|'pop'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'line'
op|'=='
string|'"QUIT"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"221 see ya around\\r\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'line'
op|'=='
string|'"."'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"250 gotcha\\r\\n"'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'line'
op|'=='
string|'"RSET"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'clientData'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'self'
op|'.'
name|'clientData'
op|'.'
name|'pop'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SMTPClientTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'SMTPClientTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'LoopbackMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{smtp.SMTPClient}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_timeoutConnection
name|'def'
name|'test_timeoutConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{smtp.SMTPClient.timeoutConnection} calls the C{sendError} hook with a\n        fatal L{SMTPTimeoutError} with the current line log.\n        """'
newline|'\n'
name|'error'
op|'='
op|'['
op|']'
newline|'\n'
name|'client'
op|'='
name|'MySMTPClient'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'sendError'
op|'='
name|'error'
op|'.'
name|'append'
newline|'\n'
name|'client'
op|'.'
name|'makeConnection'
op|'('
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|'"220 hello"'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'timeoutConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'error'
op|'['
number|'0'
op|']'
op|','
name|'smtp'
op|'.'
name|'SMTPTimeoutError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'error'
op|'['
number|'0'
op|']'
op|'.'
name|'isFatal'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'str'
op|'('
name|'error'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
string|'"Timeout waiting for SMTP server response\\n"'
nl|'\n'
string|'"<<< 220 hello\\n"'
nl|'\n'
string|'">>> HELO foo.baz\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|expected_output
dedent|''
name|'expected_output'
op|'='
op|'['
nl|'\n'
string|"'HELO foo.baz'"
op|','
string|"'MAIL FROM:<moshez@foo.bar>'"
op|','
nl|'\n'
string|"'RCPT TO:<moshez@foo.bar>'"
op|','
string|"'DATA'"
op|','
nl|'\n'
string|"'Subject: hello'"
op|','
string|"''"
op|','
string|"'Goodbye'"
op|','
string|"'.'"
op|','
string|"'RSET'"
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_messages
name|'def'
name|'test_messages'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{smtp.SMTPClient} sends I{HELO}, I{MAIL FROM}, I{RCPT TO}, and I{DATA}\n        commands based on the return values of its C{getMailFrom},\n        C{getMailTo}, and C{getMailData} methods.\n        """'
newline|'\n'
name|'client'
op|'='
name|'MySMTPClient'
op|'('
op|')'
newline|'\n'
name|'server'
op|'='
name|'FakeSMTPServer'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
name|'server'
op|','
name|'client'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'server'
op|'.'
name|'buffer'
op|','
name|'self'
op|'.'
name|'expected_output'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_transferError
dedent|''
name|'def'
name|'test_transferError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If there is an error while producing the message body to the\n        connection, the C{sendError} callback is invoked.\n        """'
newline|'\n'
name|'client'
op|'='
name|'MySMTPClient'
op|'('
nl|'\n'
op|'('
string|"'alice@example.com'"
op|','
op|'['
string|"'bob@example.com'"
op|']'
op|','
name|'StringIO'
op|'('
string|'"foo"'
op|')'
op|')'
op|')'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
string|"'220 Ok\\r\\n'"
comment|'# Greeting'
nl|'\n'
string|"'250 Ok\\r\\n'"
comment|'# EHLO response'
nl|'\n'
string|"'250 Ok\\r\\n'"
comment|'# MAIL FROM response'
nl|'\n'
string|"'250 Ok\\r\\n'"
comment|'# RCPT TO response'
nl|'\n'
string|"'354 Ok\\r\\n'"
comment|'# DATA response'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
comment|'# Sanity check - a pull producer should be registered now.'
nl|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'transport'
op|'.'
name|'producer'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'transport'
op|'.'
name|'streaming'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now stop the producer prematurely, meaning the message was not sent.'
nl|'\n'
name|'transport'
op|'.'
name|'producer'
op|'.'
name|'stopProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# The sendError hook should have been invoked as a result.'
nl|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'client'
op|'.'
name|'_error'
op|','
name|'Exception'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendFatalError
dedent|''
name|'def'
name|'test_sendFatalError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If L{smtp.SMTPClient.sendError} is called with an L{SMTPClientError}\n        which is fatal, it disconnects its transport without writing anything\n        more to it.\n        """'
newline|'\n'
name|'client'
op|'='
name|'smtp'
op|'.'
name|'SMTPClient'
op|'('
name|'None'
op|')'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'sendError'
op|'('
name|'smtp'
op|'.'
name|'SMTPClientError'
op|'('
number|'123'
op|','
string|'"foo"'
op|','
name|'isFatal'
op|'='
name|'True'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'transport'
op|'.'
name|'disconnecting'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendNonFatalError
dedent|''
name|'def'
name|'test_sendNonFatalError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If L{smtp.SMTPClient.sendError} is called with an L{SMTPClientError}\n        which is not fatal, it sends C{"QUIT"} and waits for the server to\n        close the connection.\n        """'
newline|'\n'
name|'client'
op|'='
name|'smtp'
op|'.'
name|'SMTPClient'
op|'('
name|'None'
op|')'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'sendError'
op|'('
name|'smtp'
op|'.'
name|'SMTPClientError'
op|'('
number|'123'
op|','
string|'"foo"'
op|','
name|'isFatal'
op|'='
name|'False'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|'"QUIT\\r\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'transport'
op|'.'
name|'disconnecting'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendOtherError
dedent|''
name|'def'
name|'test_sendOtherError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If L{smtp.SMTPClient.sendError} is called with an exception which is\n        not an L{SMTPClientError}, it disconnects its transport without\n        writing anything more to it.\n        """'
newline|'\n'
name|'client'
op|'='
name|'smtp'
op|'.'
name|'SMTPClient'
op|'('
name|'None'
op|')'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'sendError'
op|'('
name|'Exception'
op|'('
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'transport'
op|'.'
name|'disconnecting'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummySMTPMessage
dedent|''
dedent|''
name|'class'
name|'DummySMTPMessage'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'protocol'
op|','
name|'users'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'protocol'
op|'='
name|'protocol'
newline|'\n'
name|'self'
op|'.'
name|'users'
op|'='
name|'users'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|eomReceived
dedent|''
name|'def'
name|'eomReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'message'
op|'='
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'buffer'
op|')'
op|'+'
string|"'\\n'"
newline|'\n'
name|'helo'
op|','
name|'origin'
op|'='
name|'self'
op|'.'
name|'users'
op|'['
number|'0'
op|']'
op|'.'
name|'helo'
op|'['
number|'0'
op|']'
op|','
name|'str'
op|'('
name|'self'
op|'.'
name|'users'
op|'['
number|'0'
op|']'
op|'.'
name|'orig'
op|')'
newline|'\n'
name|'recipients'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'user'
name|'in'
name|'self'
op|'.'
name|'users'
op|':'
newline|'\n'
indent|'            '
name|'recipients'
op|'.'
name|'append'
op|'('
name|'str'
op|'('
name|'user'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'message'
op|'['
name|'tuple'
op|'('
name|'recipients'
op|')'
op|']'
op|'='
op|'('
name|'helo'
op|','
name|'origin'
op|','
name|'recipients'
op|','
name|'message'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
string|'"saved"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyProto
dedent|''
dedent|''
name|'class'
name|'DummyProto'
op|':'
newline|'\n'
DECL|member|connectionMade
indent|'    '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'dummyMixinBase'
op|'.'
name|'connectionMade'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'message'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|startMessage
dedent|''
name|'def'
name|'startMessage'
op|'('
name|'self'
op|','
name|'users'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'DummySMTPMessage'
op|'('
name|'self'
op|','
name|'users'
op|')'
newline|'\n'
nl|'\n'
DECL|member|receivedHeader
dedent|''
name|'def'
name|'receivedHeader'
op|'('
op|'*'
name|'spam'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|validateTo
dedent|''
name|'def'
name|'validateTo'
op|'('
name|'self'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'delivery'
op|'='
name|'SimpleDelivery'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
name|'lambda'
op|':'
name|'self'
op|'.'
name|'startMessage'
op|'('
op|'['
name|'user'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|validateFrom
dedent|''
name|'def'
name|'validateFrom'
op|'('
name|'self'
op|','
name|'helo'
op|','
name|'origin'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'origin'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummySMTP
dedent|''
dedent|''
name|'class'
name|'DummySMTP'
op|'('
name|'DummyProto'
op|','
name|'smtp'
op|'.'
name|'SMTP'
op|')'
op|':'
newline|'\n'
DECL|variable|dummyMixinBase
indent|'    '
name|'dummyMixinBase'
op|'='
name|'smtp'
op|'.'
name|'SMTP'
newline|'\n'
nl|'\n'
DECL|class|DummyESMTP
dedent|''
name|'class'
name|'DummyESMTP'
op|'('
name|'DummyProto'
op|','
name|'smtp'
op|'.'
name|'ESMTP'
op|')'
op|':'
newline|'\n'
DECL|variable|dummyMixinBase
indent|'    '
name|'dummyMixinBase'
op|'='
name|'smtp'
op|'.'
name|'ESMTP'
newline|'\n'
nl|'\n'
DECL|class|AnotherTestCase
dedent|''
name|'class'
name|'AnotherTestCase'
op|':'
newline|'\n'
DECL|variable|serverClass
indent|'    '
name|'serverClass'
op|'='
name|'None'
newline|'\n'
DECL|variable|clientClass
name|'clientClass'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|messages
name|'messages'
op|'='
op|'['
op|'('
string|"'foo.com'"
op|','
string|"'moshez@foo.com'"
op|','
op|'['
string|"'moshez@bar.com'"
op|']'
op|','
nl|'\n'
string|"'moshez@foo.com'"
op|','
op|'['
string|"'moshez@bar.com'"
op|']'
op|','
string|"'''\\\nFrom: Moshe\nTo: Moshe\n\nHi,\nhow are you?\n'''"
op|')'
op|','
nl|'\n'
op|'('
string|"'foo.com'"
op|','
string|"'tttt@rrr.com'"
op|','
op|'['
string|"'uuu@ooo'"
op|','
string|"'yyy@eee'"
op|']'
op|','
nl|'\n'
string|"'tttt@rrr.com'"
op|','
op|'['
string|"'uuu@ooo'"
op|','
string|"'yyy@eee'"
op|']'
op|','
string|"'''\\\nSubject: pass\n\n..rrrr..\n'''"
op|')'
op|','
nl|'\n'
op|'('
string|"'foo.com'"
op|','
string|"'@this,@is,@ignored:foo@bar.com'"
op|','
nl|'\n'
op|'['
string|"'@ignore,@this,@too:bar@foo.com'"
op|']'
op|','
nl|'\n'
string|"'foo@bar.com'"
op|','
op|'['
string|"'bar@foo.com'"
op|']'
op|','
string|"'''\\\nSubject: apa\nTo: foo\n\n123\n.\n456\n'''"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|data
name|'data'
op|'='
op|'['
nl|'\n'
op|'('
string|"''"
op|','
string|"'220.*\\r\\n$'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'HELO foo.com\\r\\n'"
op|','
string|"'250.*\\r\\n$'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'RSET\\r\\n'"
op|','
string|"'250.*\\r\\n$'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'for'
name|'helo_'
op|','
name|'from_'
op|','
name|'to_'
op|','
name|'realfrom'
op|','
name|'realto'
op|','
name|'msg'
name|'in'
name|'messages'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'.'
name|'append'
op|'('
op|'('
string|"'MAIL FROM:<%s>\\r\\n'"
op|'%'
name|'from_'
op|','
string|"'250.*\\r\\n'"
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'for'
name|'rcpt'
name|'in'
name|'to_'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'.'
name|'append'
op|'('
op|'('
string|"'RCPT TO:<%s>\\r\\n'"
op|'%'
name|'rcpt'
op|','
string|"'250.*\\r\\n'"
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'data'
op|'.'
name|'append'
op|'('
op|'('
string|"'DATA\\r\\n'"
op|','
string|"'354.*\\r\\n'"
op|','
nl|'\n'
name|'msg'
op|','
op|'('
string|"'250.*\\r\\n'"
op|','
nl|'\n'
op|'('
name|'helo_'
op|','
name|'realfrom'
op|','
name|'realto'
op|','
name|'msg'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|test_buffer
dedent|''
name|'def'
name|'test_buffer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Exercise a lot of the SMTP client code.  This is a "shotgun" style unit\n        test.  It does a lot of things and hopes that something will go really\n        wrong if it is going to go wrong.  This test should be replaced with a\n        suite of nicer tests.\n        """'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'a'
op|'='
name|'self'
op|'.'
name|'serverClass'
op|'('
op|')'
newline|'\n'
DECL|class|fooFactory
name|'class'
name|'fooFactory'
op|':'
newline|'\n'
DECL|variable|domain
indent|'            '
name|'domain'
op|'='
string|"'foo.com'"
newline|'\n'
nl|'\n'
dedent|''
name|'a'
op|'.'
name|'factory'
op|'='
name|'fooFactory'
op|'('
op|')'
newline|'\n'
name|'a'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'for'
op|'('
name|'send'
op|','
name|'expect'
op|','
name|'msg'
op|','
name|'msgexpect'
op|')'
name|'in'
name|'self'
op|'.'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'send'
op|':'
newline|'\n'
indent|'                '
name|'a'
op|'.'
name|'dataReceived'
op|'('
name|'send'
op|')'
newline|'\n'
DECL|variable|data
dedent|''
name|'data'
op|'='
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'re'
op|'.'
name|'match'
op|'('
name|'expect'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'AssertionError'
op|','
op|'('
name|'send'
op|','
name|'expect'
op|','
name|'data'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'data'
op|'['
op|':'
number|'3'
op|']'
op|'=='
string|"'354'"
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'line'
name|'in'
name|'msg'
op|'.'
name|'splitlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'line'
name|'and'
name|'line'
op|'['
number|'0'
op|']'
op|'=='
string|"'.'"
op|':'
newline|'\n'
DECL|variable|line
indent|'                        '
name|'line'
op|'='
string|"'.'"
op|'+'
name|'line'
newline|'\n'
dedent|''
name|'a'
op|'.'
name|'dataReceived'
op|'('
name|'line'
op|'+'
string|"'\\r\\n'"
op|')'
newline|'\n'
dedent|''
name|'a'
op|'.'
name|'dataReceived'
op|'('
string|"'.\\r\\n'"
op|')'
newline|'\n'
comment|'# Special case for DATA. Now we want a 250, and then'
nl|'\n'
comment|'# we compare the messages'
nl|'\n'
DECL|variable|data
name|'data'
op|'='
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'resp'
op|','
name|'msgdata'
op|'='
name|'msgexpect'
newline|'\n'
name|'if'
name|'not'
name|'re'
op|'.'
name|'match'
op|'('
name|'resp'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'AssertionError'
op|','
op|'('
name|'resp'
op|','
name|'data'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'recip'
name|'in'
name|'msgdata'
op|'['
number|'2'
op|']'
op|':'
newline|'\n'
DECL|variable|expected
indent|'                    '
name|'expected'
op|'='
name|'list'
op|'('
name|'msgdata'
op|'['
op|':'
op|']'
op|')'
newline|'\n'
name|'expected'
op|'['
number|'2'
op|']'
op|'='
op|'['
name|'recip'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'a'
op|'.'
name|'message'
op|'['
op|'('
name|'recip'
op|','
op|')'
op|']'
op|','
nl|'\n'
name|'tuple'
op|'('
name|'expected'
op|')'
nl|'\n'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'a'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AnotherESMTPTestCase
dedent|''
dedent|''
name|'class'
name|'AnotherESMTPTestCase'
op|'('
name|'AnotherTestCase'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|serverClass
indent|'    '
name|'serverClass'
op|'='
name|'DummyESMTP'
newline|'\n'
DECL|variable|clientClass
name|'clientClass'
op|'='
name|'MyESMTPClient'
newline|'\n'
nl|'\n'
DECL|class|AnotherSMTPTestCase
dedent|''
name|'class'
name|'AnotherSMTPTestCase'
op|'('
name|'AnotherTestCase'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|serverClass
indent|'    '
name|'serverClass'
op|'='
name|'DummySMTP'
newline|'\n'
DECL|variable|clientClass
name|'clientClass'
op|'='
name|'MySMTPClient'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyChecker
dedent|''
name|'class'
name|'DummyChecker'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'cred'
op|'.'
name|'checkers'
op|'.'
name|'ICredentialsChecker'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|users
name|'users'
op|'='
op|'{'
nl|'\n'
string|"'testuser'"
op|':'
string|"'testpassword'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|credentialInterfaces
name|'credentialInterfaces'
op|'='
op|'('
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|','
nl|'\n'
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'IUsernameHashedPassword'
op|')'
newline|'\n'
nl|'\n'
DECL|member|requestAvatarId
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
nl|'\n'
name|'credentials'
op|'.'
name|'checkPassword'
op|','
name|'self'
op|'.'
name|'users'
op|'['
name|'credentials'
op|'.'
name|'username'
op|']'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbCheck'
op|','
name|'credentials'
op|'.'
name|'username'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbCheck
dedent|''
name|'def'
name|'_cbCheck'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'username'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'result'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'username'
newline|'\n'
dedent|''
name|'raise'
name|'cred'
op|'.'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleDelivery
dedent|''
dedent|''
name|'class'
name|'SimpleDelivery'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{SimpleDelivery} is a message delivery factory with no interesting\n    behavior.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'smtp'
op|'.'
name|'IMessageDelivery'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'messageFactory'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_messageFactory'
op|'='
name|'messageFactory'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|receivedHeader
dedent|''
name|'def'
name|'receivedHeader'
op|'('
name|'self'
op|','
name|'helo'
op|','
name|'origin'
op|','
name|'recipients'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|validateFrom
dedent|''
name|'def'
name|'validateFrom'
op|'('
name|'self'
op|','
name|'helo'
op|','
name|'origin'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'origin'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|validateTo
dedent|''
name|'def'
name|'validateTo'
op|'('
name|'self'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'lambda'
op|':'
name|'self'
op|'.'
name|'_messageFactory'
op|'('
name|'user'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyRealm
dedent|''
dedent|''
name|'class'
name|'DummyRealm'
op|':'
newline|'\n'
DECL|member|requestAvatar
indent|'    '
name|'def'
name|'requestAvatar'
op|'('
name|'self'
op|','
name|'avatarId'
op|','
name|'mind'
op|','
op|'*'
name|'interfaces'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'smtp'
op|'.'
name|'IMessageDelivery'
op|','
name|'SimpleDelivery'
op|'('
name|'None'
op|')'
op|','
name|'lambda'
op|':'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AuthTestCase
dedent|''
dedent|''
name|'class'
name|'AuthTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'LoopbackMixin'
op|')'
op|':'
newline|'\n'
DECL|member|test_crammd5Auth
indent|'    '
name|'def'
name|'test_crammd5Auth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ESMTPClient} can authenticate using the I{CRAM-MD5} SASL mechanism.\n\n        @see: U{http://tools.ietf.org/html/rfc2195}\n        """'
newline|'\n'
name|'realm'
op|'='
name|'DummyRealm'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'cred'
op|'.'
name|'portal'
op|'.'
name|'Portal'
op|'('
name|'realm'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'registerChecker'
op|'('
name|'DummyChecker'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'server'
op|'='
name|'DummyESMTP'
op|'('
op|'{'
string|"'CRAM-MD5'"
op|':'
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'CramMD5Credentials'
op|'}'
op|')'
newline|'\n'
name|'server'
op|'.'
name|'portal'
op|'='
name|'p'
newline|'\n'
name|'client'
op|'='
name|'MyESMTPClient'
op|'('
string|"'testpassword'"
op|')'
newline|'\n'
nl|'\n'
name|'cAuth'
op|'='
name|'smtp'
op|'.'
name|'CramMD5ClientAuthenticator'
op|'('
string|"'testuser'"
op|')'
newline|'\n'
name|'client'
op|'.'
name|'registerAuthenticator'
op|'('
name|'cAuth'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
name|'server'
op|','
name|'client'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'server'
op|'.'
name|'authenticated'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_loginAuth
dedent|''
name|'def'
name|'test_loginAuth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ESMTPClient} can authenticate using the I{LOGIN} SASL mechanism.\n\n        @see: U{http://sepp.oetiker.ch/sasl-2.1.19-ds/draft-murchison-sasl-login-00.txt}\n        """'
newline|'\n'
name|'realm'
op|'='
name|'DummyRealm'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'cred'
op|'.'
name|'portal'
op|'.'
name|'Portal'
op|'('
name|'realm'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'registerChecker'
op|'('
name|'DummyChecker'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'server'
op|'='
name|'DummyESMTP'
op|'('
op|'{'
string|"'LOGIN'"
op|':'
name|'imap4'
op|'.'
name|'LOGINCredentials'
op|'}'
op|')'
newline|'\n'
name|'server'
op|'.'
name|'portal'
op|'='
name|'p'
newline|'\n'
name|'client'
op|'='
name|'MyESMTPClient'
op|'('
string|"'testpassword'"
op|')'
newline|'\n'
nl|'\n'
name|'cAuth'
op|'='
name|'smtp'
op|'.'
name|'LOGINAuthenticator'
op|'('
string|"'testuser'"
op|')'
newline|'\n'
name|'client'
op|'.'
name|'registerAuthenticator'
op|'('
name|'cAuth'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
name|'server'
op|','
name|'client'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'server'
op|'.'
name|'authenticated'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_loginAgainstWeirdServer
dedent|''
name|'def'
name|'test_loginAgainstWeirdServer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When communicating with a server which implements the I{LOGIN} SASL\n        mechanism using C{"Username:"} as the challenge (rather than C{"User\n        Name\\\\0"}), L{ESMTPClient} can still authenticate successfully using\n        the I{LOGIN} mechanism.\n        """'
newline|'\n'
name|'realm'
op|'='
name|'DummyRealm'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'cred'
op|'.'
name|'portal'
op|'.'
name|'Portal'
op|'('
name|'realm'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'registerChecker'
op|'('
name|'DummyChecker'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|WeirdLOGIN
name|'class'
name|'WeirdLOGIN'
op|'('
name|'imap4'
op|'.'
name|'LOGINCredentials'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'imap4'
op|'.'
name|'LOGINCredentials'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'challenges'
op|'['
number|'1'
op|']'
op|'='
string|"'Username:'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'server'
op|'='
name|'DummyESMTP'
op|'('
op|'{'
string|"'LOGIN'"
op|':'
name|'WeirdLOGIN'
op|'}'
op|')'
newline|'\n'
name|'server'
op|'.'
name|'portal'
op|'='
name|'p'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'MyESMTPClient'
op|'('
string|"'testpassword'"
op|')'
newline|'\n'
name|'cAuth'
op|'='
name|'smtp'
op|'.'
name|'LOGINAuthenticator'
op|'('
string|"'testuser'"
op|')'
newline|'\n'
name|'client'
op|'.'
name|'registerAuthenticator'
op|'('
name|'cAuth'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'loopback'
op|'('
name|'server'
op|','
name|'client'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'server'
op|'.'
name|'authenticated'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SMTPHelperTestCase
dedent|''
dedent|''
name|'class'
name|'SMTPHelperTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testMessageID
indent|'    '
name|'def'
name|'testMessageID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'1000'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'='
name|'smtp'
op|'.'
name|'messageid'
op|'('
string|"'testcase'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'m'
name|'in'
name|'d'
op|')'
newline|'\n'
name|'d'
op|'['
name|'m'
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|testQuoteAddr
dedent|''
dedent|''
name|'def'
name|'testQuoteAddr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cases'
op|'='
op|'['
nl|'\n'
op|'['
string|"'user@host.name'"
op|','
string|"'<user@host.name>'"
op|']'
op|','
nl|'\n'
op|'['
string|'\'"User Name" <user@host.name>\''
op|','
string|"'<user@host.name>'"
op|']'
op|','
nl|'\n'
op|'['
name|'smtp'
op|'.'
name|'Address'
op|'('
string|"'someguy@someplace'"
op|')'
op|','
string|"'<someguy@someplace>'"
op|']'
op|','
nl|'\n'
op|'['
string|"''"
op|','
string|"'<>'"
op|']'
op|','
nl|'\n'
op|'['
name|'smtp'
op|'.'
name|'Address'
op|'('
string|"''"
op|')'
op|','
string|"'<>'"
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'c'
op|','
name|'e'
op|')'
name|'in'
name|'cases'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'smtp'
op|'.'
name|'quoteaddr'
op|'('
name|'c'
op|')'
op|','
name|'e'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUser
dedent|''
dedent|''
name|'def'
name|'testUser'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'u'
op|'='
name|'smtp'
op|'.'
name|'User'
op|'('
string|"'user@host'"
op|','
string|"'helo.host.name'"
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'u'
op|')'
op|','
string|"'user@host'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testXtextEncoding
dedent|''
name|'def'
name|'testXtextEncoding'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cases'
op|'='
op|'['
nl|'\n'
op|'('
string|"'Hello world'"
op|','
string|"'Hello+20world'"
op|')'
op|','
nl|'\n'
op|'('
string|"'Hello+world'"
op|','
string|"'Hello+2Bworld'"
op|')'
op|','
nl|'\n'
op|'('
string|"'\\0\\1\\2\\3\\4\\5'"
op|','
string|"'+00+01+02+03+04+05'"
op|')'
op|','
nl|'\n'
op|'('
string|"'e=mc2@example.com'"
op|','
string|"'e+3Dmc2@example.com'"
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'case'
op|','
name|'expected'
op|')'
name|'in'
name|'cases'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'smtp'
op|'.'
name|'xtext_encode'
op|'('
name|'case'
op|')'
op|','
op|'('
name|'expected'
op|','
name|'len'
op|'('
name|'case'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'case'
op|'.'
name|'encode'
op|'('
string|"'xtext'"
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'smtp'
op|'.'
name|'xtext_decode'
op|'('
name|'expected'
op|')'
op|','
op|'('
name|'case'
op|','
name|'len'
op|'('
name|'expected'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|'.'
name|'decode'
op|'('
string|"'xtext'"
op|')'
op|','
name|'case'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_encodeWithErrors
dedent|''
dedent|''
name|'def'
name|'test_encodeWithErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Specifying an error policy to C{unicode.encode} with the\n        I{xtext} codec should produce the same result as not\n        specifying the error policy.\n        """'
newline|'\n'
name|'text'
op|'='
string|"u'Hello world'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'smtp'
op|'.'
name|'xtext_encode'
op|'('
name|'text'
op|','
string|"'strict'"
op|')'
op|','
nl|'\n'
op|'('
name|'text'
op|'.'
name|'encode'
op|'('
string|"'xtext'"
op|')'
op|','
name|'len'
op|'('
name|'text'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'text'
op|'.'
name|'encode'
op|'('
string|"'xtext'"
op|','
string|"'strict'"
op|')'
op|','
nl|'\n'
name|'text'
op|'.'
name|'encode'
op|'('
string|"'xtext'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_decodeWithErrors
dedent|''
name|'def'
name|'test_decodeWithErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Similar to L{test_encodeWithErrors}, but for C{str.decode}.\n        """'
newline|'\n'
name|'bytes'
op|'='
string|"'Hello world'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'smtp'
op|'.'
name|'_slowXTextDecode'
op|'('
name|'bytes'
op|','
string|"'strict'"
op|')'
op|','
nl|'\n'
op|'('
name|'bytes'
op|'.'
name|'decode'
op|'('
string|"'xtext'"
op|')'
op|','
name|'len'
op|'('
name|'bytes'
op|')'
op|')'
op|')'
newline|'\n'
comment|'# This might be the same as _slowXTextDecode, but it might also be the'
nl|'\n'
comment|'# fast version instead.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'smtp'
op|'.'
name|'xtext_decode'
op|'('
name|'bytes'
op|','
string|"'strict'"
op|')'
op|','
nl|'\n'
op|'('
name|'bytes'
op|'.'
name|'decode'
op|'('
string|"'xtext'"
op|')'
op|','
name|'len'
op|'('
name|'bytes'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'bytes'
op|'.'
name|'decode'
op|'('
string|"'xtext'"
op|','
string|"'strict'"
op|')'
op|','
nl|'\n'
name|'bytes'
op|'.'
name|'decode'
op|'('
string|"'xtext'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoticeTLSClient
dedent|''
dedent|''
name|'class'
name|'NoticeTLSClient'
op|'('
name|'MyESMTPClient'
op|')'
op|':'
newline|'\n'
DECL|variable|tls
indent|'    '
name|'tls'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|esmtpState_starttls
name|'def'
name|'esmtpState_starttls'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MyESMTPClient'
op|'.'
name|'esmtpState_starttls'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'resp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tls'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|class|TLSTestCase
dedent|''
dedent|''
name|'class'
name|'TLSTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'LoopbackMixin'
op|')'
op|':'
newline|'\n'
DECL|member|testTLS
indent|'    '
name|'def'
name|'testTLS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'clientCTX'
op|'='
name|'ClientTLSContext'
op|'('
op|')'
newline|'\n'
name|'serverCTX'
op|'='
name|'ServerTLSContext'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'NoticeTLSClient'
op|'('
name|'contextFactory'
op|'='
name|'clientCTX'
op|')'
newline|'\n'
name|'server'
op|'='
name|'DummyESMTP'
op|'('
name|'contextFactory'
op|'='
name|'serverCTX'
op|')'
newline|'\n'
nl|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'client'
op|'.'
name|'tls'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'server'
op|'.'
name|'startedTLS'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'loopback'
op|'('
name|'server'
op|','
name|'client'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'ClientTLSContext'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'case'
name|'in'
op|'('
name|'TLSTestCase'
op|','
op|')'
op|':'
newline|'\n'
indent|'        '
name|'case'
op|'.'
name|'skip'
op|'='
string|'"OpenSSL not present"'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'interfaces'
op|'.'
name|'IReactorSSL'
op|'.'
name|'providedBy'
op|'('
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'case'
name|'in'
op|'('
name|'TLSTestCase'
op|','
op|')'
op|':'
newline|'\n'
indent|'        '
name|'case'
op|'.'
name|'skip'
op|'='
string|'"Reactor doesn\'t support SSL"'
newline|'\n'
nl|'\n'
DECL|class|EmptyLineTestCase
dedent|''
dedent|''
name|'class'
name|'EmptyLineTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_emptyLineSyntaxError
indent|'    '
name|'def'
name|'test_emptyLineSyntaxError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If L{smtp.SMTP} receives an empty line, it responds with a 500 error\n        response code and a message about a syntax error.\n        """'
newline|'\n'
name|'proto'
op|'='
name|'smtp'
op|'.'
name|'SMTP'
op|'('
op|')'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'lineReceived'
op|'('
string|"''"
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'out'
op|'='
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'out'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'out'
op|'['
number|'0'
op|']'
op|'.'
name|'startswith'
op|'('
string|"'220'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'out'
op|'['
number|'1'
op|']'
op|','
string|'"500 Error: bad syntax"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TimeoutTestCase
dedent|''
dedent|''
name|'class'
name|'TimeoutTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'LoopbackMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Check that SMTP client factories correctly use the timeout.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_timeoutTest
name|'def'
name|'_timeoutTest'
op|'('
name|'self'
op|','
name|'onDone'
op|','
name|'clientFactory'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connect the clientFactory, and check the timeout on the request.\n        """'
newline|'\n'
name|'clock'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'client'
op|'='
name|'clientFactory'
op|'.'
name|'buildProtocol'
op|'('
nl|'\n'
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'example.net'"
op|','
number|'25'
op|')'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'callLater'
op|'='
name|'clock'
op|'.'
name|'callLater'
newline|'\n'
name|'t'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'makeConnection'
op|'('
name|'t'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'protocol'
op|'='
name|'client'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'clock'
op|'.'
name|'seconds'
op|'('
op|')'
op|','
number|'0.5'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'onDone'
op|','
name|'smtp'
op|'.'
name|'SMTPTimeoutError'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
comment|'# The first call should not trigger the timeout'
nl|'\n'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'0.1'
op|')'
newline|'\n'
comment|'# But this one should'
nl|'\n'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'0.4'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_SMTPClient
dedent|''
name|'def'
name|'test_SMTPClient'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test timeout for L{smtp.SMTPSenderFactory}: the response L{Deferred}\n        should be errback with a L{smtp.SMTPTimeoutError}.\n        """'
newline|'\n'
name|'onDone'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'clientFactory'
op|'='
name|'smtp'
op|'.'
name|'SMTPSenderFactory'
op|'('
nl|'\n'
string|"'source@address'"
op|','
string|"'recipient@address'"
op|','
nl|'\n'
name|'StringIO'
op|'('
string|'"Message body"'
op|')'
op|','
name|'onDone'
op|','
nl|'\n'
name|'retries'
op|'='
number|'0'
op|','
name|'timeout'
op|'='
number|'0.5'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_timeoutTest'
op|'('
name|'onDone'
op|','
name|'clientFactory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ESMTPClient
dedent|''
name|'def'
name|'test_ESMTPClient'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test timeout for L{smtp.ESMTPSenderFactory}: the response L{Deferred}\n        should be errback with a L{smtp.SMTPTimeoutError}.\n        """'
newline|'\n'
name|'onDone'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'clientFactory'
op|'='
name|'smtp'
op|'.'
name|'ESMTPSenderFactory'
op|'('
nl|'\n'
string|"'username'"
op|','
string|"'password'"
op|','
nl|'\n'
string|"'source@address'"
op|','
string|"'recipient@address'"
op|','
nl|'\n'
name|'StringIO'
op|'('
string|'"Message body"'
op|')'
op|','
name|'onDone'
op|','
nl|'\n'
name|'retries'
op|'='
number|'0'
op|','
name|'timeout'
op|'='
number|'0.5'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_timeoutTest'
op|'('
name|'onDone'
op|','
name|'clientFactory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_resetTimeoutWhileSending
dedent|''
name|'def'
name|'test_resetTimeoutWhileSending'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The timeout is not allowed to expire after the server has accepted a\n        DATA command and the client is actively sending data to it.\n        """'
newline|'\n'
DECL|class|SlowFile
name|'class'
name|'SlowFile'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            A file-like which returns one byte from each read call until the\n            specified number of bytes have been returned.\n            """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_size'
op|'='
name|'size'
newline|'\n'
nl|'\n'
DECL|member|read
dedent|''
name|'def'
name|'read'
op|'('
name|'self'
op|','
name|'max'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'_size'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_size'
op|'-='
number|'1'
newline|'\n'
name|'return'
string|"'x'"
newline|'\n'
dedent|''
name|'return'
string|"''"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'failed'
op|'='
op|'['
op|']'
newline|'\n'
name|'onDone'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'onDone'
op|'.'
name|'addErrback'
op|'('
name|'failed'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'clientFactory'
op|'='
name|'smtp'
op|'.'
name|'SMTPSenderFactory'
op|'('
nl|'\n'
string|"'source@address'"
op|','
string|"'recipient@address'"
op|','
nl|'\n'
name|'SlowFile'
op|'('
number|'1'
op|')'
op|','
name|'onDone'
op|','
name|'retries'
op|'='
number|'0'
op|','
name|'timeout'
op|'='
number|'3'
op|')'
newline|'\n'
name|'clientFactory'
op|'.'
name|'domain'
op|'='
string|'"example.org"'
newline|'\n'
name|'clock'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'client'
op|'='
name|'clientFactory'
op|'.'
name|'buildProtocol'
op|'('
nl|'\n'
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'example.net'"
op|','
number|'25'
op|')'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'callLater'
op|'='
name|'clock'
op|'.'
name|'callLater'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
string|'"220 Ok\\r\\n"'
comment|'# Greet the client'
nl|'\n'
string|'"250 Ok\\r\\n"'
comment|'# Respond to HELO'
nl|'\n'
string|'"250 Ok\\r\\n"'
comment|'# Respond to MAIL FROM'
nl|'\n'
string|'"250 Ok\\r\\n"'
comment|'# Respond to RCPT TO'
nl|'\n'
string|'"354 Ok\\r\\n"'
comment|'# Respond to DATA'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now the client is producing data to the server.  Any time'
nl|'\n'
comment|'# resumeProducing is called on the producer, the timeout should be'
nl|'\n'
comment|'# extended.  First, a sanity check.  This test is only written to'
nl|'\n'
comment|'# handle pull producers.'
nl|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'transport'
op|'.'
name|'producer'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'transport'
op|'.'
name|'streaming'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now, allow 2 seconds (1 less than the timeout of 3 seconds) to'
nl|'\n'
comment|'# elapse.'
nl|'\n'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'2'
op|')'
newline|'\n'
nl|'\n'
comment|'# The timeout has not expired, so the failure should not have happened.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'failed'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Let some bytes be produced, extending the timeout.  Then advance the'
nl|'\n'
comment|"# clock some more and verify that the timeout still hasn't happened."
nl|'\n'
name|'transport'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'failed'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# The file has been completely produced - the next resume producing'
nl|'\n'
comment|'# finishes the upload, successfully.'
nl|'\n'
name|'transport'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'dataReceived'
op|'('
string|'"250 Ok\\r\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'failed'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that the client actually did send the things expected.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|'"HELO example.org\\r\\n"'
nl|'\n'
string|'"MAIL FROM:<source@address>\\r\\n"'
nl|'\n'
string|'"RCPT TO:<recipient@address>\\r\\n"'
nl|'\n'
string|'"DATA\\r\\n"'
nl|'\n'
string|'"x\\r\\n"'
nl|'\n'
string|'".\\r\\n"'
nl|'\n'
comment|"# This RSET is just an implementation detail.  It's nice, but this"
nl|'\n'
comment|"# test doesn't really care about it."
nl|'\n'
string|'"RSET\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MultipleDeliveryFactorySMTPServerFactory
dedent|''
dedent|''
name|'class'
name|'MultipleDeliveryFactorySMTPServerFactory'
op|'('
name|'protocol'
op|'.'
name|'ServerFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{MultipleDeliveryFactorySMTPServerFactory} creates SMTP server protocol\n    instances with message delivery factory objects supplied to it.  Each\n    factory is used for one connection and then discarded.  Factories are used\n    in the order they are supplied.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'messageFactories'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_messageFactories'
op|'='
name|'messageFactories'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'protocol'
op|'.'
name|'ServerFactory'
op|'.'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'delivery'
op|'='
name|'SimpleDelivery'
op|'('
name|'self'
op|'.'
name|'_messageFactories'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SMTPSenderFactoryRetryTestCase
dedent|''
dedent|''
name|'class'
name|'SMTPSenderFactoryRetryTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the retry behavior of L{smtp.SMTPSenderFactory}.\n    """'
newline|'\n'
DECL|member|test_retryAfterDisconnect
name|'def'
name|'test_retryAfterDisconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the protocol created by L{SMTPSenderFactory} loses its connection\n        before receiving confirmation of message delivery, it reconnects and\n        tries to deliver the message again.\n        """'
newline|'\n'
name|'recipient'
op|'='
string|"'alice'"
newline|'\n'
name|'message'
op|'='
string|'"some message text"'
newline|'\n'
name|'domain'
op|'='
name|'DummyDomain'
op|'('
op|'['
name|'recipient'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|class|CleanSMTP
name|'class'
name|'CleanSMTP'
op|'('
name|'smtp'
op|'.'
name|'SMTP'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            An SMTP subclass which ensures that its transport will be\n            disconnected before the test ends.\n            """'
newline|'\n'
DECL|member|makeConnection
name|'def'
name|'makeConnection'
op|'('
name|'innerSelf'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'transport'
op|'.'
name|'loseConnection'
op|')'
newline|'\n'
name|'smtp'
op|'.'
name|'SMTP'
op|'.'
name|'makeConnection'
op|'('
name|'innerSelf'
op|','
name|'transport'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a server which will fail the first message deliver attempt to'
nl|'\n'
comment|'# it with a 500 and a disconnect, but which will accept a message'
nl|'\n'
comment|'# delivered over the 2nd connection to it.'
nl|'\n'
dedent|''
dedent|''
name|'serverFactory'
op|'='
name|'MultipleDeliveryFactorySMTPServerFactory'
op|'('
op|'['
nl|'\n'
name|'BrokenMessage'
op|','
nl|'\n'
name|'lambda'
name|'user'
op|':'
name|'DummyMessage'
op|'('
name|'domain'
op|','
name|'user'
op|')'
op|']'
op|')'
newline|'\n'
name|'serverFactory'
op|'.'
name|'protocol'
op|'='
name|'CleanSMTP'
newline|'\n'
name|'serverPort'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'serverFactory'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'serverHost'
op|'='
name|'serverPort'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'serverPort'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set up a client to try to deliver a message to the above created'
nl|'\n'
comment|'# server.'
nl|'\n'
name|'sentDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'clientFactory'
op|'='
name|'smtp'
op|'.'
name|'SMTPSenderFactory'
op|'('
nl|'\n'
string|'"bob@example.org"'
op|','
name|'recipient'
op|'+'
string|'"@example.com"'
op|','
nl|'\n'
name|'StringIO'
op|'('
name|'message'
op|')'
op|','
name|'sentDeferred'
op|')'
newline|'\n'
name|'clientFactory'
op|'.'
name|'domain'
op|'='
string|'"example.org"'
newline|'\n'
name|'clientConnector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
nl|'\n'
name|'serverHost'
op|'.'
name|'host'
op|','
name|'serverHost'
op|'.'
name|'port'
op|','
name|'clientFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'clientConnector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbSent
name|'def'
name|'cbSent'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Verify that the message was successfully delivered and flush the\n            error which caused the first attempt to fail.\n            """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'domain'
op|'.'
name|'messages'
op|','
nl|'\n'
op|'{'
name|'recipient'
op|':'
op|'['
string|'"\\n%s\\n"'
op|'%'
op|'('
name|'message'
op|','
op|')'
op|']'
op|'}'
op|')'
newline|'\n'
comment|'# Flush the RuntimeError that BrokenMessage caused to be logged.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'RuntimeError'
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'sentDeferred'
op|'.'
name|'addCallback'
op|'('
name|'cbSent'
op|')'
newline|'\n'
name|'return'
name|'sentDeferred'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SingletonRealm
dedent|''
dedent|''
name|'class'
name|'SingletonRealm'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Trivial realm implementation which is constructed with an interface and an\n    avatar and returns that avatar when asked for that interface.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IRealm'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'interface'
op|','
name|'avatar'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'interface'
op|'='
name|'interface'
newline|'\n'
name|'self'
op|'.'
name|'avatar'
op|'='
name|'avatar'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|requestAvatar
dedent|''
name|'def'
name|'requestAvatar'
op|'('
name|'self'
op|','
name|'avatarId'
op|','
name|'mind'
op|','
op|'*'
name|'interfaces'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'iface'
name|'in'
name|'interfaces'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'iface'
name|'is'
name|'self'
op|'.'
name|'interface'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'iface'
op|','
name|'self'
op|'.'
name|'avatar'
op|','
name|'lambda'
op|':'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NotImplementedDelivery
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'NotImplementedDelivery'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Non-implementation of L{smtp.IMessageDelivery} which only has methods which\n    raise L{NotImplementedError}.  Subclassed by various tests to provide the\n    particular behavior being tested.\n    """'
newline|'\n'
DECL|member|validateFrom
name|'def'
name|'validateFrom'
op|'('
name|'self'
op|','
name|'helo'
op|','
name|'origin'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
string|'"This oughtn\'t be called in the course of this test."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|validateTo
dedent|''
name|'def'
name|'validateTo'
op|'('
name|'self'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
string|'"This oughtn\'t be called in the course of this test."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|receivedHeader
dedent|''
name|'def'
name|'receivedHeader'
op|'('
name|'self'
op|','
name|'helo'
op|','
name|'origin'
op|','
name|'recipients'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
string|'"This oughtn\'t be called in the course of this test."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SMTPServerTestCase
dedent|''
dedent|''
name|'class'
name|'SMTPServerTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test various behaviors of L{twisted.mail.smtp.SMTP} and\n    L{twisted.mail.smtp.ESMTP}.\n    """'
newline|'\n'
DECL|member|testSMTPGreetingHost
name|'def'
name|'testSMTPGreetingHost'
op|'('
name|'self'
op|','
name|'serverClass'
op|'='
name|'smtp'
op|'.'
name|'SMTP'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the specified hostname shows up in the SMTP server\'s\n        greeting.\n        """'
newline|'\n'
name|'s'
op|'='
name|'serverClass'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'host'
op|'='
string|'"example.com"'
newline|'\n'
name|'t'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'makeConnection'
op|'('
name|'t'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'connectionLost'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"example.com"'
op|','
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testSMTPGreetingNotExtended
dedent|''
name|'def'
name|'testSMTPGreetingNotExtended'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the string "ESMTP" does not appear in the SMTP server\'s\n        greeting since that string strongly suggests the presence of support\n        for various SMTP extensions which are not supported by L{smtp.SMTP}.\n        """'
newline|'\n'
name|'s'
op|'='
name|'smtp'
op|'.'
name|'SMTP'
op|'('
op|')'
newline|'\n'
name|'t'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'makeConnection'
op|'('
name|'t'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'connectionLost'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|'"ESMTP"'
op|','
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testESMTPGreetingHost
dedent|''
name|'def'
name|'testESMTPGreetingHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Similar to testSMTPGreetingHost, but for the L{smtp.ESMTP} class.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'testSMTPGreetingHost'
op|'('
name|'smtp'
op|'.'
name|'ESMTP'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testESMTPGreetingExtended
dedent|''
name|'def'
name|'testESMTPGreetingExtended'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the string "ESMTP" does appear in the ESMTP server\'s\n        greeting since L{smtp.ESMTP} does support the SMTP extensions which\n        that advertises to the client.\n        """'
newline|'\n'
name|'s'
op|'='
name|'smtp'
op|'.'
name|'ESMTP'
op|'('
op|')'
newline|'\n'
name|'t'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'makeConnection'
op|'('
name|'t'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'connectionLost'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"ESMTP"'
op|','
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_acceptSenderAddress
dedent|''
name|'def'
name|'test_acceptSenderAddress'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a C{MAIL FROM} command with an acceptable address is\n        responded to with the correct success code.\n        """'
newline|'\n'
DECL|class|AcceptanceDelivery
name|'class'
name|'AcceptanceDelivery'
op|'('
name|'NotImplementedDelivery'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Delivery object which accepts all senders as valid.\n            """'
newline|'\n'
DECL|member|validateFrom
name|'def'
name|'validateFrom'
op|'('
name|'self'
op|','
name|'helo'
op|','
name|'origin'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'origin'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'realm'
op|'='
name|'SingletonRealm'
op|'('
name|'smtp'
op|'.'
name|'IMessageDelivery'
op|','
name|'AcceptanceDelivery'
op|'('
op|')'
op|')'
newline|'\n'
name|'portal'
op|'='
name|'Portal'
op|'('
name|'realm'
op|','
op|'['
name|'AllowAnonymousAccess'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'proto'
op|'='
name|'smtp'
op|'.'
name|'SMTP'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'portal'
op|'='
name|'portal'
newline|'\n'
name|'trans'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'trans'
op|')'
newline|'\n'
nl|'\n'
comment|'# Deal with the necessary preliminaries'
nl|'\n'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|"'HELO example.com\\r\\n'"
op|')'
newline|'\n'
name|'trans'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Try to specify our sender address'
nl|'\n'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|"'MAIL FROM:<alice@example.com>\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Clean up the protocol before doing anything that might raise an'
nl|'\n'
comment|'# exception.'
nl|'\n'
name|'proto'
op|'.'
name|'connectionLost'
op|'('
name|'error'
op|'.'
name|'ConnectionLost'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure that we received exactly the correct response'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'trans'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|"'250 Sender address accepted\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_deliveryRejectedSenderAddress
dedent|''
name|'def'
name|'test_deliveryRejectedSenderAddress'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a C{MAIL FROM} command with an address rejected by a\n        L{smtp.IMessageDelivery} instance is responded to with the correct\n        error code.\n        """'
newline|'\n'
DECL|class|RejectionDelivery
name|'class'
name|'RejectionDelivery'
op|'('
name|'NotImplementedDelivery'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Delivery object which rejects all senders as invalid.\n            """'
newline|'\n'
DECL|member|validateFrom
name|'def'
name|'validateFrom'
op|'('
name|'self'
op|','
name|'helo'
op|','
name|'origin'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'smtp'
op|'.'
name|'SMTPBadSender'
op|'('
name|'origin'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'realm'
op|'='
name|'SingletonRealm'
op|'('
name|'smtp'
op|'.'
name|'IMessageDelivery'
op|','
name|'RejectionDelivery'
op|'('
op|')'
op|')'
newline|'\n'
name|'portal'
op|'='
name|'Portal'
op|'('
name|'realm'
op|','
op|'['
name|'AllowAnonymousAccess'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'proto'
op|'='
name|'smtp'
op|'.'
name|'SMTP'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'portal'
op|'='
name|'portal'
newline|'\n'
name|'trans'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'trans'
op|')'
newline|'\n'
nl|'\n'
comment|'# Deal with the necessary preliminaries'
nl|'\n'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|"'HELO example.com\\r\\n'"
op|')'
newline|'\n'
name|'trans'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Try to specify our sender address'
nl|'\n'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|"'MAIL FROM:<alice@example.com>\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Clean up the protocol before doing anything that might raise an'
nl|'\n'
comment|'# exception.'
nl|'\n'
name|'proto'
op|'.'
name|'connectionLost'
op|'('
name|'error'
op|'.'
name|'ConnectionLost'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure that we received exactly the correct response'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'trans'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|"'550 Cannot receive from specified address '"
nl|'\n'
string|"'<alice@example.com>: Sender not acceptable\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_portalRejectedSenderAddress
dedent|''
name|'def'
name|'test_portalRejectedSenderAddress'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a C{MAIL FROM} command with an address rejected by an\n        L{smtp.SMTP} instance\'s portal is responded to with the correct error\n        code.\n        """'
newline|'\n'
DECL|class|DisallowAnonymousAccess
name|'class'
name|'DisallowAnonymousAccess'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Checker for L{IAnonymous} which rejects authentication attempts.\n            """'
newline|'\n'
name|'implements'
op|'('
name|'ICredentialsChecker'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|credentialInterfaces
name|'credentialInterfaces'
op|'='
op|'('
name|'IAnonymous'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|requestAvatarId
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'UnauthorizedLogin'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'realm'
op|'='
name|'SingletonRealm'
op|'('
name|'smtp'
op|'.'
name|'IMessageDelivery'
op|','
name|'NotImplementedDelivery'
op|'('
op|')'
op|')'
newline|'\n'
name|'portal'
op|'='
name|'Portal'
op|'('
name|'realm'
op|','
op|'['
name|'DisallowAnonymousAccess'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'proto'
op|'='
name|'smtp'
op|'.'
name|'SMTP'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'portal'
op|'='
name|'portal'
newline|'\n'
name|'trans'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'trans'
op|')'
newline|'\n'
nl|'\n'
comment|'# Deal with the necessary preliminaries'
nl|'\n'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|"'HELO example.com\\r\\n'"
op|')'
newline|'\n'
name|'trans'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Try to specify our sender address'
nl|'\n'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|"'MAIL FROM:<alice@example.com>\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Clean up the protocol before doing anything that might raise an'
nl|'\n'
comment|'# exception.'
nl|'\n'
name|'proto'
op|'.'
name|'connectionLost'
op|'('
name|'error'
op|'.'
name|'ConnectionLost'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure that we received exactly the correct response'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'trans'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|"'550 Cannot receive from specified address '"
nl|'\n'
string|"'<alice@example.com>: Sender not acceptable\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_portalRejectedAnonymousSender
dedent|''
name|'def'
name|'test_portalRejectedAnonymousSender'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a C{MAIL FROM} command issued without first authenticating\n        when a portal has been configured to disallow anonymous logins is\n        responded to with the correct error code.\n        """'
newline|'\n'
name|'realm'
op|'='
name|'SingletonRealm'
op|'('
name|'smtp'
op|'.'
name|'IMessageDelivery'
op|','
name|'NotImplementedDelivery'
op|'('
op|')'
op|')'
newline|'\n'
name|'portal'
op|'='
name|'Portal'
op|'('
name|'realm'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'proto'
op|'='
name|'smtp'
op|'.'
name|'SMTP'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'portal'
op|'='
name|'portal'
newline|'\n'
name|'trans'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'trans'
op|')'
newline|'\n'
nl|'\n'
comment|'# Deal with the necessary preliminaries'
nl|'\n'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|"'HELO example.com\\r\\n'"
op|')'
newline|'\n'
name|'trans'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Try to specify our sender address'
nl|'\n'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|"'MAIL FROM:<alice@example.com>\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Clean up the protocol before doing anything that might raise an'
nl|'\n'
comment|'# exception.'
nl|'\n'
name|'proto'
op|'.'
name|'connectionLost'
op|'('
name|'error'
op|'.'
name|'ConnectionLost'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure that we received exactly the correct response'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'trans'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|"'550 Cannot receive from specified address '"
nl|'\n'
string|"'<alice@example.com>: Unauthenticated senders not allowed\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ESMTPAuthenticationTestCase
dedent|''
dedent|''
name|'class'
name|'ESMTPAuthenticationTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|assertServerResponse
indent|'    '
name|'def'
name|'assertServerResponse'
op|'('
name|'self'
op|','
name|'bytes'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that when the given bytes are delivered to the ESMTP server\n        instance, it responds with the indicated lines.\n\n        @type bytes: str\n        @type response: list of str\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|'('
name|'bytes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'response'
op|','
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|assertServerAuthenticated
dedent|''
name|'def'
name|'assertServerAuthenticated'
op|'('
name|'self'
op|','
name|'loginArgs'
op|','
name|'username'
op|'='
string|'"username"'
op|','
name|'password'
op|'='
string|'"password"'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that a login attempt has been made, that the credentials and\n        interfaces passed to it are correct, and that when the login request\n        is satisfied, a successful response is sent by the ESMTP server\n        instance.\n\n        @param loginArgs: A C{list} previously passed to L{portalFactory}.\n        """'
newline|'\n'
name|'d'
op|','
name|'credentials'
op|','
name|'mind'
op|','
name|'interfaces'
op|'='
name|'loginArgs'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'loginArgs'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|'.'
name|'providedBy'
op|'('
name|'credentials'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'credentials'
op|'.'
name|'username'
op|','
name|'username'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'credentials'
op|'.'
name|'checkPassword'
op|'('
name|'password'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'smtp'
op|'.'
name|'IMessageDeliveryFactory'
op|','
name|'interfaces'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'smtp'
op|'.'
name|'IMessageDelivery'
op|','
name|'interfaces'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
op|'('
name|'smtp'
op|'.'
name|'IMessageDeliveryFactory'
op|','
name|'None'
op|','
name|'lambda'
op|':'
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
op|'['
string|'"235 Authentication successful."'
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create an ESMTP instance attached to a StringTransport.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'='
name|'smtp'
op|'.'
name|'ESMTP'
op|'('
op|'{'
nl|'\n'
string|"'LOGIN'"
op|':'
name|'imap4'
op|'.'
name|'LOGINCredentials'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'host'
op|'='
string|"'localhost'"
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'StringTransport'
op|'('
nl|'\n'
name|'peerAddress'
op|'='
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'127.0.0.1'"
op|','
number|'12345'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Disconnect the ESMTP instance to clean up its timeout DelayedCall.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'connectionLost'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|portalFactory
dedent|''
name|'def'
name|'portalFactory'
op|'('
name|'self'
op|','
name|'loginList'
op|')'
op|':'
newline|'\n'
DECL|class|DummyPortal
indent|'        '
name|'class'
name|'DummyPortal'
op|':'
newline|'\n'
DECL|member|login
indent|'            '
name|'def'
name|'login'
op|'('
name|'self'
op|','
name|'credentials'
op|','
name|'mind'
op|','
op|'*'
name|'interfaces'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'loginList'
op|'.'
name|'append'
op|'('
op|'('
name|'d'
op|','
name|'credentials'
op|','
name|'mind'
op|','
name|'interfaces'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'DummyPortal'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_authenticationCapabilityAdvertised
dedent|''
name|'def'
name|'test_authenticationCapabilityAdvertised'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that AUTH is advertised to clients which issue an EHLO command.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|'('
string|"'EHLO\\r\\n'"
op|')'
newline|'\n'
name|'responseLines'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'responseLines'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
string|'"250-localhost Hello 127.0.0.1, nice to meet you"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'responseLines'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|'"250 AUTH LOGIN"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'responseLines'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_plainAuthentication
dedent|''
name|'def'
name|'test_plainAuthentication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the LOGIN authentication mechanism can be used\n        """'
newline|'\n'
name|'loginArgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'portal'
op|'='
name|'self'
op|'.'
name|'portalFactory'
op|'('
name|'loginArgs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|'('
string|"'EHLO\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertServerResponse'
op|'('
nl|'\n'
string|"'AUTH LOGIN\\r\\n'"
op|','
nl|'\n'
op|'['
string|'"334 "'
op|'+'
string|'"User Name\\0"'
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertServerResponse'
op|'('
nl|'\n'
string|"'username'"
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'+'
string|"'\\r\\n'"
op|','
nl|'\n'
op|'['
string|'"334 "'
op|'+'
string|'"Password\\0"'
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertServerResponse'
op|'('
nl|'\n'
string|"'password'"
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'+'
string|"'\\r\\n'"
op|','
nl|'\n'
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertServerAuthenticated'
op|'('
name|'loginArgs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_plainAuthenticationEmptyPassword
dedent|''
name|'def'
name|'test_plainAuthenticationEmptyPassword'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that giving an empty password for plain auth succeeds.\n        """'
newline|'\n'
name|'loginArgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'portal'
op|'='
name|'self'
op|'.'
name|'portalFactory'
op|'('
name|'loginArgs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|'('
string|"'EHLO\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertServerResponse'
op|'('
nl|'\n'
string|"'AUTH LOGIN\\r\\n'"
op|','
nl|'\n'
op|'['
string|'"334 "'
op|'+'
string|'"User Name\\0"'
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertServerResponse'
op|'('
nl|'\n'
string|"'username'"
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'+'
string|"'\\r\\n'"
op|','
nl|'\n'
op|'['
string|'"334 "'
op|'+'
string|'"Password\\0"'
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertServerResponse'
op|'('
string|"'\\r\\n'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertServerAuthenticated'
op|'('
name|'loginArgs'
op|','
name|'password'
op|'='
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_plainAuthenticationInitialResponse
dedent|''
name|'def'
name|'test_plainAuthenticationInitialResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The response to the first challenge may be included on the AUTH command\n        line.  Test that this is also supported.\n        """'
newline|'\n'
name|'loginArgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'portal'
op|'='
name|'self'
op|'.'
name|'portalFactory'
op|'('
name|'loginArgs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|'('
string|"'EHLO\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertServerResponse'
op|'('
nl|'\n'
string|"'AUTH LOGIN '"
op|'+'
string|'"username"'
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'+'
string|"'\\r\\n'"
op|','
nl|'\n'
op|'['
string|'"334 "'
op|'+'
string|'"Password\\0"'
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertServerResponse'
op|'('
nl|'\n'
string|"'password'"
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'+'
string|"'\\r\\n'"
op|','
nl|'\n'
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertServerAuthenticated'
op|'('
name|'loginArgs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_abortAuthentication
dedent|''
name|'def'
name|'test_abortAuthentication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a challenge/response sequence can be aborted by the client.\n        """'
newline|'\n'
name|'loginArgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'portal'
op|'='
name|'self'
op|'.'
name|'portalFactory'
op|'('
name|'loginArgs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|'('
string|"'EHLO\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|'('
string|"'AUTH LOGIN\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertServerResponse'
op|'('
nl|'\n'
string|"'*\\r\\n'"
op|','
nl|'\n'
op|'['
string|"'501 Authentication aborted'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidBase64EncodedResponse
dedent|''
name|'def'
name|'test_invalidBase64EncodedResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a response which is not properly Base64 encoded results in\n        the appropriate error code.\n        """'
newline|'\n'
name|'loginArgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'portal'
op|'='
name|'self'
op|'.'
name|'portalFactory'
op|'('
name|'loginArgs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|'('
string|"'EHLO\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|'('
string|"'AUTH LOGIN\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertServerResponse'
op|'('
nl|'\n'
string|"'x\\r\\n'"
op|','
nl|'\n'
op|'['
string|"'501 Syntax error in parameters or arguments'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'loginArgs'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidBase64EncodedInitialResponse
dedent|''
name|'def'
name|'test_invalidBase64EncodedInitialResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like L{test_invalidBase64EncodedResponse} but for the case of an\n        initial response included with the C{AUTH} command.\n        """'
newline|'\n'
name|'loginArgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'portal'
op|'='
name|'self'
op|'.'
name|'portalFactory'
op|'('
name|'loginArgs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|'('
string|"'EHLO\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertServerResponse'
op|'('
nl|'\n'
string|"'AUTH LOGIN x\\r\\n'"
op|','
nl|'\n'
op|'['
string|"'501 Syntax error in parameters or arguments'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'loginArgs'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unexpectedLoginFailure
dedent|''
name|'def'
name|'test_unexpectedLoginFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the L{Deferred} returned by L{Portal.login} fires with an\n        exception of any type other than L{UnauthorizedLogin}, the exception\n        is logged and the client is informed that the authentication attempt\n        has failed.\n        """'
newline|'\n'
name|'loginArgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'portal'
op|'='
name|'self'
op|'.'
name|'portalFactory'
op|'('
name|'loginArgs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|'('
string|"'EHLO\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertServerResponse'
op|'('
nl|'\n'
string|"'AUTH LOGIN '"
op|'+'
string|"'username'"
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'+'
string|"'\\r\\n'"
op|','
nl|'\n'
op|'['
string|"'334 '"
op|'+'
string|"'Password\\0'"
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertServerResponse'
op|'('
nl|'\n'
string|"'password'"
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'+'
string|"'\\r\\n'"
op|','
nl|'\n'
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|','
name|'credentials'
op|','
name|'mind'
op|','
name|'interfaces'
op|'='
name|'loginArgs'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'errback'
op|'('
name|'RuntimeError'
op|'('
string|'"Something wrong with the server"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
string|"'451 Requested action aborted: local error in processing\\r\\n'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'RuntimeError'
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SMTPClientErrorTestCase
dedent|''
dedent|''
name|'class'
name|'SMTPClientErrorTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{smtp.SMTPClientError}.\n    """'
newline|'\n'
DECL|member|test_str
name|'def'
name|'test_str'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The string representation of a L{SMTPClientError} instance includes\n        the response code and response string.\n        """'
newline|'\n'
name|'err'
op|'='
name|'smtp'
op|'.'
name|'SMTPClientError'
op|'('
number|'123'
op|','
string|'"some text"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'err'
op|')'
op|','
string|'"123 some text"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_strWithNegativeCode
dedent|''
name|'def'
name|'test_strWithNegativeCode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the response code supplied to L{SMTPClientError} is negative, it\n        is excluded from the string representation.\n        """'
newline|'\n'
name|'err'
op|'='
name|'smtp'
op|'.'
name|'SMTPClientError'
op|'('
op|'-'
number|'1'
op|','
string|'"foo bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'err'
op|')'
op|','
string|'"foo bar"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_strWithLog
dedent|''
name|'def'
name|'test_strWithLog'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a line log is supplied to L{SMTPClientError}, its contents are\n        included in the string representation of the exception instance.\n        """'
newline|'\n'
name|'log'
op|'='
name|'LineLog'
op|'('
number|'10'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'append'
op|'('
string|'"testlog"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'append'
op|'('
string|'"secondline"'
op|')'
newline|'\n'
name|'err'
op|'='
name|'smtp'
op|'.'
name|'SMTPClientError'
op|'('
number|'100'
op|','
string|'"test error"'
op|','
name|'log'
op|'='
name|'log'
op|'.'
name|'str'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'err'
op|')'
op|','
nl|'\n'
string|'"100 test error\\n"'
nl|'\n'
string|'"testlog\\n"'
nl|'\n'
string|'"secondline\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SenderMixinSentMailTests
dedent|''
dedent|''
name|'class'
name|'SenderMixinSentMailTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{smtp.SenderMixin.sentMail}, used in particular by\n    L{smtp.SMTPSenderFactory} and L{smtp.ESMTPSenderFactory}.\n    """'
newline|'\n'
DECL|member|test_onlyLogFailedAddresses
name|'def'
name|'test_onlyLogFailedAddresses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{smtp.SenderMixin.sentMail} adds only the addresses with failing\n        SMTP response codes to the log passed to the factory\'s errback.\n        """'
newline|'\n'
name|'onDone'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
op|','
name|'smtp'
op|'.'
name|'SMTPDeliveryError'
op|')'
newline|'\n'
name|'onDone'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'e'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'e'
op|'.'
name|'log'
op|','
string|'"bob@example.com: 199 Error in sending.\\n"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'clientFactory'
op|'='
name|'smtp'
op|'.'
name|'SMTPSenderFactory'
op|'('
nl|'\n'
string|"'source@address'"
op|','
string|"'recipient@address'"
op|','
nl|'\n'
name|'StringIO'
op|'('
string|'"Message body"'
op|')'
op|','
name|'onDone'
op|','
nl|'\n'
name|'retries'
op|'='
number|'0'
op|','
name|'timeout'
op|'='
number|'0.5'
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'clientFactory'
op|'.'
name|'buildProtocol'
op|'('
nl|'\n'
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'example.net'"
op|','
number|'25'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'addresses'
op|'='
op|'['
op|'('
string|'"alice@example.com"'
op|','
number|'200'
op|','
string|'"No errors here!"'
op|')'
op|','
nl|'\n'
op|'('
string|'"bob@example.com"'
op|','
number|'199'
op|','
string|'"Error in sending."'
op|')'
op|']'
newline|'\n'
name|'client'
op|'.'
name|'sentMail'
op|'('
number|'199'
op|','
string|'"Test response"'
op|','
number|'1'
op|','
name|'addresses'
op|','
name|'client'
op|'.'
name|'log'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'onDone'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

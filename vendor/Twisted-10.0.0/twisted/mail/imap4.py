begin_unit
comment|'# -*- test-case-name: twisted.mail.test.test_imap -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nAn IMAP4 protocol implementation\n\n@author: Jp Calderone\n\nTo do::\n  Suspend idle timeout while server is processing\n  Use an async message parser instead of buffering in memory\n  Figure out a way to not queue multi-message client requests (Flow? A simple callback?)\n  Clarify some API docs (Query, etc)\n  Make APPEND recognize (again) non-existent mailboxes before accepting the literal\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'rfc822'
newline|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'binascii'
newline|'\n'
name|'import'
name|'hmac'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'string'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'types'
newline|'\n'
nl|'\n'
name|'import'
name|'email'
op|'.'
name|'Utils'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'cStringIO'
name|'as'
name|'StringIO'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'Interface'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'policies'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'maybeDeferred'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'text'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'interfaces'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
name|'import'
name|'cred'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'error'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MessageSet
name|'class'
name|'MessageSet'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Essentially an infinite bitfield, with some extra features.\n\n    @type getnext: Function taking C{int} returning C{int}\n    @ivar getnext: A function that returns the next message number,\n    used when iterating through the MessageSet. By default, a function\n    returning the next integer is supplied, but as this can be rather\n    inefficient for sparse UID iterations, it is recommended to supply\n    one when messages are requested by UID.  The argument is provided\n    as a hint to the implementation and may be ignored if it makes sense\n    to do so (eg, if an iterator is being used that maintains its own\n    state, it is guaranteed that it will not be called out-of-order).\n    """'
newline|'\n'
DECL|variable|_empty
name|'_empty'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'start'
op|'='
name|'_empty'
op|','
name|'end'
op|'='
name|'_empty'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new MessageSet()\n\n        @type start: Optional C{int}\n        @param start: Start of range, or only message number\n\n        @type end: Optional C{int}\n        @param end: End of range.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_last'
op|'='
name|'self'
op|'.'
name|'_empty'
comment|'# Last message/UID in use'
newline|'\n'
name|'self'
op|'.'
name|'ranges'
op|'='
op|'['
op|']'
comment|'# List of ranges included'
newline|'\n'
name|'self'
op|'.'
name|'getnext'
op|'='
name|'lambda'
name|'x'
op|':'
name|'x'
op|'+'
number|'1'
comment|'# A function which will return the next'
newline|'\n'
comment|'# message id. Handy for UID requests.'
nl|'\n'
nl|'\n'
name|'if'
name|'start'
name|'is'
name|'self'
op|'.'
name|'_empty'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'start'
op|','
name|'types'
op|'.'
name|'ListType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ranges'
op|'='
name|'start'
op|'['
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'clean'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'add'
op|'('
name|'start'
op|','
name|'end'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ooo.  A property.'
nl|'\n'
DECL|member|last
dedent|''
dedent|''
name|'def'
name|'last'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|_setLast
indent|'        '
name|'def'
name|'_setLast'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_last'
name|'is'
name|'not'
name|'self'
op|'.'
name|'_empty'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|'"last already set"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_last'
op|'='
name|'value'
newline|'\n'
name|'for'
name|'i'
op|','
op|'('
name|'l'
op|','
name|'h'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'self'
op|'.'
name|'ranges'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'l'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'break'
comment|'# There are no more Nones after this'
newline|'\n'
dedent|''
name|'l'
op|'='
name|'value'
newline|'\n'
name|'if'
name|'h'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'h'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'if'
name|'l'
op|'>'
name|'h'
op|':'
newline|'\n'
indent|'                    '
name|'l'
op|','
name|'h'
op|'='
name|'h'
op|','
name|'l'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'ranges'
op|'['
name|'i'
op|']'
op|'='
op|'('
name|'l'
op|','
name|'h'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'clean'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_getLast
dedent|''
name|'def'
name|'_getLast'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_last'
newline|'\n'
nl|'\n'
dedent|''
name|'doc'
op|'='
string|'\'\'\'\n            "Highest" message number, refered to by "*".\n            Must be set before attempting to use the MessageSet.\n        \'\'\''
newline|'\n'
name|'return'
name|'_getLast'
op|','
name|'_setLast'
op|','
name|'None'
op|','
name|'doc'
newline|'\n'
DECL|variable|last
dedent|''
name|'last'
op|'='
name|'property'
op|'('
op|'*'
name|'last'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add
name|'def'
name|'add'
op|'('
name|'self'
op|','
name|'start'
op|','
name|'end'
op|'='
name|'_empty'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add another range\n\n        @type start: C{int}\n        @param start: Start of range, or only message number\n\n        @type end: Optional C{int}\n        @param end: End of range.\n        """'
newline|'\n'
name|'if'
name|'end'
name|'is'
name|'self'
op|'.'
name|'_empty'
op|':'
newline|'\n'
indent|'            '
name|'end'
op|'='
name|'start'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_last'
name|'is'
name|'not'
name|'self'
op|'.'
name|'_empty'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'start'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'start'
op|'='
name|'self'
op|'.'
name|'last'
newline|'\n'
dedent|''
name|'if'
name|'end'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'end'
op|'='
name|'self'
op|'.'
name|'last'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'start'
op|'>'
name|'end'
op|':'
newline|'\n'
comment|'# Try to keep in low, high order if possible'
nl|'\n'
comment|"# (But we don't know what None means, this will keep"
nl|'\n'
comment|'# None at the start of the ranges list)'
nl|'\n'
indent|'            '
name|'start'
op|','
name|'end'
op|'='
name|'end'
op|','
name|'start'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'ranges'
op|'.'
name|'append'
op|'('
op|'('
name|'start'
op|','
name|'end'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clean'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__add__
dedent|''
name|'def'
name|'__add__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'other'
op|','
name|'MessageSet'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ranges'
op|'='
name|'self'
op|'.'
name|'ranges'
op|'+'
name|'other'
op|'.'
name|'ranges'
newline|'\n'
name|'return'
name|'MessageSet'
op|'('
name|'ranges'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
name|'MessageSet'
op|'('
name|'self'
op|'.'
name|'ranges'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'.'
name|'add'
op|'('
op|'*'
name|'other'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'.'
name|'add'
op|'('
name|'other'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'res'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|extend
dedent|''
dedent|''
name|'def'
name|'extend'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'other'
op|','
name|'MessageSet'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ranges'
op|'.'
name|'extend'
op|'('
name|'other'
op|'.'
name|'ranges'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clean'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'add'
op|'('
op|'*'
name|'other'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'add'
op|'('
name|'other'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|clean
dedent|''
name|'def'
name|'clean'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Clean ranges list, combining adjacent ranges\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ranges'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'oldl'
op|','
name|'oldh'
op|'='
name|'None'
op|','
name|'None'
newline|'\n'
name|'for'
name|'i'
op|','
op|'('
name|'l'
op|','
name|'h'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'self'
op|'.'
name|'ranges'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'l'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
comment|'# l is >= oldl and h is >= oldh due to sort()'
nl|'\n'
dedent|''
name|'if'
name|'oldl'
name|'is'
name|'not'
name|'None'
name|'and'
name|'l'
op|'<='
name|'oldh'
op|'+'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'l'
op|'='
name|'oldl'
newline|'\n'
name|'h'
op|'='
name|'max'
op|'('
name|'oldh'
op|','
name|'h'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ranges'
op|'['
name|'i'
op|'-'
number|'1'
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'ranges'
op|'['
name|'i'
op|']'
op|'='
op|'('
name|'l'
op|','
name|'h'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'oldl'
op|','
name|'oldh'
op|'='
name|'l'
op|','
name|'h'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'ranges'
op|'='
name|'filter'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'ranges'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        May raise TypeError if we encounter unknown "high" values\n        """'
newline|'\n'
name|'for'
name|'l'
op|','
name|'h'
name|'in'
name|'self'
op|'.'
name|'ranges'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'l'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'TypeError'
op|'('
nl|'\n'
string|'"Can\'t determine membership; last value not set"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'l'
op|'<='
name|'value'
op|'<='
name|'h'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_iterator
dedent|''
name|'def'
name|'_iterator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'l'
op|','
name|'h'
name|'in'
name|'self'
op|'.'
name|'ranges'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'='
name|'self'
op|'.'
name|'getnext'
op|'('
name|'l'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'while'
name|'l'
op|'<='
name|'h'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'l'
newline|'\n'
name|'l'
op|'='
name|'self'
op|'.'
name|'getnext'
op|'('
name|'l'
op|')'
newline|'\n'
name|'if'
name|'l'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'ranges'
name|'and'
name|'self'
op|'.'
name|'ranges'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|'"Can\'t iterate; last value not set"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_iterator'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'res'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'l'
op|','
name|'h'
name|'in'
name|'self'
op|'.'
name|'ranges'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'l'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'TypeError'
op|'('
string|'"Can\'t size object; last value not set"'
op|')'
newline|'\n'
dedent|''
name|'res'
op|'+='
op|'('
name|'h'
op|'-'
name|'l'
op|')'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'res'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'low'
op|','
name|'high'
name|'in'
name|'self'
op|'.'
name|'ranges'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'low'
op|'=='
name|'high'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'low'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'p'
op|'.'
name|'append'
op|'('
string|"'*'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'p'
op|'.'
name|'append'
op|'('
name|'str'
op|'('
name|'low'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'low'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'p'
op|'.'
name|'append'
op|'('
string|"'%d:*'"
op|'%'
op|'('
name|'high'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'p'
op|'.'
name|'append'
op|'('
string|"'%d:%d'"
op|'%'
op|'('
name|'low'
op|','
name|'high'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
string|"','"
op|'.'
name|'join'
op|'('
name|'p'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<MessageSet %s>'"
op|'%'
op|'('
name|'str'
op|'('
name|'self'
op|')'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'other'
op|','
name|'MessageSet'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'ranges'
op|'=='
name|'other'
op|'.'
name|'ranges'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LiteralString
dedent|''
dedent|''
name|'class'
name|'LiteralString'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'size'
op|','
name|'defered'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'size'
op|'='
name|'size'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'defer'
op|'='
name|'defered'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'size'
op|'-='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
name|'passon'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'size'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'data'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'size'
op|':'
newline|'\n'
indent|'                '
name|'data'
op|','
name|'passon'
op|'='
name|'data'
op|'['
op|':'
name|'self'
op|'.'
name|'size'
op|']'
op|','
name|'data'
op|'['
name|'self'
op|'.'
name|'size'
op|':'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'passon'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'if'
name|'data'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'data'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'passon'
newline|'\n'
nl|'\n'
DECL|member|callback
dedent|''
name|'def'
name|'callback'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call defered with data and rest of line\n        """'
newline|'\n'
name|'self'
op|'.'
name|'defer'
op|'.'
name|'callback'
op|'('
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'data'
op|')'
op|','
name|'line'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|LiteralFile
dedent|''
dedent|''
name|'class'
name|'LiteralFile'
op|':'
newline|'\n'
DECL|variable|_memoryFileLimit
indent|'    '
name|'_memoryFileLimit'
op|'='
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'10'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'size'
op|','
name|'defered'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'size'
op|'='
name|'size'
newline|'\n'
name|'self'
op|'.'
name|'defer'
op|'='
name|'defered'
newline|'\n'
name|'if'
name|'size'
op|'>'
name|'self'
op|'.'
name|'_memoryFileLimit'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'data'
op|'='
name|'tempfile'
op|'.'
name|'TemporaryFile'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'data'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'size'
op|'-='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
name|'passon'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'size'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'data'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'size'
op|':'
newline|'\n'
indent|'                '
name|'data'
op|','
name|'passon'
op|'='
name|'data'
op|'['
op|':'
name|'self'
op|'.'
name|'size'
op|']'
op|','
name|'data'
op|'['
name|'self'
op|'.'
name|'size'
op|':'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'passon'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'if'
name|'data'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'data'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'passon'
newline|'\n'
nl|'\n'
DECL|member|callback
dedent|''
name|'def'
name|'callback'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call defered with data and rest of line\n        """'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'defer'
op|'.'
name|'callback'
op|'('
op|'('
name|'self'
op|'.'
name|'data'
op|','
name|'line'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WriteBuffer
dedent|''
dedent|''
name|'class'
name|'WriteBuffer'
op|':'
newline|'\n'
indent|'    '
string|'"""Buffer up a bunch of writes before sending them all to a transport at once.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'transport'
op|','
name|'size'
op|'='
number|'8192'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'bufferSize'
op|'='
name|'size'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'transport'
newline|'\n'
name|'self'
op|'.'
name|'_length'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_writes'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_length'
op|'+='
name|'len'
op|'('
name|'s'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_writes'
op|'.'
name|'append'
op|'('
name|'s'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_length'
op|'>'
name|'self'
op|'.'
name|'bufferSize'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|flush
dedent|''
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_writes'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'writeSequence'
op|'('
name|'self'
op|'.'
name|'_writes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_writes'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_length'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Command
dedent|''
dedent|''
dedent|''
name|'class'
name|'Command'
op|':'
newline|'\n'
DECL|variable|_1_RESPONSES
indent|'    '
name|'_1_RESPONSES'
op|'='
op|'('
string|"'CAPABILITY'"
op|','
string|"'FLAGS'"
op|','
string|"'LIST'"
op|','
string|"'LSUB'"
op|','
string|"'STATUS'"
op|','
string|"'SEARCH'"
op|','
string|"'NAMESPACE'"
op|')'
newline|'\n'
DECL|variable|_2_RESPONSES
name|'_2_RESPONSES'
op|'='
op|'('
string|"'EXISTS'"
op|','
string|"'EXPUNGE'"
op|','
string|"'FETCH'"
op|','
string|"'RECENT'"
op|')'
newline|'\n'
DECL|variable|_OK_RESPONSES
name|'_OK_RESPONSES'
op|'='
op|'('
string|"'UIDVALIDITY'"
op|','
string|"'UNSEEN'"
op|','
string|"'READ-WRITE'"
op|','
string|"'READ-ONLY'"
op|','
string|"'UIDNEXT'"
op|','
string|"'PERMANENTFLAGS'"
op|')'
newline|'\n'
DECL|variable|defer
name|'defer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'args'
op|'='
name|'None'
op|','
name|'wantResponse'
op|'='
op|'('
op|')'
op|','
nl|'\n'
name|'continuation'
op|'='
name|'None'
op|','
op|'*'
name|'contArgs'
op|','
op|'**'
name|'contKw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'command'
op|'='
name|'command'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'wantResponse'
op|'='
name|'wantResponse'
newline|'\n'
name|'self'
op|'.'
name|'continuation'
op|'='
name|'lambda'
name|'x'
op|':'
name|'continuation'
op|'('
name|'x'
op|','
op|'*'
name|'contArgs'
op|','
op|'**'
name|'contKw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lines'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|format
dedent|''
name|'def'
name|'format'
op|'('
name|'self'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'args'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"' '"
op|'.'
name|'join'
op|'('
op|'('
name|'tag'
op|','
name|'self'
op|'.'
name|'command'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
string|"' '"
op|'.'
name|'join'
op|'('
op|'('
name|'tag'
op|','
name|'self'
op|'.'
name|'command'
op|','
name|'self'
op|'.'
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish
dedent|''
name|'def'
name|'finish'
op|'('
name|'self'
op|','
name|'lastLine'
op|','
name|'unusedCallback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'send'
op|'='
op|'['
op|']'
newline|'\n'
name|'unuse'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'L'
name|'in'
name|'self'
op|'.'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'names'
op|'='
name|'parseNestedParens'
op|'('
name|'L'
op|')'
newline|'\n'
name|'N'
op|'='
name|'len'
op|'('
name|'names'
op|')'
newline|'\n'
name|'if'
op|'('
name|'N'
op|'>='
number|'1'
name|'and'
name|'names'
op|'['
number|'0'
op|']'
name|'in'
name|'self'
op|'.'
name|'_1_RESPONSES'
name|'or'
nl|'\n'
name|'N'
op|'>='
number|'2'
name|'and'
name|'names'
op|'['
number|'1'
op|']'
name|'in'
name|'self'
op|'.'
name|'_2_RESPONSES'
name|'or'
nl|'\n'
name|'N'
op|'>='
number|'2'
name|'and'
name|'names'
op|'['
number|'0'
op|']'
op|'=='
string|"'OK'"
name|'and'
name|'isinstance'
op|'('
name|'names'
op|'['
number|'1'
op|']'
op|','
name|'types'
op|'.'
name|'ListType'
op|')'
name|'and'
name|'names'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
name|'in'
name|'self'
op|'.'
name|'_OK_RESPONSES'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'send'
op|'.'
name|'append'
op|'('
name|'names'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'unuse'
op|'.'
name|'append'
op|'('
name|'names'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'d'
op|','
name|'self'
op|'.'
name|'defer'
op|'='
name|'self'
op|'.'
name|'defer'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
op|'('
name|'send'
op|','
name|'lastLine'
op|')'
op|')'
newline|'\n'
name|'if'
name|'unuse'
op|':'
newline|'\n'
indent|'            '
name|'unusedCallback'
op|'('
name|'unuse'
op|')'
newline|'\n'
nl|'\n'
DECL|class|LOGINCredentials
dedent|''
dedent|''
dedent|''
name|'class'
name|'LOGINCredentials'
op|'('
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'UsernamePassword'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'challenges'
op|'='
op|'['
string|"'Password\\0'"
op|','
string|"'User Name\\0'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'responses'
op|'='
op|'['
string|"'password'"
op|','
string|"'username'"
op|']'
newline|'\n'
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getChallenge
dedent|''
name|'def'
name|'getChallenge'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'challenges'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|setResponse
dedent|''
name|'def'
name|'setResponse'
op|'('
name|'self'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'setattr'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'responses'
op|'.'
name|'pop'
op|'('
op|')'
op|','
name|'response'
op|')'
newline|'\n'
nl|'\n'
DECL|member|moreChallenges
dedent|''
name|'def'
name|'moreChallenges'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'bool'
op|'('
name|'self'
op|'.'
name|'challenges'
op|')'
newline|'\n'
nl|'\n'
DECL|class|PLAINCredentials
dedent|''
dedent|''
name|'class'
name|'PLAINCredentials'
op|'('
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'UsernamePassword'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getChallenge
dedent|''
name|'def'
name|'getChallenge'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"''"
newline|'\n'
nl|'\n'
DECL|member|setResponse
dedent|''
name|'def'
name|'setResponse'
op|'('
name|'self'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parts'
op|'='
name|'response'
op|'.'
name|'split'
op|'('
string|"'\\0'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'!='
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Malformed Response - wrong number of parts"'
op|')'
newline|'\n'
dedent|''
name|'useless'
op|','
name|'self'
op|'.'
name|'username'
op|','
name|'self'
op|'.'
name|'password'
op|'='
name|'parts'
newline|'\n'
nl|'\n'
DECL|member|moreChallenges
dedent|''
name|'def'
name|'moreChallenges'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|class|IMAP4Exception
dedent|''
dedent|''
name|'class'
name|'IMAP4Exception'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Exception'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|class|IllegalClientResponse
dedent|''
dedent|''
name|'class'
name|'IllegalClientResponse'
op|'('
name|'IMAP4Exception'
op|')'
op|':'
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|IllegalOperation
name|'class'
name|'IllegalOperation'
op|'('
name|'IMAP4Exception'
op|')'
op|':'
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|IllegalMailboxEncoding
name|'class'
name|'IllegalMailboxEncoding'
op|'('
name|'IMAP4Exception'
op|')'
op|':'
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|IMailboxListener
name|'class'
name|'IMailboxListener'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Interface for objects interested in mailbox events"""'
newline|'\n'
nl|'\n'
DECL|member|modeChanged
name|'def'
name|'modeChanged'
op|'('
name|'writeable'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicates that the write status of a mailbox has changed.\n\n        @type writeable: C{bool}\n        @param writeable: A true value if write is now allowed, false\n        otherwise.\n        """'
newline|'\n'
nl|'\n'
DECL|member|flagsChanged
dedent|''
name|'def'
name|'flagsChanged'
op|'('
name|'newFlags'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicates that the flags of one or more messages have changed.\n\n        @type newFlags: C{dict}\n        @param newFlags: A mapping of message identifiers to tuples of flags\n        now set on that message.\n        """'
newline|'\n'
nl|'\n'
DECL|member|newMessages
dedent|''
name|'def'
name|'newMessages'
op|'('
name|'exists'
op|','
name|'recent'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicates that the number of messages in a mailbox has changed.\n\n        @type exists: C{int} or C{None}\n        @param exists: The total number of messages now in this mailbox.\n        If the total number of messages has not changed, this should be\n        C{None}.\n\n        @type recent: C{int}\n        @param recent: The number of messages now flagged \\\\Recent.\n        If the number of recent messages has not changed, this should be\n        C{None}.\n        """'
newline|'\n'
nl|'\n'
DECL|class|IMAP4Server
dedent|''
dedent|''
name|'class'
name|'IMAP4Server'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|','
name|'policies'
op|'.'
name|'TimeoutMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Protocol implementation for an IMAP4rev1 server.\n\n    The server can be in any of four states:\n        - Non-authenticated\n        - Authenticated\n        - Selected\n        - Logout\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IMailboxListener'
op|')'
newline|'\n'
nl|'\n'
comment|'# Identifier for this server software'
nl|'\n'
DECL|variable|IDENT
name|'IDENT'
op|'='
string|"'Twisted IMAP4rev1 Ready'"
newline|'\n'
nl|'\n'
comment|'# Number of seconds before idle timeout'
nl|'\n'
comment|'# Initially 1 minute.  Raised to 30 minutes after login.'
nl|'\n'
DECL|variable|timeOut
name|'timeOut'
op|'='
number|'60'
newline|'\n'
nl|'\n'
DECL|variable|POSTAUTH_TIMEOUT
name|'POSTAUTH_TIMEOUT'
op|'='
number|'60'
op|'*'
number|'30'
newline|'\n'
nl|'\n'
comment|'# Whether STARTTLS has been issued successfully yet or not.'
nl|'\n'
DECL|variable|startedTLS
name|'startedTLS'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# Whether our transport supports TLS'
nl|'\n'
DECL|variable|canStartTLS
name|'canStartTLS'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# Mapping of tags to commands we have received'
nl|'\n'
DECL|variable|tags
name|'tags'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# The object which will handle logins for us'
nl|'\n'
DECL|variable|portal
name|'portal'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# The account object for this connection'
nl|'\n'
DECL|variable|account
name|'account'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Logout callback'
nl|'\n'
DECL|variable|_onLogout
name|'_onLogout'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# The currently selected mailbox'
nl|'\n'
DECL|variable|mbox
name|'mbox'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Command data to be processed when literal data is received'
nl|'\n'
DECL|variable|_pendingLiteral
name|'_pendingLiteral'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Maximum length to accept for a "short" string literal'
nl|'\n'
DECL|variable|_literalStringLimit
name|'_literalStringLimit'
op|'='
number|'4096'
newline|'\n'
nl|'\n'
comment|'# IChallengeResponse factories for AUTHENTICATE command'
nl|'\n'
DECL|variable|challengers
name|'challengers'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Search terms the implementation of which needs to be passed the'
nl|'\n'
comment|'# last sequence id value.'
nl|'\n'
DECL|variable|_requiresLastSequenceId
name|'_requiresLastSequenceId'
op|'='
name|'set'
op|'('
op|'['
string|'"OR"'
op|','
string|'"NOT"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|state
name|'state'
op|'='
string|"'unauth'"
newline|'\n'
nl|'\n'
DECL|variable|parseState
name|'parseState'
op|'='
string|"'command'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'chal'
op|'='
name|'None'
op|','
name|'contextFactory'
op|'='
name|'None'
op|','
name|'scheduler'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'chal'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'chal'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'challengers'
op|'='
name|'chal'
newline|'\n'
name|'self'
op|'.'
name|'ctx'
op|'='
name|'contextFactory'
newline|'\n'
name|'if'
name|'scheduler'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'scheduler'
op|'='
name|'iterateInReactor'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_scheduler'
op|'='
name|'scheduler'
newline|'\n'
name|'self'
op|'.'
name|'_queuedAsync'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|capabilities
dedent|''
name|'def'
name|'capabilities'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cap'
op|'='
op|'{'
string|"'AUTH'"
op|':'
name|'self'
op|'.'
name|'challengers'
op|'.'
name|'keys'
op|'('
op|')'
op|'}'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'ctx'
name|'and'
name|'self'
op|'.'
name|'canStartTLS'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'startedTLS'
name|'and'
name|'interfaces'
op|'.'
name|'ISSLTransport'
op|'('
name|'self'
op|'.'
name|'transport'
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'cap'
op|'['
string|"'LOGINDISABLED'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'cap'
op|'['
string|"'STARTTLS'"
op|']'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'cap'
op|'['
string|"'NAMESPACE'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'cap'
op|'['
string|"'IDLE'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'return'
name|'cap'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'tags'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'canStartTLS'
op|'='
name|'interfaces'
op|'.'
name|'ITLSTransport'
op|'('
name|'self'
op|'.'
name|'transport'
op|','
name|'None'
op|')'
name|'is'
name|'not'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'timeOut'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendServerGreeting'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_onLogout'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_onLogout'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_onLogout'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|timeoutConnection
dedent|''
dedent|''
name|'def'
name|'timeoutConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'* BYE Autologout; connection idle too long'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'mbox'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mbox'
op|'.'
name|'removeListener'
op|'('
name|'self'
op|')'
newline|'\n'
name|'cmbx'
op|'='
name|'ICloseableMailbox'
op|'('
name|'self'
op|'.'
name|'mbox'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'cmbx'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'maybeDeferred'
op|'('
name|'cmbx'
op|'.'
name|'close'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'log'
op|'.'
name|'err'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mbox'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'state'
op|'='
string|"'timeout'"
newline|'\n'
nl|'\n'
DECL|member|rawDataReceived
dedent|''
name|'def'
name|'rawDataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
name|'passon'
op|'='
name|'self'
op|'.'
name|'_pendingLiteral'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'passon'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'setLineMode'
op|'('
name|'passon'
op|')'
newline|'\n'
nl|'\n'
comment|'# Avoid processing commands while buffers are being dumped to'
nl|'\n'
comment|'# our transport'
nl|'\n'
DECL|variable|blocked
dedent|''
dedent|''
name|'blocked'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_unblock
name|'def'
name|'_unblock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'commands'
op|'='
name|'self'
op|'.'
name|'blocked'
newline|'\n'
name|'self'
op|'.'
name|'blocked'
op|'='
name|'None'
newline|'\n'
name|'while'
name|'commands'
name|'and'
name|'self'
op|'.'
name|'blocked'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'lineReceived'
op|'('
name|'commands'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'blocked'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'blocked'
op|'.'
name|'extend'
op|'('
name|'commands'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'blocked'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'blocked'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'parse_'"
op|'+'
name|'self'
op|'.'
name|'parseState'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
string|"'BAD Server error: '"
op|'+'
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|parse_command
dedent|''
dedent|''
name|'def'
name|'parse_command'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'2'
op|')'
newline|'\n'
name|'rest'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'args'
op|')'
op|'=='
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'tag'
op|','
name|'cmd'
op|','
name|'rest'
op|'='
name|'args'
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'args'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'tag'
op|','
name|'cmd'
op|'='
name|'args'
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'args'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'tag'
op|'='
name|'args'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'Missing command'"
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'None'
op|','
string|"'Null command'"
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'cmd'
op|'='
name|'cmd'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'dispatchCommand'
op|'('
name|'tag'
op|','
name|'cmd'
op|','
name|'rest'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IllegalClientResponse'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'Illegal syntax: '"
op|'+'
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IllegalOperation'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'Illegal operation: '"
op|'+'
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IllegalMailboxEncoding'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'Illegal mailbox name: '"
op|'+'
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|parse_pending
dedent|''
dedent|''
name|'def'
name|'parse_pending'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'_pendingLiteral'
newline|'\n'
name|'self'
op|'.'
name|'_pendingLiteral'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'parseState'
op|'='
string|"'command'"
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dispatchCommand
dedent|''
name|'def'
name|'dispatchCommand'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'cmd'
op|','
name|'rest'
op|','
name|'uid'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'self'
op|'.'
name|'lookupCommand'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'if'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'fn'
op|'='
name|'f'
op|'['
number|'0'
op|']'
newline|'\n'
name|'parseargs'
op|'='
name|'f'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'__doCommand'
op|'('
name|'tag'
op|','
name|'fn'
op|','
op|'['
name|'self'
op|','
name|'tag'
op|']'
op|','
name|'parseargs'
op|','
name|'rest'
op|','
name|'uid'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'Unsupported command'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|lookupCommand
dedent|''
dedent|''
name|'def'
name|'lookupCommand'
op|'('
name|'self'
op|','
name|'cmd'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
string|"'_'"
op|'.'
name|'join'
op|'('
op|'('
name|'self'
op|'.'
name|'state'
op|','
name|'cmd'
op|'.'
name|'upper'
op|'('
op|')'
op|')'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__doCommand
dedent|''
name|'def'
name|'__doCommand'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'handler'
op|','
name|'args'
op|','
name|'parseargs'
op|','
name|'line'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
op|'('
name|'i'
op|','
name|'arg'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'parseargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'callable'
op|'('
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'parseargs'
op|'='
name|'parseargs'
op|'['
name|'i'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
name|'maybeDeferred'
op|'('
name|'arg'
op|','
name|'self'
op|','
name|'line'
op|')'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__cbDispatch'
op|','
name|'tag'
op|','
name|'handler'
op|','
name|'args'
op|','
nl|'\n'
name|'parseargs'
op|','
name|'uid'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'__ebDispatch'
op|','
name|'tag'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'args'
op|'.'
name|'append'
op|'('
name|'arg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'line'
op|':'
newline|'\n'
comment|'# Too many arguments'
nl|'\n'
indent|'            '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Too many arguments for command: "'
op|'+'
name|'repr'
op|'('
name|'line'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'uid'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'handler'
op|'('
name|'uid'
op|'='
name|'uid'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'handler'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cbDispatch
dedent|''
dedent|''
name|'def'
name|'__cbDispatch'
op|'('
name|'self'
op|','
op|'('
name|'arg'
op|','
name|'rest'
op|')'
op|','
name|'tag'
op|','
name|'fn'
op|','
name|'args'
op|','
name|'parseargs'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'.'
name|'append'
op|'('
name|'arg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'__doCommand'
op|'('
name|'tag'
op|','
name|'fn'
op|','
name|'args'
op|','
name|'parseargs'
op|','
name|'rest'
op|','
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ebDispatch
dedent|''
name|'def'
name|'__ebDispatch'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'failure'
op|'.'
name|'check'
op|'('
name|'IllegalClientResponse'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'Illegal syntax: '"
op|'+'
name|'str'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'failure'
op|'.'
name|'check'
op|'('
name|'IllegalOperation'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'Illegal operation: '"
op|'+'
nl|'\n'
name|'str'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'failure'
op|'.'
name|'check'
op|'('
name|'IllegalMailboxEncoding'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'Illegal mailbox name: '"
op|'+'
nl|'\n'
name|'str'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'Server error: '"
op|'+'
name|'str'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_stringLiteral
dedent|''
dedent|''
name|'def'
name|'_stringLiteral'
op|'('
name|'self'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'size'
op|'>'
name|'self'
op|'.'
name|'_literalStringLimit'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalClientResponse'
op|'('
nl|'\n'
string|'"Literal too long! I accept at most %d octets"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'_literalStringLimit'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parseState'
op|'='
string|"'pending'"
newline|'\n'
name|'self'
op|'.'
name|'_pendingLiteral'
op|'='
name|'LiteralString'
op|'('
name|'size'
op|','
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendContinuationRequest'
op|'('
string|"'Ready for %d octets of text'"
op|'%'
name|'size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'setRawMode'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_fileLiteral
dedent|''
name|'def'
name|'_fileLiteral'
op|'('
name|'self'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parseState'
op|'='
string|"'pending'"
newline|'\n'
name|'self'
op|'.'
name|'_pendingLiteral'
op|'='
name|'LiteralFile'
op|'('
name|'size'
op|','
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendContinuationRequest'
op|'('
string|"'Ready for %d octets of data'"
op|'%'
name|'size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'setRawMode'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|arg_astring
dedent|''
name|'def'
name|'arg_astring'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse an astring from the line, return (arg, rest), possibly\n        via a deferred (to handle literals)\n        """'
newline|'\n'
name|'line'
op|'='
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'line'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Missing argument"'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'None'
newline|'\n'
name|'arg'
op|','
name|'rest'
op|'='
name|'None'
op|','
name|'None'
newline|'\n'
name|'if'
name|'line'
op|'['
number|'0'
op|']'
op|'=='
string|'\'"\''
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'spam'
op|','
name|'arg'
op|','
name|'rest'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|'\'"\''
op|','
number|'2'
op|')'
newline|'\n'
name|'rest'
op|'='
name|'rest'
op|'['
number|'1'
op|':'
op|']'
comment|'# Strip space'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Unmatched quotes"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'line'
op|'['
number|'0'
op|']'
op|'=='
string|"'{'"
op|':'
newline|'\n'
comment|'# literal'
nl|'\n'
indent|'            '
name|'if'
name|'line'
op|'['
op|'-'
number|'1'
op|']'
op|'!='
string|"'}'"
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Malformed literal"'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'size'
op|'='
name|'int'
op|'('
name|'line'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Bad literal size: "'
op|'+'
name|'line'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'_stringLiteral'
op|'('
name|'size'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'arg'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'arg'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'arg'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
dedent|''
name|'arg'
op|','
name|'rest'
op|'='
name|'arg'
newline|'\n'
dedent|''
name|'return'
name|'d'
name|'or'
op|'('
name|'arg'
op|','
name|'rest'
op|')'
newline|'\n'
nl|'\n'
comment|'# ATOM: Any CHAR except ( ) { % * " \\ ] CTL SP (CHAR is 7bit)'
nl|'\n'
DECL|variable|atomre
dedent|''
name|'atomre'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r\'(?P<atom>[^\\](){%*"\\\\\\x00-\\x20\\x80-\\xff]+)( (?P<rest>.*$)|$)\''
op|')'
newline|'\n'
nl|'\n'
DECL|member|arg_atom
name|'def'
name|'arg_atom'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse an atom from the line\n        """'
newline|'\n'
name|'if'
name|'not'
name|'line'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Missing argument"'
op|')'
newline|'\n'
dedent|''
name|'m'
op|'='
name|'self'
op|'.'
name|'atomre'
op|'.'
name|'match'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'m'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'m'
op|'.'
name|'group'
op|'('
string|"'atom'"
op|')'
op|','
name|'m'
op|'.'
name|'group'
op|'('
string|"'rest'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Malformed ATOM"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|arg_plist
dedent|''
dedent|''
name|'def'
name|'arg_plist'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse a (non-nested) parenthesised list from the line\n        """'
newline|'\n'
name|'if'
name|'not'
name|'line'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Missing argument"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'line'
op|'['
number|'0'
op|']'
op|'!='
string|'"("'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Missing parenthesis"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'i'
op|'='
name|'line'
op|'.'
name|'find'
op|'('
string|'")"'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'i'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Mismatched parenthesis"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'parseNestedParens'
op|'('
name|'line'
op|'['
number|'1'
op|':'
name|'i'
op|']'
op|','
number|'0'
op|')'
op|','
name|'line'
op|'['
name|'i'
op|'+'
number|'2'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|arg_literal
dedent|''
name|'def'
name|'arg_literal'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse a literal from the line\n        """'
newline|'\n'
name|'if'
name|'not'
name|'line'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Missing argument"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'line'
op|'['
number|'0'
op|']'
op|'!='
string|"'{'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Missing literal"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'line'
op|'['
op|'-'
number|'1'
op|']'
op|'!='
string|"'}'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Malformed literal"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'int'
op|'('
name|'line'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Bad literal size: "'
op|'+'
name|'line'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_fileLiteral'
op|'('
name|'size'
op|')'
newline|'\n'
nl|'\n'
DECL|member|arg_searchkeys
dedent|''
name|'def'
name|'arg_searchkeys'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        searchkeys\n        """'
newline|'\n'
name|'query'
op|'='
name|'parseNestedParens'
op|'('
name|'line'
op|')'
newline|'\n'
comment|'# XXX Should really use list of search terms and parse into'
nl|'\n'
comment|'# a proper tree'
nl|'\n'
nl|'\n'
name|'return'
op|'('
name|'query'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|arg_seqset
dedent|''
name|'def'
name|'arg_seqset'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        sequence-set\n        """'
newline|'\n'
name|'rest'
op|'='
string|"''"
newline|'\n'
name|'arg'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'arg'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'rest'
op|'='
name|'arg'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'arg'
op|'='
name|'arg'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'parseIdList'
op|'('
name|'arg'
op|')'
op|','
name|'rest'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IllegalIdentifierError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Bad message number "'
op|'+'
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|arg_fetchatt
dedent|''
dedent|''
name|'def'
name|'arg_fetchatt'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        fetch-att\n        """'
newline|'\n'
name|'p'
op|'='
name|'_FetchParser'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'parseString'
op|'('
name|'line'
op|')'
newline|'\n'
name|'return'
op|'('
name|'p'
op|'.'
name|'result'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|arg_flaglist
dedent|''
name|'def'
name|'arg_flaglist'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Flag part of store-att-flag\n        """'
newline|'\n'
name|'flags'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'line'
op|'['
number|'0'
op|']'
op|'=='
string|"'('"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'line'
op|'['
op|'-'
number|'1'
op|']'
op|'!='
string|"')'"
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Mismatched parenthesis"'
op|')'
newline|'\n'
dedent|''
name|'line'
op|'='
name|'line'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'while'
name|'line'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'='
name|'self'
op|'.'
name|'atomre'
op|'.'
name|'search'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'m'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Malformed flag"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'line'
op|'['
number|'0'
op|']'
op|'=='
string|"'\\\\'"
name|'and'
name|'m'
op|'.'
name|'start'
op|'('
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'flags'
op|'.'
name|'append'
op|'('
string|"'\\\\'"
op|'+'
name|'m'
op|'.'
name|'group'
op|'('
string|"'atom'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'m'
op|'.'
name|'start'
op|'('
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'flags'
op|'.'
name|'append'
op|'('
name|'m'
op|'.'
name|'group'
op|'('
string|"'atom'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Malformed flag"'
op|')'
newline|'\n'
dedent|''
name|'line'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
string|"'rest'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'flags'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|arg_line
dedent|''
name|'def'
name|'arg_line'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Command line of UID command\n        """'
newline|'\n'
name|'return'
op|'('
name|'line'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|opt_plist
dedent|''
name|'def'
name|'opt_plist'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Optional parenthesised list\n        """'
newline|'\n'
name|'if'
name|'line'
op|'.'
name|'startswith'
op|'('
string|"'('"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'arg_plist'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'None'
op|','
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|opt_datetime
dedent|''
dedent|''
name|'def'
name|'opt_datetime'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Optional date-time string\n        """'
newline|'\n'
name|'if'
name|'line'
op|'.'
name|'startswith'
op|'('
string|'\'"\''
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'spam'
op|','
name|'date'
op|','
name|'rest'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|'\'"\''
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Malformed date-time"'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'date'
op|','
name|'rest'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'None'
op|','
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|opt_charset
dedent|''
dedent|''
name|'def'
name|'opt_charset'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Optional charset of SEARCH command\n        """'
newline|'\n'
name|'if'
name|'line'
op|'['
op|':'
number|'7'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|"'CHARSET'"
op|':'
newline|'\n'
indent|'            '
name|'arg'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'2'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'arg'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Missing charset identifier"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'arg'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'arg'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
dedent|''
name|'spam'
op|','
name|'arg'
op|','
name|'rest'
op|'='
name|'arg'
newline|'\n'
name|'return'
op|'('
name|'arg'
op|','
name|'rest'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'None'
op|','
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendServerGreeting
dedent|''
dedent|''
name|'def'
name|'sendServerGreeting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
string|"'[CAPABILITY %s] %s'"
op|'%'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'listCapabilities'
op|'('
op|')'
op|')'
op|','
name|'self'
op|'.'
name|'IDENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendBadResponse
dedent|''
name|'def'
name|'sendBadResponse'
op|'('
name|'self'
op|','
name|'tag'
op|'='
name|'None'
op|','
name|'message'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_respond'
op|'('
string|"'BAD'"
op|','
name|'tag'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendPositiveResponse
dedent|''
name|'def'
name|'sendPositiveResponse'
op|'('
name|'self'
op|','
name|'tag'
op|'='
name|'None'
op|','
name|'message'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_respond'
op|'('
string|"'OK'"
op|','
name|'tag'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendNegativeResponse
dedent|''
name|'def'
name|'sendNegativeResponse'
op|'('
name|'self'
op|','
name|'tag'
op|'='
name|'None'
op|','
name|'message'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_respond'
op|'('
string|"'NO'"
op|','
name|'tag'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendUntaggedResponse
dedent|''
name|'def'
name|'sendUntaggedResponse'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'async'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'async'
name|'or'
op|'('
name|'self'
op|'.'
name|'blocked'
name|'is'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_respond'
op|'('
name|'message'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_queuedAsync'
op|'.'
name|'append'
op|'('
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendContinuationRequest
dedent|''
dedent|''
name|'def'
name|'sendContinuationRequest'
op|'('
name|'self'
op|','
name|'msg'
op|'='
string|"'Ready for additional command text'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'msg'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'+ '"
op|'+'
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'+'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_respond
dedent|''
dedent|''
name|'def'
name|'_respond'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'tag'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'state'
name|'in'
op|'('
string|"'OK'"
op|','
string|"'NO'"
op|','
string|"'BAD'"
op|')'
name|'and'
name|'self'
op|'.'
name|'_queuedAsync'
op|':'
newline|'\n'
indent|'            '
name|'lines'
op|'='
name|'self'
op|'.'
name|'_queuedAsync'
newline|'\n'
name|'self'
op|'.'
name|'_queuedAsync'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'msg'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_respond'
op|'('
name|'msg'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'tag'
op|':'
newline|'\n'
indent|'            '
name|'tag'
op|'='
string|"'*'"
newline|'\n'
dedent|''
name|'if'
name|'message'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
op|'('
name|'tag'
op|','
name|'state'
op|','
name|'message'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
op|'('
name|'tag'
op|','
name|'state'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|listCapabilities
dedent|''
dedent|''
name|'def'
name|'listCapabilities'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'caps'
op|'='
op|'['
string|"'IMAP4rev1'"
op|']'
newline|'\n'
name|'for'
name|'c'
op|','
name|'v'
name|'in'
name|'self'
op|'.'
name|'capabilities'
op|'('
op|')'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'v'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'caps'
op|'.'
name|'append'
op|'('
name|'c'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'v'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'caps'
op|'.'
name|'extend'
op|'('
op|'['
op|'('
string|"'%s=%s'"
op|'%'
op|'('
name|'c'
op|','
name|'cap'
op|')'
op|')'
name|'for'
name|'cap'
name|'in'
name|'v'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'caps'
newline|'\n'
nl|'\n'
DECL|member|do_CAPABILITY
dedent|''
name|'def'
name|'do_CAPABILITY'
op|'('
name|'self'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
string|"'CAPABILITY '"
op|'+'
string|"' '"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'listCapabilities'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'CAPABILITY completed'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|unauth_CAPABILITY
dedent|''
name|'unauth_CAPABILITY'
op|'='
op|'('
name|'do_CAPABILITY'
op|','
op|')'
newline|'\n'
DECL|variable|auth_CAPABILITY
name|'auth_CAPABILITY'
op|'='
name|'unauth_CAPABILITY'
newline|'\n'
DECL|variable|select_CAPABILITY
name|'select_CAPABILITY'
op|'='
name|'unauth_CAPABILITY'
newline|'\n'
DECL|variable|logout_CAPABILITY
name|'logout_CAPABILITY'
op|'='
name|'unauth_CAPABILITY'
newline|'\n'
nl|'\n'
DECL|member|do_LOGOUT
name|'def'
name|'do_LOGOUT'
op|'('
name|'self'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
string|"'BYE Nice talking to you'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'LOGOUT successful'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|unauth_LOGOUT
dedent|''
name|'unauth_LOGOUT'
op|'='
op|'('
name|'do_LOGOUT'
op|','
op|')'
newline|'\n'
DECL|variable|auth_LOGOUT
name|'auth_LOGOUT'
op|'='
name|'unauth_LOGOUT'
newline|'\n'
DECL|variable|select_LOGOUT
name|'select_LOGOUT'
op|'='
name|'unauth_LOGOUT'
newline|'\n'
DECL|variable|logout_LOGOUT
name|'logout_LOGOUT'
op|'='
name|'unauth_LOGOUT'
newline|'\n'
nl|'\n'
DECL|member|do_NOOP
name|'def'
name|'do_NOOP'
op|'('
name|'self'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'NOOP No operation performed'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|unauth_NOOP
dedent|''
name|'unauth_NOOP'
op|'='
op|'('
name|'do_NOOP'
op|','
op|')'
newline|'\n'
DECL|variable|auth_NOOP
name|'auth_NOOP'
op|'='
name|'unauth_NOOP'
newline|'\n'
DECL|variable|select_NOOP
name|'select_NOOP'
op|'='
name|'unauth_NOOP'
newline|'\n'
DECL|variable|logout_NOOP
name|'logout_NOOP'
op|'='
name|'unauth_NOOP'
newline|'\n'
nl|'\n'
DECL|member|do_AUTHENTICATE
name|'def'
name|'do_AUTHENTICATE'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
name|'args'
op|'.'
name|'upper'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'args'
name|'not'
name|'in'
name|'self'
op|'.'
name|'challengers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'AUTHENTICATE method unsupported'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'authenticate'
op|'('
name|'self'
op|'.'
name|'challengers'
op|'['
name|'args'
op|']'
op|'('
op|')'
op|','
name|'tag'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|unauth_AUTHENTICATE
dedent|''
dedent|''
name|'unauth_AUTHENTICATE'
op|'='
op|'('
name|'do_AUTHENTICATE'
op|','
name|'arg_atom'
op|')'
newline|'\n'
nl|'\n'
DECL|member|authenticate
name|'def'
name|'authenticate'
op|'('
name|'self'
op|','
name|'chal'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'portal'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'Temporary authentication failure'"
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_setupChallenge'
op|'('
name|'chal'
op|','
name|'tag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setupChallenge
dedent|''
name|'def'
name|'_setupChallenge'
op|'('
name|'self'
op|','
name|'chal'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'challenge'
op|'='
name|'chal'
op|'.'
name|'getChallenge'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'Server error: '"
op|'+'
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'coded'
op|'='
name|'base64'
op|'.'
name|'encodestring'
op|'('
name|'challenge'
op|')'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'parseState'
op|'='
string|"'pending'"
newline|'\n'
name|'self'
op|'.'
name|'_pendingLiteral'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendContinuationRequest'
op|'('
name|'coded'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_pendingLiteral'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbAuthChunk'
op|','
name|'chal'
op|','
name|'tag'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_pendingLiteral'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'__ebAuthChunk'
op|','
name|'tag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cbAuthChunk
dedent|''
dedent|''
name|'def'
name|'__cbAuthChunk'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'chal'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'uncoded'
op|'='
name|'base64'
op|'.'
name|'decodestring'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'binascii'
op|'.'
name|'Error'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalClientResponse'
op|'('
string|'"Malformed Response - not base64"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'chal'
op|'.'
name|'setResponse'
op|'('
name|'uncoded'
op|')'
newline|'\n'
name|'if'
name|'chal'
op|'.'
name|'moreChallenges'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_setupChallenge'
op|'('
name|'chal'
op|','
name|'tag'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'portal'
op|'.'
name|'login'
op|'('
name|'chal'
op|','
name|'None'
op|','
name|'IAccount'
op|')'
op|'.'
name|'addCallbacks'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__cbAuthResp'
op|','
nl|'\n'
name|'self'
op|'.'
name|'__ebAuthResp'
op|','
nl|'\n'
op|'('
name|'tag'
op|','
op|')'
op|','
name|'None'
op|','
op|'('
name|'tag'
op|','
op|')'
op|','
name|'None'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cbAuthResp
dedent|''
dedent|''
name|'def'
name|'__cbAuthResp'
op|'('
name|'self'
op|','
op|'('
name|'iface'
op|','
name|'avatar'
op|','
name|'logout'
op|')'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'iface'
name|'is'
name|'IAccount'
op|','
string|'"IAccount is the only supported interface"'
newline|'\n'
name|'self'
op|'.'
name|'account'
op|'='
name|'avatar'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'auth'"
newline|'\n'
name|'self'
op|'.'
name|'_onLogout'
op|'='
name|'logout'
newline|'\n'
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'Authentication successful'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'POSTAUTH_TIMEOUT'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ebAuthResp
dedent|''
name|'def'
name|'__ebAuthResp'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'failure'
op|'.'
name|'check'
op|'('
name|'cred'
op|'.'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'Authentication failed: unauthorized'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'failure'
op|'.'
name|'check'
op|'('
name|'cred'
op|'.'
name|'error'
op|'.'
name|'UnhandledCredentials'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'Authentication failed: server misconfigured'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'Server error: login failed unexpectedly'"
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ebAuthChunk
dedent|''
dedent|''
name|'def'
name|'__ebAuthChunk'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'Authentication failed: '"
op|'+'
name|'str'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_STARTTLS
dedent|''
name|'def'
name|'do_STARTTLS'
op|'('
name|'self'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'startedTLS'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'TLS already negotiated'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'ctx'
name|'and'
name|'self'
op|'.'
name|'canStartTLS'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'Begin TLS negotiation now'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'startTLS'
op|'('
name|'self'
op|'.'
name|'ctx'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'startedTLS'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'challengers'
op|'='
name|'self'
op|'.'
name|'challengers'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'if'
string|"'LOGIN'"
name|'not'
name|'in'
name|'self'
op|'.'
name|'challengers'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'challengers'
op|'['
string|"'LOGIN'"
op|']'
op|'='
name|'LOGINCredentials'
newline|'\n'
dedent|''
name|'if'
string|"'PLAIN'"
name|'not'
name|'in'
name|'self'
op|'.'
name|'challengers'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'challengers'
op|'['
string|"'PLAIN'"
op|']'
op|'='
name|'PLAINCredentials'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'TLS not available'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|unauth_STARTTLS
dedent|''
dedent|''
name|'unauth_STARTTLS'
op|'='
op|'('
name|'do_STARTTLS'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_LOGIN
name|'def'
name|'do_LOGIN'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'user'
op|','
name|'passwd'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'LOGINDISABLED'"
name|'in'
name|'self'
op|'.'
name|'capabilities'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'LOGIN is disabled before STARTTLS'"
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'authenticateLogin'
op|','
name|'user'
op|','
name|'passwd'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbLogin'
op|','
name|'tag'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'__ebLogin'
op|','
name|'tag'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|unauth_LOGIN
dedent|''
name|'unauth_LOGIN'
op|'='
op|'('
name|'do_LOGIN'
op|','
name|'arg_astring'
op|','
name|'arg_astring'
op|')'
newline|'\n'
nl|'\n'
DECL|member|authenticateLogin
name|'def'
name|'authenticateLogin'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'passwd'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Lookup the account associated with the given parameters\n\n        Override this method to define the desired authentication behavior.\n\n        The default behavior is to defer authentication to C{self.portal}\n        if it is not None, or to deny the login otherwise.\n\n        @type user: C{str}\n        @param user: The username to lookup\n\n        @type passwd: C{str}\n        @param passwd: The password to login with\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'portal'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'login'
op|'('
nl|'\n'
name|'cred'
op|'.'
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
name|'user'
op|','
name|'passwd'
op|')'
op|','
nl|'\n'
name|'None'
op|','
name|'IAccount'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'cred'
op|'.'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cbLogin
dedent|''
name|'def'
name|'__cbLogin'
op|'('
name|'self'
op|','
op|'('
name|'iface'
op|','
name|'avatar'
op|','
name|'logout'
op|')'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'iface'
name|'is'
name|'not'
name|'IAccount'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'Server error: login returned unexpected value'"
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
string|'"__cbLogin called with %r, IAccount expected"'
op|'%'
op|'('
name|'iface'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'account'
op|'='
name|'avatar'
newline|'\n'
name|'self'
op|'.'
name|'_onLogout'
op|'='
name|'logout'
newline|'\n'
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'LOGIN succeeded'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'auth'"
newline|'\n'
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'POSTAUTH_TIMEOUT'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ebLogin
dedent|''
dedent|''
name|'def'
name|'__ebLogin'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'failure'
op|'.'
name|'check'
op|'('
name|'cred'
op|'.'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'LOGIN failed'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'Server error: '"
op|'+'
name|'str'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_NAMESPACE
dedent|''
dedent|''
name|'def'
name|'do_NAMESPACE'
op|'('
name|'self'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'personal'
op|'='
name|'public'
op|'='
name|'shared'
op|'='
name|'None'
newline|'\n'
name|'np'
op|'='
name|'INamespacePresenter'
op|'('
name|'self'
op|'.'
name|'account'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'np'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'personal'
op|'='
name|'np'
op|'.'
name|'getPersonalNamespaces'
op|'('
op|')'
newline|'\n'
name|'public'
op|'='
name|'np'
op|'.'
name|'getSharedNamespaces'
op|'('
op|')'
newline|'\n'
name|'shared'
op|'='
name|'np'
op|'.'
name|'getSharedNamespaces'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
string|"'NAMESPACE '"
op|'+'
name|'collapseNestedLists'
op|'('
op|'['
name|'personal'
op|','
name|'public'
op|','
name|'shared'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|'"NAMESPACE command completed"'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|auth_NAMESPACE
dedent|''
name|'auth_NAMESPACE'
op|'='
op|'('
name|'do_NAMESPACE'
op|','
op|')'
newline|'\n'
DECL|variable|select_NAMESPACE
name|'select_NAMESPACE'
op|'='
name|'auth_NAMESPACE'
newline|'\n'
nl|'\n'
DECL|member|_parseMbox
name|'def'
name|'_parseMbox'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'name'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'name'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'name'
op|'.'
name|'decode'
op|'('
string|"'imap4-utf-7'"
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'IllegalMailboxEncoding'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_selectWork
dedent|''
dedent|''
name|'def'
name|'_selectWork'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'name'
op|','
name|'rw'
op|','
name|'cmdName'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'mbox'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mbox'
op|'.'
name|'removeListener'
op|'('
name|'self'
op|')'
newline|'\n'
name|'cmbx'
op|'='
name|'ICloseableMailbox'
op|'('
name|'self'
op|'.'
name|'mbox'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'cmbx'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'maybeDeferred'
op|'('
name|'cmbx'
op|'.'
name|'close'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'log'
op|'.'
name|'err'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mbox'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'auth'"
newline|'\n'
nl|'\n'
dedent|''
name|'name'
op|'='
name|'self'
op|'.'
name|'_parseMbox'
op|'('
name|'name'
op|')'
newline|'\n'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'account'
op|'.'
name|'select'
op|','
name|'self'
op|'.'
name|'_parseMbox'
op|'('
name|'name'
op|')'
op|','
name|'rw'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbSelectWork'
op|','
name|'cmdName'
op|','
name|'tag'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebSelectWork'
op|','
name|'cmdName'
op|','
name|'tag'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebSelectWork
dedent|''
name|'def'
name|'_ebSelectWork'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'cmdName'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|'"%s failed: Server error"'
op|'%'
op|'('
name|'cmdName'
op|','
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbSelectWork
dedent|''
name|'def'
name|'_cbSelectWork'
op|'('
name|'self'
op|','
name|'mbox'
op|','
name|'cmdName'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'mbox'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'No such mailbox'"
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
string|"'\\\\noselect'"
name|'in'
op|'['
name|'s'
op|'.'
name|'lower'
op|'('
op|')'
name|'for'
name|'s'
name|'in'
name|'mbox'
op|'.'
name|'getFlags'
op|'('
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'Mailbox cannot be selected'"
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'flags'
op|'='
name|'mbox'
op|'.'
name|'getFlags'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
name|'str'
op|'('
name|'mbox'
op|'.'
name|'getMessageCount'
op|'('
op|')'
op|')'
op|'+'
string|"' EXISTS'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
name|'str'
op|'('
name|'mbox'
op|'.'
name|'getRecentCount'
op|'('
op|')'
op|')'
op|'+'
string|"' RECENT'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
string|"'FLAGS (%s)'"
op|'%'
string|"' '"
op|'.'
name|'join'
op|'('
name|'flags'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'None'
op|','
string|"'[UIDVALIDITY %d]'"
op|'%'
name|'mbox'
op|'.'
name|'getUIDValidity'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'s'
op|'='
name|'mbox'
op|'.'
name|'isWriteable'
op|'('
op|')'
name|'and'
string|"'READ-WRITE'"
name|'or'
string|"'READ-ONLY'"
newline|'\n'
name|'mbox'
op|'.'
name|'addListener'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'[%s] %s successful'"
op|'%'
op|'('
name|'s'
op|','
name|'cmdName'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'select'"
newline|'\n'
name|'self'
op|'.'
name|'mbox'
op|'='
name|'mbox'
newline|'\n'
nl|'\n'
DECL|variable|auth_SELECT
dedent|''
name|'auth_SELECT'
op|'='
op|'('
name|'_selectWork'
op|','
name|'arg_astring'
op|','
number|'1'
op|','
string|"'SELECT'"
op|')'
newline|'\n'
DECL|variable|select_SELECT
name|'select_SELECT'
op|'='
name|'auth_SELECT'
newline|'\n'
nl|'\n'
DECL|variable|auth_EXAMINE
name|'auth_EXAMINE'
op|'='
op|'('
name|'_selectWork'
op|','
name|'arg_astring'
op|','
number|'0'
op|','
string|"'EXAMINE'"
op|')'
newline|'\n'
DECL|variable|select_EXAMINE
name|'select_EXAMINE'
op|'='
name|'auth_EXAMINE'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|do_IDLE
name|'def'
name|'do_IDLE'
op|'('
name|'self'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendContinuationRequest'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parseTag'
op|'='
name|'tag'
newline|'\n'
name|'self'
op|'.'
name|'lastState'
op|'='
name|'self'
op|'.'
name|'parseState'
newline|'\n'
name|'self'
op|'.'
name|'parseState'
op|'='
string|"'idle'"
newline|'\n'
nl|'\n'
DECL|member|parse_idle
dedent|''
name|'def'
name|'parse_idle'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parseState'
op|'='
name|'self'
op|'.'
name|'lastState'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'lastState'
newline|'\n'
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'self'
op|'.'
name|'parseTag'
op|','
string|'"IDLE terminated"'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'parseTag'
newline|'\n'
nl|'\n'
DECL|variable|select_IDLE
dedent|''
name|'select_IDLE'
op|'='
op|'('
name|'do_IDLE'
op|','
op|')'
newline|'\n'
DECL|variable|auth_IDLE
name|'auth_IDLE'
op|'='
name|'select_IDLE'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|do_CREATE
name|'def'
name|'do_CREATE'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'self'
op|'.'
name|'_parseMbox'
op|'('
name|'name'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'self'
op|'.'
name|'account'
op|'.'
name|'create'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'MailboxException'
op|','
name|'c'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
name|'str'
op|'('
name|'c'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|'"Server error encountered while creating mailbox"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'result'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'Mailbox created'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'Mailbox not created'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|auth_CREATE
dedent|''
dedent|''
dedent|''
name|'auth_CREATE'
op|'='
op|'('
name|'do_CREATE'
op|','
name|'arg_astring'
op|')'
newline|'\n'
DECL|variable|select_CREATE
name|'select_CREATE'
op|'='
name|'auth_CREATE'
newline|'\n'
nl|'\n'
DECL|member|do_DELETE
name|'def'
name|'do_DELETE'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'self'
op|'.'
name|'_parseMbox'
op|'('
name|'name'
op|')'
newline|'\n'
name|'if'
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'inbox'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'You cannot delete the inbox'"
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'account'
op|'.'
name|'delete'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'MailboxException'
op|','
name|'m'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
name|'str'
op|'('
name|'m'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|'"Server error encountered while deleting mailbox"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'Mailbox deleted'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|auth_DELETE
dedent|''
dedent|''
name|'auth_DELETE'
op|'='
op|'('
name|'do_DELETE'
op|','
name|'arg_astring'
op|')'
newline|'\n'
DECL|variable|select_DELETE
name|'select_DELETE'
op|'='
name|'auth_DELETE'
newline|'\n'
nl|'\n'
DECL|member|do_RENAME
name|'def'
name|'do_RENAME'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'oldname'
op|','
name|'newname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'oldname'
op|','
name|'newname'
op|'='
op|'['
name|'self'
op|'.'
name|'_parseMbox'
op|'('
name|'n'
op|')'
name|'for'
name|'n'
name|'in'
name|'oldname'
op|','
name|'newname'
op|']'
newline|'\n'
name|'if'
name|'oldname'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'inbox'"
name|'or'
name|'newname'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'inbox'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'You cannot rename the inbox, or rename another mailbox to inbox.'"
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'account'
op|'.'
name|'rename'
op|'('
name|'oldname'
op|','
name|'newname'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'Invalid command syntax'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'MailboxException'
op|','
name|'m'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
name|'str'
op|'('
name|'m'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|'"Server error encountered while renaming mailbox"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'Mailbox renamed'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|auth_RENAME
dedent|''
dedent|''
name|'auth_RENAME'
op|'='
op|'('
name|'do_RENAME'
op|','
name|'arg_astring'
op|','
name|'arg_astring'
op|')'
newline|'\n'
DECL|variable|select_RENAME
name|'select_RENAME'
op|'='
name|'auth_RENAME'
newline|'\n'
nl|'\n'
DECL|member|do_SUBSCRIBE
name|'def'
name|'do_SUBSCRIBE'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'self'
op|'.'
name|'_parseMbox'
op|'('
name|'name'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'account'
op|'.'
name|'subscribe'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'MailboxException'
op|','
name|'m'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
name|'str'
op|'('
name|'m'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|'"Server error encountered while subscribing to mailbox"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'Subscribed'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|auth_SUBSCRIBE
dedent|''
dedent|''
name|'auth_SUBSCRIBE'
op|'='
op|'('
name|'do_SUBSCRIBE'
op|','
name|'arg_astring'
op|')'
newline|'\n'
DECL|variable|select_SUBSCRIBE
name|'select_SUBSCRIBE'
op|'='
name|'auth_SUBSCRIBE'
newline|'\n'
nl|'\n'
DECL|member|do_UNSUBSCRIBE
name|'def'
name|'do_UNSUBSCRIBE'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'self'
op|'.'
name|'_parseMbox'
op|'('
name|'name'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'account'
op|'.'
name|'unsubscribe'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'MailboxException'
op|','
name|'m'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
name|'str'
op|'('
name|'m'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|'"Server error encountered while unsubscribing from mailbox"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'Unsubscribed'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|auth_UNSUBSCRIBE
dedent|''
dedent|''
name|'auth_UNSUBSCRIBE'
op|'='
op|'('
name|'do_UNSUBSCRIBE'
op|','
name|'arg_astring'
op|')'
newline|'\n'
DECL|variable|select_UNSUBSCRIBE
name|'select_UNSUBSCRIBE'
op|'='
name|'auth_UNSUBSCRIBE'
newline|'\n'
nl|'\n'
DECL|member|_listWork
name|'def'
name|'_listWork'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'ref'
op|','
name|'mbox'
op|','
name|'sub'
op|','
name|'cmdName'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mbox'
op|'='
name|'self'
op|'.'
name|'_parseMbox'
op|'('
name|'mbox'
op|')'
newline|'\n'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'account'
op|'.'
name|'listMailboxes'
op|','
name|'ref'
op|','
name|'mbox'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbListWork'
op|','
name|'tag'
op|','
name|'sub'
op|','
name|'cmdName'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebListWork'
op|','
name|'tag'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbListWork
dedent|''
name|'def'
name|'_cbListWork'
op|'('
name|'self'
op|','
name|'mailboxes'
op|','
name|'tag'
op|','
name|'sub'
op|','
name|'cmdName'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
op|'('
name|'name'
op|','
name|'box'
op|')'
name|'in'
name|'mailboxes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'sub'
name|'or'
name|'self'
op|'.'
name|'account'
op|'.'
name|'isSubscribed'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'flags'
op|'='
name|'box'
op|'.'
name|'getFlags'
op|'('
op|')'
newline|'\n'
name|'delim'
op|'='
name|'box'
op|'.'
name|'getHierarchicalDelimiter'
op|'('
op|')'
newline|'\n'
name|'resp'
op|'='
op|'('
name|'DontQuoteMe'
op|'('
name|'cmdName'
op|')'
op|','
name|'map'
op|'('
name|'DontQuoteMe'
op|','
name|'flags'
op|')'
op|','
name|'delim'
op|','
name|'name'
op|'.'
name|'encode'
op|'('
string|"'imap4-utf-7'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
name|'collapseNestedLists'
op|'('
name|'resp'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'%s completed'"
op|'%'
op|'('
name|'cmdName'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebListWork
dedent|''
name|'def'
name|'_ebListWork'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|'"Server error encountered while listing mailboxes."'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|auth_LIST
dedent|''
name|'auth_LIST'
op|'='
op|'('
name|'_listWork'
op|','
name|'arg_astring'
op|','
name|'arg_astring'
op|','
number|'0'
op|','
string|"'LIST'"
op|')'
newline|'\n'
DECL|variable|select_LIST
name|'select_LIST'
op|'='
name|'auth_LIST'
newline|'\n'
nl|'\n'
DECL|variable|auth_LSUB
name|'auth_LSUB'
op|'='
op|'('
name|'_listWork'
op|','
name|'arg_astring'
op|','
name|'arg_astring'
op|','
number|'1'
op|','
string|"'LSUB'"
op|')'
newline|'\n'
DECL|variable|select_LSUB
name|'select_LSUB'
op|'='
name|'auth_LSUB'
newline|'\n'
nl|'\n'
DECL|member|do_STATUS
name|'def'
name|'do_STATUS'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'mailbox'
op|','
name|'names'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mailbox'
op|'='
name|'self'
op|'.'
name|'_parseMbox'
op|'('
name|'mailbox'
op|')'
newline|'\n'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'account'
op|'.'
name|'select'
op|','
name|'mailbox'
op|','
number|'0'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbStatusGotMailbox'
op|','
name|'tag'
op|','
name|'mailbox'
op|','
name|'names'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebStatusGotMailbox'
op|','
name|'tag'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbStatusGotMailbox
dedent|''
name|'def'
name|'_cbStatusGotMailbox'
op|'('
name|'self'
op|','
name|'mbox'
op|','
name|'tag'
op|','
name|'mailbox'
op|','
name|'names'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'mbox'
op|':'
newline|'\n'
indent|'            '
name|'maybeDeferred'
op|'('
name|'mbox'
op|'.'
name|'requestStatus'
op|','
name|'names'
op|')'
op|'.'
name|'addCallbacks'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__cbStatus'
op|','
name|'self'
op|'.'
name|'__ebStatus'
op|','
nl|'\n'
op|'('
name|'tag'
op|','
name|'mailbox'
op|')'
op|','
name|'None'
op|','
op|'('
name|'tag'
op|','
name|'mailbox'
op|')'
op|','
name|'None'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|'"Could not open mailbox"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebStatusGotMailbox
dedent|''
dedent|''
name|'def'
name|'_ebStatusGotMailbox'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|'"Server error encountered while opening mailbox."'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|auth_STATUS
dedent|''
name|'auth_STATUS'
op|'='
op|'('
name|'do_STATUS'
op|','
name|'arg_astring'
op|','
name|'arg_plist'
op|')'
newline|'\n'
DECL|variable|select_STATUS
name|'select_STATUS'
op|'='
name|'auth_STATUS'
newline|'\n'
nl|'\n'
DECL|member|__cbStatus
name|'def'
name|'__cbStatus'
op|'('
name|'self'
op|','
name|'status'
op|','
name|'tag'
op|','
name|'box'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'line'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
op|'['
string|"'%s %s'"
op|'%'
name|'x'
name|'for'
name|'x'
name|'in'
name|'status'
op|'.'
name|'iteritems'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
string|"'STATUS %s (%s)'"
op|'%'
op|'('
name|'box'
op|','
name|'line'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'STATUS complete'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ebStatus
dedent|''
name|'def'
name|'__ebStatus'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|','
name|'box'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'STATUS %s failed: %s'"
op|'%'
op|'('
name|'box'
op|','
name|'str'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_APPEND
dedent|''
name|'def'
name|'do_APPEND'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'mailbox'
op|','
name|'flags'
op|','
name|'date'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mailbox'
op|'='
name|'self'
op|'.'
name|'_parseMbox'
op|'('
name|'mailbox'
op|')'
newline|'\n'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'account'
op|'.'
name|'select'
op|','
name|'mailbox'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbAppendGotMailbox'
op|','
name|'tag'
op|','
name|'flags'
op|','
name|'date'
op|','
name|'message'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebAppendGotMailbox'
op|','
name|'tag'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbAppendGotMailbox
dedent|''
name|'def'
name|'_cbAppendGotMailbox'
op|'('
name|'self'
op|','
name|'mbox'
op|','
name|'tag'
op|','
name|'flags'
op|','
name|'date'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'mbox'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'[TRYCREATE] No such mailbox'"
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'mbox'
op|'.'
name|'addMessage'
op|'('
name|'message'
op|','
name|'flags'
op|','
name|'date'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbAppend'
op|','
name|'tag'
op|','
name|'mbox'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'__ebAppend'
op|','
name|'tag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebAppendGotMailbox
dedent|''
name|'def'
name|'_ebAppendGotMailbox'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|'"Server error encountered while opening mailbox."'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|auth_APPEND
dedent|''
name|'auth_APPEND'
op|'='
op|'('
name|'do_APPEND'
op|','
name|'arg_astring'
op|','
name|'opt_plist'
op|','
name|'opt_datetime'
op|','
nl|'\n'
name|'arg_literal'
op|')'
newline|'\n'
DECL|variable|select_APPEND
name|'select_APPEND'
op|'='
name|'auth_APPEND'
newline|'\n'
nl|'\n'
DECL|member|__cbAppend
name|'def'
name|'__cbAppend'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'tag'
op|','
name|'mbox'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
string|"'%d EXISTS'"
op|'%'
name|'mbox'
op|'.'
name|'getMessageCount'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'APPEND complete'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ebAppend
dedent|''
name|'def'
name|'__ebAppend'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'APPEND failed: '"
op|'+'
name|'str'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_CHECK
dedent|''
name|'def'
name|'do_CHECK'
op|'('
name|'self'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'checkpoint'
op|'('
op|')'
newline|'\n'
name|'if'
name|'d'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__cbCheck'
op|'('
name|'None'
op|','
name|'tag'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'addCallbacks'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__cbCheck'
op|','
nl|'\n'
name|'self'
op|'.'
name|'__ebCheck'
op|','
nl|'\n'
name|'callbackArgs'
op|'='
op|'('
name|'tag'
op|','
op|')'
op|','
nl|'\n'
name|'errbackArgs'
op|'='
op|'('
name|'tag'
op|','
op|')'
nl|'\n'
op|')'
newline|'\n'
DECL|variable|select_CHECK
dedent|''
dedent|''
name|'select_CHECK'
op|'='
op|'('
name|'do_CHECK'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cbCheck
name|'def'
name|'__cbCheck'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'CHECK completed'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ebCheck
dedent|''
name|'def'
name|'__ebCheck'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'CHECK failed: '"
op|'+'
name|'str'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|checkpoint
dedent|''
name|'def'
name|'checkpoint'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when the client issues a CHECK command.\n\n        This should perform any checkpoint operations required by the server.\n        It may be a long running operation, but may not block.  If it returns\n        a deferred, the client will only be informed of success (or failure)\n        when the deferred\'s callback (or errback) is invoked.\n        """'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|do_CLOSE
dedent|''
name|'def'
name|'do_CLOSE'
op|'('
name|'self'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'mbox'
op|'.'
name|'isWriteable'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'mbox'
op|'.'
name|'expunge'
op|')'
newline|'\n'
dedent|''
name|'cmbx'
op|'='
name|'ICloseableMailbox'
op|'('
name|'self'
op|'.'
name|'mbox'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'cmbx'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'d'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'result'
op|':'
name|'cmbx'
op|'.'
name|'close'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'='
name|'maybeDeferred'
op|'('
name|'cmbx'
op|'.'
name|'close'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'d'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'__cbClose'
op|','
name|'self'
op|'.'
name|'__ebClose'
op|','
op|'('
name|'tag'
op|','
op|')'
op|','
name|'None'
op|','
op|'('
name|'tag'
op|','
op|')'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__cbClose'
op|'('
name|'None'
op|','
name|'tag'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|select_CLOSE
dedent|''
dedent|''
name|'select_CLOSE'
op|'='
op|'('
name|'do_CLOSE'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cbClose
name|'def'
name|'__cbClose'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'CLOSE completed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mbox'
op|'.'
name|'removeListener'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mbox'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'auth'"
newline|'\n'
nl|'\n'
DECL|member|__ebClose
dedent|''
name|'def'
name|'__ebClose'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'CLOSE failed: '"
op|'+'
name|'str'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_EXPUNGE
dedent|''
name|'def'
name|'do_EXPUNGE'
op|'('
name|'self'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'mbox'
op|'.'
name|'isWriteable'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'mbox'
op|'.'
name|'expunge'
op|')'
op|'.'
name|'addCallbacks'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__cbExpunge'
op|','
name|'self'
op|'.'
name|'__ebExpunge'
op|','
op|'('
name|'tag'
op|','
op|')'
op|','
name|'None'
op|','
op|'('
name|'tag'
op|','
op|')'
op|','
name|'None'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'EXPUNGE ignored on read-only mailbox'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|select_EXPUNGE
dedent|''
dedent|''
name|'select_EXPUNGE'
op|'='
op|'('
name|'do_EXPUNGE'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cbExpunge
name|'def'
name|'__cbExpunge'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'e'
name|'in'
name|'result'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
string|"'%d EXPUNGE'"
op|'%'
name|'e'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'EXPUNGE completed'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ebExpunge
dedent|''
name|'def'
name|'__ebExpunge'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'EXPUNGE failed: '"
op|'+'
name|'str'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_SEARCH
dedent|''
name|'def'
name|'do_SEARCH'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'charset'
op|','
name|'query'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sm'
op|'='
name|'ISearchableMailbox'
op|'('
name|'self'
op|'.'
name|'mbox'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'sm'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'maybeDeferred'
op|'('
name|'sm'
op|'.'
name|'search'
op|','
name|'query'
op|','
name|'uid'
op|'='
name|'uid'
op|')'
op|'.'
name|'addCallbacks'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__cbSearch'
op|','
name|'self'
op|'.'
name|'__ebSearch'
op|','
nl|'\n'
op|'('
name|'tag'
op|','
name|'self'
op|'.'
name|'mbox'
op|','
name|'uid'
op|')'
op|','
name|'None'
op|','
op|'('
name|'tag'
op|','
op|')'
op|','
name|'None'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'='
name|'parseIdList'
op|'('
string|"'1:*'"
op|')'
newline|'\n'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'mbox'
op|'.'
name|'fetch'
op|','
name|'s'
op|','
name|'uid'
op|'='
name|'uid'
op|')'
op|'.'
name|'addCallbacks'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__cbManualSearch'
op|','
name|'self'
op|'.'
name|'__ebSearch'
op|','
nl|'\n'
op|'('
name|'tag'
op|','
name|'self'
op|'.'
name|'mbox'
op|','
name|'query'
op|','
name|'uid'
op|')'
op|','
name|'None'
op|','
op|'('
name|'tag'
op|','
op|')'
op|','
name|'None'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|select_SEARCH
dedent|''
dedent|''
name|'select_SEARCH'
op|'='
op|'('
name|'do_SEARCH'
op|','
name|'opt_charset'
op|','
name|'arg_searchkeys'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cbSearch
name|'def'
name|'__cbSearch'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'tag'
op|','
name|'mbox'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'uid'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'map'
op|'('
name|'mbox'
op|'.'
name|'getUID'
op|','
name|'result'
op|')'
newline|'\n'
dedent|''
name|'ids'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
op|'['
name|'str'
op|'('
name|'i'
op|')'
name|'for'
name|'i'
name|'in'
name|'result'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
string|"'SEARCH '"
op|'+'
name|'ids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'SEARCH completed'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__cbManualSearch
dedent|''
name|'def'
name|'__cbManualSearch'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'tag'
op|','
name|'mbox'
op|','
name|'query'
op|','
name|'uid'
op|','
nl|'\n'
name|'searchResults'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'searchResults'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'searchResults'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'i'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'lastSequenceId'
op|'='
name|'result'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'i'
op|','
op|'('
name|'id'
op|','
name|'msg'
op|')'
op|')'
name|'in'
name|'zip'
op|'('
name|'range'
op|'('
number|'5'
op|')'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
comment|'# searchFilter and singleSearchStep will mutate the query.  Dang.'
nl|'\n'
comment|'# Copy it here or else things will go poorly for subsequent'
nl|'\n'
comment|'# messages.'
nl|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_searchFilter'
op|'('
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'query'
op|')'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'lastSequenceId'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'uid'
op|':'
newline|'\n'
indent|'                    '
name|'searchResults'
op|'.'
name|'append'
op|'('
name|'str'
op|'('
name|'msg'
op|'.'
name|'getUID'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'searchResults'
op|'.'
name|'append'
op|'('
name|'str'
op|'('
name|'id'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'i'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
nl|'\n'
number|'0'
op|','
name|'self'
op|'.'
name|'__cbManualSearch'
op|','
name|'result'
op|','
name|'tag'
op|','
name|'mbox'
op|','
name|'query'
op|','
name|'uid'
op|','
nl|'\n'
name|'searchResults'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'searchResults'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
string|"'SEARCH '"
op|'+'
string|"' '"
op|'.'
name|'join'
op|'('
name|'searchResults'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'SEARCH completed'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_searchFilter
dedent|''
dedent|''
name|'def'
name|'_searchFilter'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'lastSequenceId'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Pop search terms from the beginning of C{query} until there are none\n        left and apply them to the given message.\n\n        @param query: A list representing the parsed form of the search query.\n\n        @param id: The sequence number of the message being checked.\n\n        @param msg: The message being checked.\n\n        @param lastSequenceId: The highest sequence number of any message in\n            the mailbox being searched.\n\n        @return: Boolean indicating whether all of the query terms match the\n            message.\n        """'
newline|'\n'
name|'while'
name|'query'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_singleSearchStep'
op|'('
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'lastSequenceId'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_singleSearchStep
dedent|''
name|'def'
name|'_singleSearchStep'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'lastSequenceId'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Pop one search term from the beginning of C{query} (possibly more than\n        one element) and return whether it matches the given message.\n\n        @param query: A list representing the parsed form of the search query.\n\n        @param id: The sequence number of the message being checked.\n\n        @param msg: The message being checked.\n\n        @param lastSequenceId: The highest sequence number of any message in\n            the mailbox being searched.\n\n        @return: Boolean indicating whether the query term matched the message.\n        """'
newline|'\n'
name|'q'
op|'='
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'q'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_searchFilter'
op|'('
name|'q'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'lastSequenceId'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'='
name|'q'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'c'
op|'['
op|':'
number|'1'
op|']'
op|'.'
name|'isalpha'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# A search term may be a word like ALL, ANSWERED, BCC, etc (see'
nl|'\n'
comment|'# below) or it may be a message sequence set.  Here we'
nl|'\n'
comment|'# recognize a message sequence set "N:M".'
nl|'\n'
indent|'                '
name|'messageSet'
op|'='
name|'parseIdList'
op|'('
name|'c'
op|')'
newline|'\n'
name|'messageSet'
op|'.'
name|'last'
op|'='
name|'lastSequenceId'
newline|'\n'
name|'return'
name|'id'
name|'in'
name|'messageSet'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'search_'"
op|'+'
name|'c'
op|')'
newline|'\n'
name|'if'
name|'f'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'c'
name|'in'
name|'self'
op|'.'
name|'_requiresLastSequenceId'
op|':'
newline|'\n'
indent|'                        '
name|'result'
op|'='
name|'f'
op|'('
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'lastSequenceId'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'result'
op|'='
name|'f'
op|'('
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'result'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|search_ALL
dedent|''
name|'def'
name|'search_ALL'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|search_ANSWERED
dedent|''
name|'def'
name|'search_ANSWERED'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\\\Answered'"
name|'in'
name|'msg'
op|'.'
name|'getFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_BCC
dedent|''
name|'def'
name|'search_BCC'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bcc'
op|'='
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'False'
op|','
string|"'bcc'"
op|')'
op|'.'
name|'get'
op|'('
string|"'bcc'"
op|','
string|"''"
op|')'
newline|'\n'
name|'return'
name|'bcc'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'find'
op|'('
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
op|'!='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|search_BEFORE
dedent|''
name|'def'
name|'search_BEFORE'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'date'
op|'='
name|'parseTime'
op|'('
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
name|'return'
name|'rfc822'
op|'.'
name|'parsedate'
op|'('
name|'msg'
op|'.'
name|'getInternalDate'
op|'('
op|')'
op|')'
op|'<'
name|'date'
newline|'\n'
nl|'\n'
DECL|member|search_BODY
dedent|''
name|'def'
name|'search_BODY'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'body'
op|'='
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'return'
name|'text'
op|'.'
name|'strFile'
op|'('
name|'body'
op|','
name|'msg'
op|'.'
name|'getBodyFile'
op|'('
op|')'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_CC
dedent|''
name|'def'
name|'search_CC'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cc'
op|'='
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'False'
op|','
string|"'cc'"
op|')'
op|'.'
name|'get'
op|'('
string|"'cc'"
op|','
string|"''"
op|')'
newline|'\n'
name|'return'
name|'cc'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'find'
op|'('
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
op|'!='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|search_DELETED
dedent|''
name|'def'
name|'search_DELETED'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\\\Deleted'"
name|'in'
name|'msg'
op|'.'
name|'getFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_DRAFT
dedent|''
name|'def'
name|'search_DRAFT'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\\\Draft'"
name|'in'
name|'msg'
op|'.'
name|'getFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_FLAGGED
dedent|''
name|'def'
name|'search_FLAGGED'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\\\Flagged'"
name|'in'
name|'msg'
op|'.'
name|'getFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_FROM
dedent|''
name|'def'
name|'search_FROM'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fm'
op|'='
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'False'
op|','
string|"'from'"
op|')'
op|'.'
name|'get'
op|'('
string|"'from'"
op|','
string|"''"
op|')'
newline|'\n'
name|'return'
name|'fm'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'find'
op|'('
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
op|'!='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|search_HEADER
dedent|''
name|'def'
name|'search_HEADER'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hdr'
op|'='
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'hdr'
op|'='
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'False'
op|','
name|'hdr'
op|')'
op|'.'
name|'get'
op|'('
name|'hdr'
op|','
string|"''"
op|')'
newline|'\n'
name|'return'
name|'hdr'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'find'
op|'('
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
op|'!='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|search_KEYWORD
dedent|''
name|'def'
name|'search_KEYWORD'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|search_LARGER
dedent|''
name|'def'
name|'search_LARGER'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
op|'<'
name|'msg'
op|'.'
name|'getSize'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_NEW
dedent|''
name|'def'
name|'search_NEW'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\\\Recent'"
name|'in'
name|'msg'
op|'.'
name|'getFlags'
op|'('
op|')'
name|'and'
string|"'\\\\Seen'"
name|'not'
name|'in'
name|'msg'
op|'.'
name|'getFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_NOT
dedent|''
name|'def'
name|'search_NOT'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'lastSequenceId'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'not'
name|'self'
op|'.'
name|'_singleSearchStep'
op|'('
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'lastSequenceId'
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_OLD
dedent|''
name|'def'
name|'search_OLD'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\\\Recent'"
name|'not'
name|'in'
name|'msg'
op|'.'
name|'getFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_ON
dedent|''
name|'def'
name|'search_ON'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'date'
op|'='
name|'parseTime'
op|'('
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
name|'return'
name|'rfc822'
op|'.'
name|'parsedate'
op|'('
name|'msg'
op|'.'
name|'getInternalDate'
op|'('
op|')'
op|')'
op|'=='
name|'date'
newline|'\n'
nl|'\n'
DECL|member|search_OR
dedent|''
name|'def'
name|'search_OR'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'lastSequenceId'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'a'
op|'='
name|'self'
op|'.'
name|'_singleSearchStep'
op|'('
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'lastSequenceId'
op|')'
newline|'\n'
name|'b'
op|'='
name|'self'
op|'.'
name|'_singleSearchStep'
op|'('
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'lastSequenceId'
op|')'
newline|'\n'
name|'return'
name|'a'
name|'or'
name|'b'
newline|'\n'
nl|'\n'
DECL|member|search_RECENT
dedent|''
name|'def'
name|'search_RECENT'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\\\Recent'"
name|'in'
name|'msg'
op|'.'
name|'getFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_SEEN
dedent|''
name|'def'
name|'search_SEEN'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\\\Seen'"
name|'in'
name|'msg'
op|'.'
name|'getFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_SENTBEFORE
dedent|''
name|'def'
name|'search_SENTBEFORE'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns C{True} if the message date is earlier than the query date.\n\n        @type query: A C{list} of C{str}\n        @param query: A list whose first element starts with a stringified date\n            that is a fragment of an L{imap4.Query()}. The date must be in the\n            format \'DD-Mon-YYYY\', for example \'03-March-2003\' or \'03-Mar-2003\'.\n\n        @type msg: Provider of L{imap4.IMessage}\n        """'
newline|'\n'
name|'date'
op|'='
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'False'
op|','
string|"'date'"
op|')'
op|'.'
name|'get'
op|'('
string|"'date'"
op|','
string|"''"
op|')'
newline|'\n'
name|'date'
op|'='
name|'rfc822'
op|'.'
name|'parsedate'
op|'('
name|'date'
op|')'
newline|'\n'
name|'return'
name|'date'
op|'<'
name|'parseTime'
op|'('
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_SENTON
dedent|''
name|'def'
name|'search_SENTON'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns C{True} if the message date is the same as the query date.\n\n        @type query: A C{list} of C{str}\n        @param query: A list whose first element starts with a stringified date\n            that is a fragment of an L{imap4.Query()}. The date must be in the\n            format \'DD-Mon-YYYY\', for example \'03-March-2003\' or \'03-Mar-2003\'.\n\n        @type msg: Provider of L{imap4.IMessage}\n        """'
newline|'\n'
name|'date'
op|'='
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'False'
op|','
string|"'date'"
op|')'
op|'.'
name|'get'
op|'('
string|"'date'"
op|','
string|"''"
op|')'
newline|'\n'
name|'date'
op|'='
name|'rfc822'
op|'.'
name|'parsedate'
op|'('
name|'date'
op|')'
newline|'\n'
name|'return'
name|'date'
op|'['
op|':'
number|'3'
op|']'
op|'=='
name|'parseTime'
op|'('
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
op|'['
op|':'
number|'3'
op|']'
newline|'\n'
nl|'\n'
DECL|member|search_SENTSINCE
dedent|''
name|'def'
name|'search_SENTSINCE'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns C{True} if the message date is later than the query date.\n\n        @type query: A C{list} of C{str}\n        @param query: A list whose first element starts with a stringified date\n            that is a fragment of an L{imap4.Query()}. The date must be in the\n            format \'DD-Mon-YYYY\', for example \'03-March-2003\' or \'03-Mar-2003\'.\n\n        @type msg: Provider of L{imap4.IMessage}\n        """'
newline|'\n'
name|'date'
op|'='
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'False'
op|','
string|"'date'"
op|')'
op|'.'
name|'get'
op|'('
string|"'date'"
op|','
string|"''"
op|')'
newline|'\n'
name|'date'
op|'='
name|'rfc822'
op|'.'
name|'parsedate'
op|'('
name|'date'
op|')'
newline|'\n'
name|'return'
name|'date'
op|'>'
name|'parseTime'
op|'('
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_SINCE
dedent|''
name|'def'
name|'search_SINCE'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'date'
op|'='
name|'parseTime'
op|'('
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
name|'return'
name|'rfc822'
op|'.'
name|'parsedate'
op|'('
name|'msg'
op|'.'
name|'getInternalDate'
op|'('
op|')'
op|')'
op|'>'
name|'date'
newline|'\n'
nl|'\n'
DECL|member|search_SMALLER
dedent|''
name|'def'
name|'search_SMALLER'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
op|'>'
name|'msg'
op|'.'
name|'getSize'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_SUBJECT
dedent|''
name|'def'
name|'search_SUBJECT'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'subj'
op|'='
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'False'
op|','
string|"'subject'"
op|')'
op|'.'
name|'get'
op|'('
string|"'subject'"
op|','
string|"''"
op|')'
newline|'\n'
name|'return'
name|'subj'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'find'
op|'('
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
op|'!='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|search_TEXT
dedent|''
name|'def'
name|'search_TEXT'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
comment|'# XXX - This must search headers too'
nl|'\n'
indent|'        '
name|'body'
op|'='
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'return'
name|'text'
op|'.'
name|'strFile'
op|'('
name|'body'
op|','
name|'msg'
op|'.'
name|'getBodyFile'
op|'('
op|')'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_TO
dedent|''
name|'def'
name|'search_TO'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'to'
op|'='
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'False'
op|','
string|"'to'"
op|')'
op|'.'
name|'get'
op|'('
string|"'to'"
op|','
string|"''"
op|')'
newline|'\n'
name|'return'
name|'to'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'find'
op|'('
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
op|'!='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|search_UID
dedent|''
name|'def'
name|'search_UID'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'m'
op|'='
name|'parseIdList'
op|'('
name|'c'
op|')'
newline|'\n'
name|'return'
name|'msg'
op|'.'
name|'getUID'
op|'('
op|')'
name|'in'
name|'m'
newline|'\n'
nl|'\n'
DECL|member|search_UNANSWERED
dedent|''
name|'def'
name|'search_UNANSWERED'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\\\Answered'"
name|'not'
name|'in'
name|'msg'
op|'.'
name|'getFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_UNDELETED
dedent|''
name|'def'
name|'search_UNDELETED'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\\\Deleted'"
name|'not'
name|'in'
name|'msg'
op|'.'
name|'getFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_UNDRAFT
dedent|''
name|'def'
name|'search_UNDRAFT'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\\\Draft'"
name|'not'
name|'in'
name|'msg'
op|'.'
name|'getFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_UNFLAGGED
dedent|''
name|'def'
name|'search_UNFLAGGED'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\\\Flagged'"
name|'not'
name|'in'
name|'msg'
op|'.'
name|'getFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_UNKEYWORD
dedent|''
name|'def'
name|'search_UNKEYWORD'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'query'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|search_UNSEEN
dedent|''
name|'def'
name|'search_UNSEEN'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\\\Seen'"
name|'not'
name|'in'
name|'msg'
op|'.'
name|'getFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ebSearch
dedent|''
name|'def'
name|'__ebSearch'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'SEARCH failed: '"
op|'+'
name|'str'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_FETCH
dedent|''
name|'def'
name|'do_FETCH'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'messages'
op|','
name|'query'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'query'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_oldTimeout'
op|'='
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'mbox'
op|'.'
name|'fetch'
op|','
name|'messages'
op|','
name|'uid'
op|'='
name|'uid'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'iter'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbFetch'
op|','
name|'tag'
op|','
name|'query'
op|','
name|'uid'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'__ebFetch'
op|','
name|'tag'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'FETCH complete'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|select_FETCH
dedent|''
dedent|''
name|'select_FETCH'
op|'='
op|'('
name|'do_FETCH'
op|','
name|'arg_seqset'
op|','
name|'arg_fetchatt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cbFetch
name|'def'
name|'__cbFetch'
op|'('
name|'self'
op|','
name|'results'
op|','
name|'tag'
op|','
name|'query'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'blocked'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'blocked'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'id'
op|','
name|'msg'
op|'='
name|'results'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
comment|'# The idle timeout was suspended while we delivered results,'
nl|'\n'
comment|'# restore it now.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'_oldTimeout'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'_oldTimeout'
newline|'\n'
nl|'\n'
comment|'# All results have been processed, deliver completion notification.'
nl|'\n'
nl|'\n'
comment|'# It\'s important to run this *after* resetting the timeout to "rig'
nl|'\n'
comment|'# a race" in some test code. writing to the transport will'
nl|'\n'
comment|'# synchronously call test code, which synchronously loses the'
nl|'\n'
comment|'# connection, calling our connectionLost method, which cancels the'
nl|'\n'
comment|'# timeout. We want to make sure that timeout is cancelled *after*'
nl|'\n'
comment|'# we reset it above, so that the final state is no timed'
nl|'\n'
comment|'# calls. This avoids reactor uncleanliness errors in the test'
nl|'\n'
comment|'# suite.'
nl|'\n'
comment|'# XXX: Perhaps loopback should be fixed to not call the user code'
nl|'\n'
comment|'# synchronously in transport.write?'
nl|'\n'
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'FETCH completed'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Instance state is now consistent again (ie, it is as though'
nl|'\n'
comment|'# the fetch command never ran), so allow any pending blocked'
nl|'\n'
comment|'# commands to execute.'
nl|'\n'
name|'self'
op|'.'
name|'_unblock'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'spewMessage'
op|'('
name|'id'
op|','
name|'msg'
op|','
name|'query'
op|','
name|'uid'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'__cbFetch'
op|'('
name|'results'
op|','
name|'tag'
op|','
name|'query'
op|','
name|'uid'
op|')'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'__ebSpewMessage'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ebSpewMessage
dedent|''
dedent|''
name|'def'
name|'__ebSpewMessage'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
comment|'# This indicates a programming error.'
nl|'\n'
comment|"# There's no reliable way to indicate anything to the client, since we"
nl|'\n'
comment|'# may have already written an arbitrary amount of data in response to'
nl|'\n'
comment|'# the command.'
nl|'\n'
indent|'        '
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|spew_envelope
dedent|''
name|'def'
name|'spew_envelope'
op|'('
name|'self'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'_w'
op|'='
name|'None'
op|','
name|'_f'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'_w'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'_w'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
newline|'\n'
dedent|''
name|'_w'
op|'('
string|"'ENVELOPE '"
op|'+'
name|'collapseNestedLists'
op|'('
op|'['
name|'getEnvelope'
op|'('
name|'msg'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|spew_flags
dedent|''
name|'def'
name|'spew_flags'
op|'('
name|'self'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'_w'
op|'='
name|'None'
op|','
name|'_f'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'_w'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'_w'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
newline|'\n'
dedent|''
name|'_w'
op|'('
string|"'FLAGS '"
op|'+'
string|"'(%s)'"
op|'%'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
name|'msg'
op|'.'
name|'getFlags'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|spew_internaldate
dedent|''
name|'def'
name|'spew_internaldate'
op|'('
name|'self'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'_w'
op|'='
name|'None'
op|','
name|'_f'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'_w'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'_w'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
newline|'\n'
dedent|''
name|'idate'
op|'='
name|'msg'
op|'.'
name|'getInternalDate'
op|'('
op|')'
newline|'\n'
name|'ttup'
op|'='
name|'rfc822'
op|'.'
name|'parsedate_tz'
op|'('
name|'idate'
op|')'
newline|'\n'
name|'if'
name|'ttup'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"%d:%r: unpareseable internaldate: %r"'
op|'%'
op|'('
name|'id'
op|','
name|'msg'
op|','
name|'idate'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'IMAP4Exception'
op|'('
string|'"Internal failure generating INTERNALDATE"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'odate'
op|'='
name|'time'
op|'.'
name|'strftime'
op|'('
string|'"%d-%b-%Y %H:%M:%S "'
op|','
name|'ttup'
op|'['
op|':'
number|'9'
op|']'
op|')'
newline|'\n'
name|'if'
name|'ttup'
op|'['
number|'9'
op|']'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'odate'
op|'='
name|'odate'
op|'+'
string|'"+0000"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ttup'
op|'['
number|'9'
op|']'
op|'>='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'sign'
op|'='
string|'"+"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'sign'
op|'='
string|'"-"'
newline|'\n'
dedent|''
name|'odate'
op|'='
name|'odate'
op|'+'
name|'sign'
op|'+'
name|'string'
op|'.'
name|'zfill'
op|'('
name|'str'
op|'('
op|'('
op|'('
name|'abs'
op|'('
name|'ttup'
op|'['
number|'9'
op|']'
op|')'
op|'/'
number|'3600'
op|')'
op|'*'
number|'100'
op|'+'
op|'('
name|'abs'
op|'('
name|'ttup'
op|'['
number|'9'
op|']'
op|')'
op|'%'
number|'3600'
op|')'
op|'/'
number|'60'
op|')'
op|')'
op|','
number|'4'
op|')'
newline|'\n'
dedent|''
name|'_w'
op|'('
string|"'INTERNALDATE '"
op|'+'
name|'_quote'
op|'('
name|'odate'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|spew_rfc822header
dedent|''
name|'def'
name|'spew_rfc822header'
op|'('
name|'self'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'_w'
op|'='
name|'None'
op|','
name|'_f'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'_w'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'_w'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
newline|'\n'
dedent|''
name|'hdrs'
op|'='
name|'_formatHeaders'
op|'('
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'True'
op|')'
op|')'
newline|'\n'
name|'_w'
op|'('
string|"'RFC822.HEADER '"
op|'+'
name|'_literal'
op|'('
name|'hdrs'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|spew_rfc822text
dedent|''
name|'def'
name|'spew_rfc822text'
op|'('
name|'self'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'_w'
op|'='
name|'None'
op|','
name|'_f'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'_w'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'_w'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
newline|'\n'
dedent|''
name|'_w'
op|'('
string|"'RFC822.TEXT '"
op|')'
newline|'\n'
name|'_f'
op|'('
op|')'
newline|'\n'
name|'return'
name|'FileProducer'
op|'('
name|'msg'
op|'.'
name|'getBodyFile'
op|'('
op|')'
nl|'\n'
op|')'
op|'.'
name|'beginProducing'
op|'('
name|'self'
op|'.'
name|'transport'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|spew_rfc822size
dedent|''
name|'def'
name|'spew_rfc822size'
op|'('
name|'self'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'_w'
op|'='
name|'None'
op|','
name|'_f'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'_w'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'_w'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
newline|'\n'
dedent|''
name|'_w'
op|'('
string|"'RFC822.SIZE '"
op|'+'
name|'str'
op|'('
name|'msg'
op|'.'
name|'getSize'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|spew_rfc822
dedent|''
name|'def'
name|'spew_rfc822'
op|'('
name|'self'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'_w'
op|'='
name|'None'
op|','
name|'_f'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'_w'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'_w'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
newline|'\n'
dedent|''
name|'_w'
op|'('
string|"'RFC822 '"
op|')'
newline|'\n'
name|'_f'
op|'('
op|')'
newline|'\n'
name|'mf'
op|'='
name|'IMessageFile'
op|'('
name|'msg'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'mf'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'FileProducer'
op|'('
name|'mf'
op|'.'
name|'open'
op|'('
op|')'
nl|'\n'
op|')'
op|'.'
name|'beginProducing'
op|'('
name|'self'
op|'.'
name|'transport'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'MessageProducer'
op|'('
name|'msg'
op|','
name|'None'
op|','
name|'self'
op|'.'
name|'_scheduler'
nl|'\n'
op|')'
op|'.'
name|'beginProducing'
op|'('
name|'self'
op|'.'
name|'transport'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|spew_uid
dedent|''
name|'def'
name|'spew_uid'
op|'('
name|'self'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'_w'
op|'='
name|'None'
op|','
name|'_f'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'_w'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'_w'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
newline|'\n'
dedent|''
name|'_w'
op|'('
string|"'UID '"
op|'+'
name|'str'
op|'('
name|'msg'
op|'.'
name|'getUID'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|spew_bodystructure
dedent|''
name|'def'
name|'spew_bodystructure'
op|'('
name|'self'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'_w'
op|'='
name|'None'
op|','
name|'_f'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'_w'
op|'('
string|"'BODYSTRUCTURE '"
op|'+'
name|'collapseNestedLists'
op|'('
op|'['
name|'getBodyStructure'
op|'('
name|'msg'
op|','
name|'True'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|spew_body
dedent|''
name|'def'
name|'spew_body'
op|'('
name|'self'
op|','
name|'part'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'_w'
op|'='
name|'None'
op|','
name|'_f'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'_w'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'_w'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
newline|'\n'
dedent|''
name|'for'
name|'p'
name|'in'
name|'part'
op|'.'
name|'part'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'msg'
op|'.'
name|'isMultipart'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'msg'
op|'.'
name|'getSubPart'
op|'('
name|'p'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'p'
op|'>'
number|'0'
op|':'
newline|'\n'
comment|'# Non-multipart messages have an implicit first part but no'
nl|'\n'
comment|'# other parts - reject any request for any other part.'
nl|'\n'
indent|'                '
name|'raise'
name|'TypeError'
op|'('
string|'"Requested subpart of non-multipart message"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'part'
op|'.'
name|'header'
op|':'
newline|'\n'
indent|'            '
name|'hdrs'
op|'='
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'part'
op|'.'
name|'header'
op|'.'
name|'negate'
op|','
op|'*'
name|'part'
op|'.'
name|'header'
op|'.'
name|'fields'
op|')'
newline|'\n'
name|'hdrs'
op|'='
name|'_formatHeaders'
op|'('
name|'hdrs'
op|')'
newline|'\n'
name|'_w'
op|'('
name|'str'
op|'('
name|'part'
op|')'
op|'+'
string|"' '"
op|'+'
name|'_literal'
op|'('
name|'hdrs'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'part'
op|'.'
name|'text'
op|':'
newline|'\n'
indent|'            '
name|'_w'
op|'('
name|'str'
op|'('
name|'part'
op|')'
op|'+'
string|"' '"
op|')'
newline|'\n'
name|'_f'
op|'('
op|')'
newline|'\n'
name|'return'
name|'FileProducer'
op|'('
name|'msg'
op|'.'
name|'getBodyFile'
op|'('
op|')'
nl|'\n'
op|')'
op|'.'
name|'beginProducing'
op|'('
name|'self'
op|'.'
name|'transport'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'part'
op|'.'
name|'mime'
op|':'
newline|'\n'
indent|'            '
name|'hdrs'
op|'='
name|'_formatHeaders'
op|'('
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'True'
op|')'
op|')'
newline|'\n'
name|'_w'
op|'('
name|'str'
op|'('
name|'part'
op|')'
op|'+'
string|"' '"
op|'+'
name|'_literal'
op|'('
name|'hdrs'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'part'
op|'.'
name|'empty'
op|':'
newline|'\n'
indent|'            '
name|'_w'
op|'('
name|'str'
op|'('
name|'part'
op|')'
op|'+'
string|"' '"
op|')'
newline|'\n'
name|'_f'
op|'('
op|')'
newline|'\n'
name|'if'
name|'part'
op|'.'
name|'part'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'FileProducer'
op|'('
name|'msg'
op|'.'
name|'getBodyFile'
op|'('
op|')'
nl|'\n'
op|')'
op|'.'
name|'beginProducing'
op|'('
name|'self'
op|'.'
name|'transport'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'mf'
op|'='
name|'IMessageFile'
op|'('
name|'msg'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'mf'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'FileProducer'
op|'('
name|'mf'
op|'.'
name|'open'
op|'('
op|')'
op|')'
op|'.'
name|'beginProducing'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'MessageProducer'
op|'('
name|'msg'
op|','
name|'None'
op|','
name|'self'
op|'.'
name|'_scheduler'
op|')'
op|'.'
name|'beginProducing'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'_w'
op|'('
string|"'BODY '"
op|'+'
name|'collapseNestedLists'
op|'('
op|'['
name|'getBodyStructure'
op|'('
name|'msg'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|spewMessage
dedent|''
dedent|''
name|'def'
name|'spewMessage'
op|'('
name|'self'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'query'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'wbuf'
op|'='
name|'WriteBuffer'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'write'
op|'='
name|'wbuf'
op|'.'
name|'write'
newline|'\n'
name|'flush'
op|'='
name|'wbuf'
op|'.'
name|'flush'
newline|'\n'
DECL|function|start
name|'def'
name|'start'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'write'
op|'('
string|"'* %d FETCH ('"
op|'%'
op|'('
name|'id'
op|','
op|')'
op|')'
newline|'\n'
DECL|function|finish
dedent|''
name|'def'
name|'finish'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'write'
op|'('
string|"')\\r\\n'"
op|')'
newline|'\n'
DECL|function|space
dedent|''
name|'def'
name|'space'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'write'
op|'('
string|"' '"
op|')'
newline|'\n'
nl|'\n'
DECL|function|spew
dedent|''
name|'def'
name|'spew'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'seenUID'
op|'='
name|'False'
newline|'\n'
name|'start'
op|'('
op|')'
newline|'\n'
name|'for'
name|'part'
name|'in'
name|'query'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'part'
op|'.'
name|'type'
op|'=='
string|"'uid'"
op|':'
newline|'\n'
indent|'                    '
name|'seenUID'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'part'
op|'.'
name|'type'
op|'=='
string|"'body'"
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'self'
op|'.'
name|'spew_body'
op|'('
name|'part'
op|','
name|'id'
op|','
name|'msg'
op|','
name|'write'
op|','
name|'flush'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'f'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'spew_'"
op|'+'
name|'part'
op|'.'
name|'type'
op|')'
newline|'\n'
name|'yield'
name|'f'
op|'('
name|'id'
op|','
name|'msg'
op|','
name|'write'
op|','
name|'flush'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'part'
name|'is'
name|'not'
name|'query'
op|'['
op|'-'
number|'1'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'space'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'uid'
name|'and'
name|'not'
name|'seenUID'
op|':'
newline|'\n'
indent|'                '
name|'space'
op|'('
op|')'
newline|'\n'
name|'yield'
name|'self'
op|'.'
name|'spew_uid'
op|'('
name|'id'
op|','
name|'msg'
op|','
name|'write'
op|','
name|'flush'
op|')'
newline|'\n'
dedent|''
name|'finish'
op|'('
op|')'
newline|'\n'
name|'flush'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_scheduler'
op|'('
name|'spew'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ebFetch
dedent|''
name|'def'
name|'__ebFetch'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'_oldTimeout'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'_oldTimeout'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'FETCH failed: '"
op|'+'
name|'str'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_STORE
dedent|''
name|'def'
name|'do_STORE'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'messages'
op|','
name|'mode'
op|','
name|'flags'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mode'
op|'='
name|'mode'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'silent'
op|'='
name|'mode'
op|'.'
name|'endswith'
op|'('
string|"'SILENT'"
op|')'
newline|'\n'
name|'if'
name|'mode'
op|'.'
name|'startswith'
op|'('
string|"'+'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mode'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'mode'
op|'.'
name|'startswith'
op|'('
string|"'-'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mode'
op|'='
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'mode'
op|'='
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'mbox'
op|'.'
name|'store'
op|','
name|'messages'
op|','
name|'flags'
op|','
name|'mode'
op|','
name|'uid'
op|'='
name|'uid'
op|')'
op|'.'
name|'addCallbacks'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__cbStore'
op|','
name|'self'
op|'.'
name|'__ebStore'
op|','
op|'('
name|'tag'
op|','
name|'self'
op|'.'
name|'mbox'
op|','
name|'uid'
op|','
name|'silent'
op|')'
op|','
name|'None'
op|','
op|'('
name|'tag'
op|','
op|')'
op|','
name|'None'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|select_STORE
dedent|''
name|'select_STORE'
op|'='
op|'('
name|'do_STORE'
op|','
name|'arg_seqset'
op|','
name|'arg_atom'
op|','
name|'arg_flaglist'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cbStore
name|'def'
name|'__cbStore'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'tag'
op|','
name|'mbox'
op|','
name|'uid'
op|','
name|'silent'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'result'
name|'and'
name|'not'
name|'silent'
op|':'
newline|'\n'
indent|'              '
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
name|'result'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                  '
name|'if'
name|'uid'
op|':'
newline|'\n'
indent|'                      '
name|'uidstr'
op|'='
string|"' UID %d'"
op|'%'
name|'mbox'
op|'.'
name|'getUID'
op|'('
name|'k'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                      '
name|'uidstr'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
string|"'%d FETCH (FLAGS (%s)%s)'"
op|'%'
nl|'\n'
op|'('
name|'k'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
name|'v'
op|')'
op|','
name|'uidstr'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'STORE completed'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ebStore
dedent|''
name|'def'
name|'__ebStore'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'Server error: '"
op|'+'
name|'str'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_COPY
dedent|''
name|'def'
name|'do_COPY'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'messages'
op|','
name|'mailbox'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mailbox'
op|'='
name|'self'
op|'.'
name|'_parseMbox'
op|'('
name|'mailbox'
op|')'
newline|'\n'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'account'
op|'.'
name|'select'
op|','
name|'mailbox'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbCopySelectedMailbox'
op|','
name|'tag'
op|','
name|'messages'
op|','
name|'mailbox'
op|','
name|'uid'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebCopySelectedMailbox'
op|','
name|'tag'
nl|'\n'
op|')'
newline|'\n'
DECL|variable|select_COPY
dedent|''
name|'select_COPY'
op|'='
op|'('
name|'do_COPY'
op|','
name|'arg_seqset'
op|','
name|'arg_astring'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbCopySelectedMailbox
name|'def'
name|'_cbCopySelectedMailbox'
op|'('
name|'self'
op|','
name|'mbox'
op|','
name|'tag'
op|','
name|'messages'
op|','
name|'mailbox'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'mbox'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'No such mailbox: '"
op|'+'
name|'mailbox'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'mbox'
op|'.'
name|'fetch'
op|','
name|'messages'
op|','
name|'uid'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbCopy'
op|','
name|'tag'
op|','
name|'mbox'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbCopied'
op|','
name|'tag'
op|','
name|'mbox'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'__ebCopy'
op|','
name|'tag'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebCopySelectedMailbox
dedent|''
dedent|''
name|'def'
name|'_ebCopySelectedMailbox'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'Server error: '"
op|'+'
name|'str'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cbCopy
dedent|''
name|'def'
name|'__cbCopy'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'tag'
op|','
name|'mbox'
op|')'
op|':'
newline|'\n'
comment|'# XXX - This should handle failures with a rollback or something'
nl|'\n'
indent|'        '
name|'addedDeferreds'
op|'='
op|'['
op|']'
newline|'\n'
name|'addedIDs'
op|'='
op|'['
op|']'
newline|'\n'
name|'failures'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'fastCopyMbox'
op|'='
name|'IMessageCopier'
op|'('
name|'mbox'
op|','
name|'None'
op|')'
newline|'\n'
name|'for'
op|'('
name|'id'
op|','
name|'msg'
op|')'
name|'in'
name|'messages'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'fastCopyMbox'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'='
name|'maybeDeferred'
op|'('
name|'fastCopyMbox'
op|'.'
name|'copy'
op|','
name|'msg'
op|')'
newline|'\n'
name|'addedDeferreds'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
comment|'# XXX - The following should be an implementation of IMessageCopier.copy'
nl|'\n'
comment|'# on an IMailbox->IMessageCopier adapter.'
nl|'\n'
nl|'\n'
dedent|''
name|'flags'
op|'='
name|'msg'
op|'.'
name|'getFlags'
op|'('
op|')'
newline|'\n'
name|'date'
op|'='
name|'msg'
op|'.'
name|'getInternalDate'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'body'
op|'='
name|'IMessageFile'
op|'('
name|'msg'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'body'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'bodyFile'
op|'='
name|'body'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'maybeDeferred'
op|'('
name|'mbox'
op|'.'
name|'addMessage'
op|','
name|'bodyFile'
op|','
name|'flags'
op|','
name|'date'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|function|rewind
indent|'                '
name|'def'
name|'rewind'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'return'
name|'f'
newline|'\n'
dedent|''
name|'buffer'
op|'='
name|'tempfile'
op|'.'
name|'TemporaryFile'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'MessageProducer'
op|'('
name|'msg'
op|','
name|'buffer'
op|','
name|'self'
op|'.'
name|'_scheduler'
nl|'\n'
op|')'
op|'.'
name|'beginProducing'
op|'('
name|'None'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|','
name|'b'
op|'='
name|'buffer'
op|','
name|'f'
op|'='
name|'flags'
op|','
name|'d'
op|'='
name|'date'
op|':'
name|'mbox'
op|'.'
name|'addMessage'
op|'('
name|'rewind'
op|'('
name|'b'
op|')'
op|','
name|'f'
op|','
name|'d'
op|')'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'addedDeferreds'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'addedDeferreds'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cbCopied
dedent|''
name|'def'
name|'__cbCopied'
op|'('
name|'self'
op|','
name|'deferredIds'
op|','
name|'tag'
op|','
name|'mbox'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ids'
op|'='
op|'['
op|']'
newline|'\n'
name|'failures'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'status'
op|','
name|'result'
op|')'
name|'in'
name|'deferredIds'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'status'
op|':'
newline|'\n'
indent|'                '
name|'ids'
op|'.'
name|'append'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'failures'
op|'.'
name|'append'
op|'('
name|'result'
op|'.'
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'failures'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendNegativeResponse'
op|'('
name|'tag'
op|','
string|"'[ALERT] Some messages were not copied'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendPositiveResponse'
op|'('
name|'tag'
op|','
string|"'COPY completed'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ebCopy
dedent|''
dedent|''
name|'def'
name|'__ebCopy'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendBadResponse'
op|'('
name|'tag'
op|','
string|"'COPY failed:'"
op|'+'
name|'str'
op|'('
name|'failure'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_UID
dedent|''
name|'def'
name|'do_UID'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'command'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'command'
op|'='
name|'command'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'command'
name|'not'
name|'in'
op|'('
string|"'COPY'"
op|','
string|"'FETCH'"
op|','
string|"'STORE'"
op|','
string|"'SEARCH'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalClientResponse'
op|'('
name|'command'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'dispatchCommand'
op|'('
name|'tag'
op|','
name|'command'
op|','
name|'line'
op|','
name|'uid'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|select_UID
dedent|''
name|'select_UID'
op|'='
op|'('
name|'do_UID'
op|','
name|'arg_atom'
op|','
name|'arg_line'
op|')'
newline|'\n'
comment|'#'
nl|'\n'
comment|'# IMailboxListener implementation'
nl|'\n'
comment|'#'
nl|'\n'
DECL|member|modeChanged
name|'def'
name|'modeChanged'
op|'('
name|'self'
op|','
name|'writeable'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'writeable'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
name|'message'
op|'='
string|"'[READ-WRITE]'"
op|','
name|'async'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
name|'message'
op|'='
string|"'[READ-ONLY]'"
op|','
name|'async'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|flagsChanged
dedent|''
dedent|''
name|'def'
name|'flagsChanged'
op|'('
name|'self'
op|','
name|'newFlags'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
op|'('
name|'mId'
op|','
name|'flags'
op|')'
name|'in'
name|'newFlags'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|"'%d FETCH (FLAGS (%s))'"
op|'%'
op|'('
name|'mId'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
name|'flags'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
name|'msg'
op|','
name|'async'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|newMessages
dedent|''
dedent|''
name|'def'
name|'newMessages'
op|'('
name|'self'
op|','
name|'exists'
op|','
name|'recent'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'exists'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
string|"'%d EXISTS'"
op|'%'
name|'exists'
op|','
name|'async'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'recent'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendUntaggedResponse'
op|'('
string|"'%d RECENT'"
op|'%'
name|'recent'
op|','
name|'async'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnhandledResponse
dedent|''
dedent|''
dedent|''
name|'class'
name|'UnhandledResponse'
op|'('
name|'IMAP4Exception'
op|')'
op|':'
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|NegativeResponse
name|'class'
name|'NegativeResponse'
op|'('
name|'IMAP4Exception'
op|')'
op|':'
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|NoSupportedAuthentication
name|'class'
name|'NoSupportedAuthentication'
op|'('
name|'IMAP4Exception'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'serverSupports'
op|','
name|'clientSupports'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'IMAP4Exception'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
string|"'No supported authentication schemes available'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serverSupports'
op|'='
name|'serverSupports'
newline|'\n'
name|'self'
op|'.'
name|'clientSupports'
op|'='
name|'clientSupports'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'IMAP4Exception'
op|'.'
name|'__str__'
op|'('
name|'self'
op|')'
nl|'\n'
op|'+'
string|"': Server supports %r, client supports %r'"
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'serverSupports'
op|','
name|'self'
op|'.'
name|'clientSupports'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|IllegalServerResponse
dedent|''
dedent|''
name|'class'
name|'IllegalServerResponse'
op|'('
name|'IMAP4Exception'
op|')'
op|':'
name|'pass'
newline|'\n'
nl|'\n'
DECL|variable|TIMEOUT_ERROR
name|'TIMEOUT_ERROR'
op|'='
name|'error'
op|'.'
name|'TimeoutError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|IMAP4Client
name|'class'
name|'IMAP4Client'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|','
name|'policies'
op|'.'
name|'TimeoutMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""IMAP4 client protocol implementation\n\n    @ivar state: A string representing the state the connection is currently\n    in.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IMailboxListener'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|tags
name|'tags'
op|'='
name|'None'
newline|'\n'
DECL|variable|waiting
name|'waiting'
op|'='
name|'None'
newline|'\n'
DECL|variable|queued
name|'queued'
op|'='
name|'None'
newline|'\n'
DECL|variable|tagID
name|'tagID'
op|'='
number|'1'
newline|'\n'
DECL|variable|state
name|'state'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|startedTLS
name|'startedTLS'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# Number of seconds to wait before timing out a connection.'
nl|'\n'
comment|'# If the number is <= 0 no timeout checking will be performed.'
nl|'\n'
DECL|variable|timeout
name|'timeout'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'# Capabilities are not allowed to change during the session'
nl|'\n'
comment|'# So cache the first response and use that for all later'
nl|'\n'
comment|'# lookups'
nl|'\n'
DECL|variable|_capCache
name|'_capCache'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|_memoryFileLimit
name|'_memoryFileLimit'
op|'='
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'10'
newline|'\n'
nl|'\n'
comment|'# Authentication is pluggable.  This maps names to IClientAuthentication'
nl|'\n'
comment|'# objects.'
nl|'\n'
DECL|variable|authenticators
name|'authenticators'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|STATUS_CODES
name|'STATUS_CODES'
op|'='
op|'('
string|"'OK'"
op|','
string|"'NO'"
op|','
string|"'BAD'"
op|','
string|"'PREAUTH'"
op|','
string|"'BYE'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|STATUS_TRANSFORMATIONS
name|'STATUS_TRANSFORMATIONS'
op|'='
op|'{'
nl|'\n'
string|"'MESSAGES'"
op|':'
name|'int'
op|','
string|"'RECENT'"
op|':'
name|'int'
op|','
string|"'UNSEEN'"
op|':'
name|'int'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|context
name|'context'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'contextFactory'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'tags'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'queued'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'authenticators'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'contextFactory'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_tag'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_parts'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_lastCmd'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|registerAuthenticator
dedent|''
name|'def'
name|'registerAuthenticator'
op|'('
name|'self'
op|','
name|'auth'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register a new form of authentication\n\n        When invoking the authenticate() method of IMAP4Client, the first\n        matching authentication scheme found will be used.  The ordering is\n        that in which the server lists support authentication schemes.\n\n        @type auth: Implementor of C{IClientAuthentication}\n        @param auth: The object to use to perform the client\n        side of this authentication scheme.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authenticators'
op|'['
name|'auth'
op|'.'
name|'getName'
op|'('
op|')'
op|'.'
name|'upper'
op|'('
op|')'
op|']'
op|'='
name|'auth'
newline|'\n'
nl|'\n'
DECL|member|rawDataReceived
dedent|''
name|'def'
name|'rawDataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_pendingSize'
op|'-='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_pendingSize'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_pendingBuffer'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'passon'
op|'='
string|"''"
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_pendingSize'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'data'
op|','
name|'passon'
op|'='
name|'data'
op|'['
op|':'
name|'self'
op|'.'
name|'_pendingSize'
op|']'
op|','
name|'data'
op|'['
name|'self'
op|'.'
name|'_pendingSize'
op|':'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_pendingBuffer'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'rest'
op|'='
name|'self'
op|'.'
name|'_pendingBuffer'
newline|'\n'
name|'self'
op|'.'
name|'_pendingBuffer'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_pendingSize'
op|'='
name|'None'
newline|'\n'
name|'rest'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_parts'
op|'.'
name|'append'
op|'('
name|'rest'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'setLineMode'
op|'('
name|'passon'
op|'.'
name|'lstrip'
op|'('
string|"'\\r\\n'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'#    def sendLine(self, line):'
nl|'\n'
comment|"#        print 'S:', repr(line)"
nl|'\n'
comment|'#        return basic.LineReceiver.sendLine(self, line)'
nl|'\n'
nl|'\n'
DECL|member|_setupForLiteral
dedent|''
dedent|''
name|'def'
name|'_setupForLiteral'
op|'('
name|'self'
op|','
name|'rest'
op|','
name|'octets'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_pendingBuffer'
op|'='
name|'self'
op|'.'
name|'messageFile'
op|'('
name|'octets'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_pendingSize'
op|'='
name|'octets'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_parts'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_parts'
op|'='
op|'['
name|'rest'
op|','
string|"'\\r\\n'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_parts'
op|'.'
name|'extend'
op|'('
op|'['
name|'rest'
op|','
string|"'\\r\\n'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'setRawMode'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""We are no longer connected"""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'queued'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'queued'
op|'='
name|'self'
op|'.'
name|'queued'
newline|'\n'
name|'self'
op|'.'
name|'queued'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'cmd'
name|'in'
name|'queued'
op|':'
newline|'\n'
indent|'                '
name|'cmd'
op|'.'
name|'defer'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'tags'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'tags'
op|'='
name|'self'
op|'.'
name|'tags'
newline|'\n'
name|'self'
op|'.'
name|'tags'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'cmd'
name|'in'
name|'tags'
op|'.'
name|'itervalues'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'cmd'
name|'is'
name|'not'
name|'None'
name|'and'
name|'cmd'
op|'.'
name|'defer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'cmd'
op|'.'
name|'defer'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Attempt to parse a single line from the server.\n\n        @type line: C{str}\n        @param line: The line from the server, without the line delimiter.\n\n        @raise IllegalServerResponse: If the line or some part of the line\n            does not represent an allowed message from the server at this time.\n        """'
newline|'\n'
comment|"#        print 'C: ' + repr(line)"
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'lastPart'
op|'='
name|'line'
op|'.'
name|'rfind'
op|'('
string|"'{'"
op|')'
newline|'\n'
name|'if'
name|'lastPart'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'lastPart'
op|'='
name|'line'
op|'['
name|'lastPart'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
name|'if'
name|'lastPart'
op|'.'
name|'endswith'
op|'('
string|"'}'"
op|')'
op|':'
newline|'\n'
comment|"# It's a literal a-comin' in"
nl|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'octets'
op|'='
name|'int'
op|'('
name|'lastPart'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'IllegalServerResponse'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_parts'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_tag'
op|','
name|'parts'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'parts'
op|'='
name|'line'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_setupForLiteral'
op|'('
name|'parts'
op|','
name|'octets'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'_parts'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|"# It isn't a literal at all"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_regularDispatch'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# If an expression is in progress, no tag is required here'
nl|'\n'
comment|"# Since we didn't find a literal indicator, this expression"
nl|'\n'
comment|'# is done.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_parts'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
name|'tag'
op|','
name|'rest'
op|'='
name|'self'
op|'.'
name|'_tag'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'_parts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_tag'
op|'='
name|'self'
op|'.'
name|'_parts'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'dispatchCommand'
op|'('
name|'tag'
op|','
name|'rest'
op|')'
newline|'\n'
nl|'\n'
DECL|member|timeoutConnection
dedent|''
dedent|''
name|'def'
name|'timeoutConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_lastCmd'
name|'and'
name|'self'
op|'.'
name|'_lastCmd'
op|'.'
name|'defer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'self'
op|'.'
name|'_lastCmd'
op|'.'
name|'defer'
op|'='
name|'self'
op|'.'
name|'_lastCmd'
op|'.'
name|'defer'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'errback'
op|'('
name|'TIMEOUT_ERROR'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'queued'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'cmd'
name|'in'
name|'self'
op|'.'
name|'queued'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'cmd'
op|'.'
name|'defer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'d'
op|','
name|'cmd'
op|'.'
name|'defer'
op|'='
name|'cmd'
op|'.'
name|'defer'
op|','
name|'d'
newline|'\n'
name|'d'
op|'.'
name|'errback'
op|'('
name|'TIMEOUT_ERROR'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_regularDispatch
dedent|''
name|'def'
name|'_regularDispatch'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parts'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'!='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'parts'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
dedent|''
name|'tag'
op|','
name|'rest'
op|'='
name|'parts'
newline|'\n'
name|'self'
op|'.'
name|'dispatchCommand'
op|'('
name|'tag'
op|','
name|'rest'
op|')'
newline|'\n'
nl|'\n'
DECL|member|messageFile
dedent|''
name|'def'
name|'messageFile'
op|'('
name|'self'
op|','
name|'octets'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a file to which an incoming message may be written.\n\n        @type octets: C{int}\n        @param octets: The number of octets which will be written to the file\n\n        @rtype: Any object which implements C{write(string)} and\n        C{seek(int, int)}\n        @return: A file-like object\n        """'
newline|'\n'
name|'if'
name|'octets'
op|'>'
name|'self'
op|'.'
name|'_memoryFileLimit'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'tempfile'
op|'.'
name|'TemporaryFile'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|makeTag
dedent|''
dedent|''
name|'def'
name|'makeTag'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tag'
op|'='
string|"'%0.4X'"
op|'%'
name|'self'
op|'.'
name|'tagID'
newline|'\n'
name|'self'
op|'.'
name|'tagID'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'tag'
newline|'\n'
nl|'\n'
DECL|member|dispatchCommand
dedent|''
name|'def'
name|'dispatchCommand'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'state'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'self'
op|'.'
name|'response_UNAUTH'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'response_'"
op|'+'
name|'self'
op|'.'
name|'state'
op|'.'
name|'upper'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'('
name|'tag'
op|','
name|'rest'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
string|'"Cannot dispatch: %s, %s, %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'state'
op|','
name|'tag'
op|','
name|'rest'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|response_UNAUTH
dedent|''
dedent|''
name|'def'
name|'response_UNAUTH'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'state'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# Server greeting, this is'
nl|'\n'
indent|'            '
name|'status'
op|','
name|'rest'
op|'='
name|'rest'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'status'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|"'OK'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'state'
op|'='
string|"'unauth'"
newline|'\n'
dedent|''
name|'elif'
name|'status'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|"'PREAUTH'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'state'
op|'='
string|"'auth'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# XXX - This is rude.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'IllegalServerResponse'
op|'('
name|'tag'
op|'+'
string|"' '"
op|'+'
name|'rest'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'b'
op|','
name|'e'
op|'='
name|'rest'
op|'.'
name|'find'
op|'('
string|"'['"
op|')'
op|','
name|'rest'
op|'.'
name|'find'
op|'('
string|"']'"
op|')'
newline|'\n'
name|'if'
name|'b'
op|'!='
op|'-'
number|'1'
name|'and'
name|'e'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'serverGreeting'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__cbCapabilities'
op|'('
nl|'\n'
op|'('
op|'['
name|'parseNestedParens'
op|'('
name|'rest'
op|'['
name|'b'
op|'+'
number|'1'
op|':'
name|'e'
op|']'
op|')'
op|']'
op|','
name|'None'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'serverGreeting'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_defaultHandler'
op|'('
name|'tag'
op|','
name|'rest'
op|')'
newline|'\n'
nl|'\n'
DECL|member|response_AUTH
dedent|''
dedent|''
name|'def'
name|'response_AUTH'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_defaultHandler'
op|'('
name|'tag'
op|','
name|'rest'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_defaultHandler
dedent|''
name|'def'
name|'_defaultHandler'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'tag'
op|'=='
string|"'*'"
name|'or'
name|'tag'
op|'=='
string|"'+'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'waiting'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_extraInfo'
op|'('
op|'['
name|'parseNestedParens'
op|'('
name|'rest'
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'cmd'
op|'='
name|'self'
op|'.'
name|'tags'
op|'['
name|'self'
op|'.'
name|'waiting'
op|']'
newline|'\n'
name|'if'
name|'tag'
op|'=='
string|"'+'"
op|':'
newline|'\n'
indent|'                    '
name|'cmd'
op|'.'
name|'continuation'
op|'('
name|'rest'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'cmd'
op|'.'
name|'lines'
op|'.'
name|'append'
op|'('
name|'rest'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'cmd'
op|'='
name|'self'
op|'.'
name|'tags'
op|'['
name|'tag'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
comment|'# XXX - This is rude.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'IllegalServerResponse'
op|'('
name|'tag'
op|'+'
string|"' '"
op|'+'
name|'rest'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'status'
op|','
name|'line'
op|'='
name|'rest'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'status'
op|'=='
string|"'OK'"
op|':'
newline|'\n'
comment|'# Give them this last line, too'
nl|'\n'
indent|'                    '
name|'cmd'
op|'.'
name|'finish'
op|'('
name|'rest'
op|','
name|'self'
op|'.'
name|'_extraInfo'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'cmd'
op|'.'
name|'defer'
op|'.'
name|'errback'
op|'('
name|'IMAP4Exception'
op|'('
name|'line'
op|')'
op|')'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'tags'
op|'['
name|'tag'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'waiting'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_flushQueue'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_flushQueue
dedent|''
dedent|''
dedent|''
name|'def'
name|'_flushQueue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'queued'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
name|'self'
op|'.'
name|'queued'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'t'
op|'='
name|'self'
op|'.'
name|'makeTag'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tags'
op|'['
name|'t'
op|']'
op|'='
name|'cmd'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'cmd'
op|'.'
name|'format'
op|'('
name|'t'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'waiting'
op|'='
name|'t'
newline|'\n'
nl|'\n'
DECL|member|_extraInfo
dedent|''
dedent|''
name|'def'
name|'_extraInfo'
op|'('
name|'self'
op|','
name|'lines'
op|')'
op|':'
newline|'\n'
comment|'# XXX - This is terrible.'
nl|'\n'
comment|'# XXX - Also, this should collapse temporally proximate calls into single'
nl|'\n'
comment|'#       invocations of IMailboxListener methods, where possible.'
nl|'\n'
indent|'        '
name|'flags'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'recent'
op|'='
name|'exists'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'response'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'elements'
op|'='
name|'len'
op|'('
name|'response'
op|')'
newline|'\n'
name|'if'
name|'elements'
op|'=='
number|'1'
name|'and'
name|'response'
op|'['
number|'0'
op|']'
op|'=='
op|'['
string|"'READ-ONLY'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'modeChanged'
op|'('
name|'False'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'elements'
op|'=='
number|'1'
name|'and'
name|'response'
op|'['
number|'0'
op|']'
op|'=='
op|'['
string|"'READ-WRITE'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'modeChanged'
op|'('
name|'True'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'elements'
op|'=='
number|'2'
name|'and'
name|'response'
op|'['
number|'1'
op|']'
op|'=='
string|"'EXISTS'"
op|':'
newline|'\n'
indent|'                '
name|'exists'
op|'='
name|'int'
op|'('
name|'response'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'elements'
op|'=='
number|'2'
name|'and'
name|'response'
op|'['
number|'1'
op|']'
op|'=='
string|"'RECENT'"
op|':'
newline|'\n'
indent|'                '
name|'recent'
op|'='
name|'int'
op|'('
name|'response'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'elements'
op|'=='
number|'3'
name|'and'
name|'response'
op|'['
number|'1'
op|']'
op|'=='
string|"'FETCH'"
op|':'
newline|'\n'
indent|'                '
name|'mId'
op|'='
name|'int'
op|'('
name|'response'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'values'
op|'='
name|'self'
op|'.'
name|'_parseFetchPairs'
op|'('
name|'response'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'setdefault'
op|'('
name|'mId'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'extend'
op|'('
name|'values'
op|'.'
name|'get'
op|'('
string|"'FLAGS'"
op|','
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'Unhandled unsolicited response: %s'"
op|'%'
op|'('
name|'response'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'flags'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'flagsChanged'
op|'('
name|'flags'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'recent'
name|'is'
name|'not'
name|'None'
name|'or'
name|'exists'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'newMessages'
op|'('
name|'exists'
op|','
name|'recent'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendCommand
dedent|''
dedent|''
name|'def'
name|'sendCommand'
op|'('
name|'self'
op|','
name|'cmd'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'.'
name|'defer'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'waiting'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'queued'
op|'.'
name|'append'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'return'
name|'cmd'
op|'.'
name|'defer'
newline|'\n'
dedent|''
name|'t'
op|'='
name|'self'
op|'.'
name|'makeTag'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tags'
op|'['
name|'t'
op|']'
op|'='
name|'cmd'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'cmd'
op|'.'
name|'format'
op|'('
name|'t'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'waiting'
op|'='
name|'t'
newline|'\n'
name|'self'
op|'.'
name|'_lastCmd'
op|'='
name|'cmd'
newline|'\n'
name|'return'
name|'cmd'
op|'.'
name|'defer'
newline|'\n'
nl|'\n'
DECL|member|getCapabilities
dedent|''
name|'def'
name|'getCapabilities'
op|'('
name|'self'
op|','
name|'useCache'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Request the capabilities available on this server.\n\n        This command is allowed in any state of connection.\n\n        @type useCache: C{bool}\n        @param useCache: Specify whether to use the capability-cache or to\n        re-retrieve the capabilities from the server.  Server capabilities\n        should never change, so for normal use, this flag should never be\n        false.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback will be invoked with a\n        dictionary mapping capability types to lists of supported\n        mechanisms, or to None if a support list is not applicable.\n        """'
newline|'\n'
name|'if'
name|'useCache'
name|'and'
name|'self'
op|'.'
name|'_capCache'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'self'
op|'.'
name|'_capCache'
op|')'
newline|'\n'
dedent|''
name|'cmd'
op|'='
string|"'CAPABILITY'"
newline|'\n'
name|'resp'
op|'='
op|'('
string|"'CAPABILITY'"
op|','
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
name|'cmd'
op|','
name|'wantResponse'
op|'='
name|'resp'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbCapabilities'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|__cbCapabilities
dedent|''
name|'def'
name|'__cbCapabilities'
op|'('
name|'self'
op|','
op|'('
name|'lines'
op|','
name|'tagline'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'caps'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'rest'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'cap'
name|'in'
name|'rest'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'parts'
op|'='
name|'cap'
op|'.'
name|'split'
op|'('
string|"'='"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'category'
op|','
name|'value'
op|'='
name|'parts'
op|'['
number|'0'
op|']'
op|','
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'category'
op|','
name|'value'
op|'='
name|'parts'
newline|'\n'
dedent|''
name|'caps'
op|'.'
name|'setdefault'
op|'('
name|'category'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
comment|'# Preserve a non-ideal API for backwards compatibility.  It would'
nl|'\n'
comment|'# probably be entirely sensible to have an object with a wider API than'
nl|'\n'
comment|'# dict here so this could be presented less insanely.'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'category'
name|'in'
name|'caps'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'caps'
op|'['
name|'category'
op|']'
op|'=='
op|'['
name|'None'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'caps'
op|'['
name|'category'
op|']'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_capCache'
op|'='
name|'caps'
newline|'\n'
name|'return'
name|'caps'
newline|'\n'
nl|'\n'
DECL|member|logout
dedent|''
name|'def'
name|'logout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inform the server that we are done with the connection.\n\n        This command is allowed in any state of connection.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback will be invoked with None\n        when the proper server acknowledgement has been received.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
string|"'LOGOUT'"
op|','
name|'wantResponse'
op|'='
op|'('
string|"'BYE'"
op|','
op|')'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbLogout'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|__cbLogout
dedent|''
name|'def'
name|'__cbLogout'
op|'('
name|'self'
op|','
op|'('
name|'lines'
op|','
name|'tagline'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
comment|"# We don't particularly care what the server said"
nl|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|noop
dedent|''
name|'def'
name|'noop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Perform no operation.\n\n        This command is allowed in any state of connection.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback will be invoked with a list\n        of untagged status updates the server responds with.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
string|"'NOOP'"
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbNoop'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|__cbNoop
dedent|''
name|'def'
name|'__cbNoop'
op|'('
name|'self'
op|','
op|'('
name|'lines'
op|','
name|'tagline'
op|')'
op|')'
op|':'
newline|'\n'
comment|'# Conceivable, this is elidable.'
nl|'\n'
comment|'# It is, afterall, a no-op.'
nl|'\n'
indent|'        '
name|'return'
name|'lines'
newline|'\n'
nl|'\n'
DECL|member|startTLS
dedent|''
name|'def'
name|'startTLS'
op|'('
name|'self'
op|','
name|'contextFactory'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initiates a \'STARTTLS\' request and negotiates the TLS / SSL\n        Handshake.\n\n        @param contextFactory: The TLS / SSL Context Factory to\n        leverage.  If the contextFactory is None the IMAP4Client will\n        either use the current TLS / SSL Context Factory or attempt to\n        create a new one.\n\n        @type contextFactory: C{ssl.ClientContextFactory}\n\n        @return: A Deferred which fires when the transport has been\n        secured according to the given contextFactory, or which fails\n        if the transport cannot be secured.\n        """'
newline|'\n'
name|'assert'
name|'not'
name|'self'
op|'.'
name|'startedTLS'
op|','
string|'"Client and Server are currently communicating via TLS"'
newline|'\n'
nl|'\n'
name|'if'
name|'contextFactory'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'contextFactory'
op|'='
name|'self'
op|'.'
name|'_getContextFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'contextFactory'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'IMAP4Exception'
op|'('
nl|'\n'
string|'"IMAP4Client requires a TLS context to "'
nl|'\n'
string|'"initiate the STARTTLS handshake"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"'STARTTLS'"
name|'not'
name|'in'
name|'self'
op|'.'
name|'_capCache'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'IMAP4Exception'
op|'('
nl|'\n'
string|'"Server does not support secure communication "'
nl|'\n'
string|'"via TLS / SSL"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'tls'
op|'='
name|'interfaces'
op|'.'
name|'ITLSTransport'
op|'('
name|'self'
op|'.'
name|'transport'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'tls'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'IMAP4Exception'
op|'('
nl|'\n'
string|'"IMAP4Client transport does not implement "'
nl|'\n'
string|'"interfaces.ITLSTransport"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
string|"'STARTTLS'"
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_startedTLS'
op|','
name|'contextFactory'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'getCapabilities'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|authenticate
dedent|''
name|'def'
name|'authenticate'
op|'('
name|'self'
op|','
name|'secret'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attempt to enter the authenticated state with the server\n\n        This command is allowed in the Non-Authenticated state.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked if the authentication\n        succeeds and whose errback will be invoked otherwise.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_capCache'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'getCapabilities'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'self'
op|'.'
name|'_capCache'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbAuthenticate'
op|','
name|'secret'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|__cbAuthenticate
dedent|''
name|'def'
name|'__cbAuthenticate'
op|'('
name|'self'
op|','
name|'caps'
op|','
name|'secret'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'auths'
op|'='
name|'caps'
op|'.'
name|'get'
op|'('
string|"'AUTH'"
op|','
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'scheme'
name|'in'
name|'auths'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'scheme'
op|'.'
name|'upper'
op|'('
op|')'
name|'in'
name|'self'
op|'.'
name|'authenticators'
op|':'
newline|'\n'
indent|'                '
name|'cmd'
op|'='
name|'Command'
op|'('
string|"'AUTHENTICATE'"
op|','
name|'scheme'
op|','
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'__cbContinueAuth'
op|','
name|'scheme'
op|','
nl|'\n'
name|'secret'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'startedTLS'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'NoSupportedAuthentication'
op|'('
nl|'\n'
name|'auths'
op|','
name|'self'
op|'.'
name|'authenticators'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|function|ebStartTLS
indent|'            '
name|'def'
name|'ebStartTLS'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'err'
op|'.'
name|'trap'
op|'('
name|'IMAP4Exception'
op|')'
newline|'\n'
comment|"# We couldn't negotiate TLS for some reason"
nl|'\n'
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'NoSupportedAuthentication'
op|'('
nl|'\n'
name|'auths'
op|','
name|'self'
op|'.'
name|'authenticators'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'startTLS'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'ebStartTLS'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'getCapabilities'
op|'('
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbAuthTLS'
op|','
name|'secret'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__cbContinueAuth
dedent|''
dedent|''
name|'def'
name|'__cbContinueAuth'
op|'('
name|'self'
op|','
name|'rest'
op|','
name|'scheme'
op|','
name|'secret'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'chal'
op|'='
name|'base64'
op|'.'
name|'decodestring'
op|'('
name|'rest'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'binascii'
op|'.'
name|'Error'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'*'"
op|')'
newline|'\n'
name|'raise'
name|'IllegalServerResponse'
op|'('
name|'rest'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'auth'
op|'='
name|'self'
op|'.'
name|'authenticators'
op|'['
name|'scheme'
op|']'
newline|'\n'
name|'chal'
op|'='
name|'auth'
op|'.'
name|'challengeResponse'
op|'('
name|'secret'
op|','
name|'chal'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'base64'
op|'.'
name|'encodestring'
op|'('
name|'chal'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cbAuthTLS
dedent|''
dedent|''
name|'def'
name|'__cbAuthTLS'
op|'('
name|'self'
op|','
name|'caps'
op|','
name|'secret'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'auths'
op|'='
name|'caps'
op|'.'
name|'get'
op|'('
string|"'AUTH'"
op|','
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'scheme'
name|'in'
name|'auths'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'scheme'
op|'.'
name|'upper'
op|'('
op|')'
name|'in'
name|'self'
op|'.'
name|'authenticators'
op|':'
newline|'\n'
indent|'                '
name|'cmd'
op|'='
name|'Command'
op|'('
string|"'AUTHENTICATE'"
op|','
name|'scheme'
op|','
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'__cbContinueAuth'
op|','
name|'scheme'
op|','
nl|'\n'
name|'secret'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'cmd'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'NoSupportedAuthentication'
op|'('
name|'auths'
op|','
name|'self'
op|'.'
name|'authenticators'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|login
dedent|''
name|'def'
name|'login'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Authenticate with the server using a username and password\n\n        This command is allowed in the Non-Authenticated state.  If the\n        server supports the STARTTLS capability and our transport supports\n        TLS, TLS is negotiated before the login command is issued.\n\n        A more secure way to log in is to use C{startTLS} or\n        C{authenticate} or both.\n\n        @type username: C{str}\n        @param username: The username to log in with\n\n        @type password: C{str}\n        @param password: The password to log in with\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked if login is successful\n        and whose errback is invoked otherwise.\n        """'
newline|'\n'
name|'d'
op|'='
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'getCapabilities'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbLoginCaps'
op|','
name|'username'
op|','
name|'password'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|serverGreeting
dedent|''
name|'def'
name|'serverGreeting'
op|'('
name|'self'
op|','
name|'caps'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when the server has sent us a greeting.\n\n        @type caps: C{dict}\n        @param caps: Capabilities the server advertised in its greeting.\n        """'
newline|'\n'
nl|'\n'
DECL|member|_getContextFactory
dedent|''
name|'def'
name|'_getContextFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'context'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'context'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'ssl'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'context'
op|'='
name|'ssl'
op|'.'
name|'ClientContextFactory'
op|'('
op|')'
newline|'\n'
name|'context'
op|'.'
name|'method'
op|'='
name|'ssl'
op|'.'
name|'SSL'
op|'.'
name|'TLSv1_METHOD'
newline|'\n'
name|'return'
name|'context'
newline|'\n'
nl|'\n'
DECL|member|__cbLoginCaps
dedent|''
dedent|''
name|'def'
name|'__cbLoginCaps'
op|'('
name|'self'
op|','
name|'capabilities'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
comment|'# If the server advertises STARTTLS, we might want to try to switch to TLS'
nl|'\n'
indent|'        '
name|'tryTLS'
op|'='
string|"'STARTTLS'"
name|'in'
name|'capabilities'
newline|'\n'
nl|'\n'
comment|'# If our transport supports switching to TLS, we might want to try to switch to TLS.'
nl|'\n'
name|'tlsableTransport'
op|'='
name|'interfaces'
op|'.'
name|'ITLSTransport'
op|'('
name|'self'
op|'.'
name|'transport'
op|','
name|'None'
op|')'
name|'is'
name|'not'
name|'None'
newline|'\n'
nl|'\n'
comment|'# If our transport is not already using TLS, we might want to try to switch to TLS.'
nl|'\n'
name|'nontlsTransport'
op|'='
name|'interfaces'
op|'.'
name|'ISSLTransport'
op|'('
name|'self'
op|'.'
name|'transport'
op|','
name|'None'
op|')'
name|'is'
name|'None'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'startedTLS'
name|'and'
name|'tryTLS'
name|'and'
name|'tlsableTransport'
name|'and'
name|'nontlsTransport'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'startTLS'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__cbLoginTLS'
op|','
nl|'\n'
name|'self'
op|'.'
name|'__ebLoginTLS'
op|','
nl|'\n'
name|'callbackArgs'
op|'='
op|'('
name|'username'
op|','
name|'password'
op|')'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'nontlsTransport'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Server has no TLS support. logging in over cleartext!"'
op|')'
newline|'\n'
dedent|''
name|'args'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
op|'('
name|'_quote'
op|'('
name|'username'
op|')'
op|','
name|'_quote'
op|'('
name|'password'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
string|"'LOGIN'"
op|','
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_startedTLS
dedent|''
dedent|''
name|'def'
name|'_startedTLS'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'startTLS'
op|'('
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_capCache'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'startedTLS'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|__cbLoginTLS
dedent|''
name|'def'
name|'__cbLoginTLS'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
op|'('
name|'_quote'
op|'('
name|'username'
op|')'
op|','
name|'_quote'
op|'('
name|'password'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
string|"'LOGIN'"
op|','
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ebLoginTLS
dedent|''
name|'def'
name|'__ebLoginTLS'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
name|'return'
name|'failure'
newline|'\n'
nl|'\n'
DECL|member|namespace
dedent|''
name|'def'
name|'namespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve information about the namespaces available to this account\n\n        This command is allowed in the Authenticated and Selected states.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with namespace\n        information.  An example of this information is::\n\n            [[[\'\', \'/\']], [], []]\n\n        which indicates a single personal namespace called \'\' with \'/\'\n        as its hierarchical delimiter, and no shared or user namespaces.\n        """'
newline|'\n'
name|'cmd'
op|'='
string|"'NAMESPACE'"
newline|'\n'
name|'resp'
op|'='
op|'('
string|"'NAMESPACE'"
op|','
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
name|'cmd'
op|','
name|'wantResponse'
op|'='
name|'resp'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbNamespace'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|__cbNamespace
dedent|''
name|'def'
name|'__cbNamespace'
op|'('
name|'self'
op|','
op|'('
name|'lines'
op|','
name|'last'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'parts'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'=='
number|'4'
name|'and'
name|'parts'
op|'['
number|'0'
op|']'
op|'=='
string|"'NAMESPACE'"
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'['
name|'e'
name|'or'
op|'['
op|']'
name|'for'
name|'e'
name|'in'
name|'parts'
op|'['
number|'1'
op|':'
op|']'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'log'
op|'.'
name|'err'
op|'('
string|'"No NAMESPACE response to NAMESPACE command"'
op|')'
newline|'\n'
name|'return'
op|'['
op|'['
op|']'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|']'
newline|'\n'
nl|'\n'
DECL|member|select
dedent|''
name|'def'
name|'select'
op|'('
name|'self'
op|','
name|'mailbox'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Select a mailbox\n\n        This command is allowed in the Authenticated and Selected states.\n\n        @type mailbox: C{str}\n        @param mailbox: The name of the mailbox to select\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with mailbox\n        information if the select is successful and whose errback is\n        invoked otherwise.  Mailbox information consists of a dictionary\n        with the following keys and values::\n\n                FLAGS: A list of strings containing the flags settable on\n                        messages in this mailbox.\n\n                EXISTS: An integer indicating the number of messages in this\n                        mailbox.\n\n                RECENT: An integer indicating the number of \\"recent\\"\n                        messages in this mailbox.\n\n                UNSEEN: An integer indicating the number of messages not\n                        flagged \\\\Seen in this mailbox.\n\n                PERMANENTFLAGS: A list of strings containing the flags that\n                        can be permanently set on messages in this mailbox.\n\n                UIDVALIDITY: An integer uniquely identifying this mailbox.\n        """'
newline|'\n'
name|'cmd'
op|'='
string|"'SELECT'"
newline|'\n'
name|'args'
op|'='
name|'_prepareMailboxName'
op|'('
name|'mailbox'
op|')'
newline|'\n'
name|'resp'
op|'='
op|'('
string|"'FLAGS'"
op|','
string|"'EXISTS'"
op|','
string|"'RECENT'"
op|','
string|"'UNSEEN'"
op|','
string|"'PERMANENTFLAGS'"
op|','
string|"'UIDVALIDITY'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
name|'cmd'
op|','
name|'args'
op|','
name|'wantResponse'
op|'='
name|'resp'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbSelect'
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|examine
dedent|''
name|'def'
name|'examine'
op|'('
name|'self'
op|','
name|'mailbox'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Select a mailbox in read-only mode\n\n        This command is allowed in the Authenticated and Selected states.\n\n        @type mailbox: C{str}\n        @param mailbox: The name of the mailbox to examine\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with mailbox\n        information if the examine is successful and whose errback\n        is invoked otherwise.  Mailbox information consists of a dictionary\n        with the following keys and values::\n\n            \'FLAGS\': A list of strings containing the flags settable on\n                        messages in this mailbox.\n\n            \'EXISTS\': An integer indicating the number of messages in this\n                        mailbox.\n\n            \'RECENT\': An integer indicating the number of \\"recent\\"\n                        messages in this mailbox.\n\n            \'UNSEEN\': An integer indicating the number of messages not\n                        flagged \\\\Seen in this mailbox.\n\n            \'PERMANENTFLAGS\': A list of strings containing the flags that\n                        can be permanently set on messages in this mailbox.\n\n            \'UIDVALIDITY\': An integer uniquely identifying this mailbox.\n        """'
newline|'\n'
name|'cmd'
op|'='
string|"'EXAMINE'"
newline|'\n'
name|'args'
op|'='
name|'_prepareMailboxName'
op|'('
name|'mailbox'
op|')'
newline|'\n'
name|'resp'
op|'='
op|'('
string|"'FLAGS'"
op|','
string|"'EXISTS'"
op|','
string|"'RECENT'"
op|','
string|"'UNSEEN'"
op|','
string|"'PERMANENTFLAGS'"
op|','
string|"'UIDVALIDITY'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
name|'cmd'
op|','
name|'args'
op|','
name|'wantResponse'
op|'='
name|'resp'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbSelect'
op|','
number|'0'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_intOrRaise
dedent|''
name|'def'
name|'_intOrRaise'
op|'('
name|'self'
op|','
name|'value'
op|','
name|'phrase'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse C{value} as an integer and return the result or raise\n        L{IllegalServerResponse} with C{phrase} as an argument if C{value}\n        cannot be parsed as an integer.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalServerResponse'
op|'('
name|'phrase'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__cbSelect
dedent|''
dedent|''
name|'def'
name|'__cbSelect'
op|'('
name|'self'
op|','
op|'('
name|'lines'
op|','
name|'tagline'
op|')'
op|','
name|'rw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle lines received in response to a SELECT or EXAMINE command.\n\n        See RFC 3501, section 6.3.1.\n        """'
newline|'\n'
comment|'# In the absense of specification, we are free to assume:'
nl|'\n'
comment|'#   READ-WRITE access'
nl|'\n'
name|'datum'
op|'='
op|'{'
string|"'READ-WRITE'"
op|':'
name|'rw'
op|'}'
newline|'\n'
name|'lines'
op|'.'
name|'append'
op|'('
name|'parseNestedParens'
op|'('
name|'tagline'
op|')'
op|')'
newline|'\n'
name|'for'
name|'split'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'split'
op|')'
op|'>'
number|'0'
name|'and'
name|'split'
op|'['
number|'0'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|"'OK'"
op|':'
newline|'\n'
comment|'# Handle all the kinds of OK response.'
nl|'\n'
indent|'                '
name|'content'
op|'='
name|'split'
op|'['
number|'1'
op|']'
newline|'\n'
name|'key'
op|'='
name|'content'
op|'['
number|'0'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'if'
name|'key'
op|'=='
string|"'READ-ONLY'"
op|':'
newline|'\n'
indent|'                    '
name|'datum'
op|'['
string|"'READ-WRITE'"
op|']'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'elif'
name|'key'
op|'=='
string|"'READ-WRITE'"
op|':'
newline|'\n'
indent|'                    '
name|'datum'
op|'['
string|"'READ-WRITE'"
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'key'
op|'=='
string|"'UIDVALIDITY'"
op|':'
newline|'\n'
indent|'                    '
name|'datum'
op|'['
string|"'UIDVALIDITY'"
op|']'
op|'='
name|'self'
op|'.'
name|'_intOrRaise'
op|'('
nl|'\n'
name|'content'
op|'['
number|'1'
op|']'
op|','
name|'split'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'key'
op|'=='
string|"'UNSEEN'"
op|':'
newline|'\n'
indent|'                    '
name|'datum'
op|'['
string|"'UNSEEN'"
op|']'
op|'='
name|'self'
op|'.'
name|'_intOrRaise'
op|'('
name|'content'
op|'['
number|'1'
op|']'
op|','
name|'split'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'key'
op|'=='
string|"'UIDNEXT'"
op|':'
newline|'\n'
indent|'                    '
name|'datum'
op|'['
string|"'UIDNEXT'"
op|']'
op|'='
name|'self'
op|'.'
name|'_intOrRaise'
op|'('
name|'content'
op|'['
number|'1'
op|']'
op|','
name|'split'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'key'
op|'=='
string|"'PERMANENTFLAGS'"
op|':'
newline|'\n'
indent|'                    '
name|'datum'
op|'['
string|"'PERMANENTFLAGS'"
op|']'
op|'='
name|'tuple'
op|'('
name|'content'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'log'
op|'.'
name|'err'
op|'('
string|"'Unhandled SELECT response (2): %s'"
op|'%'
op|'('
name|'split'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'len'
op|'('
name|'split'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
comment|'# Handle FLAGS, EXISTS, and RECENT'
nl|'\n'
indent|'                '
name|'if'
name|'split'
op|'['
number|'0'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|"'FLAGS'"
op|':'
newline|'\n'
indent|'                    '
name|'datum'
op|'['
string|"'FLAGS'"
op|']'
op|'='
name|'tuple'
op|'('
name|'split'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'split'
op|'['
number|'1'
op|']'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
comment|'# Must make sure things are strings before treating them as'
nl|'\n'
comment|'# strings since some other forms of response have nesting in'
nl|'\n'
comment|'# places which results in lists instead.'
nl|'\n'
indent|'                    '
name|'if'
name|'split'
op|'['
number|'1'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|"'EXISTS'"
op|':'
newline|'\n'
indent|'                        '
name|'datum'
op|'['
string|"'EXISTS'"
op|']'
op|'='
name|'self'
op|'.'
name|'_intOrRaise'
op|'('
name|'split'
op|'['
number|'0'
op|']'
op|','
name|'split'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'split'
op|'['
number|'1'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|"'RECENT'"
op|':'
newline|'\n'
indent|'                        '
name|'datum'
op|'['
string|"'RECENT'"
op|']'
op|'='
name|'self'
op|'.'
name|'_intOrRaise'
op|'('
name|'split'
op|'['
number|'0'
op|']'
op|','
name|'split'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'log'
op|'.'
name|'err'
op|'('
string|"'Unhandled SELECT response (0): %s'"
op|'%'
op|'('
name|'split'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'log'
op|'.'
name|'err'
op|'('
string|"'Unhandled SELECT response (1): %s'"
op|'%'
op|'('
name|'split'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
string|"'Unhandled SELECT response (4): %s'"
op|'%'
op|'('
name|'split'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'datum'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|create
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new mailbox on the server\n\n        This command is allowed in the Authenticated and Selected states.\n\n        @type name: C{str}\n        @param name: The name of the mailbox to create.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked if the mailbox creation\n        is successful and whose errback is invoked otherwise.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
string|"'CREATE'"
op|','
name|'_prepareMailboxName'
op|'('
name|'name'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete a mailbox\n\n        This command is allowed in the Authenticated and Selected states.\n\n        @type name: C{str}\n        @param name: The name of the mailbox to delete.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose calblack is invoked if the mailbox is\n        deleted successfully and whose errback is invoked otherwise.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
string|"'DELETE'"
op|','
name|'_prepareMailboxName'
op|'('
name|'name'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rename
dedent|''
name|'def'
name|'rename'
op|'('
name|'self'
op|','
name|'oldname'
op|','
name|'newname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rename a mailbox\n\n        This command is allowed in the Authenticated and Selected states.\n\n        @type oldname: C{str}\n        @param oldname: The current name of the mailbox to rename.\n\n        @type newname: C{str}\n        @param newname: The new name to give the mailbox.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked if the rename is\n        successful and whose errback is invoked otherwise.\n        """'
newline|'\n'
name|'oldname'
op|'='
name|'_prepareMailboxName'
op|'('
name|'oldname'
op|')'
newline|'\n'
name|'newname'
op|'='
name|'_prepareMailboxName'
op|'('
name|'newname'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
string|"'RENAME'"
op|','
string|"' '"
op|'.'
name|'join'
op|'('
op|'('
name|'oldname'
op|','
name|'newname'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|subscribe
dedent|''
name|'def'
name|'subscribe'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add a mailbox to the subscription list\n\n        This command is allowed in the Authenticated and Selected states.\n\n        @type name: C{str}\n        @param name: The mailbox to mark as \'active\' or \'subscribed\'\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked if the subscription\n        is successful and whose errback is invoked otherwise.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
string|"'SUBSCRIBE'"
op|','
name|'_prepareMailboxName'
op|'('
name|'name'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unsubscribe
dedent|''
name|'def'
name|'unsubscribe'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a mailbox from the subscription list\n\n        This command is allowed in the Authenticated and Selected states.\n\n        @type name: C{str}\n        @param name: The mailbox to unsubscribe\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked if the unsubscription\n        is successful and whose errback is invoked otherwise.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
string|"'UNSUBSCRIBE'"
op|','
name|'_prepareMailboxName'
op|'('
name|'name'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|list
dedent|''
name|'def'
name|'list'
op|'('
name|'self'
op|','
name|'reference'
op|','
name|'wildcard'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List a subset of the available mailboxes\n\n        This command is allowed in the Authenticated and Selected states.\n\n        @type reference: C{str}\n        @param reference: The context in which to interpret C{wildcard}\n\n        @type wildcard: C{str}\n        @param wildcard: The pattern of mailbox names to match, optionally\n        including either or both of the \'*\' and \'%\' wildcards.  \'*\' will\n        match zero or more characters and cross hierarchical boundaries.\n        \'%\' will also match zero or more characters, but is limited to a\n        single hierarchical level.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a list of C{tuple}s,\n        the first element of which is a C{tuple} of mailbox flags, the second\n        element of which is the hierarchy delimiter for this mailbox, and the\n        third of which is the mailbox name; if the command is unsuccessful,\n        the deferred\'s errback is invoked instead.\n        """'
newline|'\n'
name|'cmd'
op|'='
string|"'LIST'"
newline|'\n'
name|'args'
op|'='
string|'\'"%s" "%s"\''
op|'%'
op|'('
name|'reference'
op|','
name|'wildcard'
op|'.'
name|'encode'
op|'('
string|"'imap4-utf-7'"
op|')'
op|')'
newline|'\n'
name|'resp'
op|'='
op|'('
string|"'LIST'"
op|','
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
name|'cmd'
op|','
name|'args'
op|','
name|'wantResponse'
op|'='
name|'resp'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbList'
op|','
string|"'LIST'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|lsub
dedent|''
name|'def'
name|'lsub'
op|'('
name|'self'
op|','
name|'reference'
op|','
name|'wildcard'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List a subset of the subscribed available mailboxes\n\n        This command is allowed in the Authenticated and Selected states.\n\n        The parameters and returned object are the same as for the C{list}\n        method, with one slight difference: Only mailboxes which have been\n        subscribed can be included in the resulting list.\n        """'
newline|'\n'
name|'cmd'
op|'='
string|"'LSUB'"
newline|'\n'
name|'args'
op|'='
string|'\'"%s" "%s"\''
op|'%'
op|'('
name|'reference'
op|','
name|'wildcard'
op|'.'
name|'encode'
op|'('
string|"'imap4-utf-7'"
op|')'
op|')'
newline|'\n'
name|'resp'
op|'='
op|'('
string|"'LSUB'"
op|','
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
name|'cmd'
op|','
name|'args'
op|','
name|'wantResponse'
op|'='
name|'resp'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbList'
op|','
string|"'LSUB'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|__cbList
dedent|''
name|'def'
name|'__cbList'
op|'('
name|'self'
op|','
op|'('
name|'lines'
op|','
name|'last'
op|')'
op|','
name|'command'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'parts'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'=='
number|'4'
name|'and'
name|'parts'
op|'['
number|'0'
op|']'
op|'=='
name|'command'
op|':'
newline|'\n'
indent|'                '
name|'parts'
op|'['
number|'1'
op|']'
op|'='
name|'tuple'
op|'('
name|'parts'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'results'
op|'.'
name|'append'
op|'('
name|'tuple'
op|'('
name|'parts'
op|'['
number|'1'
op|':'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'results'
newline|'\n'
nl|'\n'
DECL|member|status
dedent|''
name|'def'
name|'status'
op|'('
name|'self'
op|','
name|'mailbox'
op|','
op|'*'
name|'names'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve the status of the given mailbox\n\n        This command is allowed in the Authenticated and Selected states.\n\n        @type mailbox: C{str}\n        @param mailbox: The name of the mailbox to query\n\n        @type *names: C{str}\n        @param *names: The status names to query.  These may be any number of:\n            C{\'MESSAGES\'}, C{\'RECENT\'}, C{\'UIDNEXT\'}, C{\'UIDVALIDITY\'}, and\n            C{\'UNSEEN\'}.\n\n        @rtype: C{Deferred}\n        @return: A deferred which fires with with the status information if the\n            command is successful and whose errback is invoked otherwise.  The\n            status information is in the form of a C{dict}.  Each element of\n            C{names} is a key in the dictionary.  The value for each key is the\n            corresponding response from the server.\n        """'
newline|'\n'
name|'cmd'
op|'='
string|"'STATUS'"
newline|'\n'
name|'args'
op|'='
string|'"%s (%s)"'
op|'%'
op|'('
name|'_prepareMailboxName'
op|'('
name|'mailbox'
op|')'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
name|'names'
op|')'
op|')'
newline|'\n'
name|'resp'
op|'='
op|'('
string|"'STATUS'"
op|','
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
name|'cmd'
op|','
name|'args'
op|','
name|'wantResponse'
op|'='
name|'resp'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbStatus'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|__cbStatus
dedent|''
name|'def'
name|'__cbStatus'
op|'('
name|'self'
op|','
op|'('
name|'lines'
op|','
name|'last'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'status'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'parts'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'parts'
op|'['
number|'0'
op|']'
op|'=='
string|"'STATUS'"
op|':'
newline|'\n'
indent|'                '
name|'items'
op|'='
name|'parts'
op|'['
number|'2'
op|']'
newline|'\n'
name|'items'
op|'='
op|'['
name|'items'
op|'['
name|'i'
op|':'
name|'i'
op|'+'
number|'2'
op|']'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'items'
op|')'
op|','
number|'2'
op|')'
op|']'
newline|'\n'
name|'status'
op|'.'
name|'update'
op|'('
name|'dict'
op|'('
name|'items'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'k'
name|'in'
name|'status'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'t'
op|'='
name|'self'
op|'.'
name|'STATUS_TRANSFORMATIONS'
op|'.'
name|'get'
op|'('
name|'k'
op|')'
newline|'\n'
name|'if'
name|'t'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'status'
op|'['
name|'k'
op|']'
op|'='
name|'t'
op|'('
name|'status'
op|'['
name|'k'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'IllegalServerResponse'
op|'('
string|"'(%s %s): %s'"
op|'%'
op|'('
name|'k'
op|','
name|'status'
op|'['
name|'k'
op|']'
op|','
name|'str'
op|'('
name|'e'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'status'
newline|'\n'
nl|'\n'
DECL|member|append
dedent|''
name|'def'
name|'append'
op|'('
name|'self'
op|','
name|'mailbox'
op|','
name|'message'
op|','
name|'flags'
op|'='
op|'('
op|')'
op|','
name|'date'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add the given message to the given mailbox.\n\n        This command is allowed in the Authenticated and Selected states.\n\n        @type mailbox: C{str}\n        @param mailbox: The mailbox to which to add this message.\n\n        @type message: Any file-like object\n        @param message: The message to add, in RFC822 format.  Newlines\n        in this file should be \\\\r\\\\n-style.\n\n        @type flags: Any iterable of C{str}\n        @param flags: The flags to associated with this message.\n\n        @type date: C{str}\n        @param date: The date to associate with this message.  This should\n        be of the format DD-MM-YYYY HH:MM:SS +/-HHMM.  For example, in\n        Eastern Standard Time, on July 1st 2004 at half past 1 PM,\n        \\"01-07-2004 13:30:00 -0500\\".\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked when this command\n        succeeds or whose errback is invoked if it fails.\n        """'
newline|'\n'
name|'message'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'2'
op|')'
newline|'\n'
name|'L'
op|'='
name|'message'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
name|'message'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'fmt'
op|'='
string|"'%s (%s)%s {%d}'"
newline|'\n'
name|'if'
name|'date'
op|':'
newline|'\n'
indent|'            '
name|'date'
op|'='
string|'\' "%s"\''
op|'%'
name|'date'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'date'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'cmd'
op|'='
name|'fmt'
op|'%'
op|'('
nl|'\n'
name|'_prepareMailboxName'
op|'('
name|'mailbox'
op|')'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
name|'flags'
op|')'
op|','
nl|'\n'
name|'date'
op|','
name|'L'
nl|'\n'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
string|"'APPEND'"
op|','
name|'cmd'
op|','
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'__cbContinueAppend'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|__cbContinueAppend
dedent|''
name|'def'
name|'__cbContinueAppend'
op|'('
name|'self'
op|','
name|'lines'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'basic'
op|'.'
name|'FileSender'
op|'('
op|')'
newline|'\n'
name|'return'
name|'s'
op|'.'
name|'beginFileTransfer'
op|'('
name|'message'
op|','
name|'self'
op|'.'
name|'transport'
op|','
name|'None'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbFinishAppend'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cbFinishAppend
dedent|''
name|'def'
name|'__cbFinishAppend'
op|'('
name|'self'
op|','
name|'foo'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|check
dedent|''
name|'def'
name|'check'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tell the server to perform a checkpoint\n\n        This command is allowed in the Selected state.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked when this command\n        succeeds or whose errback is invoked if it fails.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
string|"'CHECK'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the connection to the Authenticated state.\n\n        This command is allowed in the Selected state.\n\n        Issuing this command will also remove all messages flagged \\\\Deleted\n        from the selected mailbox if it is opened in read-write mode,\n        otherwise it indicates success by no messages are removed.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked when the command\n        completes successfully or whose errback is invoked if it fails.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
string|"'CLOSE'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|expunge
dedent|''
name|'def'
name|'expunge'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the connection to the Authenticate state.\n\n        This command is allowed in the Selected state.\n\n        Issuing this command will perform the same actions as issuing the\n        close command, but will also generate an \'expunge\' response for\n        every message deleted.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a list of the\n        \'expunge\' responses when this command is successful or whose errback\n        is invoked otherwise.\n        """'
newline|'\n'
name|'cmd'
op|'='
string|"'EXPUNGE'"
newline|'\n'
name|'resp'
op|'='
op|'('
string|"'EXPUNGE'"
op|','
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
name|'cmd'
op|','
name|'wantResponse'
op|'='
name|'resp'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbExpunge'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__cbExpunge
dedent|''
name|'def'
name|'__cbExpunge'
op|'('
name|'self'
op|','
op|'('
name|'lines'
op|','
name|'last'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ids'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'parts'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'=='
number|'2'
name|'and'
name|'parts'
op|'['
number|'1'
op|']'
op|'=='
string|"'EXPUNGE'"
op|':'
newline|'\n'
indent|'                '
name|'ids'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'_intOrRaise'
op|'('
name|'parts'
op|'['
number|'0'
op|']'
op|','
name|'parts'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'ids'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|search
dedent|''
name|'def'
name|'search'
op|'('
name|'self'
op|','
op|'*'
name|'queries'
op|','
op|'**'
name|'kwarg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Search messages in the currently selected mailbox\n\n        This command is allowed in the Selected state.\n\n        Any non-zero number of queries are accepted by this method, as\n        returned by the C{Query}, C{Or}, and C{Not} functions.\n\n        One keyword argument is accepted: if uid is passed in with a non-zero\n        value, the server is asked to return message UIDs instead of message\n        sequence numbers.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback will be invoked with a list of all\n        the message sequence numbers return by the search, or whose errback\n        will be invoked if there is an error.\n        """'
newline|'\n'
name|'if'
name|'kwarg'
op|'.'
name|'get'
op|'('
string|"'uid'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
string|"'UID SEARCH'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
string|"'SEARCH'"
newline|'\n'
dedent|''
name|'args'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
name|'queries'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
name|'cmd'
op|','
name|'args'
op|','
name|'wantResponse'
op|'='
op|'('
name|'cmd'
op|','
op|')'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'__cbSearch'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__cbSearch
dedent|''
name|'def'
name|'__cbSearch'
op|'('
name|'self'
op|','
op|'('
name|'lines'
op|','
name|'end'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ids'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'parts'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'>'
number|'0'
name|'and'
name|'parts'
op|'['
number|'0'
op|']'
op|'=='
string|"'SEARCH'"
op|':'
newline|'\n'
indent|'                '
name|'ids'
op|'.'
name|'extend'
op|'('
op|'['
name|'self'
op|'.'
name|'_intOrRaise'
op|'('
name|'p'
op|','
name|'parts'
op|')'
name|'for'
name|'p'
name|'in'
name|'parts'
op|'['
number|'1'
op|':'
op|']'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'ids'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fetchUID
dedent|''
name|'def'
name|'fetchUID'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the unique identifier for one or more messages\n\n        This command is allowed in the Selected state.\n\n        @type messages: C{MessageSet} or C{str}\n        @param messages: A message sequence set\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a dict mapping\n        message sequence numbers to unique message identifiers, or whose\n        errback is invoked if there is an error.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetch'
op|'('
name|'messages'
op|','
name|'useUID'
op|'='
name|'uid'
op|','
name|'uid'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fetchFlags
dedent|''
name|'def'
name|'fetchFlags'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the flags for one or more messages\n\n        This command is allowed in the Selected state.\n\n        @type messages: C{MessageSet} or C{str}\n        @param messages: The messages for which to retrieve flags.\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a dict mapping\n        message numbers to lists of flags, or whose errback is invoked if\n        there is an error.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetch'
op|'('
name|'str'
op|'('
name|'messages'
op|')'
op|','
name|'useUID'
op|'='
name|'uid'
op|','
name|'flags'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fetchInternalDate
dedent|''
name|'def'
name|'fetchInternalDate'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the internal date associated with one or more messages\n\n        This command is allowed in the Selected state.\n\n        @type messages: C{MessageSet} or C{str}\n        @param messages: The messages for which to retrieve the internal date.\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a dict mapping\n        message numbers to date strings, or whose errback is invoked\n        if there is an error.  Date strings take the format of\n        \\"day-month-year time timezone\\".\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetch'
op|'('
name|'str'
op|'('
name|'messages'
op|')'
op|','
name|'useUID'
op|'='
name|'uid'
op|','
name|'internaldate'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fetchEnvelope
dedent|''
name|'def'
name|'fetchEnvelope'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the envelope data for one or more messages\n\n        This command is allowed in the Selected state.\n\n        @type messages: C{MessageSet} or C{str}\n        @param messages: The messages for which to retrieve envelope data.\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a dict mapping\n        message numbers to envelope data, or whose errback is invoked\n        if there is an error.  Envelope data consists of a sequence of the\n        date, subject, from, sender, reply-to, to, cc, bcc, in-reply-to,\n        and message-id header fields.  The date, subject, in-reply-to, and\n        message-id fields are strings, while the from, sender, reply-to,\n        to, cc, and bcc fields contain address data.  Address data consists\n        of a sequence of name, source route, mailbox name, and hostname.\n        Fields which are not present for a particular address may be C{None}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetch'
op|'('
name|'str'
op|'('
name|'messages'
op|')'
op|','
name|'useUID'
op|'='
name|'uid'
op|','
name|'envelope'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fetchBodyStructure
dedent|''
name|'def'
name|'fetchBodyStructure'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the structure of the body of one or more messages\n\n        This command is allowed in the Selected state.\n\n        @type messages: C{MessageSet} or C{str}\n        @param messages: The messages for which to retrieve body structure\n        data.\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a dict mapping\n        message numbers to body structure data, or whose errback is invoked\n        if there is an error.  Body structure data describes the MIME-IMB\n        format of a message and consists of a sequence of mime type, mime\n        subtype, parameters, content id, description, encoding, and size.\n        The fields following the size field are variable: if the mime\n        type/subtype is message/rfc822, the contained message\'s envelope\n        information, body structure data, and number of lines of text; if\n        the mime type is text, the number of lines of text.  Extension fields\n        may also be included; if present, they are: the MD5 hash of the body,\n        body disposition, body language.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetch'
op|'('
name|'messages'
op|','
name|'useUID'
op|'='
name|'uid'
op|','
name|'bodystructure'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fetchSimplifiedBody
dedent|''
name|'def'
name|'fetchSimplifiedBody'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the simplified body structure of one or more messages\n\n        This command is allowed in the Selected state.\n\n        @type messages: C{MessageSet} or C{str}\n        @param messages: A message sequence set\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a dict mapping\n        message numbers to body data, or whose errback is invoked\n        if there is an error.  The simplified body structure is the same\n        as the body structure, except that extension fields will never be\n        present.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetch'
op|'('
name|'messages'
op|','
name|'useUID'
op|'='
name|'uid'
op|','
name|'body'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fetchMessage
dedent|''
name|'def'
name|'fetchMessage'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve one or more entire messages\n\n        This command is allowed in the Selected state.\n\n        @type messages: L{MessageSet} or C{str}\n        @param messages: A message sequence set\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @rtype: L{Deferred}\n\n        @return: A L{Deferred} which will fire with a C{dict} mapping message\n            sequence numbers to C{dict}s giving message data for the\n            corresponding message.  If C{uid} is true, the inner dictionaries\n            have a C{\'UID\'} key mapped to a C{str} giving the UID for the\n            message.  The text of the message is a C{str} associated with the\n            C{\'RFC822\'} key in each dictionary.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetch'
op|'('
name|'messages'
op|','
name|'useUID'
op|'='
name|'uid'
op|','
name|'rfc822'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fetchHeaders
dedent|''
name|'def'
name|'fetchHeaders'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve headers of one or more messages\n\n        This command is allowed in the Selected state.\n\n        @type messages: C{MessageSet} or C{str}\n        @param messages: A message sequence set\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a dict mapping\n        message numbers to dicts of message headers, or whose errback is\n        invoked if there is an error.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetch'
op|'('
name|'messages'
op|','
name|'useUID'
op|'='
name|'uid'
op|','
name|'rfc822header'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fetchBody
dedent|''
name|'def'
name|'fetchBody'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve body text of one or more messages\n\n        This command is allowed in the Selected state.\n\n        @type messages: C{MessageSet} or C{str}\n        @param messages: A message sequence set\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a dict mapping\n        message numbers to file-like objects containing body text, or whose\n        errback is invoked if there is an error.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetch'
op|'('
name|'messages'
op|','
name|'useUID'
op|'='
name|'uid'
op|','
name|'rfc822text'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fetchSize
dedent|''
name|'def'
name|'fetchSize'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the size, in octets, of one or more messages\n\n        This command is allowed in the Selected state.\n\n        @type messages: C{MessageSet} or C{str}\n        @param messages: A message sequence set\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a dict mapping\n        message numbers to sizes, or whose errback is invoked if there is\n        an error.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetch'
op|'('
name|'messages'
op|','
name|'useUID'
op|'='
name|'uid'
op|','
name|'rfc822size'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fetchFull
dedent|''
name|'def'
name|'fetchFull'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve several different fields of one or more messages\n\n        This command is allowed in the Selected state.  This is equivalent\n        to issuing all of the C{fetchFlags}, C{fetchInternalDate},\n        C{fetchSize}, C{fetchEnvelope}, and C{fetchSimplifiedBody}\n        functions.\n\n        @type messages: C{MessageSet} or C{str}\n        @param messages: A message sequence set\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a dict mapping\n        message numbers to dict of the retrieved data values, or whose\n        errback is invoked if there is an error.  They dictionary keys\n        are "flags", "date", "size", "envelope", and "body".\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetch'
op|'('
nl|'\n'
name|'messages'
op|','
name|'useUID'
op|'='
name|'uid'
op|','
name|'flags'
op|'='
number|'1'
op|','
name|'internaldate'
op|'='
number|'1'
op|','
nl|'\n'
name|'rfc822size'
op|'='
number|'1'
op|','
name|'envelope'
op|'='
number|'1'
op|','
name|'body'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fetchAll
dedent|''
name|'def'
name|'fetchAll'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve several different fields of one or more messages\n\n        This command is allowed in the Selected state.  This is equivalent\n        to issuing all of the C{fetchFlags}, C{fetchInternalDate},\n        C{fetchSize}, and C{fetchEnvelope} functions.\n\n        @type messages: C{MessageSet} or C{str}\n        @param messages: A message sequence set\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a dict mapping\n        message numbers to dict of the retrieved data values, or whose\n        errback is invoked if there is an error.  They dictionary keys\n        are "flags", "date", "size", and "envelope".\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetch'
op|'('
nl|'\n'
name|'messages'
op|','
name|'useUID'
op|'='
name|'uid'
op|','
name|'flags'
op|'='
number|'1'
op|','
name|'internaldate'
op|'='
number|'1'
op|','
nl|'\n'
name|'rfc822size'
op|'='
number|'1'
op|','
name|'envelope'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fetchFast
dedent|''
name|'def'
name|'fetchFast'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve several different fields of one or more messages\n\n        This command is allowed in the Selected state.  This is equivalent\n        to issuing all of the C{fetchFlags}, C{fetchInternalDate}, and\n        C{fetchSize} functions.\n\n        @type messages: C{MessageSet} or C{str}\n        @param messages: A message sequence set\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a dict mapping\n        message numbers to dict of the retrieved data values, or whose\n        errback is invoked if there is an error.  They dictionary keys are\n        "flags", "date", and "size".\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fetch'
op|'('
nl|'\n'
name|'messages'
op|','
name|'useUID'
op|'='
name|'uid'
op|','
name|'flags'
op|'='
number|'1'
op|','
name|'internaldate'
op|'='
number|'1'
op|','
name|'rfc822size'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_parseFetchPairs
dedent|''
name|'def'
name|'_parseFetchPairs'
op|'('
name|'self'
op|','
name|'fetchResponseList'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given the result of parsing a single I{FETCH} response, construct a\n        C{dict} mapping response keys to response values.\n\n        @param fetchResponseList: The result of parsing a I{FETCH} response\n            with L{parseNestedParens} and extracting just the response data\n            (that is, just the part that comes after C{"FETCH"}).  The form\n            of this input (and therefore the output of this method) is very\n            disagreable.  A valuable improvement would be to enumerate the\n            possible keys (representing them as structured objects of some\n            sort) rather than using strings and tuples of tuples of strings\n            and so forth.  This would allow the keys to be documented more\n            easily and would allow for a much simpler application-facing API\n            (one not based on looking up somewhat hard to predict keys in a\n            dict).  Since C{fetchResponseList} notionally represents a\n            flattened sequence of pairs (identifying keys followed by their\n            associated values), collapsing such complex elements of this\n            list as C{["BODY", ["HEADER.FIELDS", ["SUBJECT"]]]} into a\n            single object would also greatly simplify the implementation of\n            this method.\n\n        @return: A C{dict} of the response data represented by C{pairs}.  Keys\n            in this dictionary are things like C{"RFC822.TEXT"}, C{"FLAGS"}, or\n            C{("BODY", ("HEADER.FIELDS", ("SUBJECT",)))}.  Values are entirely\n            dependent on the key with which they are associated, but retain the\n            same structured as produced by L{parseNestedParens}.\n        """'
newline|'\n'
name|'values'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'responseParts'
op|'='
name|'iter'
op|'('
name|'fetchResponseList'
op|')'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'key'
op|'='
name|'responseParts'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'responseParts'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IllegalServerResponse'
op|'('
nl|'\n'
string|'"Not enough arguments"'
op|','
name|'fetchResponseList'
op|')'
newline|'\n'
nl|'\n'
comment|'# The parsed forms of responses like:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# BODY[] VALUE'
nl|'\n'
comment|'# BODY[TEXT] VALUE'
nl|'\n'
comment|'# BODY[HEADER.FIELDS (SUBJECT)] VALUE'
nl|'\n'
comment|'# BODY[HEADER.FIELDS (SUBJECT)]<N.M> VALUE'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# are:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# ["BODY", [], VALUE]'
nl|'\n'
comment|'# ["BODY", ["TEXT"], VALUE]'
nl|'\n'
comment|'# ["BODY", ["HEADER.FIELDS", ["SUBJECT"]], VALUE]'
nl|'\n'
comment|'# ["BODY", ["HEADER.FIELDS", ["SUBJECT"]], "<N.M>", VALUE]'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Here, check for these cases and grab as many extra elements as'
nl|'\n'
comment|'# necessary to retrieve the body information.'
nl|'\n'
dedent|''
name|'if'
name|'key'
name|'in'
op|'('
string|'"BODY"'
op|','
string|'"BODY.PEEK"'
op|')'
name|'and'
name|'isinstance'
op|'('
name|'value'
op|','
name|'list'
op|')'
name|'and'
name|'len'
op|'('
name|'value'
op|')'
op|'<'
number|'3'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'len'
op|'('
name|'value'
op|')'
op|'<'
number|'2'
op|':'
newline|'\n'
indent|'                    '
name|'key'
op|'='
op|'('
name|'key'
op|','
name|'tuple'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'key'
op|'='
op|'('
name|'key'
op|','
op|'('
name|'value'
op|'['
number|'0'
op|']'
op|','
name|'tuple'
op|'('
name|'value'
op|'['
number|'1'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'value'
op|'='
name|'responseParts'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'IllegalServerResponse'
op|'('
nl|'\n'
string|'"Not enough arguments"'
op|','
name|'fetchResponseList'
op|')'
newline|'\n'
nl|'\n'
comment|'# Handle partial ranges'
nl|'\n'
dedent|''
name|'if'
name|'value'
op|'.'
name|'startswith'
op|'('
string|"'<'"
op|')'
name|'and'
name|'value'
op|'.'
name|'endswith'
op|'('
string|"'>'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'int'
op|'('
name|'value'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
comment|"# This isn't really a range, it's some content."
nl|'\n'
indent|'                        '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'key'
op|'='
name|'key'
op|'+'
op|'('
name|'value'
op|','
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                            '
name|'value'
op|'='
name|'responseParts'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'                            '
name|'raise'
name|'IllegalServerResponse'
op|'('
nl|'\n'
string|'"Not enough arguments"'
op|','
name|'fetchResponseList'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'values'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'return'
name|'values'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbFetch
dedent|''
name|'def'
name|'_cbFetch'
op|'('
name|'self'
op|','
op|'('
name|'lines'
op|','
name|'last'
op|')'
op|','
name|'requestedParts'
op|','
name|'structured'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'parts'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'=='
number|'3'
name|'and'
name|'parts'
op|'['
number|'1'
op|']'
op|'=='
string|"'FETCH'"
op|':'
newline|'\n'
indent|'                '
name|'id'
op|'='
name|'self'
op|'.'
name|'_intOrRaise'
op|'('
name|'parts'
op|'['
number|'0'
op|']'
op|','
name|'parts'
op|')'
newline|'\n'
name|'if'
name|'id'
name|'not'
name|'in'
name|'info'
op|':'
newline|'\n'
indent|'                    '
name|'info'
op|'['
name|'id'
op|']'
op|'='
op|'['
name|'parts'
op|'['
number|'2'
op|']'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'info'
op|'['
name|'id'
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'extend'
op|'('
name|'parts'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'results'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
op|'('
name|'messageId'
op|','
name|'values'
op|')'
name|'in'
name|'info'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mapping'
op|'='
name|'self'
op|'.'
name|'_parseFetchPairs'
op|'('
name|'values'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'results'
op|'.'
name|'setdefault'
op|'('
name|'messageId'
op|','
op|'{'
op|'}'
op|')'
op|'.'
name|'update'
op|'('
name|'mapping'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'flagChanges'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'messageId'
name|'in'
name|'results'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'='
name|'results'
op|'['
name|'messageId'
op|']'
newline|'\n'
name|'for'
name|'part'
name|'in'
name|'values'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'part'
name|'not'
name|'in'
name|'requestedParts'
name|'and'
name|'part'
op|'=='
string|"'FLAGS'"
op|':'
newline|'\n'
indent|'                    '
name|'flagChanges'
op|'['
name|'messageId'
op|']'
op|'='
name|'values'
op|'['
string|"'FLAGS'"
op|']'
newline|'\n'
comment|'# Find flags in the result and get rid of them.'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'info'
op|'['
name|'messageId'
op|']'
op|'['
number|'0'
op|']'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'info'
op|'['
name|'messageId'
op|']'
op|'['
number|'0'
op|']'
op|'['
name|'i'
op|']'
op|'=='
string|"'FLAGS'"
op|':'
newline|'\n'
indent|'                            '
name|'del'
name|'info'
op|'['
name|'messageId'
op|']'
op|'['
number|'0'
op|']'
op|'['
name|'i'
op|':'
name|'i'
op|'+'
number|'2'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'del'
name|'values'
op|'['
string|"'FLAGS'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'values'
op|':'
newline|'\n'
indent|'                        '
name|'del'
name|'results'
op|'['
name|'messageId'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'if'
name|'flagChanges'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'flagsChanged'
op|'('
name|'flagChanges'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'structured'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'results'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fetchSpecific
dedent|''
dedent|''
name|'def'
name|'fetchSpecific'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'uid'
op|'='
number|'0'
op|','
name|'headerType'
op|'='
name|'None'
op|','
nl|'\n'
name|'headerNumber'
op|'='
name|'None'
op|','
name|'headerArgs'
op|'='
name|'None'
op|','
name|'peek'
op|'='
name|'None'
op|','
nl|'\n'
name|'offset'
op|'='
name|'None'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve a specific section of one or more messages\n\n        @type messages: C{MessageSet} or C{str}\n        @param messages: A message sequence set\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @type headerType: C{str}\n        @param headerType: If specified, must be one of HEADER,\n        HEADER.FIELDS, HEADER.FIELDS.NOT, MIME, or TEXT, and will determine\n        which part of the message is retrieved.  For HEADER.FIELDS and\n        HEADER.FIELDS.NOT, C{headerArgs} must be a sequence of header names.\n        For MIME, C{headerNumber} must be specified.\n\n        @type headerNumber: C{int} or C{int} sequence\n        @param headerNumber: The nested rfc822 index specifying the\n        entity to retrieve.  For example, C{1} retrieves the first\n        entity of the message, and C{(2, 1, 3}) retrieves the 3rd\n        entity inside the first entity inside the second entity of\n        the message.\n\n        @type headerArgs: A sequence of C{str}\n        @param headerArgs: If C{headerType} is HEADER.FIELDS, these are the\n        headers to retrieve.  If it is HEADER.FIELDS.NOT, these are the\n        headers to exclude from retrieval.\n\n        @type peek: C{bool}\n        @param peek: If true, cause the server to not set the \\\\Seen\n        flag on this message as a result of this command.\n\n        @type offset: C{int}\n        @param offset: The number of octets at the beginning of the result\n        to skip.\n\n        @type length: C{int}\n        @param length: The number of octets to retrieve.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a mapping of\n        message numbers to retrieved data, or whose errback is invoked\n        if there is an error.\n        """'
newline|'\n'
name|'fmt'
op|'='
string|"'%s BODY%s[%s%s%s]%s'"
newline|'\n'
name|'if'
name|'headerNumber'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'number'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'headerNumber'
op|','
name|'int'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'number'
op|'='
name|'str'
op|'('
name|'headerNumber'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'number'
op|'='
string|"'.'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'headerNumber'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'headerType'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'header'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'elif'
name|'number'
op|':'
newline|'\n'
indent|'            '
name|'header'
op|'='
string|"'.'"
op|'+'
name|'headerType'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'header'
op|'='
name|'headerType'
newline|'\n'
dedent|''
name|'if'
name|'header'
name|'and'
name|'headerType'
name|'not'
name|'in'
op|'('
string|"'TEXT'"
op|','
string|"'MIME'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'headerArgs'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'payload'
op|'='
string|"' (%s)'"
op|'%'
string|"' '"
op|'.'
name|'join'
op|'('
name|'headerArgs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'payload'
op|'='
string|"' ()'"
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'payload'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'if'
name|'offset'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'extra'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'extra'
op|'='
string|"'<%d.%d>'"
op|'%'
op|'('
name|'offset'
op|','
name|'length'
op|')'
newline|'\n'
dedent|''
name|'fetch'
op|'='
name|'uid'
name|'and'
string|"'UID FETCH'"
name|'or'
string|"'FETCH'"
newline|'\n'
name|'cmd'
op|'='
name|'fmt'
op|'%'
op|'('
name|'messages'
op|','
name|'peek'
name|'and'
string|"'.PEEK'"
name|'or'
string|"''"
op|','
name|'number'
op|','
name|'header'
op|','
name|'payload'
op|','
name|'extra'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
name|'fetch'
op|','
name|'cmd'
op|','
name|'wantResponse'
op|'='
op|'('
string|"'FETCH'"
op|','
op|')'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbFetch'
op|','
op|'('
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_fetch
dedent|''
name|'def'
name|'_fetch'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'useUID'
op|'='
number|'0'
op|','
op|'**'
name|'terms'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fetch'
op|'='
name|'useUID'
name|'and'
string|"'UID FETCH'"
name|'or'
string|"'FETCH'"
newline|'\n'
nl|'\n'
name|'if'
string|"'rfc822text'"
name|'in'
name|'terms'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'terms'
op|'['
string|"'rfc822text'"
op|']'
newline|'\n'
name|'terms'
op|'['
string|"'rfc822.text'"
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
string|"'rfc822size'"
name|'in'
name|'terms'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'terms'
op|'['
string|"'rfc822size'"
op|']'
newline|'\n'
name|'terms'
op|'['
string|"'rfc822.size'"
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
string|"'rfc822header'"
name|'in'
name|'terms'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'terms'
op|'['
string|"'rfc822header'"
op|']'
newline|'\n'
name|'terms'
op|'['
string|"'rfc822.header'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'cmd'
op|'='
string|"'%s (%s)'"
op|'%'
op|'('
name|'messages'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
op|'['
name|'s'
op|'.'
name|'upper'
op|'('
op|')'
name|'for'
name|'s'
name|'in'
name|'terms'
op|'.'
name|'keys'
op|'('
op|')'
op|']'
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
name|'fetch'
op|','
name|'cmd'
op|','
name|'wantResponse'
op|'='
op|'('
string|"'FETCH'"
op|','
op|')'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbFetch'
op|','
name|'map'
op|'('
name|'str'
op|'.'
name|'upper'
op|','
name|'terms'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|setFlags
dedent|''
name|'def'
name|'setFlags'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'flags'
op|','
name|'silent'
op|'='
number|'1'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the flags for one or more messages.\n\n        This command is allowed in the Selected state.\n\n        @type messages: C{MessageSet} or C{str}\n        @param messages: A message sequence set\n\n        @type flags: Any iterable of C{str}\n        @param flags: The flags to set\n\n        @type silent: C{bool}\n        @param silent: If true, cause the server to supress its verbose\n        response.\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a list of the\n        the server\'s responses (C{[]} if C{silent} is true) or whose\n        errback is invoked if there is an error.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_store'
op|'('
name|'str'
op|'('
name|'messages'
op|')'
op|','
string|"'FLAGS'"
op|','
name|'silent'
op|','
name|'flags'
op|','
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addFlags
dedent|''
name|'def'
name|'addFlags'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'flags'
op|','
name|'silent'
op|'='
number|'1'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add to the set flags for one or more messages.\n\n        This command is allowed in the Selected state.\n\n        @type messages: C{MessageSet} or C{str}\n        @param messages: A message sequence set\n\n        @type flags: Any iterable of C{str}\n        @param flags: The flags to set\n\n        @type silent: C{bool}\n        @param silent: If true, cause the server to supress its verbose\n        response.\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a list of the\n        the server\'s responses (C{[]} if C{silent} is true) or whose\n        errback is invoked if there is an error.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_store'
op|'('
name|'str'
op|'('
name|'messages'
op|')'
op|','
string|"'+FLAGS'"
op|','
name|'silent'
op|','
name|'flags'
op|','
name|'uid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|removeFlags
dedent|''
name|'def'
name|'removeFlags'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'flags'
op|','
name|'silent'
op|'='
number|'1'
op|','
name|'uid'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove from the set flags for one or more messages.\n\n        This command is allowed in the Selected state.\n\n        @type messages: C{MessageSet} or C{str}\n        @param messages: A message sequence set\n\n        @type flags: Any iterable of C{str}\n        @param flags: The flags to set\n\n        @type silent: C{bool}\n        @param silent: If true, cause the server to supress its verbose\n        response.\n\n        @type uid: C{bool}\n        @param uid: Indicates whether the message sequence set is of message\n        numbers or of unique message IDs.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a list of the\n        the server\'s responses (C{[]} if C{silent} is true) or whose\n        errback is invoked if there is an error.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_store'
op|'('
name|'str'
op|'('
name|'messages'
op|')'
op|','
string|"'-FLAGS'"
op|','
name|'silent'
op|','
name|'flags'
op|','
name|'uid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_store
dedent|''
name|'def'
name|'_store'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'cmd'
op|','
name|'silent'
op|','
name|'flags'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'silent'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
name|'cmd'
op|'+'
string|"'.SILENT'"
newline|'\n'
dedent|''
name|'store'
op|'='
name|'uid'
name|'and'
string|"'UID STORE'"
name|'or'
string|"'STORE'"
newline|'\n'
name|'args'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
op|'('
name|'messages'
op|','
name|'cmd'
op|','
string|"'(%s)'"
op|'%'
string|"' '"
op|'.'
name|'join'
op|'('
name|'flags'
op|')'
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
name|'store'
op|','
name|'args'
op|','
name|'wantResponse'
op|'='
op|'('
string|"'FETCH'"
op|','
op|')'
op|')'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'silent'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
op|'('
string|"'FLAGS'"
op|','
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbFetch'
op|','
name|'expected'
op|','
name|'True'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|copy
dedent|''
name|'def'
name|'copy'
op|'('
name|'self'
op|','
name|'messages'
op|','
name|'mailbox'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Copy the specified messages to the specified mailbox.\n\n        This command is allowed in the Selected state.\n\n        @type messages: C{str}\n        @param messages: A message sequence set\n\n        @type mailbox: C{str}\n        @param mailbox: The mailbox to which to copy the messages\n\n        @type uid: C{bool}\n        @param uid: If true, the C{messages} refers to message UIDs, rather\n        than message sequence numbers.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with a true value\n        when the copy is successful, or whose errback is invoked if there\n        is an error.\n        """'
newline|'\n'
name|'if'
name|'uid'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
string|"'UID COPY'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
string|"'COPY'"
newline|'\n'
dedent|''
name|'args'
op|'='
string|"'%s %s'"
op|'%'
op|'('
name|'messages'
op|','
name|'_prepareMailboxName'
op|'('
name|'mailbox'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sendCommand'
op|'('
name|'Command'
op|'('
name|'cmd'
op|','
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# IMailboxListener methods'
nl|'\n'
comment|'#'
nl|'\n'
DECL|member|modeChanged
dedent|''
name|'def'
name|'modeChanged'
op|'('
name|'self'
op|','
name|'writeable'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override me"""'
newline|'\n'
nl|'\n'
DECL|member|flagsChanged
dedent|''
name|'def'
name|'flagsChanged'
op|'('
name|'self'
op|','
name|'newFlags'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override me"""'
newline|'\n'
nl|'\n'
DECL|member|newMessages
dedent|''
name|'def'
name|'newMessages'
op|'('
name|'self'
op|','
name|'exists'
op|','
name|'recent'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override me"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IllegalIdentifierError
dedent|''
dedent|''
name|'class'
name|'IllegalIdentifierError'
op|'('
name|'IMAP4Exception'
op|')'
op|':'
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|parseIdList
name|'def'
name|'parseIdList'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'res'
op|'='
name|'MessageSet'
op|'('
op|')'
newline|'\n'
name|'parts'
op|'='
name|'s'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
name|'for'
name|'p'
name|'in'
name|'parts'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"':'"
name|'in'
name|'p'
op|':'
newline|'\n'
indent|'            '
name|'low'
op|','
name|'high'
op|'='
name|'p'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'low'
op|'=='
string|"'*'"
op|':'
newline|'\n'
indent|'                    '
name|'low'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'low'
op|'='
name|'long'
op|'('
name|'low'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'high'
op|'=='
string|"'*'"
op|':'
newline|'\n'
indent|'                    '
name|'high'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'high'
op|'='
name|'long'
op|'('
name|'high'
op|')'
newline|'\n'
dedent|''
name|'res'
op|'.'
name|'extend'
op|'('
op|'('
name|'low'
op|','
name|'high'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IllegalIdentifierError'
op|'('
name|'p'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'p'
op|'=='
string|"'*'"
op|':'
newline|'\n'
indent|'                    '
name|'p'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'p'
op|'='
name|'long'
op|'('
name|'p'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IllegalIdentifierError'
op|'('
name|'p'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'.'
name|'extend'
op|'('
name|'p'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'res'
newline|'\n'
nl|'\n'
DECL|class|IllegalQueryError
dedent|''
name|'class'
name|'IllegalQueryError'
op|'('
name|'IMAP4Exception'
op|')'
op|':'
name|'pass'
newline|'\n'
nl|'\n'
DECL|variable|_SIMPLE_BOOL
name|'_SIMPLE_BOOL'
op|'='
op|'('
nl|'\n'
string|"'ALL'"
op|','
string|"'ANSWERED'"
op|','
string|"'DELETED'"
op|','
string|"'DRAFT'"
op|','
string|"'FLAGGED'"
op|','
string|"'NEW'"
op|','
string|"'OLD'"
op|','
string|"'RECENT'"
op|','
nl|'\n'
string|"'SEEN'"
op|','
string|"'UNANSWERED'"
op|','
string|"'UNDELETED'"
op|','
string|"'UNDRAFT'"
op|','
string|"'UNFLAGGED'"
op|','
string|"'UNSEEN'"
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_NO_QUOTES
name|'_NO_QUOTES'
op|'='
op|'('
nl|'\n'
string|"'LARGER'"
op|','
string|"'SMALLER'"
op|','
string|"'UID'"
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|function|Query
name|'def'
name|'Query'
op|'('
name|'sorted'
op|'='
number|'0'
op|','
op|'**'
name|'kwarg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a query string\n\n    Among the accepted keywords are::\n\n        all         : If set to a true value, search all messages in the\n                      current mailbox\n\n        answered    : If set to a true value, search messages flagged with\n                      \\\\Answered\n\n        bcc         : A substring to search the BCC header field for\n\n        before      : Search messages with an internal date before this\n                      value.  The given date should be a string in the format\n                      of \'DD-Mon-YYYY\'.  For example, \'03-Mar-2003\'.\n\n        body        : A substring to search the body of the messages for\n\n        cc          : A substring to search the CC header field for\n\n        deleted     : If set to a true value, search messages flagged with\n                      \\\\Deleted\n\n        draft       : If set to a true value, search messages flagged with\n                      \\\\Draft\n\n        flagged     : If set to a true value, search messages flagged with\n                      \\\\Flagged\n\n        from        : A substring to search the From header field for\n\n        header      : A two-tuple of a header name and substring to search\n                      for in that header\n\n        keyword     : Search for messages with the given keyword set\n\n        larger      : Search for messages larger than this number of octets\n\n        messages    : Search only the given message sequence set.\n\n        new         : If set to a true value, search messages flagged with\n                      \\\\Recent but not \\\\Seen\n\n        old         : If set to a true value, search messages not flagged with\n                      \\\\Recent\n\n        on          : Search messages with an internal date which is on this\n                      date.  The given date should be a string in the format\n                      of \'DD-Mon-YYYY\'.  For example, \'03-Mar-2003\'.\n\n        recent      : If set to a true value, search for messages flagged with\n                      \\\\Recent\n\n        seen        : If set to a true value, search for messages flagged with\n                      \\\\Seen\n\n        sentbefore  : Search for messages with an RFC822 \'Date\' header before\n                      this date.  The given date should be a string in the format\n                      of \'DD-Mon-YYYY\'.  For example, \'03-Mar-2003\'.\n\n        senton      : Search for messages with an RFC822 \'Date\' header which is\n                      on this date  The given date should be a string in the format\n                      of \'DD-Mon-YYYY\'.  For example, \'03-Mar-2003\'.\n\n        sentsince   : Search for messages with an RFC822 \'Date\' header which is\n                      after this date.  The given date should be a string in the format\n                      of \'DD-Mon-YYYY\'.  For example, \'03-Mar-2003\'.\n\n        since       : Search for messages with an internal date that is after\n                      this date..  The given date should be a string in the format\n                      of \'DD-Mon-YYYY\'.  For example, \'03-Mar-2003\'.\n\n        smaller     : Search for messages smaller than this number of octets\n\n        subject     : A substring to search the \'subject\' header for\n\n        text        : A substring to search the entire message for\n\n        to          : A substring to search the \'to\' header for\n\n        uid         : Search only the messages in the given message set\n\n        unanswered  : If set to a true value, search for messages not\n                      flagged with \\\\Answered\n\n        undeleted   : If set to a true value, search for messages not\n                      flagged with \\\\Deleted\n\n        undraft     : If set to a true value, search for messages not\n                      flagged with \\\\Draft\n\n        unflagged   : If set to a true value, search for messages not\n                      flagged with \\\\Flagged\n\n        unkeyword   : Search for messages without the given keyword set\n\n        unseen      : If set to a true value, search for messages not\n                      flagged with \\\\Seen\n\n    @type sorted: C{bool}\n    @param sorted: If true, the output will be sorted, alphabetically.\n    The standard does not require it, but it makes testing this function\n    easier.  The default is zero, and this should be acceptable for any\n    application.\n\n    @rtype: C{str}\n    @return: The formatted query string\n    """'
newline|'\n'
name|'cmd'
op|'='
op|'['
op|']'
newline|'\n'
name|'keys'
op|'='
name|'kwarg'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'if'
name|'sorted'
op|':'
newline|'\n'
indent|'        '
name|'keys'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
dedent|''
name|'for'
name|'k'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'        '
name|'v'
op|'='
name|'kwarg'
op|'['
name|'k'
op|']'
newline|'\n'
name|'k'
op|'='
name|'k'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'if'
name|'k'
name|'in'
name|'_SIMPLE_BOOL'
name|'and'
name|'v'
op|':'
newline|'\n'
indent|'           '
name|'cmd'
op|'.'
name|'append'
op|'('
name|'k'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'k'
op|'=='
string|"'HEADER'"
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'.'
name|'extend'
op|'('
op|'['
name|'k'
op|','
name|'v'
op|'['
number|'0'
op|']'
op|','
string|'\'"%s"\''
op|'%'
op|'('
name|'v'
op|'['
number|'1'
op|']'
op|','
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'k'
name|'not'
name|'in'
name|'_NO_QUOTES'
op|':'
newline|'\n'
indent|'           '
name|'cmd'
op|'.'
name|'extend'
op|'('
op|'['
name|'k'
op|','
string|'\'"%s"\''
op|'%'
op|'('
name|'v'
op|','
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'           '
name|'cmd'
op|'.'
name|'extend'
op|'('
op|'['
name|'k'
op|','
string|"'%s'"
op|'%'
op|'('
name|'v'
op|','
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'len'
op|'('
name|'cmd'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'(%s)'"
op|'%'
string|"' '"
op|'.'
name|'join'
op|'('
name|'cmd'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"' '"
op|'.'
name|'join'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
DECL|function|Or
dedent|''
dedent|''
name|'def'
name|'Or'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The disjunction of two or more queries"""'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'args'
op|')'
op|'<'
number|'2'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'IllegalQueryError'
op|','
name|'args'
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'args'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'(OR %s %s)'"
op|'%'
name|'args'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'(OR %s %s)'"
op|'%'
op|'('
name|'args'
op|'['
number|'0'
op|']'
op|','
name|'Or'
op|'('
op|'*'
name|'args'
op|'['
number|'1'
op|':'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|Not
dedent|''
dedent|''
name|'def'
name|'Not'
op|'('
name|'query'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The negation of a query"""'
newline|'\n'
name|'return'
string|"'(NOT %s)'"
op|'%'
op|'('
name|'query'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|class|MismatchedNesting
dedent|''
name|'class'
name|'MismatchedNesting'
op|'('
name|'IMAP4Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|MismatchedQuoting
dedent|''
name|'class'
name|'MismatchedQuoting'
op|'('
name|'IMAP4Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|wildcardToRegexp
dedent|''
name|'def'
name|'wildcardToRegexp'
op|'('
name|'wildcard'
op|','
name|'delim'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'wildcard'
op|'='
name|'wildcard'
op|'.'
name|'replace'
op|'('
string|"'*'"
op|','
string|"'(?:.*?)'"
op|')'
newline|'\n'
name|'if'
name|'delim'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'wildcard'
op|'='
name|'wildcard'
op|'.'
name|'replace'
op|'('
string|"'%'"
op|','
string|"'(?:.*?)'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'wildcard'
op|'='
name|'wildcard'
op|'.'
name|'replace'
op|'('
string|"'%'"
op|','
string|"'(?:(?:[^%s])*?)'"
op|'%'
name|'re'
op|'.'
name|'escape'
op|'('
name|'delim'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'re'
op|'.'
name|'compile'
op|'('
name|'wildcard'
op|','
name|'re'
op|'.'
name|'I'
op|')'
newline|'\n'
nl|'\n'
DECL|function|splitQuoted
dedent|''
name|'def'
name|'splitQuoted'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Split a string into whitespace delimited tokens\n\n    Tokens that would otherwise be separated but are surrounded by \\"\n    remain as a single token.  Any token that is not quoted and is\n    equal to \\"NIL\\" is tokenized as C{None}.\n\n    @type s: C{str}\n    @param s: The string to be split\n\n    @rtype: C{list} of C{str}\n    @return: A list of the resulting tokens\n\n    @raise MismatchedQuoting: Raised if an odd number of quotes are present\n    """'
newline|'\n'
name|'s'
op|'='
name|'s'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'word'
op|'='
op|'['
op|']'
newline|'\n'
name|'inQuote'
op|'='
name|'inWord'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'i'
op|','
name|'c'
name|'in'
name|'enumerate'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'c'
op|'=='
string|'\'"\''
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'i'
name|'and'
name|'s'
op|'['
name|'i'
op|'-'
number|'1'
op|']'
op|'=='
string|"'\\\\'"
op|':'
newline|'\n'
indent|'                '
name|'word'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'word'
op|'.'
name|'append'
op|'('
string|'\'"\''
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'inQuote'
op|':'
newline|'\n'
indent|'                '
name|'inQuote'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'inQuote'
op|'='
name|'False'
newline|'\n'
name|'result'
op|'.'
name|'append'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'word'
op|')'
op|')'
newline|'\n'
name|'word'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'not'
name|'inWord'
name|'and'
name|'not'
name|'inQuote'
name|'and'
name|'c'
name|'not'
name|'in'
op|'('
string|'\'"\''
op|'+'
name|'string'
op|'.'
name|'whitespace'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'inWord'
op|'='
name|'True'
newline|'\n'
name|'word'
op|'.'
name|'append'
op|'('
name|'c'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'inWord'
name|'and'
name|'not'
name|'inQuote'
name|'and'
name|'c'
name|'in'
name|'string'
op|'.'
name|'whitespace'
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'word'
op|')'
newline|'\n'
name|'if'
name|'w'
op|'=='
string|"'NIL'"
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'.'
name|'append'
op|'('
name|'w'
op|')'
newline|'\n'
dedent|''
name|'word'
op|'='
op|'['
op|']'
newline|'\n'
name|'inWord'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'elif'
name|'inWord'
name|'or'
name|'inQuote'
op|':'
newline|'\n'
indent|'            '
name|'word'
op|'.'
name|'append'
op|'('
name|'c'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'inQuote'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'MismatchedQuoting'
op|'('
name|'s'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'inWord'
op|':'
newline|'\n'
indent|'        '
name|'w'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'word'
op|')'
newline|'\n'
name|'if'
name|'w'
op|'=='
string|"'NIL'"
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'append'
op|'('
name|'w'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|splitOn
dedent|''
name|'def'
name|'splitOn'
op|'('
name|'sequence'
op|','
name|'predicate'
op|','
name|'transformers'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'mode'
op|'='
name|'predicate'
op|'('
name|'sequence'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'tmp'
op|'='
op|'['
name|'sequence'
op|'['
number|'0'
op|']'
op|']'
newline|'\n'
name|'for'
name|'e'
name|'in'
name|'sequence'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'predicate'
op|'('
name|'e'
op|')'
newline|'\n'
name|'if'
name|'p'
op|'!='
name|'mode'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'extend'
op|'('
name|'transformers'
op|'['
name|'mode'
op|']'
op|'('
name|'tmp'
op|')'
op|')'
newline|'\n'
name|'tmp'
op|'='
op|'['
name|'e'
op|']'
newline|'\n'
name|'mode'
op|'='
name|'p'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'tmp'
op|'.'
name|'append'
op|'('
name|'e'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'result'
op|'.'
name|'extend'
op|'('
name|'transformers'
op|'['
name|'mode'
op|']'
op|'('
name|'tmp'
op|')'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|function|collapseStrings
dedent|''
name|'def'
name|'collapseStrings'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Turns a list of length-one strings and lists into a list of longer\n    strings and lists.  For example,\n\n    [\'a\', \'b\', [\'c\', \'d\']] is returned as [\'ab\', [\'cd\']]\n\n    @type results: C{list} of C{str} and C{list}\n    @param results: The list to be collapsed\n\n    @rtype: C{list} of C{str} and C{list}\n    @return: A new list which is the collapsed form of C{results}\n    """'
newline|'\n'
name|'copy'
op|'='
op|'['
op|']'
newline|'\n'
name|'begun'
op|'='
name|'None'
newline|'\n'
name|'listsList'
op|'='
op|'['
name|'isinstance'
op|'('
name|'s'
op|','
name|'types'
op|'.'
name|'ListType'
op|')'
name|'for'
name|'s'
name|'in'
name|'results'
op|']'
newline|'\n'
nl|'\n'
name|'pred'
op|'='
name|'lambda'
name|'e'
op|':'
name|'isinstance'
op|'('
name|'e'
op|','
name|'types'
op|'.'
name|'TupleType'
op|')'
newline|'\n'
name|'tran'
op|'='
op|'{'
nl|'\n'
number|'0'
op|':'
name|'lambda'
name|'e'
op|':'
name|'splitQuoted'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'e'
op|')'
op|')'
op|','
nl|'\n'
number|'1'
op|':'
name|'lambda'
name|'e'
op|':'
op|'['
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'i'
op|'['
number|'0'
op|']'
name|'for'
name|'i'
name|'in'
name|'e'
op|']'
op|')'
op|']'
nl|'\n'
op|'}'
newline|'\n'
name|'for'
op|'('
name|'i'
op|','
name|'c'
op|','
name|'isList'
op|')'
name|'in'
name|'zip'
op|'('
name|'range'
op|'('
name|'len'
op|'('
name|'results'
op|')'
op|')'
op|','
name|'results'
op|','
name|'listsList'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isList'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'begun'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'copy'
op|'.'
name|'extend'
op|'('
name|'splitOn'
op|'('
name|'results'
op|'['
name|'begun'
op|':'
name|'i'
op|']'
op|','
name|'pred'
op|','
name|'tran'
op|')'
op|')'
newline|'\n'
name|'begun'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'copy'
op|'.'
name|'append'
op|'('
name|'collapseStrings'
op|'('
name|'c'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'begun'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'begun'
op|'='
name|'i'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'begun'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'copy'
op|'.'
name|'extend'
op|'('
name|'splitOn'
op|'('
name|'results'
op|'['
name|'begun'
op|':'
op|']'
op|','
name|'pred'
op|','
name|'tran'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'copy'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parseNestedParens
dedent|''
name|'def'
name|'parseNestedParens'
op|'('
name|'s'
op|','
name|'handleLiteral'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parse an s-exp-like string into a more useful data structure.\n\n    @type s: C{str}\n    @param s: The s-exp-like string to parse\n\n    @rtype: C{list} of C{str} and C{list}\n    @return: A list containing the tokens present in the input.\n\n    @raise MismatchedNesting: Raised if the number or placement\n    of opening or closing parenthesis is invalid.\n    """'
newline|'\n'
name|'s'
op|'='
name|'s'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'inQuote'
op|'='
number|'0'
newline|'\n'
name|'contentStack'
op|'='
op|'['
op|'['
op|']'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'i'
op|'='
number|'0'
newline|'\n'
name|'L'
op|'='
name|'len'
op|'('
name|'s'
op|')'
newline|'\n'
name|'while'
name|'i'
op|'<'
name|'L'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'='
name|'s'
op|'['
name|'i'
op|']'
newline|'\n'
name|'if'
name|'inQuote'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'c'
op|'=='
string|"'\\\\'"
op|':'
newline|'\n'
indent|'                    '
name|'contentStack'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'append'
op|'('
name|'s'
op|'['
name|'i'
op|':'
name|'i'
op|'+'
number|'2'
op|']'
op|')'
newline|'\n'
name|'i'
op|'+='
number|'2'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'elif'
name|'c'
op|'=='
string|'\'"\''
op|':'
newline|'\n'
indent|'                    '
name|'inQuote'
op|'='
name|'not'
name|'inQuote'
newline|'\n'
dedent|''
name|'contentStack'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'append'
op|'('
name|'c'
op|')'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'c'
op|'=='
string|'\'"\''
op|':'
newline|'\n'
indent|'                    '
name|'contentStack'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'append'
op|'('
name|'c'
op|')'
newline|'\n'
name|'inQuote'
op|'='
name|'not'
name|'inQuote'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'handleLiteral'
name|'and'
name|'c'
op|'=='
string|"'{'"
op|':'
newline|'\n'
indent|'                    '
name|'end'
op|'='
name|'s'
op|'.'
name|'find'
op|'('
string|"'}'"
op|','
name|'i'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'ValueError'
op|','
string|'"Malformed literal"'
newline|'\n'
dedent|''
name|'literalSize'
op|'='
name|'int'
op|'('
name|'s'
op|'['
name|'i'
op|'+'
number|'1'
op|':'
name|'end'
op|']'
op|')'
newline|'\n'
name|'contentStack'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'append'
op|'('
op|'('
name|'s'
op|'['
name|'end'
op|'+'
number|'3'
op|':'
name|'end'
op|'+'
number|'3'
op|'+'
name|'literalSize'
op|']'
op|','
op|')'
op|')'
newline|'\n'
name|'i'
op|'='
name|'end'
op|'+'
number|'3'
op|'+'
name|'literalSize'
newline|'\n'
dedent|''
name|'elif'
name|'c'
op|'=='
string|"'('"
name|'or'
name|'c'
op|'=='
string|"'['"
op|':'
newline|'\n'
indent|'                    '
name|'contentStack'
op|'.'
name|'append'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'c'
op|'=='
string|"')'"
name|'or'
name|'c'
op|'=='
string|"']'"
op|':'
newline|'\n'
indent|'                    '
name|'contentStack'
op|'['
op|'-'
number|'2'
op|']'
op|'.'
name|'append'
op|'('
name|'contentStack'
op|'.'
name|'pop'
op|'('
op|')'
op|')'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'contentStack'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'append'
op|'('
name|'c'
op|')'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'MismatchedNesting'
op|'('
name|'s'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'contentStack'
op|')'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'MismatchedNesting'
op|'('
name|'s'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'collapseStrings'
op|'('
name|'contentStack'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_quote
dedent|''
name|'def'
name|'_quote'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|'\'"%s"\''
op|'%'
op|'('
name|'s'
op|'.'
name|'replace'
op|'('
string|"'\\\\'"
op|','
string|"'\\\\\\\\'"
op|')'
op|'.'
name|'replace'
op|'('
string|'\'"\''
op|','
string|'\'\\\\"\''
op|')'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|function|_literal
dedent|''
name|'def'
name|'_literal'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'{%d}\\r\\n%s'"
op|'%'
op|'('
name|'len'
op|'('
name|'s'
op|')'
op|','
name|'s'
op|')'
newline|'\n'
nl|'\n'
DECL|class|DontQuoteMe
dedent|''
name|'class'
name|'DontQuoteMe'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'value'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'self'
op|'.'
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_ATOM_SPECIALS
dedent|''
dedent|''
name|'_ATOM_SPECIALS'
op|'='
string|'\'(){ %*"\''
newline|'\n'
DECL|function|_needsQuote
name|'def'
name|'_needsQuote'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'s'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'1'
newline|'\n'
dedent|''
name|'for'
name|'c'
name|'in'
name|'s'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'c'
op|'<'
string|"'\\x20'"
name|'or'
name|'c'
op|'>'
string|"'\\x7f'"
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'1'
newline|'\n'
dedent|''
name|'if'
name|'c'
name|'in'
name|'_ATOM_SPECIALS'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|function|_prepareMailboxName
dedent|''
name|'def'
name|'_prepareMailboxName'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'name'
op|'='
name|'name'
op|'.'
name|'encode'
op|'('
string|"'imap4-utf-7'"
op|')'
newline|'\n'
name|'if'
name|'_needsQuote'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_quote'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'name'
newline|'\n'
nl|'\n'
DECL|function|_needsLiteral
dedent|''
name|'def'
name|'_needsLiteral'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
comment|'# Change this to "return 1" to wig out stupid clients'
nl|'\n'
indent|'    '
name|'return'
string|"'\\n'"
name|'in'
name|'s'
name|'or'
string|"'\\r'"
name|'in'
name|'s'
name|'or'
name|'len'
op|'('
name|'s'
op|')'
op|'>'
number|'1000'
newline|'\n'
nl|'\n'
DECL|function|collapseNestedLists
dedent|''
name|'def'
name|'collapseNestedLists'
op|'('
name|'items'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Turn a nested list structure into an s-exp-like string.\n\n    Strings in C{items} will be sent as literals if they contain CR or LF,\n    otherwise they will be quoted.  References to None in C{items} will be\n    translated to the atom NIL.  Objects with a \'read\' attribute will have\n    it called on them with no arguments and the returned string will be\n    inserted into the output as a literal.  Integers will be converted to\n    strings and inserted into the output unquoted.  Instances of\n    C{DontQuoteMe} will be converted to strings and inserted into the output\n    unquoted.\n\n    This function used to be much nicer, and only quote things that really\n    needed to be quoted (and C{DontQuoteMe} did not exist), however, many\n    broken IMAP4 clients were unable to deal with this level of sophistication,\n    forcing the current behavior to be adopted for practical reasons.\n\n    @type items: Any iterable\n\n    @rtype: C{str}\n    """'
newline|'\n'
name|'pieces'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'items'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'i'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'pieces'
op|'.'
name|'extend'
op|'('
op|'['
string|"' '"
op|','
string|"'NIL'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'i'
op|','
op|'('
name|'DontQuoteMe'
op|','
name|'int'
op|','
name|'long'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pieces'
op|'.'
name|'extend'
op|'('
op|'['
string|"' '"
op|','
name|'str'
op|'('
name|'i'
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'i'
op|','
name|'types'
op|'.'
name|'StringTypes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'_needsLiteral'
op|'('
name|'i'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pieces'
op|'.'
name|'extend'
op|'('
op|'['
string|"' '"
op|','
string|"'{'"
op|','
name|'str'
op|'('
name|'len'
op|'('
name|'i'
op|')'
op|')'
op|','
string|"'}'"
op|','
name|'IMAP4Server'
op|'.'
name|'delimiter'
op|','
name|'i'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'pieces'
op|'.'
name|'extend'
op|'('
op|'['
string|"' '"
op|','
name|'_quote'
op|'('
name|'i'
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'hasattr'
op|'('
name|'i'
op|','
string|"'read'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'i'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'pieces'
op|'.'
name|'extend'
op|'('
op|'['
string|"' '"
op|','
string|"'{'"
op|','
name|'str'
op|'('
name|'len'
op|'('
name|'d'
op|')'
op|')'
op|','
string|"'}'"
op|','
name|'IMAP4Server'
op|'.'
name|'delimiter'
op|','
name|'d'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'pieces'
op|'.'
name|'extend'
op|'('
op|'['
string|"' '"
op|','
string|"'(%s)'"
op|'%'
op|'('
name|'collapseNestedLists'
op|'('
name|'i'
op|')'
op|','
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'pieces'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IClientAuthentication
dedent|''
name|'class'
name|'IClientAuthentication'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
DECL|member|getName
indent|'    '
name|'def'
name|'getName'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return an identifier associated with this authentication scheme.\n\n        @rtype: C{str}\n        """'
newline|'\n'
nl|'\n'
DECL|member|challengeResponse
dedent|''
name|'def'
name|'challengeResponse'
op|'('
name|'secret'
op|','
name|'challenge'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate a challenge response string"""'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CramMD5ClientAuthenticator
dedent|''
dedent|''
name|'class'
name|'CramMD5ClientAuthenticator'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IClientAuthentication'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'user'
op|'='
name|'user'
newline|'\n'
nl|'\n'
DECL|member|getName
dedent|''
name|'def'
name|'getName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"CRAM-MD5"'
newline|'\n'
nl|'\n'
DECL|member|challengeResponse
dedent|''
name|'def'
name|'challengeResponse'
op|'('
name|'self'
op|','
name|'secret'
op|','
name|'chal'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'response'
op|'='
name|'hmac'
op|'.'
name|'HMAC'
op|'('
name|'secret'
op|','
name|'chal'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'return'
string|"'%s %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'user'
op|','
name|'response'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LOGINAuthenticator
dedent|''
dedent|''
name|'class'
name|'LOGINAuthenticator'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IClientAuthentication'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'user'
op|'='
name|'user'
newline|'\n'
name|'self'
op|'.'
name|'challengeResponse'
op|'='
name|'self'
op|'.'
name|'challengeUsername'
newline|'\n'
nl|'\n'
DECL|member|getName
dedent|''
name|'def'
name|'getName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"LOGIN"'
newline|'\n'
nl|'\n'
DECL|member|challengeUsername
dedent|''
name|'def'
name|'challengeUsername'
op|'('
name|'self'
op|','
name|'secret'
op|','
name|'chal'
op|')'
op|':'
newline|'\n'
comment|'# Respond to something like "Username:"'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'challengeResponse'
op|'='
name|'self'
op|'.'
name|'challengeSecret'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'user'
newline|'\n'
nl|'\n'
DECL|member|challengeSecret
dedent|''
name|'def'
name|'challengeSecret'
op|'('
name|'self'
op|','
name|'secret'
op|','
name|'chal'
op|')'
op|':'
newline|'\n'
comment|'# Respond to something like "Password:"'
nl|'\n'
indent|'        '
name|'return'
name|'secret'
newline|'\n'
nl|'\n'
DECL|class|PLAINAuthenticator
dedent|''
dedent|''
name|'class'
name|'PLAINAuthenticator'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IClientAuthentication'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'user'
op|'='
name|'user'
newline|'\n'
nl|'\n'
DECL|member|getName
dedent|''
name|'def'
name|'getName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"PLAIN"'
newline|'\n'
nl|'\n'
DECL|member|challengeResponse
dedent|''
name|'def'
name|'challengeResponse'
op|'('
name|'self'
op|','
name|'secret'
op|','
name|'chal'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\0%s\\0%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'user'
op|','
name|'secret'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MailboxException
dedent|''
dedent|''
name|'class'
name|'MailboxException'
op|'('
name|'IMAP4Exception'
op|')'
op|':'
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|MailboxCollision
name|'class'
name|'MailboxCollision'
op|'('
name|'MailboxException'
op|')'
op|':'
newline|'\n'
DECL|member|__str__
indent|'    '
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'Mailbox named %s already exists'"
op|'%'
name|'self'
op|'.'
name|'args'
newline|'\n'
nl|'\n'
DECL|class|NoSuchMailbox
dedent|''
dedent|''
name|'class'
name|'NoSuchMailbox'
op|'('
name|'MailboxException'
op|')'
op|':'
newline|'\n'
DECL|member|__str__
indent|'    '
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'No mailbox named %s exists'"
op|'%'
name|'self'
op|'.'
name|'args'
newline|'\n'
nl|'\n'
DECL|class|ReadOnlyMailbox
dedent|''
dedent|''
name|'class'
name|'ReadOnlyMailbox'
op|'('
name|'MailboxException'
op|')'
op|':'
newline|'\n'
DECL|member|__str__
indent|'    '
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'Mailbox open in read-only state'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IAccount
dedent|''
dedent|''
name|'class'
name|'IAccount'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Interface for Account classes\n\n    Implementors of this interface should consider implementing\n    C{INamespacePresenter}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|addMailbox
name|'def'
name|'addMailbox'
op|'('
name|'name'
op|','
name|'mbox'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add a new mailbox to this account\n\n        @type name: C{str}\n        @param name: The name associated with this mailbox.  It may not\n        contain multiple hierarchical parts.\n\n        @type mbox: An object implementing C{IMailbox}\n        @param mbox: The mailbox to associate with this name.  If C{None},\n        a suitable default is created and used.\n\n        @rtype: C{Deferred} or C{bool}\n        @return: A true value if the creation succeeds, or a deferred whose\n        callback will be invoked when the creation succeeds.\n\n        @raise MailboxException: Raised if this mailbox cannot be added for\n        some reason.  This may also be raised asynchronously, if a C{Deferred}\n        is returned.\n        """'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
name|'def'
name|'create'
op|'('
name|'pathspec'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new mailbox from the given hierarchical name.\n\n        @type pathspec: C{str}\n        @param pathspec: The full hierarchical name of a new mailbox to create.\n        If any of the inferior hierarchical names to this one do not exist,\n        they are created as well.\n\n        @rtype: C{Deferred} or C{bool}\n        @return: A true value if the creation succeeds, or a deferred whose\n        callback will be invoked when the creation succeeds.\n\n        @raise MailboxException: Raised if this mailbox cannot be added.\n        This may also be raised asynchronously, if a C{Deferred} is\n        returned.\n        """'
newline|'\n'
nl|'\n'
DECL|member|select
dedent|''
name|'def'
name|'select'
op|'('
name|'name'
op|','
name|'rw'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Acquire a mailbox, given its name.\n\n        @type name: C{str}\n        @param name: The mailbox to acquire\n\n        @type rw: C{bool}\n        @param rw: If a true value, request a read-write version of this\n        mailbox.  If a false value, request a read-only version.\n\n        @rtype: Any object implementing C{IMailbox} or C{Deferred}\n        @return: The mailbox object, or a C{Deferred} whose callback will\n        be invoked with the mailbox object.  None may be returned if the\n        specified mailbox may not be selected for any reason.\n        """'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete the mailbox with the specified name.\n\n        @type name: C{str}\n        @param name: The mailbox to delete.\n\n        @rtype: C{Deferred} or C{bool}\n        @return: A true value if the mailbox is successfully deleted, or a\n        C{Deferred} whose callback will be invoked when the deletion\n        completes.\n\n        @raise MailboxException: Raised if this mailbox cannot be deleted.\n        This may also be raised asynchronously, if a C{Deferred} is returned.\n        """'
newline|'\n'
nl|'\n'
DECL|member|rename
dedent|''
name|'def'
name|'rename'
op|'('
name|'oldname'
op|','
name|'newname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rename a mailbox\n\n        @type oldname: C{str}\n        @param oldname: The current name of the mailbox to rename.\n\n        @type newname: C{str}\n        @param newname: The new name to associate with the mailbox.\n\n        @rtype: C{Deferred} or C{bool}\n        @return: A true value if the mailbox is successfully renamed, or a\n        C{Deferred} whose callback will be invoked when the rename operation\n        is completed.\n\n        @raise MailboxException: Raised if this mailbox cannot be\n        renamed.  This may also be raised asynchronously, if a C{Deferred}\n        is returned.\n        """'
newline|'\n'
nl|'\n'
DECL|member|isSubscribed
dedent|''
name|'def'
name|'isSubscribed'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check the subscription status of a mailbox\n\n        @type name: C{str}\n        @param name: The name of the mailbox to check\n\n        @rtype: C{Deferred} or C{bool}\n        @return: A true value if the given mailbox is currently subscribed\n        to, a false value otherwise.  A C{Deferred} may also be returned\n        whose callback will be invoked with one of these values.\n        """'
newline|'\n'
nl|'\n'
DECL|member|subscribe
dedent|''
name|'def'
name|'subscribe'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Subscribe to a mailbox\n\n        @type name: C{str}\n        @param name: The name of the mailbox to subscribe to\n\n        @rtype: C{Deferred} or C{bool}\n        @return: A true value if the mailbox is subscribed to successfully,\n        or a Deferred whose callback will be invoked with this value when\n        the subscription is successful.\n\n        @raise MailboxException: Raised if this mailbox cannot be\n        subscribed to.  This may also be raised asynchronously, if a\n        C{Deferred} is returned.\n        """'
newline|'\n'
nl|'\n'
DECL|member|unsubscribe
dedent|''
name|'def'
name|'unsubscribe'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unsubscribe from a mailbox\n\n        @type name: C{str}\n        @param name: The name of the mailbox to unsubscribe from\n\n        @rtype: C{Deferred} or C{bool}\n        @return: A true value if the mailbox is unsubscribed from successfully,\n        or a Deferred whose callback will be invoked with this value when\n        the unsubscription is successful.\n\n        @raise MailboxException: Raised if this mailbox cannot be\n        unsubscribed from.  This may also be raised asynchronously, if a\n        C{Deferred} is returned.\n        """'
newline|'\n'
nl|'\n'
DECL|member|listMailboxes
dedent|''
name|'def'
name|'listMailboxes'
op|'('
name|'ref'
op|','
name|'wildcard'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List all the mailboxes that meet a certain criteria\n\n        @type ref: C{str}\n        @param ref: The context in which to apply the wildcard\n\n        @type wildcard: C{str}\n        @param wildcard: An expression against which to match mailbox names.\n        \'*\' matches any number of characters in a mailbox name, and \'%\'\n        matches similarly, but will not match across hierarchical boundaries.\n\n        @rtype: C{list} of C{tuple}\n        @return: A list of C{(mailboxName, mailboxObject)} which meet the\n        given criteria.  C{mailboxObject} should implement either\n        C{IMailboxInfo} or C{IMailbox}.  A Deferred may also be returned.\n        """'
newline|'\n'
nl|'\n'
DECL|class|INamespacePresenter
dedent|''
dedent|''
name|'class'
name|'INamespacePresenter'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
DECL|member|getPersonalNamespaces
indent|'    '
name|'def'
name|'getPersonalNamespaces'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Report the available personal namespaces.\n\n        Typically there should be only one personal namespace.  A common\n        name for it is \\"\\", and its hierarchical delimiter is usually\n        \\"/\\".\n\n        @rtype: iterable of two-tuples of strings\n        @return: The personal namespaces and their hierarchical delimiters.\n        If no namespaces of this type exist, None should be returned.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getSharedNamespaces
dedent|''
name|'def'
name|'getSharedNamespaces'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Report the available shared namespaces.\n\n        Shared namespaces do not belong to any individual user but are\n        usually to one or more of them.  Examples of shared namespaces\n        might be \\"#news\\" for a usenet gateway.\n\n        @rtype: iterable of two-tuples of strings\n        @return: The shared namespaces and their hierarchical delimiters.\n        If no namespaces of this type exist, None should be returned.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getUserNamespaces
dedent|''
name|'def'
name|'getUserNamespaces'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Report the available user namespaces.\n\n        These are namespaces that contain folders belonging to other users\n        access to which this account has been granted.\n\n        @rtype: iterable of two-tuples of strings\n        @return: The user namespaces and their hierarchical delimiters.\n        If no namespaces of this type exist, None should be returned.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MemoryAccount
dedent|''
dedent|''
name|'class'
name|'MemoryAccount'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IAccount'
op|','
name|'INamespacePresenter'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|mailboxes
name|'mailboxes'
op|'='
name|'None'
newline|'\n'
DECL|variable|subscriptions
name|'subscriptions'
op|'='
name|'None'
newline|'\n'
DECL|variable|top_id
name|'top_id'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'mailboxes'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'subscriptions'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|allocateID
dedent|''
name|'def'
name|'allocateID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'id'
op|'='
name|'self'
op|'.'
name|'top_id'
newline|'\n'
name|'self'
op|'.'
name|'top_id'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'id'
newline|'\n'
nl|'\n'
comment|'##'
nl|'\n'
comment|'## IAccount'
nl|'\n'
comment|'##'
nl|'\n'
DECL|member|addMailbox
dedent|''
name|'def'
name|'addMailbox'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'mbox'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'name'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'mailboxes'
op|'.'
name|'has_key'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MailboxCollision'
op|','
name|'name'
newline|'\n'
dedent|''
name|'if'
name|'mbox'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'mbox'
op|'='
name|'self'
op|'.'
name|'_emptyMailbox'
op|'('
name|'name'
op|','
name|'self'
op|'.'
name|'allocateID'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mailboxes'
op|'['
name|'name'
op|']'
op|'='
name|'mbox'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'pathspec'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'paths'
op|'='
name|'filter'
op|'('
name|'None'
op|','
name|'pathspec'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|')'
newline|'\n'
name|'for'
name|'accum'
name|'in'
name|'range'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'paths'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'addMailbox'
op|'('
string|"'/'"
op|'.'
name|'join'
op|'('
name|'paths'
op|'['
op|':'
name|'accum'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'MailboxCollision'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'addMailbox'
op|'('
string|"'/'"
op|'.'
name|'join'
op|'('
name|'paths'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'MailboxCollision'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'pathspec'
op|'.'
name|'endswith'
op|'('
string|"'/'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_emptyMailbox
dedent|''
name|'def'
name|'_emptyMailbox'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|select
dedent|''
name|'def'
name|'select'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'readwrite'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'mailboxes'
op|'.'
name|'get'
op|'('
name|'name'
op|'.'
name|'upper'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'name'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
comment|'# See if this mailbox exists at all'
nl|'\n'
name|'mbox'
op|'='
name|'self'
op|'.'
name|'mailboxes'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'mbox'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MailboxException'
op|'('
string|'"No such mailbox"'
op|')'
newline|'\n'
comment|'# See if this box is flagged \\Noselect'
nl|'\n'
dedent|''
name|'if'
string|"r'\\Noselect'"
name|'in'
name|'mbox'
op|'.'
name|'getFlags'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Check for hierarchically inferior mailboxes with this one'
nl|'\n'
comment|'# as part of their root.'
nl|'\n'
indent|'            '
name|'for'
name|'others'
name|'in'
name|'self'
op|'.'
name|'mailboxes'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'others'
op|'!='
name|'name'
name|'and'
name|'others'
op|'.'
name|'startswith'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'MailboxException'
op|','
string|'"Hierarchically inferior mailboxes exist and \\\\Noselect is set"'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'mbox'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# iff there are no hierarchically inferior names, we will'
nl|'\n'
comment|'# delete it from our ken.'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_inferiorNames'
op|'('
name|'name'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'mailboxes'
op|'['
name|'name'
op|']'
newline|'\n'
nl|'\n'
DECL|member|rename
dedent|''
dedent|''
name|'def'
name|'rename'
op|'('
name|'self'
op|','
name|'oldname'
op|','
name|'newname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'oldname'
op|'='
name|'oldname'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'newname'
op|'='
name|'newname'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'mailboxes'
op|'.'
name|'has_key'
op|'('
name|'oldname'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NoSuchMailbox'
op|','
name|'oldname'
newline|'\n'
nl|'\n'
dedent|''
name|'inferiors'
op|'='
name|'self'
op|'.'
name|'_inferiorNames'
op|'('
name|'oldname'
op|')'
newline|'\n'
name|'inferiors'
op|'='
op|'['
op|'('
name|'o'
op|','
name|'o'
op|'.'
name|'replace'
op|'('
name|'oldname'
op|','
name|'newname'
op|','
number|'1'
op|')'
op|')'
name|'for'
name|'o'
name|'in'
name|'inferiors'
op|']'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'old'
op|','
name|'new'
op|')'
name|'in'
name|'inferiors'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'mailboxes'
op|'.'
name|'has_key'
op|'('
name|'new'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'MailboxCollision'
op|','
name|'new'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
op|'('
name|'old'
op|','
name|'new'
op|')'
name|'in'
name|'inferiors'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mailboxes'
op|'['
name|'new'
op|']'
op|'='
name|'self'
op|'.'
name|'mailboxes'
op|'['
name|'old'
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'mailboxes'
op|'['
name|'old'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_inferiorNames
dedent|''
dedent|''
name|'def'
name|'_inferiorNames'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inferiors'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'infname'
name|'in'
name|'self'
op|'.'
name|'mailboxes'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'infname'
op|'.'
name|'startswith'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'inferiors'
op|'.'
name|'append'
op|'('
name|'infname'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'inferiors'
newline|'\n'
nl|'\n'
DECL|member|isSubscribed
dedent|''
name|'def'
name|'isSubscribed'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'name'
op|'.'
name|'upper'
op|'('
op|')'
name|'in'
name|'self'
op|'.'
name|'subscriptions'
newline|'\n'
nl|'\n'
DECL|member|subscribe
dedent|''
name|'def'
name|'subscribe'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'name'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'if'
name|'name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'subscriptions'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'subscriptions'
op|'.'
name|'append'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unsubscribe
dedent|''
dedent|''
name|'def'
name|'unsubscribe'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'name'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'if'
name|'name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'subscriptions'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MailboxException'
op|','
string|'"Not currently subscribed to "'
op|'+'
name|'name'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'subscriptions'
op|'.'
name|'remove'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|listMailboxes
dedent|''
name|'def'
name|'listMailboxes'
op|'('
name|'self'
op|','
name|'ref'
op|','
name|'wildcard'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ref'
op|'='
name|'self'
op|'.'
name|'_inferiorNames'
op|'('
name|'ref'
op|'.'
name|'upper'
op|'('
op|')'
op|')'
newline|'\n'
name|'wildcard'
op|'='
name|'wildcardToRegexp'
op|'('
name|'wildcard'
op|','
string|"'/'"
op|')'
newline|'\n'
name|'return'
op|'['
op|'('
name|'i'
op|','
name|'self'
op|'.'
name|'mailboxes'
op|'['
name|'i'
op|']'
op|')'
name|'for'
name|'i'
name|'in'
name|'ref'
name|'if'
name|'wildcard'
op|'.'
name|'match'
op|'('
name|'i'
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'##'
nl|'\n'
comment|'## INamespacePresenter'
nl|'\n'
comment|'##'
nl|'\n'
DECL|member|getPersonalNamespaces
dedent|''
name|'def'
name|'getPersonalNamespaces'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|'['
string|'""'
op|','
string|'"/"'
op|']'
op|']'
newline|'\n'
nl|'\n'
DECL|member|getSharedNamespaces
dedent|''
name|'def'
name|'getSharedNamespaces'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|getOtherNamespaces
dedent|''
name|'def'
name|'getOtherNamespaces'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_statusRequestDict
dedent|''
dedent|''
name|'_statusRequestDict'
op|'='
op|'{'
nl|'\n'
string|"'MESSAGES'"
op|':'
string|"'getMessageCount'"
op|','
nl|'\n'
string|"'RECENT'"
op|':'
string|"'getRecentCount'"
op|','
nl|'\n'
string|"'UIDNEXT'"
op|':'
string|"'getUIDNext'"
op|','
nl|'\n'
string|"'UIDVALIDITY'"
op|':'
string|"'getUIDValidity'"
op|','
nl|'\n'
string|"'UNSEEN'"
op|':'
string|"'getUnseenCount'"
nl|'\n'
op|'}'
newline|'\n'
DECL|function|statusRequestHelper
name|'def'
name|'statusRequestHelper'
op|'('
name|'mbox'
op|','
name|'names'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'r'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'        '
name|'r'
op|'['
name|'n'
op|']'
op|'='
name|'getattr'
op|'('
name|'mbox'
op|','
name|'_statusRequestDict'
op|'['
name|'n'
op|'.'
name|'upper'
op|'('
op|')'
op|']'
op|')'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'r'
newline|'\n'
nl|'\n'
DECL|function|parseAddr
dedent|''
name|'def'
name|'parseAddr'
op|'('
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'addr'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|'('
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
op|']'
newline|'\n'
dedent|''
name|'addrs'
op|'='
name|'email'
op|'.'
name|'Utils'
op|'.'
name|'getaddresses'
op|'('
op|'['
name|'addr'
op|']'
op|')'
newline|'\n'
name|'return'
op|'['
op|'['
name|'fn'
name|'or'
name|'None'
op|','
name|'None'
op|']'
op|'+'
name|'addr'
op|'.'
name|'split'
op|'('
string|"'@'"
op|')'
name|'for'
name|'fn'
op|','
name|'addr'
name|'in'
name|'addrs'
op|']'
newline|'\n'
nl|'\n'
DECL|function|getEnvelope
dedent|''
name|'def'
name|'getEnvelope'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'headers'
op|'='
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'True'
op|')'
newline|'\n'
name|'date'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|"'date'"
op|')'
newline|'\n'
name|'subject'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|"'subject'"
op|')'
newline|'\n'
name|'from_'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|"'from'"
op|')'
newline|'\n'
name|'sender'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|"'sender'"
op|','
name|'from_'
op|')'
newline|'\n'
name|'reply_to'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|"'reply-to'"
op|','
name|'from_'
op|')'
newline|'\n'
name|'to'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|"'to'"
op|')'
newline|'\n'
name|'cc'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|"'cc'"
op|')'
newline|'\n'
name|'bcc'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|"'bcc'"
op|')'
newline|'\n'
name|'in_reply_to'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|"'in-reply-to'"
op|')'
newline|'\n'
name|'mid'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|"'message-id'"
op|')'
newline|'\n'
name|'return'
op|'('
name|'date'
op|','
name|'subject'
op|','
name|'parseAddr'
op|'('
name|'from_'
op|')'
op|','
name|'parseAddr'
op|'('
name|'sender'
op|')'
op|','
nl|'\n'
name|'reply_to'
name|'and'
name|'parseAddr'
op|'('
name|'reply_to'
op|')'
op|','
name|'to'
name|'and'
name|'parseAddr'
op|'('
name|'to'
op|')'
op|','
nl|'\n'
name|'cc'
name|'and'
name|'parseAddr'
op|'('
name|'cc'
op|')'
op|','
name|'bcc'
name|'and'
name|'parseAddr'
op|'('
name|'bcc'
op|')'
op|','
name|'in_reply_to'
op|','
name|'mid'
op|')'
newline|'\n'
nl|'\n'
DECL|function|getLineCount
dedent|''
name|'def'
name|'getLineCount'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
comment|'# XXX - Super expensive, CACHE THIS VALUE FOR LATER RE-USE'
nl|'\n'
comment|'# XXX - This must be the number of lines in the ENCODED version'
nl|'\n'
indent|'    '
name|'lines'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'_'
name|'in'
name|'msg'
op|'.'
name|'getBodyFile'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lines'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'return'
name|'lines'
newline|'\n'
nl|'\n'
DECL|function|unquote
dedent|''
name|'def'
name|'unquote'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'s'
op|'['
number|'0'
op|']'
op|'=='
name|'s'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|'\'"\''
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'s'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|function|getBodyStructure
dedent|''
name|'def'
name|'getBodyStructure'
op|'('
name|'msg'
op|','
name|'extended'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
comment|'# XXX - This does not properly handle multipart messages'
nl|'\n'
comment|'# BODYSTRUCTURE is obscenely complex and criminally under-documented.'
nl|'\n'
nl|'\n'
indent|'    '
name|'attrs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'headers'
op|'='
string|"'content-type'"
op|','
string|"'content-id'"
op|','
string|"'content-description'"
op|','
string|"'content-transfer-encoding'"
newline|'\n'
name|'headers'
op|'='
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'False'
op|','
op|'*'
name|'headers'
op|')'
newline|'\n'
name|'mm'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|"'content-type'"
op|')'
newline|'\n'
name|'if'
name|'mm'
op|':'
newline|'\n'
indent|'        '
name|'mm'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'mm'
op|'.'
name|'splitlines'
op|'('
op|')'
op|')'
newline|'\n'
name|'mimetype'
op|'='
name|'mm'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
newline|'\n'
name|'if'
name|'mimetype'
op|':'
newline|'\n'
indent|'            '
name|'type'
op|'='
name|'mimetype'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"'/'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'type'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'major'
op|'='
name|'type'
op|'['
number|'0'
op|']'
newline|'\n'
name|'minor'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'type'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'major'
op|','
name|'minor'
op|'='
name|'type'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'major'
op|'='
name|'minor'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'attrs'
op|'='
name|'dict'
op|'('
op|'['
name|'x'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'='"
op|','
number|'1'
op|')'
name|'for'
name|'x'
name|'in'
name|'mimetype'
op|'['
number|'1'
op|':'
op|']'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'major'
op|'='
name|'minor'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'major'
op|'='
name|'minor'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'size'
op|'='
name|'str'
op|'('
name|'msg'
op|'.'
name|'getSize'
op|'('
op|')'
op|')'
newline|'\n'
name|'unquotedAttrs'
op|'='
op|'['
op|'('
name|'k'
op|','
name|'unquote'
op|'('
name|'v'
op|')'
op|')'
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
name|'attrs'
op|'.'
name|'iteritems'
op|'('
op|')'
op|']'
newline|'\n'
name|'result'
op|'='
op|'['
nl|'\n'
name|'major'
op|','
name|'minor'
op|','
comment|'# Main and Sub MIME types'
nl|'\n'
name|'unquotedAttrs'
op|','
comment|'# content-type parameter list'
nl|'\n'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'content-id'"
op|')'
op|','
nl|'\n'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'content-description'"
op|')'
op|','
nl|'\n'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'content-transfer-encoding'"
op|')'
op|','
nl|'\n'
name|'size'
op|','
comment|'# Number of octets total'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'major'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'major'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'text'"
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'append'
op|'('
name|'str'
op|'('
name|'getLineCount'
op|'('
name|'msg'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'major'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'minor'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
op|'=='
op|'('
string|"'message'"
op|','
string|"'rfc822'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'contained'
op|'='
name|'msg'
op|'.'
name|'getSubPart'
op|'('
number|'0'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'append'
op|'('
name|'getEnvelope'
op|'('
name|'contained'
op|')'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'append'
op|'('
name|'getBodyStructure'
op|'('
name|'contained'
op|','
name|'False'
op|')'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'append'
op|'('
name|'str'
op|'('
name|'getLineCount'
op|'('
name|'contained'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'extended'
name|'or'
name|'major'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'result'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'major'
op|'.'
name|'lower'
op|'('
op|')'
op|'!='
string|"'multipart'"
op|':'
newline|'\n'
indent|'        '
name|'headers'
op|'='
string|"'content-md5'"
op|','
string|"'content-disposition'"
op|','
string|"'content-language'"
newline|'\n'
name|'headers'
op|'='
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'False'
op|','
op|'*'
name|'headers'
op|')'
newline|'\n'
name|'disp'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|"'content-disposition'"
op|')'
newline|'\n'
nl|'\n'
comment|'# XXX - I dunno if this is really right'
nl|'\n'
name|'if'
name|'disp'
op|':'
newline|'\n'
indent|'            '
name|'disp'
op|'='
name|'disp'
op|'.'
name|'split'
op|'('
string|"'; '"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'disp'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'disp'
op|'='
op|'('
name|'disp'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'disp'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'disp'
op|'='
op|'('
name|'disp'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
op|','
op|'['
name|'x'
op|'.'
name|'split'
op|'('
string|"'='"
op|')'
name|'for'
name|'x'
name|'in'
name|'disp'
op|'['
number|'1'
op|':'
op|']'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'result'
op|'.'
name|'append'
op|'('
name|'headers'
op|'.'
name|'get'
op|'('
string|"'content-md5'"
op|')'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'append'
op|'('
name|'disp'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'append'
op|'('
name|'headers'
op|'.'
name|'get'
op|'('
string|"'content-language'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
op|'['
name|'result'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'i'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'submsg'
op|'='
name|'msg'
op|'.'
name|'getSubPart'
op|'('
name|'i'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'append'
op|'('
name|'getBodyStructure'
op|'('
name|'submsg'
op|')'
op|')'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'append'
op|'('
name|'minor'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'append'
op|'('
name|'attrs'
op|'.'
name|'items'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# XXX - I dunno if this is really right'
nl|'\n'
name|'headers'
op|'='
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'False'
op|','
string|"'content-disposition'"
op|','
string|"'content-language'"
op|')'
newline|'\n'
name|'disp'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|"'content-disposition'"
op|')'
newline|'\n'
name|'if'
name|'disp'
op|':'
newline|'\n'
indent|'                '
name|'disp'
op|'='
name|'disp'
op|'.'
name|'split'
op|'('
string|"'; '"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'disp'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'disp'
op|'='
op|'('
name|'disp'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'disp'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'disp'
op|'='
op|'('
name|'disp'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
op|','
op|'['
name|'x'
op|'.'
name|'split'
op|'('
string|"'='"
op|')'
name|'for'
name|'x'
name|'in'
name|'disp'
op|'['
number|'1'
op|':'
op|']'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'result'
op|'.'
name|'append'
op|'('
name|'disp'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'append'
op|'('
name|'headers'
op|'.'
name|'get'
op|'('
string|"'content-language'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|class|IMessagePart
dedent|''
name|'class'
name|'IMessagePart'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
DECL|member|getHeaders
indent|'    '
name|'def'
name|'getHeaders'
op|'('
name|'negate'
op|','
op|'*'
name|'names'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve a group of message headers.\n\n        @type names: C{tuple} of C{str}\n        @param names: The names of the headers to retrieve or omit.\n\n        @type negate: C{bool}\n        @param negate: If True, indicates that the headers listed in C{names}\n        should be omitted from the return value, rather than included.\n\n        @rtype: C{dict}\n        @return: A mapping of header field names to header field values\n        """'
newline|'\n'
nl|'\n'
DECL|member|getBodyFile
dedent|''
name|'def'
name|'getBodyFile'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve a file object containing only the body of this message.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getSize
dedent|''
name|'def'
name|'getSize'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the total size, in octets, of this message.\n\n        @rtype: C{int}\n        """'
newline|'\n'
nl|'\n'
DECL|member|isMultipart
dedent|''
name|'def'
name|'isMultipart'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicate whether this message has subparts.\n\n        @rtype: C{bool}\n        """'
newline|'\n'
nl|'\n'
DECL|member|getSubPart
dedent|''
name|'def'
name|'getSubPart'
op|'('
name|'part'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve a MIME sub-message\n\n        @type part: C{int}\n        @param part: The number of the part to retrieve, indexed from 0.\n\n        @raise IndexError: Raised if the specified part does not exist.\n        @raise TypeError: Raised if this message is not multipart.\n\n        @rtype: Any object implementing C{IMessagePart}.\n        @return: The specified sub-part.\n        """'
newline|'\n'
nl|'\n'
DECL|class|IMessage
dedent|''
dedent|''
name|'class'
name|'IMessage'
op|'('
name|'IMessagePart'
op|')'
op|':'
newline|'\n'
DECL|member|getUID
indent|'    '
name|'def'
name|'getUID'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the unique identifier associated with this message.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getFlags
dedent|''
name|'def'
name|'getFlags'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the flags associated with this message.\n\n        @rtype: C{iterable}\n        @return: The flags, represented as strings.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getInternalDate
dedent|''
name|'def'
name|'getInternalDate'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the date internally associated with this message.\n\n        @rtype: C{str}\n        @return: An RFC822-formatted date string.\n        """'
newline|'\n'
nl|'\n'
DECL|class|IMessageFile
dedent|''
dedent|''
name|'class'
name|'IMessageFile'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Optional message interface for representing messages as files.\n\n    If provided by message objects, this interface will be used instead\n    the more complex MIME-based interface.\n    """'
newline|'\n'
DECL|member|open
name|'def'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return an file-like object opened for reading.\n\n        Reading from the returned file will return all the bytes\n        of which this message consists.\n        """'
newline|'\n'
nl|'\n'
DECL|class|ISearchableMailbox
dedent|''
dedent|''
name|'class'
name|'ISearchableMailbox'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
DECL|member|search
indent|'    '
name|'def'
name|'search'
op|'('
name|'query'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Search for messages that meet the given query criteria.\n\n        If this interface is not implemented by the mailbox, L{IMailbox.fetch}\n        and various methods of L{IMessage} will be used instead.\n\n        Implementations which wish to offer better performance than the\n        default implementation should implement this interface.\n\n        @type query: C{list}\n        @param query: The search criteria\n\n        @type uid: C{bool}\n        @param uid: If true, the IDs specified in the query are UIDs;\n        otherwise they are message sequence IDs.\n\n        @rtype: C{list} or C{Deferred}\n        @return: A list of message sequence numbers or message UIDs which\n        match the search criteria or a C{Deferred} whose callback will be\n        invoked with such a list.\n        """'
newline|'\n'
nl|'\n'
DECL|class|IMessageCopier
dedent|''
dedent|''
name|'class'
name|'IMessageCopier'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
DECL|member|copy
indent|'    '
name|'def'
name|'copy'
op|'('
name|'messageObject'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Copy the given message object into this mailbox.\n\n        The message object will be one which was previously returned by\n        L{IMailbox.fetch}.\n\n        Implementations which wish to offer better performance than the\n        default implementation should implement this interface.\n\n        If this interface is not implemented by the mailbox, IMailbox.addMessage\n        will be used instead.\n\n        @rtype: C{Deferred} or C{int}\n        @return: Either the UID of the message or a Deferred which fires\n        with the UID when the copy finishes.\n        """'
newline|'\n'
nl|'\n'
DECL|class|IMailboxInfo
dedent|''
dedent|''
name|'class'
name|'IMailboxInfo'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Interface specifying only the methods required for C{listMailboxes}.\n\n    Implementations can return objects implementing only these methods for\n    return to C{listMailboxes} if it can allow them to operate more\n    efficiently.\n    """'
newline|'\n'
nl|'\n'
DECL|member|getFlags
name|'def'
name|'getFlags'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the flags defined in this mailbox\n\n        Flags with the \\\\ prefix are reserved for use as system flags.\n\n        @rtype: C{list} of C{str}\n        @return: A list of the flags that can be set on messages in this mailbox.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getHierarchicalDelimiter
dedent|''
name|'def'
name|'getHierarchicalDelimiter'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the character which delimits namespaces for in this mailbox.\n\n        @rtype: C{str}\n        """'
newline|'\n'
nl|'\n'
DECL|class|IMailbox
dedent|''
dedent|''
name|'class'
name|'IMailbox'
op|'('
name|'IMailboxInfo'
op|')'
op|':'
newline|'\n'
DECL|member|getUIDValidity
indent|'    '
name|'def'
name|'getUIDValidity'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the unique validity identifier for this mailbox.\n\n        @rtype: C{int}\n        """'
newline|'\n'
nl|'\n'
DECL|member|getUIDNext
dedent|''
name|'def'
name|'getUIDNext'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the likely UID for the next message added to this mailbox.\n\n        @rtype: C{int}\n        """'
newline|'\n'
nl|'\n'
DECL|member|getUID
dedent|''
name|'def'
name|'getUID'
op|'('
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the UID of a message in the mailbox\n\n        @type message: C{int}\n        @param message: The message sequence number\n\n        @rtype: C{int}\n        @return: The UID of the message.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getMessageCount
dedent|''
name|'def'
name|'getMessageCount'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the number of messages in this mailbox.\n\n        @rtype: C{int}\n        """'
newline|'\n'
nl|'\n'
DECL|member|getRecentCount
dedent|''
name|'def'
name|'getRecentCount'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the number of messages with the \'Recent\' flag.\n\n        @rtype: C{int}\n        """'
newline|'\n'
nl|'\n'
DECL|member|getUnseenCount
dedent|''
name|'def'
name|'getUnseenCount'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the number of messages with the \'Unseen\' flag.\n\n        @rtype: C{int}\n        """'
newline|'\n'
nl|'\n'
DECL|member|isWriteable
dedent|''
name|'def'
name|'isWriteable'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the read/write status of the mailbox.\n\n        @rtype: C{int}\n        @return: A true value if write permission is allowed, a false value otherwise.\n        """'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called before this mailbox is deleted, permanently.\n\n        If necessary, all resources held by this mailbox should be cleaned\n        up here.  This function _must_ set the \\\\Noselect flag on this\n        mailbox.\n        """'
newline|'\n'
nl|'\n'
DECL|member|requestStatus
dedent|''
name|'def'
name|'requestStatus'
op|'('
name|'names'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return status information about this mailbox.\n\n        Mailboxes which do not intend to do any special processing to\n        generate the return value, C{statusRequestHelper} can be used\n        to build the dictionary by calling the other interface methods\n        which return the data for each name.\n\n        @type names: Any iterable\n        @param names: The status names to return information regarding.\n        The possible values for each name are: MESSAGES, RECENT, UIDNEXT,\n        UIDVALIDITY, UNSEEN.\n\n        @rtype: C{dict} or C{Deferred}\n        @return: A dictionary containing status information about the\n        requested names is returned.  If the process of looking this\n        information up would be costly, a deferred whose callback will\n        eventually be passed this dictionary is returned instead.\n        """'
newline|'\n'
nl|'\n'
DECL|member|addListener
dedent|''
name|'def'
name|'addListener'
op|'('
name|'listener'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add a mailbox change listener\n\n        @type listener: Any object which implements C{IMailboxListener}\n        @param listener: An object to add to the set of those which will\n        be notified when the contents of this mailbox change.\n        """'
newline|'\n'
nl|'\n'
DECL|member|removeListener
dedent|''
name|'def'
name|'removeListener'
op|'('
name|'listener'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a mailbox change listener\n\n        @type listener: Any object previously added to and not removed from\n        this mailbox as a listener.\n        @param listener: The object to remove from the set of listeners.\n\n        @raise ValueError: Raised when the given object is not a listener for\n        this mailbox.\n        """'
newline|'\n'
nl|'\n'
DECL|member|addMessage
dedent|''
name|'def'
name|'addMessage'
op|'('
name|'message'
op|','
name|'flags'
op|'='
op|'('
op|')'
op|','
name|'date'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add the given message to this mailbox.\n\n        @type message: A file-like object\n        @param message: The RFC822 formatted message\n\n        @type flags: Any iterable of C{str}\n        @param flags: The flags to associate with this message\n\n        @type date: C{str}\n        @param date: If specified, the date to associate with this\n        message.\n\n        @rtype: C{Deferred}\n        @return: A deferred whose callback is invoked with the message\n        id if the message is added successfully and whose errback is\n        invoked otherwise.\n\n        @raise ReadOnlyMailbox: Raised if this Mailbox is not open for\n        read-write.\n        """'
newline|'\n'
nl|'\n'
DECL|member|expunge
dedent|''
name|'def'
name|'expunge'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove all messages flagged \\\\Deleted.\n\n        @rtype: C{list} or C{Deferred}\n        @return: The list of message sequence numbers which were deleted,\n        or a C{Deferred} whose callback will be invoked with such a list.\n\n        @raise ReadOnlyMailbox: Raised if this Mailbox is not open for\n        read-write.\n        """'
newline|'\n'
nl|'\n'
DECL|member|fetch
dedent|''
name|'def'
name|'fetch'
op|'('
name|'messages'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve one or more messages.\n\n        @type messages: C{MessageSet}\n        @param messages: The identifiers of messages to retrieve information\n        about\n\n        @type uid: C{bool}\n        @param uid: If true, the IDs specified in the query are UIDs;\n        otherwise they are message sequence IDs.\n\n        @rtype: Any iterable of two-tuples of message sequence numbers and\n        implementors of C{IMessage}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|store
dedent|''
name|'def'
name|'store'
op|'('
name|'messages'
op|','
name|'flags'
op|','
name|'mode'
op|','
name|'uid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the flags of one or more messages.\n\n        @type messages: A MessageSet object with the list of messages requested\n        @param messages: The identifiers of the messages to set the flags of.\n\n        @type flags: sequence of C{str}\n        @param flags: The flags to set, unset, or add.\n\n        @type mode: -1, 0, or 1\n        @param mode: If mode is -1, these flags should be removed from the\n        specified messages.  If mode is 1, these flags should be added to\n        the specified messages.  If mode is 0, all existing flags should be\n        cleared and these flags should be added.\n\n        @type uid: C{bool}\n        @param uid: If true, the IDs specified in the query are UIDs;\n        otherwise they are message sequence IDs.\n\n        @rtype: C{dict} or C{Deferred}\n        @return: A C{dict} mapping message sequence numbers to sequences of C{str}\n        representing the flags set on the message after this operation has\n        been performed, or a C{Deferred} whose callback will be invoked with\n        such a C{dict}.\n\n        @raise ReadOnlyMailbox: Raised if this mailbox is not open for\n        read-write.\n        """'
newline|'\n'
nl|'\n'
DECL|class|ICloseableMailbox
dedent|''
dedent|''
name|'class'
name|'ICloseableMailbox'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A supplementary interface for mailboxes which require cleanup on close.\n\n    Implementing this interface is optional.  If it is implemented, the protocol\n    code will call the close method defined whenever a mailbox is closed.\n    """'
newline|'\n'
DECL|member|close
name|'def'
name|'close'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Close this mailbox.\n\n        @return: A C{Deferred} which fires when this mailbox\n        has been closed, or None if the mailbox can be closed\n        immediately.\n        """'
newline|'\n'
nl|'\n'
DECL|function|_formatHeaders
dedent|''
dedent|''
name|'def'
name|'_formatHeaders'
op|'('
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'hdrs'
op|'='
op|'['
string|"': '"
op|'.'
name|'join'
op|'('
op|'('
name|'k'
op|'.'
name|'title'
op|'('
op|')'
op|','
string|"'\\r\\n'"
op|'.'
name|'join'
op|'('
name|'v'
op|'.'
name|'splitlines'
op|'('
op|')'
op|')'
op|')'
op|')'
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
nl|'\n'
name|'in'
name|'headers'
op|'.'
name|'iteritems'
op|'('
op|')'
op|']'
newline|'\n'
name|'hdrs'
op|'='
string|"'\\r\\n'"
op|'.'
name|'join'
op|'('
name|'hdrs'
op|')'
op|'+'
string|"'\\r\\n'"
newline|'\n'
name|'return'
name|'hdrs'
newline|'\n'
nl|'\n'
DECL|function|subparts
dedent|''
name|'def'
name|'subparts'
op|'('
name|'m'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'i'
op|'='
number|'0'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'m'
op|'.'
name|'getSubPart'
op|'('
name|'i'
op|')'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|iterateInReactor
dedent|''
dedent|''
name|'def'
name|'iterateInReactor'
op|'('
name|'i'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Consume an interator at most a single iteration per reactor iteration.\n\n    If the iterator produces a Deferred, the next iteration will not occur\n    until the Deferred fires, otherwise the next iteration will be taken\n    in the next reactor iteration.\n\n    @rtype: C{Deferred}\n    @return: A deferred which fires (with None) when the iterator is\n    exhausted or whose errback is called if there is an exception.\n    """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|function|go
name|'def'
name|'go'
op|'('
name|'last'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'r'
op|'='
name|'i'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'callback'
op|'('
name|'last'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'errback'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'r'
op|','
name|'defer'
op|'.'
name|'Deferred'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'r'
op|'.'
name|'addCallback'
op|'('
name|'go'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'go'
op|','
name|'r'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'go'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|class|MessageProducer
dedent|''
name|'class'
name|'MessageProducer'
op|':'
newline|'\n'
DECL|variable|CHUNK_SIZE
indent|'    '
name|'CHUNK_SIZE'
op|'='
number|'2'
op|'**'
number|'2'
op|'**'
number|'2'
op|'**'
number|'2'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'msg'
op|','
name|'buffer'
op|'='
name|'None'
op|','
name|'scheduler'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Produce this message.\n\n        @param msg: The message I am to produce.\n        @type msg: L{IMessage}\n\n        @param buffer: A buffer to hold the message in.  If None, I will\n            use a L{tempfile.TemporaryFile}.\n        @type buffer: file-like\n        """'
newline|'\n'
name|'self'
op|'.'
name|'msg'
op|'='
name|'msg'
newline|'\n'
name|'if'
name|'buffer'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'buffer'
op|'='
name|'tempfile'
op|'.'
name|'TemporaryFile'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'buffer'
op|'='
name|'buffer'
newline|'\n'
name|'if'
name|'scheduler'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'scheduler'
op|'='
name|'iterateInReactor'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'scheduler'
op|'='
name|'scheduler'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'='
name|'self'
op|'.'
name|'buffer'
op|'.'
name|'write'
newline|'\n'
nl|'\n'
DECL|member|beginProducing
dedent|''
name|'def'
name|'beginProducing'
op|'('
name|'self'
op|','
name|'consumer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'consumer'
op|'='
name|'consumer'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'scheduler'
op|'('
name|'self'
op|'.'
name|'_produce'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_produce
dedent|''
name|'def'
name|'_produce'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'headers'
op|'='
name|'self'
op|'.'
name|'msg'
op|'.'
name|'getHeaders'
op|'('
name|'True'
op|')'
newline|'\n'
name|'boundary'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'msg'
op|'.'
name|'isMultipart'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'content'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|"'content-type'"
op|')'
newline|'\n'
name|'parts'
op|'='
op|'['
name|'x'
op|'.'
name|'split'
op|'('
string|"'='"
op|','
number|'1'
op|')'
name|'for'
name|'x'
name|'in'
name|'content'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
op|'['
number|'1'
op|':'
op|']'
op|']'
newline|'\n'
name|'parts'
op|'='
name|'dict'
op|'('
op|'['
op|'('
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|','
name|'v'
op|')'
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
name|'parts'
op|']'
op|')'
newline|'\n'
name|'boundary'
op|'='
name|'parts'
op|'.'
name|'get'
op|'('
string|"'boundary'"
op|')'
newline|'\n'
name|'if'
name|'boundary'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# Bastards'
nl|'\n'
indent|'                '
name|'boundary'
op|'='
string|"'----=_%f_boundary_%f'"
op|'%'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
name|'random'
op|'.'
name|'random'
op|'('
op|')'
op|')'
newline|'\n'
name|'headers'
op|'['
string|"'content-type'"
op|']'
op|'+='
string|'\'; boundary="%s"\''
op|'%'
op|'('
name|'boundary'
op|','
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'boundary'
op|'.'
name|'startswith'
op|'('
string|'\'"\''
op|')'
name|'and'
name|'boundary'
op|'.'
name|'endswith'
op|'('
string|'\'"\''
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'boundary'
op|'='
name|'boundary'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'write'
op|'('
name|'_formatHeaders'
op|'('
name|'headers'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\r\\n'"
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'msg'
op|'.'
name|'isMultipart'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'p'
name|'in'
name|'subparts'
op|'('
name|'self'
op|'.'
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\r\\n--%s\\r\\n'"
op|'%'
op|'('
name|'boundary'
op|','
op|')'
op|')'
newline|'\n'
name|'yield'
name|'MessageProducer'
op|'('
name|'p'
op|','
name|'self'
op|'.'
name|'buffer'
op|','
name|'self'
op|'.'
name|'scheduler'
nl|'\n'
op|')'
op|'.'
name|'beginProducing'
op|'('
name|'None'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'write'
op|'('
string|"'\\r\\n--%s--\\r\\n'"
op|'%'
op|'('
name|'boundary'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'self'
op|'.'
name|'msg'
op|'.'
name|'getBodyFile'
op|'('
op|')'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'b'
op|'='
name|'f'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'CHUNK_SIZE'
op|')'
newline|'\n'
name|'if'
name|'b'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'buffer'
op|'.'
name|'write'
op|'('
name|'b'
op|')'
newline|'\n'
name|'yield'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'consumer'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'buffer'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'yield'
name|'FileProducer'
op|'('
name|'self'
op|'.'
name|'buffer'
nl|'\n'
op|')'
op|'.'
name|'beginProducing'
op|'('
name|'self'
op|'.'
name|'consumer'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|class|_FetchParser
dedent|''
dedent|''
dedent|''
name|'class'
name|'_FetchParser'
op|':'
newline|'\n'
DECL|class|Envelope
indent|'    '
name|'class'
name|'Envelope'
op|':'
newline|'\n'
comment|'# Response should be a list of fields from the message:'
nl|'\n'
comment|'#   date, subject, from, sender, reply-to, to, cc, bcc, in-reply-to,'
nl|'\n'
comment|'#   and message-id.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# from, sender, reply-to, to, cc, and bcc are themselves lists of'
nl|'\n'
comment|'# address information:'
nl|'\n'
comment|'#   personal name, source route, mailbox name, host name'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# reply-to and sender must not be None.  If not present in a message'
nl|'\n'
comment|'# they should be defaulted to the value of the from field.'
nl|'\n'
DECL|variable|type
indent|'        '
name|'type'
op|'='
string|"'envelope'"
newline|'\n'
DECL|variable|__str__
name|'__str__'
op|'='
name|'lambda'
name|'self'
op|':'
string|"'envelope'"
newline|'\n'
nl|'\n'
DECL|class|Flags
dedent|''
name|'class'
name|'Flags'
op|':'
newline|'\n'
DECL|variable|type
indent|'        '
name|'type'
op|'='
string|"'flags'"
newline|'\n'
DECL|variable|__str__
name|'__str__'
op|'='
name|'lambda'
name|'self'
op|':'
string|"'flags'"
newline|'\n'
nl|'\n'
DECL|class|InternalDate
dedent|''
name|'class'
name|'InternalDate'
op|':'
newline|'\n'
DECL|variable|type
indent|'        '
name|'type'
op|'='
string|"'internaldate'"
newline|'\n'
DECL|variable|__str__
name|'__str__'
op|'='
name|'lambda'
name|'self'
op|':'
string|"'internaldate'"
newline|'\n'
nl|'\n'
DECL|class|RFC822Header
dedent|''
name|'class'
name|'RFC822Header'
op|':'
newline|'\n'
DECL|variable|type
indent|'        '
name|'type'
op|'='
string|"'rfc822header'"
newline|'\n'
DECL|variable|__str__
name|'__str__'
op|'='
name|'lambda'
name|'self'
op|':'
string|"'rfc822.header'"
newline|'\n'
nl|'\n'
DECL|class|RFC822Text
dedent|''
name|'class'
name|'RFC822Text'
op|':'
newline|'\n'
DECL|variable|type
indent|'        '
name|'type'
op|'='
string|"'rfc822text'"
newline|'\n'
DECL|variable|__str__
name|'__str__'
op|'='
name|'lambda'
name|'self'
op|':'
string|"'rfc822.text'"
newline|'\n'
nl|'\n'
DECL|class|RFC822Size
dedent|''
name|'class'
name|'RFC822Size'
op|':'
newline|'\n'
DECL|variable|type
indent|'        '
name|'type'
op|'='
string|"'rfc822size'"
newline|'\n'
DECL|variable|__str__
name|'__str__'
op|'='
name|'lambda'
name|'self'
op|':'
string|"'rfc822.size'"
newline|'\n'
nl|'\n'
DECL|class|RFC822
dedent|''
name|'class'
name|'RFC822'
op|':'
newline|'\n'
DECL|variable|type
indent|'        '
name|'type'
op|'='
string|"'rfc822'"
newline|'\n'
DECL|variable|__str__
name|'__str__'
op|'='
name|'lambda'
name|'self'
op|':'
string|"'rfc822'"
newline|'\n'
nl|'\n'
DECL|class|UID
dedent|''
name|'class'
name|'UID'
op|':'
newline|'\n'
DECL|variable|type
indent|'        '
name|'type'
op|'='
string|"'uid'"
newline|'\n'
DECL|variable|__str__
name|'__str__'
op|'='
name|'lambda'
name|'self'
op|':'
string|"'uid'"
newline|'\n'
nl|'\n'
DECL|class|Body
dedent|''
name|'class'
name|'Body'
op|':'
newline|'\n'
DECL|variable|type
indent|'        '
name|'type'
op|'='
string|"'body'"
newline|'\n'
DECL|variable|peek
name|'peek'
op|'='
name|'False'
newline|'\n'
DECL|variable|header
name|'header'
op|'='
name|'None'
newline|'\n'
DECL|variable|mime
name|'mime'
op|'='
name|'None'
newline|'\n'
DECL|variable|text
name|'text'
op|'='
name|'None'
newline|'\n'
DECL|variable|part
name|'part'
op|'='
op|'('
op|')'
newline|'\n'
DECL|variable|empty
name|'empty'
op|'='
name|'False'
newline|'\n'
DECL|variable|partialBegin
name|'partialBegin'
op|'='
name|'None'
newline|'\n'
DECL|variable|partialLength
name|'partialLength'
op|'='
name|'None'
newline|'\n'
DECL|member|__str__
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'base'
op|'='
string|"'BODY'"
newline|'\n'
name|'part'
op|'='
string|"''"
newline|'\n'
name|'separator'
op|'='
string|"''"
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'part'
op|':'
newline|'\n'
indent|'                '
name|'part'
op|'='
string|"'.'"
op|'.'
name|'join'
op|'('
op|'['
name|'str'
op|'('
name|'x'
op|'+'
number|'1'
op|')'
name|'for'
name|'x'
name|'in'
name|'self'
op|'.'
name|'part'
op|']'
op|')'
newline|'\n'
name|'separator'
op|'='
string|"'.'"
newline|'\n'
comment|'#            if self.peek:'
nl|'\n'
comment|"#                base += '.PEEK'"
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'header'
op|':'
newline|'\n'
indent|'                '
name|'base'
op|'+='
string|"'[%s%s%s]'"
op|'%'
op|'('
name|'part'
op|','
name|'separator'
op|','
name|'self'
op|'.'
name|'header'
op|','
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'text'
op|':'
newline|'\n'
indent|'                '
name|'base'
op|'+='
string|"'[%s%sTEXT]'"
op|'%'
op|'('
name|'part'
op|','
name|'separator'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'mime'
op|':'
newline|'\n'
indent|'                '
name|'base'
op|'+='
string|"'[%s%sMIME]'"
op|'%'
op|'('
name|'part'
op|','
name|'separator'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'empty'
op|':'
newline|'\n'
indent|'                '
name|'base'
op|'+='
string|"'[%s]'"
op|'%'
op|'('
name|'part'
op|','
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'partialBegin'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'base'
op|'+='
string|"'<%d.%d>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'partialBegin'
op|','
name|'self'
op|'.'
name|'partialLength'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'base'
newline|'\n'
nl|'\n'
DECL|class|BodyStructure
dedent|''
dedent|''
name|'class'
name|'BodyStructure'
op|':'
newline|'\n'
DECL|variable|type
indent|'        '
name|'type'
op|'='
string|"'bodystructure'"
newline|'\n'
DECL|variable|__str__
name|'__str__'
op|'='
name|'lambda'
name|'self'
op|':'
string|"'bodystructure'"
newline|'\n'
nl|'\n'
comment|"# These three aren't top-level, they don't need type indicators"
nl|'\n'
DECL|class|Header
dedent|''
name|'class'
name|'Header'
op|':'
newline|'\n'
DECL|variable|negate
indent|'        '
name|'negate'
op|'='
name|'False'
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
name|'None'
newline|'\n'
DECL|variable|part
name|'part'
op|'='
name|'None'
newline|'\n'
DECL|member|__str__
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'base'
op|'='
string|"'HEADER'"
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'                '
name|'base'
op|'+='
string|"'.FIELDS'"
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'negate'
op|':'
newline|'\n'
indent|'                    '
name|'base'
op|'+='
string|"'.NOT'"
newline|'\n'
dedent|''
name|'fields'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'self'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'                    '
name|'f'
op|'='
name|'f'
op|'.'
name|'title'
op|'('
op|')'
newline|'\n'
name|'if'
name|'_needsQuote'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'f'
op|'='
name|'_quote'
op|'('
name|'f'
op|')'
newline|'\n'
dedent|''
name|'fields'
op|'.'
name|'append'
op|'('
name|'f'
op|')'
newline|'\n'
dedent|''
name|'base'
op|'+='
string|"' (%s)'"
op|'%'
string|"' '"
op|'.'
name|'join'
op|'('
name|'fields'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'part'
op|':'
newline|'\n'
indent|'                '
name|'base'
op|'='
string|"'.'"
op|'.'
name|'join'
op|'('
op|'['
name|'str'
op|'('
name|'x'
op|'+'
number|'1'
op|')'
name|'for'
name|'x'
name|'in'
name|'self'
op|'.'
name|'part'
op|']'
op|')'
op|'+'
string|"'.'"
op|'+'
name|'base'
newline|'\n'
dedent|''
name|'return'
name|'base'
newline|'\n'
nl|'\n'
DECL|class|Text
dedent|''
dedent|''
name|'class'
name|'Text'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|MIME
dedent|''
name|'class'
name|'MIME'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|variable|parts
dedent|''
name|'parts'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|_simple_fetch_att
name|'_simple_fetch_att'
op|'='
op|'['
nl|'\n'
op|'('
string|"'envelope'"
op|','
name|'Envelope'
op|')'
op|','
nl|'\n'
op|'('
string|"'flags'"
op|','
name|'Flags'
op|')'
op|','
nl|'\n'
op|'('
string|"'internaldate'"
op|','
name|'InternalDate'
op|')'
op|','
nl|'\n'
op|'('
string|"'rfc822.header'"
op|','
name|'RFC822Header'
op|')'
op|','
nl|'\n'
op|'('
string|"'rfc822.text'"
op|','
name|'RFC822Text'
op|')'
op|','
nl|'\n'
op|'('
string|"'rfc822.size'"
op|','
name|'RFC822Size'
op|')'
op|','
nl|'\n'
op|'('
string|"'rfc822'"
op|','
name|'RFC822'
op|')'
op|','
nl|'\n'
op|'('
string|"'uid'"
op|','
name|'UID'
op|')'
op|','
nl|'\n'
op|'('
string|"'bodystructure'"
op|','
name|'BodyStructure'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'state'
op|'='
op|'['
string|"'initial'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'remaining'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|member|parseString
dedent|''
name|'def'
name|'parseString'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'self'
op|'.'
name|'remaining'
op|'+'
name|'s'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'while'
name|'s'
name|'or'
name|'self'
op|'.'
name|'state'
op|':'
newline|'\n'
comment|"# print 'Entering state_' + self.state[-1] + ' with', repr(s)"
nl|'\n'
indent|'                '
name|'state'
op|'='
name|'self'
op|'.'
name|'state'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'used'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'state_'"
op|'+'
name|'state'
op|')'
op|'('
name|'s'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'state'
op|'.'
name|'append'
op|'('
name|'state'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# print state, 'consumed', repr(s[:used])"
nl|'\n'
indent|'                    '
name|'s'
op|'='
name|'s'
op|'['
name|'used'
op|':'
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'remaining'
op|'='
name|'s'
newline|'\n'
nl|'\n'
DECL|member|state_initial
dedent|''
dedent|''
name|'def'
name|'state_initial'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
comment|'# In the initial state, the literals "ALL", "FULL", and "FAST"'
nl|'\n'
comment|'# are accepted, as is a ( indicating the beginning of a fetch_att'
nl|'\n'
comment|'# token, as is the beginning of a fetch_att token.'
nl|'\n'
indent|'        '
name|'if'
name|'s'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'l'
op|'='
name|'s'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'if'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'all'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'.'
name|'extend'
op|'('
op|'('
nl|'\n'
name|'self'
op|'.'
name|'Flags'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'InternalDate'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'RFC822Size'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'Envelope'
op|'('
op|')'
nl|'\n'
op|')'
op|')'
newline|'\n'
name|'return'
number|'3'
newline|'\n'
dedent|''
name|'if'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'full'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'.'
name|'extend'
op|'('
op|'('
nl|'\n'
name|'self'
op|'.'
name|'Flags'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'InternalDate'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'RFC822Size'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'Envelope'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'Body'
op|'('
op|')'
nl|'\n'
op|')'
op|')'
newline|'\n'
name|'return'
number|'4'
newline|'\n'
dedent|''
name|'if'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'fast'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'.'
name|'extend'
op|'('
op|'('
nl|'\n'
name|'self'
op|'.'
name|'Flags'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'InternalDate'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'RFC822Size'
op|'('
op|')'
op|','
nl|'\n'
op|')'
op|')'
newline|'\n'
name|'return'
number|'4'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'('"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'state'
op|'.'
name|'extend'
op|'('
op|'('
string|"'close_paren'"
op|','
string|"'maybe_fetch_att'"
op|','
string|"'fetch_att'"
op|')'
op|')'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'state'
op|'.'
name|'append'
op|'('
string|"'fetch_att'"
op|')'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|state_close_paren
dedent|''
name|'def'
name|'state_close_paren'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'s'
op|'.'
name|'startswith'
op|'('
string|"')'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'1'
newline|'\n'
dedent|''
name|'raise'
name|'Exception'
op|'('
string|'"Missing )"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|state_whitespace
dedent|''
name|'def'
name|'state_whitespace'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
comment|'# Eat up all the leading whitespace'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'s'
name|'or'
name|'not'
name|'s'
op|'['
number|'0'
op|']'
op|'.'
name|'isspace'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"Whitespace expected, none found"'
op|')'
newline|'\n'
dedent|''
name|'i'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'s'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'s'
op|'['
name|'i'
op|']'
op|'.'
name|'isspace'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'i'
newline|'\n'
nl|'\n'
DECL|member|state_maybe_fetch_att
dedent|''
name|'def'
name|'state_maybe_fetch_att'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'s'
op|'.'
name|'startswith'
op|'('
string|"')'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'state'
op|'.'
name|'extend'
op|'('
op|'('
string|"'maybe_fetch_att'"
op|','
string|"'fetch_att'"
op|','
string|"'whitespace'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|state_fetch_att
dedent|''
name|'def'
name|'state_fetch_att'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
comment|'# Allowed fetch_att tokens are "ENVELOPE", "FLAGS", "INTERNALDATE",'
nl|'\n'
comment|'# "RFC822", "RFC822.HEADER", "RFC822.SIZE", "RFC822.TEXT", "BODY",'
nl|'\n'
comment|'# "BODYSTRUCTURE", "UID",'
nl|'\n'
comment|'# "BODY [".PEEK"] [<section>] ["<" <number> "." <nz_number> ">"]'
nl|'\n'
nl|'\n'
indent|'        '
name|'l'
op|'='
name|'s'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'for'
op|'('
name|'name'
op|','
name|'cls'
op|')'
name|'in'
name|'self'
op|'.'
name|'_simple_fetch_att'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'l'
op|'.'
name|'startswith'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'result'
op|'.'
name|'append'
op|'('
name|'cls'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'b'
op|'='
name|'self'
op|'.'
name|'Body'
op|'('
op|')'
newline|'\n'
name|'if'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'body.peek'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'b'
op|'.'
name|'peek'
op|'='
name|'True'
newline|'\n'
name|'used'
op|'='
number|'9'
newline|'\n'
dedent|''
name|'elif'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'body'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'used'
op|'='
number|'4'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"Nothing recognized in fetch_att: %s"'
op|'%'
op|'('
name|'l'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'pending_body'
op|'='
name|'b'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'.'
name|'extend'
op|'('
op|'('
string|"'got_body'"
op|','
string|"'maybe_partial'"
op|','
string|"'maybe_section'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'used'
newline|'\n'
nl|'\n'
DECL|member|state_got_body
dedent|''
name|'def'
name|'state_got_body'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'result'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'pending_body'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'pending_body'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|state_maybe_section
dedent|''
name|'def'
name|'state_maybe_section'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'s'
op|'.'
name|'startswith'
op|'('
string|'"["'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'state'
op|'.'
name|'extend'
op|'('
op|'('
string|"'section'"
op|','
string|"'part_number'"
op|')'
op|')'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|variable|_partExpr
dedent|''
name|'_partExpr'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'(\\d+(?:\\.\\d+)*)\\.?'"
op|')'
newline|'\n'
DECL|member|state_part_number
name|'def'
name|'state_part_number'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'='
name|'self'
op|'.'
name|'_partExpr'
op|'.'
name|'match'
op|'('
name|'s'
op|')'
newline|'\n'
name|'if'
name|'m'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'parts'
op|'='
op|'['
name|'int'
op|'('
name|'p'
op|')'
op|'-'
number|'1'
name|'for'
name|'p'
name|'in'
name|'m'
op|'.'
name|'groups'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|']'
newline|'\n'
name|'return'
name|'m'
op|'.'
name|'end'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'parts'
op|'='
op|'['
op|']'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|state_section
dedent|''
dedent|''
name|'def'
name|'state_section'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
comment|'# Grab "HEADER]" or "HEADER.FIELDS (Header list)]" or'
nl|'\n'
comment|'# "HEADER.FIELDS.NOT (Header list)]" or "TEXT]" or "MIME]" or'
nl|'\n'
comment|'# just "]".'
nl|'\n'
nl|'\n'
indent|'        '
name|'l'
op|'='
name|'s'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'used'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"']'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'pending_body'
op|'.'
name|'empty'
op|'='
name|'True'
newline|'\n'
name|'used'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'header]'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'h'
op|'='
name|'self'
op|'.'
name|'pending_body'
op|'.'
name|'header'
op|'='
name|'self'
op|'.'
name|'Header'
op|'('
op|')'
newline|'\n'
name|'h'
op|'.'
name|'negate'
op|'='
name|'True'
newline|'\n'
name|'h'
op|'.'
name|'fields'
op|'='
op|'('
op|')'
newline|'\n'
name|'used'
op|'+='
number|'7'
newline|'\n'
dedent|''
name|'elif'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'text]'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'pending_body'
op|'.'
name|'text'
op|'='
name|'self'
op|'.'
name|'Text'
op|'('
op|')'
newline|'\n'
name|'used'
op|'+='
number|'5'
newline|'\n'
dedent|''
name|'elif'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'mime]'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'pending_body'
op|'.'
name|'mime'
op|'='
name|'self'
op|'.'
name|'MIME'
op|'('
op|')'
newline|'\n'
name|'used'
op|'+='
number|'5'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'h'
op|'='
name|'self'
op|'.'
name|'Header'
op|'('
op|')'
newline|'\n'
name|'if'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'header.fields.not'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'h'
op|'.'
name|'negate'
op|'='
name|'True'
newline|'\n'
name|'used'
op|'+='
number|'17'
newline|'\n'
dedent|''
name|'elif'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'header.fields'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'used'
op|'+='
number|'13'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
string|'"Unhandled section contents: %r"'
op|'%'
op|'('
name|'l'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'pending_body'
op|'.'
name|'header'
op|'='
name|'h'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'.'
name|'extend'
op|'('
op|'('
string|"'finish_section'"
op|','
string|"'header_list'"
op|','
string|"'whitespace'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'pending_body'
op|'.'
name|'part'
op|'='
name|'tuple'
op|'('
name|'self'
op|'.'
name|'parts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parts'
op|'='
name|'None'
newline|'\n'
name|'return'
name|'used'
newline|'\n'
nl|'\n'
DECL|member|state_finish_section
dedent|''
name|'def'
name|'state_finish_section'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'s'
op|'.'
name|'startswith'
op|'('
string|"']'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"section must end with ]"'
op|')'
newline|'\n'
dedent|''
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|state_header_list
dedent|''
name|'def'
name|'state_header_list'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'s'
op|'.'
name|'startswith'
op|'('
string|"'('"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"Header list must begin with ("'
op|')'
newline|'\n'
dedent|''
name|'end'
op|'='
name|'s'
op|'.'
name|'find'
op|'('
string|"')'"
op|')'
newline|'\n'
name|'if'
name|'end'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"Header list must end with )"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'headers'
op|'='
name|'s'
op|'['
number|'1'
op|':'
name|'end'
op|']'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pending_body'
op|'.'
name|'header'
op|'.'
name|'fields'
op|'='
name|'map'
op|'('
name|'str'
op|'.'
name|'upper'
op|','
name|'headers'
op|')'
newline|'\n'
name|'return'
name|'end'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|state_maybe_partial
dedent|''
name|'def'
name|'state_maybe_partial'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
comment|'# Grab <number.number> or nothing at all'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'s'
op|'.'
name|'startswith'
op|'('
string|"'<'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'end'
op|'='
name|'s'
op|'.'
name|'find'
op|'('
string|"'>'"
op|')'
newline|'\n'
name|'if'
name|'end'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"Found < but not >"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'partial'
op|'='
name|'s'
op|'['
number|'1'
op|':'
name|'end'
op|']'
newline|'\n'
name|'parts'
op|'='
name|'partial'
op|'.'
name|'split'
op|'('
string|"'.'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'!='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"Partial specification did not include two .-delimited integers"'
op|')'
newline|'\n'
dedent|''
name|'begin'
op|','
name|'length'
op|'='
name|'map'
op|'('
name|'int'
op|','
name|'parts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pending_body'
op|'.'
name|'partialBegin'
op|'='
name|'begin'
newline|'\n'
name|'self'
op|'.'
name|'pending_body'
op|'.'
name|'partialLength'
op|'='
name|'length'
newline|'\n'
nl|'\n'
name|'return'
name|'end'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
DECL|class|FileProducer
dedent|''
dedent|''
name|'class'
name|'FileProducer'
op|':'
newline|'\n'
DECL|variable|CHUNK_SIZE
indent|'    '
name|'CHUNK_SIZE'
op|'='
number|'2'
op|'**'
number|'2'
op|'**'
number|'2'
op|'**'
number|'2'
newline|'\n'
nl|'\n'
DECL|variable|firstWrite
name|'firstWrite'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'f'
op|'='
name|'f'
newline|'\n'
nl|'\n'
DECL|member|beginProducing
dedent|''
name|'def'
name|'beginProducing'
op|'('
name|'self'
op|','
name|'consumer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'consumer'
op|'='
name|'consumer'
newline|'\n'
name|'self'
op|'.'
name|'produce'
op|'='
name|'consumer'
op|'.'
name|'write'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_onDone'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'False'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'b'
op|'='
string|"''"
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'firstWrite'
op|':'
newline|'\n'
indent|'            '
name|'b'
op|'='
string|"'{%d}\\r\\n'"
op|'%'
name|'self'
op|'.'
name|'_size'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firstWrite'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'b'
op|'='
name|'b'
op|'+'
name|'self'
op|'.'
name|'f'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'CHUNK_SIZE'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'b'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_onDone'
op|'.'
name|'callback'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_onDone'
op|'='
name|'self'
op|'.'
name|'f'
op|'='
name|'self'
op|'.'
name|'consumer'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'produce'
op|'('
name|'b'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pauseProducing
dedent|''
dedent|''
name|'def'
name|'pauseProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|stopProducing
dedent|''
name|'def'
name|'stopProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_size
dedent|''
name|'def'
name|'_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'b'
op|'='
name|'self'
op|'.'
name|'f'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'2'
op|')'
newline|'\n'
name|'e'
op|'='
name|'self'
op|'.'
name|'f'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'.'
name|'seek'
op|'('
name|'b'
op|','
number|'0'
op|')'
newline|'\n'
name|'return'
name|'e'
op|'-'
name|'b'
newline|'\n'
nl|'\n'
DECL|function|parseTime
dedent|''
dedent|''
name|'def'
name|'parseTime'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
comment|'# XXX - This may require localization :('
nl|'\n'
indent|'    '
name|'months'
op|'='
op|'['
nl|'\n'
string|"'jan'"
op|','
string|"'feb'"
op|','
string|"'mar'"
op|','
string|"'apr'"
op|','
string|"'may'"
op|','
string|"'jun'"
op|','
string|"'jul'"
op|','
string|"'aug'"
op|','
string|"'sep'"
op|','
string|"'oct'"
op|','
nl|'\n'
string|"'nov'"
op|','
string|"'dec'"
op|','
string|"'january'"
op|','
string|"'february'"
op|','
string|"'march'"
op|','
string|"'april'"
op|','
string|"'may'"
op|','
string|"'june'"
op|','
nl|'\n'
string|"'july'"
op|','
string|"'august'"
op|','
string|"'september'"
op|','
string|"'october'"
op|','
string|"'november'"
op|','
string|"'december'"
nl|'\n'
op|']'
newline|'\n'
name|'expr'
op|'='
op|'{'
nl|'\n'
string|"'day'"
op|':'
string|'r"(?P<day>3[0-1]|[1-2]\\d|0[1-9]|[1-9]| [1-9])"'
op|','
nl|'\n'
string|"'mon'"
op|':'
string|'r"(?P<mon>\\w+)"'
op|','
nl|'\n'
string|"'year'"
op|':'
string|'r"(?P<year>\\d\\d\\d\\d)"'
nl|'\n'
op|'}'
newline|'\n'
name|'m'
op|'='
name|'re'
op|'.'
name|'match'
op|'('
string|"'%(day)s-%(mon)s-%(year)s'"
op|'%'
name|'expr'
op|','
name|'s'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'m'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|','
string|'"Cannot parse time string %r"'
op|'%'
op|'('
name|'s'
op|','
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'m'
op|'.'
name|'groupdict'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'['
string|"'mon'"
op|']'
op|'='
number|'1'
op|'+'
op|'('
name|'months'
op|'.'
name|'index'
op|'('
name|'d'
op|'['
string|"'mon'"
op|']'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
op|'%'
number|'12'
op|')'
newline|'\n'
name|'d'
op|'['
string|"'year'"
op|']'
op|'='
name|'int'
op|'('
name|'d'
op|'['
string|"'year'"
op|']'
op|')'
newline|'\n'
name|'d'
op|'['
string|"'day'"
op|']'
op|'='
name|'int'
op|'('
name|'d'
op|'['
string|"'day'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|','
string|'"Cannot parse time string %r"'
op|'%'
op|'('
name|'s'
op|','
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'time'
op|'.'
name|'struct_time'
op|'('
nl|'\n'
op|'('
name|'d'
op|'['
string|"'year'"
op|']'
op|','
name|'d'
op|'['
string|"'mon'"
op|']'
op|','
name|'d'
op|'['
string|"'day'"
op|']'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
op|'-'
number|'1'
op|','
op|'-'
number|'1'
op|','
op|'-'
number|'1'
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'import'
name|'codecs'
newline|'\n'
DECL|function|modified_base64
name|'def'
name|'modified_base64'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'s_utf7'
op|'='
name|'s'
op|'.'
name|'encode'
op|'('
string|"'utf-7'"
op|')'
newline|'\n'
name|'return'
name|'s_utf7'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
op|'.'
name|'replace'
op|'('
string|"'/'"
op|','
string|"','"
op|')'
newline|'\n'
nl|'\n'
DECL|function|modified_unbase64
dedent|''
name|'def'
name|'modified_unbase64'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'s_utf7'
op|'='
string|"'+'"
op|'+'
name|'s'
op|'.'
name|'replace'
op|'('
string|"','"
op|','
string|"'/'"
op|')'
op|'+'
string|"'-'"
newline|'\n'
name|'return'
name|'s_utf7'
op|'.'
name|'decode'
op|'('
string|"'utf-7'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|encoder
dedent|''
name|'def'
name|'encoder'
op|'('
name|'s'
op|','
name|'errors'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Encode the given C{unicode} string using the IMAP4 specific variation of\n    UTF-7.\n\n    @type s: C{unicode}\n    @param s: The text to encode.\n\n    @param errors: Policy for handling encoding errors.  Currently ignored.\n\n    @return: C{tuple} of a C{str} giving the encoded bytes and an C{int}\n        giving the number of code units consumed from the input.\n    """'
newline|'\n'
name|'r'
op|'='
op|'['
op|']'
newline|'\n'
name|'_in'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'c'
name|'in'
name|'s'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'ord'
op|'('
name|'c'
op|')'
name|'in'
op|'('
name|'range'
op|'('
number|'0x20'
op|','
number|'0x26'
op|')'
op|'+'
name|'range'
op|'('
number|'0x27'
op|','
number|'0x7f'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'_in'
op|':'
newline|'\n'
indent|'                '
name|'r'
op|'.'
name|'extend'
op|'('
op|'['
string|"'&'"
op|','
name|'modified_base64'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'_in'
op|')'
op|')'
op|','
string|"'-'"
op|']'
op|')'
newline|'\n'
name|'del'
name|'_in'
op|'['
op|':'
op|']'
newline|'\n'
dedent|''
name|'r'
op|'.'
name|'append'
op|'('
name|'str'
op|'('
name|'c'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'c'
op|'=='
string|"'&'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'_in'
op|':'
newline|'\n'
indent|'                '
name|'r'
op|'.'
name|'extend'
op|'('
op|'['
string|"'&'"
op|','
name|'modified_base64'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'_in'
op|')'
op|')'
op|','
string|"'-'"
op|']'
op|')'
newline|'\n'
name|'del'
name|'_in'
op|'['
op|':'
op|']'
newline|'\n'
dedent|''
name|'r'
op|'.'
name|'append'
op|'('
string|"'&-'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'_in'
op|'.'
name|'append'
op|'('
name|'c'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'_in'
op|':'
newline|'\n'
indent|'        '
name|'r'
op|'.'
name|'extend'
op|'('
op|'['
string|"'&'"
op|','
name|'modified_base64'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'_in'
op|')'
op|')'
op|','
string|"'-'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'r'
op|')'
op|','
name|'len'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|decoder
dedent|''
name|'def'
name|'decoder'
op|'('
name|'s'
op|','
name|'errors'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Decode the given C{str} using the IMAP4 specific variation of UTF-7.\n\n    @type s: C{str}\n    @param s: The bytes to decode.\n\n    @param errors: Policy for handling decoding errors.  Currently ignored.\n\n    @return: a C{tuple} of a C{unicode} string giving the text which was\n        decoded and an C{int} giving the number of bytes consumed from the\n        input.\n    """'
newline|'\n'
name|'r'
op|'='
op|'['
op|']'
newline|'\n'
name|'decode'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'c'
name|'in'
name|'s'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'c'
op|'=='
string|"'&'"
name|'and'
name|'not'
name|'decode'
op|':'
newline|'\n'
indent|'            '
name|'decode'
op|'.'
name|'append'
op|'('
string|"'&'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'c'
op|'=='
string|"'-'"
name|'and'
name|'decode'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'decode'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'r'
op|'.'
name|'append'
op|'('
string|"'&'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'r'
op|'.'
name|'append'
op|'('
name|'modified_unbase64'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'decode'
op|'['
number|'1'
op|':'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'decode'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'decode'
op|':'
newline|'\n'
indent|'            '
name|'decode'
op|'.'
name|'append'
op|'('
name|'c'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'r'
op|'.'
name|'append'
op|'('
name|'c'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'decode'
op|':'
newline|'\n'
indent|'        '
name|'r'
op|'.'
name|'append'
op|'('
name|'modified_unbase64'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'decode'
op|'['
number|'1'
op|':'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'r'
op|')'
op|','
name|'len'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|StreamReader
dedent|''
name|'class'
name|'StreamReader'
op|'('
name|'codecs'
op|'.'
name|'StreamReader'
op|')'
op|':'
newline|'\n'
DECL|member|decode
indent|'    '
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'s'
op|','
name|'errors'
op|'='
string|"'strict'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'decoder'
op|'('
name|'s'
op|')'
newline|'\n'
nl|'\n'
DECL|class|StreamWriter
dedent|''
dedent|''
name|'class'
name|'StreamWriter'
op|'('
name|'codecs'
op|'.'
name|'StreamWriter'
op|')'
op|':'
newline|'\n'
DECL|member|encode
indent|'    '
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'s'
op|','
name|'errors'
op|'='
string|"'strict'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'encoder'
op|'('
name|'s'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_codecInfo
dedent|''
dedent|''
name|'_codecInfo'
op|'='
op|'('
name|'encoder'
op|','
name|'decoder'
op|','
name|'StreamReader'
op|','
name|'StreamWriter'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
DECL|variable|_codecInfoClass
indent|'    '
name|'_codecInfoClass'
op|'='
name|'codecs'
op|'.'
name|'CodecInfo'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|_codecInfo
indent|'    '
name|'_codecInfo'
op|'='
name|'_codecInfoClass'
op|'('
op|'*'
name|'_codecInfo'
op|')'
newline|'\n'
nl|'\n'
DECL|function|imap4_utf_7
dedent|''
name|'def'
name|'imap4_utf_7'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'name'
op|'=='
string|"'imap4-utf-7'"
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_codecInfo'
newline|'\n'
dedent|''
dedent|''
name|'codecs'
op|'.'
name|'register'
op|'('
name|'imap4_utf_7'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|__all__
name|'__all__'
op|'='
op|'['
nl|'\n'
comment|'# Protocol classes'
nl|'\n'
string|"'IMAP4Server'"
op|','
string|"'IMAP4Client'"
op|','
nl|'\n'
nl|'\n'
comment|'# Interfaces'
nl|'\n'
string|"'IMailboxListener'"
op|','
string|"'IClientAuthentication'"
op|','
string|"'IAccount'"
op|','
string|"'IMailbox'"
op|','
nl|'\n'
string|"'INamespacePresenter'"
op|','
string|"'ICloseableMailbox'"
op|','
string|"'IMailboxInfo'"
op|','
nl|'\n'
string|"'IMessage'"
op|','
string|"'IMessageCopier'"
op|','
string|"'IMessageFile'"
op|','
string|"'ISearchableMailbox'"
op|','
nl|'\n'
nl|'\n'
comment|'# Exceptions'
nl|'\n'
string|"'IMAP4Exception'"
op|','
string|"'IllegalClientResponse'"
op|','
string|"'IllegalOperation'"
op|','
nl|'\n'
string|"'IllegalMailboxEncoding'"
op|','
string|"'UnhandledResponse'"
op|','
string|"'NegativeResponse'"
op|','
nl|'\n'
string|"'NoSupportedAuthentication'"
op|','
string|"'IllegalServerResponse'"
op|','
nl|'\n'
string|"'IllegalIdentifierError'"
op|','
string|"'IllegalQueryError'"
op|','
string|"'MismatchedNesting'"
op|','
nl|'\n'
string|"'MismatchedQuoting'"
op|','
string|"'MailboxException'"
op|','
string|"'MailboxCollision'"
op|','
nl|'\n'
string|"'NoSuchMailbox'"
op|','
string|"'ReadOnlyMailbox'"
op|','
nl|'\n'
nl|'\n'
comment|'# Auth objects'
nl|'\n'
string|"'CramMD5ClientAuthenticator'"
op|','
string|"'PLAINAuthenticator'"
op|','
string|"'LOGINAuthenticator'"
op|','
nl|'\n'
string|"'PLAINCredentials'"
op|','
string|"'LOGINCredentials'"
op|','
nl|'\n'
nl|'\n'
comment|'# Simple query interface'
nl|'\n'
string|"'Query'"
op|','
string|"'Not'"
op|','
string|"'Or'"
op|','
nl|'\n'
nl|'\n'
comment|'# Miscellaneous'
nl|'\n'
string|"'MemoryAccount'"
op|','
nl|'\n'
string|"'statusRequestHelper'"
op|','
nl|'\n'
op|']'
newline|'\n'
endmarker|''
end_unit

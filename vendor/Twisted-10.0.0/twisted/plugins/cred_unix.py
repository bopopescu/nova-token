begin_unit
comment|'# -*- test-case-name: twisted.test.test_strcred -*-'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright (c) 2007-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nCred plugin for UNIX user accounts.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
name|'import'
name|'plugin'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'strcred'
name|'import'
name|'ICheckerFactory'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'checkers'
name|'import'
name|'ICredentialsChecker'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'IUsernamePassword'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'error'
name|'import'
name|'UnauthorizedLogin'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|verifyCryptedPassword
name|'def'
name|'verifyCryptedPassword'
op|'('
name|'crypted'
op|','
name|'pw'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'crypted'
op|'['
number|'0'
op|']'
op|'=='
string|"'$'"
op|':'
comment|'# md5_crypt encrypted'
newline|'\n'
indent|'        '
name|'salt'
op|'='
string|"'$1$'"
op|'+'
name|'crypted'
op|'.'
name|'split'
op|'('
string|"'$'"
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'salt'
op|'='
name|'crypted'
op|'['
op|':'
number|'2'
op|']'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'crypt'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'        '
name|'crypt'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'crypt'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
string|'"cred_unix not supported on this platform"'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'crypt'
op|'.'
name|'crypt'
op|'('
name|'pw'
op|','
name|'salt'
op|')'
op|'=='
name|'crypted'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UNIXChecker
dedent|''
name|'class'
name|'UNIXChecker'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A credentials checker for a UNIX server. This will check that\n    an authenticating username/password is a valid user on the system.\n\n    Does not work on Windows.\n\n    Right now this supports Python\'s pwd and spwd modules, if they are\n    installed. It does not support PAM.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'ICredentialsChecker'
op|')'
newline|'\n'
DECL|variable|credentialInterfaces
name|'credentialInterfaces'
op|'='
op|'('
name|'IUsernamePassword'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|checkPwd
name|'def'
name|'checkPwd'
op|'('
name|'self'
op|','
name|'pwd'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'cryptedPass'
op|'='
name|'pwd'
op|'.'
name|'getpwnam'
op|'('
name|'username'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'UnauthorizedLogin'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'cryptedPass'
name|'in'
op|'('
string|"'*'"
op|','
string|"'x'"
op|')'
op|':'
newline|'\n'
comment|'# Allow checkSpwd to take over'
nl|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'elif'
name|'verifyCryptedPassword'
op|'('
name|'cryptedPass'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'username'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|checkSpwd
dedent|''
dedent|''
dedent|''
name|'def'
name|'checkSpwd'
op|'('
name|'self'
op|','
name|'spwd'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'cryptedPass'
op|'='
name|'spwd'
op|'.'
name|'getspnam'
op|'('
name|'username'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'UnauthorizedLogin'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'verifyCryptedPassword'
op|'('
name|'cryptedPass'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'username'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|requestAvatarId
dedent|''
dedent|''
dedent|''
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'username'
op|','
name|'password'
op|'='
name|'credentials'
op|'.'
name|'username'
op|','
name|'credentials'
op|'.'
name|'password'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'pwd'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'pwd'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'pwd'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'checked'
op|'='
name|'self'
op|'.'
name|'checkPwd'
op|'('
name|'pwd'
op|','
name|'username'
op|','
name|'password'
op|')'
newline|'\n'
name|'if'
name|'checked'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'checked'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'spwd'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'spwd'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'spwd'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'checked'
op|'='
name|'self'
op|'.'
name|'checkSpwd'
op|'('
name|'spwd'
op|','
name|'username'
op|','
name|'password'
op|')'
newline|'\n'
name|'if'
name|'checked'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'checked'
newline|'\n'
comment|'# TODO: check_pam?'
nl|'\n'
comment|'# TODO: check_shadow?'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'UnauthorizedLogin'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'unixCheckerFactoryHelp'
op|'='
string|'"""\nThis checker will attempt to use every resource available to\nauthenticate against the list of users on the local UNIX system.\n(This does not support Windows servers for very obvious reasons.)\n\nRight now, this includes support for:\n\n  * Python\'s pwd module (which checks /etc/passwd)\n  * Python\'s spwd module (which checks /etc/shadow)\n\nFuture versions may include support for PAM authentication.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UNIXCheckerFactory
name|'class'
name|'UNIXCheckerFactory'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A factory for L{UNIXChecker}.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'ICheckerFactory'
op|','
name|'plugin'
op|'.'
name|'IPlugin'
op|')'
newline|'\n'
DECL|variable|authType
name|'authType'
op|'='
string|"'unix'"
newline|'\n'
DECL|variable|authHelp
name|'authHelp'
op|'='
name|'unixCheckerFactoryHelp'
newline|'\n'
DECL|variable|argStringFormat
name|'argStringFormat'
op|'='
string|"'No argstring required.'"
newline|'\n'
DECL|variable|credentialInterfaces
name|'credentialInterfaces'
op|'='
name|'UNIXChecker'
op|'.'
name|'credentialInterfaces'
newline|'\n'
nl|'\n'
DECL|member|generateChecker
name|'def'
name|'generateChecker'
op|'('
name|'self'
op|','
name|'argstring'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This checker factory ignores the argument string. Everything\n        needed to generate a user database is pulled out of the local\n        UNIX environment.\n        """'
newline|'\n'
name|'return'
name|'UNIXChecker'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|theUnixCheckerFactory
dedent|''
dedent|''
name|'theUnixCheckerFactory'
op|'='
name|'UNIXCheckerFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
endmarker|''
end_unit

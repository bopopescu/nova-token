begin_unit
comment|'# -*- test-case-name: twisted.test.test_strcred -*-'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright (c) 2007-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nCred plugin for an in-memory user database.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
name|'import'
name|'plugin'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'strcred'
name|'import'
name|'ICheckerFactory'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'checkers'
name|'import'
name|'InMemoryUsernamePasswordDatabaseDontUse'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'IUsernamePassword'
op|','
name|'IUsernameHashedPassword'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
name|'inMemoryCheckerFactoryHelp'
op|'='
string|'"""\nA checker that uses an in-memory user database.\n\nThis is only of use in one-off test programs or examples which\ndon\'t want to focus too much on how credentials are verified. You\nreally don\'t want to use this for anything else. It is a toy.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|InMemoryCheckerFactory
name|'class'
name|'InMemoryCheckerFactory'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A factory for in-memory credentials checkers.\n\n    This is only of use in one-off test programs or examples which don\'t\n    want to focus too much on how credentials are verified.\n\n    You really don\'t want to use this for anything else.  It is, at best, a\n    toy.  If you need a simple credentials checker for a real application,\n    see L{cred_passwd.PasswdCheckerFactory}.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'ICheckerFactory'
op|','
name|'plugin'
op|'.'
name|'IPlugin'
op|')'
newline|'\n'
DECL|variable|authType
name|'authType'
op|'='
string|"'memory'"
newline|'\n'
DECL|variable|authHelp
name|'authHelp'
op|'='
name|'inMemoryCheckerFactoryHelp'
newline|'\n'
DECL|variable|argStringFormat
name|'argStringFormat'
op|'='
string|"'A colon-separated list (name:password:...)'"
newline|'\n'
DECL|variable|credentialInterfaces
name|'credentialInterfaces'
op|'='
op|'('
name|'IUsernamePassword'
op|','
nl|'\n'
name|'IUsernameHashedPassword'
op|')'
newline|'\n'
nl|'\n'
DECL|member|generateChecker
name|'def'
name|'generateChecker'
op|'('
name|'self'
op|','
name|'argstring'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This checker factory expects to get a list of\n        username:password pairs, with each pair also separated by a\n        colon. For example, the string \'alice:f:bob:g\' would generate\n        two users, one named \'alice\' and one named \'bob\'.\n        """'
newline|'\n'
name|'checker'
op|'='
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
op|')'
newline|'\n'
name|'if'
name|'argstring'
op|':'
newline|'\n'
indent|'            '
name|'pieces'
op|'='
name|'argstring'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'pieces'
op|')'
op|'%'
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'strcred'
name|'import'
name|'InvalidAuthArgumentString'
newline|'\n'
name|'raise'
name|'InvalidAuthArgumentString'
op|'('
nl|'\n'
string|'"argstring must be in format U:P:..."'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'pieces'
op|')'
op|','
number|'2'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'username'
op|','
name|'password'
op|'='
name|'pieces'
op|'['
name|'i'
op|']'
op|','
name|'pieces'
op|'['
name|'i'
op|'+'
number|'1'
op|']'
newline|'\n'
name|'checker'
op|'.'
name|'addUser'
op|'('
name|'username'
op|','
name|'password'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'checker'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|theInMemoryCheckerFactory
dedent|''
dedent|''
name|'theInMemoryCheckerFactory'
op|'='
name|'InMemoryCheckerFactory'
op|'('
op|')'
newline|'\n'
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.test.test_journal -*-'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
comment|'# '
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""Basic classes and interfaces for journal."""'
newline|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'nested_scopes'
newline|'\n'
nl|'\n'
comment|'# system imports'
nl|'\n'
name|'import'
name|'os'
op|','
name|'time'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'cPickle'
name|'as'
name|'pickle'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pickle'
newline|'\n'
nl|'\n'
comment|'# twisted imports'
nl|'\n'
dedent|''
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'Interface'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Journal
name|'class'
name|'Journal'
op|':'
newline|'\n'
indent|'    '
string|'"""All commands to the system get routed through here.\n\n    Subclasses should implement the actual snapshotting capability.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'log'
op|','
name|'journaledService'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'log'
op|'='
name|'log'
newline|'\n'
name|'self'
op|'.'
name|'journaledService'
op|'='
name|'journaledService'
newline|'\n'
name|'self'
op|'.'
name|'latestIndex'
op|'='
name|'self'
op|'.'
name|'log'
op|'.'
name|'getCurrentIndex'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|updateFromLog
dedent|''
name|'def'
name|'updateFromLog'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Run all commands from log that haven\'t been run yet.\n\n        This method should be run on startup to ensure the snapshot\n        is up-to-date.\n        """'
newline|'\n'
name|'snapshotIndex'
op|'='
name|'self'
op|'.'
name|'getLastSnapshot'
op|'('
op|')'
newline|'\n'
name|'if'
name|'snapshotIndex'
op|'<'
name|'self'
op|'.'
name|'latestIndex'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'cmdtime'
op|','
name|'command'
name|'in'
name|'self'
op|'.'
name|'log'
op|'.'
name|'getCommandsSince'
op|'('
name|'snapshotIndex'
op|'+'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'command'
op|'.'
name|'execute'
op|'('
name|'self'
op|'.'
name|'journaledService'
op|','
name|'cmdtime'
op|')'
newline|'\n'
nl|'\n'
DECL|member|executeCommand
dedent|''
dedent|''
dedent|''
name|'def'
name|'executeCommand'
op|'('
name|'self'
op|','
name|'command'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Log and execute a command."""'
newline|'\n'
name|'runTime'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'log'
op|'.'
name|'logCommand'
op|'('
name|'command'
op|','
name|'runTime'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_reallyExecute'
op|','
name|'command'
op|','
name|'runTime'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_reallyExecute
dedent|''
name|'def'
name|'_reallyExecute'
op|'('
name|'self'
op|','
name|'index'
op|','
name|'command'
op|','
name|'runTime'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Callback called when logging command is done."""'
newline|'\n'
name|'result'
op|'='
name|'command'
op|'.'
name|'execute'
op|'('
name|'self'
op|'.'
name|'journaledService'
op|','
name|'runTime'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'latestIndex'
op|'='
name|'index'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|getLastSnapshot
dedent|''
name|'def'
name|'getLastSnapshot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return command index of the last snapshot taken."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|sync
dedent|''
name|'def'
name|'sync'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Save journal to disk, returns Deferred of finish status.\n\n        Subclasses may choose whatever signature is appropriate, or may\n        not implement this at all.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MemoryJournal
dedent|''
dedent|''
name|'class'
name|'MemoryJournal'
op|'('
name|'Journal'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Prevayler-like journal that dumps from memory to disk."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'log'
op|','
name|'journaledService'
op|','
name|'path'
op|','
name|'loadedCallback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'lastSync'
op|','
name|'obj'
op|'='
name|'pickle'
op|'.'
name|'load'
op|'('
name|'open'
op|'('
name|'path'
op|','
string|'"rb"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'IOError'
op|','
name|'OSError'
op|','
name|'pickle'
op|'.'
name|'UnpicklingError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'lastSync'
op|','
name|'obj'
op|'='
number|'0'
op|','
name|'None'
newline|'\n'
dedent|''
name|'loadedCallback'
op|'('
name|'obj'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'lastSync'
op|'='
number|'0'
newline|'\n'
name|'loadedCallback'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'Journal'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'log'
op|','
name|'journaledService'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getLastSnapshot
dedent|''
name|'def'
name|'getLastSnapshot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'lastSync'
newline|'\n'
nl|'\n'
DECL|member|sync
dedent|''
name|'def'
name|'sync'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
comment|'# make this more reliable at some point'
nl|'\n'
indent|'        '
name|'f'
op|'='
name|'open'
op|'('
name|'self'
op|'.'
name|'path'
op|','
string|'"wb"'
op|')'
newline|'\n'
name|'pickle'
op|'.'
name|'dump'
op|'('
op|'('
name|'self'
op|'.'
name|'latestIndex'
op|','
name|'obj'
op|')'
op|','
name|'f'
op|','
number|'1'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lastSync'
op|'='
name|'self'
op|'.'
name|'latestIndex'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ICommand
dedent|''
dedent|''
name|'class'
name|'ICommand'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A serializable command which interacts with a journaled service."""'
newline|'\n'
nl|'\n'
DECL|member|execute
name|'def'
name|'execute'
op|'('
name|'journaledService'
op|','
name|'runTime'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Run the command and return result."""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ICommandLog
dedent|''
dedent|''
name|'class'
name|'ICommandLog'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Interface for command log."""'
newline|'\n'
nl|'\n'
DECL|member|logCommand
name|'def'
name|'logCommand'
op|'('
name|'command'
op|','
name|'runTime'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add a command and its run time to the log.\n\n        @return: Deferred of command index.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getCurrentIndex
dedent|''
name|'def'
name|'getCurrentIndex'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return index of last command that was logged."""'
newline|'\n'
nl|'\n'
DECL|member|getCommandsSince
dedent|''
name|'def'
name|'getCommandsSince'
op|'('
name|'index'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return commands who\'s index >= the given one.\n\n        @return: list of (time, command) tuples, sorted with ascending times.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoadingService
dedent|''
dedent|''
name|'class'
name|'LoadingService'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for journalled service used with Wrappables."""'
newline|'\n'
nl|'\n'
DECL|member|loadObject
name|'def'
name|'loadObject'
op|'('
name|'self'
op|','
name|'objType'
op|','
name|'objId'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return object of specified type and id."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Wrappable
dedent|''
dedent|''
name|'class'
name|'Wrappable'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for objects used with LoadingService."""'
newline|'\n'
nl|'\n'
DECL|variable|objectType
name|'objectType'
op|'='
name|'None'
comment|'# override in base class'
newline|'\n'
nl|'\n'
DECL|member|getUid
name|'def'
name|'getUid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return uid for loading with LoadingService.loadObject"""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WrapperCommand
dedent|''
dedent|''
name|'class'
name|'WrapperCommand'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'implements'
op|'('
name|'ICommand'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'methodName'
op|','
name|'obj'
op|','
name|'args'
op|'='
op|'('
op|')'
op|','
name|'kwargs'
op|'='
op|'{'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'obj'
op|'='
name|'obj'
newline|'\n'
name|'self'
op|'.'
name|'objId'
op|'='
name|'obj'
op|'.'
name|'getUid'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'objType'
op|'='
name|'obj'
op|'.'
name|'objectType'
newline|'\n'
name|'self'
op|'.'
name|'methodName'
op|'='
name|'methodName'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'kwargs'
op|'='
name|'kwargs'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
name|'svc'
op|','
name|'commandTime'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"obj"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'='
name|'svc'
op|'.'
name|'loadObject'
op|'('
name|'self'
op|'.'
name|'objType'
op|','
name|'self'
op|'.'
name|'objId'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'='
name|'self'
op|'.'
name|'obj'
newline|'\n'
dedent|''
name|'return'
name|'getattr'
op|'('
name|'obj'
op|','
name|'self'
op|'.'
name|'methodName'
op|')'
op|'('
op|'*'
name|'self'
op|'.'
name|'args'
op|','
op|'**'
name|'self'
op|'.'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'del'
name|'d'
op|'['
string|'"obj"'
op|']'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|command
dedent|''
dedent|''
name|'def'
name|'command'
op|'('
name|'methodName'
op|','
name|'cmdClass'
op|'='
name|'WrapperCommand'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wrap a method so it gets turned into command automatically.\n\n    For use with Wrappables.\n\n    Usage::\n\n        | class Foo(Wrappable):\n        |     objectType = "foo"\n        |     def getUid(self):\n        |         return self.id\n        |     def _bar(self, x):\n        |         return x + 1\n        |\n        |     bar = command(\'_bar\')\n\n    The resulting callable will have signature identical to wrapped\n    function, except that it expects journal as first argument, and\n    returns a Deferred.\n    """'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'obj'
op|','
name|'journal'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'journal'
op|'.'
name|'executeCommand'
op|'('
name|'cmdClass'
op|'('
name|'methodName'
op|','
name|'obj'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServiceWrapperCommand
dedent|''
name|'class'
name|'ServiceWrapperCommand'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'implements'
op|'('
name|'ICommand'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'methodName'
op|','
name|'args'
op|'='
op|'('
op|')'
op|','
name|'kwargs'
op|'='
op|'{'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'methodName'
op|'='
name|'methodName'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'kwargs'
op|'='
name|'kwargs'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
name|'svc'
op|','
name|'commandTime'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'svc'
op|','
name|'self'
op|'.'
name|'methodName'
op|')'
op|'('
op|'*'
name|'self'
op|'.'
name|'args'
op|','
op|'**'
name|'self'
op|'.'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"<ServiceWrapperCommand: %s, %s, %s>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'methodName'
op|','
name|'self'
op|'.'
name|'args'
op|','
name|'self'
op|'.'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cmp__
dedent|''
name|'def'
name|'__cmp__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'other'
op|','
string|'"__dict__"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cmp'
op|'('
name|'self'
op|'.'
name|'__dict__'
op|','
name|'other'
op|'.'
name|'__dict__'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|serviceCommand
dedent|''
dedent|''
dedent|''
name|'def'
name|'serviceCommand'
op|'('
name|'methodName'
op|','
name|'cmdClass'
op|'='
name|'ServiceWrapperCommand'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wrap methods into commands for a journalled service.\n\n    The resulting callable will have signature identical to wrapped\n    function, except that it expects journal as first argument, and\n    returns a Deferred.\n    """'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'obj'
op|','
name|'journal'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'journal'
op|'.'
name|'executeCommand'
op|'('
name|'cmdClass'
op|'('
name|'methodName'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
dedent|''
endmarker|''
end_unit

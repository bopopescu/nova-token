begin_unit
comment|'# -*- test-case-name: twisted.test.test_persisted -*-'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nUtility classes for dealing with circular references.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'reflect'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'new'
name|'import'
name|'instancemethod'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'org'
op|'.'
name|'python'
op|'.'
name|'core'
name|'import'
name|'PyMethod'
newline|'\n'
DECL|variable|instancemethod
name|'instancemethod'
op|'='
name|'PyMethod'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NotKnown
dedent|''
name|'class'
name|'NotKnown'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'dependants'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'resolved'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|addDependant
dedent|''
name|'def'
name|'addDependant'
op|'('
name|'self'
op|','
name|'mutableObject'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'not'
name|'self'
op|'.'
name|'resolved'
newline|'\n'
name|'self'
op|'.'
name|'dependants'
op|'.'
name|'append'
op|'('
op|'('
name|'mutableObject'
op|','
name|'key'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|resolvedObject
dedent|''
name|'resolvedObject'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|resolveDependants
name|'def'
name|'resolveDependants'
op|'('
name|'self'
op|','
name|'newObject'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resolved'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'resolvedObject'
op|'='
name|'newObject'
newline|'\n'
name|'for'
name|'mut'
op|','
name|'key'
name|'in'
name|'self'
op|'.'
name|'dependants'
op|':'
newline|'\n'
indent|'            '
name|'mut'
op|'['
name|'key'
op|']'
op|'='
name|'newObject'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'newObject'
op|','
name|'NotKnown'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'newObject'
op|'.'
name|'addDependant'
op|'('
name|'mut'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
dedent|''
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
number|'0'
op|','
string|'"I am not to be used as a dictionary key."'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Container
dedent|''
dedent|''
name|'class'
name|'_Container'
op|'('
name|'NotKnown'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper class to resolve circular references on container objects.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'l'
op|','
name|'containerType'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param l: The list of object which may contain some not yet referenced\n        objects.\n\n        @param containerType: A type of container objects (e.g., C{tuple} or\n            C{set}).\n        """'
newline|'\n'
name|'NotKnown'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'containerType'
op|'='
name|'containerType'
newline|'\n'
name|'self'
op|'.'
name|'l'
op|'='
name|'l'
newline|'\n'
name|'self'
op|'.'
name|'locs'
op|'='
name|'range'
op|'('
name|'len'
op|'('
name|'l'
op|')'
op|')'
newline|'\n'
name|'for'
name|'idx'
name|'in'
name|'xrange'
op|'('
name|'len'
op|'('
name|'l'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'l'
op|'['
name|'idx'
op|']'
op|','
name|'NotKnown'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'locs'
op|'.'
name|'remove'
op|'('
name|'idx'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'l'
op|'['
name|'idx'
op|']'
op|'.'
name|'addDependant'
op|'('
name|'self'
op|','
name|'idx'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'locs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'resolveDependants'
op|'('
name|'self'
op|'.'
name|'containerType'
op|'('
name|'self'
op|'.'
name|'l'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'n'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Change the value of one contained objects, and resolve references if\n        all objects have been referenced.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'l'
op|'['
name|'n'
op|']'
op|'='
name|'obj'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'obj'
op|','
name|'NotKnown'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'locs'
op|'.'
name|'remove'
op|'('
name|'n'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'locs'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'resolveDependants'
op|'('
name|'self'
op|'.'
name|'containerType'
op|'('
name|'self'
op|'.'
name|'l'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Tuple
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'_Tuple'
op|'('
name|'_Container'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Manage tuple containing circular references. Deprecated: use C{_Container}\n    instead.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'l'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param l: The list of object which may contain some not yet referenced\n        objects.\n        """'
newline|'\n'
name|'_Container'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'l'
op|','
name|'tuple'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_InstanceMethod
dedent|''
dedent|''
name|'class'
name|'_InstanceMethod'
op|'('
name|'NotKnown'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'im_name'
op|','
name|'im_self'
op|','
name|'im_class'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'NotKnown'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'my_class'
op|'='
name|'im_class'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'im_name'
newline|'\n'
comment|'# im_self _must_ be a'
nl|'\n'
name|'im_self'
op|'.'
name|'addDependant'
op|'('
name|'self'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'traceback'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'instance method %s.%s'"
op|'%'
op|'('
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'my_class'
op|')'
op|','
name|'self'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'being called with %r %r'"
op|'%'
op|'('
name|'args'
op|','
name|'kw'
op|')'
op|')'
newline|'\n'
name|'traceback'
op|'.'
name|'print_stack'
op|'('
name|'file'
op|'='
name|'log'
op|'.'
name|'logfile'
op|')'
newline|'\n'
name|'assert'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'n'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'n'
op|'=='
number|'0'
op|','
string|'"only zero index allowed"'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'obj'
op|','
name|'NotKnown'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'resolveDependants'
op|'('
name|'instancemethod'
op|'('
name|'self'
op|'.'
name|'my_class'
op|'.'
name|'__dict__'
op|'['
name|'self'
op|'.'
name|'name'
op|']'
op|','
nl|'\n'
name|'obj'
op|','
nl|'\n'
name|'self'
op|'.'
name|'my_class'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|_DictKeyAndValue
dedent|''
dedent|''
dedent|''
name|'class'
name|'_DictKeyAndValue'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'dict'
op|'='
name|'dict'
newline|'\n'
DECL|member|__setitem__
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'n'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'n'
name|'not'
name|'in'
op|'('
number|'1'
op|','
number|'0'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"DictKeyAndValue should only ever be called with 0 or 1"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'n'
op|':'
comment|'# value'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'value'
op|'='
name|'obj'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'key'
op|'='
name|'obj'
newline|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"key"'
op|')'
name|'and'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"value"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'dict'
op|'['
name|'self'
op|'.'
name|'key'
op|']'
op|'='
name|'self'
op|'.'
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Dereference
dedent|''
dedent|''
dedent|''
name|'class'
name|'_Dereference'
op|'('
name|'NotKnown'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'NotKnown'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'id'
op|'='
name|'id'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
newline|'\n'
nl|'\n'
DECL|class|_Catcher
name|'class'
name|'_Catcher'
op|':'
newline|'\n'
DECL|member|catch
indent|'    '
name|'def'
name|'catch'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'value'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|class|_Defer
dedent|''
dedent|''
name|'class'
name|'_Defer'
op|'('
name|'Deferred'
op|','
name|'NotKnown'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Deferred'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'NotKnown'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pause'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|wasset
dedent|''
name|'wasset'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'n'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'wasset'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|"'setitem should only be called once, setting %r to %r'"
op|'%'
op|'('
name|'n'
op|','
name|'obj'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'wasset'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'callback'
op|'('
name|'obj'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addDependant
dedent|''
name|'def'
name|'addDependant'
op|'('
name|'self'
op|','
name|'dep'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
comment|"# by the time I'm adding a dependant, I'm *not* adding any more"
nl|'\n'
comment|'# callbacks'
nl|'\n'
indent|'        '
name|'NotKnown'
op|'.'
name|'addDependant'
op|'('
name|'self'
op|','
name|'dep'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'unpause'
op|'('
op|')'
newline|'\n'
name|'resovd'
op|'='
name|'self'
op|'.'
name|'result'
newline|'\n'
name|'self'
op|'.'
name|'resolveDependants'
op|'('
name|'resovd'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

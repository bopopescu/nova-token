begin_unit
comment|'# -*- test-case-name: twisted.test.test_sslverify -*-'
nl|'\n'
comment|'# Copyright (c) 2005 Divmod, Inc.'
nl|'\n'
comment|'# Copyright (c) 2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
comment|'# Copyright (c) 2005-2008 Twisted Matrix Laboratories.'
nl|'\n'
nl|'\n'
name|'import'
name|'itertools'
newline|'\n'
name|'from'
name|'OpenSSL'
name|'import'
name|'SSL'
op|','
name|'crypto'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'reflect'
op|','
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'VerifyError'
op|','
name|'CertificateError'
newline|'\n'
nl|'\n'
comment|'# Private - shared between all OpenSSLCertificateOptions, counts up to provide'
nl|'\n'
comment|'# a unique session id for each context'
nl|'\n'
DECL|variable|_sessionCounter
name|'_sessionCounter'
op|'='
name|'itertools'
op|'.'
name|'count'
op|'('
op|')'
op|'.'
name|'next'
newline|'\n'
nl|'\n'
DECL|variable|_x509names
name|'_x509names'
op|'='
op|'{'
nl|'\n'
string|"'CN'"
op|':'
string|"'commonName'"
op|','
nl|'\n'
string|"'commonName'"
op|':'
string|"'commonName'"
op|','
nl|'\n'
nl|'\n'
string|"'O'"
op|':'
string|"'organizationName'"
op|','
nl|'\n'
string|"'organizationName'"
op|':'
string|"'organizationName'"
op|','
nl|'\n'
nl|'\n'
string|"'OU'"
op|':'
string|"'organizationalUnitName'"
op|','
nl|'\n'
string|"'organizationalUnitName'"
op|':'
string|"'organizationalUnitName'"
op|','
nl|'\n'
nl|'\n'
string|"'L'"
op|':'
string|"'localityName'"
op|','
nl|'\n'
string|"'localityName'"
op|':'
string|"'localityName'"
op|','
nl|'\n'
nl|'\n'
string|"'ST'"
op|':'
string|"'stateOrProvinceName'"
op|','
nl|'\n'
string|"'stateOrProvinceName'"
op|':'
string|"'stateOrProvinceName'"
op|','
nl|'\n'
nl|'\n'
string|"'C'"
op|':'
string|"'countryName'"
op|','
nl|'\n'
string|"'countryName'"
op|':'
string|"'countryName'"
op|','
nl|'\n'
nl|'\n'
string|"'emailAddress'"
op|':'
string|"'emailAddress'"
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DistinguishedName
name|'class'
name|'DistinguishedName'
op|'('
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Identify and describe an entity.\n\n    Distinguished names are used to provide a minimal amount of identifying\n    information about a certificate issuer or subject.  They are commonly\n    created with one or more of the following fields::\n\n        commonName (CN)\n        organizationName (O)\n        organizationalUnitName (OU)\n        localityName (L)\n        stateOrProvinceName (ST)\n        countryName (C)\n        emailAddress\n    """'
newline|'\n'
DECL|variable|__slots__
name|'__slots__'
op|'='
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'kw'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'self'
op|','
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_copyFrom
dedent|''
dedent|''
name|'def'
name|'_copyFrom'
op|'('
name|'self'
op|','
name|'x509name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'_x509names'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'getattr'
op|'('
name|'x509name'
op|','
name|'name'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'setattr'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_copyInto
dedent|''
dedent|''
dedent|''
name|'def'
name|'_copyInto'
op|'('
name|'self'
op|','
name|'x509name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'self'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'x509name'
op|','
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<DN %s>'"
op|'%'
op|'('
name|'dict'
op|'.'
name|'__repr__'
op|'('
name|'self'
op|')'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'attr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'['
name|'_x509names'
op|'['
name|'attr'
op|']'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'AttributeError'
op|'('
name|'attr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__setattr__
dedent|''
dedent|''
name|'def'
name|'__setattr__'
op|'('
name|'self'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'type'
op|'('
name|'attr'
op|')'
name|'is'
name|'str'
newline|'\n'
name|'if'
name|'not'
name|'attr'
name|'in'
name|'_x509names'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'AttributeError'
op|'('
string|'"%s is not a valid OpenSSL X509 name field"'
op|'%'
op|'('
name|'attr'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'realAttr'
op|'='
name|'_x509names'
op|'['
name|'attr'
op|']'
newline|'\n'
name|'value'
op|'='
name|'value'
op|'.'
name|'encode'
op|'('
string|"'ascii'"
op|')'
newline|'\n'
name|'assert'
name|'type'
op|'('
name|'value'
op|')'
name|'is'
name|'str'
newline|'\n'
name|'self'
op|'['
name|'realAttr'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|inspect
dedent|''
name|'def'
name|'inspect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a multi-line, human-readable representation of this DN.\n        """'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'lablen'
op|'='
number|'0'
newline|'\n'
DECL|function|uniqueValues
name|'def'
name|'uniqueValues'
op|'('
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'dict'
op|'.'
name|'fromkeys'
op|'('
name|'mapping'
op|'.'
name|'itervalues'
op|'('
op|')'
op|')'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
dedent|''
name|'for'
name|'k'
name|'in'
name|'uniqueValues'
op|'('
name|'_x509names'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'label'
op|'='
name|'util'
op|'.'
name|'nameToLabel'
op|'('
name|'k'
op|')'
newline|'\n'
name|'lablen'
op|'='
name|'max'
op|'('
name|'len'
op|'('
name|'label'
op|')'
op|','
name|'lablen'
op|')'
newline|'\n'
name|'v'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'k'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'v'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'l'
op|'.'
name|'append'
op|'('
op|'('
name|'label'
op|','
name|'v'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'lablen'
op|'+='
number|'2'
newline|'\n'
name|'for'
name|'n'
op|','
op|'('
name|'label'
op|','
name|'attr'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'l'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'['
name|'n'
op|']'
op|'='
op|'('
name|'label'
op|'.'
name|'rjust'
op|'('
name|'lablen'
op|')'
op|'+'
string|"': '"
op|'+'
name|'attr'
op|')'
newline|'\n'
dedent|''
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'l'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|DN
dedent|''
dedent|''
name|'DN'
op|'='
name|'DistinguishedName'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CertBase
name|'class'
name|'CertBase'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'original'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'original'
op|'='
name|'original'
newline|'\n'
nl|'\n'
DECL|member|_copyName
dedent|''
name|'def'
name|'_copyName'
op|'('
name|'self'
op|','
name|'suffix'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dn'
op|'='
name|'DistinguishedName'
op|'('
op|')'
newline|'\n'
name|'dn'
op|'.'
name|'_copyFrom'
op|'('
name|'getattr'
op|'('
name|'self'
op|'.'
name|'original'
op|','
string|"'get_'"
op|'+'
name|'suffix'
op|')'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'dn'
newline|'\n'
nl|'\n'
DECL|member|getSubject
dedent|''
name|'def'
name|'getSubject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve the subject of this certificate.\n\n        @rtype: L{DistinguishedName}\n        @return: A copy of the subject of this certificate.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_copyName'
op|'('
string|"'subject'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_handleattrhelper
dedent|''
dedent|''
name|'def'
name|'_handleattrhelper'
op|'('
name|'Class'
op|','
name|'transport'
op|','
name|'methodName'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    (private) Helper for L{Certificate.peerFromTransport} and\n    L{Certificate.hostFromTransport} which checks for incompatible handle types\n    and null certificates and raises the appropriate exception or returns the\n    appropriate certificate object.\n    """'
newline|'\n'
name|'method'
op|'='
name|'getattr'
op|'('
name|'transport'
op|'.'
name|'getHandle'
op|'('
op|')'
op|','
nl|'\n'
string|'"get_%s_certificate"'
op|'%'
op|'('
name|'methodName'
op|','
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'method'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'CertificateError'
op|'('
nl|'\n'
string|'"non-TLS transport %r did not have %s certificate"'
op|'%'
op|'('
name|'transport'
op|','
name|'methodName'
op|')'
op|')'
newline|'\n'
dedent|''
name|'cert'
op|'='
name|'method'
op|'('
op|')'
newline|'\n'
name|'if'
name|'cert'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'CertificateError'
op|'('
nl|'\n'
string|'"TLS transport %r did not have %s certificate"'
op|'%'
op|'('
name|'transport'
op|','
name|'methodName'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'Class'
op|'('
name|'cert'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Certificate
dedent|''
name|'class'
name|'Certificate'
op|'('
name|'CertBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An x509 certificate.\n    """'
newline|'\n'
DECL|member|__repr__
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<%s Subject=%s Issuer=%s>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'getSubject'
op|'('
op|')'
op|'.'
name|'commonName'
op|','
nl|'\n'
name|'self'
op|'.'
name|'getIssuer'
op|'('
op|')'
op|'.'
name|'commonName'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'other'
op|','
name|'Certificate'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'dump'
op|'('
op|')'
op|'=='
name|'other'
op|'.'
name|'dump'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__ne__
dedent|''
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'not'
name|'self'
op|'.'
name|'__eq__'
op|'('
name|'other'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|load
dedent|''
name|'def'
name|'load'
op|'('
name|'Class'
op|','
name|'requestData'
op|','
name|'format'
op|'='
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|','
name|'args'
op|'='
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Load a certificate from an ASN.1- or PEM-format string.\n\n        @rtype: C{Class}\n        """'
newline|'\n'
name|'return'
name|'Class'
op|'('
name|'crypto'
op|'.'
name|'load_certificate'
op|'('
name|'format'
op|','
name|'requestData'
op|')'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
DECL|variable|load
dedent|''
name|'load'
op|'='
name|'classmethod'
op|'('
name|'load'
op|')'
newline|'\n'
DECL|variable|_load
name|'_load'
op|'='
name|'load'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dumpPEM
name|'def'
name|'dumpPEM'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Dump this certificate to a PEM-format data string.\n\n        @rtype: C{str}\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'dump'
op|'('
name|'crypto'
op|'.'
name|'FILETYPE_PEM'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|loadPEM
dedent|''
name|'def'
name|'loadPEM'
op|'('
name|'Class'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Load a certificate from a PEM-format data string.\n\n        @rtype: C{Class}\n        """'
newline|'\n'
name|'return'
name|'Class'
op|'.'
name|'load'
op|'('
name|'data'
op|','
name|'crypto'
op|'.'
name|'FILETYPE_PEM'
op|')'
newline|'\n'
DECL|variable|loadPEM
dedent|''
name|'loadPEM'
op|'='
name|'classmethod'
op|'('
name|'loadPEM'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|peerFromTransport
name|'def'
name|'peerFromTransport'
op|'('
name|'Class'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the certificate for the remote end of the given transport.\n\n        @type: L{ISystemHandle}\n        @rtype: C{Class}\n\n        @raise: L{CertificateError}, if the given transport does not have a peer\n        certificate.\n        """'
newline|'\n'
name|'return'
name|'_handleattrhelper'
op|'('
name|'Class'
op|','
name|'transport'
op|','
string|"'peer'"
op|')'
newline|'\n'
DECL|variable|peerFromTransport
dedent|''
name|'peerFromTransport'
op|'='
name|'classmethod'
op|'('
name|'peerFromTransport'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|hostFromTransport
name|'def'
name|'hostFromTransport'
op|'('
name|'Class'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the certificate for the local end of the given transport.\n\n        @param transport: an L{ISystemHandle} provider; the transport we will\n\n        @rtype: C{Class}\n\n        @raise: L{CertificateError}, if the given transport does not have a host\n        certificate.\n        """'
newline|'\n'
name|'return'
name|'_handleattrhelper'
op|'('
name|'Class'
op|','
name|'transport'
op|','
string|"'host'"
op|')'
newline|'\n'
DECL|variable|hostFromTransport
dedent|''
name|'hostFromTransport'
op|'='
name|'classmethod'
op|'('
name|'hostFromTransport'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPublicKey
name|'def'
name|'getPublicKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the public key for this certificate.\n\n        @rtype: L{PublicKey}\n        """'
newline|'\n'
name|'return'
name|'PublicKey'
op|'('
name|'self'
op|'.'
name|'original'
op|'.'
name|'get_pubkey'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dump
dedent|''
name|'def'
name|'dump'
op|'('
name|'self'
op|','
name|'format'
op|'='
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'crypto'
op|'.'
name|'dump_certificate'
op|'('
name|'format'
op|','
name|'self'
op|'.'
name|'original'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|serialNumber
dedent|''
name|'def'
name|'serialNumber'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve the serial number of this certificate.\n\n        @rtype: C{int}\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'original'
op|'.'
name|'get_serial_number'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|digest
dedent|''
name|'def'
name|'digest'
op|'('
name|'self'
op|','
name|'method'
op|'='
string|"'md5'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a digest hash of this certificate using the specified hash\n        algorithm.\n\n        @param method: One of C{\'md5\'} or C{\'sha\'}.\n        @rtype: C{str}\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'original'
op|'.'
name|'digest'
op|'('
name|'method'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_inspect
dedent|''
name|'def'
name|'_inspect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
op|'['
string|"'Certificate For Subject:'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'getSubject'
op|'('
op|')'
op|'.'
name|'inspect'
op|'('
op|')'
op|','
nl|'\n'
string|"'\\nIssuer:'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'getIssuer'
op|'('
op|')'
op|'.'
name|'inspect'
op|'('
op|')'
op|','
nl|'\n'
string|"'\\nSerial Number: %d'"
op|'%'
name|'self'
op|'.'
name|'serialNumber'
op|'('
op|')'
op|','
nl|'\n'
string|"'Digest: %s'"
op|'%'
name|'self'
op|'.'
name|'digest'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|inspect
dedent|''
name|'def'
name|'inspect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a multi-line, human-readable representation of this\n        Certificate, including information about the subject, issuer, and\n        public key.\n        """'
newline|'\n'
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
op|'('
name|'self'
op|'.'
name|'_inspect'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'getPublicKey'
op|'('
op|')'
op|'.'
name|'inspect'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getIssuer
dedent|''
name|'def'
name|'getIssuer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve the issuer of this certificate.\n\n        @rtype: L{DistinguishedName}\n        @return: A copy of the issuer of this certificate.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_copyName'
op|'('
string|"'issuer'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|options
dedent|''
name|'def'
name|'options'
op|'('
name|'self'
op|','
op|'*'
name|'authorities'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
string|"'Possible, but doubtful we need this yet'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CertificateRequest
dedent|''
dedent|''
name|'class'
name|'CertificateRequest'
op|'('
name|'CertBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An x509 certificate request.\n\n    Certificate requests are given to certificate authorities to be signed and\n    returned resulting in an actual certificate.\n    """'
newline|'\n'
DECL|member|load
name|'def'
name|'load'
op|'('
name|'Class'
op|','
name|'requestData'
op|','
name|'requestFormat'
op|'='
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'crypto'
op|'.'
name|'load_certificate_request'
op|'('
name|'requestFormat'
op|','
name|'requestData'
op|')'
newline|'\n'
name|'dn'
op|'='
name|'DistinguishedName'
op|'('
op|')'
newline|'\n'
name|'dn'
op|'.'
name|'_copyFrom'
op|'('
name|'req'
op|'.'
name|'get_subject'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'req'
op|'.'
name|'verify'
op|'('
name|'req'
op|'.'
name|'get_pubkey'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'VerifyError'
op|'('
string|'"Can\'t verify that request for %r is self-signed."'
op|'%'
op|'('
name|'dn'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'Class'
op|'('
name|'req'
op|')'
newline|'\n'
DECL|variable|load
dedent|''
name|'load'
op|'='
name|'classmethod'
op|'('
name|'load'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dump
name|'def'
name|'dump'
op|'('
name|'self'
op|','
name|'format'
op|'='
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'crypto'
op|'.'
name|'dump_certificate_request'
op|'('
name|'format'
op|','
name|'self'
op|'.'
name|'original'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PrivateCertificate
dedent|''
dedent|''
name|'class'
name|'PrivateCertificate'
op|'('
name|'Certificate'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An x509 certificate and private key.\n    """'
newline|'\n'
DECL|member|__repr__
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Certificate'
op|'.'
name|'__repr__'
op|'('
name|'self'
op|')'
op|'+'
string|"' with '"
op|'+'
name|'repr'
op|'('
name|'self'
op|'.'
name|'privateKey'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_setPrivateKey
dedent|''
name|'def'
name|'_setPrivateKey'
op|'('
name|'self'
op|','
name|'privateKey'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'privateKey'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'getPublicKey'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'VerifyError'
op|'('
nl|'\n'
string|'"Certificate public and private keys do not match."'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'privateKey'
op|'='
name|'privateKey'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|newCertificate
dedent|''
name|'def'
name|'newCertificate'
op|'('
name|'self'
op|','
name|'newCertData'
op|','
name|'format'
op|'='
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new L{PrivateCertificate} from the given certificate data and\n        this instance\'s private key.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'load'
op|'('
name|'newCertData'
op|','
name|'self'
op|'.'
name|'privateKey'
op|','
name|'format'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|load
dedent|''
name|'def'
name|'load'
op|'('
name|'Class'
op|','
name|'data'
op|','
name|'privateKey'
op|','
name|'format'
op|'='
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Class'
op|'.'
name|'_load'
op|'('
name|'data'
op|','
name|'format'
op|')'
op|'.'
name|'_setPrivateKey'
op|'('
name|'privateKey'
op|')'
newline|'\n'
DECL|variable|load
dedent|''
name|'load'
op|'='
name|'classmethod'
op|'('
name|'load'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|inspect
name|'def'
name|'inspect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
op|'['
name|'Certificate'
op|'.'
name|'_inspect'
op|'('
name|'self'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'privateKey'
op|'.'
name|'inspect'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dumpPEM
dedent|''
name|'def'
name|'dumpPEM'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Dump both public and private parts of a private certificate to\n        PEM-format data.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'dump'
op|'('
name|'crypto'
op|'.'
name|'FILETYPE_PEM'
op|')'
op|'+'
name|'self'
op|'.'
name|'privateKey'
op|'.'
name|'dump'
op|'('
name|'crypto'
op|'.'
name|'FILETYPE_PEM'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|loadPEM
dedent|''
name|'def'
name|'loadPEM'
op|'('
name|'Class'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Load both private and public parts of a private certificate from a\n        chunk of PEM-format data.\n        """'
newline|'\n'
name|'return'
name|'Class'
op|'.'
name|'load'
op|'('
name|'data'
op|','
name|'KeyPair'
op|'.'
name|'load'
op|'('
name|'data'
op|','
name|'crypto'
op|'.'
name|'FILETYPE_PEM'
op|')'
op|','
nl|'\n'
name|'crypto'
op|'.'
name|'FILETYPE_PEM'
op|')'
newline|'\n'
DECL|variable|loadPEM
dedent|''
name|'loadPEM'
op|'='
name|'classmethod'
op|'('
name|'loadPEM'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fromCertificateAndKeyPair
name|'def'
name|'fromCertificateAndKeyPair'
op|'('
name|'Class'
op|','
name|'certificateInstance'
op|','
name|'privateKey'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'privcert'
op|'='
name|'Class'
op|'('
name|'certificateInstance'
op|'.'
name|'original'
op|')'
newline|'\n'
name|'return'
name|'privcert'
op|'.'
name|'_setPrivateKey'
op|'('
name|'privateKey'
op|')'
newline|'\n'
DECL|variable|fromCertificateAndKeyPair
dedent|''
name|'fromCertificateAndKeyPair'
op|'='
name|'classmethod'
op|'('
name|'fromCertificateAndKeyPair'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|options
name|'def'
name|'options'
op|'('
name|'self'
op|','
op|'*'
name|'authorities'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'options'
op|'='
name|'dict'
op|'('
name|'privateKey'
op|'='
name|'self'
op|'.'
name|'privateKey'
op|'.'
name|'original'
op|','
nl|'\n'
name|'certificate'
op|'='
name|'self'
op|'.'
name|'original'
op|')'
newline|'\n'
name|'if'
name|'authorities'
op|':'
newline|'\n'
indent|'            '
name|'options'
op|'.'
name|'update'
op|'('
name|'dict'
op|'('
name|'verify'
op|'='
name|'True'
op|','
nl|'\n'
name|'requireCertificate'
op|'='
name|'True'
op|','
nl|'\n'
name|'caCerts'
op|'='
op|'['
name|'auth'
op|'.'
name|'original'
name|'for'
name|'auth'
name|'in'
name|'authorities'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'OpenSSLCertificateOptions'
op|'('
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|certificateRequest
dedent|''
name|'def'
name|'certificateRequest'
op|'('
name|'self'
op|','
name|'format'
op|'='
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|','
nl|'\n'
name|'digestAlgorithm'
op|'='
string|"'md5'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'privateKey'
op|'.'
name|'certificateRequest'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getSubject'
op|'('
op|')'
op|','
nl|'\n'
name|'format'
op|','
nl|'\n'
name|'digestAlgorithm'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|signCertificateRequest
dedent|''
name|'def'
name|'signCertificateRequest'
op|'('
name|'self'
op|','
nl|'\n'
name|'requestData'
op|','
nl|'\n'
name|'verifyDNCallback'
op|','
nl|'\n'
name|'serialNumber'
op|','
nl|'\n'
name|'requestFormat'
op|'='
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|','
nl|'\n'
name|'certificateFormat'
op|'='
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'issuer'
op|'='
name|'self'
op|'.'
name|'getSubject'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'privateKey'
op|'.'
name|'signCertificateRequest'
op|'('
nl|'\n'
name|'issuer'
op|','
nl|'\n'
name|'requestData'
op|','
nl|'\n'
name|'verifyDNCallback'
op|','
nl|'\n'
name|'serialNumber'
op|','
nl|'\n'
name|'requestFormat'
op|','
nl|'\n'
name|'certificateFormat'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|signRequestObject
dedent|''
name|'def'
name|'signRequestObject'
op|'('
name|'self'
op|','
name|'certificateRequest'
op|','
name|'serialNumber'
op|','
nl|'\n'
name|'secondsToExpiry'
op|'='
number|'60'
op|'*'
number|'60'
op|'*'
number|'24'
op|'*'
number|'365'
op|','
comment|'# One year'
nl|'\n'
name|'digestAlgorithm'
op|'='
string|"'md5'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'privateKey'
op|'.'
name|'signRequestObject'
op|'('
name|'self'
op|'.'
name|'getSubject'
op|'('
op|')'
op|','
nl|'\n'
name|'certificateRequest'
op|','
nl|'\n'
name|'serialNumber'
op|','
nl|'\n'
name|'secondsToExpiry'
op|','
nl|'\n'
name|'digestAlgorithm'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PublicKey
dedent|''
dedent|''
name|'class'
name|'PublicKey'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'osslpkey'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'original'
op|'='
name|'osslpkey'
newline|'\n'
name|'req1'
op|'='
name|'crypto'
op|'.'
name|'X509Req'
op|'('
op|')'
newline|'\n'
name|'req1'
op|'.'
name|'set_pubkey'
op|'('
name|'osslpkey'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_emptyReq'
op|'='
name|'crypto'
op|'.'
name|'dump_certificate_request'
op|'('
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|','
name|'req1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|matches
dedent|''
name|'def'
name|'matches'
op|'('
name|'self'
op|','
name|'otherKey'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_emptyReq'
op|'=='
name|'otherKey'
op|'.'
name|'_emptyReq'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# XXX This could be a useful method, but sometimes it triggers a segfault,'
nl|'\n'
comment|"# so we'll steer clear for now."
nl|'\n'
comment|'#     def verifyCertificate(self, certificate):'
nl|'\n'
comment|'#         """'
nl|'\n'
comment|'#         returns None, or raises a VerifyError exception if the certificate'
nl|'\n'
comment|'#         could not be verified.'
nl|'\n'
comment|'#         """'
nl|'\n'
comment|'#         if not certificate.original.verify(self.original):'
nl|'\n'
comment|'#             raise VerifyError("We didn\'t sign that certificate.")'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<%s %s>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
name|'self'
op|'.'
name|'keyHash'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|keyHash
dedent|''
name|'def'
name|'keyHash'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        MD5 hex digest of signature on an empty certificate request with this\n        key.\n        """'
newline|'\n'
name|'return'
name|'md5'
op|'('
name|'self'
op|'.'
name|'_emptyReq'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|inspect
dedent|''
name|'def'
name|'inspect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'Public Key with Hash: %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'keyHash'
op|'('
op|')'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|KeyPair
dedent|''
dedent|''
name|'class'
name|'KeyPair'
op|'('
name|'PublicKey'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|load
indent|'    '
name|'def'
name|'load'
op|'('
name|'Class'
op|','
name|'data'
op|','
name|'format'
op|'='
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Class'
op|'('
name|'crypto'
op|'.'
name|'load_privatekey'
op|'('
name|'format'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
DECL|variable|load
dedent|''
name|'load'
op|'='
name|'classmethod'
op|'('
name|'load'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dump
name|'def'
name|'dump'
op|'('
name|'self'
op|','
name|'format'
op|'='
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'crypto'
op|'.'
name|'dump_privatekey'
op|'('
name|'format'
op|','
name|'self'
op|'.'
name|'original'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'dump'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__setstate__
dedent|''
name|'def'
name|'__setstate__'
op|'('
name|'self'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__init__'
op|'('
name|'crypto'
op|'.'
name|'load_privatekey'
op|'('
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|','
name|'state'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|inspect
dedent|''
name|'def'
name|'inspect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'self'
op|'.'
name|'original'
op|'.'
name|'type'
op|'('
op|')'
newline|'\n'
name|'if'
name|'t'
op|'=='
name|'crypto'
op|'.'
name|'TYPE_RSA'
op|':'
newline|'\n'
indent|'            '
name|'ts'
op|'='
string|"'RSA'"
newline|'\n'
dedent|''
name|'elif'
name|'t'
op|'=='
name|'crypto'
op|'.'
name|'TYPE_DSA'
op|':'
newline|'\n'
indent|'            '
name|'ts'
op|'='
string|"'DSA'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'ts'
op|'='
string|"'(Unknown Type!)'"
newline|'\n'
dedent|''
name|'L'
op|'='
op|'('
name|'self'
op|'.'
name|'original'
op|'.'
name|'bits'
op|'('
op|')'
op|','
name|'ts'
op|','
name|'self'
op|'.'
name|'keyHash'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
string|"'%s-bit %s Key Pair with Hash: %s'"
op|'%'
name|'L'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|generate
dedent|''
name|'def'
name|'generate'
op|'('
name|'Class'
op|','
name|'kind'
op|'='
name|'crypto'
op|'.'
name|'TYPE_RSA'
op|','
name|'size'
op|'='
number|'1024'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pkey'
op|'='
name|'crypto'
op|'.'
name|'PKey'
op|'('
op|')'
newline|'\n'
name|'pkey'
op|'.'
name|'generate_key'
op|'('
name|'kind'
op|','
name|'size'
op|')'
newline|'\n'
name|'return'
name|'Class'
op|'('
name|'pkey'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|newCertificate
dedent|''
name|'def'
name|'newCertificate'
op|'('
name|'self'
op|','
name|'newCertData'
op|','
name|'format'
op|'='
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'PrivateCertificate'
op|'.'
name|'load'
op|'('
name|'newCertData'
op|','
name|'self'
op|','
name|'format'
op|')'
newline|'\n'
DECL|variable|generate
dedent|''
name|'generate'
op|'='
name|'classmethod'
op|'('
name|'generate'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|requestObject
name|'def'
name|'requestObject'
op|'('
name|'self'
op|','
name|'distinguishedName'
op|','
name|'digestAlgorithm'
op|'='
string|"'md5'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'crypto'
op|'.'
name|'X509Req'
op|'('
op|')'
newline|'\n'
name|'req'
op|'.'
name|'set_pubkey'
op|'('
name|'self'
op|'.'
name|'original'
op|')'
newline|'\n'
name|'distinguishedName'
op|'.'
name|'_copyInto'
op|'('
name|'req'
op|'.'
name|'get_subject'
op|'('
op|')'
op|')'
newline|'\n'
name|'req'
op|'.'
name|'sign'
op|'('
name|'self'
op|'.'
name|'original'
op|','
name|'digestAlgorithm'
op|')'
newline|'\n'
name|'return'
name|'CertificateRequest'
op|'('
name|'req'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|certificateRequest
dedent|''
name|'def'
name|'certificateRequest'
op|'('
name|'self'
op|','
name|'distinguishedName'
op|','
nl|'\n'
name|'format'
op|'='
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|','
nl|'\n'
name|'digestAlgorithm'
op|'='
string|"'md5'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a certificate request signed with this key.\n\n        @return: a string, formatted according to the \'format\' argument.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'requestObject'
op|'('
name|'distinguishedName'
op|','
name|'digestAlgorithm'
op|')'
op|'.'
name|'dump'
op|'('
name|'format'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|signCertificateRequest
dedent|''
name|'def'
name|'signCertificateRequest'
op|'('
name|'self'
op|','
nl|'\n'
name|'issuerDistinguishedName'
op|','
nl|'\n'
name|'requestData'
op|','
nl|'\n'
name|'verifyDNCallback'
op|','
nl|'\n'
name|'serialNumber'
op|','
nl|'\n'
name|'requestFormat'
op|'='
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|','
nl|'\n'
name|'certificateFormat'
op|'='
name|'crypto'
op|'.'
name|'FILETYPE_ASN1'
op|','
nl|'\n'
name|'secondsToExpiry'
op|'='
number|'60'
op|'*'
number|'60'
op|'*'
number|'24'
op|'*'
number|'365'
op|','
comment|'# One year'
nl|'\n'
name|'digestAlgorithm'
op|'='
string|"'md5'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a blob of certificate request data and a certificate authority\'s\n        DistinguishedName, return a blob of signed certificate data.\n\n        If verifyDNCallback returns a Deferred, I will return a Deferred which\n        fires the data when that Deferred has completed.\n        """'
newline|'\n'
name|'hlreq'
op|'='
name|'CertificateRequest'
op|'.'
name|'load'
op|'('
name|'requestData'
op|','
name|'requestFormat'
op|')'
newline|'\n'
nl|'\n'
name|'dn'
op|'='
name|'hlreq'
op|'.'
name|'getSubject'
op|'('
op|')'
newline|'\n'
name|'vval'
op|'='
name|'verifyDNCallback'
op|'('
name|'dn'
op|')'
newline|'\n'
nl|'\n'
DECL|function|verified
name|'def'
name|'verified'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'value'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'VerifyError'
op|'('
string|'"DN callback %r rejected request DN %r"'
op|'%'
op|'('
name|'verifyDNCallback'
op|','
name|'dn'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'signRequestObject'
op|'('
name|'issuerDistinguishedName'
op|','
name|'hlreq'
op|','
nl|'\n'
name|'serialNumber'
op|','
name|'secondsToExpiry'
op|','
name|'digestAlgorithm'
op|')'
op|'.'
name|'dump'
op|'('
name|'certificateFormat'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'vval'
op|','
name|'Deferred'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'vval'
op|'.'
name|'addCallback'
op|'('
name|'verified'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'verified'
op|'('
name|'vval'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|signRequestObject
dedent|''
dedent|''
name|'def'
name|'signRequestObject'
op|'('
name|'self'
op|','
nl|'\n'
name|'issuerDistinguishedName'
op|','
nl|'\n'
name|'requestObject'
op|','
nl|'\n'
name|'serialNumber'
op|','
nl|'\n'
name|'secondsToExpiry'
op|'='
number|'60'
op|'*'
number|'60'
op|'*'
number|'24'
op|'*'
number|'365'
op|','
comment|'# One year'
nl|'\n'
name|'digestAlgorithm'
op|'='
string|"'md5'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sign a CertificateRequest instance, returning a Certificate instance.\n        """'
newline|'\n'
name|'req'
op|'='
name|'requestObject'
op|'.'
name|'original'
newline|'\n'
name|'dn'
op|'='
name|'requestObject'
op|'.'
name|'getSubject'
op|'('
op|')'
newline|'\n'
name|'cert'
op|'='
name|'crypto'
op|'.'
name|'X509'
op|'('
op|')'
newline|'\n'
name|'issuerDistinguishedName'
op|'.'
name|'_copyInto'
op|'('
name|'cert'
op|'.'
name|'get_issuer'
op|'('
op|')'
op|')'
newline|'\n'
name|'cert'
op|'.'
name|'set_subject'
op|'('
name|'req'
op|'.'
name|'get_subject'
op|'('
op|')'
op|')'
newline|'\n'
name|'cert'
op|'.'
name|'set_pubkey'
op|'('
name|'req'
op|'.'
name|'get_pubkey'
op|'('
op|')'
op|')'
newline|'\n'
name|'cert'
op|'.'
name|'gmtime_adj_notBefore'
op|'('
number|'0'
op|')'
newline|'\n'
name|'cert'
op|'.'
name|'gmtime_adj_notAfter'
op|'('
name|'secondsToExpiry'
op|')'
newline|'\n'
name|'cert'
op|'.'
name|'set_serial_number'
op|'('
name|'serialNumber'
op|')'
newline|'\n'
name|'cert'
op|'.'
name|'sign'
op|'('
name|'self'
op|'.'
name|'original'
op|','
name|'digestAlgorithm'
op|')'
newline|'\n'
name|'return'
name|'Certificate'
op|'('
name|'cert'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|selfSignedCert
dedent|''
name|'def'
name|'selfSignedCert'
op|'('
name|'self'
op|','
name|'serialNumber'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dn'
op|'='
name|'DN'
op|'('
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'return'
name|'PrivateCertificate'
op|'.'
name|'fromCertificateAndKeyPair'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'signRequestObject'
op|'('
name|'dn'
op|','
name|'self'
op|'.'
name|'requestObject'
op|'('
name|'dn'
op|')'
op|','
name|'serialNumber'
op|')'
op|','
nl|'\n'
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|OpenSSLCertificateOptions
dedent|''
dedent|''
name|'class'
name|'OpenSSLCertificateOptions'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A factory for SSL context objects for both SSL servers and clients.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|_context
name|'_context'
op|'='
name|'None'
newline|'\n'
comment|"# Older versions of PyOpenSSL didn't provide OP_ALL.  Fudge it here, just in case."
nl|'\n'
DECL|variable|_OP_ALL
name|'_OP_ALL'
op|'='
name|'getattr'
op|'('
name|'SSL'
op|','
string|"'OP_ALL'"
op|','
number|'0x0000FFFF'
op|')'
newline|'\n'
comment|'# OP_NO_TICKET is not (yet) exposed by PyOpenSSL'
nl|'\n'
DECL|variable|_OP_NO_TICKET
name|'_OP_NO_TICKET'
op|'='
number|'0x00004000'
newline|'\n'
nl|'\n'
DECL|variable|method
name|'method'
op|'='
name|'SSL'
op|'.'
name|'TLSv1_METHOD'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
nl|'\n'
name|'privateKey'
op|'='
name|'None'
op|','
nl|'\n'
name|'certificate'
op|'='
name|'None'
op|','
nl|'\n'
name|'method'
op|'='
name|'None'
op|','
nl|'\n'
name|'verify'
op|'='
name|'False'
op|','
nl|'\n'
name|'caCerts'
op|'='
name|'None'
op|','
nl|'\n'
name|'verifyDepth'
op|'='
number|'9'
op|','
nl|'\n'
name|'requireCertificate'
op|'='
name|'True'
op|','
nl|'\n'
name|'verifyOnce'
op|'='
name|'True'
op|','
nl|'\n'
name|'enableSingleUseKeys'
op|'='
name|'True'
op|','
nl|'\n'
name|'enableSessions'
op|'='
name|'True'
op|','
nl|'\n'
name|'fixBrokenPeers'
op|'='
name|'False'
op|','
nl|'\n'
name|'enableSessionTickets'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create an OpenSSL context SSL connection context factory.\n\n        @param privateKey: A PKey object holding the private key.\n\n        @param certificate: An X509 object holding the certificate.\n\n        @param method: The SSL protocol to use, one of SSLv23_METHOD,\n        SSLv2_METHOD, SSLv3_METHOD, TLSv1_METHOD.  Defaults to TLSv1_METHOD.\n\n        @param verify: If True, verify certificates received from the peer and\n        fail the handshake if verification fails.  Otherwise, allow anonymous\n        sessions and sessions with certificates which fail validation.  By\n        default this is False.\n\n        @param caCerts: List of certificate authority certificates to\n        send to the client when requesting a certificate.  Only used if verify\n        is True, and if verify is True, either this must be specified or\n        caCertsFile must be given.  Since verify is False by default,\n        this is None by default.\n\n        @param verifyDepth: Depth in certificate chain down to which to verify.\n        If unspecified, use the underlying default (9).\n\n        @param requireCertificate: If True, do not allow anonymous sessions.\n\n        @param verifyOnce: If True, do not re-verify the certificate\n        on session resumption.\n\n        @param enableSingleUseKeys: If True, generate a new key whenever\n        ephemeral DH parameters are used to prevent small subgroup attacks.\n\n        @param enableSessions: If True, set a session ID on each context.  This\n        allows a shortened handshake to be used when a known client reconnects.\n\n        @param fixBrokenPeers: If True, enable various non-spec protocol fixes\n        for broken SSL implementations.  This should be entirely safe,\n        according to the OpenSSL documentation, but YMMV.  This option is now\n        off by default, because it causes problems with connections between\n        peers using OpenSSL 0.9.8a.\n\n        @param enableSessionTickets: If True, enable session ticket extension\n        for session resumption per RFC 5077. Note there is no support for\n        controlling session tickets. This option is off by default, as some\n        server implementations don\'t correctly process incoming empty session\n        ticket extensions in the hello.\n        """'
newline|'\n'
nl|'\n'
name|'assert'
op|'('
name|'privateKey'
name|'is'
name|'None'
op|')'
op|'=='
op|'('
name|'certificate'
name|'is'
name|'None'
op|')'
op|','
string|'"Specify neither or both of privateKey and certificate"'
newline|'\n'
name|'self'
op|'.'
name|'privateKey'
op|'='
name|'privateKey'
newline|'\n'
name|'self'
op|'.'
name|'certificate'
op|'='
name|'certificate'
newline|'\n'
name|'if'
name|'method'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'method'
op|'='
name|'method'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'verify'
op|'='
name|'verify'
newline|'\n'
name|'assert'
op|'('
op|'('
name|'verify'
name|'and'
name|'caCerts'
op|')'
name|'or'
nl|'\n'
op|'('
name|'not'
name|'verify'
op|')'
op|')'
op|','
string|'"Specify client CA certificate information if and only if enabling certificate verification"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'caCerts'
op|'='
name|'caCerts'
newline|'\n'
name|'self'
op|'.'
name|'verifyDepth'
op|'='
name|'verifyDepth'
newline|'\n'
name|'self'
op|'.'
name|'requireCertificate'
op|'='
name|'requireCertificate'
newline|'\n'
name|'self'
op|'.'
name|'verifyOnce'
op|'='
name|'verifyOnce'
newline|'\n'
name|'self'
op|'.'
name|'enableSingleUseKeys'
op|'='
name|'enableSingleUseKeys'
newline|'\n'
name|'self'
op|'.'
name|'enableSessions'
op|'='
name|'enableSessions'
newline|'\n'
name|'self'
op|'.'
name|'fixBrokenPeers'
op|'='
name|'fixBrokenPeers'
newline|'\n'
name|'self'
op|'.'
name|'enableSessionTickets'
op|'='
name|'enableSessionTickets'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'d'
op|'['
string|"'_context'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__setstate__
dedent|''
name|'def'
name|'__setstate__'
op|'('
name|'self'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__dict__'
op|'='
name|'state'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getContext
dedent|''
name|'def'
name|'getContext'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a SSL.Context object.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_context'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_context'
op|'='
name|'self'
op|'.'
name|'_makeContext'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_context'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_makeContext
dedent|''
name|'def'
name|'_makeContext'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctx'
op|'='
name|'SSL'
op|'.'
name|'Context'
op|'('
name|'self'
op|'.'
name|'method'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'certificate'
name|'is'
name|'not'
name|'None'
name|'and'
name|'self'
op|'.'
name|'privateKey'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'ctx'
op|'.'
name|'use_certificate'
op|'('
name|'self'
op|'.'
name|'certificate'
op|')'
newline|'\n'
name|'ctx'
op|'.'
name|'use_privatekey'
op|'('
name|'self'
op|'.'
name|'privateKey'
op|')'
newline|'\n'
comment|'# Sanity check'
nl|'\n'
name|'ctx'
op|'.'
name|'check_privatekey'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'verifyFlags'
op|'='
name|'SSL'
op|'.'
name|'VERIFY_NONE'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'verify'
op|':'
newline|'\n'
indent|'            '
name|'verifyFlags'
op|'='
name|'SSL'
op|'.'
name|'VERIFY_PEER'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'requireCertificate'
op|':'
newline|'\n'
indent|'                '
name|'verifyFlags'
op|'|='
name|'SSL'
op|'.'
name|'VERIFY_FAIL_IF_NO_PEER_CERT'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'verifyOnce'
op|':'
newline|'\n'
indent|'                '
name|'verifyFlags'
op|'|='
name|'SSL'
op|'.'
name|'VERIFY_CLIENT_ONCE'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'caCerts'
op|':'
newline|'\n'
indent|'                '
name|'store'
op|'='
name|'ctx'
op|'.'
name|'get_cert_store'
op|'('
op|')'
newline|'\n'
name|'for'
name|'cert'
name|'in'
name|'self'
op|'.'
name|'caCerts'
op|':'
newline|'\n'
indent|'                    '
name|'store'
op|'.'
name|'add_cert'
op|'('
name|'cert'
op|')'
newline|'\n'
nl|'\n'
comment|"# It'd be nice if pyOpenSSL let us pass None here for this behavior (as"
nl|'\n'
comment|'# the underlying OpenSSL API call allows NULL to be passed).  It'
nl|'\n'
comment|"# doesn't, so we'll supply a function which does the same thing."
nl|'\n'
DECL|function|_verifyCallback
dedent|''
dedent|''
dedent|''
name|'def'
name|'_verifyCallback'
op|'('
name|'conn'
op|','
name|'cert'
op|','
name|'errno'
op|','
name|'depth'
op|','
name|'preverify_ok'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'preverify_ok'
newline|'\n'
dedent|''
name|'ctx'
op|'.'
name|'set_verify'
op|'('
name|'verifyFlags'
op|','
name|'_verifyCallback'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'verifyDepth'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'ctx'
op|'.'
name|'set_verify_depth'
op|'('
name|'self'
op|'.'
name|'verifyDepth'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'enableSingleUseKeys'
op|':'
newline|'\n'
indent|'            '
name|'ctx'
op|'.'
name|'set_options'
op|'('
name|'SSL'
op|'.'
name|'OP_SINGLE_DH_USE'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'fixBrokenPeers'
op|':'
newline|'\n'
indent|'            '
name|'ctx'
op|'.'
name|'set_options'
op|'('
name|'self'
op|'.'
name|'_OP_ALL'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'enableSessions'
op|':'
newline|'\n'
indent|'            '
name|'sessionName'
op|'='
name|'md5'
op|'('
string|'"%s-%d"'
op|'%'
op|'('
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|','
name|'_sessionCounter'
op|'('
op|')'
op|')'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'ctx'
op|'.'
name|'set_session_id'
op|'('
name|'sessionName'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'enableSessionTickets'
op|':'
newline|'\n'
indent|'            '
name|'ctx'
op|'.'
name|'set_options'
op|'('
name|'self'
op|'.'
name|'_OP_NO_TICKET'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'ctx'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nInterface documentation.\n\nMaintainer: Itamar Shtull-Trauring\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'Interface'
op|','
name|'Attribute'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IAddress
name|'class'
name|'IAddress'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An address, e.g. a TCP C{(host, port)}.\n\n    Default implementations are in L{twisted.internet.address}.\n    """'
newline|'\n'
nl|'\n'
comment|'### Reactor Interfaces'
nl|'\n'
nl|'\n'
DECL|class|IConnector
dedent|''
name|'class'
name|'IConnector'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Object used to interface between connections and protocols.\n\n    Each L{IConnector} manages one connection.\n    """'
newline|'\n'
nl|'\n'
DECL|member|stopConnecting
name|'def'
name|'stopConnecting'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop attempting to connect.\n        """'
newline|'\n'
nl|'\n'
DECL|member|disconnect
dedent|''
name|'def'
name|'disconnect'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Disconnect regardless of the connection state.\n\n        If we are connected, disconnect, if we are trying to connect,\n        stop trying.\n        """'
newline|'\n'
nl|'\n'
DECL|member|connect
dedent|''
name|'def'
name|'connect'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to connect to remote address.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getDestination
dedent|''
name|'def'
name|'getDestination'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return destination this will try to connect to.\n\n        @return: An object which provides L{IAddress}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IResolverSimple
dedent|''
dedent|''
name|'class'
name|'IResolverSimple'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|getHostByName
indent|'    '
name|'def'
name|'getHostByName'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
op|'('
number|'1'
op|','
number|'3'
op|','
number|'11'
op|','
number|'45'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Resolve the domain name C{name} into an IP address.\n\n        @type name: C{str}\n        @type timeout: C{tuple}\n        @rtype: L{twisted.internet.defer.Deferred}\n        @return: The callback of the Deferred that is returned will be\n        passed a string that represents the IP address of the specified\n        name, or the errback will be called if the lookup times out.  If\n        multiple types of address records are associated with the name,\n        A6 records will be returned in preference to AAAA records, which\n        will be returned in preference to A records.  If there are multiple\n        records of the type to be returned, one will be selected at random.\n\n        @raise twisted.internet.defer.TimeoutError: Raised (asynchronously)\n        if the name cannot be resolved within the specified timeout period.\n        """'
newline|'\n'
nl|'\n'
DECL|class|IResolver
dedent|''
dedent|''
name|'class'
name|'IResolver'
op|'('
name|'IResolverSimple'
op|')'
op|':'
newline|'\n'
DECL|member|lookupRecord
indent|'    '
name|'def'
name|'lookupRecord'
op|'('
name|'name'
op|','
name|'cls'
op|','
name|'type'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the records associated with the given name\n        that are of the given type and in the given class.\n        """'
newline|'\n'
nl|'\n'
DECL|member|query
dedent|''
name|'def'
name|'query'
op|'('
name|'query'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Interpret and dispatch a query object to the appropriate\n        lookup* method.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupAddress
dedent|''
name|'def'
name|'lookupAddress'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the A records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupAddress6
dedent|''
name|'def'
name|'lookupAddress6'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup all the A6 records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupIPV6Address
dedent|''
name|'def'
name|'lookupIPV6Address'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup all the AAAA records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupMailExchange
dedent|''
name|'def'
name|'lookupMailExchange'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the MX records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupNameservers
dedent|''
name|'def'
name|'lookupNameservers'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the the NS records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupCanonicalName
dedent|''
name|'def'
name|'lookupCanonicalName'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the CNAME records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupMailBox
dedent|''
name|'def'
name|'lookupMailBox'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the MB records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupMailGroup
dedent|''
name|'def'
name|'lookupMailGroup'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the MG records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupMailRename
dedent|''
name|'def'
name|'lookupMailRename'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the MR records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupPointer
dedent|''
name|'def'
name|'lookupPointer'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the PTR records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupAuthority
dedent|''
name|'def'
name|'lookupAuthority'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the SOA records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupNull
dedent|''
name|'def'
name|'lookupNull'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the NULL records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupWellKnownServices
dedent|''
name|'def'
name|'lookupWellKnownServices'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the WKS records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupHostInfo
dedent|''
name|'def'
name|'lookupHostInfo'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the HINFO records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupMailboxInfo
dedent|''
name|'def'
name|'lookupMailboxInfo'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the MINFO records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupText
dedent|''
name|'def'
name|'lookupText'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the TXT records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupResponsibility
dedent|''
name|'def'
name|'lookupResponsibility'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the RP records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupAFSDatabase
dedent|''
name|'def'
name|'lookupAFSDatabase'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the AFSDB records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupService
dedent|''
name|'def'
name|'lookupService'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup the SRV records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupAllRecords
dedent|''
name|'def'
name|'lookupAllRecords'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup all records associated with C{name}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupZone
dedent|''
name|'def'
name|'lookupZone'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Perform a zone transfer for the given C{name}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IReactorArbitrary
dedent|''
dedent|''
name|'class'
name|'IReactorArbitrary'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|listenWith
indent|'    '
name|'def'
name|'listenWith'
op|'('
name|'portType'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Start an instance of the given C{portType} listening.\n\n        @type portType: type which implements L{IListeningPort}\n\n        @param portType: The object given by C{portType(*args, **kw)} will be\n                         started listening.\n\n        @return: an object which provides L{IListeningPort}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|connectWith
dedent|''
name|'def'
name|'connectWith'
op|'('
name|'connectorType'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Start an instance of the given C{connectorType} connecting.\n\n        @type connectorType: type which implements L{IConnector}\n\n        @param connectorType: The object given by C{connectorType(*args, **kw)}\n                              will be started connecting.\n\n        @return:  An object which provides L{IConnector}.\n        """'
newline|'\n'
nl|'\n'
DECL|class|IReactorTCP
dedent|''
dedent|''
name|'class'
name|'IReactorTCP'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|listenTCP
indent|'    '
name|'def'
name|'listenTCP'
op|'('
name|'port'
op|','
name|'factory'
op|','
name|'backlog'
op|'='
number|'50'
op|','
name|'interface'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connects a given protocol factory to the given numeric TCP/IP port.\n\n        @param port: a port number on which to listen\n\n        @param factory: a L{twisted.internet.protocol.ServerFactory} instance\n\n        @param backlog: size of the listen queue\n\n        @param interface: the hostname to bind to, defaults to \'\' (all)\n\n        @return: an object that provides L{IListeningPort}.\n\n        @raise CannotListenError: as defined here\n                                  L{twisted.internet.error.CannotListenError},\n                                  if it cannot listen on this port (e.g., it\n                                  cannot bind to the required port number)\n        """'
newline|'\n'
nl|'\n'
DECL|member|connectTCP
dedent|''
name|'def'
name|'connectTCP'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|','
name|'timeout'
op|'='
number|'30'
op|','
name|'bindAddress'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connect a TCP client.\n\n        @param host: a host name\n\n        @param port: a port number\n\n        @param factory: a L{twisted.internet.protocol.ClientFactory} instance\n\n        @param timeout: number of seconds to wait before assuming the\n                        connection has failed.\n\n        @param bindAddress: a (host, port) tuple of local address to bind\n                            to, or None.\n\n        @return: An object which provides L{IConnector}. This connector will\n                 call various callbacks on the factory when a connection is\n                 made, failed, or lost - see\n                 L{ClientFactory<twisted.internet.protocol.ClientFactory>}\n                 docs for details.\n        """'
newline|'\n'
nl|'\n'
DECL|class|IReactorSSL
dedent|''
dedent|''
name|'class'
name|'IReactorSSL'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|connectSSL
indent|'    '
name|'def'
name|'connectSSL'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|','
name|'contextFactory'
op|','
name|'timeout'
op|'='
number|'30'
op|','
name|'bindAddress'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connect a client Protocol to a remote SSL socket.\n\n        @param host: a host name\n\n        @param port: a port number\n\n        @param factory: a L{twisted.internet.protocol.ClientFactory} instance\n\n        @param contextFactory: a L{twisted.internet.ssl.ClientContextFactory} object.\n\n        @param timeout: number of seconds to wait before assuming the\n                        connection has failed.\n\n        @param bindAddress: a (host, port) tuple of local address to bind to,\n                            or C{None}.\n\n        @return: An object which provides L{IConnector}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|listenSSL
dedent|''
name|'def'
name|'listenSSL'
op|'('
name|'port'
op|','
name|'factory'
op|','
name|'contextFactory'
op|','
name|'backlog'
op|'='
number|'50'
op|','
name|'interface'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connects a given protocol factory to the given numeric TCP/IP port.\n        The connection is a SSL one, using contexts created by the context\n        factory.\n\n        @param port: a port number on which to listen\n\n        @param factory: a L{twisted.internet.protocol.ServerFactory} instance\n\n        @param contextFactory: a L{twisted.internet.ssl.ContextFactory} instance\n\n        @param backlog: size of the listen queue\n\n        @param interface: the hostname to bind to, defaults to \'\' (all)\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IReactorUNIX
dedent|''
dedent|''
name|'class'
name|'IReactorUNIX'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    UNIX socket methods.\n    """'
newline|'\n'
nl|'\n'
DECL|member|connectUNIX
name|'def'
name|'connectUNIX'
op|'('
name|'address'
op|','
name|'factory'
op|','
name|'timeout'
op|'='
number|'30'
op|','
name|'checkPID'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connect a client protocol to a UNIX socket.\n\n        @param address: a path to a unix socket on the filesystem.\n\n        @param factory: a L{twisted.internet.protocol.ClientFactory} instance\n\n        @param timeout: number of seconds to wait before assuming the connection\n            has failed.\n\n        @param checkPID: if True, check for a pid file to verify that a server\n            is listening.\n\n        @return: An object which provides L{IConnector}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|listenUNIX
dedent|''
name|'def'
name|'listenUNIX'
op|'('
name|'address'
op|','
name|'factory'
op|','
name|'backlog'
op|'='
number|'50'
op|','
name|'mode'
op|'='
number|'0666'
op|','
name|'wantPID'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Listen on a UNIX socket.\n\n        @param address: a path to a unix socket on the filesystem.\n\n        @param factory: a L{twisted.internet.protocol.Factory} instance.\n\n        @param backlog: number of connections to allow in backlog.\n\n        @param mode: mode to set on the unix socket.  This parameter is\n            deprecated.  Permissions should be set on the directory which\n            contains the UNIX socket.\n\n        @param wantPID: if True, create a pidfile for the socket.\n\n        @return: An object which provides L{IListeningPort}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IReactorUNIXDatagram
dedent|''
dedent|''
name|'class'
name|'IReactorUNIXDatagram'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Datagram UNIX socket methods.\n    """'
newline|'\n'
nl|'\n'
DECL|member|connectUNIXDatagram
name|'def'
name|'connectUNIXDatagram'
op|'('
name|'address'
op|','
name|'protocol'
op|','
name|'maxPacketSize'
op|'='
number|'8192'
op|','
name|'mode'
op|'='
number|'0666'
op|','
name|'bindAddress'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connect a client protocol to a datagram UNIX socket.\n\n        @param address: a path to a unix socket on the filesystem.\n\n        @param protocol: a L{twisted.internet.protocol.ConnectedDatagramProtocol} instance\n\n        @param maxPacketSize: maximum packet size to accept\n\n        @param mode: mode to set on the unix socket.  This parameter is\n            deprecated.  Permissions should be set on the directory which\n            contains the UNIX socket.\n\n        @param bindAddress: address to bind to\n\n        @return: An object which provides L{IConnector}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|listenUNIXDatagram
dedent|''
name|'def'
name|'listenUNIXDatagram'
op|'('
name|'address'
op|','
name|'protocol'
op|','
name|'maxPacketSize'
op|'='
number|'8192'
op|','
name|'mode'
op|'='
number|'0666'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Listen on a datagram UNIX socket.\n\n        @param address: a path to a unix socket on the filesystem.\n\n        @param protocol: a L{twisted.internet.protocol.DatagramProtocol} instance.\n\n        @param maxPacketSize: maximum packet size to accept\n\n        @param mode: mode to set on the unix socket.  This parameter is\n            deprecated.  Permissions should be set on the directory which\n            contains the UNIX socket.\n\n        @return: An object which provides L{IListeningPort}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IReactorUDP
dedent|''
dedent|''
name|'class'
name|'IReactorUDP'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    UDP socket methods.\n    """'
newline|'\n'
nl|'\n'
DECL|member|listenUDP
name|'def'
name|'listenUDP'
op|'('
name|'port'
op|','
name|'protocol'
op|','
name|'interface'
op|'='
string|"''"
op|','
name|'maxPacketSize'
op|'='
number|'8192'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connects a given DatagramProtocol to the given numeric UDP port.\n\n        @return: object which provides L{IListeningPort}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IReactorMulticast
dedent|''
dedent|''
name|'class'
name|'IReactorMulticast'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    UDP socket methods that support multicast.\n\n    IMPORTANT: This is an experimental new interface. It may change\n    without backwards compatability. Suggestions are welcome.\n    """'
newline|'\n'
nl|'\n'
DECL|member|listenMulticast
name|'def'
name|'listenMulticast'
op|'('
name|'port'
op|','
name|'protocol'
op|','
name|'interface'
op|'='
string|"''"
op|','
name|'maxPacketSize'
op|'='
number|'8192'
op|','
nl|'\n'
name|'listenMultiple'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connects a given\n        L{DatagramProtocol<twisted.internet.protocol.DatagramProtocol>} to the\n        given numeric UDP port.\n\n        @param listenMultiple: boolean indicating whether multiple sockets can\n                               bind to same UDP port.\n\n        @returns: An object which provides L{IListeningPort}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IReactorProcess
dedent|''
dedent|''
name|'class'
name|'IReactorProcess'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|spawnProcess
indent|'    '
name|'def'
name|'spawnProcess'
op|'('
name|'processProtocol'
op|','
name|'executable'
op|','
name|'args'
op|'='
op|'('
op|')'
op|','
name|'env'
op|'='
op|'{'
op|'}'
op|','
name|'path'
op|'='
name|'None'
op|','
nl|'\n'
name|'uid'
op|'='
name|'None'
op|','
name|'gid'
op|'='
name|'None'
op|','
name|'usePTY'
op|'='
number|'0'
op|','
name|'childFDs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Spawn a process, with a process protocol.\n\n        @type processProtocol: L{IProcessProtocol} provider\n        @param processProtocol: An object which will be notified of all\n            events related to the created process.\n\n        @param executable: the file name to spawn - the full path should be\n                           used.\n\n        @param args: the command line arguments to pass to the process; a\n                     sequence of strings. The first string should be the\n                     executable\'s name.\n\n        @type env: a C{dict} mapping C{str} to C{str}, or C{None}.\n        @param env: the environment variables to pass to the child process. The\n                    resulting behavior varies between platforms. If\n                      - C{env} is not set:\n                        - On POSIX: pass an empty environment.\n                        - On Windows: pass C{os.environ}.\n                      - C{env} is C{None}:\n                        - On POSIX: pass C{os.environ}.\n                        - On Windows: pass C{os.environ}.\n                      - C{env} is a C{dict}:\n                        - On POSIX: pass the key/value pairs in C{env} as the\n                          complete environment.\n                        - On Windows: update C{os.environ} with the key/value\n                          pairs in the C{dict} before passing it. As a\n                          consequence of U{bug #1640\n                          <http://twistedmatrix.com/trac/ticket/1640>}, passing\n                          keys with empty values in an effort to unset\n                          environment variables I{won\'t} unset them.\n\n        @param path: the path to run the subprocess in - defaults to the\n                     current directory.\n\n        @param uid: user ID to run the subprocess as. (Only available on\n                    POSIX systems.)\n\n        @param gid: group ID to run the subprocess as. (Only available on\n                    POSIX systems.)\n\n        @param usePTY: if true, run this process in a pseudo-terminal.\n                       optionally a tuple of C{(masterfd, slavefd, ttyname)},\n                       in which case use those file descriptors.\n                       (Not available on all systems.)\n\n        @param childFDs: A dictionary mapping file descriptors in the new child\n                         process to an integer or to the string \'r\' or \'w\'.\n\n                         If the value is an integer, it specifies a file\n                         descriptor in the parent process which will be mapped\n                         to a file descriptor (specified by the key) in the\n                         child process.  This is useful for things like inetd\n                         and shell-like file redirection.\n\n                         If it is the string \'r\', a pipe will be created and\n                         attached to the child at that file descriptor: the\n                         child will be able to write to that file descriptor\n                         and the parent will receive read notification via the\n                         L{IProcessProtocol.childDataReceived} callback.  This\n                         is useful for the child\'s stdout and stderr.\n\n                         If it is the string \'w\', similar setup to the previous\n                         case will occur, with the pipe being readable by the\n                         child instead of writeable.  The parent process can\n                         write to that file descriptor using\n                         L{IProcessTransport.writeToChild}.  This is useful for\n                         the child\'s stdin.\n\n                         If childFDs is not passed, the default behaviour is to\n                         use a mapping that opens the usual stdin/stdout/stderr\n                         pipes.\n\n        @see: L{twisted.internet.protocol.ProcessProtocol}\n\n        @return: An object which provides L{IProcessTransport}.\n\n        @raise OSError: Raised with errno C{EAGAIN} or C{ENOMEM} if there are\n                        insufficient system resources to create a new process.\n        """'
newline|'\n'
nl|'\n'
DECL|class|IReactorTime
dedent|''
dedent|''
name|'class'
name|'IReactorTime'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Time methods that a Reactor should implement.\n    """'
newline|'\n'
nl|'\n'
DECL|member|seconds
name|'def'
name|'seconds'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the current time in seconds.\n\n        @return: A number-like object of some sort.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callLater
dedent|''
name|'def'
name|'callLater'
op|'('
name|'delay'
op|','
name|'callable'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call a function later.\n\n        @type delay:  C{float}\n        @param delay: the number of seconds to wait.\n\n        @param callable: the callable object to call later.\n\n        @param args: the arguments to call it with.\n\n        @param kw: the keyword arguments to call it with.\n\n        @return: An object which provides L{IDelayedCall} and can be used to\n                 cancel the scheduled call, by calling its C{cancel()} method.\n                 It also may be rescheduled by calling its C{delay()} or\n                 C{reset()} methods.\n        """'
newline|'\n'
nl|'\n'
DECL|member|cancelCallLater
dedent|''
name|'def'
name|'cancelCallLater'
op|'('
name|'callID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This method is deprecated.\n\n        Cancel a call that would happen later.\n\n        @param callID: this is an opaque identifier returned from C{callLater}\n                       that will be used to cancel a specific call.\n\n        @raise ValueError: if the callID is not recognized.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getDelayedCalls
dedent|''
name|'def'
name|'getDelayedCalls'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve all currently scheduled delayed calls.\n\n        @return: A tuple of all L{IDelayedCall} providers representing all\n                 currently scheduled calls. This is everything that has been\n                 returned by C{callLater} but not yet called or canceled.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IDelayedCall
dedent|''
dedent|''
name|'class'
name|'IDelayedCall'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A scheduled call.\n\n    There are probably other useful methods we can add to this interface;\n    suggestions are welcome.\n    """'
newline|'\n'
nl|'\n'
DECL|member|getTime
name|'def'
name|'getTime'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get time when delayed call will happen.\n\n        @return: time in seconds since epoch (a float).\n        """'
newline|'\n'
nl|'\n'
DECL|member|cancel
dedent|''
name|'def'
name|'cancel'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Cancel the scheduled call.\n\n        @raises twisted.internet.error.AlreadyCalled: if the call has already\n            happened.\n        @raises twisted.internet.error.AlreadyCancelled: if the call has already\n            been cancelled.\n        """'
newline|'\n'
nl|'\n'
DECL|member|delay
dedent|''
name|'def'
name|'delay'
op|'('
name|'secondsLater'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delay the scheduled call.\n\n        @param secondsLater: how many seconds from its current firing time to delay\n\n        @raises twisted.internet.error.AlreadyCalled: if the call has already\n            happened.\n        @raises twisted.internet.error.AlreadyCancelled: if the call has already\n            been cancelled.\n        """'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'secondsFromNow'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reset the scheduled call\'s timer.\n\n        @param secondsFromNow: how many seconds from now it should fire,\n            equivalent to C{.cancel()} and then doing another\n            C{reactor.callLater(secondsLater, ...)}\n\n        @raises twisted.internet.error.AlreadyCalled: if the call has already\n            happened.\n        @raises twisted.internet.error.AlreadyCancelled: if the call has already\n            been cancelled.\n        """'
newline|'\n'
nl|'\n'
DECL|member|active
dedent|''
name|'def'
name|'active'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @return: True if this call is still active, False if it has been\n                 called or cancelled.\n        """'
newline|'\n'
nl|'\n'
DECL|class|IReactorThreads
dedent|''
dedent|''
name|'class'
name|'IReactorThreads'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Dispatch methods to be run in threads.\n\n    Internally, this should use a thread pool and dispatch methods to them.\n    """'
newline|'\n'
nl|'\n'
DECL|member|getThreadPool
name|'def'
name|'getThreadPool'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the threadpool used by L{callInThread}.  Create it first if\n        necessary.\n\n        @rtype: L{twisted.python.threadpool.ThreadPool}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callInThread
dedent|''
name|'def'
name|'callInThread'
op|'('
name|'callable'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run the callable object in a separate thread.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callFromThread
dedent|''
name|'def'
name|'callFromThread'
op|'('
name|'callable'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Cause a function to be executed by the reactor thread.\n\n        Use this method when you want to run a function in the reactor\'s thread\n        from another thread.  Calling L{callFromThread} should wake up the main\n        thread (where L{reactor.run()<reactor.run>} is executing) and run the\n        given callable in that thread.\n\n        If you\'re writing a multi-threaded application the C{callable} may need\n        to be thread safe, but this method doesn\'t require it as such. If you\n        want to call a function in the next mainloop iteration, but you\'re in\n        the same thread, use L{callLater} with a delay of 0.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|suggestThreadPoolSize
dedent|''
name|'def'
name|'suggestThreadPoolSize'
op|'('
name|'size'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Suggest the size of the internal threadpool used to dispatch functions\n        passed to L{callInThread}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IReactorCore
dedent|''
dedent|''
name|'class'
name|'IReactorCore'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Core methods that a Reactor must implement.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|running
name|'running'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"A C{bool} which is C{True} from I{during startup} to "'
nl|'\n'
string|'"I{during shutdown} and C{False} the rest of the time."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|resolve
name|'def'
name|'resolve'
op|'('
name|'name'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a L{twisted.internet.defer.Deferred} that will resolve a hostname.\n        """'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fire \'startup\' System Events, move the reactor to the \'running\'\n        state, then run the main loop until it is stopped with C{stop()} or\n        C{crash()}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|stop
dedent|''
name|'def'
name|'stop'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fire \'shutdown\' System Events, which will move the reactor to the\n        \'stopped\' state and cause C{reactor.run()} to exit.\n        """'
newline|'\n'
nl|'\n'
DECL|member|crash
dedent|''
name|'def'
name|'crash'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop the main loop *immediately*, without firing any system events.\n\n        This is named as it is because this is an extremely "rude" thing to do;\n        it is possible to lose data and put your system in an inconsistent\n        state by calling this.  However, it is necessary, as sometimes a system\n        can become wedged in a pre-shutdown call.\n        """'
newline|'\n'
nl|'\n'
DECL|member|iterate
dedent|''
name|'def'
name|'iterate'
op|'('
name|'delay'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run the main loop\'s I/O polling function for a period of time.\n\n        This is most useful in applications where the UI is being drawn "as\n        fast as possible", such as games. All pending L{IDelayedCall}s will\n        be called.\n\n        The reactor must have been started (via the C{run()} method) prior to\n        any invocations of this method.  It must also be stopped manually\n        after the last call to this method (via the C{stop()} method).  This\n        method is not re-entrant: you must not call it recursively; in\n        particular, you must not call it while the reactor is running.\n        """'
newline|'\n'
nl|'\n'
DECL|member|fireSystemEvent
dedent|''
name|'def'
name|'fireSystemEvent'
op|'('
name|'eventType'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fire a system-wide event.\n\n        System-wide events are things like \'startup\', \'shutdown\', and\n        \'persist\'.\n        """'
newline|'\n'
nl|'\n'
DECL|member|addSystemEventTrigger
dedent|''
name|'def'
name|'addSystemEventTrigger'
op|'('
name|'phase'
op|','
name|'eventType'
op|','
name|'callable'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add a function to be called when a system event occurs.\n\n        Each "system event" in Twisted, such as \'startup\', \'shutdown\', and\n        \'persist\', has 3 phases: \'before\', \'during\', and \'after\' (in that\n        order, of course).  These events will be fired internally by the\n        Reactor.\n\n        An implementor of this interface must only implement those events\n        described here.\n\n        Callbacks registered for the "before" phase may return either None or a\n        Deferred.  The "during" phase will not execute until all of the\n        Deferreds from the "before" phase have fired.\n\n        Once the "during" phase is running, all of the remaining triggers must\n        execute; their return values must be ignored.\n\n        @param phase: a time to call the event -- either the string \'before\',\n                      \'after\', or \'during\', describing when to call it\n                      relative to the event\'s execution.\n\n        @param eventType: this is a string describing the type of event.\n\n        @param callable: the object to call before shutdown.\n\n        @param args: the arguments to call it with.\n\n        @param kw: the keyword arguments to call it with.\n\n        @return: an ID that can be used to remove this call with\n                 removeSystemEventTrigger.\n        """'
newline|'\n'
nl|'\n'
DECL|member|removeSystemEventTrigger
dedent|''
name|'def'
name|'removeSystemEventTrigger'
op|'('
name|'triggerID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Removes a trigger added with addSystemEventTrigger.\n\n        @param triggerID: a value returned from addSystemEventTrigger.\n\n        @raise KeyError: If there is no system event trigger for the given\n            C{triggerID}.\n\n        @raise ValueError: If there is no system event trigger for the given\n            C{triggerID}.\n\n        @raise TypeError: If there is no system event trigger for the given\n            C{triggerID}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|callWhenRunning
dedent|''
name|'def'
name|'callWhenRunning'
op|'('
name|'callable'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call a function when the reactor is running.\n\n        If the reactor has not started, the callable will be scheduled\n        to run when it does start. Otherwise, the callable will be invoked\n        immediately.\n\n        @param callable: the callable object to call later.\n\n        @param args: the arguments to call it with.\n\n        @param kw: the keyword arguments to call it with.\n\n        @return: None if the callable was invoked, otherwise a system\n                 event id for the scheduled call.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IReactorPluggableResolver
dedent|''
dedent|''
name|'class'
name|'IReactorPluggableResolver'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A reactor with a pluggable name resolver interface.\n    """'
newline|'\n'
nl|'\n'
DECL|member|installResolver
name|'def'
name|'installResolver'
op|'('
name|'resolver'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the internal resolver to use to for name lookups.\n\n        @type resolver: An object implementing the L{IResolverSimple} interface\n        @param resolver: The new resolver to use.\n\n        @return: The previously installed resolver.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IReactorFDSet
dedent|''
dedent|''
name|'class'
name|'IReactorFDSet'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Implement me to be able to use L{IFileDescriptor} type resources.\n\n    This assumes that your main-loop uses UNIX-style numeric file descriptors\n    (or at least similarly opaque IDs returned from a .fileno() method)\n    """'
newline|'\n'
nl|'\n'
DECL|member|addReader
name|'def'
name|'addReader'
op|'('
name|'reader'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        I add reader to the set of file descriptors to get read events for.\n\n        @param reader: An L{IReadDescriptor} provider that will be checked for\n                       read events until it is removed from the reactor with\n                       L{removeReader}.\n\n        @return: C{None}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|addWriter
dedent|''
name|'def'
name|'addWriter'
op|'('
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        I add writer to the set of file descriptors to get write events for.\n\n        @param writer: An L{IWriteDescriptor} provider that will be checked for\n                       write events until it is removed from the reactor with\n                       L{removeWriter}.\n\n        @return: C{None}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|removeReader
dedent|''
name|'def'
name|'removeReader'
op|'('
name|'reader'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Removes an object previously added with L{addReader}.\n\n        @return: C{None}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|removeWriter
dedent|''
name|'def'
name|'removeWriter'
op|'('
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Removes an object previously added with L{addWriter}.\n\n        @return: C{None}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|removeAll
dedent|''
name|'def'
name|'removeAll'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove all readers and writers.\n\n        Should not remove reactor internal reactor connections (like a waker).\n\n        @return: A list of L{IReadDescriptor} and L{IWriteDescriptor} providers\n                 which were removed.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getReaders
dedent|''
name|'def'
name|'getReaders'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the list of file descriptors currently monitored for input\n        events by the reactor.\n\n        @return: the list of file descriptors monitored for input events.\n        @rtype: C{list} of C{IReadDescriptor}\n        """'
newline|'\n'
nl|'\n'
DECL|member|getWriters
dedent|''
name|'def'
name|'getWriters'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the list file descriptors currently monitored for output events\n        by the reactor.\n\n        @return: the list of file descriptors monitored for output events.\n        @rtype: C{list} of C{IWriteDescriptor}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IListeningPort
dedent|''
dedent|''
name|'class'
name|'IListeningPort'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A listening port.\n    """'
newline|'\n'
nl|'\n'
DECL|member|startListening
name|'def'
name|'startListening'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Start listening on this port.\n\n        @raise CannotListenError: If it cannot listen on this port (e.g., it is\n                                  a TCP port and it cannot bind to the required\n                                  port number).\n        """'
newline|'\n'
nl|'\n'
DECL|member|stopListening
dedent|''
name|'def'
name|'stopListening'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop listening on this port.\n\n        If it does not complete immediately, will return Deferred that fires\n        upon completion.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the host that this port is listening for.\n\n        @return: An L{IAddress} provider.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ILoggingContext
dedent|''
dedent|''
name|'class'
name|'ILoggingContext'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Give context information that will be used to log events generated by\n    this item.\n    """'
newline|'\n'
nl|'\n'
DECL|member|logPrefix
name|'def'
name|'logPrefix'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @return: Prefix used during log formatting to indicate context.\n        @rtype: C{str}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IFileDescriptor
dedent|''
dedent|''
name|'class'
name|'IFileDescriptor'
op|'('
name|'ILoggingContext'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An interface representing a UNIX-style numeric file descriptor.\n    """'
newline|'\n'
nl|'\n'
DECL|member|fileno
name|'def'
name|'fileno'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @return: The platform-specified representation of a file descriptor\n                 number.\n        """'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the connection was lost.\n\n        This is called when the connection on a selectable object has been\n        lost.  It will be called whether the connection was closed explicitly,\n        an exception occurred in an event handler, or the other end of the\n        connection closed it first.\n\n        See also L{IHalfCloseableDescriptor} if your descriptor wants to be\n        notified separately of the two halves of the connection being closed.\n\n        @param reason: A failure instance indicating the reason why the\n                       connection was lost.  L{error.ConnectionLost} and\n                       L{error.ConnectionDone} are of special note, but the\n                       failure may be of other classes as well.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IReadDescriptor
dedent|''
dedent|''
name|'class'
name|'IReadDescriptor'
op|'('
name|'IFileDescriptor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An L{IFileDescriptor} that can read.\n\n    This interface is generally used in conjunction with L{IReactorFDSet}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|doRead
name|'def'
name|'doRead'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Some data is available for reading on your descriptor.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IWriteDescriptor
dedent|''
dedent|''
name|'class'
name|'IWriteDescriptor'
op|'('
name|'IFileDescriptor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An L{IFileDescriptor} that can write.\n\n    This interface is generally used in conjunction with L{IReactorFDSet}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|doWrite
name|'def'
name|'doWrite'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Some data can be written to your descriptor.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IReadWriteDescriptor
dedent|''
dedent|''
name|'class'
name|'IReadWriteDescriptor'
op|'('
name|'IReadDescriptor'
op|','
name|'IWriteDescriptor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An L{IFileDescriptor} that can both read and write.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IHalfCloseableDescriptor
dedent|''
name|'class'
name|'IHalfCloseableDescriptor'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A descriptor that can be half-closed.\n    """'
newline|'\n'
nl|'\n'
DECL|member|writeConnectionLost
name|'def'
name|'writeConnectionLost'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Indicates write connection was lost.\n        """'
newline|'\n'
nl|'\n'
DECL|member|readConnectionLost
dedent|''
name|'def'
name|'readConnectionLost'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Indicates read connection was lost.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ISystemHandle
dedent|''
dedent|''
name|'class'
name|'ISystemHandle'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An object that wraps a networking OS-specific handle.\n    """'
newline|'\n'
nl|'\n'
DECL|member|getHandle
name|'def'
name|'getHandle'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a system- and reactor-specific handle.\n\n        This might be a socket.socket() object, or some other type of\n        object, depending on which reactor is being used. Use and\n        manipulate at your own risk.\n\n        This might be used in cases where you want to set specific\n        options not exposed by the Twisted APIs.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IConsumer
dedent|''
dedent|''
name|'class'
name|'IConsumer'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A consumer consumes data from a producer.\n    """'
newline|'\n'
nl|'\n'
DECL|member|registerProducer
name|'def'
name|'registerProducer'
op|'('
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Register to receive data from a producer.\n\n        This sets self to be a consumer for a producer.  When this object runs\n        out of data (as when a send(2) call on a socket succeeds in moving the\n        last data from a userspace buffer into a kernelspace buffer), it will\n        ask the producer to resumeProducing().\n\n        For L{IPullProducer} providers, C{resumeProducing} will be called once\n        each time data is required.\n\n        For L{IPushProducer} providers, C{pauseProducing} will be called\n        whenever the write buffer fills up and C{resumeProducing} will only be\n        called when it empties.\n\n        @type producer: L{IProducer} provider\n\n        @type streaming: C{bool}\n        @param streaming: C{True} if C{producer} provides L{IPushProducer},\n        C{False} if C{producer} provides L{IPullProducer}.\n\n        @raise RuntimeError: If a producer is already registered.\n\n        @return: C{None}\n        """'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop consuming data from a producer, without disconnecting.\n        """'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The producer will write data by calling this method.\n        """'
newline|'\n'
nl|'\n'
DECL|class|IFinishableConsumer
dedent|''
dedent|''
name|'class'
name|'IFinishableConsumer'
op|'('
name|'IConsumer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A Consumer for producers that finish.\n    """'
newline|'\n'
nl|'\n'
DECL|member|finish
name|'def'
name|'finish'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The producer has finished producing.\n        """'
newline|'\n'
nl|'\n'
DECL|class|IProducer
dedent|''
dedent|''
name|'class'
name|'IProducer'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A producer produces data for a consumer.\n\n    Typically producing is done by calling the write method of an class\n    implementing L{IConsumer}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|stopProducing
name|'def'
name|'stopProducing'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop producing data.\n\n        This tells a producer that its consumer has died, so it must stop\n        producing data for good.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPushProducer
dedent|''
dedent|''
name|'class'
name|'IPushProducer'
op|'('
name|'IProducer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A push producer, also known as a streaming producer is expected to\n    produce (write to this consumer) data on a continous basis, unless\n    it has been paused. A paused push producer will resume producing\n    after its resumeProducing() method is called.   For a push producer\n    which is not pauseable, these functions may be noops.\n    """'
newline|'\n'
nl|'\n'
DECL|member|pauseProducing
name|'def'
name|'pauseProducing'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Pause producing data.\n\n        Tells a producer that it has produced too much data to process for\n        the time being, and to stop until resumeProducing() is called.\n        """'
newline|'\n'
DECL|member|resumeProducing
dedent|''
name|'def'
name|'resumeProducing'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Resume producing data.\n\n        This tells a producer to re-add itself to the main loop and produce\n        more data for its consumer.\n        """'
newline|'\n'
nl|'\n'
DECL|class|IPullProducer
dedent|''
dedent|''
name|'class'
name|'IPullProducer'
op|'('
name|'IProducer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A pull producer, also known as a non-streaming producer, is\n    expected to produce data each time resumeProducing() is called.\n    """'
newline|'\n'
nl|'\n'
DECL|member|resumeProducing
name|'def'
name|'resumeProducing'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Produce data for the consumer a single time.\n\n        This tells a producer to produce data for the consumer once\n        (not repeatedly, once only). Typically this will be done\n        by calling the consumer\'s write() method a single time with\n        produced data.\n        """'
newline|'\n'
nl|'\n'
DECL|class|IProtocol
dedent|''
dedent|''
name|'class'
name|'IProtocol'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
indent|'    '
name|'def'
name|'dataReceived'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called whenever data is received.\n\n        Use this method to translate to a higher-level message.  Usually, some\n        callback will be made upon the receipt of each complete protocol\n        message.\n\n        @param data: a string of indeterminate length.  Please keep in mind\n            that you will probably need to buffer some data, as partial\n            (or multiple) protocol messages may be received!  I recommend\n            that unit tests for protocols call through to this method with\n            differing chunk sizes, down to one byte at a time.\n        """'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the connection is shut down.\n\n        Clear any circular references here, and any external references\n        to this Protocol.  The connection has been closed. The C{reason}\n        Failure wraps a L{twisted.internet.error.ConnectionDone} or\n        L{twisted.internet.error.ConnectionLost} instance (or a subclass\n        of one of those).\n\n        @type reason: L{twisted.python.failure.Failure}\n        """'
newline|'\n'
nl|'\n'
DECL|member|makeConnection
dedent|''
name|'def'
name|'makeConnection'
op|'('
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a connection to a transport and a server.\n        """'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a connection is made.\n\n        This may be considered the initializer of the protocol, because\n        it is called when the connection is completed.  For clients,\n        this is called once the connection to the server has been\n        established; for servers, this is called after an accept() call\n        stops blocking and a socket has been received.  If you need to\n        send any greeting or initial message, do it here.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IProcessProtocol
dedent|''
dedent|''
name|'class'
name|'IProcessProtocol'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Interface for process-related event handlers.\n    """'
newline|'\n'
nl|'\n'
DECL|member|makeConnection
name|'def'
name|'makeConnection'
op|'('
name|'process'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the process has been created.\n\n        @type process: L{IProcessTransport} provider\n        @param process: An object representing the process which has been\n            created and associated with this protocol.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|childDataReceived
dedent|''
name|'def'
name|'childDataReceived'
op|'('
name|'childFD'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when data arrives from the child process.\n\n        @type childFD: C{int}\n        @param childFD: The file descriptor from which the data was\n            received.\n\n        @type data: C{str}\n        @param data: The data read from the child\'s file descriptor.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|childConnectionLost
dedent|''
name|'def'
name|'childConnectionLost'
op|'('
name|'childFD'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a file descriptor associated with the child process is\n        closed.\n\n        @type childFD: C{int}\n        @param childFD: The file descriptor which was closed.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|processExited
dedent|''
name|'def'
name|'processExited'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the child process exits.\n\n        @type reason: L{twisted.python.failure.Failure}\n        @param reason: A failure giving the reason the child process\n            terminated.  The type of exception for this failure is either\n            L{twisted.internet.error.ProcessDone} or\n            L{twisted.internet.error.ProcessTerminated}.\n\n        @since: 8.2\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the child process exits and all file descriptors associated\n        with it have been closed.\n\n        @type reason: L{twisted.python.failure.Failure}\n        @param reason: A failure giving the reason the child process\n            terminated.  The type of exception for this failure is either\n            L{twisted.internet.error.ProcessDone} or\n            L{twisted.internet.error.ProcessTerminated}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IHalfCloseableProtocol
dedent|''
dedent|''
name|'class'
name|'IHalfCloseableProtocol'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Implemented to indicate they want notification of half-closes.\n\n    TCP supports the notion of half-closing the connection, e.g.\n    closing the write side but still not stopping reading. A protocol\n    that implements this interface will be notified of such events,\n    instead of having connectionLost called.\n    """'
newline|'\n'
nl|'\n'
DECL|member|readConnectionLost
name|'def'
name|'readConnectionLost'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Notification of the read connection being closed.\n\n        This indicates peer did half-close of write side. It is now\n        the responsiblity of the this protocol to call\n        loseConnection().  In addition, the protocol MUST make sure a\n        reference to it still exists (i.e. by doing a callLater with\n        one of its methods, etc.)  as the reactor will only have a\n        reference to it if it is writing.\n\n        If the protocol does not do so, it might get garbage collected\n        without the connectionLost method ever being called.\n        """'
newline|'\n'
nl|'\n'
DECL|member|writeConnectionLost
dedent|''
name|'def'
name|'writeConnectionLost'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Notification of the write connection being closed.\n\n        This will never be called for TCP connections as TCP does not\n        support notification of this type of half-close.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IProtocolFactory
dedent|''
dedent|''
name|'class'
name|'IProtocolFactory'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Interface for protocol factories.\n    """'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
name|'def'
name|'buildProtocol'
op|'('
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a connection has been established to addr.\n\n        If None is returned, the connection is assumed to have been refused,\n        and the Port will close the connection.\n\n        @type addr: (host, port)\n        @param addr: The address of the newly-established connection\n\n        @return: None if the connection was refused, otherwise an object\n                 providing L{IProtocol}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|doStart
dedent|''
name|'def'
name|'doStart'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called every time this is connected to a Port or Connector.\n        """'
newline|'\n'
nl|'\n'
DECL|member|doStop
dedent|''
name|'def'
name|'doStop'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called every time this is unconnected from a Port or Connector.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ITransport
dedent|''
dedent|''
name|'class'
name|'ITransport'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I am a transport for bytes.\n\n    I represent (and wrap) the physical connection and synchronicity\n    of the framework which is talking to the network.  I make no\n    representations about whether calls to me will happen immediately\n    or require returning to a control loop, or whether they will happen\n    in the same or another thread.  Consider methods of this class\n    (aside from getPeer) to be \'thrown over the wall\', to happen at some\n    indeterminate time.\n    """'
newline|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write some data to the physical connection, in sequence, in a\n        non-blocking fashion.\n\n        If possible, make sure that it is all written.  No data will\n        ever be lost, although (obviously) the connection may be closed\n        before it all gets through.\n        """'
newline|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write a list of strings to the physical connection.\n\n        If possible, make sure that all of the data is written to\n        the socket at once, without first copying it all into a\n        single string.\n        """'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close my connection, after writing all pending data.\n\n        Note that if there is a registered producer on a transport it\n        will not be closed until the producer has been unregistered.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getPeer
dedent|''
name|'def'
name|'getPeer'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the remote address of this connection.\n\n        Treat this method with caution.  It is the unfortunate result of the\n        CGI and Jabber standards, but should not be considered reliable for\n        the usual host of reasons; port forwarding, proxying, firewalls, IP\n        masquerading, etc.\n\n        @return: An L{IAddress} provider.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Similar to getPeer, but returns an address describing this side of the\n        connection.\n\n        @return: An L{IAddress} provider.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ITCPTransport
dedent|''
dedent|''
name|'class'
name|'ITCPTransport'
op|'('
name|'ITransport'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A TCP based transport.\n    """'
newline|'\n'
nl|'\n'
DECL|member|loseWriteConnection
name|'def'
name|'loseWriteConnection'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Half-close the write side of a TCP connection.\n\n        If the protocol instance this is attached to provides\n        IHalfCloseableProtocol, it will get notified when the operation is\n        done. When closing write connection, as with loseConnection this will\n        only happen when buffer has emptied and there is no registered\n        producer.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getTcpNoDelay
dedent|''
name|'def'
name|'getTcpNoDelay'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return if C{TCP_NODELAY} is enabled.\n        """'
newline|'\n'
nl|'\n'
DECL|member|setTcpNoDelay
dedent|''
name|'def'
name|'setTcpNoDelay'
op|'('
name|'enabled'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Enable/disable C{TCP_NODELAY}.\n\n        Enabling C{TCP_NODELAY} turns off Nagle\'s algorithm. Small packets are\n        sent sooner, possibly at the expense of overall throughput.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getTcpKeepAlive
dedent|''
name|'def'
name|'getTcpKeepAlive'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return if C{SO_KEEPALIVE} is enabled.\n        """'
newline|'\n'
nl|'\n'
DECL|member|setTcpKeepAlive
dedent|''
name|'def'
name|'setTcpKeepAlive'
op|'('
name|'enabled'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Enable/disable C{SO_KEEPALIVE}.\n\n        Enabling C{SO_KEEPALIVE} sends packets periodically when the connection\n        is otherwise idle, usually once every two hours. They are intended\n        to allow detection of lost peers in a non-infinite amount of time.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns L{IPv4Address}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getPeer
dedent|''
name|'def'
name|'getPeer'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns L{IPv4Address}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ITLSTransport
dedent|''
dedent|''
name|'class'
name|'ITLSTransport'
op|'('
name|'ITCPTransport'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A TCP transport that supports switching to TLS midstream.\n\n    Once TLS mode is started the transport will implement L{ISSLTransport}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|startTLS
name|'def'
name|'startTLS'
op|'('
name|'contextFactory'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initiate TLS negotiation.\n\n        @param contextFactory: A context factory (see L{ssl.py<twisted.internet.ssl>})\n        """'
newline|'\n'
nl|'\n'
DECL|class|ISSLTransport
dedent|''
dedent|''
name|'class'
name|'ISSLTransport'
op|'('
name|'ITCPTransport'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A SSL/TLS based transport.\n    """'
newline|'\n'
nl|'\n'
DECL|member|getPeerCertificate
name|'def'
name|'getPeerCertificate'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return an object with the peer\'s certificate info.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IProcessTransport
dedent|''
dedent|''
name|'class'
name|'IProcessTransport'
op|'('
name|'ITransport'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A process transport.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|pid
name|'pid'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"From before L{IProcessProtocol.makeConnection} is called to before "'
nl|'\n'
string|'"L{IProcessProtocol.processEnded} is called, C{pid} is an L{int} "'
nl|'\n'
string|'"giving the platform process ID of this process.  C{pid} is L{None} "'
nl|'\n'
string|'"at all other times."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|closeStdin
name|'def'
name|'closeStdin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close stdin after all data has been written out.\n        """'
newline|'\n'
nl|'\n'
DECL|member|closeStdout
dedent|''
name|'def'
name|'closeStdout'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close stdout.\n        """'
newline|'\n'
nl|'\n'
DECL|member|closeStderr
dedent|''
name|'def'
name|'closeStderr'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close stderr.\n        """'
newline|'\n'
nl|'\n'
DECL|member|closeChildFD
dedent|''
name|'def'
name|'closeChildFD'
op|'('
name|'descriptor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close a file descriptor which is connected to the child process, identified\n        by its FD in the child process.\n        """'
newline|'\n'
nl|'\n'
DECL|member|writeToChild
dedent|''
name|'def'
name|'writeToChild'
op|'('
name|'childFD'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Similar to L{ITransport.write} but also allows the file descriptor in\n        the child process which will receive the bytes to be specified.\n\n        This is not available on all platforms.\n\n        @type childFD: C{int}\n        @param childFD: The file descriptor to which to write.\n\n        @type data: C{str}\n        @param data: The bytes to write.\n\n        @return: C{None}\n        """'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close stdin, stderr and stdout.\n        """'
newline|'\n'
nl|'\n'
DECL|member|signalProcess
dedent|''
name|'def'
name|'signalProcess'
op|'('
name|'signalID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a signal to the process.\n\n        @param signalID: can be\n          - one of C{\\"HUP\\"}, C{\\"KILL\\"}, C{\\"STOP\\"}, or C{\\"INT\\"}.\n              These will be implemented in a\n              cross-platform manner, and so should be used\n              if possible.\n          - an integer, where it represents a POSIX\n              signal ID.\n\n        @raise twisted.internet.error.ProcessExitedAlready: The process has\n        already exited.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IServiceCollection
dedent|''
dedent|''
name|'class'
name|'IServiceCollection'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An object which provides access to a collection of services.\n    """'
newline|'\n'
nl|'\n'
DECL|member|getServiceNamed
name|'def'
name|'getServiceNamed'
op|'('
name|'serviceName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve the named service from this application.\n\n        Raise a C{KeyError} if there is no such service name.\n        """'
newline|'\n'
nl|'\n'
DECL|member|addService
dedent|''
name|'def'
name|'addService'
op|'('
name|'service'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add a service to this collection.\n        """'
newline|'\n'
nl|'\n'
DECL|member|removeService
dedent|''
name|'def'
name|'removeService'
op|'('
name|'service'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove a service from this collection.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IUDPTransport
dedent|''
dedent|''
name|'class'
name|'IUDPTransport'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Transport for UDP DatagramProtocols.\n    """'
newline|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'packet'
op|','
name|'addr'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write packet to given address.\n\n        @param addr: a tuple of (ip, port). For connected transports must\n                     be the address the transport is connected to, or None.\n                     In non-connected mode this is mandatory.\n\n        @raise twisted.internet.error.MessageLengthError: C{packet} was too\n        long.\n        """'
newline|'\n'
nl|'\n'
DECL|member|connect
dedent|''
name|'def'
name|'connect'
op|'('
name|'host'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connect the transport to an address.\n\n        This changes it to connected mode. Datagrams can only be sent to\n        this address, and will only be received from this address. In addition\n        the protocol\'s connectionRefused method might get called if destination\n        is not receiving datagrams.\n\n        @param host: an IP address, not a domain name (\'127.0.0.1\', not \'localhost\')\n        @param port: port to connect to.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns L{IPv4Address}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|stopListening
dedent|''
name|'def'
name|'stopListening'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop listening on this port.\n\n        If it does not complete immediately, will return L{Deferred} that fires\n        upon completion.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IUDPConnectedTransport
dedent|''
dedent|''
name|'class'
name|'IUDPConnectedTransport'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DEPRECATED. Transport for UDP ConnectedPacketProtocols.\n    """'
newline|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write packet to address we are connected to.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns L{UNIXAddress}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IUNIXDatagramTransport
dedent|''
dedent|''
name|'class'
name|'IUNIXDatagramTransport'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Transport for UDP PacketProtocols.\n    """'
newline|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'packet'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write packet to given address.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns L{UNIXAddress}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IUNIXDatagramConnectedTransport
dedent|''
dedent|''
name|'class'
name|'IUNIXDatagramConnectedTransport'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Transport for UDP ConnectedPacketProtocols.\n    """'
newline|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write packet to address we are connected to.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns L{UNIXAddress}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getPeer
dedent|''
name|'def'
name|'getPeer'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns L{UNIXAddress}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IMulticastTransport
dedent|''
dedent|''
name|'class'
name|'IMulticastTransport'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Additional functionality for multicast UDP.\n    """'
newline|'\n'
nl|'\n'
DECL|member|getOutgoingInterface
name|'def'
name|'getOutgoingInterface'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return interface of outgoing multicast packets.\n        """'
newline|'\n'
nl|'\n'
DECL|member|setOutgoingInterface
dedent|''
name|'def'
name|'setOutgoingInterface'
op|'('
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set interface for outgoing multicast packets.\n\n        Returns Deferred of success.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getLoopbackMode
dedent|''
name|'def'
name|'getLoopbackMode'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return if loopback mode is enabled.\n        """'
newline|'\n'
nl|'\n'
DECL|member|setLoopbackMode
dedent|''
name|'def'
name|'setLoopbackMode'
op|'('
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set if loopback mode is enabled.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getTTL
dedent|''
name|'def'
name|'getTTL'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get time to live for multicast packets.\n        """'
newline|'\n'
nl|'\n'
DECL|member|setTTL
dedent|''
name|'def'
name|'setTTL'
op|'('
name|'ttl'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set time to live on multicast packets.\n        """'
newline|'\n'
nl|'\n'
DECL|member|joinGroup
dedent|''
name|'def'
name|'joinGroup'
op|'('
name|'addr'
op|','
name|'interface'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Join a multicast group. Returns L{Deferred} of success or failure.\n\n        If an error occurs, the returned L{Deferred} will fail with\n        L{error.MulticastJoinError}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|leaveGroup
dedent|''
name|'def'
name|'leaveGroup'
op|'('
name|'addr'
op|','
name|'interface'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Leave multicast group, return L{Deferred} of success.\n        """'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

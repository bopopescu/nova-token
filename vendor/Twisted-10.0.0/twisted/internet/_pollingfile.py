begin_unit
comment|'# -*- test-case-name: twisted.internet.test.test_pollingfile -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nImplements a simple polling interface for file descriptors that don\'t work with\nselect() - this is pretty much only useful on Windows.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IConsumer'
op|','
name|'IPushProducer'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|MIN_TIMEOUT
name|'MIN_TIMEOUT'
op|'='
number|'0.000000001'
newline|'\n'
DECL|variable|MAX_TIMEOUT
name|'MAX_TIMEOUT'
op|'='
number|'0.1'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_PollableResource
name|'class'
name|'_PollableResource'
op|':'
newline|'\n'
DECL|variable|active
indent|'    '
name|'active'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|activate
name|'def'
name|'activate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'active'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|deactivate
dedent|''
name|'def'
name|'deactivate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'active'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_PollingTimer
dedent|''
dedent|''
name|'class'
name|'_PollingTimer'
op|':'
newline|'\n'
comment|'# Everything is private here because it is really an implementation detail.'
nl|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
name|'self'
op|'.'
name|'_resources'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_pollTimer'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_currentTimeout'
op|'='
name|'MAX_TIMEOUT'
newline|'\n'
name|'self'
op|'.'
name|'_paused'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_addPollableResource
dedent|''
name|'def'
name|'_addPollableResource'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_resources'
op|'.'
name|'append'
op|'('
name|'res'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkPollingState'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_checkPollingState
dedent|''
name|'def'
name|'_checkPollingState'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'resource'
name|'in'
name|'self'
op|'.'
name|'_resources'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'resource'
op|'.'
name|'active'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_startPolling'
op|'('
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_stopPolling'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_startPolling
dedent|''
dedent|''
name|'def'
name|'_startPolling'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_pollTimer'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_pollTimer'
op|'='
name|'self'
op|'.'
name|'_reschedule'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_stopPolling
dedent|''
dedent|''
name|'def'
name|'_stopPolling'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_pollTimer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_pollTimer'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_pollTimer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_pause
dedent|''
dedent|''
name|'def'
name|'_pause'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_paused'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_unpause
dedent|''
name|'def'
name|'_unpause'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_paused'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_checkPollingState'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reschedule
dedent|''
name|'def'
name|'_reschedule'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_paused'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'callLater'
op|'('
name|'self'
op|'.'
name|'_currentTimeout'
op|','
name|'self'
op|'.'
name|'_pollEvent'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_pollEvent
dedent|''
dedent|''
name|'def'
name|'_pollEvent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'workUnits'
op|'='
number|'0.'
newline|'\n'
name|'anyActive'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'resource'
name|'in'
name|'self'
op|'.'
name|'_resources'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'resource'
op|'.'
name|'active'
op|':'
newline|'\n'
indent|'                '
name|'workUnits'
op|'+='
name|'resource'
op|'.'
name|'checkWork'
op|'('
op|')'
newline|'\n'
comment|'# Check AFTER work has been done'
nl|'\n'
name|'if'
name|'resource'
op|'.'
name|'active'
op|':'
newline|'\n'
indent|'                    '
name|'anyActive'
op|'.'
name|'append'
op|'('
name|'resource'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'newTimeout'
op|'='
name|'self'
op|'.'
name|'_currentTimeout'
newline|'\n'
name|'if'
name|'workUnits'
op|':'
newline|'\n'
indent|'            '
name|'newTimeout'
op|'='
name|'self'
op|'.'
name|'_currentTimeout'
op|'/'
op|'('
name|'workUnits'
op|'+'
number|'1.'
op|')'
newline|'\n'
name|'if'
name|'newTimeout'
op|'<'
name|'MIN_TIMEOUT'
op|':'
newline|'\n'
indent|'                '
name|'newTimeout'
op|'='
name|'MIN_TIMEOUT'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'newTimeout'
op|'='
name|'self'
op|'.'
name|'_currentTimeout'
op|'*'
number|'2.'
newline|'\n'
name|'if'
name|'newTimeout'
op|'>'
name|'MAX_TIMEOUT'
op|':'
newline|'\n'
indent|'                '
name|'newTimeout'
op|'='
name|'MAX_TIMEOUT'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_currentTimeout'
op|'='
name|'newTimeout'
newline|'\n'
name|'if'
name|'anyActive'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_pollTimer'
op|'='
name|'self'
op|'.'
name|'_reschedule'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|"# If we ever (let's hope not) need the above functionality on UNIX, this could"
nl|'\n'
comment|'# be factored into a different module.'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'import'
name|'win32pipe'
newline|'\n'
name|'import'
name|'win32file'
newline|'\n'
name|'import'
name|'win32api'
newline|'\n'
name|'import'
name|'pywintypes'
newline|'\n'
nl|'\n'
DECL|class|_PollableReadPipe
name|'class'
name|'_PollableReadPipe'
op|'('
name|'_PollableResource'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'implements'
op|'('
name|'IPushProducer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pipe'
op|','
name|'receivedCallback'
op|','
name|'lostCallback'
op|')'
op|':'
newline|'\n'
comment|'# security attributes for pipes'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'pipe'
op|'='
name|'pipe'
newline|'\n'
name|'self'
op|'.'
name|'receivedCallback'
op|'='
name|'receivedCallback'
newline|'\n'
name|'self'
op|'.'
name|'lostCallback'
op|'='
name|'lostCallback'
newline|'\n'
nl|'\n'
DECL|member|checkWork
dedent|''
name|'def'
name|'checkWork'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'finished'
op|'='
number|'0'
newline|'\n'
name|'fullDataRead'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'buffer'
op|','
name|'bytesToRead'
op|','
name|'result'
op|'='
name|'win32pipe'
op|'.'
name|'PeekNamedPipe'
op|'('
name|'self'
op|'.'
name|'pipe'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# finished = (result == -1)'
nl|'\n'
name|'if'
name|'not'
name|'bytesToRead'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
name|'hr'
op|','
name|'data'
op|'='
name|'win32file'
op|'.'
name|'ReadFile'
op|'('
name|'self'
op|'.'
name|'pipe'
op|','
name|'bytesToRead'
op|','
name|'None'
op|')'
newline|'\n'
name|'fullDataRead'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'win32api'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'                '
name|'finished'
op|'='
number|'1'
newline|'\n'
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'dataBuf'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'fullDataRead'
op|')'
newline|'\n'
name|'if'
name|'dataBuf'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'receivedCallback'
op|'('
name|'dataBuf'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'finished'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'cleanup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'len'
op|'('
name|'dataBuf'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cleanup
dedent|''
name|'def'
name|'cleanup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deactivate'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lostCallback'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'win32api'
op|'.'
name|'CloseHandle'
op|'('
name|'self'
op|'.'
name|'pipe'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'pywintypes'
op|'.'
name|'error'
op|':'
newline|'\n'
comment|"# You can't close std handles...?"
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|stopProducing
dedent|''
dedent|''
name|'def'
name|'stopProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|pauseProducing
dedent|''
name|'def'
name|'pauseProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deactivate'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'activate'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FULL_BUFFER_SIZE
dedent|''
dedent|''
name|'FULL_BUFFER_SIZE'
op|'='
number|'64'
op|'*'
number|'1024'
newline|'\n'
nl|'\n'
DECL|class|_PollableWritePipe
name|'class'
name|'_PollableWritePipe'
op|'('
name|'_PollableResource'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'implements'
op|'('
name|'IConsumer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'writePipe'
op|','
name|'lostCallback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'disconnecting'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'producerPaused'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'streamingProducer'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'outQueue'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'writePipe'
op|'='
name|'writePipe'
newline|'\n'
name|'self'
op|'.'
name|'lostCallback'
op|'='
name|'lostCallback'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'win32pipe'
op|'.'
name|'SetNamedPipeHandleState'
op|'('
name|'writePipe'
op|','
nl|'\n'
name|'win32pipe'
op|'.'
name|'PIPE_NOWAIT'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'pywintypes'
op|'.'
name|'error'
op|':'
newline|'\n'
comment|"# Maybe it's an invalid handle.  Who knows."
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'disconnecting'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|bufferFull
dedent|''
name|'def'
name|'bufferFull'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'producer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'producerPaused'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|bufferEmpty
dedent|''
dedent|''
name|'def'
name|'bufferEmpty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'producer'
name|'is'
name|'not'
name|'None'
name|'and'
op|'('
op|'('
name|'not'
name|'self'
op|'.'
name|'streamingProducer'
op|')'
name|'or'
nl|'\n'
name|'self'
op|'.'
name|'producerPaused'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'producerPaused'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# almost-but-not-quite-exact copy-paste from abstract.FileDescriptor... ugh'
nl|'\n'
nl|'\n'
DECL|member|registerProducer
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register to receive data from a producer.\n\n        This sets this selectable to be a consumer for a producer.  When this\n        selectable runs out of data on a write() call, it will ask the producer\n        to resumeProducing(). A producer should implement the IProducer\n        interface.\n\n        FileDescriptor provides some infrastructure for producer methods.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'producer'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
nl|'\n'
string|'"Cannot register producer %s, because producer %s was never "'
nl|'\n'
string|'"unregistered."'
op|'%'
op|'('
name|'producer'
op|','
name|'self'
op|'.'
name|'producer'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'active'
op|':'
newline|'\n'
indent|'            '
name|'producer'
op|'.'
name|'stopProducing'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'producer'
op|'='
name|'producer'
newline|'\n'
name|'self'
op|'.'
name|'streamingProducer'
op|'='
name|'streaming'
newline|'\n'
name|'if'
name|'not'
name|'streaming'
op|':'
newline|'\n'
indent|'                '
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
dedent|''
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stop consuming data from a producer, without disconnecting.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|writeConnectionLost
dedent|''
name|'def'
name|'writeConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deactivate'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'win32api'
op|'.'
name|'CloseHandle'
op|'('
name|'self'
op|'.'
name|'writePipe'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'pywintypes'
op|'.'
name|'error'
op|':'
newline|'\n'
comment|'# OMG what'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'lostCallback'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'seq'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'outQueue'
op|'.'
name|'extend'
op|'('
name|'seq'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'disconnecting'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'outQueue'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'sum'
op|'('
name|'map'
op|'('
name|'len'
op|','
name|'self'
op|'.'
name|'outQueue'
op|')'
op|')'
op|'>'
name|'FULL_BUFFER_SIZE'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'bufferFull'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|checkWork
dedent|''
dedent|''
name|'def'
name|'checkWork'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'numBytesWritten'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'outQueue'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'disconnecting'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'writeConnectionLost'
op|'('
op|')'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'win32file'
op|'.'
name|'WriteFile'
op|'('
name|'self'
op|'.'
name|'writePipe'
op|','
string|"''"
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'pywintypes'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'writeConnectionLost'
op|'('
op|')'
newline|'\n'
name|'return'
name|'numBytesWritten'
newline|'\n'
dedent|''
dedent|''
name|'while'
name|'self'
op|'.'
name|'outQueue'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
name|'self'
op|'.'
name|'outQueue'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'errCode'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'data'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'TypeError'
op|'('
string|'"unicode not allowed"'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'errCode'
op|','
name|'nBytesWritten'
op|'='
name|'win32file'
op|'.'
name|'WriteFile'
op|'('
name|'self'
op|'.'
name|'writePipe'
op|','
nl|'\n'
name|'data'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'win32api'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'writeConnectionLost'
op|'('
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# assert not errCode, "wtf an error code???"'
nl|'\n'
indent|'                '
name|'numBytesWritten'
op|'+='
name|'nBytesWritten'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'data'
op|')'
op|'>'
name|'nBytesWritten'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'outQueue'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'data'
op|'['
name|'nBytesWritten'
op|':'
op|']'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'resumed'
op|'='
name|'self'
op|'.'
name|'bufferEmpty'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'resumed'
name|'and'
name|'self'
op|'.'
name|'disconnecting'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'writeConnectionLost'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'numBytesWritten'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

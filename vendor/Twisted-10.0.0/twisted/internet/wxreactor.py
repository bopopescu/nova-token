begin_unit
comment|'# Copyright (c) 2001-2006 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nThis module provides wxPython event loop support for Twisted.\n\nIn order to use this support, simply do the following::\n\n    |  from twisted.internet import wxreactor\n    |  wxreactor.install()\n\nThen, when your root wxApp has been created::\n\n    | from twisted.internet import reactor\n    | reactor.registerWxApp(yourApp)\n    | reactor.run()\n\nThen use twisted.internet APIs as usual. Stop the event loop using\nreactor.stop(), not yourApp.ExitMainLoop().\n\nIMPORTANT: tests will fail when run under this reactor. This is\nexpected and probably does not reflect on the reactor\'s ability to run\nreal applications.\n\nMaintainer: Itamar Shtull-Trauring\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'Queue'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'wx'
name|'import'
name|'PySimpleApp'
name|'as'
name|'wxPySimpleApp'
op|','
name|'CallAfter'
name|'as'
name|'wxCallAfter'
op|','
name|'Timer'
name|'as'
name|'wxTimer'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
comment|'# older version of wxPython:'
nl|'\n'
indent|'    '
name|'from'
name|'wxPython'
op|'.'
name|'wx'
name|'import'
name|'wxPySimpleApp'
op|','
name|'wxCallAfter'
op|','
name|'wxTimer'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'runtime'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'_threadedselect'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProcessEventsTimer
name|'class'
name|'ProcessEventsTimer'
op|'('
name|'wxTimer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Timer that tells wx to process pending events.\n\n    This is necessary on OS X, probably due to a bug in wx, if we want\n    wxCallAfters to be handled when modal dialogs, menus, etc.  are open.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'wxapp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'wxTimer'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'wxapp'
op|'='
name|'wxapp'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|Notify
dedent|''
name|'def'
name|'Notify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called repeatedly by wx event loop.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'wxapp'
op|'.'
name|'ProcessPendingEvents'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|WxReactor
dedent|''
dedent|''
name|'class'
name|'WxReactor'
op|'('
name|'_threadedselect'
op|'.'
name|'ThreadedSelectReactor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    wxPython reactor.\n\n    wxPython drives the event loop, select() runs in a thread.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|_stopping
name|'_stopping'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|registerWxApp
name|'def'
name|'registerWxApp'
op|'('
name|'self'
op|','
name|'wxapp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Register wxApp instance with the reactor.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'wxapp'
op|'='
name|'wxapp'
newline|'\n'
nl|'\n'
DECL|member|_installSignalHandlersAgain
dedent|''
name|'def'
name|'_installSignalHandlersAgain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        wx sometimes removes our own signal handlers, so re-add them.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# make _handleSignals happy:'
nl|'\n'
indent|'            '
name|'import'
name|'signal'
newline|'\n'
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGINT'
op|','
name|'signal'
op|'.'
name|'default_int_handler'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_handleSignals'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|stop
dedent|''
name|'def'
name|'stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop the reactor.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_stopping'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_stopping'
op|'='
name|'True'
newline|'\n'
name|'_threadedselect'
op|'.'
name|'ThreadedSelectReactor'
op|'.'
name|'stop'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_runInMainThread
dedent|''
name|'def'
name|'_runInMainThread'
op|'('
name|'self'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Schedule function to run in main wx/Twisted thread.\n\n        Called by the select() thread.\n        """'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"wxapp"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'wxCallAfter'
op|'('
name|'f'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# wx shutdown but twisted hasn't"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_postQueue'
op|'.'
name|'put'
op|'('
name|'f'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_stopWx
dedent|''
dedent|''
name|'def'
name|'_stopWx'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop the wx event loop if it hasn\'t already been stopped.\n\n        Called during Twisted event loop shutdown.\n        """'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"wxapp"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'wxapp'
op|'.'
name|'ExitMainLoop'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'installSignalHandlers'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Start the reactor.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_postQueue'
op|'='
name|'Queue'
op|'.'
name|'Queue'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"wxapp"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"registerWxApp() was not called on reactor, "'
nl|'\n'
string|'"registering my own wxApp instance."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'registerWxApp'
op|'('
name|'wxPySimpleApp'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# start select() thread:'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'interleave'
op|'('
name|'self'
op|'.'
name|'_runInMainThread'
op|','
nl|'\n'
name|'installSignalHandlers'
op|'='
name|'installSignalHandlers'
op|')'
newline|'\n'
name|'if'
name|'installSignalHandlers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'_installSignalHandlersAgain'
op|')'
newline|'\n'
nl|'\n'
comment|'# add cleanup events:'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'addSystemEventTrigger'
op|'('
string|'"after"'
op|','
string|'"shutdown"'
op|','
name|'self'
op|'.'
name|'_stopWx'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addSystemEventTrigger'
op|'('
string|'"after"'
op|','
string|'"shutdown"'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'self'
op|'.'
name|'_postQueue'
op|'.'
name|'put'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# On Mac OS X, work around wx bug by starting timer to ensure'
nl|'\n'
comment|"# wxCallAfter calls are always processed. We don't wake up as"
nl|'\n'
comment|'# often as we could since that uses too much CPU.'
nl|'\n'
name|'if'
name|'runtime'
op|'.'
name|'platform'
op|'.'
name|'isMacOSX'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'t'
op|'='
name|'ProcessEventsTimer'
op|'('
name|'self'
op|'.'
name|'wxapp'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'Start'
op|'('
number|'2'
op|')'
comment|'# wake up every 2ms'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'wxapp'
op|'.'
name|'MainLoop'
op|'('
op|')'
newline|'\n'
name|'wxapp'
op|'='
name|'self'
op|'.'
name|'wxapp'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'wxapp'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_stopping'
op|':'
newline|'\n'
comment|'# wx event loop exited without reactor.stop() being'
nl|'\n'
comment|'# called.  At this point events from select() thread will'
nl|'\n'
comment|'# be added to _postQueue, but some may still be waiting'
nl|'\n'
comment|'# unprocessed in wx, thus the ProcessPendingEvents()'
nl|'\n'
comment|'# below.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'wxapp'
op|'.'
name|'ProcessPendingEvents'
op|'('
op|')'
comment|'# deal with any queued wxCallAfters'
newline|'\n'
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'f'
op|'='
name|'self'
op|'.'
name|'_postQueue'
op|'.'
name|'get'
op|'('
name|'timeout'
op|'='
number|'0.01'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Queue'
op|'.'
name|'Empty'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'f'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                        '
name|'break'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'f'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                        '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|install
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'install'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Configure the twisted mainloop to be run inside the wxPython mainloop.\n    """'
newline|'\n'
name|'reactor'
op|'='
name|'WxReactor'
op|'('
op|')'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'main'
name|'import'
name|'installReactor'
newline|'\n'
name|'installReactor'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'return'
name|'reactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
name|'__all__'
op|'='
op|'['
string|"'install'"
op|']'
newline|'\n'
endmarker|''
end_unit

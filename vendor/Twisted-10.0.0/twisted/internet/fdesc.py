begin_unit
comment|'# -*- test-case-name: twisted.test.test_fdesc -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nUtility functions for dealing with POSIX file descriptors.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'fcntl'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|fcntl
indent|'    '
name|'fcntl'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# twisted imports'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'main'
name|'import'
name|'CONNECTION_LOST'
op|','
name|'CONNECTION_DONE'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'runtime'
name|'import'
name|'platformType'
newline|'\n'
nl|'\n'
DECL|function|setNonBlocking
name|'def'
name|'setNonBlocking'
op|'('
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Make a file descriptor non-blocking.\n    """'
newline|'\n'
name|'flags'
op|'='
name|'fcntl'
op|'.'
name|'fcntl'
op|'('
name|'fd'
op|','
name|'fcntl'
op|'.'
name|'F_GETFL'
op|')'
newline|'\n'
name|'flags'
op|'='
name|'flags'
op|'|'
name|'os'
op|'.'
name|'O_NONBLOCK'
newline|'\n'
name|'fcntl'
op|'.'
name|'fcntl'
op|'('
name|'fd'
op|','
name|'fcntl'
op|'.'
name|'F_SETFL'
op|','
name|'flags'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|setBlocking
dedent|''
name|'def'
name|'setBlocking'
op|'('
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Make a file descriptor blocking.\n    """'
newline|'\n'
name|'flags'
op|'='
name|'fcntl'
op|'.'
name|'fcntl'
op|'('
name|'fd'
op|','
name|'fcntl'
op|'.'
name|'F_GETFL'
op|')'
newline|'\n'
name|'flags'
op|'='
name|'flags'
op|'&'
op|'~'
name|'os'
op|'.'
name|'O_NONBLOCK'
newline|'\n'
name|'fcntl'
op|'.'
name|'fcntl'
op|'('
name|'fd'
op|','
name|'fcntl'
op|'.'
name|'F_SETFL'
op|','
name|'flags'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'fcntl'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|"# fcntl isn't available on Windows.  By default, handles aren't"
nl|'\n'
comment|'# inherited on Windows, so we can do nothing here.'
nl|'\n'
indent|'    '
name|'_setCloseOnExec'
op|'='
name|'_unsetCloseOnExec'
op|'='
name|'lambda'
name|'fd'
op|':'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|function|_setCloseOnExec
indent|'    '
name|'def'
name|'_setCloseOnExec'
op|'('
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a file descriptor close-on-exec.\n        """'
newline|'\n'
name|'flags'
op|'='
name|'fcntl'
op|'.'
name|'fcntl'
op|'('
name|'fd'
op|','
name|'fcntl'
op|'.'
name|'F_GETFD'
op|')'
newline|'\n'
name|'flags'
op|'='
name|'flags'
op|'|'
name|'fcntl'
op|'.'
name|'FD_CLOEXEC'
newline|'\n'
name|'fcntl'
op|'.'
name|'fcntl'
op|'('
name|'fd'
op|','
name|'fcntl'
op|'.'
name|'F_SETFD'
op|','
name|'flags'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_unsetCloseOnExec
dedent|''
name|'def'
name|'_unsetCloseOnExec'
op|'('
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a file descriptor close-on-exec.\n        """'
newline|'\n'
name|'flags'
op|'='
name|'fcntl'
op|'.'
name|'fcntl'
op|'('
name|'fd'
op|','
name|'fcntl'
op|'.'
name|'F_GETFD'
op|')'
newline|'\n'
name|'flags'
op|'='
name|'flags'
op|'&'
op|'~'
name|'fcntl'
op|'.'
name|'FD_CLOEXEC'
newline|'\n'
name|'fcntl'
op|'.'
name|'fcntl'
op|'('
name|'fd'
op|','
name|'fcntl'
op|'.'
name|'F_SETFD'
op|','
name|'flags'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|readFromFD
dedent|''
dedent|''
name|'def'
name|'readFromFD'
op|'('
name|'fd'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Read from file descriptor, calling callback with resulting data.\n\n    If successful, call \'callback\' with a single argument: the\n    resulting data.\n\n    Returns same thing FileDescriptor.doRead would: CONNECTION_LOST,\n    CONNECTION_DONE, or None.\n\n    @type fd: C{int}\n    @param fd: non-blocking file descriptor to be read from.\n    @param callback: a callable which accepts a single argument. If\n    data is read from the file descriptor it will be called with this\n    data. Handling exceptions from calling the callback is up to the\n    caller.\n\n    Note that if the descriptor is still connected but no data is read,\n    None will be returned but callback will not be called.\n\n    @return: CONNECTION_LOST on error, CONNECTION_DONE when fd is\n    closed, otherwise None.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'output'
op|'='
name|'os'
op|'.'
name|'read'
op|'('
name|'fd'
op|','
number|'8192'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'OSError'
op|','
name|'IOError'
op|')'
op|','
name|'ioe'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'ioe'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
name|'in'
op|'('
name|'errno'
op|'.'
name|'EAGAIN'
op|','
name|'errno'
op|'.'
name|'EINTR'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'CONNECTION_LOST'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'output'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'CONNECTION_DONE'
newline|'\n'
dedent|''
name|'callback'
op|'('
name|'output'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|writeToFD
dedent|''
name|'def'
name|'writeToFD'
op|'('
name|'fd'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Write data to file descriptor.\n\n    Returns same thing FileDescriptor.writeSomeData would.\n\n    @type fd: C{int}\n    @param fd: non-blocking file descriptor to be written to.\n    @type data: C{str} or C{buffer}\n    @param data: bytes to write to fd.\n\n    @return: number of bytes written, or CONNECTION_LOST.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'os'
op|'.'
name|'write'
op|'('
name|'fd'
op|','
name|'data'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'OSError'
op|','
name|'IOError'
op|')'
op|','
name|'io'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'io'
op|'.'
name|'errno'
name|'in'
op|'('
name|'errno'
op|'.'
name|'EAGAIN'
op|','
name|'errno'
op|'.'
name|'EINTR'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'return'
name|'CONNECTION_LOST'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
string|'"setNonBlocking"'
op|','
string|'"setBlocking"'
op|','
string|'"readFromFD"'
op|','
string|'"writeToFD"'
op|']'
newline|'\n'
endmarker|''
end_unit

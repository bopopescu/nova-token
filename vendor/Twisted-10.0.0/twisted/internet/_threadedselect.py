begin_unit
comment|'# -*- test-case-name: twisted.test.test_internet -*-'
nl|'\n'
comment|'# $Id: default.py,v 1.90 2004/01/06 22:35:22 warner Exp $'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'generators'
newline|'\n'
nl|'\n'
string|'"""\nThreaded select reactor\n\nMaintainer: Bob Ippolito\n\n\nThe threadedselectreactor is a specialized reactor for integrating with\narbitrary foreign event loop, such as those you find in GUI toolkits.\n\nThere are three things you\'ll need to do to use this reactor.\n\nInstall the reactor at the beginning of your program, before importing\nthe rest of Twisted::\n\n    | from twisted.internet import _threadedselect\n    | _threadedselect.install()\n\nInterleave this reactor with your foreign event loop, at some point after\nyour event loop is initialized::\n\n    | from twisted.internet import reactor\n    | reactor.interleave(foreignEventLoopWakerFunction)\n    | self.addSystemEventTrigger(\'after\', \'shutdown\', foreignEventLoopStop)\n\nInstead of shutting down the foreign event loop directly, shut down the\nreactor::\n\n    | from twisted.internet import reactor\n    | reactor.stop()\n\nIn order for Twisted to do its work in the main thread (the thread that\ninterleave is called from), a waker function is necessary.  The waker function\nwill be called from a "background" thread with one argument: func.\nThe waker function\'s purpose is to call func() from the main thread.\nMany GUI toolkits ship with appropriate waker functions.\nSome examples of this are wxPython\'s wx.callAfter (may be wxCallAfter in\nolder versions of wxPython) or PyObjC\'s PyObjCTools.AppHelper.callAfter.\nThese would be used in place of "foreignEventLoopWakerFunction" in the above\nexample.\n\nThe other integration point at which the foreign event loop and this reactor\nmust integrate is shutdown.  In order to ensure clean shutdown of Twisted,\nyou must allow for Twisted to come to a complete stop before quitting the\napplication.  Typically, you will do this by setting up an after shutdown\ntrigger to stop your foreign event loop, and call reactor.stop() where you\nwould normally have initiated the shutdown procedure for the foreign event\nloop.  Shutdown functions that could be used in place of\n"foreignEventloopStop" would be the ExitMainLoop method of the wxApp instance\nwith wxPython, or the PyObjCTools.AppHelper.stopEventLoop function.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'threading'
name|'import'
name|'Thread'
newline|'\n'
name|'from'
name|'Queue'
name|'import'
name|'Queue'
op|','
name|'Empty'
newline|'\n'
name|'from'
name|'time'
name|'import'
name|'sleep'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IReactorFDSet'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'posixbase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'failure'
op|','
name|'threadable'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'persisted'
name|'import'
name|'styles'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'runtime'
name|'import'
name|'platformType'
newline|'\n'
nl|'\n'
name|'import'
name|'select'
newline|'\n'
name|'from'
name|'errno'
name|'import'
name|'EINTR'
op|','
name|'EBADF'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'selectreactor'
name|'import'
name|'_select'
newline|'\n'
nl|'\n'
comment|'# Exceptions that doSelect might return frequently'
nl|'\n'
DECL|variable|_NO_FILENO
name|'_NO_FILENO'
op|'='
name|'error'
op|'.'
name|'ConnectionFdescWentAway'
op|'('
string|"'Handler has no fileno method'"
op|')'
newline|'\n'
DECL|variable|_NO_FILEDESC
name|'_NO_FILEDESC'
op|'='
name|'error'
op|'.'
name|'ConnectionFdescWentAway'
op|'('
string|"'Filedescriptor went away'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|dictRemove
name|'def'
name|'dictRemove'
op|'('
name|'dct'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'dct'
op|'['
name|'value'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|raiseException
dedent|''
dedent|''
name|'def'
name|'raiseException'
op|'('
name|'e'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'raise'
name|'e'
newline|'\n'
nl|'\n'
DECL|class|ThreadedSelectReactor
dedent|''
name|'class'
name|'ThreadedSelectReactor'
op|'('
name|'posixbase'
op|'.'
name|'PosixReactorBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A threaded select() based reactor - runs on all POSIX platforms and on\n    Win32.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IReactorFDSet'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'threadable'
op|'.'
name|'init'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reads'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'writes'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'toThreadQueue'
op|'='
name|'Queue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'toMainThread'
op|'='
name|'Queue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'workerThread'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'mainWaker'
op|'='
name|'None'
newline|'\n'
name|'posixbase'
op|'.'
name|'PosixReactorBase'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addSystemEventTrigger'
op|'('
string|"'after'"
op|','
string|"'shutdown'"
op|','
name|'self'
op|'.'
name|'_mainLoopShutdown'
op|')'
newline|'\n'
nl|'\n'
DECL|member|wakeUp
dedent|''
name|'def'
name|'wakeUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# we want to wake up from any thread'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'waker'
op|'.'
name|'wakeUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|callLater
dedent|''
name|'def'
name|'callLater'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tple'
op|'='
name|'posixbase'
op|'.'
name|'PosixReactorBase'
op|'.'
name|'callLater'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'wakeUp'
op|'('
op|')'
newline|'\n'
name|'return'
name|'tple'
newline|'\n'
nl|'\n'
DECL|member|_sendToMain
dedent|''
name|'def'
name|'_sendToMain'
op|'('
name|'self'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
comment|"#print >>sys.stderr, 'sendToMain', msg, args"
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'toMainThread'
op|'.'
name|'put'
op|'('
op|'('
name|'msg'
op|','
name|'args'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'mainWaker'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mainWaker'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_sendToThread
dedent|''
dedent|''
name|'def'
name|'_sendToThread'
op|'('
name|'self'
op|','
name|'fn'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
comment|"#print >>sys.stderr, 'sendToThread', fn, args"
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'toThreadQueue'
op|'.'
name|'put'
op|'('
op|'('
name|'fn'
op|','
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_preenDescriptorsInThread
dedent|''
name|'def'
name|'_preenDescriptorsInThread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Malformed file descriptor found.  Preening lists."'
op|')'
newline|'\n'
name|'readers'
op|'='
name|'self'
op|'.'
name|'reads'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'writers'
op|'='
name|'self'
op|'.'
name|'writes'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reads'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'writes'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'for'
name|'selDict'
op|','
name|'selList'
name|'in'
op|'('
op|'('
name|'self'
op|'.'
name|'reads'
op|','
name|'readers'
op|')'
op|','
op|'('
name|'self'
op|'.'
name|'writes'
op|','
name|'writers'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'selectable'
name|'in'
name|'selList'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'select'
op|'.'
name|'select'
op|'('
op|'['
name|'selectable'
op|']'
op|','
op|'['
name|'selectable'
op|']'
op|','
op|'['
name|'selectable'
op|']'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                    '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"bad descriptor %s"'
op|'%'
name|'selectable'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'selDict'
op|'['
name|'selectable'
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|_workerInThread
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_workerInThread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'fn'
op|','
name|'args'
op|'='
name|'self'
op|'.'
name|'toThreadQueue'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
comment|'#print >>sys.stderr, "worker got", fn, args'
nl|'\n'
name|'fn'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'SystemExit'
op|':'
newline|'\n'
indent|'            '
name|'pass'
comment|'# exception indicates this thread should exit'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_sendToMain'
op|'('
string|"'Failure'"
op|','
name|'f'
op|')'
newline|'\n'
comment|'#print >>sys.stderr, "worker finished"'
nl|'\n'
nl|'\n'
DECL|member|_doSelectInThread
dedent|''
dedent|''
name|'def'
name|'_doSelectInThread'
op|'('
name|'self'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Run one iteration of the I/O monitor loop.\n\n        This will run all selectables who had input or output readiness\n        waiting for them.\n        """'
newline|'\n'
name|'reads'
op|'='
name|'self'
op|'.'
name|'reads'
newline|'\n'
name|'writes'
op|'='
name|'self'
op|'.'
name|'writes'
newline|'\n'
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'r'
op|','
name|'w'
op|','
name|'ignored'
op|'='
name|'_select'
op|'('
name|'reads'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
name|'writes'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
op|'['
op|']'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|','
name|'ve'
op|':'
newline|'\n'
comment|'# Possibly a file descriptor has gone negative?'
nl|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_preenDescriptorsInThread'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|','
name|'te'
op|':'
newline|'\n'
comment|'# Something *totally* invalid (object w/o fileno, non-integral'
nl|'\n'
comment|'# result) was passed'
nl|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_preenDescriptorsInThread'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'select'
op|'.'
name|'error'
op|','
name|'IOError'
op|')'
op|','
name|'se'
op|':'
newline|'\n'
comment|'# select(2) encountered an error'
nl|'\n'
indent|'                '
name|'if'
name|'se'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
name|'in'
op|'('
number|'0'
op|','
number|'2'
op|')'
op|':'
newline|'\n'
comment|'# windows does this if it got an empty list'
nl|'\n'
indent|'                    '
name|'if'
op|'('
name|'not'
name|'reads'
op|')'
name|'and'
op|'('
name|'not'
name|'writes'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'se'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|'=='
name|'EINTR'
op|':'
newline|'\n'
indent|'                    '
name|'return'
newline|'\n'
dedent|''
name|'elif'
name|'se'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|'=='
name|'EBADF'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_preenDescriptorsInThread'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# OK, I really don't know what's going on.  Blow up."
nl|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'_sendToMain'
op|'('
string|"'Notify'"
op|','
name|'r'
op|','
name|'w'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_process_Notify
dedent|''
name|'def'
name|'_process_Notify'
op|'('
name|'self'
op|','
name|'r'
op|','
name|'w'
op|')'
op|':'
newline|'\n'
comment|'#print >>sys.stderr, "_process_Notify"'
nl|'\n'
indent|'        '
name|'reads'
op|'='
name|'self'
op|'.'
name|'reads'
newline|'\n'
name|'writes'
op|'='
name|'self'
op|'.'
name|'writes'
newline|'\n'
nl|'\n'
name|'_drdw'
op|'='
name|'self'
op|'.'
name|'_doReadOrWrite'
newline|'\n'
name|'_logrun'
op|'='
name|'log'
op|'.'
name|'callWithLogger'
newline|'\n'
name|'for'
name|'selectables'
op|','
name|'method'
op|','
name|'dct'
name|'in'
op|'('
op|'('
name|'r'
op|','
string|'"doRead"'
op|','
name|'reads'
op|')'
op|','
op|'('
name|'w'
op|','
string|'"doWrite"'
op|','
name|'writes'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'selectable'
name|'in'
name|'selectables'
op|':'
newline|'\n'
comment|'# if this was disconnected in another thread, kill it.'
nl|'\n'
indent|'                '
name|'if'
name|'selectable'
name|'not'
name|'in'
name|'dct'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
comment|"# This for pausing input when we're not ready for more."
nl|'\n'
dedent|''
name|'_logrun'
op|'('
name|'selectable'
op|','
name|'_drdw'
op|','
name|'selectable'
op|','
name|'method'
op|','
name|'dct'
op|')'
newline|'\n'
comment|'#print >>sys.stderr, "done _process_Notify"'
nl|'\n'
nl|'\n'
DECL|member|_process_Failure
dedent|''
dedent|''
dedent|''
name|'def'
name|'_process_Failure'
op|'('
name|'self'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'.'
name|'raiseException'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_doIterationInThread
dedent|''
name|'_doIterationInThread'
op|'='
name|'_doSelectInThread'
newline|'\n'
nl|'\n'
DECL|member|ensureWorkerThread
name|'def'
name|'ensureWorkerThread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'workerThread'
name|'is'
name|'None'
name|'or'
name|'not'
name|'self'
op|'.'
name|'workerThread'
op|'.'
name|'isAlive'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'workerThread'
op|'='
name|'Thread'
op|'('
name|'target'
op|'='
name|'self'
op|'.'
name|'_workerInThread'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'workerThread'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|doThreadIteration
dedent|''
dedent|''
name|'def'
name|'doThreadIteration'
op|'('
name|'self'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_sendToThread'
op|'('
name|'self'
op|'.'
name|'_doIterationInThread'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ensureWorkerThread'
op|'('
op|')'
newline|'\n'
comment|"#print >>sys.stderr, 'getting...'"
nl|'\n'
name|'msg'
op|','
name|'args'
op|'='
name|'self'
op|'.'
name|'toMainThread'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
comment|"#print >>sys.stderr, 'got', msg, args"
nl|'\n'
name|'getattr'
op|'('
name|'self'
op|','
string|"'_process_'"
op|'+'
name|'msg'
op|')'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|doIteration
dedent|''
name|'doIteration'
op|'='
name|'doThreadIteration'
newline|'\n'
nl|'\n'
DECL|member|_interleave
name|'def'
name|'_interleave'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'while'
name|'self'
op|'.'
name|'running'
op|':'
newline|'\n'
comment|'#print >>sys.stderr, "runUntilCurrent"'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'runUntilCurrent'
op|'('
op|')'
newline|'\n'
name|'t2'
op|'='
name|'self'
op|'.'
name|'timeout'
op|'('
op|')'
newline|'\n'
name|'t'
op|'='
name|'self'
op|'.'
name|'running'
name|'and'
name|'t2'
newline|'\n'
name|'self'
op|'.'
name|'_sendToThread'
op|'('
name|'self'
op|'.'
name|'_doIterationInThread'
op|','
name|'t'
op|')'
newline|'\n'
comment|'#print >>sys.stderr, "yielding"'
nl|'\n'
name|'yield'
name|'None'
newline|'\n'
comment|'#print >>sys.stderr, "fetching"'
nl|'\n'
name|'msg'
op|','
name|'args'
op|'='
name|'self'
op|'.'
name|'toMainThread'
op|'.'
name|'get_nowait'
op|'('
op|')'
newline|'\n'
name|'getattr'
op|'('
name|'self'
op|','
string|"'_process_'"
op|'+'
name|'msg'
op|')'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|interleave
dedent|''
dedent|''
name|'def'
name|'interleave'
op|'('
name|'self'
op|','
name|'waker'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        interleave(waker) interleaves this reactor with the\n        current application by moving the blocking parts of\n        the reactor (select() in this case) to a separate\n        thread.  This is typically useful for integration with\n        GUI applications which have their own event loop\n        already running.\n\n        See the module docstring for more information.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'startRunning'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'loop'
op|'='
name|'self'
op|'.'
name|'_interleave'
op|'('
op|')'
newline|'\n'
DECL|function|mainWaker
name|'def'
name|'mainWaker'
op|'('
name|'waker'
op|'='
name|'waker'
op|','
name|'loop'
op|'='
name|'loop'
op|')'
op|':'
newline|'\n'
comment|'#print >>sys.stderr, "mainWaker()"'
nl|'\n'
indent|'            '
name|'waker'
op|'('
name|'loop'
op|'.'
name|'next'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mainWaker'
op|'='
name|'mainWaker'
newline|'\n'
name|'loop'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ensureWorkerThread'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_mainLoopShutdown
dedent|''
name|'def'
name|'_mainLoopShutdown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mainWaker'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'workerThread'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|"#print >>sys.stderr, 'getting...'"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_sendToThread'
op|'('
name|'raiseException'
op|','
name|'SystemExit'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'wakeUp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|','
name|'args'
op|'='
name|'self'
op|'.'
name|'toMainThread'
op|'.'
name|'get_nowait'
op|'('
op|')'
newline|'\n'
comment|'#print >>sys.stderr, "ignored:", (msg, args)'
nl|'\n'
dedent|''
dedent|''
name|'except'
name|'Empty'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'workerThread'
op|'.'
name|'join'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'workerThread'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'fn'
op|','
name|'args'
op|'='
name|'self'
op|'.'
name|'toThreadQueue'
op|'.'
name|'get_nowait'
op|'('
op|')'
newline|'\n'
name|'if'
name|'fn'
name|'is'
name|'self'
op|'.'
name|'_doIterationInThread'
op|':'
newline|'\n'
indent|'                    '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'Iteration is still in the thread queue!'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'fn'
name|'is'
name|'raiseException'
name|'and'
name|'args'
op|'['
number|'0'
op|']'
name|'is'
name|'SystemExit'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'fn'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'Empty'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_doReadOrWrite
dedent|''
dedent|''
name|'def'
name|'_doReadOrWrite'
op|'('
name|'self'
op|','
name|'selectable'
op|','
name|'method'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'why'
op|'='
name|'getattr'
op|'('
name|'selectable'
op|','
name|'method'
op|')'
op|'('
op|')'
newline|'\n'
name|'handfn'
op|'='
name|'getattr'
op|'('
name|'selectable'
op|','
string|"'fileno'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'handfn'
op|':'
newline|'\n'
indent|'                '
name|'why'
op|'='
name|'_NO_FILENO'
newline|'\n'
dedent|''
name|'elif'
name|'handfn'
op|'('
op|')'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'why'
op|'='
name|'_NO_FILEDESC'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'why'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'why'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_disconnectSelectable'
op|'('
name|'selectable'
op|','
name|'why'
op|','
name|'method'
op|'=='
string|'"doRead"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addReader
dedent|''
dedent|''
name|'def'
name|'addReader'
op|'('
name|'self'
op|','
name|'reader'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add a FileDescriptor for notification of data available to read.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_sendToThread'
op|'('
name|'self'
op|'.'
name|'reads'
op|'.'
name|'__setitem__'
op|','
name|'reader'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'wakeUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|addWriter
dedent|''
name|'def'
name|'addWriter'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add a FileDescriptor for notification of data available to write.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_sendToThread'
op|'('
name|'self'
op|'.'
name|'writes'
op|'.'
name|'__setitem__'
op|','
name|'writer'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'wakeUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|removeReader
dedent|''
name|'def'
name|'removeReader'
op|'('
name|'self'
op|','
name|'reader'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a Selectable for notification of data available to read.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_sendToThread'
op|'('
name|'dictRemove'
op|','
name|'self'
op|'.'
name|'reads'
op|','
name|'reader'
op|')'
newline|'\n'
nl|'\n'
DECL|member|removeWriter
dedent|''
name|'def'
name|'removeWriter'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a Selectable for notification of data available to write.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_sendToThread'
op|'('
name|'dictRemove'
op|','
name|'self'
op|'.'
name|'writes'
op|','
name|'writer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|removeAll
dedent|''
name|'def'
name|'removeAll'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_removeAll'
op|'('
name|'self'
op|'.'
name|'reads'
op|','
name|'self'
op|'.'
name|'writes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getReaders
dedent|''
name|'def'
name|'getReaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'reads'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getWriters
dedent|''
name|'def'
name|'getWriters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'writes'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'installSignalHandlers'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'startRunning'
op|'('
name|'installSignalHandlers'
op|'='
name|'installSignalHandlers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mainLoop'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|mainLoop
dedent|''
name|'def'
name|'mainLoop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'q'
op|'='
name|'Queue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'interleave'
op|'('
name|'q'
op|'.'
name|'put'
op|')'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'running'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'q'
op|'.'
name|'get'
op|'('
op|')'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|install
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'install'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Configure the twisted mainloop to be run using the select() reactor.\n    """'
newline|'\n'
name|'reactor'
op|'='
name|'ThreadedSelectReactor'
op|'('
op|')'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'main'
name|'import'
name|'installReactor'
newline|'\n'
name|'installReactor'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'return'
name|'reactor'
newline|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
name|'__all__'
op|'='
op|'['
string|"'install'"
op|']'
newline|'\n'
endmarker|''
end_unit

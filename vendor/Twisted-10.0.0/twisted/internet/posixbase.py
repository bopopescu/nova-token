begin_unit
comment|'# -*- test-case-name: twisted.test.test_internet -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nPosix reactor base class\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'warnings'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'classImplements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IReactorUNIX'
op|','
name|'IReactorUNIXDatagram'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IReactorTCP'
op|','
name|'IReactorUDP'
op|','
name|'IReactorSSL'
op|','
name|'IReactorArbitrary'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IReactorProcess'
op|','
name|'IReactorMulticast'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IHalfCloseableDescriptor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'tcp'
op|','
name|'udp'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'failure'
op|','
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'persisted'
name|'import'
name|'styles'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'runtime'
name|'import'
name|'platformType'
op|','
name|'platform'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'base'
name|'import'
name|'ReactorBase'
op|','
name|'_SignalReactorMixin'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'ssl'
newline|'\n'
DECL|variable|sslEnabled
name|'sslEnabled'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|sslEnabled
indent|'    '
name|'sslEnabled'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'unix'
newline|'\n'
DECL|variable|unixEnabled
name|'unixEnabled'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|unixEnabled
indent|'    '
name|'unixEnabled'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|variable|processEnabled
dedent|''
name|'processEnabled'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'platformType'
op|'=='
string|"'posix'"
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'fdesc'
op|','
name|'process'
op|','
name|'_signals'
newline|'\n'
DECL|variable|processEnabled
name|'processEnabled'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'platform'
op|'.'
name|'isWindows'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'win32process'
newline|'\n'
DECL|variable|processEnabled
name|'processEnabled'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|win32process
indent|'        '
name|'win32process'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_SocketWaker
dedent|''
dedent|''
name|'class'
name|'_SocketWaker'
op|'('
name|'log'
op|'.'
name|'Logger'
op|','
name|'styles'
op|'.'
name|'Ephemeral'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The I{self-pipe trick<http://cr.yp.to/docs/selfpipe.html>}, implemented\n    using a pair of sockets rather than pipes (due to the lack of support in\n    select() on Windows for pipes), used to wake up the main loop from\n    another thread.\n    """'
newline|'\n'
DECL|variable|disconnected
name|'disconnected'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
comment|"# Following select_trigger (from asyncore)'s example;"
nl|'\n'
name|'server'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
name|'socket'
op|'.'
name|'AF_INET'
op|','
name|'socket'
op|'.'
name|'SOCK_STREAM'
op|')'
newline|'\n'
name|'client'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
name|'socket'
op|'.'
name|'AF_INET'
op|','
name|'socket'
op|'.'
name|'SOCK_STREAM'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'IPPROTO_TCP'
op|','
name|'socket'
op|'.'
name|'TCP_NODELAY'
op|','
number|'1'
op|')'
newline|'\n'
name|'server'
op|'.'
name|'bind'
op|'('
op|'('
string|"'127.0.0.1'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'server'
op|'.'
name|'listen'
op|'('
number|'1'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'connect'
op|'('
name|'server'
op|'.'
name|'getsockname'
op|'('
op|')'
op|')'
newline|'\n'
name|'reader'
op|','
name|'clientaddr'
op|'='
name|'server'
op|'.'
name|'accept'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'setblocking'
op|'('
number|'0'
op|')'
newline|'\n'
name|'reader'
op|'.'
name|'setblocking'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'r'
op|'='
name|'reader'
newline|'\n'
name|'self'
op|'.'
name|'w'
op|'='
name|'client'
newline|'\n'
name|'self'
op|'.'
name|'fileno'
op|'='
name|'self'
op|'.'
name|'r'
op|'.'
name|'fileno'
newline|'\n'
nl|'\n'
DECL|member|wakeUp
dedent|''
name|'def'
name|'wakeUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a byte to my connection.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'util'
op|'.'
name|'untilConcludes'
op|'('
name|'self'
op|'.'
name|'w'
op|'.'
name|'send'
op|','
string|"'x'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|','
op|'('
name|'err'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'err'
op|'!='
name|'errno'
op|'.'
name|'WSAEWOULDBLOCK'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|doRead
dedent|''
dedent|''
dedent|''
name|'def'
name|'doRead'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Read some data from my connection.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'r'
op|'.'
name|'recv'
op|'('
number|'8192'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'r'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'w'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_FDWaker
dedent|''
dedent|''
name|'class'
name|'_FDWaker'
op|'('
name|'object'
op|','
name|'log'
op|'.'
name|'Logger'
op|','
name|'styles'
op|'.'
name|'Ephemeral'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The I{self-pipe trick<http://cr.yp.to/docs/selfpipe.html>}, used to wake\n    up the main loop from another thread or a signal handler.\n\n    L{_FDWaker} is a base class for waker implementations based on\n    writing to a pipe being monitored by the reactor.\n\n    @ivar o: The file descriptor for the end of the pipe which can be\n        written to to wake up a reactor monitoring this waker.\n\n    @ivar i: The file descriptor which should be monitored in order to\n        be awoken by this waker.\n    """'
newline|'\n'
DECL|variable|disconnected
name|'disconnected'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|variable|i
name|'i'
op|'='
name|'None'
newline|'\n'
DECL|variable|o
name|'o'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
name|'self'
op|'.'
name|'i'
op|','
name|'self'
op|'.'
name|'o'
op|'='
name|'os'
op|'.'
name|'pipe'
op|'('
op|')'
newline|'\n'
name|'fdesc'
op|'.'
name|'setNonBlocking'
op|'('
name|'self'
op|'.'
name|'i'
op|')'
newline|'\n'
name|'fdesc'
op|'.'
name|'_setCloseOnExec'
op|'('
name|'self'
op|'.'
name|'i'
op|')'
newline|'\n'
name|'fdesc'
op|'.'
name|'setNonBlocking'
op|'('
name|'self'
op|'.'
name|'o'
op|')'
newline|'\n'
name|'fdesc'
op|'.'
name|'_setCloseOnExec'
op|'('
name|'self'
op|'.'
name|'o'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fileno'
op|'='
name|'lambda'
op|':'
name|'self'
op|'.'
name|'i'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|doRead
dedent|''
name|'def'
name|'doRead'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Read some bytes from the pipe and discard them.\n        """'
newline|'\n'
name|'fdesc'
op|'.'
name|'readFromFD'
op|'('
name|'self'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'lambda'
name|'data'
op|':'
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Close both ends of my pipe.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"o"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'for'
name|'fd'
name|'in'
name|'self'
op|'.'
name|'i'
op|','
name|'self'
op|'.'
name|'o'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'close'
op|'('
name|'fd'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'del'
name|'self'
op|'.'
name|'i'
op|','
name|'self'
op|'.'
name|'o'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_UnixWaker
dedent|''
dedent|''
name|'class'
name|'_UnixWaker'
op|'('
name|'_FDWaker'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class provides a simple interface to wake up the event loop.\n\n    This is used by threads or signals to wake up the event loop.\n    """'
newline|'\n'
nl|'\n'
DECL|member|wakeUp
name|'def'
name|'wakeUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write one byte to the pipe, and flush it.\n        """'
newline|'\n'
comment|"# We don't use fdesc.writeToFD since we need to distinguish"
nl|'\n'
comment|'# between EINTR (try again) and EAGAIN (do nothing).'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'o'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'util'
op|'.'
name|'untilConcludes'
op|'('
name|'os'
op|'.'
name|'write'
op|','
name|'self'
op|'.'
name|'o'
op|','
string|"'x'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# XXX There is no unit test for raising the exception'
nl|'\n'
comment|'# for other errnos. See #4285.'
nl|'\n'
indent|'                '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'EAGAIN'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'if'
name|'platformType'
op|'=='
string|"'posix'"
op|':'
newline|'\n'
DECL|variable|_Waker
indent|'    '
name|'_Waker'
op|'='
name|'_UnixWaker'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Primarily Windows and Jython.'
nl|'\n'
DECL|variable|_Waker
indent|'    '
name|'_Waker'
op|'='
name|'_SocketWaker'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_SIGCHLDWaker
dedent|''
name|'class'
name|'_SIGCHLDWaker'
op|'('
name|'_FDWaker'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{_SIGCHLDWaker} can wake up a reactor whenever C{SIGCHLD} is\n    received.\n\n    @see: L{twisted.internet._signals}\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'_FDWaker'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|install
dedent|''
name|'def'
name|'install'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Install the handler necessary to make this waker active.\n        """'
newline|'\n'
name|'_signals'
op|'.'
name|'installHandler'
op|'('
name|'self'
op|'.'
name|'o'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|uninstall
dedent|''
name|'def'
name|'uninstall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove the handler which makes this waker active.\n        """'
newline|'\n'
name|'_signals'
op|'.'
name|'installHandler'
op|'('
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|doRead
dedent|''
name|'def'
name|'doRead'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Having woken up the reactor in response to receipt of\n        C{SIGCHLD}, reap the process which exited.\n\n        This is called whenever the reactor notices the waker pipe is\n        writeable, which happens soon after any call to the C{wakeUp}\n        method.\n        """'
newline|'\n'
name|'_FDWaker'
op|'.'
name|'doRead'
op|'('
name|'self'
op|')'
newline|'\n'
name|'process'
op|'.'
name|'reapAllProcesses'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PosixReactorBase
dedent|''
dedent|''
name|'class'
name|'PosixReactorBase'
op|'('
name|'_SignalReactorMixin'
op|','
name|'ReactorBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A basis for reactors that use file descriptors.\n\n    @ivar _childWaker: C{None} or a reference to the L{_SIGCHLDWaker}\n        which is used to properly notice child process termination.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IReactorArbitrary'
op|','
name|'IReactorTCP'
op|','
name|'IReactorUDP'
op|','
name|'IReactorMulticast'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_disconnectSelectable
name|'def'
name|'_disconnectSelectable'
op|'('
name|'self'
op|','
name|'selectable'
op|','
name|'why'
op|','
name|'isRead'
op|','
name|'faildict'
op|'='
op|'{'
nl|'\n'
name|'error'
op|'.'
name|'ConnectionDone'
op|':'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'error'
op|'.'
name|'ConnectionLost'
op|':'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionLost'
op|'('
op|')'
op|')'
nl|'\n'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Utility function for disconnecting a selectable.\n\n        Supports half-close notification, isRead should be boolean indicating\n        whether error resulted from doRead().\n        """'
newline|'\n'
name|'self'
op|'.'
name|'removeReader'
op|'('
name|'selectable'
op|')'
newline|'\n'
name|'f'
op|'='
name|'faildict'
op|'.'
name|'get'
op|'('
name|'why'
op|'.'
name|'__class__'
op|')'
newline|'\n'
name|'if'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'isRead'
name|'and'
name|'why'
op|'.'
name|'__class__'
op|'=='
name|'error'
op|'.'
name|'ConnectionDone'
nl|'\n'
name|'and'
name|'IHalfCloseableDescriptor'
op|'.'
name|'providedBy'
op|'('
name|'selectable'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'selectable'
op|'.'
name|'readConnectionLost'
op|'('
name|'f'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'removeWriter'
op|'('
name|'selectable'
op|')'
newline|'\n'
name|'selectable'
op|'.'
name|'connectionLost'
op|'('
name|'f'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'removeWriter'
op|'('
name|'selectable'
op|')'
newline|'\n'
name|'selectable'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'why'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|installWaker
dedent|''
dedent|''
name|'def'
name|'installWaker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Install a `waker\' to allow threads and signals to wake up the IO thread.\n\n        We use the self-pipe trick (http://cr.yp.to/docs/selfpipe.html) to wake\n        the reactor. On Windows we use a pair of sockets.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'waker'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'waker'
op|'='
name|'_Waker'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_internalReaders'
op|'.'
name|'add'
op|'('
name|'self'
op|'.'
name|'waker'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addReader'
op|'('
name|'self'
op|'.'
name|'waker'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_childWaker
dedent|''
dedent|''
name|'_childWaker'
op|'='
name|'None'
newline|'\n'
DECL|member|_handleSignals
name|'def'
name|'_handleSignals'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Extend the basic signal handling logic to also support\n        handling SIGCHLD to know when to try to reap child processes.\n        """'
newline|'\n'
name|'_SignalReactorMixin'
op|'.'
name|'_handleSignals'
op|'('
name|'self'
op|')'
newline|'\n'
name|'if'
name|'platformType'
op|'=='
string|"'posix'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_childWaker'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_childWaker'
op|'='
name|'_SIGCHLDWaker'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_internalReaders'
op|'.'
name|'add'
op|'('
name|'self'
op|'.'
name|'_childWaker'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addReader'
op|'('
name|'self'
op|'.'
name|'_childWaker'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_childWaker'
op|'.'
name|'install'
op|'('
op|')'
newline|'\n'
comment|'# Also reap all processes right now, in case we missed any'
nl|'\n'
comment|'# signals before we installed the SIGCHLD waker/handler.'
nl|'\n'
comment|'# This should only happen if someone used spawnProcess'
nl|'\n'
comment|'# before calling reactor.run (and the process also exited'
nl|'\n'
comment|'# already).'
nl|'\n'
name|'process'
op|'.'
name|'reapAllProcesses'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_uninstallHandler
dedent|''
dedent|''
name|'def'
name|'_uninstallHandler'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a child waker was created and installed, uninstall it now.\n\n        Since this disables reactor functionality and is only called\n        when the reactor is stopping, it doesn\'t provide any directly\n        useful functionality, but the cleanup of reactor-related\n        process-global state that it does helps in unit tests\n        involving multiple reactors and is generally just a nice\n        thing.\n        """'
newline|'\n'
comment|'# XXX This would probably be an alright place to put all of'
nl|'\n'
comment|'# the cleanup code for all internal readers (here and in the'
nl|'\n'
comment|'# base class, anyway).  See #3063 for that cleanup task.'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_childWaker'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_childWaker'
op|'.'
name|'uninstall'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# IReactorProcess'
nl|'\n'
nl|'\n'
DECL|member|spawnProcess
dedent|''
dedent|''
name|'def'
name|'spawnProcess'
op|'('
name|'self'
op|','
name|'processProtocol'
op|','
name|'executable'
op|','
name|'args'
op|'='
op|'('
op|')'
op|','
nl|'\n'
name|'env'
op|'='
op|'{'
op|'}'
op|','
name|'path'
op|'='
name|'None'
op|','
nl|'\n'
name|'uid'
op|'='
name|'None'
op|','
name|'gid'
op|'='
name|'None'
op|','
name|'usePTY'
op|'='
number|'0'
op|','
name|'childFDs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|','
name|'env'
op|'='
name|'self'
op|'.'
name|'_checkProcessArgs'
op|'('
name|'args'
op|','
name|'env'
op|')'
newline|'\n'
name|'if'
name|'platformType'
op|'=='
string|"'posix'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'usePTY'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'childFDs'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ValueError'
op|'('
string|'"Using childFDs is not supported with usePTY=True."'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'process'
op|'.'
name|'PTYProcess'
op|'('
name|'self'
op|','
name|'executable'
op|','
name|'args'
op|','
name|'env'
op|','
name|'path'
op|','
nl|'\n'
name|'processProtocol'
op|','
name|'uid'
op|','
name|'gid'
op|','
name|'usePTY'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'process'
op|'.'
name|'Process'
op|'('
name|'self'
op|','
name|'executable'
op|','
name|'args'
op|','
name|'env'
op|','
name|'path'
op|','
nl|'\n'
name|'processProtocol'
op|','
name|'uid'
op|','
name|'gid'
op|','
name|'childFDs'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'platformType'
op|'=='
string|'"win32"'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'uid'
name|'is'
name|'not'
name|'None'
name|'or'
name|'gid'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|'"The uid and gid parameters are not supported on Windows."'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'usePTY'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|'"The usePTY parameter is not supported on Windows."'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'childFDs'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|'"Customizing childFDs is not supported on Windows."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'win32process'
op|':'
newline|'\n'
indent|'                '
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'_dumbwin32proc'
name|'import'
name|'Process'
newline|'\n'
name|'return'
name|'Process'
op|'('
name|'self'
op|','
name|'processProtocol'
op|','
name|'executable'
op|','
name|'args'
op|','
name|'env'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'NotImplementedError'
op|','
string|'"spawnProcess not available since pywin32 is not installed."'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|','
string|'"spawnProcess only available on Windows or POSIX."'
newline|'\n'
nl|'\n'
comment|'# IReactorUDP'
nl|'\n'
nl|'\n'
DECL|member|listenUDP
dedent|''
dedent|''
name|'def'
name|'listenUDP'
op|'('
name|'self'
op|','
name|'port'
op|','
name|'protocol'
op|','
name|'interface'
op|'='
string|"''"
op|','
name|'maxPacketSize'
op|'='
number|'8192'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connects a given L{DatagramProtocol} to the given numeric UDP port.\n\n        @returns: object conforming to L{IListeningPort}.\n        """'
newline|'\n'
name|'p'
op|'='
name|'udp'
op|'.'
name|'Port'
op|'('
name|'port'
op|','
name|'protocol'
op|','
name|'interface'
op|','
name|'maxPacketSize'
op|','
name|'self'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'startListening'
op|'('
op|')'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
comment|'# IReactorMulticast'
nl|'\n'
nl|'\n'
DECL|member|listenMulticast
dedent|''
name|'def'
name|'listenMulticast'
op|'('
name|'self'
op|','
name|'port'
op|','
name|'protocol'
op|','
name|'interface'
op|'='
string|"''"
op|','
name|'maxPacketSize'
op|'='
number|'8192'
op|','
name|'listenMultiple'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connects a given DatagramProtocol to the given numeric UDP port.\n\n        EXPERIMENTAL.\n\n        @returns: object conforming to IListeningPort.\n        """'
newline|'\n'
name|'p'
op|'='
name|'udp'
op|'.'
name|'MulticastPort'
op|'('
name|'port'
op|','
name|'protocol'
op|','
name|'interface'
op|','
name|'maxPacketSize'
op|','
name|'self'
op|','
name|'listenMultiple'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'startListening'
op|'('
op|')'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# IReactorUNIX'
nl|'\n'
nl|'\n'
DECL|member|connectUNIX
dedent|''
name|'def'
name|'connectUNIX'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'factory'
op|','
name|'timeout'
op|'='
number|'30'
op|','
name|'checkPID'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""@see: twisted.internet.interfaces.IReactorUNIX.connectUNIX\n        """'
newline|'\n'
name|'assert'
name|'unixEnabled'
op|','
string|'"UNIX support is not present"'
newline|'\n'
name|'c'
op|'='
name|'unix'
op|'.'
name|'Connector'
op|'('
name|'address'
op|','
name|'factory'
op|','
name|'timeout'
op|','
name|'self'
op|','
name|'checkPID'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
name|'return'
name|'c'
newline|'\n'
nl|'\n'
DECL|variable|_unspecified
dedent|''
name|'_unspecified'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
DECL|member|_checkMode
name|'def'
name|'_checkMode'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check C{mode} to see if a value was specified for it and emit a\n        deprecation warning if so.  Return the default value if none was\n        specified, otherwise return C{mode}.\n        """'
newline|'\n'
name|'if'
name|'mode'
name|'is'
name|'not'
name|'self'
op|'.'
name|'_unspecified'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|"'The mode parameter of %(name)s will be removed.  Do not pass '"
nl|'\n'
string|"'a value for it.  Set permissions on the containing directory '"
nl|'\n'
string|"'before calling %(name)s, instead.'"
op|'%'
name|'dict'
op|'('
name|'name'
op|'='
name|'name'
op|')'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'3'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'mode'
op|'='
number|'0666'
newline|'\n'
dedent|''
name|'return'
name|'mode'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|listenUNIX
dedent|''
name|'def'
name|'listenUNIX'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'factory'
op|','
name|'backlog'
op|'='
number|'50'
op|','
name|'mode'
op|'='
name|'_unspecified'
op|','
nl|'\n'
name|'wantPID'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @see: twisted.internet.interfaces.IReactorUNIX.listenUNIX\n        """'
newline|'\n'
name|'assert'
name|'unixEnabled'
op|','
string|'"UNIX support is not present"'
newline|'\n'
name|'mode'
op|'='
name|'self'
op|'.'
name|'_checkMode'
op|'('
string|"'IReactorUNIX.listenUNIX'"
op|','
name|'mode'
op|')'
newline|'\n'
name|'p'
op|'='
name|'unix'
op|'.'
name|'Port'
op|'('
name|'address'
op|','
name|'factory'
op|','
name|'backlog'
op|','
name|'mode'
op|','
name|'self'
op|','
name|'wantPID'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'startListening'
op|'('
op|')'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# IReactorUNIXDatagram'
nl|'\n'
nl|'\n'
DECL|member|listenUNIXDatagram
dedent|''
name|'def'
name|'listenUNIXDatagram'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'protocol'
op|','
name|'maxPacketSize'
op|'='
number|'8192'
op|','
nl|'\n'
name|'mode'
op|'='
name|'_unspecified'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connects a given L{DatagramProtocol} to the given path.\n\n        EXPERIMENTAL.\n\n        @returns: object conforming to L{IListeningPort}.\n        """'
newline|'\n'
name|'assert'
name|'unixEnabled'
op|','
string|'"UNIX support is not present"'
newline|'\n'
name|'mode'
op|'='
name|'self'
op|'.'
name|'_checkMode'
op|'('
string|"'IReactorUNIXDatagram.listenUNIXDatagram'"
op|','
name|'mode'
op|')'
newline|'\n'
name|'p'
op|'='
name|'unix'
op|'.'
name|'DatagramPort'
op|'('
name|'address'
op|','
name|'protocol'
op|','
name|'maxPacketSize'
op|','
name|'mode'
op|','
name|'self'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'startListening'
op|'('
op|')'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
DECL|member|connectUNIXDatagram
dedent|''
name|'def'
name|'connectUNIXDatagram'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'protocol'
op|','
name|'maxPacketSize'
op|'='
number|'8192'
op|','
nl|'\n'
name|'mode'
op|'='
name|'_unspecified'
op|','
name|'bindAddress'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connects a L{ConnectedDatagramProtocol} instance to a path.\n\n        EXPERIMENTAL.\n        """'
newline|'\n'
name|'assert'
name|'unixEnabled'
op|','
string|'"UNIX support is not present"'
newline|'\n'
name|'mopde'
op|'='
name|'self'
op|'.'
name|'_checkMode'
op|'('
string|"'IReactorUNIXDatagram.connectUNIXDatagram'"
op|','
name|'mode'
op|')'
newline|'\n'
name|'p'
op|'='
name|'unix'
op|'.'
name|'ConnectedDatagramPort'
op|'('
name|'address'
op|','
name|'protocol'
op|','
name|'maxPacketSize'
op|','
name|'mode'
op|','
name|'bindAddress'
op|','
name|'self'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'startListening'
op|'('
op|')'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# IReactorTCP'
nl|'\n'
nl|'\n'
DECL|member|listenTCP
dedent|''
name|'def'
name|'listenTCP'
op|'('
name|'self'
op|','
name|'port'
op|','
name|'factory'
op|','
name|'backlog'
op|'='
number|'50'
op|','
name|'interface'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""@see: twisted.internet.interfaces.IReactorTCP.listenTCP\n        """'
newline|'\n'
name|'p'
op|'='
name|'tcp'
op|'.'
name|'Port'
op|'('
name|'port'
op|','
name|'factory'
op|','
name|'backlog'
op|','
name|'interface'
op|','
name|'self'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'startListening'
op|'('
op|')'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
DECL|member|connectTCP
dedent|''
name|'def'
name|'connectTCP'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|','
name|'timeout'
op|'='
number|'30'
op|','
name|'bindAddress'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""@see: twisted.internet.interfaces.IReactorTCP.connectTCP\n        """'
newline|'\n'
name|'c'
op|'='
name|'tcp'
op|'.'
name|'Connector'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|','
name|'timeout'
op|','
name|'bindAddress'
op|','
name|'self'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
name|'return'
name|'c'
newline|'\n'
nl|'\n'
comment|'# IReactorSSL (sometimes, not implemented)'
nl|'\n'
nl|'\n'
DECL|member|connectSSL
dedent|''
name|'def'
name|'connectSSL'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|','
name|'contextFactory'
op|','
name|'timeout'
op|'='
number|'30'
op|','
name|'bindAddress'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""@see: twisted.internet.interfaces.IReactorSSL.connectSSL\n        """'
newline|'\n'
name|'assert'
name|'sslEnabled'
op|','
string|'"SSL support is not present"'
newline|'\n'
name|'c'
op|'='
name|'ssl'
op|'.'
name|'Connector'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|','
name|'contextFactory'
op|','
name|'timeout'
op|','
name|'bindAddress'
op|','
name|'self'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
name|'return'
name|'c'
newline|'\n'
nl|'\n'
DECL|member|listenSSL
dedent|''
name|'def'
name|'listenSSL'
op|'('
name|'self'
op|','
name|'port'
op|','
name|'factory'
op|','
name|'contextFactory'
op|','
name|'backlog'
op|'='
number|'50'
op|','
name|'interface'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""@see: twisted.internet.interfaces.IReactorSSL.listenSSL\n        """'
newline|'\n'
name|'assert'
name|'sslEnabled'
op|','
string|'"SSL support is not present"'
newline|'\n'
name|'p'
op|'='
name|'ssl'
op|'.'
name|'Port'
op|'('
name|'port'
op|','
name|'factory'
op|','
name|'contextFactory'
op|','
name|'backlog'
op|','
name|'interface'
op|','
name|'self'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'startListening'
op|'('
op|')'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
comment|'# IReactorArbitrary'
nl|'\n'
DECL|member|listenWith
dedent|''
name|'def'
name|'listenWith'
op|'('
name|'self'
op|','
name|'portType'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kw'
op|'['
string|"'reactor'"
op|']'
op|'='
name|'self'
newline|'\n'
name|'p'
op|'='
name|'portType'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'startListening'
op|'('
op|')'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
DECL|member|connectWith
dedent|''
name|'def'
name|'connectWith'
op|'('
name|'self'
op|','
name|'connectorType'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kw'
op|'['
string|"'reactor'"
op|']'
op|'='
name|'self'
newline|'\n'
name|'c'
op|'='
name|'connectorType'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
name|'return'
name|'c'
newline|'\n'
nl|'\n'
DECL|member|_removeAll
dedent|''
name|'def'
name|'_removeAll'
op|'('
name|'self'
op|','
name|'readers'
op|','
name|'writers'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove all readers and writers, and list of removed L{IReadDescriptor}s\n        and L{IWriteDescriptor}s.\n\n        Meant for calling from subclasses, to implement removeAll, like::\n\n          def removeAll(self):\n              return self._removeAll(self._reads, self._writes)\n\n        where C{self._reads} and C{self._writes} are iterables.\n        """'
newline|'\n'
name|'removedReaders'
op|'='
name|'set'
op|'('
name|'readers'
op|')'
op|'-'
name|'self'
op|'.'
name|'_internalReaders'
newline|'\n'
name|'for'
name|'reader'
name|'in'
name|'removedReaders'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'removeReader'
op|'('
name|'reader'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'removedWriters'
op|'='
name|'set'
op|'('
name|'writers'
op|')'
newline|'\n'
name|'for'
name|'writer'
name|'in'
name|'removedWriters'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'removeWriter'
op|'('
name|'writer'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'list'
op|'('
name|'removedReaders'
op|'|'
name|'removedWriters'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'sslEnabled'
op|':'
newline|'\n'
indent|'    '
name|'classImplements'
op|'('
name|'PosixReactorBase'
op|','
name|'IReactorSSL'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'unixEnabled'
op|':'
newline|'\n'
indent|'    '
name|'classImplements'
op|'('
name|'PosixReactorBase'
op|','
name|'IReactorUNIX'
op|','
name|'IReactorUNIXDatagram'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'processEnabled'
op|':'
newline|'\n'
indent|'    '
name|'classImplements'
op|'('
name|'PosixReactorBase'
op|','
name|'IReactorProcess'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
name|'__all__'
op|'='
op|'['
string|'"PosixReactorBase"'
op|']'
newline|'\n'
endmarker|''
end_unit

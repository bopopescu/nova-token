begin_unit
comment|'# -*- test-case-name: twisted.test.test_internet -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nVery basic functionality for a Reactor implementation.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'socket'
comment|'# needed only for sync-dns'
newline|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'classImplements'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
name|'from'
name|'heapq'
name|'import'
name|'heappush'
op|','
name|'heappop'
op|','
name|'heapify'
newline|'\n'
nl|'\n'
name|'import'
name|'traceback'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'unsignedID'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IReactorCore'
op|','
name|'IReactorTime'
op|','
name|'IReactorThreads'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IResolverSimple'
op|','
name|'IReactorPluggableResolver'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IConnector'
op|','
name|'IDelayedCall'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'fdesc'
op|','
name|'main'
op|','
name|'error'
op|','
name|'abstract'
op|','
name|'defer'
op|','
name|'threads'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'failure'
op|','
name|'reflect'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'runtime'
name|'import'
name|'seconds'
name|'as'
name|'runtimeSeconds'
op|','
name|'platform'
op|','
name|'platformType'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
op|','
name|'DeferredList'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'persisted'
name|'import'
name|'styles'
newline|'\n'
nl|'\n'
comment|"# This import is for side-effects!  Even if you don't see any code using it"
nl|'\n'
comment|"# in this module, don't delete it."
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'threadable'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DelayedCall
name|'class'
name|'DelayedCall'
op|'('
name|'styles'
op|'.'
name|'Ephemeral'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'implements'
op|'('
name|'IDelayedCall'
op|')'
newline|'\n'
comment|'# enable .debug to record creator call stack, and it will be logged if'
nl|'\n'
comment|'# an exception occurs while the function is being run'
nl|'\n'
DECL|variable|debug
name|'debug'
op|'='
name|'False'
newline|'\n'
DECL|variable|_str
name|'_str'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'time'
op|','
name|'func'
op|','
name|'args'
op|','
name|'kw'
op|','
name|'cancel'
op|','
name|'reset'
op|','
nl|'\n'
name|'seconds'
op|'='
name|'runtimeSeconds'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param time: Seconds from the epoch at which to call C{func}.\n        @param func: The callable to call.\n        @param args: The positional arguments to pass to the callable.\n        @param kw: The keyword arguments to pass to the callable.\n        @param cancel: A callable which will be called with this\n            DelayedCall before cancellation.\n        @param reset: A callable which will be called with this\n            DelayedCall after changing this DelayedCall\'s scheduled\n            execution time. The callable should adjust any necessary\n            scheduling details to ensure this DelayedCall is invoked\n            at the new appropriate time.\n        @param seconds: If provided, a no-argument callable which will be\n            used to determine the current time any time that information is\n            needed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'time'
op|','
name|'self'
op|'.'
name|'func'
op|','
name|'self'
op|'.'
name|'args'
op|','
name|'self'
op|'.'
name|'kw'
op|'='
name|'time'
op|','
name|'func'
op|','
name|'args'
op|','
name|'kw'
newline|'\n'
name|'self'
op|'.'
name|'resetter'
op|'='
name|'reset'
newline|'\n'
name|'self'
op|'.'
name|'canceller'
op|'='
name|'cancel'
newline|'\n'
name|'self'
op|'.'
name|'seconds'
op|'='
name|'seconds'
newline|'\n'
name|'self'
op|'.'
name|'cancelled'
op|'='
name|'self'
op|'.'
name|'called'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'delayed_time'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'debug'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'creator'
op|'='
name|'traceback'
op|'.'
name|'format_stack'
op|'('
op|')'
op|'['
op|':'
op|'-'
number|'2'
op|']'
newline|'\n'
nl|'\n'
DECL|member|getTime
dedent|''
dedent|''
name|'def'
name|'getTime'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the time at which this call will fire\n\n        @rtype: C{float}\n        @return: The number of seconds after the epoch at which this call is\n        scheduled to be made.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'time'
op|'+'
name|'self'
op|'.'
name|'delayed_time'
newline|'\n'
nl|'\n'
DECL|member|cancel
dedent|''
name|'def'
name|'cancel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unschedule this call\n\n        @raise AlreadyCancelled: Raised if this call has already been\n        unscheduled.\n\n        @raise AlreadyCalled: Raised if this call has already been made.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'cancelled'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'AlreadyCancelled'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'called'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'AlreadyCalled'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'canceller'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cancelled'
op|'='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'debug'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_str'
op|'='
name|'str'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'func'
op|','
name|'self'
op|'.'
name|'args'
op|','
name|'self'
op|'.'
name|'kw'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|','
name|'secondsFromNow'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reschedule this call for a different time\n\n        @type secondsFromNow: C{float}\n        @param secondsFromNow: The number of seconds from the time of the\n        C{reset} call at which this call will be scheduled.\n\n        @raise AlreadyCancelled: Raised if this call has been cancelled.\n        @raise AlreadyCalled: Raised if this call has already been made.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'cancelled'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'AlreadyCancelled'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'called'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'AlreadyCalled'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'newTime'
op|'='
name|'self'
op|'.'
name|'seconds'
op|'('
op|')'
op|'+'
name|'secondsFromNow'
newline|'\n'
name|'if'
name|'newTime'
op|'<'
name|'self'
op|'.'
name|'time'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'delayed_time'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'time'
op|'='
name|'newTime'
newline|'\n'
name|'self'
op|'.'
name|'resetter'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'delayed_time'
op|'='
name|'newTime'
op|'-'
name|'self'
op|'.'
name|'time'
newline|'\n'
nl|'\n'
DECL|member|delay
dedent|''
dedent|''
dedent|''
name|'def'
name|'delay'
op|'('
name|'self'
op|','
name|'secondsLater'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reschedule this call for a later time\n\n        @type secondsLater: C{float}\n        @param secondsLater: The number of seconds after the originally\n        scheduled time for which to reschedule this call.\n\n        @raise AlreadyCancelled: Raised if this call has been cancelled.\n        @raise AlreadyCalled: Raised if this call has already been made.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'cancelled'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'AlreadyCancelled'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'called'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'AlreadyCalled'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'delayed_time'
op|'+='
name|'secondsLater'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'delayed_time'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'activate_delay'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'resetter'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|activate_delay
dedent|''
dedent|''
dedent|''
name|'def'
name|'activate_delay'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'time'
op|'+='
name|'self'
op|'.'
name|'delayed_time'
newline|'\n'
name|'self'
op|'.'
name|'delayed_time'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|active
dedent|''
name|'def'
name|'active'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine whether this call is still pending\n\n        @rtype: C{bool}\n        @return: True if this call has not yet been made or cancelled,\n        False otherwise.\n        """'
newline|'\n'
name|'return'
name|'not'
op|'('
name|'self'
op|'.'
name|'cancelled'
name|'or'
name|'self'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__le__
dedent|''
name|'def'
name|'__le__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'time'
op|'<='
name|'other'
op|'.'
name|'time'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_str'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_str'
newline|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|"'func'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'func'
op|','
string|"'func_name'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'func'
op|'='
name|'self'
op|'.'
name|'func'
op|'.'
name|'func_name'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'func'
op|','
string|"'im_class'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'func'
op|'='
name|'self'
op|'.'
name|'func'
op|'.'
name|'im_class'
op|'.'
name|'__name__'
op|'+'
string|"'.'"
op|'+'
name|'func'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'func'
op|'='
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'self'
op|'.'
name|'func'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'func'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'now'
op|'='
name|'self'
op|'.'
name|'seconds'
op|'('
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
string|'"<DelayedCall 0x%x [%ss] called=%s cancelled=%s"'
op|'%'
op|'('
nl|'\n'
name|'unsignedID'
op|'('
name|'self'
op|')'
op|','
name|'self'
op|'.'
name|'time'
op|'-'
name|'now'
op|','
name|'self'
op|'.'
name|'called'
op|','
nl|'\n'
name|'self'
op|'.'
name|'cancelled'
op|')'
op|']'
newline|'\n'
name|'if'
name|'func'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'L'
op|'.'
name|'extend'
op|'('
op|'('
string|'" "'
op|','
name|'func'
op|','
string|'"("'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'args'
op|':'
newline|'\n'
indent|'                '
name|'L'
op|'.'
name|'append'
op|'('
string|'", "'
op|'.'
name|'join'
op|'('
op|'['
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'e'
op|')'
name|'for'
name|'e'
name|'in'
name|'self'
op|'.'
name|'args'
op|']'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'kw'
op|':'
newline|'\n'
indent|'                    '
name|'L'
op|'.'
name|'append'
op|'('
string|'", "'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'kw'
op|':'
newline|'\n'
indent|'                '
name|'L'
op|'.'
name|'append'
op|'('
string|'", "'
op|'.'
name|'join'
op|'('
op|'['
string|"'%s=%s'"
op|'%'
op|'('
name|'k'
op|','
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'v'
op|')'
op|')'
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
name|'self'
op|'.'
name|'kw'
op|'.'
name|'iteritems'
op|'('
op|')'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'L'
op|'.'
name|'append'
op|'('
string|'")"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'debug'
op|':'
newline|'\n'
indent|'            '
name|'L'
op|'.'
name|'append'
op|'('
string|'"\\n\\ntraceback at creation: \\n\\n%s"'
op|'%'
op|'('
string|"'    '"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'creator'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'L'
op|'.'
name|'append'
op|'('
string|"'>'"
op|')'
newline|'\n'
nl|'\n'
name|'return'
string|'""'
op|'.'
name|'join'
op|'('
name|'L'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ThreadedResolver
dedent|''
dedent|''
name|'class'
name|'ThreadedResolver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{ThreadedResolver} uses a reactor, a threadpool, and\n    L{socket.gethostbyname} to perform name lookups without blocking the\n    reactor thread.  It also supports timeouts indepedently from whatever\n    timeout logic L{socket.gethostbyname} might have.\n\n    @ivar reactor: The reactor the threadpool of which will be used to call\n        L{socket.gethostbyname} and the I/O thread of which the result will be\n        delivered.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IResolverSimple'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
name|'self'
op|'.'
name|'_runningQueries'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_fail
dedent|''
name|'def'
name|'_fail'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'err'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'err'
op|'='
name|'error'
op|'.'
name|'DNSLookupError'
op|'('
string|'"address %r not found: %s"'
op|'%'
op|'('
name|'name'
op|','
name|'err'
op|')'
op|')'
newline|'\n'
name|'return'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'err'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cleanup
dedent|''
name|'def'
name|'_cleanup'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'lookupDeferred'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'userDeferred'
op|','
name|'cancelCall'
op|'='
name|'self'
op|'.'
name|'_runningQueries'
op|'['
name|'lookupDeferred'
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'_runningQueries'
op|'['
name|'lookupDeferred'
op|']'
newline|'\n'
name|'userDeferred'
op|'.'
name|'errback'
op|'('
name|'self'
op|'.'
name|'_fail'
op|'('
name|'name'
op|','
string|'"timeout error"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_checkTimeout
dedent|''
name|'def'
name|'_checkTimeout'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'name'
op|','
name|'lookupDeferred'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'userDeferred'
op|','
name|'cancelCall'
op|'='
name|'self'
op|'.'
name|'_runningQueries'
op|'['
name|'lookupDeferred'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'_runningQueries'
op|'['
name|'lookupDeferred'
op|']'
newline|'\n'
name|'cancelCall'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'result'
op|','
name|'failure'
op|'.'
name|'Failure'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'userDeferred'
op|'.'
name|'errback'
op|'('
name|'self'
op|'.'
name|'_fail'
op|'('
name|'name'
op|','
name|'result'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'userDeferred'
op|'.'
name|'callback'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHostByName
dedent|''
dedent|''
dedent|''
name|'def'
name|'getHostByName'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'timeout'
op|'='
op|'('
number|'1'
op|','
number|'3'
op|','
number|'11'
op|','
number|'45'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{twisted.internet.interfaces.IResolverSimple.getHostByName}.\n\n        Note that the elements of C{timeout} are summed and the result is used\n        as a timeout for the lookup.  Any intermediate timeout or retry logic\n        is left up to the platform via L{socket.gethostbyname}.\n        """'
newline|'\n'
name|'if'
name|'timeout'
op|':'
newline|'\n'
indent|'            '
name|'timeoutDelay'
op|'='
name|'sum'
op|'('
name|'timeout'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'timeoutDelay'
op|'='
number|'60'
newline|'\n'
dedent|''
name|'userDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'lookupDeferred'
op|'='
name|'threads'
op|'.'
name|'deferToThreadPool'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'reactor'
op|','
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'getThreadPool'
op|'('
op|')'
op|','
nl|'\n'
name|'socket'
op|'.'
name|'gethostbyname'
op|','
name|'name'
op|')'
newline|'\n'
name|'cancelCall'
op|'='
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'callLater'
op|'('
nl|'\n'
name|'timeoutDelay'
op|','
name|'self'
op|'.'
name|'_cleanup'
op|','
name|'name'
op|','
name|'lookupDeferred'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_runningQueries'
op|'['
name|'lookupDeferred'
op|']'
op|'='
op|'('
name|'userDeferred'
op|','
name|'cancelCall'
op|')'
newline|'\n'
name|'lookupDeferred'
op|'.'
name|'addBoth'
op|'('
name|'self'
op|'.'
name|'_checkTimeout'
op|','
name|'name'
op|','
name|'lookupDeferred'
op|')'
newline|'\n'
name|'return'
name|'userDeferred'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BlockingResolver
dedent|''
dedent|''
name|'class'
name|'BlockingResolver'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IResolverSimple'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getHostByName
name|'def'
name|'getHostByName'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'timeout'
op|'='
op|'('
number|'1'
op|','
number|'3'
op|','
number|'11'
op|','
number|'45'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'socket'
op|'.'
name|'gethostbyname'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|'"address %r not found"'
op|'%'
op|'('
name|'name'
op|','
op|')'
newline|'\n'
name|'err'
op|'='
name|'error'
op|'.'
name|'DNSLookupError'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'err'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_ThreePhaseEvent
dedent|''
dedent|''
dedent|''
name|'class'
name|'_ThreePhaseEvent'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Collection of callables (with arguments) which can be invoked as a group in\n    a particular order.\n\n    This provides the underlying implementation for the reactor\'s system event\n    triggers.  An instance of this class tracks triggers for all phases of a\n    single type of event.\n\n    @ivar before: A list of the before-phase triggers containing three-tuples\n        of a callable, a tuple of positional arguments, and a dict of keyword\n        arguments\n\n    @ivar finishedBefore: A list of the before-phase triggers which have\n        already been executed.  This is only populated in the C{\'BEFORE\'} state.\n\n    @ivar during: A list of the during-phase triggers containing three-tuples\n        of a callable, a tuple of positional arguments, and a dict of keyword\n        arguments\n\n    @ivar after: A list of the after-phase triggers containing three-tuples\n        of a callable, a tuple of positional arguments, and a dict of keyword\n        arguments\n\n    @ivar state: A string indicating what is currently going on with this\n        object.  One of C{\'BASE\'} (for when nothing in particular is happening;\n        this is the initial value), C{\'BEFORE\'} (when the before-phase triggers\n        are in the process of being executed).\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'before'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'during'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'after'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'BASE'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addTrigger
dedent|''
name|'def'
name|'addTrigger'
op|'('
name|'self'
op|','
name|'phase'
op|','
name|'callable'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add a trigger to the indicate phase.\n\n        @param phase: One of C{\'before\'}, C{\'during\'}, or C{\'after\'}.\n\n        @param callable: An object to be called when this event is triggered.\n        @param *args: Positional arguments to pass to C{callable}.\n        @param **kwargs: Keyword arguments to pass to C{callable}.\n\n        @return: An opaque handle which may be passed to L{removeTrigger} to\n            reverse the effects of calling this method.\n        """'
newline|'\n'
name|'if'
name|'phase'
name|'not'
name|'in'
op|'('
string|"'before'"
op|','
string|"'during'"
op|','
string|"'after'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'KeyError'
op|'('
string|'"invalid phase"'
op|')'
newline|'\n'
dedent|''
name|'getattr'
op|'('
name|'self'
op|','
name|'phase'
op|')'
op|'.'
name|'append'
op|'('
op|'('
name|'callable'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
op|')'
newline|'\n'
name|'return'
name|'phase'
op|','
name|'callable'
op|','
name|'args'
op|','
name|'kwargs'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeTrigger
dedent|''
name|'def'
name|'removeTrigger'
op|'('
name|'self'
op|','
name|'handle'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove a previously added trigger callable.\n\n        @param handle: An object previously returned by L{addTrigger}.  The\n            trigger added by that call will be removed.\n\n        @raise ValueError: If the trigger associated with C{handle} has already\n            been removed or if C{handle} is not a valid handle.\n        """'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
string|"'removeTrigger_'"
op|'+'
name|'self'
op|'.'
name|'state'
op|')'
op|'('
name|'handle'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeTrigger_BASE
dedent|''
name|'def'
name|'removeTrigger_BASE'
op|'('
name|'self'
op|','
name|'handle'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Just try to remove the trigger.\n\n        @see: removeTrigger\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'phase'
op|','
name|'callable'
op|','
name|'args'
op|','
name|'kwargs'
op|'='
name|'handle'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'ValueError'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"invalid trigger handle"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'phase'
name|'not'
name|'in'
op|'('
string|"'before'"
op|','
string|"'during'"
op|','
string|"'after'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'KeyError'
op|'('
string|'"invalid phase"'
op|')'
newline|'\n'
dedent|''
name|'getattr'
op|'('
name|'self'
op|','
name|'phase'
op|')'
op|'.'
name|'remove'
op|'('
op|'('
name|'callable'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeTrigger_BEFORE
dedent|''
dedent|''
name|'def'
name|'removeTrigger_BEFORE'
op|'('
name|'self'
op|','
name|'handle'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove the trigger if it has yet to be executed, otherwise emit a\n        warning that in the future an exception will be raised when removing an\n        already-executed trigger.\n\n        @see: removeTrigger\n        """'
newline|'\n'
name|'phase'
op|','
name|'callable'
op|','
name|'args'
op|','
name|'kwargs'
op|'='
name|'handle'
newline|'\n'
name|'if'
name|'phase'
op|'!='
string|"'before'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'removeTrigger_BASE'
op|'('
name|'handle'
op|')'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'callable'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
name|'in'
name|'self'
op|'.'
name|'finishedBefore'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"Removing already-fired system event triggers will raise an "'
nl|'\n'
string|'"exception in a future version of Twisted."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'3'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'removeTrigger_BASE'
op|'('
name|'handle'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fireEvent
dedent|''
dedent|''
name|'def'
name|'fireEvent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call the triggers added to this event.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'BEFORE'"
newline|'\n'
name|'self'
op|'.'
name|'finishedBefore'
op|'='
op|'['
op|']'
newline|'\n'
name|'beforeResults'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'before'
op|':'
newline|'\n'
indent|'            '
name|'callable'
op|','
name|'args'
op|','
name|'kwargs'
op|'='
name|'self'
op|'.'
name|'before'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'finishedBefore'
op|'.'
name|'append'
op|'('
op|'('
name|'callable'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'callable'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'result'
op|','
name|'Deferred'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'beforeResults'
op|'.'
name|'append'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'DeferredList'
op|'('
name|'beforeResults'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_continueFiring'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_continueFiring
dedent|''
name|'def'
name|'_continueFiring'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call the during and after phase triggers for this event.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'BASE'"
newline|'\n'
name|'self'
op|'.'
name|'finishedBefore'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'phase'
name|'in'
name|'self'
op|'.'
name|'during'
op|','
name|'self'
op|'.'
name|'after'
op|':'
newline|'\n'
indent|'            '
name|'while'
name|'phase'
op|':'
newline|'\n'
indent|'                '
name|'callable'
op|','
name|'args'
op|','
name|'kwargs'
op|'='
name|'phase'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'callable'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                    '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReactorBase
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'ReactorBase'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Default base class for Reactors.\n\n    @type _stopped: C{bool}\n    @ivar _stopped: A flag which is true between paired calls to C{reactor.run}\n        and C{reactor.stop}.  This should be replaced with an explicit state\n        machine.\n\n    @type _justStopped: C{bool}\n    @ivar _justStopped: A flag which is true between the time C{reactor.stop}\n        is called and the time the shutdown system event is fired.  This is\n        used to determine whether that event should be fired after each\n        iteration through the mainloop.  This should be replaced with an\n        explicit state machine.\n\n    @type _started: C{bool}\n    @ivar _started: A flag which is true from the time C{reactor.run} is called\n        until the time C{reactor.run} returns.  This is used to prevent calls\n        to C{reactor.run} on a running reactor.  This should be replaced with\n        an explicit state machine.\n\n    @ivar running: See L{IReactorCore.running}\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IReactorCore'
op|','
name|'IReactorTime'
op|','
name|'IReactorPluggableResolver'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_stopped
name|'_stopped'
op|'='
name|'True'
newline|'\n'
DECL|variable|installed
name|'installed'
op|'='
name|'False'
newline|'\n'
DECL|variable|usingThreads
name|'usingThreads'
op|'='
name|'False'
newline|'\n'
DECL|variable|resolver
name|'resolver'
op|'='
name|'BlockingResolver'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|__name__
name|'__name__'
op|'='
string|'"twisted.internet.reactor"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'threadCallQueue'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_eventTriggers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_pendingTimedCalls'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_newTimedCalls'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_cancellations'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'running'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_started'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_justStopped'
op|'='
name|'False'
newline|'\n'
comment|'# reactor internal readers, e.g. the waker.'
nl|'\n'
name|'self'
op|'.'
name|'_internalReaders'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'waker'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Arrange for the running attribute to change to True at the right time'
nl|'\n'
comment|'# and let a subclass possibly do other things at that time (eg install'
nl|'\n'
comment|'# signal handlers).'
nl|'\n'
name|'self'
op|'.'
name|'addSystemEventTrigger'
op|'('
nl|'\n'
string|"'during'"
op|','
string|"'startup'"
op|','
name|'self'
op|'.'
name|'_reallyStartRunning'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addSystemEventTrigger'
op|'('
string|"'during'"
op|','
string|"'shutdown'"
op|','
name|'self'
op|'.'
name|'crash'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addSystemEventTrigger'
op|'('
string|"'during'"
op|','
string|"'shutdown'"
op|','
name|'self'
op|'.'
name|'disconnectAll'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'platform'
op|'.'
name|'supportsThreads'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_initThreads'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# override in subclasses'
nl|'\n'
nl|'\n'
DECL|variable|_lock
dedent|''
dedent|''
name|'_lock'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|installWaker
name|'def'
name|'installWaker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|'+'
string|'" did not implement installWaker"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|installResolver
dedent|''
name|'def'
name|'installResolver'
op|'('
name|'self'
op|','
name|'resolver'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'IResolverSimple'
op|'.'
name|'providedBy'
op|'('
name|'resolver'
op|')'
newline|'\n'
name|'oldResolver'
op|'='
name|'self'
op|'.'
name|'resolver'
newline|'\n'
name|'self'
op|'.'
name|'resolver'
op|'='
name|'resolver'
newline|'\n'
name|'return'
name|'oldResolver'
newline|'\n'
nl|'\n'
DECL|member|wakeUp
dedent|''
name|'def'
name|'wakeUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Wake up the event loop.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'waker'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'waker'
op|'.'
name|'wakeUp'
op|'('
op|')'
newline|'\n'
comment|"# if the waker isn't installed, the reactor isn't running, and"
nl|'\n'
comment|"# therefore doesn't need to be woken up"
nl|'\n'
nl|'\n'
DECL|member|doIteration
dedent|''
dedent|''
name|'def'
name|'doIteration'
op|'('
name|'self'
op|','
name|'delay'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Do one iteration over the readers and writers which have been added.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|'+'
string|'" did not implement doIteration"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addReader
dedent|''
name|'def'
name|'addReader'
op|'('
name|'self'
op|','
name|'reader'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|'+'
string|'" did not implement addReader"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addWriter
dedent|''
name|'def'
name|'addWriter'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|'+'
string|'" did not implement addWriter"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|removeReader
dedent|''
name|'def'
name|'removeReader'
op|'('
name|'self'
op|','
name|'reader'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|'+'
string|'" did not implement removeReader"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|removeWriter
dedent|''
name|'def'
name|'removeWriter'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|'+'
string|'" did not implement removeWriter"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|removeAll
dedent|''
name|'def'
name|'removeAll'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|'+'
string|'" did not implement removeAll"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getReaders
dedent|''
name|'def'
name|'getReaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|'+'
string|'" did not implement getReaders"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getWriters
dedent|''
name|'def'
name|'getWriters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|'+'
string|'" did not implement getWriters"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|resolve
dedent|''
name|'def'
name|'resolve'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'timeout'
op|'='
op|'('
number|'1'
op|','
number|'3'
op|','
number|'11'
op|','
number|'45'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a Deferred that will resolve a hostname.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'name'
op|':'
newline|'\n'
comment|"# XXX - This is *less than* '::', and will screw up IPv6 servers"
nl|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
string|"'0.0.0.0'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'abstract'
op|'.'
name|'isIPAddress'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'resolver'
op|'.'
name|'getHostByName'
op|'('
name|'name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
comment|'# Installation.'
nl|'\n'
nl|'\n'
comment|'# IReactorCore'
nl|'\n'
DECL|member|stop
dedent|''
name|'def'
name|'stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See twisted.internet.interfaces.IReactorCore.stop.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_stopped'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'ReactorNotRunning'
op|'('
nl|'\n'
string|'"Can\'t stop reactor that isn\'t running."'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_stopped'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'_justStopped'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|crash
dedent|''
name|'def'
name|'crash'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See twisted.internet.interfaces.IReactorCore.crash.\n\n        Reset reactor state tracking attributes and re-initialize certain\n        state-transition helpers which were set up in C{__init__} but later\n        destroyed (through use).\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_started'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'running'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'addSystemEventTrigger'
op|'('
nl|'\n'
string|"'during'"
op|','
string|"'startup'"
op|','
name|'self'
op|'.'
name|'_reallyStartRunning'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sigInt
dedent|''
name|'def'
name|'sigInt'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handle a SIGINT interrupt.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Received SIGINT, shutting down."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'callFromThread'
op|'('
name|'self'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sigBreak
dedent|''
name|'def'
name|'sigBreak'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handle a SIGBREAK interrupt.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Received SIGBREAK, shutting down."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'callFromThread'
op|'('
name|'self'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sigTerm
dedent|''
name|'def'
name|'sigTerm'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handle a SIGTERM interrupt.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Received SIGTERM, shutting down."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'callFromThread'
op|'('
name|'self'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
DECL|member|disconnectAll
dedent|''
name|'def'
name|'disconnectAll'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disconnect every reader, and writer in the system.\n        """'
newline|'\n'
name|'selectables'
op|'='
name|'self'
op|'.'
name|'removeAll'
op|'('
op|')'
newline|'\n'
name|'for'
name|'reader'
name|'in'
name|'selectables'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'callWithLogger'
op|'('
name|'reader'
op|','
nl|'\n'
name|'reader'
op|'.'
name|'connectionLost'
op|','
nl|'\n'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'main'
op|'.'
name|'CONNECTION_LOST'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|iterate
dedent|''
dedent|''
name|'def'
name|'iterate'
op|'('
name|'self'
op|','
name|'delay'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See twisted.internet.interfaces.IReactorCore.iterate.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'runUntilCurrent'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'doIteration'
op|'('
name|'delay'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fireSystemEvent
dedent|''
name|'def'
name|'fireSystemEvent'
op|'('
name|'self'
op|','
name|'eventType'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See twisted.internet.interfaces.IReactorCore.fireSystemEvent.\n        """'
newline|'\n'
name|'event'
op|'='
name|'self'
op|'.'
name|'_eventTriggers'
op|'.'
name|'get'
op|'('
name|'eventType'
op|')'
newline|'\n'
name|'if'
name|'event'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'event'
op|'.'
name|'fireEvent'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addSystemEventTrigger
dedent|''
dedent|''
name|'def'
name|'addSystemEventTrigger'
op|'('
name|'self'
op|','
name|'_phase'
op|','
name|'_eventType'
op|','
name|'_f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See twisted.internet.interfaces.IReactorCore.addSystemEventTrigger.\n        """'
newline|'\n'
name|'assert'
name|'callable'
op|'('
name|'_f'
op|')'
op|','
string|'"%s is not callable"'
op|'%'
name|'_f'
newline|'\n'
name|'if'
name|'_eventType'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_eventTriggers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_eventTriggers'
op|'['
name|'_eventType'
op|']'
op|'='
name|'_ThreePhaseEvent'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'_eventType'
op|','
name|'self'
op|'.'
name|'_eventTriggers'
op|'['
name|'_eventType'
op|']'
op|'.'
name|'addTrigger'
op|'('
nl|'\n'
name|'_phase'
op|','
name|'_f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeSystemEventTrigger
dedent|''
name|'def'
name|'removeSystemEventTrigger'
op|'('
name|'self'
op|','
name|'triggerID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See twisted.internet.interfaces.IReactorCore.removeSystemEventTrigger.\n        """'
newline|'\n'
name|'eventType'
op|','
name|'handle'
op|'='
name|'triggerID'
newline|'\n'
name|'self'
op|'.'
name|'_eventTriggers'
op|'['
name|'eventType'
op|']'
op|'.'
name|'removeTrigger'
op|'('
name|'handle'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callWhenRunning
dedent|''
name|'def'
name|'callWhenRunning'
op|'('
name|'self'
op|','
name|'_callable'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See twisted.internet.interfaces.IReactorCore.callWhenRunning.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'running'
op|':'
newline|'\n'
indent|'            '
name|'_callable'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'addSystemEventTrigger'
op|'('
string|"'after'"
op|','
string|"'startup'"
op|','
nl|'\n'
name|'_callable'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startRunning
dedent|''
dedent|''
name|'def'
name|'startRunning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Method called when reactor starts: do some initialization and fire\n        startup events.\n\n        Don\'t call this directly, call reactor.run() instead: it should take\n        care of calling this.\n\n        This method is somewhat misnamed.  The reactor will not necessarily be\n        in the running state by the time this method returns.  The only\n        guarantee is that it will be on its way to the running state.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_started'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'ReactorAlreadyRunning'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_started'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'_stopped'
op|'='
name|'False'
newline|'\n'
name|'threadable'
op|'.'
name|'registerAsIOThread'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fireSystemEvent'
op|'('
string|"'startup'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_reallyStartRunning
dedent|''
name|'def'
name|'_reallyStartRunning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Method called to transition to the running state.  This should happen\n        in the I{during startup} event trigger phase.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'running'
op|'='
name|'True'
newline|'\n'
nl|'\n'
comment|'# IReactorTime'
nl|'\n'
nl|'\n'
DECL|variable|seconds
dedent|''
name|'seconds'
op|'='
name|'staticmethod'
op|'('
name|'runtimeSeconds'
op|')'
newline|'\n'
nl|'\n'
DECL|member|callLater
name|'def'
name|'callLater'
op|'('
name|'self'
op|','
name|'_seconds'
op|','
name|'_f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See twisted.internet.interfaces.IReactorTime.callLater.\n        """'
newline|'\n'
name|'assert'
name|'callable'
op|'('
name|'_f'
op|')'
op|','
string|'"%s is not callable"'
op|'%'
name|'_f'
newline|'\n'
name|'assert'
name|'sys'
op|'.'
name|'maxint'
op|'>='
name|'_seconds'
op|'>='
number|'0'
op|','
string|'"%s is not greater than or equal to 0 seconds"'
op|'%'
op|'('
name|'_seconds'
op|','
op|')'
newline|'\n'
name|'tple'
op|'='
name|'DelayedCall'
op|'('
name|'self'
op|'.'
name|'seconds'
op|'('
op|')'
op|'+'
name|'_seconds'
op|','
name|'_f'
op|','
name|'args'
op|','
name|'kw'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_cancelCallLater'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_moveCallLaterSooner'
op|','
nl|'\n'
name|'seconds'
op|'='
name|'self'
op|'.'
name|'seconds'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_newTimedCalls'
op|'.'
name|'append'
op|'('
name|'tple'
op|')'
newline|'\n'
name|'return'
name|'tple'
newline|'\n'
nl|'\n'
DECL|member|_moveCallLaterSooner
dedent|''
name|'def'
name|'_moveCallLaterSooner'
op|'('
name|'self'
op|','
name|'tple'
op|')'
op|':'
newline|'\n'
comment|'# Linear time find: slow.'
nl|'\n'
indent|'        '
name|'heap'
op|'='
name|'self'
op|'.'
name|'_pendingTimedCalls'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'pos'
op|'='
name|'heap'
op|'.'
name|'index'
op|'('
name|'tple'
op|')'
newline|'\n'
nl|'\n'
comment|'# Move elt up the heap until it rests at the right place.'
nl|'\n'
name|'elt'
op|'='
name|'heap'
op|'['
name|'pos'
op|']'
newline|'\n'
name|'while'
name|'pos'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'parent'
op|'='
op|'('
name|'pos'
op|'-'
number|'1'
op|')'
op|'//'
number|'2'
newline|'\n'
name|'if'
name|'heap'
op|'['
name|'parent'
op|']'
op|'<='
name|'elt'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
comment|'# move parent down'
nl|'\n'
dedent|''
name|'heap'
op|'['
name|'pos'
op|']'
op|'='
name|'heap'
op|'['
name|'parent'
op|']'
newline|'\n'
name|'pos'
op|'='
name|'parent'
newline|'\n'
dedent|''
name|'heap'
op|'['
name|'pos'
op|']'
op|'='
name|'elt'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
comment|'# element was not found in heap - oh well...'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_cancelCallLater
dedent|''
dedent|''
name|'def'
name|'_cancelCallLater'
op|'('
name|'self'
op|','
name|'tple'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_cancellations'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|cancelCallLater
dedent|''
name|'def'
name|'cancelCallLater'
op|'('
name|'self'
op|','
name|'callID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See twisted.internet.interfaces.IReactorTime.cancelCallLater.\n        """'
newline|'\n'
comment|'# DO NOT DELETE THIS - this is documented in Python in a Nutshell, so we'
nl|'\n'
comment|"# we can't get rid of it for a long time."
nl|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"reactor.cancelCallLater(callID) is deprecated - use callID.cancel() instead"'
op|')'
newline|'\n'
name|'callID'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getDelayedCalls
dedent|''
name|'def'
name|'getDelayedCalls'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return all the outstanding delayed calls in the system.\n        They are returned in no particular order.\n        This method is not efficient -- it is really only meant for\n        test cases."""'
newline|'\n'
name|'return'
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
op|'('
name|'self'
op|'.'
name|'_pendingTimedCalls'
op|'+'
name|'self'
op|'.'
name|'_newTimedCalls'
op|')'
name|'if'
name|'not'
name|'x'
op|'.'
name|'cancelled'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_insertNewDelayedCalls
dedent|''
name|'def'
name|'_insertNewDelayedCalls'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'call'
name|'in'
name|'self'
op|'.'
name|'_newTimedCalls'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'call'
op|'.'
name|'cancelled'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_cancellations'
op|'-='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'call'
op|'.'
name|'activate_delay'
op|'('
op|')'
newline|'\n'
name|'heappush'
op|'('
name|'self'
op|'.'
name|'_pendingTimedCalls'
op|','
name|'call'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_newTimedCalls'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|timeout
dedent|''
name|'def'
name|'timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# insert new delayed calls to make sure to include them in timeout value'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_insertNewDelayedCalls'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_pendingTimedCalls'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'max'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'_pendingTimedCalls'
op|'['
number|'0'
op|']'
op|'.'
name|'time'
op|'-'
name|'self'
op|'.'
name|'seconds'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|runUntilCurrent
dedent|''
name|'def'
name|'runUntilCurrent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Run all pending timed calls.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'threadCallQueue'
op|':'
newline|'\n'
comment|"# Keep track of how many calls we actually make, as we're"
nl|'\n'
comment|'# making them, in case another call is added to the queue'
nl|'\n'
comment|"# while we're in this loop."
nl|'\n'
indent|'            '
name|'count'
op|'='
number|'0'
newline|'\n'
name|'total'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'threadCallQueue'
op|')'
newline|'\n'
name|'for'
op|'('
name|'f'
op|','
name|'a'
op|','
name|'kw'
op|')'
name|'in'
name|'self'
op|'.'
name|'threadCallQueue'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'f'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                    '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
name|'count'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'count'
op|'=='
name|'total'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'del'
name|'self'
op|'.'
name|'threadCallQueue'
op|'['
op|':'
name|'count'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'threadCallQueue'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'wakeUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# insert new delayed calls now'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_insertNewDelayedCalls'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'now'
op|'='
name|'self'
op|'.'
name|'seconds'
op|'('
op|')'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'_pendingTimedCalls'
name|'and'
op|'('
name|'self'
op|'.'
name|'_pendingTimedCalls'
op|'['
number|'0'
op|']'
op|'.'
name|'time'
op|'<='
name|'now'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'call'
op|'='
name|'heappop'
op|'('
name|'self'
op|'.'
name|'_pendingTimedCalls'
op|')'
newline|'\n'
name|'if'
name|'call'
op|'.'
name|'cancelled'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_cancellations'
op|'-='
number|'1'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'call'
op|'.'
name|'delayed_time'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'call'
op|'.'
name|'activate_delay'
op|'('
op|')'
newline|'\n'
name|'heappush'
op|'('
name|'self'
op|'.'
name|'_pendingTimedCalls'
op|','
name|'call'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'call'
op|'.'
name|'called'
op|'='
number|'1'
newline|'\n'
name|'call'
op|'.'
name|'func'
op|'('
op|'*'
name|'call'
op|'.'
name|'args'
op|','
op|'**'
name|'call'
op|'.'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'deferr'
op|'('
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'call'
op|','
string|'"creator"'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'e'
op|'='
string|'"\\n"'
newline|'\n'
name|'e'
op|'+='
string|'" C: previous exception occurred in "'
op|'+'
string|'"a DelayedCall created here:\\n"'
newline|'\n'
name|'e'
op|'+='
string|'" C:"'
newline|'\n'
name|'e'
op|'+='
string|'""'
op|'.'
name|'join'
op|'('
name|'call'
op|'.'
name|'creator'
op|')'
op|'.'
name|'rstrip'
op|'('
op|')'
op|'.'
name|'replace'
op|'('
string|'"\\n"'
op|','
string|'"\\n C:"'
op|')'
newline|'\n'
name|'e'
op|'+='
string|'"\\n"'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
name|'e'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
op|'('
name|'self'
op|'.'
name|'_cancellations'
op|'>'
number|'50'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'_cancellations'
op|'>'
name|'len'
op|'('
name|'self'
op|'.'
name|'_pendingTimedCalls'
op|')'
op|'>>'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cancellations'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_pendingTimedCalls'
op|'='
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'self'
op|'.'
name|'_pendingTimedCalls'
nl|'\n'
name|'if'
name|'not'
name|'x'
op|'.'
name|'cancelled'
op|']'
newline|'\n'
name|'heapify'
op|'('
name|'self'
op|'.'
name|'_pendingTimedCalls'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_justStopped'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_justStopped'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'fireSystemEvent'
op|'('
string|'"shutdown"'
op|')'
newline|'\n'
nl|'\n'
comment|'# IReactorProcess'
nl|'\n'
nl|'\n'
DECL|member|_checkProcessArgs
dedent|''
dedent|''
name|'def'
name|'_checkProcessArgs'
op|'('
name|'self'
op|','
name|'args'
op|','
name|'env'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check for valid arguments and environment to spawnProcess.\n\n        @return: A two element tuple giving values to use when creating the\n        process.  The first element of the tuple is a C{list} of C{str}\n        giving the values for argv of the child process.  The second element\n        of the tuple is either C{None} if C{env} was C{None} or a C{dict}\n        mapping C{str} environment keys to C{str} environment values.\n        """'
newline|'\n'
comment|'# Any unicode string which Python would successfully implicitly'
nl|'\n'
comment|'# encode to a byte string would have worked before these explicit'
nl|'\n'
comment|'# checks were added.  Anything which would have failed with a'
nl|'\n'
comment|'# UnicodeEncodeError during that implicit encoding step would have'
nl|'\n'
comment|'# raised an exception in the child process and that would have been'
nl|'\n'
comment|'# a pain in the butt to debug.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# So, we will explicitly attempt the same encoding which Python'
nl|'\n'
comment|'# would implicitly do later.  If it fails, we will report an error'
nl|'\n'
comment|"# without ever spawning a child process.  If it succeeds, we'll save"
nl|'\n'
comment|"# the result so that Python doesn't need to do it implicitly later."
nl|'\n'
comment|'#'
nl|'\n'
comment|"# For any unicode which we can actually encode, we'll also issue a"
nl|'\n'
comment|'# deprecation warning, because no one should be passing unicode here'
nl|'\n'
comment|'# anyway.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# -exarkun'
nl|'\n'
name|'defaultEncoding'
op|'='
name|'sys'
op|'.'
name|'getdefaultencoding'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Common check function'
nl|'\n'
DECL|function|argChecker
name|'def'
name|'argChecker'
op|'('
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Return either a str or None.  If the given value is not\n            allowable for some reason, None is returned.  Otherwise, a\n            possibly different object which should be used in place of arg\n            is returned.  This forces unicode encoding to happen now, rather\n            than implicitly later.\n            """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'arg'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'arg'
op|'='
name|'arg'
op|'.'
name|'encode'
op|'('
name|'defaultEncoding'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeEncodeError'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"Argument strings and environment keys/values passed to "'
nl|'\n'
string|'"reactor.spawnProcess should be str, not unicode."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'4'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'arg'
op|','
name|'str'
op|')'
name|'and'
string|"'\\0'"
name|'not'
name|'in'
name|'arg'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'arg'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
comment|'# Make a few tests to check input validity'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'args'
op|','
op|'('
name|'tuple'
op|','
name|'list'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|'"Arguments must be a tuple or list"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'outputArgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'arg'
name|'in'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'arg'
op|'='
name|'argChecker'
op|'('
name|'arg'
op|')'
newline|'\n'
name|'if'
name|'arg'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'TypeError'
op|'('
string|'"Arguments contain a non-string value"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'outputArgs'
op|'.'
name|'append'
op|'('
name|'arg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'outputEnv'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'env'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'outputEnv'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'env'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'key'
op|'='
name|'argChecker'
op|'('
name|'key'
op|')'
newline|'\n'
name|'if'
name|'key'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'TypeError'
op|'('
string|'"Environment contains a non-string key"'
op|')'
newline|'\n'
dedent|''
name|'val'
op|'='
name|'argChecker'
op|'('
name|'val'
op|')'
newline|'\n'
name|'if'
name|'val'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'TypeError'
op|'('
string|'"Environment contains a non-string value"'
op|')'
newline|'\n'
dedent|''
name|'outputEnv'
op|'['
name|'key'
op|']'
op|'='
name|'val'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'outputArgs'
op|','
name|'outputEnv'
newline|'\n'
nl|'\n'
comment|'# IReactorThreads'
nl|'\n'
dedent|''
name|'if'
name|'platform'
op|'.'
name|'supportsThreads'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'threadpool'
op|'='
name|'None'
newline|'\n'
comment|'# ID of the trigger starting the threadpool'
nl|'\n'
name|'_threadpoolStartupID'
op|'='
name|'None'
newline|'\n'
comment|'# ID of the trigger stopping the threadpool'
nl|'\n'
name|'threadpoolShutdownID'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|_initThreads
name|'def'
name|'_initThreads'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'usingThreads'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'resolver'
op|'='
name|'ThreadedResolver'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'installWaker'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|callFromThread
dedent|''
name|'def'
name|'callFromThread'
op|'('
name|'self'
op|','
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            See L{twisted.internet.interfaces.IReactorThreads.callFromThread}.\n            """'
newline|'\n'
name|'assert'
name|'callable'
op|'('
name|'f'
op|')'
op|','
string|'"%s is not callable"'
op|'%'
op|'('
name|'f'
op|','
op|')'
newline|'\n'
comment|'# lists are thread-safe in CPython, but not in Jython'
nl|'\n'
comment|'# this is probably a bug in Jython, but until fixed this code'
nl|'\n'
comment|"# won't work in Jython."
nl|'\n'
name|'self'
op|'.'
name|'threadCallQueue'
op|'.'
name|'append'
op|'('
op|'('
name|'f'
op|','
name|'args'
op|','
name|'kw'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'wakeUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_initThreadPool
dedent|''
name|'def'
name|'_initThreadPool'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Create the threadpool accessible with callFromThread.\n            """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'threadpool'
newline|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
nl|'\n'
number|'0'
op|','
number|'10'
op|','
string|"'twisted.internet.reactor'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_threadpoolStartupID'
op|'='
name|'self'
op|'.'
name|'callWhenRunning'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'start'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'threadpoolShutdownID'
op|'='
name|'self'
op|'.'
name|'addSystemEventTrigger'
op|'('
nl|'\n'
string|"'during'"
op|','
string|"'shutdown'"
op|','
name|'self'
op|'.'
name|'_stopThreadPool'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_stopThreadPool
dedent|''
name|'def'
name|'_stopThreadPool'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Stop the reactor threadpool.  This method is only valid if there\n            is currently a threadpool (created by L{_initThreadPool}).  It\n            is not intended to be called directly; instead, it will be\n            called by a shutdown trigger created in L{_initThreadPool}.\n            """'
newline|'\n'
name|'triggers'
op|'='
op|'['
name|'self'
op|'.'
name|'_threadpoolStartupID'
op|','
name|'self'
op|'.'
name|'threadpoolShutdownID'
op|']'
newline|'\n'
name|'for'
name|'trigger'
name|'in'
name|'filter'
op|'('
name|'None'
op|','
name|'triggers'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'removeSystemEventTrigger'
op|'('
name|'trigger'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_threadpoolStartupID'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'threadpoolShutdownID'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|getThreadPool
dedent|''
name|'def'
name|'getThreadPool'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            See L{twisted.internet.interfaces.IReactorThreads.getThreadPool}.\n            """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'threadpool'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_initThreadPool'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'threadpool'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|callInThread
dedent|''
name|'def'
name|'callInThread'
op|'('
name|'self'
op|','
name|'_callable'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            See L{twisted.internet.interfaces.IReactorThreads.callInThread}.\n            """'
newline|'\n'
name|'self'
op|'.'
name|'getThreadPool'
op|'('
op|')'
op|'.'
name|'callInThread'
op|'('
name|'_callable'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|function|suggestThreadPoolSize
dedent|''
name|'def'
name|'suggestThreadPoolSize'
op|'('
name|'self'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            See L{twisted.internet.interfaces.IReactorThreads.suggestThreadPoolSize}.\n            """'
newline|'\n'
name|'self'
op|'.'
name|'getThreadPool'
op|'('
op|')'
op|'.'
name|'adjustPoolsize'
op|'('
name|'maxthreads'
op|'='
name|'size'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# This is for signal handlers.'
nl|'\n'
DECL|function|callFromThread
indent|'        '
name|'def'
name|'callFromThread'
op|'('
name|'self'
op|','
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'assert'
name|'callable'
op|'('
name|'f'
op|')'
op|','
string|'"%s is not callable"'
op|'%'
op|'('
name|'f'
op|','
op|')'
newline|'\n'
comment|'# See comment in the other callFromThread implementation.'
nl|'\n'
name|'self'
op|'.'
name|'threadCallQueue'
op|'.'
name|'append'
op|'('
op|'('
name|'f'
op|','
name|'args'
op|','
name|'kw'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'platform'
op|'.'
name|'supportsThreads'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'classImplements'
op|'('
name|'ReactorBase'
op|','
name|'IReactorThreads'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseConnector
dedent|''
name|'class'
name|'BaseConnector'
op|'('
name|'styles'
op|'.'
name|'Ephemeral'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Basic implementation of connector.\n\n    State can be: "connecting", "connected", "disconnected"\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IConnector'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|timeoutID
name|'timeoutID'
op|'='
name|'None'
newline|'\n'
DECL|variable|factoryStarted
name|'factoryStarted'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'factory'
op|','
name|'timeout'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'state'
op|'='
string|'"disconnected"'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'='
name|'factory'
newline|'\n'
name|'self'
op|'.'
name|'timeout'
op|'='
name|'timeout'
newline|'\n'
nl|'\n'
DECL|member|disconnect
dedent|''
name|'def'
name|'disconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disconnect whatever our state is."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'connecting'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stopConnecting'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'connected'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connect
dedent|''
dedent|''
name|'def'
name|'connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start connection to remote server."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'state'
op|'!='
string|'"disconnected"'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|','
string|'"can\'t connect in this state"'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'state'
op|'='
string|'"connecting"'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'factoryStarted'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'doStart'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factoryStarted'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'='
name|'transport'
op|'='
name|'self'
op|'.'
name|'_makeTransport'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'timeout'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'timeoutID'
op|'='
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'callLater'
op|'('
name|'self'
op|'.'
name|'timeout'
op|','
name|'transport'
op|'.'
name|'failIfNotConnected'
op|','
name|'error'
op|'.'
name|'TimeoutError'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'factory'
op|'.'
name|'startedConnecting'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopConnecting
dedent|''
name|'def'
name|'stopConnecting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stop attempting to connect."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'state'
op|'!='
string|'"connecting"'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'NotConnectingError'
op|','
string|'"we\'re not trying to connect"'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'state'
op|'='
string|'"disconnected"'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'failIfNotConnected'
op|'('
name|'error'
op|'.'
name|'UserError'
op|'('
op|')'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'transport'
newline|'\n'
nl|'\n'
DECL|member|cancelTimeout
dedent|''
name|'def'
name|'cancelTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'timeoutID'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'timeoutID'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'timeoutID'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'state'
op|'='
string|'"connected"'
newline|'\n'
name|'self'
op|'.'
name|'cancelTimeout'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'addr'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionFailed
dedent|''
name|'def'
name|'connectionFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cancelTimeout'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|'"disconnected"'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
string|'"disconnected"'
op|':'
newline|'\n'
comment|"# factory hasn't called our connect() method"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'doStop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factoryStarted'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'state'
op|'='
string|'"disconnected"'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'clientConnectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
string|'"disconnected"'
op|':'
newline|'\n'
comment|"# factory hasn't called our connect() method"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'doStop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factoryStarted'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|getDestination
dedent|''
dedent|''
name|'def'
name|'getDestination'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|'+'
string|'" did not implement "'
nl|'\n'
string|'"getDestination"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BasePort
dedent|''
dedent|''
name|'class'
name|'BasePort'
op|'('
name|'abstract'
op|'.'
name|'FileDescriptor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Basic implementation of a ListeningPort.\n\n    Note: This does not actually implement IListeningPort.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|addressFamily
name|'addressFamily'
op|'='
name|'None'
newline|'\n'
DECL|variable|socketType
name|'socketType'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|createInternetSocket
name|'def'
name|'createInternetSocket'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
name|'self'
op|'.'
name|'addressFamily'
op|','
name|'self'
op|'.'
name|'socketType'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setblocking'
op|'('
number|'0'
op|')'
newline|'\n'
name|'fdesc'
op|'.'
name|'_setCloseOnExec'
op|'('
name|'s'
op|'.'
name|'fileno'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|doWrite
dedent|''
name|'def'
name|'doWrite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Raises a RuntimeError"""'
newline|'\n'
name|'raise'
name|'RuntimeError'
op|','
string|'"doWrite called on a %s"'
op|'%'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_SignalReactorMixin
dedent|''
dedent|''
name|'class'
name|'_SignalReactorMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Private mixin to manage signals: it installs signal handlers at start time,\n    and define run method.\n\n    It can only be used mixed in with L{ReactorBase}, and has to be defined\n    first in the inheritance (so that method resolution order finds\n    startRunning first).\n\n    @type _installSignalHandlers: C{bool}\n    @ivar _installSignalHandlers: A flag which indicates whether any signal\n        handlers will be installed during startup.  This includes handlers for\n        SIGCHLD to monitor child processes, and SIGINT, SIGTERM, and SIGBREAK\n        to stop the reactor.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|_installSignalHandlers
name|'_installSignalHandlers'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_handleSignals
name|'def'
name|'_handleSignals'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Install the signal handlers for the Twisted event loop.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'signal'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Warning: signal module unavailable -- "'
nl|'\n'
string|'"not installing signal handlers."'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'signal'
op|'.'
name|'getsignal'
op|'('
name|'signal'
op|'.'
name|'SIGINT'
op|')'
op|'=='
name|'signal'
op|'.'
name|'default_int_handler'
op|':'
newline|'\n'
comment|"# only handle if there isn't already a handler, e.g. for Pdb."
nl|'\n'
indent|'            '
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGINT'
op|','
name|'self'
op|'.'
name|'sigInt'
op|')'
newline|'\n'
dedent|''
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGTERM'
op|','
name|'self'
op|'.'
name|'sigTerm'
op|')'
newline|'\n'
nl|'\n'
comment|'# Catch Ctrl-Break in windows'
nl|'\n'
name|'if'
name|'hasattr'
op|'('
name|'signal'
op|','
string|'"SIGBREAK"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGBREAK'
op|','
name|'self'
op|'.'
name|'sigBreak'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'platformType'
op|'=='
string|"'posix'"
op|':'
newline|'\n'
indent|'            '
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGCHLD'
op|','
name|'self'
op|'.'
name|'_handleSigchld'
op|')'
newline|'\n'
comment|'# Also call the signal handler right now, in case we missed any'
nl|'\n'
comment|'# signals before we installed it.  This should only happen if'
nl|'\n'
comment|'# someone used spawnProcess before calling reactor.run (and the'
nl|'\n'
comment|'# process also exited already).'
nl|'\n'
name|'self'
op|'.'
name|'_handleSigchld'
op|'('
name|'signal'
op|'.'
name|'SIGCHLD'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_handleSigchld
dedent|''
dedent|''
name|'def'
name|'_handleSigchld'
op|'('
name|'self'
op|','
name|'signum'
op|','
name|'frame'
op|','
name|'_threadSupport'
op|'='
name|'platform'
op|'.'
name|'supportsThreads'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reap all processes on SIGCHLD.\n\n        This gets called on SIGCHLD. We do no processing inside a signal\n        handler, as the calls we make here could occur between any two\n        python bytecode instructions. Deferring processing to the next\n        eventloop round prevents us from violating the state constraints\n        of arbitrary classes.\n        """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'process'
name|'import'
name|'reapAllProcesses'
newline|'\n'
name|'if'
name|'_threadSupport'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'callFromThread'
op|'('
name|'reapAllProcesses'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'reapAllProcesses'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|startRunning
dedent|''
dedent|''
name|'def'
name|'startRunning'
op|'('
name|'self'
op|','
name|'installSignalHandlers'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Extend the base implementation in order to remember whether signal\n        handlers should be installed later.\n\n        @type installSignalHandlers: C{bool}\n        @param installSignalHandlers: A flag which, if set, indicates that\n            handlers for a number of (implementation-defined) signals should be\n            installed during startup.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_installSignalHandlers'
op|'='
name|'installSignalHandlers'
newline|'\n'
name|'ReactorBase'
op|'.'
name|'startRunning'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_reallyStartRunning
dedent|''
name|'def'
name|'_reallyStartRunning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Extend the base implementation by also installing signal handlers, if\n        C{self._installSignalHandlers} is true.\n        """'
newline|'\n'
name|'ReactorBase'
op|'.'
name|'_reallyStartRunning'
op|'('
name|'self'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_installSignalHandlers'
op|':'
newline|'\n'
comment|'# Make sure this happens before after-startup events, since the'
nl|'\n'
comment|'# expectation of after-startup is that the reactor is fully'
nl|'\n'
comment|"# initialized.  Don't do it right away for historical reasons"
nl|'\n'
comment|"# (perhaps some before-startup triggers don't want there to be a"
nl|'\n'
comment|'# custom SIGCHLD handler so that they can run child processes with'
nl|'\n'
comment|'# some blocking api).'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_handleSignals'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|run
dedent|''
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'installSignalHandlers'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'startRunning'
op|'('
name|'installSignalHandlers'
op|'='
name|'installSignalHandlers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mainLoop'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|mainLoop
dedent|''
name|'def'
name|'mainLoop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'while'
name|'self'
op|'.'
name|'_started'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'while'
name|'self'
op|'.'
name|'_started'
op|':'
newline|'\n'
comment|'# Advance simulation time in delayed event'
nl|'\n'
comment|'# processors.'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'runUntilCurrent'
op|'('
op|')'
newline|'\n'
name|'t2'
op|'='
name|'self'
op|'.'
name|'timeout'
op|'('
op|')'
newline|'\n'
name|'t'
op|'='
name|'self'
op|'.'
name|'running'
name|'and'
name|'t2'
newline|'\n'
name|'self'
op|'.'
name|'doIteration'
op|'('
name|'t'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Unexpected error in main loop."'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'Main loop terminated.'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
op|']'
newline|'\n'
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.test.test_stdio -*-'
nl|'\n'
nl|'\n'
string|'"""\nWindows-specific implementation of the L{twisted.internet.stdio} interface.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'win32api'
newline|'\n'
name|'import'
name|'os'
op|','
name|'msvcrt'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IHalfCloseableProtocol'
op|','
name|'ITransport'
op|','
name|'IAddress'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IConsumer'
op|','
name|'IPushProducer'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'_pollingfile'
op|','
name|'main'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'failure'
name|'import'
name|'Failure'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Win32PipeAddress
name|'class'
name|'Win32PipeAddress'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'IAddress'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StandardIO
dedent|''
name|'class'
name|'StandardIO'
op|'('
name|'_pollingfile'
op|'.'
name|'_PollingTimer'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'implements'
op|'('
name|'ITransport'
op|','
nl|'\n'
name|'IConsumer'
op|','
nl|'\n'
name|'IPushProducer'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|disconnecting
name|'disconnecting'
op|'='
name|'False'
newline|'\n'
DECL|variable|disconnected
name|'disconnected'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Start talking to standard IO with the given protocol.\n\n        Also, put it stdin/stdout/stderr into binary mode.\n        """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
nl|'\n'
name|'for'
name|'stdfd'
name|'in'
name|'range'
op|'('
number|'0'
op|','
number|'1'
op|','
number|'2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msvcrt'
op|'.'
name|'setmode'
op|'('
name|'stdfd'
op|','
name|'os'
op|'.'
name|'O_BINARY'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_pollingfile'
op|'.'
name|'_PollingTimer'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'='
name|'proto'
newline|'\n'
nl|'\n'
name|'hstdin'
op|'='
name|'win32api'
op|'.'
name|'GetStdHandle'
op|'('
name|'win32api'
op|'.'
name|'STD_INPUT_HANDLE'
op|')'
newline|'\n'
name|'hstdout'
op|'='
name|'win32api'
op|'.'
name|'GetStdHandle'
op|'('
name|'win32api'
op|'.'
name|'STD_OUTPUT_HANDLE'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stdin'
op|'='
name|'_pollingfile'
op|'.'
name|'_PollableReadPipe'
op|'('
nl|'\n'
name|'hstdin'
op|','
name|'self'
op|'.'
name|'dataReceived'
op|','
name|'self'
op|'.'
name|'readConnectionLost'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stdout'
op|'='
name|'_pollingfile'
op|'.'
name|'_PollableWritePipe'
op|'('
nl|'\n'
name|'hstdout'
op|','
name|'self'
op|'.'
name|'writeConnectionLost'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_addPollableResource'
op|'('
name|'self'
op|'.'
name|'stdin'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_addPollableResource'
op|'('
name|'self'
op|'.'
name|'stdout'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|readConnectionLost
dedent|''
name|'def'
name|'readConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'IHalfCloseableProtocol'
op|'.'
name|'providedBy'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'proto'
op|'.'
name|'readConnectionLost'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'checkConnLost'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeConnectionLost
dedent|''
name|'def'
name|'writeConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'IHalfCloseableProtocol'
op|'.'
name|'providedBy'
op|'('
name|'self'
op|'.'
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'proto'
op|'.'
name|'writeConnectionLost'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'checkConnLost'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|connsLost
dedent|''
name|'connsLost'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|checkConnLost
name|'def'
name|'checkConnLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connsLost'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'connsLost'
op|'>='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'disconnecting'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'disconnected'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'connectionLost'
op|'('
name|'Failure'
op|'('
name|'main'
op|'.'
name|'CONNECTION_DONE'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# ITransport'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'seq'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'write'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'seq'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'disconnecting'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'stdin'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getPeer
dedent|''
name|'def'
name|'getPeer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Win32PipeAddress'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Win32PipeAddress'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# IConsumer'
nl|'\n'
nl|'\n'
DECL|member|registerProducer
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'registerProducer'
op|'('
name|'producer'
op|','
name|'streaming'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# def write() above'
nl|'\n'
nl|'\n'
comment|'# IProducer'
nl|'\n'
nl|'\n'
DECL|member|stopProducing
dedent|''
name|'def'
name|'stopProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stdin'
op|'.'
name|'stopProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# IPushProducer'
nl|'\n'
nl|'\n'
DECL|member|pauseProducing
dedent|''
name|'def'
name|'pauseProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stdin'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stdin'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nExtended thread dispatching support.\n\nFor basic support see reactor threading API docs.\n\nMaintainer: Itamar Shtull-Trauring\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'Queue'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|deferToThreadPool
name|'def'
name|'deferToThreadPool'
op|'('
name|'reactor'
op|','
name|'threadpool'
op|','
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Call the function C{f} using a thread from the given threadpool and return\n    the result as a Deferred.\n\n    This function is only used by client code which is maintaining its own\n    threadpool.  To run a function in the reactor\'s threadpool, use\n    C{deferToThread}.\n\n    @param reactor: The reactor in whose main thread the Deferred will be\n        invoked.\n\n    @param threadpool: An object which supports the C{callInThreadWithCallback}\n        method of C{twisted.python.threadpool.ThreadPool}.\n\n    @param f: The function to call.\n    @param *args: positional arguments to pass to f.\n    @param **kwargs: keyword arguments to pass to f.\n\n    @return: A Deferred which fires a callback with the result of f, or an\n        errback with a L{twisted.python.failure.Failure} if f throws an\n        exception.\n    """'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|onResult
name|'def'
name|'onResult'
op|'('
name|'success'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'success'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'callFromThread'
op|'('
name|'d'
op|'.'
name|'callback'
op|','
name|'result'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'callFromThread'
op|'('
name|'d'
op|'.'
name|'errback'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'threadpool'
op|'.'
name|'callInThreadWithCallback'
op|'('
name|'onResult'
op|','
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|deferToThread
dedent|''
name|'def'
name|'deferToThread'
op|'('
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Run a function in a thread and return the result as a Deferred.\n\n    @param f: The function to call.\n    @param *args: positional arguments to pass to f.\n    @param **kwargs: keyword arguments to pass to f.\n\n    @return: A Deferred which fires a callback with the result of f,\n    or an errback with a L{twisted.python.failure.Failure} if f throws\n    an exception.\n    """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'return'
name|'deferToThreadPool'
op|'('
name|'reactor'
op|','
name|'reactor'
op|'.'
name|'getThreadPool'
op|'('
op|')'
op|','
nl|'\n'
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_runMultiple
dedent|''
name|'def'
name|'_runMultiple'
op|'('
name|'tupleList'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Run a list of functions.\n    """'
newline|'\n'
name|'for'
name|'f'
op|','
name|'args'
op|','
name|'kwargs'
name|'in'
name|'tupleList'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|callMultipleInThread
dedent|''
dedent|''
name|'def'
name|'callMultipleInThread'
op|'('
name|'tupleList'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Run a list of functions in the same thread.\n\n    tupleList should be a list of (function, argsList, kwargsDict) tuples.\n    """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'reactor'
op|'.'
name|'callInThread'
op|'('
name|'_runMultiple'
op|','
name|'tupleList'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|blockingCallFromThread
dedent|''
name|'def'
name|'blockingCallFromThread'
op|'('
name|'reactor'
op|','
name|'f'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Run a function in the reactor from a thread, and wait for the result\n    synchronously, i.e. until the callback chain returned by the function\n    get a result.\n\n    @param reactor: The L{IReactorThreads} provider which will be used to\n        schedule the function call.\n    @param f: the callable to run in the reactor thread\n    @type f: any callable.\n    @param a: the arguments to pass to C{f}.\n    @param kw: the keyword arguments to pass to C{f}.\n\n    @return: the result of the callback chain.\n    @raise: any error raised during the callback chain.\n    """'
newline|'\n'
name|'queue'
op|'='
name|'Queue'
op|'.'
name|'Queue'
op|'('
op|')'
newline|'\n'
DECL|function|_callFromThread
name|'def'
name|'_callFromThread'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'f'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'addBoth'
op|'('
name|'queue'
op|'.'
name|'put'
op|')'
newline|'\n'
dedent|''
name|'reactor'
op|'.'
name|'callFromThread'
op|'('
name|'_callFromThread'
op|')'
newline|'\n'
name|'result'
op|'='
name|'queue'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'result'
op|','
name|'failure'
op|'.'
name|'Failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'.'
name|'raiseException'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
name|'__all__'
op|'='
op|'['
string|'"deferToThread"'
op|','
string|'"deferToThreadPool"'
op|','
string|'"callMultipleInThread"'
op|','
nl|'\n'
string|'"blockingCallFromThread"'
op|']'
newline|'\n'
endmarker|''
end_unit

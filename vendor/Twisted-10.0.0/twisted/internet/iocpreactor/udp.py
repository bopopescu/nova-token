begin_unit
comment|'# Copyright (c) 2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nUDP support for IOCP reactor\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'address'
op|','
name|'error'
op|','
name|'interfaces'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'abstract'
name|'import'
name|'isIPAddress'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'reflect'
op|','
name|'failure'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
name|'import'
name|'socket'
op|','
name|'operator'
op|','
name|'struct'
op|','
name|'warnings'
op|','
name|'errno'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'iocpreactor'
op|'.'
name|'const'
name|'import'
name|'ERROR_IO_PENDING'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'iocpreactor'
op|'.'
name|'const'
name|'import'
name|'ERROR_CONNECTION_REFUSED'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'iocpreactor'
op|'.'
name|'const'
name|'import'
name|'ERROR_PORT_UNREACHABLE'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'iocpreactor'
op|'.'
name|'interfaces'
name|'import'
name|'IReadWriteHandle'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'iocpreactor'
name|'import'
name|'iocpsupport'
name|'as'
name|'_iocp'
op|','
name|'abstract'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Port
name|'class'
name|'Port'
op|'('
name|'abstract'
op|'.'
name|'FileHandle'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    UDP port, listening for packets.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IReadWriteHandle'
op|','
name|'interfaces'
op|'.'
name|'IUDPTransport'
op|','
nl|'\n'
name|'interfaces'
op|'.'
name|'ISystemHandle'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|addressFamily
name|'addressFamily'
op|'='
name|'socket'
op|'.'
name|'AF_INET'
newline|'\n'
DECL|variable|socketType
name|'socketType'
op|'='
name|'socket'
op|'.'
name|'SOCK_DGRAM'
newline|'\n'
DECL|variable|maxThroughput
name|'maxThroughput'
op|'='
number|'256'
op|'*'
number|'1024'
comment|'# max bytes we read in one eventloop iteration'
newline|'\n'
DECL|variable|dynamicReadBuffers
name|'dynamicReadBuffers'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# Actual port number being listened on, only set to a non-None'
nl|'\n'
comment|'# value when we are actually listening.'
nl|'\n'
DECL|variable|_realPortNumber
name|'_realPortNumber'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'port'
op|','
name|'proto'
op|','
name|'interface'
op|'='
string|"''"
op|','
name|'maxPacketSize'
op|'='
number|'8192'
op|','
nl|'\n'
name|'reactor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initialize with a numeric port to listen on.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'proto'
newline|'\n'
name|'self'
op|'.'
name|'readBufferSize'
op|'='
name|'maxPacketSize'
newline|'\n'
name|'self'
op|'.'
name|'interface'
op|'='
name|'interface'
newline|'\n'
name|'self'
op|'.'
name|'setLogStr'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_connectedAddr'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'abstract'
op|'.'
name|'FileHandle'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
name|'skt'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
name|'self'
op|'.'
name|'addressFamily'
op|','
name|'self'
op|'.'
name|'socketType'
op|')'
newline|'\n'
name|'addrLen'
op|'='
name|'_iocp'
op|'.'
name|'maxAddrLen'
op|'('
name|'skt'
op|'.'
name|'fileno'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addressBuffer'
op|'='
name|'_iocp'
op|'.'
name|'AllocateReadBuffer'
op|'('
name|'addrLen'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_realPortNumber'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
string|'"<%s on %s>"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'__class__'
op|','
name|'self'
op|'.'
name|'_realPortNumber'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"<%s not connected>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'__class__'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHandle
dedent|''
dedent|''
name|'def'
name|'getHandle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a socket object.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'socket'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|startListening
dedent|''
name|'def'
name|'startListening'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create and bind my socket, and begin listening on it.\n\n        This is called on unserialization, and must be called after creating a\n        server to begin listening on the specified port.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_bindSocket'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_connectToProtocol'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|createSocket
dedent|''
name|'def'
name|'createSocket'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'createSocket'
op|'('
name|'self'
op|'.'
name|'addressFamily'
op|','
name|'self'
op|'.'
name|'socketType'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_bindSocket
dedent|''
name|'def'
name|'_bindSocket'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'skt'
op|'='
name|'self'
op|'.'
name|'createSocket'
op|'('
op|')'
newline|'\n'
name|'skt'
op|'.'
name|'bind'
op|'('
op|'('
name|'self'
op|'.'
name|'interface'
op|','
name|'self'
op|'.'
name|'port'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|','
name|'le'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'CannotListenError'
op|','
op|'('
name|'self'
op|'.'
name|'interface'
op|','
name|'self'
op|'.'
name|'port'
op|','
name|'le'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure that if we listened on port 0, we update that to'
nl|'\n'
comment|'# reflect what the OS actually assigned us.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_realPortNumber'
op|'='
name|'skt'
op|'.'
name|'getsockname'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"%s starting on %s"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'__class__'
op|','
name|'self'
op|'.'
name|'_realPortNumber'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'socket'
op|'='
name|'skt'
newline|'\n'
name|'self'
op|'.'
name|'getFileHandle'
op|'='
name|'self'
op|'.'
name|'socket'
op|'.'
name|'fileno'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_connectToProtocol
dedent|''
name|'def'
name|'_connectToProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'startReading'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'addActiveHandle'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cbRead
dedent|''
name|'def'
name|'cbRead'
op|'('
name|'self'
op|','
name|'rc'
op|','
name|'bytes'
op|','
name|'evt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'reading'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'handleRead'
op|'('
name|'rc'
op|','
name|'bytes'
op|','
name|'evt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'doRead'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|handleRead
dedent|''
dedent|''
name|'def'
name|'handleRead'
op|'('
name|'self'
op|','
name|'rc'
op|','
name|'bytes'
op|','
name|'evt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'rc'
name|'in'
op|'('
name|'errno'
op|'.'
name|'WSAECONNREFUSED'
op|','
name|'errno'
op|'.'
name|'WSAECONNRESET'
op|','
nl|'\n'
name|'ERROR_CONNECTION_REFUSED'
op|','
name|'ERROR_PORT_UNREACHABLE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_connectedAddr'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'connectionRefused'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'rc'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"error in recvfrom -- %s (%s)"'
op|'%'
nl|'\n'
op|'('
name|'errno'
op|'.'
name|'errorcode'
op|'.'
name|'get'
op|'('
name|'rc'
op|','
string|"'unknown error'"
op|')'
op|','
name|'rc'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'datagramReceived'
op|'('
name|'str'
op|'('
name|'evt'
op|'.'
name|'buff'
op|'['
op|':'
name|'bytes'
op|']'
op|')'
op|','
nl|'\n'
name|'_iocp'
op|'.'
name|'makesockaddr'
op|'('
name|'evt'
op|'.'
name|'addr_buff'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|doRead
dedent|''
dedent|''
dedent|''
name|'def'
name|'doRead'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'read'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'reading'
op|':'
newline|'\n'
indent|'            '
name|'evt'
op|'='
name|'_iocp'
op|'.'
name|'Event'
op|'('
name|'self'
op|'.'
name|'cbRead'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
name|'evt'
op|'.'
name|'buff'
op|'='
name|'buff'
op|'='
name|'self'
op|'.'
name|'_readBuffers'
op|'['
number|'0'
op|']'
newline|'\n'
name|'evt'
op|'.'
name|'addr_buff'
op|'='
name|'addr_buff'
op|'='
name|'self'
op|'.'
name|'addressBuffer'
newline|'\n'
name|'rc'
op|','
name|'bytes'
op|'='
name|'_iocp'
op|'.'
name|'recvfrom'
op|'('
name|'self'
op|'.'
name|'getFileHandle'
op|'('
op|')'
op|','
name|'buff'
op|','
nl|'\n'
name|'addr_buff'
op|','
name|'evt'
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'rc'
op|'=='
name|'ERROR_IO_PENDING'
nl|'\n'
name|'or'
op|'('
name|'not'
name|'rc'
name|'and'
name|'read'
op|'>='
name|'self'
op|'.'
name|'maxThroughput'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'evt'
op|'.'
name|'ignore'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'handleRead'
op|'('
name|'rc'
op|','
name|'bytes'
op|','
name|'evt'
op|')'
newline|'\n'
name|'read'
op|'+='
name|'bytes'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
dedent|''
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'datagram'
op|','
name|'addr'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write a datagram.\n\n        @param addr: should be a tuple (ip, port), can be None in connected\n        mode.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_connectedAddr'
op|':'
newline|'\n'
indent|'            '
name|'assert'
name|'addr'
name|'in'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'_connectedAddr'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'socket'
op|'.'
name|'send'
op|'('
name|'datagram'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|','
name|'se'
op|':'
newline|'\n'
indent|'                '
name|'no'
op|'='
name|'se'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'no'
op|'=='
name|'errno'
op|'.'
name|'WSAEINTR'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'self'
op|'.'
name|'write'
op|'('
name|'datagram'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'no'
op|'=='
name|'errno'
op|'.'
name|'WSAEMSGSIZE'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'error'
op|'.'
name|'MessageLengthError'
op|','
string|'"message too long"'
newline|'\n'
dedent|''
name|'elif'
name|'no'
name|'in'
op|'('
name|'errno'
op|'.'
name|'WSAECONNREFUSED'
op|','
name|'errno'
op|'.'
name|'WSAECONNRESET'
op|','
nl|'\n'
name|'ERROR_CONNECTION_REFUSED'
op|','
name|'ERROR_PORT_UNREACHABLE'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'connectionRefused'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'assert'
name|'addr'
op|'!='
name|'None'
newline|'\n'
name|'if'
name|'not'
name|'addr'
op|'['
number|'0'
op|']'
op|'.'
name|'replace'
op|'('
string|'"."'
op|','
string|'""'
op|')'
op|'.'
name|'isdigit'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Please only pass IPs to write(), not hostnames"'
op|','
nl|'\n'
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'socket'
op|'.'
name|'sendto'
op|'('
name|'datagram'
op|','
name|'addr'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|','
name|'se'
op|':'
newline|'\n'
indent|'                '
name|'no'
op|'='
name|'se'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'no'
op|'=='
name|'errno'
op|'.'
name|'WSAEINTR'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'self'
op|'.'
name|'write'
op|'('
name|'datagram'
op|','
name|'addr'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'no'
op|'=='
name|'errno'
op|'.'
name|'WSAEMSGSIZE'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'error'
op|'.'
name|'MessageLengthError'
op|','
string|'"message too long"'
newline|'\n'
dedent|''
name|'elif'
name|'no'
name|'in'
op|'('
name|'errno'
op|'.'
name|'WSAECONNREFUSED'
op|','
name|'errno'
op|'.'
name|'WSAECONNRESET'
op|','
nl|'\n'
name|'ERROR_CONNECTION_REFUSED'
op|','
name|'ERROR_PORT_UNREACHABLE'
op|')'
op|':'
newline|'\n'
comment|'# in non-connected UDP ECONNREFUSED is platform dependent,'
nl|'\n'
comment|'# I think and the info is not necessarily useful.'
nl|'\n'
comment|'# Nevertheless maybe we should call connectionRefused? XXX'
nl|'\n'
indent|'                    '
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'seq'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|'""'
op|'.'
name|'join'
op|'('
name|'seq'
op|')'
op|','
name|'addr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connect
dedent|''
name|'def'
name|'connect'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        \'Connect\' to remote server.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_connectedAddr'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
nl|'\n'
string|'"already connected, reconnecting is not currently supported "'
nl|'\n'
string|'"(talk to itamar if you want this)"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isIPAddress'
op|'('
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|'"please pass only IP addresses, not domain names"'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_connectedAddr'
op|'='
op|'('
name|'host'
op|','
name|'port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'socket'
op|'.'
name|'connect'
op|'('
op|'('
name|'host'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_loseConnection
dedent|''
name|'def'
name|'_loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stopReading'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'removeActiveHandle'
op|'('
name|'self'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'connected'
op|':'
comment|'# actually means if we are *listening*'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'connectionLost'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stopListening
dedent|''
dedent|''
name|'def'
name|'stopListening'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'connected'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'self'
op|'.'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Please use stopListening() to disconnect port"'
op|','
nl|'\n'
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Cleans up my socket.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'(Port %s Closed)'"
op|'%'
name|'self'
op|'.'
name|'_realPortNumber'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_realPortNumber'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'stopReading'
op|'('
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"protocol"'
op|')'
op|':'
newline|'\n'
comment|"# we won't have attribute in ConnectedPort, in cases"
nl|'\n'
comment|'# where there was an error in connection process'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'doStop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connected'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'disconnected'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'socket'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'socket'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'getFileHandle'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"d"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setLogStr
dedent|''
dedent|''
name|'def'
name|'setLogStr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'logstr'
op|'='
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'__class__'
op|')'
op|'+'
string|'" (UDP)"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|logPrefix
dedent|''
name|'def'
name|'logPrefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns the name of my class, to prefix log entries with.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'logstr'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns an IPv4Address.\n\n        This indicates the address from which I am connecting.\n        """'
newline|'\n'
name|'return'
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'UDP'"
op|','
op|'*'
op|'('
name|'self'
op|'.'
name|'socket'
op|'.'
name|'getsockname'
op|'('
op|')'
op|'+'
nl|'\n'
op|'('
string|"'INET_UDP'"
op|','
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MulticastMixin
dedent|''
dedent|''
name|'class'
name|'MulticastMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Implement multicast functionality.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getOutgoingInterface
name|'def'
name|'getOutgoingInterface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'i'
op|'='
name|'self'
op|'.'
name|'socket'
op|'.'
name|'getsockopt'
op|'('
name|'socket'
op|'.'
name|'IPPROTO_IP'
op|','
name|'socket'
op|'.'
name|'IP_MULTICAST_IF'
op|')'
newline|'\n'
name|'return'
name|'socket'
op|'.'
name|'inet_ntoa'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
string|'"@i"'
op|','
name|'i'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setOutgoingInterface
dedent|''
name|'def'
name|'setOutgoingInterface'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns Deferred of success.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'resolve'
op|'('
name|'addr'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_setInterface'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_setInterface
dedent|''
name|'def'
name|'_setInterface'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'i'
op|'='
name|'socket'
op|'.'
name|'inet_aton'
op|'('
name|'addr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'socket'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'IPPROTO_IP'
op|','
name|'socket'
op|'.'
name|'IP_MULTICAST_IF'
op|','
name|'i'
op|')'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getLoopbackMode
dedent|''
name|'def'
name|'getLoopbackMode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'socket'
op|'.'
name|'getsockopt'
op|'('
name|'socket'
op|'.'
name|'IPPROTO_IP'
op|','
nl|'\n'
name|'socket'
op|'.'
name|'IP_MULTICAST_LOOP'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setLoopbackMode
dedent|''
name|'def'
name|'setLoopbackMode'
op|'('
name|'self'
op|','
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mode'
op|'='
name|'struct'
op|'.'
name|'pack'
op|'('
string|'"b"'
op|','
name|'operator'
op|'.'
name|'truth'
op|'('
name|'mode'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'socket'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'IPPROTO_IP'
op|','
name|'socket'
op|'.'
name|'IP_MULTICAST_LOOP'
op|','
nl|'\n'
name|'mode'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getTTL
dedent|''
name|'def'
name|'getTTL'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'socket'
op|'.'
name|'getsockopt'
op|'('
name|'socket'
op|'.'
name|'IPPROTO_IP'
op|','
nl|'\n'
name|'socket'
op|'.'
name|'IP_MULTICAST_TTL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setTTL
dedent|''
name|'def'
name|'setTTL'
op|'('
name|'self'
op|','
name|'ttl'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ttl'
op|'='
name|'struct'
op|'.'
name|'pack'
op|'('
string|'"B"'
op|','
name|'ttl'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'socket'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'IPPROTO_IP'
op|','
name|'socket'
op|'.'
name|'IP_MULTICAST_TTL'
op|','
name|'ttl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|joinGroup
dedent|''
name|'def'
name|'joinGroup'
op|'('
name|'self'
op|','
name|'addr'
op|','
name|'interface'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Join a multicast group. Returns Deferred of success.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'resolve'
op|'('
name|'addr'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_joinAddr1'
op|','
nl|'\n'
name|'interface'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_joinAddr1
dedent|''
name|'def'
name|'_joinAddr1'
op|'('
name|'self'
op|','
name|'addr'
op|','
name|'interface'
op|','
name|'join'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'resolve'
op|'('
name|'interface'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_joinAddr2'
op|','
nl|'\n'
name|'addr'
op|','
name|'join'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_joinAddr2
dedent|''
name|'def'
name|'_joinAddr2'
op|'('
name|'self'
op|','
name|'interface'
op|','
name|'addr'
op|','
name|'join'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'addr'
op|'='
name|'socket'
op|'.'
name|'inet_aton'
op|'('
name|'addr'
op|')'
newline|'\n'
name|'interface'
op|'='
name|'socket'
op|'.'
name|'inet_aton'
op|'('
name|'interface'
op|')'
newline|'\n'
name|'if'
name|'join'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
name|'socket'
op|'.'
name|'IP_ADD_MEMBERSHIP'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
name|'socket'
op|'.'
name|'IP_DROP_MEMBERSHIP'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'socket'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'IPPROTO_IP'
op|','
name|'cmd'
op|','
name|'addr'
op|'+'
name|'interface'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'MulticastJoinError'
op|'('
name|'addr'
op|','
name|'interface'
op|','
nl|'\n'
op|'*'
name|'e'
op|'.'
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|leaveGroup
dedent|''
dedent|''
name|'def'
name|'leaveGroup'
op|'('
name|'self'
op|','
name|'addr'
op|','
name|'interface'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Leave multicast group, return Deferred of success.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'resolve'
op|'('
name|'addr'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_joinAddr1'
op|','
nl|'\n'
name|'interface'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MulticastPort
dedent|''
dedent|''
name|'class'
name|'MulticastPort'
op|'('
name|'MulticastMixin'
op|','
name|'Port'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    UDP Port that supports multicasting.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'IMulticastTransport'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'port'
op|','
name|'proto'
op|','
name|'interface'
op|'='
string|"''"
op|','
name|'maxPacketSize'
op|'='
number|'8192'
op|','
nl|'\n'
name|'reactor'
op|'='
name|'None'
op|','
name|'listenMultiple'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Port'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'port'
op|','
name|'proto'
op|','
name|'interface'
op|','
name|'maxPacketSize'
op|','
name|'reactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'listenMultiple'
op|'='
name|'listenMultiple'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|createSocket
dedent|''
name|'def'
name|'createSocket'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'skt'
op|'='
name|'Port'
op|'.'
name|'createSocket'
op|'('
name|'self'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'listenMultiple'
op|':'
newline|'\n'
indent|'            '
name|'skt'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'SOL_SOCKET'
op|','
name|'socket'
op|'.'
name|'SO_REUSEADDR'
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'socket'
op|','
string|'"SO_REUSEPORT"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'skt'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'SOL_SOCKET'
op|','
name|'socket'
op|'.'
name|'SO_REUSEPORT'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'skt'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

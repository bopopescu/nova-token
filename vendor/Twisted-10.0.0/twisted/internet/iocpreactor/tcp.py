begin_unit
comment|'# Copyright (c) 2008-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTCP support for IOCP reactor\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'socket'
op|','
name|'operator'
op|','
name|'errno'
op|','
name|'struct'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'directlyProvides'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'interfaces'
op|','
name|'error'
op|','
name|'address'
op|','
name|'main'
op|','
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'abstract'
name|'import'
name|'isIPAddress'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'tcp'
name|'import'
name|'_SocketCloser'
op|','
name|'Connector'
name|'as'
name|'TCPConnector'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'persisted'
name|'import'
name|'styles'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'failure'
op|','
name|'reflect'
op|','
name|'util'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'iocpreactor'
name|'import'
name|'iocpsupport'
name|'as'
name|'_iocp'
op|','
name|'abstract'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'iocpreactor'
op|'.'
name|'interfaces'
name|'import'
name|'IReadWriteHandle'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'iocpreactor'
op|'.'
name|'const'
name|'import'
name|'ERROR_IO_PENDING'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'iocpreactor'
op|'.'
name|'const'
name|'import'
name|'SO_UPDATE_CONNECT_CONTEXT'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'iocpreactor'
op|'.'
name|'const'
name|'import'
name|'SO_UPDATE_ACCEPT_CONTEXT'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'iocpreactor'
op|'.'
name|'const'
name|'import'
name|'ERROR_CONNECTION_REFUSED'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'iocpreactor'
op|'.'
name|'const'
name|'import'
name|'ERROR_NETWORK_UNREACHABLE'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'protocols'
op|'.'
name|'tls'
name|'import'
name|'TLSMemoryBIOFactory'
op|','
name|'TLSMemoryBIOProtocol'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'TLSMemoryBIOProtocol'
op|'='
name|'TLSMemoryBIOFactory'
op|'='
name|'None'
newline|'\n'
DECL|variable|_extraInterfaces
name|'_extraInterfaces'
op|'='
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|_extraInterfaces
indent|'    '
name|'_extraInterfaces'
op|'='
op|'('
name|'interfaces'
op|'.'
name|'ITLSTransport'
op|','
op|')'
newline|'\n'
nl|'\n'
comment|'# ConnectEx returns these. XXX: find out what it does for timeout'
nl|'\n'
DECL|variable|connectExErrors
dedent|''
name|'connectExErrors'
op|'='
op|'{'
nl|'\n'
name|'ERROR_CONNECTION_REFUSED'
op|':'
name|'errno'
op|'.'
name|'WSAECONNREFUSED'
op|','
nl|'\n'
name|'ERROR_NETWORK_UNREACHABLE'
op|':'
name|'errno'
op|'.'
name|'WSAENETUNREACH'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_BypassTLS
name|'class'
name|'_BypassTLS'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{_BypassTLS} is used as the transport object for the TLS protocol object\n    used to implement C{startTLS}.  Its methods skip any TLS logic which\n    C{startTLS} enables.\n\n    @ivar _connection: A L{Connection} which TLS has been started on which will\n        be proxied to by this object.  Any method which has its behavior\n        altered after C{startTLS} will be skipped in favor of the base class\'s\n        implementation.  This allows the TLS protocol object to have direct\n        access to the transport, necessary to actually implement TLS.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_connection'
op|'='
name|'connection'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_connection'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'abstract'
op|'.'
name|'FileHandle'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'_connection'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'iovec'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'abstract'
op|'.'
name|'FileHandle'
op|'.'
name|'writeSequence'
op|'('
name|'self'
op|'.'
name|'_connection'
op|','
name|'iovec'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|','
name|'reason'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'abstract'
op|'.'
name|'FileHandle'
op|'.'
name|'loseConnection'
op|'('
name|'self'
op|'.'
name|'_connection'
op|','
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Connection
dedent|''
dedent|''
name|'class'
name|'Connection'
op|'('
name|'abstract'
op|'.'
name|'FileHandle'
op|','
name|'_SocketCloser'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @ivar _tls: C{False} to indicate the connection is in normal TCP mode,\n        C{True} to indicate that TLS has been started and that operations must\n        be routed through the L{TLSMemoryBIOProtocol} instance.\n\n    @ivar _tlsClientDefault: A flag which must be set by a subclass.  If set to\n        C{True}, L{startTLS} will default to initiating SSL as a client.  If\n        set to C{False}, L{startTLS} will default to initiating SSL as a\n        server.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IReadWriteHandle'
op|','
name|'interfaces'
op|'.'
name|'ITCPTransport'
op|','
nl|'\n'
name|'interfaces'
op|'.'
name|'ISystemHandle'
op|','
op|'*'
name|'_extraInterfaces'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_tls
name|'_tls'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'sock'
op|','
name|'proto'
op|','
name|'reactor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'abstract'
op|'.'
name|'FileHandle'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'socket'
op|'='
name|'sock'
newline|'\n'
name|'self'
op|'.'
name|'getFileHandle'
op|'='
name|'sock'
op|'.'
name|'fileno'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'proto'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHandle
dedent|''
name|'def'
name|'getHandle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'socket'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'rbuffer'
op|')'
op|':'
newline|'\n'
comment|"# XXX: some day, we'll have protocols that can handle raw buffers"
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
name|'str'
op|'('
name|'rbuffer'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|readFromHandle
dedent|''
name|'def'
name|'readFromHandle'
op|'('
name|'self'
op|','
name|'bufflist'
op|','
name|'evt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_iocp'
op|'.'
name|'recv'
op|'('
name|'self'
op|'.'
name|'getFileHandle'
op|'('
op|')'
op|','
name|'bufflist'
op|','
name|'evt'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|writeToHandle
dedent|''
name|'def'
name|'writeToHandle'
op|'('
name|'self'
op|','
name|'buff'
op|','
name|'evt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_iocp'
op|'.'
name|'send'
op|'('
name|'self'
op|'.'
name|'getFileHandle'
op|'('
op|')'
op|','
name|'buff'
op|','
name|'evt'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_closeWriteConnection
dedent|''
name|'def'
name|'_closeWriteConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'getattr'
op|'('
name|'self'
op|'.'
name|'socket'
op|','
name|'self'
op|'.'
name|'_socketShutdownMethod'
op|')'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'p'
op|'='
name|'interfaces'
op|'.'
name|'IHalfCloseableProtocol'
op|'('
name|'self'
op|'.'
name|'protocol'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'p'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'p'
op|'.'
name|'writeConnectionLost'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connectionLost'
op|'('
name|'f'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|readConnectionLost
dedent|''
dedent|''
dedent|''
name|'def'
name|'readConnectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'interfaces'
op|'.'
name|'IHalfCloseableProtocol'
op|'('
name|'self'
op|'.'
name|'protocol'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'p'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'p'
op|'.'
name|'readConnectionLost'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connectionLost'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'abstract'
op|'.'
name|'FileHandle'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_closeSocket'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'protocol'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'protocol'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'socket'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'getFileHandle'
newline|'\n'
name|'protocol'
op|'.'
name|'connectionLost'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|logPrefix
dedent|''
name|'def'
name|'logPrefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the prefix to log with when I own the logging thread.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'logstr'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getTcpNoDelay
dedent|''
name|'def'
name|'getTcpNoDelay'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'operator'
op|'.'
name|'truth'
op|'('
name|'self'
op|'.'
name|'socket'
op|'.'
name|'getsockopt'
op|'('
name|'socket'
op|'.'
name|'IPPROTO_TCP'
op|','
nl|'\n'
name|'socket'
op|'.'
name|'TCP_NODELAY'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setTcpNoDelay
dedent|''
name|'def'
name|'setTcpNoDelay'
op|'('
name|'self'
op|','
name|'enabled'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'socket'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'IPPROTO_TCP'
op|','
name|'socket'
op|'.'
name|'TCP_NODELAY'
op|','
name|'enabled'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getTcpKeepAlive
dedent|''
name|'def'
name|'getTcpKeepAlive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'operator'
op|'.'
name|'truth'
op|'('
name|'self'
op|'.'
name|'socket'
op|'.'
name|'getsockopt'
op|'('
name|'socket'
op|'.'
name|'SOL_SOCKET'
op|','
nl|'\n'
name|'socket'
op|'.'
name|'SO_KEEPALIVE'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setTcpKeepAlive
dedent|''
name|'def'
name|'setTcpKeepAlive'
op|'('
name|'self'
op|','
name|'enabled'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'socket'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'SOL_SOCKET'
op|','
name|'socket'
op|'.'
name|'SO_KEEPALIVE'
op|','
name|'enabled'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'TLSMemoryBIOFactory'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
DECL|function|startTLS
indent|'        '
name|'def'
name|'startTLS'
op|'('
name|'self'
op|','
name|'contextFactory'
op|','
name|'normal'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            @see: L{ITLSTransport.startTLS}\n            """'
newline|'\n'
comment|'# Figure out which direction the SSL goes in.  If normal is True,'
nl|'\n'
comment|"# we'll go in the direction indicated by the subclass.  Otherwise,"
nl|'\n'
comment|"# we'll go the other way (client = not normal ^ _tlsClientDefault,"
nl|'\n'
comment|'# in other words).'
nl|'\n'
name|'if'
name|'normal'
op|':'
newline|'\n'
indent|'                '
name|'client'
op|'='
name|'self'
op|'.'
name|'_tlsClientDefault'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'client'
op|'='
name|'not'
name|'self'
op|'.'
name|'_tlsClientDefault'
newline|'\n'
nl|'\n'
dedent|''
name|'tlsFactory'
op|'='
name|'TLSMemoryBIOFactory'
op|'('
name|'contextFactory'
op|','
name|'client'
op|','
name|'None'
op|')'
newline|'\n'
name|'tlsProtocol'
op|'='
name|'TLSMemoryBIOProtocol'
op|'('
name|'tlsFactory'
op|','
name|'self'
op|'.'
name|'protocol'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'tlsProtocol'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'getHandle'
op|'='
name|'tlsProtocol'
op|'.'
name|'getHandle'
newline|'\n'
name|'self'
op|'.'
name|'getPeerCertificate'
op|'='
name|'tlsProtocol'
op|'.'
name|'getPeerCertificate'
newline|'\n'
nl|'\n'
comment|'# Mark the transport as secure.'
nl|'\n'
name|'directlyProvides'
op|'('
name|'self'
op|','
name|'interfaces'
op|'.'
name|'ISSLTransport'
op|')'
newline|'\n'
nl|'\n'
comment|'# Remember we did this so that write and writeSequence can send the'
nl|'\n'
comment|'# data to the right place.'
nl|'\n'
name|'self'
op|'.'
name|'_tls'
op|'='
name|'True'
newline|'\n'
nl|'\n'
comment|'# Hook it up'
nl|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'_BypassTLS'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write some data, either directly to the underlying handle or, if TLS\n        has been started, to the L{TLSMemoryBIOProtocol} for it to encrypt and\n        send.\n\n        @see: L{ITCPTransport.write}\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_tls'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'abstract'
op|'.'
name|'FileHandle'
op|'.'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'iovec'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write some data, either directly to the underlying handle or, if TLS\n        has been started, to the L{TLSMemoryBIOProtocol} for it to encrypt and\n        send.\n\n        @see: L{ITCPTransport.writeSequence}\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_tls'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'writeSequence'
op|'('
name|'iovec'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'abstract'
op|'.'
name|'FileHandle'
op|'.'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'iovec'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|','
name|'reason'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close the underlying handle or, if TLS has been started, first shut it\n        down.\n\n        @see: L{ITCPTransport.loseConnection}\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_tls'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'connected'
name|'and'
name|'not'
name|'self'
op|'.'
name|'disconnecting'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'abstract'
op|'.'
name|'FileHandle'
op|'.'
name|'loseConnection'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Client
dedent|''
dedent|''
dedent|''
name|'class'
name|'Client'
op|'('
name|'Connection'
op|')'
op|':'
newline|'\n'
DECL|variable|addressFamily
indent|'    '
name|'addressFamily'
op|'='
name|'socket'
op|'.'
name|'AF_INET'
newline|'\n'
DECL|variable|socketType
name|'socketType'
op|'='
name|'socket'
op|'.'
name|'SOCK_STREAM'
newline|'\n'
nl|'\n'
DECL|variable|_tlsClientDefault
name|'_tlsClientDefault'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|','
name|'bindAddress'
op|','
name|'connector'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connector'
op|'='
name|'connector'
newline|'\n'
name|'self'
op|'.'
name|'addr'
op|'='
op|'('
name|'host'
op|','
name|'port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
comment|'# ConnectEx documentation says socket _has_ to be bound'
nl|'\n'
name|'if'
name|'bindAddress'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'bindAddress'
op|'='
op|'('
string|"''"
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'skt'
op|'='
name|'reactor'
op|'.'
name|'createSocket'
op|'('
name|'self'
op|'.'
name|'addressFamily'
op|','
name|'self'
op|'.'
name|'socketType'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|','
name|'se'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'error'
op|'.'
name|'ConnectBindError'
op|'('
name|'se'
op|'['
number|'0'
op|']'
op|','
name|'se'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'skt'
op|'.'
name|'bind'
op|'('
name|'bindAddress'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|','
name|'se'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'error'
op|'.'
name|'ConnectBindError'
op|'('
name|'se'
op|'['
number|'0'
op|']'
op|','
name|'se'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'socket'
op|'='
name|'skt'
newline|'\n'
name|'Connection'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'skt'
op|','
name|'None'
op|','
name|'reactor'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'resolveAddress'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'error'
op|'.'
name|'ConnectBindError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'failIfNotConnected'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|resolveAddress
dedent|''
dedent|''
name|'def'
name|'resolveAddress'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isIPAddress'
op|'('
name|'self'
op|'.'
name|'addr'
op|'['
number|'0'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_setRealAddress'
op|'('
name|'self'
op|'.'
name|'addr'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'resolve'
op|'('
name|'self'
op|'.'
name|'addr'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_setRealAddress'
op|','
name|'self'
op|'.'
name|'failIfNotConnected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_setRealAddress
dedent|''
dedent|''
name|'def'
name|'_setRealAddress'
op|'('
name|'self'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'realAddress'
op|'='
op|'('
name|'address'
op|','
name|'self'
op|'.'
name|'addr'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'doConnect'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|failIfNotConnected
dedent|''
name|'def'
name|'failIfNotConnected'
op|'('
name|'self'
op|','
name|'err'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'self'
op|'.'
name|'connected'
name|'or'
name|'self'
op|'.'
name|'disconnected'
name|'or'
nl|'\n'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"connector"'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_closeSocket'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'socket'
op|','
name|'self'
op|'.'
name|'getFileHandle'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'removeActiveHandle'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'connector'
op|'.'
name|'connectionFailed'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'err'
op|')'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'connector'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stopConnecting
dedent|''
name|'def'
name|'stopConnecting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop attempt to connect.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'failIfNotConnected'
op|'('
name|'error'
op|'.'
name|'UserError'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cbConnect
dedent|''
name|'def'
name|'cbConnect'
op|'('
name|'self'
op|','
name|'rc'
op|','
name|'bytes'
op|','
name|'evt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'rc'
op|':'
newline|'\n'
indent|'            '
name|'rc'
op|'='
name|'connectExErrors'
op|'.'
name|'get'
op|'('
name|'rc'
op|','
name|'rc'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfNotConnected'
op|'('
name|'error'
op|'.'
name|'getConnectError'
op|'('
op|'('
name|'rc'
op|','
nl|'\n'
name|'errno'
op|'.'
name|'errorcode'
op|'.'
name|'get'
op|'('
name|'rc'
op|','
string|"'Unknown error'"
op|')'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'socket'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'SOL_SOCKET'
op|','
nl|'\n'
name|'SO_UPDATE_CONNECT_CONTEXT'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'I'"
op|','
name|'self'
op|'.'
name|'socket'
op|'.'
name|'fileno'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'connector'
op|'.'
name|'buildProtocol'
op|'('
name|'self'
op|'.'
name|'getPeer'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'logstr'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'+'
string|'",client"'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'startReading'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|doConnect
dedent|''
dedent|''
name|'def'
name|'doConnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"connector"'
op|')'
op|':'
newline|'\n'
comment|'# this happens if we connector.stopConnecting in'
nl|'\n'
comment|'# factory.startedConnecting'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'assert'
name|'_iocp'
op|'.'
name|'have_connectex'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'addActiveHandle'
op|'('
name|'self'
op|')'
newline|'\n'
name|'evt'
op|'='
name|'_iocp'
op|'.'
name|'Event'
op|'('
name|'self'
op|'.'
name|'cbConnect'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
name|'rc'
op|'='
name|'_iocp'
op|'.'
name|'connect'
op|'('
name|'self'
op|'.'
name|'socket'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'realAddress'
op|','
name|'evt'
op|')'
newline|'\n'
name|'if'
name|'rc'
op|'=='
name|'ERROR_IO_PENDING'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'evt'
op|'.'
name|'ignore'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'cbConnect'
op|'('
name|'rc'
op|','
number|'0'
op|','
number|'0'
op|','
name|'evt'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns an IPv4Address.\n\n        This indicates the address from which I am connecting.\n        """'
newline|'\n'
name|'return'
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
op|'*'
op|'('
name|'self'
op|'.'
name|'socket'
op|'.'
name|'getsockname'
op|'('
op|')'
op|'+'
nl|'\n'
op|'('
string|"'INET'"
op|','
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPeer
dedent|''
name|'def'
name|'getPeer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns an IPv4Address.\n\n        This indicates the address that I am connected to.\n        """'
newline|'\n'
name|'return'
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
op|'*'
op|'('
name|'self'
op|'.'
name|'realAddress'
op|'+'
op|'('
string|"'INET'"
op|','
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
op|'('
string|"'<%s to %s at %x>'"
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
name|'self'
op|'.'
name|'addr'
op|','
name|'util'
op|'.'
name|'unsignedID'
op|'('
name|'self'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'connected'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIfNotConnected'
op|'('
name|'error'
op|'.'
name|'ConnectError'
op|'('
name|'string'
op|'='
name|'reason'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'Connection'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connector'
op|'.'
name|'connectionLost'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Server
dedent|''
dedent|''
dedent|''
name|'class'
name|'Server'
op|'('
name|'Connection'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Serverside socket-stream connection class.\n\n    I am a serverside network connection transport; a socket which came from an\n    accept() on a server.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|_tlsClientDefault
name|'_tlsClientDefault'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'sock'
op|','
name|'protocol'
op|','
name|'clientAddr'
op|','
name|'serverAddr'
op|','
name|'sessionno'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Server(sock, protocol, client, server, sessionno)\n\n        Initialize me with a socket, a protocol, a descriptor for my peer (a\n        tuple of host, port describing the other end of the connection), an\n        instance of Port, and a session number.\n        """'
newline|'\n'
name|'Connection'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'sock'
op|','
name|'protocol'
op|','
name|'reactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serverAddr'
op|'='
name|'serverAddr'
newline|'\n'
name|'self'
op|'.'
name|'clientAddr'
op|'='
name|'clientAddr'
newline|'\n'
name|'self'
op|'.'
name|'sessionno'
op|'='
name|'sessionno'
newline|'\n'
name|'self'
op|'.'
name|'logstr'
op|'='
string|'"%s,%s,%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'sessionno'
op|','
name|'self'
op|'.'
name|'clientAddr'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'repstr'
op|'='
string|'"<%s #%s on %s>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'sessionno'
op|','
name|'self'
op|'.'
name|'serverAddr'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'startReading'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A string representation of this connection.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'repstr'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns an IPv4Address.\n\n        This indicates the server\'s address.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'serverAddr'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPeer
dedent|''
name|'def'
name|'getPeer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns an IPv4Address.\n\n        This indicates the client\'s address.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'clientAddr'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Connector
dedent|''
dedent|''
name|'class'
name|'Connector'
op|'('
name|'TCPConnector'
op|')'
op|':'
newline|'\n'
DECL|member|_makeTransport
indent|'    '
name|'def'
name|'_makeTransport'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Client'
op|'('
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'port'
op|','
name|'self'
op|'.'
name|'bindAddress'
op|','
name|'self'
op|','
nl|'\n'
name|'self'
op|'.'
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Port
dedent|''
dedent|''
name|'class'
name|'Port'
op|'('
name|'styles'
op|'.'
name|'Ephemeral'
op|','
name|'_SocketCloser'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'IListeningPort'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|connected
name|'connected'
op|'='
name|'False'
newline|'\n'
DECL|variable|disconnected
name|'disconnected'
op|'='
name|'False'
newline|'\n'
DECL|variable|disconnecting
name|'disconnecting'
op|'='
name|'False'
newline|'\n'
DECL|variable|addressFamily
name|'addressFamily'
op|'='
name|'socket'
op|'.'
name|'AF_INET'
newline|'\n'
DECL|variable|socketType
name|'socketType'
op|'='
name|'socket'
op|'.'
name|'SOCK_STREAM'
newline|'\n'
nl|'\n'
DECL|variable|sessionno
name|'sessionno'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|variable|maxAccepts
name|'maxAccepts'
op|'='
number|'100'
newline|'\n'
nl|'\n'
comment|'# Actual port number being listened on, only set to a non-None'
nl|'\n'
comment|'# value when we are actually listening.'
nl|'\n'
DECL|variable|_realPortNumber
name|'_realPortNumber'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'port'
op|','
name|'factory'
op|','
name|'backlog'
op|'='
number|'50'
op|','
name|'interface'
op|'='
string|"''"
op|','
name|'reactor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'port'
op|'='
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'='
name|'factory'
newline|'\n'
name|'self'
op|'.'
name|'backlog'
op|'='
name|'backlog'
newline|'\n'
name|'self'
op|'.'
name|'interface'
op|'='
name|'interface'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_realPortNumber'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"<%s of %s on %s>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'__class__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_realPortNumber'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"<%s of %s (not listening)>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'__class__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|startListening
dedent|''
dedent|''
name|'def'
name|'startListening'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'skt'
op|'='
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'createSocket'
op|'('
name|'self'
op|'.'
name|'addressFamily'
op|','
nl|'\n'
name|'self'
op|'.'
name|'socketType'
op|')'
newline|'\n'
comment|'# TODO: resolve self.interface if necessary'
nl|'\n'
name|'skt'
op|'.'
name|'bind'
op|'('
op|'('
name|'self'
op|'.'
name|'interface'
op|','
name|'self'
op|'.'
name|'port'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|','
name|'le'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'CannotListenError'
op|','
op|'('
name|'self'
op|'.'
name|'interface'
op|','
name|'self'
op|'.'
name|'port'
op|','
name|'le'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'addrLen'
op|'='
name|'_iocp'
op|'.'
name|'maxAddrLen'
op|'('
name|'skt'
op|'.'
name|'fileno'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure that if we listened on port 0, we update that to'
nl|'\n'
comment|'# reflect what the OS actually assigned us.'
nl|'\n'
name|'self'
op|'.'
name|'_realPortNumber'
op|'='
name|'skt'
op|'.'
name|'getsockname'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"%s starting on %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'__class__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_realPortNumber'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'doStart'
op|'('
op|')'
newline|'\n'
name|'skt'
op|'.'
name|'listen'
op|'('
name|'self'
op|'.'
name|'backlog'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'disconnected'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'addActiveHandle'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'socket'
op|'='
name|'skt'
newline|'\n'
name|'self'
op|'.'
name|'getFileHandle'
op|'='
name|'self'
op|'.'
name|'socket'
op|'.'
name|'fileno'
newline|'\n'
name|'self'
op|'.'
name|'doAccept'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|','
name|'connDone'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'main'
op|'.'
name|'CONNECTION_DONE'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop accepting connections on this port.\n\n        This will shut down my socket and call self.connectionLost().\n        It returns a deferred which will fire successfully when the\n        port is actually closed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'disconnecting'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'connected'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'connectionLost'
op|','
name|'connDone'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'deferred'
newline|'\n'
nl|'\n'
DECL|variable|stopListening
dedent|''
dedent|''
name|'stopListening'
op|'='
name|'loseConnection'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Cleans up the socket.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'(Port %s Closed)'"
op|'%'
name|'self'
op|'.'
name|'_realPortNumber'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_realPortNumber'
op|'='
name|'None'
newline|'\n'
name|'d'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"deferred"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'deferred'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'deferred'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'disconnected'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'removeActiveHandle'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_closeSocket'
op|'('
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'socket'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'getFileHandle'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'doStop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'disconnecting'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'d'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'disconnecting'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'d'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|logPrefix
dedent|''
dedent|''
dedent|''
name|'def'
name|'logPrefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns the name of my class, to prefix log entries with.\n        """'
newline|'\n'
name|'return'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'__class__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns an IPv4Address.\n\n        This indicates the server\'s address.\n        """'
newline|'\n'
name|'return'
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
op|'*'
op|'('
name|'self'
op|'.'
name|'socket'
op|'.'
name|'getsockname'
op|'('
op|')'
op|'+'
nl|'\n'
op|'('
string|"'INET'"
op|','
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cbAccept
dedent|''
name|'def'
name|'cbAccept'
op|'('
name|'self'
op|','
name|'rc'
op|','
name|'bytes'
op|','
name|'evt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'handleAccept'
op|'('
name|'rc'
op|','
name|'evt'
op|')'
newline|'\n'
name|'if'
name|'not'
op|'('
name|'self'
op|'.'
name|'disconnecting'
name|'or'
name|'self'
op|'.'
name|'disconnected'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'doAccept'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|handleAccept
dedent|''
dedent|''
name|'def'
name|'handleAccept'
op|'('
name|'self'
op|','
name|'rc'
op|','
name|'evt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'disconnecting'
name|'or'
name|'self'
op|'.'
name|'disconnected'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# possible errors:'
nl|'\n'
comment|'# (WSAEMFILE, WSAENOBUFS, WSAENFILE, WSAENOMEM, WSAECONNABORTED)'
nl|'\n'
dedent|''
name|'if'
name|'rc'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Could not accept new connection -- %s (%s)"'
op|'%'
nl|'\n'
op|'('
name|'errno'
op|'.'
name|'errorcode'
op|'.'
name|'get'
op|'('
name|'rc'
op|','
string|"'unknown error'"
op|')'
op|','
name|'rc'
op|')'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'evt'
op|'.'
name|'newskt'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'SOL_SOCKET'
op|','
name|'SO_UPDATE_ACCEPT_CONTEXT'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'I'"
op|','
name|'self'
op|'.'
name|'socket'
op|'.'
name|'fileno'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'family'
op|','
name|'lAddr'
op|','
name|'rAddr'
op|'='
name|'_iocp'
op|'.'
name|'get_accept_addrs'
op|'('
name|'evt'
op|'.'
name|'newskt'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
nl|'\n'
name|'evt'
op|'.'
name|'buff'
op|')'
newline|'\n'
name|'assert'
name|'family'
op|'=='
name|'self'
op|'.'
name|'addressFamily'
newline|'\n'
nl|'\n'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
nl|'\n'
name|'address'
op|'.'
name|'_ServerFactoryIPv4Address'
op|'('
string|"'TCP'"
op|','
name|'rAddr'
op|'['
number|'0'
op|']'
op|','
name|'rAddr'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
name|'if'
name|'protocol'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'evt'
op|'.'
name|'newskt'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'s'
op|'='
name|'self'
op|'.'
name|'sessionno'
newline|'\n'
name|'self'
op|'.'
name|'sessionno'
op|'='
name|'s'
op|'+'
number|'1'
newline|'\n'
name|'transport'
op|'='
name|'Server'
op|'('
name|'evt'
op|'.'
name|'newskt'
op|','
name|'protocol'
op|','
nl|'\n'
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
name|'rAddr'
op|'['
number|'0'
op|']'
op|','
name|'rAddr'
op|'['
number|'1'
op|']'
op|','
string|"'INET'"
op|')'
op|','
nl|'\n'
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
name|'lAddr'
op|'['
number|'0'
op|']'
op|','
name|'lAddr'
op|'['
number|'1'
op|']'
op|','
string|"'INET'"
op|')'
op|','
nl|'\n'
name|'s'
op|','
name|'self'
op|'.'
name|'reactor'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|doAccept
dedent|''
dedent|''
name|'def'
name|'doAccept'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'numAccepts'
op|'='
number|'0'
newline|'\n'
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'evt'
op|'='
name|'_iocp'
op|'.'
name|'Event'
op|'('
name|'self'
op|'.'
name|'cbAccept'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
comment|'# see AcceptEx documentation'
nl|'\n'
name|'evt'
op|'.'
name|'buff'
op|'='
name|'buff'
op|'='
name|'_iocp'
op|'.'
name|'AllocateReadBuffer'
op|'('
number|'2'
op|'*'
op|'('
name|'self'
op|'.'
name|'addrLen'
op|'+'
number|'16'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'evt'
op|'.'
name|'newskt'
op|'='
name|'newskt'
op|'='
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'createSocket'
op|'('
name|'self'
op|'.'
name|'addressFamily'
op|','
nl|'\n'
name|'self'
op|'.'
name|'socketType'
op|')'
newline|'\n'
name|'rc'
op|'='
name|'_iocp'
op|'.'
name|'accept'
op|'('
name|'self'
op|'.'
name|'socket'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'newskt'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'buff'
op|','
name|'evt'
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'rc'
op|'=='
name|'ERROR_IO_PENDING'
nl|'\n'
name|'or'
op|'('
name|'not'
name|'rc'
name|'and'
name|'numAccepts'
op|'>='
name|'self'
op|'.'
name|'maxAccepts'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'evt'
op|'.'
name|'ignore'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'handleAccept'
op|'('
name|'rc'
op|','
name|'evt'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'numAccepts'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.test.test_iutils -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nUtility methods.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'warnings'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
op|','
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
op|','
name|'util'
name|'as'
name|'tputil'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'cStringIO'
name|'as'
name|'StringIO'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
DECL|function|_callProtocolWithDeferred
dedent|''
name|'def'
name|'_callProtocolWithDeferred'
op|'('
name|'protocol'
op|','
name|'executable'
op|','
name|'args'
op|','
name|'env'
op|','
name|'path'
op|','
name|'reactor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'reactor'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'protocol'
op|'('
name|'d'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'executable'
op|','
op|'('
name|'executable'
op|','
op|')'
op|'+'
name|'tuple'
op|'('
name|'args'
op|')'
op|','
name|'env'
op|','
name|'path'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_UnexpectedErrorOutput
dedent|''
name|'class'
name|'_UnexpectedErrorOutput'
op|'('
name|'IOError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Standard error data was received where it was not expected.  This is a\n    subclass of L{IOError} to preserve backward compatibility with the previous\n    error behavior of L{getProcessOutput}.\n\n    @ivar processEnded: A L{Deferred} which will fire when the process which\n        produced the data on stderr has ended (exited and all file descriptors\n        closed).\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'text'
op|','
name|'processEnded'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'IOError'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
string|'"got stderr: %r"'
op|'%'
op|'('
name|'text'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'processEnded'
op|'='
name|'processEnded'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_BackRelay
dedent|''
dedent|''
name|'class'
name|'_BackRelay'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Trivial protocol for communicating with a process and turning its output\n    into the result of a L{Deferred}.\n\n    @ivar deferred: A L{Deferred} which will be called back with all of stdout\n        and, if C{errortoo} is true, all of stderr as well (mixed together in\n        one string).  If C{errortoo} is false and any bytes are received over\n        stderr, this will fire with an L{_UnexpectedErrorOutput} instance and\n        the attribute will be set to C{None}.\n\n    @ivar onProcessEnded: If C{errortoo} is false and bytes are received over\n        stderr, this attribute will refer to a L{Deferred} which will be called\n        back when the process ends.  This C{Deferred} is also associated with\n        the L{_UnexpectedErrorOutput} which C{deferred} fires with earlier in\n        this case so that users can determine when the process has actually\n        ended, in addition to knowing when bytes have been received via stderr.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'deferred'
op|','
name|'errortoo'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'='
name|'deferred'
newline|'\n'
name|'self'
op|'.'
name|'s'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'if'
name|'errortoo'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'errReceived'
op|'='
name|'self'
op|'.'
name|'errReceivedIsGood'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'errReceived'
op|'='
name|'self'
op|'.'
name|'errReceivedIsBad'
newline|'\n'
nl|'\n'
DECL|member|errReceivedIsBad
dedent|''
dedent|''
name|'def'
name|'errReceivedIsBad'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'deferred'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'onProcessEnded'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'err'
op|'='
name|'_UnexpectedErrorOutput'
op|'('
name|'text'
op|','
name|'self'
op|'.'
name|'onProcessEnded'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'err'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|errReceivedIsGood
dedent|''
dedent|''
name|'def'
name|'errReceivedIsGood'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'s'
op|'.'
name|'write'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|outReceived
dedent|''
name|'def'
name|'outReceived'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'s'
op|'.'
name|'write'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'deferred'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'self'
op|'.'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'onProcessEnded'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'onProcessEnded'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|getProcessOutput
dedent|''
dedent|''
dedent|''
name|'def'
name|'getProcessOutput'
op|'('
name|'executable'
op|','
name|'args'
op|'='
op|'('
op|')'
op|','
name|'env'
op|'='
op|'{'
op|'}'
op|','
name|'path'
op|'='
name|'None'
op|','
name|'reactor'
op|'='
name|'None'
op|','
nl|'\n'
name|'errortoo'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Spawn a process and return its output as a deferred returning a string.\n\n    @param executable: The file name to run and get the output of - the\n                       full path should be used.\n\n    @param args: the command line arguments to pass to the process; a\n                 sequence of strings. The first string should *NOT* be the\n                 executable\'s name.\n\n    @param env: the environment variables to pass to the processs; a\n                dictionary of strings.\n\n    @param path: the path to run the subprocess in - defaults to the\n                 current directory.\n\n    @param reactor: the reactor to use - defaults to the default reactor\n\n    @param errortoo: If true, include stderr in the result.  If false, if\n        stderr is received the returned L{Deferred} will errback with an\n        L{IOError} instance with a C{processEnded} attribute.  The\n        C{processEnded} attribute refers to a L{Deferred} which fires when the\n        executed process ends.\n    """'
newline|'\n'
name|'return'
name|'_callProtocolWithDeferred'
op|'('
name|'lambda'
name|'d'
op|':'
nl|'\n'
name|'_BackRelay'
op|'('
name|'d'
op|','
name|'errortoo'
op|'='
name|'errortoo'
op|')'
op|','
nl|'\n'
name|'executable'
op|','
name|'args'
op|','
name|'env'
op|','
name|'path'
op|','
nl|'\n'
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_ValueGetter
dedent|''
name|'class'
name|'_ValueGetter'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'deferred'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'='
name|'deferred'
newline|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'reason'
op|'.'
name|'value'
op|'.'
name|'exitCode'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|getProcessValue
dedent|''
dedent|''
name|'def'
name|'getProcessValue'
op|'('
name|'executable'
op|','
name|'args'
op|'='
op|'('
op|')'
op|','
name|'env'
op|'='
op|'{'
op|'}'
op|','
name|'path'
op|'='
name|'None'
op|','
name|'reactor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Spawn a process and return its exit code as a Deferred."""'
newline|'\n'
name|'return'
name|'_callProtocolWithDeferred'
op|'('
name|'_ValueGetter'
op|','
name|'executable'
op|','
name|'args'
op|','
name|'env'
op|','
name|'path'
op|','
nl|'\n'
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_EverythingGetter
dedent|''
name|'class'
name|'_EverythingGetter'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'deferred'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'='
name|'deferred'
newline|'\n'
name|'self'
op|'.'
name|'outBuf'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'errBuf'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'outReceived'
op|'='
name|'self'
op|'.'
name|'outBuf'
op|'.'
name|'write'
newline|'\n'
name|'self'
op|'.'
name|'errReceived'
op|'='
name|'self'
op|'.'
name|'errBuf'
op|'.'
name|'write'
newline|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|'='
name|'self'
op|'.'
name|'outBuf'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'err'
op|'='
name|'self'
op|'.'
name|'errBuf'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'e'
op|'='
name|'reason'
op|'.'
name|'value'
newline|'\n'
name|'code'
op|'='
name|'e'
op|'.'
name|'exitCode'
newline|'\n'
name|'if'
name|'e'
op|'.'
name|'signal'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
op|'('
name|'out'
op|','
name|'err'
op|','
name|'e'
op|'.'
name|'signal'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
op|'('
name|'out'
op|','
name|'err'
op|','
name|'code'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|getProcessOutputAndValue
dedent|''
dedent|''
dedent|''
name|'def'
name|'getProcessOutputAndValue'
op|'('
name|'executable'
op|','
name|'args'
op|'='
op|'('
op|')'
op|','
name|'env'
op|'='
op|'{'
op|'}'
op|','
name|'path'
op|'='
name|'None'
op|','
nl|'\n'
name|'reactor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Spawn a process and returns a Deferred that will be called back with\n    its output (from stdout and stderr) and it\'s exit code as (out, err, code)\n    If a signal is raised, the Deferred will errback with the stdout and\n    stderr up to that point, along with the signal, as (out, err, signalNum)\n    """'
newline|'\n'
name|'return'
name|'_callProtocolWithDeferred'
op|'('
name|'_EverythingGetter'
op|','
name|'executable'
op|','
name|'args'
op|','
name|'env'
op|','
name|'path'
op|','
nl|'\n'
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_resetWarningFilters
dedent|''
name|'def'
name|'_resetWarningFilters'
op|'('
name|'passthrough'
op|','
name|'addedFilters'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'f'
name|'in'
name|'addedFilters'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'filters'
op|'.'
name|'remove'
op|'('
name|'f'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'passthrough'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|runWithWarningsSuppressed
dedent|''
name|'def'
name|'runWithWarningsSuppressed'
op|'('
name|'suppressedWarnings'
op|','
name|'f'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Run the function C{f}, but with some warnings suppressed.\n\n    @param suppressedWarnings: A list of arguments to pass to filterwarnings.\n                               Must be a sequence of 2-tuples (args, kwargs).\n    @param f: A callable, followed by its arguments and keyword arguments\n    """'
newline|'\n'
name|'for'
name|'args'
op|','
name|'kwargs'
name|'in'
name|'suppressedWarnings'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'filterwarnings'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'addedFilters'
op|'='
name|'warnings'
op|'.'
name|'filters'
op|'['
op|':'
name|'len'
op|'('
name|'suppressedWarnings'
op|')'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'f'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'        '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'_resetWarningFilters'
op|'('
name|'None'
op|','
name|'addedFilters'
op|')'
newline|'\n'
name|'raise'
name|'exc_info'
op|'['
number|'0'
op|']'
op|','
name|'exc_info'
op|'['
number|'1'
op|']'
op|','
name|'exc_info'
op|'['
number|'2'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'result'
op|','
name|'defer'
op|'.'
name|'Deferred'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'addBoth'
op|'('
name|'_resetWarningFilters'
op|','
name|'addedFilters'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'_resetWarningFilters'
op|'('
name|'None'
op|','
name|'addedFilters'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|suppressWarnings
dedent|''
dedent|''
name|'def'
name|'suppressWarnings'
op|'('
name|'f'
op|','
op|'*'
name|'suppressedWarnings'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wrap C{f} in a callable which suppresses the indicated warnings before\n    invoking C{f} and unsuppresses them afterwards.  If f returns a Deferred,\n    warnings will remain suppressed until the Deferred fires.\n    """'
newline|'\n'
DECL|function|warningSuppressingWrapper
name|'def'
name|'warningSuppressingWrapper'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'runWithWarningsSuppressed'
op|'('
name|'suppressedWarnings'
op|','
name|'f'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'tputil'
op|'.'
name|'mergeFunctionMetadata'
op|'('
name|'f'
op|','
name|'warningSuppressingWrapper'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
name|'__all__'
op|'='
op|'['
nl|'\n'
string|'"runWithWarningsSuppressed"'
op|','
string|'"suppressWarnings"'
op|','
nl|'\n'
nl|'\n'
string|'"getProcessOutput"'
op|','
string|'"getProcessValue"'
op|','
string|'"getProcessOutputAndValue"'
op|','
nl|'\n'
op|']'
newline|'\n'
endmarker|''
end_unit

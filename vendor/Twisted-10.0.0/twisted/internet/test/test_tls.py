begin_unit
comment|'# Copyright (c) 2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for implementations of L{ITLSTransport}.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|__metaclass__
name|'__metaclass__'
op|'='
name|'type'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'test'
op|'.'
name|'reactormixins'
name|'import'
name|'ReactorBuilder'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'protocol'
name|'import'
name|'ServerFactory'
op|','
name|'ClientFactory'
op|','
name|'Protocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'ITLSTransport'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
op|','
name|'DeferredList'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'ConnectionClosed'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'SkipTest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'runtime'
name|'import'
name|'platform'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'OpenSSL'
op|'.'
name|'crypto'
name|'import'
name|'FILETYPE_PEM'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|FILETYPE_PEM
indent|'    '
name|'FILETYPE_PEM'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'ssl'
name|'import'
name|'PrivateCertificate'
op|','
name|'KeyPair'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'ssl'
name|'import'
name|'ClientContextFactory'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SSLClientTestsMixin
dedent|''
name|'class'
name|'SSLClientTestsMixin'
op|'('
name|'ReactorBuilder'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Mixin defining tests relating to L{ITLSTransport}.\n    """'
newline|'\n'
name|'if'
name|'FILETYPE_PEM'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"OpenSSL is unavailable"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'platform'
op|'.'
name|'isWindows'
op|'('
op|')'
op|':'
newline|'\n'
DECL|variable|msg
indent|'        '
name|'msg'
op|'='
op|'('
nl|'\n'
string|'"For some reason, these reactors don\'t deal with SSL "'
nl|'\n'
string|'"disconnection correctly on Windows.  See #3371."'
op|')'
newline|'\n'
DECL|variable|skippedReactors
name|'skippedReactors'
op|'='
op|'{'
nl|'\n'
string|'"twisted.internet.glib2reactor.Glib2Reactor"'
op|':'
name|'msg'
op|','
nl|'\n'
string|'"twisted.internet.gtk2reactor.Gtk2Reactor"'
op|':'
name|'msg'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_certificateText
dedent|''
name|'_certificateText'
op|'='
op|'('
nl|'\n'
string|'"-----BEGIN CERTIFICATE-----\\n"'
nl|'\n'
string|'"MIIDBjCCAm+gAwIBAgIBATANBgkqhkiG9w0BAQQFADB7MQswCQYDVQQGEwJTRzER\\n"'
nl|'\n'
string|'"MA8GA1UEChMITTJDcnlwdG8xFDASBgNVBAsTC00yQ3J5cHRvIENBMSQwIgYDVQQD\\n"'
nl|'\n'
string|'"ExtNMkNyeXB0byBDZXJ0aWZpY2F0ZSBNYXN0ZXIxHTAbBgkqhkiG9w0BCQEWDm5n\\n"'
nl|'\n'
string|'"cHNAcG9zdDEuY29tMB4XDTAwMDkxMDA5NTEzMFoXDTAyMDkxMDA5NTEzMFowUzEL\\n"'
nl|'\n'
string|'"MAkGA1UEBhMCU0cxETAPBgNVBAoTCE0yQ3J5cHRvMRIwEAYDVQQDEwlsb2NhbGhv\\n"'
nl|'\n'
string|'"c3QxHTAbBgkqhkiG9w0BCQEWDm5ncHNAcG9zdDEuY29tMFwwDQYJKoZIhvcNAQEB\\n"'
nl|'\n'
string|'"BQADSwAwSAJBAKy+e3dulvXzV7zoTZWc5TzgApr8DmeQHTYC8ydfzH7EECe4R1Xh\\n"'
nl|'\n'
string|'"5kwIzOuuFfn178FBiS84gngaNcrFi0Z5fAkCAwEAAaOCAQQwggEAMAkGA1UdEwQC\\n"'
nl|'\n'
string|'"MAAwLAYJYIZIAYb4QgENBB8WHU9wZW5TU0wgR2VuZXJhdGVkIENlcnRpZmljYXRl\\n"'
nl|'\n'
string|'"MB0GA1UdDgQWBBTPhIKSvnsmYsBVNWjj0m3M2z0qVTCBpQYDVR0jBIGdMIGagBT7\\n"'
nl|'\n'
string|'"hyNp65w6kxXlxb8pUU/+7Sg4AaF/pH0wezELMAkGA1UEBhMCU0cxETAPBgNVBAoT\\n"'
nl|'\n'
string|'"CE0yQ3J5cHRvMRQwEgYDVQQLEwtNMkNyeXB0byBDQTEkMCIGA1UEAxMbTTJDcnlw\\n"'
nl|'\n'
string|'"dG8gQ2VydGlmaWNhdGUgTWFzdGVyMR0wGwYJKoZIhvcNAQkBFg5uZ3BzQHBvc3Qx\\n"'
nl|'\n'
string|'"LmNvbYIBADANBgkqhkiG9w0BAQQFAAOBgQA7/CqT6PoHycTdhEStWNZde7M/2Yc6\\n"'
nl|'\n'
string|'"BoJuVwnW8YxGO8Sn6UJ4FeffZNcYZddSDKosw8LtPOeWoK3JINjAk5jiPQ2cww++\\n"'
nl|'\n'
string|'"7QGG/g5NDjxFZNDJP1dGiLAxPW6JXwov4v0FmdzfLOZ01jDcgQQZqEpYlgpuI5JE\\n"'
nl|'\n'
string|'"WUQ9Ho4EzbYCOQ==\\n"'
nl|'\n'
string|'"-----END CERTIFICATE-----\\n"'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_privateKeyText
name|'_privateKeyText'
op|'='
op|'('
nl|'\n'
string|'"-----BEGIN RSA PRIVATE KEY-----\\n"'
nl|'\n'
string|'"MIIBPAIBAAJBAKy+e3dulvXzV7zoTZWc5TzgApr8DmeQHTYC8ydfzH7EECe4R1Xh\\n"'
nl|'\n'
string|'"5kwIzOuuFfn178FBiS84gngaNcrFi0Z5fAkCAwEAAQJBAIqm/bz4NA1H++Vx5Ewx\\n"'
nl|'\n'
string|'"OcKp3w19QSaZAwlGRtsUxrP7436QjnREM3Bm8ygU11BjkPVmtrKm6AayQfCHqJoT\\n"'
nl|'\n'
string|'"ZIECIQDW0BoMoL0HOYM/mrTLhaykYAVqgIeJsPjvkEhTFXWBuQIhAM3deFAvWNu4\\n"'
nl|'\n'
string|'"nklUQ37XsCT2c9tmNt1LAT+slG2JOTTRAiAuXDtC/m3NYVwyHfFm+zKHRzHkClk2\\n"'
nl|'\n'
string|'"HjubeEgjpj32AQIhAJqMGTaZVOwevTXvvHwNEH+vRWsAYU/gbx+OQB+7VOcBAiEA\\n"'
nl|'\n'
string|'"oolb6NMg/R3enNPvS1O4UU1H8wpaF77L4yiSWlE0p4w=\\n"'
nl|'\n'
string|'"-----END RSA PRIVATE KEY-----\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getServerContext
name|'def'
name|'getServerContext'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a new SSL context suitable for use in a test server.\n        """'
newline|'\n'
name|'cert'
op|'='
name|'PrivateCertificate'
op|'.'
name|'load'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_certificateText'
op|','
nl|'\n'
name|'KeyPair'
op|'.'
name|'load'
op|'('
name|'self'
op|'.'
name|'_privateKeyText'
op|','
name|'FILETYPE_PEM'
op|')'
op|','
nl|'\n'
name|'FILETYPE_PEM'
op|')'
newline|'\n'
name|'return'
name|'cert'
op|'.'
name|'options'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disconnectAfterWriteAfterStartTLS
dedent|''
name|'def'
name|'test_disconnectAfterWriteAfterStartTLS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ITCPTransport.loseConnection} ends a connection which was set up with\n        L{ITLSTransport.startTLS} and which has recently been written to.  This\n        is intended to verify that a socket send error masked by the TLS\n        implementation doesn\'t prevent the connection from being reported as\n        closed.\n        """'
newline|'\n'
DECL|class|ShortProtocol
name|'class'
name|'ShortProtocol'
op|'('
name|'Protocol'
op|')'
op|':'
newline|'\n'
DECL|member|connectionMade
indent|'            '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'ITLSTransport'
op|'.'
name|'providedBy'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
op|':'
newline|'\n'
comment|"# Functionality isn't available to be tested."
nl|'\n'
indent|'                    '
name|'finished'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'finished'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'finished'
op|'='
name|'None'
newline|'\n'
name|'finished'
op|'.'
name|'errback'
op|'('
name|'SkipTest'
op|'('
string|'"No ITLSTransport support"'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|'# Switch the transport to TLS.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'startTLS'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'context'
op|')'
newline|'\n'
comment|'# Force TLS to really get negotiated.  If nobody talks, nothing'
nl|'\n'
comment|'# will happen.'
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"x"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
comment|'# Stuff some bytes into the socket.  This mostly has the effect'
nl|'\n'
comment|'# of causing the next write to fail with ENOTCONN or EPIPE.'
nl|'\n'
comment|'# With the pyOpenSSL implementation of ITLSTransport, the error'
nl|'\n'
comment|'# is swallowed outside of the control of Twisted.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"y"'
op|')'
newline|'\n'
comment|'# Now close the connection, which requires a TLS close alert to'
nl|'\n'
comment|'# be sent.'
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
comment|'# This is the success case.  The client and the server want to'
nl|'\n'
comment|'# get here.'
nl|'\n'
indent|'                '
name|'finished'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'finished'
newline|'\n'
name|'if'
name|'finished'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'finished'
op|'='
name|'None'
newline|'\n'
name|'finished'
op|'.'
name|'callback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'serverFactory'
op|'='
name|'ServerFactory'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'.'
name|'finished'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'.'
name|'protocol'
op|'='
name|'ShortProtocol'
newline|'\n'
name|'serverFactory'
op|'.'
name|'context'
op|'='
name|'self'
op|'.'
name|'getServerContext'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'clientFactory'
op|'='
name|'ClientFactory'
op|'('
op|')'
newline|'\n'
name|'clientFactory'
op|'.'
name|'finished'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'clientFactory'
op|'.'
name|'protocol'
op|'='
name|'ShortProtocol'
newline|'\n'
name|'clientFactory'
op|'.'
name|'context'
op|'='
name|'ClientContextFactory'
op|'('
op|')'
newline|'\n'
name|'clientFactory'
op|'.'
name|'context'
op|'.'
name|'method'
op|'='
name|'serverFactory'
op|'.'
name|'context'
op|'.'
name|'method'
newline|'\n'
nl|'\n'
name|'lostConnectionResults'
op|'='
op|'['
op|']'
newline|'\n'
name|'finished'
op|'='
name|'DeferredList'
op|'('
nl|'\n'
op|'['
name|'serverFactory'
op|'.'
name|'finished'
op|','
name|'clientFactory'
op|'.'
name|'finished'
op|']'
op|','
nl|'\n'
DECL|variable|consumeErrors
name|'consumeErrors'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|function|cbFinished
name|'def'
name|'cbFinished'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'lostConnectionResults'
op|'.'
name|'extend'
op|'('
op|'['
name|'results'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|','
name|'results'
op|'['
number|'1'
op|']'
op|'['
number|'1'
op|']'
op|']'
op|')'
newline|'\n'
dedent|''
name|'finished'
op|'.'
name|'addCallback'
op|'('
name|'cbFinished'
op|')'
newline|'\n'
nl|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'serverFactory'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
nl|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
nl|'\n'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'host'
op|','
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
name|'clientFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
nl|'\n'
name|'finished'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ign'
op|':'
name|'reactor'
op|'.'
name|'stop'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'runReactor'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'lostConnectionResults'
op|'['
number|'0'
op|']'
op|'.'
name|'trap'
op|'('
name|'ConnectionClosed'
op|')'
newline|'\n'
name|'lostConnectionResults'
op|'['
number|'1'
op|']'
op|'.'
name|'trap'
op|'('
name|'ConnectionClosed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'globals'
op|'('
op|')'
op|'.'
name|'update'
op|'('
name|'SSLClientTestsMixin'
op|'.'
name|'makeTestCaseClasses'
op|'('
op|')'
op|')'
newline|'\n'
endmarker|''
end_unit

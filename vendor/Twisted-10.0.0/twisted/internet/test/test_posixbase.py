begin_unit
comment|'# Copyright (c) 2009-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.internet.posixbase} and supporting code.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'posixbase'
name|'import'
name|'PosixReactorBase'
op|','
name|'_Waker'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'protocol'
name|'import'
name|'ServerFactory'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'tcp'
name|'import'
name|'Port'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TrivialReactor
name|'class'
name|'TrivialReactor'
op|'('
name|'PosixReactorBase'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_readers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_writers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'PosixReactorBase'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addReader
dedent|''
name|'def'
name|'addReader'
op|'('
name|'self'
op|','
name|'reader'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_readers'
op|'['
name|'reader'
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeReader
dedent|''
name|'def'
name|'removeReader'
op|'('
name|'self'
op|','
name|'reader'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'self'
op|'.'
name|'_readers'
op|'['
name|'reader'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addWriter
dedent|''
name|'def'
name|'addWriter'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_writers'
op|'['
name|'writer'
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeWriter
dedent|''
name|'def'
name|'removeWriter'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'self'
op|'.'
name|'_writers'
op|'['
name|'writer'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PosixReactorBaseTests
dedent|''
dedent|''
name|'class'
name|'PosixReactorBaseTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{PosixReactorBase}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_checkWaker
name|'def'
name|'_checkWaker'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'reactor'
op|'.'
name|'waker'
op|','
name|'_Waker'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'reactor'
op|'.'
name|'waker'
op|','
name|'reactor'
op|'.'
name|'_internalReaders'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'reactor'
op|'.'
name|'waker'
op|','
name|'reactor'
op|'.'
name|'_readers'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_wakerIsInternalReader
dedent|''
name|'def'
name|'test_wakerIsInternalReader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When L{PosixReactorBase} is instantiated, it creates a waker and adds\n        it to its internal readers set.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'TrivialReactor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkWaker'
op|'('
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeAllSkipsInternalReaders
dedent|''
name|'def'
name|'test_removeAllSkipsInternalReaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Any L{IReadDescriptors} in L{PosixReactorBase._internalReaders} are\n        left alone by L{PosixReactorBase._removeAll}.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'TrivialReactor'
op|'('
op|')'
newline|'\n'
name|'extra'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'_internalReaders'
op|'.'
name|'add'
op|'('
name|'extra'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'addReader'
op|'('
name|'extra'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'_removeAll'
op|'('
name|'reactor'
op|'.'
name|'_readers'
op|','
name|'reactor'
op|'.'
name|'_writers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkWaker'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'extra'
op|','
name|'reactor'
op|'.'
name|'_internalReaders'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'extra'
op|','
name|'reactor'
op|'.'
name|'_readers'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeAllReturnsRemovedDescriptors
dedent|''
name|'def'
name|'test_removeAllReturnsRemovedDescriptors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{PosixReactorBase._removeAll} returns a list of removed\n        L{IReadDescriptor} and L{IWriteDescriptor} objects.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'TrivialReactor'
op|'('
op|')'
newline|'\n'
name|'reader'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'writer'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'addReader'
op|'('
name|'reader'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'addWriter'
op|'('
name|'writer'
op|')'
newline|'\n'
name|'removed'
op|'='
name|'reactor'
op|'.'
name|'_removeAll'
op|'('
nl|'\n'
name|'reactor'
op|'.'
name|'_readers'
op|','
name|'reactor'
op|'.'
name|'_writers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'removed'
op|')'
op|','
name|'set'
op|'('
op|'['
name|'reader'
op|','
name|'writer'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'reader'
op|','
name|'reactor'
op|'.'
name|'_readers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'writer'
op|','
name|'reactor'
op|'.'
name|'_writers'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TCPPortTests
dedent|''
dedent|''
name|'class'
name|'TCPPortTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{twisted.internet.tcp.Port}.\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'reactor'
op|','
name|'PosixReactorBase'
op|')'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"Non-posixbase reactor"'
newline|'\n'
nl|'\n'
DECL|member|test_connectionLostFailed
dedent|''
name|'def'
name|'test_connectionLostFailed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Port.stopListening} returns a L{Deferred} which errbacks if\n        L{Port.connectionLost} raises an exception.\n        """'
newline|'\n'
name|'port'
op|'='
name|'Port'
op|'('
number|'12345'
op|','
name|'ServerFactory'
op|'('
op|')'
op|')'
newline|'\n'
name|'port'
op|'.'
name|'connected'
op|'='
name|'True'
newline|'\n'
name|'port'
op|'.'
name|'connectionLost'
op|'='
name|'lambda'
name|'reason'
op|':'
number|'1'
op|'/'
number|'0'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|'('
op|')'
op|','
name|'ZeroDivisionError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TimeoutReportReactor
dedent|''
dedent|''
name|'class'
name|'TimeoutReportReactor'
op|'('
name|'PosixReactorBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A reactor which is just barely runnable and which cannot monitor any\n    readers or writers, and which fires a L{Deferred} with the timeout\n    passed to its C{doIteration} method as soon as that method is invoked.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'PosixReactorBase'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iterationTimeout'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'now'
op|'='
number|'100'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addReader
dedent|''
name|'def'
name|'addReader'
op|'('
name|'self'
op|','
name|'reader'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Ignore the reader.  This is necessary because the waker will be\n        added.  However, we won\'t actually monitor it for any events.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeAll
dedent|''
name|'def'
name|'removeAll'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        There are no readers or writers, so there is nothing to remove. \n        This will be called when the reactor stops, though, so it must be\n        implemented.\n        """'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|seconds
dedent|''
name|'def'
name|'seconds'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override the real clock with a deterministic one that can be easily\n        controlled in a unit test.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'now'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|doIteration
dedent|''
name|'def'
name|'doIteration'
op|'('
name|'self'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'iterationTimeout'
newline|'\n'
name|'if'
name|'d'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'iterationTimeout'
op|'='
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IterationTimeoutTests
dedent|''
dedent|''
dedent|''
name|'class'
name|'IterationTimeoutTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the timeout argument L{PosixReactorBase.run} calls\n    L{PosixReactorBase.doIteration} with in the presence of various delayed\n    calls.\n    """'
newline|'\n'
DECL|member|_checkIterationTimeout
name|'def'
name|'_checkIterationTimeout'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'timeout'
op|'='
op|'['
op|']'
newline|'\n'
name|'reactor'
op|'.'
name|'iterationTimeout'
op|'.'
name|'addCallback'
op|'('
name|'timeout'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'iterationTimeout'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ignored'
op|':'
name|'reactor'
op|'.'
name|'stop'
op|'('
op|')'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
name|'return'
name|'timeout'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noCalls
dedent|''
name|'def'
name|'test_noCalls'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If there are no delayed calls, C{doIteration} is called with a\n        timeout of C{None}.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'TimeoutReportReactor'
op|'('
op|')'
newline|'\n'
name|'timeout'
op|'='
name|'self'
op|'.'
name|'_checkIterationTimeout'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timeout'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_delayedCall
dedent|''
name|'def'
name|'test_delayedCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If there is a delayed call, C{doIteration} is called with a timeout\n        which is the difference between the current time and the time at\n        which that call is to run.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'TimeoutReportReactor'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'100'
op|','
name|'lambda'
op|':'
name|'None'
op|')'
newline|'\n'
name|'timeout'
op|'='
name|'self'
op|'.'
name|'_checkIterationTimeout'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timeout'
op|','
number|'100'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_timePasses
dedent|''
name|'def'
name|'test_timePasses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" \n        If a delayed call is scheduled and then some time passes, the\n        timeout passed to C{doIteration} is reduced by the amount of time\n        which passed.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'TimeoutReportReactor'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'100'
op|','
name|'lambda'
op|':'
name|'None'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'now'
op|'+='
number|'25'
newline|'\n'
name|'timeout'
op|'='
name|'self'
op|'.'
name|'_checkIterationTimeout'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timeout'
op|','
number|'75'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleDelayedCalls
dedent|''
name|'def'
name|'test_multipleDelayedCalls'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If there are several delayed calls, C{doIteration} is called with a\n        timeout which is the difference between the current time and the\n        time at which the earlier of the two calls is to run.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'TimeoutReportReactor'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'50'
op|','
name|'lambda'
op|':'
name|'None'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'10'
op|','
name|'lambda'
op|':'
name|'None'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'100'
op|','
name|'lambda'
op|':'
name|'None'
op|')'
newline|'\n'
name|'timeout'
op|'='
name|'self'
op|'.'
name|'_checkIterationTimeout'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timeout'
op|','
number|'10'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_resetDelayedCall
dedent|''
name|'def'
name|'test_resetDelayedCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a delayed call is reset, the timeout passed to C{doIteration} is\n        based on the interval between the time when reset is called and the\n        new delay of the call.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'TimeoutReportReactor'
op|'('
op|')'
newline|'\n'
name|'call'
op|'='
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'50'
op|','
name|'lambda'
op|':'
name|'None'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'now'
op|'+='
number|'25'
newline|'\n'
name|'call'
op|'.'
name|'reset'
op|'('
number|'15'
op|')'
newline|'\n'
name|'timeout'
op|'='
name|'self'
op|'.'
name|'_checkIterationTimeout'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timeout'
op|','
number|'15'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_delayDelayedCall
dedent|''
name|'def'
name|'test_delayDelayedCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a delayed call is re-delayed, the timeout passed to\n        C{doIteration} is based on the remaining time before the call would\n        have been made and the additional amount of time passed to the delay\n        method.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'TimeoutReportReactor'
op|'('
op|')'
newline|'\n'
name|'call'
op|'='
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'50'
op|','
name|'lambda'
op|':'
name|'None'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'now'
op|'+='
number|'10'
newline|'\n'
name|'call'
op|'.'
name|'delay'
op|'('
number|'20'
op|')'
newline|'\n'
name|'timeout'
op|'='
name|'self'
op|'.'
name|'_checkIterationTimeout'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timeout'
op|','
number|'60'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cancelDelayedCall
dedent|''
name|'def'
name|'test_cancelDelayedCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the only delayed call is canceled, C{None} is the timeout passed\n        to C{doIteration}.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'TimeoutReportReactor'
op|'('
op|')'
newline|'\n'
name|'call'
op|'='
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'50'
op|','
name|'lambda'
op|':'
name|'None'
op|')'
newline|'\n'
name|'call'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
name|'timeout'
op|'='
name|'self'
op|'.'
name|'_checkIterationTimeout'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timeout'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

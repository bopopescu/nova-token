begin_unit
comment|'# -*- test-case-name: twisted.internet.test.test_inlinecb -*-'
nl|'\n'
comment|'# Copyright (c) 2009-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.internet.defer.inlineCallbacks}.\n\nThese tests are defined in a non-C{test_*} module because they are\nsyntactically invalid on python < 2.5.  test_inlinecb will conditionally import\nthese tests on python 2.5 and greater.\n\nSome tests for inlineCallbacks are defined in L{twisted.test.test_defgen} as\nwell: see U{http://twistedmatrix.com/trac/ticket/4182}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
op|','
name|'returnValue'
op|','
name|'inlineCallbacks'
newline|'\n'
nl|'\n'
DECL|class|NonLocalExitTests
name|'class'
name|'NonLocalExitTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    It\'s possible for L{returnValue} to be (accidentally) invoked at a stack\n    level below the L{inlineCallbacks}-decorated function which it is exiting.\n    If this happens, L{returnValue} should report useful errors.\n\n    If L{returnValue} is invoked from a function not decorated by\n    L{inlineCallbacks}, it will emit a warning if it causes an\n    L{inlineCallbacks} function further up the stack to exit.\n    """'
newline|'\n'
nl|'\n'
DECL|member|mistakenMethod
name|'def'
name|'mistakenMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This method mistakenly invokes L{returnValue}, despite the fact that it\n        is not decorated with L{inlineCallbacks}.\n        """'
newline|'\n'
name|'returnValue'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|assertMistakenMethodWarning
dedent|''
name|'def'
name|'assertMistakenMethodWarning'
op|'('
name|'self'
op|','
name|'resultList'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Flush the current warnings and assert that we have been told that\n        C{mistakenMethod} was invoked, and that the result from the Deferred\n        that was fired (appended to the given list) is C{mistakenMethod}\'s\n        result.  The warning should indicate that an inlineCallbacks function\n        called \'inline\' was made to exit.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resultList'
op|','
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'warnings'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
name|'offendingFunctions'
op|'='
op|'['
name|'self'
op|'.'
name|'mistakenMethod'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'warnings'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'category'"
op|']'
op|','
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
nl|'\n'
string|'"returnValue() in \'mistakenMethod\' causing \'inline\' to exit: "'
nl|'\n'
string|'"returnValue should only be invoked by functions decorated with "'
nl|'\n'
string|'"inlineCallbacks"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_returnValueNonLocalWarning
dedent|''
name|'def'
name|'test_returnValueNonLocalWarning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{returnValue} will emit a non-local exit warning in the simplest case,\n        where the offending function is invoked immediately.\n        """'
newline|'\n'
op|'@'
name|'inlineCallbacks'
newline|'\n'
DECL|function|inline
name|'def'
name|'inline'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mistakenMethod'
op|'('
op|')'
newline|'\n'
name|'returnValue'
op|'('
number|'2'
op|')'
newline|'\n'
name|'yield'
number|'0'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'inline'
op|'('
op|')'
newline|'\n'
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'results'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertMistakenMethodWarning'
op|'('
name|'results'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_returnValueNonLocalDeferred
dedent|''
name|'def'
name|'test_returnValueNonLocalDeferred'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{returnValue} will emit a non-local warning in the case where the\n        L{inlineCallbacks}-decorated function has already yielded a Deferred\n        and therefore moved its generator function along.\n        """'
newline|'\n'
name|'cause'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
op|'@'
name|'inlineCallbacks'
newline|'\n'
DECL|function|inline
name|'def'
name|'inline'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'cause'
newline|'\n'
name|'self'
op|'.'
name|'mistakenMethod'
op|'('
op|')'
newline|'\n'
name|'returnValue'
op|'('
number|'2'
op|')'
newline|'\n'
dedent|''
name|'effect'
op|'='
name|'inline'
op|'('
op|')'
newline|'\n'
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'effect'
op|'.'
name|'addCallback'
op|'('
name|'results'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'results'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'cause'
op|'.'
name|'callback'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertMistakenMethodWarning'
op|'('
name|'results'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

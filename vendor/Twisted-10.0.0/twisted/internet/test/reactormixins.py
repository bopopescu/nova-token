begin_unit
comment|'# Copyright (c) 2008-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for implementations of L{IReactorTime}.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|__metaclass__
name|'__metaclass__'
op|'='
name|'type'
newline|'\n'
nl|'\n'
name|'import'
name|'signal'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'TimeoutError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
op|','
name|'SkipTest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'runtime'
name|'import'
name|'platformType'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'reflect'
name|'import'
name|'namedAny'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'failure'
name|'import'
name|'Failure'
newline|'\n'
nl|'\n'
comment|'# Access private APIs.'
nl|'\n'
name|'if'
name|'platformType'
op|'=='
string|"'posix'"
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'process'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|process
indent|'    '
name|'process'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReactorBuilder
dedent|''
name|'class'
name|'ReactorBuilder'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{TestCase} mixin which provides a reactor-creation API.  This mixin\n    defines C{setUp} and C{tearDown}, so mix it in before L{TestCase} or call\n    its methods from the overridden ones in the subclass.\n\n    @cvar skippedReactors: A dict mapping FQPN strings of reactors for\n        which the tests defined by this class will be skipped to strings\n        giving the skip message.\n    @cvar requiredInterfaces: A C{list} of interfaces which the reactor must\n        provide or these tests will be skipped.  The default, C{None}, means\n        that no interfaces are required.\n    @ivar reactorFactory: A no-argument callable which returns the reactor to\n        use for testing.\n    @ivar originalHandler: The SIGCHLD handler which was installed when setUp\n        ran and which will be re-installed when tearDown runs.\n    @ivar _reactors: A list of FQPN strings giving the reactors for which\n        TestCases will be created.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|_reactors
name|'_reactors'
op|'='
op|'['
string|'"twisted.internet.selectreactor.SelectReactor"'
op|','
nl|'\n'
string|'"twisted.internet.pollreactor.PollReactor"'
op|','
nl|'\n'
string|'"twisted.internet.epollreactor.EPollReactor"'
op|','
nl|'\n'
string|'"twisted.internet.glib2reactor.Glib2Reactor"'
op|','
nl|'\n'
string|'"twisted.internet.gtk2reactor.Gtk2Reactor"'
op|','
nl|'\n'
string|'"twisted.internet.kqueuereactor.KQueueReactor"'
op|','
nl|'\n'
string|'"twisted.internet.win32eventreactor.Win32Reactor"'
op|','
nl|'\n'
string|'"twisted.internet.iocpreactor.reactor.IOCPReactor"'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|reactorFactory
name|'reactorFactory'
op|'='
name|'None'
newline|'\n'
DECL|variable|originalHandler
name|'originalHandler'
op|'='
name|'None'
newline|'\n'
DECL|variable|requiredInterface
name|'requiredInterface'
op|'='
name|'None'
newline|'\n'
DECL|variable|skippedReactors
name|'skippedReactors'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Clear the SIGCHLD handler, if there is one, to ensure an environment\n        like the one which exists prior to a call to L{reactor.run}.\n        """'
newline|'\n'
name|'if'
name|'platformType'
op|'=='
string|"'posix'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'originalHandler'
op|'='
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGCHLD'
op|','
name|'signal'
op|'.'
name|'SIG_DFL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Restore the original SIGCHLD handler and reap processes as long as\n        there seem to be any remaining.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'originalHandler'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGCHLD'
op|','
name|'self'
op|'.'
name|'originalHandler'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'process'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'while'
name|'process'
op|'.'
name|'reapProcessHandlers'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
nl|'\n'
string|'"ReactorBuilder.tearDown reaping some processes %r"'
op|'%'
op|'('
nl|'\n'
name|'process'
op|'.'
name|'reapProcessHandlers'
op|','
op|')'
op|')'
newline|'\n'
name|'process'
op|'.'
name|'reapAllProcesses'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unbuildReactor
dedent|''
dedent|''
dedent|''
name|'def'
name|'unbuildReactor'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Clean up any resources which may have been allocated for the given\n        reactor by its creation or by a test which used it.\n        """'
newline|'\n'
comment|'# Chris says:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# XXX These explicit calls to clean up the waker (and any other'
nl|'\n'
comment|'# internal readers) should become obsolete when bug #3063 is'
nl|'\n'
comment|'# fixed. -radix, 2008-02-29. Fortunately it should probably cause an'
nl|'\n'
comment|'# error when bug #3063 is fixed, so it should be removed in the same'
nl|'\n'
comment|'# branch that fixes it.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# -exarkun'
nl|'\n'
name|'if'
name|'getattr'
op|'('
name|'reactor'
op|','
string|"'_internalReaders'"
op|','
name|'None'
op|')'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'reader'
name|'in'
name|'reactor'
op|'.'
name|'_internalReaders'
op|':'
newline|'\n'
indent|'                '
name|'reactor'
op|'.'
name|'removeReader'
op|'('
name|'reader'
op|')'
newline|'\n'
name|'reader'
op|'.'
name|'connectionLost'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'reactor'
op|'.'
name|'_internalReaders'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# Here's an extra thing unrelated to wakers but necessary for"
nl|'\n'
comment|'# cleaning up after the reactors we make.  -exarkun'
nl|'\n'
dedent|''
name|'reactor'
op|'.'
name|'disconnectAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# It would also be bad if any timed calls left over were allowed to'
nl|'\n'
comment|'# run.'
nl|'\n'
name|'calls'
op|'='
name|'reactor'
op|'.'
name|'getDelayedCalls'
op|'('
op|')'
newline|'\n'
name|'for'
name|'c'
name|'in'
name|'calls'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildReactor
dedent|''
dedent|''
name|'def'
name|'buildReactor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create and return a reactor using C{self.reactorFactory}.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'='
name|'self'
op|'.'
name|'reactorFactory'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
comment|'# Unfortunately, not all errors which result in a reactor being'
nl|'\n'
comment|'# unusable are detectable without actually instantiating the'
nl|'\n'
comment|'# reactor.  So we catch some more here and skip the test if'
nl|'\n'
comment|'# necessary.'
nl|'\n'
indent|'            '
name|'raise'
name|'SkipTest'
op|'('
name|'Failure'
op|'('
op|')'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'requiredInterface'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'self'
op|'.'
name|'requiredInterface'
op|'.'
name|'providedBy'
op|'('
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'unbuildReactor'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'raise'
name|'SkipTest'
op|'('
nl|'\n'
string|'"%r does not provide %r"'
op|'%'
op|'('
nl|'\n'
name|'reactor'
op|','
name|'self'
op|'.'
name|'requiredInterface'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'unbuildReactor'
op|','
name|'reactor'
op|')'
newline|'\n'
name|'return'
name|'reactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|runReactor
dedent|''
name|'def'
name|'runReactor'
op|'('
name|'self'
op|','
name|'reactor'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run the reactor for at most the given amount of time.\n\n        @param reactor: The reactor to run.\n\n        @type timeout: C{int} or C{float}\n        @param timeout: The maximum amount of time, specified in seconds, to\n            allow the reactor to run.  If the reactor is still running after\n            this much time has elapsed, it will be stopped and an exception\n            raised.  If C{None}, the default test method timeout imposed by\n            Trial will be used.  This depends on the L{IReactorTime}\n            implementation of C{reactor} for correct operation.\n\n        @raise TimeoutError: If the reactor is still running after C{timeout}\n            seconds.\n        """'
newline|'\n'
name|'if'
name|'timeout'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'timeout'
op|'='
name|'self'
op|'.'
name|'getTimeout'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'timedOut'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|stop
name|'def'
name|'stop'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'timedOut'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'reactor'
op|'.'
name|'callLater'
op|'('
name|'timeout'
op|','
name|'stop'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
name|'if'
name|'timedOut'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TimeoutError'
op|'('
nl|'\n'
string|'"reactor still running after %s seconds"'
op|'%'
op|'('
name|'timeout'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeTestCaseClasses
dedent|''
dedent|''
name|'def'
name|'makeTestCaseClasses'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a L{TestCase} subclass which mixes in C{cls} for each known\n        reactor and return a dict mapping their names to them.\n        """'
newline|'\n'
name|'classes'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'reactor'
name|'in'
name|'cls'
op|'.'
name|'_reactors'
op|':'
newline|'\n'
indent|'            '
name|'shortReactorName'
op|'='
name|'reactor'
op|'.'
name|'split'
op|'('
string|'"."'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'name'
op|'='
op|'('
name|'cls'
op|'.'
name|'__name__'
op|'+'
string|'"."'
op|'+'
name|'shortReactorName'
op|')'
op|'.'
name|'replace'
op|'('
string|'"."'
op|','
string|'"_"'
op|')'
newline|'\n'
DECL|class|testcase
name|'class'
name|'testcase'
op|'('
name|'cls'
op|','
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|__module__
indent|'                '
name|'__module__'
op|'='
name|'cls'
op|'.'
name|'__module__'
newline|'\n'
name|'if'
name|'reactor'
name|'in'
name|'cls'
op|'.'
name|'skippedReactors'
op|':'
newline|'\n'
DECL|variable|skip
indent|'                    '
name|'skip'
op|'='
name|'cls'
op|'.'
name|'skippedReactors'
op|'['
name|'reactor'
op|']'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
DECL|variable|reactorFactory
indent|'                    '
name|'reactorFactory'
op|'='
name|'namedAny'
op|'('
name|'reactor'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
DECL|variable|skip
indent|'                    '
name|'skip'
op|'='
name|'Failure'
op|'('
op|')'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'testcase'
op|'.'
name|'__name__'
op|'='
name|'name'
newline|'\n'
name|'classes'
op|'['
name|'testcase'
op|'.'
name|'__name__'
op|']'
op|'='
name|'testcase'
newline|'\n'
dedent|''
name|'return'
name|'classes'
newline|'\n'
DECL|variable|makeTestCaseClasses
dedent|''
name|'makeTestCaseClasses'
op|'='
name|'classmethod'
op|'('
name|'makeTestCaseClasses'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
name|'__all__'
op|'='
op|'['
string|"'ReactorBuilder'"
op|']'
newline|'\n'
endmarker|''
end_unit

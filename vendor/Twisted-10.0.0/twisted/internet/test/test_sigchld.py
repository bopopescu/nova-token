begin_unit
comment|'# Copyright (c) 2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.internet._sigchld}, an alternate, superior SIGCHLD\nmonitoring API.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'signal'
op|','
name|'errno'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'log'
name|'import'
name|'msg'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'fdesc'
name|'import'
name|'setNonBlocking'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'_signals'
name|'import'
name|'installHandler'
op|','
name|'isDefaultHandler'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'_signals'
name|'import'
name|'_extInstallHandler'
op|','
name|'_extIsDefaultHandler'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'_signals'
name|'import'
name|'_installHandlerUsingSetWakeup'
op|','
name|'_installHandlerUsingSignal'
op|','
name|'_isDefaultHandler'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SIGCHLDTestsMixin
name|'class'
name|'SIGCHLDTestsMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Mixin for L{TestCase} subclasses which defines several tests for\n    I{installHandler} and I{isDefaultHandler}.  Subclasses are expected to\n    define C{self.installHandler} and C{self.isDefaultHandler} to invoke the\n    implementation to be tested.\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'getattr'
op|'('
name|'signal'
op|','
string|"'SIGCHLD'"
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"Platform does not have SIGCHLD"'
newline|'\n'
nl|'\n'
DECL|member|installHandler
dedent|''
name|'def'
name|'installHandler'
op|'('
name|'self'
op|','
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override in a subclass to install a SIGCHLD handler which writes a byte\n        to the given file descriptor.  Return the previously registered file\n        descriptor.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isDefaultHandler
dedent|''
name|'def'
name|'isDefaultHandler'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override in a subclass to determine if the current SIGCHLD handler is\n        SIG_DFL or not.  Return True if it is SIG_DFL, False otherwise.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|pipe
dedent|''
name|'def'
name|'pipe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a non-blocking pipe which will be closed after the currently\n        running test.\n        """'
newline|'\n'
name|'read'
op|','
name|'write'
op|'='
name|'os'
op|'.'
name|'pipe'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'os'
op|'.'
name|'close'
op|','
name|'read'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'os'
op|'.'
name|'close'
op|','
name|'write'
op|')'
newline|'\n'
name|'setNonBlocking'
op|'('
name|'read'
op|')'
newline|'\n'
name|'setNonBlocking'
op|'('
name|'write'
op|')'
newline|'\n'
name|'return'
name|'read'
op|','
name|'write'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Save the current SIGCHLD handler as reported by L{signal.signal} and\n        the current file descriptor registered with L{installHandler}.\n        """'
newline|'\n'
name|'handler'
op|'='
name|'signal'
op|'.'
name|'getsignal'
op|'('
name|'signal'
op|'.'
name|'SIGCHLD'
op|')'
newline|'\n'
name|'if'
name|'handler'
op|'!='
name|'signal'
op|'.'
name|'SIG_DFL'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'signalModuleHandler'
op|'='
name|'handler'
newline|'\n'
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGCHLD'
op|','
name|'signal'
op|'.'
name|'SIG_DFL'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'signalModuleHandler'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'oldFD'
op|'='
name|'self'
op|'.'
name|'installHandler'
op|'('
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'signalModuleHandler'
name|'is'
name|'not'
name|'None'
name|'and'
name|'self'
op|'.'
name|'oldFD'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'('
string|'"SIGCHLD setup issue: %r %r"'
op|'%'
op|'('
name|'self'
op|'.'
name|'signalModuleHandler'
op|','
name|'self'
op|'.'
name|'oldFD'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'RuntimeError'
op|'('
string|'"You used some signal APIs wrong!  Try again."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Restore whatever signal handler was present when setUp ran.\n        """'
newline|'\n'
comment|'# If tests set up any kind of handlers, clear them out.'
nl|'\n'
name|'self'
op|'.'
name|'installHandler'
op|'('
op|'-'
number|'1'
op|')'
newline|'\n'
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGCHLD'
op|','
name|'signal'
op|'.'
name|'SIG_DFL'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now restore whatever the setup was before the test ran.'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'signalModuleHandler'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGCHLD'
op|','
name|'self'
op|'.'
name|'signalModuleHandler'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'oldFD'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'installHandler'
op|'('
name|'self'
op|'.'
name|'oldFD'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_isDefaultHandler
dedent|''
dedent|''
name|'def'
name|'test_isDefaultHandler'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{isDefaultHandler} returns true if the SIGCHLD handler is SIG_DFL,\n        false otherwise.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'isDefaultHandler'
op|'('
op|')'
op|')'
newline|'\n'
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGCHLD'
op|','
name|'signal'
op|'.'
name|'SIG_IGN'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'isDefaultHandler'
op|'('
op|')'
op|')'
newline|'\n'
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGCHLD'
op|','
name|'signal'
op|'.'
name|'SIG_DFL'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'isDefaultHandler'
op|'('
op|')'
op|')'
newline|'\n'
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGCHLD'
op|','
name|'lambda'
op|'*'
name|'args'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'isDefaultHandler'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_returnOldFD
dedent|''
name|'def'
name|'test_returnOldFD'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{installHandler} returns the previously registered file descriptor.\n        """'
newline|'\n'
name|'read'
op|','
name|'write'
op|'='
name|'self'
op|'.'
name|'pipe'
op|'('
op|')'
newline|'\n'
name|'oldFD'
op|'='
name|'self'
op|'.'
name|'installHandler'
op|'('
name|'write'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'installHandler'
op|'('
name|'oldFD'
op|')'
op|','
name|'write'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_uninstallHandler
dedent|''
name|'def'
name|'test_uninstallHandler'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{installHandler(-1)} removes the SIGCHLD handler completely.\n        """'
newline|'\n'
name|'read'
op|','
name|'write'
op|'='
name|'self'
op|'.'
name|'pipe'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'isDefaultHandler'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'installHandler'
op|'('
name|'write'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'isDefaultHandler'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'installHandler'
op|'('
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'isDefaultHandler'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_installHandler
dedent|''
name|'def'
name|'test_installHandler'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The file descriptor passed to L{installHandler} has a byte written to\n        it when SIGCHLD is delivered to the process.\n        """'
newline|'\n'
name|'read'
op|','
name|'write'
op|'='
name|'self'
op|'.'
name|'pipe'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'installHandler'
op|'('
name|'write'
op|')'
newline|'\n'
nl|'\n'
name|'exc'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'os'
op|'.'
name|'read'
op|','
name|'read'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'exc'
op|'.'
name|'errno'
op|','
name|'errno'
op|'.'
name|'EAGAIN'
op|')'
newline|'\n'
nl|'\n'
name|'os'
op|'.'
name|'kill'
op|'('
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
op|','
name|'signal'
op|'.'
name|'SIGCHLD'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'os'
op|'.'
name|'read'
op|'('
name|'read'
op|','
number|'5'
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DefaultSIGCHLDTests
dedent|''
dedent|''
name|'class'
name|'DefaultSIGCHLDTests'
op|'('
name|'SIGCHLDTestsMixin'
op|','
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for whatever implementation is selected for the L{installHandler}\n    and L{isDefaultHandler} APIs.\n    """'
newline|'\n'
DECL|variable|installHandler
name|'installHandler'
op|'='
name|'staticmethod'
op|'('
name|'installHandler'
op|')'
newline|'\n'
DECL|variable|isDefaultHandler
name|'isDefaultHandler'
op|'='
name|'staticmethod'
op|'('
name|'isDefaultHandler'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExtensionSIGCHLDTests
dedent|''
name|'class'
name|'ExtensionSIGCHLDTests'
op|'('
name|'SIGCHLDTestsMixin'
op|','
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the L{twisted.internet._sigchld} implementation of the\n    L{installHandler} and L{isDefaultHandler} APIs.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'_sigchld'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"twisted.internet._sigchld is not available"'
newline|'\n'
nl|'\n'
DECL|variable|installHandler
dedent|''
name|'installHandler'
op|'='
name|'_extInstallHandler'
newline|'\n'
DECL|variable|isDefaultHandler
name|'isDefaultHandler'
op|'='
name|'_extIsDefaultHandler'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SetWakeupSIGCHLDTests
dedent|''
name|'class'
name|'SetWakeupSIGCHLDTests'
op|'('
name|'SIGCHLDTestsMixin'
op|','
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the L{signal.set_wakeup_fd} implementation of the\n    L{installHandler} and L{isDefaultHandler} APIs.\n    """'
newline|'\n'
comment|'# Check both of these.  On Ubuntu 9.10 (to take an example completely at'
nl|'\n'
comment|'# random), Python 2.5 has set_wakeup_fd but not siginterrupt.'
nl|'\n'
name|'if'
op|'('
name|'getattr'
op|'('
name|'signal'
op|','
string|"'set_wakeup_fd'"
op|','
name|'None'
op|')'
name|'is'
name|'None'
nl|'\n'
name|'or'
name|'getattr'
op|'('
name|'signal'
op|','
string|"'siginterrupt'"
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|')'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"signal.set_wakeup_fd is not available"'
newline|'\n'
nl|'\n'
DECL|variable|installHandler
dedent|''
name|'installHandler'
op|'='
name|'staticmethod'
op|'('
name|'_installHandlerUsingSetWakeup'
op|')'
newline|'\n'
DECL|variable|isDefaultHandler
name|'isDefaultHandler'
op|'='
name|'staticmethod'
op|'('
name|'_isDefaultHandler'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PlainSignalModuleSIGCHLDTests
dedent|''
name|'class'
name|'PlainSignalModuleSIGCHLDTests'
op|'('
name|'SIGCHLDTestsMixin'
op|','
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the L{signal.signal} implementation of the L{installHandler}\n    and L{isDefaultHandler} APIs.\n    """'
newline|'\n'
DECL|variable|installHandler
name|'installHandler'
op|'='
name|'staticmethod'
op|'('
name|'_installHandlerUsingSignal'
op|')'
newline|'\n'
DECL|variable|isDefaultHandler
name|'isDefaultHandler'
op|'='
name|'staticmethod'
op|'('
name|'_isDefaultHandler'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for implementations of L{IReactorTCP}.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|__metaclass__
name|'__metaclass__'
op|'='
name|'type'
newline|'\n'
nl|'\n'
name|'import'
name|'socket'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'test'
op|'.'
name|'reactormixins'
name|'import'
name|'ReactorBuilder'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'DNSLookupError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IResolverSimple'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'address'
name|'import'
name|'IPv4Address'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'succeed'
op|','
name|'fail'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'protocol'
name|'import'
name|'ServerFactory'
op|','
name|'ClientFactory'
op|','
name|'Protocol'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Stop
name|'class'
name|'Stop'
op|'('
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A client factory which stops a reactor when a connection attempt fails.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
dedent|''
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeResolver
dedent|''
dedent|''
name|'class'
name|'FakeResolver'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A resolver implementation based on a C{dict} mapping names to addresses.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IResolverSimple'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'names'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'names'
op|'='
name|'names'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHostByName
dedent|''
name|'def'
name|'getHostByName'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'succeed'
op|'('
name|'self'
op|'.'
name|'names'
op|'['
name|'name'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'('
name|'DNSLookupError'
op|'('
string|'"FakeResolver couldn\'t find "'
op|'+'
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TCPClientTestsBuilder
dedent|''
dedent|''
dedent|''
name|'class'
name|'TCPClientTestsBuilder'
op|'('
name|'ReactorBuilder'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Builder defining tests relating to L{IReactorTCP.connectTCP}.\n    """'
newline|'\n'
DECL|member|_freePort
name|'def'
name|'_freePort'
op|'('
name|'self'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'probe'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'probe'
op|'.'
name|'bind'
op|'('
op|'('
name|'interface'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'return'
name|'probe'
op|'.'
name|'getsockname'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'probe'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_clientConnectionFailedStopsReactor
dedent|''
dedent|''
name|'def'
name|'test_clientConnectionFailedStopsReactor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The reactor can be stopped by a client factory\'s\n        C{clientConnectionFailed} method.\n        """'
newline|'\n'
name|'host'
op|','
name|'port'
op|'='
name|'self'
op|'.'
name|'_freePort'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'Stop'
op|'('
name|'reactor'
op|')'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addresses
dedent|''
name|'def'
name|'test_addresses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A client\'s transport\'s C{getHost} and C{getPeer} return L{IPv4Address}\n        instances which give the dotted-quad string form of the local and\n        remote endpoints of the connection respectively.\n        """'
newline|'\n'
name|'host'
op|','
name|'port'
op|'='
name|'self'
op|'.'
name|'_freePort'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'serverFactory'
op|'='
name|'ServerFactory'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'.'
name|'protocol'
op|'='
name|'Protocol'
newline|'\n'
name|'server'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'serverFactory'
op|','
name|'interface'
op|'='
name|'host'
op|')'
newline|'\n'
name|'serverAddress'
op|'='
name|'server'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'addresses'
op|'='
op|'{'
string|"'host'"
op|':'
name|'None'
op|','
string|"'peer'"
op|':'
name|'None'
op|'}'
newline|'\n'
DECL|class|CheckAddress
name|'class'
name|'CheckAddress'
op|'('
name|'Protocol'
op|')'
op|':'
newline|'\n'
DECL|member|makeConnection
indent|'            '
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'addresses'
op|'['
string|"'host'"
op|']'
op|'='
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
name|'addresses'
op|'['
string|"'peer'"
op|']'
op|'='
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'clientFactory'
op|'='
name|'Stop'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'clientFactory'
op|'.'
name|'protocol'
op|'='
name|'CheckAddress'
newline|'\n'
name|'client'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
nl|'\n'
string|"'localhost'"
op|','
name|'server'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
name|'clientFactory'
op|','
nl|'\n'
DECL|variable|bindAddress
name|'bindAddress'
op|'='
op|'('
string|"'127.0.0.1'"
op|','
name|'port'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'reactor'
op|'.'
name|'installResolver'
op|'('
name|'FakeResolver'
op|'('
op|'{'
string|"'localhost'"
op|':'
string|"'127.0.0.1'"
op|'}'
op|')'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
comment|'# self.runReactor(reactor)'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'addresses'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'127.0.0.1'"
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'addresses'
op|'['
string|"'peer'"
op|']'
op|','
nl|'\n'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'127.0.0.1'"
op|','
name|'serverAddress'
op|'.'
name|'port'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectEvent
dedent|''
name|'def'
name|'test_connectEvent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This test checks that we correctly get notifications event for a\n        client. This ought to prevent a regression under Windows using the GTK2\n        reactor. See #3925.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'serverFactory'
op|'='
name|'ServerFactory'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'.'
name|'protocol'
op|'='
name|'Protocol'
newline|'\n'
name|'server'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'serverFactory'
op|')'
newline|'\n'
name|'connected'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|class|CheckConnection
name|'class'
name|'CheckConnection'
op|'('
name|'Protocol'
op|')'
op|':'
newline|'\n'
DECL|member|connectionMade
indent|'            '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'connected'
op|'.'
name|'append'
op|'('
name|'self'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'clientFactory'
op|'='
name|'Stop'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'clientFactory'
op|'.'
name|'protocol'
op|'='
name|'CheckConnection'
newline|'\n'
name|'client'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
nl|'\n'
string|"'127.0.0.1'"
op|','
name|'server'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
name|'clientFactory'
op|')'
newline|'\n'
nl|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'connected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'globals'
op|'('
op|')'
op|'.'
name|'update'
op|'('
name|'TCPClientTestsBuilder'
op|'.'
name|'makeTestCaseClasses'
op|'('
op|')'
op|')'
newline|'\n'
endmarker|''
end_unit

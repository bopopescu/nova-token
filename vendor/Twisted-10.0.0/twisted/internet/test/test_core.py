begin_unit
comment|'# Copyright (c) 2008-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for implementations of L{IReactorCore}.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|__metaclass__
name|'__metaclass__'
op|'='
name|'type'
newline|'\n'
nl|'\n'
name|'import'
name|'signal'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'abstract'
name|'import'
name|'FileDescriptor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'ReactorAlreadyRunning'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'test'
op|'.'
name|'reactormixins'
name|'import'
name|'ReactorBuilder'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SystemEventTestsBuilder
name|'class'
name|'SystemEventTestsBuilder'
op|'('
name|'ReactorBuilder'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Builder defining tests relating to L{IReactorCore.addSystemEventTrigger}\n    and L{IReactorCore.fireSystemEvent}.\n    """'
newline|'\n'
DECL|member|test_stopWhenNotStarted
name|'def'
name|'test_stopWhenNotStarted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{reactor.stop()} raises L{RuntimeError} when called when the reactor\n        has not been started.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'reactor'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_stopWhenAlreadyStopped
dedent|''
name|'def'
name|'test_stopWhenAlreadyStopped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{reactor.stop()} raises L{RuntimeError} when called after the reactor\n        has been stopped.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callWhenRunning'
op|'('
name|'reactor'
op|'.'
name|'stop'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'reactor'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callWhenRunningOrder
dedent|''
name|'def'
name|'test_callWhenRunningOrder'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Functions are run in the order that they were passed to\n        L{reactor.callWhenRunning}.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
name|'events'
op|'='
op|'['
op|']'
newline|'\n'
name|'reactor'
op|'.'
name|'callWhenRunning'
op|'('
name|'events'
op|'.'
name|'append'
op|','
string|'"first"'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callWhenRunning'
op|'('
name|'events'
op|'.'
name|'append'
op|','
string|'"second"'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callWhenRunning'
op|'('
name|'reactor'
op|'.'
name|'stop'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'events'
op|','
op|'['
string|'"first"'
op|','
string|'"second"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_runningForStartupEvents
dedent|''
name|'def'
name|'test_runningForStartupEvents'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The reactor is not running when C{"before"} C{"startup"} triggers are\n        called and is running when C{"during"} and C{"after"} C{"startup"}\n        triggers are called.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
name|'state'
op|'='
op|'{'
op|'}'
newline|'\n'
DECL|function|beforeStartup
name|'def'
name|'beforeStartup'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'['
string|"'before'"
op|']'
op|'='
name|'reactor'
op|'.'
name|'running'
newline|'\n'
DECL|function|duringStartup
dedent|''
name|'def'
name|'duringStartup'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'['
string|"'during'"
op|']'
op|'='
name|'reactor'
op|'.'
name|'running'
newline|'\n'
DECL|function|afterStartup
dedent|''
name|'def'
name|'afterStartup'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'['
string|"'after'"
op|']'
op|'='
name|'reactor'
op|'.'
name|'running'
newline|'\n'
dedent|''
name|'reactor'
op|'.'
name|'addSystemEventTrigger'
op|'('
string|'"before"'
op|','
string|'"startup"'
op|','
name|'beforeStartup'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'addSystemEventTrigger'
op|'('
string|'"during"'
op|','
string|'"startup"'
op|','
name|'duringStartup'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'addSystemEventTrigger'
op|'('
string|'"after"'
op|','
string|'"startup"'
op|','
name|'afterStartup'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callWhenRunning'
op|'('
name|'reactor'
op|'.'
name|'stop'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'state'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'state'
op|','
nl|'\n'
op|'{'
string|'"before"'
op|':'
name|'False'
op|','
nl|'\n'
string|'"during"'
op|':'
name|'True'
op|','
nl|'\n'
string|'"after"'
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_signalHandlersInstalledDuringStartup
dedent|''
name|'def'
name|'test_signalHandlersInstalledDuringStartup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Signal handlers are installed in responsed to the C{"during"}\n        C{"startup"}.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
name|'phase'
op|'='
op|'['
name|'None'
op|']'
newline|'\n'
DECL|function|beforeStartup
name|'def'
name|'beforeStartup'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'phase'
op|'['
number|'0'
op|']'
op|'='
string|'"before"'
newline|'\n'
DECL|function|afterStartup
dedent|''
name|'def'
name|'afterStartup'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'phase'
op|'['
number|'0'
op|']'
op|'='
string|'"after"'
newline|'\n'
dedent|''
name|'reactor'
op|'.'
name|'addSystemEventTrigger'
op|'('
string|'"before"'
op|','
string|'"startup"'
op|','
name|'beforeStartup'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'addSystemEventTrigger'
op|'('
string|'"after"'
op|','
string|'"startup"'
op|','
name|'afterStartup'
op|')'
newline|'\n'
nl|'\n'
name|'sawPhase'
op|'='
op|'['
name|'None'
op|']'
newline|'\n'
DECL|function|fakeSignal
name|'def'
name|'fakeSignal'
op|'('
name|'signum'
op|','
name|'action'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sawPhase'
op|'['
number|'0'
op|']'
op|'='
name|'phase'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'signal'
op|','
string|"'signal'"
op|','
name|'fakeSignal'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callWhenRunning'
op|'('
name|'reactor'
op|'.'
name|'stop'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'phase'
op|'['
number|'0'
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sawPhase'
op|'['
number|'0'
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sawPhase'
op|'['
number|'0'
op|']'
op|','
string|'"before"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'phase'
op|'['
number|'0'
op|']'
op|','
string|'"after"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_stopShutDownEvents
dedent|''
name|'def'
name|'test_stopShutDownEvents'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{reactor.stop()} fires all three phases of shutdown event triggers\n        before it makes C{reactor.run()} return.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
name|'events'
op|'='
op|'['
op|']'
newline|'\n'
name|'reactor'
op|'.'
name|'addSystemEventTrigger'
op|'('
nl|'\n'
string|'"before"'
op|','
string|'"shutdown"'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'events'
op|'.'
name|'append'
op|'('
op|'('
string|'"before"'
op|','
string|'"shutdown"'
op|')'
op|')'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'addSystemEventTrigger'
op|'('
nl|'\n'
string|'"during"'
op|','
string|'"shutdown"'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'events'
op|'.'
name|'append'
op|'('
op|'('
string|'"during"'
op|','
string|'"shutdown"'
op|')'
op|')'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'addSystemEventTrigger'
op|'('
nl|'\n'
string|'"after"'
op|','
string|'"shutdown"'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'events'
op|'.'
name|'append'
op|'('
op|'('
string|'"after"'
op|','
string|'"shutdown"'
op|')'
op|')'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callWhenRunning'
op|'('
name|'reactor'
op|'.'
name|'stop'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'events'
op|','
op|'['
op|'('
string|'"before"'
op|','
string|'"shutdown"'
op|')'
op|','
nl|'\n'
op|'('
string|'"during"'
op|','
string|'"shutdown"'
op|')'
op|','
nl|'\n'
op|'('
string|'"after"'
op|','
string|'"shutdown"'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_shutdownFiresTriggersAsynchronously
dedent|''
name|'def'
name|'test_shutdownFiresTriggersAsynchronously'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{"before"} C{"shutdown"} triggers are not run synchronously from\n        L{reactor.stop}.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
name|'events'
op|'='
op|'['
op|']'
newline|'\n'
name|'reactor'
op|'.'
name|'addSystemEventTrigger'
op|'('
nl|'\n'
string|'"before"'
op|','
string|'"shutdown"'
op|','
name|'events'
op|'.'
name|'append'
op|','
string|'"before shutdown"'
op|')'
newline|'\n'
DECL|function|stopIt
name|'def'
name|'stopIt'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'events'
op|'.'
name|'append'
op|'('
string|'"stopped"'
op|')'
newline|'\n'
dedent|''
name|'reactor'
op|'.'
name|'callWhenRunning'
op|'('
name|'stopIt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'events'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'events'
op|','
op|'['
string|'"stopped"'
op|','
string|'"before shutdown"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_shutdownDisconnectsCleanly
dedent|''
name|'def'
name|'test_shutdownDisconnectsCleanly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A L{IFileDescriptor.connectionLost} implementation which raises an\n        exception does not prevent the remaining L{IFileDescriptor}s from\n        having their C{connectionLost} method called.\n        """'
newline|'\n'
name|'lostOK'
op|'='
op|'['
name|'False'
op|']'
newline|'\n'
nl|'\n'
comment|'# Subclass FileDescriptor to get logPrefix'
nl|'\n'
DECL|class|ProblematicFileDescriptor
name|'class'
name|'ProblematicFileDescriptor'
op|'('
name|'FileDescriptor'
op|')'
op|':'
newline|'\n'
DECL|member|connectionLost
indent|'            '
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RuntimeError'
op|'('
string|'"simulated connectionLost error"'
op|')'
newline|'\n'
nl|'\n'
DECL|class|OKFileDescriptor
dedent|''
dedent|''
name|'class'
name|'OKFileDescriptor'
op|'('
name|'FileDescriptor'
op|')'
op|':'
newline|'\n'
DECL|member|connectionLost
indent|'            '
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'lostOK'
op|'['
number|'0'
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Unfortunately, it is necessary to patch removeAll to directly control'
nl|'\n'
comment|'# the order of the returned values.  The test is only valid if'
nl|'\n'
comment|'# ProblematicFileDescriptor comes first.  Also, return these'
nl|'\n'
comment|'# descriptors only the first time removeAll is called so that if it is'
nl|'\n'
comment|"# called again the file descriptors aren't re-disconnected."
nl|'\n'
name|'fds'
op|'='
name|'iter'
op|'('
op|'['
name|'ProblematicFileDescriptor'
op|'('
op|')'
op|','
name|'OKFileDescriptor'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'removeAll'
op|'='
name|'lambda'
op|':'
name|'fds'
newline|'\n'
name|'reactor'
op|'.'
name|'callWhenRunning'
op|'('
name|'reactor'
op|'.'
name|'stop'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'runReactor'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'RuntimeError'
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'lostOK'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleRun
dedent|''
name|'def'
name|'test_multipleRun'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{reactor.run()} raises L{ReactorAlreadyRunning} when called when\n        the reactor is already running.\n        """'
newline|'\n'
name|'events'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|reentrantRun
name|'def'
name|'reentrantRun'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ReactorAlreadyRunning'
op|','
name|'reactor'
op|'.'
name|'run'
op|')'
newline|'\n'
name|'events'
op|'.'
name|'append'
op|'('
string|'"tested"'
op|')'
newline|'\n'
dedent|''
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callWhenRunning'
op|'('
name|'reentrantRun'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callWhenRunning'
op|'('
name|'reactor'
op|'.'
name|'stop'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'events'
op|','
op|'['
string|'"tested"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_runWithAsynchronousBeforeStartupTrigger
dedent|''
name|'def'
name|'test_runWithAsynchronousBeforeStartupTrigger'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When there is a C{\'before\'} C{\'startup\'} trigger which returns an\n        unfired L{Deferred}, C{reactor.run()} starts the reactor and does not\n        return until after C{reactor.stop()} is called\n        """'
newline|'\n'
name|'events'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|trigger
name|'def'
name|'trigger'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'events'
op|'.'
name|'append'
op|'('
string|"'trigger'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'callback'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'d'
op|'.'
name|'callback'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
DECL|function|callback
dedent|''
name|'def'
name|'callback'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'events'
op|'.'
name|'append'
op|'('
string|"'callback'"
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'addSystemEventTrigger'
op|'('
string|"'before'"
op|','
string|"'startup'"
op|','
name|'trigger'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'events'
op|','
op|'['
string|"'trigger'"
op|','
string|"'callback'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_iterate
dedent|''
name|'def'
name|'test_iterate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{reactor.iterate()} does not block.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
name|'t'
op|'='
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'5'
op|','
name|'reactor'
op|'.'
name|'crash'
op|')'
newline|'\n'
nl|'\n'
name|'start'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'iterate'
op|'('
number|'0'
op|')'
comment|"# Shouldn't block"
newline|'\n'
name|'elapsed'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'elapsed'
op|'<'
number|'2'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_crash
dedent|''
name|'def'
name|'test_crash'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{reactor.crash()} stops the reactor and does not fire shutdown\n        triggers.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
name|'events'
op|'='
op|'['
op|']'
newline|'\n'
name|'reactor'
op|'.'
name|'addSystemEventTrigger'
op|'('
nl|'\n'
string|'"before"'
op|','
string|'"shutdown"'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'events'
op|'.'
name|'append'
op|'('
op|'('
string|'"before"'
op|','
string|'"shutdown"'
op|')'
op|')'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callWhenRunning'
op|'('
name|'reactor'
op|'.'
name|'callLater'
op|','
number|'0'
op|','
name|'reactor'
op|'.'
name|'crash'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'reactor'
op|'.'
name|'running'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
nl|'\n'
name|'events'
op|','
nl|'\n'
string|'"Shutdown triggers invoked but they should not have been."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_runAfterCrash
dedent|''
name|'def'
name|'test_runAfterCrash'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{reactor.run()} restarts the reactor after it has been stopped by\n        C{reactor.crash()}.\n        """'
newline|'\n'
name|'events'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|crash
name|'def'
name|'crash'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'events'
op|'.'
name|'append'
op|'('
string|"'crash'"
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'crash'
op|'('
op|')'
newline|'\n'
dedent|''
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callWhenRunning'
op|'('
name|'crash'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
DECL|function|stop
name|'def'
name|'stop'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'events'
op|'.'
name|'append'
op|'('
op|'('
string|"'stop'"
op|','
name|'reactor'
op|'.'
name|'running'
op|')'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'reactor'
op|'.'
name|'callWhenRunning'
op|'('
name|'stop'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'events'
op|','
op|'['
string|"'crash'"
op|','
op|'('
string|"'stop'"
op|','
name|'True'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'globals'
op|'('
op|')'
op|'.'
name|'update'
op|'('
name|'SystemEventTestsBuilder'
op|'.'
name|'makeTestCaseClasses'
op|'('
op|')'
op|')'
newline|'\n'
endmarker|''
end_unit

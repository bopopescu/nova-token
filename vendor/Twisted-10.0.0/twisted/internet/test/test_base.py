begin_unit
comment|'# Copyright (c) 2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.internet.base}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'from'
name|'Queue'
name|'import'
name|'Queue'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'threadpool'
name|'import'
name|'ThreadPool'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'setIDFunction'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IReactorTime'
op|','
name|'IReactorThreads'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'DNSLookupError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'base'
name|'import'
name|'ThreadedResolver'
op|','
name|'DelayedCall'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'task'
name|'import'
name|'Clock'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeReactor
name|'class'
name|'FakeReactor'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A fake reactor implementation which just supports enough reactor APIs for\n    L{ThreadedResolver}.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IReactorTime'
op|','
name|'IReactorThreads'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_clock'
op|'='
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'callLater'
op|'='
name|'self'
op|'.'
name|'_clock'
op|'.'
name|'callLater'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_threadpool'
op|'='
name|'ThreadPool'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_threadpool'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'getThreadPool'
op|'='
name|'lambda'
op|':'
name|'self'
op|'.'
name|'_threadpool'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_threadCalls'
op|'='
name|'Queue'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callFromThread
dedent|''
name|'def'
name|'callFromThread'
op|'('
name|'self'
op|','
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_threadCalls'
op|'.'
name|'put'
op|'('
op|'('
name|'f'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_runThreadCalls
dedent|''
name|'def'
name|'_runThreadCalls'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|','
name|'args'
op|','
name|'kwargs'
op|'='
name|'self'
op|'.'
name|'_threadCalls'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_stop
dedent|''
name|'def'
name|'_stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_threadpool'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ThreadedResolverTests
dedent|''
dedent|''
name|'class'
name|'ThreadedResolverTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{ThreadedResolver}.\n    """'
newline|'\n'
DECL|member|test_success
name|'def'
name|'test_success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ThreadedResolver.getHostByName} returns a L{Deferred} which fires\n        with the value returned by the call to L{socket.gethostbyname} in the\n        threadpool of the reactor passed to L{ThreadedResolver.__init__}.\n        """'
newline|'\n'
name|'ip'
op|'='
string|'"10.0.0.17"'
newline|'\n'
name|'name'
op|'='
string|'"foo.bar.example.com"'
newline|'\n'
name|'timeout'
op|'='
number|'30'
newline|'\n'
nl|'\n'
name|'reactor'
op|'='
name|'FakeReactor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'reactor'
op|'.'
name|'_stop'
op|')'
newline|'\n'
nl|'\n'
name|'lookedUp'
op|'='
op|'['
op|']'
newline|'\n'
name|'resolvedTo'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|fakeGetHostByName
name|'def'
name|'fakeGetHostByName'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'lookedUp'
op|'.'
name|'append'
op|'('
name|'name'
op|')'
newline|'\n'
name|'return'
name|'ip'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'socket'
op|','
string|"'gethostbyname'"
op|','
name|'fakeGetHostByName'
op|')'
newline|'\n'
nl|'\n'
name|'resolver'
op|'='
name|'ThreadedResolver'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'d'
op|'='
name|'resolver'
op|'.'
name|'getHostByName'
op|'('
name|'name'
op|','
op|'('
name|'timeout'
op|','
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'resolvedTo'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
name|'reactor'
op|'.'
name|'_runThreadCalls'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'lookedUp'
op|','
op|'['
name|'name'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resolvedTo'
op|','
op|'['
name|'ip'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure that any timeout-related stuff gets cleaned up.'
nl|'\n'
name|'reactor'
op|'.'
name|'_clock'
op|'.'
name|'advance'
op|'('
name|'timeout'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'reactor'
op|'.'
name|'_clock'
op|'.'
name|'calls'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failure
dedent|''
name|'def'
name|'test_failure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ThreadedResolver.getHostByName} returns a L{Deferred} which fires a\n        L{Failure} if the call to L{socket.gethostbyname} raises an exception.\n        """'
newline|'\n'
name|'timeout'
op|'='
number|'30'
newline|'\n'
nl|'\n'
name|'reactor'
op|'='
name|'FakeReactor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'reactor'
op|'.'
name|'_stop'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fakeGetHostByName
name|'def'
name|'fakeGetHostByName'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IOError'
op|'('
string|'"ENOBUFS (this is a funny joke)"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'socket'
op|','
string|"'gethostbyname'"
op|','
name|'fakeGetHostByName'
op|')'
newline|'\n'
nl|'\n'
name|'failedWith'
op|'='
op|'['
op|']'
newline|'\n'
name|'resolver'
op|'='
name|'ThreadedResolver'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'d'
op|'='
name|'resolver'
op|'.'
name|'getHostByName'
op|'('
string|'"some.name"'
op|','
op|'('
name|'timeout'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'DNSLookupError'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'failedWith'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
name|'reactor'
op|'.'
name|'_runThreadCalls'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'failedWith'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure that any timeout-related stuff gets cleaned up.'
nl|'\n'
name|'reactor'
op|'.'
name|'_clock'
op|'.'
name|'advance'
op|'('
name|'timeout'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'reactor'
op|'.'
name|'_clock'
op|'.'
name|'calls'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_timeout
dedent|''
name|'def'
name|'test_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If L{socket.gethostbyname} does not complete before the specified\n        timeout elapsed, the L{Deferred} returned by\n        L{ThreadedResolver.getHostByBame} fails with L{DNSLookupError}.\n        """'
newline|'\n'
name|'timeout'
op|'='
number|'10'
newline|'\n'
nl|'\n'
name|'reactor'
op|'='
name|'FakeReactor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'reactor'
op|'.'
name|'_stop'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'Queue'
op|'('
op|')'
newline|'\n'
DECL|function|fakeGetHostByName
name|'def'
name|'fakeGetHostByName'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'result'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'socket'
op|','
string|"'gethostbyname'"
op|','
name|'fakeGetHostByName'
op|')'
newline|'\n'
nl|'\n'
name|'failedWith'
op|'='
op|'['
op|']'
newline|'\n'
name|'resolver'
op|'='
name|'ThreadedResolver'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'d'
op|'='
name|'resolver'
op|'.'
name|'getHostByName'
op|'('
string|'"some.name"'
op|','
op|'('
name|'timeout'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'DNSLookupError'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'failedWith'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
name|'reactor'
op|'.'
name|'_clock'
op|'.'
name|'advance'
op|'('
name|'timeout'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'failedWith'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'_clock'
op|'.'
name|'advance'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'failedWith'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Eventually the socket.gethostbyname does finish - in this case, with'
nl|'\n'
comment|'# an exception.  Nobody cares, though.'
nl|'\n'
name|'result'
op|'.'
name|'put'
op|'('
name|'IOError'
op|'('
string|'"The I/O was errorful"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DelayedCallTests
dedent|''
dedent|''
name|'class'
name|'DelayedCallTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{DelayedCall}.\n    """'
newline|'\n'
DECL|member|test_str
name|'def'
name|'test_str'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The string representation of a L{DelayedCall} instance, as returned by\n        C{str}, includes the unsigned id of the instance, as well as its state,\n        the function to be called, and the function arguments.\n        """'
newline|'\n'
DECL|function|nothing
name|'def'
name|'nothing'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'dc'
op|'='
name|'DelayedCall'
op|'('
number|'12'
op|','
name|'nothing'
op|','
op|'('
number|'3'
op|','
op|')'
op|','
op|'{'
string|'"A"'
op|':'
number|'5'
op|'}'
op|','
name|'None'
op|','
name|'None'
op|','
name|'lambda'
op|':'
number|'1.5'
op|')'
newline|'\n'
name|'ids'
op|'='
op|'{'
name|'dc'
op|':'
number|'200'
op|'}'
newline|'\n'
DECL|function|fakeID
name|'def'
name|'fakeID'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'ids'
op|'['
name|'obj'
op|']'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'KeyError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'id'
op|'('
name|'obj'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'setIDFunction'
op|','
name|'setIDFunction'
op|'('
name|'fakeID'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'str'
op|'('
name|'dc'
op|')'
op|','
nl|'\n'
string|'"<DelayedCall 0xc8 [10.5s] called=0 cancelled=0 nothing(3, A=5)>"'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for implementations of L{IReactorFDSet}.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|__metaclass__
name|'__metaclass__'
op|'='
name|'type'
newline|'\n'
nl|'\n'
name|'import'
name|'socket'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IReactorFDSet'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'abstract'
name|'import'
name|'FileDescriptor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'test'
op|'.'
name|'reactormixins'
name|'import'
name|'ReactorBuilder'
newline|'\n'
nl|'\n'
comment|'# twisted.internet.tcp nicely defines some names with proper values on'
nl|'\n'
comment|'# several different platforms.'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'tcp'
name|'import'
name|'EINPROGRESS'
op|','
name|'EWOULDBLOCK'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReactorFDSetTestsBuilder
name|'class'
name|'ReactorFDSetTestsBuilder'
op|'('
name|'ReactorBuilder'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Builder defining tests relating to L{IReactorFDSet}.\n    """'
newline|'\n'
DECL|variable|requiredInterface
name|'requiredInterface'
op|'='
name|'IReactorFDSet'
newline|'\n'
nl|'\n'
DECL|member|_connectedPair
name|'def'
name|'_connectedPair'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the two sockets which make up a new TCP connection.\n        """'
newline|'\n'
name|'serverSocket'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
op|')'
newline|'\n'
name|'serverSocket'
op|'.'
name|'bind'
op|'('
op|'('
string|"'127.0.0.1'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'serverSocket'
op|'.'
name|'listen'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'serverSocket'
op|'.'
name|'close'
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'client'
op|'.'
name|'close'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'setblocking'
op|'('
name|'False'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'client'
op|'.'
name|'connect'
op|'('
op|'('
string|"'127.0.0.1'"
op|','
name|'serverSocket'
op|'.'
name|'getsockname'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|','
op|'('
name|'EINPROGRESS'
op|','
name|'EWOULDBLOCK'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Connect should have raised EINPROGRESS or EWOULDBLOCK"'
op|')'
newline|'\n'
dedent|''
name|'server'
op|','
name|'addr'
op|'='
name|'serverSocket'
op|'.'
name|'accept'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'server'
op|'.'
name|'close'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'client'
op|','
name|'server'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_simpleSetup
dedent|''
name|'def'
name|'_simpleSetup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|','
name|'server'
op|'='
name|'self'
op|'.'
name|'_connectedPair'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fd'
op|'='
name|'FileDescriptor'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'fd'
op|'.'
name|'fileno'
op|'='
name|'client'
op|'.'
name|'fileno'
newline|'\n'
nl|'\n'
name|'return'
name|'reactor'
op|','
name|'fd'
op|','
name|'server'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addReader
dedent|''
name|'def'
name|'test_addReader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{reactor.addReader()} accepts an L{IReadDescriptor} provider and calls\n        its C{doRead} method when there may be data available on its C{fileno}.\n        """'
newline|'\n'
name|'reactor'
op|','
name|'fd'
op|','
name|'server'
op|'='
name|'self'
op|'.'
name|'_simpleSetup'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fd'
op|'.'
name|'doRead'
op|'='
name|'reactor'
op|'.'
name|'stop'
newline|'\n'
name|'reactor'
op|'.'
name|'addReader'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'server'
op|'.'
name|'sendall'
op|'('
string|"'x'"
op|')'
newline|'\n'
nl|'\n'
comment|'# The reactor will only stop if it calls fd.doRead.'
nl|'\n'
name|'self'
op|'.'
name|'runReactor'
op|'('
name|'reactor'
op|')'
newline|'\n'
comment|'# Nothing to assert, just be glad we got this far.'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeReader
dedent|''
name|'def'
name|'test_removeReader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reactor.removeReader()} accepts an L{IReadDescriptor} provider\n        previously passed to C{reactor.addReader()} and causes it to no longer\n        be monitored for input events.\n        """'
newline|'\n'
name|'reactor'
op|','
name|'fd'
op|','
name|'server'
op|'='
name|'self'
op|'.'
name|'_simpleSetup'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fail
name|'def'
name|'fail'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"doRead should not be called"'
op|')'
newline|'\n'
dedent|''
name|'fd'
op|'.'
name|'doRead'
op|'='
name|'fail'
newline|'\n'
nl|'\n'
name|'reactor'
op|'.'
name|'addReader'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'removeReader'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'server'
op|'.'
name|'sendall'
op|'('
string|"'x'"
op|')'
newline|'\n'
nl|'\n'
comment|"# Give the reactor two timed event passes to notice that there's I/O"
nl|'\n'
comment|'# (if it is incorrectly watching for I/O).'
nl|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'reactor'
op|'.'
name|'callLater'
op|','
number|'0'
op|','
name|'reactor'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'runReactor'
op|'('
name|'reactor'
op|')'
newline|'\n'
comment|'# Getting here means the right thing happened probably.'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addWriter
dedent|''
name|'def'
name|'test_addWriter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{reactor.addWriter()} accepts an L{IWriteDescriptor} provider and\n        calls its C{doWrite} method when it may be possible to write to its\n        C{fileno}.\n        """'
newline|'\n'
name|'reactor'
op|','
name|'fd'
op|','
name|'server'
op|'='
name|'self'
op|'.'
name|'_simpleSetup'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fd'
op|'.'
name|'doWrite'
op|'='
name|'reactor'
op|'.'
name|'stop'
newline|'\n'
name|'reactor'
op|'.'
name|'addWriter'
op|'('
name|'fd'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'runReactor'
op|'('
name|'reactor'
op|')'
newline|'\n'
comment|'# Getting here is great.'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getFDTest
dedent|''
name|'def'
name|'_getFDTest'
op|'('
name|'self'
op|','
name|'kind'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Helper for getReaders and getWriters tests.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
name|'get'
op|'='
name|'getattr'
op|'('
name|'reactor'
op|','
string|"'get'"
op|'+'
name|'kind'
op|'+'
string|"'s'"
op|')'
newline|'\n'
name|'add'
op|'='
name|'getattr'
op|'('
name|'reactor'
op|','
string|"'add'"
op|'+'
name|'kind'
op|')'
newline|'\n'
name|'remove'
op|'='
name|'getattr'
op|'('
name|'reactor'
op|','
string|"'remove'"
op|'+'
name|'kind'
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|','
name|'server'
op|'='
name|'self'
op|'.'
name|'_connectedPair'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'client'
op|','
name|'get'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'server'
op|','
name|'get'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'add'
op|'('
name|'client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'client'
op|','
name|'get'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'server'
op|','
name|'get'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'remove'
op|'('
name|'client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'client'
op|','
name|'get'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'server'
op|','
name|'get'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getReaders
dedent|''
name|'def'
name|'test_getReaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReactorFDSet.getReaders} reflects the additions and removals made\n        with L{IReactorFDSet.addReader} and L{IReactorFDSet.removeReader}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_getFDTest'
op|'('
string|"'Reader'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeWriter
dedent|''
name|'def'
name|'test_removeWriter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reactor.removeWriter()} accepts an L{IWriteDescriptor} provider\n        previously passed to C{reactor.addWriter()} and causes it to no longer\n        be monitored for outputability.\n        """'
newline|'\n'
name|'reactor'
op|','
name|'fd'
op|','
name|'server'
op|'='
name|'self'
op|'.'
name|'_simpleSetup'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fail
name|'def'
name|'fail'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"doWrite should not be called"'
op|')'
newline|'\n'
dedent|''
name|'fd'
op|'.'
name|'doWrite'
op|'='
name|'fail'
newline|'\n'
nl|'\n'
name|'reactor'
op|'.'
name|'addWriter'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'removeWriter'
op|'('
name|'fd'
op|')'
newline|'\n'
nl|'\n'
comment|"# Give the reactor two timed event passes to notice that there's I/O"
nl|'\n'
comment|'# (if it is incorrectly watching for I/O).'
nl|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'reactor'
op|'.'
name|'callLater'
op|','
number|'0'
op|','
name|'reactor'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'runReactor'
op|'('
name|'reactor'
op|')'
newline|'\n'
comment|'# Getting here means the right thing happened probably.'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getWriters
dedent|''
name|'def'
name|'test_getWriters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReactorFDSet.getWriters} reflects the additions and removals made\n        with L{IReactorFDSet.addWriter} and L{IReactorFDSet.removeWriter}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_getFDTest'
op|'('
string|"'Writer'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeAll
dedent|''
name|'def'
name|'test_removeAll'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{reactor.removeAll()} removes all registered L{IReadDescriptor}\n        providers and all registered L{IWriteDescriptor} providers and returns\n        them.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'buildReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'reactor'
op|','
name|'fd'
op|','
name|'server'
op|'='
name|'self'
op|'.'
name|'_simpleSetup'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fd'
op|'.'
name|'doRead'
op|'='
name|'lambda'
op|':'
name|'self'
op|'.'
name|'fail'
op|'('
string|'"doRead should not be called"'
op|')'
newline|'\n'
name|'fd'
op|'.'
name|'doWrite'
op|'='
name|'lambda'
op|':'
name|'self'
op|'.'
name|'fail'
op|'('
string|'"doWrite should not be called"'
op|')'
newline|'\n'
nl|'\n'
name|'server'
op|'.'
name|'sendall'
op|'('
string|"'x'"
op|')'
newline|'\n'
nl|'\n'
name|'reactor'
op|'.'
name|'addReader'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'addWriter'
op|'('
name|'fd'
op|')'
newline|'\n'
nl|'\n'
name|'removed'
op|'='
name|'reactor'
op|'.'
name|'removeAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# Give the reactor two timed event passes to notice that there's I/O"
nl|'\n'
comment|'# (if it is incorrectly watching for I/O).'
nl|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'reactor'
op|'.'
name|'callLater'
op|','
number|'0'
op|','
name|'reactor'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'runReactor'
op|'('
name|'reactor'
op|')'
newline|'\n'
comment|'# Getting here means the right thing happened probably.'
nl|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'removed'
op|','
op|'['
name|'fd'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'globals'
op|'('
op|')'
op|'.'
name|'update'
op|'('
name|'ReactorFDSetTestsBuilder'
op|'.'
name|'makeTestCaseClasses'
op|'('
op|')'
op|')'
newline|'\n'
endmarker|''
end_unit

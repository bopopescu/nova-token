begin_unit
comment|'# -*- test-case-name: twisted.test.test_factories -*-'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nStandard implementations of Twisted protocol-related interfaces.\n\nStart here if you are looking to write a new protocol implementation for\nTwisted.  The Protocol class contains some introductory material.\n\nMaintainer: Itamar Shtull-Trauring\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'random'
newline|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
comment|'# Twisted Imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'failure'
op|','
name|'components'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'interfaces'
op|','
name|'error'
op|','
name|'defer'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Factory
name|'class'
name|'Factory'
op|':'
newline|'\n'
indent|'    '
string|'"""This is a factory which produces protocols.\n\n    By default, buildProtocol will create a protocol of the class given in\n    self.protocol.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'IProtocolFactory'
op|')'
newline|'\n'
nl|'\n'
comment|'# put a subclass of Protocol here:'
nl|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|numPorts
name|'numPorts'
op|'='
number|'0'
newline|'\n'
DECL|variable|noisy
name|'noisy'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|doStart
name|'def'
name|'doStart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure startFactory is called.\n\n        Users should not call this function themselves!\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'numPorts'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'noisy'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Starting factory %r"'
op|'%'
name|'self'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'startFactory'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'numPorts'
op|'='
name|'self'
op|'.'
name|'numPorts'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|doStop
dedent|''
name|'def'
name|'doStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure stopFactory is called.\n\n        Users should not call this function themselves!\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'numPorts'
op|'=='
number|'0'
op|':'
newline|'\n'
comment|"# this shouldn't happen, but does sometimes and this is better"
nl|'\n'
comment|'# than blowing up in assert as we did previously.'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'numPorts'
op|'='
name|'self'
op|'.'
name|'numPorts'
op|'-'
number|'1'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'numPorts'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'noisy'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Stopping factory %r"'
op|'%'
name|'self'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stopFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|startFactory
dedent|''
dedent|''
name|'def'
name|'startFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This will be called before I begin listening on a Port or Connector.\n\n        It will only be called once, even if the factory is connected\n        to multiple ports.\n\n        This can be used to perform \'unserialization\' tasks that\n        are best put off until things are actually running, such\n        as connecting to a database, opening files, etcetera.\n        """'
newline|'\n'
nl|'\n'
DECL|member|stopFactory
dedent|''
name|'def'
name|'stopFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This will be called before I stop listening on all Ports/Connectors.\n\n        This can be overridden to perform \'shutdown\' tasks such as disconnecting\n        database connections, closing files, etc.\n\n        It will be called, for example, before an application shuts down,\n        if it was connected to a port. User code should not call this function\n        directly.\n        """'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create an instance of a subclass of Protocol.\n\n        The returned instance will handle input on an incoming server\n        connection, and an attribute \\"factory\\" pointing to the creating\n        factory.\n\n        Override this method to alter how Protocol instances get created.\n\n        @param addr: an object implementing L{twisted.internet.interfaces.IAddress}\n        """'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ClientFactory
dedent|''
dedent|''
name|'class'
name|'ClientFactory'
op|'('
name|'Factory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Protocol factory for clients.\n\n    This can be used together with the various connectXXX methods in\n    reactors.\n    """'
newline|'\n'
nl|'\n'
DECL|member|startedConnecting
name|'def'
name|'startedConnecting'
op|'('
name|'self'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a connection has been started.\n\n        You can call connector.stopConnecting() to stop the connection attempt.\n\n        @param connector: a Connector object.\n        """'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
dedent|''
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a connection has failed to connect.\n\n        It may be useful to call connector.connect() - this will reconnect.\n\n        @type reason: L{twisted.python.failure.Failure}\n        """'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionLost
dedent|''
name|'def'
name|'clientConnectionLost'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when an established connection is lost.\n\n        It may be useful to call connector.connect() - this will reconnect.\n\n        @type reason: L{twisted.python.failure.Failure}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_InstanceFactory
dedent|''
dedent|''
name|'class'
name|'_InstanceFactory'
op|'('
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Factory used by ClientCreator."""'
newline|'\n'
nl|'\n'
DECL|variable|noisy
name|'noisy'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|','
name|'instance'
op|','
name|'deferred'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
name|'instance'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'deferred'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"<ClientCreator factory: %r>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'instance'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|','
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'deferred'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'instance'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
dedent|''
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|','
name|'reason'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'deferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ClientCreator
dedent|''
dedent|''
name|'class'
name|'ClientCreator'
op|':'
newline|'\n'
indent|'    '
string|'"""Client connections that do not require a factory.\n\n    The various connect* methods create a protocol instance using the given\n    protocol class and arguments, and connect it, returning a Deferred of the\n    resulting protocol instance.\n\n    Useful for cases when we don\'t really need a factory.  Mainly this\n    is when there is no shared state between protocol instances, and no need\n    to reconnect.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|','
name|'protocolClass'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
name|'self'
op|'.'
name|'protocolClass'
op|'='
name|'protocolClass'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'kwargs'
op|'='
name|'kwargs'
newline|'\n'
nl|'\n'
DECL|member|connectTCP
dedent|''
name|'def'
name|'connectTCP'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|','
name|'timeout'
op|'='
number|'30'
op|','
name|'bindAddress'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect to remote host, return Deferred of resulting protocol instance."""'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'_InstanceFactory'
op|'('
name|'self'
op|'.'
name|'reactor'
op|','
name|'self'
op|'.'
name|'protocolClass'
op|'('
op|'*'
name|'self'
op|'.'
name|'args'
op|','
op|'**'
name|'self'
op|'.'
name|'kwargs'
op|')'
op|','
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'f'
op|','
name|'timeout'
op|'='
name|'timeout'
op|','
name|'bindAddress'
op|'='
name|'bindAddress'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|connectUNIX
dedent|''
name|'def'
name|'connectUNIX'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'timeout'
op|'='
number|'30'
op|','
name|'checkPID'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect to Unix socket, return Deferred of resulting protocol instance."""'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'_InstanceFactory'
op|'('
name|'self'
op|'.'
name|'reactor'
op|','
name|'self'
op|'.'
name|'protocolClass'
op|'('
op|'*'
name|'self'
op|'.'
name|'args'
op|','
op|'**'
name|'self'
op|'.'
name|'kwargs'
op|')'
op|','
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'connectUNIX'
op|'('
name|'address'
op|','
name|'f'
op|','
name|'timeout'
op|'='
name|'timeout'
op|','
name|'checkPID'
op|'='
name|'checkPID'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|connectSSL
dedent|''
name|'def'
name|'connectSSL'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|','
name|'contextFactory'
op|','
name|'timeout'
op|'='
number|'30'
op|','
name|'bindAddress'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect to SSL server, return Deferred of resulting protocol instance."""'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'_InstanceFactory'
op|'('
name|'self'
op|'.'
name|'reactor'
op|','
name|'self'
op|'.'
name|'protocolClass'
op|'('
op|'*'
name|'self'
op|'.'
name|'args'
op|','
op|'**'
name|'self'
op|'.'
name|'kwargs'
op|')'
op|','
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'connectSSL'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'f'
op|','
name|'contextFactory'
op|','
name|'timeout'
op|'='
name|'timeout'
op|','
name|'bindAddress'
op|'='
name|'bindAddress'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReconnectingClientFactory
dedent|''
dedent|''
name|'class'
name|'ReconnectingClientFactory'
op|'('
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Factory which auto-reconnects clients with an exponential back-off.\n\n    Note that clients should call my resetDelay method after they have\n    connected successfully.\n\n    @ivar maxDelay: Maximum number of seconds between connection attempts.\n    @ivar initialDelay: Delay for the first reconnection attempt.\n    @ivar factor: a multiplicitive factor by which the delay grows\n    @ivar jitter: percentage of randomness to introduce into the delay length\n        to prevent stampeding.\n    @ivar clock: the clock used to schedule reconnection. It\'s mainly useful to\n        be parametrized in tests. If the factory is serialized, this attribute\n        will not be serialized, and the default value (the reactor) will be\n        restored when deserialized.\n    """'
newline|'\n'
DECL|variable|maxDelay
name|'maxDelay'
op|'='
number|'3600'
newline|'\n'
DECL|variable|initialDelay
name|'initialDelay'
op|'='
number|'1.0'
newline|'\n'
comment|'# Note: These highly sensitive factors have been precisely measured by'
nl|'\n'
comment|'# the National Institute of Science and Technology.  Take extreme care'
nl|'\n'
comment|'# in altering them, or you may damage your Internet!'
nl|'\n'
comment|'# (Seriously: <http://physics.nist.gov/cuu/Constants/index.html>)'
nl|'\n'
DECL|variable|factor
name|'factor'
op|'='
number|'2.7182818284590451'
comment|'# (math.e)'
newline|'\n'
comment|'# Phi = 1.6180339887498948 # (Phi is acceptable for use as a'
nl|'\n'
comment|'# factor if e is too large for your application.)'
nl|'\n'
DECL|variable|jitter
name|'jitter'
op|'='
number|'0.11962656472'
comment|'# molar Planck constant times c, joule meter/mole'
newline|'\n'
nl|'\n'
DECL|variable|delay
name|'delay'
op|'='
name|'initialDelay'
newline|'\n'
DECL|variable|retries
name|'retries'
op|'='
number|'0'
newline|'\n'
DECL|variable|maxRetries
name|'maxRetries'
op|'='
name|'None'
newline|'\n'
DECL|variable|_callID
name|'_callID'
op|'='
name|'None'
newline|'\n'
DECL|variable|connector
name|'connector'
op|'='
name|'None'
newline|'\n'
DECL|variable|clock
name|'clock'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|continueTrying
name|'continueTrying'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'continueTrying'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connector'
op|'='
name|'connector'
newline|'\n'
name|'self'
op|'.'
name|'retry'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|clientConnectionLost
dedent|''
dedent|''
name|'def'
name|'clientConnectionLost'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'unused_reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'continueTrying'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connector'
op|'='
name|'connector'
newline|'\n'
name|'self'
op|'.'
name|'retry'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|retry
dedent|''
dedent|''
name|'def'
name|'retry'
op|'('
name|'self'
op|','
name|'connector'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Have this connector connect again, after a suitable delay.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'continueTrying'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'noisy'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Abandoning %s on explicit request"'
op|'%'
op|'('
name|'connector'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'connector'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'connector'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|'"no connector to retry"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'connector'
op|'='
name|'self'
op|'.'
name|'connector'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'retries'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'maxRetries'
name|'is'
name|'not'
name|'None'
name|'and'
op|'('
name|'self'
op|'.'
name|'retries'
op|'>'
name|'self'
op|'.'
name|'maxRetries'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'noisy'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Abandoning %s after %d retries."'
op|'%'
nl|'\n'
op|'('
name|'connector'
op|','
name|'self'
op|'.'
name|'retries'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'delay'
op|'='
name|'min'
op|'('
name|'self'
op|'.'
name|'delay'
op|'*'
name|'self'
op|'.'
name|'factor'
op|','
name|'self'
op|'.'
name|'maxDelay'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'jitter'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'delay'
op|'='
name|'random'
op|'.'
name|'normalvariate'
op|'('
name|'self'
op|'.'
name|'delay'
op|','
nl|'\n'
name|'self'
op|'.'
name|'delay'
op|'*'
name|'self'
op|'.'
name|'jitter'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'noisy'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"%s will retry in %d seconds"'
op|'%'
op|'('
name|'connector'
op|','
name|'self'
op|'.'
name|'delay'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|reconnector
dedent|''
name|'def'
name|'reconnector'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_callID'
op|'='
name|'None'
newline|'\n'
name|'connector'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'clock'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'='
name|'reactor'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_callID'
op|'='
name|'self'
op|'.'
name|'clock'
op|'.'
name|'callLater'
op|'('
name|'self'
op|'.'
name|'delay'
op|','
name|'reconnector'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stopTrying
dedent|''
name|'def'
name|'stopTrying'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Put a stop to any attempt to reconnect in progress.\n        """'
newline|'\n'
comment|'# ??? Is this function really stopFactory?'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_callID'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_callID'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_callID'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'connector'
op|':'
newline|'\n'
comment|"# Hopefully this doesn't just make clientConnectionFailed"
nl|'\n'
comment|'# retry again.'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'connector'
op|'.'
name|'stopConnecting'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'error'
op|'.'
name|'NotConnectingError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'continueTrying'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|resetDelay
dedent|''
name|'def'
name|'resetDelay'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call this method after a successful connection: it resets the delay and\n        the retry counter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'delay'
op|'='
name|'self'
op|'.'
name|'initialDelay'
newline|'\n'
name|'self'
op|'.'
name|'retries'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_callID'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'continueTrying'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove all of the state which is mutated by connection attempts and\n        failures, returning just the state which describes how reconnections\n        should be attempted.  This will make the unserialized instance\n        behave just as this one did when it was first instantiated.\n        """'
newline|'\n'
name|'state'
op|'='
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
op|'['
string|"'connector'"
op|','
string|"'retries'"
op|','
string|"'delay'"
op|','
nl|'\n'
string|"'continueTrying'"
op|','
string|"'_callID'"
op|','
string|"'clock'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'key'
name|'in'
name|'state'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'state'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'state'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServerFactory
dedent|''
dedent|''
name|'class'
name|'ServerFactory'
op|'('
name|'Factory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Subclass this to indicate that your protocol.Factory is only usable for servers.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseProtocol
dedent|''
name|'class'
name|'BaseProtocol'
op|':'
newline|'\n'
indent|'    '
string|'"""This is the abstract superclass of all protocols.\n\n    If you are going to write a new protocol for Twisted, start here.  The\n    docstrings of this class explain how you can get started.  Any protocol\n    implementation, either client or server, should be a subclass of me.\n\n    My API is quite simple.  Implement dataReceived(data) to handle both\n    event-based and synchronous input; output can be sent through the\n    \'transport\' attribute, which is to be an instance that implements\n    L{twisted.internet.interfaces.ITransport}.\n\n    Some subclasses exist already to help you write common types of protocols:\n    see the L{twisted.protocols.basic} module for a few of them.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|connected
name|'connected'
op|'='
number|'0'
newline|'\n'
DECL|variable|transport
name|'transport'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|makeConnection
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make a connection to a transport and a server.\n\n        This sets the \'transport\' attribute of this Protocol, and calls the\n        connectionMade() callback.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'transport'
newline|'\n'
name|'self'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a connection is made.\n\n        This may be considered the initializer of the protocol, because\n        it is called when the connection is completed.  For clients,\n        this is called once the connection to the server has been\n        established; for servers, this is called after an accept() call\n        stops blocking and a socket has been received.  If you need to\n        send any greeting or initial message, do it here.\n        """'
newline|'\n'
nl|'\n'
DECL|variable|connectionDone
dedent|''
dedent|''
name|'connectionDone'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
op|')'
op|')'
newline|'\n'
name|'connectionDone'
op|'.'
name|'cleanFailure'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Protocol
name|'class'
name|'Protocol'
op|'('
name|'BaseProtocol'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'IProtocol'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called whenever data is received.\n\n        Use this method to translate to a higher-level message.  Usually, some\n        callback will be made upon the receipt of each complete protocol\n        message.\n\n        @param data: a string of indeterminate length.  Please keep in mind\n            that you will probably need to buffer some data, as partial\n            (or multiple) protocol messages may be received!  I recommend\n            that unit tests for protocols call through to this method with\n            differing chunk sizes, down to one byte at a time.\n        """'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|'='
name|'connectionDone'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when the connection is shut down.\n\n        Clear any circular references here, and any external references\n        to this Protocol.  The connection has been closed.\n\n        @type reason: L{twisted.python.failure.Failure}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProtocolToConsumerAdapter
dedent|''
dedent|''
name|'class'
name|'ProtocolToConsumerAdapter'
op|'('
name|'components'
op|'.'
name|'Adapter'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'IConsumer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'original'
op|'.'
name|'dataReceived'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|registerProducer
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'components'
op|'.'
name|'registerAdapter'
op|'('
name|'ProtocolToConsumerAdapter'
op|','
name|'interfaces'
op|'.'
name|'IProtocol'
op|','
nl|'\n'
name|'interfaces'
op|'.'
name|'IConsumer'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ConsumerToProtocolAdapter
name|'class'
name|'ConsumerToProtocolAdapter'
op|'('
name|'components'
op|'.'
name|'Adapter'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'IProtocol'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'original'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|makeConnection
dedent|''
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'components'
op|'.'
name|'registerAdapter'
op|'('
name|'ConsumerToProtocolAdapter'
op|','
name|'interfaces'
op|'.'
name|'IConsumer'
op|','
nl|'\n'
name|'interfaces'
op|'.'
name|'IProtocol'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ProcessProtocol
name|'class'
name|'ProcessProtocol'
op|'('
name|'BaseProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Base process protocol implementation which does simple dispatching for\n    stdin, stdout, and stderr file descriptors.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'IProcessProtocol'
op|')'
newline|'\n'
nl|'\n'
DECL|member|childDataReceived
name|'def'
name|'childDataReceived'
op|'('
name|'self'
op|','
name|'childFD'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'childFD'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'outReceived'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'childFD'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'errReceived'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|outReceived
dedent|''
dedent|''
name|'def'
name|'outReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Some data was received from stdout.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|errReceived
dedent|''
name|'def'
name|'errReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Some data was received from stderr.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|childConnectionLost
dedent|''
name|'def'
name|'childConnectionLost'
op|'('
name|'self'
op|','
name|'childFD'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'childFD'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'inConnectionLost'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'childFD'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'outConnectionLost'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'childFD'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'errConnectionLost'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|inConnectionLost
dedent|''
dedent|''
name|'def'
name|'inConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This will be called when stdin is closed.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|outConnectionLost
dedent|''
name|'def'
name|'outConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This will be called when stdout is closed.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|errConnectionLost
dedent|''
name|'def'
name|'errConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This will be called when stderr is closed.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|processExited
dedent|''
name|'def'
name|'processExited'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This will be called when the subprocess exits.\n\n        @type reason: L{twisted.python.failure.Failure}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This will be called when the subprocess is finished.\n\n        @type reason: L{twisted.python.failure.Failure}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AbstractDatagramProtocol
dedent|''
dedent|''
name|'class'
name|'AbstractDatagramProtocol'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Abstract protocol for datagram-oriented transports, e.g. IP, ICMP, ARP, UDP.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|transport
name|'transport'
op|'='
name|'None'
newline|'\n'
DECL|variable|numPorts
name|'numPorts'
op|'='
number|'0'
newline|'\n'
DECL|variable|noisy
name|'noisy'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__getstate__
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'d'
op|'['
string|"'transport'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|doStart
dedent|''
name|'def'
name|'doStart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure startProtocol is called.\n\n        This will be called by makeConnection(), users should not call it.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'numPorts'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'noisy'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Starting protocol %s"'
op|'%'
name|'self'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'startProtocol'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'numPorts'
op|'='
name|'self'
op|'.'
name|'numPorts'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|doStop
dedent|''
name|'def'
name|'doStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure stopProtocol is called.\n\n        This will be called by the port, users should not call it.\n        """'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'numPorts'
op|'>'
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'numPorts'
op|'='
name|'self'
op|'.'
name|'numPorts'
op|'-'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'numPorts'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'noisy'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Stopping protocol %s"'
op|'%'
name|'self'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stopProtocol'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|startProtocol
dedent|''
dedent|''
name|'def'
name|'startProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a transport is connected to this protocol.\n\n        Will only be called once, even if multiple ports are connected.\n        """'
newline|'\n'
nl|'\n'
DECL|member|stopProtocol
dedent|''
name|'def'
name|'stopProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when the transport is disconnected.\n\n        Will only be called once, after all ports are disconnected.\n        """'
newline|'\n'
nl|'\n'
DECL|member|makeConnection
dedent|''
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make a connection to a transport and a server.\n\n        This sets the \'transport\' attribute of this DatagramProtocol, and calls the\n        doStart() callback.\n        """'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'transport'
op|'=='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'transport'
newline|'\n'
name|'self'
op|'.'
name|'doStart'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|datagramReceived
dedent|''
name|'def'
name|'datagramReceived'
op|'('
name|'self'
op|','
name|'datagram'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a datagram is received.\n\n        @param datagram: the string received from the transport.\n        @param addr: tuple of source of datagram.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DatagramProtocol
dedent|''
dedent|''
name|'class'
name|'DatagramProtocol'
op|'('
name|'AbstractDatagramProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Protocol for datagram-oriented transport, e.g. UDP.\n\n    @type transport: C{NoneType} or\n        L{IUDPTransport<twisted.internet.interfaces.IUDPTransport>} provider\n    @ivar transport: The transport with which this protocol is associated,\n        if it is associated with one.\n    """'
newline|'\n'
nl|'\n'
DECL|member|connectionRefused
name|'def'
name|'connectionRefused'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called due to error from write in connected mode.\n\n        Note this is a result of ICMP message generated by *previous*\n        write.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConnectedDatagramProtocol
dedent|''
dedent|''
name|'class'
name|'ConnectedDatagramProtocol'
op|'('
name|'DatagramProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Protocol for connected datagram-oriented transport.\n\n    No longer necessary for UDP.\n    """'
newline|'\n'
nl|'\n'
DECL|member|datagramReceived
name|'def'
name|'datagramReceived'
op|'('
name|'self'
op|','
name|'datagram'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a datagram is received.\n\n        @param datagram: the string received from the transport.\n        """'
newline|'\n'
nl|'\n'
DECL|member|connectionFailed
dedent|''
name|'def'
name|'connectionFailed'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called if connecting failed.\n\n        Usually this will be due to a DNS lookup failure.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FileWrapper
dedent|''
dedent|''
name|'class'
name|'FileWrapper'
op|':'
newline|'\n'
indent|'    '
string|'"""A wrapper around a file-like object to make it behave as a Transport.\n\n    This doesn\'t actually stream the file to the attached protocol,\n    and is thus useful mainly as a utility for debugging protocols.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'ITransport'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|closed
name|'closed'
op|'='
number|'0'
newline|'\n'
DECL|variable|disconnecting
name|'disconnecting'
op|'='
number|'0'
newline|'\n'
DECL|variable|producer
name|'producer'
op|'='
name|'None'
newline|'\n'
DECL|variable|streamingProducer
name|'streamingProducer'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'file'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'file'
op|'='
name|'file'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'handleException'
op|'('
op|')'
newline|'\n'
comment|'# self._checkProducer()'
nl|'\n'
nl|'\n'
DECL|member|_checkProducer
dedent|''
dedent|''
name|'def'
name|'_checkProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Cheating; this is called at "idle" times to allow producers to be'
nl|'\n'
comment|'# found and dealt with'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'producer'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|registerProducer
dedent|''
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""From abstract.FileDescriptor\n        """'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'='
name|'producer'
newline|'\n'
name|'self'
op|'.'
name|'streamingProducer'
op|'='
name|'streaming'
newline|'\n'
name|'if'
name|'not'
name|'streaming'
op|':'
newline|'\n'
indent|'            '
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'producer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|stopConsuming
dedent|''
name|'def'
name|'stopConsuming'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'iovec'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'write'
op|'('
string|'""'
op|'.'
name|'join'
op|'('
name|'iovec'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'closed'
op|'='
number|'1'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'IOError'
op|','
name|'OSError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'handleException'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getPeer
dedent|''
dedent|''
name|'def'
name|'getPeer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# XXX: According to ITransport, this should return an IAddress!'
nl|'\n'
indent|'        '
name|'return'
string|"'file'"
op|','
string|"'file'"
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# XXX: According to ITransport, this should return an IAddress!'
nl|'\n'
indent|'        '
name|'return'
string|"'file'"
newline|'\n'
nl|'\n'
DECL|member|handleException
dedent|''
name|'def'
name|'handleException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Never sends data anyways'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|pauseProducing
dedent|''
name|'def'
name|'pauseProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Never sends data anyways'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|stopProducing
dedent|''
name|'def'
name|'stopProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
string|'"Factory"'
op|','
string|'"ClientFactory"'
op|','
string|'"ReconnectingClientFactory"'
op|','
string|'"connectionDone"'
op|','
nl|'\n'
string|'"Protocol"'
op|','
string|'"ProcessProtocol"'
op|','
string|'"FileWrapper"'
op|','
string|'"ServerFactory"'
op|','
nl|'\n'
string|'"AbstractDatagramProtocol"'
op|','
string|'"DatagramProtocol"'
op|','
string|'"ConnectedDatagramProtocol"'
op|','
nl|'\n'
string|'"ClientCreator"'
op|']'
newline|'\n'
endmarker|''
end_unit

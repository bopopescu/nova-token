begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nAn epoll() based implementation of the twisted main loop.\n\nTo install the event loop (and you should do this before any connections,\nlisteners or connectors are added)::\n\n    from twisted.internet import epollreactor\n    epollreactor.install()\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'errno'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IReactorFDSet'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'_epoll'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'posixbase'
op|','
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'main'
name|'import'
name|'CONNECTION_LOST'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_POLL_DISCONNECTED
name|'_POLL_DISCONNECTED'
op|'='
op|'('
name|'_epoll'
op|'.'
name|'HUP'
op|'|'
name|'_epoll'
op|'.'
name|'ERR'
op|')'
newline|'\n'
nl|'\n'
DECL|class|EPollReactor
name|'class'
name|'EPollReactor'
op|'('
name|'posixbase'
op|'.'
name|'PosixReactorBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A reactor that uses epoll(4).\n\n    @ivar _poller: A L{poll} which will be used to check for I/O\n        readiness.\n\n    @ivar _selectables: A dictionary mapping integer file descriptors to\n        instances of L{FileDescriptor} which have been registered with the\n        reactor.  All L{FileDescriptors} which are currently receiving read or\n        write readiness notifications will be present as values in this\n        dictionary.\n\n    @ivar _reads: A dictionary mapping integer file descriptors to arbitrary\n        values (this is essentially a set).  Keys in this dictionary will be\n        registered with C{_poller} for read readiness notifications which will\n        be dispatched to the corresponding L{FileDescriptor} instances in\n        C{_selectables}.\n\n    @ivar _writes: A dictionary mapping integer file descriptors to arbitrary\n        values (this is essentially a set).  Keys in this dictionary will be\n        registered with C{_poller} for write readiness notifications which will\n        be dispatched to the corresponding L{FileDescriptor} instances in\n        C{_selectables}.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IReactorFDSet'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initialize epoll object, file descriptor tracking dictionaries, and the\n        base class.\n        """'
newline|'\n'
comment|"# Create the poller we're going to use.  The 1024 here is just a hint"
nl|'\n'
comment|'# to the kernel, it is not a hard maximum.'
nl|'\n'
name|'self'
op|'.'
name|'_poller'
op|'='
name|'_epoll'
op|'.'
name|'epoll'
op|'('
number|'1024'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_reads'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_writes'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_selectables'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'posixbase'
op|'.'
name|'PosixReactorBase'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_add
dedent|''
name|'def'
name|'_add'
op|'('
name|'self'
op|','
name|'xer'
op|','
name|'primary'
op|','
name|'other'
op|','
name|'selectables'
op|','
name|'event'
op|','
name|'antievent'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Private method for adding a descriptor from the event loop.\n\n        It takes care of adding it if  new or modifying it if already added\n        for another state (read -> read/write for example).\n        """'
newline|'\n'
name|'fd'
op|'='
name|'xer'
op|'.'
name|'fileno'
op|'('
op|')'
newline|'\n'
name|'if'
name|'fd'
name|'not'
name|'in'
name|'primary'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
name|'_epoll'
op|'.'
name|'CTL_ADD'
newline|'\n'
name|'flags'
op|'='
name|'event'
newline|'\n'
name|'if'
name|'fd'
name|'in'
name|'other'
op|':'
newline|'\n'
indent|'                '
name|'flags'
op|'|='
name|'antievent'
newline|'\n'
name|'cmd'
op|'='
name|'_epoll'
op|'.'
name|'CTL_MOD'
newline|'\n'
dedent|''
name|'primary'
op|'['
name|'fd'
op|']'
op|'='
number|'1'
newline|'\n'
name|'selectables'
op|'['
name|'fd'
op|']'
op|'='
name|'xer'
newline|'\n'
comment|'# epoll_ctl can raise all kinds of IOErrors, and every one'
nl|'\n'
comment|'# indicates a bug either in the reactor or application-code.'
nl|'\n'
comment|'# Let them all through so someone sees a traceback and fixes'
nl|'\n'
comment|"# something.  We'll do the same thing for every other call to"
nl|'\n'
comment|'# this method in this file.'
nl|'\n'
name|'self'
op|'.'
name|'_poller'
op|'.'
name|'_control'
op|'('
name|'cmd'
op|','
name|'fd'
op|','
name|'flags'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addReader
dedent|''
dedent|''
name|'def'
name|'addReader'
op|'('
name|'self'
op|','
name|'reader'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add a FileDescriptor for notification of data available to read.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_add'
op|'('
name|'reader'
op|','
name|'self'
op|'.'
name|'_reads'
op|','
name|'self'
op|'.'
name|'_writes'
op|','
name|'self'
op|'.'
name|'_selectables'
op|','
name|'_epoll'
op|'.'
name|'IN'
op|','
name|'_epoll'
op|'.'
name|'OUT'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addWriter
dedent|''
name|'def'
name|'addWriter'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add a FileDescriptor for notification of data available to write.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_add'
op|'('
name|'writer'
op|','
name|'self'
op|'.'
name|'_writes'
op|','
name|'self'
op|'.'
name|'_reads'
op|','
name|'self'
op|'.'
name|'_selectables'
op|','
name|'_epoll'
op|'.'
name|'OUT'
op|','
name|'_epoll'
op|'.'
name|'IN'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_remove
dedent|''
name|'def'
name|'_remove'
op|'('
name|'self'
op|','
name|'xer'
op|','
name|'primary'
op|','
name|'other'
op|','
name|'selectables'
op|','
name|'event'
op|','
name|'antievent'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Private method for removing a descriptor from the event loop.\n\n        It does the inverse job of _add, and also add a check in case of the fd\n        has gone away.\n        """'
newline|'\n'
name|'fd'
op|'='
name|'xer'
op|'.'
name|'fileno'
op|'('
op|')'
newline|'\n'
name|'if'
name|'fd'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'fd'
op|','
name|'fdes'
name|'in'
name|'selectables'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'xer'
name|'is'
name|'fdes'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'fd'
name|'in'
name|'primary'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
name|'_epoll'
op|'.'
name|'CTL_DEL'
newline|'\n'
name|'flags'
op|'='
name|'event'
newline|'\n'
name|'if'
name|'fd'
name|'in'
name|'other'
op|':'
newline|'\n'
indent|'                '
name|'flags'
op|'='
name|'antievent'
newline|'\n'
name|'cmd'
op|'='
name|'_epoll'
op|'.'
name|'CTL_MOD'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'selectables'
op|'['
name|'fd'
op|']'
newline|'\n'
dedent|''
name|'del'
name|'primary'
op|'['
name|'fd'
op|']'
newline|'\n'
comment|'# See comment above _control call in _add.'
nl|'\n'
name|'self'
op|'.'
name|'_poller'
op|'.'
name|'_control'
op|'('
name|'cmd'
op|','
name|'fd'
op|','
name|'flags'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeReader
dedent|''
dedent|''
name|'def'
name|'removeReader'
op|'('
name|'self'
op|','
name|'reader'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove a Selectable for notification of data available to read.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_remove'
op|'('
name|'reader'
op|','
name|'self'
op|'.'
name|'_reads'
op|','
name|'self'
op|'.'
name|'_writes'
op|','
name|'self'
op|'.'
name|'_selectables'
op|','
name|'_epoll'
op|'.'
name|'IN'
op|','
name|'_epoll'
op|'.'
name|'OUT'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeWriter
dedent|''
name|'def'
name|'removeWriter'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove a Selectable for notification of data available to write.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_remove'
op|'('
name|'writer'
op|','
name|'self'
op|'.'
name|'_writes'
op|','
name|'self'
op|'.'
name|'_reads'
op|','
name|'self'
op|'.'
name|'_selectables'
op|','
name|'_epoll'
op|'.'
name|'OUT'
op|','
name|'_epoll'
op|'.'
name|'IN'
op|')'
newline|'\n'
nl|'\n'
DECL|member|removeAll
dedent|''
name|'def'
name|'removeAll'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove all selectables, and return a list of them.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_removeAll'
op|'('
nl|'\n'
op|'['
name|'self'
op|'.'
name|'_selectables'
op|'['
name|'fd'
op|']'
name|'for'
name|'fd'
name|'in'
name|'self'
op|'.'
name|'_reads'
op|']'
op|','
nl|'\n'
op|'['
name|'self'
op|'.'
name|'_selectables'
op|'['
name|'fd'
op|']'
name|'for'
name|'fd'
name|'in'
name|'self'
op|'.'
name|'_writes'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getReaders
dedent|''
name|'def'
name|'getReaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'self'
op|'.'
name|'_selectables'
op|'['
name|'fd'
op|']'
name|'for'
name|'fd'
name|'in'
name|'self'
op|'.'
name|'_reads'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getWriters
dedent|''
name|'def'
name|'getWriters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'self'
op|'.'
name|'_selectables'
op|'['
name|'fd'
op|']'
name|'for'
name|'fd'
name|'in'
name|'self'
op|'.'
name|'_writes'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|doPoll
dedent|''
name|'def'
name|'doPoll'
op|'('
name|'self'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Poll the poller for new events.\n        """'
newline|'\n'
name|'if'
name|'timeout'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'timeout'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'timeout'
op|'='
name|'int'
op|'('
name|'timeout'
op|'*'
number|'1000'
op|')'
comment|'# convert seconds to milliseconds'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|"# Limit the number of events to the number of io objects we're"
nl|'\n'
comment|"# currently tracking (because that's maybe a good heuristic) and"
nl|'\n'
comment|'# the amount of time we block to the value specified by our'
nl|'\n'
comment|'# caller.'
nl|'\n'
indent|'            '
name|'l'
op|'='
name|'self'
op|'.'
name|'_poller'
op|'.'
name|'wait'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'_selectables'
op|')'
op|','
name|'timeout'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EINTR'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
comment|'# See epoll_wait(2) for documentation on the other conditions'
nl|'\n'
comment|'# under which this can fail.  They can only be due to a serious'
nl|'\n'
comment|"# programming error on our part, so let's just announce them"
nl|'\n'
comment|'# loudly.'
nl|'\n'
dedent|''
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
name|'_drdw'
op|'='
name|'self'
op|'.'
name|'_doReadOrWrite'
newline|'\n'
name|'for'
name|'fd'
op|','
name|'event'
name|'in'
name|'l'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'selectable'
op|'='
name|'self'
op|'.'
name|'_selectables'
op|'['
name|'fd'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'callWithLogger'
op|'('
name|'selectable'
op|','
name|'_drdw'
op|','
name|'selectable'
op|','
name|'fd'
op|','
name|'event'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|doIteration
dedent|''
dedent|''
dedent|''
name|'doIteration'
op|'='
name|'doPoll'
newline|'\n'
nl|'\n'
DECL|member|_doReadOrWrite
name|'def'
name|'_doReadOrWrite'
op|'('
name|'self'
op|','
name|'selectable'
op|','
name|'fd'
op|','
name|'event'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        fd is available for read or write, make the work and raise errors\n        if necessary.\n        """'
newline|'\n'
name|'why'
op|'='
name|'None'
newline|'\n'
name|'inRead'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'event'
op|'&'
name|'_POLL_DISCONNECTED'
name|'and'
name|'not'
op|'('
name|'event'
op|'&'
name|'_epoll'
op|'.'
name|'IN'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'why'
op|'='
name|'CONNECTION_LOST'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'event'
op|'&'
name|'_epoll'
op|'.'
name|'IN'
op|':'
newline|'\n'
indent|'                    '
name|'why'
op|'='
name|'selectable'
op|'.'
name|'doRead'
op|'('
op|')'
newline|'\n'
name|'inRead'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'why'
name|'and'
name|'event'
op|'&'
name|'_epoll'
op|'.'
name|'OUT'
op|':'
newline|'\n'
indent|'                    '
name|'why'
op|'='
name|'selectable'
op|'.'
name|'doWrite'
op|'('
op|')'
newline|'\n'
name|'inRead'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'if'
name|'selectable'
op|'.'
name|'fileno'
op|'('
op|')'
op|'!='
name|'fd'
op|':'
newline|'\n'
indent|'                    '
name|'why'
op|'='
name|'error'
op|'.'
name|'ConnectionFdescWentAway'
op|'('
nl|'\n'
string|"'Filedescriptor went away'"
op|')'
newline|'\n'
name|'inRead'
op|'='
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
name|'why'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'why'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_disconnectSelectable'
op|'('
name|'selectable'
op|','
name|'why'
op|','
name|'inRead'
op|')'
newline|'\n'
nl|'\n'
DECL|function|install
dedent|''
dedent|''
dedent|''
name|'def'
name|'install'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Install the epoll() reactor.\n    """'
newline|'\n'
name|'p'
op|'='
name|'EPollReactor'
op|'('
op|')'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'main'
name|'import'
name|'installReactor'
newline|'\n'
name|'installReactor'
op|'('
name|'p'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
name|'__all__'
op|'='
op|'['
string|'"EPollReactor"'
op|','
string|'"install"'
op|']'
newline|'\n'
nl|'\n'
endmarker|''
end_unit

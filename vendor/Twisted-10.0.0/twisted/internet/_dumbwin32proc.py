begin_unit
comment|'# -*- test-case-name: twisted.test.test_process -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nhttp://isometric.sixsided.org/_/gates_in_the_head/\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
comment|'# Win32 imports'
nl|'\n'
name|'import'
name|'win32api'
newline|'\n'
name|'import'
name|'win32con'
newline|'\n'
name|'import'
name|'win32event'
newline|'\n'
name|'import'
name|'win32file'
newline|'\n'
name|'import'
name|'win32pipe'
newline|'\n'
name|'import'
name|'win32process'
newline|'\n'
name|'import'
name|'win32security'
newline|'\n'
nl|'\n'
name|'import'
name|'pywintypes'
newline|'\n'
nl|'\n'
comment|'# security attributes for pipes'
nl|'\n'
DECL|variable|PIPE_ATTRS_INHERITABLE
name|'PIPE_ATTRS_INHERITABLE'
op|'='
name|'win32security'
op|'.'
name|'SECURITY_ATTRIBUTES'
op|'('
op|')'
newline|'\n'
name|'PIPE_ATTRS_INHERITABLE'
op|'.'
name|'bInheritHandle'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IProcessTransport'
op|','
name|'IConsumer'
op|','
name|'IProducer'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'win32'
name|'import'
name|'quoteArguments'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'_pollingfile'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'_baseprocess'
name|'import'
name|'BaseProcess'
newline|'\n'
nl|'\n'
DECL|function|debug
name|'def'
name|'debug'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'sys'
newline|'\n'
name|'print'
name|'msg'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|_Reaper
dedent|''
name|'class'
name|'_Reaper'
op|'('
name|'_pollingfile'
op|'.'
name|'_PollableResource'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'proc'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proc'
op|'='
name|'proc'
newline|'\n'
nl|'\n'
DECL|member|checkWork
dedent|''
name|'def'
name|'checkWork'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'win32event'
op|'.'
name|'WaitForSingleObject'
op|'('
name|'self'
op|'.'
name|'proc'
op|'.'
name|'hProcess'
op|','
number|'0'
op|')'
op|'!='
name|'win32event'
op|'.'
name|'WAIT_OBJECT_0'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'exitCode'
op|'='
name|'win32process'
op|'.'
name|'GetExitCodeProcess'
op|'('
name|'self'
op|'.'
name|'proc'
op|'.'
name|'hProcess'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deactivate'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proc'
op|'.'
name|'processEnded'
op|'('
name|'exitCode'
op|')'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_findShebang
dedent|''
dedent|''
name|'def'
name|'_findShebang'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Look for a #! line, and return the value following the #! if one exists, or\n    None if this file is not a script.\n\n    I don\'t know if there are any conventions for quoting in Windows shebang\n    lines, so this doesn\'t support any; therefore, you may not pass any\n    arguments to scripts invoked as filters.  That\'s probably wrong, so if\n    somebody knows more about the cultural expectations on Windows, please feel\n    free to fix.\n\n    This shebang line support was added in support of the CGI tests;\n    appropriately enough, I determined that shebang lines are culturally\n    accepted in the Windows world through this page::\n\n        http://www.cgi101.com/learn/connect/winxp.html\n\n    @param filename: str representing a filename\n\n    @return: a str representing another filename.\n    """'
newline|'\n'
name|'f'
op|'='
name|'file'
op|'('
name|'filename'
op|','
string|"'rU'"
op|')'
newline|'\n'
name|'if'
name|'f'
op|'.'
name|'read'
op|'('
number|'2'
op|')'
op|'=='
string|"'#!'"
op|':'
newline|'\n'
indent|'        '
name|'exe'
op|'='
name|'f'
op|'.'
name|'readline'
op|'('
number|'1024'
op|')'
op|'.'
name|'strip'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'return'
name|'exe'
newline|'\n'
nl|'\n'
DECL|function|_invalidWin32App
dedent|''
dedent|''
name|'def'
name|'_invalidWin32App'
op|'('
name|'pywinerr'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Determine if a pywintypes.error is telling us that the given process is\n    \'not a valid win32 application\', i.e. not a PE format executable.\n\n    @param pywinerr: a pywintypes.error instance raised by CreateProcess\n\n    @return: a boolean\n    """'
newline|'\n'
nl|'\n'
comment|"# Let's do this better in the future, but I have no idea what this error"
nl|'\n'
comment|"# is; MSDN doesn't mention it, and there is no symbolic constant in"
nl|'\n'
comment|'# win32process module that represents 193.'
nl|'\n'
nl|'\n'
name|'return'
name|'pywinerr'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|'=='
number|'193'
newline|'\n'
nl|'\n'
DECL|class|Process
dedent|''
name|'class'
name|'Process'
op|'('
name|'_pollingfile'
op|'.'
name|'_PollingTimer'
op|','
name|'BaseProcess'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A process that integrates with the Twisted event loop.\n\n    If your subprocess is a python program, you need to:\n\n     - Run python.exe with the \'-u\' command line option - this turns on\n       unbuffered I/O. Buffering stdout/err/in can cause problems, see e.g.\n       http://support.microsoft.com/default.aspx?scid=kb;EN-US;q1903\n\n     - If you don\'t want Windows messing with data passed over\n       stdin/out/err, set the pipes to be in binary mode::\n\n        import os, sys, mscvrt\n        msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)\n        msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)\n        msvcrt.setmode(sys.stderr.fileno(), os.O_BINARY)\n\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IProcessTransport'
op|','
name|'IConsumer'
op|','
name|'IProducer'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|closedNotifies
name|'closedNotifies'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|','
name|'protocol'
op|','
name|'command'
op|','
name|'args'
op|','
name|'environment'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'_pollingfile'
op|'.'
name|'_PollingTimer'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
newline|'\n'
name|'BaseProcess'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'protocol'
op|')'
newline|'\n'
nl|'\n'
comment|'# security attributes for pipes'
nl|'\n'
name|'sAttrs'
op|'='
name|'win32security'
op|'.'
name|'SECURITY_ATTRIBUTES'
op|'('
op|')'
newline|'\n'
name|'sAttrs'
op|'.'
name|'bInheritHandle'
op|'='
number|'1'
newline|'\n'
nl|'\n'
comment|'# create the pipes which will connect to the secondary process'
nl|'\n'
name|'self'
op|'.'
name|'hStdoutR'
op|','
name|'hStdoutW'
op|'='
name|'win32pipe'
op|'.'
name|'CreatePipe'
op|'('
name|'sAttrs'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hStderrR'
op|','
name|'hStderrW'
op|'='
name|'win32pipe'
op|'.'
name|'CreatePipe'
op|'('
name|'sAttrs'
op|','
number|'0'
op|')'
newline|'\n'
name|'hStdinR'
op|','
name|'self'
op|'.'
name|'hStdinW'
op|'='
name|'win32pipe'
op|'.'
name|'CreatePipe'
op|'('
name|'sAttrs'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'win32pipe'
op|'.'
name|'SetNamedPipeHandleState'
op|'('
name|'self'
op|'.'
name|'hStdinW'
op|','
nl|'\n'
name|'win32pipe'
op|'.'
name|'PIPE_NOWAIT'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# set the info structure for the new process.'
nl|'\n'
name|'StartupInfo'
op|'='
name|'win32process'
op|'.'
name|'STARTUPINFO'
op|'('
op|')'
newline|'\n'
name|'StartupInfo'
op|'.'
name|'hStdOutput'
op|'='
name|'hStdoutW'
newline|'\n'
name|'StartupInfo'
op|'.'
name|'hStdError'
op|'='
name|'hStderrW'
newline|'\n'
name|'StartupInfo'
op|'.'
name|'hStdInput'
op|'='
name|'hStdinR'
newline|'\n'
name|'StartupInfo'
op|'.'
name|'dwFlags'
op|'='
name|'win32process'
op|'.'
name|'STARTF_USESTDHANDLES'
newline|'\n'
nl|'\n'
comment|'# Create new handles whose inheritance property is false'
nl|'\n'
name|'currentPid'
op|'='
name|'win32api'
op|'.'
name|'GetCurrentProcess'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'tmp'
op|'='
name|'win32api'
op|'.'
name|'DuplicateHandle'
op|'('
name|'currentPid'
op|','
name|'self'
op|'.'
name|'hStdoutR'
op|','
name|'currentPid'
op|','
number|'0'
op|','
number|'0'
op|','
nl|'\n'
name|'win32con'
op|'.'
name|'DUPLICATE_SAME_ACCESS'
op|')'
newline|'\n'
name|'win32file'
op|'.'
name|'CloseHandle'
op|'('
name|'self'
op|'.'
name|'hStdoutR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hStdoutR'
op|'='
name|'tmp'
newline|'\n'
nl|'\n'
name|'tmp'
op|'='
name|'win32api'
op|'.'
name|'DuplicateHandle'
op|'('
name|'currentPid'
op|','
name|'self'
op|'.'
name|'hStderrR'
op|','
name|'currentPid'
op|','
number|'0'
op|','
number|'0'
op|','
nl|'\n'
name|'win32con'
op|'.'
name|'DUPLICATE_SAME_ACCESS'
op|')'
newline|'\n'
name|'win32file'
op|'.'
name|'CloseHandle'
op|'('
name|'self'
op|'.'
name|'hStderrR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hStderrR'
op|'='
name|'tmp'
newline|'\n'
nl|'\n'
name|'tmp'
op|'='
name|'win32api'
op|'.'
name|'DuplicateHandle'
op|'('
name|'currentPid'
op|','
name|'self'
op|'.'
name|'hStdinW'
op|','
name|'currentPid'
op|','
number|'0'
op|','
number|'0'
op|','
nl|'\n'
name|'win32con'
op|'.'
name|'DUPLICATE_SAME_ACCESS'
op|')'
newline|'\n'
name|'win32file'
op|'.'
name|'CloseHandle'
op|'('
name|'self'
op|'.'
name|'hStdinW'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hStdinW'
op|'='
name|'tmp'
newline|'\n'
nl|'\n'
comment|'# Add the specified environment to the current environment - this is'
nl|'\n'
comment|'# necessary because certain operations are only supported on Windows'
nl|'\n'
comment|'# if certain environment variables are present.'
nl|'\n'
nl|'\n'
name|'env'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'env'
op|'.'
name|'update'
op|'('
name|'environment'
name|'or'
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'cmdline'
op|'='
name|'quoteArguments'
op|'('
name|'args'
op|')'
newline|'\n'
comment|'# TODO: error detection here.'
nl|'\n'
DECL|function|doCreate
name|'def'
name|'doCreate'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'hProcess'
op|','
name|'self'
op|'.'
name|'hThread'
op|','
name|'self'
op|'.'
name|'pid'
op|','
name|'dwTid'
op|'='
name|'win32process'
op|'.'
name|'CreateProcess'
op|'('
nl|'\n'
name|'command'
op|','
name|'cmdline'
op|','
name|'None'
op|','
name|'None'
op|','
number|'1'
op|','
number|'0'
op|','
name|'env'
op|','
name|'path'
op|','
name|'StartupInfo'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'doCreate'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'pywintypes'
op|'.'
name|'error'
op|','
name|'pwte'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'_invalidWin32App'
op|'('
name|'pwte'
op|')'
op|':'
newline|'\n'
comment|"# This behavior isn't _really_ documented, but let's make it"
nl|'\n'
comment|'# consistent with the behavior that is documented.'
nl|'\n'
indent|'                '
name|'raise'
name|'OSError'
op|'('
name|'pwte'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# look for a shebang line.  Insert the original 'command'"
nl|'\n'
comment|'# (actually a script) into the new arguments list.'
nl|'\n'
indent|'                '
name|'sheb'
op|'='
name|'_findShebang'
op|'('
name|'command'
op|')'
newline|'\n'
name|'if'
name|'sheb'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'OSError'
op|'('
nl|'\n'
string|'"%r is neither a Windows executable, "'
nl|'\n'
string|'"nor a script with a shebang line"'
op|'%'
name|'command'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'args'
op|'='
name|'list'
op|'('
name|'args'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'command'
op|')'
newline|'\n'
name|'cmdline'
op|'='
name|'quoteArguments'
op|'('
name|'args'
op|')'
newline|'\n'
name|'origcmd'
op|'='
name|'command'
newline|'\n'
name|'command'
op|'='
name|'sheb'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|"# Let's try again."
nl|'\n'
indent|'                        '
name|'doCreate'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'pywintypes'
op|'.'
name|'error'
op|','
name|'pwte2'
op|':'
newline|'\n'
comment|"# d'oh, failed again!"
nl|'\n'
indent|'                        '
name|'if'
name|'_invalidWin32App'
op|'('
name|'pwte2'
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'raise'
name|'OSError'
op|'('
nl|'\n'
string|'"%r has an invalid shebang line: "'
nl|'\n'
string|'"%r is not a valid executable"'
op|'%'
op|'('
nl|'\n'
name|'origcmd'
op|','
name|'sheb'
op|')'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'OSError'
op|'('
name|'pwte2'
op|')'
newline|'\n'
nl|'\n'
comment|'# close handles which only the child will use'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'win32file'
op|'.'
name|'CloseHandle'
op|'('
name|'hStderrW'
op|')'
newline|'\n'
name|'win32file'
op|'.'
name|'CloseHandle'
op|'('
name|'hStdoutW'
op|')'
newline|'\n'
name|'win32file'
op|'.'
name|'CloseHandle'
op|'('
name|'hStdinR'
op|')'
newline|'\n'
nl|'\n'
comment|'# set up everything'
nl|'\n'
name|'self'
op|'.'
name|'stdout'
op|'='
name|'_pollingfile'
op|'.'
name|'_PollableReadPipe'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hStdoutR'
op|','
nl|'\n'
name|'lambda'
name|'data'
op|':'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'childDataReceived'
op|'('
number|'1'
op|','
name|'data'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'outConnectionLost'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stderr'
op|'='
name|'_pollingfile'
op|'.'
name|'_PollableReadPipe'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hStderrR'
op|','
nl|'\n'
name|'lambda'
name|'data'
op|':'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'childDataReceived'
op|'('
number|'2'
op|','
name|'data'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'errConnectionLost'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stdin'
op|'='
name|'_pollingfile'
op|'.'
name|'_PollableWritePipe'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hStdinW'
op|','
name|'self'
op|'.'
name|'inConnectionLost'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'pipewatcher'
name|'in'
name|'self'
op|'.'
name|'stdout'
op|','
name|'self'
op|'.'
name|'stderr'
op|','
name|'self'
op|'.'
name|'stdin'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_addPollableResource'
op|'('
name|'pipewatcher'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# notify protocol'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_addPollableResource'
op|'('
name|'_Reaper'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|signalProcess
dedent|''
name|'def'
name|'signalProcess'
op|'('
name|'self'
op|','
name|'signalID'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'pid'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'ProcessExitedAlready'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'signalID'
name|'in'
op|'('
string|'"INT"'
op|','
string|'"TERM"'
op|','
string|'"KILL"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'win32process'
op|'.'
name|'TerminateProcess'
op|'('
name|'self'
op|'.'
name|'hProcess'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getReason
dedent|''
dedent|''
name|'def'
name|'_getReason'
op|'('
name|'self'
op|','
name|'status'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'status'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'error'
op|'.'
name|'ProcessDone'
op|'('
name|'status'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'error'
op|'.'
name|'ProcessTerminated'
op|'('
name|'status'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write data to the process\' stdin."""'
newline|'\n'
name|'self'
op|'.'
name|'stdin'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeSequence
dedent|''
name|'def'
name|'writeSequence'
op|'('
name|'self'
op|','
name|'seq'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write data to the process\' stdin."""'
newline|'\n'
name|'self'
op|'.'
name|'stdin'
op|'.'
name|'writeSequence'
op|'('
name|'seq'
op|')'
newline|'\n'
nl|'\n'
DECL|member|closeChildFD
dedent|''
name|'def'
name|'closeChildFD'
op|'('
name|'self'
op|','
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'fd'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'closeStdin'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'fd'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'closeStdout'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'fd'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'closeStderr'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|'('
string|'"Only standard-IO file descriptors available on win32"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|closeStdin
dedent|''
dedent|''
name|'def'
name|'closeStdin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Close the process\' stdin.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'stdin'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|closeStderr
dedent|''
name|'def'
name|'closeStderr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stderr'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|closeStdout
dedent|''
name|'def'
name|'closeStdout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Close the process\' stdout, in and err."""'
newline|'\n'
name|'self'
op|'.'
name|'closeStdin'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'closeStdout'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'closeStderr'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|outConnectionLost
dedent|''
name|'def'
name|'outConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proto'
op|'.'
name|'childConnectionLost'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connectionLostNotify'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|errConnectionLost
dedent|''
name|'def'
name|'errConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proto'
op|'.'
name|'childConnectionLost'
op|'('
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connectionLostNotify'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|inConnectionLost
dedent|''
name|'def'
name|'inConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proto'
op|'.'
name|'childConnectionLost'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connectionLostNotify'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLostNotify
dedent|''
name|'def'
name|'connectionLostNotify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Will be called 3 times, by stdout/err threads and process handle.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'closedNotifies'
op|'+='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'maybeCallProcessEnded'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|maybeCallProcessEnded
dedent|''
name|'def'
name|'maybeCallProcessEnded'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'closedNotifies'
op|'=='
number|'3'
name|'and'
name|'self'
op|'.'
name|'lostProcess'
op|':'
newline|'\n'
indent|'            '
name|'win32file'
op|'.'
name|'CloseHandle'
op|'('
name|'self'
op|'.'
name|'hProcess'
op|')'
newline|'\n'
name|'win32file'
op|'.'
name|'CloseHandle'
op|'('
name|'self'
op|'.'
name|'hThread'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hProcess'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'hThread'
op|'='
name|'None'
newline|'\n'
name|'BaseProcess'
op|'.'
name|'maybeCallProcessEnded'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# IConsumer'
nl|'\n'
DECL|member|registerProducer
dedent|''
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stdin'
op|'.'
name|'registerProducer'
op|'('
name|'producer'
op|','
name|'streaming'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stdin'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# IProducer'
nl|'\n'
DECL|member|pauseProducing
dedent|''
name|'def'
name|'pauseProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_pause'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_unpause'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopProducing
dedent|''
name|'def'
name|'stopProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a string representation of the process.\n        """'
newline|'\n'
name|'return'
string|'"<%s pid=%s>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
name|'self'
op|'.'
name|'pid'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

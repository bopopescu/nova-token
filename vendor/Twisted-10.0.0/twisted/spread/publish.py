begin_unit
comment|'# -*- test-case-name: twisted.test.test_pb -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nPersistently cached objects for PB.\n\nMaintainer: Glyph Lefkowitz\n\nFuture Plans: None known.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
name|'import'
name|'banana'
op|','
name|'jelly'
op|','
name|'flavors'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Publishable
name|'class'
name|'Publishable'
op|'('
name|'flavors'
op|'.'
name|'Cacheable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An object whose cached state persists across sessions.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'publishedID'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'republish'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'publishedID'
op|'='
name|'publishedID'
newline|'\n'
nl|'\n'
DECL|member|republish
dedent|''
name|'def'
name|'republish'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the timestamp to current and (TODO) update all observers.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'timestamp'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|view_getStateToPublish
dedent|''
name|'def'
name|'view_getStateToPublish'
op|'('
name|'self'
op|','
name|'perspective'
op|')'
op|':'
newline|'\n'
indent|'        '
string|"'(internal)'"
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'getStateToPublishFor'
op|'('
name|'perspective'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getStateToPublishFor
dedent|''
name|'def'
name|'getStateToPublishFor'
op|'('
name|'self'
op|','
name|'perspective'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Implement me to special-case your state for a perspective.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'getStateToPublish'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getStateToPublish
dedent|''
name|'def'
name|'getStateToPublish'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Implement me to return state to copy as part of the publish phase.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
string|'"%s.getStateToPublishFor"'
op|'%'
name|'self'
op|'.'
name|'__class__'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getStateToCacheAndObserveFor
dedent|''
name|'def'
name|'getStateToCacheAndObserveFor'
op|'('
name|'self'
op|','
name|'perspective'
op|','
name|'observer'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get all necessary metadata to keep a clientside cache.\n        """'
newline|'\n'
name|'if'
name|'perspective'
op|':'
newline|'\n'
indent|'            '
name|'pname'
op|'='
name|'perspective'
op|'.'
name|'perspectiveName'
newline|'\n'
name|'sname'
op|'='
name|'perspective'
op|'.'
name|'getService'
op|'('
op|')'
op|'.'
name|'serviceName'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'pname'
op|'='
string|'"None"'
newline|'\n'
name|'sname'
op|'='
string|'"None"'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'{'
string|'"remote"'
op|':'
name|'flavors'
op|'.'
name|'ViewPoint'
op|'('
name|'perspective'
op|','
name|'self'
op|')'
op|','
nl|'\n'
string|'"publishedID"'
op|':'
name|'self'
op|'.'
name|'publishedID'
op|','
nl|'\n'
string|'"perspective"'
op|':'
name|'pname'
op|','
nl|'\n'
string|'"service"'
op|':'
name|'sname'
op|','
nl|'\n'
string|'"timestamp"'
op|':'
name|'self'
op|'.'
name|'timestamp'
op|'}'
newline|'\n'
nl|'\n'
DECL|class|RemotePublished
dedent|''
dedent|''
name|'class'
name|'RemotePublished'
op|'('
name|'flavors'
op|'.'
name|'RemoteCache'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The local representation of remote Publishable object.\n    """'
newline|'\n'
DECL|variable|isActivated
name|'isActivated'
op|'='
number|'0'
newline|'\n'
DECL|variable|_wasCleanWhenLoaded
name|'_wasCleanWhenLoaded'
op|'='
number|'0'
newline|'\n'
DECL|member|getFileName
name|'def'
name|'getFileName'
op|'('
name|'self'
op|','
name|'ext'
op|'='
string|"'pub'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|'"%s-%s-%s.%s"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'service'
op|','
name|'self'
op|'.'
name|'perspective'
op|','
name|'str'
op|'('
name|'self'
op|'.'
name|'publishedID'
op|')'
op|','
name|'ext'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setCopyableState
dedent|''
name|'def'
name|'setCopyableState'
op|'('
name|'self'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'update'
op|'('
name|'state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_activationListeners'
op|'='
op|'['
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'dataFile'
op|'='
name|'file'
op|'('
name|'self'
op|'.'
name|'getFileName'
op|'('
op|')'
op|','
string|'"rb"'
op|')'
newline|'\n'
name|'data'
op|'='
name|'dataFile'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'dataFile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'            '
name|'recent'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'newself'
op|'='
name|'jelly'
op|'.'
name|'unjelly'
op|'('
name|'banana'
op|'.'
name|'decode'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
name|'recent'
op|'='
op|'('
name|'newself'
op|'.'
name|'timestamp'
op|'=='
name|'self'
op|'.'
name|'timestamp'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'recent'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cbGotUpdate'
op|'('
name|'newself'
op|'.'
name|'__dict__'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wasCleanWhenLoaded'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'remote'
op|'.'
name|'callRemote'
op|'('
string|"'getStateToPublish'"
op|')'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbGotUpdate'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'other'
op|'='
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
comment|'# Remove PB-specific attributes'
nl|'\n'
name|'del'
name|'other'
op|'['
string|"'broker'"
op|']'
newline|'\n'
name|'del'
name|'other'
op|'['
string|"'remote'"
op|']'
newline|'\n'
name|'del'
name|'other'
op|'['
string|"'luid'"
op|']'
newline|'\n'
comment|'# remove my own runtime-tracking stuff'
nl|'\n'
name|'del'
name|'other'
op|'['
string|"'_activationListeners'"
op|']'
newline|'\n'
name|'del'
name|'other'
op|'['
string|"'isActivated'"
op|']'
newline|'\n'
name|'return'
name|'other'
newline|'\n'
nl|'\n'
DECL|member|_cbGotUpdate
dedent|''
name|'def'
name|'_cbGotUpdate'
op|'('
name|'self'
op|','
name|'newState'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'update'
op|'('
name|'newState'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'isActivated'
op|'='
number|'1'
newline|'\n'
comment|'# send out notifications'
nl|'\n'
name|'for'
name|'listener'
name|'in'
name|'self'
op|'.'
name|'_activationListeners'
op|':'
newline|'\n'
indent|'            '
name|'listener'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_activationListeners'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'activated'
op|'('
op|')'
newline|'\n'
name|'dataFile'
op|'='
name|'file'
op|'('
name|'self'
op|'.'
name|'getFileName'
op|'('
op|')'
op|','
string|'"wb"'
op|')'
newline|'\n'
name|'dataFile'
op|'.'
name|'write'
op|'('
name|'banana'
op|'.'
name|'encode'
op|'('
name|'jelly'
op|'.'
name|'jelly'
op|'('
name|'self'
op|')'
op|')'
op|')'
newline|'\n'
name|'dataFile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|activated
dedent|''
name|'def'
name|'activated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Implement this method if you want to be notified when your\n        publishable subclass is activated.\n        """'
newline|'\n'
nl|'\n'
DECL|member|callWhenActivated
dedent|''
name|'def'
name|'callWhenActivated'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Externally register for notification when this publishable has received all relevant data.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'isActivated'
op|':'
newline|'\n'
indent|'            '
name|'callback'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_activationListeners'
op|'.'
name|'append'
op|'('
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|function|whenReady
dedent|''
dedent|''
dedent|''
name|'def'
name|'whenReady'
op|'('
name|'d'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wrap a deferred returned from a pb method in another deferred that\n    expects a RemotePublished as a result.  This will allow you to wait until\n    the result is really available.\n\n    Idiomatic usage would look like::\n\n        publish.whenReady(serverObject.getMeAPublishable()).addCallback(lookAtThePublishable)\n    """'
newline|'\n'
name|'d2'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'_pubReady'
op|','
name|'d2'
op|'.'
name|'errback'
op|','
nl|'\n'
name|'callbackArgs'
op|'='
op|'('
name|'d2'
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'d2'
newline|'\n'
nl|'\n'
DECL|function|_pubReady
dedent|''
name|'def'
name|'_pubReady'
op|'('
name|'result'
op|','
name|'d2'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'(internal)'"
newline|'\n'
name|'result'
op|'.'
name|'callWhenActivated'
op|'('
name|'d2'
op|'.'
name|'callback'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

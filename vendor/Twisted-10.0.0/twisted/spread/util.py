begin_unit
comment|'# -*- test-case-name: twisted.test.test_pb -*-'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nUtility classes for spread.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'failure'
name|'import'
name|'Failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
name|'import'
name|'pb'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'interfaces'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LocalMethod
name|'class'
name|'LocalMethod'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'local'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'local'
op|'='
name|'local'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'local'
op|'.'
name|'callRemote'
op|'('
name|'self'
op|'.'
name|'name'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LocalAsRemote
dedent|''
dedent|''
name|'class'
name|'LocalAsRemote'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A class useful for emulating the effects of remote behavior locally.\n    """'
newline|'\n'
DECL|variable|reportAllTracebacks
name|'reportAllTracebacks'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|callRemote
name|'def'
name|'callRemote'
op|'('
name|'self'
op|','
name|'name'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call a specially-designated local method.\n\n        self.callRemote(\'x\') will first try to invoke a method named\n        sync_x and return its result (which should probably be a\n        Deferred).  Second, it will look for a method called async_x,\n        which will be called and then have its result (or Failure)\n        automatically wrapped in a Deferred.\n        """'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|"'sync_'"
op|'+'
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
string|"'sync_'"
op|'+'
name|'name'
op|')'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"async_"'
op|'+'
name|'name'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'method'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'Failure'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'reportAllTracebacks'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'.'
name|'printTraceback'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'f'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remoteMethod
dedent|''
dedent|''
name|'def'
name|'remoteMethod'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'LocalMethod'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LocalAsyncForwarder
dedent|''
dedent|''
name|'class'
name|'LocalAsyncForwarder'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A class useful for forwarding a locally-defined interface.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'forwarded'
op|','
name|'interfaceClass'
op|','
name|'failWhenNotImplemented'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'interfaceClass'
op|'.'
name|'providedBy'
op|'('
name|'forwarded'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'forwarded'
op|'='
name|'forwarded'
newline|'\n'
name|'self'
op|'.'
name|'interfaceClass'
op|'='
name|'interfaceClass'
newline|'\n'
name|'self'
op|'.'
name|'failWhenNotImplemented'
op|'='
name|'failWhenNotImplemented'
newline|'\n'
nl|'\n'
DECL|member|_callMethod
dedent|''
name|'def'
name|'_callMethod'
op|'('
name|'self'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'forwarded'
op|','
name|'method'
op|')'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|callRemote
dedent|''
name|'def'
name|'callRemote'
op|'('
name|'self'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'interfaceClass'
op|'.'
name|'queryDescriptionFor'
op|'('
name|'method'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'_callMethod'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'failWhenNotImplemented'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
nl|'\n'
name|'Failure'
op|'('
name|'NotImplementedError'
op|','
nl|'\n'
string|'"No Such Method in Interface: %s"'
op|'%'
name|'method'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Pager
dedent|''
dedent|''
dedent|''
name|'class'
name|'Pager'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I am an object which pages out information.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'collector'
op|','
name|'callback'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a pager with a Reference to a remote collector and\n        an optional callable to invoke upon completion.\n        """'
newline|'\n'
name|'if'
name|'callable'
op|'('
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'callback'
op|'='
name|'callback'
newline|'\n'
name|'self'
op|'.'
name|'callbackArgs'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'callbackKeyword'
op|'='
name|'kw'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'callback'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_stillPaging'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'collector'
op|'='
name|'collector'
newline|'\n'
name|'collector'
op|'.'
name|'broker'
op|'.'
name|'registerPageProducer'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stillPaging
dedent|''
name|'def'
name|'stillPaging'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        (internal) Method called by Broker.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_stillPaging'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'collector'
op|'.'
name|'callRemote'
op|'('
string|'"endedPaging"'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'callback'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'callback'
op|'('
op|'*'
name|'self'
op|'.'
name|'callbackArgs'
op|','
op|'**'
name|'self'
op|'.'
name|'callbackKeyword'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_stillPaging'
newline|'\n'
nl|'\n'
DECL|member|sendNextPage
dedent|''
name|'def'
name|'sendNextPage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        (internal) Method called by Broker.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'collector'
op|'.'
name|'callRemote'
op|'('
string|'"gotPage"'
op|','
name|'self'
op|'.'
name|'nextPage'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|nextPage
dedent|''
name|'def'
name|'nextPage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override this to return an object to be sent to my collector.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopPaging
dedent|''
name|'def'
name|'stopPaging'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call this when you\'re done paging.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_stillPaging'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StringPager
dedent|''
dedent|''
name|'class'
name|'StringPager'
op|'('
name|'Pager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A simple pager that splits a string into chunks.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'collector'
op|','
name|'st'
op|','
name|'chunkSize'
op|'='
number|'8192'
op|','
name|'callback'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'string'
op|'='
name|'st'
newline|'\n'
name|'self'
op|'.'
name|'pointer'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'chunkSize'
op|'='
name|'chunkSize'
newline|'\n'
name|'Pager'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'collector'
op|','
name|'callback'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|nextPage
dedent|''
name|'def'
name|'nextPage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'val'
op|'='
name|'self'
op|'.'
name|'string'
op|'['
name|'self'
op|'.'
name|'pointer'
op|':'
name|'self'
op|'.'
name|'pointer'
op|'+'
name|'self'
op|'.'
name|'chunkSize'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'pointer'
op|'+='
name|'self'
op|'.'
name|'chunkSize'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'pointer'
op|'>='
name|'len'
op|'('
name|'self'
op|'.'
name|'string'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stopPaging'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'val'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FilePager
dedent|''
dedent|''
name|'class'
name|'FilePager'
op|'('
name|'Pager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Reads a file in chunks and sends the chunks as they come.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'interfaces'
op|'.'
name|'IConsumer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'collector'
op|','
name|'fd'
op|','
name|'callback'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'chunks'
op|'='
op|'['
op|']'
newline|'\n'
name|'Pager'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'collector'
op|','
name|'callback'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'startProducing'
op|'('
name|'fd'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startProducing
dedent|''
name|'def'
name|'startProducing'
op|'('
name|'self'
op|','
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'='
name|'basic'
op|'.'
name|'FileSender'
op|'('
op|')'
op|'.'
name|'beginFileTransfer'
op|'('
name|'fd'
op|','
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'addBoth'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'stopPaging'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|registerProducer
dedent|''
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'producer'
op|'='
name|'producer'
newline|'\n'
name|'if'
name|'not'
name|'streaming'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'producer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'chunk'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'chunks'
op|'.'
name|'append'
op|'('
name|'chunk'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendNextPage
dedent|''
name|'def'
name|'sendNextPage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the first chunk read and send it to collector.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'chunks'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'val'
op|'='
name|'self'
op|'.'
name|'chunks'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'collector'
op|'.'
name|'callRemote'
op|'('
string|'"gotPage"'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Utility paging stuff.'
nl|'\n'
DECL|class|CallbackPageCollector
dedent|''
dedent|''
name|'class'
name|'CallbackPageCollector'
op|'('
name|'pb'
op|'.'
name|'Referenceable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I receive pages from the peer. You may instantiate a Pager with a\n    remote reference to me. I will call the callback with a list of pages\n    once they are all received.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'pages'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'callback'
op|'='
name|'callback'
newline|'\n'
nl|'\n'
DECL|member|remote_gotPage
dedent|''
name|'def'
name|'remote_gotPage'
op|'('
name|'self'
op|','
name|'page'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'pages'
op|'.'
name|'append'
op|'('
name|'page'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remote_endedPaging
dedent|''
name|'def'
name|'remote_endedPaging'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'callback'
op|'('
name|'self'
op|'.'
name|'pages'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|getAllPages
dedent|''
dedent|''
name|'def'
name|'getAllPages'
op|'('
name|'referenceable'
op|','
name|'methodName'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A utility method that will call a remote method which expects a\n    PageCollector as the first argument.\n    """'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'referenceable'
op|'.'
name|'callRemote'
op|'('
name|'methodName'
op|','
name|'CallbackPageCollector'
op|'('
name|'d'
op|'.'
name|'callback'
op|')'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
endmarker|''
end_unit

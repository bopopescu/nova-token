begin_unit
comment|'# -*- test-case-name: twisted.test.test_banana -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nBanana -- s-exp based protocol.\n\nFuture Plans: This module is almost entirely stable.  The same caveat applies\nto it as applies to L{twisted.spread.jelly}, however.  Read its future plans\nfor more details.\n\n@author: Glyph Lefkowitz\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'copy'
op|','
name|'cStringIO'
op|','
name|'struct'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'persisted'
name|'import'
name|'styles'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
nl|'\n'
DECL|class|BananaError
name|'class'
name|'BananaError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|int2b128
dedent|''
name|'def'
name|'int2b128'
op|'('
name|'integer'
op|','
name|'stream'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'integer'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'stream'
op|'('
name|'chr'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'assert'
name|'integer'
op|'>'
number|'0'
op|','
string|'"can only encode positive integers"'
newline|'\n'
name|'while'
name|'integer'
op|':'
newline|'\n'
indent|'        '
name|'stream'
op|'('
name|'chr'
op|'('
name|'integer'
op|'&'
number|'0x7f'
op|')'
op|')'
newline|'\n'
name|'integer'
op|'='
name|'integer'
op|'>>'
number|'7'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|b1282int
dedent|''
dedent|''
name|'def'
name|'b1282int'
op|'('
name|'st'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert an integer represented as a base 128 string into an C{int} or\n    C{long}.\n\n    @param st: The integer encoded in a string.\n    @type st: C{str}\n\n    @return: The integer value extracted from the string.\n    @rtype: C{int} or C{long}\n    """'
newline|'\n'
name|'e'
op|'='
number|'1'
newline|'\n'
name|'i'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'char'
name|'in'
name|'st'
op|':'
newline|'\n'
indent|'        '
name|'n'
op|'='
name|'ord'
op|'('
name|'char'
op|')'
newline|'\n'
name|'i'
op|'+='
op|'('
name|'n'
op|'*'
name|'e'
op|')'
newline|'\n'
name|'e'
op|'<<='
number|'7'
newline|'\n'
dedent|''
name|'return'
name|'i'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# delimiter characters.'
nl|'\n'
DECL|variable|LIST
dedent|''
name|'LIST'
op|'='
name|'chr'
op|'('
number|'0x80'
op|')'
newline|'\n'
DECL|variable|INT
name|'INT'
op|'='
name|'chr'
op|'('
number|'0x81'
op|')'
newline|'\n'
DECL|variable|STRING
name|'STRING'
op|'='
name|'chr'
op|'('
number|'0x82'
op|')'
newline|'\n'
DECL|variable|NEG
name|'NEG'
op|'='
name|'chr'
op|'('
number|'0x83'
op|')'
newline|'\n'
DECL|variable|FLOAT
name|'FLOAT'
op|'='
name|'chr'
op|'('
number|'0x84'
op|')'
newline|'\n'
comment|'# "optional" -- these might be refused by a low-level implementation.'
nl|'\n'
DECL|variable|LONGINT
name|'LONGINT'
op|'='
name|'chr'
op|'('
number|'0x85'
op|')'
newline|'\n'
DECL|variable|LONGNEG
name|'LONGNEG'
op|'='
name|'chr'
op|'('
number|'0x86'
op|')'
newline|'\n'
comment|"# really optional; this is is part of the 'pb' vocabulary"
nl|'\n'
DECL|variable|VOCAB
name|'VOCAB'
op|'='
name|'chr'
op|'('
number|'0x87'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|HIGH_BIT_SET
name|'HIGH_BIT_SET'
op|'='
name|'chr'
op|'('
number|'0x80'
op|')'
newline|'\n'
nl|'\n'
DECL|function|setPrefixLimit
name|'def'
name|'setPrefixLimit'
op|'('
name|'limit'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set the limit on the prefix length for all Banana connections\n    established after this call.\n\n    The prefix length limit determines how many bytes of prefix a banana\n    decoder will allow before rejecting a potential object as too large.\n\n    @type limit: C{int}\n    @param limit: The number of bytes of prefix for banana to allow when\n    decoding.\n    """'
newline|'\n'
name|'global'
name|'_PREFIX_LIMIT'
newline|'\n'
name|'_PREFIX_LIMIT'
op|'='
name|'limit'
newline|'\n'
dedent|''
name|'setPrefixLimit'
op|'('
number|'64'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|SIZE_LIMIT
name|'SIZE_LIMIT'
op|'='
number|'640'
op|'*'
number|'1024'
comment|"# 640k is all you'll ever need :-)"
newline|'\n'
nl|'\n'
DECL|class|Banana
name|'class'
name|'Banana'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|','
name|'styles'
op|'.'
name|'Ephemeral'
op|')'
op|':'
newline|'\n'
DECL|variable|knownDialects
indent|'    '
name|'knownDialects'
op|'='
op|'['
string|'"pb"'
op|','
string|'"none"'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|prefixLimit
name|'prefixLimit'
op|'='
name|'None'
newline|'\n'
DECL|variable|sizeLimit
name|'sizeLimit'
op|'='
name|'SIZE_LIMIT'
newline|'\n'
nl|'\n'
DECL|member|setPrefixLimit
name|'def'
name|'setPrefixLimit'
op|'('
name|'self'
op|','
name|'limit'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the prefix limit for decoding done by this protocol instance.\n\n        @see: L{setPrefixLimit}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'prefixLimit'
op|'='
name|'limit'
newline|'\n'
name|'self'
op|'.'
name|'_smallestLongInt'
op|'='
op|'-'
number|'2'
op|'**'
op|'('
name|'limit'
op|'*'
number|'7'
op|')'
op|'+'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'_smallestInt'
op|'='
op|'-'
number|'2'
op|'**'
number|'31'
newline|'\n'
name|'self'
op|'.'
name|'_largestInt'
op|'='
number|'2'
op|'**'
number|'31'
op|'-'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'_largestLongInt'
op|'='
number|'2'
op|'**'
op|'('
name|'limit'
op|'*'
number|'7'
op|')'
op|'-'
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionReady
dedent|''
name|'def'
name|'connectionReady'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Surrogate for connectionMade\n        Called after protocol negotiation.\n        """'
newline|'\n'
nl|'\n'
DECL|member|_selectDialect
dedent|''
name|'def'
name|'_selectDialect'
op|'('
name|'self'
op|','
name|'dialect'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'currentDialect'
op|'='
name|'dialect'
newline|'\n'
name|'self'
op|'.'
name|'connectionReady'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|callExpressionReceived
dedent|''
name|'def'
name|'callExpressionReceived'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'currentDialect'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'expressionReceived'
op|'('
name|'obj'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# this is the first message we've received"
nl|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'isClient'
op|':'
newline|'\n'
comment|"# if I'm a client I have to respond"
nl|'\n'
indent|'                '
name|'for'
name|'serverVer'
name|'in'
name|'obj'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'serverVer'
name|'in'
name|'self'
op|'.'
name|'knownDialects'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'sendEncoded'
op|'('
name|'serverVer'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_selectDialect'
op|'('
name|'serverVer'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# I can't speak any of those dialects."
nl|'\n'
indent|'                    '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"The client doesn\'t speak any of the protocols "'
nl|'\n'
string|'"offered by the server: disconnecting."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'obj'
name|'in'
name|'self'
op|'.'
name|'knownDialects'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_selectDialect'
op|'('
name|'obj'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# the client just selected a protocol that I did not suggest.'
nl|'\n'
indent|'                    '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"The client selected a protocol the server didn\'t "'
nl|'\n'
string|'"suggest and doesn\'t know: disconnecting."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'setPrefixLimit'
op|'('
name|'_PREFIX_LIMIT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'currentDialect'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'isClient'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendEncoded'
op|'('
name|'self'
op|'.'
name|'knownDialects'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|gotItem
dedent|''
dedent|''
name|'def'
name|'gotItem'
op|'('
name|'self'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
name|'self'
op|'.'
name|'listStack'
newline|'\n'
name|'if'
name|'l'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'append'
op|'('
name|'item'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'callExpressionReceived'
op|'('
name|'item'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|buffer
dedent|''
dedent|''
name|'buffer'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|member|dataReceived
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'chunk'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'buffer'
op|'='
name|'self'
op|'.'
name|'buffer'
op|'+'
name|'chunk'
newline|'\n'
name|'listStack'
op|'='
name|'self'
op|'.'
name|'listStack'
newline|'\n'
name|'gotItem'
op|'='
name|'self'
op|'.'
name|'gotItem'
newline|'\n'
name|'while'
name|'buffer'
op|':'
newline|'\n'
indent|'            '
name|'assert'
name|'self'
op|'.'
name|'buffer'
op|'!='
name|'buffer'
op|','
string|'"This ain\'t right: %s %s"'
op|'%'
op|'('
name|'repr'
op|'('
name|'self'
op|'.'
name|'buffer'
op|')'
op|','
name|'repr'
op|'('
name|'buffer'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
name|'buffer'
newline|'\n'
name|'pos'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'ch'
name|'in'
name|'buffer'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'ch'
op|'>='
name|'HIGH_BIT_SET'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
name|'pos'
op|'='
name|'pos'
op|'+'
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'pos'
op|'>'
name|'self'
op|'.'
name|'prefixLimit'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'BananaError'
op|'('
string|'"Security precaution: more than %d bytes of prefix"'
op|'%'
op|'('
name|'self'
op|'.'
name|'prefixLimit'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'num'
op|'='
name|'buffer'
op|'['
op|':'
name|'pos'
op|']'
newline|'\n'
name|'typebyte'
op|'='
name|'buffer'
op|'['
name|'pos'
op|']'
newline|'\n'
name|'rest'
op|'='
name|'buffer'
op|'['
name|'pos'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'num'
op|')'
op|'>'
name|'self'
op|'.'
name|'prefixLimit'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'BananaError'
op|'('
string|'"Security precaution: longer than %d bytes worth of prefix"'
op|'%'
op|'('
name|'self'
op|'.'
name|'prefixLimit'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'typebyte'
op|'=='
name|'LIST'
op|':'
newline|'\n'
indent|'                '
name|'num'
op|'='
name|'b1282int'
op|'('
name|'num'
op|')'
newline|'\n'
name|'if'
name|'num'
op|'>'
name|'SIZE_LIMIT'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'BananaError'
op|'('
string|'"Security precaution: List too long."'
op|')'
newline|'\n'
dedent|''
name|'listStack'
op|'.'
name|'append'
op|'('
op|'('
name|'num'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'buffer'
op|'='
name|'rest'
newline|'\n'
dedent|''
name|'elif'
name|'typebyte'
op|'=='
name|'STRING'
op|':'
newline|'\n'
indent|'                '
name|'num'
op|'='
name|'b1282int'
op|'('
name|'num'
op|')'
newline|'\n'
name|'if'
name|'num'
op|'>'
name|'SIZE_LIMIT'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'BananaError'
op|'('
string|'"Security precaution: String too long."'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'rest'
op|')'
op|'>='
name|'num'
op|':'
newline|'\n'
indent|'                    '
name|'buffer'
op|'='
name|'rest'
op|'['
name|'num'
op|':'
op|']'
newline|'\n'
name|'gotItem'
op|'('
name|'rest'
op|'['
op|':'
name|'num'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'typebyte'
op|'=='
name|'INT'
op|':'
newline|'\n'
indent|'                '
name|'buffer'
op|'='
name|'rest'
newline|'\n'
name|'num'
op|'='
name|'b1282int'
op|'('
name|'num'
op|')'
newline|'\n'
name|'gotItem'
op|'('
name|'num'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'typebyte'
op|'=='
name|'LONGINT'
op|':'
newline|'\n'
indent|'                '
name|'buffer'
op|'='
name|'rest'
newline|'\n'
name|'num'
op|'='
name|'b1282int'
op|'('
name|'num'
op|')'
newline|'\n'
name|'gotItem'
op|'('
name|'num'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'typebyte'
op|'=='
name|'LONGNEG'
op|':'
newline|'\n'
indent|'                '
name|'buffer'
op|'='
name|'rest'
newline|'\n'
name|'num'
op|'='
name|'b1282int'
op|'('
name|'num'
op|')'
newline|'\n'
name|'gotItem'
op|'('
op|'-'
name|'num'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'typebyte'
op|'=='
name|'NEG'
op|':'
newline|'\n'
indent|'                '
name|'buffer'
op|'='
name|'rest'
newline|'\n'
name|'num'
op|'='
op|'-'
name|'b1282int'
op|'('
name|'num'
op|')'
newline|'\n'
name|'gotItem'
op|'('
name|'num'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'typebyte'
op|'=='
name|'VOCAB'
op|':'
newline|'\n'
indent|'                '
name|'buffer'
op|'='
name|'rest'
newline|'\n'
name|'num'
op|'='
name|'b1282int'
op|'('
name|'num'
op|')'
newline|'\n'
name|'gotItem'
op|'('
name|'self'
op|'.'
name|'incomingVocabulary'
op|'['
name|'num'
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'typebyte'
op|'=='
name|'FLOAT'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'len'
op|'('
name|'rest'
op|')'
op|'>='
number|'8'
op|':'
newline|'\n'
indent|'                    '
name|'buffer'
op|'='
name|'rest'
op|'['
number|'8'
op|':'
op|']'
newline|'\n'
name|'gotItem'
op|'('
name|'struct'
op|'.'
name|'unpack'
op|'('
string|'"!d"'
op|','
name|'rest'
op|'['
op|':'
number|'8'
op|']'
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'NotImplementedError'
op|'('
op|'('
string|'"Invalid Type Byte %r"'
op|'%'
op|'('
name|'typebyte'
op|','
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'while'
name|'listStack'
name|'and'
op|'('
name|'len'
op|'('
name|'listStack'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'1'
op|']'
op|')'
op|'=='
name|'listStack'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'0'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'item'
op|'='
name|'listStack'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'gotItem'
op|'('
name|'item'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'buffer'
op|'='
string|"''"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|expressionReceived
dedent|''
name|'def'
name|'expressionReceived'
op|'('
name|'self'
op|','
name|'lst'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when an expression (list, string, or int) is received.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|outgoingVocabulary
dedent|''
name|'outgoingVocabulary'
op|'='
op|'{'
nl|'\n'
comment|'# Jelly Data Types'
nl|'\n'
string|"'None'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'class'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'dereference'"
op|':'
number|'3'
op|','
nl|'\n'
string|"'reference'"
op|':'
number|'4'
op|','
nl|'\n'
string|"'dictionary'"
op|':'
number|'5'
op|','
nl|'\n'
string|"'function'"
op|':'
number|'6'
op|','
nl|'\n'
string|"'instance'"
op|':'
number|'7'
op|','
nl|'\n'
string|"'list'"
op|':'
number|'8'
op|','
nl|'\n'
string|"'module'"
op|':'
number|'9'
op|','
nl|'\n'
string|"'persistent'"
op|':'
number|'10'
op|','
nl|'\n'
string|"'tuple'"
op|':'
number|'11'
op|','
nl|'\n'
string|"'unpersistable'"
op|':'
number|'12'
op|','
nl|'\n'
nl|'\n'
comment|'# PB Data Types'
nl|'\n'
string|"'copy'"
op|':'
number|'13'
op|','
nl|'\n'
string|"'cache'"
op|':'
number|'14'
op|','
nl|'\n'
string|"'cached'"
op|':'
number|'15'
op|','
nl|'\n'
string|"'remote'"
op|':'
number|'16'
op|','
nl|'\n'
string|"'local'"
op|':'
number|'17'
op|','
nl|'\n'
string|"'lcache'"
op|':'
number|'18'
op|','
nl|'\n'
nl|'\n'
comment|'# PB Protocol Messages'
nl|'\n'
string|"'version'"
op|':'
number|'19'
op|','
nl|'\n'
string|"'login'"
op|':'
number|'20'
op|','
nl|'\n'
string|"'password'"
op|':'
number|'21'
op|','
nl|'\n'
string|"'challenge'"
op|':'
number|'22'
op|','
nl|'\n'
string|"'logged_in'"
op|':'
number|'23'
op|','
nl|'\n'
string|"'not_logged_in'"
op|':'
number|'24'
op|','
nl|'\n'
string|"'cachemessage'"
op|':'
number|'25'
op|','
nl|'\n'
string|"'message'"
op|':'
number|'26'
op|','
nl|'\n'
string|"'answer'"
op|':'
number|'27'
op|','
nl|'\n'
string|"'error'"
op|':'
number|'28'
op|','
nl|'\n'
string|"'decref'"
op|':'
number|'29'
op|','
nl|'\n'
string|"'decache'"
op|':'
number|'30'
op|','
nl|'\n'
string|"'uncache'"
op|':'
number|'31'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|incomingVocabulary
name|'incomingVocabulary'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'outgoingVocabulary'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'incomingVocabulary'
op|'['
name|'v'
op|']'
op|'='
name|'k'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'isClient'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'listStack'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'outgoingSymbols'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'self'
op|'.'
name|'outgoingVocabulary'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'outgoingSymbolCount'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'isClient'
op|'='
name|'isClient'
newline|'\n'
nl|'\n'
DECL|member|sendEncoded
dedent|''
name|'def'
name|'sendEncoded'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'io'
op|'='
name|'cStringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_encode'
op|'('
name|'obj'
op|','
name|'io'
op|'.'
name|'write'
op|')'
newline|'\n'
name|'value'
op|'='
name|'io'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_encode
dedent|''
name|'def'
name|'_encode'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'write'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'obj'
op|','
op|'('
name|'list'
op|','
name|'tuple'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'obj'
op|')'
op|'>'
name|'SIZE_LIMIT'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'BananaError'
op|'('
nl|'\n'
string|'"list/tuple is too long to send (%d)"'
op|'%'
op|'('
name|'len'
op|'('
name|'obj'
op|')'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'int2b128'
op|'('
name|'len'
op|'('
name|'obj'
op|')'
op|','
name|'write'
op|')'
newline|'\n'
name|'write'
op|'('
name|'LIST'
op|')'
newline|'\n'
name|'for'
name|'elem'
name|'in'
name|'obj'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_encode'
op|'('
name|'elem'
op|','
name|'write'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'obj'
op|','
op|'('
name|'int'
op|','
name|'long'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'obj'
op|'<'
name|'self'
op|'.'
name|'_smallestLongInt'
name|'or'
name|'obj'
op|'>'
name|'self'
op|'.'
name|'_largestLongInt'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'BananaError'
op|'('
nl|'\n'
string|'"int/long is too large to send (%d)"'
op|'%'
op|'('
name|'obj'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'obj'
op|'<'
name|'self'
op|'.'
name|'_smallestInt'
op|':'
newline|'\n'
indent|'                '
name|'int2b128'
op|'('
op|'-'
name|'obj'
op|','
name|'write'
op|')'
newline|'\n'
name|'write'
op|'('
name|'LONGNEG'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'obj'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'int2b128'
op|'('
op|'-'
name|'obj'
op|','
name|'write'
op|')'
newline|'\n'
name|'write'
op|'('
name|'NEG'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'obj'
op|'<='
name|'self'
op|'.'
name|'_largestInt'
op|':'
newline|'\n'
indent|'                '
name|'int2b128'
op|'('
name|'obj'
op|','
name|'write'
op|')'
newline|'\n'
name|'write'
op|'('
name|'INT'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'int2b128'
op|'('
name|'obj'
op|','
name|'write'
op|')'
newline|'\n'
name|'write'
op|'('
name|'LONGINT'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'obj'
op|','
name|'float'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'write'
op|'('
name|'FLOAT'
op|')'
newline|'\n'
name|'write'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
string|'"!d"'
op|','
name|'obj'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'obj'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
comment|'# TODO: an API for extending banana...'
nl|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'currentDialect'
op|'=='
string|'"pb"'
name|'and'
name|'obj'
name|'in'
name|'self'
op|'.'
name|'outgoingSymbols'
op|':'
newline|'\n'
indent|'                '
name|'symbolID'
op|'='
name|'self'
op|'.'
name|'outgoingSymbols'
op|'['
name|'obj'
op|']'
newline|'\n'
name|'int2b128'
op|'('
name|'symbolID'
op|','
name|'write'
op|')'
newline|'\n'
name|'write'
op|'('
name|'VOCAB'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'len'
op|'('
name|'obj'
op|')'
op|'>'
name|'SIZE_LIMIT'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'BananaError'
op|'('
nl|'\n'
string|'"string is too long to send (%d)"'
op|'%'
op|'('
name|'len'
op|'('
name|'obj'
op|')'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'int2b128'
op|'('
name|'len'
op|'('
name|'obj'
op|')'
op|','
name|'write'
op|')'
newline|'\n'
name|'write'
op|'('
name|'STRING'
op|')'
newline|'\n'
name|'write'
op|'('
name|'obj'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'BananaError'
op|'('
string|'"could not send object: %r"'
op|'%'
op|'('
name|'obj'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# For use from the interactive interpreter'
nl|'\n'
DECL|variable|_i
dedent|''
dedent|''
dedent|''
name|'_i'
op|'='
name|'Banana'
op|'('
op|')'
newline|'\n'
name|'_i'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'_i'
op|'.'
name|'_selectDialect'
op|'('
string|'"none"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|encode
name|'def'
name|'encode'
op|'('
name|'lst'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Encode a list s-expression."""'
newline|'\n'
name|'io'
op|'='
name|'cStringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'_i'
op|'.'
name|'transport'
op|'='
name|'io'
newline|'\n'
name|'_i'
op|'.'
name|'sendEncoded'
op|'('
name|'lst'
op|')'
newline|'\n'
name|'return'
name|'io'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'st'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Decode a banana-encoded string.\n    """'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'_i'
op|'.'
name|'expressionReceived'
op|'='
name|'l'
op|'.'
name|'append'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'_i'
op|'.'
name|'dataReceived'
op|'('
name|'st'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'_i'
op|'.'
name|'buffer'
op|'='
string|"''"
newline|'\n'
name|'del'
name|'_i'
op|'.'
name|'expressionReceived'
newline|'\n'
dedent|''
name|'return'
name|'l'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
endmarker|''
end_unit

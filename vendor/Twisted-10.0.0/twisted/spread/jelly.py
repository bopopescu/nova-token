begin_unit
comment|'# -*- test-case-name: twisted.test.test_jelly -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nS-expression-based persistence of python objects.\n\nIt does something very much like L{Pickle<pickle>}; however, pickle\'s main goal\nseems to be efficiency (both in space and time); jelly\'s main goals are\nsecurity, human readability, and portability to other environments.\n\nThis is how Jelly converts various objects to s-expressions.\n\nBoolean::\n    True --> [\'boolean\', \'true\']\n\nInteger::\n    1 --> 1\n\nList::\n    [1, 2] --> [\'list\', 1, 2]\n\nString::\n    \\"hello\\" --> \\"hello\\"\n\nFloat::\n    2.3 --> 2.3\n\nDictionary::\n    {\'a\': 1, \'b\': \'c\'} --> [\'dictionary\', [\'b\', \'c\'], [\'a\', 1]]\n\nModule::\n    UserString --> [\'module\', \'UserString\']\n\nClass::\n    UserString.UserString --> [\'class\', [\'module\', \'UserString\'], \'UserString\']\n\nFunction::\n    string.join --> [\'function\', \'join\', [\'module\', \'string\']]\n\nInstance: s is an instance of UserString.UserString, with a __dict__\n{\'data\': \'hello\'}::\n    [\\"UserString.UserString\\", [\'dictionary\', [\'data\', \'hello\']]]\n\nClass Method: UserString.UserString.center::\n    [\'method\', \'center\', [\'None\'], [\'class\', [\'module\', \'UserString\'],\n     \'UserString\']]\n\nInstance Method: s.center, where s is an instance of UserString.UserString::\n    [\'method\', \'center\', [\'instance\', [\'reference\', 1, [\'class\',\n    [\'module\', \'UserString\'], \'UserString\']], [\'dictionary\', [\'data\', \'d\']]],\n    [\'dereference\', 1]]\n\nThe C{set} builtin and the C{sets.Set} class are serialized to the same\nthing, and unserialized to C{set} if available, else to C{sets.Set}. It means\nthat there\'s a possibility of type switching in the serialization process. The\nsolution is to always use C{set} if possible, and only use C{sets.Set} under\nPython 2.3; this can be accomplished by using L{twisted.python.compat.set}.\n\nThe same rule applies for C{frozenset} and C{sets.ImmutableSet}.\n\n@author: Glyph Lefkowitz\n"""'
newline|'\n'
nl|'\n'
comment|'# System Imports'
nl|'\n'
name|'import'
name|'pickle'
newline|'\n'
name|'import'
name|'types'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
name|'from'
name|'types'
name|'import'
name|'StringType'
newline|'\n'
name|'from'
name|'types'
name|'import'
name|'UnicodeType'
newline|'\n'
name|'from'
name|'types'
name|'import'
name|'IntType'
newline|'\n'
name|'from'
name|'types'
name|'import'
name|'TupleType'
newline|'\n'
name|'from'
name|'types'
name|'import'
name|'ListType'
newline|'\n'
name|'from'
name|'types'
name|'import'
name|'LongType'
newline|'\n'
name|'from'
name|'types'
name|'import'
name|'FloatType'
newline|'\n'
name|'from'
name|'types'
name|'import'
name|'FunctionType'
newline|'\n'
name|'from'
name|'types'
name|'import'
name|'MethodType'
newline|'\n'
name|'from'
name|'types'
name|'import'
name|'ModuleType'
newline|'\n'
name|'from'
name|'types'
name|'import'
name|'DictionaryType'
newline|'\n'
name|'from'
name|'types'
name|'import'
name|'InstanceType'
newline|'\n'
name|'from'
name|'types'
name|'import'
name|'NoneType'
newline|'\n'
name|'from'
name|'types'
name|'import'
name|'ClassType'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
nl|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'from'
name|'types'
name|'import'
name|'BooleanType'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'decimal'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|decimal
indent|'    '
name|'decimal'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
DECL|variable|_set
indent|'    '
name|'_set'
op|'='
name|'set'
newline|'\n'
dedent|''
name|'except'
name|'NameError'
op|':'
newline|'\n'
DECL|variable|_set
indent|'    '
name|'_set'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# Filter out deprecation warning for Python >= 2.6'
nl|'\n'
indent|'    '
name|'warnings'
op|'.'
name|'filterwarnings'
op|'('
string|'"ignore"'
op|','
name|'category'
op|'='
name|'DeprecationWarning'
op|','
nl|'\n'
name|'message'
op|'='
string|'"the sets module is deprecated"'
op|','
name|'append'
op|'='
name|'True'
op|')'
newline|'\n'
name|'import'
name|'sets'
name|'as'
name|'_sets'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'    '
name|'warnings'
op|'.'
name|'filters'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'from'
name|'new'
name|'import'
name|'instance'
newline|'\n'
name|'from'
name|'new'
name|'import'
name|'instancemethod'
newline|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
comment|'# Twisted Imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'reflect'
name|'import'
name|'namedObject'
op|','
name|'qual'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'persisted'
op|'.'
name|'crefutil'
name|'import'
name|'NotKnown'
op|','
name|'_Tuple'
op|','
name|'_InstanceMethod'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'persisted'
op|'.'
name|'crefutil'
name|'import'
name|'_DictKeyAndValue'
op|','
name|'_Dereference'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'persisted'
op|'.'
name|'crefutil'
name|'import'
name|'_Container'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'runtime'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'reduce'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'interfaces'
name|'import'
name|'IJellyable'
op|','
name|'IUnjellyable'
newline|'\n'
nl|'\n'
nl|'\n'
name|'if'
name|'runtime'
op|'.'
name|'platform'
op|'.'
name|'getType'
op|'('
op|')'
op|'=='
string|'"java"'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'org'
op|'.'
name|'python'
op|'.'
name|'core'
name|'import'
name|'PyStringMap'
newline|'\n'
DECL|variable|DictTypes
name|'DictTypes'
op|'='
op|'('
name|'DictionaryType'
op|','
name|'PyStringMap'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|DictTypes
indent|'    '
name|'DictTypes'
op|'='
op|'('
name|'DictionaryType'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|None_atom
dedent|''
name|'None_atom'
op|'='
string|'"None"'
comment|'# N'
newline|'\n'
comment|'# code'
nl|'\n'
DECL|variable|class_atom
name|'class_atom'
op|'='
string|'"class"'
comment|'# c'
newline|'\n'
DECL|variable|module_atom
name|'module_atom'
op|'='
string|'"module"'
comment|'# m'
newline|'\n'
DECL|variable|function_atom
name|'function_atom'
op|'='
string|'"function"'
comment|'# f'
newline|'\n'
nl|'\n'
comment|'# references'
nl|'\n'
DECL|variable|dereference_atom
name|'dereference_atom'
op|'='
string|"'dereference'"
comment|'# D'
newline|'\n'
DECL|variable|persistent_atom
name|'persistent_atom'
op|'='
string|"'persistent'"
comment|'# p'
newline|'\n'
DECL|variable|reference_atom
name|'reference_atom'
op|'='
string|"'reference'"
comment|'# r'
newline|'\n'
nl|'\n'
comment|'# mutable collections'
nl|'\n'
DECL|variable|dictionary_atom
name|'dictionary_atom'
op|'='
string|'"dictionary"'
comment|'# d'
newline|'\n'
DECL|variable|list_atom
name|'list_atom'
op|'='
string|"'list'"
comment|'# l'
newline|'\n'
DECL|variable|set_atom
name|'set_atom'
op|'='
string|"'set'"
newline|'\n'
nl|'\n'
comment|'# immutable collections'
nl|'\n'
comment|'#   (assignment to __dict__ and __class__ still might go away!)'
nl|'\n'
DECL|variable|tuple_atom
name|'tuple_atom'
op|'='
string|'"tuple"'
comment|'# t'
newline|'\n'
DECL|variable|instance_atom
name|'instance_atom'
op|'='
string|"'instance'"
comment|'# i'
newline|'\n'
DECL|variable|frozenset_atom
name|'frozenset_atom'
op|'='
string|"'frozenset'"
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# errors'
nl|'\n'
DECL|variable|unpersistable_atom
name|'unpersistable_atom'
op|'='
string|'"unpersistable"'
comment|'# u'
newline|'\n'
DECL|variable|unjellyableRegistry
name|'unjellyableRegistry'
op|'='
op|'{'
op|'}'
newline|'\n'
DECL|variable|unjellyableFactoryRegistry
name|'unjellyableFactoryRegistry'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_newInstance
name|'def'
name|'_newInstance'
op|'('
name|'cls'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Make a new instance of a class without calling its __init__ method.\n    \'state\' will be used to update inst.__dict__ . Supports both new- and\n    old-style classes.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'cls'
op|','
name|'types'
op|'.'
name|'ClassType'
op|')'
op|':'
newline|'\n'
comment|'# new-style'
nl|'\n'
indent|'        '
name|'inst'
op|'='
name|'cls'
op|'.'
name|'__new__'
op|'('
name|'cls'
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'__dict__'
op|'.'
name|'update'
op|'('
name|'state'
op|')'
comment|"# Copy 'instance' behaviour"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
name|'instance'
op|'('
name|'cls'
op|','
name|'state'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'inst'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_maybeClass
dedent|''
name|'def'
name|'_maybeClass'
op|'('
name|'classnamep'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'object'
newline|'\n'
dedent|''
name|'except'
name|'NameError'
op|':'
newline|'\n'
indent|'        '
name|'isObject'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'isObject'
op|'='
name|'isinstance'
op|'('
name|'classnamep'
op|','
name|'type'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'classnamep'
op|','
name|'ClassType'
op|')'
name|'or'
name|'isObject'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'qual'
op|'('
name|'classnamep'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'classnamep'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|setUnjellyableForClass
dedent|''
name|'def'
name|'setUnjellyableForClass'
op|'('
name|'classname'
op|','
name|'unjellyable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set which local class will represent a remote type.\n\n    If you have written a Copyable class that you expect your client to be\n    receiving, write a local "copy" class to represent it, then call::\n\n        jellier.setUnjellyableForClass(\'module.package.Class\', MyCopier).\n\n    Call this at the module level immediately after its class\n    definition. MyCopier should be a subclass of RemoteCopy.\n\n    The classname may be a special tag returned by\n    \'Copyable.getTypeToCopyFor\' rather than an actual classname.\n\n    This call is also for cached classes, since there will be no\n    overlap.  The rules are the same.\n    """'
newline|'\n'
nl|'\n'
name|'global'
name|'unjellyableRegistry'
newline|'\n'
name|'classname'
op|'='
name|'_maybeClass'
op|'('
name|'classname'
op|')'
newline|'\n'
name|'unjellyableRegistry'
op|'['
name|'classname'
op|']'
op|'='
name|'unjellyable'
newline|'\n'
name|'globalSecurity'
op|'.'
name|'allowTypes'
op|'('
name|'classname'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|setUnjellyableFactoryForClass
dedent|''
name|'def'
name|'setUnjellyableFactoryForClass'
op|'('
name|'classname'
op|','
name|'copyFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set the factory to construct a remote instance of a type::\n\n      jellier.setUnjellyableFactoryForClass(\'module.package.Class\', MyFactory)\n\n    Call this at the module level immediately after its class definition.\n    C{copyFactory} should return an instance or subclass of\n    L{RemoteCopy<pb.RemoteCopy>}.\n\n    Similar to L{setUnjellyableForClass} except it uses a factory instead\n    of creating an instance.\n    """'
newline|'\n'
nl|'\n'
name|'global'
name|'unjellyableFactoryRegistry'
newline|'\n'
name|'classname'
op|'='
name|'_maybeClass'
op|'('
name|'classname'
op|')'
newline|'\n'
name|'unjellyableFactoryRegistry'
op|'['
name|'classname'
op|']'
op|'='
name|'copyFactory'
newline|'\n'
name|'globalSecurity'
op|'.'
name|'allowTypes'
op|'('
name|'classname'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|setUnjellyableForClassTree
dedent|''
name|'def'
name|'setUnjellyableForClassTree'
op|'('
name|'module'
op|','
name|'baseClass'
op|','
name|'prefix'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set all classes in a module derived from C{baseClass} as copiers for\n    a corresponding remote class.\n\n    When you have a heirarchy of Copyable (or Cacheable) classes on one\n    side, and a mirror structure of Copied (or RemoteCache) classes on the\n    other, use this to setUnjellyableForClass all your Copieds for the\n    Copyables.\n\n    Each copyTag (the \\"classname\\" argument to getTypeToCopyFor, and\n    what the Copyable\'s getTypeToCopyFor returns) is formed from\n    adding a prefix to the Copied\'s class name.  The prefix defaults\n    to module.__name__.  If you wish the copy tag to consist of solely\n    the classname, pass the empty string \\\'\\\'.\n\n    @param module: a module object from which to pull the Copied classes.\n        (passing sys.modules[__name__] might be useful)\n\n    @param baseClass: the base class from which all your Copied classes derive.\n\n    @param prefix: the string prefixed to classnames to form the\n        unjellyableRegistry.\n    """'
newline|'\n'
name|'if'
name|'prefix'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'prefix'
op|'='
name|'module'
op|'.'
name|'__name__'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'prefix'
op|':'
newline|'\n'
indent|'        '
name|'prefix'
op|'='
string|'"%s."'
op|'%'
name|'prefix'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'i'
name|'in'
name|'dir'
op|'('
name|'module'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'i_'
op|'='
name|'getattr'
op|'('
name|'module'
op|','
name|'i'
op|')'
newline|'\n'
name|'if'
name|'type'
op|'('
name|'i_'
op|')'
op|'=='
name|'types'
op|'.'
name|'ClassType'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'issubclass'
op|'('
name|'i_'
op|','
name|'baseClass'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'setUnjellyableForClass'
op|'('
string|"'%s%s'"
op|'%'
op|'('
name|'prefix'
op|','
name|'i'
op|')'
op|','
name|'i_'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|getInstanceState
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'getInstanceState'
op|'('
name|'inst'
op|','
name|'jellier'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Utility method to default to \'normal\' state rules in serialization.\n    """'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'inst'
op|','
string|'"__getstate__"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'state'
op|'='
name|'inst'
op|'.'
name|'__getstate__'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'state'
op|'='
name|'inst'
op|'.'
name|'__dict__'
newline|'\n'
dedent|''
name|'sxp'
op|'='
name|'jellier'
op|'.'
name|'prepare'
op|'('
name|'inst'
op|')'
newline|'\n'
name|'sxp'
op|'.'
name|'extend'
op|'('
op|'['
name|'qual'
op|'('
name|'inst'
op|'.'
name|'__class__'
op|')'
op|','
name|'jellier'
op|'.'
name|'jelly'
op|'('
name|'state'
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'jellier'
op|'.'
name|'preserve'
op|'('
name|'inst'
op|','
name|'sxp'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|setInstanceState
dedent|''
name|'def'
name|'setInstanceState'
op|'('
name|'inst'
op|','
name|'unjellier'
op|','
name|'jellyList'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Utility method to default to \'normal\' state rules in unserialization.\n    """'
newline|'\n'
name|'state'
op|'='
name|'unjellier'
op|'.'
name|'unjelly'
op|'('
name|'jellyList'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'inst'
op|','
string|'"__setstate__"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'.'
name|'__setstate__'
op|'('
name|'state'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'.'
name|'__dict__'
op|'='
name|'state'
newline|'\n'
dedent|''
name|'return'
name|'inst'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Unpersistable
dedent|''
name|'class'
name|'Unpersistable'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This is an instance of a class that comes back when something couldn\'t be\n    unpersisted.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initialize an unpersistable object with a descriptive C{reason} string.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'reason'
op|'='
name|'reason'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"Unpersistable(%s)"'
op|'%'
name|'repr'
op|'('
name|'self'
op|'.'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Jellyable
dedent|''
dedent|''
name|'class'
name|'Jellyable'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Inherit from me to Jelly yourself directly with the `getStateFor\'\n    convenience method.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IJellyable'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getStateFor
name|'def'
name|'getStateFor'
op|'('
name|'self'
op|','
name|'jellier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__dict__'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|jellyFor
dedent|''
name|'def'
name|'jellyFor'
op|'('
name|'self'
op|','
name|'jellier'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @see: L{twisted.spread.interfaces.IJellyable.jellyFor}\n        """'
newline|'\n'
name|'sxp'
op|'='
name|'jellier'
op|'.'
name|'prepare'
op|'('
name|'self'
op|')'
newline|'\n'
name|'sxp'
op|'.'
name|'extend'
op|'('
op|'['
nl|'\n'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|','
nl|'\n'
name|'jellier'
op|'.'
name|'jelly'
op|'('
name|'self'
op|'.'
name|'getStateFor'
op|'('
name|'jellier'
op|')'
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'jellier'
op|'.'
name|'preserve'
op|'('
name|'self'
op|','
name|'sxp'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Unjellyable
dedent|''
dedent|''
name|'class'
name|'Unjellyable'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Inherit from me to Unjelly yourself directly with the\n    C{setStateFor} convenience method.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IUnjellyable'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setStateFor
name|'def'
name|'setStateFor'
op|'('
name|'self'
op|','
name|'unjellier'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__dict__'
op|'='
name|'state'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unjellyFor
dedent|''
name|'def'
name|'unjellyFor'
op|'('
name|'self'
op|','
name|'unjellier'
op|','
name|'jellyList'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Perform the inverse operation of L{Jellyable.jellyFor}.\n\n        @see: L{twisted.spread.interfaces.IUnjellyable.unjellyFor}\n        """'
newline|'\n'
name|'state'
op|'='
name|'unjellier'
op|'.'
name|'unjelly'
op|'('
name|'jellyList'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'setStateFor'
op|'('
name|'unjellier'
op|','
name|'state'
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Jellier
dedent|''
dedent|''
name|'class'
name|'_Jellier'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    (Internal) This class manages state for a call to jelly()\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'taster'
op|','
name|'persistentStore'
op|','
name|'invoker'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initialize.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'taster'
op|'='
name|'taster'
newline|'\n'
comment|"# `preserved' is a dict of previously seen instances."
nl|'\n'
name|'self'
op|'.'
name|'preserved'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|"# `cooked' is a dict of previously backreferenced instances to their"
nl|'\n'
comment|"# `ref' lists."
nl|'\n'
name|'self'
op|'.'
name|'cooked'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'cooker'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_ref_id'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'persistentStore'
op|'='
name|'persistentStore'
newline|'\n'
name|'self'
op|'.'
name|'invoker'
op|'='
name|'invoker'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cook
dedent|''
name|'def'
name|'_cook'
op|'('
name|'self'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        (internal) Backreference an object.\n\n        Notes on this method for the hapless future maintainer: If I\'ve already\n        gone through the prepare/preserve cycle on the specified object (it is\n        being referenced after the serializer is \\"done with\\" it, e.g. this\n        reference is NOT circular), the copy-in-place of aList is relevant,\n        since the list being modified is the actual, pre-existing jelly\n        expression that was returned for that object. If not, it\'s technically\n        superfluous, since the value in self.preserved didn\'t need to be set,\n        but the invariant that self.preserved[id(object)] is a list is\n        convenient because that means we don\'t have to test and create it or\n        not create it here, creating fewer code-paths.  that\'s why\n        self.preserved is always set to a list.\n\n        Sorry that this code is so hard to follow, but Python objects are\n        tricky to persist correctly. -glyph\n        """'
newline|'\n'
name|'aList'
op|'='
name|'self'
op|'.'
name|'preserved'
op|'['
name|'id'
op|'('
name|'object'
op|')'
op|']'
newline|'\n'
name|'newList'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'aList'
op|')'
newline|'\n'
comment|'# make a new reference ID'
nl|'\n'
name|'refid'
op|'='
name|'self'
op|'.'
name|'_ref_id'
newline|'\n'
name|'self'
op|'.'
name|'_ref_id'
op|'='
name|'self'
op|'.'
name|'_ref_id'
op|'+'
number|'1'
newline|'\n'
comment|"# replace the old list in-place, so that we don't have to track the"
nl|'\n'
comment|'# previous reference to it.'
nl|'\n'
name|'aList'
op|'['
op|':'
op|']'
op|'='
op|'['
name|'reference_atom'
op|','
name|'refid'
op|','
name|'newList'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'cooked'
op|'['
name|'id'
op|'('
name|'object'
op|')'
op|']'
op|'='
op|'['
name|'dereference_atom'
op|','
name|'refid'
op|']'
newline|'\n'
name|'return'
name|'aList'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|prepare
dedent|''
name|'def'
name|'prepare'
op|'('
name|'self'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        (internal) Create a list for persisting an object to.  This will allow\n        backreferences to be made internal to the object. (circular\n        references).\n\n        The reason this needs to happen is that we don\'t generate an ID for\n        every object, so we won\'t necessarily know which ID the object will\n        have in the future.  When it is \'cooked\' ( see _cook ), it will be\n        assigned an ID, and the temporary placeholder list created here will be\n        modified in-place to create an expression that gives this object an ID:\n        [reference id# [object-jelly]].\n        """'
newline|'\n'
nl|'\n'
comment|'# create a placeholder list to be preserved'
nl|'\n'
name|'self'
op|'.'
name|'preserved'
op|'['
name|'id'
op|'('
name|'object'
op|')'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
comment|"# keep a reference to this object around, so it doesn't disappear!"
nl|'\n'
comment|"# (This isn't always necessary, but for cases where the objects are"
nl|'\n'
comment|'# dynamically generated by __getstate__ or getStateToCopyFor calls, it'
nl|'\n'
comment|'# is; id() will return the same value for a different object if it gets'
nl|'\n'
comment|'# garbage collected.  This may be optimized later.)'
nl|'\n'
name|'self'
op|'.'
name|'cooker'
op|'['
name|'id'
op|'('
name|'object'
op|')'
op|']'
op|'='
name|'object'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|preserve
dedent|''
name|'def'
name|'preserve'
op|'('
name|'self'
op|','
name|'object'
op|','
name|'sexp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        (internal) Mark an object\'s persistent list for later referral.\n        """'
newline|'\n'
comment|"# if I've been cooked in the meanwhile,"
nl|'\n'
name|'if'
name|'id'
op|'('
name|'object'
op|')'
name|'in'
name|'self'
op|'.'
name|'cooked'
op|':'
newline|'\n'
comment|'# replace the placeholder empty list with the real one'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'preserved'
op|'['
name|'id'
op|'('
name|'object'
op|')'
op|']'
op|'['
number|'2'
op|']'
op|'='
name|'sexp'
newline|'\n'
comment|'# but give this one back.'
nl|'\n'
name|'sexp'
op|'='
name|'self'
op|'.'
name|'preserved'
op|'['
name|'id'
op|'('
name|'object'
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'preserved'
op|'['
name|'id'
op|'('
name|'object'
op|')'
op|']'
op|'='
name|'sexp'
newline|'\n'
dedent|''
name|'return'
name|'sexp'
newline|'\n'
nl|'\n'
DECL|variable|constantTypes
dedent|''
name|'constantTypes'
op|'='
op|'{'
name|'types'
op|'.'
name|'StringType'
op|':'
number|'1'
op|','
name|'types'
op|'.'
name|'IntType'
op|':'
number|'1'
op|','
nl|'\n'
name|'types'
op|'.'
name|'FloatType'
op|':'
number|'1'
op|','
name|'types'
op|'.'
name|'LongType'
op|':'
number|'1'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_checkMutable
name|'def'
name|'_checkMutable'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'objId'
op|'='
name|'id'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'if'
name|'objId'
name|'in'
name|'self'
op|'.'
name|'cooked'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'cooked'
op|'['
name|'objId'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'objId'
name|'in'
name|'self'
op|'.'
name|'preserved'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cook'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'cooked'
op|'['
name|'objId'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|jelly
dedent|''
dedent|''
name|'def'
name|'jelly'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'obj'
op|','
name|'Jellyable'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'preRef'
op|'='
name|'self'
op|'.'
name|'_checkMutable'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'if'
name|'preRef'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'preRef'
newline|'\n'
dedent|''
name|'return'
name|'obj'
op|'.'
name|'jellyFor'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'objType'
op|'='
name|'type'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'taster'
op|'.'
name|'isTypeAllowed'
op|'('
name|'qual'
op|'('
name|'objType'
op|')'
op|')'
op|':'
newline|'\n'
comment|'# "Immutable" Types'
nl|'\n'
indent|'            '
name|'if'
op|'('
op|'('
name|'objType'
name|'is'
name|'StringType'
op|')'
name|'or'
nl|'\n'
op|'('
name|'objType'
name|'is'
name|'IntType'
op|')'
name|'or'
nl|'\n'
op|'('
name|'objType'
name|'is'
name|'LongType'
op|')'
name|'or'
nl|'\n'
op|'('
name|'objType'
name|'is'
name|'FloatType'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'obj'
newline|'\n'
dedent|''
name|'elif'
name|'objType'
name|'is'
name|'MethodType'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'['
string|'"method"'
op|','
nl|'\n'
name|'obj'
op|'.'
name|'im_func'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'jelly'
op|'('
name|'obj'
op|'.'
name|'im_self'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'jelly'
op|'('
name|'obj'
op|'.'
name|'im_class'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'UnicodeType'
name|'and'
name|'objType'
name|'is'
name|'UnicodeType'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'['
string|"'unicode'"
op|','
name|'obj'
op|'.'
name|'encode'
op|'('
string|"'UTF-8'"
op|')'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'objType'
name|'is'
name|'NoneType'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'['
string|"'None'"
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'objType'
name|'is'
name|'FunctionType'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|'='
name|'obj'
op|'.'
name|'__name__'
newline|'\n'
name|'return'
op|'['
string|"'function'"
op|','
name|'str'
op|'('
name|'pickle'
op|'.'
name|'whichmodule'
op|'('
name|'obj'
op|','
name|'obj'
op|'.'
name|'__name__'
op|')'
op|')'
nl|'\n'
op|'+'
string|"'.'"
op|'+'
nl|'\n'
name|'name'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'objType'
name|'is'
name|'ModuleType'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'['
string|"'module'"
op|','
name|'obj'
op|'.'
name|'__name__'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'objType'
name|'is'
name|'BooleanType'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'['
string|"'boolean'"
op|','
name|'obj'
name|'and'
string|"'true'"
name|'or'
string|"'false'"
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'objType'
name|'is'
name|'datetime'
op|'.'
name|'datetime'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'obj'
op|'.'
name|'tzinfo'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
string|'"Currently can\'t jelly datetime objects with tzinfo"'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'['
string|"'datetime'"
op|','
string|"'%s %s %s %s %s %s %s'"
op|'%'
op|'('
nl|'\n'
name|'obj'
op|'.'
name|'year'
op|','
name|'obj'
op|'.'
name|'month'
op|','
name|'obj'
op|'.'
name|'day'
op|','
name|'obj'
op|'.'
name|'hour'
op|','
nl|'\n'
name|'obj'
op|'.'
name|'minute'
op|','
name|'obj'
op|'.'
name|'second'
op|','
name|'obj'
op|'.'
name|'microsecond'
op|')'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'objType'
name|'is'
name|'datetime'
op|'.'
name|'time'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'obj'
op|'.'
name|'tzinfo'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
string|'"Currently can\'t jelly datetime objects with tzinfo"'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'['
string|"'time'"
op|','
string|"'%s %s %s %s'"
op|'%'
op|'('
name|'obj'
op|'.'
name|'hour'
op|','
name|'obj'
op|'.'
name|'minute'
op|','
nl|'\n'
name|'obj'
op|'.'
name|'second'
op|','
name|'obj'
op|'.'
name|'microsecond'
op|')'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'objType'
name|'is'
name|'datetime'
op|'.'
name|'date'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'['
string|"'date'"
op|','
string|"'%s %s %s'"
op|'%'
op|'('
name|'obj'
op|'.'
name|'year'
op|','
name|'obj'
op|'.'
name|'month'
op|','
name|'obj'
op|'.'
name|'day'
op|')'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'objType'
name|'is'
name|'datetime'
op|'.'
name|'timedelta'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'['
string|"'timedelta'"
op|','
string|"'%s %s %s'"
op|'%'
op|'('
name|'obj'
op|'.'
name|'days'
op|','
name|'obj'
op|'.'
name|'seconds'
op|','
nl|'\n'
name|'obj'
op|'.'
name|'microseconds'
op|')'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'objType'
name|'is'
name|'ClassType'
name|'or'
name|'issubclass'
op|'('
name|'objType'
op|','
name|'type'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'['
string|"'class'"
op|','
name|'qual'
op|'('
name|'obj'
op|')'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'decimal'
name|'is'
name|'not'
name|'None'
name|'and'
name|'objType'
name|'is'
name|'decimal'
op|'.'
name|'Decimal'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'jelly_decimal'
op|'('
name|'obj'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'preRef'
op|'='
name|'self'
op|'.'
name|'_checkMutable'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'if'
name|'preRef'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'preRef'
newline|'\n'
comment|'# "Mutable" Types'
nl|'\n'
dedent|''
name|'sxp'
op|'='
name|'self'
op|'.'
name|'prepare'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'if'
name|'objType'
name|'is'
name|'ListType'
op|':'
newline|'\n'
indent|'                    '
name|'sxp'
op|'.'
name|'extend'
op|'('
name|'self'
op|'.'
name|'_jellyIterable'
op|'('
name|'list_atom'
op|','
name|'obj'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'objType'
name|'is'
name|'TupleType'
op|':'
newline|'\n'
indent|'                    '
name|'sxp'
op|'.'
name|'extend'
op|'('
name|'self'
op|'.'
name|'_jellyIterable'
op|'('
name|'tuple_atom'
op|','
name|'obj'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'objType'
name|'in'
name|'DictTypes'
op|':'
newline|'\n'
indent|'                    '
name|'sxp'
op|'.'
name|'append'
op|'('
name|'dictionary_atom'
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'obj'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'sxp'
op|'.'
name|'append'
op|'('
op|'['
name|'self'
op|'.'
name|'jelly'
op|'('
name|'key'
op|')'
op|','
name|'self'
op|'.'
name|'jelly'
op|'('
name|'val'
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
op|'('
name|'_set'
name|'is'
name|'not'
name|'None'
name|'and'
name|'objType'
name|'is'
name|'set'
name|'or'
nl|'\n'
name|'objType'
name|'is'
name|'_sets'
op|'.'
name|'Set'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'sxp'
op|'.'
name|'extend'
op|'('
name|'self'
op|'.'
name|'_jellyIterable'
op|'('
name|'set_atom'
op|','
name|'obj'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'_set'
name|'is'
name|'not'
name|'None'
name|'and'
name|'objType'
name|'is'
name|'frozenset'
name|'or'
nl|'\n'
name|'objType'
name|'is'
name|'_sets'
op|'.'
name|'ImmutableSet'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'sxp'
op|'.'
name|'extend'
op|'('
name|'self'
op|'.'
name|'_jellyIterable'
op|'('
name|'frozenset_atom'
op|','
name|'obj'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'className'
op|'='
name|'qual'
op|'('
name|'obj'
op|'.'
name|'__class__'
op|')'
newline|'\n'
name|'persistent'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'persistentStore'
op|':'
newline|'\n'
indent|'                        '
name|'persistent'
op|'='
name|'self'
op|'.'
name|'persistentStore'
op|'('
name|'obj'
op|','
name|'self'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'persistent'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                        '
name|'sxp'
op|'.'
name|'append'
op|'('
name|'persistent_atom'
op|')'
newline|'\n'
name|'sxp'
op|'.'
name|'append'
op|'('
name|'persistent'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'taster'
op|'.'
name|'isClassAllowed'
op|'('
name|'obj'
op|'.'
name|'__class__'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'sxp'
op|'.'
name|'append'
op|'('
name|'className'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'obj'
op|','
string|'"__getstate__"'
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'state'
op|'='
name|'obj'
op|'.'
name|'__getstate__'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'state'
op|'='
name|'obj'
op|'.'
name|'__dict__'
newline|'\n'
dedent|''
name|'sxp'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'jelly'
op|'('
name|'state'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'unpersistable'
op|'('
nl|'\n'
string|'"instance of class %s deemed insecure"'
op|'%'
nl|'\n'
name|'qual'
op|'('
name|'obj'
op|'.'
name|'__class__'
op|')'
op|','
name|'sxp'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'preserve'
op|'('
name|'obj'
op|','
name|'sxp'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'objType'
name|'is'
name|'InstanceType'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'InsecureJelly'
op|'('
string|'"Class not allowed for instance: %s %s"'
op|'%'
nl|'\n'
op|'('
name|'obj'
op|'.'
name|'__class__'
op|','
name|'obj'
op|')'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'InsecureJelly'
op|'('
string|'"Type not allowed for object: %s %s"'
op|'%'
nl|'\n'
op|'('
name|'objType'
op|','
name|'obj'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_jellyIterable
dedent|''
dedent|''
name|'def'
name|'_jellyIterable'
op|'('
name|'self'
op|','
name|'atom'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Jelly an iterable object.\n\n        @param atom: the identifier atom of the object.\n        @type atom: C{str}\n\n        @param obj: any iterable object.\n        @type obj: C{iterable}\n\n        @return: a generator of jellied data.\n        @rtype: C{generator}\n        """'
newline|'\n'
name|'yield'
name|'atom'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'obj'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'self'
op|'.'
name|'jelly'
op|'('
name|'item'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|jelly_decimal
dedent|''
dedent|''
name|'def'
name|'jelly_decimal'
op|'('
name|'self'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Jelly a decimal object.\n\n        @param d: a decimal object to serialize.\n        @type d: C{decimal.Decimal}\n\n        @return: jelly for the decimal object.\n        @rtype: C{list}\n        """'
newline|'\n'
name|'sign'
op|','
name|'guts'
op|','
name|'exponent'
op|'='
name|'d'
op|'.'
name|'as_tuple'
op|'('
op|')'
newline|'\n'
name|'value'
op|'='
name|'reduce'
op|'('
name|'lambda'
name|'left'
op|','
name|'right'
op|':'
name|'left'
op|'*'
number|'10'
op|'+'
name|'right'
op|','
name|'guts'
op|')'
newline|'\n'
name|'if'
name|'sign'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
op|'-'
name|'value'
newline|'\n'
dedent|''
name|'return'
op|'['
string|"'decimal'"
op|','
name|'value'
op|','
name|'exponent'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unpersistable
dedent|''
name|'def'
name|'unpersistable'
op|'('
name|'self'
op|','
name|'reason'
op|','
name|'sxp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        (internal) Returns an sexp: (unpersistable "reason").  Utility method\n        for making note that a particular object could not be serialized.\n        """'
newline|'\n'
name|'if'
name|'sxp'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'sxp'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'sxp'
op|'.'
name|'append'
op|'('
name|'unpersistable_atom'
op|')'
newline|'\n'
name|'sxp'
op|'.'
name|'append'
op|'('
name|'reason'
op|')'
newline|'\n'
name|'return'
name|'sxp'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Unjellier
dedent|''
dedent|''
name|'class'
name|'_Unjellier'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'taster'
op|','
name|'persistentLoad'
op|','
name|'invoker'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'taster'
op|'='
name|'taster'
newline|'\n'
name|'self'
op|'.'
name|'persistentLoad'
op|'='
name|'persistentLoad'
newline|'\n'
name|'self'
op|'.'
name|'references'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'postCallbacks'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'invoker'
op|'='
name|'invoker'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unjellyFull
dedent|''
name|'def'
name|'unjellyFull'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'o'
op|'='
name|'self'
op|'.'
name|'unjelly'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'for'
name|'m'
name|'in'
name|'self'
op|'.'
name|'postCallbacks'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'o'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unjelly
dedent|''
name|'def'
name|'unjelly'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'type'
op|'('
name|'obj'
op|')'
name|'is'
name|'not'
name|'types'
op|'.'
name|'ListType'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'obj'
newline|'\n'
dedent|''
name|'jelType'
op|'='
name|'obj'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'taster'
op|'.'
name|'isTypeAllowed'
op|'('
name|'jelType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InsecureJelly'
op|'('
name|'jelType'
op|')'
newline|'\n'
dedent|''
name|'regClass'
op|'='
name|'unjellyableRegistry'
op|'.'
name|'get'
op|'('
name|'jelType'
op|')'
newline|'\n'
name|'if'
name|'regClass'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'regClass'
op|','
name|'ClassType'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'inst'
op|'='
name|'_Dummy'
op|'('
op|')'
comment|'# XXX chomp, chomp'
newline|'\n'
name|'inst'
op|'.'
name|'__class__'
op|'='
name|'regClass'
newline|'\n'
name|'method'
op|'='
name|'inst'
op|'.'
name|'unjellyFor'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'regClass'
op|','
name|'type'
op|')'
op|':'
newline|'\n'
comment|'# regClass.__new__ does not call regClass.__init__'
nl|'\n'
indent|'                '
name|'inst'
op|'='
name|'regClass'
op|'.'
name|'__new__'
op|'('
name|'regClass'
op|')'
newline|'\n'
name|'method'
op|'='
name|'inst'
op|'.'
name|'unjellyFor'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'method'
op|'='
name|'regClass'
comment|'# this is how it ought to be done'
newline|'\n'
dedent|''
name|'val'
op|'='
name|'method'
op|'('
name|'self'
op|','
name|'obj'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'val'
op|','
string|"'postUnjelly'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'postCallbacks'
op|'.'
name|'append'
op|'('
name|'inst'
op|'.'
name|'postUnjelly'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'val'
newline|'\n'
dedent|''
name|'regFactory'
op|'='
name|'unjellyableFactoryRegistry'
op|'.'
name|'get'
op|'('
name|'jelType'
op|')'
newline|'\n'
name|'if'
name|'regFactory'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'self'
op|'.'
name|'unjelly'
op|'('
name|'obj'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'inst'
op|'='
name|'regFactory'
op|'('
name|'state'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'inst'
op|','
string|"'postUnjelly'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'postCallbacks'
op|'.'
name|'append'
op|'('
name|'inst'
op|'.'
name|'postUnjelly'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'inst'
newline|'\n'
dedent|''
name|'thunk'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'_unjelly_%s'"
op|'%'
name|'jelType'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'thunk'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'thunk'
op|'('
name|'obj'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'nameSplit'
op|'='
name|'jelType'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'modName'
op|'='
string|"'.'"
op|'.'
name|'join'
op|'('
name|'nameSplit'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'taster'
op|'.'
name|'isModuleAllowed'
op|'('
name|'modName'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'InsecureJelly'
op|'('
nl|'\n'
string|'"Module %s not allowed (in type %s)."'
op|'%'
op|'('
name|'modName'
op|','
name|'jelType'
op|')'
op|')'
newline|'\n'
dedent|''
name|'clz'
op|'='
name|'namedObject'
op|'('
name|'jelType'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'taster'
op|'.'
name|'isClassAllowed'
op|'('
name|'clz'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'InsecureJelly'
op|'('
string|'"Class %s not allowed."'
op|'%'
name|'jelType'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'clz'
op|','
string|'"__setstate__"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ret'
op|'='
name|'_newInstance'
op|'('
name|'clz'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'state'
op|'='
name|'self'
op|'.'
name|'unjelly'
op|'('
name|'obj'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'ret'
op|'.'
name|'__setstate__'
op|'('
name|'state'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'self'
op|'.'
name|'unjelly'
op|'('
name|'obj'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'_newInstance'
op|'('
name|'clz'
op|','
name|'state'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'clz'
op|','
string|"'postUnjelly'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'postCallbacks'
op|'.'
name|'append'
op|'('
name|'ret'
op|'.'
name|'postUnjelly'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_None
dedent|''
name|'def'
name|'_unjelly_None'
op|'('
name|'self'
op|','
name|'exp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_unicode
dedent|''
name|'def'
name|'_unjelly_unicode'
op|'('
name|'self'
op|','
name|'exp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'UnicodeType'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'unicode'
op|'('
name|'exp'
op|'['
number|'0'
op|']'
op|','
string|'"UTF-8"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'Unpersistable'
op|'('
string|'"Could not unpersist unicode: %s"'
op|'%'
op|'('
name|'exp'
op|'['
number|'0'
op|']'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_decimal
dedent|''
dedent|''
name|'def'
name|'_unjelly_decimal'
op|'('
name|'self'
op|','
name|'exp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Unjelly decimal objects, if decimal is available. If not, return a\n        L{Unpersistable} object instead.\n        """'
newline|'\n'
name|'if'
name|'decimal'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'Unpersistable'
op|'('
nl|'\n'
string|'"Could not unpersist decimal: %s"'
op|'%'
op|'('
name|'exp'
op|'['
number|'0'
op|']'
op|'*'
op|'('
number|'10'
op|'**'
name|'exp'
op|'['
number|'1'
op|']'
op|')'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'value'
op|'='
name|'exp'
op|'['
number|'0'
op|']'
newline|'\n'
name|'exponent'
op|'='
name|'exp'
op|'['
number|'1'
op|']'
newline|'\n'
name|'if'
name|'value'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'sign'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'sign'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'guts'
op|'='
name|'decimal'
op|'.'
name|'Decimal'
op|'('
name|'value'
op|')'
op|'.'
name|'as_tuple'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'return'
name|'decimal'
op|'.'
name|'Decimal'
op|'('
op|'('
name|'sign'
op|','
name|'guts'
op|','
name|'exponent'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_boolean
dedent|''
name|'def'
name|'_unjelly_boolean'
op|'('
name|'self'
op|','
name|'exp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'BooleanType'
op|':'
newline|'\n'
indent|'            '
name|'assert'
name|'exp'
op|'['
number|'0'
op|']'
name|'in'
op|'('
string|"'true'"
op|','
string|"'false'"
op|')'
newline|'\n'
name|'return'
name|'exp'
op|'['
number|'0'
op|']'
op|'=='
string|"'true'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'Unpersistable'
op|'('
string|'"Could not unpersist boolean: %s"'
op|'%'
op|'('
name|'exp'
op|'['
number|'0'
op|']'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_datetime
dedent|''
dedent|''
name|'def'
name|'_unjelly_datetime'
op|'('
name|'self'
op|','
name|'exp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'datetime'
op|'.'
name|'datetime'
op|'('
op|'*'
name|'map'
op|'('
name|'int'
op|','
name|'exp'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_date
dedent|''
name|'def'
name|'_unjelly_date'
op|'('
name|'self'
op|','
name|'exp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'datetime'
op|'.'
name|'date'
op|'('
op|'*'
name|'map'
op|'('
name|'int'
op|','
name|'exp'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_time
dedent|''
name|'def'
name|'_unjelly_time'
op|'('
name|'self'
op|','
name|'exp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'datetime'
op|'.'
name|'time'
op|'('
op|'*'
name|'map'
op|'('
name|'int'
op|','
name|'exp'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_timedelta
dedent|''
name|'def'
name|'_unjelly_timedelta'
op|'('
name|'self'
op|','
name|'exp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'days'
op|','
name|'seconds'
op|','
name|'microseconds'
op|'='
name|'map'
op|'('
name|'int'
op|','
name|'exp'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
nl|'\n'
name|'days'
op|'='
name|'days'
op|','
name|'seconds'
op|'='
name|'seconds'
op|','
name|'microseconds'
op|'='
name|'microseconds'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unjellyInto
dedent|''
name|'def'
name|'unjellyInto'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'loc'
op|','
name|'jel'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'o'
op|'='
name|'self'
op|'.'
name|'unjelly'
op|'('
name|'jel'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'o'
op|','
name|'NotKnown'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'o'
op|'.'
name|'addDependant'
op|'('
name|'obj'
op|','
name|'loc'
op|')'
newline|'\n'
dedent|''
name|'obj'
op|'['
name|'loc'
op|']'
op|'='
name|'o'
newline|'\n'
name|'return'
name|'o'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_dereference
dedent|''
name|'def'
name|'_unjelly_dereference'
op|'('
name|'self'
op|','
name|'lst'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'refid'
op|'='
name|'lst'
op|'['
number|'0'
op|']'
newline|'\n'
name|'x'
op|'='
name|'self'
op|'.'
name|'references'
op|'.'
name|'get'
op|'('
name|'refid'
op|')'
newline|'\n'
name|'if'
name|'x'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'x'
newline|'\n'
dedent|''
name|'der'
op|'='
name|'_Dereference'
op|'('
name|'refid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'references'
op|'['
name|'refid'
op|']'
op|'='
name|'der'
newline|'\n'
name|'return'
name|'der'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_reference
dedent|''
name|'def'
name|'_unjelly_reference'
op|'('
name|'self'
op|','
name|'lst'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'refid'
op|'='
name|'lst'
op|'['
number|'0'
op|']'
newline|'\n'
name|'exp'
op|'='
name|'lst'
op|'['
number|'1'
op|']'
newline|'\n'
name|'o'
op|'='
name|'self'
op|'.'
name|'unjelly'
op|'('
name|'exp'
op|')'
newline|'\n'
name|'ref'
op|'='
name|'self'
op|'.'
name|'references'
op|'.'
name|'get'
op|'('
name|'refid'
op|')'
newline|'\n'
name|'if'
op|'('
name|'ref'
name|'is'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'references'
op|'['
name|'refid'
op|']'
op|'='
name|'o'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'ref'
op|','
name|'NotKnown'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ref'
op|'.'
name|'resolveDependants'
op|'('
name|'o'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'references'
op|'['
name|'refid'
op|']'
op|'='
name|'o'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'assert'
number|'0'
op|','
string|'"Multiple references with same ID!"'
newline|'\n'
dedent|''
name|'return'
name|'o'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_tuple
dedent|''
name|'def'
name|'_unjelly_tuple'
op|'('
name|'self'
op|','
name|'lst'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
name|'range'
op|'('
name|'len'
op|'('
name|'lst'
op|')'
op|')'
newline|'\n'
name|'finished'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'elem'
name|'in'
name|'l'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'unjellyInto'
op|'('
name|'l'
op|','
name|'elem'
op|','
name|'lst'
op|'['
name|'elem'
op|']'
op|')'
op|','
name|'NotKnown'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'finished'
op|'='
number|'0'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'finished'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'tuple'
op|'('
name|'l'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'_Tuple'
op|'('
name|'l'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_list
dedent|''
dedent|''
name|'def'
name|'_unjelly_list'
op|'('
name|'self'
op|','
name|'lst'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
name|'range'
op|'('
name|'len'
op|'('
name|'lst'
op|')'
op|')'
newline|'\n'
name|'for'
name|'elem'
name|'in'
name|'l'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unjellyInto'
op|'('
name|'l'
op|','
name|'elem'
op|','
name|'lst'
op|'['
name|'elem'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'l'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjellySetOrFrozenset
dedent|''
name|'def'
name|'_unjellySetOrFrozenset'
op|'('
name|'self'
op|','
name|'lst'
op|','
name|'containerType'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Helper method to unjelly set or frozenset.\n\n        @param lst: the content of the set.\n        @type lst: C{list}\n\n        @param containerType: the type of C{set} to use.\n        """'
newline|'\n'
name|'l'
op|'='
name|'range'
op|'('
name|'len'
op|'('
name|'lst'
op|')'
op|')'
newline|'\n'
name|'finished'
op|'='
name|'True'
newline|'\n'
name|'for'
name|'elem'
name|'in'
name|'l'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
name|'self'
op|'.'
name|'unjellyInto'
op|'('
name|'l'
op|','
name|'elem'
op|','
name|'lst'
op|'['
name|'elem'
op|']'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'data'
op|','
name|'NotKnown'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'finished'
op|'='
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'finished'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'_Container'
op|'('
name|'l'
op|','
name|'containerType'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'containerType'
op|'('
name|'l'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_set
dedent|''
dedent|''
name|'def'
name|'_unjelly_set'
op|'('
name|'self'
op|','
name|'lst'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Unjelly set using either the C{set} builtin if available, or\n        C{sets.Set} as fallback.\n        """'
newline|'\n'
name|'if'
name|'_set'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'containerType'
op|'='
name|'set'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'containerType'
op|'='
name|'_sets'
op|'.'
name|'Set'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_unjellySetOrFrozenset'
op|'('
name|'lst'
op|','
name|'containerType'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_frozenset
dedent|''
name|'def'
name|'_unjelly_frozenset'
op|'('
name|'self'
op|','
name|'lst'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Unjelly frozenset using either the C{frozenset} builtin if available,\n        or C{sets.ImmutableSet} as fallback.\n        """'
newline|'\n'
name|'if'
name|'_set'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'containerType'
op|'='
name|'frozenset'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'containerType'
op|'='
name|'_sets'
op|'.'
name|'ImmutableSet'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_unjellySetOrFrozenset'
op|'('
name|'lst'
op|','
name|'containerType'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_dictionary
dedent|''
name|'def'
name|'_unjelly_dictionary'
op|'('
name|'self'
op|','
name|'lst'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'lst'
op|':'
newline|'\n'
indent|'            '
name|'kvd'
op|'='
name|'_DictKeyAndValue'
op|'('
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'unjellyInto'
op|'('
name|'kvd'
op|','
number|'0'
op|','
name|'k'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'unjellyInto'
op|'('
name|'kvd'
op|','
number|'1'
op|','
name|'v'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_module
dedent|''
name|'def'
name|'_unjelly_module'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'moduleName'
op|'='
name|'rest'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'type'
op|'('
name|'moduleName'
op|')'
op|'!='
name|'types'
op|'.'
name|'StringType'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InsecureJelly'
op|'('
nl|'\n'
string|'"Attempted to unjelly a module with a non-string name."'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'taster'
op|'.'
name|'isModuleAllowed'
op|'('
name|'moduleName'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InsecureJelly'
op|'('
nl|'\n'
string|'"Attempted to unjelly module named %r"'
op|'%'
op|'('
name|'moduleName'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'mod'
op|'='
name|'__import__'
op|'('
name|'moduleName'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
string|'"x"'
op|')'
newline|'\n'
name|'return'
name|'mod'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_class
dedent|''
name|'def'
name|'_unjelly_class'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'clist'
op|'='
name|'rest'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'modName'
op|'='
string|"'.'"
op|'.'
name|'join'
op|'('
name|'clist'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'taster'
op|'.'
name|'isModuleAllowed'
op|'('
name|'modName'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InsecureJelly'
op|'('
string|'"module %s not allowed"'
op|'%'
name|'modName'
op|')'
newline|'\n'
dedent|''
name|'klaus'
op|'='
name|'namedObject'
op|'('
name|'rest'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'objType'
op|'='
name|'type'
op|'('
name|'klaus'
op|')'
newline|'\n'
name|'if'
name|'objType'
name|'not'
name|'in'
op|'('
name|'types'
op|'.'
name|'ClassType'
op|','
name|'types'
op|'.'
name|'TypeType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InsecureJelly'
op|'('
nl|'\n'
string|'"class %r unjellied to something that isn\'t a class: %r"'
op|'%'
op|'('
nl|'\n'
name|'rest'
op|'['
number|'0'
op|']'
op|','
name|'klaus'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'taster'
op|'.'
name|'isClassAllowed'
op|'('
name|'klaus'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InsecureJelly'
op|'('
string|'"class not allowed: %s"'
op|'%'
name|'qual'
op|'('
name|'klaus'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'klaus'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_function
dedent|''
name|'def'
name|'_unjelly_function'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'modSplit'
op|'='
name|'rest'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'modName'
op|'='
string|"'.'"
op|'.'
name|'join'
op|'('
name|'modSplit'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'taster'
op|'.'
name|'isModuleAllowed'
op|'('
name|'modName'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InsecureJelly'
op|'('
string|'"Module not allowed: %s"'
op|'%'
name|'modName'
op|')'
newline|'\n'
comment|'# XXX do I need an isFunctionAllowed?'
nl|'\n'
dedent|''
name|'function'
op|'='
name|'namedObject'
op|'('
name|'rest'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'return'
name|'function'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_persistent
dedent|''
name|'def'
name|'_unjelly_persistent'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'persistentLoad'
op|':'
newline|'\n'
indent|'            '
name|'pload'
op|'='
name|'self'
op|'.'
name|'persistentLoad'
op|'('
name|'rest'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|')'
newline|'\n'
name|'return'
name|'pload'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'Unpersistable'
op|'('
string|'"Persistent callback not found"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_instance
dedent|''
dedent|''
name|'def'
name|'_unjelly_instance'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'clz'
op|'='
name|'self'
op|'.'
name|'unjelly'
op|'('
name|'rest'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'type'
op|'('
name|'clz'
op|')'
name|'is'
name|'not'
name|'types'
op|'.'
name|'ClassType'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InsecureJelly'
op|'('
string|'"Instance found with non-class class."'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'clz'
op|','
string|'"__setstate__"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'inst'
op|'='
name|'_newInstance'
op|'('
name|'clz'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'state'
op|'='
name|'self'
op|'.'
name|'unjelly'
op|'('
name|'rest'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'__setstate__'
op|'('
name|'state'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'self'
op|'.'
name|'unjelly'
op|'('
name|'rest'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'inst'
op|'='
name|'_newInstance'
op|'('
name|'clz'
op|','
name|'state'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'clz'
op|','
string|"'postUnjelly'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'postCallbacks'
op|'.'
name|'append'
op|'('
name|'inst'
op|'.'
name|'postUnjelly'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'inst'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_unpersistable
dedent|''
name|'def'
name|'_unjelly_unpersistable'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Unpersistable'
op|'('
string|'"Unpersistable data: %s"'
op|'%'
op|'('
name|'rest'
op|'['
number|'0'
op|']'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unjelly_method
dedent|''
name|'def'
name|'_unjelly_method'
op|'('
name|'self'
op|','
name|'rest'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        (internal) Unjelly a method.\n        """'
newline|'\n'
name|'im_name'
op|'='
name|'rest'
op|'['
number|'0'
op|']'
newline|'\n'
name|'im_self'
op|'='
name|'self'
op|'.'
name|'unjelly'
op|'('
name|'rest'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'im_class'
op|'='
name|'self'
op|'.'
name|'unjelly'
op|'('
name|'rest'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'if'
name|'type'
op|'('
name|'im_class'
op|')'
name|'is'
name|'not'
name|'types'
op|'.'
name|'ClassType'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InsecureJelly'
op|'('
string|'"Method found with non-class class."'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'im_name'
name|'in'
name|'im_class'
op|'.'
name|'__dict__'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'im_self'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'im'
op|'='
name|'getattr'
op|'('
name|'im_class'
op|','
name|'im_name'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'im_self'
op|','
name|'NotKnown'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'im'
op|'='
name|'_InstanceMethod'
op|'('
name|'im_name'
op|','
name|'im_self'
op|','
name|'im_class'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'im'
op|'='
name|'instancemethod'
op|'('
name|'im_class'
op|'.'
name|'__dict__'
op|'['
name|'im_name'
op|']'
op|','
nl|'\n'
name|'im_self'
op|','
nl|'\n'
name|'im_class'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|"'instance method changed'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'im'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Dummy
dedent|''
dedent|''
name|'class'
name|'_Dummy'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    (Internal) Dummy class, used for unserializing instances.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_DummyNewStyle
dedent|''
name|'class'
name|'_DummyNewStyle'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    (Internal) Dummy class, used for unserializing instances of new-style\n    classes.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'#### Published Interface.'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|InsecureJelly
dedent|''
name|'class'
name|'InsecureJelly'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This exception will be raised when a jelly is deemed `insecure\'; e.g. it\n    contains a type, class, or module disallowed by the specified `taster\'\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummySecurityOptions
dedent|''
name|'class'
name|'DummySecurityOptions'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DummySecurityOptions() -> insecure security options\n    Dummy security options -- this class will allow anything.\n    """'
newline|'\n'
nl|'\n'
DECL|member|isModuleAllowed
name|'def'
name|'isModuleAllowed'
op|'('
name|'self'
op|','
name|'moduleName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        DummySecurityOptions.isModuleAllowed(moduleName) -> boolean\n        returns 1 if a module by that name is allowed, 0 otherwise\n        """'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isClassAllowed
dedent|''
name|'def'
name|'isClassAllowed'
op|'('
name|'self'
op|','
name|'klass'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        DummySecurityOptions.isClassAllowed(class) -> boolean\n        Assumes the module has already been allowed.  Returns 1 if the given\n        class is allowed, 0 otherwise.\n        """'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isTypeAllowed
dedent|''
name|'def'
name|'isTypeAllowed'
op|'('
name|'self'
op|','
name|'typeName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        DummySecurityOptions.isTypeAllowed(typeName) -> boolean\n        Returns 1 if the given type is allowed, 0 otherwise.\n        """'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecurityOptions
dedent|''
dedent|''
name|'class'
name|'SecurityOptions'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This will by default disallow everything, except for \'none\'.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|basicTypes
name|'basicTypes'
op|'='
op|'['
string|'"dictionary"'
op|','
string|'"list"'
op|','
string|'"tuple"'
op|','
nl|'\n'
string|'"reference"'
op|','
string|'"dereference"'
op|','
string|'"unpersistable"'
op|','
nl|'\n'
string|'"persistent"'
op|','
string|'"long_int"'
op|','
string|'"long"'
op|','
string|'"dict"'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        SecurityOptions() initialize.\n        """'
newline|'\n'
comment|"# I don't believe any of these types can ever pose a security hazard,"
nl|'\n'
comment|'# except perhaps "reference"...'
nl|'\n'
name|'self'
op|'.'
name|'allowedTypes'
op|'='
op|'{'
string|'"None"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"bool"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"boolean"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"string"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"str"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"int"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"float"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"datetime"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"time"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"date"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"timedelta"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"NoneType"'
op|':'
number|'1'
op|'}'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'types'
op|','
string|"'UnicodeType'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'allowedTypes'
op|'['
string|"'unicode'"
op|']'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'if'
name|'decimal'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'allowedTypes'
op|'['
string|"'decimal'"
op|']'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'allowedTypes'
op|'['
string|"'set'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'allowedTypes'
op|'['
string|"'frozenset'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'allowedModules'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'allowedClasses'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|allowBasicTypes
dedent|''
name|'def'
name|'allowBasicTypes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Allow all `basic\' types.  (Dictionary and list.  Int, string, and float\n        are implicitly allowed.)\n        """'
newline|'\n'
name|'self'
op|'.'
name|'allowTypes'
op|'('
op|'*'
name|'self'
op|'.'
name|'basicTypes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|allowTypes
dedent|''
name|'def'
name|'allowTypes'
op|'('
name|'self'
op|','
op|'*'
name|'types'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        SecurityOptions.allowTypes(typeString): Allow a particular type, by its\n        name.\n        """'
newline|'\n'
name|'for'
name|'typ'
name|'in'
name|'types'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'typ'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'typ'
op|'='
name|'qual'
op|'('
name|'typ'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'allowedTypes'
op|'['
name|'typ'
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|allowInstancesOf
dedent|''
dedent|''
name|'def'
name|'allowInstancesOf'
op|'('
name|'self'
op|','
op|'*'
name|'classes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        SecurityOptions.allowInstances(klass, klass, ...): allow instances\n        of the specified classes\n\n        This will also allow the \'instance\', \'class\' (renamed \'classobj\' in\n        Python 2.3), and \'module\' types, as well as basic types.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'allowBasicTypes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'allowTypes'
op|'('
string|'"instance"'
op|','
string|'"class"'
op|','
string|'"classobj"'
op|','
string|'"module"'
op|')'
newline|'\n'
name|'for'
name|'klass'
name|'in'
name|'classes'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'allowTypes'
op|'('
name|'qual'
op|'('
name|'klass'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'allowModules'
op|'('
name|'klass'
op|'.'
name|'__module__'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'allowedClasses'
op|'['
name|'klass'
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|allowModules
dedent|''
dedent|''
name|'def'
name|'allowModules'
op|'('
name|'self'
op|','
op|'*'
name|'modules'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        SecurityOptions.allowModules(module, module, ...): allow modules by\n        name. This will also allow the \'module\' type.\n        """'
newline|'\n'
name|'for'
name|'module'
name|'in'
name|'modules'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'type'
op|'('
name|'module'
op|')'
op|'=='
name|'types'
op|'.'
name|'ModuleType'
op|':'
newline|'\n'
indent|'                '
name|'module'
op|'='
name|'module'
op|'.'
name|'__name__'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'allowedModules'
op|'['
name|'module'
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isModuleAllowed
dedent|''
dedent|''
name|'def'
name|'isModuleAllowed'
op|'('
name|'self'
op|','
name|'moduleName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        SecurityOptions.isModuleAllowed(moduleName) -> boolean\n        returns 1 if a module by that name is allowed, 0 otherwise\n        """'
newline|'\n'
name|'return'
name|'moduleName'
name|'in'
name|'self'
op|'.'
name|'allowedModules'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isClassAllowed
dedent|''
name|'def'
name|'isClassAllowed'
op|'('
name|'self'
op|','
name|'klass'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        SecurityOptions.isClassAllowed(class) -> boolean\n        Assumes the module has already been allowed.  Returns 1 if the given\n        class is allowed, 0 otherwise.\n        """'
newline|'\n'
name|'return'
name|'klass'
name|'in'
name|'self'
op|'.'
name|'allowedClasses'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isTypeAllowed
dedent|''
name|'def'
name|'isTypeAllowed'
op|'('
name|'self'
op|','
name|'typeName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        SecurityOptions.isTypeAllowed(typeName) -> boolean\n        Returns 1 if the given type is allowed, 0 otherwise.\n        """'
newline|'\n'
name|'return'
op|'('
name|'typeName'
name|'in'
name|'self'
op|'.'
name|'allowedTypes'
name|'or'
string|"'.'"
name|'in'
name|'typeName'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|globalSecurity
dedent|''
dedent|''
name|'globalSecurity'
op|'='
name|'SecurityOptions'
op|'('
op|')'
newline|'\n'
name|'globalSecurity'
op|'.'
name|'allowBasicTypes'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|jelly
name|'def'
name|'jelly'
op|'('
name|'object'
op|','
name|'taster'
op|'='
name|'DummySecurityOptions'
op|'('
op|')'
op|','
name|'persistentStore'
op|'='
name|'None'
op|','
nl|'\n'
name|'invoker'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Serialize to s-expression.\n\n    Returns a list which is the serialized representation of an object.  An\n    optional \'taster\' argument takes a SecurityOptions and will mark any\n    insecure objects as unpersistable rather than serializing them.\n    """'
newline|'\n'
name|'return'
name|'_Jellier'
op|'('
name|'taster'
op|','
name|'persistentStore'
op|','
name|'invoker'
op|')'
op|'.'
name|'jelly'
op|'('
name|'object'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|unjelly
dedent|''
name|'def'
name|'unjelly'
op|'('
name|'sexp'
op|','
name|'taster'
op|'='
name|'DummySecurityOptions'
op|'('
op|')'
op|','
name|'persistentLoad'
op|'='
name|'None'
op|','
nl|'\n'
name|'invoker'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Unserialize from s-expression.\n\n    Takes an list that was the result from a call to jelly() and unserializes\n    an arbitrary object from it.  The optional \'taster\' argument, an instance\n    of SecurityOptions, will cause an InsecureJelly exception to be raised if a\n    disallowed type, module, or class attempted to unserialize.\n    """'
newline|'\n'
name|'return'
name|'_Unjellier'
op|'('
name|'taster'
op|','
name|'persistentLoad'
op|','
name|'invoker'
op|')'
op|'.'
name|'unjellyFull'
op|'('
name|'sexp'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.test.test_pb -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nThis module represents flavors of remotely acessible objects.\n\nCurrently this is only objects accessible through Perspective Broker, but will\nhopefully encompass all forms of remote access which can emulate subsets of PB\n(such as XMLRPC or SOAP).\n\nFuture Plans: Optimization.  Exploitation of new-style object model.\nOptimizations to this module should not affect external-use semantics at all,\nbut may have a small impact on users who subclass and override methods.\n\n@author: Glyph Lefkowitz\n"""'
newline|'\n'
nl|'\n'
comment|'# NOTE: this module should NOT import pb; it is supposed to be a module which'
nl|'\n'
comment|'# abstractly defines remotely accessible types.  Many of these types expect to'
nl|'\n'
comment|'# be serialized by Jelly, but they ought to be accessible through other'
nl|'\n'
comment|'# mechanisms (like XMLRPC)'
nl|'\n'
nl|'\n'
comment|'# system imports'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'Interface'
newline|'\n'
nl|'\n'
comment|'# twisted imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'reflect'
newline|'\n'
nl|'\n'
comment|'# sibling imports'
nl|'\n'
name|'from'
name|'jelly'
name|'import'
name|'setUnjellyableForClass'
op|','
name|'setUnjellyableForClassTree'
op|','
name|'setUnjellyableFactoryForClass'
op|','
name|'unjellyableRegistry'
newline|'\n'
name|'from'
name|'jelly'
name|'import'
name|'Jellyable'
op|','
name|'Unjellyable'
op|','
name|'_Dummy'
op|','
name|'_DummyNewStyle'
newline|'\n'
name|'from'
name|'jelly'
name|'import'
name|'setInstanceState'
op|','
name|'getInstanceState'
newline|'\n'
nl|'\n'
comment|'# compatibility'
nl|'\n'
DECL|variable|setCopierForClass
name|'setCopierForClass'
op|'='
name|'setUnjellyableForClass'
newline|'\n'
DECL|variable|setCopierForClassTree
name|'setCopierForClassTree'
op|'='
name|'setUnjellyableForClassTree'
newline|'\n'
DECL|variable|setFactoryForClass
name|'setFactoryForClass'
op|'='
name|'setUnjellyableFactoryForClass'
newline|'\n'
DECL|variable|copyTags
name|'copyTags'
op|'='
name|'unjellyableRegistry'
newline|'\n'
nl|'\n'
DECL|variable|copy_atom
name|'copy_atom'
op|'='
string|'"copy"'
newline|'\n'
DECL|variable|cache_atom
name|'cache_atom'
op|'='
string|'"cache"'
newline|'\n'
DECL|variable|cached_atom
name|'cached_atom'
op|'='
string|'"cached"'
newline|'\n'
DECL|variable|remote_atom
name|'remote_atom'
op|'='
string|'"remote"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoSuchMethod
name|'class'
name|'NoSuchMethod'
op|'('
name|'AttributeError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Raised if there is no such remote method"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPBRoot
dedent|''
name|'class'
name|'IPBRoot'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Factory for root Referenceable objects for PB servers."""'
newline|'\n'
nl|'\n'
DECL|member|rootObject
name|'def'
name|'rootObject'
op|'('
name|'broker'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return root Referenceable for broker."""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Serializable
dedent|''
dedent|''
name|'class'
name|'Serializable'
op|'('
name|'Jellyable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An object that can be passed remotely.\n\n    I am a style of object which can be serialized by Perspective\n    Broker.  Objects which wish to be referenceable or copied remotely\n    have to subclass Serializable.  However, clients of Perspective\n    Broker will probably not want to directly subclass Serializable; the\n    Flavors of transferable objects are listed below.\n\n    What it means to be \\"Serializable\\" is that an object can be\n    passed to or returned from a remote method.  Certain basic types\n    (dictionaries, lists, tuples, numbers, strings) are serializable by\n    default; however, classes need to choose a specific serialization\n    style: L{Referenceable}, L{Viewable}, L{Copyable} or L{Cacheable}.\n\n    You may also pass C{[lists, dictionaries, tuples]} of L{Serializable}\n    instances to or return them from remote methods, as many levels deep\n    as you like.\n    """'
newline|'\n'
nl|'\n'
DECL|member|processUniqueID
name|'def'
name|'processUniqueID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return an ID which uniquely represents this object for this process.\n\n        By default, this uses the \'id\' builtin, but can be overridden to\n        indicate that two values are identity-equivalent (such as proxies\n        for the same object).\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'id'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|class|Referenceable
dedent|''
dedent|''
name|'class'
name|'Referenceable'
op|'('
name|'Serializable'
op|')'
op|':'
newline|'\n'
DECL|variable|perspective
indent|'    '
name|'perspective'
op|'='
name|'None'
newline|'\n'
string|'"""I am an object sent remotely as a direct reference.\n\n    When one of my subclasses is sent as an argument to or returned\n    from a remote method call, I will be serialized by default as a\n    direct reference.\n\n    This means that the peer will be able to call methods on me;\n    a method call xxx() from my peer will be resolved to methods\n    of the name remote_xxx.\n    """'
newline|'\n'
nl|'\n'
DECL|member|remoteMessageReceived
name|'def'
name|'remoteMessageReceived'
op|'('
name|'self'
op|','
name|'broker'
op|','
name|'message'
op|','
name|'args'
op|','
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A remote message has been received.  Dispatch it appropriately.\n\n        The default implementation is to dispatch to a method called\n        \'remote_messagename\' and call it with the same arguments.\n        """'
newline|'\n'
name|'args'
op|'='
name|'broker'
op|'.'
name|'unserialize'
op|'('
name|'args'
op|')'
newline|'\n'
name|'kw'
op|'='
name|'broker'
op|'.'
name|'unserialize'
op|'('
name|'kw'
op|')'
newline|'\n'
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"remote_%s"'
op|'%'
name|'message'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'method'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NoSuchMethod'
op|'('
string|'"No such method: remote_%s"'
op|'%'
op|'('
name|'message'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'method'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"%s didn\'t accept %s and %s"'
op|'%'
op|'('
name|'method'
op|','
name|'args'
op|','
name|'kw'
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'return'
name|'broker'
op|'.'
name|'serialize'
op|'('
name|'state'
op|','
name|'self'
op|'.'
name|'perspective'
op|')'
newline|'\n'
nl|'\n'
DECL|member|jellyFor
dedent|''
name|'def'
name|'jellyFor'
op|'('
name|'self'
op|','
name|'jellier'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(internal)\n\n        Return a tuple which will be used as the s-expression to\n        serialize this to a peer.\n        """'
newline|'\n'
nl|'\n'
name|'return'
string|'"remote"'
op|','
name|'jellier'
op|'.'
name|'invoker'
op|'.'
name|'registerReference'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Root
dedent|''
dedent|''
name|'class'
name|'Root'
op|'('
name|'Referenceable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""I provide a root object to L{pb.Broker}s for a L{pb.BrokerFactory}.\n\n    When a L{pb.BrokerFactory} produces a L{pb.Broker}, it supplies that\n    L{pb.Broker} with an object named \\"root\\".  That object is obtained\n    by calling my rootObject method.\n\n    See also: L{pb.getObjectAt}\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IPBRoot'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rootObject
name|'def'
name|'rootObject'
op|'('
name|'self'
op|','
name|'broker'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A L{pb.BrokerFactory} is requesting to publish me as a root object.\n\n        When a L{pb.BrokerFactory} is sending me as the root object, this\n        method will be invoked to allow per-broker versions of an\n        object.  By default I return myself.\n        """'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ViewPoint
dedent|''
dedent|''
name|'class'
name|'ViewPoint'
op|'('
name|'Referenceable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I act as an indirect reference to an object accessed through a\n    L{pb.Perspective}.\n\n    Simply put, I combine an object with a perspective so that when a\n    peer calls methods on the object I refer to, the method will be\n    invoked with that perspective as a first argument, so that it can\n    know who is calling it.\n\n    While L{Viewable} objects will be converted to ViewPoints by default\n    when they are returned from or sent as arguments to a remote\n    method, any object may be manually proxied as well. (XXX: Now that\n    this class is no longer named C{Proxy}, this is the only occourance\n    of the term \'proxied\' in this docstring, and may be unclear.)\n\n    This can be useful when dealing with L{pb.Perspective}s, L{Copyable}s,\n    and L{Cacheable}s.  It is legal to implement a method as such on\n    a perspective::\n\n     | def perspective_getViewPointForOther(self, name):\n     |     defr = self.service.getPerspectiveRequest(name)\n     |     defr.addCallbacks(lambda x, self=self: ViewPoint(self, x), log.msg)\n     |     return defr\n\n    This will allow you to have references to Perspective objects in two\n    different ways.  One is through the initial \'attach\' call -- each\n    peer will have a L{pb.RemoteReference} to their perspective directly.  The\n    other is through this method; each peer can get a L{pb.RemoteReference} to\n    all other perspectives in the service; but that L{pb.RemoteReference} will\n    be to a L{ViewPoint}, not directly to the object.\n\n    The practical offshoot of this is that you can implement 2 varieties\n    of remotely callable methods on this Perspective; view_xxx and\n    C{perspective_xxx}. C{view_xxx} methods will follow the rules for\n    ViewPoint methods (see ViewPoint.L{remoteMessageReceived}), and\n    C{perspective_xxx} methods will follow the rules for Perspective\n    methods.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'perspective'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize me with a Perspective and an Object.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'perspective'
op|'='
name|'perspective'
newline|'\n'
name|'self'
op|'.'
name|'object'
op|'='
name|'object'
newline|'\n'
nl|'\n'
DECL|member|processUniqueID
dedent|''
name|'def'
name|'processUniqueID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return an ID unique to a proxy for this perspective+object combination.\n        """'
newline|'\n'
name|'return'
op|'('
name|'id'
op|'('
name|'self'
op|'.'
name|'perspective'
op|')'
op|','
name|'id'
op|'('
name|'self'
op|'.'
name|'object'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remoteMessageReceived
dedent|''
name|'def'
name|'remoteMessageReceived'
op|'('
name|'self'
op|','
name|'broker'
op|','
name|'message'
op|','
name|'args'
op|','
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A remote message has been received.  Dispatch it appropriately.\n\n        The default implementation is to dispatch to a method called\n        \'C{view_messagename}\' to my Object and call it on my object with\n        the same arguments, modified by inserting my Perspective as\n        the first argument.\n        """'
newline|'\n'
name|'args'
op|'='
name|'broker'
op|'.'
name|'unserialize'
op|'('
name|'args'
op|','
name|'self'
op|'.'
name|'perspective'
op|')'
newline|'\n'
name|'kw'
op|'='
name|'broker'
op|'.'
name|'unserialize'
op|'('
name|'kw'
op|','
name|'self'
op|'.'
name|'perspective'
op|')'
newline|'\n'
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'object'
op|','
string|'"view_%s"'
op|'%'
name|'message'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'apply'
op|'('
name|'method'
op|','
op|'('
name|'self'
op|'.'
name|'perspective'
op|','
op|')'
op|'+'
name|'args'
op|','
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"%s didn\'t accept %s and %s"'
op|'%'
op|'('
name|'method'
op|','
name|'args'
op|','
name|'kw'
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'rv'
op|'='
name|'broker'
op|'.'
name|'serialize'
op|'('
name|'state'
op|','
name|'self'
op|'.'
name|'perspective'
op|','
name|'method'
op|','
name|'args'
op|','
name|'kw'
op|')'
newline|'\n'
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Viewable
dedent|''
dedent|''
name|'class'
name|'Viewable'
op|'('
name|'Serializable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""I will be converted to a L{ViewPoint} when passed to or returned from a remote method.\n\n    The beginning of a peer\'s interaction with a PB Service is always\n    through a perspective.  However, if a C{perspective_xxx} method returns\n    a Viewable, it will be serialized to the peer as a response to that\n    method.\n    """'
newline|'\n'
nl|'\n'
DECL|member|jellyFor
name|'def'
name|'jellyFor'
op|'('
name|'self'
op|','
name|'jellier'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Serialize a L{ViewPoint} for me and the perspective of the given broker.\n        """'
newline|'\n'
name|'return'
name|'ViewPoint'
op|'('
name|'jellier'
op|'.'
name|'invoker'
op|'.'
name|'serializingPerspective'
op|','
name|'self'
op|')'
op|'.'
name|'jellyFor'
op|'('
name|'jellier'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Copyable
dedent|''
dedent|''
name|'class'
name|'Copyable'
op|'('
name|'Serializable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Subclass me to get copied each time you are returned from or passed to a remote method.\n\n    When I am returned from or passed to a remote method call, I will be\n    converted into data via a set of callbacks (see my methods for more\n    info).  That data will then be serialized using Jelly, and sent to\n    the peer.\n\n    The peer will then look up the type to represent this with; see\n    L{RemoteCopy} for details.\n    """'
newline|'\n'
nl|'\n'
DECL|member|getStateToCopy
name|'def'
name|'getStateToCopy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gather state to send when I am serialized for a peer.\n\n        I will default to returning self.__dict__.  Override this to\n        customize this behavior.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'__dict__'
newline|'\n'
nl|'\n'
DECL|member|getStateToCopyFor
dedent|''
name|'def'
name|'getStateToCopyFor'
op|'('
name|'self'
op|','
name|'perspective'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Gather state to send when I am serialized for a particular\n        perspective.\n\n        I will default to calling L{getStateToCopy}.  Override this to\n        customize this behavior.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'getStateToCopy'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getTypeToCopy
dedent|''
name|'def'
name|'getTypeToCopy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine what type tag to send for me.\n\n        By default, send the string representation of my class\n        (package.module.Class); normally this is adequate, but\n        you may override this to change it.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getTypeToCopyFor
dedent|''
name|'def'
name|'getTypeToCopyFor'
op|'('
name|'self'
op|','
name|'perspective'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine what type tag to send for me.\n\n        By default, defer to self.L{getTypeToCopy}() normally this is\n        adequate, but you may override this to change it.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'getTypeToCopy'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|jellyFor
dedent|''
name|'def'
name|'jellyFor'
op|'('
name|'self'
op|','
name|'jellier'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Assemble type tag and state to copy for this broker.\n\n        This will call L{getTypeToCopyFor} and L{getStateToCopy}, and\n        return an appropriate s-expression to represent me.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'jellier'
op|'.'
name|'invoker'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getInstanceState'
op|'('
name|'self'
op|','
name|'jellier'
op|')'
newline|'\n'
dedent|''
name|'p'
op|'='
name|'jellier'
op|'.'
name|'invoker'
op|'.'
name|'serializingPerspective'
newline|'\n'
name|'t'
op|'='
name|'self'
op|'.'
name|'getTypeToCopyFor'
op|'('
name|'p'
op|')'
newline|'\n'
name|'state'
op|'='
name|'self'
op|'.'
name|'getStateToCopyFor'
op|'('
name|'p'
op|')'
newline|'\n'
name|'sxp'
op|'='
name|'jellier'
op|'.'
name|'prepare'
op|'('
name|'self'
op|')'
newline|'\n'
name|'sxp'
op|'.'
name|'extend'
op|'('
op|'['
name|'t'
op|','
name|'jellier'
op|'.'
name|'jelly'
op|'('
name|'state'
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'jellier'
op|'.'
name|'preserve'
op|'('
name|'self'
op|','
name|'sxp'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Cacheable
dedent|''
dedent|''
name|'class'
name|'Cacheable'
op|'('
name|'Copyable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A cached instance.\n\n    This means that it\'s copied; but there is some logic to make sure\n    that it\'s only copied once.  Additionally, when state is retrieved,\n    it is passed a "proto-reference" to the state as it will exist on\n    the client.\n\n    XXX: The documentation for this class needs work, but it\'s the most\n    complex part of PB and it is inherently difficult to explain.\n    """'
newline|'\n'
nl|'\n'
DECL|member|getStateToCacheAndObserveFor
name|'def'
name|'getStateToCacheAndObserveFor'
op|'('
name|'self'
op|','
name|'perspective'
op|','
name|'observer'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get state to cache on the client and client-cache reference\n        to observe locally.\n\n        This is similiar to getStateToCopyFor, but it additionally\n        passes in a reference to the client-side RemoteCache instance\n        that will be created when it is unserialized.  This allows\n        Cacheable instances to keep their RemoteCaches up to date when\n        they change, such that no changes can occur between the point\n        at which the state is initially copied and the client receives\n        it that are not propogated.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'getStateToCopyFor'
op|'('
name|'perspective'
op|')'
newline|'\n'
nl|'\n'
DECL|member|jellyFor
dedent|''
name|'def'
name|'jellyFor'
op|'('
name|'self'
op|','
name|'jellier'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return an appropriate tuple to serialize me.\n\n        Depending on whether this broker has cached me or not, this may\n        return either a full state or a reference to an existing cache.\n        """'
newline|'\n'
name|'if'
name|'jellier'
op|'.'
name|'invoker'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getInstanceState'
op|'('
name|'self'
op|','
name|'jellier'
op|')'
newline|'\n'
dedent|''
name|'luid'
op|'='
name|'jellier'
op|'.'
name|'invoker'
op|'.'
name|'cachedRemotelyAs'
op|'('
name|'self'
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'luid'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'luid'
op|'='
name|'jellier'
op|'.'
name|'invoker'
op|'.'
name|'cacheRemotely'
op|'('
name|'self'
op|')'
newline|'\n'
name|'p'
op|'='
name|'jellier'
op|'.'
name|'invoker'
op|'.'
name|'serializingPerspective'
newline|'\n'
name|'type_'
op|'='
name|'self'
op|'.'
name|'getTypeToCopyFor'
op|'('
name|'p'
op|')'
newline|'\n'
name|'observer'
op|'='
name|'RemoteCacheObserver'
op|'('
name|'jellier'
op|'.'
name|'invoker'
op|','
name|'self'
op|','
name|'p'
op|')'
newline|'\n'
name|'state'
op|'='
name|'self'
op|'.'
name|'getStateToCacheAndObserveFor'
op|'('
name|'p'
op|','
name|'observer'
op|')'
newline|'\n'
name|'l'
op|'='
name|'jellier'
op|'.'
name|'prepare'
op|'('
name|'self'
op|')'
newline|'\n'
name|'jstate'
op|'='
name|'jellier'
op|'.'
name|'jelly'
op|'('
name|'state'
op|')'
newline|'\n'
name|'l'
op|'.'
name|'extend'
op|'('
op|'['
name|'type_'
op|','
name|'luid'
op|','
name|'jstate'
op|']'
op|')'
newline|'\n'
name|'return'
name|'jellier'
op|'.'
name|'preserve'
op|'('
name|'self'
op|','
name|'l'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cached_atom'
op|','
name|'luid'
newline|'\n'
nl|'\n'
DECL|member|stoppedObserving
dedent|''
dedent|''
name|'def'
name|'stoppedObserving'
op|'('
name|'self'
op|','
name|'perspective'
op|','
name|'observer'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This method is called when a client has stopped observing me.\n\n        The \'observer\' argument is the same as that passed in to\n        getStateToCacheAndObserveFor.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|RemoteCopy
dedent|''
dedent|''
name|'class'
name|'RemoteCopy'
op|'('
name|'Unjellyable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""I am a remote copy of a Copyable object.\n\n    When the state from a L{Copyable} object is received, an instance will\n    be created based on the copy tags table (see setUnjellyableForClass) and\n    sent the L{setCopyableState} message.  I provide a reasonable default\n    implementation of that message; subclass me if you wish to serve as\n    a copier for remote data.\n\n    NOTE: copiers are invoked with no arguments.  Do not implement a\n    constructor which requires args in a subclass of L{RemoteCopy}!\n    """'
newline|'\n'
nl|'\n'
DECL|member|setCopyableState
name|'def'
name|'setCopyableState'
op|'('
name|'self'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""I will be invoked with the state to copy locally.\n\n        \'state\' is the data returned from the remote object\'s\n        \'getStateToCopyFor\' method, which will often be the remote\n        object\'s dictionary (or a filtered approximation of it depending\n        on my peer\'s perspective).\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'__dict__'
op|'='
name|'state'
newline|'\n'
nl|'\n'
DECL|member|unjellyFor
dedent|''
name|'def'
name|'unjellyFor'
op|'('
name|'self'
op|','
name|'unjellier'
op|','
name|'jellyList'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'unjellier'
op|'.'
name|'invoker'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'setInstanceState'
op|'('
name|'self'
op|','
name|'unjellier'
op|','
name|'jellyList'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'setCopyableState'
op|'('
name|'unjellier'
op|'.'
name|'unjelly'
op|'('
name|'jellyList'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|RemoteCache
dedent|''
dedent|''
name|'class'
name|'RemoteCache'
op|'('
name|'RemoteCopy'
op|','
name|'Serializable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A cache is a local representation of a remote L{Cacheable} object.\n\n    This represents the last known state of this object.  It may\n    also have methods invoked on it -- in order to update caches,\n    the cached class generates a L{pb.RemoteReference} to this object as\n    it is originally sent.\n\n    Much like copy, I will be invoked with no arguments.  Do not\n    implement a constructor that requires arguments in one of my\n    subclasses.\n    """'
newline|'\n'
nl|'\n'
DECL|member|remoteMessageReceived
name|'def'
name|'remoteMessageReceived'
op|'('
name|'self'
op|','
name|'broker'
op|','
name|'message'
op|','
name|'args'
op|','
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A remote message has been received.  Dispatch it appropriately.\n\n        The default implementation is to dispatch to a method called\n        \'C{observe_messagename}\' and call it on my  with the same arguments.\n        """'
newline|'\n'
nl|'\n'
name|'args'
op|'='
name|'broker'
op|'.'
name|'unserialize'
op|'('
name|'args'
op|')'
newline|'\n'
name|'kw'
op|'='
name|'broker'
op|'.'
name|'unserialize'
op|'('
name|'kw'
op|')'
newline|'\n'
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"observe_%s"'
op|'%'
name|'message'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'apply'
op|'('
name|'method'
op|','
name|'args'
op|','
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"%s didn\'t accept %s and %s"'
op|'%'
op|'('
name|'method'
op|','
name|'args'
op|','
name|'kw'
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'return'
name|'broker'
op|'.'
name|'serialize'
op|'('
name|'state'
op|','
name|'None'
op|','
name|'method'
op|','
name|'args'
op|','
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|jellyFor
dedent|''
name|'def'
name|'jellyFor'
op|'('
name|'self'
op|','
name|'jellier'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""serialize me (only for the broker I\'m for) as the original cached reference\n        """'
newline|'\n'
name|'if'
name|'jellier'
op|'.'
name|'invoker'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getInstanceState'
op|'('
name|'self'
op|','
name|'jellier'
op|')'
newline|'\n'
dedent|''
name|'assert'
name|'jellier'
op|'.'
name|'invoker'
name|'is'
name|'self'
op|'.'
name|'broker'
op|','
string|'"You cannot exchange cached proxies between brokers."'
newline|'\n'
name|'return'
string|"'lcache'"
op|','
name|'self'
op|'.'
name|'luid'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unjellyFor
dedent|''
name|'def'
name|'unjellyFor'
op|'('
name|'self'
op|','
name|'unjellier'
op|','
name|'jellyList'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'unjellier'
op|'.'
name|'invoker'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'setInstanceState'
op|'('
name|'self'
op|','
name|'unjellier'
op|','
name|'jellyList'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'broker'
op|'='
name|'unjellier'
op|'.'
name|'invoker'
newline|'\n'
name|'self'
op|'.'
name|'luid'
op|'='
name|'jellyList'
op|'['
number|'1'
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
name|'type'
op|')'
op|':'
comment|'#new-style class'
newline|'\n'
indent|'            '
name|'cProxy'
op|'='
name|'_DummyNewStyle'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'cProxy'
op|'='
name|'_Dummy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'cProxy'
op|'.'
name|'__class__'
op|'='
name|'self'
op|'.'
name|'__class__'
newline|'\n'
name|'cProxy'
op|'.'
name|'__dict__'
op|'='
name|'self'
op|'.'
name|'__dict__'
newline|'\n'
comment|'# XXX questionable whether this was a good design idea...'
nl|'\n'
name|'init'
op|'='
name|'getattr'
op|'('
name|'cProxy'
op|','
string|'"__init__"'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'init'
op|':'
newline|'\n'
indent|'            '
name|'init'
op|'('
op|')'
newline|'\n'
dedent|''
name|'unjellier'
op|'.'
name|'invoker'
op|'.'
name|'cacheLocally'
op|'('
name|'jellyList'
op|'['
number|'1'
op|']'
op|','
name|'self'
op|')'
newline|'\n'
name|'cProxy'
op|'.'
name|'setCopyableState'
op|'('
name|'unjellier'
op|'.'
name|'unjelly'
op|'('
name|'jellyList'
op|'['
number|'2'
op|']'
op|')'
op|')'
newline|'\n'
comment|"# Might have changed due to setCopyableState method; we'll assume that"
nl|'\n'
comment|"# it's bad form to do so afterwards."
nl|'\n'
name|'self'
op|'.'
name|'__dict__'
op|'='
name|'cProxy'
op|'.'
name|'__dict__'
newline|'\n'
comment|'# chomp, chomp -- some existing code uses "self.__dict__ =", some uses'
nl|'\n'
comment|'# "__dict__.update".  This is here in order to handle both cases.'
nl|'\n'
name|'self'
op|'.'
name|'broker'
op|'='
name|'unjellier'
op|'.'
name|'invoker'
newline|'\n'
name|'self'
op|'.'
name|'luid'
op|'='
name|'jellyList'
op|'['
number|'1'
op|']'
newline|'\n'
name|'return'
name|'cProxy'
newline|'\n'
nl|'\n'
comment|'##     def __really_del__(self):'
nl|'\n'
comment|'##         """Final finalization call, made after all remote references have been lost.'
nl|'\n'
comment|'##         """'
nl|'\n'
nl|'\n'
DECL|member|__cmp__
dedent|''
name|'def'
name|'__cmp__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Compare me [to another RemoteCache.\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'other'
op|','
name|'self'
op|'.'
name|'__class__'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cmp'
op|'('
name|'id'
op|'('
name|'self'
op|'.'
name|'__dict__'
op|')'
op|','
name|'id'
op|'('
name|'other'
op|'.'
name|'__dict__'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cmp'
op|'('
name|'id'
op|'('
name|'self'
op|'.'
name|'__dict__'
op|')'
op|','
name|'other'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Hash me.\n        """'
newline|'\n'
name|'return'
name|'int'
op|'('
name|'id'
op|'('
name|'self'
op|'.'
name|'__dict__'
op|')'
op|'%'
name|'sys'
op|'.'
name|'maxint'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|broker
dedent|''
name|'broker'
op|'='
name|'None'
newline|'\n'
DECL|variable|luid
name|'luid'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__del__
name|'def'
name|'__del__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do distributed reference counting on finalize.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|"# log.msg( ' --- decache: %s %s' % (self, self.luid) )"
nl|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'broker'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'broker'
op|'.'
name|'decCacheRef'
op|'('
name|'self'
op|'.'
name|'luid'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'deferr'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|unjellyCached
dedent|''
dedent|''
dedent|''
name|'def'
name|'unjellyCached'
op|'('
name|'unjellier'
op|','
name|'unjellyList'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'luid'
op|'='
name|'unjellyList'
op|'['
number|'1'
op|']'
newline|'\n'
name|'cNotProxy'
op|'='
name|'unjellier'
op|'.'
name|'invoker'
op|'.'
name|'cachedLocallyAs'
op|'('
name|'luid'
op|')'
newline|'\n'
nl|'\n'
name|'cProxy'
op|'='
name|'_Dummy'
op|'('
op|')'
newline|'\n'
name|'cProxy'
op|'.'
name|'__class__'
op|'='
name|'cNotProxy'
op|'.'
name|'__class__'
newline|'\n'
name|'cProxy'
op|'.'
name|'__dict__'
op|'='
name|'cNotProxy'
op|'.'
name|'__dict__'
newline|'\n'
name|'return'
name|'cProxy'
newline|'\n'
nl|'\n'
dedent|''
name|'setUnjellyableForClass'
op|'('
string|'"cached"'
op|','
name|'unjellyCached'
op|')'
newline|'\n'
nl|'\n'
DECL|function|unjellyLCache
name|'def'
name|'unjellyLCache'
op|'('
name|'unjellier'
op|','
name|'unjellyList'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'luid'
op|'='
name|'unjellyList'
op|'['
number|'1'
op|']'
newline|'\n'
name|'obj'
op|'='
name|'unjellier'
op|'.'
name|'invoker'
op|'.'
name|'remotelyCachedForLUID'
op|'('
name|'luid'
op|')'
newline|'\n'
name|'return'
name|'obj'
newline|'\n'
nl|'\n'
dedent|''
name|'setUnjellyableForClass'
op|'('
string|'"lcache"'
op|','
name|'unjellyLCache'
op|')'
newline|'\n'
nl|'\n'
DECL|function|unjellyLocal
name|'def'
name|'unjellyLocal'
op|'('
name|'unjellier'
op|','
name|'unjellyList'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'obj'
op|'='
name|'unjellier'
op|'.'
name|'invoker'
op|'.'
name|'localObjectForID'
op|'('
name|'unjellyList'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'return'
name|'obj'
newline|'\n'
nl|'\n'
dedent|''
name|'setUnjellyableForClass'
op|'('
string|'"local"'
op|','
name|'unjellyLocal'
op|')'
newline|'\n'
nl|'\n'
DECL|class|RemoteCacheMethod
name|'class'
name|'RemoteCacheMethod'
op|':'
newline|'\n'
indent|'    '
string|'"""A method on a reference to a L{RemoteCache}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'broker'
op|','
name|'cached'
op|','
name|'perspective'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(internal) initialize.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'broker'
op|'='
name|'broker'
newline|'\n'
name|'self'
op|'.'
name|'perspective'
op|'='
name|'perspective'
newline|'\n'
name|'self'
op|'.'
name|'cached'
op|'='
name|'cached'
newline|'\n'
nl|'\n'
DECL|member|__cmp__
dedent|''
name|'def'
name|'__cmp__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'cmp'
op|'('
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'broker'
op|','
name|'self'
op|'.'
name|'perspective'
op|','
name|'self'
op|'.'
name|'cached'
op|')'
op|','
name|'other'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'broker'
op|','
name|'self'
op|'.'
name|'perspective'
op|','
name|'self'
op|'.'
name|'cached'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(internal) action method.\n        """'
newline|'\n'
name|'cacheID'
op|'='
name|'self'
op|'.'
name|'broker'
op|'.'
name|'cachedRemotelyAs'
op|'('
name|'self'
op|'.'
name|'cached'
op|')'
newline|'\n'
name|'if'
name|'cacheID'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'pb'
name|'import'
name|'ProtocolError'
newline|'\n'
name|'raise'
name|'ProtocolError'
op|'('
string|'"You can\'t call a cached method when the object hasn\'t been given to the peer yet."'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'broker'
op|'.'
name|'_sendMessage'
op|'('
string|"'cache'"
op|','
name|'self'
op|'.'
name|'perspective'
op|','
name|'cacheID'
op|','
name|'self'
op|'.'
name|'name'
op|','
name|'args'
op|','
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|class|RemoteCacheObserver
dedent|''
dedent|''
name|'class'
name|'RemoteCacheObserver'
op|':'
newline|'\n'
indent|'    '
string|'"""I am a reverse-reference to the peer\'s L{RemoteCache}.\n\n    I am generated automatically when a cache is serialized.  I\n    represent a reference to the client\'s L{RemoteCache} object that\n    will represent a particular L{Cacheable}; I am the additional\n    object passed to getStateToCacheAndObserveFor.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'broker'
op|','
name|'cached'
op|','
name|'perspective'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(internal) Initialize me.\n\n        @param broker: a L{pb.Broker} instance.\n\n        @param cached: a L{Cacheable} instance that this L{RemoteCacheObserver}\n            corresponds to.\n\n        @param perspective: a reference to the perspective who is observing this.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'broker'
op|'='
name|'broker'
newline|'\n'
name|'self'
op|'.'
name|'cached'
op|'='
name|'cached'
newline|'\n'
name|'self'
op|'.'
name|'perspective'
op|'='
name|'perspective'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"<RemoteCacheObserver(%s, %s, %s) at %s>"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'broker'
op|','
name|'self'
op|'.'
name|'cached'
op|','
name|'self'
op|'.'
name|'perspective'
op|','
name|'id'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate a hash unique to all L{RemoteCacheObserver}s for this broker/perspective/cached triplet\n        """'
newline|'\n'
nl|'\n'
name|'return'
op|'('
op|'('
name|'hash'
op|'('
name|'self'
op|'.'
name|'broker'
op|')'
op|'%'
number|'2'
op|'**'
number|'10'
op|')'
nl|'\n'
op|'+'
op|'('
name|'hash'
op|'('
name|'self'
op|'.'
name|'perspective'
op|')'
op|'%'
number|'2'
op|'**'
number|'10'
op|')'
nl|'\n'
op|'+'
op|'('
name|'hash'
op|'('
name|'self'
op|'.'
name|'cached'
op|')'
op|'%'
number|'2'
op|'**'
number|'10'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cmp__
dedent|''
name|'def'
name|'__cmp__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Compare me to another L{RemoteCacheObserver}.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'cmp'
op|'('
op|'('
name|'self'
op|'.'
name|'broker'
op|','
name|'self'
op|'.'
name|'perspective'
op|','
name|'self'
op|'.'
name|'cached'
op|')'
op|','
name|'other'
op|')'
newline|'\n'
nl|'\n'
DECL|member|callRemote
dedent|''
name|'def'
name|'callRemote'
op|'('
name|'self'
op|','
name|'_name'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(internal) action method.\n        """'
newline|'\n'
name|'cacheID'
op|'='
name|'self'
op|'.'
name|'broker'
op|'.'
name|'cachedRemotelyAs'
op|'('
name|'self'
op|'.'
name|'cached'
op|')'
newline|'\n'
name|'if'
name|'cacheID'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'pb'
name|'import'
name|'ProtocolError'
newline|'\n'
name|'raise'
name|'ProtocolError'
op|'('
string|'"You can\'t call a cached method when the "'
nl|'\n'
string|'"object hasn\'t been given to the peer yet."'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'broker'
op|'.'
name|'_sendMessage'
op|'('
string|"'cache'"
op|','
name|'self'
op|'.'
name|'perspective'
op|','
name|'cacheID'
op|','
nl|'\n'
name|'_name'
op|','
name|'args'
op|','
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remoteMethod
dedent|''
name|'def'
name|'remoteMethod'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a L{pb.RemoteMethod} for this key.\n        """'
newline|'\n'
name|'return'
name|'RemoteCacheMethod'
op|'('
name|'key'
op|','
name|'self'
op|'.'
name|'broker'
op|','
name|'self'
op|'.'
name|'cached'
op|','
name|'self'
op|'.'
name|'perspective'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

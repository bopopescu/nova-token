begin_unit
comment|'# -*- test-case-name: twisted.test.test_pb -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nPerspective Broker\n\n\\"This isn\\\'t a professional opinion, but it\'s probably got enough\ninternet to kill you.\\" --glyph\n\nIntroduction\n============\n\nThis is a broker for proxies for and copies of objects.  It provides a\ntranslucent interface layer to those proxies.\n\nThe protocol is not opaque, because it provides objects which represent the\nremote proxies and require no context (server references, IDs) to operate on.\n\nIt is not transparent because it does I{not} attempt to make remote objects\nbehave identically, or even similiarly, to local objects.  Method calls are\ninvoked asynchronously, and specific rules are applied when serializing\narguments.\n\nTo get started, begin with L{PBClientFactory} and L{PBServerFactory}.\n\n@author: Glyph Lefkowitz\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'new'
newline|'\n'
name|'import'
name|'types'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'Interface'
newline|'\n'
nl|'\n'
comment|'# Twisted Imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'failure'
op|','
name|'reflect'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'versions'
name|'import'
name|'Version'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'deprecate'
name|'import'
name|'deprecated'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'protocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'portal'
name|'import'
name|'Portal'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'IAnonymous'
op|','
name|'ICredentials'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'IUsernameHashedPassword'
op|','
name|'Anonymous'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'persisted'
name|'import'
name|'styles'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'components'
name|'import'
name|'registerAdapter'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'interfaces'
name|'import'
name|'IJellyable'
op|','
name|'IUnjellyable'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'jelly'
name|'import'
name|'jelly'
op|','
name|'unjelly'
op|','
name|'globalSecurity'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
name|'import'
name|'banana'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'Serializable'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'Referenceable'
op|','
name|'NoSuchMethod'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'Root'
op|','
name|'IPBRoot'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'ViewPoint'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'Viewable'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'Copyable'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'Jellyable'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'Cacheable'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'RemoteCopy'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'RemoteCache'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'RemoteCacheObserver'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'copyTags'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'setUnjellyableForClass'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'setUnjellyableFactoryForClass'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'setUnjellyableForClassTree'
newline|'\n'
comment|'# These three are backwards compatibility aliases for the previous three.'
nl|'\n'
comment|'# Ultimately they should be deprecated. -exarkun'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'setCopierForClass'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'setFactoryForClass'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'flavors'
name|'import'
name|'setCopierForClassTree'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|MAX_BROKER_REFS
name|'MAX_BROKER_REFS'
op|'='
number|'1024'
newline|'\n'
nl|'\n'
DECL|variable|portno
name|'portno'
op|'='
number|'8787'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProtocolError
name|'class'
name|'ProtocolError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This error is raised when an invalid protocol statement is received.\n    """'
newline|'\n'
nl|'\n'
DECL|class|DeadReferenceError
dedent|''
name|'class'
name|'DeadReferenceError'
op|'('
name|'ProtocolError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This error is raised when a method is called on a dead reference (one whose\n    broker has been disconnected).\n    """'
newline|'\n'
nl|'\n'
DECL|class|Error
dedent|''
name|'class'
name|'Error'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This error can be raised to generate known error conditions.\n\n    When a PB callable method (perspective_, remote_, view_) raises\n    this error, it indicates that a traceback should not be printed,\n    but instead, the string representation of the exception should be\n    sent.\n    """'
newline|'\n'
nl|'\n'
DECL|class|RemoteMethod
dedent|''
name|'class'
name|'RemoteMethod'
op|':'
newline|'\n'
indent|'    '
string|'"""This is a translucent reference to a remote message.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize with a L{RemoteReference} and the name of this message.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'obj'
op|'='
name|'obj'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
nl|'\n'
DECL|member|__cmp__
dedent|''
name|'def'
name|'__cmp__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'cmp'
op|'('
op|'('
name|'self'
op|'.'
name|'obj'
op|','
name|'self'
op|'.'
name|'name'
op|')'
op|','
name|'other'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
op|'('
name|'self'
op|'.'
name|'obj'
op|','
name|'self'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Asynchronously invoke a remote method.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'obj'
op|'.'
name|'broker'
op|'.'
name|'_sendMessage'
op|'('
string|"''"
op|','
name|'self'
op|'.'
name|'obj'
op|'.'
name|'perspective'
op|','
name|'self'
op|'.'
name|'obj'
op|'.'
name|'luid'
op|','
name|'self'
op|'.'
name|'name'
op|','
name|'args'
op|','
name|'kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|noOperation
dedent|''
dedent|''
name|'def'
name|'noOperation'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Do nothing.\n\n    Neque porro quisquam est qui dolorem ipsum quia dolor sit amet,\n    consectetur, adipisci velit...\n    """'
newline|'\n'
DECL|variable|noOperation
dedent|''
name|'noOperation'
op|'='
name|'deprecated'
op|'('
name|'Version'
op|'('
string|'"twisted"'
op|','
number|'8'
op|','
number|'2'
op|','
number|'0'
op|')'
op|')'
op|'('
name|'noOperation'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PBConnectionLost
name|'class'
name|'PBConnectionLost'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|printTraceback
dedent|''
name|'def'
name|'printTraceback'
op|'('
name|'tb'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Print a traceback (string) to the standard log.\n    """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'Perspective Broker Traceback:'"
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
name|'tb'
op|')'
newline|'\n'
DECL|variable|printTraceback
dedent|''
name|'printTraceback'
op|'='
name|'deprecated'
op|'('
name|'Version'
op|'('
string|'"twisted"'
op|','
number|'8'
op|','
number|'2'
op|','
number|'0'
op|')'
op|')'
op|'('
name|'printTraceback'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPerspective
name|'class'
name|'IPerspective'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    per*spec*tive, n. : The relationship of aspects of a subject to each\n    other and to a whole: \'a perspective of history\'; \'a need to view\n    the problem in the proper perspective\'.\n\n    This is a Perspective Broker-specific wrapper for an avatar. That\n    is to say, a PB-published view on to the business logic for the\n    system\'s concept of a \'user\'.\n\n    The concept of attached/detached is no longer implemented by the\n    framework. The realm is expected to implement such semantics if\n    needed.\n    """'
newline|'\n'
nl|'\n'
DECL|member|perspectiveMessageReceived
name|'def'
name|'perspectiveMessageReceived'
op|'('
name|'broker'
op|','
name|'message'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This method is called when a network message is received.\n\n        @arg broker: The Perspective Broker.\n\n        @type message: str\n        @arg message: The name of the method called by the other end.\n\n        @type args: list in jelly format\n        @arg args: The arguments that were passed by the other end. It\n                   is recommend that you use the `unserialize\' method of the\n                   broker to decode this.\n\n        @type kwargs: dict in jelly format\n        @arg kwargs: The keyword arguments that were passed by the\n                     other end.  It is recommended that you use the\n                     `unserialize\' method of the broker to decode this.\n\n        @rtype: A jelly list.\n        @return: It is recommended that you use the `serialize\' method\n                 of the broker on whatever object you need to return to\n                 generate the return value.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Avatar
dedent|''
dedent|''
name|'class'
name|'Avatar'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A default IPerspective implementor.\n\n    This class is intended to be subclassed, and a realm should return\n    an instance of such a subclass when IPerspective is requested of\n    it.\n\n    A peer requesting a perspective will receive only a\n    L{RemoteReference} to a pb.Avatar.  When a method is called on\n    that L{RemoteReference}, it will translate to a method on the\n    remote perspective named \'perspective_methodname\'.  (For more\n    information on invoking methods on other objects, see\n    L{flavors.ViewPoint}.)\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IPerspective'
op|')'
newline|'\n'
nl|'\n'
DECL|member|perspectiveMessageReceived
name|'def'
name|'perspectiveMessageReceived'
op|'('
name|'self'
op|','
name|'broker'
op|','
name|'message'
op|','
name|'args'
op|','
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This method is called when a network message is received.\n\n        This will call::\n\n            self.perspective_%(message)s(*broker.unserialize(args),\n                                         **broker.unserialize(kw))\n\n        to handle the method; subclasses of Avatar are expected to\n        implement methods using this naming convention.\n        """'
newline|'\n'
nl|'\n'
name|'args'
op|'='
name|'broker'
op|'.'
name|'unserialize'
op|'('
name|'args'
op|','
name|'self'
op|')'
newline|'\n'
name|'kw'
op|'='
name|'broker'
op|'.'
name|'unserialize'
op|'('
name|'kw'
op|','
name|'self'
op|')'
newline|'\n'
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"perspective_%s"'
op|'%'
name|'message'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'method'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"%s didn\'t accept %s and %s"'
op|'%'
op|'('
name|'method'
op|','
name|'args'
op|','
name|'kw'
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'return'
name|'broker'
op|'.'
name|'serialize'
op|'('
name|'state'
op|','
name|'self'
op|','
name|'method'
op|','
name|'args'
op|','
name|'kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AsReferenceable
dedent|''
dedent|''
name|'class'
name|'AsReferenceable'
op|'('
name|'Referenceable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A reference directed towards another object.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'object'
op|','
name|'messageType'
op|'='
string|'"remote"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'remoteMessageReceived'
op|'='
name|'getattr'
op|'('
nl|'\n'
name|'object'
op|','
name|'messageType'
op|'+'
string|'"MessageReceived"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|RemoteReference
dedent|''
dedent|''
name|'class'
name|'RemoteReference'
op|'('
name|'Serializable'
op|','
name|'styles'
op|'.'
name|'Ephemeral'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A translucent reference to a remote object.\n\n    I may be a reference to a L{flavors.ViewPoint}, a\n    L{flavors.Referenceable}, or an L{IPerspective} implementor (e.g.,\n    pb.Avatar).  From the client\'s perspective, it is not possible to\n    tell which except by convention.\n\n    I am a \\"translucent\\" reference because although no additional\n    bookkeeping overhead is given to the application programmer for\n    manipulating a reference, return values are asynchronous.\n\n    See also L{twisted.internet.defer}.\n\n    @ivar broker: The broker I am obtained through.\n    @type broker: L{Broker}\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IUnjellyable'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'perspective'
op|','
name|'broker'
op|','
name|'luid'
op|','
name|'doRefCount'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(internal) Initialize me with a broker and a locally-unique ID.\n\n        The ID is unique only to the particular Perspective Broker\n        instance.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'luid'
op|'='
name|'luid'
newline|'\n'
name|'self'
op|'.'
name|'broker'
op|'='
name|'broker'
newline|'\n'
name|'self'
op|'.'
name|'doRefCount'
op|'='
name|'doRefCount'
newline|'\n'
name|'self'
op|'.'
name|'perspective'
op|'='
name|'perspective'
newline|'\n'
name|'self'
op|'.'
name|'disconnectCallbacks'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|notifyOnDisconnect
dedent|''
name|'def'
name|'notifyOnDisconnect'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register a callback to be called if our broker gets disconnected.\n\n        This callback will be called with one argument, this instance.\n        """'
newline|'\n'
name|'assert'
name|'callable'
op|'('
name|'callback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'disconnectCallbacks'
op|'.'
name|'append'
op|'('
name|'callback'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'disconnectCallbacks'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'broker'
op|'.'
name|'notifyOnDisconnect'
op|'('
name|'self'
op|'.'
name|'_disconnected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dontNotifyOnDisconnect
dedent|''
dedent|''
name|'def'
name|'dontNotifyOnDisconnect'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a callback that was registered with notifyOnDisconnect."""'
newline|'\n'
name|'self'
op|'.'
name|'disconnectCallbacks'
op|'.'
name|'remove'
op|'('
name|'callback'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'disconnectCallbacks'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'broker'
op|'.'
name|'dontNotifyOnDisconnect'
op|'('
name|'self'
op|'.'
name|'_disconnected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_disconnected
dedent|''
dedent|''
name|'def'
name|'_disconnected'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called if we are disconnected and have callbacks registered."""'
newline|'\n'
name|'for'
name|'callback'
name|'in'
name|'self'
op|'.'
name|'disconnectCallbacks'
op|':'
newline|'\n'
indent|'            '
name|'callback'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'disconnectCallbacks'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|jellyFor
dedent|''
name|'def'
name|'jellyFor'
op|'('
name|'self'
op|','
name|'jellier'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""If I am being sent back to where I came from, serialize as a local backreference.\n        """'
newline|'\n'
name|'if'
name|'jellier'
op|'.'
name|'invoker'
op|':'
newline|'\n'
indent|'            '
name|'assert'
name|'self'
op|'.'
name|'broker'
op|'=='
name|'jellier'
op|'.'
name|'invoker'
op|','
string|'"Can\'t send references to brokers other than their own."'
newline|'\n'
name|'return'
string|'"local"'
op|','
name|'self'
op|'.'
name|'luid'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"unpersistable"'
op|','
string|'"References cannot be serialized"'
newline|'\n'
nl|'\n'
DECL|member|unjellyFor
dedent|''
dedent|''
name|'def'
name|'unjellyFor'
op|'('
name|'self'
op|','
name|'unjellier'
op|','
name|'unjellyList'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__init__'
op|'('
name|'unjellier'
op|'.'
name|'invoker'
op|'.'
name|'unserializingPerspective'
op|','
name|'unjellier'
op|'.'
name|'invoker'
op|','
name|'unjellyList'
op|'['
number|'1'
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|callRemote
dedent|''
name|'def'
name|'callRemote'
op|'('
name|'self'
op|','
name|'_name'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Asynchronously invoke a remote method.\n\n        @type _name:   C{string}\n        @param _name:  the name of the remote method to invoke\n        @param args: arguments to serialize for the remote function\n        @param kw:  keyword arguments to serialize for the remote function.\n        @rtype:   L{twisted.internet.defer.Deferred}\n        @returns: a Deferred which will be fired when the result of\n                  this remote call is received.\n        """'
newline|'\n'
comment|"# note that we use '_name' instead of 'name' so the user can call"
nl|'\n'
comment|"# remote methods with 'name' as a keyword parameter, like this:"
nl|'\n'
comment|'#  ref.callRemote("getPeopleNamed", count=12, name="Bob")'
nl|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'broker'
op|'.'
name|'_sendMessage'
op|'('
string|"''"
op|','
name|'self'
op|'.'
name|'perspective'
op|','
name|'self'
op|'.'
name|'luid'
op|','
nl|'\n'
name|'_name'
op|','
name|'args'
op|','
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remoteMethod
dedent|''
name|'def'
name|'remoteMethod'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a L{RemoteMethod} for this key.\n        """'
newline|'\n'
name|'return'
name|'RemoteMethod'
op|'('
name|'self'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__cmp__
dedent|''
name|'def'
name|'__cmp__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Compare me [to another L{RemoteReference}].\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'other'
op|','
name|'RemoteReference'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'other'
op|'.'
name|'broker'
op|'=='
name|'self'
op|'.'
name|'broker'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'cmp'
op|'('
name|'self'
op|'.'
name|'luid'
op|','
name|'other'
op|'.'
name|'luid'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'cmp'
op|'('
name|'self'
op|'.'
name|'broker'
op|','
name|'other'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Hash me.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'luid'
newline|'\n'
nl|'\n'
DECL|member|__del__
dedent|''
name|'def'
name|'__del__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do distributed reference counting on finalization.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'doRefCount'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'broker'
op|'.'
name|'sendDecRef'
op|'('
name|'self'
op|'.'
name|'luid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'setUnjellyableForClass'
op|'('
string|'"remote"'
op|','
name|'RemoteReference'
op|')'
newline|'\n'
nl|'\n'
DECL|class|Local
name|'class'
name|'Local'
op|':'
newline|'\n'
indent|'    '
string|'"""(internal) A reference to a local object.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'object'
op|','
name|'perspective'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'object'
op|'='
name|'object'
newline|'\n'
name|'self'
op|'.'
name|'perspective'
op|'='
name|'perspective'
newline|'\n'
name|'self'
op|'.'
name|'refcount'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"<pb.Local %r ref:%s>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'object'
op|','
name|'self'
op|'.'
name|'refcount'
op|')'
newline|'\n'
nl|'\n'
DECL|member|incref
dedent|''
name|'def'
name|'incref'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Increment and return my reference count.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'refcount'
op|'='
name|'self'
op|'.'
name|'refcount'
op|'+'
number|'1'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'refcount'
newline|'\n'
nl|'\n'
DECL|member|decref
dedent|''
name|'def'
name|'decref'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Decrement and return my reference count.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'refcount'
op|'='
name|'self'
op|'.'
name|'refcount'
op|'-'
number|'1'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'refcount'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'##'
nl|'\n'
comment|'# Failure'
nl|'\n'
comment|'##'
nl|'\n'
nl|'\n'
DECL|class|CopyableFailure
dedent|''
dedent|''
name|'class'
name|'CopyableFailure'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|','
name|'Copyable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A L{flavors.RemoteCopy} and L{flavors.Copyable} version of\n    L{twisted.python.failure.Failure} for serialization.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|unsafeTracebacks
name|'unsafeTracebacks'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|getStateToCopy
name|'def'
name|'getStateToCopy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Collect state related to the exception which occurred, discarding\n        state which cannot reasonably be serialized.\n        """'
newline|'\n'
name|'state'
op|'='
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'state'
op|'['
string|"'tb'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'state'
op|'['
string|"'frames'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'state'
op|'['
string|"'stack'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'value'
op|','
name|'failure'
op|'.'
name|'Failure'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'['
string|"'value'"
op|']'
op|'='
name|'failure2Copyable'
op|'('
name|'self'
op|'.'
name|'value'
op|','
name|'self'
op|'.'
name|'unsafeTracebacks'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'['
string|"'value'"
op|']'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'value'
op|')'
comment|'# Exception instance'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'type'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'['
string|"'type'"
op|']'
op|'='
name|'self'
op|'.'
name|'type'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'['
string|"'type'"
op|']'
op|'='
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'type'
op|')'
comment|'# Exception class'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'unsafeTracebacks'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'['
string|"'traceback'"
op|']'
op|'='
name|'self'
op|'.'
name|'getTraceback'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'['
string|"'traceback'"
op|']'
op|'='
string|"'Traceback unavailable\\n'"
newline|'\n'
dedent|''
name|'return'
name|'state'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CopiedFailure
dedent|''
dedent|''
name|'class'
name|'CopiedFailure'
op|'('
name|'RemoteCopy'
op|','
name|'failure'
op|'.'
name|'Failure'
op|')'
op|':'
newline|'\n'
DECL|member|printTraceback
indent|'    '
name|'def'
name|'printTraceback'
op|'('
name|'self'
op|','
name|'file'
op|'='
name|'None'
op|','
name|'elideFrameworkCode'
op|'='
number|'0'
op|','
name|'detail'
op|'='
string|"'default'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'file'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'file'
op|'='
name|'log'
op|'.'
name|'logfile'
newline|'\n'
dedent|''
name|'file'
op|'.'
name|'write'
op|'('
string|'"Traceback from remote host -- "'
op|')'
newline|'\n'
name|'file'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'traceback'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|printBriefTraceback
dedent|''
name|'printBriefTraceback'
op|'='
name|'printTraceback'
newline|'\n'
DECL|variable|printDetailedTraceback
name|'printDetailedTraceback'
op|'='
name|'printTraceback'
newline|'\n'
nl|'\n'
dedent|''
name|'setUnjellyableForClass'
op|'('
name|'CopyableFailure'
op|','
name|'CopiedFailure'
op|')'
newline|'\n'
nl|'\n'
DECL|function|failure2Copyable
name|'def'
name|'failure2Copyable'
op|'('
name|'fail'
op|','
name|'unsafeTracebacks'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'f'
op|'='
name|'new'
op|'.'
name|'instance'
op|'('
name|'CopyableFailure'
op|','
name|'fail'
op|'.'
name|'__dict__'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'unsafeTracebacks'
op|'='
name|'unsafeTracebacks'
newline|'\n'
name|'return'
name|'f'
newline|'\n'
nl|'\n'
DECL|class|Broker
dedent|''
name|'class'
name|'Broker'
op|'('
name|'banana'
op|'.'
name|'Banana'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""I am a broker for objects.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|version
name|'version'
op|'='
number|'6'
newline|'\n'
DECL|variable|username
name|'username'
op|'='
name|'None'
newline|'\n'
DECL|variable|factory
name|'factory'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'isClient'
op|'='
number|'1'
op|','
name|'security'
op|'='
name|'globalSecurity'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'banana'
op|'.'
name|'Banana'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'isClient'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'disconnected'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'disconnects'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failures'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'connects'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'localObjects'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'security'
op|'='
name|'security'
newline|'\n'
name|'self'
op|'.'
name|'pageProducers'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'currentRequestID'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'currentLocalID'
op|'='
number|'0'
newline|'\n'
comment|'# Some terms:'
nl|'\n'
comment|'#  PUID: process unique ID; return value of id() function.  type "int".'
nl|'\n'
comment|'#  LUID: locally unique ID; an ID unique to an object mapped over this'
nl|'\n'
comment|'#        connection. type "int"'
nl|'\n'
comment|'#  GUID: (not used yet) globally unique ID; an ID for an object which'
nl|'\n'
comment|'#        may be on a redirected or meta server.  Type as yet undecided.'
nl|'\n'
comment|'# Dictionary mapping LUIDs to local objects.'
nl|'\n'
comment|'# set above to allow root object to be assigned before connection is made'
nl|'\n'
comment|'# self.localObjects = {}'
nl|'\n'
comment|'# Dictionary mapping PUIDs to LUIDs.'
nl|'\n'
name|'self'
op|'.'
name|'luids'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# Dictionary mapping LUIDs to local (remotely cached) objects. Remotely'
nl|'\n'
comment|"# cached means that they're objects which originate here, and were"
nl|'\n'
comment|'# copied remotely.'
nl|'\n'
name|'self'
op|'.'
name|'remotelyCachedObjects'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# Dictionary mapping PUIDs to (cached) LUIDs'
nl|'\n'
name|'self'
op|'.'
name|'remotelyCachedLUIDs'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# Dictionary mapping (remote) LUIDs to (locally cached) objects.'
nl|'\n'
name|'self'
op|'.'
name|'locallyCachedObjects'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'waitingForAnswers'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Mapping from LUIDs to weakref objects with callbacks for performing'
nl|'\n'
comment|'# any local cleanup which may be necessary for the corresponding'
nl|'\n'
comment|'# object once it no longer exists.'
nl|'\n'
name|'self'
op|'.'
name|'_localCleanup'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when the consumer attached to me runs out of buffer.\n        """'
newline|'\n'
comment|'# Go backwards over the list so we can remove indexes from it as we go'
nl|'\n'
name|'for'
name|'pageridx'
name|'in'
name|'xrange'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'pageProducers'
op|')'
op|'-'
number|'1'
op|','
op|'-'
number|'1'
op|','
op|'-'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pager'
op|'='
name|'self'
op|'.'
name|'pageProducers'
op|'['
name|'pageridx'
op|']'
newline|'\n'
name|'pager'
op|'.'
name|'sendNextPage'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'pager'
op|'.'
name|'stillPaging'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'self'
op|'.'
name|'pageProducers'
op|'['
name|'pageridx'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'pageProducers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Streaming producer methods; not necessary to implement.'
nl|'\n'
DECL|member|pauseProducing
dedent|''
dedent|''
name|'def'
name|'pauseProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|stopProducing
dedent|''
name|'def'
name|'stopProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|registerPageProducer
dedent|''
name|'def'
name|'registerPageProducer'
op|'('
name|'self'
op|','
name|'pager'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'pageProducers'
op|'.'
name|'append'
op|'('
name|'pager'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'pageProducers'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|expressionReceived
dedent|''
dedent|''
name|'def'
name|'expressionReceived'
op|'('
name|'self'
op|','
name|'sexp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Evaluate an expression as it\'s received.\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'sexp'
op|','
name|'types'
op|'.'
name|'ListType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'command'
op|'='
name|'sexp'
op|'['
number|'0'
op|']'
newline|'\n'
name|'methodName'
op|'='
string|'"proto_%s"'
op|'%'
name|'command'
newline|'\n'
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'methodName'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'method'
op|':'
newline|'\n'
indent|'                '
name|'method'
op|'('
op|'*'
name|'sexp'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sendCall'
op|'('
string|'"didNotUnderstand"'
op|','
name|'command'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ProtocolError'
op|'('
string|'"Non-list expression received."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|proto_version
dedent|''
dedent|''
name|'def'
name|'proto_version'
op|'('
name|'self'
op|','
name|'vnum'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Protocol message: (version version-number)\n\n        Check to make sure that both ends of the protocol are speaking\n        the same version dialect.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'vnum'
op|'!='
name|'self'
op|'.'
name|'version'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ProtocolError'
op|'('
string|'"Version Incompatibility: %s %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'version'
op|','
name|'vnum'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|sendCall
dedent|''
dedent|''
name|'def'
name|'sendCall'
op|'('
name|'self'
op|','
op|'*'
name|'exp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Utility method to send an expression to the other side of the connection.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sendEncoded'
op|'('
name|'exp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|proto_didNotUnderstand
dedent|''
name|'def'
name|'proto_didNotUnderstand'
op|'('
name|'self'
op|','
name|'command'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Respond to stock \'C{didNotUnderstand}\' message.\n\n        Log the command that was not understood and continue. (Note:\n        this will probably be changed to close the connection or raise\n        an exception in the future.)\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Didn\'t understand command: %r"'
op|'%'
name|'command'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionReady
dedent|''
name|'def'
name|'connectionReady'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize. Called after Banana negotiation is done.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sendCall'
op|'('
string|'"version"'
op|','
name|'self'
op|'.'
name|'version'
op|')'
newline|'\n'
name|'for'
name|'notifier'
name|'in'
name|'self'
op|'.'
name|'connects'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'notifier'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'deferr'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'connects'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'factory'
op|':'
comment|"# in tests we won't have factory"
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'clientConnectionMade'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionFailed
dedent|''
dedent|''
name|'def'
name|'connectionFailed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# XXX should never get called anymore? check!'
nl|'\n'
indent|'        '
name|'for'
name|'notifier'
name|'in'
name|'self'
op|'.'
name|'failures'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'notifier'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'deferr'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'failures'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|waitingForAnswers
dedent|''
name|'waitingForAnswers'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The connection was lost.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'disconnected'
op|'='
number|'1'
newline|'\n'
comment|'# nuke potential circular references.'
nl|'\n'
name|'self'
op|'.'
name|'luids'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'waitingForAnswers'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'d'
name|'in'
name|'self'
op|'.'
name|'waitingForAnswers'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'d'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'PBConnectionLost'
op|'('
name|'reason'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                    '
name|'log'
op|'.'
name|'deferr'
op|'('
op|')'
newline|'\n'
comment|'# Assure all Cacheable.stoppedObserving are called'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'for'
name|'lobj'
name|'in'
name|'self'
op|'.'
name|'remotelyCachedObjects'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cacheable'
op|'='
name|'lobj'
op|'.'
name|'object'
newline|'\n'
name|'perspective'
op|'='
name|'lobj'
op|'.'
name|'perspective'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'cacheable'
op|'.'
name|'stoppedObserving'
op|'('
name|'perspective'
op|','
name|'RemoteCacheObserver'
op|'('
name|'self'
op|','
name|'cacheable'
op|','
name|'perspective'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'deferr'
op|'('
op|')'
newline|'\n'
comment|'# Loop on a copy to prevent notifiers to mixup'
nl|'\n'
comment|'# the list by calling dontNotifyOnDisconnect'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'notifier'
name|'in'
name|'self'
op|'.'
name|'disconnects'
op|'['
op|':'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'notifier'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'deferr'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'disconnects'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'waitingForAnswers'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'localSecurity'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'remoteSecurity'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'remotelyCachedObjects'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'remotelyCachedLUIDs'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'locallyCachedObjects'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'localObjects'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|notifyOnDisconnect
dedent|''
name|'def'
name|'notifyOnDisconnect'
op|'('
name|'self'
op|','
name|'notifier'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call the given callback when the Broker disconnects."""'
newline|'\n'
name|'assert'
name|'callable'
op|'('
name|'notifier'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'disconnects'
op|'.'
name|'append'
op|'('
name|'notifier'
op|')'
newline|'\n'
nl|'\n'
DECL|member|notifyOnFail
dedent|''
name|'def'
name|'notifyOnFail'
op|'('
name|'self'
op|','
name|'notifier'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call the given callback if the Broker fails to connect."""'
newline|'\n'
name|'assert'
name|'callable'
op|'('
name|'notifier'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failures'
op|'.'
name|'append'
op|'('
name|'notifier'
op|')'
newline|'\n'
nl|'\n'
DECL|member|notifyOnConnect
dedent|''
name|'def'
name|'notifyOnConnect'
op|'('
name|'self'
op|','
name|'notifier'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call the given callback when the Broker connects."""'
newline|'\n'
name|'assert'
name|'callable'
op|'('
name|'notifier'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'connects'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'notifier'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connects'
op|'.'
name|'append'
op|'('
name|'notifier'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dontNotifyOnDisconnect
dedent|''
dedent|''
name|'def'
name|'dontNotifyOnDisconnect'
op|'('
name|'self'
op|','
name|'notifier'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a callback from list of disconnect callbacks."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'disconnects'
op|'.'
name|'remove'
op|'('
name|'notifier'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|localObjectForID
dedent|''
dedent|''
name|'def'
name|'localObjectForID'
op|'('
name|'self'
op|','
name|'luid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a local object for a locally unique ID.\n\n        @return: An object previously stored with L{registerReference} or\n            C{None} if there is no object which corresponds to the given\n            identifier.\n        """'
newline|'\n'
name|'lob'
op|'='
name|'self'
op|'.'
name|'localObjects'
op|'.'
name|'get'
op|'('
name|'luid'
op|')'
newline|'\n'
name|'if'
name|'lob'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'return'
name|'lob'
op|'.'
name|'object'
newline|'\n'
nl|'\n'
DECL|variable|maxBrokerRefsViolations
dedent|''
name|'maxBrokerRefsViolations'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|registerReference
name|'def'
name|'registerReference'
op|'('
name|'self'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get an ID for a local object.\n\n        Store a persistent reference to a local object and map its id()\n        to a generated, session-unique ID and return that ID.\n        """'
newline|'\n'
nl|'\n'
name|'assert'
name|'object'
name|'is'
name|'not'
name|'None'
newline|'\n'
name|'puid'
op|'='
name|'object'
op|'.'
name|'processUniqueID'
op|'('
op|')'
newline|'\n'
name|'luid'
op|'='
name|'self'
op|'.'
name|'luids'
op|'.'
name|'get'
op|'('
name|'puid'
op|')'
newline|'\n'
name|'if'
name|'luid'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'localObjects'
op|')'
op|'>'
name|'MAX_BROKER_REFS'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'maxBrokerRefsViolations'
op|'='
name|'self'
op|'.'
name|'maxBrokerRefsViolations'
op|'+'
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'maxBrokerRefsViolations'
op|'>'
number|'3'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'Error'
op|'('
string|'"Maximum PB reference count exceeded.  "'
nl|'\n'
string|'"Goodbye."'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'Error'
op|'('
string|'"Maximum PB reference count exceeded."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'luid'
op|'='
name|'self'
op|'.'
name|'newLocalID'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'localObjects'
op|'['
name|'luid'
op|']'
op|'='
name|'Local'
op|'('
name|'object'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'luids'
op|'['
name|'puid'
op|']'
op|'='
name|'luid'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'localObjects'
op|'['
name|'luid'
op|']'
op|'.'
name|'incref'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'luid'
newline|'\n'
nl|'\n'
DECL|member|setNameForLocal
dedent|''
name|'def'
name|'setNameForLocal'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Store a special (string) ID for this object.\n\n        This is how you specify a \'base\' set of objects that the remote\n        protocol can connect to.\n        """'
newline|'\n'
name|'assert'
name|'object'
name|'is'
name|'not'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'localObjects'
op|'['
name|'name'
op|']'
op|'='
name|'Local'
op|'('
name|'object'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remoteForName
dedent|''
name|'def'
name|'remoteForName'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns an object from the remote name mapping.\n\n        Note that this does not check the validity of the name, only\n        creates a translucent reference for it.\n        """'
newline|'\n'
name|'return'
name|'RemoteReference'
op|'('
name|'None'
op|','
name|'self'
op|','
name|'name'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cachedRemotelyAs
dedent|''
name|'def'
name|'cachedRemotelyAs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'incref'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns an ID that says what this instance is cached as remotely, or C{None} if it\'s not.\n        """'
newline|'\n'
nl|'\n'
name|'puid'
op|'='
name|'instance'
op|'.'
name|'processUniqueID'
op|'('
op|')'
newline|'\n'
name|'luid'
op|'='
name|'self'
op|'.'
name|'remotelyCachedLUIDs'
op|'.'
name|'get'
op|'('
name|'puid'
op|')'
newline|'\n'
name|'if'
op|'('
name|'luid'
name|'is'
name|'not'
name|'None'
op|')'
name|'and'
op|'('
name|'incref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'remotelyCachedObjects'
op|'['
name|'luid'
op|']'
op|'.'
name|'incref'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'luid'
newline|'\n'
nl|'\n'
DECL|member|remotelyCachedForLUID
dedent|''
name|'def'
name|'remotelyCachedForLUID'
op|'('
name|'self'
op|','
name|'luid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns an instance which is cached remotely, with this LUID.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'remotelyCachedObjects'
op|'['
name|'luid'
op|']'
op|'.'
name|'object'
newline|'\n'
nl|'\n'
DECL|member|cacheRemotely
dedent|''
name|'def'
name|'cacheRemotely'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        XXX"""'
newline|'\n'
name|'puid'
op|'='
name|'instance'
op|'.'
name|'processUniqueID'
op|'('
op|')'
newline|'\n'
name|'luid'
op|'='
name|'self'
op|'.'
name|'newLocalID'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'remotelyCachedObjects'
op|')'
op|'>'
name|'MAX_BROKER_REFS'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'maxBrokerRefsViolations'
op|'='
name|'self'
op|'.'
name|'maxBrokerRefsViolations'
op|'+'
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'maxBrokerRefsViolations'
op|'>'
number|'3'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'Error'
op|'('
string|'"Maximum PB cache count exceeded.  "'
nl|'\n'
string|'"Goodbye."'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'Error'
op|'('
string|'"Maximum PB cache count exceeded."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'remotelyCachedLUIDs'
op|'['
name|'puid'
op|']'
op|'='
name|'luid'
newline|'\n'
comment|"# This table may not be necessary -- for now, it's to make sure that no"
nl|'\n'
comment|'# monkey business happens with id(instance)'
nl|'\n'
name|'self'
op|'.'
name|'remotelyCachedObjects'
op|'['
name|'luid'
op|']'
op|'='
name|'Local'
op|'('
name|'instance'
op|','
name|'self'
op|'.'
name|'serializingPerspective'
op|')'
newline|'\n'
name|'return'
name|'luid'
newline|'\n'
nl|'\n'
DECL|member|cacheLocally
dedent|''
name|'def'
name|'cacheLocally'
op|'('
name|'self'
op|','
name|'cid'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(internal)\n\n        Store a non-filled-out cached instance locally.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'locallyCachedObjects'
op|'['
name|'cid'
op|']'
op|'='
name|'instance'
newline|'\n'
nl|'\n'
DECL|member|cachedLocallyAs
dedent|''
name|'def'
name|'cachedLocallyAs'
op|'('
name|'self'
op|','
name|'cid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'locallyCachedObjects'
op|'['
name|'cid'
op|']'
newline|'\n'
name|'return'
name|'instance'
newline|'\n'
nl|'\n'
DECL|member|serialize
dedent|''
name|'def'
name|'serialize'
op|'('
name|'self'
op|','
name|'object'
op|','
name|'perspective'
op|'='
name|'None'
op|','
name|'method'
op|'='
name|'None'
op|','
name|'args'
op|'='
name|'None'
op|','
name|'kw'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Jelly an object according to the remote security rules for this broker.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'object'
op|','
name|'defer'
op|'.'
name|'Deferred'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'object'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'serialize'
op|','
name|'lambda'
name|'x'
op|':'
name|'x'
op|','
nl|'\n'
name|'callbackKeywords'
op|'='
op|'{'
nl|'\n'
string|"'perspective'"
op|':'
name|'perspective'
op|','
nl|'\n'
string|"'method'"
op|':'
name|'method'
op|','
nl|'\n'
string|"'args'"
op|':'
name|'args'
op|','
nl|'\n'
string|"'kw'"
op|':'
name|'kw'
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'object'
newline|'\n'
nl|'\n'
comment|'# XXX This call is NOT REENTRANT and testing for reentrancy is just'
nl|'\n'
comment|"# crazy, so it likely won't be.  Don't ever write methods that call the"
nl|'\n'
comment|"# broker's serialize() method recursively (e.g. sending a method call"
nl|'\n'
comment|'# from within a getState (this causes concurrency problems anyway so'
nl|'\n'
comment|"# you really, really shouldn't do it))"
nl|'\n'
nl|'\n'
comment|'# self.jellier = _NetJellier(self)'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'serializingPerspective'
op|'='
name|'perspective'
newline|'\n'
name|'self'
op|'.'
name|'jellyMethod'
op|'='
name|'method'
newline|'\n'
name|'self'
op|'.'
name|'jellyArgs'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'jellyKw'
op|'='
name|'kw'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'jelly'
op|'('
name|'object'
op|','
name|'self'
op|'.'
name|'security'
op|','
name|'None'
op|','
name|'self'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'serializingPerspective'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'jellyMethod'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'jellyArgs'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'jellyKw'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|unserialize
dedent|''
dedent|''
name|'def'
name|'unserialize'
op|'('
name|'self'
op|','
name|'sexp'
op|','
name|'perspective'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unjelly an sexp according to the local security rules for this broker.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'unserializingPerspective'
op|'='
name|'perspective'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'unjelly'
op|'('
name|'sexp'
op|','
name|'self'
op|'.'
name|'security'
op|','
name|'None'
op|','
name|'self'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unserializingPerspective'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|newLocalID
dedent|''
dedent|''
name|'def'
name|'newLocalID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate a new LUID.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'currentLocalID'
op|'='
name|'self'
op|'.'
name|'currentLocalID'
op|'+'
number|'1'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'currentLocalID'
newline|'\n'
nl|'\n'
DECL|member|newRequestID
dedent|''
name|'def'
name|'newRequestID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate a new request ID.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'currentRequestID'
op|'='
name|'self'
op|'.'
name|'currentRequestID'
op|'+'
number|'1'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'currentRequestID'
newline|'\n'
nl|'\n'
DECL|member|_sendMessage
dedent|''
name|'def'
name|'_sendMessage'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'perspective'
op|','
name|'objectID'
op|','
name|'message'
op|','
name|'args'
op|','
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pbc'
op|'='
name|'None'
newline|'\n'
name|'pbe'
op|'='
name|'None'
newline|'\n'
name|'answerRequired'
op|'='
number|'1'
newline|'\n'
name|'if'
name|'kw'
op|'.'
name|'has_key'
op|'('
string|"'pbcallback'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pbc'
op|'='
name|'kw'
op|'['
string|"'pbcallback'"
op|']'
newline|'\n'
name|'del'
name|'kw'
op|'['
string|"'pbcallback'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'kw'
op|'.'
name|'has_key'
op|'('
string|"'pberrback'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pbe'
op|'='
name|'kw'
op|'['
string|"'pberrback'"
op|']'
newline|'\n'
name|'del'
name|'kw'
op|'['
string|"'pberrback'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'kw'
op|'.'
name|'has_key'
op|'('
string|"'pbanswer'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'assert'
op|'('
name|'not'
name|'pbe'
op|')'
name|'and'
op|'('
name|'not'
name|'pbc'
op|')'
op|','
string|'"You can\'t specify a no-answer requirement."'
newline|'\n'
name|'answerRequired'
op|'='
name|'kw'
op|'['
string|"'pbanswer'"
op|']'
newline|'\n'
name|'del'
name|'kw'
op|'['
string|"'pbanswer'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'disconnected'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'DeadReferenceError'
op|'('
string|'"Calling Stale Broker"'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'netArgs'
op|'='
name|'self'
op|'.'
name|'serialize'
op|'('
name|'args'
op|','
name|'perspective'
op|'='
name|'perspective'
op|','
name|'method'
op|'='
name|'message'
op|')'
newline|'\n'
name|'netKw'
op|'='
name|'self'
op|'.'
name|'serialize'
op|'('
name|'kw'
op|','
name|'perspective'
op|'='
name|'perspective'
op|','
name|'method'
op|'='
name|'message'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'requestID'
op|'='
name|'self'
op|'.'
name|'newRequestID'
op|'('
op|')'
newline|'\n'
name|'if'
name|'answerRequired'
op|':'
newline|'\n'
indent|'            '
name|'rval'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'waitingForAnswers'
op|'['
name|'requestID'
op|']'
op|'='
name|'rval'
newline|'\n'
name|'if'
name|'pbc'
name|'or'
name|'pbe'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'\'warning! using deprecated "pbcallback"\''
op|')'
newline|'\n'
name|'rval'
op|'.'
name|'addCallbacks'
op|'('
name|'pbc'
op|','
name|'pbe'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'rval'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendCall'
op|'('
name|'prefix'
op|'+'
string|'"message"'
op|','
name|'requestID'
op|','
name|'objectID'
op|','
name|'message'
op|','
name|'answerRequired'
op|','
name|'netArgs'
op|','
name|'netKw'
op|')'
newline|'\n'
name|'return'
name|'rval'
newline|'\n'
nl|'\n'
DECL|member|proto_message
dedent|''
name|'def'
name|'proto_message'
op|'('
name|'self'
op|','
name|'requestID'
op|','
name|'objectID'
op|','
name|'message'
op|','
name|'answerRequired'
op|','
name|'netArgs'
op|','
name|'netKw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_recvMessage'
op|'('
name|'self'
op|'.'
name|'localObjectForID'
op|','
name|'requestID'
op|','
name|'objectID'
op|','
name|'message'
op|','
name|'answerRequired'
op|','
name|'netArgs'
op|','
name|'netKw'
op|')'
newline|'\n'
DECL|member|proto_cachemessage
dedent|''
name|'def'
name|'proto_cachemessage'
op|'('
name|'self'
op|','
name|'requestID'
op|','
name|'objectID'
op|','
name|'message'
op|','
name|'answerRequired'
op|','
name|'netArgs'
op|','
name|'netKw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_recvMessage'
op|'('
name|'self'
op|'.'
name|'cachedLocallyAs'
op|','
name|'requestID'
op|','
name|'objectID'
op|','
name|'message'
op|','
name|'answerRequired'
op|','
name|'netArgs'
op|','
name|'netKw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_recvMessage
dedent|''
name|'def'
name|'_recvMessage'
op|'('
name|'self'
op|','
name|'findObjMethod'
op|','
name|'requestID'
op|','
name|'objectID'
op|','
name|'message'
op|','
name|'answerRequired'
op|','
name|'netArgs'
op|','
name|'netKw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Received a message-send.\n\n        Look up message based on object, unserialize the arguments, and\n        invoke it with args, and send an \'answer\' or \'error\' response.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'object'
op|'='
name|'findObjMethod'
op|'('
name|'objectID'
op|')'
newline|'\n'
name|'if'
name|'object'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Error'
op|'('
string|'"Invalid Object ID"'
op|')'
newline|'\n'
dedent|''
name|'netResult'
op|'='
name|'object'
op|'.'
name|'remoteMessageReceived'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'netArgs'
op|','
name|'netKw'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Error'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'answerRequired'
op|':'
newline|'\n'
comment|'# If the error is Jellyable or explicitly allowed via our'
nl|'\n'
comment|'# security options, send it back and let the code on the'
nl|'\n'
comment|"# other end deal with unjellying.  If it isn't Jellyable,"
nl|'\n'
comment|'# wrap it in a CopyableFailure, which ensures it can be'
nl|'\n'
comment|'# unjellied on the other end.  We have to do this because'
nl|'\n'
comment|'# all errors must be sent back.'
nl|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'e'
op|','
name|'Jellyable'
op|')'
name|'or'
name|'self'
op|'.'
name|'security'
op|'.'
name|'isClassAllowed'
op|'('
name|'e'
op|'.'
name|'__class__'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_sendError'
op|'('
name|'e'
op|','
name|'requestID'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_sendError'
op|'('
name|'CopyableFailure'
op|'('
name|'e'
op|')'
op|','
name|'requestID'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'answerRequired'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Peer will receive following PB traceback:"'
op|','
name|'isError'
op|'='
name|'True'
op|')'
newline|'\n'
name|'f'
op|'='
name|'CopyableFailure'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_sendError'
op|'('
name|'f'
op|','
name|'requestID'
op|')'
newline|'\n'
dedent|''
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'answerRequired'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'netResult'
op|','
name|'defer'
op|'.'
name|'Deferred'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'args'
op|'='
op|'('
name|'requestID'
op|','
op|')'
newline|'\n'
name|'netResult'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_sendAnswer'
op|','
name|'self'
op|'.'
name|'_sendFailureOrError'
op|','
nl|'\n'
name|'callbackArgs'
op|'='
name|'args'
op|','
name|'errbackArgs'
op|'='
name|'args'
op|')'
newline|'\n'
comment|'# XXX Should this be done somewhere else?'
nl|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_sendAnswer'
op|'('
name|'netResult'
op|','
name|'requestID'
op|')'
newline|'\n'
comment|'##'
nl|'\n'
comment|'# success'
nl|'\n'
comment|'##'
nl|'\n'
nl|'\n'
DECL|member|_sendAnswer
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_sendAnswer'
op|'('
name|'self'
op|','
name|'netResult'
op|','
name|'requestID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(internal) Send an answer to a previously sent message.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sendCall'
op|'('
string|'"answer"'
op|','
name|'requestID'
op|','
name|'netResult'
op|')'
newline|'\n'
nl|'\n'
DECL|member|proto_answer
dedent|''
name|'def'
name|'proto_answer'
op|'('
name|'self'
op|','
name|'requestID'
op|','
name|'netResult'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(internal) Got an answer to a previously sent message.\n\n        Look up the appropriate callback and call it.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'waitingForAnswers'
op|'['
name|'requestID'
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'waitingForAnswers'
op|'['
name|'requestID'
op|']'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'self'
op|'.'
name|'unserialize'
op|'('
name|'netResult'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'##'
nl|'\n'
comment|'# failure'
nl|'\n'
comment|'##'
nl|'\n'
DECL|member|_sendFailureOrError
dedent|''
name|'def'
name|'_sendFailureOrError'
op|'('
name|'self'
op|','
name|'fail'
op|','
name|'requestID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call L{_sendError} or L{_sendFailure}, depending on whether C{fail}\n        represents an L{Error} subclass or not.\n        """'
newline|'\n'
name|'if'
name|'fail'
op|'.'
name|'check'
op|'('
name|'Error'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_sendFailure'
op|'('
name|'fail'
op|','
name|'requestID'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_sendError'
op|'('
name|'fail'
op|','
name|'requestID'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_sendFailure
dedent|''
dedent|''
name|'def'
name|'_sendFailure'
op|'('
name|'self'
op|','
name|'fail'
op|','
name|'requestID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Log error and then send it."""'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Peer will receive following PB traceback:"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'fail'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_sendError'
op|'('
name|'fail'
op|','
name|'requestID'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_sendError
dedent|''
name|'def'
name|'_sendError'
op|'('
name|'self'
op|','
name|'fail'
op|','
name|'requestID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(internal) Send an error for a previously sent message.\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'fail'
op|','
name|'failure'
op|'.'
name|'Failure'
op|')'
op|':'
newline|'\n'
comment|'# If the failures value is jellyable or allowed through security,'
nl|'\n'
comment|'# send the value'
nl|'\n'
indent|'            '
name|'if'
op|'('
name|'isinstance'
op|'('
name|'fail'
op|'.'
name|'value'
op|','
name|'Jellyable'
op|')'
name|'or'
nl|'\n'
name|'self'
op|'.'
name|'security'
op|'.'
name|'isClassAllowed'
op|'('
name|'fail'
op|'.'
name|'value'
op|'.'
name|'__class__'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'fail'
op|'='
name|'fail'
op|'.'
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'isinstance'
op|'('
name|'fail'
op|','
name|'CopyableFailure'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'fail'
op|'='
name|'failure2Copyable'
op|'('
name|'fail'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'unsafeTracebacks'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'fail'
op|','
name|'CopyableFailure'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fail'
op|'.'
name|'unsafeTracebacks'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'unsafeTracebacks'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendCall'
op|'('
string|'"error"'
op|','
name|'requestID'
op|','
name|'self'
op|'.'
name|'serialize'
op|'('
name|'fail'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|proto_error
dedent|''
name|'def'
name|'proto_error'
op|'('
name|'self'
op|','
name|'requestID'
op|','
name|'fail'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(internal) Deal with an error.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'waitingForAnswers'
op|'['
name|'requestID'
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'waitingForAnswers'
op|'['
name|'requestID'
op|']'
newline|'\n'
name|'d'
op|'.'
name|'errback'
op|'('
name|'self'
op|'.'
name|'unserialize'
op|'('
name|'fail'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'##'
nl|'\n'
comment|'# refcounts'
nl|'\n'
comment|'##'
nl|'\n'
nl|'\n'
DECL|member|sendDecRef
dedent|''
name|'def'
name|'sendDecRef'
op|'('
name|'self'
op|','
name|'objectID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(internal) Send a DECREF directive.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sendCall'
op|'('
string|'"decref"'
op|','
name|'objectID'
op|')'
newline|'\n'
nl|'\n'
DECL|member|proto_decref
dedent|''
name|'def'
name|'proto_decref'
op|'('
name|'self'
op|','
name|'objectID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(internal) Decrement the reference count of an object.\n\n        If the reference count is zero, it will free the reference to this\n        object.\n        """'
newline|'\n'
name|'refs'
op|'='
name|'self'
op|'.'
name|'localObjects'
op|'['
name|'objectID'
op|']'
op|'.'
name|'decref'
op|'('
op|')'
newline|'\n'
name|'if'
name|'refs'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'puid'
op|'='
name|'self'
op|'.'
name|'localObjects'
op|'['
name|'objectID'
op|']'
op|'.'
name|'object'
op|'.'
name|'processUniqueID'
op|'('
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'luids'
op|'['
name|'puid'
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'localObjects'
op|'['
name|'objectID'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_localCleanup'
op|'.'
name|'pop'
op|'('
name|'puid'
op|','
name|'lambda'
op|':'
name|'None'
op|')'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'##'
nl|'\n'
comment|'# caching'
nl|'\n'
comment|'##'
nl|'\n'
nl|'\n'
DECL|member|decCacheRef
dedent|''
dedent|''
name|'def'
name|'decCacheRef'
op|'('
name|'self'
op|','
name|'objectID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(internal) Send a DECACHE directive.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sendCall'
op|'('
string|'"decache"'
op|','
name|'objectID'
op|')'
newline|'\n'
nl|'\n'
DECL|member|proto_decache
dedent|''
name|'def'
name|'proto_decache'
op|'('
name|'self'
op|','
name|'objectID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(internal) Decrement the reference count of a cached object.\n\n        If the reference count is zero, free the reference, then send an\n        \'uncached\' directive.\n        """'
newline|'\n'
name|'refs'
op|'='
name|'self'
op|'.'
name|'remotelyCachedObjects'
op|'['
name|'objectID'
op|']'
op|'.'
name|'decref'
op|'('
op|')'
newline|'\n'
comment|"# log.msg('decaching: %s #refs: %s' % (objectID, refs))"
nl|'\n'
name|'if'
name|'refs'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'lobj'
op|'='
name|'self'
op|'.'
name|'remotelyCachedObjects'
op|'['
name|'objectID'
op|']'
newline|'\n'
name|'cacheable'
op|'='
name|'lobj'
op|'.'
name|'object'
newline|'\n'
name|'perspective'
op|'='
name|'lobj'
op|'.'
name|'perspective'
newline|'\n'
comment|'# TODO: force_decache needs to be able to force-invalidate a'
nl|'\n'
comment|'# cacheable reference.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'cacheable'
op|'.'
name|'stoppedObserving'
op|'('
name|'perspective'
op|','
name|'RemoteCacheObserver'
op|'('
name|'self'
op|','
name|'cacheable'
op|','
name|'perspective'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'deferr'
op|'('
op|')'
newline|'\n'
dedent|''
name|'puid'
op|'='
name|'cacheable'
op|'.'
name|'processUniqueID'
op|'('
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'remotelyCachedLUIDs'
op|'['
name|'puid'
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'remotelyCachedObjects'
op|'['
name|'objectID'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sendCall'
op|'('
string|'"uncache"'
op|','
name|'objectID'
op|')'
newline|'\n'
nl|'\n'
DECL|member|proto_uncache
dedent|''
dedent|''
name|'def'
name|'proto_uncache'
op|'('
name|'self'
op|','
name|'objectID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""(internal) Tell the client it is now OK to uncache an object.\n        """'
newline|'\n'
comment|'# log.msg("uncaching locally %d" % objectID)'
nl|'\n'
name|'obj'
op|'='
name|'self'
op|'.'
name|'locallyCachedObjects'
op|'['
name|'objectID'
op|']'
newline|'\n'
name|'obj'
op|'.'
name|'broker'
op|'='
name|'None'
newline|'\n'
comment|'##         def reallyDel(obj=obj):'
nl|'\n'
comment|'##             obj.__really_del__()'
nl|'\n'
comment|'##         obj.__del__ = reallyDel'
nl|'\n'
name|'del'
name|'self'
op|'.'
name|'locallyCachedObjects'
op|'['
name|'objectID'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|respond
dedent|''
dedent|''
name|'def'
name|'respond'
op|'('
name|'challenge'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Respond to a challenge.\n\n    This is useful for challenge/response authentication.\n    """'
newline|'\n'
name|'m'
op|'='
name|'md5'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'password'
op|')'
newline|'\n'
name|'hashedPassword'
op|'='
name|'m'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
name|'m'
op|'='
name|'md5'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'hashedPassword'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'update'
op|'('
name|'challenge'
op|')'
newline|'\n'
name|'doubleHashedPassword'
op|'='
name|'m'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
name|'return'
name|'doubleHashedPassword'
newline|'\n'
nl|'\n'
DECL|function|challenge
dedent|''
name|'def'
name|'challenge'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""I return some random data."""'
newline|'\n'
name|'crap'
op|'='
string|"''"
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
name|'random'
op|'.'
name|'randrange'
op|'('
number|'15'
op|','
number|'25'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'crap'
op|'='
name|'crap'
op|'+'
name|'chr'
op|'('
name|'random'
op|'.'
name|'randint'
op|'('
number|'65'
op|','
number|'90'
op|')'
op|')'
newline|'\n'
dedent|''
name|'crap'
op|'='
name|'md5'
op|'('
name|'crap'
op|')'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
name|'return'
name|'crap'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PBClientFactory
dedent|''
name|'class'
name|'PBClientFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Client factory for PB brokers.\n\n    As with all client factories, use with reactor.connectTCP/SSL/etc..\n    getPerspective and getRootObject can be called either before or\n    after the connect.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'Broker'
newline|'\n'
DECL|variable|unsafeTracebacks
name|'unsafeTracebacks'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'unsafeTracebacks'
op|'='
name|'False'
op|','
name|'security'
op|'='
name|'globalSecurity'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param unsafeTracebacks: if set, tracebacks for exceptions will be sent\n            over the wire.\n        @type unsafeTracebacks: C{bool}\n\n        @param security: security options used by the broker, default to\n            C{globalSecurity}.\n        @type security: L{twisted.spread.jelly.SecurityOptions}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'unsafeTracebacks'
op|'='
name|'unsafeTracebacks'
newline|'\n'
name|'self'
op|'.'
name|'security'
op|'='
name|'security'
newline|'\n'
name|'self'
op|'.'
name|'_reset'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build the broker instance, passing the security options to it.\n        """'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'('
name|'isClient'
op|'='
name|'True'
op|','
name|'security'
op|'='
name|'self'
op|'.'
name|'security'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_reset
dedent|''
name|'def'
name|'_reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'rootObjectRequests'
op|'='
op|'['
op|']'
comment|'# list of deferred'
newline|'\n'
name|'self'
op|'.'
name|'_broker'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_root'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_failAll
dedent|''
name|'def'
name|'_failAll'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'deferreds'
op|'='
name|'self'
op|'.'
name|'rootObjectRequests'
newline|'\n'
name|'self'
op|'.'
name|'_reset'
op|'('
op|')'
newline|'\n'
name|'for'
name|'d'
name|'in'
name|'deferreds'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
dedent|''
dedent|''
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_failAll'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionLost
dedent|''
name|'def'
name|'clientConnectionLost'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|','
name|'reconnecting'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reconnecting subclasses should call with reconnecting=1."""'
newline|'\n'
name|'if'
name|'reconnecting'
op|':'
newline|'\n'
comment|'# any pending requests will go to next connection attempt'
nl|'\n'
comment|"# so we don't fail them."
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_broker'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_root'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_failAll'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionMade
dedent|''
dedent|''
name|'def'
name|'clientConnectionMade'
op|'('
name|'self'
op|','
name|'broker'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_broker'
op|'='
name|'broker'
newline|'\n'
name|'self'
op|'.'
name|'_root'
op|'='
name|'broker'
op|'.'
name|'remoteForName'
op|'('
string|'"root"'
op|')'
newline|'\n'
name|'ds'
op|'='
name|'self'
op|'.'
name|'rootObjectRequests'
newline|'\n'
name|'self'
op|'.'
name|'rootObjectRequests'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'d'
name|'in'
name|'ds'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'callback'
op|'('
name|'self'
op|'.'
name|'_root'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getRootObject
dedent|''
dedent|''
name|'def'
name|'getRootObject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get root object of remote PB server.\n\n        @return: Deferred of the root object.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_broker'
name|'and'
name|'not'
name|'self'
op|'.'
name|'_broker'
op|'.'
name|'disconnected'
op|':'
newline|'\n'
indent|'           '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'self'
op|'.'
name|'_root'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rootObjectRequests'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|disconnect
dedent|''
name|'def'
name|'disconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""If the factory is connected, close the connection.\n\n        Note that if you set up the factory to reconnect, you will need to\n        implement extra logic to prevent automatic reconnection after this\n        is called.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_broker'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_broker'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbSendUsername
dedent|''
dedent|''
name|'def'
name|'_cbSendUsername'
op|'('
name|'self'
op|','
name|'root'
op|','
name|'username'
op|','
name|'password'
op|','
name|'client'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'root'
op|'.'
name|'callRemote'
op|'('
string|'"login"'
op|','
name|'username'
op|')'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_cbResponse'
op|','
name|'password'
op|','
name|'client'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cbResponse
dedent|''
name|'def'
name|'_cbResponse'
op|'('
name|'self'
op|','
op|'('
name|'challenge'
op|','
name|'challenger'
op|')'
op|','
name|'password'
op|','
name|'client'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'challenger'
op|'.'
name|'callRemote'
op|'('
string|'"respond"'
op|','
name|'respond'
op|'('
name|'challenge'
op|','
name|'password'
op|')'
op|','
name|'client'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbLoginAnonymous
dedent|''
name|'def'
name|'_cbLoginAnonymous'
op|'('
name|'self'
op|','
name|'root'
op|','
name|'client'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Attempt an anonymous login on the given remote root object.\n\n        @type root: L{RemoteReference}\n        @param root: The object on which to attempt the login, most likely\n            returned by a call to L{PBClientFactory.getRootObject}.\n\n        @param client: A jellyable object which will be used as the I{mind}\n            parameter for the login attempt.\n\n        @rtype: L{Deferred}\n        @return: A L{Deferred} which will be called back with a\n            L{RemoteReference} to an avatar when anonymous login succeeds, or\n            which will errback if anonymous login fails.\n        """'
newline|'\n'
name|'return'
name|'root'
op|'.'
name|'callRemote'
op|'('
string|'"loginAnonymous"'
op|','
name|'client'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|login
dedent|''
name|'def'
name|'login'
op|'('
name|'self'
op|','
name|'credentials'
op|','
name|'client'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Login and get perspective from remote PB server.\n\n        Currently the following credentials are supported::\n\n            L{twisted.cred.credentials.IUsernamePassword}\n            L{twisted.cred.credentials.IAnonymous}\n\n        @rtype: L{Deferred}\n        @return: A L{Deferred} which will be called back with a\n            L{RemoteReference} for the avatar logged in to, or which will\n            errback if login fails.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'getRootObject'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'IAnonymous'
op|'.'
name|'providedBy'
op|'('
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbLoginAnonymous'
op|','
name|'client'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_cbSendUsername'
op|','
name|'credentials'
op|'.'
name|'username'
op|','
nl|'\n'
name|'credentials'
op|'.'
name|'password'
op|','
name|'client'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PBServerFactory
dedent|''
dedent|''
name|'class'
name|'PBServerFactory'
op|'('
name|'protocol'
op|'.'
name|'ServerFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Server factory for perspective broker.\n\n    Login is done using a Portal object, whose realm is expected to return\n    avatars implementing IPerspective. The credential checkers in the portal\n    should accept IUsernameHashedPassword or IUsernameMD5Password.\n\n    Alternatively, any object providing or adaptable to L{IPBRoot} can be\n    used instead of a portal to provide the root object of the PB server.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|unsafeTracebacks
name|'unsafeTracebacks'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# object broker factory'
nl|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'Broker'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'root'
op|','
name|'unsafeTracebacks'
op|'='
name|'False'
op|','
name|'security'
op|'='
name|'globalSecurity'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param root: factory providing the root Referenceable used by the broker.\n        @type root: object providing or adaptable to L{IPBRoot}.\n\n        @param unsafeTracebacks: if set, tracebacks for exceptions will be sent\n            over the wire.\n        @type unsafeTracebacks: C{bool}\n\n        @param security: security options used by the broker, default to\n            C{globalSecurity}.\n        @type security: L{twisted.spread.jelly.SecurityOptions}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'root'
op|'='
name|'IPBRoot'
op|'('
name|'root'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'unsafeTracebacks'
op|'='
name|'unsafeTracebacks'
newline|'\n'
name|'self'
op|'.'
name|'security'
op|'='
name|'security'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a Broker attached to the factory (as the service provider).\n        """'
newline|'\n'
name|'proto'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'('
name|'isClient'
op|'='
name|'False'
op|','
name|'security'
op|'='
name|'self'
op|'.'
name|'security'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'proto'
op|'.'
name|'setNameForLocal'
op|'('
string|'"root"'
op|','
name|'self'
op|'.'
name|'root'
op|'.'
name|'rootObject'
op|'('
name|'proto'
op|')'
op|')'
newline|'\n'
name|'return'
name|'proto'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionMade
dedent|''
name|'def'
name|'clientConnectionMade'
op|'('
name|'self'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
comment|'# XXX does this method make any sense?'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IUsernameMD5Password
dedent|''
dedent|''
name|'class'
name|'IUsernameMD5Password'
op|'('
name|'ICredentials'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I encapsulate a username and a hashed password.\n\n    This credential is used for username/password over PB. CredentialCheckers\n    which check this kind of credential must store the passwords in plaintext\n    form or as a MD5 digest.\n\n    @type username: C{str} or C{Deferred}\n    @ivar username: The username associated with these credentials.\n    """'
newline|'\n'
nl|'\n'
DECL|member|checkPassword
name|'def'
name|'checkPassword'
op|'('
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Validate these credentials against the correct password.\n\n        @type password: C{str}\n        @param password: The correct, plaintext password against which to\n            check.\n\n        @rtype: C{bool} or L{Deferred}\n        @return: C{True} if the credentials represented by this object match the\n            given password, C{False} if they do not, or a L{Deferred} which will\n            be called back with one of these values.\n        """'
newline|'\n'
nl|'\n'
DECL|member|checkMD5Password
dedent|''
name|'def'
name|'checkMD5Password'
op|'('
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Validate these credentials against the correct MD5 digest of the\n        password.\n\n        @type password: C{str}\n        @param password: The correct MD5 digest of a password against which to\n            check.\n\n        @rtype: C{bool} or L{Deferred}\n        @return: C{True} if the credentials represented by this object match the\n            given digest, C{False} if they do not, or a L{Deferred} which will\n            be called back with one of these values.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_PortalRoot
dedent|''
dedent|''
name|'class'
name|'_PortalRoot'
op|':'
newline|'\n'
indent|'    '
string|'"""Root object, used to login to portal."""'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IPBRoot'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'portal'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'portal'
op|'='
name|'portal'
newline|'\n'
nl|'\n'
DECL|member|rootObject
dedent|''
name|'def'
name|'rootObject'
op|'('
name|'self'
op|','
name|'broker'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_PortalWrapper'
op|'('
name|'self'
op|'.'
name|'portal'
op|','
name|'broker'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'registerAdapter'
op|'('
name|'_PortalRoot'
op|','
name|'Portal'
op|','
name|'IPBRoot'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_JellyableAvatarMixin
name|'class'
name|'_JellyableAvatarMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper class for code which deals with avatars which PB must be capable of\n    sending to a peer.\n    """'
newline|'\n'
DECL|member|_cbLogin
name|'def'
name|'_cbLogin'
op|'('
name|'self'
op|','
op|'('
name|'interface'
op|','
name|'avatar'
op|','
name|'logout'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Ensure that the avatar to be returned to the client is jellyable and\n        set up disconnection notification to call the realm\'s logout object.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'IJellyable'
op|'.'
name|'providedBy'
op|'('
name|'avatar'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'avatar'
op|'='
name|'AsReferenceable'
op|'('
name|'avatar'
op|','
string|'"perspective"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'puid'
op|'='
name|'avatar'
op|'.'
name|'processUniqueID'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|dereferenceLogout
name|'def'
name|'dereferenceLogout'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'broker'
op|'.'
name|'dontNotifyOnDisconnect'
op|'('
name|'logout'
op|')'
newline|'\n'
name|'logout'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'broker'
op|'.'
name|'_localCleanup'
op|'['
name|'puid'
op|']'
op|'='
name|'dereferenceLogout'
newline|'\n'
comment|'# No special helper function is necessary for notifyOnDisconnect'
nl|'\n'
comment|"# because dereference callbacks won't be invoked if the connection is"
nl|'\n'
comment|"# randomly dropped.  I'm not sure those are ideal semantics, but this"
nl|'\n'
comment|'# is the only user of the (private) API at the moment and it works just'
nl|'\n'
comment|'# fine as things are. -exarkun'
nl|'\n'
name|'self'
op|'.'
name|'broker'
op|'.'
name|'notifyOnDisconnect'
op|'('
name|'logout'
op|')'
newline|'\n'
name|'return'
name|'avatar'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_PortalWrapper
dedent|''
dedent|''
name|'class'
name|'_PortalWrapper'
op|'('
name|'Referenceable'
op|','
name|'_JellyableAvatarMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Root Referenceable object, used to login to portal.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'portal'
op|','
name|'broker'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'portal'
op|'='
name|'portal'
newline|'\n'
name|'self'
op|'.'
name|'broker'
op|'='
name|'broker'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|remote_login
dedent|''
name|'def'
name|'remote_login'
op|'('
name|'self'
op|','
name|'username'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Start of username/password login.\n        """'
newline|'\n'
name|'c'
op|'='
name|'challenge'
op|'('
op|')'
newline|'\n'
name|'return'
name|'c'
op|','
name|'_PortalAuthChallenger'
op|'('
name|'self'
op|'.'
name|'portal'
op|','
name|'self'
op|'.'
name|'broker'
op|','
name|'username'
op|','
name|'c'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|remote_loginAnonymous
dedent|''
name|'def'
name|'remote_loginAnonymous'
op|'('
name|'self'
op|','
name|'mind'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Attempt an anonymous login.\n\n        @param mind: An object to use as the mind parameter to the portal login\n            call (possibly None).\n\n        @rtype: L{Deferred}\n        @return: A Deferred which will be called back with an avatar when login\n            succeeds or which will be errbacked if login fails somehow.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'portal'
op|'.'
name|'login'
op|'('
name|'Anonymous'
op|'('
op|')'
op|','
name|'mind'
op|','
name|'IPerspective'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbLogin'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_PortalAuthChallenger
dedent|''
dedent|''
name|'class'
name|'_PortalAuthChallenger'
op|'('
name|'Referenceable'
op|','
name|'_JellyableAvatarMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Called with response to password challenge.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IUsernameHashedPassword'
op|','
name|'IUsernameMD5Password'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'portal'
op|','
name|'broker'
op|','
name|'username'
op|','
name|'challenge'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'portal'
op|'='
name|'portal'
newline|'\n'
name|'self'
op|'.'
name|'broker'
op|'='
name|'broker'
newline|'\n'
name|'self'
op|'.'
name|'username'
op|'='
name|'username'
newline|'\n'
name|'self'
op|'.'
name|'challenge'
op|'='
name|'challenge'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|remote_respond
dedent|''
name|'def'
name|'remote_respond'
op|'('
name|'self'
op|','
name|'response'
op|','
name|'mind'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'response'
op|'='
name|'response'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'portal'
op|'.'
name|'login'
op|'('
name|'self'
op|','
name|'mind'
op|','
name|'IPerspective'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbLogin'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# IUsernameHashedPassword:'
nl|'\n'
DECL|member|checkPassword
dedent|''
name|'def'
name|'checkPassword'
op|'('
name|'self'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'checkMD5Password'
op|'('
name|'md5'
op|'('
name|'password'
op|')'
op|'.'
name|'digest'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# IUsernameMD5Password'
nl|'\n'
DECL|member|checkMD5Password
dedent|''
name|'def'
name|'checkMD5Password'
op|'('
name|'self'
op|','
name|'md5Password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'md'
op|'='
name|'md5'
op|'('
op|')'
newline|'\n'
name|'md'
op|'.'
name|'update'
op|'('
name|'md5Password'
op|')'
newline|'\n'
name|'md'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'challenge'
op|')'
newline|'\n'
name|'correct'
op|'='
name|'md'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'response'
op|'=='
name|'correct'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
nl|'\n'
comment|'# Everything from flavors is exposed publically here.'
nl|'\n'
string|"'IPBRoot'"
op|','
string|"'Serializable'"
op|','
string|"'Referenceable'"
op|','
string|"'NoSuchMethod'"
op|','
string|"'Root'"
op|','
nl|'\n'
string|"'ViewPoint'"
op|','
string|"'Viewable'"
op|','
string|"'Copyable'"
op|','
string|"'Jellyable'"
op|','
string|"'Cacheable'"
op|','
nl|'\n'
string|"'RemoteCopy'"
op|','
string|"'RemoteCache'"
op|','
string|"'RemoteCacheObserver'"
op|','
string|"'copyTags'"
op|','
nl|'\n'
string|"'setUnjellyableForClass'"
op|','
string|"'setUnjellyableFactoryForClass'"
op|','
nl|'\n'
string|"'setUnjellyableForClassTree'"
op|','
nl|'\n'
nl|'\n'
string|"'MAX_BROKER_REFS'"
op|','
string|"'portno'"
op|','
nl|'\n'
nl|'\n'
string|"'ProtocolError'"
op|','
string|"'DeadReferenceError'"
op|','
string|"'Error'"
op|','
string|"'PBConnectionLost'"
op|','
nl|'\n'
string|"'RemoteMethod'"
op|','
string|"'IPerspective'"
op|','
string|"'Avatar'"
op|','
string|"'AsReferenceable'"
op|','
nl|'\n'
string|"'RemoteReference'"
op|','
string|"'CopyableFailure'"
op|','
string|"'CopiedFailure'"
op|','
string|"'failure2Copyable'"
op|','
nl|'\n'
string|"'Broker'"
op|','
string|"'respond'"
op|','
string|"'challenge'"
op|','
string|"'PBClientFactory'"
op|','
string|"'PBServerFactory'"
op|','
nl|'\n'
string|"'IUsernameMD5Password'"
op|','
nl|'\n'
op|']'
newline|'\n'
endmarker|''
end_unit

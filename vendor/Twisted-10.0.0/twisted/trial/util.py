begin_unit
comment|'# -*- test-case-name: twisted.trial.test.test_util -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
string|'"""\nA collection of utility functions and classes, used internally by Trial.\n\nThis code is for Trial\'s internal use.  Do NOT use this code if you are writing\ntests.  It is subject to change at the Trial maintainer\'s whim.  There is\nnothing here in this module for you to use unless you are maintaining Trial.\n\nAny non-Trial Twisted code that uses this module will be shot.\n\nMaintainer: Jonathan Lange\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'traceback'
op|','
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'utils'
op|','
name|'interfaces'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'failure'
name|'import'
name|'Failure'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|DEFAULT_TIMEOUT
name|'DEFAULT_TIMEOUT'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
DECL|variable|DEFAULT_TIMEOUT_DURATION
name|'DEFAULT_TIMEOUT_DURATION'
op|'='
number|'120.0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FailureError
name|'class'
name|'FailureError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DEPRECATED in Twisted 8.0. This exception is never raised by Trial.\n\n    Wraps around a Failure so it can get re-raised as an Exception.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Exception'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'original'
op|'='
name|'failure'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DirtyReactorWarning
dedent|''
dedent|''
name|'class'
name|'DirtyReactorWarning'
op|'('
name|'Warning'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DEPRECATED in Twisted 8.0.\n\n    This warning is not used by Trial any more.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DirtyReactorError
dedent|''
name|'class'
name|'DirtyReactorError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DEPRECATED in Twisted 8.0. This is not used by Trial any more.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Exception'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'_getMessage'
op|'('
name|'msg'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_getMessage
dedent|''
name|'def'
name|'_getMessage'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|'"reactor left in unclean state, the following Selectables "'
nl|'\n'
string|'"were left over: %s"'
op|'%'
op|'('
name|'msg'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PendingTimedCallsError
dedent|''
dedent|''
name|'class'
name|'PendingTimedCallsError'
op|'('
name|'DirtyReactorError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DEPRECATED in Twisted 8.0. This is not used by Trial any more.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_getMessage
name|'def'
name|'_getMessage'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|'"pendingTimedCalls still pending (consider setting "'
nl|'\n'
string|'"twisted.internet.base.DelayedCall.debug = True): %s"'
op|'%'
op|'('
name|'msg'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DirtyReactorAggregateError
dedent|''
dedent|''
name|'class'
name|'DirtyReactorAggregateError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Passed to L{twisted.trial.itrial.IReporter.addError} when the reactor is\n    left in an unclean state after a test.\n\n    @ivar delayedCalls: The L{DelayedCall} objects which weren\'t cleaned up.\n    @ivar selectables: The selectables which weren\'t cleaned up.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'delayedCalls'
op|','
name|'selectables'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'delayedCalls'
op|'='
name|'delayedCalls'
newline|'\n'
name|'self'
op|'.'
name|'selectables'
op|'='
name|'selectables'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a multi-line message describing all of the unclean state.\n        """'
newline|'\n'
name|'msg'
op|'='
string|'"Reactor was unclean."'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'delayedCalls'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'+='
op|'('
string|'"\\nDelayedCalls: (set "'
nl|'\n'
string|'"twisted.internet.base.DelayedCall.debug = True to "'
nl|'\n'
string|'"debug)\\n"'
op|')'
newline|'\n'
name|'msg'
op|'+='
string|'"\\n"'
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'self'
op|'.'
name|'delayedCalls'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'selectables'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'+='
string|'"\\nSelectables:\\n"'
newline|'\n'
name|'msg'
op|'+='
string|'"\\n"'
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'self'
op|'.'
name|'selectables'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'msg'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Janitor
dedent|''
dedent|''
name|'class'
name|'_Janitor'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The guy that cleans up after you.\n\n    @ivar test: The L{TestCase} to report errors about.\n    @ivar result: The L{IReporter} to report errors to.\n    @ivar reactor: The reactor to use. If None, the global reactor\n        will be used.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'result'
op|','
name|'reactor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param test: See L{_Janitor.test}.\n        @param result: See L{_Janitor.result}.\n        @param reactor: See L{_Janitor.reactor}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'='
name|'test'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'result'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'='
name|'reactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|postCaseCleanup
dedent|''
name|'def'
name|'postCaseCleanup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called by L{unittest.TestCase} after a test to catch any logged errors\n        or pending L{DelayedCall}s.\n        """'
newline|'\n'
name|'calls'
op|'='
name|'self'
op|'.'
name|'_cleanPending'
op|'('
op|')'
newline|'\n'
name|'if'
name|'calls'
op|':'
newline|'\n'
indent|'            '
name|'aggregate'
op|'='
name|'DirtyReactorAggregateError'
op|'('
name|'calls'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'Failure'
op|'('
name|'aggregate'
op|')'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|postClassCleanup
dedent|''
name|'def'
name|'postClassCleanup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called by L{unittest.TestCase} after the last test in a C{TestCase}\n        subclass. Ensures the reactor is clean by murdering the threadpool,\n        catching any pending L{DelayedCall}s, open sockets etc.\n        """'
newline|'\n'
name|'selectables'
op|'='
name|'self'
op|'.'
name|'_cleanReactor'
op|'('
op|')'
newline|'\n'
name|'calls'
op|'='
name|'self'
op|'.'
name|'_cleanPending'
op|'('
op|')'
newline|'\n'
name|'if'
name|'selectables'
name|'or'
name|'calls'
op|':'
newline|'\n'
indent|'            '
name|'aggregate'
op|'='
name|'DirtyReactorAggregateError'
op|'('
name|'calls'
op|','
name|'selectables'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'Failure'
op|'('
name|'aggregate'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_cleanThreads'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getReactor
dedent|''
name|'def'
name|'_getReactor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get either the passed-in reactor or the global reactor.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'reactor'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'='
name|'self'
op|'.'
name|'reactor'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
dedent|''
name|'return'
name|'reactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cleanPending
dedent|''
name|'def'
name|'_cleanPending'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Cancel all pending calls and return their string representations.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'_getReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# flush short-range timers'
nl|'\n'
name|'reactor'
op|'.'
name|'iterate'
op|'('
number|'0'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'iterate'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'delayedCallStrings'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'p'
name|'in'
name|'reactor'
op|'.'
name|'getDelayedCalls'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'p'
op|'.'
name|'active'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'delayedString'
op|'='
name|'str'
op|'('
name|'p'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'print'
string|'"WEIRDNESS! pending timed call not active!"'
newline|'\n'
dedent|''
name|'delayedCallStrings'
op|'.'
name|'append'
op|'('
name|'delayedString'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'delayedCallStrings'
newline|'\n'
DECL|variable|_cleanPending
dedent|''
name|'_cleanPending'
op|'='
name|'utils'
op|'.'
name|'suppressWarnings'
op|'('
nl|'\n'
name|'_cleanPending'
op|','
op|'('
op|'('
string|"'ignore'"
op|','
op|')'
op|','
op|'{'
string|"'category'"
op|':'
name|'DeprecationWarning'
op|','
nl|'\n'
string|"'message'"
op|':'
nl|'\n'
string|"r'reactor\\.iterate cannot be used.*'"
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cleanThreads
name|'def'
name|'_cleanThreads'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reactor'
op|'='
name|'self'
op|'.'
name|'_getReactor'
op|'('
op|')'
newline|'\n'
name|'if'
name|'interfaces'
op|'.'
name|'IReactorThreads'
op|'.'
name|'providedBy'
op|'('
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'reactor'
op|'.'
name|'threadpool'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|'# Stop the threadpool now so that a new one is created. '
nl|'\n'
comment|'# This improves test isolation somewhat (although this is a'
nl|'\n'
comment|"# post class cleanup hook, so it's only isolating classes"
nl|'\n'
comment|'# from each other, not methods from each other).'
nl|'\n'
indent|'                '
name|'reactor'
op|'.'
name|'_stopThreadPool'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cleanReactor
dedent|''
dedent|''
dedent|''
name|'def'
name|'_cleanReactor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove all selectables from the reactor, kill any of them that were\n        processes, and return their string representation.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'self'
op|'.'
name|'_getReactor'
op|'('
op|')'
newline|'\n'
name|'selectableStrings'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'sel'
name|'in'
name|'reactor'
op|'.'
name|'removeAll'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'interfaces'
op|'.'
name|'IProcessTransport'
op|'.'
name|'providedBy'
op|'('
name|'sel'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'sel'
op|'.'
name|'signalProcess'
op|'('
string|"'KILL'"
op|')'
newline|'\n'
dedent|''
name|'selectableStrings'
op|'.'
name|'append'
op|'('
name|'repr'
op|'('
name|'sel'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'selectableStrings'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|excInfoOrFailureToExcInfo
dedent|''
dedent|''
name|'def'
name|'excInfoOrFailureToExcInfo'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Coerce a Failure to an _exc_info, if err is a Failure.\n\n    @param err: Either a tuple such as returned by L{sys.exc_info} or a\n        L{Failure} object.\n    @return: A tuple like the one returned by L{sys.exc_info}. e.g.\n        C{exception_type, exception_object, traceback_object}.\n    """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'err'
op|','
name|'Failure'
op|')'
op|':'
newline|'\n'
comment|'# Unwrap the Failure into a exc_info tuple.'
nl|'\n'
indent|'        '
name|'err'
op|'='
op|'('
name|'err'
op|'.'
name|'type'
op|','
name|'err'
op|'.'
name|'value'
op|','
name|'err'
op|'.'
name|'getTracebackObject'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'err'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|suppress
dedent|''
name|'def'
name|'suppress'
op|'('
name|'action'
op|'='
string|"'ignore'"
op|','
op|'**'
name|'kwarg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Sets up the .suppress tuple properly, pass options to this method as you\n    would the stdlib warnings.filterwarnings()\n\n    So, to use this with a .suppress magic attribute you would do the\n    following:\n\n      >>> from twisted.trial import unittest, util\n      >>> import warnings\n      >>>\n      >>> class TestFoo(unittest.TestCase):\n      ...     def testFooBar(self):\n      ...         warnings.warn("i am deprecated", DeprecationWarning)\n      ...     testFooBar.suppress = [util.suppress(message=\'i am deprecated\')]\n      ...\n      >>>\n\n    Note that as with the todo and timeout attributes: the module level\n    attribute acts as a default for the class attribute which acts as a default\n    for the method attribute. The suppress attribute can be overridden at any\n    level by specifying C{.suppress = []}\n    """'
newline|'\n'
name|'return'
op|'('
op|'('
name|'action'
op|','
op|')'
op|','
name|'kwarg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|profiled
dedent|''
name|'def'
name|'profiled'
op|'('
name|'f'
op|','
name|'outputFile'
op|')'
op|':'
newline|'\n'
DECL|function|_
indent|'    '
name|'def'
name|'_'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'sys'
op|'.'
name|'version_info'
op|'['
number|'0'
op|':'
number|'2'
op|']'
op|'!='
op|'('
number|'2'
op|','
number|'4'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'profile'
newline|'\n'
name|'prof'
op|'='
name|'profile'
op|'.'
name|'Profile'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'prof'
op|'.'
name|'runcall'
op|'('
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'prof'
op|'.'
name|'dump_stats'
op|'('
name|'outputFile'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'SystemExit'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'prof'
op|'.'
name|'print_stats'
op|'('
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'else'
op|':'
comment|'# use hotshot, profile is broken in 2.4'
newline|'\n'
indent|'            '
name|'import'
name|'hotshot'
op|'.'
name|'stats'
newline|'\n'
name|'prof'
op|'='
name|'hotshot'
op|'.'
name|'Profile'
op|'('
name|'outputFile'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'prof'
op|'.'
name|'runcall'
op|'('
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'stats'
op|'='
name|'hotshot'
op|'.'
name|'stats'
op|'.'
name|'load'
op|'('
name|'outputFile'
op|')'
newline|'\n'
name|'stats'
op|'.'
name|'strip_dirs'
op|'('
op|')'
newline|'\n'
name|'stats'
op|'.'
name|'sort_stats'
op|'('
string|"'cum'"
op|')'
comment|"# 'time'"
newline|'\n'
name|'stats'
op|'.'
name|'print_stats'
op|'('
number|'100'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'_'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|getPythonContainers
dedent|''
name|'def'
name|'getPythonContainers'
op|'('
name|'meth'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Walk up the Python tree from method \'meth\', finding its class, its module\n    and all containing packages."""'
newline|'\n'
name|'containers'
op|'='
op|'['
op|']'
newline|'\n'
name|'containers'
op|'.'
name|'append'
op|'('
name|'meth'
op|'.'
name|'im_class'
op|')'
newline|'\n'
name|'moduleName'
op|'='
name|'meth'
op|'.'
name|'im_class'
op|'.'
name|'__module__'
newline|'\n'
name|'while'
name|'moduleName'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'module'
op|'='
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'get'
op|'('
name|'moduleName'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'module'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'module'
op|'='
name|'__import__'
op|'('
name|'moduleName'
op|')'
newline|'\n'
dedent|''
name|'containers'
op|'.'
name|'append'
op|'('
name|'module'
op|')'
newline|'\n'
name|'moduleName'
op|'='
name|'getattr'
op|'('
name|'module'
op|','
string|"'__module__'"
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'containers'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_DEFAULT
dedent|''
name|'_DEFAULT'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
DECL|function|acquireAttribute
name|'def'
name|'acquireAttribute'
op|'('
name|'objects'
op|','
name|'attr'
op|','
name|'default'
op|'='
name|'_DEFAULT'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Go through the list \'objects\' sequentially until we find one which has\n    attribute \'attr\', then return the value of that attribute.  If not found,\n    return \'default\' if set, otherwise, raise AttributeError. """'
newline|'\n'
name|'for'
name|'obj'
name|'in'
name|'objects'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'obj'
op|','
name|'attr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'obj'
op|','
name|'attr'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'default'
name|'is'
name|'not'
name|'_DEFAULT'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'default'
newline|'\n'
dedent|''
name|'raise'
name|'AttributeError'
op|'('
string|"'attribute %r not found in %r'"
op|'%'
op|'('
name|'attr'
op|','
name|'objects'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|findObject
dedent|''
name|'def'
name|'findObject'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get a fully-named package, module, module-global object or attribute.\n    Forked from twisted.python.reflect.namedAny.\n\n    Returns a tuple of (bool, obj).  If bool is True, the named object exists\n    and is returned as obj.  If bool is False, the named object does not exist\n    and the value of obj is unspecified.\n    """'
newline|'\n'
name|'names'
op|'='
name|'name'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'topLevelPackage'
op|'='
name|'None'
newline|'\n'
name|'moduleNames'
op|'='
name|'names'
op|'['
op|':'
op|']'
newline|'\n'
name|'while'
name|'not'
name|'topLevelPackage'
op|':'
newline|'\n'
indent|'        '
name|'trialname'
op|'='
string|"'.'"
op|'.'
name|'join'
op|'('
name|'moduleNames'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'trialname'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'False'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'topLevelPackage'
op|'='
name|'__import__'
op|'('
name|'trialname'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
comment|'# if the ImportError happened in the module being imported,'
nl|'\n'
comment|'# this is a failure that should be handed to our caller.'
nl|'\n'
comment|'# count stack frames to tell the difference.'
nl|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'traceback'
op|'.'
name|'extract_tb'
op|'('
name|'exc_info'
op|'['
number|'2'
op|']'
op|')'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
comment|'# Clean up garbage left in sys.modules.'
nl|'\n'
indent|'                    '
name|'del'
name|'sys'
op|'.'
name|'modules'
op|'['
name|'trialname'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
comment|'# Python 2.4 has fixed this.  Yay!'
nl|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
name|'raise'
name|'exc_info'
op|'['
number|'0'
op|']'
op|','
name|'exc_info'
op|'['
number|'1'
op|']'
op|','
name|'exc_info'
op|'['
number|'2'
op|']'
newline|'\n'
dedent|''
name|'moduleNames'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'obj'
op|'='
name|'topLevelPackage'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'names'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'='
name|'getattr'
op|'('
name|'obj'
op|','
name|'n'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'False'
op|','
name|'obj'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'('
name|'True'
op|','
name|'obj'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_runSequentially
dedent|''
name|'def'
name|'_runSequentially'
op|'('
name|'callables'
op|','
name|'stopOnFirstError'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Run the given callables one after the other. If a callable returns a\n    Deferred, wait until it has finished before running the next callable.\n\n    @param callables: An iterable of callables that take no parameters.\n\n    @param stopOnFirstError: If True, then stop running callables as soon as\n        one raises an exception or fires an errback. False by default.\n\n    @return: A L{Deferred} that fires a list of C{(flag, value)} tuples. Each\n        tuple will be either C{(SUCCESS, <return value>)} or C{(FAILURE,\n        <Failure>)}.\n    """'
newline|'\n'
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'callables'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'f'
op|')'
newline|'\n'
name|'thing'
op|'='
name|'defer'
op|'.'
name|'waitForDeferred'
op|'('
name|'d'
op|')'
newline|'\n'
name|'yield'
name|'thing'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'results'
op|'.'
name|'append'
op|'('
op|'('
name|'defer'
op|'.'
name|'SUCCESS'
op|','
name|'thing'
op|'.'
name|'getResult'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'results'
op|'.'
name|'append'
op|'('
op|'('
name|'defer'
op|'.'
name|'FAILURE'
op|','
name|'Failure'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'if'
name|'stopOnFirstError'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'yield'
name|'results'
newline|'\n'
DECL|variable|_runSequentially
dedent|''
name|'_runSequentially'
op|'='
name|'defer'
op|'.'
name|'deferredGenerator'
op|'('
name|'_runSequentially'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
name|'__all__'
op|'='
op|'['
string|"'FailureError'"
op|','
string|"'DirtyReactorWarning'"
op|','
string|"'DirtyReactorError'"
op|','
nl|'\n'
string|"'PendingTimedCallsError'"
op|','
string|"'excInfoOrFailureToExcInfo'"
op|']'
newline|'\n'
endmarker|''
end_unit

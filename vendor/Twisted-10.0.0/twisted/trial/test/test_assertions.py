begin_unit
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details'
nl|'\n'
nl|'\n'
string|'"""\nTests for assertions provided by L{twisted.trial.unittest.TestCase}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'warnings'
op|','
name|'StringIO'
newline|'\n'
name|'from'
name|'pprint'
name|'import'
name|'pformat'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'reflect'
op|','
name|'failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'deprecate'
name|'import'
name|'deprecated'
op|','
name|'getVersionString'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'versions'
name|'import'
name|'Version'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'dsu'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
op|','
name|'runner'
op|','
name|'reporter'
newline|'\n'
nl|'\n'
DECL|class|MockEquality
name|'class'
name|'MockEquality'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"MockEquality(%s)"'
op|'%'
op|'('
name|'self'
op|'.'
name|'name'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'other'
op|','
string|"'name'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"%r not comparable to %r"'
op|'%'
op|'('
name|'other'
op|','
name|'self'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'name'
op|'['
number|'0'
op|']'
op|'=='
name|'other'
op|'.'
name|'name'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestAssertions
dedent|''
dedent|''
name|'class'
name|'TestAssertions'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for TestCase\'s assertion methods.  That is, failUnless*,\n    failIf*, assert*.\n\n    This is pretty paranoid.  Still, a certain paranoia is healthy if you\n    are testing a unit testing framework.\n    """'
newline|'\n'
nl|'\n'
DECL|class|FailingTest
name|'class'
name|'FailingTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_fails
indent|'        '
name|'def'
name|'test_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFail
dedent|''
dedent|''
name|'def'
name|'testFail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"failed"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'failureException'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'str'
op|'('
name|'e'
op|')'
op|'=='
string|"'failed'"
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
string|'"Exception had msg %s instead of %s"'
nl|'\n'
op|'%'
name|'str'
op|'('
name|'e'
op|')'
op|','
string|"'failed'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
string|'"Call to self.fail() didn\'t fail test"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failingException_fails
dedent|''
dedent|''
name|'def'
name|'test_failingException_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'test'
op|'='
name|'runner'
op|'.'
name|'TestLoader'
op|'('
op|')'
op|'.'
name|'loadClass'
op|'('
name|'TestAssertions'
op|'.'
name|'FailingTest'
op|')'
newline|'\n'
name|'io'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'result'
op|'.'
name|'errors'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'result'
op|'.'
name|'failures'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failIf
dedent|''
name|'def'
name|'test_failIf'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'notTrue'
name|'in'
op|'['
number|'0'
op|','
number|'0.0'
op|','
name|'False'
op|','
name|'None'
op|','
op|'('
op|')'
op|','
op|'['
op|']'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'notTrue'
op|','
string|'"failed on %r"'
op|'%'
op|'('
name|'notTrue'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'true'
name|'in'
op|'['
number|'1'
op|','
name|'True'
op|','
string|"'cat'"
op|','
op|'['
number|'1'
op|','
number|'2'
op|']'
op|','
op|'('
number|'3'
op|','
number|'4'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'true'
op|','
string|'"failed on %r"'
op|'%'
op|'('
name|'true'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'failureException'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|','
string|'"failed on %r"'
op|'%'
op|'('
name|'true'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Call to failIf(%r) didn\'t fail"'
op|'%'
op|'('
name|'true'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failUnless
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_failUnless'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'notTrue'
name|'in'
op|'['
number|'0'
op|','
number|'0.0'
op|','
name|'False'
op|','
name|'None'
op|','
op|'('
op|')'
op|','
op|'['
op|']'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'notTrue'
op|','
string|'"failed on %r"'
op|'%'
op|'('
name|'notTrue'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'failureException'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|','
string|'"failed on %r"'
op|'%'
op|'('
name|'notTrue'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Call to failUnless(%r) didn\'t fail"'
op|'%'
op|'('
name|'notTrue'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'true'
name|'in'
op|'['
number|'1'
op|','
name|'True'
op|','
string|"'cat'"
op|','
op|'['
number|'1'
op|','
number|'2'
op|']'
op|','
op|'('
number|'3'
op|','
number|'4'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'true'
op|','
string|'"failed on %r"'
op|'%'
op|'('
name|'true'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_testEqualPair
dedent|''
dedent|''
name|'def'
name|'_testEqualPair'
op|'('
name|'self'
op|','
name|'first'
op|','
name|'second'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'x'
op|'='
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'first'
op|','
name|'second'
op|')'
newline|'\n'
name|'if'
name|'x'
op|'!='
name|'first'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"failUnlessEqual should return first parameter"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_testUnequalPair
dedent|''
dedent|''
name|'def'
name|'_testUnequalPair'
op|'('
name|'self'
op|','
name|'first'
op|','
name|'second'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'first'
op|','
name|'second'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'failureException'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
string|"'not equal:\\na = %s\\nb = %s\\n'"
op|'%'
op|'('
nl|'\n'
name|'pformat'
op|'('
name|'first'
op|')'
op|','
name|'pformat'
op|'('
name|'second'
op|')'
op|')'
newline|'\n'
name|'if'
name|'str'
op|'('
name|'e'
op|')'
op|'!='
name|'expected'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected: %r; Got: %s"'
op|'%'
op|'('
name|'expected'
op|','
name|'str'
op|'('
name|'e'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Call to failUnlessEqual(%r, %r) didn\'t fail"'
nl|'\n'
op|'%'
op|'('
name|'first'
op|','
name|'second'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failUnlessEqual_basic
dedent|''
dedent|''
name|'def'
name|'test_failUnlessEqual_basic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_testEqualPair'
op|'('
string|"'cat'"
op|','
string|"'cat'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testUnequalPair'
op|'('
string|"'cat'"
op|','
string|"'dog'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testEqualPair'
op|'('
op|'['
number|'1'
op|']'
op|','
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testUnequalPair'
op|'('
op|'['
number|'1'
op|']'
op|','
string|"'orange'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failUnlessEqual_custom
dedent|''
name|'def'
name|'test_failUnlessEqual_custom'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'x'
op|'='
name|'MockEquality'
op|'('
string|"'first'"
op|')'
newline|'\n'
name|'y'
op|'='
name|'MockEquality'
op|'('
string|"'second'"
op|')'
newline|'\n'
name|'z'
op|'='
name|'MockEquality'
op|'('
string|"'fecund'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testEqualPair'
op|'('
name|'x'
op|','
name|'x'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testEqualPair'
op|'('
name|'x'
op|','
name|'z'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testUnequalPair'
op|'('
name|'x'
op|','
name|'y'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testUnequalPair'
op|'('
name|'y'
op|','
name|'z'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failUnlessEqualMessage
dedent|''
name|'def'
name|'test_failUnlessEqualMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When a message is passed to L{assertEqual}, it is included in the\n        error message.\n        """'
newline|'\n'
name|'exception'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'failureException'
op|','
name|'self'
op|'.'
name|'assertEqual'
op|','
nl|'\n'
string|"'foo'"
op|','
string|"'bar'"
op|','
string|"'message'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'str'
op|'('
name|'exception'
op|')'
op|','
nl|'\n'
string|'"message\\nnot equal:\\na = \'foo\'\\nb = \'bar\'\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failUnlessEqualNoneMessage
dedent|''
name|'def'
name|'test_failUnlessEqualNoneMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a message is specified as C{None}, it is not included in the error\n        message of L{assertEqual}.\n        """'
newline|'\n'
name|'exception'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'failureException'
op|','
name|'self'
op|'.'
name|'assertEqual'
op|','
string|"'foo'"
op|','
string|"'bar'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exception'
op|')'
op|','
string|'"not equal:\\na = \'foo\'\\nb = \'bar\'\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failUnlessEqual_incomparable
dedent|''
name|'def'
name|'test_failUnlessEqual_incomparable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'apple'
op|'='
name|'MockEquality'
op|'('
string|"'apple'"
op|')'
newline|'\n'
name|'orange'
op|'='
op|'['
string|"'orange'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'apple'
op|','
name|'orange'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'failureException'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Fail raised when ValueError ought to have been raised."'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
comment|'# good. error not swallowed'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Comparing %r and %r should have raised an exception"'
nl|'\n'
op|'%'
op|'('
name|'apple'
op|','
name|'orange'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_raiseError
dedent|''
dedent|''
name|'def'
name|'_raiseError'
op|'('
name|'self'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'error'
newline|'\n'
nl|'\n'
DECL|member|test_failUnlessRaises_expected
dedent|''
name|'def'
name|'test_failUnlessRaises_expected'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'x'
op|'='
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'_raiseError'
op|','
name|'ValueError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'x'
op|','
name|'ValueError'
op|')'
op|','
nl|'\n'
string|'"Expect failUnlessRaises to return instance of raised "'
nl|'\n'
string|'"exception."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failUnlessRaises_unexpected
dedent|''
name|'def'
name|'test_failUnlessRaises_unexpected'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'_raiseError'
op|','
name|'TypeError'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"failUnlessRaises shouldn\'t re-raise unexpected "'
nl|'\n'
string|'"exceptions"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'failureException'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# what we expect'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected exception wasn\'t raised. Should have failed"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failUnlessRaises_noException
dedent|''
dedent|''
name|'def'
name|'test_failUnlessRaises_noException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'ValueError'
op|','
name|'lambda'
op|':'
name|'None'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'failureException'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|','
nl|'\n'
string|"'ValueError not raised (None returned)'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Exception not raised. Should have failed"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failUnlessRaises_failureException
dedent|''
dedent|''
name|'def'
name|'test_failUnlessRaises_failureException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'x'
op|'='
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
name|'self'
op|'.'
name|'_raiseError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'failureException'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'x'
op|','
name|'self'
op|'.'
name|'failureException'
op|')'
op|','
nl|'\n'
string|'"Expected %r instance to be returned"'
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'x'
op|'='
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
name|'self'
op|'.'
name|'_raiseError'
op|','
nl|'\n'
name|'ValueError'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'failureException'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# what we expect'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Should have raised exception"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failIfEqual_basic
dedent|''
dedent|''
name|'def'
name|'test_failIfEqual_basic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'x'
op|','
name|'y'
op|','
name|'z'
op|'='
op|'['
number|'1'
op|']'
op|','
op|'['
number|'2'
op|']'
op|','
op|'['
number|'1'
op|']'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'failIfEqual'
op|'('
name|'x'
op|','
name|'y'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'ret'
op|','
name|'x'
op|','
nl|'\n'
string|'"failIfEqual should return first parameter"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'failIfEqual'
op|','
name|'x'
op|','
name|'x'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'failIfEqual'
op|','
name|'x'
op|','
name|'z'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failIfEqual_customEq
dedent|''
name|'def'
name|'test_failIfEqual_customEq'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'x'
op|'='
name|'MockEquality'
op|'('
string|"'first'"
op|')'
newline|'\n'
name|'y'
op|'='
name|'MockEquality'
op|'('
string|"'second'"
op|')'
newline|'\n'
name|'z'
op|'='
name|'MockEquality'
op|'('
string|"'fecund'"
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'failIfEqual'
op|'('
name|'x'
op|','
name|'y'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'ret'
op|','
name|'x'
op|','
nl|'\n'
string|'"failIfEqual should return first parameter"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'failIfEqual'
op|','
name|'x'
op|','
name|'x'
op|')'
newline|'\n'
comment|'# test when __ne__ is not defined'
nl|'\n'
name|'self'
op|'.'
name|'failIfEqual'
op|'('
name|'x'
op|','
name|'z'
op|','
string|'"__ne__ not defined, so not equal"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failUnlessIdentical
dedent|''
name|'def'
name|'test_failUnlessIdentical'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'x'
op|','
name|'y'
op|','
name|'z'
op|'='
op|'['
number|'1'
op|']'
op|','
op|'['
number|'1'
op|']'
op|','
op|'['
number|'2'
op|']'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'failUnlessIdentical'
op|'('
name|'x'
op|','
name|'x'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'ret'
op|','
name|'x'
op|','
nl|'\n'
string|"'failUnlessIdentical should return first '"
nl|'\n'
string|"'parameter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'failUnlessIdentical'
op|','
name|'x'
op|','
name|'y'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'failUnlessIdentical'
op|','
name|'x'
op|','
name|'z'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failUnlessApproximates
dedent|''
name|'def'
name|'test_failUnlessApproximates'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'x'
op|','
name|'y'
op|','
name|'z'
op|'='
number|'1.0'
op|','
number|'1.1'
op|','
number|'1.2'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessApproximates'
op|'('
name|'x'
op|','
name|'x'
op|','
number|'0.2'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'failUnlessApproximates'
op|'('
name|'x'
op|','
name|'y'
op|','
number|'0.2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'ret'
op|','
name|'x'
op|','
string|'"failUnlessApproximates should return "'
nl|'\n'
string|'"first parameter"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'failUnlessApproximates'
op|','
name|'x'
op|','
name|'z'
op|','
number|'0.1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'failUnlessApproximates'
op|','
name|'x'
op|','
name|'y'
op|','
number|'0.1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failUnlessAlmostEqual
dedent|''
name|'def'
name|'test_failUnlessAlmostEqual'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'precision'
op|'='
number|'5'
newline|'\n'
name|'x'
op|'='
number|'8.000001'
newline|'\n'
name|'y'
op|'='
number|'8.00001'
newline|'\n'
name|'z'
op|'='
number|'8.000002'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessAlmostEqual'
op|'('
name|'x'
op|','
name|'x'
op|','
name|'precision'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'failUnlessAlmostEqual'
op|'('
name|'x'
op|','
name|'z'
op|','
name|'precision'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'ret'
op|','
name|'x'
op|','
string|'"failUnlessAlmostEqual should return "'
nl|'\n'
string|'"first parameter (%r, %r)"'
op|'%'
op|'('
name|'ret'
op|','
name|'x'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'failUnlessAlmostEqual'
op|','
name|'x'
op|','
name|'y'
op|','
name|'precision'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failIfAlmostEqual
dedent|''
name|'def'
name|'test_failIfAlmostEqual'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'precision'
op|'='
number|'5'
newline|'\n'
name|'x'
op|'='
number|'8.000001'
newline|'\n'
name|'y'
op|'='
number|'8.00001'
newline|'\n'
name|'z'
op|'='
number|'8.000002'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'failIfAlmostEqual'
op|'('
name|'x'
op|','
name|'y'
op|','
name|'precision'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'ret'
op|','
name|'x'
op|','
string|'"failIfAlmostEqual should return "'
nl|'\n'
string|'"first parameter (%r, %r)"'
op|'%'
op|'('
name|'ret'
op|','
name|'x'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'failIfAlmostEqual'
op|','
name|'x'
op|','
name|'x'
op|','
name|'precision'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'failIfAlmostEqual'
op|','
name|'x'
op|','
name|'z'
op|','
name|'precision'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failUnlessSubstring
dedent|''
name|'def'
name|'test_failUnlessSubstring'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'x'
op|'='
string|'"cat"'
newline|'\n'
name|'y'
op|'='
string|'"the dog sat"'
newline|'\n'
name|'z'
op|'='
string|'"the cat sat"'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessSubstring'
op|'('
name|'x'
op|','
name|'x'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'failUnlessSubstring'
op|'('
name|'x'
op|','
name|'z'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'ret'
op|','
name|'x'
op|','
string|"'should return first parameter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'failUnlessSubstring'
op|','
name|'x'
op|','
name|'y'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'failUnlessSubstring'
op|','
name|'z'
op|','
name|'x'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failIfSubstring
dedent|''
name|'def'
name|'test_failIfSubstring'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'x'
op|'='
string|'"cat"'
newline|'\n'
name|'y'
op|'='
string|'"the dog sat"'
newline|'\n'
name|'z'
op|'='
string|'"the cat sat"'
newline|'\n'
name|'self'
op|'.'
name|'failIfSubstring'
op|'('
name|'z'
op|','
name|'x'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'failIfSubstring'
op|'('
name|'x'
op|','
name|'y'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'ret'
op|','
name|'x'
op|','
string|"'should return first parameter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'failIfSubstring'
op|','
name|'x'
op|','
name|'x'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'failIfSubstring'
op|','
name|'x'
op|','
name|'z'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_assertFailure
dedent|''
name|'def'
name|'test_assertFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'lambda'
op|':'
number|'1'
op|'/'
number|'0'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ZeroDivisionError'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_assertFailure_wrongException
dedent|''
name|'def'
name|'test_assertFailure_wrongException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'lambda'
op|':'
number|'1'
op|'/'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'OverflowError'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Should have failed'"
op|')'
op|','
nl|'\n'
name|'lambda'
name|'x'
op|':'
name|'x'
op|'.'
name|'trap'
op|'('
name|'self'
op|'.'
name|'failureException'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_assertFailure_noException
dedent|''
name|'def'
name|'test_assertFailure_noException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ZeroDivisionError'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Should have failed'"
op|')'
op|','
nl|'\n'
name|'lambda'
name|'x'
op|':'
name|'x'
op|'.'
name|'trap'
op|'('
name|'self'
op|'.'
name|'failureException'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_assertFailure_moreInfo
dedent|''
name|'def'
name|'test_assertFailure_moreInfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        In the case of assertFailure failing, check that we get lots of\n        information about the exception that was raised.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
number|'1'
op|'/'
number|'0'
newline|'\n'
dedent|''
name|'except'
name|'ZeroDivisionError'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'fail'
op|'('
name|'f'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'RuntimeError'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_checkInfo'
op|','
name|'f'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_checkInfo
dedent|''
name|'def'
name|'_checkInfo'
op|'('
name|'self'
op|','
name|'assertionFailure'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'assertionFailure'
op|'.'
name|'check'
op|'('
name|'self'
op|'.'
name|'failureException'
op|')'
newline|'\n'
name|'output'
op|'='
name|'assertionFailure'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'f'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
op|','
name|'output'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'f'
op|'.'
name|'getBriefTraceback'
op|'('
op|')'
op|','
name|'output'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_assertFailure_masked
dedent|''
name|'def'
name|'test_assertFailure_masked'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A single wrong assertFailure should fail the whole test.\n        """'
newline|'\n'
DECL|class|ExampleFailure
name|'class'
name|'ExampleFailure'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|TC
dedent|''
name|'class'
name|'TC'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|failureException
indent|'            '
name|'failureException'
op|'='
name|'ExampleFailure'
newline|'\n'
DECL|member|test_assertFailure
name|'def'
name|'test_assertFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'lambda'
op|':'
number|'1'
op|'/'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'OverflowError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ZeroDivisionError'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'test'
op|'='
name|'TC'
op|'('
string|"'test_assertFailure'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'result'
op|'.'
name|'failures'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_assertWarns
dedent|''
name|'def'
name|'test_assertWarns'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test basic assertWarns report.\n        """'
newline|'\n'
DECL|function|deprecated
name|'def'
name|'deprecated'
op|'('
name|'a'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Woo deprecated"'
op|','
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'return'
name|'a'
newline|'\n'
dedent|''
name|'r'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"Woo deprecated"'
op|','
name|'__file__'
op|','
nl|'\n'
name|'deprecated'
op|','
number|'123'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'r'
op|','
number|'123'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_assertWarnsRegistryClean
dedent|''
name|'def'
name|'test_assertWarnsRegistryClean'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that assertWarns cleans the warning registry, so the warning is\n        not swallowed the second time.\n        """'
newline|'\n'
DECL|function|deprecated
name|'def'
name|'deprecated'
op|'('
name|'a'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Woo deprecated"'
op|','
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'return'
name|'a'
newline|'\n'
dedent|''
name|'r1'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"Woo deprecated"'
op|','
name|'__file__'
op|','
nl|'\n'
name|'deprecated'
op|','
number|'123'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'r1'
op|','
number|'123'
op|')'
newline|'\n'
comment|'# The warning should be raised again'
nl|'\n'
name|'r2'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"Woo deprecated"'
op|','
name|'__file__'
op|','
nl|'\n'
name|'deprecated'
op|','
number|'321'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'r2'
op|','
number|'321'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_assertWarnsError
dedent|''
name|'def'
name|'test_assertWarnsError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test assertWarns failure when no warning is generated.\n        """'
newline|'\n'
DECL|function|normal
name|'def'
name|'normal'
op|'('
name|'a'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'a'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|','
name|'DeprecationWarning'
op|','
string|'"Woo deprecated"'
op|','
name|'__file__'
op|','
nl|'\n'
name|'normal'
op|','
number|'123'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_assertWarnsWrongCategory
dedent|''
name|'def'
name|'test_assertWarnsWrongCategory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test assertWarns failure when the category is wrong.\n        """'
newline|'\n'
DECL|function|deprecated
name|'def'
name|'deprecated'
op|'('
name|'a'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Foo deprecated"'
op|','
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'return'
name|'a'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|','
name|'UserWarning'
op|','
string|'"Foo deprecated"'
op|','
name|'__file__'
op|','
nl|'\n'
name|'deprecated'
op|','
number|'123'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_assertWarnsWrongMessage
dedent|''
name|'def'
name|'test_assertWarnsWrongMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test assertWarns failure when the message is wrong.\n        """'
newline|'\n'
DECL|function|deprecated
name|'def'
name|'deprecated'
op|'('
name|'a'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Foo deprecated"'
op|','
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'return'
name|'a'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|','
name|'DeprecationWarning'
op|','
string|'"Bar deprecated"'
op|','
name|'__file__'
op|','
nl|'\n'
name|'deprecated'
op|','
number|'123'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_assertWarnsWrongFile
dedent|''
name|'def'
name|'test_assertWarnsWrongFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the warning emitted by a function refers to a different file than is\n        passed to C{assertWarns}, C{failureException} is raised.\n        """'
newline|'\n'
DECL|function|deprecated
name|'def'
name|'deprecated'
op|'('
name|'a'
op|')'
op|':'
newline|'\n'
comment|'# stacklevel=2 points at the direct caller of the function.  The'
nl|'\n'
comment|'# way assertRaises is invoked below, the direct caller will be'
nl|'\n'
comment|'# something somewhere in trial, not something in this file.  In'
nl|'\n'
comment|'# Python 2.5 and earlier, stacklevel of 0 resulted in a warning'
nl|'\n'
comment|'# pointing to the warnings module itself.  Starting in Python 2.6,'
nl|'\n'
comment|'# stacklevel of 0 and 1 both result in a warning pointing to *this*'
nl|'\n'
comment|'# file, presumably due to the fact that the warn function is'
nl|'\n'
comment|'# implemented in C and has no convenient Python'
nl|'\n'
comment|'# filename/linenumber.'
nl|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"Foo deprecated"'
op|','
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
comment|"# Since the direct caller isn't in this file, try to assert that"
nl|'\n'
comment|'# the warning *does* point to this file, so that assertWarns raises'
nl|'\n'
comment|'# an exception.'
nl|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|','
name|'DeprecationWarning'
op|','
string|'"Foo deprecated"'
op|','
name|'__file__'
op|','
nl|'\n'
name|'deprecated'
op|','
number|'123'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_assertWarnsOnClass
dedent|''
name|'def'
name|'test_assertWarnsOnClass'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test assertWarns works when creating a class instance.\n        """'
newline|'\n'
DECL|class|Warn
name|'class'
name|'Warn'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Do not call me"'
op|','
name|'category'
op|'='
name|'RuntimeWarning'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'r'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'RuntimeWarning'
op|','
string|'"Do not call me"'
op|','
name|'__file__'
op|','
nl|'\n'
name|'Warn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'r'
op|','
name|'Warn'
op|')'
op|')'
newline|'\n'
name|'r'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'RuntimeWarning'
op|','
string|'"Do not call me"'
op|','
name|'__file__'
op|','
nl|'\n'
name|'Warn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'r'
op|','
name|'Warn'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_assertWarnsOnMethod
dedent|''
name|'def'
name|'test_assertWarnsOnMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test assertWarns works when used on an instance method.\n        """'
newline|'\n'
DECL|class|Warn
name|'class'
name|'Warn'
op|':'
newline|'\n'
DECL|member|deprecated
indent|'            '
name|'def'
name|'deprecated'
op|'('
name|'self'
op|','
name|'a'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Bar deprecated"'
op|','
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'return'
name|'a'
newline|'\n'
dedent|''
dedent|''
name|'w'
op|'='
name|'Warn'
op|'('
op|')'
newline|'\n'
name|'r'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"Bar deprecated"'
op|','
name|'__file__'
op|','
nl|'\n'
name|'w'
op|'.'
name|'deprecated'
op|','
number|'321'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'r'
op|','
number|'321'
op|')'
newline|'\n'
name|'r'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"Bar deprecated"'
op|','
name|'__file__'
op|','
nl|'\n'
name|'w'
op|'.'
name|'deprecated'
op|','
number|'321'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'r'
op|','
number|'321'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_assertWarnsOnCall
dedent|''
name|'def'
name|'test_assertWarnsOnCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test assertWarns works on instance with C{__call__} method.\n        """'
newline|'\n'
DECL|class|Warn
name|'class'
name|'Warn'
op|':'
newline|'\n'
DECL|member|__call__
indent|'            '
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'a'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Egg deprecated"'
op|','
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'return'
name|'a'
newline|'\n'
dedent|''
dedent|''
name|'w'
op|'='
name|'Warn'
op|'('
op|')'
newline|'\n'
name|'r'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"Egg deprecated"'
op|','
name|'__file__'
op|','
nl|'\n'
name|'w'
op|','
number|'321'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'r'
op|','
number|'321'
op|')'
newline|'\n'
name|'r'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
string|'"Egg deprecated"'
op|','
name|'__file__'
op|','
nl|'\n'
name|'w'
op|','
number|'321'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'r'
op|','
number|'321'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_assertWarnsFilter
dedent|''
name|'def'
name|'test_assertWarnsFilter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test assertWarns on a warning filterd by default.\n        """'
newline|'\n'
DECL|function|deprecated
name|'def'
name|'deprecated'
op|'('
name|'a'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Woo deprecated"'
op|','
name|'category'
op|'='
name|'PendingDeprecationWarning'
op|')'
newline|'\n'
name|'return'
name|'a'
newline|'\n'
dedent|''
name|'r'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'PendingDeprecationWarning'
op|','
string|'"Woo deprecated"'
op|','
nl|'\n'
name|'__file__'
op|','
name|'deprecated'
op|','
number|'123'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'r'
op|','
number|'123'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_assertWarnsMultipleWarnings
dedent|''
name|'def'
name|'test_assertWarnsMultipleWarnings'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{assertWarns} does not raise an exception if the function it is passed\n        triggers the same warning more than once.\n        """'
newline|'\n'
DECL|function|deprecated
name|'def'
name|'deprecated'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Woo deprecated"'
op|','
name|'category'
op|'='
name|'PendingDeprecationWarning'
op|')'
newline|'\n'
DECL|function|f
dedent|''
name|'def'
name|'f'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'deprecated'
op|'('
op|')'
newline|'\n'
name|'deprecated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertWarns'
op|'('
nl|'\n'
name|'PendingDeprecationWarning'
op|','
string|'"Woo deprecated"'
op|','
name|'__file__'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_assertWarnsDifferentWarnings
dedent|''
name|'def'
name|'test_assertWarnsDifferentWarnings'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        For now, assertWarns is unable to handle multiple different warnings,\n        so it should raise an exception if it\'s the case.\n        """'
newline|'\n'
DECL|function|deprecated
name|'def'
name|'deprecated'
op|'('
name|'a'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Woo deprecated"'
op|','
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Another one"'
op|','
name|'category'
op|'='
name|'PendingDeprecationWarning'
op|')'
newline|'\n'
dedent|''
name|'e'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|','
name|'DeprecationWarning'
op|','
string|'"Woo deprecated"'
op|','
nl|'\n'
name|'__file__'
op|','
name|'deprecated'
op|','
number|'123'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|','
string|'"Can\'t handle different warnings"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_assertWarnsAfterUnassertedWarning
dedent|''
name|'def'
name|'test_assertWarnsAfterUnassertedWarning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Warnings emitted before L{TestCase.assertWarns} is called do not get\n        flushed and do not alter the behavior of L{TestCase.assertWarns}.\n        """'
newline|'\n'
DECL|class|TheWarning
name|'class'
name|'TheWarning'
op|'('
name|'Warning'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|f
dedent|''
name|'def'
name|'f'
op|'('
name|'message'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'message'
op|','
name|'category'
op|'='
name|'TheWarning'
op|')'
newline|'\n'
dedent|''
name|'f'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'TheWarning'
op|','
string|'"bar"'
op|','
name|'__file__'
op|','
name|'f'
op|','
string|'"bar"'
op|')'
newline|'\n'
op|'['
name|'warning'
op|']'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
name|'f'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'warning'
op|'['
string|"'message'"
op|']'
op|','
string|'"foo"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_assertIsInstance
dedent|''
name|'def'
name|'test_assertIsInstance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a true condition of assertIsInstance.\n        """'
newline|'\n'
name|'A'
op|'='
name|'type'
op|'('
string|"'A'"
op|','
op|'('
name|'object'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'a'
op|'='
name|'A'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'a'
op|','
name|'A'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_assertIsInstanceMultipleClasses
dedent|''
name|'def'
name|'test_assertIsInstanceMultipleClasses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a true condition of assertIsInstance with multiple classes.\n        """'
newline|'\n'
name|'A'
op|'='
name|'type'
op|'('
string|"'A'"
op|','
op|'('
name|'object'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'B'
op|'='
name|'type'
op|'('
string|"'B'"
op|','
op|'('
name|'object'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'a'
op|'='
name|'A'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'a'
op|','
op|'('
name|'A'
op|','
name|'B'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_assertIsInstanceError
dedent|''
name|'def'
name|'test_assertIsInstanceError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test an error with assertIsInstance.\n        """'
newline|'\n'
name|'A'
op|'='
name|'type'
op|'('
string|"'A'"
op|','
op|'('
name|'object'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'B'
op|'='
name|'type'
op|'('
string|"'B'"
op|','
op|'('
name|'object'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'a'
op|'='
name|'A'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
name|'self'
op|'.'
name|'assertIsInstance'
op|','
name|'a'
op|','
name|'B'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_assertIsInstanceErrorMultipleClasses
dedent|''
name|'def'
name|'test_assertIsInstanceErrorMultipleClasses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test an error with assertIsInstance and multiple classes.\n        """'
newline|'\n'
name|'A'
op|'='
name|'type'
op|'('
string|"'A'"
op|','
op|'('
name|'object'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'B'
op|'='
name|'type'
op|'('
string|"'B'"
op|','
op|'('
name|'object'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'C'
op|'='
name|'type'
op|'('
string|"'C'"
op|','
op|'('
name|'object'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'a'
op|'='
name|'A'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
name|'self'
op|'.'
name|'assertIsInstance'
op|','
name|'a'
op|','
op|'('
name|'B'
op|','
name|'C'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_assertNotIsInstance
dedent|''
name|'def'
name|'test_assertNotIsInstance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a true condition of assertNotIsInstance.\n        """'
newline|'\n'
name|'A'
op|'='
name|'type'
op|'('
string|"'A'"
op|','
op|'('
name|'object'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'B'
op|'='
name|'type'
op|'('
string|"'B'"
op|','
op|'('
name|'object'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'a'
op|'='
name|'A'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIsInstance'
op|'('
name|'a'
op|','
name|'B'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_assertNotIsInstanceMultipleClasses
dedent|''
name|'def'
name|'test_assertNotIsInstanceMultipleClasses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a true condition of assertNotIsInstance and multiple classes.\n        """'
newline|'\n'
name|'A'
op|'='
name|'type'
op|'('
string|"'A'"
op|','
op|'('
name|'object'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'B'
op|'='
name|'type'
op|'('
string|"'B'"
op|','
op|'('
name|'object'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'C'
op|'='
name|'type'
op|'('
string|"'C'"
op|','
op|'('
name|'object'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'a'
op|'='
name|'A'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIsInstance'
op|'('
name|'a'
op|','
op|'('
name|'B'
op|','
name|'C'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_assertNotIsInstanceError
dedent|''
name|'def'
name|'test_assertNotIsInstanceError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test an error with assertNotIsInstance.\n        """'
newline|'\n'
name|'A'
op|'='
name|'type'
op|'('
string|"'A'"
op|','
op|'('
name|'object'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'a'
op|'='
name|'A'
op|'('
op|')'
newline|'\n'
name|'error'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'assertNotIsInstance'
op|','
name|'a'
op|','
name|'A'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'error'
op|')'
op|','
string|'"%r is an instance of %s"'
op|'%'
op|'('
name|'a'
op|','
name|'A'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_assertNotIsInstanceErrorMultipleClasses
dedent|''
name|'def'
name|'test_assertNotIsInstanceErrorMultipleClasses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test an error with assertNotIsInstance and multiple classes.\n        """'
newline|'\n'
name|'A'
op|'='
name|'type'
op|'('
string|"'A'"
op|','
op|'('
name|'object'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'B'
op|'='
name|'type'
op|'('
string|"'B'"
op|','
op|'('
name|'object'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'a'
op|'='
name|'A'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
name|'self'
op|'.'
name|'assertNotIsInstance'
op|','
name|'a'
op|','
op|'('
name|'A'
op|','
name|'B'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestAssertionNames
dedent|''
dedent|''
name|'class'
name|'TestAssertionNames'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for consistency of naming within TestCase assertion methods\n    """'
newline|'\n'
DECL|member|_getAsserts
name|'def'
name|'_getAsserts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dct'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'reflect'
op|'.'
name|'accumulateMethods'
op|'('
name|'self'
op|','
name|'dct'
op|','
string|"'assert'"
op|')'
newline|'\n'
name|'return'
op|'['
name|'dct'
op|'['
name|'k'
op|']'
name|'for'
name|'k'
name|'in'
name|'dct'
name|'if'
name|'not'
name|'k'
op|'.'
name|'startswith'
op|'('
string|"'Not'"
op|')'
name|'and'
name|'k'
op|'!='
string|"'_'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_name
dedent|''
name|'def'
name|'_name'
op|'('
name|'self'
op|','
name|'x'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'x'
op|'.'
name|'__name__'
newline|'\n'
nl|'\n'
DECL|member|test_failUnless_matches_assert
dedent|''
name|'def'
name|'test_failUnless_matches_assert'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'asserts'
op|'='
name|'self'
op|'.'
name|'_getAsserts'
op|'('
op|')'
newline|'\n'
name|'failUnlesses'
op|'='
name|'reflect'
op|'.'
name|'prefixedMethods'
op|'('
name|'self'
op|','
string|"'failUnless'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'dsu'
op|'('
name|'asserts'
op|','
name|'self'
op|'.'
name|'_name'
op|')'
op|','
nl|'\n'
name|'dsu'
op|'('
name|'failUnlesses'
op|','
name|'self'
op|'.'
name|'_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failIf_matches_assertNot
dedent|''
name|'def'
name|'test_failIf_matches_assertNot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'asserts'
op|'='
name|'reflect'
op|'.'
name|'prefixedMethods'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
string|"'assertNot'"
op|')'
newline|'\n'
name|'failIfs'
op|'='
name|'reflect'
op|'.'
name|'prefixedMethods'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
string|"'failIf'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'dsu'
op|'('
name|'asserts'
op|','
name|'self'
op|'.'
name|'_name'
op|')'
op|','
nl|'\n'
name|'dsu'
op|'('
name|'failIfs'
op|','
name|'self'
op|'.'
name|'_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_equalSpelling
dedent|''
name|'def'
name|'test_equalSpelling'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'name'
op|','
name|'value'
name|'in'
name|'vars'
op|'('
name|'self'
op|')'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'callable'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'name'
op|'.'
name|'endswith'
op|'('
string|"'Equal'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'hasattr'
op|'('
name|'self'
op|','
name|'name'
op|'+'
string|"'s'"
op|')'
op|','
nl|'\n'
string|'"%s but no %ss"'
op|'%'
op|'('
name|'name'
op|','
name|'name'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'value'
op|','
name|'getattr'
op|'('
name|'self'
op|','
name|'name'
op|'+'
string|"'s'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'name'
op|'.'
name|'endswith'
op|'('
string|"'Equals'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'hasattr'
op|'('
name|'self'
op|','
name|'name'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
op|','
nl|'\n'
string|'"%s but no %s"'
op|'%'
op|'('
name|'name'
op|','
name|'name'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'value'
op|','
name|'getattr'
op|'('
name|'self'
op|','
name|'name'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestCallDeprecated
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestCallDeprecated'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test use of the L{TestCase.callDeprecated} method with version objects.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|version
name|'version'
op|'='
name|'Version'
op|'('
string|"'Twisted'"
op|','
number|'8'
op|','
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|oldMethod
name|'def'
name|'oldMethod'
op|'('
name|'self'
op|','
name|'x'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Deprecated method for testing.\n        """'
newline|'\n'
name|'return'
name|'x'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callDeprecatedSuppressesWarning
dedent|''
name|'def'
name|'test_callDeprecatedSuppressesWarning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        callDeprecated calls a deprecated callable, suppressing the\n        deprecation warning.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'callDeprecated'
op|'('
name|'self'
op|'.'
name|'version'
op|','
name|'self'
op|'.'
name|'oldMethod'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|')'
op|','
op|'['
op|']'
op|','
string|'"No warnings should be shown"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callDeprecatedCallsFunction
dedent|''
name|'def'
name|'test_callDeprecatedCallsFunction'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{callDeprecated} actually calls the callable passed to it.\n        """'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'callDeprecated'
op|'('
name|'self'
op|'.'
name|'version'
op|','
name|'self'
op|'.'
name|'oldMethod'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'foo'"
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failsWithoutDeprecation
dedent|''
name|'def'
name|'test_failsWithoutDeprecation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        callDeprecated raises a test failure if the callable is not\n        deprecated.\n        """'
newline|'\n'
DECL|function|notDeprecated
name|'def'
name|'notDeprecated'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'exception'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'callDeprecated'
op|','
name|'self'
op|'.'
name|'version'
op|','
name|'notDeprecated'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|'"%r is not deprecated."'
op|'%'
name|'notDeprecated'
op|','
name|'str'
op|'('
name|'exception'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failsWithIncorrectDeprecation
dedent|''
name|'def'
name|'test_failsWithIncorrectDeprecation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        callDeprecated raises a test failure if the callable was deprecated\n        at a different version to the one expected.\n        """'
newline|'\n'
name|'differentVersion'
op|'='
name|'Version'
op|'('
string|"'Foo'"
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|')'
newline|'\n'
name|'exception'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'failureException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'callDeprecated'
op|','
nl|'\n'
name|'differentVersion'
op|','
name|'self'
op|'.'
name|'oldMethod'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'getVersionString'
op|'('
name|'self'
op|'.'
name|'version'
op|')'
op|','
name|'str'
op|'('
name|'exception'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'getVersionString'
op|'('
name|'differentVersion'
op|')'
op|','
name|'str'
op|'('
name|'exception'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nestedDeprecation
dedent|''
name|'def'
name|'test_nestedDeprecation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{callDeprecated} ignores all deprecations apart from the first.\n\n        Multiple warnings are generated when a deprecated function calls\n        another deprecated function. The first warning is the one generated by\n        the explicitly called function. That\'s the warning that we care about.\n        """'
newline|'\n'
name|'differentVersion'
op|'='
name|'Version'
op|'('
string|"'Foo'"
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|function|nestedDeprecation
name|'def'
name|'nestedDeprecation'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'oldMethod'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
dedent|''
name|'nestedDeprecation'
op|'='
name|'deprecated'
op|'('
name|'differentVersion'
op|')'
op|'('
name|'nestedDeprecation'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'callDeprecated'
op|'('
name|'differentVersion'
op|','
name|'nestedDeprecation'
op|','
number|'24'
op|')'
newline|'\n'
nl|'\n'
comment|'# The oldMethod deprecation should have been emitted too, not captured'
nl|'\n'
comment|'# by callDeprecated.  Flush it now to make sure it did happen and to'
nl|'\n'
comment|'# prevent it from showing up on stdout.'
nl|'\n'
name|'warningsShown'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'warningsShown'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'TestCallDeprecated'
op|'.'
name|'oldMethod'
op|'='
name|'deprecated'
op|'('
name|'TestCallDeprecated'
op|'.'
name|'version'
op|')'
op|'('
nl|'\n'
name|'TestCallDeprecated'
op|'.'
name|'oldMethod'
op|')'
newline|'\n'
endmarker|''
end_unit

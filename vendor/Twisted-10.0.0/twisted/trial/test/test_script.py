begin_unit
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'import'
name|'gc'
newline|'\n'
name|'import'
name|'StringIO'
op|','
name|'sys'
op|','
name|'types'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
op|','
name|'runner'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'scripts'
name|'import'
name|'trial'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
op|'.'
name|'test_loader'
name|'import'
name|'testNames'
newline|'\n'
nl|'\n'
DECL|variable|pyunit
name|'pyunit'
op|'='
name|'__import__'
op|'('
string|"'unittest'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|sibpath
name|'def'
name|'sibpath'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""For finding files in twisted/trial/test"""'
newline|'\n'
name|'return'
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
name|'filename'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ForceGarbageCollection
dedent|''
name|'class'
name|'ForceGarbageCollection'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the --force-gc option.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'config'
op|'='
name|'trial'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'log'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'gc'
op|','
string|"'collect'"
op|','
name|'self'
op|'.'
name|'collect'
op|')'
newline|'\n'
name|'test'
op|'='
name|'pyunit'
op|'.'
name|'FunctionTestCase'
op|'('
name|'self'
op|'.'
name|'simpleTest'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'='
name|'runner'
op|'.'
name|'TestSuite'
op|'('
op|'['
name|'test'
op|','
name|'test'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|simpleTest
dedent|''
name|'def'
name|'simpleTest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A simple test method that records that it was run.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'log'
op|'.'
name|'append'
op|'('
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|collect
dedent|''
name|'def'
name|'collect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A replacement for gc.collect that logs calls to itself.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'log'
op|'.'
name|'append'
op|'('
string|"'collect'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeRunner
dedent|''
name|'def'
name|'makeRunner'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a L{runner.TrialRunner} object that is safe to use in tests.\n        """'
newline|'\n'
name|'runner'
op|'='
name|'trial'
op|'.'
name|'_makeRunner'
op|'('
name|'self'
op|'.'
name|'config'
op|')'
newline|'\n'
name|'runner'
op|'.'
name|'stream'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'return'
name|'runner'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_forceGc
dedent|''
name|'def'
name|'test_forceGc'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Passing the --force-gc option to the trial script forces the garbage\n        collector to run before and after each test.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'['
string|"'force-gc'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'postOptions'
op|'('
op|')'
newline|'\n'
name|'runner'
op|'='
name|'self'
op|'.'
name|'makeRunner'
op|'('
op|')'
newline|'\n'
name|'runner'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'log'
op|','
op|'['
string|"'collect'"
op|','
string|"'test'"
op|','
string|"'collect'"
op|','
nl|'\n'
string|"'collect'"
op|','
string|"'test'"
op|','
string|"'collect'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unforceGc
dedent|''
name|'def'
name|'test_unforceGc'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        By default, no garbage collection is forced.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'postOptions'
op|'('
op|')'
newline|'\n'
name|'runner'
op|'='
name|'self'
op|'.'
name|'makeRunner'
op|'('
op|')'
newline|'\n'
name|'runner'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'log'
op|','
op|'['
string|"'test'"
op|','
string|"'test'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSuiteUsed
dedent|''
dedent|''
name|'class'
name|'TestSuiteUsed'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Check the category of tests suite used by the loader.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a trial configuration object.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'='
name|'trial'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_defaultSuite
dedent|''
name|'def'
name|'test_defaultSuite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        By default, the loader should use L{runner.DestructiveTestSuite}\n        """'
newline|'\n'
name|'loader'
op|'='
name|'trial'
op|'.'
name|'_getLoader'
op|'('
name|'self'
op|'.'
name|'config'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'loader'
op|'.'
name|'suiteFactory'
op|','
name|'runner'
op|'.'
name|'DestructiveTestSuite'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_untilFailureSuite
dedent|''
name|'def'
name|'test_untilFailureSuite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{until-failure} configuration uses the L{runner.TestSuite} to keep\n        instances alive across runs.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'['
string|"'until-failure'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'loader'
op|'='
name|'trial'
op|'.'
name|'_getLoader'
op|'('
name|'self'
op|'.'
name|'config'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'loader'
op|'.'
name|'suiteFactory'
op|','
name|'runner'
op|'.'
name|'TestSuite'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestModuleTest
dedent|''
dedent|''
name|'class'
name|'TestModuleTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'config'
op|'='
name|'trial'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'config'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|test_testNames
dedent|''
name|'def'
name|'test_testNames'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that the testNames helper method accurately collects the\n        names of tests in suite.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'testNames'
op|'('
name|'self'
op|')'
op|','
op|'['
name|'self'
op|'.'
name|'id'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertSuitesEqual
dedent|''
name|'def'
name|'assertSuitesEqual'
op|'('
name|'self'
op|','
name|'test1'
op|','
name|'names'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'loader'
op|'='
name|'runner'
op|'.'
name|'TestLoader'
op|'('
op|')'
newline|'\n'
name|'names1'
op|'='
name|'testNames'
op|'('
name|'test1'
op|')'
newline|'\n'
name|'names2'
op|'='
name|'testNames'
op|'('
name|'runner'
op|'.'
name|'TestSuite'
op|'('
name|'map'
op|'('
name|'loader'
op|'.'
name|'loadByName'
op|','
name|'names'
op|')'
op|')'
op|')'
newline|'\n'
name|'names1'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'names2'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'names1'
op|','
name|'names2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_baseState
dedent|''
name|'def'
name|'test_baseState'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'config'
op|'['
string|"'tests'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_testmoduleOnModule
dedent|''
name|'def'
name|'test_testmoduleOnModule'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that --testmodule loads a suite which contains the tests\n        referred to in test-case-name inside its parameter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'opt_testmodule'
op|'('
name|'sibpath'
op|'('
string|"'moduletest.py'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSuitesEqual'
op|'('
name|'trial'
op|'.'
name|'_getSuite'
op|'('
name|'self'
op|'.'
name|'config'
op|')'
op|','
nl|'\n'
op|'['
string|"'twisted.trial.test.test_test_visitor'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_testmoduleTwice
dedent|''
name|'def'
name|'test_testmoduleTwice'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When the same module is specified with two --testmodule flags, it\n        should only appear once in the suite.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'opt_testmodule'
op|'('
name|'sibpath'
op|'('
string|"'moduletest.py'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'opt_testmodule'
op|'('
name|'sibpath'
op|'('
string|"'moduletest.py'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSuitesEqual'
op|'('
name|'trial'
op|'.'
name|'_getSuite'
op|'('
name|'self'
op|'.'
name|'config'
op|')'
op|','
nl|'\n'
op|'['
string|"'twisted.trial.test.test_test_visitor'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_testmoduleOnSourceAndTarget
dedent|''
name|'def'
name|'test_testmoduleOnSourceAndTarget'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If --testmodule is specified twice, once for module A and once for\n        a module which refers to module A, then make sure module A is only\n        added once.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'opt_testmodule'
op|'('
name|'sibpath'
op|'('
string|"'moduletest.py'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'opt_testmodule'
op|'('
name|'sibpath'
op|'('
string|"'test_test_visitor.py'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSuitesEqual'
op|'('
name|'trial'
op|'.'
name|'_getSuite'
op|'('
name|'self'
op|'.'
name|'config'
op|')'
op|','
nl|'\n'
op|'['
string|"'twisted.trial.test.test_test_visitor'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_testmoduleOnSelfModule
dedent|''
name|'def'
name|'test_testmoduleOnSelfModule'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When given a module that refers to *itself* in the test-case-name\n        variable, check that --testmodule only adds the tests once.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'opt_testmodule'
op|'('
name|'sibpath'
op|'('
string|"'moduleself.py'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSuitesEqual'
op|'('
name|'trial'
op|'.'
name|'_getSuite'
op|'('
name|'self'
op|'.'
name|'config'
op|')'
op|','
nl|'\n'
op|'['
string|"'twisted.trial.test.moduleself'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_testmoduleOnScript
dedent|''
name|'def'
name|'test_testmoduleOnScript'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that --testmodule loads tests referred to in test-case-name\n        buffer variables.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'opt_testmodule'
op|'('
name|'sibpath'
op|'('
string|"'scripttest.py'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSuitesEqual'
op|'('
name|'trial'
op|'.'
name|'_getSuite'
op|'('
name|'self'
op|'.'
name|'config'
op|')'
op|','
nl|'\n'
op|'['
string|"'twisted.trial.test.test_test_visitor'"
op|','
nl|'\n'
string|"'twisted.trial.test.test_class'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_testmoduleOnNonexistentFile
dedent|''
name|'def'
name|'test_testmoduleOnNonexistentFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that --testmodule displays a meaningful error message when\n        passed a non-existent filename.\n        """'
newline|'\n'
name|'buffy'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'stderr'
op|','
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'sys'
op|'.'
name|'stderr'
op|','
name|'buffy'
newline|'\n'
name|'filename'
op|'='
string|"'test_thisbetternoteverexist.py'"
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'config'
op|'.'
name|'opt_testmodule'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'config'
op|'['
string|"'tests'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
string|'"File %r doesn\'t exist\\n"'
op|'%'
op|'('
name|'filename'
op|','
op|')'
op|','
nl|'\n'
name|'buffy'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'stderr'
newline|'\n'
nl|'\n'
DECL|member|test_testmoduleOnEmptyVars
dedent|''
dedent|''
name|'def'
name|'test_testmoduleOnEmptyVars'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that --testmodule adds no tests to the suite for modules\n        which lack test-case-name buffer variables.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'opt_testmodule'
op|'('
name|'sibpath'
op|'('
string|"'novars.py'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'config'
op|'['
string|"'tests'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_testmoduleOnModuleName
dedent|''
name|'def'
name|'test_testmoduleOnModuleName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that --testmodule does *not* support module names as arguments\n        and that it displays a meaningful error message.\n        """'
newline|'\n'
name|'buffy'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'stderr'
op|','
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'sys'
op|'.'
name|'stderr'
op|','
name|'buffy'
newline|'\n'
name|'moduleName'
op|'='
string|"'twisted.trial.test.test_script'"
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'config'
op|'.'
name|'opt_testmodule'
op|'('
name|'moduleName'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'config'
op|'['
string|"'tests'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
string|'"File %r doesn\'t exist\\n"'
op|'%'
op|'('
name|'moduleName'
op|','
op|')'
op|','
nl|'\n'
name|'buffy'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'stderr'
newline|'\n'
nl|'\n'
DECL|member|test_parseLocalVariable
dedent|''
dedent|''
name|'def'
name|'test_parseLocalVariable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'declaration'
op|'='
string|"'-*- test-case-name: twisted.trial.test.test_tests -*-'"
newline|'\n'
name|'localVars'
op|'='
name|'trial'
op|'.'
name|'_parseLocalVariables'
op|'('
name|'declaration'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'{'
string|"'test-case-name'"
op|':'
nl|'\n'
string|"'twisted.trial.test.test_tests'"
op|'}'
op|','
nl|'\n'
name|'localVars'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_trailingSemicolon
dedent|''
name|'def'
name|'test_trailingSemicolon'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'declaration'
op|'='
string|"'-*- test-case-name: twisted.trial.test.test_tests; -*-'"
newline|'\n'
name|'localVars'
op|'='
name|'trial'
op|'.'
name|'_parseLocalVariables'
op|'('
name|'declaration'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'{'
string|"'test-case-name'"
op|':'
nl|'\n'
string|"'twisted.trial.test.test_tests'"
op|'}'
op|','
nl|'\n'
name|'localVars'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_parseLocalVariables
dedent|''
name|'def'
name|'test_parseLocalVariables'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'declaration'
op|'='
op|'('
string|"'-*- test-case-name: twisted.trial.test.test_tests; '"
nl|'\n'
string|"'foo: bar -*-'"
op|')'
newline|'\n'
name|'localVars'
op|'='
name|'trial'
op|'.'
name|'_parseLocalVariables'
op|'('
name|'declaration'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'{'
string|"'test-case-name'"
op|':'
nl|'\n'
string|"'twisted.trial.test.test_tests'"
op|','
nl|'\n'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
nl|'\n'
name|'localVars'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_surroundingGuff
dedent|''
name|'def'
name|'test_surroundingGuff'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'declaration'
op|'='
op|'('
string|"'## -*- test-case-name: '"
nl|'\n'
string|"'twisted.trial.test.test_tests -*- #'"
op|')'
newline|'\n'
name|'localVars'
op|'='
name|'trial'
op|'.'
name|'_parseLocalVariables'
op|'('
name|'declaration'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'{'
string|"'test-case-name'"
op|':'
nl|'\n'
string|"'twisted.trial.test.test_tests'"
op|'}'
op|','
nl|'\n'
name|'localVars'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalidLine
dedent|''
name|'def'
name|'test_invalidLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'ValueError'
op|','
name|'trial'
op|'.'
name|'_parseLocalVariables'
op|','
nl|'\n'
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalidDeclaration
dedent|''
name|'def'
name|'test_invalidDeclaration'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'ValueError'
op|','
name|'trial'
op|'.'
name|'_parseLocalVariables'
op|','
nl|'\n'
string|"'-*- foo -*-'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'ValueError'
op|','
name|'trial'
op|'.'
name|'_parseLocalVariables'
op|','
nl|'\n'
string|"'-*- foo: bar; qux -*-'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'ValueError'
op|','
name|'trial'
op|'.'
name|'_parseLocalVariables'
op|','
nl|'\n'
string|"'-*- foo: bar: baz; qux: qax -*-'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_variablesFromFile
dedent|''
name|'def'
name|'test_variablesFromFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'localVars'
op|'='
name|'trial'
op|'.'
name|'loadLocalVariables'
op|'('
name|'sibpath'
op|'('
string|"'moduletest.py'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'{'
string|"'test-case-name'"
op|':'
nl|'\n'
string|"'twisted.trial.test.test_test_visitor'"
op|'}'
op|','
nl|'\n'
name|'localVars'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_noVariablesInFile
dedent|''
name|'def'
name|'test_noVariablesInFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'localVars'
op|'='
name|'trial'
op|'.'
name|'loadLocalVariables'
op|'('
name|'sibpath'
op|'('
string|"'novars.py'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'{'
op|'}'
op|','
name|'localVars'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_variablesFromScript
dedent|''
name|'def'
name|'test_variablesFromScript'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'localVars'
op|'='
name|'trial'
op|'.'
name|'loadLocalVariables'
op|'('
name|'sibpath'
op|'('
string|"'scripttest.py'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
nl|'\n'
op|'{'
string|"'test-case-name'"
op|':'
op|'('
string|"'twisted.trial.test.test_test_visitor,'"
nl|'\n'
string|"'twisted.trial.test.test_class'"
op|')'
op|'}'
op|','
nl|'\n'
name|'localVars'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getTestModules
dedent|''
name|'def'
name|'test_getTestModules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'modules'
op|'='
name|'trial'
op|'.'
name|'getTestModules'
op|'('
name|'sibpath'
op|'('
string|"'moduletest.py'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'modules'
op|','
op|'['
string|"'twisted.trial.test.test_test_visitor'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getTestModules_noVars
dedent|''
name|'def'
name|'test_getTestModules_noVars'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'modules'
op|'='
name|'trial'
op|'.'
name|'getTestModules'
op|'('
name|'sibpath'
op|'('
string|"'novars.py'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'modules'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getTestModules_multiple
dedent|''
name|'def'
name|'test_getTestModules_multiple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'modules'
op|'='
name|'trial'
op|'.'
name|'getTestModules'
op|'('
name|'sibpath'
op|'('
string|"'scripttest.py'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'set'
op|'('
name|'modules'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
string|"'twisted.trial.test.test_test_visitor'"
op|','
nl|'\n'
string|"'twisted.trial.test.test_class'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_looksLikeTestModule
dedent|''
name|'def'
name|'test_looksLikeTestModule'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'filename'
name|'in'
op|'['
string|"'test_script.py'"
op|','
string|"'twisted/trial/test/test_script.py'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'trial'
op|'.'
name|'isTestFile'
op|'('
name|'filename'
op|')'
op|','
nl|'\n'
string|'"%r should be a test file"'
op|'%'
op|'('
name|'filename'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'filename'
name|'in'
op|'['
string|"'twisted/trial/test/moduletest.py'"
op|','
nl|'\n'
name|'sibpath'
op|'('
string|"'scripttest.py'"
op|')'
op|','
name|'sibpath'
op|'('
string|"'test_foo.bat'"
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'trial'
op|'.'
name|'isTestFile'
op|'('
name|'filename'
op|')'
op|','
nl|'\n'
string|'"%r should *not* be a test file"'
op|'%'
op|'('
name|'filename'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WithoutModuleTests
dedent|''
dedent|''
dedent|''
name|'class'
name|'WithoutModuleTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test the C{without-module} flag.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a L{trial.Options} object to be used in the tests, and save\n        C{sys.modules}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'='
name|'trial'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'savedModules'
op|'='
name|'dict'
op|'('
name|'sys'
op|'.'
name|'modules'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Restore C{sys.modules}.\n        """'
newline|'\n'
name|'for'
name|'module'
name|'in'
op|'('
string|"'imaplib'"
op|','
string|"'smtplib'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'module'
name|'in'
name|'self'
op|'.'
name|'savedModules'
op|':'
newline|'\n'
indent|'                '
name|'sys'
op|'.'
name|'modules'
op|'['
name|'module'
op|']'
op|'='
name|'self'
op|'.'
name|'savedModules'
op|'['
name|'module'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'pop'
op|'('
name|'module'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_checkSMTP
dedent|''
dedent|''
dedent|''
name|'def'
name|'_checkSMTP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to import the C{smtplib} module, and return it.\n        """'
newline|'\n'
name|'import'
name|'smtplib'
newline|'\n'
name|'return'
name|'smtplib'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_checkIMAP
dedent|''
name|'def'
name|'_checkIMAP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to import the C{imaplib} module, and return it.\n        """'
newline|'\n'
name|'import'
name|'imaplib'
newline|'\n'
name|'return'
name|'imaplib'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disableOneModule
dedent|''
name|'def'
name|'test_disableOneModule'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that after disabling a module, it can\'t be imported anymore.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|'"--without-module"'
op|','
string|'"smtplib"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ImportError'
op|','
name|'self'
op|'.'
name|'_checkSMTP'
op|')'
newline|'\n'
comment|'# Restore sys.modules'
nl|'\n'
name|'del'
name|'sys'
op|'.'
name|'modules'
op|'['
string|'"smtplib"'
op|']'
newline|'\n'
comment|'# Then the function should succeed'
nl|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'self'
op|'.'
name|'_checkSMTP'
op|'('
op|')'
op|','
name|'types'
op|'.'
name|'ModuleType'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disableMultipleModules
dedent|''
name|'def'
name|'test_disableMultipleModules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that several modules can be disabled at once.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|'"--without-module"'
op|','
string|'"smtplib,imaplib"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ImportError'
op|','
name|'self'
op|'.'
name|'_checkSMTP'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ImportError'
op|','
name|'self'
op|'.'
name|'_checkIMAP'
op|')'
newline|'\n'
comment|'# Restore sys.modules'
nl|'\n'
name|'del'
name|'sys'
op|'.'
name|'modules'
op|'['
string|'"smtplib"'
op|']'
newline|'\n'
name|'del'
name|'sys'
op|'.'
name|'modules'
op|'['
string|'"imaplib"'
op|']'
newline|'\n'
comment|'# Then the functions should succeed'
nl|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'self'
op|'.'
name|'_checkSMTP'
op|'('
op|')'
op|','
name|'types'
op|'.'
name|'ModuleType'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'self'
op|'.'
name|'_checkIMAP'
op|'('
op|')'
op|','
name|'types'
op|'.'
name|'ModuleType'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disableAlreadyImportedModule
dedent|''
name|'def'
name|'test_disableAlreadyImportedModule'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Disabling an already imported module should produce a warning.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'self'
op|'.'
name|'_checkSMTP'
op|'('
op|')'
op|','
name|'types'
op|'.'
name|'ModuleType'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'RuntimeWarning'
op|','
nl|'\n'
string|'"Module \'smtplib\' already imported, disabling anyway."'
op|','
nl|'\n'
name|'trial'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'parseOptions'
op|','
op|'['
string|'"--without-module"'
op|','
string|'"smtplib"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ImportError'
op|','
name|'self'
op|'.'
name|'_checkSMTP'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

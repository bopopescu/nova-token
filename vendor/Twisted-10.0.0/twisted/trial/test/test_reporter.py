begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Maintainer: Jonathan Lange'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.trial.reporter}.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'errno'
op|','
name|'sys'
op|','
name|'os'
op|','
name|'re'
op|','
name|'StringIO'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'utils'
name|'import'
name|'suppressWarnings'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'failure'
name|'import'
name|'Failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'itrial'
op|','
name|'unittest'
op|','
name|'runner'
op|','
name|'reporter'
op|','
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'reporter'
name|'import'
name|'UncleanWarningsReporterWrapper'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
name|'import'
name|'erroneous'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'makeTodo'
op|','
name|'SkipTest'
op|','
name|'Todo'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BrokenStream
name|'class'
name|'BrokenStream'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Stream-ish object that raises a signal interrupt error. We use this to make\n    sure that Trial still manages to write what it needs to write.\n    """'
newline|'\n'
DECL|variable|written
name|'written'
op|'='
name|'False'
newline|'\n'
DECL|variable|flushed
name|'flushed'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'fObj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fObj'
op|'='
name|'fObj'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'written'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'fObj'
op|'.'
name|'write'
op|'('
name|'s'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'written'
op|'='
name|'True'
newline|'\n'
name|'raise'
name|'IOError'
op|'('
name|'errno'
op|'.'
name|'EINTR'
op|','
string|'"Interrupted write"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|flush
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'flushed'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'fObj'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'flushed'
op|'='
name|'True'
newline|'\n'
name|'raise'
name|'IOError'
op|'('
name|'errno'
op|'.'
name|'EINTR'
op|','
string|'"Interrupted flush"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StringTest
dedent|''
dedent|''
name|'class'
name|'StringTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|stringComparison
indent|'    '
name|'def'
name|'stringComparison'
op|'('
name|'self'
op|','
name|'expect'
op|','
name|'output'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'output'
op|'='
name|'filter'
op|'('
name|'None'
op|','
name|'output'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'len'
op|'('
name|'expect'
op|')'
op|'<='
name|'len'
op|'('
name|'output'
op|')'
op|','
nl|'\n'
string|'"Must have more observed than expected"'
nl|'\n'
string|'"lines %d < %d"'
op|'%'
op|'('
name|'len'
op|'('
name|'output'
op|')'
op|','
name|'len'
op|'('
name|'expect'
op|')'
op|')'
op|')'
newline|'\n'
name|'REGEX_PATTERN_TYPE'
op|'='
name|'type'
op|'('
name|'re'
op|'.'
name|'compile'
op|'('
string|"''"
op|')'
op|')'
newline|'\n'
name|'for'
name|'line_number'
op|','
op|'('
name|'exp'
op|','
name|'out'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'zip'
op|'('
name|'expect'
op|','
name|'output'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'exp'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'exp'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertSubstring'
op|'('
name|'exp'
op|','
name|'out'
op|','
string|'"Line %d: %r not in %r"'
nl|'\n'
op|'%'
op|'('
name|'line_number'
op|','
name|'exp'
op|','
name|'out'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'exp'
op|','
name|'REGEX_PATTERN_TYPE'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'exp'
op|'.'
name|'match'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|'"Line %d: %r did not match string %r"'
nl|'\n'
op|'%'
op|'('
name|'line_number'
op|','
name|'exp'
op|'.'
name|'pattern'
op|','
name|'out'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'TypeError'
op|'('
string|'"don\'t know what to do with object %r"'
nl|'\n'
op|'%'
op|'('
name|'exp'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestTestResult
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestTestResult'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pyunitAddError
dedent|''
name|'def'
name|'test_pyunitAddError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# pyunit passes an exc_info tuple directly to addError'
nl|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|"'foo'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'RuntimeError'
op|','
name|'excValue'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'failure'
op|'='
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'excValue'
op|','
name|'failure'
op|'.'
name|'value'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'RuntimeError'
op|','
name|'failure'
op|'.'
name|'type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pyunitAddFailure
dedent|''
name|'def'
name|'test_pyunitAddFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# pyunit passes an exc_info tuple directly to addFailure'
nl|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
string|"'foo'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'failureException'
op|','
name|'excValue'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'.'
name|'addFailure'
op|'('
name|'self'
op|','
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'failure'
op|'='
name|'self'
op|'.'
name|'result'
op|'.'
name|'failures'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'excValue'
op|','
name|'failure'
op|'.'
name|'value'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
name|'failure'
op|'.'
name|'type'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestReporterRealtime
dedent|''
dedent|''
name|'class'
name|'TestReporterRealtime'
op|'('
name|'TestTestResult'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'output'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'Reporter'
op|'('
name|'output'
op|','
name|'realtime'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestErrorReporting
dedent|''
dedent|''
name|'class'
name|'TestErrorReporting'
op|'('
name|'StringTest'
op|')'
op|':'
newline|'\n'
DECL|variable|doubleSeparator
indent|'    '
name|'doubleSeparator'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'^=+$'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loader'
op|'='
name|'runner'
op|'.'
name|'TestLoader'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'output'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'Reporter'
op|'('
name|'self'
op|'.'
name|'output'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getOutput
dedent|''
name|'def'
name|'getOutput'
op|'('
name|'self'
op|','
name|'suite'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'self'
op|'.'
name|'getResult'
op|'('
name|'suite'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'output'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getResult
dedent|''
name|'def'
name|'getResult'
op|'('
name|'self'
op|','
name|'suite'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'suite'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|testFormatErroredMethod
dedent|''
name|'def'
name|'testFormatErroredMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadClass'
op|'('
name|'erroneous'
op|'.'
name|'TestFailureInSetUp'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'getOutput'
op|'('
name|'suite'
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
name|'match'
op|'='
op|'['
name|'self'
op|'.'
name|'doubleSeparator'
op|','
nl|'\n'
op|'('
string|"'[ERROR]: twisted.trial.test.erroneous.'"
nl|'\n'
string|"'TestFailureInSetUp.test_noop'"
op|')'
op|','
nl|'\n'
string|"'Traceback (most recent call last):'"
op|','
nl|'\n'
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'^\\s+File .*erroneous\\.py., line \\d+, in setUp$'"
op|')'
op|','
nl|'\n'
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'^\\s+raise FoolishError, '"
nl|'\n'
string|"r'.I am a broken setUp method.$'"
op|')'
op|','
nl|'\n'
op|'('
string|"'twisted.trial.test.erroneous.FoolishError: '"
nl|'\n'
string|"'I am a broken setUp method'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'stringComparison'
op|'('
name|'match'
op|','
name|'output'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFormatFailedMethod
dedent|''
name|'def'
name|'testFormatFailedMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadMethod'
op|'('
name|'erroneous'
op|'.'
name|'TestRegularFail'
op|'.'
name|'test_fail'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'getOutput'
op|'('
name|'suite'
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
name|'match'
op|'='
op|'['
nl|'\n'
name|'self'
op|'.'
name|'doubleSeparator'
op|','
nl|'\n'
string|"'[FAIL]: '"
nl|'\n'
string|"'twisted.trial.test.erroneous.TestRegularFail.test_fail'"
op|','
nl|'\n'
string|"'Traceback (most recent call last):'"
op|','
nl|'\n'
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'^\\s+File .*erroneous\\.py., line \\d+, in test_fail$'"
op|')'
op|','
nl|'\n'
name|'re'
op|'.'
name|'compile'
op|'('
string|'r\'^\\s+self\\.fail\\("I fail"\\)$\''
op|')'
op|','
nl|'\n'
string|"'twisted.trial.unittest.FailTest: I fail'"
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'stringComparison'
op|'('
name|'match'
op|','
name|'output'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDoctestError
dedent|''
name|'def'
name|'testDoctestError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
name|'import'
name|'erroneous'
newline|'\n'
name|'suite'
op|'='
name|'unittest'
op|'.'
name|'decorate'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadDoctests'
op|'('
name|'erroneous'
op|')'
op|','
name|'itrial'
op|'.'
name|'ITestCase'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'getOutput'
op|'('
name|'suite'
op|')'
newline|'\n'
name|'path'
op|'='
string|"'twisted.trial.test.erroneous.unexpectedException'"
newline|'\n'
name|'for'
name|'substring'
name|'in'
op|'['
string|"'1/0'"
op|','
string|"'ZeroDivisionError'"
op|','
nl|'\n'
string|"'Exception raised:'"
op|','
name|'path'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertSubstring'
op|'('
name|'substring'
op|','
name|'output'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'re'
op|'.'
name|'search'
op|'('
string|"'Fail(ed|ure in) example:'"
op|','
name|'output'
op|')'
op|','
nl|'\n'
string|'"Couldn\'t match \'Failure in example: \' "'
nl|'\n'
string|'"or \'Failed example: \'"'
op|')'
newline|'\n'
name|'expect'
op|'='
op|'['
name|'self'
op|'.'
name|'doubleSeparator'
op|','
nl|'\n'
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'\\[(ERROR|FAIL)\\]: .*'"
op|'+'
name|'re'
op|'.'
name|'escape'
op|'('
name|'path'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'stringComparison'
op|'('
name|'expect'
op|','
name|'output'
op|'.'
name|'splitlines'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testHiddenException
dedent|''
name|'def'
name|'testHiddenException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that errors in C{DelayedCall}s get reported, even if the\n        test already has a failure.\n\n        Only really necessary for testing the deprecated style of tests that\n        use iterate() directly. See\n        L{erroneous.DelayedCall.testHiddenException} for more details.\n        """'
newline|'\n'
name|'test'
op|'='
name|'erroneous'
op|'.'
name|'DelayedCall'
op|'('
string|"'testHiddenException'"
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'getOutput'
op|'('
name|'test'
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
name|'match'
op|'='
op|'['
nl|'\n'
name|'self'
op|'.'
name|'doubleSeparator'
op|','
nl|'\n'
string|"'[FAIL]: '"
nl|'\n'
string|"'twisted.trial.test.erroneous.DelayedCall.testHiddenException'"
op|','
nl|'\n'
string|"'Traceback (most recent call last):'"
op|','
nl|'\n'
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'^\\s+File .*erroneous\\.py., line \\d+, in '"
nl|'\n'
string|"'testHiddenException$'"
op|')'
op|','
nl|'\n'
name|'re'
op|'.'
name|'compile'
op|'('
string|'r\'^\\s+self\\.fail\\("Deliberate failure to mask the \''
nl|'\n'
string|'\'hidden exception"\\)$\''
op|')'
op|','
nl|'\n'
string|"'twisted.trial.unittest.FailTest: '"
nl|'\n'
string|"'Deliberate failure to mask the hidden exception'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'doubleSeparator'
op|','
nl|'\n'
string|"'[ERROR]: '"
nl|'\n'
string|"'twisted.trial.test.erroneous.DelayedCall.testHiddenException'"
op|','
nl|'\n'
string|"'Traceback (most recent call last):'"
op|','
nl|'\n'
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'^\\s+File .* in runUntilCurrent'"
op|')'
op|','
nl|'\n'
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'^\\s+.*'"
op|')'
op|','
nl|'\n'
name|'re'
op|'.'
name|'compile'
op|'('
string|'\'^\\s+File .*erroneous\\.py", line \\d+, in go\''
op|')'
op|','
nl|'\n'
name|'re'
op|'.'
name|'compile'
op|'('
string|"'^\\s+raise RuntimeError\\(self.hiddenExceptionMsg\\)'"
op|')'
op|','
nl|'\n'
string|"'exceptions.RuntimeError: something blew up'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stringComparison'
op|'('
name|'match'
op|','
name|'output'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestUncleanWarningWrapperErrorReporting
dedent|''
dedent|''
name|'class'
name|'TestUncleanWarningWrapperErrorReporting'
op|'('
name|'TestErrorReporting'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests that the L{UncleanWarningsReporterWrapper} can sufficiently proxy\n    IReporter failure and error reporting methods to a L{reporter.Reporter}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loader'
op|'='
name|'runner'
op|'.'
name|'TestLoader'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'output'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'UncleanWarningsReporterWrapper'
op|'('
nl|'\n'
name|'reporter'
op|'.'
name|'Reporter'
op|'('
name|'self'
op|'.'
name|'output'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TracebackHandling
dedent|''
dedent|''
name|'class'
name|'TracebackHandling'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|getErrorFrames
indent|'    '
name|'def'
name|'getErrorFrames'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'stream'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'Reporter'
op|'('
name|'stream'
op|')'
newline|'\n'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'bads'
op|'='
name|'result'
op|'.'
name|'failures'
op|'+'
name|'result'
op|'.'
name|'errors'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'bads'
op|')'
op|'=='
number|'1'
newline|'\n'
name|'assert'
name|'bads'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'=='
name|'test'
newline|'\n'
name|'return'
name|'result'
op|'.'
name|'_trimFrames'
op|'('
name|'bads'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'frames'
op|')'
newline|'\n'
nl|'\n'
DECL|member|checkFrames
dedent|''
name|'def'
name|'checkFrames'
op|'('
name|'self'
op|','
name|'observedFrames'
op|','
name|'expectedFrames'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'observed'
op|','
name|'expected'
name|'in'
name|'zip'
op|'('
name|'observedFrames'
op|','
name|'expectedFrames'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'observed'
op|'['
number|'0'
op|']'
op|','
name|'expected'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'observedSegs'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'observed'
op|'['
number|'1'
op|']'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
name|'os'
op|'.'
name|'sep'
op|')'
newline|'\n'
name|'expectedSegs'
op|'='
name|'expected'
op|'['
number|'1'
op|']'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'observedSegs'
op|'['
op|'-'
name|'len'
op|'('
name|'expectedSegs'
op|')'
op|':'
op|']'
op|','
nl|'\n'
name|'expectedSegs'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'observedFrames'
op|')'
op|','
name|'len'
op|'('
name|'expectedFrames'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_basic
dedent|''
name|'def'
name|'test_basic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'test'
op|'='
name|'erroneous'
op|'.'
name|'TestRegularFail'
op|'('
string|"'test_fail'"
op|')'
newline|'\n'
name|'frames'
op|'='
name|'self'
op|'.'
name|'getErrorFrames'
op|'('
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checkFrames'
op|'('
name|'frames'
op|','
nl|'\n'
op|'['
op|'('
string|"'test_fail'"
op|','
string|"'twisted/trial/test/erroneous'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_subroutine
dedent|''
name|'def'
name|'test_subroutine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'test'
op|'='
name|'erroneous'
op|'.'
name|'TestRegularFail'
op|'('
string|"'test_subfail'"
op|')'
newline|'\n'
name|'frames'
op|'='
name|'self'
op|'.'
name|'getErrorFrames'
op|'('
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checkFrames'
op|'('
name|'frames'
op|','
nl|'\n'
op|'['
op|'('
string|"'test_subfail'"
op|','
string|"'twisted/trial/test/erroneous'"
op|')'
op|','
nl|'\n'
op|'('
string|"'subroutine'"
op|','
string|"'twisted/trial/test/erroneous'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deferred
dedent|''
name|'def'
name|'test_deferred'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'test'
op|'='
name|'erroneous'
op|'.'
name|'TestFailureInDeferredChain'
op|'('
string|"'test_fail'"
op|')'
newline|'\n'
name|'frames'
op|'='
name|'self'
op|'.'
name|'getErrorFrames'
op|'('
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checkFrames'
op|'('
name|'frames'
op|','
nl|'\n'
op|'['
op|'('
string|"'_later'"
op|','
string|"'twisted/trial/test/erroneous'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_noFrames
dedent|''
name|'def'
name|'test_noFrames'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'reporter'
op|'.'
name|'Reporter'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'result'
op|'.'
name|'_trimFrames'
op|'('
op|'['
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_oneFrame
dedent|''
name|'def'
name|'test_oneFrame'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'reporter'
op|'.'
name|'Reporter'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'fake frame'"
op|']'
op|','
name|'result'
op|'.'
name|'_trimFrames'
op|'('
op|'['
string|"'fake frame'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FormatFailures
dedent|''
dedent|''
name|'class'
name|'FormatFailures'
op|'('
name|'StringTest'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|"'foo'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'RuntimeError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'f'
op|'='
name|'Failure'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'f'
op|'.'
name|'frames'
op|'='
op|'['
nl|'\n'
op|'['
string|"'foo'"
op|','
string|"'foo/bar.py'"
op|','
number|'5'
op|','
op|'['
op|'('
string|"'x'"
op|','
number|'5'
op|')'
op|']'
op|','
op|'['
op|'('
string|"'y'"
op|','
string|"'orange'"
op|')'
op|']'
op|']'
op|','
nl|'\n'
op|'['
string|"'qux'"
op|','
string|"'foo/bar.py'"
op|','
number|'10'
op|','
op|'['
op|'('
string|"'a'"
op|','
string|"'two'"
op|')'
op|']'
op|','
op|'['
op|'('
string|"'b'"
op|','
string|"'MCMXCIX'"
op|')'
op|']'
op|']'
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'Reporter'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_formatDefault
dedent|''
name|'def'
name|'test_formatDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tb'
op|'='
name|'self'
op|'.'
name|'result'
op|'.'
name|'_formatFailureTraceback'
op|'('
name|'self'
op|'.'
name|'f'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stringComparison'
op|'('
op|'['
nl|'\n'
string|"'Traceback (most recent call last):'"
op|','
nl|'\n'
string|'\'  File "foo/bar.py", line 5, in foo\''
op|','
nl|'\n'
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'^\\s*$'"
op|')'
op|','
nl|'\n'
string|'\'  File "foo/bar.py", line 10, in qux\''
op|','
nl|'\n'
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'^\\s*$'"
op|')'
op|','
nl|'\n'
string|"'RuntimeError: foo'"
op|']'
op|','
name|'tb'
op|'.'
name|'splitlines'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_formatString
dedent|''
name|'def'
name|'test_formatString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tb'
op|'='
string|'\'\'\'\n  File "twisted/trial/unittest.py", line 256, in failUnlessSubstring\n    return self.failUnlessIn(substring, astring, msg)\nexceptions.TypeError: iterable argument required\n\n\'\'\''
newline|'\n'
name|'expected'
op|'='
string|'\'\'\'\n  File "twisted/trial/unittest.py", line 256, in failUnlessSubstring\n    return self.failUnlessIn(substring, astring, msg)\nexceptions.TypeError: iterable argument required\n\'\'\''
newline|'\n'
name|'formatted'
op|'='
name|'self'
op|'.'
name|'result'
op|'.'
name|'_formatFailureTraceback'
op|'('
name|'tb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'formatted'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_mutation
dedent|''
name|'def'
name|'test_mutation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'frames'
op|'='
name|'self'
op|'.'
name|'f'
op|'.'
name|'frames'
op|'['
op|':'
op|']'
newline|'\n'
name|'tb'
op|'='
name|'self'
op|'.'
name|'result'
op|'.'
name|'_formatFailureTraceback'
op|'('
name|'self'
op|'.'
name|'f'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'f'
op|'.'
name|'frames'
op|','
name|'frames'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PyunitTestNames
dedent|''
dedent|''
name|'class'
name|'PyunitTestNames'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
name|'import'
name|'sample'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'='
name|'sample'
op|'.'
name|'PyunitTest'
op|'('
string|"'test_foo'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_verboseReporter
dedent|''
name|'def'
name|'test_verboseReporter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'reporter'
op|'.'
name|'VerboseTextReporter'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'startTest'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
nl|'\n'
name|'output'
op|','
string|"'twisted.trial.test.sample.PyunitTest.test_foo ... '"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_treeReporter
dedent|''
name|'def'
name|'test_treeReporter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TreeReporter'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'startTest'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'output'
op|'='
name|'output'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'output'
op|','
name|'result'
op|'.'
name|'getDescription'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
op|'+'
string|"' ...'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getDescription
dedent|''
name|'def'
name|'test_getDescription'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TreeReporter'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
newline|'\n'
name|'output'
op|'='
name|'result'
op|'.'
name|'getDescription'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'output'
op|','
string|"'test_foo'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_minimalReporter
dedent|''
name|'def'
name|'test_minimalReporter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The summary of L{reporter.MinimalReporter} is a simple list of numbers,\n        indicating how many tests ran, how many failed etc.\n\n        The numbers represents:\n         * the run time of the tests\n         * the number of tests run, printed 2 times for legacy reasons\n         * the number of errors\n         * the number of failures\n         * the number of skips\n        """'
newline|'\n'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'MinimalReporter'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'_printSummary'
op|'('
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'output'
op|'['
number|'1'
op|':'
op|']'
op|','
op|'['
string|"'1'"
op|','
string|"'1'"
op|','
string|"'0'"
op|','
string|"'0'"
op|','
string|"'0'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_minimalReporterTime
dedent|''
name|'def'
name|'test_minimalReporterTime'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reporter.MinimalReporter} reports the time to run the tests as first\n        data in its output.\n        """'
newline|'\n'
name|'times'
op|'='
op|'['
number|'1.0'
op|','
number|'1.2'
op|','
number|'1.5'
op|','
number|'1.9'
op|']'
newline|'\n'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'MinimalReporter'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'_getTime'
op|'='
name|'lambda'
op|':'
name|'times'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'_printSummary'
op|'('
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'timer'
op|'='
name|'output'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timer'
op|','
string|'"0.7"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_emptyMinimalReporter
dedent|''
name|'def'
name|'test_emptyMinimalReporter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The summary of L{reporter.MinimalReporter} is a list of zeroes when no\n        test is actually run.\n        """'
newline|'\n'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'MinimalReporter'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'_printSummary'
op|'('
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'output'
op|','
op|'['
string|"'0'"
op|','
string|"'0'"
op|','
string|"'0'"
op|','
string|"'0'"
op|','
string|"'0'"
op|','
string|"'0'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestDirtyReactor
dedent|''
dedent|''
name|'class'
name|'TestDirtyReactor'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The trial script has an option to treat L{DirtyReactorAggregateError}s as\n    warnings, as a migration tool for test authors. It causes a wrapper to be\n    placed around reporters that replaces L{DirtyReactorAggregatErrors} with\n    warnings.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'dirtyError'
op|'='
name|'Failure'
op|'('
nl|'\n'
name|'util'
op|'.'
name|'DirtyReactorAggregateError'
op|'('
op|'['
string|"'foo'"
op|']'
op|','
op|'['
string|"'bar'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'output'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'='
name|'TestDirtyReactor'
op|'('
string|"'test_errorByDefault'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_errorByDefault
dedent|''
name|'def'
name|'test_errorByDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{DirtyReactorAggregateError}s are reported as errors with the default\n        Reporter.\n        """'
newline|'\n'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'Reporter'
op|'('
name|'stream'
op|'='
name|'self'
op|'.'
name|'output'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'self'
op|'.'
name|'dirtyError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'result'
op|'.'
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|','
name|'self'
op|'.'
name|'dirtyError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_warningsEnabled
dedent|''
name|'def'
name|'test_warningsEnabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{DirtyReactorErrors}s are reported as warnings when using the\n        L{UncleanWarningsReporterWrapper}.\n        """'
newline|'\n'
name|'result'
op|'='
name|'UncleanWarningsReporterWrapper'
op|'('
nl|'\n'
name|'reporter'
op|'.'
name|'Reporter'
op|'('
name|'stream'
op|'='
name|'self'
op|'.'
name|'output'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'UserWarning'
op|','
name|'self'
op|'.'
name|'dirtyError'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
op|','
nl|'\n'
name|'reporter'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'result'
op|'.'
name|'addError'
op|','
name|'self'
op|'.'
name|'test'
op|','
name|'self'
op|'.'
name|'dirtyError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_warningsMaskErrors
dedent|''
name|'def'
name|'test_warningsMaskErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{DirtyReactorErrors}s are I{not} reported as errors if the\n        L{UncleanWarningsReporterWrapper} is used.\n        """'
newline|'\n'
name|'result'
op|'='
name|'UncleanWarningsReporterWrapper'
op|'('
nl|'\n'
name|'reporter'
op|'.'
name|'Reporter'
op|'('
name|'stream'
op|'='
name|'self'
op|'.'
name|'output'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'UserWarning'
op|','
name|'self'
op|'.'
name|'dirtyError'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
op|','
nl|'\n'
name|'reporter'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'result'
op|'.'
name|'addError'
op|','
name|'self'
op|'.'
name|'test'
op|','
name|'self'
op|'.'
name|'dirtyError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'.'
name|'_originalReporter'
op|'.'
name|'errors'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_dealsWithThreeTuples
dedent|''
name|'def'
name|'test_dealsWithThreeTuples'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Some annoying stuff can pass three-tuples to addError instead of\n        Failures (like PyUnit). The wrapper, of course, handles this case,\n        since it is a part of L{twisted.trial.itrial.IReporter}! But it does\n        not convert L{DirtyReactorError} to warnings in this case, because\n        nobody should be passing those in the form of three-tuples.\n        """'
newline|'\n'
name|'result'
op|'='
name|'UncleanWarningsReporterWrapper'
op|'('
nl|'\n'
name|'reporter'
op|'.'
name|'Reporter'
op|'('
name|'stream'
op|'='
name|'self'
op|'.'
name|'output'
op|')'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|'.'
name|'test'
op|','
nl|'\n'
op|'('
name|'self'
op|'.'
name|'dirtyError'
op|'.'
name|'type'
op|','
name|'self'
op|'.'
name|'dirtyError'
op|'.'
name|'value'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'result'
op|'.'
name|'_originalReporter'
op|'.'
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'.'
name|'_originalReporter'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'type'
op|','
nl|'\n'
name|'self'
op|'.'
name|'dirtyError'
op|'.'
name|'type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'.'
name|'_originalReporter'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'value'
op|','
nl|'\n'
name|'self'
op|'.'
name|'dirtyError'
op|'.'
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TrialTestNames
dedent|''
dedent|''
name|'class'
name|'TrialTestNames'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
name|'import'
name|'sample'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'='
name|'sample'
op|'.'
name|'FooTest'
op|'('
string|"'test_foo'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_verboseReporter
dedent|''
name|'def'
name|'test_verboseReporter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'reporter'
op|'.'
name|'VerboseTextReporter'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'startTest'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'output'
op|','
name|'self'
op|'.'
name|'test'
op|'.'
name|'id'
op|'('
op|')'
op|'+'
string|"' ... '"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_treeReporter
dedent|''
name|'def'
name|'test_treeReporter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TreeReporter'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'startTest'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'output'
op|'='
name|'output'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'output'
op|','
name|'result'
op|'.'
name|'getDescription'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
op|'+'
string|"' ...'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_treeReporterWithDocstrings
dedent|''
name|'def'
name|'test_treeReporterWithDocstrings'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A docstring"""'
newline|'\n'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TreeReporter'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'getDescription'
op|'('
name|'self'
op|')'
op|','
nl|'\n'
string|"'test_treeReporterWithDocstrings'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getDescription
dedent|''
name|'def'
name|'test_getDescription'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TreeReporter'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
newline|'\n'
name|'output'
op|'='
name|'result'
op|'.'
name|'getDescription'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'output'
op|','
string|'"test_foo"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSkip
dedent|''
dedent|''
name|'class'
name|'TestSkip'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{reporter.Reporter}\'s handling of skips.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
name|'import'
name|'sample'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'Reporter'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'='
name|'sample'
op|'.'
name|'FooTest'
op|'('
string|"'test_foo'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_getSkips
dedent|''
name|'def'
name|'_getSkips'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the number of skips that happened to a reporter.\n        """'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'result'
op|'.'
name|'skips'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_accumulation
dedent|''
name|'def'
name|'test_accumulation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'result'
op|'.'
name|'addSkip'
op|'('
name|'self'
op|'.'
name|'test'
op|','
string|"'some reason'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'_getSkips'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_success
dedent|''
name|'def'
name|'test_success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'result'
op|'.'
name|'addSkip'
op|'('
name|'self'
op|'.'
name|'test'
op|','
string|"'some reason'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'True'
op|','
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_summary
dedent|''
name|'def'
name|'test_summary'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The summary of a successful run with skips indicates that the test\n        suite passed and includes the number of skips.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addSkip'
op|'('
name|'self'
op|'.'
name|'test'
op|','
string|"'some reason'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'prefix'
op|'='
string|"'PASSED '"
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'output'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'output'
op|'['
name|'len'
op|'('
name|'prefix'
op|')'
op|':'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
op|','
string|"'(skips=1)'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_basicErrors
dedent|''
name|'def'
name|'test_basicErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The output at the end of a test run with skips includes the reasons\n        for skipping those tests.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addSkip'
op|'('
name|'self'
op|'.'
name|'test'
op|','
string|"'some reason'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
number|'4'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'output'
op|'.'
name|'strip'
op|'('
op|')'
op|','
string|"'some reason'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_booleanSkip
dedent|''
name|'def'
name|'test_booleanSkip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Tests can be skipped without specifying a reason by setting the \'skip\'\n        attribute to True. When this happens, the test output includes \'True\'\n        as the reason.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addSkip'
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
number|'4'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'output'
op|','
string|"'True'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_exceptionSkip
dedent|''
name|'def'
name|'test_exceptionSkip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Skips can be raised as errors. When this happens, the error is\n        included in the summary at the end of the test suite.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
number|'1'
op|'/'
number|'0'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'error'
op|'='
name|'e'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'result'
op|'.'
name|'addSkip'
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'output'
op|'='
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
number|'3'
op|':'
number|'5'
op|']'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'output'
op|','
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UncleanWarningSkipTest
dedent|''
dedent|''
name|'class'
name|'UncleanWarningSkipTest'
op|'('
name|'TestSkip'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for skips on a L{reporter.Reporter} wrapped by an\n    L{UncleanWarningsReporterWrapper}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'TestSkip'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'UncleanWarningsReporterWrapper'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_getSkips
dedent|''
name|'def'
name|'_getSkips'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the number of skips that happened to a reporter inside of an\n        unclean warnings reporter wrapper.\n        """'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'result'
op|'.'
name|'_originalReporter'
op|'.'
name|'skips'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TodoTest
dedent|''
dedent|''
name|'class'
name|'TodoTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{reporter.Reporter}\'s handling of todos.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
name|'import'
name|'sample'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'Reporter'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'='
name|'sample'
op|'.'
name|'FooTest'
op|'('
string|"'test_foo'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getTodos
dedent|''
name|'def'
name|'_getTodos'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the number of todos that happened to a reporter.\n        """'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'result'
op|'.'
name|'expectedFailures'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getUnexpectedSuccesses
dedent|''
name|'def'
name|'_getUnexpectedSuccesses'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the number of unexpected successes that happened to a reporter.\n        """'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'result'
op|'.'
name|'unexpectedSuccesses'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_accumulation
dedent|''
name|'def'
name|'test_accumulation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reporter.Reporter} accumulates the expected failures that it\n        is notified of.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addExpectedFailure'
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'Failure'
op|'('
name|'Exception'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'makeTodo'
op|'('
string|"'todo!'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'_getTodos'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_success
dedent|''
name|'def'
name|'test_success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A test run is still successful even if there are expected failures.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addExpectedFailure'
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'Failure'
op|'('
name|'Exception'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'makeTodo'
op|'('
string|"'todo!'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'True'
op|','
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unexpectedSuccess
dedent|''
name|'def'
name|'test_unexpectedSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A test which is marked as todo but succeeds will have an unexpected\n        success reported to its result. A test run is still successful even\n        when this happens.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addUnexpectedSuccess'
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'makeTodo'
op|'('
string|'"Heya!"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'True'
op|','
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'_getUnexpectedSuccesses'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_summary
dedent|''
name|'def'
name|'test_summary'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The reporter\'s C{printSummary} method should print the number of\n        expected failures that occured.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addExpectedFailure'
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'Failure'
op|'('
name|'Exception'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'makeTodo'
op|'('
string|"'some reason'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'prefix'
op|'='
string|"'PASSED '"
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'output'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|'['
name|'len'
op|'('
name|'prefix'
op|')'
op|':'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
op|','
nl|'\n'
string|"'(expectedFailures=1)'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_basicErrors
dedent|''
name|'def'
name|'test_basicErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The reporter\'s L{printErrors} method should include the value of the\n        Todo.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addExpectedFailure'
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'Failure'
op|'('
name|'Exception'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'makeTodo'
op|'('
string|"'some reason'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
number|'4'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|','
string|'"Reason: \'some reason\'"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_booleanTodo
dedent|''
name|'def'
name|'test_booleanTodo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Booleans CAN\'T be used as the value of a todo. Maybe this sucks. This\n        is a test for current behavior, not a requirement.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addExpectedFailure'
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'Failure'
op|'('
name|'Exception'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'makeTodo'
op|'('
name|'True'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'Exception'
op|','
name|'self'
op|'.'
name|'result'
op|'.'
name|'done'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_exceptionTodo
dedent|''
name|'def'
name|'test_exceptionTodo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The exception for expected failures should be shown in the\n        C{printErrors} output.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
number|'1'
op|'/'
number|'0'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'error'
op|'='
name|'e'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'result'
op|'.'
name|'addExpectedFailure'
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'Failure'
op|'('
name|'error'
op|')'
op|','
nl|'\n'
name|'makeTodo'
op|'('
string|'"todo!"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'output'
op|'='
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
number|'3'
op|':'
op|']'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'str'
op|'('
name|'e'
op|')'
name|'in'
name|'output'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UncleanWarningTodoTest
dedent|''
dedent|''
name|'class'
name|'UncleanWarningTodoTest'
op|'('
name|'TodoTest'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{UncleanWarningsReporterWrapper}\'s handling of todos.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'TodoTest'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'UncleanWarningsReporterWrapper'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getTodos
dedent|''
name|'def'
name|'_getTodos'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the number of todos that happened to a reporter inside of an\n        unclean warnings reporter wrapper.\n        """'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'result'
op|'.'
name|'_originalReporter'
op|'.'
name|'expectedFailures'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getUnexpectedSuccesses
dedent|''
name|'def'
name|'_getUnexpectedSuccesses'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the number of unexpected successes that happened to a reporter\n        inside of an unclean warnings reporter wrapper.\n        """'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'result'
op|'.'
name|'_originalReporter'
op|'.'
name|'unexpectedSuccesses'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockColorizer
dedent|''
dedent|''
name|'class'
name|'MockColorizer'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Used by TestTreeReporter to make sure that output is colored correctly.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'stream'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'log'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'text'
op|','
name|'color'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'log'
op|'.'
name|'append'
op|'('
op|'('
name|'color'
op|','
name|'text'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestTreeReporter
dedent|''
dedent|''
name|'class'
name|'TestTreeReporter'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
name|'import'
name|'sample'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'='
name|'sample'
op|'.'
name|'FooTest'
op|'('
string|"'test_foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TreeReporter'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'_colorizer'
op|'='
name|'MockColorizer'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'log'
op|'='
name|'self'
op|'.'
name|'result'
op|'.'
name|'_colorizer'
op|'.'
name|'log'
newline|'\n'
nl|'\n'
DECL|member|makeError
dedent|''
name|'def'
name|'makeError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
number|'1'
op|'/'
number|'0'
newline|'\n'
dedent|''
name|'except'
name|'ZeroDivisionError'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'Failure'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'f'
newline|'\n'
nl|'\n'
DECL|member|test_cleanupError
dedent|''
name|'def'
name|'test_cleanupError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run cleanupErrors and check that the output is correct, and colored\n        correctly.\n        """'
newline|'\n'
name|'f'
op|'='
name|'self'
op|'.'
name|'makeError'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'cleanupErrors'
op|'('
name|'f'
op|')'
newline|'\n'
name|'color'
op|','
name|'text'
op|'='
name|'self'
op|'.'
name|'log'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'color'
op|'.'
name|'strip'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'result'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'text'
op|'.'
name|'strip'
op|'('
op|')'
op|','
string|"'cleanup errors'"
op|')'
newline|'\n'
name|'color'
op|','
name|'text'
op|'='
name|'self'
op|'.'
name|'log'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'color'
op|'.'
name|'strip'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'result'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'text'
op|'.'
name|'strip'
op|'('
op|')'
op|','
string|"'[ERROR]'"
op|')'
newline|'\n'
DECL|variable|test_cleanupError
dedent|''
name|'test_cleanupError'
op|'='
name|'suppressWarnings'
op|'('
nl|'\n'
name|'test_cleanupError'
op|','
nl|'\n'
name|'util'
op|'.'
name|'suppress'
op|'('
name|'category'
op|'='
name|'reporter'
op|'.'
name|'BrokenTestCaseWarning'
op|')'
op|','
nl|'\n'
name|'util'
op|'.'
name|'suppress'
op|'('
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_upDownError
name|'def'
name|'test_upDownError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run upDownError and check that the output is correct and colored\n        correctly.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'upDownError'
op|'('
string|'"method"'
op|','
name|'None'
op|','
name|'None'
op|','
name|'False'
op|')'
newline|'\n'
name|'color'
op|','
name|'text'
op|'='
name|'self'
op|'.'
name|'log'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'color'
op|'.'
name|'strip'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'result'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'text'
op|'.'
name|'strip'
op|'('
op|')'
op|','
string|"'method'"
op|')'
newline|'\n'
DECL|variable|test_upDownError
dedent|''
name|'test_upDownError'
op|'='
name|'suppressWarnings'
op|'('
nl|'\n'
name|'test_upDownError'
op|','
nl|'\n'
name|'util'
op|'.'
name|'suppress'
op|'('
name|'category'
op|'='
name|'DeprecationWarning'
op|','
nl|'\n'
name|'message'
op|'='
string|'"upDownError is deprecated in Twisted 8.0."'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_summaryColoredSuccess
name|'def'
name|'test_summaryColoredSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The summary in case of success should have a good count of successes\n        and be colored properly.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addSuccess'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'log'
op|'['
number|'1'
op|']'
op|','
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'SUCCESS'
op|','
string|"'PASSED'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
op|','
string|'"(successes=1)"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_summaryColoredFailure
dedent|''
name|'def'
name|'test_summaryColoredFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The summary in case of failure should have a good count of errors\n        and be colored properly.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|"'foo'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'RuntimeError'
op|','
name|'excValue'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'result'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'log'
op|'['
number|'1'
op|']'
op|','
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'FAILURE'
op|','
string|"'FAILED'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
op|','
string|'"(errors=1)"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPrelude
dedent|''
name|'def'
name|'test_getPrelude'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The tree needs to get the segments of the test ID that correspond\n        to the module and class that it belongs to.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
op|'['
string|"'foo.bar'"
op|','
string|"'baz'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'_getPreludeSegments'
op|'('
string|"'foo.bar.baz.qux'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'_getPreludeSegments'
op|'('
string|"'foo.bar.baz'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
op|'['
string|"'foo'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'_getPreludeSegments'
op|'('
string|"'foo.bar'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'self'
op|'.'
name|'result'
op|'.'
name|'_getPreludeSegments'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestReporterInterface
dedent|''
dedent|''
name|'class'
name|'TestReporterInterface'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the bare interface of a trial reporter.\n\n    Subclass this test case and provide a different \'resultFactory\' to test\n    that a particular reporter implementation will work with the rest of\n    Trial.\n\n    @cvar resultFactory: A callable that returns a reporter to be tested. The\n        callable must take the same parameters as L{reporter.Reporter}.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|resultFactory
name|'resultFactory'
op|'='
name|'reporter'
op|'.'
name|'Reporter'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
name|'import'
name|'sample'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'='
name|'sample'
op|'.'
name|'FooTest'
op|'('
string|"'test_foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'publisher'
op|'='
name|'log'
op|'.'
name|'LogPublisher'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'self'
op|'.'
name|'resultFactory'
op|'('
name|'self'
op|'.'
name|'stream'
op|','
name|'publisher'
op|'='
name|'self'
op|'.'
name|'publisher'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_shouldStopInitiallyFalse
dedent|''
name|'def'
name|'test_shouldStopInitiallyFalse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        shouldStop is False to begin with.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'False'
op|','
name|'self'
op|'.'
name|'result'
op|'.'
name|'shouldStop'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_shouldStopTrueAfterStop
dedent|''
name|'def'
name|'test_shouldStopTrueAfterStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        shouldStop becomes True soon as someone calls stop().\n        """'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'self'
op|'.'
name|'result'
op|'.'
name|'shouldStop'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_wasSuccessfulInitiallyTrue
dedent|''
name|'def'
name|'test_wasSuccessfulInitiallyTrue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        wasSuccessful() is True when there have been no results reported.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_wasSuccessfulTrueAfterSuccesses
dedent|''
name|'def'
name|'test_wasSuccessfulTrueAfterSuccesses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        wasSuccessful() is True when there have been only successes, False\n        otherwise.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addSuccess'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_wasSuccessfulFalseAfterErrors
dedent|''
name|'def'
name|'test_wasSuccessfulFalseAfterErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        wasSuccessful() becomes False after errors have been reported.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
number|'1'
op|'/'
number|'0'
newline|'\n'
dedent|''
name|'except'
name|'ZeroDivisionError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'False'
op|','
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_wasSuccessfulFalseAfterFailures
dedent|''
name|'def'
name|'test_wasSuccessfulFalseAfterFailures'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        wasSuccessful() becomes False after failures have been reported.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"foo"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'failureException'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'.'
name|'addFailure'
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'False'
op|','
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestReporter
dedent|''
dedent|''
name|'class'
name|'TestReporter'
op|'('
name|'TestReporterInterface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the base L{reporter.Reporter} class.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'TestReporterInterface'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_timer'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'_getTime'
op|'='
name|'self'
op|'.'
name|'_getTime'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getTime
dedent|''
name|'def'
name|'_getTime'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_timer'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_timer'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_startStop
dedent|''
name|'def'
name|'test_startStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'result'
op|'.'
name|'startTest'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'stopTest'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'_lastTime'
op|'>'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'testsRun'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_brokenStream
dedent|''
name|'def'
name|'test_brokenStream'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the reporter safely writes to its stream.\n        """'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'resultFactory'
op|'('
name|'stream'
op|'='
name|'BrokenStream'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'_writeln'
op|'('
string|'"Hello"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'Hello\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'_writeln'
op|'('
string|'"Hello %s!"'
op|','
string|"'World'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'Hello World!\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_printErrorsDeprecated
dedent|''
name|'def'
name|'test_printErrorsDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReporter.printErrors} was deprecated in Twisted 8.0.\n        """'
newline|'\n'
DECL|function|f
name|'def'
name|'f'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'.'
name|'printErrors'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertWarns'
op|'('
nl|'\n'
name|'DeprecationWarning'
op|','
string|'"printErrors is deprecated in Twisted 8.0."'
op|','
nl|'\n'
name|'__file__'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_printSummaryDeprecated
dedent|''
name|'def'
name|'test_printSummaryDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReporter.printSummary} was deprecated in Twisted 8.0.\n        """'
newline|'\n'
DECL|function|f
name|'def'
name|'f'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'.'
name|'printSummary'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertWarns'
op|'('
nl|'\n'
name|'DeprecationWarning'
op|','
string|'"printSummary is deprecated in Twisted 8.0."'
op|','
nl|'\n'
name|'__file__'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_writeDeprecated
dedent|''
name|'def'
name|'test_writeDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReporter.write} was deprecated in Twisted 8.0.\n        """'
newline|'\n'
DECL|function|f
name|'def'
name|'f'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'.'
name|'write'
op|'('
string|'""'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertWarns'
op|'('
nl|'\n'
name|'DeprecationWarning'
op|','
string|'"write is deprecated in Twisted 8.0."'
op|','
nl|'\n'
name|'__file__'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_writelnDeprecated
dedent|''
name|'def'
name|'test_writelnDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReporter.writeln} was deprecated in Twisted 8.0.\n        """'
newline|'\n'
DECL|function|f
name|'def'
name|'f'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'.'
name|'writeln'
op|'('
string|'""'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertWarns'
op|'('
nl|'\n'
name|'DeprecationWarning'
op|','
string|'"writeln is deprecated in Twisted 8.0."'
op|','
nl|'\n'
name|'__file__'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_separatorDeprecated
dedent|''
name|'def'
name|'test_separatorDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReporter.separator} was deprecated in Twisted 8.0.\n        """'
newline|'\n'
DECL|function|f
name|'def'
name|'f'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'result'
op|'.'
name|'separator'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertWarns'
op|'('
nl|'\n'
name|'DeprecationWarning'
op|','
string|'"separator is deprecated in Twisted 8.0."'
op|','
nl|'\n'
name|'__file__'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_streamDeprecated
dedent|''
name|'def'
name|'test_streamDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReporter.stream} was deprecated in Twisted 8.0.\n        """'
newline|'\n'
DECL|function|f
name|'def'
name|'f'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'result'
op|'.'
name|'stream'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertWarns'
op|'('
nl|'\n'
name|'DeprecationWarning'
op|','
string|'"stream is deprecated in Twisted 8.0."'
op|','
nl|'\n'
name|'__file__'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_upDownErrorDeprecated
dedent|''
name|'def'
name|'test_upDownErrorDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReporter.upDownError} was deprecated in Twisted 8.0.\n        """'
newline|'\n'
DECL|function|f
name|'def'
name|'f'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'.'
name|'upDownError'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertWarns'
op|'('
nl|'\n'
name|'DeprecationWarning'
op|','
string|'"upDownError is deprecated in Twisted 8.0."'
op|','
nl|'\n'
name|'__file__'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_warning
dedent|''
name|'def'
name|'test_warning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reporter.Reporter} observes warnings emitted by the Twisted log\n        system and writes them to its output stream.\n        """'
newline|'\n'
name|'message'
op|'='
name|'RuntimeWarning'
op|'('
string|'"some warning text"'
op|')'
newline|'\n'
name|'category'
op|'='
string|"'exceptions.RuntimeWarning'"
newline|'\n'
name|'filename'
op|'='
string|'"path/to/some/file.py"'
newline|'\n'
name|'lineno'
op|'='
number|'71'
newline|'\n'
name|'self'
op|'.'
name|'publisher'
op|'.'
name|'msg'
op|'('
nl|'\n'
name|'warning'
op|'='
name|'message'
op|','
name|'category'
op|'='
name|'category'
op|','
nl|'\n'
name|'filename'
op|'='
name|'filename'
op|','
name|'lineno'
op|'='
name|'lineno'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"%s:%d: %s: %s\\n"'
op|'%'
op|'('
nl|'\n'
name|'filename'
op|','
name|'lineno'
op|','
name|'category'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_duplicateWarningSuppressed
dedent|''
name|'def'
name|'test_duplicateWarningSuppressed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A warning emitted twice within a single test is only written to the\n        stream once.\n        """'
newline|'\n'
comment|'# Emit the warning and assert that it shows up'
nl|'\n'
name|'self'
op|'.'
name|'test_warning'
op|'('
op|')'
newline|'\n'
comment|'# Emit the warning again and assert that the stream still only has one'
nl|'\n'
comment|'# warning on it.'
nl|'\n'
name|'self'
op|'.'
name|'test_warning'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_warningEmittedForNewTest
dedent|''
name|'def'
name|'test_warningEmittedForNewTest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A warning emitted again after a new test has started is written to the\n        stream again.\n        """'
newline|'\n'
name|'test'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'('
string|"'test_warningEmittedForNewTest'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'startTest'
op|'('
name|'test'
op|')'
newline|'\n'
nl|'\n'
comment|'# Clear whatever startTest wrote to the stream'
nl|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'truncate'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Emit a warning (and incidentally, assert that it was emitted)'
nl|'\n'
name|'self'
op|'.'
name|'test_warning'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Clean up from the first warning to simplify the rest of the'
nl|'\n'
comment|'# assertions.'
nl|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'truncate'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Stop the first test and start another one (it just happens to be the'
nl|'\n'
comment|"# same one, but that doesn't matter)"
nl|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'stopTest'
op|'('
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'startTest'
op|'('
name|'test'
op|')'
newline|'\n'
nl|'\n'
comment|'# Clean up the stopTest/startTest output'
nl|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'truncate'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Emit the warning again and make sure it shows up'
nl|'\n'
name|'self'
op|'.'
name|'test_warning'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_stopObserving
dedent|''
name|'def'
name|'test_stopObserving'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reporter.Reporter} stops observing log events when its C{done} method\n        is called.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'truncate'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'publisher'
op|'.'
name|'msg'
op|'('
nl|'\n'
name|'warning'
op|'='
name|'RuntimeWarning'
op|'('
string|'"some message"'
op|')'
op|','
nl|'\n'
name|'category'
op|'='
string|"'exceptions.RuntimeWarning'"
op|','
nl|'\n'
name|'filename'
op|'='
string|'"file/name.py"'
op|','
name|'lineno'
op|'='
number|'17'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSafeStream
dedent|''
dedent|''
name|'class'
name|'TestSafeStream'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_safe
indent|'    '
name|'def'
name|'test_safe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that L{reporter.SafeStream} successfully write to its original\n        stream even if an interrupt happens during the write.\n        """'
newline|'\n'
name|'stream'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'broken'
op|'='
name|'BrokenStream'
op|'('
name|'stream'
op|')'
newline|'\n'
name|'safe'
op|'='
name|'reporter'
op|'.'
name|'SafeStream'
op|'('
name|'broken'
op|')'
newline|'\n'
name|'safe'
op|'.'
name|'write'
op|'('
string|'"Hello"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"Hello"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSubunitReporter
dedent|''
dedent|''
name|'class'
name|'TestSubunitReporter'
op|'('
name|'TestReporterInterface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the subunit reporter.\n\n    This just tests that the subunit reporter implements the basic interface.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|resultFactory
name|'resultFactory'
op|'='
name|'reporter'
op|'.'
name|'SubunitReporter'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'reporter'
op|'.'
name|'TestProtocolClient'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SkipTest'
op|'('
nl|'\n'
string|'"Subunit not installed, cannot test SubunitReporter"'
op|')'
newline|'\n'
dedent|''
name|'TestReporterInterface'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|assertForwardsToSubunit
dedent|''
name|'def'
name|'assertForwardsToSubunit'
op|'('
name|'self'
op|','
name|'methodName'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that \'methodName\' on L{SubunitReporter} forwards to the\n        equivalent method on subunit.\n\n        Checks that the return value from subunit is returned from the\n        L{SubunitReporter} and that the reporter writes the same data to its\n        stream as subunit does to its own.\n\n        Assumes that the method on subunit has the same name as the method on\n        L{SubunitReporter}.\n        """'
newline|'\n'
name|'stream'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'subunitClient'
op|'='
name|'reporter'
op|'.'
name|'TestProtocolClient'
op|'('
name|'stream'
op|')'
newline|'\n'
name|'subunitReturn'
op|'='
name|'getattr'
op|'('
name|'subunitClient'
op|','
name|'methodName'
op|')'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'subunitOutput'
op|'='
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'reporterReturn'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'result'
op|','
name|'methodName'
op|')'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'subunitReturn'
op|','
name|'reporterReturn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'subunitOutput'
op|','
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_subunitWithoutAddExpectedFailureInstalled
dedent|''
name|'def'
name|'test_subunitWithoutAddExpectedFailureInstalled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Some versions of subunit don\'t have "addExpectedFailure". For these\n        versions, we report expected failures as successes.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'addExpectedFailure'
op|'='
name|'reporter'
op|'.'
name|'TestProtocolClient'
op|'.'
name|'addExpectedFailure'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
comment|"# Then we've actually got one of those old versions installed, and"
nl|'\n'
comment|'# the test is immediately applicable.'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'reporter'
op|'.'
name|'TestProtocolClient'
op|'.'
name|'addExpectedFailure'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
nl|'\n'
name|'setattr'
op|','
name|'reporter'
op|'.'
name|'TestProtocolClient'
op|','
string|"'addExpectedFailure'"
op|','
nl|'\n'
name|'addExpectedFailure'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
number|'1'
op|'/'
number|'0'
newline|'\n'
dedent|''
name|'except'
name|'ZeroDivisionError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'result'
op|'.'
name|'addExpectedFailure'
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|','
string|'"todo"'
op|')'
newline|'\n'
dedent|''
name|'expectedFailureOutput'
op|'='
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addSuccess'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'successOutput'
op|'='
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'successOutput'
op|','
name|'expectedFailureOutput'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_subunitWithoutAddSkipInstalled
dedent|''
name|'def'
name|'test_subunitWithoutAddSkipInstalled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Some versions of subunit don\'t have "addSkip". For these versions, we\n        report skips as successes.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'addSkip'
op|'='
name|'reporter'
op|'.'
name|'TestProtocolClient'
op|'.'
name|'addSkip'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
comment|"# Then we've actually got one of those old versions installed, and"
nl|'\n'
comment|'# the test is immediately applicable.'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'reporter'
op|'.'
name|'TestProtocolClient'
op|'.'
name|'addSkip'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
nl|'\n'
name|'setattr'
op|','
name|'reporter'
op|'.'
name|'TestProtocolClient'
op|','
string|"'addSkip'"
op|','
name|'addSkip'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'result'
op|'.'
name|'addSkip'
op|'('
name|'self'
op|'.'
name|'test'
op|','
string|'"reason"'
op|')'
newline|'\n'
name|'skipOutput'
op|'='
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addSuccess'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'successOutput'
op|'='
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'successOutput'
op|','
name|'skipOutput'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addExpectedFailurePassedThrough
dedent|''
name|'def'
name|'test_addExpectedFailurePassedThrough'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Some versions of subunit have "addExpectedFailure". For these\n        versions, when we call \'addExpectedFailure\' on the test result, we\n        pass the error and test through to the subunit client.\n        """'
newline|'\n'
name|'addExpectedFailureCalls'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|addExpectedFailure
name|'def'
name|'addExpectedFailure'
op|'('
name|'test'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'addExpectedFailureCalls'
op|'.'
name|'append'
op|'('
op|'('
name|'test'
op|','
name|'error'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Provide our own addExpectedFailure, whether or not the locally'
nl|'\n'
comment|'# installed subunit has addExpectedFailure.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'result'
op|'.'
name|'_subunit'
op|'.'
name|'addExpectedFailure'
op|'='
name|'addExpectedFailure'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
number|'1'
op|'/'
number|'0'
newline|'\n'
dedent|''
name|'except'
name|'ZeroDivisionError'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addExpectedFailure'
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'exc_info'
op|','
string|"'todo'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'addExpectedFailureCalls'
op|','
op|'['
op|'('
name|'self'
op|'.'
name|'test'
op|','
name|'exc_info'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addSkipSendsSubunitAddSkip
dedent|''
name|'def'
name|'test_addSkipSendsSubunitAddSkip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Some versions of subunit have "addSkip". For these versions, when we\n        call \'addSkip\' on the test result, we pass the test and reason through\n        to the subunit client.\n        """'
newline|'\n'
name|'addSkipCalls'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|addSkip
name|'def'
name|'addSkip'
op|'('
name|'test'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'addSkipCalls'
op|'.'
name|'append'
op|'('
op|'('
name|'test'
op|','
name|'reason'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Provide our own addSkip, whether or not the locally-installed'
nl|'\n'
comment|'# subunit has addSkip.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'result'
op|'.'
name|'_subunit'
op|'.'
name|'addSkip'
op|'='
name|'addSkip'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addSkip'
op|'('
name|'self'
op|'.'
name|'test'
op|','
string|"'reason'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'addSkipCalls'
op|','
op|'['
op|'('
name|'self'
op|'.'
name|'test'
op|','
string|"'reason'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_doneDoesNothing
dedent|''
name|'def'
name|'test_doneDoesNothing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The subunit reporter doesn\'t need to print out a summary -- the stream\n        of results is everything. Thus, done() does nothing.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|','
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_startTestSendsSubunitStartTest
dedent|''
name|'def'
name|'test_startTestSendsSubunitStartTest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        SubunitReporter.startTest() sends the subunit \'startTest\' message.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertForwardsToSubunit'
op|'('
string|"'startTest'"
op|','
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_stopTestSendsSubunitStopTest
dedent|''
name|'def'
name|'test_stopTestSendsSubunitStopTest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        SubunitReporter.stopTest() sends the subunit \'stopTest\' message.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertForwardsToSubunit'
op|'('
string|"'stopTest'"
op|','
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addSuccessSendsSubunitAddSuccess
dedent|''
name|'def'
name|'test_addSuccessSendsSubunitAddSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        SubunitReporter.addSuccess() sends the subunit \'addSuccess\' message.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertForwardsToSubunit'
op|'('
string|"'addSuccess'"
op|','
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addErrorSendsSubunitAddError
dedent|''
name|'def'
name|'test_addErrorSendsSubunitAddError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        SubunitReporter.addError() sends the subunit \'addError\' message.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
number|'1'
op|'/'
number|'0'
newline|'\n'
dedent|''
name|'except'
name|'ZeroDivisionError'
op|':'
newline|'\n'
indent|'            '
name|'error'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertForwardsToSubunit'
op|'('
string|"'addError'"
op|','
name|'self'
op|'.'
name|'test'
op|','
name|'error'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addFailureSendsSubunitAddFailure
dedent|''
name|'def'
name|'test_addFailureSendsSubunitAddFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        SubunitReporter.addFailure() sends the subunit \'addFailure\' message.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'hello'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'failureException'
op|':'
newline|'\n'
indent|'            '
name|'failure'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertForwardsToSubunit'
op|'('
string|"'addFailure'"
op|','
name|'self'
op|'.'
name|'test'
op|','
name|'failure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addUnexpectedSuccessSendsSubunitAddSuccess
dedent|''
name|'def'
name|'test_addUnexpectedSuccessSendsSubunitAddSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        SubunitReporter.addFailure() sends the subunit \'addSuccess\' message,\n        since subunit doesn\'t model unexpected success.\n        """'
newline|'\n'
name|'stream'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'subunitClient'
op|'='
name|'reporter'
op|'.'
name|'TestProtocolClient'
op|'('
name|'stream'
op|')'
newline|'\n'
name|'subunitClient'
op|'.'
name|'addSuccess'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'subunitOutput'
op|'='
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'addUnexpectedSuccess'
op|'('
name|'self'
op|'.'
name|'test'
op|','
string|"'todo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'subunitOutput'
op|','
name|'self'
op|'.'
name|'stream'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSubunitReporterNotInstalled
dedent|''
dedent|''
name|'class'
name|'TestSubunitReporterNotInstalled'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test behaviour when the subunit reporter is not installed.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_subunitNotInstalled
name|'def'
name|'test_subunitNotInstalled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If subunit is not installed, TestProtocolClient will be None, and\n        SubunitReporter will raise an error when you try to construct it.\n        """'
newline|'\n'
name|'stream'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'reporter'
op|','
string|"'TestProtocolClient'"
op|','
name|'None'
op|')'
newline|'\n'
name|'e'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'Exception'
op|','
name|'reporter'
op|'.'
name|'SubunitReporter'
op|','
name|'stream'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"Subunit not available"'
op|','
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestTimingReporter
dedent|''
dedent|''
name|'class'
name|'TestTimingReporter'
op|'('
name|'TestReporter'
op|')'
op|':'
newline|'\n'
DECL|variable|resultFactory
indent|'    '
name|'resultFactory'
op|'='
name|'reporter'
op|'.'
name|'TimingTextReporter'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoggingReporter
dedent|''
name|'class'
name|'LoggingReporter'
op|'('
name|'reporter'
op|'.'
name|'Reporter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Simple reporter that stores the last test that was passed to it.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reporter'
op|'.'
name|'Reporter'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|addError
dedent|''
name|'def'
name|'addError'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'test'
op|'='
name|'test'
newline|'\n'
nl|'\n'
DECL|member|addExpectedFailure
dedent|''
name|'def'
name|'addExpectedFailure'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'failure'
op|','
name|'todo'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'test'
op|'='
name|'test'
newline|'\n'
nl|'\n'
DECL|member|addFailure
dedent|''
name|'def'
name|'addFailure'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'test'
op|'='
name|'test'
newline|'\n'
nl|'\n'
DECL|member|addSkip
dedent|''
name|'def'
name|'addSkip'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'skip'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'test'
op|'='
name|'test'
newline|'\n'
nl|'\n'
DECL|member|addUnexpectedSuccess
dedent|''
name|'def'
name|'addUnexpectedSuccess'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'todo'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'test'
op|'='
name|'test'
newline|'\n'
nl|'\n'
DECL|member|startTest
dedent|''
name|'def'
name|'startTest'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'test'
op|'='
name|'test'
newline|'\n'
nl|'\n'
DECL|member|stopTest
dedent|''
name|'def'
name|'stopTest'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'test'
op|'='
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestAdaptedReporter
dedent|''
dedent|''
name|'class'
name|'TestAdaptedReporter'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{reporter._AdaptedReporter} is a reporter wrapper that wraps all of the\n    tests it receives before passing them on to the original reporter.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'wrappedResult'
op|'='
name|'self'
op|'.'
name|'getWrappedResult'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_testAdapter
dedent|''
name|'def'
name|'_testAdapter'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'test'
op|'.'
name|'id'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|assertWrapped
dedent|''
name|'def'
name|'assertWrapped'
op|'('
name|'self'
op|','
name|'wrappedResult'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'wrappedResult'
op|'.'
name|'_originalReporter'
op|'.'
name|'test'
op|','
name|'self'
op|'.'
name|'_testAdapter'
op|'('
name|'test'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getFailure
dedent|''
name|'def'
name|'getFailure'
op|'('
name|'self'
op|','
name|'exceptionInstance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a L{Failure} from raising the given exception.\n\n        @param exceptionInstance: The exception to raise.\n        @return: L{Failure}\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exceptionInstance'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'Failure'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getWrappedResult
dedent|''
dedent|''
name|'def'
name|'getWrappedResult'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'LoggingReporter'
op|'('
op|')'
newline|'\n'
name|'return'
name|'reporter'
op|'.'
name|'_AdaptedReporter'
op|'('
name|'result'
op|','
name|'self'
op|'.'
name|'_testAdapter'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addError
dedent|''
name|'def'
name|'test_addError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{addError} wraps its test with the provided adapter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'wrappedResult'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'getFailure'
op|'('
name|'RuntimeError'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWrapped'
op|'('
name|'self'
op|'.'
name|'wrappedResult'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addFailure
dedent|''
name|'def'
name|'test_addFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{addFailure} wraps its test with the provided adapter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'wrappedResult'
op|'.'
name|'addFailure'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'getFailure'
op|'('
name|'AssertionError'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWrapped'
op|'('
name|'self'
op|'.'
name|'wrappedResult'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addSkip
dedent|''
name|'def'
name|'test_addSkip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{addSkip} wraps its test with the provided adapter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'wrappedResult'
op|'.'
name|'addSkip'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'getFailure'
op|'('
name|'SkipTest'
op|'('
string|"'no reason'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWrapped'
op|'('
name|'self'
op|'.'
name|'wrappedResult'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_startTest
dedent|''
name|'def'
name|'test_startTest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{startTest} wraps its test with the provided adapter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'wrappedResult'
op|'.'
name|'startTest'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWrapped'
op|'('
name|'self'
op|'.'
name|'wrappedResult'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_stopTest
dedent|''
name|'def'
name|'test_stopTest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{stopTest} wraps its test with the provided adapter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'wrappedResult'
op|'.'
name|'stopTest'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWrapped'
op|'('
name|'self'
op|'.'
name|'wrappedResult'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addExpectedFailure
dedent|''
name|'def'
name|'test_addExpectedFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{addExpectedFailure} wraps its test with the provided adapter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'wrappedResult'
op|'.'
name|'addExpectedFailure'
op|'('
nl|'\n'
name|'self'
op|','
name|'self'
op|'.'
name|'getFailure'
op|'('
name|'RuntimeError'
op|'('
op|')'
op|')'
op|','
name|'Todo'
op|'('
string|'"no reason"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWrapped'
op|'('
name|'self'
op|'.'
name|'wrappedResult'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addUnexpectedSuccess
dedent|''
name|'def'
name|'test_addUnexpectedSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{addUnexpectedSuccess} wraps its test with the provided adapter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'wrappedResult'
op|'.'
name|'addUnexpectedSuccess'
op|'('
name|'self'
op|','
name|'Todo'
op|'('
string|'"no reason"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWrapped'
op|'('
name|'self'
op|'.'
name|'wrappedResult'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeStream
dedent|''
dedent|''
name|'class'
name|'FakeStream'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A fake stream which C{isatty} method returns some predictable.\n\n    @ivar tty: returned value of C{isatty}.\n    @type tty: C{bool}\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'tty'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'tty'
op|'='
name|'tty'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isatty
dedent|''
name|'def'
name|'isatty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'tty'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AnsiColorizerTests
dedent|''
dedent|''
name|'class'
name|'AnsiColorizerTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{reporter._AnsiColorizer}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'savedModules'
op|'='
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'savedModules'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_supportedStdOutTTY
dedent|''
name|'def'
name|'test_supportedStdOutTTY'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reporter._AnsiColorizer.supported} returns C{False} if the given\n        stream is not a TTY.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'reporter'
op|'.'
name|'_AnsiColorizer'
op|'.'
name|'supported'
op|'('
name|'FakeStream'
op|'('
name|'False'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_supportedNoCurses
dedent|''
name|'def'
name|'test_supportedNoCurses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reporter._AnsiColorizer.supported} returns C{False} if the curses\n        module can\'t be imported.\n        """'
newline|'\n'
name|'sys'
op|'.'
name|'modules'
op|'['
string|"'curses'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'reporter'
op|'.'
name|'_AnsiColorizer'
op|'.'
name|'supported'
op|'('
name|'FakeStream'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_supportedSetupTerm
dedent|''
name|'def'
name|'test_supportedSetupTerm'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reporter._AnsiColorizer.supported} returns C{True} if\n        C{curses.tigetnum} returns more than 2 supported colors. It only tries\n        to call C{curses.setupterm} if C{curses.tigetnum} previously failed\n        with a C{curses.error}.\n        """'
newline|'\n'
DECL|class|fakecurses
name|'class'
name|'fakecurses'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|error
indent|'            '
name|'error'
op|'='
name|'RuntimeError'
newline|'\n'
DECL|variable|setUp
name|'setUp'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|setupterm
name|'def'
name|'setupterm'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'setUp'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|tigetnum
dedent|''
name|'def'
name|'tigetnum'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'setUp'
op|':'
newline|'\n'
indent|'                    '
name|'return'
number|'3'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'self'
op|'.'
name|'error'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'sys'
op|'.'
name|'modules'
op|'['
string|"'curses'"
op|']'
op|'='
name|'fakecurses'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'reporter'
op|'.'
name|'_AnsiColorizer'
op|'.'
name|'supported'
op|'('
name|'FakeStream'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'reporter'
op|'.'
name|'_AnsiColorizer'
op|'.'
name|'supported'
op|'('
name|'FakeStream'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sys'
op|'.'
name|'modules'
op|'['
string|"'curses'"
op|']'
op|'.'
name|'setUp'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_supportedTigetNumWrongError
dedent|''
name|'def'
name|'test_supportedTigetNumWrongError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reporter._AnsiColorizer.supported} returns C{False} and doesn\'t try\n        to call C{curses.setupterm} if C{curses.tigetnum} returns something\n        different than C{curses.error}.\n        """'
newline|'\n'
DECL|class|fakecurses
name|'class'
name|'fakecurses'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|error
indent|'            '
name|'error'
op|'='
name|'RuntimeError'
newline|'\n'
nl|'\n'
DECL|member|tigetnum
name|'def'
name|'tigetnum'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'sys'
op|'.'
name|'modules'
op|'['
string|"'curses'"
op|']'
op|'='
name|'fakecurses'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'reporter'
op|'.'
name|'_AnsiColorizer'
op|'.'
name|'supported'
op|'('
name|'FakeStream'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_supportedTigetNumNotEnoughColor
dedent|''
name|'def'
name|'test_supportedTigetNumNotEnoughColor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reporter._AnsiColorizer.supported} returns C{False} if\n        C{curses.tigetnum} returns less than 2 supported colors.\n        """'
newline|'\n'
DECL|class|fakecurses
name|'class'
name|'fakecurses'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|error
indent|'            '
name|'error'
op|'='
name|'RuntimeError'
newline|'\n'
nl|'\n'
DECL|member|tigetnum
name|'def'
name|'tigetnum'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'sys'
op|'.'
name|'modules'
op|'['
string|"'curses'"
op|']'
op|'='
name|'fakecurses'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'reporter'
op|'.'
name|'_AnsiColorizer'
op|'.'
name|'supported'
op|'('
name|'FakeStream'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_supportedTigetNumErrors
dedent|''
name|'def'
name|'test_supportedTigetNumErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reporter._AnsiColorizer.supported} returns C{False} if\n        C{curses.tigetnum} raises an error, and calls C{curses.setupterm} once.\n        """'
newline|'\n'
DECL|class|fakecurses
name|'class'
name|'fakecurses'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|error
indent|'            '
name|'error'
op|'='
name|'RuntimeError'
newline|'\n'
DECL|variable|setUp
name|'setUp'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|setupterm
name|'def'
name|'setupterm'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'setUp'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|tigetnum
dedent|''
name|'def'
name|'tigetnum'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'self'
op|'.'
name|'error'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'sys'
op|'.'
name|'modules'
op|'['
string|"'curses'"
op|']'
op|'='
name|'fakecurses'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'reporter'
op|'.'
name|'_AnsiColorizer'
op|'.'
name|'supported'
op|'('
name|'FakeStream'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sys'
op|'.'
name|'modules'
op|'['
string|"'curses'"
op|']'
op|'.'
name|'setUp'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.trial.test.test_tests -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
op|','
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
op|','
name|'protocol'
op|','
name|'defer'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FoolishError
name|'class'
name|'FoolishError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestFailureInSetUp
dedent|''
name|'class'
name|'TestFailureInSetUp'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'FoolishError'
op|','
string|'"I am a broken setUp method"'
newline|'\n'
nl|'\n'
DECL|member|test_noop
dedent|''
name|'def'
name|'test_noop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestFailureInTearDown
dedent|''
dedent|''
name|'class'
name|'TestFailureInTearDown'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|tearDown
indent|'    '
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'FoolishError'
op|','
string|'"I am a broken tearDown method"'
newline|'\n'
nl|'\n'
DECL|member|test_noop
dedent|''
name|'def'
name|'test_noop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestRegularFail
dedent|''
dedent|''
name|'class'
name|'TestRegularFail'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_fail
indent|'    '
name|'def'
name|'test_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"I fail"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_subfail
dedent|''
name|'def'
name|'test_subfail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'subroutine'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|subroutine
dedent|''
name|'def'
name|'subroutine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"I fail inside"'
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestFailureInDeferredChain
dedent|''
dedent|''
name|'class'
name|'TestFailureInDeferredChain'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_fail
indent|'    '
name|'def'
name|'test_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_later'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'d'
op|'.'
name|'callback'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
DECL|member|_later
dedent|''
name|'def'
name|'_later'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"I fail later"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ErrorTest
dedent|''
dedent|''
name|'class'
name|'ErrorTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A test case which has a L{test_foo} which will raise an error.\n\n    @ivar ran: boolean indicating whether L{test_foo} has been run.\n    """'
newline|'\n'
DECL|variable|ran
name|'ran'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|test_foo
name|'def'
name|'test_foo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set C{self.ran} to True and raise a C{ZeroDivisionError}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'ran'
op|'='
name|'True'
newline|'\n'
number|'1'
op|'/'
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSkipTestCase
dedent|''
dedent|''
name|'class'
name|'TestSkipTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'TestSkipTestCase'
op|'.'
name|'skip'
op|'='
string|'"skipping this test"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DelayedCall
name|'class'
name|'DelayedCall'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|hiddenExceptionMsg
indent|'    '
name|'hiddenExceptionMsg'
op|'='
string|'"something blew up"'
newline|'\n'
nl|'\n'
DECL|member|go
name|'def'
name|'go'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'RuntimeError'
op|'('
name|'self'
op|'.'
name|'hiddenExceptionMsg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testHiddenException
dedent|''
name|'def'
name|'testHiddenException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        What happens if an error is raised in a DelayedCall and an error is\n        also raised in the test?\n\n        L{test_reporter.TestErrorReporting.testHiddenException} checks that\n        both errors get reported.\n\n        Note that this behaviour is deprecated. A B{real} test would return a\n        Deferred that got triggered by the callLater. This would guarantee the\n        delayed call error gets reported.\n        """'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'go'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'iterate'
op|'('
number|'0.01'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Deliberate failure to mask the hidden exception"'
op|')'
newline|'\n'
dedent|''
name|'testHiddenException'
op|'.'
name|'suppress'
op|'='
op|'['
name|'util'
op|'.'
name|'suppress'
op|'('
nl|'\n'
name|'message'
op|'='
string|"r'reactor\\.iterate cannot be used.*'"
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReactorCleanupTests
dedent|''
name|'class'
name|'ReactorCleanupTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_leftoverPendingCalls
indent|'    '
name|'def'
name|'test_leftoverPendingCalls'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|_
indent|'        '
name|'def'
name|'_'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|"'foo!'"
newline|'\n'
dedent|''
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'10000.0'
op|','
name|'_'
op|')'
newline|'\n'
nl|'\n'
DECL|class|SocketOpenTest
dedent|''
dedent|''
name|'class'
name|'SocketOpenTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_socketsLeftOpen
indent|'    '
name|'def'
name|'test_socketsLeftOpen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'protocol'
op|'.'
name|'Factory'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'protocol'
op|'='
name|'protocol'
op|'.'
name|'Protocol'
newline|'\n'
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
DECL|class|TimingOutDeferred
dedent|''
dedent|''
name|'class'
name|'TimingOutDeferred'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_alpha
indent|'    '
name|'def'
name|'test_alpha'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|test_deferredThatNeverFires
dedent|''
name|'def'
name|'test_deferredThatNeverFires'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'methodCalled'
op|'='
name|'True'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_omega
dedent|''
name|'def'
name|'test_omega'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|unexpectedException
dedent|''
dedent|''
name|'def'
name|'unexpectedException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""i will raise an unexpected exception...\n    ... *CAUSE THAT\'S THE KINDA GUY I AM*\n\n    >>> 1/0\n    """'
newline|'\n'
nl|'\n'
dedent|''
endmarker|''
end_unit

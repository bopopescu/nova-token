begin_unit
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Maintainer: Jonathan Lange'
nl|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'traceback'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'reflect'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'failure'
name|'import'
name|'Failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
op|','
name|'PyUnitResultAdapter'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'itrial'
name|'import'
name|'IReporter'
op|','
name|'ITestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
name|'import'
name|'erroneous'
newline|'\n'
nl|'\n'
DECL|variable|pyunit
name|'pyunit'
op|'='
name|'__import__'
op|'('
string|"'unittest'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestPyUnitTestCase
name|'class'
name|'TestPyUnitTestCase'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|class|PyUnitTest
indent|'    '
name|'class'
name|'PyUnitTest'
op|'('
name|'pyunit'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_pass
indent|'        '
name|'def'
name|'test_pass'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'original'
op|'='
name|'self'
op|'.'
name|'PyUnitTest'
op|'('
string|"'test_pass'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'='
name|'ITestCase'
op|'('
name|'self'
op|'.'
name|'original'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_visit
dedent|''
name|'def'
name|'test_visit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Trial assumes that test cases implement visit().\n        """'
newline|'\n'
name|'log'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|visitor
name|'def'
name|'visitor'
op|'('
name|'test'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'append'
op|'('
name|'test'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'test'
op|'.'
name|'visit'
op|'('
name|'visitor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'log'
op|','
op|'['
name|'self'
op|'.'
name|'test'
op|']'
op|')'
newline|'\n'
dedent|''
name|'test_visit'
op|'.'
name|'suppress'
op|'='
op|'['
nl|'\n'
name|'util'
op|'.'
name|'suppress'
op|'('
name|'category'
op|'='
name|'DeprecationWarning'
op|','
nl|'\n'
name|'message'
op|'='
string|'"Test visitors deprecated in Twisted 8.0"'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callable
name|'def'
name|'test_callable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Tests must be callable in order to be used with Python\'s unittest.py.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'callable'
op|'('
name|'self'
op|'.'
name|'test'
op|')'
op|','
nl|'\n'
string|'"%r is not callable."'
op|'%'
op|'('
name|'self'
op|'.'
name|'test'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestPyUnitResult
dedent|''
dedent|''
name|'class'
name|'TestPyUnitResult'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests to show that PyUnitResultAdapter wraps TestResult objects from the\n    standard library \'unittest\' module in such a way as to make them usable and\n    useful from Trial.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_dontUseAdapterWhenReporterProvidesIReporter
name|'def'
name|'test_dontUseAdapterWhenReporterProvidesIReporter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{PyUnitResultAdapter} is only used when the result passed to\n        C{run} does *not* provide L{IReporter}.\n        """'
newline|'\n'
DECL|class|StubReporter
name|'class'
name|'StubReporter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            A reporter which records data about calls made to it.\n\n            @ivar errors: Errors passed to L{addError}.\n            @ivar failures: Failures passed to L{addFailure}.\n            """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IReporter'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'errors'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failures'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|startTest
dedent|''
name|'def'
name|'startTest'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""\n                Do nothing.\n                """'
newline|'\n'
nl|'\n'
DECL|member|stopTest
dedent|''
name|'def'
name|'stopTest'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""\n                Do nothing.\n                """'
newline|'\n'
nl|'\n'
DECL|member|addError
dedent|''
name|'def'
name|'addError'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""\n                Record the error.\n                """'
newline|'\n'
name|'self'
op|'.'
name|'errors'
op|'.'
name|'append'
op|'('
name|'error'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'test'
op|'='
name|'erroneous'
op|'.'
name|'ErrorTest'
op|'('
string|'"test_foo"'
op|')'
newline|'\n'
name|'result'
op|'='
name|'StubReporter'
op|'('
op|')'
newline|'\n'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'result'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|','
name|'Failure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_success
dedent|''
name|'def'
name|'test_success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|SuccessTest
indent|'        '
name|'class'
name|'SuccessTest'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|ran
indent|'            '
name|'ran'
op|'='
name|'False'
newline|'\n'
DECL|member|test_foo
name|'def'
name|'test_foo'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'s'
op|'.'
name|'ran'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'test'
op|'='
name|'SuccessTest'
op|'('
string|"'test_foo'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'pyunit'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'test'
op|'.'
name|'ran'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'result'
op|'.'
name|'testsRun'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_failure
dedent|''
name|'def'
name|'test_failure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|FailureTest
indent|'        '
name|'class'
name|'FailureTest'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|ran
indent|'            '
name|'ran'
op|'='
name|'False'
newline|'\n'
DECL|member|test_foo
name|'def'
name|'test_foo'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'s'
op|'.'
name|'ran'
op|'='
name|'True'
newline|'\n'
name|'s'
op|'.'
name|'fail'
op|'('
string|"'boom!'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'test'
op|'='
name|'FailureTest'
op|'('
string|"'test_foo'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'pyunit'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'test'
op|'.'
name|'ran'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'result'
op|'.'
name|'testsRun'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'result'
op|'.'
name|'failures'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_error
dedent|''
name|'def'
name|'test_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'test'
op|'='
name|'erroneous'
op|'.'
name|'ErrorTest'
op|'('
string|"'test_foo'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'pyunit'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'test'
op|'.'
name|'ran'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'result'
op|'.'
name|'testsRun'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'result'
op|'.'
name|'errors'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_setUpError
dedent|''
name|'def'
name|'test_setUpError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|ErrorTest
indent|'        '
name|'class'
name|'ErrorTest'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|ran
indent|'            '
name|'ran'
op|'='
name|'False'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
number|'1'
op|'/'
number|'0'
newline|'\n'
DECL|member|test_foo
dedent|''
name|'def'
name|'test_foo'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'s'
op|'.'
name|'ran'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'test'
op|'='
name|'ErrorTest'
op|'('
string|"'test_foo'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'pyunit'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'test'
op|'.'
name|'ran'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'result'
op|'.'
name|'testsRun'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'result'
op|'.'
name|'errors'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_tracebackFromFailure
dedent|''
name|'def'
name|'test_tracebackFromFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Errors added through the L{PyUnitResultAdapter} have the same traceback\n        information as if there were no adapter at all.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
number|'1'
op|'/'
number|'0'
newline|'\n'
dedent|''
name|'except'
name|'ZeroDivisionError'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'Failure'
op|'('
op|')'
newline|'\n'
dedent|''
name|'pyresult'
op|'='
name|'pyunit'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'PyUnitResultAdapter'
op|'('
name|'pyresult'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'f'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'pyresult'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'traceback'
op|'.'
name|'format_exception'
op|'('
op|'*'
name|'exc_info'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_traceback
dedent|''
name|'def'
name|'test_traceback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        As test_tracebackFromFailure, but covering more code.\n        """'
newline|'\n'
DECL|class|ErrorTest
name|'class'
name|'ErrorTest'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|exc_info
indent|'            '
name|'exc_info'
op|'='
name|'None'
newline|'\n'
DECL|member|test_foo
name|'def'
name|'test_foo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
number|'1'
op|'/'
number|'0'
newline|'\n'
dedent|''
name|'except'
name|'ZeroDivisionError'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'test'
op|'='
name|'ErrorTest'
op|'('
string|"'test_foo'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'pyunit'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
comment|"# We can't test that the tracebacks are equal, because Trial's"
nl|'\n'
comment|"# machinery inserts a few extra frames on the top and we don't really"
nl|'\n'
comment|'# want to trim them off without an extremely good reason.'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# So, we just test that the result's stack ends with the the"
nl|'\n'
comment|"# exception's stack."
nl|'\n'
nl|'\n'
name|'expected_stack'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'traceback'
op|'.'
name|'format_tb'
op|'('
name|'test'
op|'.'
name|'exc_info'
op|'['
number|'2'
op|']'
op|')'
op|')'
newline|'\n'
name|'observed_stack'
op|'='
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'result'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_stack'
op|'.'
name|'strip'
op|'('
op|')'
op|','
nl|'\n'
name|'observed_stack'
op|'['
op|'-'
name|'len'
op|'('
name|'expected_stack'
op|')'
op|':'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_tracebackFromCleanFailure
dedent|''
name|'def'
name|'test_tracebackFromCleanFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Errors added through the L{PyUnitResultAdapter} have the same\n        traceback information as if there were no adapter at all, even\n        if the Failure that held the information has been cleaned.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
number|'1'
op|'/'
number|'0'
newline|'\n'
dedent|''
name|'except'
name|'ZeroDivisionError'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'Failure'
op|'('
op|')'
newline|'\n'
dedent|''
name|'f'
op|'.'
name|'cleanFailure'
op|'('
op|')'
newline|'\n'
name|'pyresult'
op|'='
name|'pyunit'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'PyUnitResultAdapter'
op|'('
name|'pyresult'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'f'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'pyresult'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'traceback'
op|'.'
name|'format_exception'
op|'('
op|'*'
name|'exc_info'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

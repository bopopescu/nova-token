begin_unit
name|'import'
name|'sys'
op|','
name|'os'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'testModule'
op|'='
string|'"""\nfrom twisted.trial import unittest\n\nclass FooTest(unittest.TestCase):\n    def testFoo(self):\n        pass\n"""'
newline|'\n'
nl|'\n'
DECL|variable|dosModule
name|'dosModule'
op|'='
name|'testModule'
op|'.'
name|'replace'
op|'('
string|"'\\n'"
op|','
string|"'\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
name|'testSample'
op|'='
string|'"""\n\'\'\'This module is used by test_loader to test the Trial test loading\nfunctionality. Do NOT change the number of tests in this module.\nDo NOT change the names the tests in this module.\n\'\'\'\n\nimport unittest as pyunit\nfrom twisted.trial import unittest\n\nclass FooTest(unittest.TestCase):\n    def test_foo(self):\n        pass\n\n    def test_bar(self):\n        pass\n\n\nclass PyunitTest(pyunit.TestCase):\n    def test_foo(self):\n        pass\n\n    def test_bar(self):\n        pass\n\n\nclass NotATest(object):\n    def test_foo(self):\n        pass\n\n\nclass AlphabetTest(unittest.TestCase):\n    def test_a(self):\n        pass\n\n    def test_b(self):\n        pass\n\n    def test_c(self):\n        pass\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PackageTest
name|'class'
name|'PackageTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|files
indent|'    '
name|'files'
op|'='
op|'['
nl|'\n'
op|'('
string|"'badpackage/__init__.py'"
op|','
string|"'frotz\\n'"
op|')'
op|','
nl|'\n'
op|'('
string|"'badpackage/test_module.py'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
op|'('
string|"'package2/__init__.py'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
op|'('
string|"'package2/test_module.py'"
op|','
string|"'import frotz\\n'"
op|')'
op|','
nl|'\n'
op|'('
string|"'package/__init__.py'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
op|'('
string|"'package/frotz.py'"
op|','
string|"'frotz\\n'"
op|')'
op|','
nl|'\n'
op|'('
string|"'package/test_bad_module.py'"
op|','
nl|'\n'
string|'\'raise ZeroDivisionError("fake error")\''
op|')'
op|','
nl|'\n'
op|'('
string|"'package/test_dos_module.py'"
op|','
name|'dosModule'
op|')'
op|','
nl|'\n'
op|'('
string|"'package/test_import_module.py'"
op|','
string|"'import frotz'"
op|')'
op|','
nl|'\n'
op|'('
string|"'package/test_module.py'"
op|','
name|'testModule'
op|')'
op|','
nl|'\n'
op|'('
string|"'goodpackage/__init__.py'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
op|'('
string|"'goodpackage/test_sample.py'"
op|','
name|'testSample'
op|')'
op|','
nl|'\n'
op|'('
string|"'goodpackage/sub/__init__.py'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
op|'('
string|"'goodpackage/sub/test_sample.py'"
op|','
name|'testSample'
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_toModuleName
name|'def'
name|'_toModuleName'
op|'('
name|'self'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'filename'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'segs'
op|'='
name|'name'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'if'
name|'segs'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|"'__init__'"
op|':'
newline|'\n'
indent|'            '
name|'segs'
op|'='
name|'segs'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'return'
string|"'.'"
op|'.'
name|'join'
op|'('
name|'segs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getModules
dedent|''
name|'def'
name|'getModules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'map'
op|'('
name|'self'
op|'.'
name|'_toModuleName'
op|','
name|'zip'
op|'('
op|'*'
name|'self'
op|'.'
name|'files'
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cleanUpModules
dedent|''
name|'def'
name|'cleanUpModules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'modules'
op|'='
name|'self'
op|'.'
name|'getModules'
op|'('
op|')'
newline|'\n'
name|'modules'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'modules'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
name|'for'
name|'module'
name|'in'
name|'modules'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'sys'
op|'.'
name|'modules'
op|'['
name|'module'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|createFiles
dedent|''
dedent|''
dedent|''
name|'def'
name|'createFiles'
op|'('
name|'self'
op|','
name|'files'
op|','
name|'parentDir'
op|'='
string|"'.'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'filename'
op|','
name|'contents'
name|'in'
name|'self'
op|'.'
name|'files'
op|':'
newline|'\n'
indent|'            '
name|'filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'parentDir'
op|','
name|'filename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_createDirectory'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'fd'
op|'='
name|'open'
op|'('
name|'filename'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'fd'
op|'.'
name|'write'
op|'('
name|'contents'
op|')'
newline|'\n'
name|'fd'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_createDirectory
dedent|''
dedent|''
name|'def'
name|'_createDirectory'
op|'('
name|'self'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'directory'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'directory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'directory'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|','
name|'parentDir'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'parentDir'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'parentDir'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'parent'
op|'='
name|'parentDir'
newline|'\n'
name|'self'
op|'.'
name|'createFiles'
op|'('
name|'self'
op|'.'
name|'files'
op|','
name|'parentDir'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cleanUpModules'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|SysPathManglingTest
dedent|''
dedent|''
name|'class'
name|'SysPathManglingTest'
op|'('
name|'PackageTest'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|','
name|'parent'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'oldPath'
op|'='
name|'sys'
op|'.'
name|'path'
op|'['
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'newPath'
op|'='
name|'sys'
op|'.'
name|'path'
op|'['
op|':'
op|']'
newline|'\n'
name|'if'
name|'parent'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'parent'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
dedent|''
name|'PackageTest'
op|'.'
name|'setUp'
op|'('
name|'self'
op|','
name|'parent'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'newPath'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'parent'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mangleSysPath'
op|'('
name|'self'
op|'.'
name|'newPath'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'PackageTest'
op|'.'
name|'tearDown'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mangleSysPath'
op|'('
name|'self'
op|'.'
name|'oldPath'
op|')'
newline|'\n'
nl|'\n'
DECL|member|mangleSysPath
dedent|''
name|'def'
name|'mangleSysPath'
op|'('
name|'self'
op|','
name|'pathVar'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'path'
op|'['
op|':'
op|']'
op|'='
name|'pathVar'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

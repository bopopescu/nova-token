begin_unit
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'runner'
name|'import'
name|'TestSuite'
op|','
name|'suiteVisit'
newline|'\n'
nl|'\n'
DECL|variable|pyunit
name|'pyunit'
op|'='
name|'__import__'
op|'('
string|"'unittest'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockVisitor
name|'class'
name|'MockVisitor'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'calls'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'testCase'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'calls'
op|'.'
name|'append'
op|'('
name|'testCase'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestTestVisitor
dedent|''
dedent|''
name|'class'
name|'TestTestVisitor'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'visitor'
op|'='
name|'MockVisitor'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_visitCase
dedent|''
name|'def'
name|'test_visitCase'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that C{visit} works for a single test case.\n        """'
newline|'\n'
name|'testCase'
op|'='
name|'TestTestVisitor'
op|'('
string|"'test_visitCase'"
op|')'
newline|'\n'
name|'testCase'
op|'.'
name|'visit'
op|'('
name|'self'
op|'.'
name|'visitor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'visitor'
op|'.'
name|'calls'
op|','
op|'['
name|'testCase'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_visitSuite
dedent|''
name|'def'
name|'test_visitSuite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that C{visit} hits all tests in a suite.\n        """'
newline|'\n'
name|'tests'
op|'='
op|'['
name|'TestTestVisitor'
op|'('
string|"'test_visitCase'"
op|')'
op|','
nl|'\n'
name|'TestTestVisitor'
op|'('
string|"'test_visitSuite'"
op|')'
op|']'
newline|'\n'
name|'testSuite'
op|'='
name|'TestSuite'
op|'('
name|'tests'
op|')'
newline|'\n'
name|'testSuite'
op|'.'
name|'visit'
op|'('
name|'self'
op|'.'
name|'visitor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'visitor'
op|'.'
name|'calls'
op|','
name|'tests'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_visitEmptySuite
dedent|''
name|'def'
name|'test_visitEmptySuite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that C{visit} on an empty suite hits nothing.\n        """'
newline|'\n'
name|'TestSuite'
op|'('
op|')'
op|'.'
name|'visit'
op|'('
name|'self'
op|'.'
name|'visitor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'visitor'
op|'.'
name|'calls'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_visitNestedSuite
dedent|''
name|'def'
name|'test_visitNestedSuite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that C{visit} recurses through suites.\n        """'
newline|'\n'
name|'tests'
op|'='
op|'['
name|'TestTestVisitor'
op|'('
string|"'test_visitCase'"
op|')'
op|','
nl|'\n'
name|'TestTestVisitor'
op|'('
string|"'test_visitSuite'"
op|')'
op|']'
newline|'\n'
name|'testSuite'
op|'='
name|'TestSuite'
op|'('
op|'['
name|'TestSuite'
op|'('
op|'['
name|'test'
op|']'
op|')'
name|'for'
name|'test'
name|'in'
name|'tests'
op|']'
op|')'
newline|'\n'
name|'testSuite'
op|'.'
name|'visit'
op|'('
name|'self'
op|'.'
name|'visitor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'visitor'
op|'.'
name|'calls'
op|','
name|'tests'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_visitPyunitSuite
dedent|''
name|'def'
name|'test_visitPyunitSuite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that C{suiteVisit} visits stdlib unittest suites\n        """'
newline|'\n'
name|'test'
op|'='
name|'TestTestVisitor'
op|'('
string|"'test_visitPyunitSuite'"
op|')'
newline|'\n'
name|'suite'
op|'='
name|'pyunit'
op|'.'
name|'TestSuite'
op|'('
op|'['
name|'test'
op|']'
op|')'
newline|'\n'
name|'suiteVisit'
op|'('
name|'suite'
op|','
name|'self'
op|'.'
name|'visitor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'visitor'
op|'.'
name|'calls'
op|','
op|'['
name|'test'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_visitPyunitCase
dedent|''
name|'def'
name|'test_visitPyunitCase'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a stdlib test case in a suite gets visited.\n        """'
newline|'\n'
DECL|class|PyunitCase
name|'class'
name|'PyunitCase'
op|'('
name|'pyunit'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_foo
indent|'            '
name|'def'
name|'test_foo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'test'
op|'='
name|'PyunitCase'
op|'('
string|"'test_foo'"
op|')'
newline|'\n'
name|'TestSuite'
op|'('
op|'['
name|'test'
op|']'
op|')'
op|'.'
name|'visit'
op|'('
name|'self'
op|'.'
name|'visitor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
op|'['
name|'call'
op|'.'
name|'id'
op|'('
op|')'
name|'for'
name|'call'
name|'in'
name|'self'
op|'.'
name|'visitor'
op|'.'
name|'calls'
op|']'
op|','
op|'['
name|'test'
op|'.'
name|'id'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

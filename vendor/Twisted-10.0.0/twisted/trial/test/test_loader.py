begin_unit
comment|'# Copyright (c) 2008-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for loading tests by name.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
name|'import'
name|'packages'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'runner'
op|','
name|'reporter'
op|','
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'itrial'
name|'import'
name|'ITestCase'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'modules'
name|'import'
name|'getModule'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|testNames
name|'def'
name|'testNames'
op|'('
name|'tests'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return the id of each test within the given test suite or case.\n    """'
newline|'\n'
name|'names'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'test'
name|'in'
name|'unittest'
op|'.'
name|'_iterateTests'
op|'('
name|'tests'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'names'
op|'.'
name|'append'
op|'('
name|'test'
op|'.'
name|'id'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'names'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FinderTest
dedent|''
name|'class'
name|'FinderTest'
op|'('
name|'packages'
op|'.'
name|'PackageTest'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'packages'
op|'.'
name|'PackageTest'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'loader'
op|'='
name|'runner'
op|'.'
name|'TestLoader'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'packages'
op|'.'
name|'PackageTest'
op|'.'
name|'tearDown'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_findPackage
dedent|''
name|'def'
name|'test_findPackage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sample1'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'findByName'
op|'('
string|"'twisted'"
op|')'
newline|'\n'
name|'import'
name|'twisted'
name|'as'
name|'sample2'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'sample1'
op|','
name|'sample2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_findModule
dedent|''
name|'def'
name|'test_findModule'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sample1'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'findByName'
op|'('
string|"'twisted.trial.test.sample'"
op|')'
newline|'\n'
name|'import'
name|'sample'
name|'as'
name|'sample2'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'sample1'
op|','
name|'sample2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_findFile
dedent|''
name|'def'
name|'test_findFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|"'sample.py'"
op|')'
newline|'\n'
name|'sample1'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'findByName'
op|'('
name|'path'
op|')'
newline|'\n'
name|'import'
name|'sample'
name|'as'
name|'sample2'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'sample1'
op|','
name|'sample2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_findObject
dedent|''
name|'def'
name|'test_findObject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sample1'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'findByName'
op|'('
string|"'twisted.trial.test.sample.FooTest'"
op|')'
newline|'\n'
name|'import'
name|'sample'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'sample'
op|'.'
name|'FooTest'
op|','
name|'sample1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_findNonModule
dedent|''
name|'def'
name|'test_findNonModule'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'AttributeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'findByName'
op|','
nl|'\n'
string|"'twisted.trial.test.nonexistent'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_findNonPackage
dedent|''
name|'def'
name|'test_findNonPackage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'findByName'
op|','
nl|'\n'
string|"'nonextant'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_findNonFile
dedent|''
name|'def'
name|'test_findNonFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|"'nonexistent.py'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'loader'
op|'.'
name|'findByName'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FileTest
dedent|''
dedent|''
name|'class'
name|'FileTest'
op|'('
name|'packages'
op|'.'
name|'SysPathManglingTest'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{runner.filenameToModule}.\n    """'
newline|'\n'
DECL|member|test_notFile
name|'def'
name|'test_notFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'runner'
op|'.'
name|'filenameToModule'
op|','
string|"'doesntexist'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_moduleInPath
dedent|''
name|'def'
name|'test_moduleInPath'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sample1'
op|'='
name|'runner'
op|'.'
name|'filenameToModule'
op|'('
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|"'sample.py'"
op|')'
op|')'
newline|'\n'
name|'import'
name|'sample'
name|'as'
name|'sample2'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'sample2'
op|','
name|'sample1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_moduleNotInPath
dedent|''
name|'def'
name|'test_moduleNotInPath'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If passed the path to a file containing the implementation of a\n        module within a package which is not on the import path,\n        L{runner.filenameToModule} returns a module object loosely\n        resembling the module defined by that file anyway.\n        """'
newline|'\n'
comment|'# "test_sample" isn\'t actually the name of this module.  However,'
nl|'\n'
comment|"# filenameToModule can't seem to figure that out.  So clean up this"
nl|'\n'
comment|"# mis-named module.  It would be better if this weren't necessary"
nl|'\n'
comment|"# and filenameToModule either didn't exist or added a correctly"
nl|'\n'
comment|'# named module to sys.modules.'
nl|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'pop'
op|','
string|"'test_sample'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mangleSysPath'
op|'('
name|'self'
op|'.'
name|'oldPath'
op|')'
newline|'\n'
name|'sample1'
op|'='
name|'runner'
op|'.'
name|'filenameToModule'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'parent'
op|','
string|"'goodpackage'"
op|','
string|"'test_sample.py'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mangleSysPath'
op|'('
name|'self'
op|'.'
name|'newPath'
op|')'
newline|'\n'
name|'from'
name|'goodpackage'
name|'import'
name|'test_sample'
name|'as'
name|'sample2'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'sample2'
op|'.'
name|'__file__'
op|')'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'sample1'
op|'.'
name|'__file__'
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_packageInPath
dedent|''
name|'def'
name|'test_packageInPath'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'package1'
op|'='
name|'runner'
op|'.'
name|'filenameToModule'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'parent'
op|','
nl|'\n'
string|"'goodpackage'"
op|')'
op|')'
newline|'\n'
name|'import'
name|'goodpackage'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'goodpackage'
op|','
name|'package1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_packageNotInPath
dedent|''
name|'def'
name|'test_packageNotInPath'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If passed the path to a directory which represents a package which\n        is not on the import path, L{runner.filenameToModule} returns a\n        module object loosely resembling the package defined by that\n        directory anyway.\n        """'
newline|'\n'
comment|'# "__init__" isn\'t actually the name of the package!  However,'
nl|'\n'
comment|'# filenameToModule is pretty stupid and decides that is its name'
nl|'\n'
comment|'# after all.  Make sure it gets cleaned up.  See the comment in'
nl|'\n'
comment|'# test_moduleNotInPath for possible courses of action related to'
nl|'\n'
comment|'# this.'
nl|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'pop'
op|','
string|'"__init__"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mangleSysPath'
op|'('
name|'self'
op|'.'
name|'oldPath'
op|')'
newline|'\n'
name|'package1'
op|'='
name|'runner'
op|'.'
name|'filenameToModule'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'parent'
op|','
string|"'goodpackage'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mangleSysPath'
op|'('
name|'self'
op|'.'
name|'newPath'
op|')'
newline|'\n'
name|'import'
name|'goodpackage'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'goodpackage'
op|'.'
name|'__file__'
op|')'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'package1'
op|'.'
name|'__file__'
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_directoryNotPackage
dedent|''
name|'def'
name|'test_directoryNotPackage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'ValueError'
op|','
name|'runner'
op|'.'
name|'filenameToModule'
op|','
nl|'\n'
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|"'directory'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_filenameNotPython
dedent|''
name|'def'
name|'test_filenameNotPython'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'ValueError'
op|','
name|'runner'
op|'.'
name|'filenameToModule'
op|','
nl|'\n'
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|"'notpython.py'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_filenameMatchesPackage
dedent|''
name|'def'
name|'test_filenameMatchesPackage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'parent'
op|','
string|"'goodpackage.py'"
op|')'
newline|'\n'
name|'fd'
op|'='
name|'open'
op|'('
name|'filename'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'fd'
op|'.'
name|'write'
op|'('
name|'packages'
op|'.'
name|'testModule'
op|')'
newline|'\n'
name|'fd'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'module'
op|'='
name|'runner'
op|'.'
name|'filenameToModule'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'filename'
op|','
name|'module'
op|'.'
name|'__file__'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'remove'
op|'('
name|'filename'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_directory
dedent|''
dedent|''
name|'def'
name|'test_directory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test loader against a filesystem directory. It should handle\n        \'path\' and \'path/\' the same way.\n        """'
newline|'\n'
name|'path'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|"'goodDirectory'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'path'
op|')'
newline|'\n'
name|'f'
op|'='
name|'file'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
string|"'__init__.py'"
op|')'
op|','
string|'"w"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'module'
op|'='
name|'runner'
op|'.'
name|'filenameToModule'
op|'('
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'module'
op|'.'
name|'__name__'
op|'.'
name|'endswith'
op|'('
string|"'goodDirectory'"
op|')'
op|')'
newline|'\n'
name|'module'
op|'='
name|'runner'
op|'.'
name|'filenameToModule'
op|'('
name|'path'
op|'+'
name|'os'
op|'.'
name|'path'
op|'.'
name|'sep'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'module'
op|'.'
name|'__name__'
op|'.'
name|'endswith'
op|'('
string|"'goodDirectory'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoaderTest
dedent|''
dedent|''
dedent|''
name|'class'
name|'LoaderTest'
op|'('
name|'packages'
op|'.'
name|'SysPathManglingTest'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loader'
op|'='
name|'runner'
op|'.'
name|'TestLoader'
op|'('
op|')'
newline|'\n'
name|'packages'
op|'.'
name|'SysPathManglingTest'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sortCases
dedent|''
name|'def'
name|'test_sortCases'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'sample'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadClass'
op|'('
name|'sample'
op|'.'
name|'AlphabetTest'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'['
string|"'test_a'"
op|','
string|"'test_b'"
op|','
string|"'test_c'"
op|']'
op|','
nl|'\n'
op|'['
name|'test'
op|'.'
name|'_testMethodName'
name|'for'
name|'test'
name|'in'
name|'suite'
op|'.'
name|'_tests'
op|']'
op|')'
newline|'\n'
name|'newOrder'
op|'='
op|'['
string|"'test_b'"
op|','
string|"'test_c'"
op|','
string|"'test_a'"
op|']'
newline|'\n'
name|'sortDict'
op|'='
name|'dict'
op|'('
name|'zip'
op|'('
name|'newOrder'
op|','
name|'range'
op|'('
number|'3'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'sorter'
op|'='
name|'lambda'
name|'x'
op|':'
name|'sortDict'
op|'.'
name|'get'
op|'('
name|'x'
op|'.'
name|'shortDescription'
op|'('
op|')'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadClass'
op|'('
name|'sample'
op|'.'
name|'AlphabetTest'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'newOrder'
op|','
nl|'\n'
op|'['
name|'test'
op|'.'
name|'_testMethodName'
name|'for'
name|'test'
name|'in'
name|'suite'
op|'.'
name|'_tests'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadMethod
dedent|''
name|'def'
name|'test_loadMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'sample'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadMethod'
op|'('
name|'sample'
op|'.'
name|'FooTest'
op|'.'
name|'test_foo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'1'
op|','
name|'suite'
op|'.'
name|'countTestCases'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
string|"'test_foo'"
op|','
name|'suite'
op|'.'
name|'_testMethodName'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadFailingMethod
dedent|''
name|'def'
name|'test_loadFailingMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# test added for issue1353'
nl|'\n'
indent|'        '
name|'import'
name|'erroneous'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadMethod'
op|'('
name|'erroneous'
op|'.'
name|'TestRegularFail'
op|'.'
name|'test_fail'
op|')'
newline|'\n'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'suite'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'result'
op|'.'
name|'testsRun'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'result'
op|'.'
name|'failures'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadNonMethod
dedent|''
name|'def'
name|'test_loadNonMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'sample'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadMethod'
op|','
name|'sample'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadMethod'
op|','
name|'sample'
op|'.'
name|'FooTest'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadMethod'
op|','
string|'"string"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadMethod'
op|','
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadClass
dedent|''
name|'def'
name|'test_loadClass'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'sample'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadClass'
op|'('
name|'sample'
op|'.'
name|'FooTest'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'2'
op|','
name|'suite'
op|'.'
name|'countTestCases'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'['
string|"'test_bar'"
op|','
string|"'test_foo'"
op|']'
op|','
nl|'\n'
op|'['
name|'test'
op|'.'
name|'_testMethodName'
name|'for'
name|'test'
name|'in'
name|'suite'
op|'.'
name|'_tests'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_loadNonClass
dedent|''
name|'def'
name|'test_loadNonClass'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'sample'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadClass'
op|','
name|'sample'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadClass'
op|','
name|'sample'
op|'.'
name|'FooTest'
op|'.'
name|'test_foo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadClass'
op|','
string|'"string"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadClass'
op|','
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadNonTestCase
dedent|''
name|'def'
name|'test_loadNonTestCase'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'sample'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadClass'
op|','
nl|'\n'
name|'sample'
op|'.'
name|'NotATest'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadModule
dedent|''
name|'def'
name|'test_loadModule'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'sample'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadModule'
op|'('
name|'sample'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'7'
op|','
name|'suite'
op|'.'
name|'countTestCases'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadNonModule
dedent|''
name|'def'
name|'test_loadNonModule'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'sample'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadModule'
op|','
name|'sample'
op|'.'
name|'FooTest'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadModule'
op|','
name|'sample'
op|'.'
name|'FooTest'
op|'.'
name|'test_foo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadModule'
op|','
string|'"string"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadModule'
op|','
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadPackage
dedent|''
name|'def'
name|'test_loadPackage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'goodpackage'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadPackage'
op|'('
name|'goodpackage'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'7'
op|','
name|'suite'
op|'.'
name|'countTestCases'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadNonPackage
dedent|''
name|'def'
name|'test_loadNonPackage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'sample'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadPackage'
op|','
name|'sample'
op|'.'
name|'FooTest'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadPackage'
op|','
name|'sample'
op|'.'
name|'FooTest'
op|'.'
name|'test_foo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadPackage'
op|','
string|'"string"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadPackage'
op|','
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadModuleAsPackage
dedent|''
name|'def'
name|'test_loadModuleAsPackage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'sample'
newline|'\n'
comment|'## XXX -- should this instead raise a ValueError? -- jml'
nl|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadPackage'
op|','
name|'sample'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadPackageRecursive
dedent|''
name|'def'
name|'test_loadPackageRecursive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'goodpackage'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadPackage'
op|'('
name|'goodpackage'
op|','
name|'recurse'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'14'
op|','
name|'suite'
op|'.'
name|'countTestCases'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadAnythingOnModule
dedent|''
name|'def'
name|'test_loadAnythingOnModule'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'sample'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadAnything'
op|'('
name|'sample'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'sample'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'suite'
op|'.'
name|'_tests'
op|'['
number|'0'
op|']'
op|'.'
name|'_tests'
op|'['
number|'0'
op|']'
op|'.'
name|'__class__'
op|'.'
name|'__module__'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadAnythingOnClass
dedent|''
name|'def'
name|'test_loadAnythingOnClass'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'sample'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadAnything'
op|'('
name|'sample'
op|'.'
name|'FooTest'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'2'
op|','
name|'suite'
op|'.'
name|'countTestCases'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadAnythingOnMethod
dedent|''
name|'def'
name|'test_loadAnythingOnMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'sample'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadAnything'
op|'('
name|'sample'
op|'.'
name|'FooTest'
op|'.'
name|'test_foo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'1'
op|','
name|'suite'
op|'.'
name|'countTestCases'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadAnythingOnPackage
dedent|''
name|'def'
name|'test_loadAnythingOnPackage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'goodpackage'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadAnything'
op|'('
name|'goodpackage'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'suite'
op|','
name|'self'
op|'.'
name|'loader'
op|'.'
name|'suiteFactory'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'7'
op|','
name|'suite'
op|'.'
name|'countTestCases'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadAnythingOnPackageRecursive
dedent|''
name|'def'
name|'test_loadAnythingOnPackageRecursive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'goodpackage'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadAnything'
op|'('
name|'goodpackage'
op|','
name|'recurse'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'suite'
op|','
name|'self'
op|'.'
name|'loader'
op|'.'
name|'suiteFactory'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'14'
op|','
name|'suite'
op|'.'
name|'countTestCases'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadAnythingOnString
dedent|''
name|'def'
name|'test_loadAnythingOnString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# the important thing about this test is not the string-iness'
nl|'\n'
comment|'# but the non-handledness.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadAnything'
op|','
string|'"goodpackage"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_importErrors
dedent|''
name|'def'
name|'test_importErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'package'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadPackage'
op|'('
name|'package'
op|','
name|'recurse'
op|'='
name|'True'
op|')'
newline|'\n'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'Reporter'
op|'('
op|')'
newline|'\n'
name|'suite'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'False'
op|','
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'result'
op|'.'
name|'errors'
op|')'
op|')'
newline|'\n'
name|'errors'
op|'='
op|'['
name|'test'
op|'.'
name|'id'
op|'('
op|')'
name|'for'
name|'test'
op|','
name|'error'
name|'in'
name|'result'
op|'.'
name|'errors'
op|']'
newline|'\n'
name|'errors'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'errors'
op|','
op|'['
string|"'package.test_bad_module'"
op|','
nl|'\n'
string|"'package.test_import_module'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_differentInstances
dedent|''
name|'def'
name|'test_differentInstances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{TestLoader.loadClass} returns a suite with each test method\n        represented by a different instances of the L{TestCase} they are\n        defined on.\n        """'
newline|'\n'
DECL|class|DistinctInstances
name|'class'
name|'DistinctInstances'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_1
indent|'            '
name|'def'
name|'test_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'first'
op|'='
string|"'test1Run'"
newline|'\n'
nl|'\n'
DECL|member|test_2
dedent|''
name|'def'
name|'test_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'hasattr'
op|'('
name|'self'
op|','
string|"'first'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadClass'
op|'('
name|'DistinctInstances'
op|')'
newline|'\n'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'Reporter'
op|'('
op|')'
newline|'\n'
name|'suite'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_loadModuleWith_test_suite
dedent|''
name|'def'
name|'test_loadModuleWith_test_suite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that C{test_suite} is used when present and other L{TestCase}s are\n        not included.\n        """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
name|'import'
name|'mockcustomsuite'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadModule'
op|'('
name|'mockcustomsuite'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'0'
op|','
name|'suite'
op|'.'
name|'countTestCases'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
string|'"MyCustomSuite"'
op|','
name|'getattr'
op|'('
name|'suite'
op|','
string|"'name'"
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_loadModuleWith_testSuite
dedent|''
name|'def'
name|'test_loadModuleWith_testSuite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that C{testSuite} is used when present and other L{TestCase}s are\n        not included.\n        """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
name|'import'
name|'mockcustomsuite2'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadModule'
op|'('
name|'mockcustomsuite2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'suite'
op|'.'
name|'countTestCases'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"MyCustomSuite"'
op|','
name|'getattr'
op|'('
name|'suite'
op|','
string|"'name'"
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_loadModuleWithBothCustom
dedent|''
name|'def'
name|'test_loadModuleWithBothCustom'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that if C{testSuite} and C{test_suite} are both present in a\n        module then C{testSuite} gets priority.\n        """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
name|'import'
name|'mockcustomsuite3'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadModule'
op|'('
name|'mockcustomsuite3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'testSuite'"
op|','
name|'getattr'
op|'('
name|'suite'
op|','
string|"'name'"
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_customLoadRaisesAttributeError
dedent|''
name|'def'
name|'test_customLoadRaisesAttributeError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make sure that any C{AttributeError}s raised by C{testSuite} are not\n        swallowed by L{TestLoader}.\n        """'
newline|'\n'
DECL|function|testSuite
name|'def'
name|'testSuite'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'AttributeError'
op|'('
string|"'should be reraised'"
op|')'
newline|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
name|'import'
name|'mockcustomsuite2'
newline|'\n'
name|'mockcustomsuite2'
op|'.'
name|'testSuite'
op|','
name|'original'
op|'='
op|'('
name|'testSuite'
op|','
nl|'\n'
name|'mockcustomsuite2'
op|'.'
name|'testSuite'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadModule'
op|','
nl|'\n'
name|'mockcustomsuite2'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'mockcustomsuite2'
op|'.'
name|'testSuite'
op|'='
name|'original'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# XXX - duplicated and modified from test_script'
nl|'\n'
DECL|member|assertSuitesEqual
dedent|''
dedent|''
name|'def'
name|'assertSuitesEqual'
op|'('
name|'self'
op|','
name|'test1'
op|','
name|'test2'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'names1'
op|'='
name|'testNames'
op|'('
name|'test1'
op|')'
newline|'\n'
name|'names2'
op|'='
name|'testNames'
op|'('
name|'test2'
op|')'
newline|'\n'
name|'names1'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'names2'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'names1'
op|','
name|'names2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadByNamesDuplicate
dedent|''
name|'def'
name|'test_loadByNamesDuplicate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that loadByNames ignores duplicate names\n        """'
newline|'\n'
name|'module'
op|'='
string|"'twisted.trial.test.test_test_visitor'"
newline|'\n'
name|'suite1'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadByNames'
op|'('
op|'['
name|'module'
op|','
name|'module'
op|']'
op|','
name|'True'
op|')'
newline|'\n'
name|'suite2'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadByName'
op|'('
name|'module'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSuitesEqual'
op|'('
name|'suite1'
op|','
name|'suite2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loadDifferentNames
dedent|''
name|'def'
name|'test_loadDifferentNames'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that loadByNames loads all the names that it is given\n        """'
newline|'\n'
name|'modules'
op|'='
op|'['
string|"'goodpackage'"
op|','
string|"'package.test_module'"
op|']'
newline|'\n'
name|'suite1'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadByNames'
op|'('
name|'modules'
op|')'
newline|'\n'
name|'suite2'
op|'='
name|'runner'
op|'.'
name|'TestSuite'
op|'('
name|'map'
op|'('
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadByName'
op|','
name|'modules'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSuitesEqual'
op|'('
name|'suite1'
op|','
name|'suite2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ZipLoadingTest
dedent|''
dedent|''
name|'class'
name|'ZipLoadingTest'
op|'('
name|'LoaderTest'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'test_paths'
name|'import'
name|'zipit'
newline|'\n'
name|'LoaderTest'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
name|'zipit'
op|'('
name|'self'
op|'.'
name|'parent'
op|','
name|'self'
op|'.'
name|'parent'
op|'+'
string|"'.zip'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parent'
op|'+='
string|"'.zip'"
newline|'\n'
name|'self'
op|'.'
name|'mangleSysPath'
op|'('
name|'self'
op|'.'
name|'oldPath'
op|'+'
op|'['
name|'self'
op|'.'
name|'parent'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PackageOrderingTest
dedent|''
dedent|''
name|'class'
name|'PackageOrderingTest'
op|'('
name|'packages'
op|'.'
name|'SysPathManglingTest'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'sys'
op|'.'
name|'version_info'
op|'<'
op|'('
number|'2'
op|','
number|'4'
op|')'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
op|'('
nl|'\n'
string|'"Python 2.3 import semantics make this behavior incorrect on that "'
nl|'\n'
string|'"version of Python as well as difficult to test.  The second "'
nl|'\n'
string|'"import of a package which raised an exception the first time it "'
nl|'\n'
string|'"was imported will succeed on Python 2.3, whereas it will fail on "'
nl|'\n'
string|'"later versions of Python.  Trial does not account for this, so "'
nl|'\n'
string|'"this test fails with inconsistencies between the expected and "'
nl|'\n'
string|'"the received loader errors."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loader'
op|'='
name|'runner'
op|'.'
name|'TestLoader'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'topDir'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'parent'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'topDir'
op|','
string|'"uberpackage"'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'parent'
op|')'
newline|'\n'
name|'file'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'parent'
op|','
string|'"__init__.py"'
op|')'
op|','
string|'"wb"'
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'packages'
op|'.'
name|'SysPathManglingTest'
op|'.'
name|'setUp'
op|'('
name|'self'
op|','
name|'parent'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mangleSysPath'
op|'('
name|'self'
op|'.'
name|'oldPath'
op|'+'
op|'['
name|'self'
op|'.'
name|'topDir'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_trialSortAlgorithm
dedent|''
name|'def'
name|'_trialSortAlgorithm'
op|'('
name|'self'
op|','
name|'sorter'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Right now, halfway by accident, trial sorts like this:\n\n            1. all modules are grouped together in one list and sorted.\n\n            2. within each module, the classes are grouped together in one list\n               and sorted.\n\n            3. finally within each class, each test method is grouped together\n               in a list and sorted.\n\n        This attempts to return a sorted list of testable thingies following\n        those rules, so that we can compare the behavior of loadPackage.\n\n        The things that show as \'cases\' are errors from modules which failed to\n        import, and test methods.  Let\'s gather all those together.\n        """'
newline|'\n'
name|'pkg'
op|'='
name|'getModule'
op|'('
string|"'uberpackage'"
op|')'
newline|'\n'
name|'testModules'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'testModule'
name|'in'
name|'pkg'
op|'.'
name|'walkModules'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'testModule'
op|'.'
name|'name'
op|'.'
name|'split'
op|'('
string|'"."'
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'startswith'
op|'('
string|'"test_"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'testModules'
op|'.'
name|'append'
op|'('
name|'testModule'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'sortedModules'
op|'='
name|'util'
op|'.'
name|'dsu'
op|'('
name|'testModules'
op|','
name|'sorter'
op|')'
comment|'# ONE'
newline|'\n'
name|'for'
name|'modinfo'
name|'in'
name|'sortedModules'
op|':'
newline|'\n'
comment|"# Now let's find all the classes."
nl|'\n'
indent|'            '
name|'module'
op|'='
name|'modinfo'
op|'.'
name|'load'
op|'('
name|'None'
op|')'
newline|'\n'
name|'if'
name|'module'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'modinfo'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'testClasses'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'attrib'
name|'in'
name|'modinfo'
op|'.'
name|'iterAttributes'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'runner'
op|'.'
name|'isTestCase'
op|'('
name|'attrib'
op|'.'
name|'load'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'testClasses'
op|'.'
name|'append'
op|'('
name|'attrib'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'sortedClasses'
op|'='
name|'util'
op|'.'
name|'dsu'
op|'('
name|'testClasses'
op|','
name|'sorter'
op|')'
comment|'# TWO'
newline|'\n'
name|'for'
name|'clsinfo'
name|'in'
name|'sortedClasses'
op|':'
newline|'\n'
indent|'                    '
name|'testMethods'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'attr'
name|'in'
name|'clsinfo'
op|'.'
name|'iterAttributes'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'attr'
op|'.'
name|'name'
op|'.'
name|'split'
op|'('
string|'"."'
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'startswith'
op|'('
string|"'test'"
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'testMethods'
op|'.'
name|'append'
op|'('
name|'attr'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'sortedMethods'
op|'='
name|'util'
op|'.'
name|'dsu'
op|'('
name|'testMethods'
op|','
name|'sorter'
op|')'
comment|'# THREE'
newline|'\n'
name|'for'
name|'methinfo'
name|'in'
name|'sortedMethods'
op|':'
newline|'\n'
indent|'                        '
name|'yield'
name|'methinfo'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|loadSortedPackages
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'loadSortedPackages'
op|'('
name|'self'
op|','
name|'sorter'
op|'='
name|'runner'
op|'.'
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that packages are loaded in the correct order.\n        """'
newline|'\n'
name|'import'
name|'uberpackage'
newline|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'sorter'
op|'='
name|'sorter'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadPackage'
op|'('
name|'uberpackage'
op|','
name|'recurse'
op|'='
name|'True'
op|')'
newline|'\n'
comment|'# XXX: Work around strange, unexplained Zope crap.'
nl|'\n'
comment|'# jml, 2007-11-15.'
nl|'\n'
name|'suite'
op|'='
name|'unittest'
op|'.'
name|'decorate'
op|'('
name|'suite'
op|','
name|'ITestCase'
op|')'
newline|'\n'
name|'resultingTests'
op|'='
name|'list'
op|'('
name|'unittest'
op|'.'
name|'_iterateTests'
op|'('
name|'suite'
op|')'
op|')'
newline|'\n'
name|'manifest'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'_trialSortAlgorithm'
op|'('
name|'sorter'
op|')'
op|')'
newline|'\n'
name|'for'
name|'number'
op|','
op|'('
name|'manifestTest'
op|','
name|'actualTest'
op|')'
name|'in'
name|'enumerate'
op|'('
nl|'\n'
name|'zip'
op|'('
name|'manifest'
op|','
name|'resultingTests'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'manifestTest'
op|'.'
name|'name'
op|','
name|'actualTest'
op|'.'
name|'id'
op|'('
op|')'
op|','
nl|'\n'
string|'"#%d: %s != %s"'
op|'%'
nl|'\n'
op|'('
name|'number'
op|','
name|'manifestTest'
op|'.'
name|'name'
op|','
name|'actualTest'
op|'.'
name|'id'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'manifest'
op|')'
op|','
name|'len'
op|'('
name|'resultingTests'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sortPackagesDefaultOrder
dedent|''
name|'def'
name|'test_sortPackagesDefaultOrder'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loadSortedPackages'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sortPackagesSillyOrder
dedent|''
name|'def'
name|'test_sortPackagesSillyOrder'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|sillySorter
indent|'        '
name|'def'
name|'sillySorter'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
comment|'# This has to work on fully-qualified class names and class'
nl|'\n'
comment|'# objects, which is silly, but it\'s the "spec", such as it is.'
nl|'\n'
comment|'#             if isinstance(s, type) or isinstance(s, types.ClassType):'
nl|'\n'
comment|"#                 return s.__module__+'.'+s.__name__"
nl|'\n'
indent|'            '
name|'n'
op|'='
name|'runner'
op|'.'
name|'name'
op|'('
name|'s'
op|')'
newline|'\n'
name|'d'
op|'='
name|'md5'
op|'('
name|'n'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'loadSortedPackages'
op|'('
name|'sillySorter'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

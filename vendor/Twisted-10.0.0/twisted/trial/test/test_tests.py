begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for the behaviour of unit tests.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'gc'
op|','
name|'StringIO'
op|','
name|'sys'
op|','
name|'weakref'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
op|','
name|'runner'
op|','
name|'reporter'
op|','
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
name|'import'
name|'erroneous'
op|','
name|'suppression'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
op|'.'
name|'test_reporter'
name|'import'
name|'LoggingReporter'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResultsTestMixin
name|'class'
name|'ResultsTestMixin'
op|':'
newline|'\n'
DECL|member|loadSuite
indent|'    '
name|'def'
name|'loadSuite'
op|'('
name|'self'
op|','
name|'suite'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loader'
op|'='
name|'runner'
op|'.'
name|'TestLoader'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadClass'
op|'('
name|'suite'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reporter'
op|'='
name|'reporter'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_setUp
dedent|''
name|'def'
name|'test_setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'errors'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'failures'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'skips'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertCount
dedent|''
name|'def'
name|'assertCount'
op|'('
name|'self'
op|','
name|'numTests'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'suite'
op|'.'
name|'countTestCases'
op|'('
op|')'
op|','
name|'numTests'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'suite'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'testsRun'
op|','
name|'numTests'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSuccess
dedent|''
dedent|''
name|'class'
name|'TestSuccess'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test that successful tests are reported as such.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_successful
dedent|''
name|'def'
name|'test_successful'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A successful test, used by other tests.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|assertSuccessful
dedent|''
name|'def'
name|'assertSuccessful'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'successes'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'failures'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'errors'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'expectedFailures'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'unexpectedSuccesses'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'skips'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_successfulIsReported
dedent|''
name|'def'
name|'test_successfulIsReported'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that when a successful test is run, it is reported as a success,\n        and not as any other kind of result.\n        """'
newline|'\n'
name|'test'
op|'='
name|'TestSuccess'
op|'('
string|"'test_successful'"
op|')'
newline|'\n'
name|'test'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSuccessful'
op|'('
name|'test'
op|','
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_defaultIsSuccessful
dedent|''
name|'def'
name|'test_defaultIsSuccessful'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that L{unittest.TestCase} itself can be instantiated, run, and\n        reported as being successful.\n        """'
newline|'\n'
name|'test'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
newline|'\n'
name|'test'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSuccessful'
op|'('
name|'test'
op|','
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noReference
dedent|''
name|'def'
name|'test_noReference'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that no reference is kept on a successful test.\n        """'
newline|'\n'
name|'test'
op|'='
name|'TestSuccess'
op|'('
string|"'test_successful'"
op|')'
newline|'\n'
name|'ref'
op|'='
name|'weakref'
op|'.'
name|'ref'
op|'('
name|'test'
op|')'
newline|'\n'
name|'test'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSuccessful'
op|'('
name|'test'
op|','
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'del'
name|'test'
newline|'\n'
name|'gc'
op|'.'
name|'collect'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'ref'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSkipMethods
dedent|''
dedent|''
name|'class'
name|'TestSkipMethods'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'ResultsTestMixin'
op|')'
op|':'
newline|'\n'
DECL|class|SkippingTests
indent|'    '
name|'class'
name|'SkippingTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_skip1
indent|'        '
name|'def'
name|'test_skip1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'unittest'
op|'.'
name|'SkipTest'
op|'('
string|"'skip1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_skip2
dedent|''
name|'def'
name|'test_skip2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"I should not get raised"'
op|')'
newline|'\n'
dedent|''
name|'test_skip2'
op|'.'
name|'skip'
op|'='
string|"'skip2'"
newline|'\n'
nl|'\n'
DECL|member|test_skip3
name|'def'
name|'test_skip3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'I should not fail'"
op|')'
newline|'\n'
dedent|''
name|'test_skip3'
op|'.'
name|'skip'
op|'='
string|"'skip3'"
newline|'\n'
nl|'\n'
DECL|class|SkippingSetUp
dedent|''
name|'class'
name|'SkippingSetUp'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'        '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'unittest'
op|'.'
name|'SkipTest'
op|'('
string|"'skipSetUp'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_1
dedent|''
name|'def'
name|'test_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|test_2
dedent|''
name|'def'
name|'test_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loadSuite'
op|'('
name|'TestSkipMethods'
op|'.'
name|'SkippingTests'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_counting
dedent|''
name|'def'
name|'test_counting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertCount'
op|'('
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_results
dedent|''
name|'def'
name|'test_results'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'suite'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'errors'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'failures'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'skips'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_setUp
dedent|''
name|'def'
name|'test_setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loadSuite'
op|'('
name|'TestSkipMethods'
op|'.'
name|'SkippingSetUp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'suite'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'errors'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'failures'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'skips'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reasons
dedent|''
name|'def'
name|'test_reasons'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'suite'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'prefix'
op|'='
string|"'test_'"
newline|'\n'
comment|'# whiteboxing reporter'
nl|'\n'
name|'for'
name|'test'
op|','
name|'reason'
name|'in'
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'skips'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'test'
op|'.'
name|'shortDescription'
op|'('
op|')'
op|'['
name|'len'
op|'('
name|'prefix'
op|')'
op|':'
op|']'
op|','
nl|'\n'
name|'str'
op|'('
name|'reason'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSkipClasses
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestSkipClasses'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'ResultsTestMixin'
op|')'
op|':'
newline|'\n'
DECL|class|SkippedClass
indent|'    '
name|'class'
name|'SkippedClass'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|"'class'"
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'_setUpRan'
op|'='
name|'True'
newline|'\n'
DECL|member|test_skip1
dedent|''
name|'def'
name|'test_skip1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'unittest'
op|'.'
name|'SkipTest'
op|'('
string|"'skip1'"
op|')'
newline|'\n'
DECL|member|test_skip2
dedent|''
name|'def'
name|'test_skip2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Ought to skip me"'
op|')'
newline|'\n'
dedent|''
name|'test_skip2'
op|'.'
name|'skip'
op|'='
string|"'skip2'"
newline|'\n'
DECL|member|test_skip3
name|'def'
name|'test_skip3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
DECL|member|test_skip4
dedent|''
name|'def'
name|'test_skip4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Skip me too"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loadSuite'
op|'('
name|'TestSkipClasses'
op|'.'
name|'SkippedClass'
op|')'
newline|'\n'
name|'TestSkipClasses'
op|'.'
name|'SkippedClass'
op|'.'
name|'_setUpRan'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_counting
dedent|''
name|'def'
name|'test_counting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Skipped test methods still contribute to the total test count.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertCount'
op|'('
number|'4'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setUpRan
dedent|''
name|'def'
name|'test_setUpRan'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The C{setUp} method is not called if the class is set to skip.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'suite'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'TestSkipClasses'
op|'.'
name|'SkippedClass'
op|'.'
name|'_setUpRan'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_results
dedent|''
name|'def'
name|'test_results'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Skipped test methods don\'t cause C{wasSuccessful} to return C{False},\n        nor do they contribute to the C{errors} or C{failures} of the reporter.\n        They do, however, add elements to the reporter\'s C{skips} list.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'suite'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'errors'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'failures'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'skips'
op|')'
op|','
number|'4'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reasons
dedent|''
name|'def'
name|'test_reasons'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test methods which raise L{unittest.SkipTest} or have their C{skip}\n        attribute set to something are skipped.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'suite'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'expectedReasons'
op|'='
op|'['
string|"'class'"
op|','
string|"'skip2'"
op|','
string|"'class'"
op|','
string|"'class'"
op|']'
newline|'\n'
comment|'# whitebox reporter'
nl|'\n'
name|'reasonsGiven'
op|'='
op|'['
name|'reason'
name|'for'
name|'test'
op|','
name|'reason'
name|'in'
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'skips'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expectedReasons'
op|','
name|'reasonsGiven'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestTodo
dedent|''
dedent|''
name|'class'
name|'TestTodo'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'ResultsTestMixin'
op|')'
op|':'
newline|'\n'
DECL|class|TodoTests
indent|'    '
name|'class'
name|'TodoTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_todo1
indent|'        '
name|'def'
name|'test_todo1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"deliberate failure"'
op|')'
newline|'\n'
dedent|''
name|'test_todo1'
op|'.'
name|'todo'
op|'='
string|'"todo1"'
newline|'\n'
nl|'\n'
DECL|member|test_todo2
name|'def'
name|'test_todo2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"deliberate error"'
op|')'
newline|'\n'
dedent|''
name|'test_todo2'
op|'.'
name|'todo'
op|'='
string|'"todo2"'
newline|'\n'
nl|'\n'
DECL|member|test_todo3
name|'def'
name|'test_todo3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""unexpected success"""'
newline|'\n'
dedent|''
name|'test_todo3'
op|'.'
name|'todo'
op|'='
string|"'todo3'"
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loadSuite'
op|'('
name|'TestTodo'
op|'.'
name|'TodoTests'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_counting
dedent|''
name|'def'
name|'test_counting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertCount'
op|'('
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_results
dedent|''
name|'def'
name|'test_results'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'suite'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'errors'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'failures'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'skips'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'expectedFailures'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'unexpectedSuccesses'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_expectedFailures
dedent|''
name|'def'
name|'test_expectedFailures'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'suite'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'expectedReasons'
op|'='
op|'['
string|"'todo1'"
op|','
string|"'todo2'"
op|']'
newline|'\n'
name|'reasonsGiven'
op|'='
op|'['
name|'r'
op|'.'
name|'reason'
nl|'\n'
name|'for'
name|'t'
op|','
name|'e'
op|','
name|'r'
name|'in'
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'expectedFailures'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'expectedReasons'
op|','
name|'reasonsGiven'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unexpectedSuccesses
dedent|''
name|'def'
name|'test_unexpectedSuccesses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'suite'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'expectedReasons'
op|'='
op|'['
string|"'todo3'"
op|']'
newline|'\n'
name|'reasonsGiven'
op|'='
op|'['
name|'r'
op|'.'
name|'reason'
nl|'\n'
name|'for'
name|'t'
op|','
name|'r'
name|'in'
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'unexpectedSuccesses'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'expectedReasons'
op|','
name|'reasonsGiven'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestTodoClass
dedent|''
dedent|''
name|'class'
name|'TestTodoClass'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'ResultsTestMixin'
op|')'
op|':'
newline|'\n'
DECL|class|TodoClass
indent|'    '
name|'class'
name|'TodoClass'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_todo1
indent|'        '
name|'def'
name|'test_todo1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'test_todo1'
op|'.'
name|'todo'
op|'='
string|'"method"'
newline|'\n'
DECL|member|test_todo2
name|'def'
name|'test_todo2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
DECL|member|test_todo3
dedent|''
name|'def'
name|'test_todo3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Deliberate Failure"'
op|')'
newline|'\n'
dedent|''
name|'test_todo3'
op|'.'
name|'todo'
op|'='
string|'"method"'
newline|'\n'
DECL|member|test_todo4
name|'def'
name|'test_todo4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Deliberate Failure"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'TodoClass'
op|'.'
name|'todo'
op|'='
string|'"class"'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loadSuite'
op|'('
name|'TestTodoClass'
op|'.'
name|'TodoClass'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_counting
dedent|''
name|'def'
name|'test_counting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertCount'
op|'('
number|'4'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_results
dedent|''
name|'def'
name|'test_results'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'suite'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'errors'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'failures'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'skips'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'expectedFailures'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'unexpectedSuccesses'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_expectedFailures
dedent|''
name|'def'
name|'test_expectedFailures'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'suite'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'expectedReasons'
op|'='
op|'['
string|"'method'"
op|','
string|"'class'"
op|']'
newline|'\n'
name|'reasonsGiven'
op|'='
op|'['
name|'r'
op|'.'
name|'reason'
nl|'\n'
name|'for'
name|'t'
op|','
name|'e'
op|','
name|'r'
name|'in'
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'expectedFailures'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'expectedReasons'
op|','
name|'reasonsGiven'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unexpectedSuccesses
dedent|''
name|'def'
name|'test_unexpectedSuccesses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'suite'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'expectedReasons'
op|'='
op|'['
string|"'method'"
op|','
string|"'class'"
op|']'
newline|'\n'
name|'reasonsGiven'
op|'='
op|'['
name|'r'
op|'.'
name|'reason'
nl|'\n'
name|'for'
name|'t'
op|','
name|'r'
name|'in'
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'unexpectedSuccesses'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'expectedReasons'
op|','
name|'reasonsGiven'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestStrictTodo
dedent|''
dedent|''
name|'class'
name|'TestStrictTodo'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'ResultsTestMixin'
op|')'
op|':'
newline|'\n'
DECL|class|Todos
indent|'    '
name|'class'
name|'Todos'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_todo1
indent|'        '
name|'def'
name|'test_todo1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|','
string|'"expected failure"'
newline|'\n'
dedent|''
name|'test_todo1'
op|'.'
name|'todo'
op|'='
op|'('
name|'RuntimeError'
op|','
string|'"todo1"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_todo2
name|'def'
name|'test_todo2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|','
string|'"expected failure"'
newline|'\n'
dedent|''
name|'test_todo2'
op|'.'
name|'todo'
op|'='
op|'('
op|'('
name|'RuntimeError'
op|','
name|'OSError'
op|')'
op|','
string|'"todo2"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_todo3
name|'def'
name|'test_todo3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|','
string|'"we had no idea!"'
newline|'\n'
dedent|''
name|'test_todo3'
op|'.'
name|'todo'
op|'='
op|'('
name|'OSError'
op|','
string|'"todo3"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_todo4
name|'def'
name|'test_todo4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|','
string|'"we had no idea!"'
newline|'\n'
dedent|''
name|'test_todo4'
op|'.'
name|'todo'
op|'='
op|'('
op|'('
name|'OSError'
op|','
name|'SyntaxError'
op|')'
op|','
string|'"todo4"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_todo5
name|'def'
name|'test_todo5'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"deliberate failure"'
op|')'
newline|'\n'
dedent|''
name|'test_todo5'
op|'.'
name|'todo'
op|'='
op|'('
name|'unittest'
op|'.'
name|'FailTest'
op|','
string|'"todo5"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_todo6
name|'def'
name|'test_todo6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"deliberate failure"'
op|')'
newline|'\n'
dedent|''
name|'test_todo6'
op|'.'
name|'todo'
op|'='
op|'('
name|'RuntimeError'
op|','
string|'"todo6"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_todo7
name|'def'
name|'test_todo7'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'test_todo7'
op|'.'
name|'todo'
op|'='
op|'('
name|'RuntimeError'
op|','
string|'"todo7"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loadSuite'
op|'('
name|'TestStrictTodo'
op|'.'
name|'Todos'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_counting
dedent|''
name|'def'
name|'test_counting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertCount'
op|'('
number|'7'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_results
dedent|''
name|'def'
name|'test_results'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'suite'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'errors'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'failures'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'expectedFailures'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'unexpectedSuccesses'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'skips'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_expectedFailures
dedent|''
name|'def'
name|'test_expectedFailures'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'suite'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'expectedReasons'
op|'='
op|'['
string|"'todo1'"
op|','
string|"'todo2'"
op|','
string|"'todo5'"
op|']'
newline|'\n'
name|'reasonsGotten'
op|'='
op|'['
name|'r'
op|'.'
name|'reason'
nl|'\n'
name|'for'
name|'t'
op|','
name|'e'
op|','
name|'r'
name|'in'
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'expectedFailures'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'expectedReasons'
op|','
name|'reasonsGotten'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unexpectedSuccesses
dedent|''
name|'def'
name|'test_unexpectedSuccesses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'suite'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'expectedReasons'
op|'='
op|'['
op|'('
op|'['
name|'RuntimeError'
op|']'
op|','
string|"'todo7'"
op|')'
op|']'
newline|'\n'
name|'reasonsGotten'
op|'='
op|'['
op|'('
name|'r'
op|'.'
name|'errors'
op|','
name|'r'
op|'.'
name|'reason'
op|')'
nl|'\n'
name|'for'
name|'t'
op|','
name|'r'
name|'in'
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'unexpectedSuccesses'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'expectedReasons'
op|','
name|'reasonsGotten'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestCleanup
dedent|''
dedent|''
name|'class'
name|'TestCleanup'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'Reporter'
op|'('
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'loader'
op|'='
name|'runner'
op|'.'
name|'TestLoader'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testLeftoverSockets
dedent|''
name|'def'
name|'testLeftoverSockets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Trial reports a L{util.DirtyReactorAggregateError} if a test leaves\n        sockets behind.\n        """'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadMethod'
op|'('
nl|'\n'
name|'erroneous'
op|'.'
name|'SocketOpenTest'
op|'.'
name|'test_socketsLeftOpen'
op|')'
newline|'\n'
name|'suite'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
comment|"# socket cleanup happens at end of class's tests."
nl|'\n'
comment|'# all the tests in the class are successful, even if the suite'
nl|'\n'
comment|'# fails'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'successes'
op|','
number|'1'
op|')'
newline|'\n'
name|'failure'
op|'='
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'failure'
op|'.'
name|'check'
op|'('
name|'util'
op|'.'
name|'DirtyReactorAggregateError'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testLeftoverPendingCalls
dedent|''
name|'def'
name|'testLeftoverPendingCalls'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Trial reports a L{util.DirtyReactorAggregateError} and fails the test\n        if a test leaves a L{DelayedCall} hanging.\n        """'
newline|'\n'
name|'suite'
op|'='
name|'erroneous'
op|'.'
name|'ReactorCleanupTests'
op|'('
string|"'test_leftoverPendingCalls'"
op|')'
newline|'\n'
name|'suite'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'failure'
op|'='
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'successes'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'failure'
op|'.'
name|'check'
op|'('
name|'util'
op|'.'
name|'DirtyReactorAggregateError'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FixtureTest
dedent|''
dedent|''
name|'class'
name|'FixtureTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for broken fixture helper methods (e.g. setUp, tearDown).\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reporter'
op|'='
name|'reporter'
op|'.'
name|'Reporter'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'loader'
op|'='
name|'runner'
op|'.'
name|'TestLoader'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testBrokenSetUp
dedent|''
name|'def'
name|'testBrokenSetUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When setUp fails, the error is recorded in the result object.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadClass'
op|'('
name|'erroneous'
op|'.'
name|'TestFailureInSetUp'
op|')'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'errors'
op|')'
op|'>'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'value'
op|','
nl|'\n'
name|'erroneous'
op|'.'
name|'FoolishError'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testBrokenTearDown
dedent|''
name|'def'
name|'testBrokenTearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When tearDown fails, the error is recorded in the result object.\n        """'
newline|'\n'
name|'suite'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadClass'
op|'('
name|'erroneous'
op|'.'
name|'TestFailureInTearDown'
op|')'
newline|'\n'
name|'suite'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'reporter'
op|')'
newline|'\n'
name|'errors'
op|'='
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'errors'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|'>'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'value'
op|','
name|'erroneous'
op|'.'
name|'FoolishError'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SuppressionTest
dedent|''
dedent|''
name|'class'
name|'SuppressionTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|runTests
indent|'    '
name|'def'
name|'runTests'
op|'('
name|'self'
op|','
name|'suite'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'suite'
op|'.'
name|'run'
op|'('
name|'reporter'
op|'.'
name|'TestResult'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loader'
op|'='
name|'runner'
op|'.'
name|'TestLoader'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_suppressMethod
dedent|''
name|'def'
name|'test_suppressMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A suppression set on a test method prevents warnings emitted by that\n        test method which the suppression matches from being emitted.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'runTests'
op|'('
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadMethod'
op|'('
nl|'\n'
name|'suppression'
op|'.'
name|'TestSuppression'
op|'.'
name|'testSuppressMethod'
op|')'
op|')'
newline|'\n'
name|'warningsShown'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
nl|'\n'
name|'suppression'
op|'.'
name|'TestSuppression'
op|'.'
name|'_emit'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'warningsShown'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
name|'suppression'
op|'.'
name|'CLASS_WARNING_MSG'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'warningsShown'
op|'['
number|'1'
op|']'
op|'['
string|"'message'"
op|']'
op|','
name|'suppression'
op|'.'
name|'MODULE_WARNING_MSG'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'warningsShown'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_suppressClass
dedent|''
name|'def'
name|'test_suppressClass'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A suppression set on a L{TestCase} subclass prevents warnings emitted\n        by any test methods defined on that class which match the suppression\n        from being emitted.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'runTests'
op|'('
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadMethod'
op|'('
nl|'\n'
name|'suppression'
op|'.'
name|'TestSuppression'
op|'.'
name|'testSuppressClass'
op|')'
op|')'
newline|'\n'
name|'warningsShown'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
nl|'\n'
name|'suppression'
op|'.'
name|'TestSuppression'
op|'.'
name|'_emit'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'warningsShown'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
name|'suppression'
op|'.'
name|'METHOD_WARNING_MSG'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'warningsShown'
op|'['
number|'1'
op|']'
op|'['
string|"'message'"
op|']'
op|','
name|'suppression'
op|'.'
name|'MODULE_WARNING_MSG'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'warningsShown'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_suppressModule
dedent|''
name|'def'
name|'test_suppressModule'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A suppression set on a module prevents warnings emitted by any test\n        mewthods defined in that module which match the suppression from being\n        emitted.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'runTests'
op|'('
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadMethod'
op|'('
nl|'\n'
name|'suppression'
op|'.'
name|'TestSuppression2'
op|'.'
name|'testSuppressModule'
op|')'
op|')'
newline|'\n'
name|'warningsShown'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
nl|'\n'
name|'suppression'
op|'.'
name|'TestSuppression'
op|'.'
name|'_emit'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'warningsShown'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
name|'suppression'
op|'.'
name|'METHOD_WARNING_MSG'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'warningsShown'
op|'['
number|'1'
op|']'
op|'['
string|"'message'"
op|']'
op|','
name|'suppression'
op|'.'
name|'CLASS_WARNING_MSG'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'warningsShown'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_overrideSuppressClass
dedent|''
name|'def'
name|'test_overrideSuppressClass'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The suppression set on a test method completely overrides a suppression\n        with wider scope; if it does not match a warning emitted by that test\n        method, the warning is emitted, even if a wider suppression matches.\n        """'
newline|'\n'
name|'case'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'loadMethod'
op|'('
nl|'\n'
name|'suppression'
op|'.'
name|'TestSuppression'
op|'.'
name|'testOverrideSuppressClass'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'runTests'
op|'('
name|'case'
op|')'
newline|'\n'
name|'warningsShown'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
nl|'\n'
name|'suppression'
op|'.'
name|'TestSuppression'
op|'.'
name|'_emit'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'warningsShown'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
name|'suppression'
op|'.'
name|'METHOD_WARNING_MSG'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'warningsShown'
op|'['
number|'1'
op|']'
op|'['
string|"'message'"
op|']'
op|','
name|'suppression'
op|'.'
name|'CLASS_WARNING_MSG'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'warningsShown'
op|'['
number|'2'
op|']'
op|'['
string|"'message'"
op|']'
op|','
name|'suppression'
op|'.'
name|'MODULE_WARNING_MSG'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'warningsShown'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|GCMixin
dedent|''
dedent|''
name|'class'
name|'GCMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I provide a few mock tests that log setUp, tearDown, test execution and\n    garbage collection. I\'m used to test whether gc.collect gets called.\n    """'
newline|'\n'
nl|'\n'
DECL|class|BasicTest
name|'class'
name|'BasicTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'        '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_log'
op|'('
string|"'setUp'"
op|')'
newline|'\n'
DECL|member|test_foo
dedent|''
name|'def'
name|'test_foo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_log'
op|'('
string|"'test'"
op|')'
newline|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_log'
op|'('
string|"'tearDown'"
op|')'
newline|'\n'
nl|'\n'
DECL|class|ClassTest
dedent|''
dedent|''
name|'class'
name|'ClassTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_1
indent|'        '
name|'def'
name|'test_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_log'
op|'('
string|"'test1'"
op|')'
newline|'\n'
DECL|member|test_2
dedent|''
name|'def'
name|'test_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_log'
op|'('
string|"'test2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_log
dedent|''
dedent|''
name|'def'
name|'_log'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_collectCalled'
op|'.'
name|'append'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|collect
dedent|''
name|'def'
name|'collect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Fake gc.collect"""'
newline|'\n'
name|'self'
op|'.'
name|'_log'
op|'('
string|"'collect'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_collectCalled'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'BasicTest'
op|'.'
name|'_log'
op|'='
name|'self'
op|'.'
name|'ClassTest'
op|'.'
name|'_log'
op|'='
name|'self'
op|'.'
name|'_log'
newline|'\n'
name|'self'
op|'.'
name|'_oldCollect'
op|'='
name|'gc'
op|'.'
name|'collect'
newline|'\n'
name|'gc'
op|'.'
name|'collect'
op|'='
name|'self'
op|'.'
name|'collect'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'gc'
op|'.'
name|'collect'
op|'='
name|'self'
op|'.'
name|'_oldCollect'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestGarbageCollectionDefault
dedent|''
dedent|''
name|'class'
name|'TestGarbageCollectionDefault'
op|'('
name|'GCMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_collectNotDefault
indent|'    '
name|'def'
name|'test_collectNotDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        By default, tests should not force garbage collection.\n        """'
newline|'\n'
name|'test'
op|'='
name|'self'
op|'.'
name|'BasicTest'
op|'('
string|"'test_foo'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'_collectCalled'
op|','
op|'['
string|"'setUp'"
op|','
string|"'test'"
op|','
string|"'tearDown'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestGarbageCollection
dedent|''
dedent|''
name|'class'
name|'TestGarbageCollection'
op|'('
name|'GCMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_collectCalled
indent|'    '
name|'def'
name|'test_collectCalled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        test gc.collect is called before and after each test.\n        """'
newline|'\n'
name|'test'
op|'='
name|'TestGarbageCollection'
op|'.'
name|'BasicTest'
op|'('
string|"'test_foo'"
op|')'
newline|'\n'
name|'test'
op|'='
name|'unittest'
op|'.'
name|'_ForceGarbageCollectionDecorator'
op|'('
name|'test'
op|')'
newline|'\n'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_collectCalled'
op|','
nl|'\n'
op|'['
string|"'collect'"
op|','
string|"'setUp'"
op|','
string|"'test'"
op|','
string|"'tearDown'"
op|','
string|"'collect'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestUnhandledDeferred
dedent|''
dedent|''
name|'class'
name|'TestUnhandledDeferred'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'test'
name|'import'
name|'weird'
newline|'\n'
comment|'# test_unhandledDeferred creates a cycle. we need explicit control of gc'
nl|'\n'
name|'gc'
op|'.'
name|'disable'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test1'
op|'='
name|'unittest'
op|'.'
name|'_ForceGarbageCollectionDecorator'
op|'('
nl|'\n'
name|'weird'
op|'.'
name|'TestBleeding'
op|'('
string|"'test_unhandledDeferred'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_isReported
dedent|''
name|'def'
name|'test_isReported'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Forcing garbage collection should cause unhandled Deferreds to be\n        reported as errors.\n        """'
newline|'\n'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test1'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'result'
op|'.'
name|'errors'
op|')'
op|','
number|'1'
op|','
nl|'\n'
string|"'Unhandled deferred passed without notice'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_doesntBleed
dedent|''
name|'def'
name|'test_doesntBleed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Forcing garbage collection in the test should mean that there are\n        no unreachable cycles immediately after the test completes.\n        """'
newline|'\n'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test1'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
op|')'
comment|'# test1 logs errors that get caught be us.'
newline|'\n'
comment|'# test1 created unreachable cycle.'
nl|'\n'
comment|'# it & all others should have been collected by now.'
nl|'\n'
name|'n'
op|'='
name|'gc'
op|'.'
name|'collect'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'n'
op|','
number|'0'
op|','
string|"'unreachable cycle still existed'"
op|')'
newline|'\n'
comment|"# check that last gc.collect didn't log more errors"
nl|'\n'
name|'x'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'x'
op|')'
op|','
number|'0'
op|','
string|"'Errors logged after gc.collect'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'gc'
op|'.'
name|'collect'
op|'('
op|')'
newline|'\n'
name|'gc'
op|'.'
name|'enable'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestAddCleanup
dedent|''
dedent|''
name|'class'
name|'TestAddCleanup'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test the addCleanup method of TestCase.\n    """'
newline|'\n'
nl|'\n'
DECL|class|MockTest
name|'class'
name|'MockTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'        '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'log'
op|'='
op|'['
string|"'setUp'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|brokenSetUp
dedent|''
name|'def'
name|'brokenSetUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'log'
op|'='
op|'['
string|"'setUp'"
op|']'
newline|'\n'
name|'raise'
name|'RuntimeError'
op|'('
string|'"Deliberate failure"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|skippingSetUp
dedent|''
name|'def'
name|'skippingSetUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'log'
op|'='
op|'['
string|"'setUp'"
op|']'
newline|'\n'
name|'raise'
name|'unittest'
op|'.'
name|'SkipTest'
op|'('
string|'"Don\'t do this"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|append
dedent|''
name|'def'
name|'append'
op|'('
name|'self'
op|','
name|'thing'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'log'
op|'.'
name|'append'
op|'('
name|'thing'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'log'
op|'.'
name|'append'
op|'('
string|"'tearDown'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|runTest
dedent|''
name|'def'
name|'runTest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'log'
op|'.'
name|'append'
op|'('
string|"'runTest'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'unittest'
op|'.'
name|'TestCase'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'='
name|'TestAddCleanup'
op|'.'
name|'MockTest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addCleanupCalledIfSetUpFails
dedent|''
name|'def'
name|'test_addCleanupCalledIfSetUpFails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Callables added with C{addCleanup} are run even if setUp fails.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'setUp'
op|'='
name|'self'
op|'.'
name|'test'
op|'.'
name|'brokenSetUp'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'test'
op|'.'
name|'append'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'setUp'"
op|','
string|"'foo'"
op|']'
op|','
name|'self'
op|'.'
name|'test'
op|'.'
name|'log'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addCleanupCalledIfSetUpSkips
dedent|''
name|'def'
name|'test_addCleanupCalledIfSetUpSkips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Callables added with C{addCleanup} are run even if setUp raises\n        L{SkipTest}. This allows test authors to reliably provide clean up\n        code using C{addCleanup}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'setUp'
op|'='
name|'self'
op|'.'
name|'test'
op|'.'
name|'skippingSetUp'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'test'
op|'.'
name|'append'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'setUp'"
op|','
string|"'foo'"
op|']'
op|','
name|'self'
op|'.'
name|'test'
op|'.'
name|'log'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addCleanupCalledInReverseOrder
dedent|''
name|'def'
name|'test_addCleanupCalledInReverseOrder'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Callables added with C{addCleanup} should be called before C{tearDown}\n        in reverse order of addition.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'test'
op|'.'
name|'append'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'test'
op|'.'
name|'append'
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'setUp'"
op|','
string|"'runTest'"
op|','
string|"'bar'"
op|','
string|"'foo'"
op|','
string|"'tearDown'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'log'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addCleanupWaitsForDeferreds
dedent|''
name|'def'
name|'test_addCleanupWaitsForDeferreds'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an added callable returns a L{Deferred}, then the test should wait\n        until that L{Deferred} has fired before running the next cleanup\n        method.\n        """'
newline|'\n'
DECL|function|cleanup
name|'def'
name|'cleanup'
op|'('
name|'message'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'d'
op|'.'
name|'callback'
op|','
name|'message'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'test'
op|'.'
name|'append'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'test'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'test'
op|'.'
name|'append'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'addCleanup'
op|'('
name|'cleanup'
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'setUp'"
op|','
string|"'runTest'"
op|','
string|"'bar'"
op|','
string|"'foo'"
op|','
string|"'tearDown'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'log'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_errorInCleanupIsCaptured
dedent|''
name|'def'
name|'test_errorInCleanupIsCaptured'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Errors raised in cleanup functions should be treated like errors in\n        C{tearDown}. They should be added as errors and fail the test. Skips,\n        todos and failures are all treated as errors.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'test'
op|'.'
name|'fail'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
op|')'
op|')'
newline|'\n'
op|'['
op|'('
name|'test'
op|','
name|'error'
op|')'
op|']'
op|'='
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'test'
op|','
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'error'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
op|','
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cleanupsContinueRunningAfterError
dedent|''
name|'def'
name|'test_cleanupsContinueRunningAfterError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a cleanup raises an error then that does not stop the other\n        cleanups from being run.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'test'
op|'.'
name|'append'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'test'
op|'.'
name|'fail'
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'setUp'"
op|','
string|"'runTest'"
op|','
string|"'foo'"
op|','
string|"'tearDown'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'log'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
op|')'
op|')'
newline|'\n'
op|'['
op|'('
name|'test'
op|','
name|'error'
op|')'
op|']'
op|'='
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'test'
op|','
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'error'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
op|','
string|"'bar'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleErrorsReported
dedent|''
name|'def'
name|'test_multipleErrorsReported'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If more than one cleanup fails, then the test should fail with more\n        than one error.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'test'
op|'.'
name|'fail'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'test'
op|'.'
name|'fail'
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'setUp'"
op|','
string|"'runTest'"
op|','
string|"'tearDown'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'log'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
op|')'
op|')'
newline|'\n'
op|'['
op|'('
name|'test1'
op|','
name|'error1'
op|')'
op|','
op|'('
name|'test2'
op|','
name|'error2'
op|')'
op|']'
op|'='
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'test1'
op|','
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'test2'
op|','
name|'self'
op|'.'
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'error1'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'error2'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
op|','
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSuiteClearing
dedent|''
dedent|''
name|'class'
name|'TestSuiteClearing'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for our extension that allows us to clear out a L{TestSuite}.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_clearSuite
name|'def'
name|'test_clearSuite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{unittest._clearSuite} on a populated L{TestSuite} removes\n        all tests.\n        """'
newline|'\n'
name|'suite'
op|'='
name|'unittest'
op|'.'
name|'TestSuite'
op|'('
op|')'
newline|'\n'
name|'suite'
op|'.'
name|'addTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# Double check that the test suite actually has something in it.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'suite'
op|'.'
name|'countTestCases'
op|'('
op|')'
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'_clearSuite'
op|'('
name|'suite'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'suite'
op|'.'
name|'countTestCases'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_clearPyunitSuite
dedent|''
name|'def'
name|'test_clearPyunitSuite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{unittest._clearSuite} on a populated standard library\n        L{TestSuite} removes all tests.\n\n        This test is important since C{_clearSuite} operates by mutating\n        internal variables.\n        """'
newline|'\n'
name|'pyunit'
op|'='
name|'__import__'
op|'('
string|"'unittest'"
op|')'
newline|'\n'
name|'suite'
op|'='
name|'pyunit'
op|'.'
name|'TestSuite'
op|'('
op|')'
newline|'\n'
name|'suite'
op|'.'
name|'addTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# Double check that the test suite actually has something in it.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'suite'
op|'.'
name|'countTestCases'
op|'('
op|')'
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'_clearSuite'
op|'('
name|'suite'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'suite'
op|'.'
name|'countTestCases'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestTestDecorator
dedent|''
dedent|''
name|'class'
name|'TestTestDecorator'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for our test decoration features.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|assertTestsEqual
name|'def'
name|'assertTestsEqual'
op|'('
name|'self'
op|','
name|'observed'
op|','
name|'expected'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that the given decorated tests are equal.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'observed'
op|'.'
name|'__class__'
op|','
name|'expected'
op|'.'
name|'__class__'
op|','
nl|'\n'
string|'"Different class"'
op|')'
newline|'\n'
name|'observedOriginal'
op|'='
name|'getattr'
op|'('
name|'observed'
op|','
string|"'_originalTest'"
op|','
name|'None'
op|')'
newline|'\n'
name|'expectedOriginal'
op|'='
name|'getattr'
op|'('
name|'expected'
op|','
string|"'_originalTest'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'observedOriginal'
op|','
name|'expectedOriginal'
op|')'
newline|'\n'
name|'if'
name|'observedOriginal'
name|'is'
name|'expectedOriginal'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'observed'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|assertSuitesEqual
dedent|''
dedent|''
name|'def'
name|'assertSuitesEqual'
op|'('
name|'self'
op|','
name|'observed'
op|','
name|'expected'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that the given test suites with decorated tests are equal.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'observed'
op|'.'
name|'__class__'
op|','
name|'expected'
op|'.'
name|'__class__'
op|','
nl|'\n'
string|'"Different class"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'observed'
op|'.'
name|'_tests'
op|')'
op|','
name|'len'
op|'('
name|'expected'
op|'.'
name|'_tests'
op|')'
op|','
nl|'\n'
string|'"Different number of tests."'
op|')'
newline|'\n'
name|'for'
name|'observedTest'
op|','
name|'expectedTest'
name|'in'
name|'zip'
op|'('
name|'observed'
op|'.'
name|'_tests'
op|','
nl|'\n'
name|'expected'
op|'.'
name|'_tests'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'getattr'
op|'('
name|'observedTest'
op|','
string|"'_tests'"
op|','
name|'None'
op|')'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertSuitesEqual'
op|'('
name|'observedTest'
op|','
name|'expectedTest'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTestsEqual'
op|'('
name|'observedTest'
op|','
name|'expectedTest'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_usesAdaptedReporterWithRun
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_usesAdaptedReporterWithRun'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        For decorated tests, C{run} uses a result adapter that preserves the\n        test decoration for calls to C{addError}, C{startTest} and the like.\n\n        See L{reporter._AdaptedReporter}.\n        """'
newline|'\n'
name|'test'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
newline|'\n'
name|'decoratedTest'
op|'='
name|'unittest'
op|'.'
name|'TestDecorator'
op|'('
name|'test'
op|')'
newline|'\n'
name|'result'
op|'='
name|'LoggingReporter'
op|'('
op|')'
newline|'\n'
name|'decoratedTest'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTestsEqual'
op|'('
name|'result'
op|'.'
name|'test'
op|','
name|'decoratedTest'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_usesAdaptedReporterWithCall
dedent|''
name|'def'
name|'test_usesAdaptedReporterWithCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        For decorated tests, C{__call__} uses a result adapter that preserves\n        the test decoration for calls to C{addError}, C{startTest} and the\n        like.\n\n        See L{reporter._AdaptedReporter}.\n        """'
newline|'\n'
name|'test'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
newline|'\n'
name|'decoratedTest'
op|'='
name|'unittest'
op|'.'
name|'TestDecorator'
op|'('
name|'test'
op|')'
newline|'\n'
name|'result'
op|'='
name|'LoggingReporter'
op|'('
op|')'
newline|'\n'
name|'decoratedTest'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTestsEqual'
op|'('
name|'result'
op|'.'
name|'test'
op|','
name|'decoratedTest'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_decorateSingleTest
dedent|''
name|'def'
name|'test_decorateSingleTest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{decorate} on a single test case returns the test case\n        decorated with the provided decorator.\n        """'
newline|'\n'
name|'test'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
newline|'\n'
name|'decoratedTest'
op|'='
name|'unittest'
op|'.'
name|'decorate'
op|'('
name|'test'
op|','
name|'unittest'
op|'.'
name|'TestDecorator'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTestsEqual'
op|'('
name|'unittest'
op|'.'
name|'TestDecorator'
op|'('
name|'test'
op|')'
op|','
name|'decoratedTest'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_decorateTestSuite
dedent|''
name|'def'
name|'test_decorateTestSuite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{decorate} on a test suite will return a test suite with\n        each test decorated with the provided decorator.\n        """'
newline|'\n'
name|'test'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
newline|'\n'
name|'suite'
op|'='
name|'unittest'
op|'.'
name|'TestSuite'
op|'('
op|'['
name|'test'
op|']'
op|')'
newline|'\n'
name|'decoratedTest'
op|'='
name|'unittest'
op|'.'
name|'decorate'
op|'('
name|'suite'
op|','
name|'unittest'
op|'.'
name|'TestDecorator'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSuitesEqual'
op|'('
nl|'\n'
name|'decoratedTest'
op|','
name|'unittest'
op|'.'
name|'TestSuite'
op|'('
op|'['
name|'unittest'
op|'.'
name|'TestDecorator'
op|'('
name|'test'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_decorateInPlaceMutatesOriginal
dedent|''
name|'def'
name|'test_decorateInPlaceMutatesOriginal'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{decorate} on a test suite will mutate the original suite.\n        """'
newline|'\n'
name|'test'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
newline|'\n'
name|'suite'
op|'='
name|'unittest'
op|'.'
name|'TestSuite'
op|'('
op|'['
name|'test'
op|']'
op|')'
newline|'\n'
name|'decoratedTest'
op|'='
name|'unittest'
op|'.'
name|'decorate'
op|'('
nl|'\n'
name|'suite'
op|','
name|'unittest'
op|'.'
name|'TestDecorator'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSuitesEqual'
op|'('
nl|'\n'
name|'decoratedTest'
op|','
name|'unittest'
op|'.'
name|'TestSuite'
op|'('
op|'['
name|'unittest'
op|'.'
name|'TestDecorator'
op|'('
name|'test'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSuitesEqual'
op|'('
nl|'\n'
name|'suite'
op|','
name|'unittest'
op|'.'
name|'TestSuite'
op|'('
op|'['
name|'unittest'
op|'.'
name|'TestDecorator'
op|'('
name|'test'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_decorateTestSuiteReferences
dedent|''
name|'def'
name|'test_decorateTestSuiteReferences'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When decorating a test suite in-place, the number of references to the\n        test objects in that test suite should stay the same.\n\n        Previously, L{unittest.decorate} recreated a test suite, so the\n        original suite kept references to the test objects. This test is here\n        to ensure the problem doesn\'t reappear again.\n        """'
newline|'\n'
name|'getrefcount'
op|'='
name|'getattr'
op|'('
name|'sys'
op|','
string|"'getrefcount'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'getrefcount'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'unittest'
op|'.'
name|'SkipTest'
op|'('
nl|'\n'
string|'"getrefcount not supported on this platform"'
op|')'
newline|'\n'
dedent|''
name|'test'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
newline|'\n'
name|'suite'
op|'='
name|'unittest'
op|'.'
name|'TestSuite'
op|'('
op|'['
name|'test'
op|']'
op|')'
newline|'\n'
name|'count1'
op|'='
name|'getrefcount'
op|'('
name|'test'
op|')'
newline|'\n'
name|'decoratedTest'
op|'='
name|'unittest'
op|'.'
name|'decorate'
op|'('
name|'suite'
op|','
name|'unittest'
op|'.'
name|'TestDecorator'
op|')'
newline|'\n'
name|'count2'
op|'='
name|'getrefcount'
op|'('
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'count1'
op|','
name|'count2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_decorateNestedTestSuite
dedent|''
name|'def'
name|'test_decorateNestedTestSuite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{decorate} on a test suite with nested suites will return a\n        test suite that maintains the same structure, but with all tests\n        decorated.\n        """'
newline|'\n'
name|'test'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
newline|'\n'
name|'suite'
op|'='
name|'unittest'
op|'.'
name|'TestSuite'
op|'('
op|'['
name|'unittest'
op|'.'
name|'TestSuite'
op|'('
op|'['
name|'test'
op|']'
op|')'
op|']'
op|')'
newline|'\n'
name|'decoratedTest'
op|'='
name|'unittest'
op|'.'
name|'decorate'
op|'('
name|'suite'
op|','
name|'unittest'
op|'.'
name|'TestDecorator'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'unittest'
op|'.'
name|'TestSuite'
op|'('
nl|'\n'
op|'['
name|'unittest'
op|'.'
name|'TestSuite'
op|'('
op|'['
name|'unittest'
op|'.'
name|'TestDecorator'
op|'('
name|'test'
op|')'
op|']'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSuitesEqual'
op|'('
name|'decoratedTest'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_decorateDecoratedSuite
dedent|''
name|'def'
name|'test_decorateDecoratedSuite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{decorate} on a test suite with already-decorated tests\n        decorates all of the tests in the suite again.\n        """'
newline|'\n'
name|'test'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
newline|'\n'
name|'decoratedTest'
op|'='
name|'unittest'
op|'.'
name|'decorate'
op|'('
name|'test'
op|','
name|'unittest'
op|'.'
name|'TestDecorator'
op|')'
newline|'\n'
name|'redecoratedTest'
op|'='
name|'unittest'
op|'.'
name|'decorate'
op|'('
name|'decoratedTest'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'TestDecorator'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTestsEqual'
op|'('
name|'redecoratedTest'
op|','
nl|'\n'
name|'unittest'
op|'.'
name|'TestDecorator'
op|'('
name|'decoratedTest'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_decoratePreservesSuite
dedent|''
name|'def'
name|'test_decoratePreservesSuite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Tests can be in non-standard suites. L{decorate} preserves the\n        non-standard suites when it decorates the tests.\n        """'
newline|'\n'
name|'test'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
newline|'\n'
name|'suite'
op|'='
name|'runner'
op|'.'
name|'DestructiveTestSuite'
op|'('
op|'['
name|'test'
op|']'
op|')'
newline|'\n'
name|'decorated'
op|'='
name|'unittest'
op|'.'
name|'decorate'
op|'('
name|'suite'
op|','
name|'unittest'
op|'.'
name|'TestDecorator'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSuitesEqual'
op|'('
nl|'\n'
name|'decorated'
op|','
nl|'\n'
name|'runner'
op|'.'
name|'DestructiveTestSuite'
op|'('
op|'['
name|'unittest'
op|'.'
name|'TestDecorator'
op|'('
name|'test'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestMonkeyPatchSupport
dedent|''
dedent|''
name|'class'
name|'TestMonkeyPatchSupport'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the patch() helper method in L{unittest.TestCase}.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'originalValue'
op|'='
string|"'original'"
newline|'\n'
name|'self'
op|'.'
name|'patchedValue'
op|'='
string|"'patched'"
newline|'\n'
name|'self'
op|'.'
name|'objectToPatch'
op|'='
name|'self'
op|'.'
name|'originalValue'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_patch
dedent|''
name|'def'
name|'test_patch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling C{patch()} on a test monkey patches the specified object and\n        attribute.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'patch'
op|'('
name|'self'
op|','
string|"'objectToPatch'"
op|','
name|'self'
op|'.'
name|'patchedValue'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'objectToPatch'
op|','
name|'self'
op|'.'
name|'patchedValue'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_patchRestoredAfterRun
dedent|''
name|'def'
name|'test_patchRestoredAfterRun'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Any monkey patches introduced by a test using C{patch()} are reverted\n        after the test has run.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'patch'
op|'('
name|'self'
op|','
string|"'objectToPatch'"
op|','
name|'self'
op|'.'
name|'patchedValue'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'reporter'
op|'.'
name|'Reporter'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'objectToPatch'
op|','
name|'self'
op|'.'
name|'originalValue'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_revertDuringTest
dedent|''
name|'def'
name|'test_revertDuringTest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{patch()} return a L{monkey.MonkeyPatcher} object that can be used to\n        restore the original values before the end of the test.\n        """'
newline|'\n'
name|'patch'
op|'='
name|'self'
op|'.'
name|'test'
op|'.'
name|'patch'
op|'('
name|'self'
op|','
string|"'objectToPatch'"
op|','
name|'self'
op|'.'
name|'patchedValue'
op|')'
newline|'\n'
name|'patch'
op|'.'
name|'restore'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'objectToPatch'
op|','
name|'self'
op|'.'
name|'originalValue'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_revertAndRepatch
dedent|''
name|'def'
name|'test_revertAndRepatch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The returned L{monkey.MonkeyPatcher} object can re-apply the patch\n        during the test run.\n        """'
newline|'\n'
name|'patch'
op|'='
name|'self'
op|'.'
name|'test'
op|'.'
name|'patch'
op|'('
name|'self'
op|','
string|"'objectToPatch'"
op|','
name|'self'
op|'.'
name|'patchedValue'
op|')'
newline|'\n'
name|'patch'
op|'.'
name|'restore'
op|'('
op|')'
newline|'\n'
name|'patch'
op|'.'
name|'patch'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'objectToPatch'
op|','
name|'self'
op|'.'
name|'patchedValue'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_successivePatches
dedent|''
name|'def'
name|'test_successivePatches'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Successive patches are applied and reverted just like a single patch.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'patch'
op|'('
name|'self'
op|','
string|"'objectToPatch'"
op|','
name|'self'
op|'.'
name|'patchedValue'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'objectToPatch'
op|','
name|'self'
op|'.'
name|'patchedValue'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'patch'
op|'('
name|'self'
op|','
string|"'objectToPatch'"
op|','
string|"'second value'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'objectToPatch'
op|','
string|"'second value'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'reporter'
op|'.'
name|'Reporter'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'objectToPatch'
op|','
name|'self'
op|'.'
name|'originalValue'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestIterateTests
dedent|''
dedent|''
name|'class'
name|'TestIterateTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{_iterateTests} returns a list of all test cases in a test suite or test\n    case.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_iterateTestCase
name|'def'
name|'test_iterateTestCase'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_iterateTests} on a single test case returns a list containing that\n        test case.\n        """'
newline|'\n'
name|'test'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'test'
op|']'
op|','
name|'list'
op|'('
name|'unittest'
op|'.'
name|'_iterateTests'
op|'('
name|'test'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_iterateSingletonTestSuite
dedent|''
name|'def'
name|'test_iterateSingletonTestSuite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_iterateTests} on a test suite that contains a single test case\n        returns a list containing that test case.\n        """'
newline|'\n'
name|'test'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
newline|'\n'
name|'suite'
op|'='
name|'runner'
op|'.'
name|'TestSuite'
op|'('
op|'['
name|'test'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'test'
op|']'
op|','
name|'list'
op|'('
name|'unittest'
op|'.'
name|'_iterateTests'
op|'('
name|'suite'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_iterateNestedTestSuite
dedent|''
name|'def'
name|'test_iterateNestedTestSuite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_iterateTests} returns tests that are in nested test suites.\n        """'
newline|'\n'
name|'test'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
newline|'\n'
name|'suite'
op|'='
name|'runner'
op|'.'
name|'TestSuite'
op|'('
op|'['
name|'runner'
op|'.'
name|'TestSuite'
op|'('
op|'['
name|'test'
op|']'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'test'
op|']'
op|','
name|'list'
op|'('
name|'unittest'
op|'.'
name|'_iterateTests'
op|'('
name|'suite'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_iterateIsLeftToRightDepthFirst
dedent|''
name|'def'
name|'test_iterateIsLeftToRightDepthFirst'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_iterateTests} returns tests in left-to-right, depth-first order.\n        """'
newline|'\n'
name|'test'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'('
op|')'
newline|'\n'
name|'suite'
op|'='
name|'runner'
op|'.'
name|'TestSuite'
op|'('
op|'['
name|'runner'
op|'.'
name|'TestSuite'
op|'('
op|'['
name|'test'
op|']'
op|')'
op|','
name|'self'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'test'
op|','
name|'self'
op|']'
op|','
name|'list'
op|'('
name|'unittest'
op|'.'
name|'_iterateTests'
op|'('
name|'suite'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

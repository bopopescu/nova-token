begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTest the interaction between trial and errors logged during test run.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
op|','
name|'task'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
op|','
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
op|','
name|'reporter'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|makeFailure
name|'def'
name|'makeFailure'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return a new, realistic failure.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
number|'1'
op|'/'
number|'0'
newline|'\n'
dedent|''
name|'except'
name|'ZeroDivisionError'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'f'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Mask
dedent|''
name|'class'
name|'Mask'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Hide C{MockTest}s from Trial\'s automatic test finder.\n    """'
newline|'\n'
nl|'\n'
DECL|class|MockTest
name|'class'
name|'MockTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_silent
indent|'        '
name|'def'
name|'test_silent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Don\'t log any errors.\n            """'
newline|'\n'
nl|'\n'
DECL|member|test_single
dedent|''
name|'def'
name|'test_single'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Log a single error.\n            """'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'makeFailure'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_double
dedent|''
name|'def'
name|'test_double'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Log two errors.\n            """'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'makeFailure'
op|'('
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'makeFailure'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_inCallback
dedent|''
name|'def'
name|'test_inCallback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Log an error in an asynchronous callback.\n            """'
newline|'\n'
name|'return'
name|'task'
op|'.'
name|'deferLater'
op|'('
name|'reactor'
op|','
number|'0'
op|','
name|'lambda'
op|':'
name|'log'
op|'.'
name|'err'
op|'('
name|'makeFailure'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestObserver
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestObserver'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{unittest._LogObserver}, a helper for the implementation of\n    L{TestCase.flushLoggedErrors}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'='
name|'unittest'
op|'.'
name|'_LogObserver'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_msg
dedent|''
name|'def'
name|'test_msg'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a standard log message doesn\'t go anywhere near the result.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'gotEvent'
op|'('
op|'{'
string|"'message'"
op|':'
op|'('
string|"'some message'"
op|','
op|')'
op|','
nl|'\n'
string|"'time'"
op|':'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
string|"'isError'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'system'"
op|':'
string|"'-'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'observer'
op|'.'
name|'getErrors'
op|'('
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_error
dedent|''
name|'def'
name|'test_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that an observed error gets added to the result\n        """'
newline|'\n'
name|'f'
op|'='
name|'makeFailure'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'gotEvent'
op|'('
op|'{'
string|"'message'"
op|':'
op|'('
op|')'
op|','
nl|'\n'
string|"'time'"
op|':'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
string|"'isError'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'system'"
op|':'
string|"'-'"
op|','
string|"'failure'"
op|':'
name|'f'
op|','
nl|'\n'
string|"'why'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'observer'
op|'.'
name|'getErrors'
op|'('
op|')'
op|','
op|'['
name|'f'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_flush
dedent|''
name|'def'
name|'test_flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that flushing the observer with no args removes all errors.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_error'
op|'('
op|')'
newline|'\n'
name|'flushed'
op|'='
name|'self'
op|'.'
name|'observer'
op|'.'
name|'flushErrors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'observer'
op|'.'
name|'getErrors'
op|'('
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'flushed'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'flushed'
op|'['
number|'0'
op|']'
op|'.'
name|'check'
op|'('
name|'ZeroDivisionError'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_makeRuntimeFailure
dedent|''
name|'def'
name|'_makeRuntimeFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'RuntimeError'
op|'('
string|"'test error'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_flushByType
dedent|''
name|'def'
name|'test_flushByType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that flushing the observer remove all failures of the given type.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_error'
op|'('
op|')'
comment|'# log a ZeroDivisionError to the observer'
newline|'\n'
name|'f'
op|'='
name|'self'
op|'.'
name|'_makeRuntimeFailure'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'gotEvent'
op|'('
name|'dict'
op|'('
name|'message'
op|'='
op|'('
op|')'
op|','
name|'time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
name|'isError'
op|'='
number|'1'
op|','
nl|'\n'
name|'system'
op|'='
string|"'-'"
op|','
name|'failure'
op|'='
name|'f'
op|','
name|'why'
op|'='
name|'None'
op|')'
op|')'
newline|'\n'
name|'flushed'
op|'='
name|'self'
op|'.'
name|'observer'
op|'.'
name|'flushErrors'
op|'('
name|'ZeroDivisionError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'observer'
op|'.'
name|'getErrors'
op|'('
op|')'
op|','
op|'['
name|'f'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'flushed'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'flushed'
op|'['
number|'0'
op|']'
op|'.'
name|'check'
op|'('
name|'ZeroDivisionError'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ignoreErrors
dedent|''
name|'def'
name|'test_ignoreErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that C{_ignoreErrors} actually causes errors to be ignored.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'_ignoreErrors'
op|'('
name|'ZeroDivisionError'
op|')'
newline|'\n'
name|'f'
op|'='
name|'makeFailure'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'gotEvent'
op|'('
op|'{'
string|"'message'"
op|':'
op|'('
op|')'
op|','
nl|'\n'
string|"'time'"
op|':'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
string|"'isError'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'system'"
op|':'
string|"'-'"
op|','
string|"'failure'"
op|':'
name|'f'
op|','
nl|'\n'
string|"'why'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'observer'
op|'.'
name|'getErrors'
op|'('
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_clearIgnores
dedent|''
name|'def'
name|'test_clearIgnores'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that C{_clearIgnores} ensures that previously ignored errors\n        get captured.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'_ignoreErrors'
op|'('
name|'ZeroDivisionError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'_clearIgnores'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'makeFailure'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'gotEvent'
op|'('
op|'{'
string|"'message'"
op|':'
op|'('
op|')'
op|','
nl|'\n'
string|"'time'"
op|':'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
string|"'isError'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'system'"
op|':'
string|"'-'"
op|','
string|"'failure'"
op|':'
name|'f'
op|','
nl|'\n'
string|"'why'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'observer'
op|'.'
name|'getErrors'
op|'('
op|')'
op|','
op|'['
name|'f'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LogErrors
dedent|''
dedent|''
name|'class'
name|'LogErrors'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    High-level tests demonstrating the expected behaviour of logged errors\n    during tests.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'result'
op|'='
name|'reporter'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'ZeroDivisionError'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_singleError
dedent|''
name|'def'
name|'test_singleError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a logged error gets reported as a test error.\n        """'
newline|'\n'
name|'test'
op|'='
name|'Mask'
op|'.'
name|'MockTest'
op|'('
string|"'test_single'"
op|')'
newline|'\n'
name|'test'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'check'
op|'('
name|'ZeroDivisionError'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_twoErrors
dedent|''
name|'def'
name|'test_twoErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that when two errors get logged, they both get reported as test\n        errors.\n        """'
newline|'\n'
name|'test'
op|'='
name|'Mask'
op|'.'
name|'MockTest'
op|'('
string|"'test_double'"
op|')'
newline|'\n'
name|'test'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_inCallback
dedent|''
name|'def'
name|'test_inCallback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that errors logged in callbacks get reported as test errors.\n        """'
newline|'\n'
name|'test'
op|'='
name|'Mask'
op|'.'
name|'MockTest'
op|'('
string|"'test_inCallback'"
op|')'
newline|'\n'
name|'test'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'check'
op|'('
name|'ZeroDivisionError'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_errorsIsolated
dedent|''
name|'def'
name|'test_errorsIsolated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that an error logged in one test doesn\'t fail the next test.\n        """'
newline|'\n'
name|'t1'
op|'='
name|'Mask'
op|'.'
name|'MockTest'
op|'('
string|"'test_single'"
op|')'
newline|'\n'
name|'t2'
op|'='
name|'Mask'
op|'.'
name|'MockTest'
op|'('
string|"'test_silent'"
op|')'
newline|'\n'
name|'t1'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'t2'
op|'('
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'t1'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2008-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for Trial\'s interaction with the Python warning system.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'warnings'
newline|'\n'
name|'from'
name|'StringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
op|','
name|'_collectWarnings'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'reporter'
name|'import'
name|'TestResult'
newline|'\n'
nl|'\n'
DECL|class|Mask
name|'class'
name|'Mask'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Hide a L{TestCase} definition from trial\'s automatic discovery mechanism.\n    """'
newline|'\n'
DECL|class|MockTests
name|'class'
name|'MockTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A test case which is used by L{FlushWarningsTests} to verify behavior\n        which cannot be verified by code inside a single test method.\n        """'
newline|'\n'
DECL|variable|message
name|'message'
op|'='
string|'"some warning text"'
newline|'\n'
DECL|variable|category
name|'category'
op|'='
name|'UserWarning'
newline|'\n'
nl|'\n'
DECL|member|test_unflushed
name|'def'
name|'test_unflushed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Generate a warning and don\'t flush it.\n            """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'self'
op|'.'
name|'message'
op|','
name|'self'
op|'.'
name|'category'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_flushed
dedent|''
name|'def'
name|'test_flushed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Generate a warning and flush it.\n            """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'self'
op|'.'
name|'message'
op|','
name|'self'
op|'.'
name|'category'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FlushWarningsTests
dedent|''
dedent|''
dedent|''
name|'class'
name|'FlushWarningsTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{TestCase.flushWarnings}, an API for examining the warnings\n    emitted so far in a test.\n    """'
newline|'\n'
nl|'\n'
DECL|member|assertDictSubset
name|'def'
name|'assertDictSubset'
op|'('
name|'self'
op|','
name|'set'
op|','
name|'subset'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that all the keys present in C{subset} are also present in\n        C{set} and that the corresponding values are equal.\n        """'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'subset'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'['
name|'k'
op|']'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|assertDictSubsets
dedent|''
dedent|''
name|'def'
name|'assertDictSubsets'
op|'('
name|'self'
op|','
name|'sets'
op|','
name|'subsets'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        For each pair of corresponding elements in C{sets} and C{subsets},\n        assert that the element from C{subsets} is a subset of the element from\n        C{sets}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'sets'
op|')'
op|','
name|'len'
op|'('
name|'subsets'
op|')'
op|')'
newline|'\n'
name|'for'
name|'a'
op|','
name|'b'
name|'in'
name|'zip'
op|'('
name|'sets'
op|','
name|'subsets'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertDictSubset'
op|'('
name|'a'
op|','
name|'b'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_none
dedent|''
dedent|''
name|'def'
name|'test_none'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If no warnings are emitted by a test, L{TestCase.flushWarnings} returns\n        an empty list.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_several
dedent|''
name|'def'
name|'test_several'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If several warnings are emitted by a test, L{TestCase.flushWarnings}\n        returns a list containing all of them.\n        """'
newline|'\n'
name|'firstMessage'
op|'='
string|'"first warning message"'
newline|'\n'
name|'firstCategory'
op|'='
name|'UserWarning'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'message'
op|'='
name|'firstMessage'
op|','
name|'category'
op|'='
name|'firstCategory'
op|')'
newline|'\n'
nl|'\n'
name|'secondMessage'
op|'='
string|'"second warning message"'
newline|'\n'
name|'secondCategory'
op|'='
name|'RuntimeWarning'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'message'
op|'='
name|'secondMessage'
op|','
name|'category'
op|'='
name|'secondCategory'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertDictSubsets'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|')'
op|','
nl|'\n'
op|'['
op|'{'
string|"'category'"
op|':'
name|'firstCategory'
op|','
string|"'message'"
op|':'
name|'firstMessage'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'category'"
op|':'
name|'secondCategory'
op|','
string|"'message'"
op|':'
name|'secondMessage'
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_repeated
dedent|''
name|'def'
name|'test_repeated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The same warning triggered twice from the same place is included twice\n        in the list returned by L{TestCase.flushWarnings}.\n        """'
newline|'\n'
name|'message'
op|'='
string|'"the message"'
newline|'\n'
name|'category'
op|'='
name|'RuntimeWarning'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'message'
op|'='
name|'message'
op|','
name|'category'
op|'='
name|'category'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertDictSubsets'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|')'
op|','
nl|'\n'
op|'['
op|'{'
string|"'category'"
op|':'
name|'category'
op|','
string|"'message'"
op|':'
name|'message'
op|'}'
op|']'
op|'*'
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cleared
dedent|''
name|'def'
name|'test_cleared'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        After a particular warning event has been returned by\n        L{TestCase.flushWarnings}, it is not returned by subsequent calls.\n        """'
newline|'\n'
name|'message'
op|'='
string|'"the message"'
newline|'\n'
name|'category'
op|'='
name|'RuntimeWarning'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'message'
op|'='
name|'message'
op|','
name|'category'
op|'='
name|'category'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertDictSubsets'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|')'
op|','
nl|'\n'
op|'['
op|'{'
string|"'category'"
op|':'
name|'category'
op|','
string|"'message'"
op|':'
name|'message'
op|'}'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unflushed
dedent|''
name|'def'
name|'test_unflushed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Any warnings emitted by a test which are not flushed are emitted to the\n        Python warning system.\n        """'
newline|'\n'
name|'result'
op|'='
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'case'
op|'='
name|'Mask'
op|'.'
name|'MockTests'
op|'('
string|"'test_unflushed'"
op|')'
newline|'\n'
name|'case'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'warningsShown'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
name|'Mask'
op|'.'
name|'MockTests'
op|'.'
name|'test_unflushed'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'warningsShown'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
string|"'some warning text'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'warningsShown'
op|'['
number|'0'
op|']'
op|'['
string|"'category'"
op|']'
op|','
name|'UserWarning'
op|')'
newline|'\n'
nl|'\n'
name|'where'
op|'='
name|'case'
op|'.'
name|'test_unflushed'
op|'.'
name|'im_func'
op|'.'
name|'func_code'
newline|'\n'
name|'filename'
op|'='
name|'where'
op|'.'
name|'co_filename'
newline|'\n'
comment|'# If someone edits MockTests.test_unflushed, the value added to'
nl|'\n'
comment|'# firstlineno might need to change.'
nl|'\n'
name|'lineno'
op|'='
name|'where'
op|'.'
name|'co_firstlineno'
op|'+'
number|'4'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'warningsShown'
op|'['
number|'0'
op|']'
op|'['
string|"'filename'"
op|']'
op|','
name|'filename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'warningsShown'
op|'['
number|'0'
op|']'
op|'['
string|"'lineno'"
op|']'
op|','
name|'lineno'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'warningsShown'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_flushed
dedent|''
name|'def'
name|'test_flushed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Any warnings emitted by a test which are flushed are not emitted to the\n        Python warning system.\n        """'
newline|'\n'
name|'result'
op|'='
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'case'
op|'='
name|'Mask'
op|'.'
name|'MockTests'
op|'('
string|"'test_flushed'"
op|')'
newline|'\n'
name|'output'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'monkey'
op|'='
name|'self'
op|'.'
name|'patch'
op|'('
name|'sys'
op|','
string|"'stdout'"
op|','
name|'output'
op|')'
newline|'\n'
name|'case'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'monkey'
op|'.'
name|'restore'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_warningsConfiguredAsErrors
dedent|''
name|'def'
name|'test_warningsConfiguredAsErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a warnings filter has been installed which turns warnings into\n        exceptions, tests have an error added to the reporter for them for each\n        unflushed warning.\n        """'
newline|'\n'
DECL|class|CustomWarning
name|'class'
name|'CustomWarning'
op|'('
name|'Warning'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'result'
op|'='
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'case'
op|'='
name|'Mask'
op|'.'
name|'MockTests'
op|'('
string|"'test_unflushed'"
op|')'
newline|'\n'
name|'case'
op|'.'
name|'category'
op|'='
name|'CustomWarning'
newline|'\n'
nl|'\n'
name|'originalWarnings'
op|'='
name|'warnings'
op|'.'
name|'filters'
op|'['
op|':'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'simplefilter'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'case'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'result'
op|'.'
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'result'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'case'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'errors'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'trap'
op|'('
name|'CustomWarning'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'filters'
op|'['
op|':'
op|']'
op|'='
name|'originalWarnings'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_flushedWarningsConfiguredAsErrors
dedent|''
dedent|''
name|'def'
name|'test_flushedWarningsConfiguredAsErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a warnings filter has been installed which turns warnings into\n        exceptions, tests which emit those warnings but flush them do not have\n        an error added to the reporter.\n        """'
newline|'\n'
DECL|class|CustomWarning
name|'class'
name|'CustomWarning'
op|'('
name|'Warning'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'result'
op|'='
name|'TestResult'
op|'('
op|')'
newline|'\n'
name|'case'
op|'='
name|'Mask'
op|'.'
name|'MockTests'
op|'('
string|"'test_flushed'"
op|')'
newline|'\n'
name|'case'
op|'.'
name|'category'
op|'='
name|'CustomWarning'
newline|'\n'
nl|'\n'
name|'originalWarnings'
op|'='
name|'warnings'
op|'.'
name|'filters'
op|'['
op|':'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'simplefilter'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'case'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'errors'
op|','
op|'['
op|']'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'filters'
op|'['
op|':'
op|']'
op|'='
name|'originalWarnings'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleFlushes
dedent|''
dedent|''
name|'def'
name|'test_multipleFlushes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Any warnings emitted after a call to L{TestCase.flushWarnings} can be\n        flushed by another call to L{TestCase.flushWarnings}.\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"first message"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"second message"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_filterOnOffendingFunction
dedent|''
name|'def'
name|'test_filterOnOffendingFunction'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The list returned by L{TestCase.flushWarnings} includes only those\n        warnings which refer to the source of the function passed as the value\n        for C{offendingFunction}, if a value is passed for that parameter.\n        """'
newline|'\n'
name|'firstMessage'
op|'='
string|'"first warning text"'
newline|'\n'
name|'firstCategory'
op|'='
name|'UserWarning'
newline|'\n'
DECL|function|one
name|'def'
name|'one'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'firstMessage'
op|','
name|'firstCategory'
op|','
name|'stacklevel'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'secondMessage'
op|'='
string|'"some text"'
newline|'\n'
name|'secondCategory'
op|'='
name|'RuntimeWarning'
newline|'\n'
DECL|function|two
name|'def'
name|'two'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'secondMessage'
op|','
name|'secondCategory'
op|','
name|'stacklevel'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'one'
op|'('
op|')'
newline|'\n'
name|'two'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertDictSubsets'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'flushWarnings'
op|'('
name|'offendingFunctions'
op|'='
op|'['
name|'one'
op|']'
op|')'
op|','
nl|'\n'
op|'['
op|'{'
string|"'category'"
op|':'
name|'firstCategory'
op|','
string|"'message'"
op|':'
name|'firstMessage'
op|'}'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertDictSubsets'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'flushWarnings'
op|'('
name|'offendingFunctions'
op|'='
op|'['
name|'two'
op|']'
op|')'
op|','
nl|'\n'
op|'['
op|'{'
string|"'category'"
op|':'
name|'secondCategory'
op|','
string|"'message'"
op|':'
name|'secondMessage'
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_functionBoundaries
dedent|''
name|'def'
name|'test_functionBoundaries'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that warnings emitted at the very edges of a function are still\n        determined to be emitted from that function.\n        """'
newline|'\n'
DECL|function|warner
name|'def'
name|'warner'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"first line warning"'
op|')'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"internal line warning"'
op|')'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"last line warning"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'warner'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'len'
op|'('
name|'self'
op|'.'
name|'flushWarnings'
op|'('
name|'offendingFunctions'
op|'='
op|'['
name|'warner'
op|']'
op|')'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidFilter
dedent|''
name|'def'
name|'test_invalidFilter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an object which is neither a function nor a method is included in\n        the C{offendingFunctions} list, L{TestCase.flushWarnings} raises\n        L{ValueError}.  Such a call flushes no warnings.\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"oh no"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'flushWarnings'
op|','
op|'['
name|'None'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_missingSource
dedent|''
name|'def'
name|'test_missingSource'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Warnings emitted by a function the source code of which is not\n        available can still be flushed.\n        """'
newline|'\n'
name|'package'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
op|'.'
name|'child'
op|'('
string|"'twisted_private_helper'"
op|')'
newline|'\n'
name|'package'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'package'
op|'.'
name|'child'
op|'('
string|"'__init__.py'"
op|')'
op|'.'
name|'setContent'
op|'('
string|"''"
op|')'
newline|'\n'
name|'package'
op|'.'
name|'child'
op|'('
string|"'missingsourcefile.py'"
op|')'
op|'.'
name|'setContent'
op|'('
string|'\'\'\'\nimport warnings\ndef foo():\n    warnings.warn("oh no")\n\'\'\''
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'path'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'package'
op|'.'
name|'parent'
op|'('
op|')'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'sys'
op|'.'
name|'path'
op|'.'
name|'remove'
op|','
name|'package'
op|'.'
name|'parent'
op|'('
op|')'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'from'
name|'twisted_private_helper'
name|'import'
name|'missingsourcefile'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'pop'
op|','
string|"'twisted_private_helper'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'pop'
op|','
name|'missingsourcefile'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'package'
op|'.'
name|'child'
op|'('
string|"'missingsourcefile.py'"
op|')'
op|'.'
name|'remove'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'missingsourcefile'
op|'.'
name|'foo'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
name|'missingsourcefile'
op|'.'
name|'foo'
op|']'
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_renamedSource
dedent|''
name|'def'
name|'test_renamedSource'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Warnings emitted by a function defined in a file which has been renamed\n        since it was initially compiled can still be flushed.\n\n        This is testing the code which specifically supports working around the\n        unfortunate behavior of CPython to write a .py source file name into\n        the .pyc files it generates and then trust that it is correct in\n        various places.  If source files are renamed, .pyc files may not be\n        regenerated, but they will contain incorrect filenames.\n        """'
newline|'\n'
name|'package'
op|'='
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
op|'.'
name|'child'
op|'('
string|"'twisted_private_helper'"
op|')'
newline|'\n'
name|'package'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'package'
op|'.'
name|'child'
op|'('
string|"'__init__.py'"
op|')'
op|'.'
name|'setContent'
op|'('
string|"''"
op|')'
newline|'\n'
name|'package'
op|'.'
name|'child'
op|'('
string|"'module.py'"
op|')'
op|'.'
name|'setContent'
op|'('
string|'\'\'\'\nimport warnings\ndef foo():\n    warnings.warn("oh no")\n\'\'\''
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'path'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'package'
op|'.'
name|'parent'
op|'('
op|')'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'sys'
op|'.'
name|'path'
op|'.'
name|'remove'
op|','
name|'package'
op|'.'
name|'parent'
op|'('
op|')'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
comment|'# Import it to cause pycs to be generated'
nl|'\n'
name|'from'
name|'twisted_private_helper'
name|'import'
name|'module'
newline|'\n'
nl|'\n'
comment|"# Clean up the state resulting from that import; we're not going to use"
nl|'\n'
comment|'# this module, so it should go away.'
nl|'\n'
name|'del'
name|'sys'
op|'.'
name|'modules'
op|'['
string|"'twisted_private_helper'"
op|']'
newline|'\n'
name|'del'
name|'sys'
op|'.'
name|'modules'
op|'['
name|'module'
op|'.'
name|'__name__'
op|']'
newline|'\n'
nl|'\n'
comment|'# Rename the source directory'
nl|'\n'
name|'package'
op|'.'
name|'moveTo'
op|'('
name|'package'
op|'.'
name|'sibling'
op|'('
string|"'twisted_renamed_helper'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Import the newly renamed version'
nl|'\n'
name|'from'
name|'twisted_renamed_helper'
name|'import'
name|'module'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'pop'
op|','
string|"'twisted_renamed_helper'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'pop'
op|','
name|'module'
op|'.'
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
comment|'# Generate the warning'
nl|'\n'
name|'module'
op|'.'
name|'foo'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Flush it'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
name|'module'
op|'.'
name|'foo'
op|']'
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeWarning
dedent|''
dedent|''
name|'class'
name|'FakeWarning'
op|'('
name|'Warning'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CollectWarningsTests
dedent|''
name|'class'
name|'CollectWarningsTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{_collectWarnings}.\n    """'
newline|'\n'
DECL|member|test_callsObserver
name|'def'
name|'test_callsObserver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_collectWarnings} calls the observer with each emitted warning.\n        """'
newline|'\n'
name|'firstMessage'
op|'='
string|'"dummy calls observer warning"'
newline|'\n'
name|'secondMessage'
op|'='
name|'firstMessage'
op|'['
op|':'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'events'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|f
name|'def'
name|'f'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'events'
op|'.'
name|'append'
op|'('
string|"'call'"
op|')'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'firstMessage'
op|')'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'secondMessage'
op|')'
newline|'\n'
name|'events'
op|'.'
name|'append'
op|'('
string|"'returning'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_collectWarnings'
op|'('
name|'events'
op|'.'
name|'append'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'events'
op|'['
number|'0'
op|']'
op|','
string|"'call'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'events'
op|'['
number|'1'
op|']'
op|'.'
name|'message'
op|','
name|'firstMessage'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'events'
op|'['
number|'2'
op|']'
op|'.'
name|'message'
op|','
name|'secondMessage'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'events'
op|'['
number|'3'
op|']'
op|','
string|"'returning'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'events'
op|')'
op|','
number|'4'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_suppresses
dedent|''
name|'def'
name|'test_suppresses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Any warnings emitted by a call to a function passed to\n        L{_collectWarnings} are not actually emitted to the warning system.\n        """'
newline|'\n'
name|'output'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'sys'
op|','
string|"'stdout'"
op|','
name|'output'
op|')'
newline|'\n'
name|'_collectWarnings'
op|'('
name|'lambda'
name|'x'
op|':'
name|'None'
op|','
name|'warnings'
op|'.'
name|'warn'
op|','
string|'"text"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callsFunction
dedent|''
name|'def'
name|'test_callsFunction'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_collectWarnings} returns the result of calling the callable passed to\n        it with the parameters given.\n        """'
newline|'\n'
name|'arguments'
op|'='
op|'['
op|']'
newline|'\n'
name|'value'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|f
name|'def'
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'arguments'
op|'.'
name|'append'
op|'('
op|'('
name|'args'
op|','
name|'kwargs'
op|')'
op|')'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'result'
op|'='
name|'_collectWarnings'
op|'('
name|'lambda'
name|'x'
op|':'
name|'None'
op|','
name|'f'
op|','
number|'1'
op|','
string|"'a'"
op|','
name|'b'
op|'='
number|'2'
op|','
name|'c'
op|'='
string|"'d'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'arguments'
op|','
op|'['
op|'('
op|'('
number|'1'
op|','
string|"'a'"
op|')'
op|','
op|'{'
string|"'b'"
op|':'
number|'2'
op|','
string|"'c'"
op|':'
string|"'d'"
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'result'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_duplicateWarningCollected
dedent|''
name|'def'
name|'test_duplicateWarningCollected'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Subsequent emissions of a warning from a particular source site can be\n        collected by L{_collectWarnings}.  In particular, the per-module\n        emitted-warning cache should be bypassed (I{__warningregistry__}).\n        """'
newline|'\n'
comment|"# Make sure the worst case is tested: if __warningregistry__ isn't in a"
nl|'\n'
comment|"# module's globals, then the warning system will add it and start using"
nl|'\n'
comment|'# it to avoid emitting duplicate warnings.  Delete __warningregistry__'
nl|'\n'
comment|'# to ensure that even modules which are first imported as a test is'
nl|'\n'
comment|'# running still interact properly with the warning system.'
nl|'\n'
name|'global'
name|'__warningregistry__'
newline|'\n'
name|'del'
name|'__warningregistry__'
newline|'\n'
nl|'\n'
DECL|function|f
name|'def'
name|'f'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"foo"'
op|')'
newline|'\n'
dedent|''
name|'warnings'
op|'.'
name|'simplefilter'
op|'('
string|"'default'"
op|')'
newline|'\n'
name|'f'
op|'('
op|')'
newline|'\n'
name|'events'
op|'='
op|'['
op|']'
newline|'\n'
name|'_collectWarnings'
op|'('
name|'events'
op|'.'
name|'append'
op|','
name|'f'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'events'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'events'
op|'['
number|'0'
op|']'
op|'.'
name|'message'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_immutableObject
dedent|''
name|'def'
name|'test_immutableObject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_collectWarnings}\'s behavior is not altered by the presence of an\n        object which cannot have attributes set on it as a value in\n        C{sys.modules}.\n        """'
newline|'\n'
name|'key'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'modules'
op|'['
name|'key'
op|']'
op|'='
name|'key'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'pop'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_duplicateWarningCollected'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

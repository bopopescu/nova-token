begin_unit
comment|'# -*- test-case-name: twisted.trial.test.test_runner -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nA miscellany of code used to run Trial tests.\n\nMaintainer: Jonathan Lange\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'pdb'
newline|'\n'
name|'import'
name|'os'
op|','
name|'types'
op|','
name|'warnings'
op|','
name|'sys'
op|','
name|'inspect'
op|','
name|'imp'
newline|'\n'
name|'import'
name|'random'
op|','
name|'doctest'
op|','
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'reflect'
op|','
name|'log'
op|','
name|'failure'
op|','
name|'modules'
op|','
name|'filepath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'dsu'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'lockfile'
name|'import'
name|'FilesystemLock'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'util'
op|','
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'itrial'
name|'import'
name|'ITestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'reporter'
name|'import'
name|'UncleanWarningsReporterWrapper'
newline|'\n'
nl|'\n'
comment|'# These are imported so that they remain in the public API for t.trial.runner'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'suiteVisit'
op|','
name|'TestSuite'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
DECL|variable|pyunit
name|'pyunit'
op|'='
name|'__import__'
op|'('
string|"'unittest'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_WorkingDirectoryBusy
name|'class'
name|'_WorkingDirectoryBusy'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A working directory was specified to the runner, but another test run is\n    currently using that directory.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_NoTrialMarker
dedent|''
name|'class'
name|'_NoTrialMarker'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    No trial marker file could be found.\n\n    Raised when trial attempts to remove a trial temporary working directory\n    that does not contain a marker file.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|isPackage
dedent|''
name|'def'
name|'isPackage'
op|'('
name|'module'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Given an object return True if the object looks like a package"""'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'module'
op|','
name|'types'
op|'.'
name|'ModuleType'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'basename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'module'
op|'.'
name|'__file__'
op|')'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'basename'
op|'=='
string|"'__init__'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|isPackageDirectory
dedent|''
name|'def'
name|'isPackageDirectory'
op|'('
name|'dirname'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Is the directory at path \'dirname\' a Python package directory?\n    Returns the name of the __init__ file (it may have a weird extension)\n    if dirname is a package directory.  Otherwise, returns False"""'
newline|'\n'
name|'for'
name|'ext'
name|'in'
name|'zip'
op|'('
op|'*'
name|'imp'
op|'.'
name|'get_suffixes'
op|'('
op|')'
op|')'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'initFile'
op|'='
string|"'__init__'"
op|'+'
name|'ext'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'dirname'
op|','
name|'initFile'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'initFile'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|samefile
dedent|''
name|'def'
name|'samefile'
op|'('
name|'filename1'
op|','
name|'filename2'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A hacky implementation of C{os.path.samefile}. Used by L{filenameToModule}\n    when the platform doesn\'t provide C{os.path.samefile}. Do not use this.\n    """'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'filename1'
op|')'
op|'=='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'filename2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|filenameToModule
dedent|''
name|'def'
name|'filenameToModule'
op|'('
name|'fn'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Given a filename, do whatever possible to return a module object matching\n    that file.\n\n    If the file in question is a module in Python path, properly import and\n    return that module. Otherwise, load the source manually.\n\n    @param fn: A filename.\n    @return: A module object.\n    @raise ValueError: If C{fn} does not exist.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'fn'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|'"%r doesn\'t exist"'
op|'%'
op|'('
name|'fn'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'ret'
op|'='
name|'reflect'
op|'.'
name|'namedAny'
op|'('
name|'reflect'
op|'.'
name|'filenameToModuleName'
op|'('
name|'fn'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'ValueError'
op|','
name|'AttributeError'
op|')'
op|':'
newline|'\n'
comment|"# Couldn't find module.  The file 'fn' is not in PYTHONPATH"
nl|'\n'
indent|'        '
name|'return'
name|'_importFromFile'
op|'('
name|'fn'
op|')'
newline|'\n'
comment|'# ensure that the loaded module matches the file'
nl|'\n'
dedent|''
name|'retFile'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'ret'
op|'.'
name|'__file__'
op|')'
op|'['
number|'0'
op|']'
op|'+'
string|"'.py'"
newline|'\n'
comment|'# not all platforms (e.g. win32) have os.path.samefile'
nl|'\n'
name|'same'
op|'='
name|'getattr'
op|'('
name|'os'
op|'.'
name|'path'
op|','
string|"'samefile'"
op|','
name|'samefile'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
name|'fn'
op|')'
name|'and'
name|'not'
name|'same'
op|'('
name|'fn'
op|','
name|'retFile'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'sys'
op|'.'
name|'modules'
op|'['
name|'ret'
op|'.'
name|'__name__'
op|']'
newline|'\n'
name|'ret'
op|'='
name|'_importFromFile'
op|'('
name|'fn'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_importFromFile
dedent|''
name|'def'
name|'_importFromFile'
op|'('
name|'fn'
op|','
name|'moduleName'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'fn'
op|'='
name|'_resolveDirectory'
op|'('
name|'fn'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'moduleName'
op|':'
newline|'\n'
indent|'        '
name|'moduleName'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'fn'
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'moduleName'
name|'in'
name|'sys'
op|'.'
name|'modules'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'sys'
op|'.'
name|'modules'
op|'['
name|'moduleName'
op|']'
newline|'\n'
dedent|''
name|'fd'
op|'='
name|'open'
op|'('
name|'fn'
op|','
string|"'r'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'module'
op|'='
name|'imp'
op|'.'
name|'load_source'
op|'('
name|'moduleName'
op|','
name|'fn'
op|','
name|'fd'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'fd'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'module'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_resolveDirectory
dedent|''
name|'def'
name|'_resolveDirectory'
op|'('
name|'fn'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'fn'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'initFile'
op|'='
name|'isPackageDirectory'
op|'('
name|'fn'
op|')'
newline|'\n'
name|'if'
name|'initFile'
op|':'
newline|'\n'
indent|'            '
name|'fn'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'fn'
op|','
name|'initFile'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|"'%r is not a package directory'"
op|'%'
op|'('
name|'fn'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'fn'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DestructiveTestSuite
dedent|''
name|'class'
name|'DestructiveTestSuite'
op|'('
name|'TestSuite'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A test suite which remove the tests once run, to minimize memory usage.\n    """'
newline|'\n'
nl|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Almost the same as L{TestSuite.run}, but with C{self._tests} being\n        empty at the end.\n        """'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'_tests'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'result'
op|'.'
name|'shouldStop'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'test'
op|'='
name|'self'
op|'.'
name|'_tests'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'test'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'# When an error occurs outside of any test, the user will see this string'
nl|'\n'
comment|"# in place of a test's name."
nl|'\n'
DECL|variable|NOT_IN_TEST
dedent|''
dedent|''
name|'NOT_IN_TEST'
op|'='
string|'"<not in test>"'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoggedSuite
name|'class'
name|'LoggedSuite'
op|'('
name|'TestSuite'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Any errors logged in this suite will be reported to the L{TestResult}\n    object.\n    """'
newline|'\n'
nl|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run the suite, storing all errors in C{result}. If an error is logged\n        while no tests are running, then it will be added as an error to\n        C{result}.\n\n        @param result: A L{TestResult} object.\n        """'
newline|'\n'
name|'observer'
op|'='
name|'unittest'
op|'.'
name|'_logObserver'
newline|'\n'
name|'observer'
op|'.'
name|'_add'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'LoggedSuite'
op|','
name|'self'
op|')'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
name|'observer'
op|'.'
name|'_remove'
op|'('
op|')'
newline|'\n'
name|'for'
name|'error'
name|'in'
name|'observer'
op|'.'
name|'getErrors'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'addError'
op|'('
name|'TestHolder'
op|'('
name|'NOT_IN_TEST'
op|')'
op|','
name|'error'
op|')'
newline|'\n'
dedent|''
name|'observer'
op|'.'
name|'flushErrors'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DocTestSuite
dedent|''
dedent|''
name|'class'
name|'DocTestSuite'
op|'('
name|'TestSuite'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DEPRECATED in Twisted 8.0.\n\n    Behaves like doctest.DocTestSuite, but decorates individual TestCases so\n    they support visit and so that id() behaviour is meaningful and consistent\n    between Python versions.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'testModule'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"DocTestSuite is deprecated in Twisted 8.0."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'TestSuite'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'suite'
op|'='
name|'doctest'
op|'.'
name|'DocTestSuite'
op|'('
name|'testModule'
op|')'
newline|'\n'
name|'for'
name|'test'
name|'in'
name|'suite'
op|'.'
name|'_tests'
op|':'
comment|'#yay encapsulation'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'addTest'
op|'('
name|'ITestCase'
op|'('
name|'test'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PyUnitTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'PyUnitTestCase'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DEPRECATED in Twisted 8.0.\n\n    This class decorates the pyunit.TestCase class, mainly to work around the\n    differences between unittest in Python 2.3, 2.4, and 2.5. These\n    differences are::\n\n        - The way doctest unittests describe themselves\n        - Where the implementation of TestCase.run is (used to be in __call__)\n        - Where the test method name is kept (mangled-private or non-mangled\n          private variable)\n\n    It also implements visit, which we like.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Deprecated in Twisted 8.0."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test'
op|'='
name|'test'
newline|'\n'
name|'test'
op|'.'
name|'id'
op|'='
name|'self'
op|'.'
name|'id'
newline|'\n'
nl|'\n'
DECL|member|id
dedent|''
name|'def'
name|'id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cls'
op|'='
name|'self'
op|'.'
name|'_test'
op|'.'
name|'__class__'
newline|'\n'
name|'tmn'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_test'
op|','
string|"'_TestCase__testMethodName'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'tmn'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|"# python2.5's 'unittest' module is more sensible; but different."
nl|'\n'
indent|'            '
name|'tmn'
op|'='
name|'self'
op|'.'
name|'_test'
op|'.'
name|'_testMethodName'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'cls'
op|'.'
name|'__module__'
op|'+'
string|"'.'"
op|'+'
name|'cls'
op|'.'
name|'__name__'
op|'+'
string|"'.'"
op|'+'
nl|'\n'
name|'tmn'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'PyUnitTestCase<%r>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'id'
op|'('
op|')'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'results'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_test'
op|'('
name|'results'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|visit
dedent|''
name|'def'
name|'visit'
op|'('
name|'self'
op|','
name|'visitor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call the given visitor with the original, standard library, test case\n        that C{self} wraps. See L{unittest.TestCase.visit}.\n\n        Deprecated in Twisted 8.0.\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Test visitors deprecated in Twisted 8.0"'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'visitor'
op|'('
name|'self'
op|'.'
name|'_test'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_test'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DocTestCase
dedent|''
dedent|''
name|'class'
name|'DocTestCase'
op|'('
name|'PyUnitTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    DEPRECATED in Twisted 8.0.\n    """'
newline|'\n'
nl|'\n'
DECL|member|id
name|'def'
name|'id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        In Python 2.4, doctests have correct id() behaviour. In Python 2.3,\n        id() returns \'runit\'.\n\n        Here we override id() so that at least it will always contain the\n        fully qualified Python name of the doctest.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_test'
op|'.'
name|'shortDescription'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TrialSuite
dedent|''
dedent|''
name|'class'
name|'TrialSuite'
op|'('
name|'TestSuite'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Suite to wrap around every single test in a C{trial} run. Used internally\n    by Trial to set up things necessary for Trial tests to work, regardless of\n    what context they are run in.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'tests'
op|'='
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'suite'
op|'='
name|'LoggedSuite'
op|'('
name|'tests'
op|')'
newline|'\n'
name|'super'
op|'('
name|'TrialSuite'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'['
name|'suite'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_bail
dedent|''
name|'def'
name|'_bail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'addSystemEventTrigger'
op|'('
string|"'after'"
op|','
string|"'shutdown'"
op|','
nl|'\n'
name|'lambda'
op|':'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'fireSystemEvent'
op|'('
string|"'shutdown'"
op|')'
comment|"# radix's suggestion"
newline|'\n'
comment|'# As long as TestCase does crap stuff with the reactor we need to'
nl|'\n'
comment|'# manually shutdown the reactor here, and that requires util.wait'
nl|'\n'
comment|'# :('
nl|'\n'
comment|'# so that the shutdown event completes'
nl|'\n'
name|'unittest'
op|'.'
name|'TestCase'
op|'('
string|"'mktemp'"
op|')'
op|'.'
name|'_wait'
op|'('
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'TestSuite'
op|'.'
name|'run'
op|'('
name|'self'
op|','
name|'result'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_bail'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|name
dedent|''
dedent|''
dedent|''
name|'def'
name|'name'
op|'('
name|'thing'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @param thing: an object from modules (instance of PythonModule,\n    PythonAttribute), a TestCase subclass, or an instance of a TestCase.\n    """'
newline|'\n'
name|'if'
name|'isTestCase'
op|'('
name|'thing'
op|')'
op|':'
newline|'\n'
comment|'# TestCase subclass'
nl|'\n'
indent|'        '
name|'theName'
op|'='
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'thing'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# thing from trial, or thing from modules.'
nl|'\n'
comment|"# this monstrosity exists so that modules' objects do not have to"
nl|'\n'
comment|'# implement id(). -jml'
nl|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'theName'
op|'='
name|'thing'
op|'.'
name|'id'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'theName'
op|'='
name|'thing'
op|'.'
name|'name'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'theName'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|isTestCase
dedent|''
name|'def'
name|'isTestCase'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns C{True} if C{obj} is a class that contains test cases, C{False}\n    otherwise. Used to find all the tests in a module.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'issubclass'
op|'('
name|'obj'
op|','
name|'pyunit'
op|'.'
name|'TestCase'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestHolder
dedent|''
dedent|''
name|'class'
name|'TestHolder'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Placeholder for a L{TestCase} inside a reporter. As far as a L{TestResult}\n    is concerned, this looks exactly like a unit test.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'ITestCase'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'description'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param description: A string to be displayed L{TestResult}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'description'
op|'='
name|'description'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|id
dedent|''
name|'def'
name|'id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'description'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|shortDescription
dedent|''
name|'def'
name|'shortDescription'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'description'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ErrorHolder
dedent|''
dedent|''
name|'class'
name|'ErrorHolder'
op|'('
name|'TestHolder'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Used to insert arbitrary errors into a test suite run. Provides enough\n    methods to look like a C{TestCase}, however, when it is run, it simply adds\n    an error to the C{TestResult}. The most common use-case is for when a\n    module fails to import.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'description'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param description: A string used by C{TestResult}s to identify this\n        error. Generally, this is the name of a module that failed to import.\n\n        @param error: The error to be added to the result. Can be an exc_info\n        tuple or a L{twisted.python.failure.Failure}.\n        """'
newline|'\n'
name|'super'
op|'('
name|'ErrorHolder'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'description'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'error'
op|'='
name|'error'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"<ErrorHolder description=%r error=%r>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'description'
op|','
nl|'\n'
name|'self'
op|'.'
name|'error'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'error'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|countTestCases
dedent|''
name|'def'
name|'countTestCases'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|visit
dedent|''
name|'def'
name|'visit'
op|'('
name|'self'
op|','
name|'visitor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{unittest.TestCase.visit}.\n        """'
newline|'\n'
name|'visitor'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestLoader
dedent|''
dedent|''
name|'class'
name|'TestLoader'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I find tests inside function, modules, files -- whatever -- then return\n    them wrapped inside a Test (either a L{TestSuite} or a L{TestCase}).\n\n    @ivar methodPrefix: A string prefix. C{TestLoader} will assume that all the\n    methods in a class that begin with C{methodPrefix} are test cases.\n\n    @ivar modulePrefix: A string prefix. Every module in a package that begins\n    with C{modulePrefix} is considered a module full of tests.\n\n    @ivar forceGarbageCollection: A flag applied to each C{TestCase} loaded.\n    See L{unittest.TestCase} for more information.\n\n    @ivar sorter: A key function used to sort C{TestCase}s, test classes,\n    modules and packages.\n\n    @ivar suiteFactory: A callable which is passed a list of tests (which\n    themselves may be suites of tests). Must return a test suite.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|methodPrefix
name|'methodPrefix'
op|'='
string|"'test'"
newline|'\n'
DECL|variable|modulePrefix
name|'modulePrefix'
op|'='
string|"'test_'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'suiteFactory'
op|'='
name|'TestSuite'
newline|'\n'
name|'self'
op|'.'
name|'sorter'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'_importErrors'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|sort
dedent|''
name|'def'
name|'sort'
op|'('
name|'self'
op|','
name|'xs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sort the given things using L{sorter}.\n\n        @param xs: A list of test cases, class or modules.\n        """'
newline|'\n'
name|'return'
name|'dsu'
op|'('
name|'xs'
op|','
name|'self'
op|'.'
name|'sorter'
op|')'
newline|'\n'
nl|'\n'
DECL|member|findTestClasses
dedent|''
name|'def'
name|'findTestClasses'
op|'('
name|'self'
op|','
name|'module'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given a module, return all Trial test classes"""'
newline|'\n'
name|'classes'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'name'
op|','
name|'val'
name|'in'
name|'inspect'
op|'.'
name|'getmembers'
op|'('
name|'module'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isTestCase'
op|'('
name|'val'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'classes'
op|'.'
name|'append'
op|'('
name|'val'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'sort'
op|'('
name|'classes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|findByName
dedent|''
name|'def'
name|'findByName'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a Python object given a string describing it.\n\n        @param name: a string which may be either a filename or a\n        fully-qualified Python name.\n\n        @return: If C{name} is a filename, return the module. If C{name} is a\n        fully-qualified Python name, return the object it refers to.\n        """'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'filenameToModule'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'reflect'
op|'.'
name|'namedAny'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loadModule
dedent|''
name|'def'
name|'loadModule'
op|'('
name|'self'
op|','
name|'module'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a test suite with all the tests from a module.\n\n        Included are TestCase subclasses and doctests listed in the module\'s\n        __doctests__ module. If that\'s not good for you, put a function named\n        either C{testSuite} or C{test_suite} in your module that returns a\n        TestSuite, and I\'ll use the results of that instead.\n\n        If C{testSuite} and C{test_suite} are both present, then I\'ll use\n        C{testSuite}.\n        """'
newline|'\n'
comment|'## XXX - should I add an optional parameter to disable the check for'
nl|'\n'
comment|'## a custom suite.'
nl|'\n'
comment|'## OR, should I add another method'
nl|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'module'
op|','
name|'types'
op|'.'
name|'ModuleType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|'"%r is not a module"'
op|'%'
op|'('
name|'module'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'module'
op|','
string|"'testSuite'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'module'
op|'.'
name|'testSuite'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'hasattr'
op|'('
name|'module'
op|','
string|"'test_suite'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'module'
op|'.'
name|'test_suite'
op|'('
op|')'
newline|'\n'
dedent|''
name|'suite'
op|'='
name|'self'
op|'.'
name|'suiteFactory'
op|'('
op|')'
newline|'\n'
name|'for'
name|'testClass'
name|'in'
name|'self'
op|'.'
name|'findTestClasses'
op|'('
name|'module'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'suite'
op|'.'
name|'addTest'
op|'('
name|'self'
op|'.'
name|'loadClass'
op|'('
name|'testClass'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'module'
op|','
string|"'__doctests__'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'suite'
newline|'\n'
dedent|''
name|'docSuite'
op|'='
name|'self'
op|'.'
name|'suiteFactory'
op|'('
op|')'
newline|'\n'
name|'for'
name|'doctest'
name|'in'
name|'module'
op|'.'
name|'__doctests__'
op|':'
newline|'\n'
indent|'            '
name|'docSuite'
op|'.'
name|'addTest'
op|'('
name|'self'
op|'.'
name|'loadDoctests'
op|'('
name|'doctest'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'suiteFactory'
op|'('
op|'['
name|'suite'
op|','
name|'docSuite'
op|']'
op|')'
newline|'\n'
DECL|variable|loadTestsFromModule
dedent|''
name|'loadTestsFromModule'
op|'='
name|'loadModule'
newline|'\n'
nl|'\n'
DECL|member|loadClass
name|'def'
name|'loadClass'
op|'('
name|'self'
op|','
name|'klass'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a class which contains test cases, return a sorted list of\n        C{TestCase} instances.\n        """'
newline|'\n'
name|'if'
name|'not'
op|'('
name|'isinstance'
op|'('
name|'klass'
op|','
name|'type'
op|')'
name|'or'
name|'isinstance'
op|'('
name|'klass'
op|','
name|'types'
op|'.'
name|'ClassType'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|'"%r is not a class"'
op|'%'
op|'('
name|'klass'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isTestCase'
op|'('
name|'klass'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"%r is not a test case"'
op|'%'
op|'('
name|'klass'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'names'
op|'='
name|'self'
op|'.'
name|'getTestCaseNames'
op|'('
name|'klass'
op|')'
newline|'\n'
name|'tests'
op|'='
name|'self'
op|'.'
name|'sort'
op|'('
op|'['
name|'self'
op|'.'
name|'_makeCase'
op|'('
name|'klass'
op|','
name|'self'
op|'.'
name|'methodPrefix'
op|'+'
name|'name'
op|')'
nl|'\n'
name|'for'
name|'name'
name|'in'
name|'names'
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'suiteFactory'
op|'('
name|'tests'
op|')'
newline|'\n'
DECL|variable|loadTestsFromTestCase
dedent|''
name|'loadTestsFromTestCase'
op|'='
name|'loadClass'
newline|'\n'
nl|'\n'
DECL|member|getTestCaseNames
name|'def'
name|'getTestCaseNames'
op|'('
name|'self'
op|','
name|'klass'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a class that contains C{TestCase}s, return a list of names of\n        methods that probably contain tests.\n        """'
newline|'\n'
name|'return'
name|'reflect'
op|'.'
name|'prefixedMethodNames'
op|'('
name|'klass'
op|','
name|'self'
op|'.'
name|'methodPrefix'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loadMethod
dedent|''
name|'def'
name|'loadMethod'
op|'('
name|'self'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a method of a C{TestCase} that represents a test, return a\n        C{TestCase} instance for that test.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'method'
op|','
name|'types'
op|'.'
name|'MethodType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|'"%r not a method"'
op|'%'
op|'('
name|'method'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_makeCase'
op|'('
name|'method'
op|'.'
name|'im_class'
op|','
name|'method'
op|'.'
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_makeCase
dedent|''
name|'def'
name|'_makeCase'
op|'('
name|'self'
op|','
name|'klass'
op|','
name|'methodName'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'klass'
op|'('
name|'methodName'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loadPackage
dedent|''
name|'def'
name|'loadPackage'
op|'('
name|'self'
op|','
name|'package'
op|','
name|'recurse'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Load tests from a module object representing a package, and return a\n        TestSuite containing those tests.\n\n        Tests are only loaded from modules whose name begins with \'test_\'\n        (or whatever C{modulePrefix} is set to).\n\n        @param package: a types.ModuleType object (or reasonable facsimilie\n        obtained by importing) which may contain tests.\n\n        @param recurse: A boolean.  If True, inspect modules within packages\n        within the given package (and so on), otherwise, only inspect modules\n        in the package itself.\n\n        @raise: TypeError if \'package\' is not a package.\n\n        @return: a TestSuite created with my suiteFactory, containing all the\n        tests.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'isPackage'
op|'('
name|'package'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|'"%r is not a package"'
op|'%'
op|'('
name|'package'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'pkgobj'
op|'='
name|'modules'
op|'.'
name|'getModule'
op|'('
name|'package'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'if'
name|'recurse'
op|':'
newline|'\n'
indent|'            '
name|'discovery'
op|'='
name|'pkgobj'
op|'.'
name|'walkModules'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'discovery'
op|'='
name|'pkgobj'
op|'.'
name|'iterModules'
op|'('
op|')'
newline|'\n'
dedent|''
name|'discovered'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'disco'
name|'in'
name|'discovery'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'disco'
op|'.'
name|'name'
op|'.'
name|'split'
op|'('
string|'"."'
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'startswith'
op|'('
name|'self'
op|'.'
name|'modulePrefix'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'discovered'
op|'.'
name|'append'
op|'('
name|'disco'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'suite'
op|'='
name|'self'
op|'.'
name|'suiteFactory'
op|'('
op|')'
newline|'\n'
name|'for'
name|'modinfo'
name|'in'
name|'self'
op|'.'
name|'sort'
op|'('
name|'discovered'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'module'
op|'='
name|'modinfo'
op|'.'
name|'load'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'thingToAdd'
op|'='
name|'ErrorHolder'
op|'('
name|'modinfo'
op|'.'
name|'name'
op|','
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'thingToAdd'
op|'='
name|'self'
op|'.'
name|'loadModule'
op|'('
name|'module'
op|')'
newline|'\n'
dedent|''
name|'suite'
op|'.'
name|'addTest'
op|'('
name|'thingToAdd'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'suite'
newline|'\n'
nl|'\n'
DECL|member|loadDoctests
dedent|''
name|'def'
name|'loadDoctests'
op|'('
name|'self'
op|','
name|'module'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a suite of tests for all the doctests defined in C{module}.\n\n        @param module: A module object or a module name.\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'module'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'module'
op|'='
name|'reflect'
op|'.'
name|'namedAny'
op|'('
name|'module'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'ErrorHolder'
op|'('
name|'module'
op|','
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'inspect'
op|'.'
name|'ismodule'
op|'('
name|'module'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"trial only supports doctesting modules"'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'extraArgs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'sys'
op|'.'
name|'version_info'
op|'>'
op|'('
number|'2'
op|','
number|'4'
op|')'
op|':'
newline|'\n'
comment|'# Work around Python issue2604: DocTestCase.tearDown clobbers globs'
nl|'\n'
DECL|function|saveGlobals
indent|'            '
name|'def'
name|'saveGlobals'
op|'('
name|'test'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""\n                Save C{test.globs} and replace it with a copy so that if\n                necessary, the original will be available for the next test\n                run.\n                """'
newline|'\n'
name|'test'
op|'.'
name|'_savedGlobals'
op|'='
name|'getattr'
op|'('
name|'test'
op|','
string|"'_savedGlobals'"
op|','
name|'test'
op|'.'
name|'globs'
op|')'
newline|'\n'
name|'test'
op|'.'
name|'globs'
op|'='
name|'test'
op|'.'
name|'_savedGlobals'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'extraArgs'
op|'['
string|"'setUp'"
op|']'
op|'='
name|'saveGlobals'
newline|'\n'
dedent|''
name|'return'
name|'doctest'
op|'.'
name|'DocTestSuite'
op|'('
name|'module'
op|','
op|'**'
name|'extraArgs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loadAnything
dedent|''
name|'def'
name|'loadAnything'
op|'('
name|'self'
op|','
name|'thing'
op|','
name|'recurse'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a Python object, return whatever tests that are in it. Whatever\n        \'in\' might mean.\n\n        @param thing: A Python object. A module, method, class or package.\n        @param recurse: Whether or not to look in subpackages of packages.\n        Defaults to False.\n\n        @return: A C{TestCase} or C{TestSuite}.\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'thing'
op|','
name|'types'
op|'.'
name|'ModuleType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isPackage'
op|'('
name|'thing'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'loadPackage'
op|'('
name|'thing'
op|','
name|'recurse'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'loadModule'
op|'('
name|'thing'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'thing'
op|','
name|'types'
op|'.'
name|'ClassType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'loadClass'
op|'('
name|'thing'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'thing'
op|','
name|'type'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'loadClass'
op|'('
name|'thing'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'thing'
op|','
name|'types'
op|'.'
name|'MethodType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'loadMethod'
op|'('
name|'thing'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'TypeError'
op|'('
string|'"No loader for %r. Unrecognized type"'
op|'%'
op|'('
name|'thing'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loadByName
dedent|''
name|'def'
name|'loadByName'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'recurse'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a string representing a Python object, return whatever tests\n        are in that object.\n\n        If C{name} is somehow inaccessible (e.g. the module can\'t be imported,\n        there is no Python object with that name etc) then return an\n        L{ErrorHolder}.\n\n        @param name: The fully-qualified name of a Python object.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'thing'
op|'='
name|'self'
op|'.'
name|'findByName'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ErrorHolder'
op|'('
name|'name'
op|','
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'loadAnything'
op|'('
name|'thing'
op|','
name|'recurse'
op|')'
newline|'\n'
DECL|variable|loadTestsFromName
dedent|''
name|'loadTestsFromName'
op|'='
name|'loadByName'
newline|'\n'
nl|'\n'
DECL|member|loadByNames
name|'def'
name|'loadByNames'
op|'('
name|'self'
op|','
name|'names'
op|','
name|'recurse'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Construct a TestSuite containing all the tests found in \'names\', where\n        names is a list of fully qualified python names and/or filenames. The\n        suite returned will have no duplicate tests, even if the same object\n        is named twice.\n        """'
newline|'\n'
name|'things'
op|'='
op|'['
op|']'
newline|'\n'
name|'errors'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'things'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'findByName'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'errors'
op|'.'
name|'append'
op|'('
name|'ErrorHolder'
op|'('
name|'name'
op|','
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'suites'
op|'='
op|'['
name|'self'
op|'.'
name|'loadAnything'
op|'('
name|'thing'
op|','
name|'recurse'
op|')'
nl|'\n'
name|'for'
name|'thing'
name|'in'
name|'set'
op|'('
name|'things'
op|')'
op|']'
newline|'\n'
name|'suites'
op|'.'
name|'extend'
op|'('
name|'errors'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'suiteFactory'
op|'('
name|'suites'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DryRunVisitor
dedent|''
dedent|''
name|'class'
name|'DryRunVisitor'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A visitor that makes a reporter think that every test visited has run\n    successfully.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reporter'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param reporter: A C{TestResult} object.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'reporter'
op|'='
name|'reporter'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|markSuccessful
dedent|''
name|'def'
name|'markSuccessful'
op|'('
name|'self'
op|','
name|'testCase'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convince the reporter that this test has been run successfully.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'startTest'
op|'('
name|'testCase'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'addSuccess'
op|'('
name|'testCase'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reporter'
op|'.'
name|'stopTest'
op|'('
name|'testCase'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TrialRunner
dedent|''
dedent|''
name|'class'
name|'TrialRunner'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A specialised runner that the trial front end uses.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|DEBUG
name|'DEBUG'
op|'='
string|"'debug'"
newline|'\n'
DECL|variable|DRY_RUN
name|'DRY_RUN'
op|'='
string|"'dry-run'"
newline|'\n'
nl|'\n'
DECL|member|_getDebugger
name|'def'
name|'_getDebugger'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dbg'
op|'='
name|'pdb'
op|'.'
name|'Pdb'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'readline'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|'"readline module not available"'
newline|'\n'
name|'hasattr'
op|'('
name|'sys'
op|','
string|"'exc_clear'"
op|')'
name|'and'
name|'sys'
op|'.'
name|'exc_clear'
op|'('
op|')'
newline|'\n'
dedent|''
name|'for'
name|'path'
name|'in'
op|'('
string|"'.pdbrc'"
op|','
string|"'pdbrc'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'rcFile'
op|'='
name|'file'
op|'('
name|'path'
op|','
string|"'r'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'                    '
name|'hasattr'
op|'('
name|'sys'
op|','
string|"'exc_clear'"
op|')'
name|'and'
name|'sys'
op|'.'
name|'exc_clear'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'dbg'
op|'.'
name|'rcLines'
op|'.'
name|'extend'
op|'('
name|'rcFile'
op|'.'
name|'readlines'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'dbg'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_removeSafely
dedent|''
name|'def'
name|'_removeSafely'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Safely remove a path, recursively.\n\n        If C{path} does not contain a node named C{"_trial_marker"}, a\n        L{_NoTrialMarker} exception is raised and the path is not removed.\n\n        @type path: L{twisted.python.filepath.FilePath}\n        @param path: The absolute path to a test directory\n        """'
newline|'\n'
name|'if'
name|'not'
name|'path'
op|'.'
name|'child'
op|'('
string|"'_trial_marker'"
op|')'
op|'.'
name|'exists'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'_NoTrialMarker'
op|'('
nl|'\n'
string|"'%r is not a trial temporary path, refusing to remove it'"
nl|'\n'
op|'%'
op|'('
name|'path'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'.'
name|'remove'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'print'
op|'('
string|'"could not remove %r, caught OSError [Errno %s]: %s"'
nl|'\n'
op|'%'
op|'('
name|'path'
op|','
name|'e'
op|'.'
name|'errno'
op|','
name|'e'
op|'.'
name|'strerror'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'newPath'
op|'='
name|'filepath'
op|'.'
name|'FilePath'
op|'('
string|"'_trial_temp_old%s'"
nl|'\n'
op|'%'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
number|'99999999'
op|')'
op|')'
newline|'\n'
name|'path'
op|'.'
name|'moveTo'
op|'('
name|'newPath'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'print'
op|'('
string|'"could not rename path, caught OSError [Errno %s]: %s"'
nl|'\n'
op|'%'
op|'('
name|'e'
op|'.'
name|'errno'
op|','
name|'e'
op|'.'
name|'strerror'
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_setUpTestdir
dedent|''
dedent|''
dedent|''
name|'def'
name|'_setUpTestdir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_tearDownLogFile'
op|'('
op|')'
newline|'\n'
name|'currentDir'
op|'='
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
newline|'\n'
name|'base'
op|'='
name|'filepath'
op|'.'
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'workingDirectory'
op|')'
newline|'\n'
name|'counter'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'counter'
op|':'
newline|'\n'
indent|'                '
name|'testdir'
op|'='
name|'base'
op|'.'
name|'sibling'
op|'('
string|"'%s-%d'"
op|'%'
op|'('
name|'base'
op|'.'
name|'basename'
op|'('
op|')'
op|','
name|'counter'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'testdir'
op|'='
name|'base'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_testDirLock'
op|'='
name|'FilesystemLock'
op|'('
name|'testdir'
op|'.'
name|'path'
op|'+'
string|"'.lock'"
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_testDirLock'
op|'.'
name|'lock'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# It is not in use'
nl|'\n'
indent|'                '
name|'if'
name|'testdir'
op|'.'
name|'exists'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# It exists though - delete it'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_removeSafely'
op|'('
name|'testdir'
op|')'
newline|'\n'
dedent|''
name|'break'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# It is in use'
nl|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'workingDirectory'
op|'=='
string|"'_trial_temp'"
op|':'
newline|'\n'
indent|'                    '
name|'counter'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'_WorkingDirectoryBusy'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'testdir'
op|'.'
name|'makedirs'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chdir'
op|'('
name|'testdir'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'file'
op|'('
string|"'_trial_marker'"
op|','
string|"'w'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'currentDir'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_tearDownTestdir
dedent|''
name|'def'
name|'_tearDownTestdir'
op|'('
name|'self'
op|','
name|'oldDir'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'chdir'
op|'('
name|'oldDir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testDirLock'
op|'.'
name|'unlock'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_log
dedent|''
name|'_log'
op|'='
name|'log'
newline|'\n'
DECL|member|_makeResult
name|'def'
name|'_makeResult'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reporter'
op|'='
name|'self'
op|'.'
name|'reporterFactory'
op|'('
name|'self'
op|'.'
name|'stream'
op|','
name|'self'
op|'.'
name|'tbformat'
op|','
nl|'\n'
name|'self'
op|'.'
name|'rterrors'
op|','
name|'self'
op|'.'
name|'_log'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'uncleanWarnings'
op|':'
newline|'\n'
indent|'            '
name|'reporter'
op|'='
name|'UncleanWarningsReporterWrapper'
op|'('
name|'reporter'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'reporter'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reporterFactory'
op|','
nl|'\n'
name|'mode'
op|'='
name|'None'
op|','
nl|'\n'
name|'logfile'
op|'='
string|"'test.log'"
op|','
nl|'\n'
name|'stream'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|','
nl|'\n'
name|'profile'
op|'='
name|'False'
op|','
nl|'\n'
name|'tracebackFormat'
op|'='
string|"'default'"
op|','
nl|'\n'
name|'realTimeErrors'
op|'='
name|'False'
op|','
nl|'\n'
name|'uncleanWarnings'
op|'='
name|'False'
op|','
nl|'\n'
name|'workingDirectory'
op|'='
name|'None'
op|','
nl|'\n'
name|'forceGarbageCollection'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reporterFactory'
op|'='
name|'reporterFactory'
newline|'\n'
name|'self'
op|'.'
name|'logfile'
op|'='
name|'logfile'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
name|'mode'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'='
name|'stream'
newline|'\n'
name|'self'
op|'.'
name|'tbformat'
op|'='
name|'tracebackFormat'
newline|'\n'
name|'self'
op|'.'
name|'rterrors'
op|'='
name|'realTimeErrors'
newline|'\n'
name|'self'
op|'.'
name|'uncleanWarnings'
op|'='
name|'uncleanWarnings'
newline|'\n'
name|'self'
op|'.'
name|'_result'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'workingDirectory'
op|'='
name|'workingDirectory'
name|'or'
string|"'_trial_temp'"
newline|'\n'
name|'self'
op|'.'
name|'_logFileObserver'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_logFileObject'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_forceGarbageCollection'
op|'='
name|'forceGarbageCollection'
newline|'\n'
name|'if'
name|'profile'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'run'
op|'='
name|'util'
op|'.'
name|'profiled'
op|'('
name|'self'
op|'.'
name|'run'
op|','
string|"'profile.data'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_tearDownLogFile
dedent|''
dedent|''
name|'def'
name|'_tearDownLogFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_logFileObserver'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'removeObserver'
op|'('
name|'self'
op|'.'
name|'_logFileObserver'
op|'.'
name|'emit'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_logFileObserver'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_logFileObject'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_logFileObject'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_logFileObject'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_setUpLogFile
dedent|''
dedent|''
name|'def'
name|'_setUpLogFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_tearDownLogFile'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'logfile'
op|'=='
string|"'-'"
op|':'
newline|'\n'
indent|'            '
name|'logFile'
op|'='
name|'sys'
op|'.'
name|'stdout'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'logFile'
op|'='
name|'file'
op|'('
name|'self'
op|'.'
name|'logfile'
op|','
string|"'a'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_logFileObject'
op|'='
name|'logFile'
newline|'\n'
name|'self'
op|'.'
name|'_logFileObserver'
op|'='
name|'log'
op|'.'
name|'FileLogObserver'
op|'('
name|'logFile'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'startLoggingWithObserver'
op|'('
name|'self'
op|'.'
name|'_logFileObserver'
op|'.'
name|'emit'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run the test or suite and return a result object.\n        """'
newline|'\n'
name|'test'
op|'='
name|'unittest'
op|'.'
name|'decorate'
op|'('
name|'test'
op|','
name|'ITestCase'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_forceGarbageCollection'
op|':'
newline|'\n'
indent|'            '
name|'test'
op|'='
name|'unittest'
op|'.'
name|'decorate'
op|'('
nl|'\n'
name|'test'
op|','
name|'unittest'
op|'.'
name|'_ForceGarbageCollectionDecorator'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_runWithoutDecoration'
op|'('
name|'test'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_runWithoutDecoration
dedent|''
name|'def'
name|'_runWithoutDecoration'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Private helper that runs the given test but doesn\'t decorate it.\n        """'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_makeResult'
op|'('
op|')'
newline|'\n'
comment|'# decorate the suite with reactor cleanup and log starting'
nl|'\n'
comment|'# This should move out of the runner and be presumed to be'
nl|'\n'
comment|'# present'
nl|'\n'
name|'suite'
op|'='
name|'TrialSuite'
op|'('
op|'['
name|'test'
op|']'
op|')'
newline|'\n'
name|'startTime'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'mode'
op|'=='
name|'self'
op|'.'
name|'DRY_RUN'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'single'
name|'in'
name|'unittest'
op|'.'
name|'_iterateTests'
op|'('
name|'suite'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'.'
name|'startTest'
op|'('
name|'single'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'addSuccess'
op|'('
name|'single'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'stopTest'
op|'('
name|'single'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'mode'
op|'=='
name|'self'
op|'.'
name|'DEBUG'
op|':'
newline|'\n'
comment|'# open question - should this be self.debug() instead.'
nl|'\n'
indent|'                '
name|'debugger'
op|'='
name|'self'
op|'.'
name|'_getDebugger'
op|'('
op|')'
newline|'\n'
name|'run'
op|'='
name|'lambda'
op|':'
name|'debugger'
op|'.'
name|'runcall'
op|'('
name|'suite'
op|'.'
name|'run'
op|','
name|'result'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'run'
op|'='
name|'lambda'
op|':'
name|'suite'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'oldDir'
op|'='
name|'self'
op|'.'
name|'_setUpTestdir'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_setUpLogFile'
op|'('
op|')'
newline|'\n'
name|'run'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_tearDownLogFile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_tearDownTestdir'
op|'('
name|'oldDir'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'endTime'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'done'
op|'='
name|'getattr'
op|'('
name|'result'
op|','
string|"'done'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'done'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|'"%s should implement done() but doesn\'t. Falling back to "'
nl|'\n'
string|'"printErrors() and friends."'
op|'%'
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'result'
op|'.'
name|'__class__'
op|')'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'3'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'printErrors'
op|'('
op|')'
newline|'\n'
name|'result'
op|'.'
name|'writeln'
op|'('
name|'result'
op|'.'
name|'separator'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'writeln'
op|'('
string|"'Ran %d tests in %.3fs'"
op|','
name|'result'
op|'.'
name|'testsRun'
op|','
nl|'\n'
name|'endTime'
op|'-'
name|'startTime'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'result'
op|'.'
name|'printSummary'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|runUntilFailure
dedent|''
name|'def'
name|'runUntilFailure'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Repeatedly run C{test} until it fails.\n        """'
newline|'\n'
name|'count'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'count'
op|'+='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'write'
op|'('
string|'"Test Pass %d\\n"'
op|'%'
op|'('
name|'count'
op|','
op|')'
op|')'
newline|'\n'
name|'if'
name|'count'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'self'
op|'.'
name|'run'
op|'('
name|'test'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'self'
op|'.'
name|'_runWithoutDecoration'
op|'('
name|'test'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'result'
op|'.'
name|'testsRun'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

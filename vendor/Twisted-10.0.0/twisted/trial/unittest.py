begin_unit
comment|'# -*- test-case-name: twisted.trial.test.test_tests -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nThings likely to be used by writers of unit tests.\n\nMaintainer: Jonathan Lange\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'doctest'
op|','
name|'inspect'
newline|'\n'
name|'import'
name|'os'
op|','
name|'warnings'
op|','
name|'sys'
op|','
name|'tempfile'
op|','
name|'gc'
op|','
name|'types'
newline|'\n'
name|'from'
name|'pprint'
name|'import'
name|'pformat'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'dis'
name|'import'
name|'findlinestarts'
name|'as'
name|'_findlinestarts'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
comment|"# Definition copied from Python's Lib/dis.py - findlinestarts was not"
nl|'\n'
comment|'# available in Python 2.3.  This function is copyright Python Software'
nl|'\n'
comment|'# Foundation, released under the Python license:'
nl|'\n'
comment|'# http://www.python.org/psf/license/'
nl|'\n'
DECL|function|_findlinestarts
indent|'    '
name|'def'
name|'_findlinestarts'
op|'('
name|'code'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Find the offsets in a byte code which are start of lines in the source.\n\n        Generate pairs (offset, lineno) as described in Python/compile.c.\n\n        """'
newline|'\n'
name|'byte_increments'
op|'='
op|'['
name|'ord'
op|'('
name|'c'
op|')'
name|'for'
name|'c'
name|'in'
name|'code'
op|'.'
name|'co_lnotab'
op|'['
number|'0'
op|':'
op|':'
number|'2'
op|']'
op|']'
newline|'\n'
name|'line_increments'
op|'='
op|'['
name|'ord'
op|'('
name|'c'
op|')'
name|'for'
name|'c'
name|'in'
name|'code'
op|'.'
name|'co_lnotab'
op|'['
number|'1'
op|':'
op|':'
number|'2'
op|']'
op|']'
newline|'\n'
nl|'\n'
name|'lastlineno'
op|'='
name|'None'
newline|'\n'
name|'lineno'
op|'='
name|'code'
op|'.'
name|'co_firstlineno'
newline|'\n'
name|'addr'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'byte_incr'
op|','
name|'line_incr'
name|'in'
name|'zip'
op|'('
name|'byte_increments'
op|','
name|'line_increments'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'byte_incr'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'lineno'
op|'!='
name|'lastlineno'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
op|'('
name|'addr'
op|','
name|'lineno'
op|')'
newline|'\n'
name|'lastlineno'
op|'='
name|'lineno'
newline|'\n'
dedent|''
name|'addr'
op|'+='
name|'byte_incr'
newline|'\n'
dedent|''
name|'lineno'
op|'+='
name|'line_incr'
newline|'\n'
dedent|''
name|'if'
name|'lineno'
op|'!='
name|'lastlineno'
op|':'
newline|'\n'
indent|'            '
name|'yield'
op|'('
name|'addr'
op|','
name|'lineno'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'utils'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'components'
op|','
name|'failure'
op|','
name|'log'
op|','
name|'monkey'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'deprecate'
name|'import'
name|'getDeprecationWarningString'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'itrial'
op|','
name|'reporter'
op|','
name|'util'
newline|'\n'
nl|'\n'
DECL|variable|pyunit
name|'pyunit'
op|'='
name|'__import__'
op|'('
string|"'unittest'"
op|')'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SkipTest
name|'class'
name|'SkipTest'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raise this (with a reason) to skip the current test. You may also set\n    method.skip to a reason string to skip it, or set class.skip to skip the\n    entire TestCase.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FailTest
dedent|''
name|'class'
name|'FailTest'
op|'('
name|'AssertionError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Raised to indicate the current test has failed to pass."""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Todo
dedent|''
name|'class'
name|'Todo'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Internal object used to mark a L{TestCase} as \'todo\'. Tests marked \'todo\'\n    are reported differently in Trial L{TestResult}s. If todo\'d tests fail,\n    they do not fail the suite and the errors are reported in a separate\n    category. If todo\'d tests succeed, Trial L{TestResult}s will report an\n    unexpected success.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reason'
op|','
name|'errors'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param reason: A string explaining why the test is marked \'todo\'\n\n        @param errors: An iterable of exception types that the test is\n        expected to raise. If one of these errors is raised by the test, it\n        will be trapped. Raising any other kind of error will fail the test.\n        If C{None} is passed, then all errors will be trapped.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'reason'
op|'='
name|'reason'
newline|'\n'
name|'self'
op|'.'
name|'errors'
op|'='
name|'errors'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"<Todo reason=%r errors=%r>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'reason'
op|','
name|'self'
op|'.'
name|'errors'
op|')'
newline|'\n'
nl|'\n'
DECL|member|expected
dedent|''
name|'def'
name|'expected'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param failure: A L{twisted.python.failure.Failure}.\n\n        @return: C{True} if C{failure} is expected, C{False} otherwise.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'errors'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'for'
name|'error'
name|'in'
name|'self'
op|'.'
name|'errors'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'failure'
op|'.'
name|'check'
op|'('
name|'error'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|makeTodo
dedent|''
dedent|''
name|'def'
name|'makeTodo'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return a L{Todo} object built from C{value}.\n\n    If C{value} is a string, return a Todo that expects any exception with\n    C{value} as a reason. If C{value} is a tuple, the second element is used\n    as the reason and the first element as the excepted error(s).\n\n    @param value: A string or a tuple of C{(errors, reason)}, where C{errors}\n    is either a single exception class or an iterable of exception classes.\n\n    @return: A L{Todo} object.\n    """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Todo'
op|'('
name|'reason'
op|'='
name|'value'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'tuple'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'errors'
op|','
name|'reason'
op|'='
name|'value'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'errors'
op|'='
name|'list'
op|'('
name|'errors'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'errors'
op|'='
op|'['
name|'errors'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'Todo'
op|'('
name|'reason'
op|'='
name|'reason'
op|','
name|'errors'
op|'='
name|'errors'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Warning
dedent|''
dedent|''
name|'class'
name|'_Warning'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A L{_Warning} instance represents one warning emitted through the Python\n    warning system (L{warnings}).  This is used to insulate callers of\n    L{_collectWarnings} from changes to the Python warnings system which might\n    otherwise require changes to the warning objects that function passes to\n    the observer object it accepts.\n\n    @ivar message: The string which was passed as the message parameter to\n        L{warnings.warn}.\n\n    @ivar category: The L{Warning} subclass which was passed as the category\n        parameter to L{warnings.warn}.\n\n    @ivar filename: The name of the file containing the definition of the code\n        object which was C{stacklevel} frames above the call to\n        L{warnings.warn}, where C{stacklevel} is the value of the C{stacklevel}\n        parameter passed to L{warnings.warn}.\n\n    @ivar lineno: The source line associated with the active instruction of the\n        code object object which was C{stacklevel} frames above the call to\n        L{warnings.warn}, where C{stacklevel} is the value of the C{stacklevel}\n        parameter passed to L{warnings.warn}.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'category'
op|','
name|'filename'
op|','
name|'lineno'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'message'
op|'='
name|'message'
newline|'\n'
name|'self'
op|'.'
name|'category'
op|'='
name|'category'
newline|'\n'
name|'self'
op|'.'
name|'filename'
op|'='
name|'filename'
newline|'\n'
name|'self'
op|'.'
name|'lineno'
op|'='
name|'lineno'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_collectWarnings
dedent|''
dedent|''
name|'def'
name|'_collectWarnings'
op|'('
name|'observeWarning'
op|','
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Call C{f} with C{args} positional arguments and C{kwargs} keyword arguments\n    and collect all warnings which are emitted as a result in a list.\n\n    @param observeWarning: A callable which will be invoked with a L{_Warning}\n        instance each time a warning is emitted.\n\n    @return: The return value of C{f(*args, **kwargs)}.\n    """'
newline|'\n'
DECL|function|showWarning
name|'def'
name|'showWarning'
op|'('
name|'message'
op|','
name|'category'
op|','
name|'filename'
op|','
name|'lineno'
op|','
name|'file'
op|'='
name|'None'
op|','
name|'line'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'isinstance'
op|'('
name|'message'
op|','
name|'Warning'
op|')'
newline|'\n'
name|'observeWarning'
op|'('
name|'_Warning'
op|'('
nl|'\n'
name|'message'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|','
name|'category'
op|','
name|'filename'
op|','
name|'lineno'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Disable the per-module cache for every module otherwise if the warning'
nl|'\n'
comment|"# which the caller is expecting us to collect was already emitted it won't"
nl|'\n'
comment|'# be re-emitted by the call to f which happens below.'
nl|'\n'
dedent|''
name|'for'
name|'v'
name|'in'
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'itervalues'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'v'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'v'
op|'.'
name|'__warningregistry__'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
comment|"# Don't specify a particular exception type to handle in case"
nl|'\n'
comment|'# some wacky object raises some wacky exception in response to'
nl|'\n'
comment|'# the setattr attempt.'
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'origFilters'
op|'='
name|'warnings'
op|'.'
name|'filters'
op|'['
op|':'
op|']'
newline|'\n'
name|'origShow'
op|'='
name|'warnings'
op|'.'
name|'showwarning'
newline|'\n'
name|'warnings'
op|'.'
name|'simplefilter'
op|'('
string|"'always'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'showwarning'
op|'='
name|'showWarning'
newline|'\n'
name|'result'
op|'='
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'filters'
op|'['
op|':'
op|']'
op|'='
name|'origFilters'
newline|'\n'
name|'warnings'
op|'.'
name|'showwarning'
op|'='
name|'origShow'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Assertions
dedent|''
name|'class'
name|'_Assertions'
op|'('
name|'pyunit'
op|'.'
name|'TestCase'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Replaces many of the built-in TestCase assertions. In general, these\n    assertions provide better error messages and are easier to use in\n    callbacks. Also provides new assertions such as L{failUnlessFailure}.\n\n    Although the tests are defined as \'failIf*\' and \'failUnless*\', they can\n    also be called as \'assertNot*\' and \'assert*\'.\n    """'
newline|'\n'
nl|'\n'
DECL|member|fail
name|'def'
name|'fail'
op|'('
name|'self'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Absolutely fail the test.  Do not pass go, do not collect $200.\n\n        @param msg: the message that will be displayed as the reason for the\n        failure\n        """'
newline|'\n'
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|failIf
dedent|''
name|'def'
name|'failIf'
op|'('
name|'self'
op|','
name|'condition'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail the test if C{condition} evaluates to True.\n\n        @param condition: any object that defines __nonzero__\n        """'
newline|'\n'
name|'if'
name|'condition'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'condition'
newline|'\n'
dedent|''
name|'assertNot'
op|'='
name|'assertFalse'
op|'='
name|'failUnlessFalse'
op|'='
name|'failIf'
newline|'\n'
nl|'\n'
DECL|member|failUnless
name|'def'
name|'failUnless'
op|'('
name|'self'
op|','
name|'condition'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail the test if C{condition} evaluates to False.\n\n        @param condition: any object that defines __nonzero__\n        """'
newline|'\n'
name|'if'
name|'not'
name|'condition'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'condition'
newline|'\n'
dedent|''
name|'assert_'
op|'='
name|'assertTrue'
op|'='
name|'failUnlessTrue'
op|'='
name|'failUnless'
newline|'\n'
nl|'\n'
DECL|member|failUnlessRaises
name|'def'
name|'failUnlessRaises'
op|'('
name|'self'
op|','
name|'exception'
op|','
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail the test unless calling the function C{f} with the given\n        C{args} and C{kwargs} raises C{exception}. The failure will report\n        the traceback and call stack of the unexpected exception.\n\n        @param exception: exception type that is to be expected\n        @param f: the function to call\n\n        @return: The raised exception instance, if it is of the given type.\n        @raise self.failureException: Raised if the function call does\n            not raise an exception or if it raises an exception of a\n            different type.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|','
name|'inst'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'inst'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
string|"'%s raised instead of %s:\\n %s'"
nl|'\n'
op|'%'
op|'('
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|'.'
name|'getTraceback'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
string|"'%s not raised (%r returned)'"
nl|'\n'
op|'%'
op|'('
name|'exception'
op|'.'
name|'__name__'
op|','
name|'result'
op|')'
op|')'
newline|'\n'
DECL|variable|assertRaises
dedent|''
dedent|''
name|'assertRaises'
op|'='
name|'failUnlessRaises'
newline|'\n'
nl|'\n'
DECL|member|failUnlessEqual
name|'def'
name|'failUnlessEqual'
op|'('
name|'self'
op|','
name|'first'
op|','
name|'second'
op|','
name|'msg'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail the test if C{first} and C{second} are not equal.\n\n        @param msg: A string describing the failure that\'s included in the\n            exception.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'first'
op|'=='
name|'second'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'msg'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'msg'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'+='
string|"'\\n'"
newline|'\n'
dedent|''
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
nl|'\n'
string|"'%snot equal:\\na = %s\\nb = %s\\n'"
nl|'\n'
op|'%'
op|'('
name|'msg'
op|','
name|'pformat'
op|'('
name|'first'
op|')'
op|','
name|'pformat'
op|'('
name|'second'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'first'
newline|'\n'
dedent|''
name|'assertEqual'
op|'='
name|'assertEquals'
op|'='
name|'failUnlessEquals'
op|'='
name|'failUnlessEqual'
newline|'\n'
nl|'\n'
DECL|member|failUnlessIdentical
name|'def'
name|'failUnlessIdentical'
op|'('
name|'self'
op|','
name|'first'
op|','
name|'second'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail the test if C{first} is not C{second}.  This is an\n        obect-identity-equality test, not an object equality\n        (i.e. C{__eq__}) test.\n\n        @param msg: if msg is None, then the failure message will be\n        \'%r is not %r\' % (first, second)\n        """'
newline|'\n'
name|'if'
name|'first'
name|'is'
name|'not'
name|'second'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
name|'msg'
name|'or'
string|"'%r is not %r'"
op|'%'
op|'('
name|'first'
op|','
name|'second'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'first'
newline|'\n'
DECL|variable|assertIdentical
dedent|''
name|'assertIdentical'
op|'='
name|'failUnlessIdentical'
newline|'\n'
nl|'\n'
DECL|member|failIfIdentical
name|'def'
name|'failIfIdentical'
op|'('
name|'self'
op|','
name|'first'
op|','
name|'second'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail the test if C{first} is C{second}.  This is an\n        obect-identity-equality test, not an object equality\n        (i.e. C{__eq__}) test.\n\n        @param msg: if msg is None, then the failure message will be\n        \'%r is %r\' % (first, second)\n        """'
newline|'\n'
name|'if'
name|'first'
name|'is'
name|'second'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
name|'msg'
name|'or'
string|"'%r is %r'"
op|'%'
op|'('
name|'first'
op|','
name|'second'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'first'
newline|'\n'
DECL|variable|assertNotIdentical
dedent|''
name|'assertNotIdentical'
op|'='
name|'failIfIdentical'
newline|'\n'
nl|'\n'
DECL|member|failIfEqual
name|'def'
name|'failIfEqual'
op|'('
name|'self'
op|','
name|'first'
op|','
name|'second'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail the test if C{first} == C{second}.\n\n        @param msg: if msg is None, then the failure message will be\n        \'%r == %r\' % (first, second)\n        """'
newline|'\n'
name|'if'
name|'not'
name|'first'
op|'!='
name|'second'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
name|'msg'
name|'or'
string|"'%r == %r'"
op|'%'
op|'('
name|'first'
op|','
name|'second'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'first'
newline|'\n'
dedent|''
name|'assertNotEqual'
op|'='
name|'assertNotEquals'
op|'='
name|'failIfEquals'
op|'='
name|'failIfEqual'
newline|'\n'
nl|'\n'
DECL|member|failUnlessIn
name|'def'
name|'failUnlessIn'
op|'('
name|'self'
op|','
name|'containee'
op|','
name|'container'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail the test if C{containee} is not found in C{container}.\n\n        @param containee: the value that should be in C{container}\n        @param container: a sequence type, or in the case of a mapping type,\n                          will follow semantics of \'if key in dict.keys()\'\n        @param msg: if msg is None, then the failure message will be\n                    \'%r not in %r\' % (first, second)\n        """'
newline|'\n'
name|'if'
name|'containee'
name|'not'
name|'in'
name|'container'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
name|'msg'
name|'or'
string|'"%r not in %r"'
nl|'\n'
op|'%'
op|'('
name|'containee'
op|','
name|'container'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'containee'
newline|'\n'
DECL|variable|assertIn
dedent|''
name|'assertIn'
op|'='
name|'failUnlessIn'
newline|'\n'
nl|'\n'
DECL|member|failIfIn
name|'def'
name|'failIfIn'
op|'('
name|'self'
op|','
name|'containee'
op|','
name|'container'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail the test if C{containee} is found in C{container}.\n\n        @param containee: the value that should not be in C{container}\n        @param container: a sequence type, or in the case of a mapping type,\n                          will follow semantics of \'if key in dict.keys()\'\n        @param msg: if msg is None, then the failure message will be\n                    \'%r in %r\' % (first, second)\n        """'
newline|'\n'
name|'if'
name|'containee'
name|'in'
name|'container'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
name|'msg'
name|'or'
string|'"%r in %r"'
nl|'\n'
op|'%'
op|'('
name|'containee'
op|','
name|'container'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'containee'
newline|'\n'
DECL|variable|assertNotIn
dedent|''
name|'assertNotIn'
op|'='
name|'failIfIn'
newline|'\n'
nl|'\n'
DECL|member|failIfAlmostEqual
name|'def'
name|'failIfAlmostEqual'
op|'('
name|'self'
op|','
name|'first'
op|','
name|'second'
op|','
name|'places'
op|'='
number|'7'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail if the two objects are equal as determined by their\n        difference rounded to the given number of decimal places\n        (default 7) and comparing to zero.\n\n        @note: decimal places (from zero) is usually not the same\n               as significant digits (measured from the most\n               signficant digit).\n\n        @note: included for compatiblity with PyUnit test cases\n        """'
newline|'\n'
name|'if'
name|'round'
op|'('
name|'second'
op|'-'
name|'first'
op|','
name|'places'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
name|'msg'
name|'or'
string|"'%r == %r within %r places'"
nl|'\n'
op|'%'
op|'('
name|'first'
op|','
name|'second'
op|','
name|'places'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'first'
newline|'\n'
dedent|''
name|'assertNotAlmostEqual'
op|'='
name|'assertNotAlmostEquals'
op|'='
name|'failIfAlmostEqual'
newline|'\n'
DECL|variable|failIfAlmostEquals
name|'failIfAlmostEquals'
op|'='
name|'failIfAlmostEqual'
newline|'\n'
nl|'\n'
DECL|member|failUnlessAlmostEqual
name|'def'
name|'failUnlessAlmostEqual'
op|'('
name|'self'
op|','
name|'first'
op|','
name|'second'
op|','
name|'places'
op|'='
number|'7'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail if the two objects are unequal as determined by their\n        difference rounded to the given number of decimal places\n        (default 7) and comparing to zero.\n\n        @note: decimal places (from zero) is usually not the same\n               as significant digits (measured from the most\n               signficant digit).\n\n        @note: included for compatiblity with PyUnit test cases\n        """'
newline|'\n'
name|'if'
name|'round'
op|'('
name|'second'
op|'-'
name|'first'
op|','
name|'places'
op|')'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
name|'msg'
name|'or'
string|"'%r != %r within %r places'"
nl|'\n'
op|'%'
op|'('
name|'first'
op|','
name|'second'
op|','
name|'places'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'first'
newline|'\n'
dedent|''
name|'assertAlmostEqual'
op|'='
name|'assertAlmostEquals'
op|'='
name|'failUnlessAlmostEqual'
newline|'\n'
DECL|variable|failUnlessAlmostEquals
name|'failUnlessAlmostEquals'
op|'='
name|'failUnlessAlmostEqual'
newline|'\n'
nl|'\n'
DECL|member|failUnlessApproximates
name|'def'
name|'failUnlessApproximates'
op|'('
name|'self'
op|','
name|'first'
op|','
name|'second'
op|','
name|'tolerance'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail if C{first} - C{second} > C{tolerance}\n\n        @param msg: if msg is None, then the failure message will be\n                    \'%r ~== %r\' % (first, second)\n        """'
newline|'\n'
name|'if'
name|'abs'
op|'('
name|'first'
op|'-'
name|'second'
op|')'
op|'>'
name|'tolerance'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
name|'msg'
name|'or'
string|'"%s ~== %s"'
op|'%'
op|'('
name|'first'
op|','
name|'second'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'first'
newline|'\n'
DECL|variable|assertApproximates
dedent|''
name|'assertApproximates'
op|'='
name|'failUnlessApproximates'
newline|'\n'
nl|'\n'
DECL|member|failUnlessFailure
name|'def'
name|'failUnlessFailure'
op|'('
name|'self'
op|','
name|'deferred'
op|','
op|'*'
name|'expectedFailures'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail if C{deferred} does not errback with one of C{expectedFailures}.\n        Returns the original Deferred with callbacks added. You will need\n        to return this Deferred from your test case.\n        """'
newline|'\n'
DECL|function|_cb
name|'def'
name|'_cb'
op|'('
name|'ignore'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
nl|'\n'
string|'"did not catch an error, instead got %r"'
op|'%'
op|'('
name|'ignore'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_eb
dedent|''
name|'def'
name|'_eb'
op|'('
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'failure'
op|'.'
name|'check'
op|'('
op|'*'
name|'expectedFailures'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'failure'
op|'.'
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'output'
op|'='
op|'('
string|"'\\nExpected: %r\\nGot:\\n%s'"
nl|'\n'
op|'%'
op|'('
name|'expectedFailures'
op|','
name|'str'
op|'('
name|'failure'
op|')'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|'('
name|'output'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'deferred'
op|'.'
name|'addCallbacks'
op|'('
name|'_cb'
op|','
name|'_eb'
op|')'
newline|'\n'
DECL|variable|assertFailure
dedent|''
name|'assertFailure'
op|'='
name|'failUnlessFailure'
newline|'\n'
nl|'\n'
DECL|member|failUnlessSubstring
name|'def'
name|'failUnlessSubstring'
op|'('
name|'self'
op|','
name|'substring'
op|','
name|'astring'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail if C{substring} does not exist within C{astring}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'failUnlessIn'
op|'('
name|'substring'
op|','
name|'astring'
op|','
name|'msg'
op|')'
newline|'\n'
DECL|variable|assertSubstring
dedent|''
name|'assertSubstring'
op|'='
name|'failUnlessSubstring'
newline|'\n'
nl|'\n'
DECL|member|failIfSubstring
name|'def'
name|'failIfSubstring'
op|'('
name|'self'
op|','
name|'substring'
op|','
name|'astring'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail if C{astring} contains C{substring}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'failIfIn'
op|'('
name|'substring'
op|','
name|'astring'
op|','
name|'msg'
op|')'
newline|'\n'
DECL|variable|assertNotSubstring
dedent|''
name|'assertNotSubstring'
op|'='
name|'failIfSubstring'
newline|'\n'
nl|'\n'
DECL|member|failUnlessWarns
name|'def'
name|'failUnlessWarns'
op|'('
name|'self'
op|','
name|'category'
op|','
name|'message'
op|','
name|'filename'
op|','
name|'f'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail if the given function doesn\'t generate the specified warning when\n        called. It calls the function, checks the warning, and forwards the\n        result of the function if everything is fine.\n\n        @param category: the category of the warning to check.\n        @param message: the output message of the warning to check.\n        @param filename: the filename where the warning should come from.\n        @param f: the function which is supposed to generate the warning.\n        @type f: any callable.\n        @param args: the arguments to C{f}.\n        @param kwargs: the keywords arguments to C{f}.\n\n        @return: the result of the original function C{f}.\n        """'
newline|'\n'
name|'warningsShown'
op|'='
op|'['
op|']'
newline|'\n'
name|'result'
op|'='
name|'_collectWarnings'
op|'('
name|'warningsShown'
op|'.'
name|'append'
op|','
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'warningsShown'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"No warnings emitted"'
op|')'
newline|'\n'
dedent|''
name|'first'
op|'='
name|'warningsShown'
op|'['
number|'0'
op|']'
newline|'\n'
name|'for'
name|'other'
name|'in'
name|'warningsShown'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
op|'('
name|'other'
op|'.'
name|'message'
op|','
name|'other'
op|'.'
name|'category'
op|')'
nl|'\n'
op|'!='
op|'('
name|'first'
op|'.'
name|'message'
op|','
name|'first'
op|'.'
name|'category'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Can\'t handle different warnings"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'first'
op|'.'
name|'message'
op|','
name|'message'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'first'
op|'.'
name|'category'
op|','
name|'category'
op|')'
newline|'\n'
nl|'\n'
comment|'# Use starts with because of .pyc/.pyo issues.'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
nl|'\n'
name|'filename'
op|'.'
name|'startswith'
op|'('
name|'first'
op|'.'
name|'filename'
op|')'
op|','
nl|'\n'
string|"'Warning in %r, expected %r'"
op|'%'
op|'('
name|'first'
op|'.'
name|'filename'
op|','
name|'filename'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# It would be nice to be able to check the line number as well, but'
nl|'\n'
comment|'# different configurations actually end up reporting different line'
nl|'\n'
comment|"# numbers (generally the variation is only 1 line, but that's enough"
nl|'\n'
comment|'# to fail the test erroneously...).'
nl|'\n'
comment|'# self.assertEqual(lineno, xxx)'
nl|'\n'
nl|'\n'
name|'return'
name|'result'
newline|'\n'
DECL|variable|assertWarns
dedent|''
name|'assertWarns'
op|'='
name|'failUnlessWarns'
newline|'\n'
nl|'\n'
DECL|member|failUnlessIsInstance
name|'def'
name|'failUnlessIsInstance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'classOrTuple'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail if C{instance} is not an instance of the given class or of\n        one of the given classes.\n\n        @param instance: the object to test the type (first argument of the\n            C{isinstance} call).\n        @type instance: any.\n        @param classOrTuple: the class or classes to test against (second\n            argument of the C{isinstance} call).\n        @type classOrTuple: class, type, or tuple.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'instance'
op|','
name|'classOrTuple'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"%r is not an instance of %s"'
op|'%'
op|'('
name|'instance'
op|','
name|'classOrTuple'
op|')'
op|')'
newline|'\n'
DECL|variable|assertIsInstance
dedent|''
dedent|''
name|'assertIsInstance'
op|'='
name|'failUnlessIsInstance'
newline|'\n'
nl|'\n'
DECL|member|failIfIsInstance
name|'def'
name|'failIfIsInstance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'classOrTuple'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail if C{instance} is not an instance of the given class or of\n        one of the given classes.\n\n        @param instance: the object to test the type (first argument of the\n            C{isinstance} call).\n        @type instance: any.\n        @param classOrTuple: the class or classes to test against (second\n            argument of the C{isinstance} call).\n        @type classOrTuple: class, type, or tuple.\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'instance'
op|','
name|'classOrTuple'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"%r is an instance of %s"'
op|'%'
op|'('
name|'instance'
op|','
name|'classOrTuple'
op|')'
op|')'
newline|'\n'
DECL|variable|assertNotIsInstance
dedent|''
dedent|''
name|'assertNotIsInstance'
op|'='
name|'failIfIsInstance'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_LogObserver
dedent|''
name|'class'
name|'_LogObserver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Observes the Twisted logs and catches any errors.\n\n    @ivar _errors: A C{list} of L{Failure} instances which were received as\n        error events from the Twisted logging system.\n\n    @ivar _added: A C{int} giving the number of times C{_add} has been called\n        less the number of times C{_remove} has been called; used to only add\n        this observer to the Twisted logging since once, regardless of the\n        number of calls to the add method.\n\n    @ivar _ignored: A C{list} of exception types which will not be recorded.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_errors'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_added'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_ignored'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_add
dedent|''
name|'def'
name|'_add'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_added'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'addObserver'
op|'('
name|'self'
op|'.'
name|'gotEvent'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_oldFE'
op|','
name|'log'
op|'.'
name|'_flushErrors'
op|'='
op|'('
name|'log'
op|'.'
name|'_flushErrors'
op|','
name|'self'
op|'.'
name|'flushErrors'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_oldIE'
op|','
name|'log'
op|'.'
name|'_ignore'
op|'='
op|'('
name|'log'
op|'.'
name|'_ignore'
op|','
name|'self'
op|'.'
name|'_ignoreErrors'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_oldCI'
op|','
name|'log'
op|'.'
name|'_clearIgnores'
op|'='
op|'('
name|'log'
op|'.'
name|'_clearIgnores'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_clearIgnores'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_added'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|_remove
dedent|''
name|'def'
name|'_remove'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_added'
op|'-='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_added'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'removeObserver'
op|'('
name|'self'
op|'.'
name|'gotEvent'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'_flushErrors'
op|'='
name|'self'
op|'.'
name|'_oldFE'
newline|'\n'
name|'log'
op|'.'
name|'_ignore'
op|'='
name|'self'
op|'.'
name|'_oldIE'
newline|'\n'
name|'log'
op|'.'
name|'_clearIgnores'
op|'='
name|'self'
op|'.'
name|'_oldCI'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_ignoreErrors
dedent|''
dedent|''
name|'def'
name|'_ignoreErrors'
op|'('
name|'self'
op|','
op|'*'
name|'errorTypes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Do not store any errors with any of the given types.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_ignored'
op|'.'
name|'extend'
op|'('
name|'errorTypes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_clearIgnores
dedent|''
name|'def'
name|'_clearIgnores'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop ignoring any errors we might currently be ignoring.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_ignored'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|flushErrors
dedent|''
name|'def'
name|'flushErrors'
op|'('
name|'self'
op|','
op|'*'
name|'errorTypes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Flush errors from the list of caught errors. If no arguments are\n        specified, remove all errors. If arguments are specified, only remove\n        errors of those types from the stored list.\n        """'
newline|'\n'
name|'if'
name|'errorTypes'
op|':'
newline|'\n'
indent|'            '
name|'flushed'
op|'='
op|'['
op|']'
newline|'\n'
name|'remainder'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'self'
op|'.'
name|'_errors'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'f'
op|'.'
name|'check'
op|'('
op|'*'
name|'errorTypes'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'flushed'
op|'.'
name|'append'
op|'('
name|'f'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'remainder'
op|'.'
name|'append'
op|'('
name|'f'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_errors'
op|'='
name|'remainder'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'flushed'
op|'='
name|'self'
op|'.'
name|'_errors'
newline|'\n'
name|'self'
op|'.'
name|'_errors'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'return'
name|'flushed'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getErrors
dedent|''
name|'def'
name|'getErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a list of errors caught by this observer.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_errors'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|gotEvent
dedent|''
name|'def'
name|'gotEvent'
op|'('
name|'self'
op|','
name|'event'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The actual observer method. Called whenever a message is logged.\n\n        @param event: A dictionary containing the log message. Actual\n        structure undocumented (see source for L{twisted.python.log}).\n        """'
newline|'\n'
name|'if'
name|'event'
op|'.'
name|'get'
op|'('
string|"'isError'"
op|','
name|'False'
op|')'
name|'and'
string|"'failure'"
name|'in'
name|'event'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'event'
op|'['
string|"'failure'"
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'_ignored'
op|')'
op|'=='
number|'0'
name|'or'
name|'not'
name|'f'
op|'.'
name|'check'
op|'('
op|'*'
name|'self'
op|'.'
name|'_ignored'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_errors'
op|'.'
name|'append'
op|'('
name|'f'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_logObserver
dedent|''
dedent|''
dedent|''
dedent|''
name|'_logObserver'
op|'='
name|'_LogObserver'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_wait_is_running
name|'_wait_is_running'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|class|TestCase
name|'class'
name|'TestCase'
op|'('
name|'_Assertions'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A unit test. The atom of the unit testing universe.\n\n    This class extends C{unittest.TestCase} from the standard library. The\n    main feature is the ability to return C{Deferred}s from tests and fixture\n    methods and to have the suite wait for those C{Deferred}s to fire.\n\n    To write a unit test, subclass C{TestCase} and define a method (say,\n    \'test_foo\') on the subclass. To run the test, instantiate your subclass\n    with the name of the method, and call L{run} on the instance, passing a\n    L{TestResult} object.\n\n    The C{trial} script will automatically find any C{TestCase} subclasses\n    defined in modules beginning with \'test_\' and construct test cases for all\n    methods beginning with \'test\'.\n\n    If an error is logged during the test run, the test will fail with an\n    error. See L{log.err}.\n\n    @ivar failureException: An exception class, defaulting to C{FailTest}. If\n    the test method raises this exception, it will be reported as a failure,\n    rather than an exception. All of the assertion methods raise this if the\n    assertion fails.\n\n    @ivar skip: C{None} or a string explaining why this test is to be\n    skipped. If defined, the test will not be run. Instead, it will be\n    reported to the result object as \'skipped\' (if the C{TestResult} supports\n    skipping).\n\n    @ivar suppress: C{None} or a list of tuples of C{(args, kwargs)} to be\n    passed to C{warnings.filterwarnings}. Use these to suppress warnings\n    raised in a test. Useful for testing deprecated code. See also\n    L{util.suppress}.\n\n    @ivar timeout: A real number of seconds. If set, the test will\n    raise an error if it takes longer than C{timeout} seconds.\n    If not set, util.DEFAULT_TIMEOUT_DURATION is used.\n\n    @ivar todo: C{None}, a string or a tuple of C{(errors, reason)} where\n    C{errors} is either an exception class or an iterable of exception\n    classes, and C{reason} is a string. See L{Todo} or L{makeTodo} for more\n    information.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'itrial'
op|'.'
name|'ITestCase'
op|')'
newline|'\n'
DECL|variable|failureException
name|'failureException'
op|'='
name|'FailTest'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'methodName'
op|'='
string|"'runTest'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Construct an asynchronous test case for C{methodName}.\n\n        @param methodName: The name of a method on C{self}. This method should\n        be a unit test. That is, it should be a short method that calls some of\n        the assert* methods. If C{methodName} is unspecified, L{runTest} will\n        be used as the test method. This is mostly useful for testing Trial.\n        """'
newline|'\n'
name|'super'
op|'('
name|'TestCase'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'methodName'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testMethodName'
op|'='
name|'methodName'
newline|'\n'
name|'testMethod'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'methodName'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_parents'
op|'='
op|'['
name|'testMethod'
op|','
name|'self'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_parents'
op|'.'
name|'extend'
op|'('
name|'util'
op|'.'
name|'getPythonContainers'
op|'('
name|'testMethod'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_passed'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_cleanups'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'sys'
op|'.'
name|'version_info'
op|'>='
op|'('
number|'2'
op|','
number|'6'
op|')'
op|':'
newline|'\n'
comment|'# Override the comparison defined by the base TestCase which considers'
nl|'\n'
comment|'# instances of the same class with the same _testMethodName to be'
nl|'\n'
comment|'# equal.  Since trial puts TestCase instances into a set, that'
nl|'\n'
comment|'# definition of comparison makes it impossible to run the same test'
nl|'\n'
comment|'# method twice.  Most likely, trial should stop using a set to hold'
nl|'\n'
comment|'# tests, but until it does, this is necessary on Python 2.6.  Only'
nl|'\n'
comment|'# __eq__ and __ne__ are required here, not __hash__, since the'
nl|'\n'
comment|'# inherited __hash__ is compatible with these equality semantics.  A'
nl|'\n'
comment|'# different __hash__ might be slightly more efficient (by reducing'
nl|'\n'
comment|'# collisions), but who cares? -exarkun'
nl|'\n'
DECL|function|__eq__
indent|'        '
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
name|'is'
name|'other'
newline|'\n'
nl|'\n'
DECL|function|__ne__
dedent|''
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
name|'is'
name|'not'
name|'other'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_run
dedent|''
dedent|''
name|'def'
name|'_run'
op|'('
name|'self'
op|','
name|'methodName'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'timeout'
op|'='
name|'self'
op|'.'
name|'getTimeout'
op|'('
op|')'
newline|'\n'
DECL|function|onTimeout
name|'def'
name|'onTimeout'
op|'('
name|'d'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'e'
op|'='
name|'defer'
op|'.'
name|'TimeoutError'
op|'('
string|'"%r (%s) still running at %s secs"'
nl|'\n'
op|'%'
op|'('
name|'self'
op|','
name|'methodName'
op|','
name|'timeout'
op|')'
op|')'
newline|'\n'
name|'f'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'e'
op|')'
newline|'\n'
comment|'# try to errback the deferred that the test returns (for no gorram'
nl|'\n'
comment|'# reason) (see issue1005 and test_errorPropagation in'
nl|'\n'
comment|'# test_deferred)'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'.'
name|'errback'
op|'('
name|'f'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'defer'
op|'.'
name|'AlreadyCalledError'
op|':'
newline|'\n'
comment|'# if the deferred has been called already but the *back chain'
nl|'\n'
comment|'# is still unfinished, crash the reactor and report timeout'
nl|'\n'
comment|'# error ourself.'
nl|'\n'
indent|'                '
name|'reactor'
op|'.'
name|'crash'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_timedOut'
op|'='
name|'True'
comment|'# see self._wait'
newline|'\n'
name|'todo'
op|'='
name|'self'
op|'.'
name|'getTodo'
op|'('
op|')'
newline|'\n'
name|'if'
name|'todo'
name|'is'
name|'not'
name|'None'
name|'and'
name|'todo'
op|'.'
name|'expected'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'result'
op|'.'
name|'addExpectedFailure'
op|'('
name|'self'
op|','
name|'f'
op|','
name|'todo'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'f'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'onTimeout'
op|'='
name|'utils'
op|'.'
name|'suppressWarnings'
op|'('
nl|'\n'
name|'onTimeout'
op|','
name|'util'
op|'.'
name|'suppress'
op|'('
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
op|')'
newline|'\n'
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'methodName'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'utils'
op|'.'
name|'runWithWarningsSuppressed'
op|','
nl|'\n'
name|'self'
op|'.'
name|'getSuppress'
op|'('
op|')'
op|','
name|'method'
op|')'
newline|'\n'
name|'call'
op|'='
name|'reactor'
op|'.'
name|'callLater'
op|'('
name|'timeout'
op|','
name|'onTimeout'
op|','
name|'d'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'lambda'
name|'x'
op|':'
name|'call'
op|'.'
name|'active'
op|'('
op|')'
name|'and'
name|'call'
op|'.'
name|'cancel'
op|'('
op|')'
name|'or'
name|'x'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|shortDescription
dedent|''
name|'def'
name|'shortDescription'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'desc'
op|'='
name|'super'
op|'('
name|'TestCase'
op|','
name|'self'
op|')'
op|'.'
name|'shortDescription'
op|'('
op|')'
newline|'\n'
name|'if'
name|'desc'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_testMethodName'
newline|'\n'
dedent|''
name|'return'
name|'desc'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'run'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deferSetUp
dedent|''
name|'def'
name|'deferSetUp'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'_run'
op|'('
string|"'setUp'"
op|','
name|'result'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'deferTestMethod'
op|','
name|'self'
op|'.'
name|'_ebDeferSetUp'
op|','
nl|'\n'
name|'callbackArgs'
op|'='
op|'('
name|'result'
op|','
op|')'
op|','
nl|'\n'
name|'errbackArgs'
op|'='
op|'('
name|'result'
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_ebDeferSetUp
dedent|''
name|'def'
name|'_ebDeferSetUp'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'failure'
op|'.'
name|'check'
op|'('
name|'SkipTest'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'addSkip'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'_getReason'
op|'('
name|'failure'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'failure'
op|')'
newline|'\n'
name|'if'
name|'failure'
op|'.'
name|'check'
op|'('
name|'KeyboardInterrupt'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'deferRunCleanups'
op|'('
name|'None'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deferTestMethod
dedent|''
name|'def'
name|'deferTestMethod'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'_run'
op|'('
name|'self'
op|'.'
name|'_testMethodName'
op|','
name|'result'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbDeferTestMethod'
op|','
name|'self'
op|'.'
name|'_ebDeferTestMethod'
op|','
nl|'\n'
name|'callbackArgs'
op|'='
op|'('
name|'result'
op|','
op|')'
op|','
nl|'\n'
name|'errbackArgs'
op|'='
op|'('
name|'result'
op|','
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'self'
op|'.'
name|'deferRunCleanups'
op|','
name|'result'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'self'
op|'.'
name|'deferTearDown'
op|','
name|'result'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_cbDeferTestMethod
dedent|''
name|'def'
name|'_cbDeferTestMethod'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'getTodo'
op|'('
op|')'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'addUnexpectedSuccess'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'getTodo'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_passed'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'ignored'
newline|'\n'
nl|'\n'
DECL|member|_ebDeferTestMethod
dedent|''
name|'def'
name|'_ebDeferTestMethod'
op|'('
name|'self'
op|','
name|'f'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'todo'
op|'='
name|'self'
op|'.'
name|'getTodo'
op|'('
op|')'
newline|'\n'
name|'if'
name|'todo'
name|'is'
name|'not'
name|'None'
name|'and'
name|'todo'
op|'.'
name|'expected'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'addExpectedFailure'
op|'('
name|'self'
op|','
name|'f'
op|','
name|'todo'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'f'
op|'.'
name|'check'
op|'('
name|'self'
op|'.'
name|'failureException'
op|','
name|'FailTest'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'addFailure'
op|'('
name|'self'
op|','
name|'f'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'f'
op|'.'
name|'check'
op|'('
name|'KeyboardInterrupt'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'f'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'f'
op|'.'
name|'check'
op|'('
name|'SkipTest'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'addSkip'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'_getReason'
op|'('
name|'f'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deferTearDown
dedent|''
dedent|''
name|'def'
name|'deferTearDown'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'_run'
op|'('
string|"'tearDown'"
op|','
name|'result'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_ebDeferTearDown'
op|','
name|'result'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_ebDeferTearDown
dedent|''
name|'def'
name|'_ebDeferTearDown'
op|'('
name|'self'
op|','
name|'failure'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'failure'
op|')'
newline|'\n'
name|'if'
name|'failure'
op|'.'
name|'check'
op|'('
name|'KeyboardInterrupt'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_passed'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|deferRunCleanups
dedent|''
name|'def'
name|'deferRunCleanups'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run any scheduled cleanups and report errors (if any to the result\n        object.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_runCleanups'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbDeferRunCleanups'
op|','
name|'result'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_cbDeferRunCleanups
dedent|''
name|'def'
name|'_cbDeferRunCleanups'
op|'('
name|'self'
op|','
name|'cleanupResults'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'flag'
op|','
name|'failure'
name|'in'
name|'cleanupResults'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'flag'
op|'=='
name|'defer'
op|'.'
name|'FAILURE'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'failure'
op|')'
newline|'\n'
name|'if'
name|'failure'
op|'.'
name|'check'
op|'('
name|'KeyboardInterrupt'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'result'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_passed'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_cleanUp
dedent|''
dedent|''
dedent|''
name|'def'
name|'_cleanUp'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'clean'
op|'='
name|'util'
op|'.'
name|'_Janitor'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|'.'
name|'postCaseCleanup'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'clean'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_passed'
op|'='
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_passed'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'for'
name|'error'
name|'in'
name|'self'
op|'.'
name|'_observer'
op|'.'
name|'getErrors'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_passed'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_removeObserver'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_passed'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'addSuccess'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_classCleanUp
dedent|''
dedent|''
name|'def'
name|'_classCleanUp'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'util'
op|'.'
name|'_Janitor'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|'.'
name|'postClassCleanup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_makeReactorMethod
dedent|''
dedent|''
name|'def'
name|'_makeReactorMethod'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a method which wraps the reactor method C{name}. The new\n        method issues a deprecation warning and calls the original.\n        """'
newline|'\n'
DECL|function|_
name|'def'
name|'_'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"reactor.%s cannot be used inside unit tests. "'
nl|'\n'
string|'"In the future, using %s will fail the test and may "'
nl|'\n'
string|'"crash or hang the test run."'
nl|'\n'
op|'%'
op|'('
name|'name'
op|','
name|'name'
op|')'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'2'
op|','
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_reactorMethods'
op|'['
name|'name'
op|']'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'_'
newline|'\n'
nl|'\n'
DECL|member|_deprecateReactor
dedent|''
name|'def'
name|'_deprecateReactor'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Deprecate C{iterate}, C{crash} and C{stop} on C{reactor}. That is,\n        each method is wrapped in a function that issues a deprecation\n        warning, then calls the original.\n\n        @param reactor: The Twisted reactor.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_reactorMethods'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name'
name|'in'
op|'['
string|"'crash'"
op|','
string|"'iterate'"
op|','
string|"'stop'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_reactorMethods'
op|'['
name|'name'
op|']'
op|'='
name|'getattr'
op|'('
name|'reactor'
op|','
name|'name'
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'reactor'
op|','
name|'name'
op|','
name|'self'
op|'.'
name|'_makeReactorMethod'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_undeprecateReactor
dedent|''
dedent|''
name|'def'
name|'_undeprecateReactor'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Restore the deprecated reactor methods. Undoes what\n        L{_deprecateReactor} did.\n\n        @param reactor: The Twisted reactor.\n        """'
newline|'\n'
name|'for'
name|'name'
op|','
name|'method'
name|'in'
name|'self'
op|'.'
name|'_reactorMethods'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'reactor'
op|','
name|'name'
op|','
name|'method'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_reactorMethods'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_installObserver
dedent|''
name|'def'
name|'_installObserver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_observer'
op|'='
name|'_logObserver'
newline|'\n'
name|'self'
op|'.'
name|'_observer'
op|'.'
name|'_add'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_removeObserver
dedent|''
name|'def'
name|'_removeObserver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_observer'
op|'.'
name|'_remove'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|flushLoggedErrors
dedent|''
name|'def'
name|'flushLoggedErrors'
op|'('
name|'self'
op|','
op|'*'
name|'errorTypes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove stored errors received from the log.\n\n        C{TestCase} stores each error logged during the run of the test and\n        reports them as errors during the cleanup phase (after C{tearDown}).\n\n        @param *errorTypes: If unspecifed, flush all errors. Otherwise, only\n        flush errors that match the given types.\n\n        @return: A list of failures that have been removed.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_observer'
op|'.'
name|'flushErrors'
op|'('
op|'*'
name|'errorTypes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|flushWarnings
dedent|''
name|'def'
name|'flushWarnings'
op|'('
name|'self'
op|','
name|'offendingFunctions'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove stored warnings from the list of captured warnings and return\n        them.\n\n        @param offendingFunctions: If C{None}, all warnings issued during the\n            currently running test will be flushed.  Otherwise, only warnings\n            which I{point} to a function included in this list will be flushed.\n            All warnings include a filename and source line number; if these\n            parts of a warning point to a source line which is part of a\n            function, then the warning I{points} to that function.\n        @type offendingFunctions: L{NoneType} or L{list} of functions or methods.\n\n        @raise ValueError: If C{offendingFunctions} is not C{None} and includes\n            an object which is not a L{FunctionType} or L{MethodType} instance.\n\n        @return: A C{list}, each element of which is a C{dict} giving\n            information about one warning which was flushed by this call.  The\n            keys of each C{dict} are:\n\n                - C{\'message\'}: The string which was passed as the I{message}\n                  parameter to L{warnings.warn}.\n\n                - C{\'category\'}: The warning subclass which was passed as the\n                  I{category} parameter to L{warnings.warn}.\n\n                - C{\'filename\'}: The name of the file containing the definition\n                  of the code object which was C{stacklevel} frames above the\n                  call to L{warnings.warn}, where C{stacklevel} is the value of\n                  the C{stacklevel} parameter passed to L{warnings.warn}.\n\n                - C{\'lineno\'}: The source line associated with the active\n                  instruction of the code object object which was C{stacklevel}\n                  frames above the call to L{warnings.warn}, where\n                  C{stacklevel} is the value of the C{stacklevel} parameter\n                  passed to L{warnings.warn}.\n        """'
newline|'\n'
name|'if'
name|'offendingFunctions'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'toFlush'
op|'='
name|'self'
op|'.'
name|'_warnings'
op|'['
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_warnings'
op|'['
op|':'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'toFlush'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'aWarning'
name|'in'
name|'self'
op|'.'
name|'_warnings'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'aFunction'
name|'in'
name|'offendingFunctions'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'aFunction'
op|','
op|'('
nl|'\n'
name|'types'
op|'.'
name|'FunctionType'
op|','
name|'types'
op|'.'
name|'MethodType'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'ValueError'
op|'('
string|'"%r is not a function or method"'
op|'%'
op|'('
nl|'\n'
name|'aFunction'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# inspect.getabsfile(aFunction) sometimes returns a'
nl|'\n'
comment|'# filename which disagrees with the filename the warning'
nl|'\n'
comment|'# system generates.  This seems to be because a'
nl|'\n'
comment|"# function's code object doesn't deal with source files"
nl|'\n'
comment|'# being renamed.  inspect.getabsfile(module) seems'
nl|'\n'
comment|'# better (or at least agrees with the warning system'
nl|'\n'
comment|'# more often), and does some normalization for us which'
nl|'\n'
comment|'# is desirable.  inspect.getmodule() is attractive, but'
nl|'\n'
comment|'# somewhat broken in Python 2.3.  See Python bug 4845.'
nl|'\n'
dedent|''
name|'aModule'
op|'='
name|'sys'
op|'.'
name|'modules'
op|'['
name|'aFunction'
op|'.'
name|'__module__'
op|']'
newline|'\n'
name|'filename'
op|'='
name|'inspect'
op|'.'
name|'getabsfile'
op|'('
name|'aModule'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'filename'
op|'!='
name|'os'
op|'.'
name|'path'
op|'.'
name|'normcase'
op|'('
name|'aWarning'
op|'.'
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'continue'
newline|'\n'
dedent|''
name|'lineStarts'
op|'='
name|'list'
op|'('
name|'_findlinestarts'
op|'('
name|'aFunction'
op|'.'
name|'func_code'
op|')'
op|')'
newline|'\n'
name|'first'
op|'='
name|'lineStarts'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
name|'last'
op|'='
name|'lineStarts'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
name|'if'
name|'not'
op|'('
name|'first'
op|'<='
name|'aWarning'
op|'.'
name|'lineno'
op|'<='
name|'last'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'continue'
newline|'\n'
comment|'# The warning points to this function, flush it and move on'
nl|'\n'
comment|'# to the next warning.'
nl|'\n'
dedent|''
name|'toFlush'
op|'.'
name|'append'
op|'('
name|'aWarning'
op|')'
newline|'\n'
name|'break'
newline|'\n'
comment|'# Remove everything which is being flushed.'
nl|'\n'
dedent|''
dedent|''
name|'map'
op|'('
name|'self'
op|'.'
name|'_warnings'
op|'.'
name|'remove'
op|','
name|'toFlush'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'['
nl|'\n'
op|'{'
string|"'message'"
op|':'
name|'w'
op|'.'
name|'message'
op|','
string|"'category'"
op|':'
name|'w'
op|'.'
name|'category'
op|','
nl|'\n'
string|"'filename'"
op|':'
name|'w'
op|'.'
name|'filename'
op|','
string|"'lineno'"
op|':'
name|'w'
op|'.'
name|'lineno'
op|'}'
nl|'\n'
name|'for'
name|'w'
name|'in'
name|'toFlush'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addCleanup
dedent|''
name|'def'
name|'addCleanup'
op|'('
name|'self'
op|','
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add the given function to a list of functions to be called after the\n        test has run, but before C{tearDown}.\n\n        Functions will be run in reverse order of being added. This helps\n        ensure that tear down complements set up.\n\n        The function C{f} may return a Deferred. If so, C{TestCase} will wait\n        until the Deferred has fired before proceeding to the next function.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_cleanups'
op|'.'
name|'append'
op|'('
op|'('
name|'f'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callDeprecated
dedent|''
name|'def'
name|'callDeprecated'
op|'('
name|'self'
op|','
name|'version'
op|','
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call a function that was deprecated at a specific version.\n\n        @param version: The version that the function was deprecated in.\n        @param f: The deprecated function to call.\n        @return: Whatever the function returns.\n        """'
newline|'\n'
name|'result'
op|'='
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'warningsShown'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|'['
name|'self'
op|'.'
name|'callDeprecated'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'warningsShown'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'%r is not deprecated.'"
op|'%'
op|'('
name|'f'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'observedWarning'
op|'='
name|'warningsShown'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
newline|'\n'
name|'expectedWarning'
op|'='
name|'getDeprecationWarningString'
op|'('
name|'f'
op|','
name|'version'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expectedWarning'
op|','
name|'observedWarning'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_runCleanups
dedent|''
name|'def'
name|'_runCleanups'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run the cleanups added with L{addCleanup} in order.\n\n        @return: A C{Deferred} that fires when all cleanups are run.\n        """'
newline|'\n'
DECL|function|_makeFunction
name|'def'
name|'_makeFunction'
op|'('
name|'f'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'lambda'
op|':'
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'callables'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'self'
op|'.'
name|'_cleanups'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|','
name|'args'
op|','
name|'kwargs'
op|'='
name|'self'
op|'.'
name|'_cleanups'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'callables'
op|'.'
name|'append'
op|'('
name|'_makeFunction'
op|'('
name|'f'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'util'
op|'.'
name|'_runSequentially'
op|'('
name|'callables'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|patch
dedent|''
name|'def'
name|'patch'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attribute'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Monkey patch an object for the duration of the test.\n\n        The monkey patch will be reverted at the end of the test using the\n        L{addCleanup} mechanism.\n\n        The L{MonkeyPatcher} is returned so that users can restore and\n        re-apply the monkey patch within their tests.\n\n        @param obj: The object to monkey patch.\n        @param attribute: The name of the attribute to change.\n        @param value: The value to set the attribute to.\n        @return: A L{monkey.MonkeyPatcher} object.\n        """'
newline|'\n'
name|'monkeyPatch'
op|'='
name|'monkey'
op|'.'
name|'MonkeyPatcher'
op|'('
op|'('
name|'obj'
op|','
name|'attribute'
op|','
name|'value'
op|')'
op|')'
newline|'\n'
name|'monkeyPatch'
op|'.'
name|'patch'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'monkeyPatch'
op|'.'
name|'restore'
op|')'
newline|'\n'
name|'return'
name|'monkeyPatch'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|runTest
dedent|''
name|'def'
name|'runTest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If no C{methodName} argument is passed to the constructor, L{run} will\n        treat this method as the thing with the actual test inside.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run the test case, storing the results in C{result}.\n\n        First runs C{setUp} on self, then runs the test method (defined in the\n        constructor), then runs C{tearDown}. Any of these may return\n        L{Deferred}s. After they complete, does some reactor cleanup.\n\n        @param result: A L{TestResult} object.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"--> %s <--"'
op|'%'
op|'('
name|'self'
op|'.'
name|'id'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'new_result'
op|'='
name|'itrial'
op|'.'
name|'IReporter'
op|'('
name|'result'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'new_result'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'PyUnitResultAdapter'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'new_result'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_timedOut'
op|'='
name|'False'
newline|'\n'
name|'result'
op|'.'
name|'startTest'
op|'('
name|'self'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'getSkip'
op|'('
op|')'
op|':'
comment|"# don't run test methods that are marked as .skip"
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'addSkip'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'getSkip'
op|'('
op|')'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'stopTest'
op|'('
name|'self'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_installObserver'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# All the code inside runThunk will be run such that warnings emitted'
nl|'\n'
comment|'# by it will be collected and retrievable by flushWarnings.'
nl|'\n'
DECL|function|runThunk
name|'def'
name|'runThunk'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_passed'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_deprecateReactor'
op|'('
name|'reactor'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'='
name|'self'
op|'.'
name|'deferSetUp'
op|'('
name|'None'
op|','
name|'result'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_wait'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_cleanUp'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_classCleanUp'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_undeprecateReactor'
op|'('
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_warnings'
op|'='
op|'['
op|']'
newline|'\n'
name|'_collectWarnings'
op|'('
name|'self'
op|'.'
name|'_warnings'
op|'.'
name|'append'
op|','
name|'runThunk'
op|')'
newline|'\n'
nl|'\n'
comment|"# Any collected warnings which the test method didn't flush get"
nl|'\n'
comment|"# re-emitted so they'll be logged or show up on stdout or whatever."
nl|'\n'
name|'for'
name|'w'
name|'in'
name|'self'
op|'.'
name|'flushWarnings'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'warnings'
op|'.'
name|'warn_explicit'
op|'('
op|'**'
name|'w'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'result'
op|'.'
name|'stopTest'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getReason
dedent|''
name|'def'
name|'_getReason'
op|'('
name|'self'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'f'
op|'.'
name|'value'
op|'.'
name|'args'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'f'
op|'.'
name|'value'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
op|'('
string|'"Do not raise unittest.SkipTest with no "'
nl|'\n'
string|'"arguments! Give a reason for skipping tests!"'
op|')'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'reason'
op|'='
name|'f'
newline|'\n'
dedent|''
name|'return'
name|'reason'
newline|'\n'
nl|'\n'
DECL|member|getSkip
dedent|''
name|'def'
name|'getSkip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the skip reason set on this test, if any is set. Checks on the\n        instance first, then the class, then the module, then packages. As\n        soon as it finds something with a C{skip} attribute, returns that.\n        Returns C{None} if it cannot find anything. See L{TestCase} docstring\n        for more details.\n        """'
newline|'\n'
name|'return'
name|'util'
op|'.'
name|'acquireAttribute'
op|'('
name|'self'
op|'.'
name|'_parents'
op|','
string|"'skip'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getTodo
dedent|''
name|'def'
name|'getTodo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a L{Todo} object if the test is marked todo. Checks on the\n        instance first, then the class, then the module, then packages. As\n        soon as it finds something with a C{todo} attribute, returns that.\n        Returns C{None} if it cannot find anything. See L{TestCase} docstring\n        for more details.\n        """'
newline|'\n'
name|'todo'
op|'='
name|'util'
op|'.'
name|'acquireAttribute'
op|'('
name|'self'
op|'.'
name|'_parents'
op|','
string|"'todo'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'todo'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'makeTodo'
op|'('
name|'todo'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getTimeout
dedent|''
name|'def'
name|'getTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns the timeout value set on this test. Checks on the instance\n        first, then the class, then the module, then packages. As soon as it\n        finds something with a C{timeout} attribute, returns that. Returns\n        L{util.DEFAULT_TIMEOUT_DURATION} if it cannot find anything. See\n        L{TestCase} docstring for more details.\n        """'
newline|'\n'
name|'timeout'
op|'='
name|'util'
op|'.'
name|'acquireAttribute'
op|'('
name|'self'
op|'.'
name|'_parents'
op|','
string|"'timeout'"
op|','
nl|'\n'
name|'util'
op|'.'
name|'DEFAULT_TIMEOUT_DURATION'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'float'
op|'('
name|'timeout'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'ValueError'
op|','
name|'TypeError'
op|')'
op|':'
newline|'\n'
comment|'# XXX -- this is here because sometimes people will have methods'
nl|'\n'
comment|"# called 'timeout', or set timeout to 'orange', or something"
nl|'\n'
comment|'# Particularly, test_news.NewsTestCase and ReactorCoreTestCase'
nl|'\n'
comment|'# both do this.'
nl|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"\'timeout\' attribute needs to be a number."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'return'
name|'util'
op|'.'
name|'DEFAULT_TIMEOUT_DURATION'
newline|'\n'
nl|'\n'
DECL|member|getSuppress
dedent|''
dedent|''
name|'def'
name|'getSuppress'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns any warning suppressions set for this test. Checks on the\n        instance first, then the class, then the module, then packages. As\n        soon as it finds something with a C{suppress} attribute, returns that.\n        Returns any empty list (i.e. suppress no warnings) if it cannot find\n        anything. See L{TestCase} docstring for more details.\n        """'
newline|'\n'
name|'return'
name|'util'
op|'.'
name|'acquireAttribute'
op|'('
name|'self'
op|'.'
name|'_parents'
op|','
string|"'suppress'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|visit
dedent|''
name|'def'
name|'visit'
op|'('
name|'self'
op|','
name|'visitor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Visit this test case. Call C{visitor} with C{self} as a parameter.\n\n        Deprecated in Twisted 8.0.\n\n        @param visitor: A callable which expects a single parameter: a test\n        case.\n\n        @return: None\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Test visitors deprecated in Twisted 8.0"'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'visitor'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|mktemp
dedent|''
name|'def'
name|'mktemp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a unique name that may be used as either a temporary\n        directory or filename.\n\n        @note: you must call os.mkdir on the value returned from this\n               method if you wish to use it as a directory!\n        """'
newline|'\n'
name|'MAX_FILENAME'
op|'='
number|'32'
comment|'# some platforms limit lengths of filenames'
newline|'\n'
name|'base'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__module__'
op|'['
op|':'
name|'MAX_FILENAME'
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'['
op|':'
name|'MAX_FILENAME'
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_testMethodName'
op|'['
op|':'
name|'MAX_FILENAME'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'base'
op|')'
newline|'\n'
dedent|''
name|'dirname'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
string|"''"
op|','
string|"''"
op|','
name|'base'
op|')'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'dirname'
op|','
string|"'temp'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_wait
dedent|''
name|'def'
name|'_wait'
op|'('
name|'self'
op|','
name|'d'
op|','
name|'running'
op|'='
name|'_wait_is_running'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Take a Deferred that only ever callbacks. Block until it happens.\n        """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'if'
name|'running'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"_wait is not reentrant"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|append
name|'def'
name|'append'
op|'('
name|'any'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'results'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'results'
op|'.'
name|'append'
op|'('
name|'any'
op|')'
newline|'\n'
DECL|function|crash
dedent|''
dedent|''
name|'def'
name|'crash'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'results'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'reactor'
op|'.'
name|'crash'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'crash'
op|'='
name|'utils'
op|'.'
name|'suppressWarnings'
op|'('
nl|'\n'
name|'crash'
op|','
name|'util'
op|'.'
name|'suppress'
op|'('
name|'message'
op|'='
string|"r'reactor\\.crash cannot be used.*'"
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
op|')'
newline|'\n'
DECL|function|stop
name|'def'
name|'stop'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'crash'
op|'('
op|')'
newline|'\n'
dedent|''
name|'stop'
op|'='
name|'utils'
op|'.'
name|'suppressWarnings'
op|'('
nl|'\n'
name|'stop'
op|','
name|'util'
op|'.'
name|'suppress'
op|'('
name|'message'
op|'='
string|"r'reactor\\.crash cannot be used.*'"
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'running'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'append'
op|')'
newline|'\n'
name|'if'
name|'results'
op|':'
newline|'\n'
comment|'# d might have already been fired, in which case append is'
nl|'\n'
comment|'# called synchronously. Avoid any reactor stuff.'
nl|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'crash'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'stop'
op|'='
name|'stop'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'reactor'
op|'.'
name|'stop'
newline|'\n'
nl|'\n'
comment|'# If the reactor was crashed elsewhere due to a timeout, hopefully'
nl|'\n'
comment|'# that crasher also reported an error. Just return.'
nl|'\n'
comment|"# _timedOut is most likely to be set when d has fired but hasn't"
nl|'\n'
comment|'# completed its callback chain (see self._run)'
nl|'\n'
dedent|''
name|'if'
name|'results'
name|'or'
name|'self'
op|'.'
name|'_timedOut'
op|':'
comment|'#defined in run() and _run()'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
nl|'\n'
comment|"# If the timeout didn't happen, and we didn't get a result or"
nl|'\n'
comment|"# a failure, then the user probably aborted the test, so let's"
nl|'\n'
comment|'# just raise KeyboardInterrupt.'
nl|'\n'
nl|'\n'
comment|'# FIXME: imagine this:'
nl|'\n'
comment|'# web/test/test_webclient.py:'
nl|'\n'
comment|'# exc = self.assertRaises(error.Error, wait, method(url))'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# wait() will raise KeyboardInterrupt, and assertRaises will'
nl|'\n'
comment|'# swallow it. Therefore, wait() raising KeyboardInterrupt is'
nl|'\n'
comment|'# insufficient to stop trial. A suggested solution is to have'
nl|'\n'
comment|'# this code set a "stop trial" flag, or otherwise notify trial'
nl|'\n'
comment|'# that it should really try to stop as soon as possible.'
nl|'\n'
dedent|''
name|'raise'
name|'KeyboardInterrupt'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'results'
op|'='
name|'None'
newline|'\n'
name|'running'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnsupportedTrialFeature
dedent|''
dedent|''
dedent|''
name|'class'
name|'UnsupportedTrialFeature'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A feature of twisted.trial was used that pyunit cannot support."""'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PyUnitResultAdapter
dedent|''
name|'class'
name|'PyUnitResultAdapter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wrap a C{TestResult} from the standard library\'s C{unittest} so that it\n    supports the extended result types from Trial, and also supports\n    L{twisted.python.failure.Failure}s being passed to L{addError} and\n    L{addFailure}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'original'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param original: A C{TestResult} instance from C{unittest}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'original'
op|'='
name|'original'
newline|'\n'
nl|'\n'
DECL|member|_exc_info
dedent|''
name|'def'
name|'_exc_info'
op|'('
name|'self'
op|','
name|'err'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'util'
op|'.'
name|'excInfoOrFailureToExcInfo'
op|'('
name|'err'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startTest
dedent|''
name|'def'
name|'startTest'
op|'('
name|'self'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'original'
op|'.'
name|'startTest'
op|'('
name|'method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopTest
dedent|''
name|'def'
name|'stopTest'
op|'('
name|'self'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'original'
op|'.'
name|'stopTest'
op|'('
name|'method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addFailure
dedent|''
name|'def'
name|'addFailure'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'fail'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'original'
op|'.'
name|'addFailure'
op|'('
name|'test'
op|','
name|'self'
op|'.'
name|'_exc_info'
op|'('
name|'fail'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addError
dedent|''
name|'def'
name|'addError'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'original'
op|'.'
name|'addError'
op|'('
name|'test'
op|','
name|'self'
op|'.'
name|'_exc_info'
op|'('
name|'error'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_unsupported
dedent|''
name|'def'
name|'_unsupported'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'feature'
op|','
name|'info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'original'
op|'.'
name|'addFailure'
op|'('
nl|'\n'
name|'test'
op|','
nl|'\n'
op|'('
name|'UnsupportedTrialFeature'
op|','
nl|'\n'
name|'UnsupportedTrialFeature'
op|'('
name|'feature'
op|','
name|'info'
op|')'
op|','
nl|'\n'
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addSkip
dedent|''
name|'def'
name|'addSkip'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Report the skip as a failure.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_unsupported'
op|'('
name|'test'
op|','
string|"'skip'"
op|','
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addUnexpectedSuccess
dedent|''
name|'def'
name|'addUnexpectedSuccess'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'todo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Report the unexpected success as a failure.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_unsupported'
op|'('
name|'test'
op|','
string|"'unexpected success'"
op|','
name|'todo'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addExpectedFailure
dedent|''
name|'def'
name|'addExpectedFailure'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Report the expected failure (i.e. todo) as a failure.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_unsupported'
op|'('
name|'test'
op|','
string|"'expected failure'"
op|','
name|'error'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addSuccess
dedent|''
name|'def'
name|'addSuccess'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'original'
op|'.'
name|'addSuccess'
op|'('
name|'test'
op|')'
newline|'\n'
nl|'\n'
DECL|member|upDownError
dedent|''
name|'def'
name|'upDownError'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'error'
op|','
name|'warn'
op|','
name|'printStatus'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|suiteVisit
dedent|''
dedent|''
name|'def'
name|'suiteVisit'
op|'('
name|'suite'
op|','
name|'visitor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Visit each test in C{suite} with C{visitor}.\n\n    Deprecated in Twisted 8.0.\n\n    @param visitor: A callable which takes a single argument, the L{TestCase}\n    instance to visit.\n    @return: None\n    """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Test visitors deprecated in Twisted 8.0"'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'for'
name|'case'
name|'in'
name|'suite'
op|'.'
name|'_tests'
op|':'
newline|'\n'
indent|'        '
name|'visit'
op|'='
name|'getattr'
op|'('
name|'case'
op|','
string|"'visit'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'visit'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'visit'
op|'('
name|'visitor'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'case'
op|','
name|'pyunit'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'case'
op|'='
name|'itrial'
op|'.'
name|'ITestCase'
op|'('
name|'case'
op|')'
newline|'\n'
name|'case'
op|'.'
name|'visit'
op|'('
name|'visitor'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'case'
op|','
name|'pyunit'
op|'.'
name|'TestSuite'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'suiteVisit'
op|'('
name|'case'
op|','
name|'visitor'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'case'
op|'.'
name|'visit'
op|'('
name|'visitor'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSuite
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestSuite'
op|'('
name|'pyunit'
op|'.'
name|'TestSuite'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Extend the standard library\'s C{TestSuite} with support for the visitor\n    pattern and a consistently overrideable C{run} method.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|visit
name|'visit'
op|'='
name|'suiteVisit'
newline|'\n'
nl|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call C{run} on every member of the suite.\n        """'
newline|'\n'
comment|'# we implement this because Python 2.3 unittest defines this code'
nl|'\n'
comment|'# in __call__, whereas 2.4 defines the code in run.'
nl|'\n'
name|'for'
name|'test'
name|'in'
name|'self'
op|'.'
name|'_tests'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'result'
op|'.'
name|'shouldStop'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'test'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'TestDecorator'
op|'('
name|'components'
op|'.'
name|'proxyForInterface'
op|'('
name|'itrial'
op|'.'
name|'ITestCase'
op|','
nl|'\n'
DECL|class|TestDecorator
string|'"_originalTest"'
op|')'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Decorator for test cases.\n\n    @param _originalTest: The wrapped instance of test.\n    @type _originalTest: A provider of L{itrial.ITestCase}\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'itrial'
op|'.'
name|'ITestCase'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run the unit test.\n\n        @param result: A TestResult object.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run the unit test.\n\n        @param result: A TestResult object.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_originalTest'
op|'.'
name|'run'
op|'('
nl|'\n'
name|'reporter'
op|'.'
name|'_AdaptedReporter'
op|'('
name|'result'
op|','
name|'self'
op|'.'
name|'__class__'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_clearSuite
dedent|''
dedent|''
name|'def'
name|'_clearSuite'
op|'('
name|'suite'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Clear all tests from C{suite}.\n\n    This messes with the internals of C{suite}. In particular, it assumes that\n    the suite keeps all of its tests in a list in an instance variable called\n    C{_tests}.\n    """'
newline|'\n'
name|'suite'
op|'.'
name|'_tests'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|decorate
dedent|''
name|'def'
name|'decorate'
op|'('
name|'test'
op|','
name|'decorator'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Decorate all test cases in C{test} with C{decorator}.\n\n    C{test} can be a test case or a test suite. If it is a test suite, then the\n    structure of the suite is preserved.\n\n    L{decorate} tries to preserve the class of the test suites it finds, but\n    assumes the presence of the C{_tests} attribute on the suite.\n\n    @param test: The C{TestCase} or C{TestSuite} to decorate.\n\n    @param decorator: A unary callable used to decorate C{TestCase}s.\n\n    @return: A decorated C{TestCase} or a C{TestSuite} containing decorated\n        C{TestCase}s.\n    """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'tests'
op|'='
name|'iter'
op|'('
name|'test'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'decorator'
op|'('
name|'test'
op|')'
newline|'\n'
nl|'\n'
comment|"# At this point, we know that 'test' is a test suite."
nl|'\n'
dedent|''
name|'_clearSuite'
op|'('
name|'test'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'case'
name|'in'
name|'tests'
op|':'
newline|'\n'
indent|'        '
name|'test'
op|'.'
name|'addTest'
op|'('
name|'decorate'
op|'('
name|'case'
op|','
name|'decorator'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_PyUnitTestCaseAdapter
dedent|''
name|'class'
name|'_PyUnitTestCaseAdapter'
op|'('
name|'TestDecorator'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Adapt from pyunit.TestCase to ITestCase.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|visit
name|'def'
name|'visit'
op|'('
name|'self'
op|','
name|'visitor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Deprecated in Twisted 8.0.\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Test visitors deprecated in Twisted 8.0"'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'visitor'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_BrokenIDTestCaseAdapter
dedent|''
dedent|''
name|'class'
name|'_BrokenIDTestCaseAdapter'
op|'('
name|'_PyUnitTestCaseAdapter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Adapter for pyunit-style C{TestCase} subclasses that have undesirable id()\n    methods. That is L{pyunit.FunctionTestCase} and L{pyunit.DocTestCase}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|id
name|'def'
name|'id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the fully-qualified Python name of the doctest.\n        """'
newline|'\n'
name|'testID'
op|'='
name|'self'
op|'.'
name|'_originalTest'
op|'.'
name|'shortDescription'
op|'('
op|')'
newline|'\n'
name|'if'
name|'testID'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'testID'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_originalTest'
op|'.'
name|'id'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_ForceGarbageCollectionDecorator
dedent|''
dedent|''
name|'class'
name|'_ForceGarbageCollectionDecorator'
op|'('
name|'TestDecorator'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Forces garbage collection to be run before and after the test. Any errors\n    logged during the post-test collection are added to the test result as\n    errors.\n    """'
newline|'\n'
nl|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'gc'
op|'.'
name|'collect'
op|'('
op|')'
newline|'\n'
name|'TestDecorator'
op|'.'
name|'run'
op|'('
name|'self'
op|','
name|'result'
op|')'
newline|'\n'
name|'_logObserver'
op|'.'
name|'_add'
op|'('
op|')'
newline|'\n'
name|'gc'
op|'.'
name|'collect'
op|'('
op|')'
newline|'\n'
name|'for'
name|'error'
name|'in'
name|'_logObserver'
op|'.'
name|'getErrors'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'addError'
op|'('
name|'self'
op|','
name|'error'
op|')'
newline|'\n'
dedent|''
name|'_logObserver'
op|'.'
name|'flushErrors'
op|'('
op|')'
newline|'\n'
name|'_logObserver'
op|'.'
name|'_remove'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'components'
op|'.'
name|'registerAdapter'
op|'('
nl|'\n'
name|'_PyUnitTestCaseAdapter'
op|','
name|'pyunit'
op|'.'
name|'TestCase'
op|','
name|'itrial'
op|'.'
name|'ITestCase'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
name|'components'
op|'.'
name|'registerAdapter'
op|'('
nl|'\n'
name|'_BrokenIDTestCaseAdapter'
op|','
name|'pyunit'
op|'.'
name|'FunctionTestCase'
op|','
name|'itrial'
op|'.'
name|'ITestCase'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_docTestCase
name|'_docTestCase'
op|'='
name|'getattr'
op|'('
name|'doctest'
op|','
string|"'DocTestCase'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'_docTestCase'
op|':'
newline|'\n'
indent|'    '
name|'components'
op|'.'
name|'registerAdapter'
op|'('
nl|'\n'
name|'_BrokenIDTestCaseAdapter'
op|','
name|'_docTestCase'
op|','
name|'itrial'
op|'.'
name|'ITestCase'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_iterateTests
dedent|''
name|'def'
name|'_iterateTests'
op|'('
name|'testSuiteOrCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Iterate through all of the test cases in C{testSuiteOrCase}.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'suite'
op|'='
name|'iter'
op|'('
name|'testSuiteOrCase'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'        '
name|'yield'
name|'testSuiteOrCase'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'test'
name|'in'
name|'suite'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'subtest'
name|'in'
name|'_iterateTests'
op|'('
name|'test'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'subtest'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'# Support for Python 2.3'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'iter'
op|'('
name|'pyunit'
op|'.'
name|'TestSuite'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
comment|"# Python 2.3's TestSuite doesn't support iteration. Let's monkey patch it!"
nl|'\n'
DECL|function|__iter__
indent|'    '
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'iter'
op|'('
name|'self'
op|'.'
name|'_tests'
op|')'
newline|'\n'
dedent|''
name|'pyunit'
op|'.'
name|'TestSuite'
op|'.'
name|'__iter__'
op|'='
name|'__iter__'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_SubTestCase
dedent|''
name|'class'
name|'_SubTestCase'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'TestCase'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
string|"'run'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_inst
dedent|''
dedent|''
name|'_inst'
op|'='
name|'_SubTestCase'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_deprecate
name|'def'
name|'_deprecate'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Internal method used to deprecate top-level assertions. Do not use this.\n    """'
newline|'\n'
DECL|function|_
name|'def'
name|'_'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"unittest.%s is deprecated.  Instead use the %r "'
nl|'\n'
string|'"method on unittest.TestCase"'
op|'%'
op|'('
name|'name'
op|','
name|'name'
op|')'
op|','
nl|'\n'
name|'stacklevel'
op|'='
number|'2'
op|','
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'_inst'
op|','
name|'name'
op|')'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'_'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_assertions
dedent|''
name|'_assertions'
op|'='
op|'['
string|"'fail'"
op|','
string|"'failUnlessEqual'"
op|','
string|"'failIfEqual'"
op|','
string|"'failIfEquals'"
op|','
nl|'\n'
string|"'failUnless'"
op|','
string|"'failUnlessIdentical'"
op|','
string|"'failUnlessIn'"
op|','
nl|'\n'
string|"'failIfIdentical'"
op|','
string|"'failIfIn'"
op|','
string|"'failIf'"
op|','
nl|'\n'
string|"'failUnlessAlmostEqual'"
op|','
string|"'failIfAlmostEqual'"
op|','
nl|'\n'
string|"'failUnlessRaises'"
op|','
string|"'assertApproximates'"
op|','
nl|'\n'
string|"'assertFailure'"
op|','
string|"'failUnlessSubstring'"
op|','
string|"'failIfSubstring'"
op|','
nl|'\n'
string|"'assertAlmostEqual'"
op|','
string|"'assertAlmostEquals'"
op|','
nl|'\n'
string|"'assertNotAlmostEqual'"
op|','
string|"'assertNotAlmostEquals'"
op|','
string|"'assertEqual'"
op|','
nl|'\n'
string|"'assertEquals'"
op|','
string|"'assertNotEqual'"
op|','
string|"'assertNotEquals'"
op|','
nl|'\n'
string|"'assertRaises'"
op|','
string|"'assert_'"
op|','
string|"'assertIdentical'"
op|','
nl|'\n'
string|"'assertNotIdentical'"
op|','
string|"'assertIn'"
op|','
string|"'assertNotIn'"
op|','
nl|'\n'
string|"'failUnlessFailure'"
op|','
string|"'assertSubstring'"
op|','
string|"'assertNotSubstring'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
name|'for'
name|'methodName'
name|'in'
name|'_assertions'
op|':'
newline|'\n'
indent|'    '
name|'globals'
op|'('
op|')'
op|'['
name|'methodName'
op|']'
op|'='
name|'_deprecate'
op|'('
name|'methodName'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
name|'__all__'
op|'='
op|'['
string|"'TestCase'"
op|','
string|"'FailTest'"
op|','
string|"'SkipTest'"
op|']'
newline|'\n'
endmarker|''
end_unit

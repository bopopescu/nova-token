begin_unit
comment|'# -*- test-case-name: twisted.trial.test.test_reporter -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Maintainer: Jonathan Lange'
nl|'\n'
nl|'\n'
string|'"""\nDefines classes that handle the results of tests.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'reflect'
op|','
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'components'
name|'import'
name|'proxyForInterface'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'failure'
name|'import'
name|'Failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'untilConcludes'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'itrial'
op|','
name|'util'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'subunit'
name|'import'
name|'TestProtocolClient'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|TestProtocolClient
indent|'    '
name|'TestProtocolClient'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
DECL|variable|pyunit
name|'pyunit'
op|'='
name|'__import__'
op|'('
string|"'unittest'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BrokenTestCaseWarning
name|'class'
name|'BrokenTestCaseWarning'
op|'('
name|'Warning'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Emitted as a warning when an exception occurs in one of setUp or tearDown.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SafeStream
dedent|''
name|'class'
name|'SafeStream'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wraps a stream object so that all C{write} calls are wrapped in\n    L{untilConcludes}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'original'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'original'
op|'='
name|'original'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'original'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'untilConcludes'
op|'('
name|'self'
op|'.'
name|'original'
op|'.'
name|'write'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestResult
dedent|''
dedent|''
name|'class'
name|'TestResult'
op|'('
name|'pyunit'
op|'.'
name|'TestResult'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Accumulates the results of several L{twisted.trial.unittest.TestCase}s.\n\n    @ivar successes: count the number of successes achieved by the test run.\n    @type successes: C{int}\n    """'
newline|'\n'
name|'implements'
op|'('
name|'itrial'
op|'.'
name|'IReporter'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestResult'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'skips'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expectedFailures'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'unexpectedSuccesses'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'successes'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_timings'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|"'<%s run=%d errors=%d failures=%d todos=%d dones=%d skips=%d>'"
nl|'\n'
op|'%'
op|'('
name|'reflect'
op|'.'
name|'qual'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|','
name|'self'
op|'.'
name|'testsRun'
op|','
nl|'\n'
name|'len'
op|'('
name|'self'
op|'.'
name|'errors'
op|')'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'failures'
op|')'
op|','
nl|'\n'
name|'len'
op|'('
name|'self'
op|'.'
name|'expectedFailures'
op|')'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'skips'
op|')'
op|','
nl|'\n'
name|'len'
op|'('
name|'self'
op|'.'
name|'unexpectedSuccesses'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_getTime
dedent|''
name|'def'
name|'_getTime'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_getFailure
dedent|''
name|'def'
name|'_getFailure'
op|'('
name|'self'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convert a C{sys.exc_info()}-style tuple to a L{Failure}, if necessary.\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'error'
op|','
name|'tuple'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'Failure'
op|'('
name|'error'
op|'['
number|'1'
op|']'
op|','
name|'error'
op|'['
number|'0'
op|']'
op|','
name|'error'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'error'
newline|'\n'
nl|'\n'
DECL|member|startTest
dedent|''
name|'def'
name|'startTest'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This must be called before the given test is commenced.\n\n        @type test: L{pyunit.TestCase}\n        """'
newline|'\n'
name|'super'
op|'('
name|'TestResult'
op|','
name|'self'
op|')'
op|'.'
name|'startTest'
op|'('
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testStarted'
op|'='
name|'self'
op|'.'
name|'_getTime'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopTest
dedent|''
name|'def'
name|'stopTest'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This must be called after the given test is completed.\n\n        @type test: L{pyunit.TestCase}\n        """'
newline|'\n'
name|'super'
op|'('
name|'TestResult'
op|','
name|'self'
op|')'
op|'.'
name|'stopTest'
op|'('
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_lastTime'
op|'='
name|'self'
op|'.'
name|'_getTime'
op|'('
op|')'
op|'-'
name|'self'
op|'.'
name|'_testStarted'
newline|'\n'
nl|'\n'
DECL|member|addFailure
dedent|''
name|'def'
name|'addFailure'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'fail'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Report a failed assertion for the given test.\n\n        @type test: L{pyunit.TestCase}\n        @type fail: L{Failure} or L{tuple}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'failures'
op|'.'
name|'append'
op|'('
op|'('
name|'test'
op|','
name|'self'
op|'.'
name|'_getFailure'
op|'('
name|'fail'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addError
dedent|''
name|'def'
name|'addError'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Report an error that occurred while running the given test.\n\n        @type test: L{pyunit.TestCase}\n        @type error: L{Failure} or L{tuple}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'errors'
op|'.'
name|'append'
op|'('
op|'('
name|'test'
op|','
name|'self'
op|'.'
name|'_getFailure'
op|'('
name|'error'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addSkip
dedent|''
name|'def'
name|'addSkip'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Report that the given test was skipped.\n\n        In Trial, tests can be \'skipped\'. Tests are skipped mostly because there\n        is some platform or configuration issue that prevents them from being\n        run correctly.\n\n        @type test: L{pyunit.TestCase}\n        @type reason: L{str}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'skips'
op|'.'
name|'append'
op|'('
op|'('
name|'test'
op|','
name|'reason'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addUnexpectedSuccess
dedent|''
name|'def'
name|'addUnexpectedSuccess'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'todo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Report that the given test succeeded against expectations.\n\n        In Trial, tests can be marked \'todo\'. That is, they are expected to fail.\n        When a test that is expected to fail instead succeeds, it should call\n        this method to report the unexpected success.\n\n        @type test: L{pyunit.TestCase}\n        @type todo: L{unittest.Todo}\n        """'
newline|'\n'
comment|"# XXX - 'todo' should just be a string"
nl|'\n'
name|'self'
op|'.'
name|'unexpectedSuccesses'
op|'.'
name|'append'
op|'('
op|'('
name|'test'
op|','
name|'todo'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addExpectedFailure
dedent|''
name|'def'
name|'addExpectedFailure'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'error'
op|','
name|'todo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Report that the given test failed, and was expected to do so.\n\n        In Trial, tests can be marked \'todo\'. That is, they are expected to fail.\n\n        @type test: L{pyunit.TestCase}\n        @type error: L{Failure}\n        @type todo: L{unittest.Todo}\n        """'
newline|'\n'
comment|"# XXX - 'todo' should just be a string"
nl|'\n'
name|'self'
op|'.'
name|'expectedFailures'
op|'.'
name|'append'
op|'('
op|'('
name|'test'
op|','
name|'error'
op|','
name|'todo'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addSuccess
dedent|''
name|'def'
name|'addSuccess'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Report that the given test succeeded.\n\n        @type test: L{pyunit.TestCase}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'successes'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|upDownError
dedent|''
name|'def'
name|'upDownError'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'error'
op|','
name|'warn'
op|','
name|'printStatus'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"upDownError is deprecated in Twisted 8.0."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cleanupErrors
dedent|''
name|'def'
name|'cleanupErrors'
op|'('
name|'self'
op|','
name|'errs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Report an error that occurred during the cleanup between tests.\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Cleanup errors are actual errors. Use addError. "'
nl|'\n'
string|'"Deprecated in Twisted 8.0"'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startSuite
dedent|''
name|'def'
name|'startSuite'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"startSuite deprecated in Twisted 8.0"'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|endSuite
dedent|''
name|'def'
name|'endSuite'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"endSuite deprecated in Twisted 8.0"'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|done
dedent|''
name|'def'
name|'done'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The test suite has finished running.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'TestResultDecorator'
op|'('
name|'proxyForInterface'
op|'('
name|'itrial'
op|'.'
name|'IReporter'
op|','
nl|'\n'
DECL|class|TestResultDecorator
string|'"_originalReporter"'
op|')'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Base class for TestResult decorators.\n\n    @ivar _originalReporter: The wrapped instance of reporter.\n    @type _originalReporter: A provider of L{itrial.IReporter}\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'itrial'
op|'.'
name|'IReporter'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UncleanWarningsReporterWrapper
dedent|''
name|'class'
name|'UncleanWarningsReporterWrapper'
op|'('
name|'TestResultDecorator'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A wrapper for a reporter that converts L{util.DirtyReactorError}s\n    to warnings.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'itrial'
op|'.'
name|'IReporter'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addError
name|'def'
name|'addError'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the error is a L{util.DirtyReactorError}, instead of\n        reporting it as a normal error, throw a warning.\n        """'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'isinstance'
op|'('
name|'error'
op|','
name|'Failure'
op|')'
nl|'\n'
name|'and'
name|'error'
op|'.'
name|'check'
op|'('
name|'util'
op|'.'
name|'DirtyReactorAggregateError'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'error'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_originalReporter'
op|'.'
name|'addError'
op|'('
name|'test'
op|','
name|'error'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_AdaptedReporter
dedent|''
dedent|''
dedent|''
name|'class'
name|'_AdaptedReporter'
op|'('
name|'TestResultDecorator'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    TestResult decorator that makes sure that addError only gets tests that\n    have been adapted with a particular test adapter.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'original'
op|','
name|'testAdapter'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Construct an L{_AdaptedReporter}.\n\n        @param original: An {itrial.IReporter}.\n        @param testAdapter: A callable that returns an L{itrial.ITestCase}.\n        """'
newline|'\n'
name|'TestResultDecorator'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'original'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'testAdapter'
op|'='
name|'testAdapter'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addError
dedent|''
name|'def'
name|'addError'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{itrial.IReporter}.\n        """'
newline|'\n'
name|'test'
op|'='
name|'self'
op|'.'
name|'testAdapter'
op|'('
name|'test'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_originalReporter'
op|'.'
name|'addError'
op|'('
name|'test'
op|','
name|'error'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addExpectedFailure
dedent|''
name|'def'
name|'addExpectedFailure'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'failure'
op|','
name|'todo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{itrial.IReporter}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_originalReporter'
op|'.'
name|'addExpectedFailure'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'testAdapter'
op|'('
name|'test'
op|')'
op|','
name|'failure'
op|','
name|'todo'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addFailure
dedent|''
name|'def'
name|'addFailure'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{itrial.IReporter}.\n        """'
newline|'\n'
name|'test'
op|'='
name|'self'
op|'.'
name|'testAdapter'
op|'('
name|'test'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_originalReporter'
op|'.'
name|'addFailure'
op|'('
name|'test'
op|','
name|'failure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addSkip
dedent|''
name|'def'
name|'addSkip'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'skip'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{itrial.IReporter}.\n        """'
newline|'\n'
name|'test'
op|'='
name|'self'
op|'.'
name|'testAdapter'
op|'('
name|'test'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_originalReporter'
op|'.'
name|'addSkip'
op|'('
name|'test'
op|','
name|'skip'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addUnexpectedSuccess
dedent|''
name|'def'
name|'addUnexpectedSuccess'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'todo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{itrial.IReporter}.\n        """'
newline|'\n'
name|'test'
op|'='
name|'self'
op|'.'
name|'testAdapter'
op|'('
name|'test'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_originalReporter'
op|'.'
name|'addUnexpectedSuccess'
op|'('
name|'test'
op|','
name|'todo'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|startTest
dedent|''
name|'def'
name|'startTest'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{itrial.IReporter}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_originalReporter'
op|'.'
name|'startTest'
op|'('
name|'self'
op|'.'
name|'testAdapter'
op|'('
name|'test'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stopTest
dedent|''
name|'def'
name|'stopTest'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        See L{itrial.IReporter}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_originalReporter'
op|'.'
name|'stopTest'
op|'('
name|'self'
op|'.'
name|'testAdapter'
op|'('
name|'test'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Reporter
dedent|''
dedent|''
name|'class'
name|'Reporter'
op|'('
name|'TestResult'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A basic L{TestResult} with support for writing to a stream.\n\n    @ivar _startTime: The time when the first test was started. It defaults to\n        C{None}, which means that no test was actually launched.\n    @type _startTime: C{float} or C{NoneType}\n\n    @ivar _warningCache: A C{set} of tuples of warning message (file, line,\n        text, category) which have already been written to the output stream\n        during the currently executing test.  This is used to avoid writing\n        duplicates of the same warning to the output stream.\n    @type _warningCache: C{set}\n\n    @ivar _publisher: The log publisher which will be observed for warning\n        events.\n    @type _publisher: L{LogPublisher} (or another type sufficiently similar)\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'itrial'
op|'.'
name|'IReporter'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_separator
name|'_separator'
op|'='
string|"'-'"
op|'*'
number|'79'
newline|'\n'
name|'_doubleSeparator'
op|'='
string|"'='"
op|'*'
number|'79'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'stream'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|','
name|'tbformat'
op|'='
string|"'default'"
op|','
name|'realtime'
op|'='
name|'False'
op|','
nl|'\n'
name|'publisher'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Reporter'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_stream'
op|'='
name|'SafeStream'
op|'('
name|'stream'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tbformat'
op|'='
name|'tbformat'
newline|'\n'
name|'self'
op|'.'
name|'realtime'
op|'='
name|'realtime'
newline|'\n'
name|'self'
op|'.'
name|'_startTime'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_warningCache'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Start observing log events so as to be able to report warnings.'
nl|'\n'
name|'self'
op|'.'
name|'_publisher'
op|'='
name|'publisher'
newline|'\n'
name|'if'
name|'publisher'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'publisher'
op|'.'
name|'addObserver'
op|'('
name|'self'
op|'.'
name|'_observeWarnings'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_observeWarnings
dedent|''
dedent|''
name|'def'
name|'_observeWarnings'
op|'('
name|'self'
op|','
name|'event'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Observe warning events and write them to C{self._stream}.\n\n        This method is a log observer which will be registered with\n        C{self._publisher.addObserver}.\n\n        @param event: A C{dict} from the logging system.  If it has a\n            C{\'warning\'} key, a logged warning will be extracted from it and\n            possibly written to C{self.stream}.\n        """'
newline|'\n'
name|'if'
string|"'warning'"
name|'in'
name|'event'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|'='
op|'('
name|'event'
op|'['
string|"'filename'"
op|']'
op|','
name|'event'
op|'['
string|"'lineno'"
op|']'
op|','
nl|'\n'
name|'event'
op|'['
string|"'category'"
op|']'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
name|'str'
op|'('
name|'event'
op|'['
string|"'warning'"
op|']'
op|')'
op|')'
newline|'\n'
name|'if'
name|'key'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_warningCache'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_warningCache'
op|'.'
name|'add'
op|'('
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_stream'
op|'.'
name|'write'
op|'('
string|"'%s:%s: %s: %s\\n'"
op|'%'
name|'key'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stream
dedent|''
dedent|''
dedent|''
name|'def'
name|'stream'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"stream is deprecated in Twisted 8.0."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_stream'
newline|'\n'
DECL|variable|stream
dedent|''
name|'stream'
op|'='
name|'property'
op|'('
name|'stream'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|separator
name|'def'
name|'separator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"separator is deprecated in Twisted 8.0."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_separator'
newline|'\n'
DECL|variable|separator
dedent|''
name|'separator'
op|'='
name|'property'
op|'('
name|'separator'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|startTest
name|'def'
name|'startTest'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a test begins to run. Records the time when it was first\n        called and resets the warning cache.\n\n        @param test: L{ITestCase}\n        """'
newline|'\n'
name|'super'
op|'('
name|'Reporter'
op|','
name|'self'
op|')'
op|'.'
name|'startTest'
op|'('
name|'test'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_startTime'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_startTime'
op|'='
name|'self'
op|'.'
name|'_getTime'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_warningCache'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addFailure
dedent|''
name|'def'
name|'addFailure'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'fail'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a test fails. If L{realtime} is set, then it prints the\n        error to the stream.\n\n        @param test: L{ITestCase} that failed.\n        @param fail: L{failure.Failure} containing the error.\n        """'
newline|'\n'
name|'super'
op|'('
name|'Reporter'
op|','
name|'self'
op|')'
op|'.'
name|'addFailure'
op|'('
name|'test'
op|','
name|'fail'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'realtime'
op|':'
newline|'\n'
indent|'            '
name|'fail'
op|'='
name|'self'
op|'.'
name|'failures'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'1'
op|']'
comment|"# guarantee it's a Failure"
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
name|'self'
op|'.'
name|'_formatFailureTraceback'
op|'('
name|'fail'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addError
dedent|''
dedent|''
name|'def'
name|'addError'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a test raises an error. If L{realtime} is set, then it\n        prints the error to the stream.\n\n        @param test: L{ITestCase} that raised the error.\n        @param error: L{failure.Failure} containing the error.\n        """'
newline|'\n'
name|'error'
op|'='
name|'self'
op|'.'
name|'_getFailure'
op|'('
name|'error'
op|')'
newline|'\n'
name|'super'
op|'('
name|'Reporter'
op|','
name|'self'
op|')'
op|'.'
name|'addError'
op|'('
name|'test'
op|','
name|'error'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'realtime'
op|':'
newline|'\n'
indent|'            '
name|'error'
op|'='
name|'self'
op|'.'
name|'errors'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'1'
op|']'
comment|"# guarantee it's a Failure"
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
name|'self'
op|'.'
name|'_formatFailureTraceback'
op|'('
name|'error'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'format'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"write is deprecated in Twisted 8.0."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
name|'format'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_write
dedent|''
name|'def'
name|'_write'
op|'('
name|'self'
op|','
name|'format'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Safely write to the reporter\'s stream.\n\n        @param format: A format string to write.\n        @param *args: The arguments for the format string.\n        """'
newline|'\n'
name|'s'
op|'='
name|'str'
op|'('
name|'format'
op|')'
newline|'\n'
name|'assert'
name|'isinstance'
op|'('
name|'s'
op|','
name|'type'
op|'('
string|"''"
op|')'
op|')'
newline|'\n'
name|'if'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_stream'
op|'.'
name|'write'
op|'('
name|'s'
op|'%'
name|'args'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_stream'
op|'.'
name|'write'
op|'('
name|'s'
op|')'
newline|'\n'
dedent|''
name|'untilConcludes'
op|'('
name|'self'
op|'.'
name|'_stream'
op|'.'
name|'flush'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|writeln
dedent|''
name|'def'
name|'writeln'
op|'('
name|'self'
op|','
name|'format'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"writeln is deprecated in Twisted 8.0."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_writeln'
op|'('
name|'format'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_writeln
dedent|''
name|'def'
name|'_writeln'
op|'('
name|'self'
op|','
name|'format'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Safely write a line to the reporter\'s stream. Newline is appended to\n        the format string.\n\n        @param format: A format string to write.\n        @param *args: The arguments for the format string.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
name|'format'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|upDownError
dedent|''
name|'def'
name|'upDownError'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'error'
op|','
name|'warn'
op|','
name|'printStatus'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Reporter'
op|','
name|'self'
op|')'
op|'.'
name|'upDownError'
op|'('
name|'method'
op|','
name|'error'
op|','
name|'warn'
op|','
name|'printStatus'
op|')'
newline|'\n'
name|'if'
name|'warn'
op|':'
newline|'\n'
indent|'            '
name|'tbStr'
op|'='
name|'self'
op|'.'
name|'_formatFailureTraceback'
op|'('
name|'error'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
name|'tbStr'
op|')'
newline|'\n'
name|'msg'
op|'='
op|'('
string|'"caught exception in %s, your TestCase is broken\\n\\n%s"'
nl|'\n'
op|'%'
op|'('
name|'method'
op|','
name|'tbStr'
op|')'
op|')'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'msg'
op|','
name|'BrokenTestCaseWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cleanupErrors
dedent|''
dedent|''
name|'def'
name|'cleanupErrors'
op|'('
name|'self'
op|','
name|'errs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Reporter'
op|','
name|'self'
op|')'
op|'.'
name|'cleanupErrors'
op|'('
name|'errs'
op|')'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"%s\\n%s"'
op|'%'
op|'('
string|'"REACTOR UNCLEAN! traceback(s) follow: "'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_formatFailureTraceback'
op|'('
name|'errs'
op|')'
op|')'
op|','
nl|'\n'
name|'BrokenTestCaseWarning'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_trimFrames
dedent|''
name|'def'
name|'_trimFrames'
op|'('
name|'self'
op|','
name|'frames'
op|')'
op|':'
newline|'\n'
comment|'# when a method fails synchronously, the stack looks like this:'
nl|'\n'
comment|'#  [0]: defer.maybeDeferred()'
nl|'\n'
comment|'#  [1]: utils.runWithWarningsSuppressed()'
nl|'\n'
comment|'#  [2:-2]: code in the test method which failed'
nl|'\n'
comment|'#  [-1]: unittest.fail'
nl|'\n'
nl|'\n'
comment|'# when a method fails inside a Deferred (i.e., when the test method'
nl|'\n'
comment|"# returns a Deferred, and that Deferred's errback fires), the stack"
nl|'\n'
comment|'# captured inside the resulting Failure looks like this:'
nl|'\n'
comment|'#  [0]: defer.Deferred._runCallbacks'
nl|'\n'
comment|'#  [1:-2]: code in the testmethod which failed'
nl|'\n'
comment|'#  [-1]: unittest.fail'
nl|'\n'
nl|'\n'
comment|'# as a result, we want to trim either [maybeDeferred,runWWS] or'
nl|'\n'
comment|'# [Deferred._runCallbacks] from the front, and trim the'
nl|'\n'
comment|'# [unittest.fail] from the end.'
nl|'\n'
nl|'\n'
comment|'# There is also another case, when the test method is badly defined and'
nl|'\n'
comment|'# contains extra arguments.'
nl|'\n'
nl|'\n'
indent|'        '
name|'newFrames'
op|'='
name|'list'
op|'('
name|'frames'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'frames'
op|')'
op|'<'
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'newFrames'
newline|'\n'
nl|'\n'
dedent|''
name|'first'
op|'='
name|'newFrames'
op|'['
number|'0'
op|']'
newline|'\n'
name|'second'
op|'='
name|'newFrames'
op|'['
number|'1'
op|']'
newline|'\n'
name|'if'
op|'('
name|'first'
op|'['
number|'0'
op|']'
op|'=='
string|'"maybeDeferred"'
nl|'\n'
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'first'
op|'['
number|'1'
op|']'
op|')'
op|')'
op|'['
number|'0'
op|']'
op|'=='
string|"'defer'"
nl|'\n'
name|'and'
name|'second'
op|'['
number|'0'
op|']'
op|'=='
string|'"runWithWarningsSuppressed"'
nl|'\n'
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'second'
op|'['
number|'1'
op|']'
op|')'
op|')'
op|'['
number|'0'
op|']'
op|'=='
string|"'utils'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'newFrames'
op|'='
name|'newFrames'
op|'['
number|'2'
op|':'
op|']'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'first'
op|'['
number|'0'
op|']'
op|'=='
string|'"_runCallbacks"'
nl|'\n'
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'first'
op|'['
number|'1'
op|']'
op|')'
op|')'
op|'['
number|'0'
op|']'
op|'=='
string|"'defer'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'newFrames'
op|'='
name|'newFrames'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'newFrames'
op|':'
newline|'\n'
comment|'# The method fails before getting called, probably an argument problem'
nl|'\n'
indent|'            '
name|'return'
name|'newFrames'
newline|'\n'
nl|'\n'
dedent|''
name|'last'
op|'='
name|'newFrames'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'if'
op|'('
name|'last'
op|'['
number|'0'
op|']'
op|'.'
name|'startswith'
op|'('
string|"'fail'"
op|')'
nl|'\n'
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'last'
op|'['
number|'1'
op|']'
op|')'
op|')'
op|'['
number|'0'
op|']'
op|'=='
string|"'unittest'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'newFrames'
op|'='
name|'newFrames'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'newFrames'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_formatFailureTraceback
dedent|''
name|'def'
name|'_formatFailureTraceback'
op|'('
name|'self'
op|','
name|'fail'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'fail'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fail'
op|'.'
name|'rstrip'
op|'('
op|')'
op|'+'
string|"'\\n'"
newline|'\n'
dedent|''
name|'fail'
op|'.'
name|'frames'
op|','
name|'frames'
op|'='
name|'self'
op|'.'
name|'_trimFrames'
op|'('
name|'fail'
op|'.'
name|'frames'
op|')'
op|','
name|'fail'
op|'.'
name|'frames'
newline|'\n'
name|'result'
op|'='
name|'fail'
op|'.'
name|'getTraceback'
op|'('
name|'detail'
op|'='
name|'self'
op|'.'
name|'tbformat'
op|','
name|'elideFrameworkCode'
op|'='
name|'True'
op|')'
newline|'\n'
name|'fail'
op|'.'
name|'frames'
op|'='
name|'frames'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_printResults
dedent|''
name|'def'
name|'_printResults'
op|'('
name|'self'
op|','
name|'flavour'
op|','
name|'errors'
op|','
name|'formatter'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Print a group of errors to the stream.\n\n        @param flavour: A string indicating the kind of error (e.g. \'TODO\').\n        @param errors: A list of errors, often L{failure.Failure}s, but\n            sometimes \'todo\' errors.\n        @param formatter: A callable that knows how to format the errors.\n        """'
newline|'\n'
name|'for'
name|'content'
name|'in'
name|'errors'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_writeln'
op|'('
name|'self'
op|'.'
name|'_doubleSeparator'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_writeln'
op|'('
string|"'%s: %s'"
op|'%'
op|'('
name|'flavour'
op|','
name|'content'
op|'['
number|'0'
op|']'
op|'.'
name|'id'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_writeln'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
name|'formatter'
op|'('
op|'*'
op|'('
name|'content'
op|'['
number|'1'
op|':'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_printExpectedFailure
dedent|''
dedent|''
name|'def'
name|'_printExpectedFailure'
op|'('
name|'self'
op|','
name|'error'
op|','
name|'todo'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'Reason: %r\\n%s'"
op|'%'
op|'('
name|'todo'
op|'.'
name|'reason'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_formatFailureTraceback'
op|'('
name|'error'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_printUnexpectedSuccess
dedent|''
name|'def'
name|'_printUnexpectedSuccess'
op|'('
name|'self'
op|','
name|'todo'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ret'
op|'='
string|"'Reason: %r\\n'"
op|'%'
op|'('
name|'todo'
op|'.'
name|'reason'
op|','
op|')'
newline|'\n'
name|'if'
name|'todo'
op|'.'
name|'errors'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'+='
string|"'Expected errors: %s\\n'"
op|'%'
op|'('
string|"', '"
op|'.'
name|'join'
op|'('
name|'todo'
op|'.'
name|'errors'
op|')'
op|','
op|')'
newline|'\n'
dedent|''
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|printErrors
dedent|''
name|'def'
name|'printErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Print all of the non-success results in full to the stream.\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"printErrors is deprecated in Twisted 8.0."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_printErrors'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_printErrors
dedent|''
name|'def'
name|'_printErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Print all of the non-success results to the stream in full.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_printResults'
op|'('
string|"'[SKIPPED]'"
op|','
name|'self'
op|'.'
name|'skips'
op|','
name|'lambda'
name|'x'
op|':'
string|"'%s\\n'"
op|'%'
name|'x'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_printResults'
op|'('
string|"'[TODO]'"
op|','
name|'self'
op|'.'
name|'expectedFailures'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_printExpectedFailure'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_printResults'
op|'('
string|"'[FAIL]'"
op|','
name|'self'
op|'.'
name|'failures'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_formatFailureTraceback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_printResults'
op|'('
string|"'[ERROR]'"
op|','
name|'self'
op|'.'
name|'errors'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_formatFailureTraceback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_printResults'
op|'('
string|"'[SUCCESS!?!]'"
op|','
name|'self'
op|'.'
name|'unexpectedSuccesses'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_printUnexpectedSuccess'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getSummary
dedent|''
name|'def'
name|'_getSummary'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a formatted count of tests status results.\n        """'
newline|'\n'
name|'summaries'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'stat'
name|'in'
op|'('
string|'"skips"'
op|','
string|'"expectedFailures"'
op|','
string|'"failures"'
op|','
string|'"errors"'
op|','
nl|'\n'
string|'"unexpectedSuccesses"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'num'
op|'='
name|'len'
op|'('
name|'getattr'
op|'('
name|'self'
op|','
name|'stat'
op|')'
op|')'
newline|'\n'
name|'if'
name|'num'
op|':'
newline|'\n'
indent|'                '
name|'summaries'
op|'.'
name|'append'
op|'('
string|"'%s=%d'"
op|'%'
op|'('
name|'stat'
op|','
name|'num'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'successes'
op|':'
newline|'\n'
indent|'           '
name|'summaries'
op|'.'
name|'append'
op|'('
string|"'successes=%d'"
op|'%'
op|'('
name|'self'
op|'.'
name|'successes'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'summary'
op|'='
op|'('
name|'summaries'
name|'and'
string|"' ('"
op|'+'
string|"', '"
op|'.'
name|'join'
op|'('
name|'summaries'
op|')'
op|'+'
string|"')'"
op|')'
name|'or'
string|"''"
newline|'\n'
name|'return'
name|'summary'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|printSummary
dedent|''
name|'def'
name|'printSummary'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Print a line summarising the test results to the stream.\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"printSummary is deprecated in Twisted 8.0."'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_printSummary'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_printSummary
dedent|''
name|'def'
name|'_printSummary'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Print a line summarising the test results to the stream.\n        """'
newline|'\n'
name|'summary'
op|'='
name|'self'
op|'.'
name|'_getSummary'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'status'
op|'='
string|'"PASSED"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'status'
op|'='
string|'"FAILED"'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_write'
op|'('
string|'"%s%s\\n"'
op|','
name|'status'
op|','
name|'summary'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|done
dedent|''
name|'def'
name|'done'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Summarize the result of the test run.\n\n        The summary includes a report of all of the errors, todos, skips and\n        so forth that occurred during the run. It also includes the number of\n        tests that were run and how long it took to run them (not including\n        load time).\n\n        Expects that L{_printErrors}, L{_writeln}, L{_write}, L{_printSummary}\n        and L{_separator} are all implemented.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_publisher'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_publisher'
op|'.'
name|'removeObserver'
op|'('
name|'self'
op|'.'
name|'_observeWarnings'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_printErrors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_writeln'
op|'('
name|'self'
op|'.'
name|'_separator'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_startTime'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_writeln'
op|'('
string|"'Ran %d tests in %.3fs'"
op|','
name|'self'
op|'.'
name|'testsRun'
op|','
nl|'\n'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'self'
op|'.'
name|'_startTime'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_printSummary'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MinimalReporter
dedent|''
dedent|''
name|'class'
name|'MinimalReporter'
op|'('
name|'Reporter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A minimalist reporter that prints only a summary of the test result, in\n    the form of (timeTaken, #tests, #tests, #errors, #failures, #skips).\n    """'
newline|'\n'
nl|'\n'
DECL|member|_printErrors
name|'def'
name|'_printErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Don\'t print a detailed summary of errors. We only care about the\n        counts.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_printSummary
dedent|''
name|'def'
name|'_printSummary'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Print out a one-line summary of the form:\n        \'%(runtime) %(number_of_tests) %(number_of_tests) %(num_errors)\n        %(num_failures) %(num_skips)\'\n        """'
newline|'\n'
name|'numTests'
op|'='
name|'self'
op|'.'
name|'testsRun'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_startTime'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'timing'
op|'='
name|'self'
op|'.'
name|'_getTime'
op|'('
op|')'
op|'-'
name|'self'
op|'.'
name|'_startTime'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'timing'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'t'
op|'='
op|'('
name|'timing'
op|','
name|'numTests'
op|','
name|'numTests'
op|','
nl|'\n'
name|'len'
op|'('
name|'self'
op|'.'
name|'errors'
op|')'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'failures'
op|')'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'skips'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_writeln'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'t'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TextReporter
dedent|''
dedent|''
name|'class'
name|'TextReporter'
op|'('
name|'Reporter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Simple reporter that prints a single character for each test as it runs,\n    along with the standard Trial summary text.\n    """'
newline|'\n'
nl|'\n'
DECL|member|addSuccess
name|'def'
name|'addSuccess'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TextReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addSuccess'
op|'('
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|"'.'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addError
dedent|''
name|'def'
name|'addError'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TextReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addError'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|"'E'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addFailure
dedent|''
name|'def'
name|'addFailure'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TextReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addFailure'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|"'F'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addSkip
dedent|''
name|'def'
name|'addSkip'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TextReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addSkip'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|"'S'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addExpectedFailure
dedent|''
name|'def'
name|'addExpectedFailure'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TextReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addExpectedFailure'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|"'T'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addUnexpectedSuccess
dedent|''
name|'def'
name|'addUnexpectedSuccess'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TextReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addUnexpectedSuccess'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|"'!'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|VerboseTextReporter
dedent|''
dedent|''
name|'class'
name|'VerboseTextReporter'
op|'('
name|'Reporter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A verbose reporter that prints the name of each test as it is running.\n\n    Each line is printed with the name of the test, followed by the result of\n    that test.\n    """'
newline|'\n'
nl|'\n'
comment|'# This is actually the bwverbose option'
nl|'\n'
nl|'\n'
DECL|member|startTest
name|'def'
name|'startTest'
op|'('
name|'self'
op|','
name|'tm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_write'
op|'('
string|"'%s ... '"
op|','
name|'tm'
op|'.'
name|'id'
op|'('
op|')'
op|')'
newline|'\n'
name|'super'
op|'('
name|'VerboseTextReporter'
op|','
name|'self'
op|')'
op|'.'
name|'startTest'
op|'('
name|'tm'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addSuccess
dedent|''
name|'def'
name|'addSuccess'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VerboseTextReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addSuccess'
op|'('
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|"'[OK]'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addError
dedent|''
name|'def'
name|'addError'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VerboseTextReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addError'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|"'[ERROR]'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addFailure
dedent|''
name|'def'
name|'addFailure'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VerboseTextReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addFailure'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|"'[FAILURE]'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addSkip
dedent|''
name|'def'
name|'addSkip'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VerboseTextReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addSkip'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|"'[SKIPPED]'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addExpectedFailure
dedent|''
name|'def'
name|'addExpectedFailure'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VerboseTextReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addExpectedFailure'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|"'[TODO]'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addUnexpectedSuccess
dedent|''
name|'def'
name|'addUnexpectedSuccess'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VerboseTextReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addUnexpectedSuccess'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|"'[SUCCESS!?!]'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stopTest
dedent|''
name|'def'
name|'stopTest'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VerboseTextReporter'
op|','
name|'self'
op|')'
op|'.'
name|'stopTest'
op|'('
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TimingTextReporter
dedent|''
dedent|''
name|'class'
name|'TimingTextReporter'
op|'('
name|'VerboseTextReporter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Prints out each test as it is running, followed by the time taken for each\n    test to run.\n    """'
newline|'\n'
nl|'\n'
DECL|member|stopTest
name|'def'
name|'stopTest'
op|'('
name|'self'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mark the test as stopped, and write the time it took to run the test\n        to the stream.\n        """'
newline|'\n'
name|'super'
op|'('
name|'TimingTextReporter'
op|','
name|'self'
op|')'
op|'.'
name|'stopTest'
op|'('
name|'method'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|'"(%.03f secs)\\n"'
op|'%'
name|'self'
op|'.'
name|'_lastTime'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_AnsiColorizer
dedent|''
dedent|''
name|'class'
name|'_AnsiColorizer'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A colorizer is an object that loosely wraps around a stream, allowing\n    callers to write text to the stream in a particular color.\n\n    Colorizer classes must implement C{supported()} and C{write(text, color)}.\n    """'
newline|'\n'
DECL|variable|_colors
name|'_colors'
op|'='
name|'dict'
op|'('
name|'black'
op|'='
number|'30'
op|','
name|'red'
op|'='
number|'31'
op|','
name|'green'
op|'='
number|'32'
op|','
name|'yellow'
op|'='
number|'33'
op|','
nl|'\n'
name|'blue'
op|'='
number|'34'
op|','
name|'magenta'
op|'='
number|'35'
op|','
name|'cyan'
op|'='
number|'36'
op|','
name|'white'
op|'='
number|'37'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'stream'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stream'
op|'='
name|'stream'
newline|'\n'
nl|'\n'
DECL|member|supported
dedent|''
name|'def'
name|'supported'
op|'('
name|'cls'
op|','
name|'stream'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A class method that returns True if the current platform supports\n        coloring terminal output using this method. Returns False otherwise.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'stream'
op|'.'
name|'isatty'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
comment|'# auto color only on TTYs'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'curses'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'curses'
op|'.'
name|'tigetnum'
op|'('
string|'"colors"'
op|')'
op|'>'
number|'2'
newline|'\n'
dedent|''
name|'except'
name|'curses'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'                    '
name|'curses'
op|'.'
name|'setupterm'
op|'('
op|')'
newline|'\n'
name|'return'
name|'curses'
op|'.'
name|'tigetnum'
op|'('
string|'"colors"'
op|')'
op|'>'
number|'2'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
comment|'# guess false in case of error'
nl|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
DECL|variable|supported
dedent|''
dedent|''
dedent|''
name|'supported'
op|'='
name|'classmethod'
op|'('
name|'supported'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'text'
op|','
name|'color'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write the given text to the stream in the given color.\n\n        @param text: Text to be written to the stream.\n\n        @param color: A string label for a color. e.g. \'red\', \'white\'.\n        """'
newline|'\n'
name|'color'
op|'='
name|'self'
op|'.'
name|'_colors'
op|'['
name|'color'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'write'
op|'('
string|"'\\x1b[%s;1m%s\\x1b[0m'"
op|'%'
op|'('
name|'color'
op|','
name|'text'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Win32Colorizer
dedent|''
dedent|''
name|'class'
name|'_Win32Colorizer'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    See _AnsiColorizer docstring.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'stream'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'win32console'
name|'import'
name|'GetStdHandle'
op|','
name|'STD_OUTPUT_HANDLE'
op|','
name|'FOREGROUND_RED'
op|','
name|'FOREGROUND_BLUE'
op|','
name|'FOREGROUND_GREEN'
op|','
name|'FOREGROUND_INTENSITY'
newline|'\n'
name|'red'
op|','
name|'green'
op|','
name|'blue'
op|','
name|'bold'
op|'='
op|'('
name|'FOREGROUND_RED'
op|','
name|'FOREGROUND_GREEN'
op|','
nl|'\n'
name|'FOREGROUND_BLUE'
op|','
name|'FOREGROUND_INTENSITY'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'='
name|'stream'
newline|'\n'
name|'self'
op|'.'
name|'screenBuffer'
op|'='
name|'GetStdHandle'
op|'('
name|'STD_OUTPUT_HANDLE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_colors'
op|'='
op|'{'
nl|'\n'
string|"'normal'"
op|':'
name|'red'
op|'|'
name|'green'
op|'|'
name|'blue'
op|','
nl|'\n'
string|"'red'"
op|':'
name|'red'
op|'|'
name|'bold'
op|','
nl|'\n'
string|"'green'"
op|':'
name|'green'
op|'|'
name|'bold'
op|','
nl|'\n'
string|"'blue'"
op|':'
name|'blue'
op|'|'
name|'bold'
op|','
nl|'\n'
string|"'yellow'"
op|':'
name|'red'
op|'|'
name|'green'
op|'|'
name|'bold'
op|','
nl|'\n'
string|"'magenta'"
op|':'
name|'red'
op|'|'
name|'blue'
op|'|'
name|'bold'
op|','
nl|'\n'
string|"'cyan'"
op|':'
name|'green'
op|'|'
name|'blue'
op|'|'
name|'bold'
op|','
nl|'\n'
string|"'white'"
op|':'
name|'red'
op|'|'
name|'green'
op|'|'
name|'blue'
op|'|'
name|'bold'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|supported
dedent|''
name|'def'
name|'supported'
op|'('
name|'cls'
op|','
name|'stream'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'win32console'
newline|'\n'
name|'screenBuffer'
op|'='
name|'win32console'
op|'.'
name|'GetStdHandle'
op|'('
nl|'\n'
name|'win32console'
op|'.'
name|'STD_OUTPUT_HANDLE'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'import'
name|'pywintypes'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'screenBuffer'
op|'.'
name|'SetConsoleTextAttribute'
op|'('
nl|'\n'
name|'win32console'
op|'.'
name|'FOREGROUND_RED'
op|'|'
nl|'\n'
name|'win32console'
op|'.'
name|'FOREGROUND_GREEN'
op|'|'
nl|'\n'
name|'win32console'
op|'.'
name|'FOREGROUND_BLUE'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'pywintypes'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
DECL|variable|supported
dedent|''
dedent|''
name|'supported'
op|'='
name|'classmethod'
op|'('
name|'supported'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'text'
op|','
name|'color'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'color'
op|'='
name|'self'
op|'.'
name|'_colors'
op|'['
name|'color'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'screenBuffer'
op|'.'
name|'SetConsoleTextAttribute'
op|'('
name|'color'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'write'
op|'('
name|'text'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'screenBuffer'
op|'.'
name|'SetConsoleTextAttribute'
op|'('
name|'self'
op|'.'
name|'_colors'
op|'['
string|"'normal'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_NullColorizer
dedent|''
dedent|''
name|'class'
name|'_NullColorizer'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    See _AnsiColorizer docstring.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'stream'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stream'
op|'='
name|'stream'
newline|'\n'
nl|'\n'
DECL|member|supported
dedent|''
name|'def'
name|'supported'
op|'('
name|'cls'
op|','
name|'stream'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
DECL|variable|supported
dedent|''
name|'supported'
op|'='
name|'classmethod'
op|'('
name|'supported'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'text'
op|','
name|'color'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stream'
op|'.'
name|'write'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SubunitReporter
dedent|''
dedent|''
name|'class'
name|'SubunitReporter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Reports test output via Subunit.\n\n    @ivar _subunit: The subunit protocol client that we are wrapping.\n\n    @ivar _successful: An internal variable, used to track whether we have\n        received only successful results.\n\n    @since: 10.0\n    """'
newline|'\n'
name|'implements'
op|'('
name|'itrial'
op|'.'
name|'IReporter'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'stream'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|','
name|'tbformat'
op|'='
string|"'default'"
op|','
nl|'\n'
name|'realtime'
op|'='
name|'False'
op|','
name|'publisher'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Construct a L{SubunitReporter}.\n\n        @param stream: A file-like object representing the stream to print\n            output to. Defaults to stdout.\n        @param tbformat: The format for tracebacks. Ignored, since subunit\n            always uses Python\'s standard format.\n        @param realtime: Whether or not to print exceptions in the middle\n            of the test results. Ignored, since subunit always does this.\n        @param publisher: The log publisher which will be preserved for\n            reporting events. Ignored, as it\'s not relevant to subunit.\n        """'
newline|'\n'
name|'if'
name|'TestProtocolClient'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"Subunit not available"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_subunit'
op|'='
name|'TestProtocolClient'
op|'('
name|'stream'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_successful'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|done
dedent|''
name|'def'
name|'done'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record that the entire test suite run is finished.\n\n        We do nothing, since a summary clause is irrelevant to the subunit\n        protocol.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|shouldStop
dedent|''
name|'def'
name|'shouldStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Whether or not the test runner should stop running tests.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_subunit'
op|'.'
name|'shouldStop'
newline|'\n'
DECL|variable|shouldStop
dedent|''
name|'shouldStop'
op|'='
name|'property'
op|'('
name|'shouldStop'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stop
name|'def'
name|'stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Signal that the test runner should stop running tests.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_subunit'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|wasSuccessful
dedent|''
name|'def'
name|'wasSuccessful'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Has the test run been successful so far?\n\n        @return: C{True} if we have received no reports of errors or failures,\n            C{False} otherwise.\n        """'
newline|'\n'
comment|'# Subunit has a bug in its implementation of wasSuccessful, see'
nl|'\n'
comment|"# https://bugs.edge.launchpad.net/subunit/+bug/491090, so we can't"
nl|'\n'
comment|'# simply forward it on.'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_successful'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|startTest
dedent|''
name|'def'
name|'startTest'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record that C{test} has started.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_subunit'
op|'.'
name|'startTest'
op|'('
name|'test'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stopTest
dedent|''
name|'def'
name|'stopTest'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record that C{test} has completed.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_subunit'
op|'.'
name|'stopTest'
op|'('
name|'test'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addSuccess
dedent|''
name|'def'
name|'addSuccess'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record that C{test} was successful.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_subunit'
op|'.'
name|'addSuccess'
op|'('
name|'test'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addSkip
dedent|''
name|'def'
name|'addSkip'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record that C{test} was skipped for C{reason}.\n\n        Some versions of subunit don\'t have support for addSkip. In those\n        cases, the skip is reported as a success.\n\n        @param test: A unittest-compatible C{TestCase}.\n        @param reason: The reason for it being skipped. The C{str()} of this\n            object will be included in the subunit output stream.\n        """'
newline|'\n'
name|'addSkip'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_subunit'
op|','
string|"'addSkip'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'addSkip'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'addSuccess'
op|'('
name|'test'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_subunit'
op|'.'
name|'addSkip'
op|'('
name|'test'
op|','
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addError
dedent|''
dedent|''
name|'def'
name|'addError'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'err'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record that C{test} failed with an unexpected error C{err}.\n\n        Also marks the run as being unsuccessful, causing\n        L{SubunitReporter.wasSuccessful} to return C{False}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_successful'
op|'='
name|'False'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_subunit'
op|'.'
name|'addError'
op|'('
nl|'\n'
name|'test'
op|','
name|'util'
op|'.'
name|'excInfoOrFailureToExcInfo'
op|'('
name|'err'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addFailure
dedent|''
name|'def'
name|'addFailure'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'err'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record that C{test} failed an assertion with the error C{err}.\n\n        Also marks the run as being unsuccessful, causing\n        L{SubunitReporter.wasSuccessful} to return C{False}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_successful'
op|'='
name|'False'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_subunit'
op|'.'
name|'addFailure'
op|'('
nl|'\n'
name|'test'
op|','
name|'util'
op|'.'
name|'excInfoOrFailureToExcInfo'
op|'('
name|'err'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addExpectedFailure
dedent|''
name|'def'
name|'addExpectedFailure'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'failure'
op|','
name|'todo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record an expected failure from a test.\n\n        Some versions of subunit do not implement this. For those versions, we\n        record a success.\n        """'
newline|'\n'
name|'failure'
op|'='
name|'util'
op|'.'
name|'excInfoOrFailureToExcInfo'
op|'('
name|'failure'
op|')'
newline|'\n'
name|'addExpectedFailure'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_subunit'
op|','
string|"'addExpectedFailure'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'addExpectedFailure'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'addSuccess'
op|'('
name|'test'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'addExpectedFailure'
op|'('
name|'test'
op|','
name|'failure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addUnexpectedSuccess
dedent|''
dedent|''
name|'def'
name|'addUnexpectedSuccess'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'todo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record an unexpected success.\n\n        Since subunit has no way of expressing this concept, we record a\n        success on the subunit stream.\n        """'
newline|'\n'
comment|'# Not represented in pyunit/subunit.'
nl|'\n'
name|'self'
op|'.'
name|'addSuccess'
op|'('
name|'test'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TreeReporter
dedent|''
dedent|''
name|'class'
name|'TreeReporter'
op|'('
name|'Reporter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Print out the tests in the form a tree.\n\n    Tests are indented according to which class and module they belong.\n    Results are printed in ANSI color.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|currentLine
name|'currentLine'
op|'='
string|"''"
newline|'\n'
DECL|variable|indent
name|'indent'
op|'='
string|"'  '"
newline|'\n'
DECL|variable|columns
name|'columns'
op|'='
number|'79'
newline|'\n'
nl|'\n'
DECL|variable|FAILURE
name|'FAILURE'
op|'='
string|"'red'"
newline|'\n'
DECL|variable|ERROR
name|'ERROR'
op|'='
string|"'red'"
newline|'\n'
DECL|variable|TODO
name|'TODO'
op|'='
string|"'blue'"
newline|'\n'
DECL|variable|SKIP
name|'SKIP'
op|'='
string|"'blue'"
newline|'\n'
DECL|variable|TODONE
name|'TODONE'
op|'='
string|"'red'"
newline|'\n'
DECL|variable|SUCCESS
name|'SUCCESS'
op|'='
string|"'green'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'stream'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TreeReporter'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'stream'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_lastTest'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'colorizer'
name|'in'
op|'['
name|'_Win32Colorizer'
op|','
name|'_AnsiColorizer'
op|','
name|'_NullColorizer'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'colorizer'
op|'.'
name|'supported'
op|'('
name|'stream'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_colorizer'
op|'='
name|'colorizer'
op|'('
name|'stream'
op|')'
newline|'\n'
name|'break'
newline|'\n'
nl|'\n'
DECL|member|getDescription
dedent|''
dedent|''
dedent|''
name|'def'
name|'getDescription'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the name of the method which \'test\' represents.  This is\n        what gets displayed in the leaves of the tree.\n\n        e.g. getDescription(TestCase(\'test_foo\')) ==> test_foo\n        """'
newline|'\n'
name|'return'
name|'test'
op|'.'
name|'id'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|addSuccess
dedent|''
name|'def'
name|'addSuccess'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TreeReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addSuccess'
op|'('
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'endLine'
op|'('
string|"'[OK]'"
op|','
name|'self'
op|'.'
name|'SUCCESS'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addError
dedent|''
name|'def'
name|'addError'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TreeReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addError'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'endLine'
op|'('
string|"'[ERROR]'"
op|','
name|'self'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addFailure
dedent|''
name|'def'
name|'addFailure'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TreeReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addFailure'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'endLine'
op|'('
string|"'[FAIL]'"
op|','
name|'self'
op|'.'
name|'FAILURE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addSkip
dedent|''
name|'def'
name|'addSkip'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TreeReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addSkip'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'endLine'
op|'('
string|"'[SKIPPED]'"
op|','
name|'self'
op|'.'
name|'SKIP'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addExpectedFailure
dedent|''
name|'def'
name|'addExpectedFailure'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TreeReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addExpectedFailure'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'endLine'
op|'('
string|"'[TODO]'"
op|','
name|'self'
op|'.'
name|'TODO'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addUnexpectedSuccess
dedent|''
name|'def'
name|'addUnexpectedSuccess'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TreeReporter'
op|','
name|'self'
op|')'
op|'.'
name|'addUnexpectedSuccess'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'endLine'
op|'('
string|"'[SUCCESS!?!]'"
op|','
name|'self'
op|'.'
name|'TODONE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_write
dedent|''
name|'def'
name|'_write'
op|'('
name|'self'
op|','
name|'format'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'format'
op|'='
name|'format'
op|'%'
name|'args'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'currentLine'
op|'='
name|'format'
newline|'\n'
name|'super'
op|'('
name|'TreeReporter'
op|','
name|'self'
op|')'
op|'.'
name|'_write'
op|'('
name|'self'
op|'.'
name|'currentLine'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getPreludeSegments
dedent|''
name|'def'
name|'_getPreludeSegments'
op|'('
name|'self'
op|','
name|'testID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a list of all non-leaf segments to display in the tree.\n\n        Normally this is the module and class name.\n        """'
newline|'\n'
name|'segments'
op|'='
name|'testID'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'segments'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'segments'
newline|'\n'
dedent|''
name|'segments'
op|'='
op|'['
nl|'\n'
name|'seg'
name|'for'
name|'seg'
name|'in'
string|"'.'"
op|'.'
name|'join'
op|'('
name|'segments'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
op|','
name|'segments'
op|'['
op|'-'
number|'1'
op|']'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'seg'
op|')'
op|'>'
number|'0'
op|']'
newline|'\n'
name|'return'
name|'segments'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_testPrelude
dedent|''
name|'def'
name|'_testPrelude'
op|'('
name|'self'
op|','
name|'testID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write the name of the test to the stream, indenting it appropriately.\n\n        If the test is the first test in a new \'branch\' of the tree, also\n        write all of the parents in that branch.\n        """'
newline|'\n'
name|'segments'
op|'='
name|'self'
op|'.'
name|'_getPreludeSegments'
op|'('
name|'testID'
op|')'
newline|'\n'
name|'indentLevel'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'seg'
name|'in'
name|'segments'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'indentLevel'
op|'<'
name|'len'
op|'('
name|'self'
op|'.'
name|'_lastTest'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'seg'
op|'!='
name|'self'
op|'.'
name|'_lastTest'
op|'['
name|'indentLevel'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_write'
op|'('
string|"'%s%s\\n'"
op|'%'
op|'('
name|'self'
op|'.'
name|'indent'
op|'*'
name|'indentLevel'
op|','
name|'seg'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_write'
op|'('
string|"'%s%s\\n'"
op|'%'
op|'('
name|'self'
op|'.'
name|'indent'
op|'*'
name|'indentLevel'
op|','
name|'seg'
op|')'
op|')'
newline|'\n'
dedent|''
name|'indentLevel'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_lastTest'
op|'='
name|'segments'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cleanupErrors
dedent|''
name|'def'
name|'cleanupErrors'
op|'('
name|'self'
op|','
name|'errs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_colorizer'
op|'.'
name|'write'
op|'('
string|"'    cleanup errors'"
op|','
name|'self'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'endLine'
op|'('
string|"'[ERROR]'"
op|','
name|'self'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
name|'super'
op|'('
name|'TreeReporter'
op|','
name|'self'
op|')'
op|'.'
name|'cleanupErrors'
op|'('
name|'errs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|upDownError
dedent|''
name|'def'
name|'upDownError'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'error'
op|','
name|'warn'
op|','
name|'printStatus'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_colorizer'
op|'.'
name|'write'
op|'('
string|'"  %s"'
op|'%'
name|'method'
op|','
name|'self'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
name|'if'
name|'printStatus'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'endLine'
op|'('
string|"'[ERROR]'"
op|','
name|'self'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
dedent|''
name|'super'
op|'('
name|'TreeReporter'
op|','
name|'self'
op|')'
op|'.'
name|'upDownError'
op|'('
name|'method'
op|','
name|'error'
op|','
name|'warn'
op|','
name|'printStatus'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startTest
dedent|''
name|'def'
name|'startTest'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when C{test} starts. Writes the tests name to the stream using\n        a tree format.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testPrelude'
op|'('
name|'test'
op|'.'
name|'id'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|"'%s%s ... '"
op|'%'
op|'('
name|'self'
op|'.'
name|'indent'
op|'*'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'_lastTest'
op|')'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'getDescription'
op|'('
name|'test'
op|')'
op|')'
op|')'
newline|'\n'
name|'super'
op|'('
name|'TreeReporter'
op|','
name|'self'
op|')'
op|'.'
name|'startTest'
op|'('
name|'test'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|endLine
dedent|''
name|'def'
name|'endLine'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'color'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Print \'message\' in the given color.\n\n        @param message: A string message, usually \'[OK]\' or something similar.\n        @param color: A string color, \'red\', \'green\' and so forth.\n        """'
newline|'\n'
name|'spaces'
op|'='
string|"' '"
op|'*'
op|'('
name|'self'
op|'.'
name|'columns'
op|'-'
name|'len'
op|'('
name|'self'
op|'.'
name|'currentLine'
op|')'
op|'-'
name|'len'
op|'('
name|'message'
op|')'
op|')'
newline|'\n'
name|'super'
op|'('
name|'TreeReporter'
op|','
name|'self'
op|')'
op|'.'
name|'_write'
op|'('
name|'spaces'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_colorizer'
op|'.'
name|'write'
op|'('
name|'message'
op|','
name|'color'
op|')'
newline|'\n'
name|'super'
op|'('
name|'TreeReporter'
op|','
name|'self'
op|')'
op|'.'
name|'_write'
op|'('
string|'"\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_printSummary
dedent|''
name|'def'
name|'_printSummary'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Print a line summarising the test results to the stream, and color the\n        status result.\n        """'
newline|'\n'
name|'summary'
op|'='
name|'self'
op|'.'
name|'_getSummary'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'status'
op|'='
string|'"PASSED"'
newline|'\n'
name|'color'
op|'='
name|'self'
op|'.'
name|'SUCCESS'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'status'
op|'='
string|'"FAILED"'
newline|'\n'
name|'color'
op|'='
name|'self'
op|'.'
name|'FAILURE'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_colorizer'
op|'.'
name|'write'
op|'('
name|'status'
op|','
name|'color'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write'
op|'('
string|'"%s\\n"'
op|','
name|'summary'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

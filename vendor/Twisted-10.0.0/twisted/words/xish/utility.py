begin_unit
comment|'# -*- test-case-name: twisted.words.test.test_xishutil -*-'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nEvent Dispatching and Callback utilities.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'xish'
name|'import'
name|'xpath'
newline|'\n'
nl|'\n'
DECL|class|_MethodWrapper
name|'class'
name|'_MethodWrapper'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Internal class for tracking method calls.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'method'
op|'='
name|'method'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'kwargs'
op|'='
name|'kwargs'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'nargs'
op|'='
name|'self'
op|'.'
name|'args'
op|'+'
name|'args'
newline|'\n'
name|'nkwargs'
op|'='
name|'self'
op|'.'
name|'kwargs'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'nkwargs'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'method'
op|'('
op|'*'
name|'nargs'
op|','
op|'**'
name|'nkwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CallbackList
dedent|''
dedent|''
name|'class'
name|'CallbackList'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Container for callbacks.\n\n    Event queries are linked to lists of callables. When a matching event\n    occurs, these callables are called in sequence. One-time callbacks\n    are removed from the list after the first time the event was triggered.\n\n    Arguments to callbacks are split spread across two sets. The first set,\n    callback specific, is passed to C{addCallback} and is used for all\n    subsequent event triggers.  The second set is passed to C{callback} and is\n    event specific. Positional arguments in the second set come after the\n    positional arguments of the first set. Keyword arguments in the second set\n    override those in the first set.\n\n    @ivar callbacks: The registered callbacks as mapping from the callable to a\n                     tuple of a wrapper for that callable that keeps the\n                     callback specific arguments and a boolean that signifies\n                     if it is to be called only once.\n    @type callbacks: C{dict}\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'callbacks'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addCallback
dedent|''
name|'def'
name|'addCallback'
op|'('
name|'self'
op|','
name|'onetime'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add callback.\n\n        The arguments passed are used as callback specific arguments.\n\n        @param onetime: If C{True}, this callback is called at most once.\n        @type onetime: C{bool}\n        @param method: The callback callable to be added.\n        @param args: Positional arguments to the callable.\n        @type args: C{list}\n        @param kwargs: Keyword arguments to the callable.\n        @type kwargs: C{dict}\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'method'
name|'in'
name|'self'
op|'.'
name|'callbacks'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'callbacks'
op|'['
name|'method'
op|']'
op|'='
op|'('
name|'_MethodWrapper'
op|'('
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|','
nl|'\n'
name|'onetime'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeCallback
dedent|''
dedent|''
name|'def'
name|'removeCallback'
op|'('
name|'self'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove callback.\n\n        @param method: The callable to be removed.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'method'
name|'in'
name|'self'
op|'.'
name|'callbacks'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'callbacks'
op|'['
name|'method'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callback
dedent|''
dedent|''
name|'def'
name|'callback'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call all registered callbacks.\n\n        The passed arguments are event specific and augment and override\n        the callback specific arguments as described above.\n\n        @note: Exceptions raised by callbacks are trapped and logged. They will\n               not propagate up to make sure other callbacks will still be\n               called, and the event dispatching allways succeeds.\n\n        @param args: Positional arguments to the callable.\n        @type args: C{list}\n        @param kwargs: Keyword arguments to the callable.\n        @type kwargs: C{dict}\n        """'
newline|'\n'
nl|'\n'
name|'for'
name|'key'
op|','
op|'('
name|'methodwrapper'
op|','
name|'onetime'
op|')'
name|'in'
name|'self'
op|'.'
name|'callbacks'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'methodwrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'onetime'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'self'
op|'.'
name|'callbacks'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isEmpty
dedent|''
dedent|''
dedent|''
name|'def'
name|'isEmpty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return if list of registered callbacks is empty.\n\n        @rtype: C{bool}\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'callbacks'
op|')'
op|'=='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|EventDispatcher
dedent|''
dedent|''
name|'class'
name|'EventDispatcher'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Event dispatching service.\n\n    The C{EventDispatcher} allows observers to be registered for certain events\n    that are dispatched. There are two types of events: XPath events and Named\n    events.\n\n    Every dispatch is triggered by calling L{dispatch} with a data object and,\n    for named events, the name of the event.\n\n    When an XPath type event is dispatched, the associated object is assumed to\n    be an L{Element<twisted.words.xish.domish.Element>} instance, which is\n    matched against all registered XPath queries. For every match, the\n    respective observer will be called with the data object.\n\n    A named event will simply call each registered observer for that particular\n    event name, with the data object. Unlike XPath type events, the data object\n    is not restricted to L{Element<twisted.words.xish.domish.Element>}, but can\n    be anything.\n\n    When registering observers, the event that is to be observed is specified\n    using an L{xpath.XPathQuery} instance or a string. In the latter case, the\n    string can also contain the string representation of an XPath expression.\n    To distinguish these from named events, each named event should start with\n    a special prefix that is stored in C{self.prefix}. It defaults to\n    C{//event/}.\n\n    Observers registered using L{addObserver} are persistent: after the\n    observer has been triggered by a dispatch, it remains registered for a\n    possible next dispatch. If instead L{addOnetimeObserver} was used to\n    observe an event, the observer is removed from the list of observers after\n    the first observed event.\n\n    Obsevers can also prioritized, by providing an optional C{priority}\n    parameter to the L{addObserver} and L{addOnetimeObserver} methods. Higher\n    priority observers are then called before lower priority observers.\n\n    Finally, observers can be unregistered by using L{removeObserver}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'eventprefix'
op|'='
string|'"//event/"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'prefix'
op|'='
name|'eventprefix'
newline|'\n'
name|'self'
op|'.'
name|'_eventObservers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_xpathObservers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_dispatchDepth'
op|'='
number|'0'
comment|'# Flag indicating levels of dispatching'
newline|'\n'
comment|'# in progress'
nl|'\n'
name|'self'
op|'.'
name|'_updateQueue'
op|'='
op|'['
op|']'
comment|'# Queued updates for observer ops'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getEventAndObservers
dedent|''
name|'def'
name|'_getEventAndObservers'
op|'('
name|'self'
op|','
name|'event'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'event'
op|','
name|'xpath'
op|'.'
name|'XPathQuery'
op|')'
op|':'
newline|'\n'
comment|'# Treat as xpath'
nl|'\n'
indent|'            '
name|'observers'
op|'='
name|'self'
op|'.'
name|'_xpathObservers'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'prefix'
op|'=='
name|'event'
op|'['
op|':'
name|'len'
op|'('
name|'self'
op|'.'
name|'prefix'
op|')'
op|']'
op|':'
newline|'\n'
comment|'# Treat as event'
nl|'\n'
indent|'                '
name|'observers'
op|'='
name|'self'
op|'.'
name|'_eventObservers'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Treat as xpath'
nl|'\n'
indent|'                '
name|'event'
op|'='
name|'xpath'
op|'.'
name|'internQuery'
op|'('
name|'event'
op|')'
newline|'\n'
name|'observers'
op|'='
name|'self'
op|'.'
name|'_xpathObservers'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'event'
op|','
name|'observers'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addOnetimeObserver
dedent|''
name|'def'
name|'addOnetimeObserver'
op|'('
name|'self'
op|','
name|'event'
op|','
name|'observerfn'
op|','
name|'priority'
op|'='
number|'0'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Register a one-time observer for an event.\n\n        Like L{addObserver}, but is only triggered at most once. See there\n        for a description of the parameters.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_addObserver'
op|'('
name|'True'
op|','
name|'event'
op|','
name|'observerfn'
op|','
name|'priority'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addObserver
dedent|''
name|'def'
name|'addObserver'
op|'('
name|'self'
op|','
name|'event'
op|','
name|'observerfn'
op|','
name|'priority'
op|'='
number|'0'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Register an observer for an event.\n\n        Each observer will be registered with a certain priority. Higher\n        priority observers get called before lower priority observers.\n\n        @param event: Name or XPath query for the event to be monitored.\n        @type event: C{str} or L{xpath.XPathQuery}.\n        @param observerfn: Function to be called when the specified event\n                           has been triggered. This callable takes\n                           one parameter: the data object that triggered\n                           the event. When specified, the C{*args} and\n                           C{**kwargs} parameters to addObserver are being used\n                           as additional parameters to the registered observer\n                           callable.\n        @param priority: (Optional) priority of this observer in relation to\n                         other observer that match the same event. Defaults to\n                         C{0}.\n        @type priority: C{int}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_addObserver'
op|'('
name|'False'
op|','
name|'event'
op|','
name|'observerfn'
op|','
name|'priority'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_addObserver
dedent|''
name|'def'
name|'_addObserver'
op|'('
name|'self'
op|','
name|'onetime'
op|','
name|'event'
op|','
name|'observerfn'
op|','
name|'priority'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# If this is happening in the middle of the dispatch, queue'
nl|'\n'
comment|'# it up for processing after the dispatch completes'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_dispatchDepth'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_updateQueue'
op|'.'
name|'append'
op|'('
name|'lambda'
op|':'
name|'self'
op|'.'
name|'_addObserver'
op|'('
name|'onetime'
op|','
name|'event'
op|','
name|'observerfn'
op|','
name|'priority'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'event'
op|','
name|'observers'
op|'='
name|'self'
op|'.'
name|'_getEventAndObservers'
op|'('
name|'event'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'priority'
name|'not'
name|'in'
name|'observers'
op|':'
newline|'\n'
indent|'            '
name|'cbl'
op|'='
name|'CallbackList'
op|'('
op|')'
newline|'\n'
name|'observers'
op|'['
name|'priority'
op|']'
op|'='
op|'{'
name|'event'
op|':'
name|'cbl'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'priorityObservers'
op|'='
name|'observers'
op|'['
name|'priority'
op|']'
newline|'\n'
name|'if'
name|'event'
name|'not'
name|'in'
name|'priorityObservers'
op|':'
newline|'\n'
indent|'                '
name|'cbl'
op|'='
name|'CallbackList'
op|'('
op|')'
newline|'\n'
name|'observers'
op|'['
name|'priority'
op|']'
op|'['
name|'event'
op|']'
op|'='
name|'cbl'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'cbl'
op|'='
name|'priorityObservers'
op|'['
name|'event'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'cbl'
op|'.'
name|'addCallback'
op|'('
name|'onetime'
op|','
name|'observerfn'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeObserver
dedent|''
name|'def'
name|'removeObserver'
op|'('
name|'self'
op|','
name|'event'
op|','
name|'observerfn'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove callable as observer for an event.\n\n        The observer callable is removed for all priority levels for the\n        specified event.\n\n        @param event: Event for which the observer callable was registered.\n        @type event: C{str} or L{xpath.XPathQuery}\n        @param observerfn: Observer callable to be unregistered.\n        """'
newline|'\n'
nl|'\n'
comment|'# If this is happening in the middle of the dispatch, queue'
nl|'\n'
comment|'# it up for processing after the dispatch completes'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_dispatchDepth'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_updateQueue'
op|'.'
name|'append'
op|'('
name|'lambda'
op|':'
name|'self'
op|'.'
name|'removeObserver'
op|'('
name|'event'
op|','
name|'observerfn'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'event'
op|','
name|'observers'
op|'='
name|'self'
op|'.'
name|'_getEventAndObservers'
op|'('
name|'event'
op|')'
newline|'\n'
nl|'\n'
name|'emptyLists'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'priority'
op|','
name|'priorityObservers'
name|'in'
name|'observers'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'query'
op|','
name|'callbacklist'
name|'in'
name|'priorityObservers'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'event'
op|'=='
name|'query'
op|':'
newline|'\n'
indent|'                    '
name|'callbacklist'
op|'.'
name|'removeCallback'
op|'('
name|'observerfn'
op|')'
newline|'\n'
name|'if'
name|'callbacklist'
op|'.'
name|'isEmpty'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'emptyLists'
op|'.'
name|'append'
op|'('
op|'('
name|'priority'
op|','
name|'query'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'for'
name|'priority'
op|','
name|'query'
name|'in'
name|'emptyLists'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'observers'
op|'['
name|'priority'
op|']'
op|'['
name|'query'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dispatch
dedent|''
dedent|''
name|'def'
name|'dispatch'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'event'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Dispatch an event.\n\n        When C{event} is C{None}, an XPath type event is triggered, and\n        C{obj} is assumed to be an instance of\n        L{Element<twisted.words.xish.domish.Element>}. Otherwise, C{event}\n        holds the name of the named event being triggered. In the latter case,\n        C{obj} can be anything.\n\n        @param obj: The object to be dispatched.\n        @param event: Optional event name.\n        @type event: C{str}\n        """'
newline|'\n'
nl|'\n'
name|'foundTarget'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_dispatchDepth'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
name|'if'
name|'event'
op|'!='
name|'None'
op|':'
newline|'\n'
comment|'# Named event'
nl|'\n'
indent|'            '
name|'observers'
op|'='
name|'self'
op|'.'
name|'_eventObservers'
newline|'\n'
name|'match'
op|'='
name|'lambda'
name|'query'
op|','
name|'obj'
op|':'
name|'query'
op|'=='
name|'event'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# XPath event'
nl|'\n'
indent|'            '
name|'observers'
op|'='
name|'self'
op|'.'
name|'_xpathObservers'
newline|'\n'
name|'match'
op|'='
name|'lambda'
name|'query'
op|','
name|'obj'
op|':'
name|'query'
op|'.'
name|'matches'
op|'('
name|'obj'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'priorities'
op|'='
name|'observers'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'priorities'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'priorities'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'emptyLists'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'priority'
name|'in'
name|'priorities'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'query'
op|','
name|'callbacklist'
name|'in'
name|'observers'
op|'['
name|'priority'
op|']'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'match'
op|'('
name|'query'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'callbacklist'
op|'.'
name|'callback'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'foundTarget'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'callbacklist'
op|'.'
name|'isEmpty'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'emptyLists'
op|'.'
name|'append'
op|'('
op|'('
name|'priority'
op|','
name|'query'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'for'
name|'priority'
op|','
name|'query'
name|'in'
name|'emptyLists'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'observers'
op|'['
name|'priority'
op|']'
op|'['
name|'query'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_dispatchDepth'
op|'-='
number|'1'
newline|'\n'
nl|'\n'
comment|"# If this is a dispatch within a dispatch, don't"
nl|'\n'
comment|'# do anything with the updateQueue -- it needs to'
nl|'\n'
comment|"# wait until we've back all the way out of the stack"
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_dispatchDepth'
op|'=='
number|'0'
op|':'
newline|'\n'
comment|'# Deal with pending update operations'
nl|'\n'
indent|'            '
name|'for'
name|'f'
name|'in'
name|'self'
op|'.'
name|'_updateQueue'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_updateQueue'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'foundTarget'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|XmlPipe
dedent|''
dedent|''
name|'class'
name|'XmlPipe'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    XML stream pipe.\n\n    Connects two objects that communicate stanzas through an XML stream like\n    interface. Each of the ends of the pipe (sink and source) can be used to\n    send XML stanzas to the other side, or add observers to process XML stanzas\n    that were sent from the other side.\n\n    XML pipes are usually used in place of regular XML streams that are\n    transported over TCP. This is the reason for the use of the names source\n    and sink for both ends of the pipe. The source side corresponds with the\n    entity that initiated the TCP connection, whereas the sink corresponds with\n    the entity that accepts that connection. In this object, though, the source\n    and sink are treated equally.\n\n    Unlike Jabber\n    L{XmlStream<twisted.words.protocols.jabber.xmlstream.XmlStream>}s, the sink\n    and source objects are assumed to represent an eternal connected and\n    initialized XML stream. As such, events corresponding to connection,\n    disconnection, initialization and stream errors are not dispatched or\n    processed.\n\n    @since: 8.2\n    @ivar source: Source XML stream.\n    @ivar sink: Sink XML stream.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'source'
op|'='
name|'EventDispatcher'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sink'
op|'='
name|'EventDispatcher'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'source'
op|'.'
name|'send'
op|'='
name|'lambda'
name|'obj'
op|':'
name|'self'
op|'.'
name|'sink'
op|'.'
name|'dispatch'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sink'
op|'.'
name|'send'
op|'='
name|'lambda'
name|'obj'
op|':'
name|'self'
op|'.'
name|'source'
op|'.'
name|'dispatch'
op|'('
name|'obj'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

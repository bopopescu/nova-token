begin_unit
comment|'# -*- test-case-name: twisted.words.test.test_xmlstream -*-'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nXML Stream processing.\n\nAn XML Stream is defined as a connection over which two XML documents are\nexchanged during the lifetime of the connection, one for each direction. The\nunit of interaction is a direct child element of the root element (stanza).\n\nThe most prominent use of XML Streams is Jabber, but this module is generically\nusable. See Twisted Words for Jabber specific protocol support.\n\nMaintainer: Ralph Meijer\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'xish'
name|'import'
name|'domish'
op|','
name|'utility'
newline|'\n'
nl|'\n'
DECL|variable|STREAM_CONNECTED_EVENT
name|'STREAM_CONNECTED_EVENT'
op|'='
name|'intern'
op|'('
string|'"//event/stream/connected"'
op|')'
newline|'\n'
DECL|variable|STREAM_START_EVENT
name|'STREAM_START_EVENT'
op|'='
name|'intern'
op|'('
string|'"//event/stream/start"'
op|')'
newline|'\n'
DECL|variable|STREAM_END_EVENT
name|'STREAM_END_EVENT'
op|'='
name|'intern'
op|'('
string|'"//event/stream/end"'
op|')'
newline|'\n'
DECL|variable|STREAM_ERROR_EVENT
name|'STREAM_ERROR_EVENT'
op|'='
name|'intern'
op|'('
string|'"//event/stream/error"'
op|')'
newline|'\n'
nl|'\n'
DECL|class|XmlStream
name|'class'
name|'XmlStream'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|','
name|'utility'
op|'.'
name|'EventDispatcher'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Generic Streaming XML protocol handler.\n\n    This protocol handler will parse incoming data as XML and dispatch events\n    accordingly. Incoming stanzas can be handled by registering observers using\n    XPath-like expressions that are matched against each stanza. See\n    L{utility.EventDispatcher} for details.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'utility'
op|'.'
name|'EventDispatcher'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'rawDataOutFn'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'rawDataInFn'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_initializeStream
dedent|''
name|'def'
name|'_initializeStream'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Sets up XML Parser. """'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'='
name|'domish'
op|'.'
name|'elementStream'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'DocumentStartEvent'
op|'='
name|'self'
op|'.'
name|'onDocumentStart'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'ElementEvent'
op|'='
name|'self'
op|'.'
name|'onElement'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'DocumentEndEvent'
op|'='
name|'self'
op|'.'
name|'onDocumentEnd'
newline|'\n'
nl|'\n'
comment|'### --------------------------------------------------------------'
nl|'\n'
comment|'###'
nl|'\n'
comment|'### Protocol events'
nl|'\n'
comment|'###'
nl|'\n'
comment|'### --------------------------------------------------------------'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Called when a connection is made.\n\n        Sets up the XML parser and dispatches the L{STREAM_CONNECTED_EVENT}\n        event indicating the connection has been established.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_initializeStream'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dispatch'
op|'('
name|'self'
op|','
name|'STREAM_CONNECTED_EVENT'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Called whenever data is received.\n\n        Passes the data to the XML parser. This can result in calls to the\n        DOM handlers. If a parse error occurs, the L{STREAM_ERROR_EVENT} event\n        is called to allow for cleanup actions, followed by dropping the\n        connection.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'rawDataInFn'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'rawDataInFn'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stream'
op|'.'
name|'parse'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'domish'
op|'.'
name|'ParserError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'dispatch'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
op|','
name|'STREAM_ERROR_EVENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Called when the connection is shut down.\n\n        Dispatches the L{STREAM_END_EVENT}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'dispatch'
op|'('
name|'self'
op|','
name|'STREAM_END_EVENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'### --------------------------------------------------------------'
nl|'\n'
comment|'###'
nl|'\n'
comment|'### DOM events'
nl|'\n'
comment|'###'
nl|'\n'
comment|'### --------------------------------------------------------------'
nl|'\n'
nl|'\n'
DECL|member|onDocumentStart
dedent|''
name|'def'
name|'onDocumentStart'
op|'('
name|'self'
op|','
name|'rootElement'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Called whenever the start tag of a root element has been received.\n\n        Dispatches the L{STREAM_START_EVENT}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'dispatch'
op|'('
name|'self'
op|','
name|'STREAM_START_EVENT'
op|')'
newline|'\n'
nl|'\n'
DECL|member|onElement
dedent|''
name|'def'
name|'onElement'
op|'('
name|'self'
op|','
name|'element'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Called whenever a direct child element of the root element has\n        been received.\n\n        Dispatches the received element.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'dispatch'
op|'('
name|'element'
op|')'
newline|'\n'
nl|'\n'
DECL|member|onDocumentEnd
dedent|''
name|'def'
name|'onDocumentEnd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Called whenever the end tag of the root element has been received.\n\n        Closes the connection. This causes C{connectionLost} being called.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|setDispatchFn
dedent|''
name|'def'
name|'setDispatchFn'
op|'('
name|'self'
op|','
name|'fn'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Set another function to handle elements. """'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'ElementEvent'
op|'='
name|'fn'
newline|'\n'
nl|'\n'
DECL|member|resetDispatchFn
dedent|''
name|'def'
name|'resetDispatchFn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Set the default function (C{onElement}) to handle elements. """'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'ElementEvent'
op|'='
name|'self'
op|'.'
name|'onElement'
newline|'\n'
nl|'\n'
DECL|member|send
dedent|''
name|'def'
name|'send'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Send data over the stream.\n\n        Sends the given C{obj} over the connection. C{obj} may be instances of\n        L{domish.Element}, L{unicode} and L{str}. The first two will be\n        properly serialized and/or encoded. L{str} objects must be in UTF-8\n        encoding.\n\n        Note: because it is easy to make mistakes in maintaining a properly\n        encoded L{str} object, it is advised to use L{unicode} objects\n        everywhere when dealing with XML Streams.\n\n        @param obj: Object to be sent over the stream.\n        @type obj: L{domish.Element}, L{domish} or L{str}\n\n        """'
newline|'\n'
name|'if'
name|'domish'
op|'.'
name|'IElement'
op|'.'
name|'providedBy'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'='
name|'obj'
op|'.'
name|'toXml'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'obj'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'='
name|'obj'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'rawDataOutFn'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'rawDataOutFn'
op|'('
name|'obj'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'obj'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BootstrapMixin
dedent|''
dedent|''
name|'class'
name|'BootstrapMixin'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    XmlStream factory mixin to install bootstrap event observers.\n\n    This mixin is for factories providing\n    L{IProtocolFactory<twisted.internet.interfaces.IProtocolFactory>} to make\n    sure bootstrap event observers are set up on protocols, before incoming\n    data is processed. Such protocols typically derive from\n    L{utility.EventDispatcher}, like L{XmlStream}.\n\n    You can set up bootstrap event observers using C{addBootstrap}. The\n    C{event} and C{fn} parameters correspond with the C{event} and\n    C{observerfn} arguments to L{utility.EventDispatcher.addObserver}.\n\n    @since: 8.2.\n    @ivar bootstraps: The list of registered bootstrap event observers.\n    @type bootstrap: C{list}\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'bootstraps'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|installBootstraps
dedent|''
name|'def'
name|'installBootstraps'
op|'('
name|'self'
op|','
name|'dispatcher'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Install registered bootstrap observers.\n\n        @param dispatcher: Event dispatcher to add the observers to.\n        @type dispatcher: L{utility.EventDispatcher}\n        """'
newline|'\n'
name|'for'
name|'event'
op|','
name|'fn'
name|'in'
name|'self'
op|'.'
name|'bootstraps'
op|':'
newline|'\n'
indent|'            '
name|'dispatcher'
op|'.'
name|'addObserver'
op|'('
name|'event'
op|','
name|'fn'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addBootstrap
dedent|''
dedent|''
name|'def'
name|'addBootstrap'
op|'('
name|'self'
op|','
name|'event'
op|','
name|'fn'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add a bootstrap event handler.\n\n        @param event: The event to register an observer for.\n        @type event: C{str} or L{xpath.XPathQuery}\n        @param fn: The observer callable to be registered.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'bootstraps'
op|'.'
name|'append'
op|'('
op|'('
name|'event'
op|','
name|'fn'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeBootstrap
dedent|''
name|'def'
name|'removeBootstrap'
op|'('
name|'self'
op|','
name|'event'
op|','
name|'fn'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove a bootstrap event handler.\n\n        @param event: The event the observer is registered for.\n        @type event: C{str} or L{xpath.XPathQuery}\n        @param fn: The registered observer callable.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'bootstraps'
op|'.'
name|'remove'
op|'('
op|'('
name|'event'
op|','
name|'fn'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|XmlStreamFactoryMixin
dedent|''
dedent|''
name|'class'
name|'XmlStreamFactoryMixin'
op|'('
name|'BootstrapMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    XmlStream factory mixin that takes care of event handlers.\n\n    All positional and keyword arguments passed to create this factory are\n    passed on as-is to the protocol.\n\n    @ivar args: Positional arguments passed to the protocol upon instantiation.\n    @type args: C{tuple}.\n    @ivar kwargs: Keyword arguments passed to the protocol upon instantiation.\n    @type kwargs: C{dict}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'BootstrapMixin'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'kwargs'
op|'='
name|'kwargs'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create an instance of XmlStream.\n\n        The returned instance will have bootstrap event observers registered\n        and will proceed to handle input on an incoming connection.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'('
op|'*'
name|'self'
op|'.'
name|'args'
op|','
op|'**'
name|'self'
op|'.'
name|'kwargs'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'installBootstraps'
op|'('
name|'xs'
op|')'
newline|'\n'
name|'return'
name|'xs'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'XmlStreamFactory'
op|'('
name|'XmlStreamFactoryMixin'
op|','
nl|'\n'
DECL|class|XmlStreamFactory
name|'protocol'
op|'.'
name|'ReconnectingClientFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Factory for XmlStream protocol objects as a reconnection client.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'XmlStream'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a protocol instance.\n\n        Overrides L{XmlStreamFactoryMixin.buildProtocol} to work with\n        a L{ReconnectingClientFactory}. As this is called upon having an\n        connection established, we are resetting the delay for reconnection\n        attempts when the connection is lost again.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'resetDelay'
op|'('
op|')'
newline|'\n'
name|'return'
name|'XmlStreamFactoryMixin'
op|'.'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.words.test -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2005 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'Interface'
op|','
name|'Attribute'
op|','
name|'implements'
newline|'\n'
nl|'\n'
DECL|class|IProtocolPlugin
name|'class'
name|'IProtocolPlugin'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Interface for plugins providing an interface to a Words service\n    """'
newline|'\n'
nl|'\n'
DECL|variable|name
name|'name'
op|'='
name|'Attribute'
op|'('
string|'"A single word describing what kind of interface this is (eg, irc or web)"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getFactory
name|'def'
name|'getFactory'
op|'('
name|'realm'
op|','
name|'portal'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve a C{twisted.internet.interfaces.IServerFactory} provider\n\n        @param realm: An object providing C{twisted.cred.portal.IRealm} and\n        C{IChatService}, with which service information should be looked up.\n\n        @param portal: An object providing C{twisted.cred.portal.IPortal},\n        through which logins should be performed.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IGroup
dedent|''
dedent|''
name|'class'
name|'IGroup'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
DECL|variable|name
indent|'    '
name|'name'
op|'='
name|'Attribute'
op|'('
string|'"A short string, unique among groups."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add
name|'def'
name|'add'
op|'('
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Include the given user in this group.\n\n        @type user: L{IUser}\n        """'
newline|'\n'
nl|'\n'
DECL|member|remove
dedent|''
name|'def'
name|'remove'
op|'('
name|'user'
op|','
name|'reason'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove the given user from this group.\n\n        @type user: L{IUser}\n        @type reason: C{unicode}\n        """'
newline|'\n'
nl|'\n'
DECL|member|size
dedent|''
name|'def'
name|'size'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the number of participants in this group.\n\n        @rtype: L{twisted.internet.defer.Deferred}\n        @return: A Deferred which fires with an C{int} representing the the\n        number of participants in this group.\n        """'
newline|'\n'
nl|'\n'
DECL|member|receive
dedent|''
name|'def'
name|'receive'
op|'('
name|'sender'
op|','
name|'recipient'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Broadcast the given message from the given sender to other\n        users in group.\n\n        The message is not re-transmitted to the sender.\n\n        @param sender: L{IUser}\n\n        @type recipient: L{IGroup}\n        @param recipient: This is probably a wart.  Maybe it will be removed\n        in the future.  For now, it should be the group object the message\n        is being delivered to.\n\n        @param message: C{dict}\n\n        @rtype: L{twisted.internet.defer.Deferred}\n        @return: A Deferred which fires with None when delivery has been\n        attempted for all users.\n        """'
newline|'\n'
nl|'\n'
DECL|member|setMetadata
dedent|''
name|'def'
name|'setMetadata'
op|'('
name|'meta'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Change the metadata associated with this group.\n\n        @type meta: C{dict}\n        """'
newline|'\n'
nl|'\n'
DECL|member|iterusers
dedent|''
name|'def'
name|'iterusers'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return an iterator of all users in this group.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IChatClient
dedent|''
dedent|''
name|'class'
name|'IChatClient'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Interface through which IChatService interacts with clients.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|name
name|'name'
op|'='
name|'Attribute'
op|'('
string|'"A short string, unique among users.  This will be set by the L{IChatService} at login time."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|receive
name|'def'
name|'receive'
op|'('
name|'sender'
op|','
name|'recipient'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Callback notifying this user of the given message sent by the\n        given user.\n\n        This will be invoked whenever another user sends a message to a\n        group this user is participating in, or whenever another user sends\n        a message directly to this user.  In the former case, C{recipient}\n        will be the group to which the message was sent; in the latter, it\n        will be the same object as the user who is receiving the message.\n\n        @type sender: L{IUser}\n        @type recipient: L{IUser} or L{IGroup}\n        @type message: C{dict}\n\n        @rtype: L{twisted.internet.defer.Deferred}\n        @return: A Deferred which fires when the message has been delivered,\n        or which fails in some way.  If the Deferred fails and the message\n        was directed at a group, this user will be removed from that group.\n        """'
newline|'\n'
nl|'\n'
DECL|member|groupMetaUpdate
dedent|''
name|'def'
name|'groupMetaUpdate'
op|'('
name|'group'
op|','
name|'meta'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Callback notifying this user that the metadata for the given\n        group has changed.\n\n        @type group: L{IGroup}\n        @type meta: C{dict}\n\n        @rtype: L{twisted.internet.defer.Deferred}\n        """'
newline|'\n'
nl|'\n'
DECL|member|userJoined
dedent|''
name|'def'
name|'userJoined'
op|'('
name|'group'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Callback notifying this user that the given user has joined\n        the given group.\n\n        @type group: L{IGroup}\n        @type user: L{IUser}\n\n        @rtype: L{twisted.internet.defer.Deferred}\n        """'
newline|'\n'
nl|'\n'
DECL|member|userLeft
dedent|''
name|'def'
name|'userLeft'
op|'('
name|'group'
op|','
name|'user'
op|','
name|'reason'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Callback notifying this user that the given user has left the\n        given group for the given reason.\n\n        @type group: L{IGroup}\n        @type user: L{IUser}\n        @type reason: C{unicode}\n\n        @rtype: L{twisted.internet.defer.Deferred}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IUser
dedent|''
dedent|''
name|'class'
name|'IUser'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Interface through which clients interact with IChatService.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|realm
name|'realm'
op|'='
name|'Attribute'
op|'('
string|'"A reference to the Realm to which this user belongs.  Set if and only if the user is logged in."'
op|')'
newline|'\n'
DECL|variable|mind
name|'mind'
op|'='
name|'Attribute'
op|'('
string|'"A reference to the mind which logged in to this user.  Set if and only if the user is logged in."'
op|')'
newline|'\n'
DECL|variable|name
name|'name'
op|'='
name|'Attribute'
op|'('
string|'"A short string, unique among users."'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|lastMessage
name|'lastMessage'
op|'='
name|'Attribute'
op|'('
string|'"A POSIX timestamp indicating the time of the last message received from this user."'
op|')'
newline|'\n'
DECL|variable|signOn
name|'signOn'
op|'='
name|'Attribute'
op|'('
string|'"A POSIX timestamp indicating this user\'s most recent sign on time."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loggedIn
name|'def'
name|'loggedIn'
op|'('
name|'realm'
op|','
name|'mind'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Invoked by the associated L{IChatService} when login occurs.\n\n        @param realm: The L{IChatService} through which login is occurring.\n        @param mind: The mind object used for cred login.\n        """'
newline|'\n'
nl|'\n'
DECL|member|send
dedent|''
name|'def'
name|'send'
op|'('
name|'recipient'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send the given message to the given user or group.\n\n        @type recipient: Either L{IUser} or L{IGroup}\n        @type message: C{dict}\n        """'
newline|'\n'
nl|'\n'
DECL|member|join
dedent|''
name|'def'
name|'join'
op|'('
name|'group'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attempt to join the given group.\n\n        @type group: L{IGroup}\n        @rtype: L{twisted.internet.defer.Deferred}\n        """'
newline|'\n'
nl|'\n'
DECL|member|leave
dedent|''
name|'def'
name|'leave'
op|'('
name|'group'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Discontinue participation in the given group.\n\n        @type group: L{IGroup}\n        @rtype: L{twisted.internet.defer.Deferred}\n        """'
newline|'\n'
nl|'\n'
DECL|member|itergroups
dedent|''
name|'def'
name|'itergroups'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return an iterator of all groups of which this user is a\n        member.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IChatService
dedent|''
dedent|''
name|'class'
name|'IChatService'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
DECL|variable|name
indent|'    '
name|'name'
op|'='
name|'Attribute'
op|'('
string|'"A short string identifying this chat service (eg, a hostname)"'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|createGroupOnRequest
name|'createGroupOnRequest'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"A boolean indicating whether L{getGroup} should implicitly "'
nl|'\n'
string|'"create groups which are requested but which do not yet exist."'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|createUserOnRequest
name|'createUserOnRequest'
op|'='
name|'Attribute'
op|'('
nl|'\n'
string|'"A boolean indicating whether L{getUser} should implicitly "'
nl|'\n'
string|'"create users which are requested but which do not yet exist."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|itergroups
name|'def'
name|'itergroups'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return all groups available on this service.\n\n        @rtype: C{twisted.internet.defer.Deferred}\n        @return: A Deferred which fires with a list of C{IGroup} providers.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getGroup
dedent|''
name|'def'
name|'getGroup'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the group by the given name.\n\n        @type name: C{str}\n\n        @rtype: L{twisted.internet.defer.Deferred}\n        @return: A Deferred which fires with the group with the given\n        name if one exists (or if one is created due to the setting of\n        L{createGroupOnRequest}, or which fails with\n        L{twisted.words.ewords.NoSuchGroup} if no such group exists.\n        """'
newline|'\n'
nl|'\n'
DECL|member|createGroup
dedent|''
name|'def'
name|'createGroup'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new group with the given name.\n\n        @type name: C{str}\n\n        @rtype: L{twisted.internet.defer.Deferred}\n        @return: A Deferred which fires with the created group, or\n        with fails with L{twisted.words.ewords.DuplicateGroup} if a\n        group by that name exists already.\n        """'
newline|'\n'
nl|'\n'
DECL|member|lookupGroup
dedent|''
name|'def'
name|'lookupGroup'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve a group by name.\n\n        Unlike C{getGroup}, this will never implicitly create a group.\n\n        @type name: C{str}\n\n        @rtype: L{twisted.internet.defer.Deferred}\n        @return: A Deferred which fires with the group by the given\n        name, or which fails with L{twisted.words.ewords.NoSuchGroup}.\n        """'
newline|'\n'
nl|'\n'
DECL|member|getUser
dedent|''
name|'def'
name|'getUser'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the user by the given name.\n\n        @type name: C{str}\n\n        @rtype: L{twisted.internet.defer.Deferred}\n        @return: A Deferred which fires with the user with the given\n        name if one exists (or if one is created due to the setting of\n        L{createUserOnRequest}, or which fails with\n        L{twisted.words.ewords.NoSuchUser} if no such user exists.\n        """'
newline|'\n'
nl|'\n'
DECL|member|createUser
dedent|''
name|'def'
name|'createUser'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new user with the given name.\n\n        @type name: C{str}\n\n        @rtype: L{twisted.internet.defer.Deferred}\n        @return: A Deferred which fires with the created user, or\n        with fails with L{twisted.words.ewords.DuplicateUser} if a\n        user by that name exists already.\n        """'
newline|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
dedent|''
name|'__all__'
op|'='
op|'['
nl|'\n'
string|"'IChatInterface'"
op|','
string|"'IGroup'"
op|','
string|"'IChatClient'"
op|','
string|"'IUser'"
op|','
string|"'IChatService'"
op|','
nl|'\n'
op|']'
newline|'\n'
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.words.xmpproutertap}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'application'
name|'import'
name|'internet'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
name|'import'
name|'xmpproutertap'
name|'as'
name|'tap'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'protocols'
op|'.'
name|'jabber'
name|'import'
name|'component'
newline|'\n'
nl|'\n'
DECL|class|XMPPRouterTapTest
name|'class'
name|'XMPPRouterTapTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_port
indent|'    '
name|'def'
name|'test_port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The port option is recognised as a parameter.\n        """'
newline|'\n'
name|'opt'
op|'='
name|'tap'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--port'"
op|','
string|"'7001'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'opt'
op|'['
string|"'port'"
op|']'
op|','
string|"'7001'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_portDefault
dedent|''
name|'def'
name|'test_portDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The port option has \'5347\' as default value\n        """'
newline|'\n'
name|'opt'
op|'='
name|'tap'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'parseOptions'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'opt'
op|'['
string|"'port'"
op|']'
op|','
string|"'tcp:5347:interface=127.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_secret
dedent|''
name|'def'
name|'test_secret'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The secret option is recognised as a parameter.\n        """'
newline|'\n'
name|'opt'
op|'='
name|'tap'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--secret'"
op|','
string|"'hushhush'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'opt'
op|'['
string|"'secret'"
op|']'
op|','
string|"'hushhush'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_secretDefault
dedent|''
name|'def'
name|'test_secretDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The secret option has \'secret\' as default value\n        """'
newline|'\n'
name|'opt'
op|'='
name|'tap'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'parseOptions'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'opt'
op|'['
string|"'secret'"
op|']'
op|','
string|"'secret'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_verbose
dedent|''
name|'def'
name|'test_verbose'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The verbose option is recognised as a flag.\n        """'
newline|'\n'
name|'opt'
op|'='
name|'tap'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--verbose'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'opt'
op|'['
string|"'verbose'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_makeService
dedent|''
name|'def'
name|'test_makeService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The service gets set up with a router and factory.\n        """'
newline|'\n'
name|'opt'
op|'='
name|'tap'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'parseOptions'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'s'
op|'='
name|'tap'
op|'.'
name|'makeService'
op|'('
name|'opt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'s'
op|','
name|'internet'
op|'.'
name|'TCPServer'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'127.0.0.1'"
op|','
name|'s'
op|'.'
name|'kwargs'
op|'['
string|"'interface'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'s'
op|'.'
name|'args'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'5347'
op|','
name|'s'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'s'
op|'.'
name|'args'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'factory'
op|','
name|'component'
op|'.'
name|'XMPPComponentServerFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'factory'
op|'.'
name|'router'
op|','
name|'component'
op|'.'
name|'Router'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'secret'"
op|','
name|'factory'
op|'.'
name|'secret'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'factory'
op|'.'
name|'logTraffic'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_makeServiceVerbose
dedent|''
name|'def'
name|'test_makeServiceVerbose'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The verbose flag enables traffic logging.\n        """'
newline|'\n'
name|'opt'
op|'='
name|'tap'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--verbose'"
op|']'
op|')'
newline|'\n'
name|'s'
op|'='
name|'tap'
op|'.'
name|'makeService'
op|'('
name|'opt'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'s'
op|'.'
name|'args'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'factory'
op|'.'
name|'logTraffic'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

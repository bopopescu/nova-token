begin_unit
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.words.protocols.irc}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'protocols'
name|'import'
name|'irc'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'protocols'
op|'.'
name|'irc'
name|'import'
name|'IRCClient'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'StringTransport'
op|','
name|'StringIOWithoutClosing'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ModeParsingTests
name|'class'
name|'ModeParsingTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{twisted.words.protocols.irc.parseModes}.\n    """'
newline|'\n'
DECL|variable|paramModes
name|'paramModes'
op|'='
op|'('
string|"'klb'"
op|','
string|"'b'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_emptyModes
name|'def'
name|'test_emptyModes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parsing an empty mode string raises L{irc.IRCBadModes}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'irc'
op|'.'
name|'IRCBadModes'
op|','
name|'irc'
op|'.'
name|'parseModes'
op|','
string|"''"
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_emptyModeSequence
dedent|''
name|'def'
name|'test_emptyModeSequence'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parsing a mode string that contains an empty sequence (either a C{+} or\n        C{-} followed directly by another C{+} or C{-}, or not followed by\n        anything at all) raises L{irc.IRCBadModes}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'irc'
op|'.'
name|'IRCBadModes'
op|','
name|'irc'
op|'.'
name|'parseModes'
op|','
string|"'++k'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'irc'
op|'.'
name|'IRCBadModes'
op|','
name|'irc'
op|'.'
name|'parseModes'
op|','
string|"'-+k'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'irc'
op|'.'
name|'IRCBadModes'
op|','
name|'irc'
op|'.'
name|'parseModes'
op|','
string|"'+'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'irc'
op|'.'
name|'IRCBadModes'
op|','
name|'irc'
op|'.'
name|'parseModes'
op|','
string|"'-'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_malformedModes
dedent|''
name|'def'
name|'test_malformedModes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parsing a mode string that does not start with C{+} or C{-} raises\n        L{irc.IRCBadModes}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'irc'
op|'.'
name|'IRCBadModes'
op|','
name|'irc'
op|'.'
name|'parseModes'
op|','
string|"'foo'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'irc'
op|'.'
name|'IRCBadModes'
op|','
name|'irc'
op|'.'
name|'parseModes'
op|','
string|"'%'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nullModes
dedent|''
name|'def'
name|'test_nullModes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parsing a mode string that contains no mode characters raises\n        L{irc.IRCBadModes}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'irc'
op|'.'
name|'IRCBadModes'
op|','
name|'irc'
op|'.'
name|'parseModes'
op|','
string|"'+'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'irc'
op|'.'
name|'IRCBadModes'
op|','
name|'irc'
op|'.'
name|'parseModes'
op|','
string|"'-'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_singleMode
dedent|''
name|'def'
name|'test_singleMode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parsing a single mode setting with no parameters results in that mode,\n        with no parameters, in the "added" direction and no modes in the\n        "removed" direction.\n        """'
newline|'\n'
name|'added'
op|','
name|'removed'
op|'='
name|'irc'
op|'.'
name|'parseModes'
op|'('
string|"'+s'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'added'
op|','
op|'['
op|'('
string|"'s'"
op|','
name|'None'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'removed'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'added'
op|','
name|'removed'
op|'='
name|'irc'
op|'.'
name|'parseModes'
op|'('
string|"'-s'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'added'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'removed'
op|','
op|'['
op|'('
string|"'s'"
op|','
name|'None'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_singleDirection
dedent|''
name|'def'
name|'test_singleDirection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parsing a single-direction mode setting with multiple modes and no\n        parameters, results in all modes falling into the same direction group.\n        """'
newline|'\n'
name|'added'
op|','
name|'removed'
op|'='
name|'irc'
op|'.'
name|'parseModes'
op|'('
string|"'+stn'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'added'
op|','
op|'['
op|'('
string|"'s'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'t'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'n'"
op|','
name|'None'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'removed'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'added'
op|','
name|'removed'
op|'='
name|'irc'
op|'.'
name|'parseModes'
op|'('
string|"'-nt'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'added'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'removed'
op|','
op|'['
op|'('
string|"'n'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'t'"
op|','
name|'None'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multiDirection
dedent|''
name|'def'
name|'test_multiDirection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parsing a multi-direction mode setting with no parameters.\n        """'
newline|'\n'
name|'added'
op|','
name|'removed'
op|'='
name|'irc'
op|'.'
name|'parseModes'
op|'('
string|"'+s-n+ti'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'added'
op|','
op|'['
op|'('
string|"'s'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'t'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'i'"
op|','
name|'None'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'removed'
op|','
op|'['
op|'('
string|"'n'"
op|','
name|'None'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_consecutiveDirection
dedent|''
name|'def'
name|'test_consecutiveDirection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parsing a multi-direction mode setting containing two consecutive mode\n        sequences with the same direction results in the same result as if\n        there were only one mode sequence in the same direction.\n        """'
newline|'\n'
name|'added'
op|','
name|'removed'
op|'='
name|'irc'
op|'.'
name|'parseModes'
op|'('
string|"'+sn+ti'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'added'
op|','
op|'['
op|'('
string|"'s'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'n'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'t'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'i'"
op|','
name|'None'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'removed'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mismatchedParams
dedent|''
name|'def'
name|'test_mismatchedParams'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the number of mode parameters does not match the number of modes\n        expecting parameters, L{irc.IRCBadModes} is raised.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'irc'
op|'.'
name|'IRCBadModes'
op|','
nl|'\n'
name|'irc'
op|'.'
name|'parseModes'
op|','
nl|'\n'
string|"'+k'"
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'paramModes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'irc'
op|'.'
name|'IRCBadModes'
op|','
nl|'\n'
name|'irc'
op|'.'
name|'parseModes'
op|','
nl|'\n'
string|"'+kl'"
op|','
op|'['
string|"'foo'"
op|','
string|"'10'"
op|','
string|"'lulz_extra_param'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'paramModes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_parameters
dedent|''
name|'def'
name|'test_parameters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Modes which require parameters are parsed and paired with their relevant\n        parameter, modes which do not require parameters do not consume any of\n        the parameters.\n        """'
newline|'\n'
name|'added'
op|','
name|'removed'
op|'='
name|'irc'
op|'.'
name|'parseModes'
op|'('
nl|'\n'
string|"'+klbb'"
op|','
nl|'\n'
op|'['
string|"'somekey'"
op|','
string|"'42'"
op|','
string|"'nick!user@host'"
op|','
string|"'other!*@*'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'paramModes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'added'
op|','
op|'['
op|'('
string|"'k'"
op|','
string|"'somekey'"
op|')'
op|','
nl|'\n'
op|'('
string|"'l'"
op|','
string|"'42'"
op|')'
op|','
nl|'\n'
op|'('
string|"'b'"
op|','
string|"'nick!user@host'"
op|')'
op|','
nl|'\n'
op|'('
string|"'b'"
op|','
string|"'other!*@*'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'removed'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'added'
op|','
name|'removed'
op|'='
name|'irc'
op|'.'
name|'parseModes'
op|'('
nl|'\n'
string|"'-klbb'"
op|','
nl|'\n'
op|'['
string|"'nick!user@host'"
op|','
string|"'other!*@*'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'paramModes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'added'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'removed'
op|','
op|'['
op|'('
string|"'k'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'l'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'b'"
op|','
string|"'nick!user@host'"
op|')'
op|','
nl|'\n'
op|'('
string|"'b'"
op|','
string|"'other!*@*'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Mix a no-argument mode in with argument modes.'
nl|'\n'
name|'added'
op|','
name|'removed'
op|'='
name|'irc'
op|'.'
name|'parseModes'
op|'('
nl|'\n'
string|"'+knbb'"
op|','
nl|'\n'
op|'['
string|"'somekey'"
op|','
string|"'nick!user@host'"
op|','
string|"'other!*@*'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'paramModes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'added'
op|','
op|'['
op|'('
string|"'k'"
op|','
string|"'somekey'"
op|')'
op|','
nl|'\n'
op|'('
string|"'n'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'b'"
op|','
string|"'nick!user@host'"
op|')'
op|','
nl|'\n'
op|'('
string|"'b'"
op|','
string|"'other!*@*'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'removed'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|stringSubjects
dedent|''
dedent|''
name|'stringSubjects'
op|'='
op|'['
nl|'\n'
string|'"Hello, this is a nice string with no complications."'
op|','
nl|'\n'
string|'"xargs%(NUL)smight%(NUL)slike%(NUL)sthis"'
op|'%'
op|'{'
string|"'NUL'"
op|':'
name|'irc'
op|'.'
name|'NUL'
op|'}'
op|','
nl|'\n'
string|'"embedded%(CR)snewline%(CR)s%(NL)sFUN%(NL)s"'
op|'%'
op|'{'
string|"'CR'"
op|':'
name|'irc'
op|'.'
name|'CR'
op|','
nl|'\n'
string|"'NL'"
op|':'
name|'irc'
op|'.'
name|'NL'
op|'}'
op|','
nl|'\n'
string|'"escape!%(X)s escape!%(M)s %(X)s%(X)sa %(M)s0"'
op|'%'
op|'{'
string|"'X'"
op|':'
name|'irc'
op|'.'
name|'X_QUOTE'
op|','
nl|'\n'
string|"'M'"
op|':'
name|'irc'
op|'.'
name|'M_QUOTE'
op|'}'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QuotingTest
name|'class'
name|'QuotingTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_lowquoteSanity
indent|'    '
name|'def'
name|'test_lowquoteSanity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Testing client-server level quote/dequote"""'
newline|'\n'
name|'for'
name|'s'
name|'in'
name|'stringSubjects'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'s'
op|','
name|'irc'
op|'.'
name|'lowDequote'
op|'('
name|'irc'
op|'.'
name|'lowQuote'
op|'('
name|'s'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ctcpquoteSanity
dedent|''
dedent|''
name|'def'
name|'test_ctcpquoteSanity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Testing CTCP message level quote/dequote"""'
newline|'\n'
name|'for'
name|'s'
name|'in'
name|'stringSubjects'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'s'
op|','
name|'irc'
op|'.'
name|'ctcpDequote'
op|'('
name|'irc'
op|'.'
name|'ctcpQuote'
op|'('
name|'s'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Dispatcher
dedent|''
dedent|''
dedent|''
name|'class'
name|'Dispatcher'
op|'('
name|'irc'
op|'.'
name|'_CommandDispatcherMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A dispatcher that exposes one known command and handles unknown commands.\n    """'
newline|'\n'
DECL|variable|prefix
name|'prefix'
op|'='
string|"'disp'"
newline|'\n'
nl|'\n'
DECL|member|disp_working
name|'def'
name|'disp_working'
op|'('
name|'self'
op|','
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A known command that returns its input.\n        """'
newline|'\n'
name|'return'
name|'a'
op|','
name|'b'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|disp_unknown
dedent|''
name|'def'
name|'disp_unknown'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle unknown commands by returning their name and inputs.\n        """'
newline|'\n'
name|'return'
name|'name'
op|','
name|'a'
op|','
name|'b'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DispatcherTests
dedent|''
dedent|''
name|'class'
name|'DispatcherTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{irc._CommandDispatcherMixin}.\n    """'
newline|'\n'
DECL|member|test_dispatch
name|'def'
name|'test_dispatch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Dispatching a command invokes the correct handler.\n        """'
newline|'\n'
name|'disp'
op|'='
name|'Dispatcher'
op|'('
op|')'
newline|'\n'
name|'args'
op|'='
op|'('
number|'1'
op|','
number|'2'
op|')'
newline|'\n'
name|'res'
op|'='
name|'disp'
op|'.'
name|'dispatch'
op|'('
string|"'working'"
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|','
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_dispatchUnknown
dedent|''
name|'def'
name|'test_dispatchUnknown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Dispatching an unknown command invokes the default handler.\n        """'
newline|'\n'
name|'disp'
op|'='
name|'Dispatcher'
op|'('
op|')'
newline|'\n'
name|'name'
op|'='
string|"'missing'"
newline|'\n'
name|'args'
op|'='
op|'('
number|'1'
op|','
number|'2'
op|')'
newline|'\n'
name|'res'
op|'='
name|'disp'
op|'.'
name|'dispatch'
op|'('
name|'name'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|','
op|'('
name|'name'
op|','
op|')'
op|'+'
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_dispatchMissingUnknown
dedent|''
name|'def'
name|'test_dispatchMissingUnknown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Dispatching an unknown command, when no default handler is present,\n        results in an exception being raised.\n        """'
newline|'\n'
name|'disp'
op|'='
name|'Dispatcher'
op|'('
op|')'
newline|'\n'
name|'disp'
op|'.'
name|'disp_unknown'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'irc'
op|'.'
name|'UnhandledCommand'
op|','
name|'disp'
op|'.'
name|'dispatch'
op|','
string|"'bar'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServerSupportedFeatureTests
dedent|''
dedent|''
name|'class'
name|'ServerSupportedFeatureTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{ServerSupportedFeatures} and related functions.\n    """'
newline|'\n'
DECL|member|test_intOrDefault
name|'def'
name|'test_intOrDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{_intOrDefault} converts values to C{int} if possible, otherwise\n        returns a default value.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'irc'
op|'.'
name|'_intOrDefault'
op|'('
name|'None'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'irc'
op|'.'
name|'_intOrDefault'
op|'('
op|'['
op|']'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'irc'
op|'.'
name|'_intOrDefault'
op|'('
string|"''"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'irc'
op|'.'
name|'_intOrDefault'
op|'('
string|"'hello'"
op|','
number|'5'
op|')'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'irc'
op|'.'
name|'_intOrDefault'
op|'('
string|"'123'"
op|')'
op|','
number|'123'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'irc'
op|'.'
name|'_intOrDefault'
op|'('
number|'123'
op|')'
op|','
number|'123'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_splitParam
dedent|''
name|'def'
name|'test_splitParam'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ServerSupportedFeatures._splitParam} splits ISUPPORT parameters\n        into key and values. Parameters without a separator are split into a\n        key and a list containing only the empty string. Escaped parameters\n        are unescaped.\n        """'
newline|'\n'
name|'params'
op|'='
op|'['
op|'('
string|"'FOO'"
op|','
op|'('
string|"'FOO'"
op|','
op|'['
string|"''"
op|']'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'FOO='"
op|','
op|'('
string|"'FOO'"
op|','
op|'['
string|"''"
op|']'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'FOO=1'"
op|','
op|'('
string|"'FOO'"
op|','
op|'['
string|"'1'"
op|']'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'FOO=1,2,3'"
op|','
op|'('
string|"'FOO'"
op|','
op|'['
string|"'1'"
op|','
string|"'2'"
op|','
string|"'3'"
op|']'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'FOO=A\\\\x20B'"
op|','
op|'('
string|"'FOO'"
op|','
op|'['
string|"'A B'"
op|']'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'FOO=\\\\x5Cx'"
op|','
op|'('
string|"'FOO'"
op|','
op|'['
string|"'\\\\x'"
op|']'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'FOO=\\\\'"
op|','
op|'('
string|"'FOO'"
op|','
op|'['
string|"'\\\\'"
op|']'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'FOO=\\\\n'"
op|','
op|'('
string|"'FOO'"
op|','
op|'['
string|"'\\\\n'"
op|']'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'_splitParam'
op|'='
name|'irc'
op|'.'
name|'ServerSupportedFeatures'
op|'.'
name|'_splitParam'
newline|'\n'
nl|'\n'
name|'for'
name|'param'
op|','
name|'expected'
name|'in'
name|'params'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
name|'_splitParam'
op|'('
name|'param'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'_splitParam'
op|','
string|"'FOO=\\\\x'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'_splitParam'
op|','
string|"'FOO=\\\\xNN'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'_splitParam'
op|','
string|"'FOO=\\\\xN'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'_splitParam'
op|','
string|"'FOO=\\\\x20\\\\x'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_splitParamArgs
dedent|''
name|'def'
name|'test_splitParamArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ServerSupportedFeatures._splitParamArgs} splits ISUPPORT parameter\n        arguments into key and value.  Arguments without a separator are\n        split into a key and an empty string.\n        """'
newline|'\n'
name|'res'
op|'='
name|'irc'
op|'.'
name|'ServerSupportedFeatures'
op|'.'
name|'_splitParamArgs'
op|'('
op|'['
string|"'A:1'"
op|','
string|"'B:2'"
op|','
string|"'C:'"
op|','
string|"'D'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|','
op|'['
op|'('
string|"'A'"
op|','
string|"'1'"
op|')'
op|','
nl|'\n'
op|'('
string|"'B'"
op|','
string|"'2'"
op|')'
op|','
nl|'\n'
op|'('
string|"'C'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
op|'('
string|"'D'"
op|','
string|"''"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_splitParamArgsProcessor
dedent|''
name|'def'
name|'test_splitParamArgsProcessor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ServerSupportedFeatures._splitParamArgs} uses the argument processor\n        passed to to convert ISUPPORT argument values to some more suitable\n        form.\n        """'
newline|'\n'
name|'res'
op|'='
name|'irc'
op|'.'
name|'ServerSupportedFeatures'
op|'.'
name|'_splitParamArgs'
op|'('
op|'['
string|"'A:1'"
op|','
string|"'B:2'"
op|','
string|"'C'"
op|']'
op|','
nl|'\n'
name|'irc'
op|'.'
name|'_intOrDefault'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|','
op|'['
op|'('
string|"'A'"
op|','
number|'1'
op|')'
op|','
nl|'\n'
op|'('
string|"'B'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
op|'('
string|"'C'"
op|','
name|'None'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_parsePrefixParam
dedent|''
name|'def'
name|'test_parsePrefixParam'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ServerSupportedFeatures._parsePrefixParam} parses the ISUPPORT PREFIX\n        parameter into a mapping from modes to prefix symbols, returns\n        C{None} if there is no parseable prefix parameter or raises\n        C{ValueError} if the prefix parameter is malformed.\n        """'
newline|'\n'
name|'_parsePrefixParam'
op|'='
name|'irc'
op|'.'
name|'ServerSupportedFeatures'
op|'.'
name|'_parsePrefixParam'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'_parsePrefixParam'
op|'('
string|"''"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'_parsePrefixParam'
op|','
string|"'hello'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'_parsePrefixParam'
op|'('
string|"'(ov)@+'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'o'"
op|':'
op|'('
string|"'@'"
op|','
number|'0'
op|')'
op|','
nl|'\n'
string|"'v'"
op|':'
op|'('
string|"'+'"
op|','
number|'1'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_parseChanModesParam
dedent|''
name|'def'
name|'test_parseChanModesParam'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ServerSupportedFeatures._parseChanModesParam} parses the ISUPPORT\n        CHANMODES parameter into a mapping from mode categories to mode\n        characters. Passing fewer than 4 parameters results in the empty string\n        for the relevant categories. Passing more than 4 parameters raises\n        C{ValueError}.\n        """'
newline|'\n'
name|'_parseChanModesParam'
op|'='
name|'irc'
op|'.'
name|'ServerSupportedFeatures'
op|'.'
name|'_parseChanModesParam'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'_parseChanModesParam'
op|'('
op|'['
op|']'
op|')'
op|','
nl|'\n'
op|'{'
string|"'addressModes'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'param'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'setParam'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'noParam'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'_parseChanModesParam'
op|'('
op|'['
string|"'b'"
op|','
string|"'k'"
op|','
string|"'l'"
op|','
string|"'imnpst'"
op|']'
op|')'
op|','
nl|'\n'
op|'{'
string|"'addressModes'"
op|':'
string|"'b'"
op|','
nl|'\n'
string|"'param'"
op|':'
string|"'k'"
op|','
nl|'\n'
string|"'setParam'"
op|':'
string|"'l'"
op|','
nl|'\n'
string|"'noParam'"
op|':'
string|"'imnpst'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'_parseChanModesParam'
op|'('
op|'['
string|"'b'"
op|','
string|"'k'"
op|','
string|"'l'"
op|']'
op|')'
op|','
nl|'\n'
op|'{'
string|"'addressModes'"
op|':'
string|"'b'"
op|','
nl|'\n'
string|"'param'"
op|':'
string|"'k'"
op|','
nl|'\n'
string|"'setParam'"
op|':'
string|"'l'"
op|','
nl|'\n'
string|"'noParam'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'ValueError'
op|','
nl|'\n'
name|'_parseChanModesParam'
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|','
string|"'d'"
op|','
string|"'e'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_parse
dedent|''
name|'def'
name|'test_parse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ServerSupportedFeatures.parse} changes the internal state of the\n        instance to reflect the features indicated by the parsed ISUPPORT\n        parameters, including unknown parameters and unsetting previously set\n        parameters.\n        """'
newline|'\n'
name|'supported'
op|'='
name|'irc'
op|'.'
name|'ServerSupportedFeatures'
op|'('
op|')'
newline|'\n'
name|'supported'
op|'.'
name|'parse'
op|'('
op|'['
string|"'MODES=4'"
op|','
nl|'\n'
string|"'CHANLIMIT=#:20,&:10'"
op|','
nl|'\n'
string|"'INVEX'"
op|','
nl|'\n'
string|"'EXCEPTS=Z'"
op|','
nl|'\n'
string|"'UNKNOWN=A,B,C'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'supported'
op|'.'
name|'getFeature'
op|'('
string|"'MODES'"
op|')'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'supported'
op|'.'
name|'getFeature'
op|'('
string|"'CHANLIMIT'"
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'#'"
op|','
number|'20'
op|')'
op|','
nl|'\n'
op|'('
string|"'&'"
op|','
number|'10'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'supported'
op|'.'
name|'getFeature'
op|'('
string|"'INVEX'"
op|')'
op|','
string|"'I'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'supported'
op|'.'
name|'getFeature'
op|'('
string|"'EXCEPTS'"
op|')'
op|','
string|"'Z'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'supported'
op|'.'
name|'getFeature'
op|'('
string|"'UNKNOWN'"
op|')'
op|','
op|'('
string|"'A'"
op|','
string|"'B'"
op|','
string|"'C'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'supported'
op|'.'
name|'hasFeature'
op|'('
string|"'INVEX'"
op|')'
op|')'
newline|'\n'
name|'supported'
op|'.'
name|'parse'
op|'('
op|'['
string|"'-INVEX'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'supported'
op|'.'
name|'hasFeature'
op|'('
string|"'INVEX'"
op|')'
op|')'
newline|'\n'
comment|'# Unsetting a previously unset parameter should not be a problem.'
nl|'\n'
name|'supported'
op|'.'
name|'parse'
op|'('
op|'['
string|"'-INVEX'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_parse
dedent|''
name|'def'
name|'_parse'
op|'('
name|'self'
op|','
name|'features'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse all specified features according to the ISUPPORT specifications.\n\n        @type features: C{list} of C{(featureName, value)}\n        @param features: Feature names and values to parse\n\n        @rtype: L{irc.ServerSupportedFeatures}\n        """'
newline|'\n'
name|'supported'
op|'='
name|'irc'
op|'.'
name|'ServerSupportedFeatures'
op|'('
op|')'
newline|'\n'
name|'features'
op|'='
op|'['
string|"'%s=%s'"
op|'%'
op|'('
name|'name'
op|','
name|'value'
name|'or'
string|"''"
op|')'
nl|'\n'
name|'for'
name|'name'
op|','
name|'value'
name|'in'
name|'features'
op|']'
newline|'\n'
name|'supported'
op|'.'
name|'parse'
op|'('
name|'features'
op|')'
newline|'\n'
name|'return'
name|'supported'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_parseFeature
dedent|''
name|'def'
name|'_parseFeature'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse a feature, with the given name and value, according to the\n        ISUPPORT specifications and return the parsed value.\n        """'
newline|'\n'
name|'supported'
op|'='
name|'self'
op|'.'
name|'_parse'
op|'('
op|'['
op|'('
name|'name'
op|','
name|'value'
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'supported'
op|'.'
name|'getFeature'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_testIntOrDefaultFeature
dedent|''
name|'def'
name|'_testIntOrDefaultFeature'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Perform some common tests on a feature known to use L{_intOrDefault}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
name|'name'
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'default'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
name|'name'
op|','
string|"'notanint'"
op|')'
op|','
nl|'\n'
name|'default'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
name|'name'
op|','
string|"'42'"
op|')'
op|','
nl|'\n'
number|'42'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_testFeatureDefault
dedent|''
name|'def'
name|'_testFeatureDefault'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'features'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Features known to have default values are reported as being present by\n        L{irc.ServerSupportedFeatures.hasFeature}, and their value defaults\n        correctly, when they don\'t appear in an ISUPPORT message.\n        """'
newline|'\n'
name|'default'
op|'='
name|'irc'
op|'.'
name|'ServerSupportedFeatures'
op|'('
op|')'
op|'.'
name|'_features'
op|'['
name|'name'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'features'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'features'
op|'='
op|'['
op|'('
string|"'DEFINITELY_NOT'"
op|','
string|"'a_feature'"
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'supported'
op|'='
name|'self'
op|'.'
name|'_parse'
op|'('
name|'features'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'supported'
op|'.'
name|'hasFeature'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'supported'
op|'.'
name|'getFeature'
op|'('
name|'name'
op|')'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_support_CHANMODES
dedent|''
name|'def'
name|'test_support_CHANMODES'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The CHANMODES ISUPPORT parameter is parsed into a C{dict} giving the\n        four mode categories, C{\'addressModes\'}, C{\'param\'}, C{\'setParam\'}, and\n        C{\'noParam\'}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testFeatureDefault'
op|'('
string|"'CHANMODES'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testFeatureDefault'
op|'('
string|"'CHANMODES'"
op|','
op|'['
op|'('
string|"'CHANMODES'"
op|','
string|"'b,,lk,'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testFeatureDefault'
op|'('
string|"'CHANMODES'"
op|','
op|'['
op|'('
string|"'CHANMODES'"
op|','
string|"'b,,lk,ha,ha'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'CHANMODES'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
op|'{'
string|"'addressModes'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'param'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'setParam'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'noParam'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'CHANMODES'"
op|','
string|"',A'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'addressModes'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'param'"
op|':'
string|"'A'"
op|','
nl|'\n'
string|"'setParam'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'noParam'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'CHANMODES'"
op|','
string|"'A,Bc,Def,Ghij'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'addressModes'"
op|':'
string|"'A'"
op|','
nl|'\n'
string|"'param'"
op|':'
string|"'Bc'"
op|','
nl|'\n'
string|"'setParam'"
op|':'
string|"'Def'"
op|','
nl|'\n'
string|"'noParam'"
op|':'
string|"'Ghij'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_support_IDCHAN
dedent|''
name|'def'
name|'test_support_IDCHAN'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The IDCHAN support parameter is parsed into a sequence of two-tuples\n        giving channel prefix and ID length pairs.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'IDCHAN'"
op|','
string|"'!:5'"
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'!'"
op|','
string|"'5'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_support_MAXLIST
dedent|''
name|'def'
name|'test_support_MAXLIST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The MAXLIST support parameter is parsed into a sequence of two-tuples\n        giving modes and their limits.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'MAXLIST'"
op|','
string|"'b:25,eI:50'"
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'b'"
op|','
number|'25'
op|')'
op|','
op|'('
string|"'eI'"
op|','
number|'50'
op|')'
op|']'
op|')'
newline|'\n'
comment|'# A non-integer parameter argument results in None.'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'MAXLIST'"
op|','
string|"'b:25,eI:50,a:3.1415'"
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'b'"
op|','
number|'25'
op|')'
op|','
op|'('
string|"'eI'"
op|','
number|'50'
op|')'
op|','
op|'('
string|"'a'"
op|','
name|'None'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'MAXLIST'"
op|','
string|"'b:25,eI:50,a:notanint'"
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'b'"
op|','
number|'25'
op|')'
op|','
op|'('
string|"'eI'"
op|','
number|'50'
op|')'
op|','
op|'('
string|"'a'"
op|','
name|'None'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_support_NETWORK
dedent|''
name|'def'
name|'test_support_NETWORK'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The NETWORK support parameter is parsed as the network name, as\n        specified by the server.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'NETWORK'"
op|','
string|"'IRCNet'"
op|')'
op|','
nl|'\n'
string|"'IRCNet'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_support_SAFELIST
dedent|''
name|'def'
name|'test_support_SAFELIST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The SAFELIST support parameter is parsed into a boolean indicating\n        whether the safe "list" command is supported or not.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'SAFELIST'"
op|')'
op|','
nl|'\n'
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_support_STATUSMSG
dedent|''
name|'def'
name|'test_support_STATUSMSG'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The STATUSMSG support parameter is parsed into a string of channel\n        status that support the exclusive channel notice method.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'STATUSMSG'"
op|','
string|"'@+'"
op|')'
op|','
nl|'\n'
string|"'@+'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_support_TARGMAX
dedent|''
name|'def'
name|'test_support_TARGMAX'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The TARGMAX support parameter is parsed into a dictionary, mapping\n        strings to integers, of the maximum number of targets for a particular\n        command.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'TARGMAX'"
op|','
string|"'PRIVMSG:4,NOTICE:3'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'PRIVMSG'"
op|':'
number|'4'
op|','
nl|'\n'
string|"'NOTICE'"
op|':'
number|'3'
op|'}'
op|')'
newline|'\n'
comment|'# A non-integer parameter argument results in None.'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'TARGMAX'"
op|','
string|"'PRIVMSG:4,NOTICE:3,KICK:3.1415'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'PRIVMSG'"
op|':'
number|'4'
op|','
nl|'\n'
string|"'NOTICE'"
op|':'
number|'3'
op|','
nl|'\n'
string|"'KICK'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'TARGMAX'"
op|','
string|"'PRIVMSG:4,NOTICE:3,KICK:notanint'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'PRIVMSG'"
op|':'
number|'4'
op|','
nl|'\n'
string|"'NOTICE'"
op|':'
number|'3'
op|','
nl|'\n'
string|"'KICK'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_support_NICKLEN
dedent|''
name|'def'
name|'test_support_NICKLEN'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The NICKLEN support parameter is parsed into an integer value\n        indicating the maximum length of a nickname the client may use,\n        otherwise, if the parameter is missing or invalid, the default value\n        (as specified by RFC 1459) is used.\n        """'
newline|'\n'
name|'default'
op|'='
name|'irc'
op|'.'
name|'ServerSupportedFeatures'
op|'('
op|')'
op|'.'
name|'_features'
op|'['
string|"'NICKLEN'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_testIntOrDefaultFeature'
op|'('
string|"'NICKLEN'"
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_support_CHANNELLEN
dedent|''
name|'def'
name|'test_support_CHANNELLEN'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The CHANNELLEN support parameter is parsed into an integer value\n        indicating the maximum channel name length, otherwise, if the\n        parameter is missing or invalid, the default value (as specified by\n        RFC 1459) is used.\n        """'
newline|'\n'
name|'default'
op|'='
name|'irc'
op|'.'
name|'ServerSupportedFeatures'
op|'('
op|')'
op|'.'
name|'_features'
op|'['
string|"'CHANNELLEN'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_testIntOrDefaultFeature'
op|'('
string|"'CHANNELLEN'"
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_support_CHANTYPES
dedent|''
name|'def'
name|'test_support_CHANTYPES'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The CHANTYPES support parameter is parsed into a tuple of\n        valid channel prefix characters.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testFeatureDefault'
op|'('
string|"'CHANTYPES'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'CHANTYPES'"
op|','
string|"'#&%'"
op|')'
op|','
nl|'\n'
op|'('
string|"'#'"
op|','
string|"'&'"
op|','
string|"'%'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_support_KICKLEN
dedent|''
name|'def'
name|'test_support_KICKLEN'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The KICKLEN support parameter is parsed into an integer value\n        indicating the maximum length of a kick message a client may use.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testIntOrDefaultFeature'
op|'('
string|"'KICKLEN'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_support_PREFIX
dedent|''
name|'def'
name|'test_support_PREFIX'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The PREFIX support parameter is parsed into a dictionary mapping\n        modes to two-tuples of status symbol and priority.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testFeatureDefault'
op|'('
string|"'PREFIX'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testFeatureDefault'
op|'('
string|"'PREFIX'"
op|','
op|'['
op|'('
string|"'PREFIX'"
op|','
string|"'hello'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'PREFIX'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'PREFIX'"
op|','
string|"'(ohv)@%+'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'o'"
op|':'
op|'('
string|"'@'"
op|','
number|'0'
op|')'
op|','
nl|'\n'
string|"'h'"
op|':'
op|'('
string|"'%'"
op|','
number|'1'
op|')'
op|','
nl|'\n'
string|"'v'"
op|':'
op|'('
string|"'+'"
op|','
number|'2'
op|')'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'PREFIX'"
op|','
string|"'(hov)@%+'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'o'"
op|':'
op|'('
string|"'%'"
op|','
number|'1'
op|')'
op|','
nl|'\n'
string|"'h'"
op|':'
op|'('
string|"'@'"
op|','
number|'0'
op|')'
op|','
nl|'\n'
string|"'v'"
op|':'
op|'('
string|"'+'"
op|','
number|'2'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_support_TOPICLEN
dedent|''
name|'def'
name|'test_support_TOPICLEN'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The TOPICLEN support parameter is parsed into an integer value\n        indicating the maximum length of a topic a client may set.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testIntOrDefaultFeature'
op|'('
string|"'TOPICLEN'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_support_MODES
dedent|''
name|'def'
name|'test_support_MODES'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The MODES support parameter is parsed into an integer value\n        indicating the maximum number of "variable" modes (defined as being\n        modes from C{addressModes}, C{param} or C{setParam} categories for\n        the C{CHANMODES} ISUPPORT parameter) which may by set on a channel\n        by a single MODE command from a client.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testIntOrDefaultFeature'
op|'('
string|"'MODES'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_support_EXCEPTS
dedent|''
name|'def'
name|'test_support_EXCEPTS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The EXCEPTS support parameter is parsed into the mode character\n        to be used for "ban exception" modes. If no parameter is specified\n        then the character C{e} is assumed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'EXCEPTS'"
op|','
string|"'Z'"
op|')'
op|','
nl|'\n'
string|"'Z'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'EXCEPTS'"
op|')'
op|','
nl|'\n'
string|"'e'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_support_INVEX
dedent|''
name|'def'
name|'test_support_INVEX'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The INVEX support parameter is parsed into the mode character to be\n        used for "invite exception" modes. If no parameter is specified then\n        the character C{I} is assumed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'INVEX'"
op|','
string|"'Z'"
op|')'
op|','
nl|'\n'
string|"'Z'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parseFeature'
op|'('
string|"'INVEX'"
op|')'
op|','
nl|'\n'
string|"'I'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IRCClientWithoutLogin
dedent|''
dedent|''
name|'class'
name|'IRCClientWithoutLogin'
op|'('
name|'irc'
op|'.'
name|'IRCClient'
op|')'
op|':'
newline|'\n'
DECL|variable|performLogin
indent|'    '
name|'performLogin'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CTCPTest
dedent|''
name|'class'
name|'CTCPTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'file'
op|'='
name|'StringIOWithoutClosing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'protocol'
op|'.'
name|'FileWrapper'
op|'('
name|'self'
op|'.'
name|'file'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'='
name|'IRCClientWithoutLogin'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ERRMSG
dedent|''
name|'def'
name|'test_ERRMSG'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Testing CTCP query ERRMSG.\n\n        Not because this is this is an especially important case in the\n        field, but it does go through the entire dispatch/decode/encode\n        process.\n        """'
newline|'\n'
nl|'\n'
name|'errQuery'
op|'='
op|'('
string|'":nick!guy@over.there PRIVMSG #theChan :"'
nl|'\n'
string|'"%(X)cERRMSG t%(X)c%(EOL)s"'
nl|'\n'
op|'%'
op|'{'
string|"'X'"
op|':'
name|'irc'
op|'.'
name|'X_DELIM'
op|','
nl|'\n'
string|"'EOL'"
op|':'
name|'irc'
op|'.'
name|'CR'
op|'+'
name|'irc'
op|'.'
name|'LF'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'errReply'
op|'='
op|'('
string|'"NOTICE nick :%(X)cERRMSG t :"'
nl|'\n'
string|'"No error has occoured.%(X)c%(EOL)s"'
nl|'\n'
op|'%'
op|'{'
string|"'X'"
op|':'
name|'irc'
op|'.'
name|'X_DELIM'
op|','
nl|'\n'
string|"'EOL'"
op|':'
name|'irc'
op|'.'
name|'CR'
op|'+'
name|'irc'
op|'.'
name|'LF'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'dataReceived'
op|'('
name|'errQuery'
op|')'
newline|'\n'
name|'reply'
op|'='
name|'self'
op|'.'
name|'file'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'errReply'
op|','
name|'reply'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noNumbersVERSION
dedent|''
name|'def'
name|'test_noNumbersVERSION'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If attributes for version information on L{IRCClient} are set to\n        C{None}, the parts of the CTCP VERSION response they correspond to\n        are omitted.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'versionName'
op|'='
string|'"FrobozzIRC"'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'ctcpQuery_VERSION'
op|'('
string|'"nick!guy@over.there"'
op|','
string|'"#theChan"'
op|','
name|'None'
op|')'
newline|'\n'
name|'versionReply'
op|'='
op|'('
string|'"NOTICE nick :%(X)cVERSION %(vname)s::"'
nl|'\n'
string|'"%(X)c%(EOL)s"'
nl|'\n'
op|'%'
op|'{'
string|"'X'"
op|':'
name|'irc'
op|'.'
name|'X_DELIM'
op|','
nl|'\n'
string|"'EOL'"
op|':'
name|'irc'
op|'.'
name|'CR'
op|'+'
name|'irc'
op|'.'
name|'LF'
op|','
nl|'\n'
string|"'vname'"
op|':'
name|'self'
op|'.'
name|'client'
op|'.'
name|'versionName'
op|'}'
op|')'
newline|'\n'
name|'reply'
op|'='
name|'self'
op|'.'
name|'file'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'versionReply'
op|','
name|'reply'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fullVERSION
dedent|''
name|'def'
name|'test_fullVERSION'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The response to a CTCP VERSION query includes the version number and\n        environment information, as specified by L{IRCClient.versionNum} and\n        L{IRCClient.versionEnv}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'versionName'
op|'='
string|'"FrobozzIRC"'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'versionNum'
op|'='
string|'"1.2g"'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'versionEnv'
op|'='
string|'"ZorkOS"'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'ctcpQuery_VERSION'
op|'('
string|'"nick!guy@over.there"'
op|','
string|'"#theChan"'
op|','
name|'None'
op|')'
newline|'\n'
name|'versionReply'
op|'='
op|'('
string|'"NOTICE nick :%(X)cVERSION %(vname)s:%(vnum)s:%(venv)s"'
nl|'\n'
string|'"%(X)c%(EOL)s"'
nl|'\n'
op|'%'
op|'{'
string|"'X'"
op|':'
name|'irc'
op|'.'
name|'X_DELIM'
op|','
nl|'\n'
string|"'EOL'"
op|':'
name|'irc'
op|'.'
name|'CR'
op|'+'
name|'irc'
op|'.'
name|'LF'
op|','
nl|'\n'
string|"'vname'"
op|':'
name|'self'
op|'.'
name|'client'
op|'.'
name|'versionName'
op|','
nl|'\n'
string|"'vnum'"
op|':'
name|'self'
op|'.'
name|'client'
op|'.'
name|'versionNum'
op|','
nl|'\n'
string|"'venv'"
op|':'
name|'self'
op|'.'
name|'client'
op|'.'
name|'versionEnv'
op|'}'
op|')'
newline|'\n'
name|'reply'
op|'='
name|'self'
op|'.'
name|'file'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'versionReply'
op|','
name|'reply'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'connectionLost'
op|'('
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'transport'
newline|'\n'
nl|'\n'
DECL|class|NoticingClient
dedent|''
dedent|''
name|'class'
name|'NoticingClient'
op|'('
name|'IRCClientWithoutLogin'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|methods
indent|'    '
name|'methods'
op|'='
op|'{'
nl|'\n'
string|"'created'"
op|':'
op|'('
string|"'when'"
op|','
op|')'
op|','
nl|'\n'
string|"'yourHost'"
op|':'
op|'('
string|"'info'"
op|','
op|')'
op|','
nl|'\n'
string|"'myInfo'"
op|':'
op|'('
string|"'servername'"
op|','
string|"'version'"
op|','
string|"'umodes'"
op|','
string|"'cmodes'"
op|')'
op|','
nl|'\n'
string|"'luserClient'"
op|':'
op|'('
string|"'info'"
op|','
op|')'
op|','
nl|'\n'
string|"'bounce'"
op|':'
op|'('
string|"'info'"
op|','
op|')'
op|','
nl|'\n'
string|"'isupport'"
op|':'
op|'('
string|"'options'"
op|','
op|')'
op|','
nl|'\n'
string|"'luserChannels'"
op|':'
op|'('
string|"'channels'"
op|','
op|')'
op|','
nl|'\n'
string|"'luserOp'"
op|':'
op|'('
string|"'ops'"
op|','
op|')'
op|','
nl|'\n'
string|"'luserMe'"
op|':'
op|'('
string|"'info'"
op|','
op|')'
op|','
nl|'\n'
string|"'receivedMOTD'"
op|':'
op|'('
string|"'motd'"
op|','
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'privmsg'"
op|':'
op|'('
string|"'user'"
op|','
string|"'channel'"
op|','
string|"'message'"
op|')'
op|','
nl|'\n'
string|"'joined'"
op|':'
op|'('
string|"'channel'"
op|','
op|')'
op|','
nl|'\n'
string|"'left'"
op|':'
op|'('
string|"'channel'"
op|','
op|')'
op|','
nl|'\n'
string|"'noticed'"
op|':'
op|'('
string|"'user'"
op|','
string|"'channel'"
op|','
string|"'message'"
op|')'
op|','
nl|'\n'
string|"'modeChanged'"
op|':'
op|'('
string|"'user'"
op|','
string|"'channel'"
op|','
string|"'set'"
op|','
string|"'modes'"
op|','
string|"'args'"
op|')'
op|','
nl|'\n'
string|"'pong'"
op|':'
op|'('
string|"'user'"
op|','
string|"'secs'"
op|')'
op|','
nl|'\n'
string|"'signedOn'"
op|':'
op|'('
op|')'
op|','
nl|'\n'
string|"'kickedFrom'"
op|':'
op|'('
string|"'channel'"
op|','
string|"'kicker'"
op|','
string|"'message'"
op|')'
op|','
nl|'\n'
string|"'nickChanged'"
op|':'
op|'('
string|"'nick'"
op|','
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'userJoined'"
op|':'
op|'('
string|"'user'"
op|','
string|"'channel'"
op|')'
op|','
nl|'\n'
string|"'userLeft'"
op|':'
op|'('
string|"'user'"
op|','
string|"'channel'"
op|')'
op|','
nl|'\n'
string|"'userKicked'"
op|':'
op|'('
string|"'user'"
op|','
string|"'channel'"
op|','
string|"'kicker'"
op|','
string|"'message'"
op|')'
op|','
nl|'\n'
string|"'action'"
op|':'
op|'('
string|"'user'"
op|','
string|"'channel'"
op|','
string|"'data'"
op|')'
op|','
nl|'\n'
string|"'topicUpdated'"
op|':'
op|'('
string|"'user'"
op|','
string|"'channel'"
op|','
string|"'newTopic'"
op|')'
op|','
nl|'\n'
string|"'userRenamed'"
op|':'
op|'('
string|"'oldname'"
op|','
string|"'newname'"
op|')'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
comment|'# It is important that IRCClient.__init__ is not called since'
nl|'\n'
comment|'# traditionally it did not exist, so it is important that nothing is'
nl|'\n'
comment|'# initialised there that would prevent subclasses that did not (or'
nl|'\n'
comment|'# could not) invoke the base implementation. Any protocol'
nl|'\n'
comment|'# initialisation should happen in connectionMode.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'calls'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__getattribute__
dedent|''
name|'def'
name|'__getattribute__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'.'
name|'startswith'
op|'('
string|"'__'"
op|')'
name|'and'
name|'name'
op|'.'
name|'endswith'
op|'('
string|"'__'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'super'
op|'('
name|'NoticingClient'
op|','
name|'self'
op|')'
op|'.'
name|'__getattribute__'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'='
name|'super'
op|'('
name|'NoticingClient'
op|','
name|'self'
op|')'
op|'.'
name|'__getattribute__'
op|'('
string|"'methods'"
op|')'
op|'['
name|'name'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'super'
op|'('
name|'NoticingClient'
op|','
name|'self'
op|')'
op|'.'
name|'__getattribute__'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'makeMethod'
op|'('
name|'name'
op|','
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeMethod
dedent|''
dedent|''
name|'def'
name|'makeMethod'
op|'('
name|'self'
op|','
name|'fname'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
DECL|function|method
indent|'        '
name|'def'
name|'method'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'a'
op|')'
op|'>'
name|'len'
op|'('
name|'args'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'TypeError'
op|'('
string|'"TypeError: %s() takes %d arguments "'
nl|'\n'
string|'"(%d given)"'
op|'%'
op|'('
name|'fname'
op|','
name|'len'
op|'('
name|'args'
op|')'
op|','
name|'len'
op|'('
name|'a'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'for'
op|'('
name|'name'
op|','
name|'value'
op|')'
name|'in'
name|'zip'
op|'('
name|'args'
op|','
name|'a'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'name'
name|'in'
name|'kw'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'TypeError'
op|'('
string|'"TypeError: %s() got multiple values "'
nl|'\n'
string|'"for keyword argument \'%s\'"'
op|'%'
op|'('
name|'fname'
op|','
name|'name'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'kw'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'len'
op|'('
name|'kw'
op|')'
op|'!='
name|'len'
op|'('
name|'args'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'TypeError'
op|'('
string|'"TypeError: %s() takes %d arguments "'
nl|'\n'
string|'"(%d given)"'
op|'%'
op|'('
name|'fname'
op|','
name|'len'
op|'('
name|'args'
op|')'
op|','
name|'len'
op|'('
name|'a'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'calls'
op|'.'
name|'append'
op|'('
op|'('
name|'fname'
op|','
name|'kw'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'method'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|pop
dedent|''
dedent|''
name|'def'
name|'pop'
op|'('
name|'dict'
op|','
name|'key'
op|','
name|'default'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'dict'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'default'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'dict'
op|'['
name|'key'
op|']'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|class|ClientImplementationTests
dedent|''
dedent|''
name|'class'
name|'ClientImplementationTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'file'
op|'='
name|'StringIOWithoutClosing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'protocol'
op|'.'
name|'FileWrapper'
op|'('
name|'self'
op|'.'
name|'file'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'='
name|'NoticingClient'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'connectionLost'
op|'('
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'transport'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_serverTestImpl
dedent|''
name|'def'
name|'_serverTestImpl'
op|'('
name|'self'
op|','
name|'code'
op|','
name|'msg'
op|','
name|'func'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|'='
name|'pop'
op|'('
name|'kw'
op|','
string|"'host'"
op|','
string|"'server.host'"
op|')'
newline|'\n'
name|'nick'
op|'='
name|'pop'
op|'('
name|'kw'
op|','
string|"'nick'"
op|','
string|"'nickname'"
op|')'
newline|'\n'
name|'args'
op|'='
name|'pop'
op|'('
name|'kw'
op|','
string|"'args'"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
name|'message'
op|'='
op|'('
string|'":"'
op|'+'
nl|'\n'
name|'host'
op|'+'
string|'" "'
op|'+'
nl|'\n'
name|'code'
op|'+'
string|'" "'
op|'+'
nl|'\n'
name|'nick'
op|'+'
string|'" "'
op|'+'
nl|'\n'
name|'args'
op|'+'
string|'" :"'
op|'+'
nl|'\n'
name|'msg'
op|'+'
string|'"\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'dataReceived'
op|'('
name|'message'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'calls'
op|','
nl|'\n'
op|'['
op|'('
name|'func'
op|','
name|'kw'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testYourHost
dedent|''
name|'def'
name|'testYourHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
string|'"Your host is some.host[blah.blah/6667], running version server-version-3"'
newline|'\n'
name|'self'
op|'.'
name|'_serverTestImpl'
op|'('
string|'"002"'
op|','
name|'msg'
op|','
string|'"yourHost"'
op|','
name|'info'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testCreated
dedent|''
name|'def'
name|'testCreated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
string|'"This server was cobbled together Fri Aug 13 18:00:25 UTC 2004"'
newline|'\n'
name|'self'
op|'.'
name|'_serverTestImpl'
op|'('
string|'"003"'
op|','
name|'msg'
op|','
string|'"created"'
op|','
name|'when'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testMyInfo
dedent|''
name|'def'
name|'testMyInfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
string|'"server.host server-version abcDEF bcdEHI"'
newline|'\n'
name|'self'
op|'.'
name|'_serverTestImpl'
op|'('
string|'"004"'
op|','
name|'msg'
op|','
string|'"myInfo"'
op|','
nl|'\n'
name|'servername'
op|'='
string|'"server.host"'
op|','
nl|'\n'
name|'version'
op|'='
string|'"server-version"'
op|','
nl|'\n'
name|'umodes'
op|'='
string|'"abcDEF"'
op|','
nl|'\n'
name|'cmodes'
op|'='
string|'"bcdEHI"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testLuserClient
dedent|''
name|'def'
name|'testLuserClient'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
string|'"There are 9227 victims and 9542 hiding on 24 servers"'
newline|'\n'
name|'self'
op|'.'
name|'_serverTestImpl'
op|'('
string|'"251"'
op|','
name|'msg'
op|','
string|'"luserClient"'
op|','
nl|'\n'
name|'info'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_sendISUPPORT
dedent|''
name|'def'
name|'_sendISUPPORT'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'('
string|'"MODES=4 CHANLIMIT=#:20 NICKLEN=16 USERLEN=10 HOSTLEN=63 "'
nl|'\n'
string|'"TOPICLEN=450 KICKLEN=450 CHANNELLEN=30 KEYLEN=23 CHANTYPES=# "'
nl|'\n'
string|'"PREFIX=(ov)@+ CASEMAPPING=ascii CAPAB IRCD=dancer"'
op|')'
newline|'\n'
name|'msg'
op|'='
string|'"are available on this server"'
newline|'\n'
name|'self'
op|'.'
name|'_serverTestImpl'
op|'('
string|'"005"'
op|','
name|'msg'
op|','
string|'"isupport"'
op|','
name|'args'
op|'='
name|'args'
op|','
nl|'\n'
name|'options'
op|'='
op|'['
string|"'MODES=4'"
op|','
nl|'\n'
string|"'CHANLIMIT=#:20'"
op|','
nl|'\n'
string|"'NICKLEN=16'"
op|','
nl|'\n'
string|"'USERLEN=10'"
op|','
nl|'\n'
string|"'HOSTLEN=63'"
op|','
nl|'\n'
string|"'TOPICLEN=450'"
op|','
nl|'\n'
string|"'KICKLEN=450'"
op|','
nl|'\n'
string|"'CHANNELLEN=30'"
op|','
nl|'\n'
string|"'KEYLEN=23'"
op|','
nl|'\n'
string|"'CHANTYPES=#'"
op|','
nl|'\n'
string|"'PREFIX=(ov)@+'"
op|','
nl|'\n'
string|"'CASEMAPPING=ascii'"
op|','
nl|'\n'
string|"'CAPAB'"
op|','
nl|'\n'
string|"'IRCD=dancer'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ISUPPORT
dedent|''
name|'def'
name|'test_ISUPPORT'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The client parses ISUPPORT messages sent by the server and calls\n        L{IRCClient.isupport}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_sendISUPPORT'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testBounce
dedent|''
name|'def'
name|'testBounce'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
string|'"Try server some.host, port 321"'
newline|'\n'
name|'self'
op|'.'
name|'_serverTestImpl'
op|'('
string|'"010"'
op|','
name|'msg'
op|','
string|'"bounce"'
op|','
nl|'\n'
name|'info'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testLuserChannels
dedent|''
name|'def'
name|'testLuserChannels'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
string|'"7116"'
newline|'\n'
name|'msg'
op|'='
string|'"channels formed"'
newline|'\n'
name|'self'
op|'.'
name|'_serverTestImpl'
op|'('
string|'"254"'
op|','
name|'msg'
op|','
string|'"luserChannels"'
op|','
name|'args'
op|'='
name|'args'
op|','
nl|'\n'
name|'channels'
op|'='
name|'int'
op|'('
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testLuserOp
dedent|''
name|'def'
name|'testLuserOp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
string|'"34"'
newline|'\n'
name|'msg'
op|'='
string|'"flagged staff members"'
newline|'\n'
name|'self'
op|'.'
name|'_serverTestImpl'
op|'('
string|'"252"'
op|','
name|'msg'
op|','
string|'"luserOp"'
op|','
name|'args'
op|'='
name|'args'
op|','
nl|'\n'
name|'ops'
op|'='
name|'int'
op|'('
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testLuserMe
dedent|''
name|'def'
name|'testLuserMe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
string|'"I have 1937 clients and 0 servers"'
newline|'\n'
name|'self'
op|'.'
name|'_serverTestImpl'
op|'('
string|'"255"'
op|','
name|'msg'
op|','
string|'"luserMe"'
op|','
nl|'\n'
name|'info'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_receivedMOTD
dedent|''
name|'def'
name|'test_receivedMOTD'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lines received in I{RPL_MOTDSTART} and I{RPL_MOTD} are delivered to\n        L{IRCClient.receivedMOTD} when I{RPL_ENDOFMOTD} is received.\n        """'
newline|'\n'
name|'lines'
op|'='
op|'['
nl|'\n'
string|'":host.name 375 nickname :- host.name Message of the Day -"'
op|','
nl|'\n'
string|'":host.name 372 nickname :- Welcome to host.name"'
op|','
nl|'\n'
string|'":host.name 376 nickname :End of /MOTD command."'
op|']'
newline|'\n'
name|'for'
name|'L'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'calls'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'dataReceived'
op|'('
name|'L'
op|'+'
string|"'\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'calls'
op|','
nl|'\n'
op|'['
op|'('
string|'"receivedMOTD"'
op|','
op|'{'
string|'"motd"'
op|':'
op|'['
string|'"host.name Message of the Day -"'
op|','
string|'"Welcome to host.name"'
op|']'
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# After the motd is delivered, the tracking variable should be'
nl|'\n'
comment|'# reset.'
nl|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'motd'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_withoutMOTDSTART
dedent|''
name|'def'
name|'test_withoutMOTDSTART'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If L{IRCClient} receives I{RPL_MOTD} and I{RPL_ENDOFMOTD} without\n        receiving I{RPL_MOTDSTART}, L{IRCClient.receivedMOTD} is still\n        called with a list of MOTD lines.\n        """'
newline|'\n'
name|'lines'
op|'='
op|'['
nl|'\n'
string|'":host.name 372 nickname :- Welcome to host.name"'
op|','
nl|'\n'
string|'":host.name 376 nickname :End of /MOTD command."'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'L'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'client'
op|'.'
name|'dataReceived'
op|'('
name|'L'
op|'+'
string|"'\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'calls'
op|','
nl|'\n'
op|'['
op|'('
string|'"receivedMOTD"'
op|','
op|'{'
string|'"motd"'
op|':'
op|'['
string|'"Welcome to host.name"'
op|']'
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_clientTestImpl
dedent|''
name|'def'
name|'_clientTestImpl'
op|'('
name|'self'
op|','
name|'sender'
op|','
name|'group'
op|','
name|'type'
op|','
name|'msg'
op|','
name|'func'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ident'
op|'='
name|'pop'
op|'('
name|'kw'
op|','
string|"'ident'"
op|','
string|"'ident'"
op|')'
newline|'\n'
name|'host'
op|'='
name|'pop'
op|'('
name|'kw'
op|','
string|"'host'"
op|','
string|"'host'"
op|')'
newline|'\n'
nl|'\n'
name|'wholeUser'
op|'='
name|'sender'
op|'+'
string|"'!'"
op|'+'
name|'ident'
op|'+'
string|"'@'"
op|'+'
name|'host'
newline|'\n'
name|'message'
op|'='
op|'('
string|'":"'
op|'+'
nl|'\n'
name|'wholeUser'
op|'+'
string|'" "'
op|'+'
nl|'\n'
name|'type'
op|'+'
string|'" "'
op|'+'
nl|'\n'
name|'group'
op|'+'
string|'" :"'
op|'+'
nl|'\n'
name|'msg'
op|'+'
string|'"\\r\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'dataReceived'
op|'('
name|'message'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'calls'
op|','
nl|'\n'
op|'['
op|'('
name|'func'
op|','
name|'kw'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'calls'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testPrivmsg
dedent|''
name|'def'
name|'testPrivmsg'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
string|'"Tooty toot toot."'
newline|'\n'
name|'self'
op|'.'
name|'_clientTestImpl'
op|'('
string|'"sender"'
op|','
string|'"#group"'
op|','
string|'"PRIVMSG"'
op|','
name|'msg'
op|','
string|'"privmsg"'
op|','
nl|'\n'
name|'ident'
op|'='
string|'"ident"'
op|','
name|'host'
op|'='
string|'"host"'
op|','
nl|'\n'
comment|'# Expected results below'
nl|'\n'
name|'user'
op|'='
string|'"sender!ident@host"'
op|','
nl|'\n'
name|'channel'
op|'='
string|'"#group"'
op|','
nl|'\n'
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_clientTestImpl'
op|'('
string|'"sender"'
op|','
string|'"recipient"'
op|','
string|'"PRIVMSG"'
op|','
name|'msg'
op|','
string|'"privmsg"'
op|','
nl|'\n'
name|'ident'
op|'='
string|'"ident"'
op|','
name|'host'
op|'='
string|'"host"'
op|','
nl|'\n'
comment|'# Expected results below'
nl|'\n'
name|'user'
op|'='
string|'"sender!ident@host"'
op|','
nl|'\n'
name|'channel'
op|'='
string|'"recipient"'
op|','
nl|'\n'
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getChannelModeParams
dedent|''
name|'def'
name|'test_getChannelModeParams'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IRCClient.getChannelModeParams} uses ISUPPORT information, either\n        given by the server or defaults, to determine which channel modes\n        require arguments when being added or removed.\n        """'
newline|'\n'
name|'add'
op|','
name|'remove'
op|'='
name|'map'
op|'('
name|'sorted'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'getChannelModeParams'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'add'
op|','
op|'['
string|"'b'"
op|','
string|"'h'"
op|','
string|"'k'"
op|','
string|"'l'"
op|','
string|"'o'"
op|','
string|"'v'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'remove'
op|','
op|'['
string|"'b'"
op|','
string|"'h'"
op|','
string|"'o'"
op|','
string|"'v'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|removeFeature
name|'def'
name|'removeFeature'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
string|"'-'"
op|'+'
name|'name'
newline|'\n'
name|'msg'
op|'='
string|'"are available on this server"'
newline|'\n'
name|'self'
op|'.'
name|'_serverTestImpl'
op|'('
nl|'\n'
string|"'005'"
op|','
name|'msg'
op|','
string|"'isupport'"
op|','
name|'args'
op|'='
name|'name'
op|','
name|'options'
op|'='
op|'['
name|'name'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'supported'
op|'.'
name|'getFeature'
op|'('
name|'name'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'calls'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|"# Remove CHANMODES feature, causing getFeature('CHANMODES') to return"
nl|'\n'
comment|'# None.'
nl|'\n'
dedent|''
name|'removeFeature'
op|'('
string|"'CHANMODES'"
op|')'
newline|'\n'
name|'add'
op|','
name|'remove'
op|'='
name|'map'
op|'('
name|'sorted'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'getChannelModeParams'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'add'
op|','
op|'['
string|"'h'"
op|','
string|"'o'"
op|','
string|"'v'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'remove'
op|','
op|'['
string|"'h'"
op|','
string|"'o'"
op|','
string|"'v'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# Remove PREFIX feature, causing getFeature('PREFIX') to return None."
nl|'\n'
name|'removeFeature'
op|'('
string|"'PREFIX'"
op|')'
newline|'\n'
name|'add'
op|','
name|'remove'
op|'='
name|'map'
op|'('
name|'sorted'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'getChannelModeParams'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'add'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'remove'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Restore ISUPPORT features.'
nl|'\n'
name|'self'
op|'.'
name|'_sendISUPPORT'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'supported'
op|'.'
name|'getFeature'
op|'('
string|"'PREFIX'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getUserModeParams
dedent|''
name|'def'
name|'test_getUserModeParams'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IRCClient.getUserModeParams} returns a list of user modes (modes that\n        the user sets on themself, outside of channel modes) that require\n        parameters when added and removed, respectively.\n        """'
newline|'\n'
name|'add'
op|','
name|'remove'
op|'='
name|'map'
op|'('
name|'sorted'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'getUserModeParams'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'add'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'remove'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_sendModeChange
dedent|''
name|'def'
name|'_sendModeChange'
op|'('
name|'self'
op|','
name|'msg'
op|','
name|'args'
op|'='
string|"''"
op|','
name|'target'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build a MODE string and send it to the client.\n        """'
newline|'\n'
name|'if'
name|'target'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'target'
op|'='
string|"'#chan'"
newline|'\n'
dedent|''
name|'message'
op|'='
string|'":Wolf!~wolf@yok.utu.fi MODE %s %s %s\\r\\n"'
op|'%'
op|'('
nl|'\n'
name|'target'
op|','
name|'msg'
op|','
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'dataReceived'
op|'('
name|'message'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_parseModeChange
dedent|''
name|'def'
name|'_parseModeChange'
op|'('
name|'self'
op|','
name|'results'
op|','
name|'target'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse the results, do some test and return the data to check.\n        """'
newline|'\n'
name|'if'
name|'target'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'target'
op|'='
string|"'#chan'"
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'n'
op|','
name|'result'
name|'in'
name|'enumerate'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'method'
op|','
name|'data'
op|'='
name|'result'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'method'
op|','
string|"'modeChanged'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'data'
op|'['
string|"'user'"
op|']'
op|','
string|"'Wolf!~wolf@yok.utu.fi'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'data'
op|'['
string|"'channel'"
op|']'
op|','
name|'target'
op|')'
newline|'\n'
name|'results'
op|'['
name|'n'
op|']'
op|'='
name|'tuple'
op|'('
op|'['
name|'data'
op|'['
name|'key'
op|']'
name|'for'
name|'key'
name|'in'
op|'('
string|"'set'"
op|','
string|"'modes'"
op|','
string|"'args'"
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'results'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_checkModeChange
dedent|''
name|'def'
name|'_checkModeChange'
op|'('
name|'self'
op|','
name|'expected'
op|','
name|'target'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Compare the expected result with the one returned by the client.\n        """'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_parseModeChange'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'calls'
op|','
name|'target'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
name|'expected'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'calls'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_modeMissingDirection
dedent|''
name|'def'
name|'test_modeMissingDirection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mode strings that do not begin with a directional character, C{\'+\'} or\n        C{\'-\'}, have C{\'+\'} automatically prepended.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_sendModeChange'
op|'('
string|"'s'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkModeChange'
op|'('
op|'['
op|'('
name|'True'
op|','
string|"'s'"
op|','
op|'('
name|'None'
op|','
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noModeParameters
dedent|''
name|'def'
name|'test_noModeParameters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        No parameters are passed to L{IRCClient.modeChanged} for modes that\n        don\'t take any parameters.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_sendModeChange'
op|'('
string|"'-s'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkModeChange'
op|'('
op|'['
op|'('
name|'False'
op|','
string|"'s'"
op|','
op|'('
name|'None'
op|','
op|')'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_sendModeChange'
op|'('
string|"'+n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkModeChange'
op|'('
op|'['
op|'('
name|'True'
op|','
string|"'n'"
op|','
op|'('
name|'None'
op|','
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_oneModeParameter
dedent|''
name|'def'
name|'test_oneModeParameter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parameters are passed to L{IRCClient.modeChanged} for modes that take\n        parameters.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_sendModeChange'
op|'('
string|"'+o'"
op|','
string|"'a_user'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkModeChange'
op|'('
op|'['
op|'('
name|'True'
op|','
string|"'o'"
op|','
op|'('
string|"'a_user'"
op|','
op|')'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_sendModeChange'
op|'('
string|"'-o'"
op|','
string|"'a_user'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkModeChange'
op|'('
op|'['
op|'('
name|'False'
op|','
string|"'o'"
op|','
op|'('
string|"'a_user'"
op|','
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mixedModes
dedent|''
name|'def'
name|'test_mixedModes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mixing adding and removing modes that do and don\'t take parameters\n        invokes L{IRCClient.modeChanged} with mode characters and parameters\n        that match up.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_sendModeChange'
op|'('
string|"'+osv'"
op|','
string|"'a_user another_user'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkModeChange'
op|'('
op|'['
op|'('
name|'True'
op|','
string|"'osv'"
op|','
op|'('
string|"'a_user'"
op|','
name|'None'
op|','
string|"'another_user'"
op|')'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_sendModeChange'
op|'('
string|"'+v-os'"
op|','
string|"'a_user another_user'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkModeChange'
op|'('
op|'['
op|'('
name|'True'
op|','
string|"'v'"
op|','
op|'('
string|"'a_user'"
op|','
op|')'
op|')'
op|','
nl|'\n'
op|'('
name|'False'
op|','
string|"'os'"
op|','
op|'('
string|"'another_user'"
op|','
name|'None'
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_tooManyModeParameters
dedent|''
name|'def'
name|'test_tooManyModeParameters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Passing an argument to modes that take no parameters results in\n        L{IRCClient.modeChanged} not being called and an error being logged.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_sendModeChange'
op|'('
string|"'+s'"
op|','
string|"'wrong'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkModeChange'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'irc'
op|'.'
name|'IRCBadModes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSubstring'
op|'('
nl|'\n'
string|"'Too many parameters'"
op|','
name|'errors'
op|'['
number|'0'
op|']'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_tooFewModeParameters
dedent|''
name|'def'
name|'test_tooFewModeParameters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Passing no arguments to modes that do take parameters results in\n        L{IRCClient.modeChange} not being called and an error being logged.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_sendModeChange'
op|'('
string|"'+o'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkModeChange'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'irc'
op|'.'
name|'IRCBadModes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertSubstring'
op|'('
nl|'\n'
string|"'Not enough parameters'"
op|','
name|'errors'
op|'['
number|'0'
op|']'
op|'.'
name|'getErrorMessage'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_userMode
dedent|''
name|'def'
name|'test_userMode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A C{MODE} message whose target is our user (the nickname of our user,\n        to be precise), as opposed to a channel, will be parsed according to\n        the modes specified by L{IRCClient.getUserModeParams}.\n        """'
newline|'\n'
name|'target'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'nickname'
newline|'\n'
comment|'# Mode "o" on channels is supposed to take a parameter, but since this'
nl|'\n'
comment|'# is not a channel this will not cause an exception.'
nl|'\n'
name|'self'
op|'.'
name|'_sendModeChange'
op|'('
string|"'+o'"
op|','
name|'target'
op|'='
name|'target'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkModeChange'
op|'('
op|'['
op|'('
name|'True'
op|','
string|"'o'"
op|','
op|'('
name|'None'
op|','
op|')'
op|')'
op|']'
op|','
name|'target'
op|'='
name|'target'
op|')'
newline|'\n'
nl|'\n'
DECL|function|getUserModeParams
name|'def'
name|'getUserModeParams'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
string|"'Z'"
op|','
string|"''"
op|']'
newline|'\n'
nl|'\n'
comment|'# Introduce our own user mode that takes an argument.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'client'
op|','
string|"'getUserModeParams'"
op|','
name|'getUserModeParams'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_sendModeChange'
op|'('
string|"'+Z'"
op|','
string|"'an_arg'"
op|','
name|'target'
op|'='
name|'target'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkModeChange'
op|'('
op|'['
op|'('
name|'True'
op|','
string|"'Z'"
op|','
op|'('
string|"'an_arg'"
op|','
op|')'
op|')'
op|']'
op|','
name|'target'
op|'='
name|'target'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BasicServerFunctionalityTestCase
dedent|''
dedent|''
name|'class'
name|'BasicServerFunctionalityTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'f'
op|'='
name|'StringIOWithoutClosing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'t'
op|'='
name|'protocol'
op|'.'
name|'FileWrapper'
op|'('
name|'self'
op|'.'
name|'f'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'='
name|'irc'
op|'.'
name|'IRC'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'t'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|check
dedent|''
name|'def'
name|'check'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'f'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
name|'s'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testPrivmsg
dedent|''
name|'def'
name|'testPrivmsg'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'p'
op|'.'
name|'privmsg'
op|'('
string|'"this-is-sender"'
op|','
string|'"this-is-recip"'
op|','
string|'"this is message"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'check'
op|'('
string|'":this-is-sender PRIVMSG this-is-recip :this is message\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testNotice
dedent|''
name|'def'
name|'testNotice'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'p'
op|'.'
name|'notice'
op|'('
string|'"this-is-sender"'
op|','
string|'"this-is-recip"'
op|','
string|'"this is notice"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'check'
op|'('
string|'":this-is-sender NOTICE this-is-recip :this is notice\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testAction
dedent|''
name|'def'
name|'testAction'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'p'
op|'.'
name|'action'
op|'('
string|'"this-is-sender"'
op|','
string|'"this-is-recip"'
op|','
string|'"this is action"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'check'
op|'('
string|'":this-is-sender ACTION this-is-recip :this is action\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testJoin
dedent|''
name|'def'
name|'testJoin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'p'
op|'.'
name|'join'
op|'('
string|'"this-person"'
op|','
string|'"#this-channel"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'check'
op|'('
string|'":this-person JOIN #this-channel\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testPart
dedent|''
name|'def'
name|'testPart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'p'
op|'.'
name|'part'
op|'('
string|'"this-person"'
op|','
string|'"#that-channel"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'check'
op|'('
string|'":this-person PART #that-channel\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testWhois
dedent|''
name|'def'
name|'testWhois'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that a whois by the client receives the right protocol actions\n        from the server.\n        """'
newline|'\n'
name|'timestamp'
op|'='
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
number|'100'
op|')'
newline|'\n'
name|'hostname'
op|'='
name|'self'
op|'.'
name|'p'
op|'.'
name|'hostname'
newline|'\n'
name|'req'
op|'='
string|"'requesting-nick'"
newline|'\n'
name|'targ'
op|'='
string|"'target-nick'"
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'.'
name|'whois'
op|'('
name|'req'
op|','
name|'targ'
op|','
string|"'target'"
op|','
string|"'host.com'"
op|','
nl|'\n'
string|"'Target User'"
op|','
string|"'irc.host.com'"
op|','
string|"'A fake server'"
op|','
name|'False'
op|','
nl|'\n'
number|'12'
op|','
name|'timestamp'
op|','
op|'['
string|"'#fakeusers'"
op|','
string|"'#fakemisc'"
op|']'
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'\\r\\n'"
op|'.'
name|'join'
op|'('
op|'['
nl|'\n'
string|"':%(hostname)s 311 %(req)s %(targ)s target host.com * :Target User'"
op|','
nl|'\n'
string|"':%(hostname)s 312 %(req)s %(targ)s irc.host.com :A fake server'"
op|','
nl|'\n'
string|"':%(hostname)s 317 %(req)s %(targ)s 12 %(timestamp)s :seconds idle, signon time'"
op|','
nl|'\n'
string|"':%(hostname)s 319 %(req)s %(targ)s :#fakeusers #fakemisc'"
op|','
nl|'\n'
string|"':%(hostname)s 318 %(req)s %(targ)s :End of WHOIS list.'"
op|','
nl|'\n'
string|"''"
op|']'
op|')'
op|'%'
name|'dict'
op|'('
name|'hostname'
op|'='
name|'hostname'
op|','
name|'timestamp'
op|'='
name|'timestamp'
op|','
name|'req'
op|'='
name|'req'
op|','
name|'targ'
op|'='
name|'targ'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'check'
op|'('
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyClient
dedent|''
dedent|''
name|'class'
name|'DummyClient'
op|'('
name|'irc'
op|'.'
name|'IRCClient'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lines'
op|'='
op|'['
op|']'
newline|'\n'
DECL|member|sendLine
dedent|''
name|'def'
name|'sendLine'
op|'('
name|'self'
op|','
name|'m'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lines'
op|'.'
name|'append'
op|'('
name|'m'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ClientMsgTests
dedent|''
dedent|''
name|'class'
name|'ClientMsgTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'='
name|'DummyClient'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testSingleLine
dedent|''
name|'def'
name|'testSingleLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'.'
name|'msg'
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lines'
op|','
op|'['
string|"'PRIVMSG foo :bar'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testDodgyMaxLength
dedent|''
name|'def'
name|'testDodgyMaxLength'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'msg'
op|','
string|"'foo'"
op|','
string|"'bar'"
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'msg'
op|','
string|"'foo'"
op|','
string|"'bar'"
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testMultipleLine
dedent|''
name|'def'
name|'testMultipleLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'maxLen'
op|'='
name|'len'
op|'('
string|"'PRIVMSG foo :'"
op|')'
op|'+'
number|'3'
op|'+'
number|'2'
comment|'# 2 for line endings'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'msg'
op|'('
string|"'foo'"
op|','
string|"'barbazbo'"
op|','
name|'maxLen'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lines'
op|','
op|'['
string|"'PRIVMSG foo :bar'"
op|','
nl|'\n'
string|"'PRIVMSG foo :baz'"
op|','
nl|'\n'
string|"'PRIVMSG foo :bo'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testSufficientWidth
dedent|''
name|'def'
name|'testSufficientWidth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
string|"'barbazbo'"
newline|'\n'
name|'maxLen'
op|'='
name|'len'
op|'('
string|"'PRIVMSG foo :%s'"
op|'%'
op|'('
name|'msg'
op|','
op|')'
op|')'
op|'+'
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'msg'
op|'('
string|"'foo'"
op|','
name|'msg'
op|','
name|'maxLen'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lines'
op|','
op|'['
string|"'PRIVMSG foo :%s'"
op|'%'
op|'('
name|'msg'
op|','
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lines'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'msg'
op|'('
string|"'foo'"
op|','
name|'msg'
op|','
name|'maxLen'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lines'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lines'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'msg'
op|'('
string|"'foo'"
op|','
name|'msg'
op|','
name|'maxLen'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lines'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testSplitSanity
dedent|''
name|'def'
name|'testSplitSanity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Whiteboxing'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'irc'
op|'.'
name|'split'
op|','
string|"'foo'"
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'irc'
op|'.'
name|'split'
op|','
string|"'foo'"
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'irc'
op|'.'
name|'split'
op|'('
string|"''"
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'irc'
op|'.'
name|'split'
op|'('
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_splitDelimiters
dedent|''
name|'def'
name|'test_splitDelimiters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that split() skips any delimiter (space or newline) that it finds\n        at the very beginning of the string segment it is operating on.\n        Nothing should be added to the output list because of it.\n        """'
newline|'\n'
name|'r'
op|'='
name|'irc'
op|'.'
name|'split'
op|'('
string|'"xx yyz"'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'xx'"
op|','
string|"'yy'"
op|','
string|"'z'"
op|']'
op|','
name|'r'
op|')'
newline|'\n'
name|'r'
op|'='
name|'irc'
op|'.'
name|'split'
op|'('
string|'"xx\\nyyz"'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'xx'"
op|','
string|"'yy'"
op|','
string|"'z'"
op|']'
op|','
name|'r'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ClientTests
dedent|''
dedent|''
name|'class'
name|'ClientTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the protocol-level behavior of IRCClient methods intended to\n    be called by application code.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create and connect a new L{IRCClient} to a new L{StringTransport}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'IRCClient'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'performLogin'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
nl|'\n'
comment|"# Sanity check - we don't want anything to have happened at this"
nl|'\n'
comment|"# point, since we're not in a test yet."
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getLastLine
dedent|''
name|'def'
name|'getLastLine'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the last IRC message in the transport buffer.\n        """'
newline|'\n'
name|'return'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
op|'['
op|'-'
number|'2'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_away
dedent|''
name|'def'
name|'test_away'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IRCCLient.away} sends an AWAY command with the specified message.\n        """'
newline|'\n'
name|'message'
op|'='
string|'"Sorry, I\'m not here."'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'away'
op|'('
name|'message'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
nl|'\n'
string|"'AWAY :%s'"
op|'%'
op|'('
name|'message'
op|','
op|')'
op|','
nl|'\n'
string|"''"
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_back
dedent|''
name|'def'
name|'test_back'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IRCClient.back} sends an AWAY command with an empty message.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'back'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
nl|'\n'
string|"'AWAY :'"
op|','
nl|'\n'
string|"''"
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_whois
dedent|''
name|'def'
name|'test_whois'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IRCClient.whois} sends a WHOIS message.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'whois'
op|'('
string|"'alice'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
op|','
nl|'\n'
op|'['
string|"'WHOIS alice'"
op|','
string|"''"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_whoisWithServer
dedent|''
name|'def'
name|'test_whoisWithServer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IRCClient.whois} sends a WHOIS message with a server name if a\n        value is passed for the C{server} parameter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'whois'
op|'('
string|"'alice'"
op|','
string|"'example.org'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
op|','
nl|'\n'
op|'['
string|"'WHOIS example.org alice'"
op|','
string|"''"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_register
dedent|''
name|'def'
name|'test_register'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IRCClient.register} sends NICK and USER commands with the\n        username, name, hostname, server name, and real name specified.\n        """'
newline|'\n'
name|'username'
op|'='
string|"'testuser'"
newline|'\n'
name|'hostname'
op|'='
string|"'testhost'"
newline|'\n'
name|'servername'
op|'='
string|"'testserver'"
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'realname'
op|'='
string|"'testname'"
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'password'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'register'
op|'('
name|'username'
op|','
name|'hostname'
op|','
name|'servername'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
nl|'\n'
string|"'NICK %s'"
op|'%'
op|'('
name|'username'
op|','
op|')'
op|','
nl|'\n'
string|"'USER %s %s %s :%s'"
op|'%'
op|'('
nl|'\n'
name|'username'
op|','
name|'hostname'
op|','
name|'servername'
op|','
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'realname'
op|')'
op|','
nl|'\n'
string|"''"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_registerWithPassword
dedent|''
name|'def'
name|'test_registerWithPassword'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the C{password} attribute of L{IRCClient} is not C{None}, the\n        C{register} method also sends a PASS command with it as the\n        argument.\n        """'
newline|'\n'
name|'username'
op|'='
string|"'testuser'"
newline|'\n'
name|'hostname'
op|'='
string|"'testhost'"
newline|'\n'
name|'servername'
op|'='
string|"'testserver'"
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'realname'
op|'='
string|"'testname'"
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'password'
op|'='
string|"'testpass'"
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'register'
op|'('
name|'username'
op|','
name|'hostname'
op|','
name|'servername'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
nl|'\n'
string|"'PASS %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'password'
op|','
op|')'
op|','
nl|'\n'
string|"'NICK %s'"
op|'%'
op|'('
name|'username'
op|','
op|')'
op|','
nl|'\n'
string|"'USER %s %s %s :%s'"
op|'%'
op|'('
nl|'\n'
name|'username'
op|','
name|'hostname'
op|','
name|'servername'
op|','
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'realname'
op|')'
op|','
nl|'\n'
string|"''"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_registerWithTakenNick
dedent|''
name|'def'
name|'test_registerWithTakenNick'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that the client repeats the L{IRCClient.setNick} method with a\n        new value when presented with an C{ERR_NICKNAMEINUSE} while trying to\n        register.\n        """'
newline|'\n'
name|'username'
op|'='
string|"'testuser'"
newline|'\n'
name|'hostname'
op|'='
string|"'testhost'"
newline|'\n'
name|'servername'
op|'='
string|"'testserver'"
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'realname'
op|'='
string|"'testname'"
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'password'
op|'='
string|"'testpass'"
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'register'
op|'('
name|'username'
op|','
name|'hostname'
op|','
name|'servername'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'irc_ERR_NICKNAMEINUSE'
op|'('
string|"'prefix'"
op|','
op|'['
string|"'param'"
op|']'
op|')'
newline|'\n'
name|'lastLine'
op|'='
name|'self'
op|'.'
name|'getLastLine'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'lastLine'
op|','
string|"'NICK %s'"
op|'%'
op|'('
name|'username'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Keep chaining underscores for each collision'
nl|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'irc_ERR_NICKNAMEINUSE'
op|'('
string|"'prefix'"
op|','
op|'['
string|"'param'"
op|']'
op|')'
newline|'\n'
name|'lastLine'
op|'='
name|'self'
op|'.'
name|'getLastLine'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'lastLine'
op|','
string|"'NICK %s'"
op|'%'
op|'('
name|'username'
op|'+'
string|"'__'"
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_overrideAlterCollidedNick
dedent|''
name|'def'
name|'test_overrideAlterCollidedNick'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IRCClient.alterCollidedNick} determines how a nickname is altered upon\n        collision while a user is trying to change to that nickname.\n        """'
newline|'\n'
name|'nick'
op|'='
string|"'foo'"
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'alterCollidedNick'
op|'='
name|'lambda'
name|'nick'
op|':'
name|'nick'
op|'+'
string|"'***'"
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'register'
op|'('
name|'nick'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'irc_ERR_NICKNAMEINUSE'
op|'('
string|"'prefix'"
op|','
op|'['
string|"'param'"
op|']'
op|')'
newline|'\n'
name|'lastLine'
op|'='
name|'self'
op|'.'
name|'getLastLine'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'lastLine'
op|','
string|"'NICK %s'"
op|'%'
op|'('
name|'nick'
op|'+'
string|"'***'"
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nickChange
dedent|''
name|'def'
name|'test_nickChange'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When a NICK command is sent after signon, C{IRCClient.nickname} is set\n        to the new nickname I{after} the server sends an acknowledgement.\n        """'
newline|'\n'
name|'oldnick'
op|'='
string|"'foo'"
newline|'\n'
name|'newnick'
op|'='
string|"'bar'"
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'register'
op|'('
name|'oldnick'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'irc_RPL_WELCOME'
op|'('
string|"'prefix'"
op|','
op|'['
string|"'param'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'setNick'
op|'('
name|'newnick'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'nickname'
op|','
name|'oldnick'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'irc_NICK'
op|'('
string|"'%s!quux@qux'"
op|'%'
op|'('
name|'oldnick'
op|','
op|')'
op|','
op|'['
name|'newnick'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'nickname'
op|','
name|'newnick'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_erroneousNick
dedent|''
name|'def'
name|'test_erroneousNick'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Trying to register an illegal nickname results in the default legal\n        nickname being set, and trying to change a nickname to an illegal\n        nickname results in the old nickname being kept.\n        """'
newline|'\n'
comment|'# Registration case: change illegal nickname to erroneousNickFallback'
nl|'\n'
name|'badnick'
op|'='
string|"'foo'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'_registered'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'register'
op|'('
name|'badnick'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'irc_ERR_ERRONEUSNICKNAME'
op|'('
string|"'prefix'"
op|','
op|'['
string|"'param'"
op|']'
op|')'
newline|'\n'
name|'lastLine'
op|'='
name|'self'
op|'.'
name|'getLastLine'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'lastLine'
op|','
string|"'NICK %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'erroneousNickFallback'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'irc_RPL_WELCOME'
op|'('
string|"'prefix'"
op|','
op|'['
string|"'param'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'_registered'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'setNick'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'erroneousNickFallback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'nickname'
op|','
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'erroneousNickFallback'
op|')'
newline|'\n'
nl|'\n'
comment|'# Illegal nick change attempt after registration. Fall back to the old'
nl|'\n'
comment|'# nickname instead of erroneousNickFallback.'
nl|'\n'
name|'oldnick'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'nickname'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'setNick'
op|'('
name|'badnick'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'irc_ERR_ERRONEUSNICKNAME'
op|'('
string|"'prefix'"
op|','
op|'['
string|"'param'"
op|']'
op|')'
newline|'\n'
name|'lastLine'
op|'='
name|'self'
op|'.'
name|'getLastLine'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'lastLine'
op|','
string|"'NICK %s'"
op|'%'
op|'('
name|'badnick'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'nickname'
op|','
name|'oldnick'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_describe
dedent|''
name|'def'
name|'test_describe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IRCClient.desrcibe} sends a CTCP ACTION message to the target\n        specified.\n        """'
newline|'\n'
name|'target'
op|'='
string|"'foo'"
newline|'\n'
name|'channel'
op|'='
string|"'#bar'"
newline|'\n'
name|'action'
op|'='
string|"'waves'"
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'describe'
op|'('
name|'target'
op|','
name|'action'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'describe'
op|'('
name|'channel'
op|','
name|'action'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
nl|'\n'
string|"'PRIVMSG %s :\\01ACTION %s\\01'"
op|'%'
op|'('
name|'target'
op|','
name|'action'
op|')'
op|','
nl|'\n'
string|"'PRIVMSG %s :\\01ACTION %s\\01'"
op|'%'
op|'('
name|'channel'
op|','
name|'action'
op|')'
op|','
nl|'\n'
string|"''"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_me
dedent|''
name|'def'
name|'test_me'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IRCClient.me} sends a CTCP ACTION message to the target channel\n        specified.\n        If the target does not begin with a standard channel prefix,\n        \'#\' is prepended.\n        """'
newline|'\n'
name|'target'
op|'='
string|"'foo'"
newline|'\n'
name|'channel'
op|'='
string|"'#bar'"
newline|'\n'
name|'action'
op|'='
string|"'waves'"
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'me'
op|'('
name|'target'
op|','
name|'action'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'me'
op|'('
name|'channel'
op|','
name|'action'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
nl|'\n'
string|"'PRIVMSG %s :\\01ACTION %s\\01'"
op|'%'
op|'('
string|"'#'"
op|'+'
name|'target'
op|','
name|'action'
op|')'
op|','
nl|'\n'
string|"'PRIVMSG %s :\\01ACTION %s\\01'"
op|'%'
op|'('
name|'channel'
op|','
name|'action'
op|')'
op|','
nl|'\n'
string|"''"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
name|'warnings'
op|'='
name|'self'
op|'.'
name|'flushWarnings'
op|'('
nl|'\n'
name|'offendingFunctions'
op|'='
op|'['
name|'self'
op|'.'
name|'test_me'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
nl|'\n'
string|'"me() is deprecated since Twisted 9.0. Use IRCClient.describe()."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'warnings'
op|'['
number|'0'
op|']'
op|'['
string|"'category'"
op|']'
op|','
name|'DeprecationWarning'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'warnings'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

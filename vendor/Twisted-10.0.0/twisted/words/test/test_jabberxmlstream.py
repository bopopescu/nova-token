begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.words.protocols.jabber.xmlstream}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
op|'.'
name|'verify'
name|'import'
name|'verifyObject'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'task'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'ConnectionLost'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IProtocolFactory'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
name|'import'
name|'proto_helpers'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'test'
op|'.'
name|'test_xmlstream'
name|'import'
name|'GenericXmlStreamFactoryTestsMixin'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'xish'
name|'import'
name|'domish'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'protocols'
op|'.'
name|'jabber'
name|'import'
name|'error'
op|','
name|'ijabber'
op|','
name|'jid'
op|','
name|'xmlstream'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|NS_XMPP_TLS
name|'NS_XMPP_TLS'
op|'='
string|"'urn:ietf:params:xml:ns:xmpp-tls'"
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|HashPasswordTest
name|'class'
name|'HashPasswordTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{xmlstream.hashPassword}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_basic
name|'def'
name|'test_basic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The sid and secret are concatenated to calculate sha1 hex digest.\n        """'
newline|'\n'
name|'hash'
op|'='
name|'xmlstream'
op|'.'
name|'hashPassword'
op|'('
string|'u"12345"'
op|','
string|'u"secret"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'99567ee91b2c7cabf607f10cb9f4a3634fa820e0'"
op|','
name|'hash'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sidNotUnicode
dedent|''
name|'def'
name|'test_sidNotUnicode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The session identifier must be a unicode object.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'xmlstream'
op|'.'
name|'hashPassword'
op|','
string|'"\\xc2\\xb92345"'
op|','
nl|'\n'
string|'u"secret"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_passwordNotUnicode
dedent|''
name|'def'
name|'test_passwordNotUnicode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The password must be a unicode object.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'xmlstream'
op|'.'
name|'hashPassword'
op|','
string|'u"12345"'
op|','
nl|'\n'
string|'"secr\\xc3\\xa9t"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unicodeSecret
dedent|''
name|'def'
name|'test_unicodeSecret'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The concatenated sid and password must be encoded to UTF-8 before hashing.\n        """'
newline|'\n'
name|'hash'
op|'='
name|'xmlstream'
op|'.'
name|'hashPassword'
op|'('
string|'u"12345"'
op|','
string|'u"secr\\u00e9t"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'659bf88d8f8e179081f7f3b4a8e7d224652d2853'"
op|','
name|'hash'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IQTest
dedent|''
dedent|''
name|'class'
name|'IQTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests both IQ and the associated IIQResponseTracker callback.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'authenticator'
op|'='
name|'xmlstream'
op|'.'
name|'ConnectAuthenticator'
op|'('
string|"'otherhost'"
op|')'
newline|'\n'
name|'authenticator'
op|'.'
name|'namespace'
op|'='
string|"'testns'"
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'authenticator'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'_callLater'
op|'='
name|'self'
op|'.'
name|'clock'
op|'.'
name|'callLater'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
string|'"<stream:stream xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"xmlns=\'testns\' from=\'otherhost\' version=\'1.0\'>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iq'
op|'='
name|'xmlstream'
op|'.'
name|'IQ'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|','
string|"'get'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testBasic
dedent|''
name|'def'
name|'testBasic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'iq'
op|'['
string|"'type'"
op|']'
op|','
string|"'get'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'iq'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testSend
dedent|''
name|'def'
name|'testSend'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iq'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"<iq type=\'get\' id=\'%s\'/>"'
op|'%'
name|'self'
op|'.'
name|'iq'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testResultResponse
dedent|''
name|'def'
name|'testResultResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|cb
indent|'        '
name|'def'
name|'cb'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|'['
string|"'type'"
op|']'
op|','
string|"'result'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'iq'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
nl|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<iq type=\'result\' id=\'%s\'/>"'
op|'%'
name|'self'
op|'.'
name|'iq'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testErrorResponse
dedent|''
name|'def'
name|'testErrorResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'iq'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'error'
op|'.'
name|'StanzaError'
op|')'
newline|'\n'
nl|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<iq type=\'error\' id=\'%s\'/>"'
op|'%'
name|'self'
op|'.'
name|'iq'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testNonTrackedResponse
dedent|''
name|'def'
name|'testNonTrackedResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that untracked iq responses don\'t trigger any action.\n\n        Untracked means that the id of the incoming response iq is not\n        in the stream\'s C{iqDeferreds} dictionary.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xmlstream'
op|'.'
name|'upgradeWithIQResponseTracker'
op|'('
name|'xs'
op|')'
newline|'\n'
nl|'\n'
comment|"# Make sure we aren't tracking any iq's."
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'xs'
op|'.'
name|'iqDeferreds'
op|')'
newline|'\n'
nl|'\n'
comment|"# Set up a fallback handler that checks the stanza's handled attribute."
nl|'\n'
comment|'# If that is set to True, the iq tracker claims to have handled the'
nl|'\n'
comment|'# response.'
nl|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'getattr'
op|'('
name|'iq'
op|','
string|"'handled'"
op|','
name|'False'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'xs'
op|'.'
name|'addObserver'
op|'('
string|'"/iq"'
op|','
name|'cb'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Receive an untracked iq response'
nl|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<iq type=\'result\' id=\'test\'/>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testCleanup
dedent|''
name|'def'
name|'testCleanup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test if the deferred associated with an iq request is removed\n        from the list kept in the L{XmlStream} object after it has\n        been fired.\n        """'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'iq'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<iq type=\'result\' id=\'%s\'/>"'
op|'%'
name|'self'
op|'.'
name|'iq'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'self'
op|'.'
name|'iq'
op|'['
string|"'id'"
op|']'
op|','
name|'xs'
op|'.'
name|'iqDeferreds'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testDisconnectCleanup
dedent|''
name|'def'
name|'testDisconnectCleanup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test if deferreds for iq\'s that haven\'t yet received a response\n        have their errback called on stream disconnect.\n        """'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'iq'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'connectionLost'
op|'('
string|'"Closed by peer"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ConnectionLost'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testNoModifyingDict
dedent|''
name|'def'
name|'testNoModifyingDict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test to make sure the errbacks cannot cause the iteration of the\n        iqDeferreds to blow up in our face.\n        """'
newline|'\n'
nl|'\n'
DECL|function|eb
name|'def'
name|'eb'
op|'('
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'xmlstream'
op|'.'
name|'IQ'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|')'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'eb'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'iq'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'eb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'connectionLost'
op|'('
string|'"Closed by peer"'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testRequestTimingOut
dedent|''
name|'def'
name|'testRequestTimingOut'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that an iq request with a defined timeout times out.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'iq'
op|'.'
name|'timeout'
op|'='
number|'60'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'iq'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'xmlstream'
op|'.'
name|'TimeoutError'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'1'
op|','
number|'60'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'clock'
op|'.'
name|'calls'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'iqDeferreds'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testRequestNotTimingOut
dedent|''
name|'def'
name|'testRequestNotTimingOut'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that an iq request with a defined timeout does not time out\n        when a response was received before the timeout period elapsed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'iq'
op|'.'
name|'timeout'
op|'='
number|'60'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'iq'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'callLater'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dataReceived'
op|','
nl|'\n'
string|'"<iq type=\'result\' id=\'%s\'/>"'
op|'%'
name|'self'
op|'.'
name|'iq'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'1'
op|','
number|'1'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'clock'
op|'.'
name|'calls'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testDisconnectTimeoutCancellation
dedent|''
name|'def'
name|'testDisconnectTimeoutCancellation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test if timeouts for iq\'s that haven\'t yet received a response\n        are cancelled on stream disconnect.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'iq'
op|'.'
name|'timeout'
op|'='
number|'60'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'iq'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'connectionLost'
op|'('
string|'"Closed by peer"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ConnectionLost'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'clock'
op|'.'
name|'calls'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|XmlStreamTest
dedent|''
dedent|''
name|'class'
name|'XmlStreamTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|onStreamStart
indent|'    '
name|'def'
name|'onStreamStart'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'gotStreamStart'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|onStreamEnd
dedent|''
name|'def'
name|'onStreamEnd'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'gotStreamEnd'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|onStreamError
dedent|''
name|'def'
name|'onStreamError'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'gotStreamError'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set up XmlStream and several observers.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'gotStreamStart'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'gotStreamEnd'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'gotStreamError'
op|'='
name|'False'
newline|'\n'
name|'xs'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'addObserver'
op|'('
string|"'//event/stream/start'"
op|','
name|'self'
op|'.'
name|'onStreamStart'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'addObserver'
op|'('
string|"'//event/stream/end'"
op|','
name|'self'
op|'.'
name|'onStreamEnd'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'addObserver'
op|'('
string|"'//event/stream/error'"
op|','
name|'self'
op|'.'
name|'onStreamError'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransportWithDisconnection'
op|'('
op|')'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'protocol'
op|'='
name|'xs'
newline|'\n'
name|'xs'
op|'.'
name|'namespace'
op|'='
string|"'testns'"
newline|'\n'
name|'xs'
op|'.'
name|'version'
op|'='
op|'('
number|'1'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'='
name|'xs'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendHeaderBasic
dedent|''
name|'def'
name|'test_sendHeaderBasic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Basic test on the header sent by sendHeader.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'sendHeader'
op|'('
op|')'
newline|'\n'
name|'splitHeader'
op|'='
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'['
number|'0'
op|':'
op|'-'
number|'1'
op|']'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"<stream:stream"'
op|','
name|'splitHeader'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\'"'
op|','
nl|'\n'
name|'splitHeader'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"xmlns=\'testns\'"'
op|','
name|'splitHeader'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"version=\'1.0\'"'
op|','
name|'splitHeader'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'xs'
op|'.'
name|'_headerSent'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendHeaderAdditionalNamespaces
dedent|''
name|'def'
name|'test_sendHeaderAdditionalNamespaces'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test for additional namespace declarations.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'prefixes'
op|'['
string|"'jabber:server:dialback'"
op|']'
op|'='
string|"'db'"
newline|'\n'
name|'xs'
op|'.'
name|'sendHeader'
op|'('
op|')'
newline|'\n'
name|'splitHeader'
op|'='
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'['
number|'0'
op|':'
op|'-'
number|'1'
op|']'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"<stream:stream"'
op|','
name|'splitHeader'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\'"'
op|','
nl|'\n'
name|'splitHeader'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"xmlns:db=\'jabber:server:dialback\'"'
op|','
name|'splitHeader'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"xmlns=\'testns\'"'
op|','
name|'splitHeader'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"version=\'1.0\'"'
op|','
name|'splitHeader'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'xs'
op|'.'
name|'_headerSent'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendHeaderInitiating
dedent|''
name|'def'
name|'test_sendHeaderInitiating'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test addressing when initiating a stream.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'thisEntity'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|"'thisHost'"
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'otherEntity'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|"'otherHost'"
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'initiating'
op|'='
name|'True'
newline|'\n'
name|'xs'
op|'.'
name|'sendHeader'
op|'('
op|')'
newline|'\n'
name|'splitHeader'
op|'='
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'['
number|'0'
op|':'
op|'-'
number|'1'
op|']'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"to=\'otherhost\'"'
op|','
name|'splitHeader'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"from=\'thishost\'"'
op|','
name|'splitHeader'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendHeaderReceiving
dedent|''
name|'def'
name|'test_sendHeaderReceiving'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test addressing when receiving a stream.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'thisEntity'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|"'thisHost'"
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'otherEntity'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|"'otherHost'"
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'initiating'
op|'='
name|'False'
newline|'\n'
name|'xs'
op|'.'
name|'sid'
op|'='
string|"'session01'"
newline|'\n'
name|'xs'
op|'.'
name|'sendHeader'
op|'('
op|')'
newline|'\n'
name|'splitHeader'
op|'='
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|'['
number|'0'
op|':'
op|'-'
number|'1'
op|']'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"to=\'otherhost\'"'
op|','
name|'splitHeader'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"from=\'thishost\'"'
op|','
name|'splitHeader'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"id=\'session01\'"'
op|','
name|'splitHeader'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_receiveStreamError
dedent|''
name|'def'
name|'test_receiveStreamError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test events when a stream error is received.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:client\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"from=\'example.com\' id=\'12345\' version=\'1.0\'>"'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:error/>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'gotStreamError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'gotStreamEnd'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendStreamErrorInitiating
dedent|''
name|'def'
name|'test_sendStreamErrorInitiating'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test sendStreamError on an initiating xmlstream with a header sent.\n\n        An error should be sent out and the connection lost.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'initiating'
op|'='
name|'True'
newline|'\n'
name|'xs'
op|'.'
name|'sendHeader'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'sendStreamError'
op|'('
name|'error'
op|'.'
name|'StreamError'
op|'('
string|"'version-unsupported'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
string|"''"
op|','
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'gotStreamEnd'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendStreamErrorInitiatingNoHeader
dedent|''
name|'def'
name|'test_sendStreamErrorInitiatingNoHeader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test sendStreamError on an initiating xmlstream without having sent a\n        header.\n\n        In this case, no header should be generated. Also, the error should\n        not be sent out on the stream. Just closing the connection.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'initiating'
op|'='
name|'True'
newline|'\n'
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'sendStreamError'
op|'('
name|'error'
op|'.'
name|'StreamError'
op|'('
string|"'version-unsupported'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNot'
op|'('
name|'xs'
op|'.'
name|'_headerSent'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|','
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'gotStreamEnd'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendStreamErrorReceiving
dedent|''
name|'def'
name|'test_sendStreamErrorReceiving'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test sendStreamError on a receiving xmlstream with a header sent.\n\n        An error should be sent out and the connection lost.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'initiating'
op|'='
name|'False'
newline|'\n'
name|'xs'
op|'.'
name|'sendHeader'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'sendStreamError'
op|'('
name|'error'
op|'.'
name|'StreamError'
op|'('
string|"'version-unsupported'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
string|"''"
op|','
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'gotStreamEnd'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendStreamErrorReceivingNoHeader
dedent|''
name|'def'
name|'test_sendStreamErrorReceivingNoHeader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test sendStreamError on a receiving xmlstream without having sent a\n        header.\n\n        In this case, a header should be generated. Then, the error should\n        be sent out on the stream followed by closing the connection.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'initiating'
op|'='
name|'False'
newline|'\n'
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'sendStreamError'
op|'('
name|'error'
op|'.'
name|'StreamError'
op|'('
string|"'version-unsupported'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'xs'
op|'.'
name|'_headerSent'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
string|"''"
op|','
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'gotStreamEnd'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reset
dedent|''
name|'def'
name|'test_reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test resetting the XML stream to start a new layer.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'sendHeader'
op|'('
op|')'
newline|'\n'
name|'stream'
op|'='
name|'xs'
op|'.'
name|'stream'
newline|'\n'
name|'xs'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'stream'
op|','
name|'xs'
op|'.'
name|'stream'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNot'
op|'('
name|'xs'
op|'.'
name|'_headerSent'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_send
dedent|''
name|'def'
name|'test_send'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test send with various types of objects.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'send'
op|'('
string|"'<presence/>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'<presence/>'"
op|')'
newline|'\n'
nl|'\n'
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'el'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'testns'"
op|','
string|"'presence'"
op|')'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'send'
op|'('
name|'el'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'<presence/>'"
op|')'
newline|'\n'
nl|'\n'
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'el'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'http://etherx.jabber.org/streams'"
op|','
string|"'features'"
op|')'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'send'
op|'('
name|'el'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'<stream:features/>'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_authenticator
dedent|''
name|'def'
name|'test_authenticator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the associated authenticator is correctly called.\n        """'
newline|'\n'
name|'connectionMadeCalls'
op|'='
op|'['
op|']'
newline|'\n'
name|'streamStartedCalls'
op|'='
op|'['
op|']'
newline|'\n'
name|'associateWithStreamCalls'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|class|TestAuthenticator
name|'class'
name|'TestAuthenticator'
op|':'
newline|'\n'
DECL|member|connectionMade
indent|'            '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'connectionMadeCalls'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|streamStarted
dedent|''
name|'def'
name|'streamStarted'
op|'('
name|'self'
op|','
name|'rootElement'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'streamStartedCalls'
op|'.'
name|'append'
op|'('
name|'rootElement'
op|')'
newline|'\n'
nl|'\n'
DECL|member|associateWithStream
dedent|''
name|'def'
name|'associateWithStream'
op|'('
name|'self'
op|','
name|'xs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'associateWithStreamCalls'
op|'.'
name|'append'
op|'('
name|'xs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'a'
op|'='
name|'TestAuthenticator'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'a'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'xs'
op|']'
op|','
name|'associateWithStreamCalls'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'None'
op|']'
op|','
name|'connectionMadeCalls'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:client\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"from=\'example.com\' id=\'12345\'>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'streamStartedCalls'
op|')'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'None'
op|']'
op|','
name|'connectionMadeCalls'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestError
dedent|''
dedent|''
name|'class'
name|'TestError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AuthenticatorTest
dedent|''
name|'class'
name|'AuthenticatorTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'authenticator'
op|'='
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'self'
op|'.'
name|'authenticator'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_streamStart
dedent|''
name|'def'
name|'test_streamStart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test streamStart to fill the appropriate attributes from the\n        stream header.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:client\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"from=\'example.org\' to=\'example.com\' id=\'12345\' "'
nl|'\n'
string|'"version=\'1.0\'>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
number|'1'
op|','
number|'0'
op|')'
op|','
name|'xs'
op|'.'
name|'version'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'xs'
op|'.'
name|'sid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'invalid'"
op|','
name|'xs'
op|'.'
name|'namespace'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'xs'
op|'.'
name|'otherEntity'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'xs'
op|'.'
name|'thisEntity'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_streamStartLegacy
dedent|''
name|'def'
name|'test_streamStartLegacy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test streamStart to fill the appropriate attributes from the\n        stream header for a pre-XMPP-1.0 header.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:client\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"from=\'example.com\' id=\'12345\'>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
number|'0'
op|','
number|'0'
op|')'
op|','
name|'xs'
op|'.'
name|'version'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_streamBadVersionOneDigit
dedent|''
name|'def'
name|'test_streamBadVersionOneDigit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test streamStart to fill the appropriate attributes from the\n        stream header for a version with only one digit.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:client\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"from=\'example.com\' id=\'12345\' version=\'1\'>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
number|'0'
op|','
number|'0'
op|')'
op|','
name|'xs'
op|'.'
name|'version'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_streamBadVersionNoNumber
dedent|''
name|'def'
name|'test_streamBadVersionNoNumber'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test streamStart to fill the appropriate attributes from the\n        stream header for a malformed version.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:client\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"from=\'example.com\' id=\'12345\' version=\'blah\'>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
number|'0'
op|','
number|'0'
op|')'
op|','
name|'xs'
op|'.'
name|'version'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConnectAuthenticatorTest
dedent|''
dedent|''
name|'class'
name|'ConnectAuthenticatorTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'gotAuthenticated'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'initFailure'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'='
name|'xmlstream'
op|'.'
name|'ConnectAuthenticator'
op|'('
string|"'otherHost'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'self'
op|'.'
name|'authenticator'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'addObserver'
op|'('
string|"'//event/stream/authd'"
op|','
name|'self'
op|'.'
name|'onAuthenticated'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'addObserver'
op|'('
string|"'//event/xmpp/initfailed'"
op|','
name|'self'
op|'.'
name|'onInitFailed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|onAuthenticated
dedent|''
name|'def'
name|'onAuthenticated'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'gotAuthenticated'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|onInitFailed
dedent|''
name|'def'
name|'onInitFailed'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'initFailure'
op|'='
name|'failure'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testSucces
dedent|''
name|'def'
name|'testSucces'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test successful completion of an initialization step.\n        """'
newline|'\n'
DECL|class|Initializer
name|'class'
name|'Initializer'
op|':'
newline|'\n'
DECL|member|initialize
indent|'            '
name|'def'
name|'initialize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'init'
op|'='
name|'Initializer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'initializers'
op|'='
op|'['
name|'init'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'initializeStream'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'initializers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'gotAuthenticated'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testFailure
dedent|''
name|'def'
name|'testFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test failure of an initialization step.\n        """'
newline|'\n'
DECL|class|Initializer
name|'class'
name|'Initializer'
op|':'
newline|'\n'
DECL|member|initialize
indent|'            '
name|'def'
name|'initialize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'TestError'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'init'
op|'='
name|'Initializer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'initializers'
op|'='
op|'['
name|'init'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'initializeStream'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'init'
op|']'
op|','
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'initializers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'gotAuthenticated'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'initFailure'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'initFailure'
op|'.'
name|'check'
op|'('
name|'TestError'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_streamStart
dedent|''
name|'def'
name|'test_streamStart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test streamStart to fill the appropriate attributes from the\n        stream header.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'namespace'
op|'='
string|"'testns'"
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:client\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"from=\'example.com\' to=\'example.org\' id=\'12345\' "'
nl|'\n'
string|'"version=\'1.0\'>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
number|'1'
op|','
number|'0'
op|')'
op|','
name|'xs'
op|'.'
name|'version'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'12345'"
op|','
name|'xs'
op|'.'
name|'sid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'testns'"
op|','
name|'xs'
op|'.'
name|'namespace'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'example.com'"
op|','
name|'xs'
op|'.'
name|'otherEntity'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'xs'
op|'.'
name|'thisEntity'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNot'
op|'('
name|'self'
op|'.'
name|'gotAuthenticated'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:features>"'
nl|'\n'
string|'"<test xmlns=\'testns\'/>"'
nl|'\n'
string|'"</stream:features>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
op|'('
string|"'testns'"
op|','
string|"'test'"
op|')'
op|','
name|'xs'
op|'.'
name|'features'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'gotAuthenticated'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListenAuthenticatorTest
dedent|''
dedent|''
name|'class'
name|'ListenAuthenticatorTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'authenticator'
op|'='
name|'xmlstream'
op|'.'
name|'ListenAuthenticator'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'self'
op|'.'
name|'authenticator'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_streamStart
dedent|''
name|'def'
name|'test_streamStart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test streamStart to fill the appropriate attributes from the\n        stream header.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'xs'
op|'.'
name|'sid'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:client\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"from=\'example.org\' to=\'example.com\' id=\'12345\' "'
nl|'\n'
string|'"version=\'1.0\'>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
number|'1'
op|','
number|'0'
op|')'
op|','
name|'xs'
op|'.'
name|'version'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'None'
op|','
name|'xs'
op|'.'
name|'sid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
string|"'12345'"
op|','
name|'xs'
op|'.'
name|'sid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'jabber:client'"
op|','
name|'xs'
op|'.'
name|'namespace'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'xs'
op|'.'
name|'otherEntity'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'example.com'"
op|','
name|'xs'
op|'.'
name|'thisEntity'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TLSInitiatingInitializerTest
dedent|''
dedent|''
name|'class'
name|'TLSInitiatingInitializerTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'output'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'done'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'savedSSL'
op|'='
name|'xmlstream'
op|'.'
name|'ssl'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'='
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'self'
op|'.'
name|'authenticator'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'send'
op|'='
name|'self'
op|'.'
name|'output'
op|'.'
name|'append'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:client\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"from=\'example.com\' id=\'12345\' version=\'1.0\'>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'='
name|'xmlstream'
op|'.'
name|'TLSInitiatingInitializer'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xmlstream'
op|'.'
name|'ssl'
op|'='
name|'self'
op|'.'
name|'savedSSL'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testWantedSupported
dedent|''
name|'def'
name|'testWantedSupported'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test start when TLS is wanted and the SSL library available.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'transport'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'transport'
op|'.'
name|'startTLS'
op|'='
name|'lambda'
name|'ctx'
op|':'
name|'self'
op|'.'
name|'done'
op|'.'
name|'append'
op|'('
string|"'TLS'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'reset'
op|'='
name|'lambda'
op|':'
name|'self'
op|'.'
name|'done'
op|'.'
name|'append'
op|'('
string|"'reset'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'sendHeader'
op|'='
name|'lambda'
op|':'
name|'self'
op|'.'
name|'done'
op|'.'
name|'append'
op|'('
string|"'header'"
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'xmlstream'
op|'.'
name|'Reset'
op|')'
newline|'\n'
name|'starttls'
op|'='
name|'self'
op|'.'
name|'output'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'starttls'"
op|','
name|'starttls'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'NS_XMPP_TLS'
op|','
name|'starttls'
op|'.'
name|'uri'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dataReceived'
op|'('
string|'"<proceed xmlns=\'%s\'/>"'
op|'%'
name|'NS_XMPP_TLS'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'TLS'"
op|','
string|"'reset'"
op|','
string|"'header'"
op|']'
op|','
name|'self'
op|'.'
name|'done'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'xmlstream'
op|'.'
name|'ssl'
op|':'
newline|'\n'
indent|'        '
name|'testWantedSupported'
op|'.'
name|'skip'
op|'='
string|'"SSL not available"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testWantedNotSupportedNotRequired
dedent|''
name|'def'
name|'testWantedNotSupportedNotRequired'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test start when TLS is wanted and the SSL library available.\n        """'
newline|'\n'
name|'xmlstream'
op|'.'
name|'ssl'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'self'
op|'.'
name|'output'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testWantedNotSupportedRequired
dedent|''
name|'def'
name|'testWantedNotSupportedRequired'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test start when TLS is wanted and the SSL library available.\n        """'
newline|'\n'
name|'xmlstream'
op|'.'
name|'ssl'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'required'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'xmlstream'
op|'.'
name|'TLSNotSupported'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'self'
op|'.'
name|'output'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testNotWantedRequired
dedent|''
name|'def'
name|'testNotWantedRequired'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test start when TLS is not wanted, but required by the server.\n        """'
newline|'\n'
name|'tls'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'urn:ietf:params:xml:ns:xmpp-tls'"
op|','
string|"'starttls'"
op|')'
op|')'
newline|'\n'
name|'tls'
op|'.'
name|'addElement'
op|'('
string|"'required'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'features'
op|'='
op|'{'
op|'('
name|'tls'
op|'.'
name|'uri'
op|','
name|'tls'
op|'.'
name|'name'
op|')'
op|':'
name|'tls'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'wanted'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'self'
op|'.'
name|'output'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'xmlstream'
op|'.'
name|'TLSRequired'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testNotWantedNotRequired
dedent|''
name|'def'
name|'testNotWantedNotRequired'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test start when TLS is not wanted, but required by the server.\n        """'
newline|'\n'
name|'tls'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'urn:ietf:params:xml:ns:xmpp-tls'"
op|','
string|"'starttls'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'features'
op|'='
op|'{'
op|'('
name|'tls'
op|'.'
name|'uri'
op|','
name|'tls'
op|'.'
name|'name'
op|')'
op|':'
name|'tls'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'wanted'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'self'
op|'.'
name|'output'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testFailed
dedent|''
name|'def'
name|'testFailed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test failed TLS negotiation.\n        """'
newline|'\n'
comment|"# Pretend that ssl is supported, it isn't actually used when the"
nl|'\n'
comment|'# server starts out with a failure in response to our initial'
nl|'\n'
comment|'# C{starttls} stanza.'
nl|'\n'
name|'xmlstream'
op|'.'
name|'ssl'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'xmlstream'
op|'.'
name|'TLSFailed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dataReceived'
op|'('
string|'"<failure xmlns=\'%s\'/>"'
op|'%'
name|'NS_XMPP_TLS'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestFeatureInitializer
dedent|''
dedent|''
name|'class'
name|'TestFeatureInitializer'
op|'('
name|'xmlstream'
op|'.'
name|'BaseFeatureInitiatingInitializer'
op|')'
op|':'
newline|'\n'
DECL|variable|feature
indent|'    '
name|'feature'
op|'='
op|'('
string|"'testns'"
op|','
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|start
name|'def'
name|'start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseFeatureInitiatingInitializerTest
dedent|''
dedent|''
name|'class'
name|'BaseFeatureInitiatingInitializerTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'xmlstream'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'='
name|'TestFeatureInitializer'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testAdvertized
dedent|''
name|'def'
name|'testAdvertized'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that an advertized feature results in successful initialization.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'features'
op|'='
op|'{'
name|'self'
op|'.'
name|'init'
op|'.'
name|'feature'
op|':'
nl|'\n'
name|'domish'
op|'.'
name|'Element'
op|'('
name|'self'
op|'.'
name|'init'
op|'.'
name|'feature'
op|')'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'init'
op|'.'
name|'initialize'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testNotAdvertizedRequired
dedent|''
name|'def'
name|'testNotAdvertizedRequired'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that when the feature is not advertized, but required by the\n        initializer, an exception is raised.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'required'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'xmlstream'
op|'.'
name|'FeatureNotAdvertized'
op|','
name|'self'
op|'.'
name|'init'
op|'.'
name|'initialize'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testNotAdvertizedNotRequired
dedent|''
name|'def'
name|'testNotAdvertizedNotRequired'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that when the feature is not advertized, and not required by the\n        initializer, the initializer silently succeeds.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'required'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'init'
op|'.'
name|'initialize'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ToResponseTest
dedent|''
dedent|''
name|'class'
name|'ToResponseTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_toResponse
indent|'    '
name|'def'
name|'test_toResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a response stanza is generated with addressing swapped.\n        """'
newline|'\n'
name|'stanza'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'jabber:client'"
op|','
string|"'iq'"
op|')'
op|')'
newline|'\n'
name|'stanza'
op|'['
string|"'type'"
op|']'
op|'='
string|"'get'"
newline|'\n'
name|'stanza'
op|'['
string|"'to'"
op|']'
op|'='
string|"'user1@example.com'"
newline|'\n'
name|'stanza'
op|'['
string|"'from'"
op|']'
op|'='
string|"'user2@example.com/resource'"
newline|'\n'
name|'stanza'
op|'['
string|"'id'"
op|']'
op|'='
string|"'stanza1'"
newline|'\n'
name|'response'
op|'='
name|'xmlstream'
op|'.'
name|'toResponse'
op|'('
name|'stanza'
op|','
string|"'result'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'stanza'
op|','
name|'response'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|'['
string|"'from'"
op|']'
op|','
string|"'user1@example.com'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|'['
string|"'to'"
op|']'
op|','
string|"'user2@example.com/resource'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|'['
string|"'type'"
op|']'
op|','
string|"'result'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|'['
string|"'id'"
op|']'
op|','
string|"'stanza1'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_toResponseNoFrom
dedent|''
name|'def'
name|'test_toResponseNoFrom'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a response is generated from a stanza without a from address.\n        """'
newline|'\n'
name|'stanza'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'jabber:client'"
op|','
string|"'iq'"
op|')'
op|')'
newline|'\n'
name|'stanza'
op|'['
string|"'type'"
op|']'
op|'='
string|"'get'"
newline|'\n'
name|'stanza'
op|'['
string|"'to'"
op|']'
op|'='
string|"'user1@example.com'"
newline|'\n'
name|'response'
op|'='
name|'xmlstream'
op|'.'
name|'toResponse'
op|'('
name|'stanza'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|'['
string|"'from'"
op|']'
op|','
string|"'user1@example.com'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'response'
op|'.'
name|'hasAttribute'
op|'('
string|"'to'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_toResponseNoTo
dedent|''
name|'def'
name|'test_toResponseNoTo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a response is generated from a stanza without a to address.\n        """'
newline|'\n'
name|'stanza'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'jabber:client'"
op|','
string|"'iq'"
op|')'
op|')'
newline|'\n'
name|'stanza'
op|'['
string|"'type'"
op|']'
op|'='
string|"'get'"
newline|'\n'
name|'stanza'
op|'['
string|"'from'"
op|']'
op|'='
string|"'user2@example.com/resource'"
newline|'\n'
name|'response'
op|'='
name|'xmlstream'
op|'.'
name|'toResponse'
op|'('
name|'stanza'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'response'
op|'.'
name|'hasAttribute'
op|'('
string|"'from'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|'['
string|"'to'"
op|']'
op|','
string|"'user2@example.com/resource'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_toResponseNoAddressing
dedent|''
name|'def'
name|'test_toResponseNoAddressing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a response is generated from a stanza without any addressing.\n        """'
newline|'\n'
name|'stanza'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'jabber:client'"
op|','
string|"'message'"
op|')'
op|')'
newline|'\n'
name|'stanza'
op|'['
string|"'type'"
op|']'
op|'='
string|"'chat'"
newline|'\n'
name|'response'
op|'='
name|'xmlstream'
op|'.'
name|'toResponse'
op|'('
name|'stanza'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'response'
op|'.'
name|'hasAttribute'
op|'('
string|"'to'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'response'
op|'.'
name|'hasAttribute'
op|'('
string|"'from'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noID
dedent|''
name|'def'
name|'test_noID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a proper response is generated without id attribute.\n        """'
newline|'\n'
name|'stanza'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'jabber:client'"
op|','
string|"'message'"
op|')'
op|')'
newline|'\n'
name|'response'
op|'='
name|'xmlstream'
op|'.'
name|'toResponse'
op|'('
name|'stanza'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'response'
op|'.'
name|'hasAttribute'
op|'('
string|"'id'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noType
dedent|''
name|'def'
name|'test_noType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a proper response is generated without type attribute.\n        """'
newline|'\n'
name|'stanza'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'jabber:client'"
op|','
string|"'message'"
op|')'
op|')'
newline|'\n'
name|'response'
op|'='
name|'xmlstream'
op|'.'
name|'toResponse'
op|'('
name|'stanza'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'response'
op|'.'
name|'hasAttribute'
op|'('
string|"'type'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyFactory
dedent|''
dedent|''
name|'class'
name|'DummyFactory'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Dummy XmlStream factory that only registers bootstrap observers.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'callbacks'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addBootstrap
dedent|''
name|'def'
name|'addBootstrap'
op|'('
name|'self'
op|','
name|'event'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'callbacks'
op|'['
name|'event'
op|']'
op|'='
name|'callback'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyXMPPHandler
dedent|''
dedent|''
name|'class'
name|'DummyXMPPHandler'
op|'('
name|'xmlstream'
op|'.'
name|'XMPPHandler'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Dummy XMPP subprotocol handler to count the methods are called on it.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'doneMade'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'doneInitialized'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'doneLost'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeConnection
dedent|''
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'xs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'doneMade'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionInitialized
dedent|''
name|'def'
name|'connectionInitialized'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'doneInitialized'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'doneLost'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMPPHandlerTest
dedent|''
dedent|''
name|'class'
name|'XMPPHandlerTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{xmlstream.XMPPHandler}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_interface
name|'def'
name|'test_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{xmlstream.XMPPHandler} implements L{ijabber.IXMPPHandler}.\n        """'
newline|'\n'
name|'verifyObject'
op|'('
name|'ijabber'
op|'.'
name|'IXMPPHandler'
op|','
name|'xmlstream'
op|'.'
name|'XMPPHandler'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_send
dedent|''
name|'def'
name|'test_send'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that data is passed on for sending by the stream manager.\n        """'
newline|'\n'
DECL|class|DummyStreamManager
name|'class'
name|'DummyStreamManager'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'outlist'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|send
dedent|''
name|'def'
name|'send'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'outlist'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'handler'
op|'='
name|'xmlstream'
op|'.'
name|'XMPPHandler'
op|'('
op|')'
newline|'\n'
name|'handler'
op|'.'
name|'parent'
op|'='
name|'DummyStreamManager'
op|'('
op|')'
newline|'\n'
name|'handler'
op|'.'
name|'send'
op|'('
string|"'<presence/>'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'<presence/>'"
op|']'
op|','
name|'handler'
op|'.'
name|'parent'
op|'.'
name|'outlist'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_makeConnection
dedent|''
name|'def'
name|'test_makeConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that makeConnection saves the XML stream and calls connectionMade.\n        """'
newline|'\n'
DECL|class|TestXMPPHandler
name|'class'
name|'TestXMPPHandler'
op|'('
name|'xmlstream'
op|'.'
name|'XMPPHandler'
op|')'
op|':'
newline|'\n'
DECL|member|connectionMade
indent|'            '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'doneMade'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'handler'
op|'='
name|'TestXMPPHandler'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
op|')'
newline|'\n'
name|'handler'
op|'.'
name|'makeConnection'
op|'('
name|'xs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'handler'
op|'.'
name|'doneMade'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'xs'
op|','
name|'handler'
op|'.'
name|'xmlstream'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectionLost
dedent|''
name|'def'
name|'test_connectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that connectionLost forgets the XML stream.\n        """'
newline|'\n'
name|'handler'
op|'='
name|'xmlstream'
op|'.'
name|'XMPPHandler'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
op|')'
newline|'\n'
name|'handler'
op|'.'
name|'makeConnection'
op|'('
name|'xs'
op|')'
newline|'\n'
name|'handler'
op|'.'
name|'connectionLost'
op|'('
name|'Exception'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'handler'
op|'.'
name|'xmlstream'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMPPHandlerCollectionTest
dedent|''
dedent|''
name|'class'
name|'XMPPHandlerCollectionTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{xmlstream.XMPPHandlerCollection}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'collection'
op|'='
name|'xmlstream'
op|'.'
name|'XMPPHandlerCollection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_interface
dedent|''
name|'def'
name|'test_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{xmlstream.StreamManager} implements L{ijabber.IXMPPHandlerCollection}.\n        """'
newline|'\n'
name|'verifyObject'
op|'('
name|'ijabber'
op|'.'
name|'IXMPPHandlerCollection'
op|','
name|'self'
op|'.'
name|'collection'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addHandler
dedent|''
name|'def'
name|'test_addHandler'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the addition of a protocol handler.\n        """'
newline|'\n'
name|'handler'
op|'='
name|'DummyXMPPHandler'
op|'('
op|')'
newline|'\n'
name|'handler'
op|'.'
name|'setHandlerParent'
op|'('
name|'self'
op|'.'
name|'collection'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'handler'
op|','
name|'self'
op|'.'
name|'collection'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'collection'
op|','
name|'handler'
op|'.'
name|'parent'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeHandler
dedent|''
name|'def'
name|'test_removeHandler'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test removal of a protocol handler.\n        """'
newline|'\n'
name|'handler'
op|'='
name|'DummyXMPPHandler'
op|'('
op|')'
newline|'\n'
name|'handler'
op|'.'
name|'setHandlerParent'
op|'('
name|'self'
op|'.'
name|'collection'
op|')'
newline|'\n'
name|'handler'
op|'.'
name|'disownHandlerParent'
op|'('
name|'self'
op|'.'
name|'collection'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'handler'
op|','
name|'self'
op|'.'
name|'collection'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'handler'
op|'.'
name|'parent'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StreamManagerTest
dedent|''
dedent|''
name|'class'
name|'StreamManagerTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{xmlstream.StreamManager}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'factory'
op|'='
name|'DummyFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'streamManager'
op|'='
name|'xmlstream'
op|'.'
name|'StreamManager'
op|'('
name|'factory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_basic
dedent|''
name|'def'
name|'test_basic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test correct initialization and setup of factory observers.\n        """'
newline|'\n'
name|'sm'
op|'='
name|'self'
op|'.'
name|'streamManager'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'sm'
op|'.'
name|'xmlstream'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'sm'
op|'.'
name|'handlers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sm'
op|'.'
name|'_connected'
op|','
nl|'\n'
name|'sm'
op|'.'
name|'factory'
op|'.'
name|'callbacks'
op|'['
string|"'//event/stream/connected'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sm'
op|'.'
name|'_authd'
op|','
nl|'\n'
name|'sm'
op|'.'
name|'factory'
op|'.'
name|'callbacks'
op|'['
string|"'//event/stream/authd'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sm'
op|'.'
name|'_disconnected'
op|','
nl|'\n'
name|'sm'
op|'.'
name|'factory'
op|'.'
name|'callbacks'
op|'['
string|"'//event/stream/end'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sm'
op|'.'
name|'initializationFailed'
op|','
nl|'\n'
name|'sm'
op|'.'
name|'factory'
op|'.'
name|'callbacks'
op|'['
string|"'//event/xmpp/initfailed'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connected
dedent|''
name|'def'
name|'test_connected'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that protocol handlers have their connectionMade method called\n        when the XML stream is connected.\n        """'
newline|'\n'
name|'sm'
op|'='
name|'self'
op|'.'
name|'streamManager'
newline|'\n'
name|'handler'
op|'='
name|'DummyXMPPHandler'
op|'('
op|')'
newline|'\n'
name|'handler'
op|'.'
name|'setHandlerParent'
op|'('
name|'sm'
op|')'
newline|'\n'
name|'xs'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
op|')'
newline|'\n'
name|'sm'
op|'.'
name|'_connected'
op|'('
name|'xs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'1'
op|','
name|'handler'
op|'.'
name|'doneMade'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'0'
op|','
name|'handler'
op|'.'
name|'doneInitialized'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'0'
op|','
name|'handler'
op|'.'
name|'doneLost'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectedLogTrafficFalse
dedent|''
name|'def'
name|'test_connectedLogTrafficFalse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test raw data functions unset when logTraffic is set to False.\n        """'
newline|'\n'
name|'sm'
op|'='
name|'self'
op|'.'
name|'streamManager'
newline|'\n'
name|'handler'
op|'='
name|'DummyXMPPHandler'
op|'('
op|')'
newline|'\n'
name|'handler'
op|'.'
name|'setHandlerParent'
op|'('
name|'sm'
op|')'
newline|'\n'
name|'xs'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
op|')'
newline|'\n'
name|'sm'
op|'.'
name|'_connected'
op|'('
name|'xs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'xs'
op|'.'
name|'rawDataInFn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'xs'
op|'.'
name|'rawDataOutFn'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectedLogTrafficTrue
dedent|''
name|'def'
name|'test_connectedLogTrafficTrue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test raw data functions set when logTraffic is set to True.\n        """'
newline|'\n'
name|'sm'
op|'='
name|'self'
op|'.'
name|'streamManager'
newline|'\n'
name|'sm'
op|'.'
name|'logTraffic'
op|'='
name|'True'
newline|'\n'
name|'handler'
op|'='
name|'DummyXMPPHandler'
op|'('
op|')'
newline|'\n'
name|'handler'
op|'.'
name|'setHandlerParent'
op|'('
name|'sm'
op|')'
newline|'\n'
name|'xs'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
op|')'
newline|'\n'
name|'sm'
op|'.'
name|'_connected'
op|'('
name|'xs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'None'
op|','
name|'xs'
op|'.'
name|'rawDataInFn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'None'
op|','
name|'xs'
op|'.'
name|'rawDataOutFn'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_authd
dedent|''
name|'def'
name|'test_authd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that protocol handlers have their connectionInitialized method\n        called when the XML stream is initialized.\n        """'
newline|'\n'
name|'sm'
op|'='
name|'self'
op|'.'
name|'streamManager'
newline|'\n'
name|'handler'
op|'='
name|'DummyXMPPHandler'
op|'('
op|')'
newline|'\n'
name|'handler'
op|'.'
name|'setHandlerParent'
op|'('
name|'sm'
op|')'
newline|'\n'
name|'xs'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
op|')'
newline|'\n'
name|'sm'
op|'.'
name|'_authd'
op|'('
name|'xs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'0'
op|','
name|'handler'
op|'.'
name|'doneMade'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'1'
op|','
name|'handler'
op|'.'
name|'doneInitialized'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'0'
op|','
name|'handler'
op|'.'
name|'doneLost'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disconnected
dedent|''
name|'def'
name|'test_disconnected'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that protocol handlers have their connectionLost method\n        called when the XML stream is disconnected.\n        """'
newline|'\n'
name|'sm'
op|'='
name|'self'
op|'.'
name|'streamManager'
newline|'\n'
name|'handler'
op|'='
name|'DummyXMPPHandler'
op|'('
op|')'
newline|'\n'
name|'handler'
op|'.'
name|'setHandlerParent'
op|'('
name|'sm'
op|')'
newline|'\n'
name|'xs'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
op|')'
newline|'\n'
name|'sm'
op|'.'
name|'_disconnected'
op|'('
name|'xs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'0'
op|','
name|'handler'
op|'.'
name|'doneMade'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'0'
op|','
name|'handler'
op|'.'
name|'doneInitialized'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'1'
op|','
name|'handler'
op|'.'
name|'doneLost'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addHandler
dedent|''
name|'def'
name|'test_addHandler'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the addition of a protocol handler while not connected.\n        """'
newline|'\n'
name|'sm'
op|'='
name|'self'
op|'.'
name|'streamManager'
newline|'\n'
name|'handler'
op|'='
name|'DummyXMPPHandler'
op|'('
op|')'
newline|'\n'
name|'handler'
op|'.'
name|'setHandlerParent'
op|'('
name|'sm'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'0'
op|','
name|'handler'
op|'.'
name|'doneMade'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'0'
op|','
name|'handler'
op|'.'
name|'doneInitialized'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'0'
op|','
name|'handler'
op|'.'
name|'doneLost'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addHandlerInitialized
dedent|''
name|'def'
name|'test_addHandlerInitialized'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the addition of a protocol handler after the stream\n        have been initialized.\n\n        Make sure that the handler will have the connected stream\n        passed via C{makeConnection} and have C{connectionInitialized}\n        called.\n        """'
newline|'\n'
name|'sm'
op|'='
name|'self'
op|'.'
name|'streamManager'
newline|'\n'
name|'xs'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
op|')'
newline|'\n'
name|'sm'
op|'.'
name|'_connected'
op|'('
name|'xs'
op|')'
newline|'\n'
name|'sm'
op|'.'
name|'_authd'
op|'('
name|'xs'
op|')'
newline|'\n'
name|'handler'
op|'='
name|'DummyXMPPHandler'
op|'('
op|')'
newline|'\n'
name|'handler'
op|'.'
name|'setHandlerParent'
op|'('
name|'sm'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'1'
op|','
name|'handler'
op|'.'
name|'doneMade'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'1'
op|','
name|'handler'
op|'.'
name|'doneInitialized'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'0'
op|','
name|'handler'
op|'.'
name|'doneLost'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendInitialized
dedent|''
name|'def'
name|'test_sendInitialized'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test send when the stream has been initialized.\n\n        The data should be sent directly over the XML stream.\n        """'
newline|'\n'
name|'factory'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStreamFactory'
op|'('
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
op|')'
newline|'\n'
name|'sm'
op|'='
name|'xmlstream'
op|'.'
name|'StreamManager'
op|'('
name|'factory'
op|')'
newline|'\n'
name|'xs'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'transport'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:client\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"from=\'example.com\' id=\'12345\'>"'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'dispatch'
op|'('
name|'xs'
op|','
string|'"//event/stream/authd"'
op|')'
newline|'\n'
name|'sm'
op|'.'
name|'send'
op|'('
string|'"<presence/>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"<presence/>"'
op|','
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendNotConnected
dedent|''
name|'def'
name|'test_sendNotConnected'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test send when there is no established XML stream.\n\n        The data should be cached until an XML stream has been established and\n        initialized.\n        """'
newline|'\n'
name|'factory'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStreamFactory'
op|'('
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
op|')'
newline|'\n'
name|'sm'
op|'='
name|'xmlstream'
op|'.'
name|'StreamManager'
op|'('
name|'factory'
op|')'
newline|'\n'
name|'handler'
op|'='
name|'DummyXMPPHandler'
op|'('
op|')'
newline|'\n'
name|'sm'
op|'.'
name|'addHandler'
op|'('
name|'handler'
op|')'
newline|'\n'
nl|'\n'
name|'xs'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'transport'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'sm'
op|'.'
name|'send'
op|'('
string|'"<presence/>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'""'
op|','
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"<presence/>"'
op|','
name|'sm'
op|'.'
name|'_packetQueue'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'xs'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'""'
op|','
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"<presence/>"'
op|','
name|'sm'
op|'.'
name|'_packetQueue'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:client\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"from=\'example.com\' id=\'12345\'>"'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'dispatch'
op|'('
name|'xs'
op|','
string|'"//event/stream/authd"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"<presence/>"'
op|','
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'sm'
op|'.'
name|'_packetQueue'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendNotInitialized
dedent|''
name|'def'
name|'test_sendNotInitialized'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test send when the stream is connected but not yet initialized.\n\n        The data should be cached until the XML stream has been initialized.\n        """'
newline|'\n'
name|'factory'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStreamFactory'
op|'('
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
op|')'
newline|'\n'
name|'sm'
op|'='
name|'xmlstream'
op|'.'
name|'StreamManager'
op|'('
name|'factory'
op|')'
newline|'\n'
name|'xs'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'transport'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:client\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"from=\'example.com\' id=\'12345\'>"'
op|')'
newline|'\n'
name|'sm'
op|'.'
name|'send'
op|'('
string|'"<presence/>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'""'
op|','
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"<presence/>"'
op|','
name|'sm'
op|'.'
name|'_packetQueue'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendDisconnected
dedent|''
name|'def'
name|'test_sendDisconnected'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test send after XML stream disconnection.\n\n        The data should be cached until a new XML stream has been established\n        and initialized.\n        """'
newline|'\n'
name|'factory'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStreamFactory'
op|'('
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
op|')'
newline|'\n'
name|'sm'
op|'='
name|'xmlstream'
op|'.'
name|'StreamManager'
op|'('
name|'factory'
op|')'
newline|'\n'
name|'handler'
op|'='
name|'DummyXMPPHandler'
op|'('
op|')'
newline|'\n'
name|'sm'
op|'.'
name|'addHandler'
op|'('
name|'handler'
op|')'
newline|'\n'
nl|'\n'
name|'xs'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'transport'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'connectionLost'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'sm'
op|'.'
name|'send'
op|'('
string|'"<presence/>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'""'
op|','
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"<presence/>"'
op|','
name|'sm'
op|'.'
name|'_packetQueue'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|XmlStreamServerFactoryTest
dedent|''
dedent|''
name|'class'
name|'XmlStreamServerFactoryTest'
op|'('
name|'GenericXmlStreamFactoryTestsMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{xmlstream.XmlStreamServerFactory}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set up a server factory with a authenticator factory function.\n        """'
newline|'\n'
DECL|class|TestAuthenticator
name|'class'
name|'TestAuthenticator'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'xmlstreams'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|associateWithStream
dedent|''
name|'def'
name|'associateWithStream'
op|'('
name|'self'
op|','
name|'xs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'xmlstreams'
op|'.'
name|'append'
op|'('
name|'xs'
op|')'
newline|'\n'
nl|'\n'
DECL|function|authenticatorFactory
dedent|''
dedent|''
name|'def'
name|'authenticatorFactory'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'TestAuthenticator'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'factory'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStreamServerFactory'
op|'('
name|'authenticatorFactory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_interface
dedent|''
name|'def'
name|'test_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{XmlStreamServerFactory} is a L{Factory}.\n        """'
newline|'\n'
name|'verifyObject'
op|'('
name|'IProtocolFactory'
op|','
name|'self'
op|'.'
name|'factory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildProtocolAuthenticatorInstantiation
dedent|''
name|'def'
name|'test_buildProtocolAuthenticatorInstantiation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The authenticator factory should be used to instantiate the\n        authenticator and pass it to the protocol.\n\n        The default protocol, L{XmlStream} stores the authenticator it is\n        passed, and calls its C{associateWithStream} method. so we use that to\n        check whether our authenticator factory is used and the protocol\n        instance gets an authenticator.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
name|'xs'
op|']'
op|','
name|'xs'
op|'.'
name|'authenticator'
op|'.'
name|'xmlstreams'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildProtocolXmlStream
dedent|''
name|'def'
name|'test_buildProtocolXmlStream'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The protocol factory creates Jabber XML Stream protocols by default.\n        """'
newline|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'xs'
op|','
name|'xmlstream'
op|'.'
name|'XmlStream'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildProtocolTwice
dedent|''
name|'def'
name|'test_buildProtocolTwice'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Subsequent calls to buildProtocol should result in different instances\n        of the protocol, as well as their authenticators.\n        """'
newline|'\n'
name|'xs1'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'xs2'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'xs1'
op|','
name|'xs2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'xs1'
op|'.'
name|'authenticator'
op|','
name|'xs2'
op|'.'
name|'authenticator'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

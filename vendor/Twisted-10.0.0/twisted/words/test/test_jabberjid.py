begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.words.protocols.jabber.jid}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'protocols'
op|'.'
name|'jabber'
name|'import'
name|'jid'
newline|'\n'
nl|'\n'
DECL|class|JIDParsingTest
name|'class'
name|'JIDParsingTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_parse
indent|'    '
name|'def'
name|'test_parse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test different forms of JIDs.\n        """'
newline|'\n'
comment|'# Basic forms'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'jid'
op|'.'
name|'parse'
op|'('
string|'"user@host/resource"'
op|')'
op|','
nl|'\n'
op|'('
string|'"user"'
op|','
string|'"host"'
op|','
string|'"resource"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'jid'
op|'.'
name|'parse'
op|'('
string|'"user@host"'
op|')'
op|','
nl|'\n'
op|'('
string|'"user"'
op|','
string|'"host"'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'jid'
op|'.'
name|'parse'
op|'('
string|'"host"'
op|')'
op|','
nl|'\n'
op|'('
name|'None'
op|','
string|'"host"'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'jid'
op|'.'
name|'parse'
op|'('
string|'"host/resource"'
op|')'
op|','
nl|'\n'
op|'('
name|'None'
op|','
string|'"host"'
op|','
string|'"resource"'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# More interesting forms'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'jid'
op|'.'
name|'parse'
op|'('
string|'"foo/bar@baz"'
op|')'
op|','
nl|'\n'
op|'('
name|'None'
op|','
string|'"foo"'
op|','
string|'"bar@baz"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'jid'
op|'.'
name|'parse'
op|'('
string|'"boo@foo/bar@baz"'
op|')'
op|','
nl|'\n'
op|'('
string|'"boo"'
op|','
string|'"foo"'
op|','
string|'"bar@baz"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'jid'
op|'.'
name|'parse'
op|'('
string|'"boo@foo/bar/baz"'
op|')'
op|','
nl|'\n'
op|'('
string|'"boo"'
op|','
string|'"foo"'
op|','
string|'"bar/baz"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'jid'
op|'.'
name|'parse'
op|'('
string|'"boo/foo@bar@baz"'
op|')'
op|','
nl|'\n'
op|'('
name|'None'
op|','
string|'"boo"'
op|','
string|'"foo@bar@baz"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'jid'
op|'.'
name|'parse'
op|'('
string|'"boo/foo/bar"'
op|')'
op|','
nl|'\n'
op|'('
name|'None'
op|','
string|'"boo"'
op|','
string|'"foo/bar"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'jid'
op|'.'
name|'parse'
op|'('
string|'"boo//foo"'
op|')'
op|','
nl|'\n'
op|'('
name|'None'
op|','
string|'"boo"'
op|','
string|'"/foo"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_noHost
dedent|''
name|'def'
name|'test_noHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test for failure on no host part.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'jid'
op|'.'
name|'InvalidFormat'
op|','
name|'jid'
op|'.'
name|'parse'
op|','
string|'"user@"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_doubleAt
dedent|''
name|'def'
name|'test_doubleAt'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test for failure on double @ signs.\n\n        This should fail because @ is not a valid character for the host\n        part of the JID.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'jid'
op|'.'
name|'InvalidFormat'
op|','
name|'jid'
op|'.'
name|'parse'
op|','
string|'"user@@host"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_multipleAt
dedent|''
name|'def'
name|'test_multipleAt'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test for failure on two @ signs.\n\n        This should fail because @ is not a valid character for the host\n        part of the JID.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'jid'
op|'.'
name|'InvalidFormat'
op|','
name|'jid'
op|'.'
name|'parse'
op|','
string|'"user@host@host"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Basic tests for case mapping. These are fallback tests for the'
nl|'\n'
comment|'# prepping done in twisted.words.protocols.jabber.xmpp_stringprep'
nl|'\n'
nl|'\n'
DECL|member|test_prepCaseMapUser
dedent|''
name|'def'
name|'test_prepCaseMapUser'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test case mapping of the user part of the JID.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'jid'
op|'.'
name|'prep'
op|'('
string|'"UsEr"'
op|','
string|'"host"'
op|','
string|'"resource"'
op|')'
op|','
nl|'\n'
op|'('
string|'"user"'
op|','
string|'"host"'
op|','
string|'"resource"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_prepCaseMapHost
dedent|''
name|'def'
name|'test_prepCaseMapHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test case mapping of the host part of the JID.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'jid'
op|'.'
name|'prep'
op|'('
string|'"user"'
op|','
string|'"hoST"'
op|','
string|'"resource"'
op|')'
op|','
nl|'\n'
op|'('
string|'"user"'
op|','
string|'"host"'
op|','
string|'"resource"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_prepNoCaseMapResource
dedent|''
name|'def'
name|'test_prepNoCaseMapResource'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test no case mapping of the resourcce part of the JID.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'jid'
op|'.'
name|'prep'
op|'('
string|'"user"'
op|','
string|'"hoST"'
op|','
string|'"resource"'
op|')'
op|','
nl|'\n'
op|'('
string|'"user"'
op|','
string|'"host"'
op|','
string|'"resource"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'jid'
op|'.'
name|'prep'
op|'('
string|'"user"'
op|','
string|'"host"'
op|','
string|'"Resource"'
op|')'
op|','
nl|'\n'
op|'('
string|'"user"'
op|','
string|'"host"'
op|','
string|'"resource"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|JIDTest
dedent|''
dedent|''
name|'class'
name|'JIDTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_noneArguments
indent|'    '
name|'def'
name|'test_noneArguments'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that using no arguments raises an exception.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'jid'
op|'.'
name|'JID'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attributes
dedent|''
name|'def'
name|'test_attributes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the attributes correspond with the JID parts.\n        """'
newline|'\n'
name|'j'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|'"user@host/resource"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'j'
op|'.'
name|'user'
op|','
string|'"user"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'j'
op|'.'
name|'host'
op|','
string|'"host"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'j'
op|'.'
name|'resource'
op|','
string|'"resource"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_userhost
dedent|''
name|'def'
name|'test_userhost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the extraction of the bare JID.\n        """'
newline|'\n'
name|'j'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|'"user@host/resource"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"user@host"'
op|','
name|'j'
op|'.'
name|'userhost'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_userhostOnlyHost
dedent|''
name|'def'
name|'test_userhostOnlyHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the extraction of the bare JID of the full form host/resource.\n        """'
newline|'\n'
name|'j'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|'"host/resource"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"host"'
op|','
name|'j'
op|'.'
name|'userhost'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_userhostJID
dedent|''
name|'def'
name|'test_userhostJID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test getting a JID object of the bare JID.\n        """'
newline|'\n'
name|'j1'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|'"user@host/resource"'
op|')'
newline|'\n'
name|'j2'
op|'='
name|'jid'
op|'.'
name|'internJID'
op|'('
string|'"user@host"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'j2'
op|','
name|'j1'
op|'.'
name|'userhostJID'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_userhostJIDNoResource
dedent|''
name|'def'
name|'test_userhostJIDNoResource'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test getting a JID object of the bare JID when there was no resource.\n        """'
newline|'\n'
name|'j'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|'"user@host"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'j'
op|','
name|'j'
op|'.'
name|'userhostJID'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fullHost
dedent|''
name|'def'
name|'test_fullHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test giving a string representation of the JID with only a host part.\n        """'
newline|'\n'
name|'j'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
name|'tuple'
op|'='
op|'('
name|'None'
op|','
string|"'host'"
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'host'"
op|','
name|'j'
op|'.'
name|'full'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fullHostResource
dedent|''
name|'def'
name|'test_fullHostResource'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test giving a string representation of the JID with host, resource.\n        """'
newline|'\n'
name|'j'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
name|'tuple'
op|'='
op|'('
name|'None'
op|','
string|"'host'"
op|','
string|"'resource'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'host/resource'"
op|','
name|'j'
op|'.'
name|'full'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fullUserHost
dedent|''
name|'def'
name|'test_fullUserHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test giving a string representation of the JID with user, host.\n        """'
newline|'\n'
name|'j'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
name|'tuple'
op|'='
op|'('
string|"'user'"
op|','
string|"'host'"
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'user@host'"
op|','
name|'j'
op|'.'
name|'full'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fullAll
dedent|''
name|'def'
name|'test_fullAll'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test giving a string representation of the JID.\n        """'
newline|'\n'
name|'j'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
name|'tuple'
op|'='
op|'('
string|"'user'"
op|','
string|"'host'"
op|','
string|"'resource'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'user@host/resource'"
op|','
name|'j'
op|'.'
name|'full'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_equality
dedent|''
name|'def'
name|'test_equality'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test JID equality.\n        """'
newline|'\n'
name|'j1'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|'"user@host/resource"'
op|')'
newline|'\n'
name|'j2'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|'"user@host/resource"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'j1'
op|','
name|'j2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'j1'
op|','
name|'j2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_equalityWithNonJIDs
dedent|''
name|'def'
name|'test_equalityWithNonJIDs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test JID equality.\n        """'
newline|'\n'
name|'j'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|'"user@host/resource"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'j'
op|'=='
string|"'user@host/resource'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_inequality
dedent|''
name|'def'
name|'test_inequality'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test JID inequality.\n        """'
newline|'\n'
name|'j1'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|'"user1@host/resource"'
op|')'
newline|'\n'
name|'j2'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|'"user2@host/resource"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'j1'
op|','
name|'j2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_inequalityWithNonJIDs
dedent|''
name|'def'
name|'test_inequalityWithNonJIDs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test JID equality.\n        """'
newline|'\n'
name|'j'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|'"user@host/resource"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'j'
op|','
string|"'user@host/resource'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hashable
dedent|''
name|'def'
name|'test_hashable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test JID hashability.\n        """'
newline|'\n'
name|'j1'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|'"user@host/resource"'
op|')'
newline|'\n'
name|'j2'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|'"user@host/resource"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hash'
op|'('
name|'j1'
op|')'
op|','
name|'hash'
op|'('
name|'j2'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unicode
dedent|''
name|'def'
name|'test_unicode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test unicode representation of JIDs.\n        """'
newline|'\n'
name|'j'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
name|'tuple'
op|'='
op|'('
string|"'user'"
op|','
string|"'host'"
op|','
string|"'resource'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"user@host/resource"'
op|','
name|'unicode'
op|'('
name|'j'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_repr
dedent|''
name|'def'
name|'test_repr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test representation of JID objects.\n        """'
newline|'\n'
name|'j'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
name|'tuple'
op|'='
op|'('
string|"'user'"
op|','
string|"'host'"
op|','
string|"'resource'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"JID(u\'user@host/resource\')"'
op|','
name|'repr'
op|'('
name|'j'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|InternJIDTest
dedent|''
dedent|''
name|'class'
name|'InternJIDTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_identity
indent|'    '
name|'def'
name|'test_identity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that two interned JIDs yield the same object.\n        """'
newline|'\n'
name|'j1'
op|'='
name|'jid'
op|'.'
name|'internJID'
op|'('
string|'"user@host"'
op|')'
newline|'\n'
name|'j2'
op|'='
name|'jid'
op|'.'
name|'internJID'
op|'('
string|'"user@host"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'j1'
op|','
name|'j2'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

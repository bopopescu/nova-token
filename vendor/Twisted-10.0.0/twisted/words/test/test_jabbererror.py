begin_unit
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.words.protocols.jabber.error}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'protocols'
op|'.'
name|'jabber'
name|'import'
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'xish'
name|'import'
name|'domish'
newline|'\n'
nl|'\n'
DECL|variable|NS_XML
name|'NS_XML'
op|'='
string|"'http://www.w3.org/XML/1998/namespace'"
newline|'\n'
DECL|variable|NS_STREAMS
name|'NS_STREAMS'
op|'='
string|"'http://etherx.jabber.org/streams'"
newline|'\n'
DECL|variable|NS_XMPP_STREAMS
name|'NS_XMPP_STREAMS'
op|'='
string|"'urn:ietf:params:xml:ns:xmpp-streams'"
newline|'\n'
DECL|variable|NS_XMPP_STANZAS
name|'NS_XMPP_STANZAS'
op|'='
string|"'urn:ietf:params:xml:ns:xmpp-stanzas'"
newline|'\n'
nl|'\n'
DECL|class|BaseErrorTest
name|'class'
name|'BaseErrorTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_getElementPlain
indent|'    '
name|'def'
name|'test_getElementPlain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test getting an element for a plain error.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'BaseError'
op|'('
string|"'feature-not-implemented'"
op|')'
newline|'\n'
name|'element'
op|'='
name|'e'
op|'.'
name|'getElement'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'element'
op|'.'
name|'uri'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'element'
op|'.'
name|'children'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getElementText
dedent|''
name|'def'
name|'test_getElementText'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test getting an element for an error with a text.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'BaseError'
op|'('
string|"'feature-not-implemented'"
op|','
string|"'text'"
op|')'
newline|'\n'
name|'element'
op|'='
name|'e'
op|'.'
name|'getElement'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'element'
op|'.'
name|'children'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'unicode'
op|'('
name|'element'
op|'.'
name|'text'
op|')'
op|','
string|"'text'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'element'
op|'.'
name|'text'
op|'.'
name|'getAttribute'
op|'('
op|'('
name|'NS_XML'
op|','
string|"'lang'"
op|')'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getElementTextLang
dedent|''
name|'def'
name|'test_getElementTextLang'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test getting an element for an error with a text and language.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'BaseError'
op|'('
string|"'feature-not-implemented'"
op|','
string|"'text'"
op|','
string|"'en_US'"
op|')'
newline|'\n'
name|'element'
op|'='
name|'e'
op|'.'
name|'getElement'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'element'
op|'.'
name|'children'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'unicode'
op|'('
name|'element'
op|'.'
name|'text'
op|')'
op|','
string|"'text'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'element'
op|'.'
name|'text'
op|'['
op|'('
name|'NS_XML'
op|','
string|"'lang'"
op|')'
op|']'
op|','
string|"'en_US'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getElementAppCondition
dedent|''
name|'def'
name|'test_getElementAppCondition'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test getting an element for an error with an app specific condition.\n        """'
newline|'\n'
name|'ac'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'testns'"
op|','
string|"'myerror'"
op|')'
op|')'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'BaseError'
op|'('
string|"'feature-not-implemented'"
op|','
name|'appCondition'
op|'='
name|'ac'
op|')'
newline|'\n'
name|'element'
op|'='
name|'e'
op|'.'
name|'getElement'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'element'
op|'.'
name|'children'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'element'
op|'.'
name|'myerror'
op|','
name|'ac'
op|')'
newline|'\n'
nl|'\n'
DECL|class|StreamErrorTest
dedent|''
dedent|''
name|'class'
name|'StreamErrorTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_getElementPlain
indent|'    '
name|'def'
name|'test_getElementPlain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test namespace of the element representation of an error.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'StreamError'
op|'('
string|"'feature-not-implemented'"
op|')'
newline|'\n'
name|'element'
op|'='
name|'e'
op|'.'
name|'getElement'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'element'
op|'.'
name|'uri'
op|','
name|'NS_STREAMS'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getElementConditionNamespace
dedent|''
name|'def'
name|'test_getElementConditionNamespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the error condition element has the correct namespace.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'StreamError'
op|'('
string|"'feature-not-implemented'"
op|')'
newline|'\n'
name|'element'
op|'='
name|'e'
op|'.'
name|'getElement'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'NS_XMPP_STREAMS'
op|','
name|'getattr'
op|'('
name|'element'
op|','
string|"'feature-not-implemented'"
op|')'
op|'.'
name|'uri'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getElementTextNamespace
dedent|''
name|'def'
name|'test_getElementTextNamespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the error text element has the correct namespace.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'StreamError'
op|'('
string|"'feature-not-implemented'"
op|','
string|"'text'"
op|')'
newline|'\n'
name|'element'
op|'='
name|'e'
op|'.'
name|'getElement'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'NS_XMPP_STREAMS'
op|','
name|'element'
op|'.'
name|'text'
op|'.'
name|'uri'
op|')'
newline|'\n'
nl|'\n'
DECL|class|StanzaErrorTest
dedent|''
dedent|''
name|'class'
name|'StanzaErrorTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_getElementPlain
indent|'    '
name|'def'
name|'test_getElementPlain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test getting an element for a plain stanza error.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'StanzaError'
op|'('
string|"'feature-not-implemented'"
op|')'
newline|'\n'
name|'element'
op|'='
name|'e'
op|'.'
name|'getElement'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'element'
op|'.'
name|'uri'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'element'
op|'['
string|"'type'"
op|']'
op|','
string|"'cancel'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'element'
op|'['
string|"'code'"
op|']'
op|','
string|"'501'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getElementType
dedent|''
name|'def'
name|'test_getElementType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test getting an element for a stanza error with a given type.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'StanzaError'
op|'('
string|"'feature-not-implemented'"
op|','
string|"'auth'"
op|')'
newline|'\n'
name|'element'
op|'='
name|'e'
op|'.'
name|'getElement'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'element'
op|'.'
name|'uri'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'element'
op|'['
string|"'type'"
op|']'
op|','
string|"'auth'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'element'
op|'['
string|"'code'"
op|']'
op|','
string|"'501'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getElementConditionNamespace
dedent|''
name|'def'
name|'test_getElementConditionNamespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the error condition element has the correct namespace.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'StanzaError'
op|'('
string|"'feature-not-implemented'"
op|')'
newline|'\n'
name|'element'
op|'='
name|'e'
op|'.'
name|'getElement'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'NS_XMPP_STANZAS'
op|','
name|'getattr'
op|'('
name|'element'
op|','
string|"'feature-not-implemented'"
op|')'
op|'.'
name|'uri'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getElementTextNamespace
dedent|''
name|'def'
name|'test_getElementTextNamespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the error text element has the correct namespace.\n        """'
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'StanzaError'
op|'('
string|"'feature-not-implemented'"
op|','
name|'text'
op|'='
string|"'text'"
op|')'
newline|'\n'
name|'element'
op|'='
name|'e'
op|'.'
name|'getElement'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'NS_XMPP_STANZAS'
op|','
name|'element'
op|'.'
name|'text'
op|'.'
name|'uri'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_toResponse
dedent|''
name|'def'
name|'test_toResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test an error response is generated from a stanza.\n\n        The addressing on the (new) response stanza should be reversed, an\n        error child (with proper properties) added and the type set to\n        C{\'error\'}.\n        """'
newline|'\n'
name|'stanza'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'jabber:client'"
op|','
string|"'message'"
op|')'
op|')'
newline|'\n'
name|'stanza'
op|'['
string|"'type'"
op|']'
op|'='
string|"'chat'"
newline|'\n'
name|'stanza'
op|'['
string|"'to'"
op|']'
op|'='
string|"'user1@example.com'"
newline|'\n'
name|'stanza'
op|'['
string|"'from'"
op|']'
op|'='
string|"'user2@example.com/resource'"
newline|'\n'
name|'e'
op|'='
name|'error'
op|'.'
name|'StanzaError'
op|'('
string|"'service-unavailable'"
op|')'
newline|'\n'
name|'response'
op|'='
name|'e'
op|'.'
name|'toResponse'
op|'('
name|'stanza'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'response'
op|','
name|'stanza'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|'['
string|"'from'"
op|']'
op|','
string|"'user1@example.com'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|'['
string|"'to'"
op|']'
op|','
string|"'user2@example.com/resource'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|'['
string|"'type'"
op|']'
op|','
string|"'error'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|'.'
name|'error'
op|'.'
name|'children'
op|'['
number|'0'
op|']'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'service-unavailable'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|'.'
name|'error'
op|'['
string|"'type'"
op|']'
op|','
string|"'cancel'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'stanza'
op|'.'
name|'children'
op|','
name|'response'
op|'.'
name|'children'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ParseErrorTest
dedent|''
dedent|''
name|'class'
name|'ParseErrorTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'error'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|"'error'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_empty
dedent|''
name|'def'
name|'test_empty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test parsing of the empty error element.\n        """'
newline|'\n'
name|'result'
op|'='
name|'error'
op|'.'
name|'_parseError'
op|'('
name|'self'
op|'.'
name|'error'
op|','
string|"'errorns'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'condition'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'text'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'textLang'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'appCondition'"
op|':'
name|'None'
op|'}'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_condition
dedent|''
name|'def'
name|'test_condition'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test parsing of an error element with a condition.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'error'
op|'.'
name|'addElement'
op|'('
op|'('
string|"'errorns'"
op|','
string|"'bad-request'"
op|')'
op|')'
newline|'\n'
name|'result'
op|'='
name|'error'
op|'.'
name|'_parseError'
op|'('
name|'self'
op|'.'
name|'error'
op|','
string|"'errorns'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'bad-request'"
op|','
name|'result'
op|'['
string|"'condition'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_text
dedent|''
name|'def'
name|'test_text'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test parsing of an error element with a text.\n        """'
newline|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'error'
op|'.'
name|'addElement'
op|'('
op|'('
string|"'errorns'"
op|','
string|"'text'"
op|')'
op|')'
newline|'\n'
name|'text'
op|'.'
name|'addContent'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'error'
op|'.'
name|'_parseError'
op|'('
name|'self'
op|'.'
name|'error'
op|','
string|"'errorns'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'test'"
op|','
name|'result'
op|'['
string|"'text'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'result'
op|'['
string|"'textLang'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_textLang
dedent|''
name|'def'
name|'test_textLang'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test parsing of an error element with a text with a defined language.\n        """'
newline|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'error'
op|'.'
name|'addElement'
op|'('
op|'('
string|"'errorns'"
op|','
string|"'text'"
op|')'
op|')'
newline|'\n'
name|'text'
op|'['
name|'NS_XML'
op|','
string|"'lang'"
op|']'
op|'='
string|"'en_US'"
newline|'\n'
name|'text'
op|'.'
name|'addContent'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'error'
op|'.'
name|'_parseError'
op|'('
name|'self'
op|'.'
name|'error'
op|','
string|"'errorns'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'en_US'"
op|','
name|'result'
op|'['
string|"'textLang'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_textLangInherited
dedent|''
name|'def'
name|'test_textLangInherited'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test parsing of an error element with a text with inherited language.\n        """'
newline|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'error'
op|'.'
name|'addElement'
op|'('
op|'('
string|"'errorns'"
op|','
string|"'text'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'error'
op|'['
name|'NS_XML'
op|','
string|"'lang'"
op|']'
op|'='
string|"'en_US'"
newline|'\n'
name|'text'
op|'.'
name|'addContent'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'error'
op|'.'
name|'_parseError'
op|'('
name|'self'
op|'.'
name|'error'
op|','
string|"'errorns'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'en_US'"
op|','
name|'result'
op|'['
string|"'textLang'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'test_textLangInherited'
op|'.'
name|'todo'
op|'='
string|'"xml:lang inheritance not implemented"'
newline|'\n'
nl|'\n'
DECL|member|test_appCondition
name|'def'
name|'test_appCondition'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test parsing of an error element with an app specific condition.\n        """'
newline|'\n'
name|'condition'
op|'='
name|'self'
op|'.'
name|'error'
op|'.'
name|'addElement'
op|'('
op|'('
string|"'testns'"
op|','
string|"'condition'"
op|')'
op|')'
newline|'\n'
name|'result'
op|'='
name|'error'
op|'.'
name|'_parseError'
op|'('
name|'self'
op|'.'
name|'error'
op|','
string|"'errorns'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'condition'
op|','
name|'result'
op|'['
string|"'appCondition'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_appConditionMultiple
dedent|''
name|'def'
name|'test_appConditionMultiple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test parsing of an error element with multiple app specific conditions.\n        """'
newline|'\n'
name|'condition'
op|'='
name|'self'
op|'.'
name|'error'
op|'.'
name|'addElement'
op|'('
op|'('
string|"'testns'"
op|','
string|"'condition'"
op|')'
op|')'
newline|'\n'
name|'condition2'
op|'='
name|'self'
op|'.'
name|'error'
op|'.'
name|'addElement'
op|'('
op|'('
string|"'testns'"
op|','
string|"'condition2'"
op|')'
op|')'
newline|'\n'
name|'result'
op|'='
name|'error'
op|'.'
name|'_parseError'
op|'('
name|'self'
op|'.'
name|'error'
op|','
string|"'errorns'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'condition2'
op|','
name|'result'
op|'['
string|"'appCondition'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ExceptionFromStanzaTest
dedent|''
dedent|''
name|'class'
name|'ExceptionFromStanzaTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_basic
indent|'    '
name|'def'
name|'test_basic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test basic operations of exceptionFromStanza.\n\n        Given a realistic stanza, check if a sane exception is returned.\n\n        Using this stanza::\n\n          <iq type=\'error\'\n              from=\'pubsub.shakespeare.lit\'\n              to=\'francisco@denmark.lit/barracks\'\n              id=\'subscriptions1\'>\n            <pubsub xmlns=\'http://jabber.org/protocol/pubsub\'>\n              <subscriptions/>\n            </pubsub>\n            <error type=\'cancel\'>\n              <feature-not-implemented\n                xmlns=\'urn:ietf:params:xml:ns:xmpp-stanzas\'/>\n              <unsupported xmlns=\'http://jabber.org/protocol/pubsub#errors\'\n                           feature=\'retrieve-subscriptions\'/>\n            </error>\n          </iq>\n        """'
newline|'\n'
nl|'\n'
name|'stanza'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|"'stanza'"
op|')'
op|')'
newline|'\n'
name|'p'
op|'='
name|'stanza'
op|'.'
name|'addElement'
op|'('
op|'('
string|"'http://jabber.org/protocol/pubsub'"
op|','
string|"'pubsub'"
op|')'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'addElement'
op|'('
string|"'subscriptions'"
op|')'
newline|'\n'
name|'e'
op|'='
name|'stanza'
op|'.'
name|'addElement'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'e'
op|'['
string|"'type'"
op|']'
op|'='
string|"'cancel'"
newline|'\n'
name|'e'
op|'.'
name|'addElement'
op|'('
op|'('
name|'NS_XMPP_STANZAS'
op|','
string|"'feature-not-implemented'"
op|')'
op|')'
newline|'\n'
name|'uc'
op|'='
name|'e'
op|'.'
name|'addElement'
op|'('
op|'('
string|"'http://jabber.org/protocol/pubsub#errors'"
op|','
nl|'\n'
string|"'unsupported'"
op|')'
op|')'
newline|'\n'
name|'uc'
op|'['
string|"'feature'"
op|']'
op|'='
string|"'retrieve-subscriptions'"
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'error'
op|'.'
name|'exceptionFromStanza'
op|'('
name|'stanza'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'result'
op|','
name|'error'
op|'.'
name|'StanzaError'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'feature-not-implemented'"
op|','
name|'result'
op|'.'
name|'condition'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'cancel'"
op|','
name|'result'
op|'.'
name|'type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'uc'
op|','
name|'result'
op|'.'
name|'appCondition'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
name|'p'
op|']'
op|','
name|'result'
op|'.'
name|'children'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_legacy
dedent|''
name|'def'
name|'test_legacy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test legacy operations of exceptionFromStanza.\n\n        Given a realistic stanza with only legacy (pre-XMPP) error information,\n        check if a sane exception is returned.\n\n        Using this stanza::\n\n          <message type=\'error\'\n                   to=\'piers@pipetree.com/Home\'\n                   from=\'qmacro@jaber.org\'>\n            <body>Are you there?</body>\n            <error code=\'502\'>Unable to resolve hostname.</error>\n          </message>\n        """'
newline|'\n'
name|'stanza'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|"'stanza'"
op|')'
op|')'
newline|'\n'
name|'p'
op|'='
name|'stanza'
op|'.'
name|'addElement'
op|'('
string|"'body'"
op|','
name|'content'
op|'='
string|"'Are you there?'"
op|')'
newline|'\n'
name|'e'
op|'='
name|'stanza'
op|'.'
name|'addElement'
op|'('
string|"'error'"
op|','
name|'content'
op|'='
string|"'Unable to resolve hostname.'"
op|')'
newline|'\n'
name|'e'
op|'['
string|"'code'"
op|']'
op|'='
string|"'502'"
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'error'
op|'.'
name|'exceptionFromStanza'
op|'('
name|'stanza'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'result'
op|','
name|'error'
op|'.'
name|'StanzaError'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'service-unavailable'"
op|','
name|'result'
op|'.'
name|'condition'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'wait'"
op|','
name|'result'
op|'.'
name|'type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'Unable to resolve hostname.'"
op|','
name|'result'
op|'.'
name|'text'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
name|'p'
op|']'
op|','
name|'result'
op|'.'
name|'children'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ExceptionFromStreamErrorTest
dedent|''
dedent|''
name|'class'
name|'ExceptionFromStreamErrorTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_basic
indent|'    '
name|'def'
name|'test_basic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test basic operations of exceptionFromStreamError.\n\n        Given a realistic stream error, check if a sane exception is returned.\n\n        Using this error::\n\n          <stream:error xmlns:stream=\'http://etherx.jabber.org/streams\'>\n            <xml-not-well-formed xmlns=\'urn:ietf:params:xml:ns:xmpp-streams\'/>\n          </stream:error>\n        """'
newline|'\n'
nl|'\n'
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'http://etherx.jabber.org/streams'"
op|','
string|"'error'"
op|')'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'addElement'
op|'('
op|'('
name|'NS_XMPP_STREAMS'
op|','
string|"'xml-not-well-formed'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'error'
op|'.'
name|'exceptionFromStreamError'
op|'('
name|'e'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'result'
op|','
name|'error'
op|'.'
name|'StreamError'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'xml-not-well-formed'"
op|','
name|'result'
op|'.'
name|'condition'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

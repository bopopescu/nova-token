begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.words.protocols.jabber.component}\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'hashlib'
name|'import'
name|'sha1'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'protocols'
op|'.'
name|'jabber'
name|'import'
name|'component'
op|','
name|'xmlstream'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'protocols'
op|'.'
name|'jabber'
op|'.'
name|'jid'
name|'import'
name|'JID'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'xish'
name|'import'
name|'domish'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'xish'
op|'.'
name|'utility'
name|'import'
name|'XmlPipe'
newline|'\n'
nl|'\n'
DECL|class|DummyTransport
name|'class'
name|'DummyTransport'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'list'
op|'='
name|'list'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'list'
op|'.'
name|'append'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ComponentInitiatingInitializerTest
dedent|''
dedent|''
name|'class'
name|'ComponentInitiatingInitializerTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'output'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'='
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'password'
op|'='
string|"'secret'"
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'self'
op|'.'
name|'authenticator'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'namespace'
op|'='
string|"'test:component'"
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'send'
op|'='
name|'self'
op|'.'
name|'output'
op|'.'
name|'append'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
string|'"<stream:stream xmlns=\'test:component\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"from=\'example.com\' id=\'12345\' version=\'1.0\'>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'sid'
op|'='
string|"u'12345'"
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'='
name|'component'
op|'.'
name|'ComponentInitiatingInitializer'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testHandshake
dedent|''
name|'def'
name|'testHandshake'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test basic operations of component handshake.\n        """'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'initialize'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# the initializer should have sent the handshake request'
nl|'\n'
nl|'\n'
name|'handshake'
op|'='
name|'self'
op|'.'
name|'output'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'handshake'"
op|','
name|'handshake'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'test:component'"
op|','
name|'handshake'
op|'.'
name|'uri'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sha1'
op|'('
string|'"%s%s"'
op|'%'
op|'('
string|"'12345'"
op|','
string|"'secret'"
op|')'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
name|'unicode'
op|'('
name|'handshake'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# successful authentication'
nl|'\n'
nl|'\n'
name|'handshake'
op|'.'
name|'children'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dataReceived'
op|'('
name|'handshake'
op|'.'
name|'toXml'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|class|ComponentAuthTest
dedent|''
dedent|''
name|'class'
name|'ComponentAuthTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|authPassed
indent|'    '
name|'def'
name|'authPassed'
op|'('
name|'self'
op|','
name|'stream'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'authComplete'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|testAuth
dedent|''
name|'def'
name|'testAuth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'authComplete'
op|'='
name|'False'
newline|'\n'
name|'outlist'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'ca'
op|'='
name|'component'
op|'.'
name|'ConnectComponentAuthenticator'
op|'('
string|'"cjid"'
op|','
string|'"secret"'
op|')'
newline|'\n'
name|'xs'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'ca'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'transport'
op|'='
name|'DummyTransport'
op|'('
name|'outlist'
op|')'
newline|'\n'
nl|'\n'
name|'xs'
op|'.'
name|'addObserver'
op|'('
name|'xmlstream'
op|'.'
name|'STREAM_AUTHD_EVENT'
op|','
nl|'\n'
name|'self'
op|'.'
name|'authPassed'
op|')'
newline|'\n'
nl|'\n'
comment|'# Go...'
nl|'\n'
name|'xs'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:component:accept\' xmlns:stream=\'http://etherx.jabber.org/streams\' from=\'cjid\' id=\'12345\'>"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Calculate what we expect the handshake value to be'
nl|'\n'
name|'hv'
op|'='
name|'sha1'
op|'('
string|'"%s%s"'
op|'%'
op|'('
string|'"12345"'
op|','
string|'"secret"'
op|')'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'outlist'
op|'['
number|'1'
op|']'
op|','
string|'"<handshake>%s</handshake>"'
op|'%'
op|'('
name|'hv'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<handshake/>"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'authComplete'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|JabberServiceHarness
dedent|''
dedent|''
name|'class'
name|'JabberServiceHarness'
op|'('
name|'component'
op|'.'
name|'Service'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'componentConnectedFlag'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'componentDisconnectedFlag'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'transportConnectedFlag'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|componentConnected
dedent|''
name|'def'
name|'componentConnected'
op|'('
name|'self'
op|','
name|'xmlstream'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'componentConnectedFlag'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|componentDisconnected
dedent|''
name|'def'
name|'componentDisconnected'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'componentDisconnectedFlag'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|transportConnected
dedent|''
name|'def'
name|'transportConnected'
op|'('
name|'self'
op|','
name|'xmlstream'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transportConnectedFlag'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestJabberServiceManager
dedent|''
dedent|''
name|'class'
name|'TestJabberServiceManager'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testSM
indent|'    '
name|'def'
name|'testSM'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Setup service manager and test harnes'
nl|'\n'
indent|'        '
name|'sm'
op|'='
name|'component'
op|'.'
name|'ServiceManager'
op|'('
string|'"foo"'
op|','
string|'"password"'
op|')'
newline|'\n'
name|'svc'
op|'='
name|'JabberServiceHarness'
op|'('
op|')'
newline|'\n'
name|'svc'
op|'.'
name|'setServiceParent'
op|'('
name|'sm'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a write list'
nl|'\n'
name|'wlist'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# Setup a XmlStream'
nl|'\n'
name|'xs'
op|'='
name|'sm'
op|'.'
name|'getFactory'
op|'('
op|')'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'transport'
op|'='
name|'self'
newline|'\n'
name|'xs'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'='
name|'wlist'
op|'.'
name|'append'
newline|'\n'
nl|'\n'
comment|"# Indicate that it's connected"
nl|'\n'
name|'xs'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure the test service harness got notified'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'svc'
op|'.'
name|'transportConnectedFlag'
op|')'
newline|'\n'
nl|'\n'
comment|"# Jump ahead and pretend like the stream got auth'd"
nl|'\n'
name|'xs'
op|'.'
name|'dispatch'
op|'('
name|'xs'
op|','
name|'xmlstream'
op|'.'
name|'STREAM_AUTHD_EVENT'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure the test service harness got notified'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'svc'
op|'.'
name|'componentConnectedFlag'
op|')'
newline|'\n'
nl|'\n'
comment|'# Pretend to drop the connection'
nl|'\n'
name|'xs'
op|'.'
name|'connectionLost'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure the test service harness got notified'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'svc'
op|'.'
name|'componentDisconnectedFlag'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|RouterTest
dedent|''
dedent|''
name|'class'
name|'RouterTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{component.Router}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_addRoute
name|'def'
name|'test_addRoute'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test route registration and routing on incoming stanzas.\n        """'
newline|'\n'
name|'router'
op|'='
name|'component'
op|'.'
name|'Router'
op|'('
op|')'
newline|'\n'
name|'routed'
op|'='
op|'['
op|']'
newline|'\n'
name|'router'
op|'.'
name|'route'
op|'='
name|'lambda'
name|'element'
op|':'
name|'routed'
op|'.'
name|'append'
op|'('
name|'element'
op|')'
newline|'\n'
nl|'\n'
name|'pipe'
op|'='
name|'XmlPipe'
op|'('
op|')'
newline|'\n'
name|'router'
op|'.'
name|'addRoute'
op|'('
string|"'example.org'"
op|','
name|'pipe'
op|'.'
name|'sink'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'router'
op|'.'
name|'routes'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'pipe'
op|'.'
name|'sink'
op|','
name|'router'
op|'.'
name|'routes'
op|'['
string|"'example.org'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'element'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'testns'"
op|','
string|"'test'"
op|')'
op|')'
newline|'\n'
name|'pipe'
op|'.'
name|'source'
op|'.'
name|'send'
op|'('
name|'element'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
name|'element'
op|']'
op|','
name|'routed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_route
dedent|''
name|'def'
name|'test_route'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test routing of a message.\n        """'
newline|'\n'
name|'component1'
op|'='
name|'XmlPipe'
op|'('
op|')'
newline|'\n'
name|'component2'
op|'='
name|'XmlPipe'
op|'('
op|')'
newline|'\n'
name|'router'
op|'='
name|'component'
op|'.'
name|'Router'
op|'('
op|')'
newline|'\n'
name|'router'
op|'.'
name|'addRoute'
op|'('
string|"'component1.example.org'"
op|','
name|'component1'
op|'.'
name|'sink'
op|')'
newline|'\n'
name|'router'
op|'.'
name|'addRoute'
op|'('
string|"'component2.example.org'"
op|','
name|'component2'
op|'.'
name|'sink'
op|')'
newline|'\n'
nl|'\n'
name|'outgoing'
op|'='
op|'['
op|']'
newline|'\n'
name|'component2'
op|'.'
name|'source'
op|'.'
name|'addObserver'
op|'('
string|"'/*'"
op|','
nl|'\n'
name|'lambda'
name|'element'
op|':'
name|'outgoing'
op|'.'
name|'append'
op|'('
name|'element'
op|')'
op|')'
newline|'\n'
name|'stanza'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|"'presence'"
op|')'
op|')'
newline|'\n'
name|'stanza'
op|'['
string|"'from'"
op|']'
op|'='
string|"'component1.example.org'"
newline|'\n'
name|'stanza'
op|'['
string|"'to'"
op|']'
op|'='
string|"'component2.example.org'"
newline|'\n'
name|'component1'
op|'.'
name|'source'
op|'.'
name|'send'
op|'('
name|'stanza'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
name|'stanza'
op|']'
op|','
name|'outgoing'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_routeDefault
dedent|''
name|'def'
name|'test_routeDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test routing of a message using the default route.\n\n        The default route is the one with C{None} as its key in the\n        routing table. It is taken when there is no more specific route\n        in the routing table that matches the stanza\'s destination.\n        """'
newline|'\n'
name|'component1'
op|'='
name|'XmlPipe'
op|'('
op|')'
newline|'\n'
name|'s2s'
op|'='
name|'XmlPipe'
op|'('
op|')'
newline|'\n'
name|'router'
op|'='
name|'component'
op|'.'
name|'Router'
op|'('
op|')'
newline|'\n'
name|'router'
op|'.'
name|'addRoute'
op|'('
string|"'component1.example.org'"
op|','
name|'component1'
op|'.'
name|'sink'
op|')'
newline|'\n'
name|'router'
op|'.'
name|'addRoute'
op|'('
name|'None'
op|','
name|'s2s'
op|'.'
name|'sink'
op|')'
newline|'\n'
nl|'\n'
name|'outgoing'
op|'='
op|'['
op|']'
newline|'\n'
name|'s2s'
op|'.'
name|'source'
op|'.'
name|'addObserver'
op|'('
string|"'/*'"
op|','
name|'lambda'
name|'element'
op|':'
name|'outgoing'
op|'.'
name|'append'
op|'('
name|'element'
op|')'
op|')'
newline|'\n'
name|'stanza'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|"'presence'"
op|')'
op|')'
newline|'\n'
name|'stanza'
op|'['
string|"'from'"
op|']'
op|'='
string|"'component1.example.org'"
newline|'\n'
name|'stanza'
op|'['
string|"'to'"
op|']'
op|'='
string|"'example.com'"
newline|'\n'
name|'component1'
op|'.'
name|'source'
op|'.'
name|'send'
op|'('
name|'stanza'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
name|'stanza'
op|']'
op|','
name|'outgoing'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListenComponentAuthenticatorTest
dedent|''
dedent|''
name|'class'
name|'ListenComponentAuthenticatorTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{component.ListenComponentAuthenticator}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'output'
op|'='
op|'['
op|']'
newline|'\n'
name|'authenticator'
op|'='
name|'component'
op|'.'
name|'ListenComponentAuthenticator'
op|'('
string|"'secret'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'authenticator'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'send'
op|'='
name|'self'
op|'.'
name|'output'
op|'.'
name|'append'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stub loseConnection because we are a transport.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'connectionLost'
op|'('
string|'"no reason"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_streamStarted
dedent|''
name|'def'
name|'test_streamStarted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The received stream header should set several attributes.\n        """'
newline|'\n'
name|'observers'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|addOnetimeObserver
name|'def'
name|'addOnetimeObserver'
op|'('
name|'event'
op|','
name|'observerfn'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'observers'
op|'.'
name|'append'
op|'('
op|'('
name|'event'
op|','
name|'observerfn'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'addOnetimeObserver'
op|'='
name|'addOnetimeObserver'
newline|'\n'
nl|'\n'
name|'xs'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'xs'
op|'.'
name|'sid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'xs'
op|'.'
name|'_headerSent'
op|')'
newline|'\n'
nl|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:component:accept\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"to=\'component.example.org\'>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
number|'0'
op|','
number|'0'
op|')'
op|','
name|'xs'
op|'.'
name|'version'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'None'
op|','
name|'xs'
op|'.'
name|'sid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'xs'
op|'.'
name|'_headerSent'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'('
string|"'/*'"
op|','
name|'xs'
op|'.'
name|'authenticator'
op|'.'
name|'onElement'
op|')'
op|','
name|'observers'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_streamStartedWrongNamespace
dedent|''
name|'def'
name|'test_streamStartedWrongNamespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The received stream header should have a correct namespace.\n        """'
newline|'\n'
name|'streamErrors'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'sendStreamError'
op|'='
name|'streamErrors'
op|'.'
name|'append'
newline|'\n'
name|'xs'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:client\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"to=\'component.example.org\'>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'streamErrors'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'invalid-namespace'"
op|','
name|'streamErrors'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'condition'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_streamStartedNoTo
dedent|''
name|'def'
name|'test_streamStartedNoTo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The received stream header should have a \'to\' attribute.\n        """'
newline|'\n'
name|'streamErrors'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'sendStreamError'
op|'='
name|'streamErrors'
op|'.'
name|'append'
newline|'\n'
name|'xs'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:component:accept\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\'>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'streamErrors'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'improper-addressing'"
op|','
name|'streamErrors'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'condition'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_onElement
dedent|''
name|'def'
name|'test_onElement'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        We expect a handshake element with a hash.\n        """'
newline|'\n'
name|'handshakes'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'authenticator'
op|'.'
name|'onHandshake'
op|'='
name|'handshakes'
op|'.'
name|'append'
newline|'\n'
nl|'\n'
name|'handshake'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'jabber:component:accept'"
op|','
string|"'handshake'"
op|')'
op|')'
newline|'\n'
name|'handshake'
op|'.'
name|'addContent'
op|'('
string|"'1234'"
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'authenticator'
op|'.'
name|'onElement'
op|'('
name|'handshake'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1234'"
op|','
name|'handshakes'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_onElementNotHandshake
dedent|''
name|'def'
name|'test_onElementNotHandshake'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reject elements that are not handshakes\n        """'
newline|'\n'
name|'handshakes'
op|'='
op|'['
op|']'
newline|'\n'
name|'streamErrors'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'authenticator'
op|'.'
name|'onHandshake'
op|'='
name|'handshakes'
op|'.'
name|'append'
newline|'\n'
name|'xs'
op|'.'
name|'sendStreamError'
op|'='
name|'streamErrors'
op|'.'
name|'append'
newline|'\n'
nl|'\n'
name|'element'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'jabber:component:accept'"
op|','
string|"'message'"
op|')'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'authenticator'
op|'.'
name|'onElement'
op|'('
name|'element'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'handshakes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'not-authorized'"
op|','
name|'streamErrors'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'condition'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_onHandshake
dedent|''
name|'def'
name|'test_onHandshake'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Receiving a handshake matching the secret authenticates the stream.\n        """'
newline|'\n'
name|'authd'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|authenticated
name|'def'
name|'authenticated'
op|'('
name|'xs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'authd'
op|'.'
name|'append'
op|'('
name|'xs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'addOnetimeObserver'
op|'('
name|'xmlstream'
op|'.'
name|'STREAM_AUTHD_EVENT'
op|','
name|'authenticated'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'sid'
op|'='
string|"u'1234'"
newline|'\n'
name|'theHash'
op|'='
string|"'32532c0f7dbf1253c095b18b18e36d38d94c1256'"
newline|'\n'
name|'xs'
op|'.'
name|'authenticator'
op|'.'
name|'onHandshake'
op|'('
name|'theHash'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'<handshake/>'"
op|','
name|'self'
op|'.'
name|'output'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'authd'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_onHandshakeWrongHash
dedent|''
name|'def'
name|'test_onHandshakeWrongHash'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Receiving a bad handshake should yield a stream error.\n        """'
newline|'\n'
name|'streamErrors'
op|'='
op|'['
op|']'
newline|'\n'
name|'authd'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|authenticated
name|'def'
name|'authenticated'
op|'('
name|'xs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'authd'
op|'.'
name|'append'
op|'('
name|'xs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'xs'
op|'='
name|'self'
op|'.'
name|'xmlstream'
newline|'\n'
name|'xs'
op|'.'
name|'addOnetimeObserver'
op|'('
name|'xmlstream'
op|'.'
name|'STREAM_AUTHD_EVENT'
op|','
name|'authenticated'
op|')'
newline|'\n'
name|'xs'
op|'.'
name|'sendStreamError'
op|'='
name|'streamErrors'
op|'.'
name|'append'
newline|'\n'
nl|'\n'
name|'xs'
op|'.'
name|'sid'
op|'='
string|"u'1234'"
newline|'\n'
name|'theHash'
op|'='
string|"'1234'"
newline|'\n'
name|'xs'
op|'.'
name|'authenticator'
op|'.'
name|'onHandshake'
op|'('
name|'theHash'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'not-authorized'"
op|','
name|'streamErrors'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'condition'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'authd'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMPPComponentServerFactoryTest
dedent|''
dedent|''
name|'class'
name|'XMPPComponentServerFactoryTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{component.XMPPComponentServerFactory}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'router'
op|'='
name|'component'
op|'.'
name|'Router'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'='
name|'component'
op|'.'
name|'XMPPComponentServerFactory'
op|'('
name|'self'
op|'.'
name|'router'
op|','
nl|'\n'
string|"'secret'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'thisEntity'
op|'='
name|'JID'
op|'('
string|"'component.example.org'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_makeConnection
dedent|''
name|'def'
name|'test_makeConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A new connection increases the stream serial count. No logs by default.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dispatch'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|','
nl|'\n'
name|'xmlstream'
op|'.'
name|'STREAM_CONNECTED_EVENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'serial'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'serial'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'rawDataInFn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'rawDataOutFn'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_makeConnectionLogTraffic
dedent|''
name|'def'
name|'test_makeConnectionLogTraffic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Setting logTraffic should set up raw data loggers.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'logTraffic'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dispatch'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|','
nl|'\n'
name|'xmlstream'
op|'.'
name|'STREAM_CONNECTED_EVENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'rawDataInFn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'rawDataOutFn'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_onError
dedent|''
name|'def'
name|'test_onError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An observer for stream errors should trigger onError to log it.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dispatch'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|','
nl|'\n'
name|'xmlstream'
op|'.'
name|'STREAM_CONNECTED_EVENT'
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestError
name|'class'
name|'TestError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'reason'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'TestError'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dispatch'
op|'('
name|'reason'
op|','
name|'xmlstream'
op|'.'
name|'STREAM_ERROR_EVENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'TestError'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectionInitialized
dedent|''
name|'def'
name|'test_connectionInitialized'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make sure a new stream is added to the routing table.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dispatch'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|','
name|'xmlstream'
op|'.'
name|'STREAM_AUTHD_EVENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'component.example.org'"
op|','
name|'self'
op|'.'
name|'router'
op|'.'
name|'routes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|','
nl|'\n'
name|'self'
op|'.'
name|'router'
op|'.'
name|'routes'
op|'['
string|"'component.example.org'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectionLost
dedent|''
name|'def'
name|'test_connectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make sure a stream is removed from the routing table on disconnect.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dispatch'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|','
name|'xmlstream'
op|'.'
name|'STREAM_AUTHD_EVENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dispatch'
op|'('
name|'None'
op|','
name|'xmlstream'
op|'.'
name|'STREAM_END_EVENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'component.example.org'"
op|','
name|'self'
op|'.'
name|'router'
op|'.'
name|'routes'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

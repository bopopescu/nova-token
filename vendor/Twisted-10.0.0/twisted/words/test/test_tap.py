begin_unit
comment|'# Copyright (c) 2001-2005 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'credentials'
op|','
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
name|'import'
name|'tap'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|WordsTap
name|'class'
name|'WordsTap'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Ensures that the twisted.words.tap API works.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|PASSWD_TEXT
name|'PASSWD_TEXT'
op|'='
string|'"admin:admin\\njoe:foo\\n"'
newline|'\n'
DECL|variable|admin
name|'admin'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'admin'"
op|','
string|"'admin'"
op|')'
newline|'\n'
DECL|variable|joeWrong
name|'joeWrong'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'joe'"
op|','
string|"'bar'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a file with two users.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'='
name|'open'
op|'('
name|'self'
op|'.'
name|'filename'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'PASSWD_TEXT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close the dummy user database.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_hostname
dedent|''
name|'def'
name|'test_hostname'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Tests that the --hostname parameter gets passed to Options.\n        """'
newline|'\n'
name|'opt'
op|'='
name|'tap'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--hostname'"
op|','
string|"'myhost'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'opt'
op|'['
string|"'hostname'"
op|']'
op|','
string|"'myhost'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_passwd
dedent|''
name|'def'
name|'test_passwd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Tests the --passwd command for backwards-compatibility.\n        """'
newline|'\n'
name|'opt'
op|'='
name|'tap'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--passwd'"
op|','
name|'self'
op|'.'
name|'file'
op|'.'
name|'name'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_loginTest'
op|'('
name|'opt'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_auth
dedent|''
name|'def'
name|'test_auth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Tests that the --auth command generates a checker.\n        """'
newline|'\n'
name|'opt'
op|'='
name|'tap'
op|'.'
name|'Options'
op|'('
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--auth'"
op|','
string|"'file:'"
op|'+'
name|'self'
op|'.'
name|'file'
op|'.'
name|'name'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_loginTest'
op|'('
name|'opt'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_loginTest
dedent|''
name|'def'
name|'_loginTest'
op|'('
name|'self'
op|','
name|'opt'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This method executes both positive and negative authentication\n        tests against whatever credentials checker has been stored in\n        the Options class.\n\n        @param opt: An instance of L{tap.Options}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'opt'
op|'['
string|"'credCheckers'"
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'checker'
op|'='
name|'opt'
op|'['
string|"'credCheckers'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'self'
op|'.'
name|'joeWrong'
op|')'
op|','
nl|'\n'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|')'
newline|'\n'
DECL|function|_gotAvatar
name|'def'
name|'_gotAvatar'
op|'('
name|'username'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'username'
op|','
name|'self'
op|'.'
name|'admin'
op|'.'
name|'username'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'self'
op|'.'
name|'admin'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'_gotAvatar'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2005 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'import'
name|'sys'
op|','
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'xish'
op|'.'
name|'domish'
name|'import'
name|'Element'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'xish'
op|'.'
name|'xpath'
name|'import'
name|'XPathQuery'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'xish'
name|'import'
name|'xpath'
newline|'\n'
nl|'\n'
DECL|class|XPathTest
name|'class'
name|'XPathTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Build element:'
nl|'\n'
comment|'# <foo xmlns=\'testns\' attrib1=\'value1\' attrib3="user@host/resource">'
nl|'\n'
comment|'#     somecontent'
nl|'\n'
comment|'#     <bar>'
nl|'\n'
comment|'#        <foo>'
nl|'\n'
comment|'#         <gar>DEF</gar>'
nl|'\n'
comment|'#        </foo>'
nl|'\n'
comment|'#     </bar>'
nl|'\n'
comment|'#     somemorecontent'
nl|'\n'
comment|'#     <bar attrib2="value2">'
nl|'\n'
comment|'#        <bar>'
nl|'\n'
comment|'#          <foo/>'
nl|'\n'
comment|'#          <gar>ABC</gar>'
nl|'\n'
comment|'#        </bar>'
nl|'\n'
comment|'#     <bar/>'
nl|'\n'
comment|"#     <bar attrib4='value4' attrib5='value5'>"
nl|'\n'
comment|'#        <foo/>'
nl|'\n'
comment|'#        <gar>JKL</gar>'
nl|'\n'
comment|'#     </bar>'
nl|'\n'
comment|"#     <bar attrib4='value4' attrib5='value4'>"
nl|'\n'
comment|'#        <foo/>'
nl|'\n'
comment|'#        <gar>MNO</gar>'
nl|'\n'
comment|'#     </bar>'
nl|'\n'
comment|"#     <bar attrib4='value4' attrib5='value6'/>"
nl|'\n'
comment|'# </foo>'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'e'
op|'='
name|'Element'
op|'('
op|'('
string|'"testns"'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'e'
op|'['
string|'"attrib1"'
op|']'
op|'='
string|'"value1"'
newline|'\n'
name|'self'
op|'.'
name|'e'
op|'['
string|'"attrib3"'
op|']'
op|'='
string|'"user@host/resource"'
newline|'\n'
name|'self'
op|'.'
name|'e'
op|'.'
name|'addContent'
op|'('
string|'"somecontent"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bar1'
op|'='
name|'self'
op|'.'
name|'e'
op|'.'
name|'addElement'
op|'('
string|'"bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'subfoo'
op|'='
name|'self'
op|'.'
name|'bar1'
op|'.'
name|'addElement'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'gar1'
op|'='
name|'self'
op|'.'
name|'subfoo'
op|'.'
name|'addElement'
op|'('
string|'"gar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'gar1'
op|'.'
name|'addContent'
op|'('
string|'"DEF"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'e'
op|'.'
name|'addContent'
op|'('
string|'"somemorecontent"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bar2'
op|'='
name|'self'
op|'.'
name|'e'
op|'.'
name|'addElement'
op|'('
string|'"bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bar2'
op|'['
string|'"attrib2"'
op|']'
op|'='
string|'"value2"'
newline|'\n'
name|'self'
op|'.'
name|'bar3'
op|'='
name|'self'
op|'.'
name|'bar2'
op|'.'
name|'addElement'
op|'('
string|'"bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'subfoo2'
op|'='
name|'self'
op|'.'
name|'bar3'
op|'.'
name|'addElement'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'gar2'
op|'='
name|'self'
op|'.'
name|'bar3'
op|'.'
name|'addElement'
op|'('
string|'"gar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'gar2'
op|'.'
name|'addContent'
op|'('
string|'"ABC"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bar4'
op|'='
name|'self'
op|'.'
name|'e'
op|'.'
name|'addElement'
op|'('
string|'"bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bar5'
op|'='
name|'self'
op|'.'
name|'e'
op|'.'
name|'addElement'
op|'('
string|'"bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bar5'
op|'['
string|'"attrib4"'
op|']'
op|'='
string|'"value4"'
newline|'\n'
name|'self'
op|'.'
name|'bar5'
op|'['
string|'"attrib5"'
op|']'
op|'='
string|'"value5"'
newline|'\n'
name|'self'
op|'.'
name|'subfoo3'
op|'='
name|'self'
op|'.'
name|'bar5'
op|'.'
name|'addElement'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'gar3'
op|'='
name|'self'
op|'.'
name|'bar5'
op|'.'
name|'addElement'
op|'('
string|'"gar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'gar3'
op|'.'
name|'addContent'
op|'('
string|'"JKL"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bar6'
op|'='
name|'self'
op|'.'
name|'e'
op|'.'
name|'addElement'
op|'('
string|'"bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bar6'
op|'['
string|'"attrib4"'
op|']'
op|'='
string|'"value4"'
newline|'\n'
name|'self'
op|'.'
name|'bar6'
op|'['
string|'"attrib5"'
op|']'
op|'='
string|'"value4"'
newline|'\n'
name|'self'
op|'.'
name|'subfoo4'
op|'='
name|'self'
op|'.'
name|'bar6'
op|'.'
name|'addElement'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'gar4'
op|'='
name|'self'
op|'.'
name|'bar6'
op|'.'
name|'addElement'
op|'('
string|'"gar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'gar4'
op|'.'
name|'addContent'
op|'('
string|'"MNO"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bar7'
op|'='
name|'self'
op|'.'
name|'e'
op|'.'
name|'addElement'
op|'('
string|'"bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bar7'
op|'['
string|'"attrib4"'
op|']'
op|'='
string|'"value4"'
newline|'\n'
name|'self'
op|'.'
name|'bar7'
op|'['
string|'"attrib5"'
op|']'
op|'='
string|'"value6"'
newline|'\n'
nl|'\n'
DECL|member|test_staticMethods
dedent|''
name|'def'
name|'test_staticMethods'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test basic operation of the static methods.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xpath'
op|'.'
name|'matches'
op|'('
string|'"/foo/bar"'
op|','
name|'self'
op|'.'
name|'e'
op|')'
op|','
nl|'\n'
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xpath'
op|'.'
name|'queryForNodes'
op|'('
string|'"/foo/bar"'
op|','
name|'self'
op|'.'
name|'e'
op|')'
op|','
nl|'\n'
op|'['
name|'self'
op|'.'
name|'bar1'
op|','
name|'self'
op|'.'
name|'bar2'
op|','
name|'self'
op|'.'
name|'bar4'
op|','
nl|'\n'
name|'self'
op|'.'
name|'bar5'
op|','
name|'self'
op|'.'
name|'bar6'
op|','
name|'self'
op|'.'
name|'bar7'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xpath'
op|'.'
name|'queryForString'
op|'('
string|'"/foo"'
op|','
name|'self'
op|'.'
name|'e'
op|')'
op|','
nl|'\n'
string|'"somecontent"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xpath'
op|'.'
name|'queryForStringList'
op|'('
string|'"/foo"'
op|','
name|'self'
op|'.'
name|'e'
op|')'
op|','
nl|'\n'
op|'['
string|'"somecontent"'
op|','
string|'"somemorecontent"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_locationFooBar
dedent|''
name|'def'
name|'test_locationFooBar'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test matching foo with child bar.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"/foo/bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_locationFooBarFoo
dedent|''
name|'def'
name|'test_locationFooBarFoo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test finding foos at the second level.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"/foo/bar/foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'queryForNodes'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
op|'['
name|'self'
op|'.'
name|'subfoo'
op|','
nl|'\n'
name|'self'
op|'.'
name|'subfoo3'
op|','
nl|'\n'
name|'self'
op|'.'
name|'subfoo4'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_locationNoBar3
dedent|''
name|'def'
name|'test_locationNoBar3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test not finding bar3.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"/foo/bar3"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_locationAllChilds
dedent|''
name|'def'
name|'test_locationAllChilds'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test finding childs of foo.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"/foo/*"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'queryForNodes'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
op|'['
name|'self'
op|'.'
name|'bar1'
op|','
name|'self'
op|'.'
name|'bar2'
op|','
nl|'\n'
name|'self'
op|'.'
name|'bar4'
op|','
name|'self'
op|'.'
name|'bar5'
op|','
nl|'\n'
name|'self'
op|'.'
name|'bar6'
op|','
name|'self'
op|'.'
name|'bar7'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attribute
dedent|''
name|'def'
name|'test_attribute'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test matching foo with attribute.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"/foo[@attrib1]"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attributeWithValueAny
dedent|''
name|'def'
name|'test_attributeWithValueAny'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test find nodes with attribute having value.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"/foo/*[@attrib2=\'value2\']"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'queryForNodes'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
op|'['
name|'self'
op|'.'
name|'bar2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_position
dedent|''
name|'def'
name|'test_position'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test finding element at position.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"/foo/bar[2]"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'queryForNodes'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
op|'['
name|'self'
op|'.'
name|'bar1'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'test_position'
op|'.'
name|'todo'
op|'='
string|'"XPath queries with position are not working."'
newline|'\n'
nl|'\n'
DECL|member|test_namespaceFound
name|'def'
name|'test_namespaceFound'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test matching node with namespace.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"/foo[@xmlns=\'testns\']/bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_namespaceNotFound
dedent|''
name|'def'
name|'test_namespaceNotFound'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test not matching node with wrong namespace.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"/foo[@xmlns=\'badns\']/bar2"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attributeWithValue
dedent|''
name|'def'
name|'test_attributeWithValue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test matching node with attribute having value.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"/foo[@attrib1=\'value1\']"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_queryForString
dedent|''
name|'def'
name|'test_queryForString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test for queryForString and queryForStringList.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"/foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'queryForString'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
string|'"somecontent"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'queryForStringList'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
nl|'\n'
op|'['
string|'"somecontent"'
op|','
string|'"somemorecontent"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_queryForNodes
dedent|''
name|'def'
name|'test_queryForNodes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test finding nodes.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"/foo/bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'queryForNodes'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
op|'['
name|'self'
op|'.'
name|'bar1'
op|','
name|'self'
op|'.'
name|'bar2'
op|','
nl|'\n'
name|'self'
op|'.'
name|'bar4'
op|','
name|'self'
op|'.'
name|'bar5'
op|','
nl|'\n'
name|'self'
op|'.'
name|'bar6'
op|','
name|'self'
op|'.'
name|'bar7'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_textCondition
dedent|''
name|'def'
name|'test_textCondition'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test matching a node with given text.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"/foo[text() = \'somecontent\']"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_textNotOperator
dedent|''
name|'def'
name|'test_textNotOperator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test for not operator.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"/foo[not(@nosuchattrib)]"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_anyLocationAndText
dedent|''
name|'def'
name|'test_anyLocationAndText'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test finding any nodes named gar and getting their text contents.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"//gar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'queryForNodes'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
op|'['
name|'self'
op|'.'
name|'gar1'
op|','
name|'self'
op|'.'
name|'gar2'
op|','
nl|'\n'
name|'self'
op|'.'
name|'gar3'
op|','
name|'self'
op|'.'
name|'gar4'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'queryForStringList'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
op|'['
string|'"DEF"'
op|','
string|'"ABC"'
op|','
nl|'\n'
string|'"JKL"'
op|','
string|'"MNO"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_anyLocation
dedent|''
name|'def'
name|'test_anyLocation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test finding any nodes named bar.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"//bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'queryForNodes'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
op|'['
name|'self'
op|'.'
name|'bar1'
op|','
name|'self'
op|'.'
name|'bar2'
op|','
nl|'\n'
name|'self'
op|'.'
name|'bar3'
op|','
name|'self'
op|'.'
name|'bar4'
op|','
nl|'\n'
name|'self'
op|'.'
name|'bar5'
op|','
name|'self'
op|'.'
name|'bar6'
op|','
nl|'\n'
name|'self'
op|'.'
name|'bar7'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_anyLocationQueryForString
dedent|''
name|'def'
name|'test_anyLocationQueryForString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{XPathQuery.queryForString} should raise a L{NotImplementedError}\n        for any location.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"//bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
name|'xp'
op|'.'
name|'queryForString'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_andOperator
dedent|''
name|'def'
name|'test_andOperator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test boolean and operator in condition.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"//bar[@attrib4=\'value4\' and @attrib5=\'value5\']"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'queryForNodes'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
op|'['
name|'self'
op|'.'
name|'bar5'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_orOperator
dedent|''
name|'def'
name|'test_orOperator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test boolean or operator in condition.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"//bar[@attrib5=\'value4\' or @attrib5=\'value5\']"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'queryForNodes'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
op|'['
name|'self'
op|'.'
name|'bar5'
op|','
name|'self'
op|'.'
name|'bar6'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_booleanOperatorsParens
dedent|''
name|'def'
name|'test_booleanOperatorsParens'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test multiple boolean operators in condition with parens.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"""//bar[@attrib4=\'value4\' and\n                                 (@attrib5=\'value4\' or @attrib5=\'value6\')]"""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'queryForNodes'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
op|'['
name|'self'
op|'.'
name|'bar6'
op|','
name|'self'
op|'.'
name|'bar7'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_booleanOperatorsNoParens
dedent|''
name|'def'
name|'test_booleanOperatorsNoParens'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test multiple boolean operators in condition without parens.\n        """'
newline|'\n'
name|'xp'
op|'='
name|'XPathQuery'
op|'('
string|'"""//bar[@attrib5=\'value4\' or\n                                 @attrib5=\'value5\' or\n                                 @attrib5=\'value6\']"""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'matches'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'xp'
op|'.'
name|'queryForNodes'
op|'('
name|'self'
op|'.'
name|'e'
op|')'
op|','
op|'['
name|'self'
op|'.'
name|'bar5'
op|','
name|'self'
op|'.'
name|'bar6'
op|','
name|'self'
op|'.'
name|'bar7'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

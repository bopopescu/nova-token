begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.words.xish.domish}, a DOM-like library for XMPP.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'xish'
name|'import'
name|'domish'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DomishTestCase
name|'class'
name|'DomishTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testEscaping
indent|'    '
name|'def'
name|'testEscaping'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
string|'"&<>\'\\""'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'domish'
op|'.'
name|'escapeToXml'
op|'('
name|'s'
op|')'
op|','
string|'"&amp;&lt;&gt;\'\\""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'domish'
op|'.'
name|'escapeToXml'
op|'('
name|'s'
op|','
number|'1'
op|')'
op|','
string|'"&amp;&lt;&gt;&apos;&quot;"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNamespaceObject
dedent|''
name|'def'
name|'testNamespaceObject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ns'
op|'='
name|'domish'
op|'.'
name|'Namespace'
op|'('
string|'"testns"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ns'
op|'.'
name|'foo'
op|','
op|'('
string|'"testns"'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testElementInit
dedent|''
name|'def'
name|'testElementInit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'name'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'uri'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'defaultUri'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'parent'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|'""'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'name'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'uri'
op|','
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'defaultUri'
op|','
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'parent'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|'"testns"'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'name'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'uri'
op|','
string|'"testns"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'defaultUri'
op|','
string|'"testns"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'parent'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|'"testns"'
op|','
string|'"foo"'
op|')'
op|','
string|'"test2ns"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'name'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'uri'
op|','
string|'"testns"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'defaultUri'
op|','
string|'"test2ns"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testChildOps
dedent|''
name|'def'
name|'testChildOps'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|'"testns"'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'addContent'
op|'('
string|'"somecontent"'
op|')'
newline|'\n'
name|'b2'
op|'='
name|'e'
op|'.'
name|'addElement'
op|'('
op|'('
string|'"testns2"'
op|','
string|'"bar2"'
op|')'
op|')'
newline|'\n'
name|'e'
op|'['
string|'"attrib1"'
op|']'
op|'='
string|'"value1"'
newline|'\n'
name|'e'
op|'['
op|'('
string|'"testns2"'
op|','
string|'"attrib2"'
op|')'
op|']'
op|'='
string|'"value2"'
newline|'\n'
name|'e'
op|'.'
name|'addElement'
op|'('
string|'"bar"'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'addElement'
op|'('
string|'"bar"'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'addContent'
op|'('
string|'"abc"'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'addContent'
op|'('
string|'"123"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check content merging'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'children'
op|'['
op|'-'
number|'1'
op|']'
op|','
string|'"abc123"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check str()/content extraction'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|','
string|'"somecontent"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check direct child accessor'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'bar2'
op|','
name|'b2'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'bar2'
op|'.'
name|'addContent'
op|'('
string|'"subcontent"'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'bar2'
op|'['
string|'"bar2value"'
op|']'
op|'='
string|'"somevalue"'
newline|'\n'
nl|'\n'
comment|'# Check child ops'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'children'
op|'['
number|'1'
op|']'
op|','
name|'e'
op|'.'
name|'bar2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'children'
op|'['
number|'2'
op|']'
op|','
name|'e'
op|'.'
name|'bar'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check attribute ops'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'['
string|'"attrib1"'
op|']'
op|','
string|'"value1"'
op|')'
newline|'\n'
name|'del'
name|'e'
op|'['
string|'"attrib1"'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'hasAttribute'
op|'('
string|'"attrib1"'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'hasAttribute'
op|'('
string|'"attrib2"'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'['
op|'('
string|'"testns2"'
op|','
string|'"attrib2"'
op|')'
op|']'
op|','
string|'"value2"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_elements
dedent|''
name|'def'
name|'test_elements'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling C{elements} without arguments on a L{domish.Element} returns\n        all child elements, whatever the qualfied name.\n        """'
newline|'\n'
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|'u"testns"'
op|','
string|'u"foo"'
op|')'
op|')'
newline|'\n'
name|'c1'
op|'='
name|'e'
op|'.'
name|'addElement'
op|'('
string|'u"name"'
op|')'
newline|'\n'
name|'c2'
op|'='
name|'e'
op|'.'
name|'addElement'
op|'('
op|'('
string|'u"testns2"'
op|','
string|'u"baz"'
op|')'
op|')'
newline|'\n'
name|'c3'
op|'='
name|'e'
op|'.'
name|'addElement'
op|'('
string|'u"quux"'
op|')'
newline|'\n'
name|'c4'
op|'='
name|'e'
op|'.'
name|'addElement'
op|'('
op|'('
string|'u"testns"'
op|','
string|'u"name"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'elts'
op|'='
name|'list'
op|'('
name|'e'
op|'.'
name|'elements'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'c1'
op|','
name|'elts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'c2'
op|','
name|'elts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'c3'
op|','
name|'elts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'c4'
op|','
name|'elts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_elementsWithQN
dedent|''
name|'def'
name|'test_elementsWithQN'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling C{elements} with a namespace and local name on a\n        L{domish.Element} returns all child elements with that qualified name.\n        """'
newline|'\n'
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|'u"testns"'
op|','
string|'u"foo"'
op|')'
op|')'
newline|'\n'
name|'c1'
op|'='
name|'e'
op|'.'
name|'addElement'
op|'('
string|'u"name"'
op|')'
newline|'\n'
name|'c2'
op|'='
name|'e'
op|'.'
name|'addElement'
op|'('
op|'('
string|'u"testns2"'
op|','
string|'u"baz"'
op|')'
op|')'
newline|'\n'
name|'c3'
op|'='
name|'e'
op|'.'
name|'addElement'
op|'('
string|'u"quux"'
op|')'
newline|'\n'
name|'c4'
op|'='
name|'e'
op|'.'
name|'addElement'
op|'('
op|'('
string|'u"testns"'
op|','
string|'u"name"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'elts'
op|'='
name|'list'
op|'('
name|'e'
op|'.'
name|'elements'
op|'('
string|'u"testns"'
op|','
string|'u"name"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'c1'
op|','
name|'elts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'c2'
op|','
name|'elts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'c3'
op|','
name|'elts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'c4'
op|','
name|'elts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DomishStreamTestsMixin
dedent|''
dedent|''
name|'class'
name|'DomishStreamTestsMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Mixin defining tests for different stream implementations.\n\n    @ivar streamClass: A no-argument callable which will be used to create an\n        XML parser which can produce a stream of elements from incremental\n        input.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'doc_started'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'doc_ended'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'root'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'elements'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'='
name|'self'
op|'.'
name|'streamClass'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'DocumentStartEvent'
op|'='
name|'self'
op|'.'
name|'_docStarted'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'ElementEvent'
op|'='
name|'self'
op|'.'
name|'elements'
op|'.'
name|'append'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'DocumentEndEvent'
op|'='
name|'self'
op|'.'
name|'_docEnded'
newline|'\n'
nl|'\n'
DECL|member|_docStarted
dedent|''
name|'def'
name|'_docStarted'
op|'('
name|'self'
op|','
name|'root'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'root'
op|'='
name|'root'
newline|'\n'
name|'self'
op|'.'
name|'doc_started'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_docEnded
dedent|''
name|'def'
name|'_docEnded'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'doc_ended'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|doTest
dedent|''
name|'def'
name|'doTest'
op|'('
name|'self'
op|','
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stream'
op|'.'
name|'parse'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testHarness
dedent|''
name|'def'
name|'testHarness'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
string|'"<root><child/><child2/></root>"'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'parse'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'doc_started'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'root'
op|'.'
name|'name'
op|','
string|"'root'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'name'
op|','
string|"'child'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'elements'
op|'['
number|'1'
op|']'
op|'.'
name|'name'
op|','
string|"'child2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'doc_ended'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testBasic
dedent|''
name|'def'
name|'testBasic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
string|'"<stream:stream xmlns:stream=\'etherx\' xmlns=\'jabber\'>\\n"'
op|'+'
string|'"  <message to=\'bar\'>"'
op|'+'
string|'"    <x xmlns=\'xdelay\'>some&amp;data&gt;</x>"'
op|'+'
string|'"  </message>"'
op|'+'
string|'"</stream:stream>"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'parse'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'root'
op|'.'
name|'name'
op|','
string|"'stream'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'root'
op|'.'
name|'uri'
op|','
string|"'etherx'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'name'
op|','
string|"'message'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'uri'
op|','
string|"'jabber'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'['
string|"'to'"
op|']'
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'x'
op|'.'
name|'uri'
op|','
string|"'xdelay'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'unicode'
op|'('
name|'self'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'x'
op|')'
op|','
string|"'some&data>'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNoRootNS
dedent|''
name|'def'
name|'testNoRootNS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
string|'"<stream><error xmlns=\'etherx\'/></stream>"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'parse'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'root'
op|'.'
name|'uri'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'uri'
op|','
string|"'etherx'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNoDefaultNS
dedent|''
name|'def'
name|'testNoDefaultNS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
string|'"<stream:stream xmlns:stream=\'etherx\'><error/></stream:stream>"'
string|'""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'parse'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'root'
op|'.'
name|'uri'
op|','
string|"'etherx'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'root'
op|'.'
name|'defaultUri'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'uri'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'defaultUri'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testChildDefaultNS
dedent|''
name|'def'
name|'testChildDefaultNS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
string|'"<root xmlns=\'testns\'><child/></root>"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'parse'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'root'
op|'.'
name|'uri'
op|','
string|"'testns'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'uri'
op|','
string|"'testns'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEmptyChildNS
dedent|''
name|'def'
name|'testEmptyChildNS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
string|'"<root xmlns=\'testns\'><child1><child2 xmlns=\'\'/></child1></root>"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'parse'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'child2'
op|'.'
name|'uri'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testChildPrefix
dedent|''
name|'def'
name|'testChildPrefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
string|'"<root xmlns=\'testns\' xmlns:foo=\'testns2\'><foo:child/></root>"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'parse'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'root'
op|'.'
name|'localPrefixes'
op|'['
string|"'foo'"
op|']'
op|','
string|"'testns2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'uri'
op|','
string|"'testns2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUnclosedElement
dedent|''
name|'def'
name|'testUnclosedElement'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'domish'
op|'.'
name|'ParserError'
op|','
name|'self'
op|'.'
name|'stream'
op|'.'
name|'parse'
op|','
nl|'\n'
string|'"<root><error></root>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_namespaceReuse
dedent|''
name|'def'
name|'test_namespaceReuse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that reuse of namespaces does affect an element\'s serialization.\n\n        When one element uses a prefix for a certain namespace, this is\n        stored in the C{localPrefixes} attribute of the element. We want\n        to make sure that elements created after such use, won\'t have this\n        prefix end up in their C{localPrefixes} attribute, too.\n        """'
newline|'\n'
nl|'\n'
name|'xml'
op|'='
string|'"""<root>\n                   <foo:child1 xmlns:foo=\'testns\'/>\n                   <child2 xmlns=\'testns\'/>\n                 </root>"""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'parse'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'child1'"
op|','
name|'self'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'testns'"
op|','
name|'self'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'uri'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|','
name|'self'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'defaultUri'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'testns'"
op|'}'
op|','
name|'self'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'localPrefixes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'child2'"
op|','
name|'self'
op|'.'
name|'elements'
op|'['
number|'1'
op|']'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'testns'"
op|','
name|'self'
op|'.'
name|'elements'
op|'['
number|'1'
op|']'
op|'.'
name|'uri'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'testns'"
op|','
name|'self'
op|'.'
name|'elements'
op|'['
number|'1'
op|']'
op|'.'
name|'defaultUri'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'{'
op|'}'
op|','
name|'self'
op|'.'
name|'elements'
op|'['
number|'1'
op|']'
op|'.'
name|'localPrefixes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DomishExpatStreamTestCase
dedent|''
dedent|''
name|'class'
name|'DomishExpatStreamTestCase'
op|'('
name|'DomishStreamTestsMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{domish.ExpatElementStream}, the expat-based element stream\n    implementation.\n    """'
newline|'\n'
DECL|variable|streamClass
name|'streamClass'
op|'='
name|'domish'
op|'.'
name|'ExpatElementStream'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'pyexpat'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"pyexpat is required for ExpatElementStream tests."'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DomishSuxStreamTestCase
dedent|''
dedent|''
name|'class'
name|'DomishSuxStreamTestCase'
op|'('
name|'DomishStreamTestsMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{domish.SuxElementStream}, the L{twisted.web.sux}-based element\n    stream implementation.\n    """'
newline|'\n'
DECL|variable|streamClass
name|'streamClass'
op|'='
name|'domish'
op|'.'
name|'SuxElementStream'
newline|'\n'
nl|'\n'
name|'if'
name|'domish'
op|'.'
name|'SuxElementStream'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"twisted.web is required for SuxElementStream tests."'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SerializerTests
dedent|''
dedent|''
name|'class'
name|'SerializerTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testNoNamespace
indent|'    '
name|'def'
name|'testNoNamespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<foo/>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
name|'closeElement'
op|'='
number|'0'
op|')'
op|','
string|'"<foo>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDefaultNamespace
dedent|''
name|'def'
name|'testDefaultNamespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|'"testns"'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<foo xmlns=\'testns\'/>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testOtherNamespace
dedent|''
name|'def'
name|'testOtherNamespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|'"testns"'
op|','
string|'"foo"'
op|')'
op|','
string|'"testns2"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|'{'
string|"'testns'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|','
nl|'\n'
string|'"<bar:foo xmlns:bar=\'testns\' xmlns=\'testns2\'/>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testChildDefaultNamespace
dedent|''
name|'def'
name|'testChildDefaultNamespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|'"testns"'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'addElement'
op|'('
string|'"bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<foo xmlns=\'testns\'><bar/></foo>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testChildSameNamespace
dedent|''
name|'def'
name|'testChildSameNamespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|'"testns"'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'addElement'
op|'('
op|'('
string|'"testns"'
op|','
string|'"bar"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<foo xmlns=\'testns\'><bar/></foo>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testChildSameDefaultNamespace
dedent|''
name|'def'
name|'testChildSameDefaultNamespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|'"testns"'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'addElement'
op|'('
string|'"bar"'
op|','
string|'"testns"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<foo xmlns=\'testns\'><bar/></foo>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testChildOtherDefaultNamespace
dedent|''
name|'def'
name|'testChildOtherDefaultNamespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|'"testns"'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'addElement'
op|'('
op|'('
string|'"testns2"'
op|','
string|'"bar"'
op|')'
op|','
string|"'testns2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<foo xmlns=\'testns\'><bar xmlns=\'testns2\'/></foo>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testOnlyChildDefaultNamespace
dedent|''
name|'def'
name|'testOnlyChildDefaultNamespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'addElement'
op|'('
op|'('
string|'"ns2"'
op|','
string|'"bar"'
op|')'
op|','
string|"'ns2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<foo><bar xmlns=\'ns2\'/></foo>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testOnlyChildDefaultNamespace2
dedent|''
name|'def'
name|'testOnlyChildDefaultNamespace2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'addElement'
op|'('
string|'"bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<foo><bar/></foo>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testChildInDefaultNamespace
dedent|''
name|'def'
name|'testChildInDefaultNamespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|'"testns"'
op|','
string|'"foo"'
op|')'
op|','
string|'"testns2"'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'addElement'
op|'('
op|'('
string|'"testns2"'
op|','
string|'"bar"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<xn0:foo xmlns:xn0=\'testns\' xmlns=\'testns2\'><bar/></xn0:foo>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testQualifiedAttribute
dedent|''
name|'def'
name|'testQualifiedAttribute'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|'"foo"'
op|')'
op|','
nl|'\n'
name|'attribs'
op|'='
op|'{'
op|'('
string|'"testns2"'
op|','
string|'"bar"'
op|')'
op|':'
string|'"baz"'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<foo xmlns:xn0=\'testns2\' xn0:bar=\'baz\'/>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testQualifiedAttributeDefaultNS
dedent|''
name|'def'
name|'testQualifiedAttributeDefaultNS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|'"testns"'
op|','
string|'"foo"'
op|')'
op|','
nl|'\n'
name|'attribs'
op|'='
op|'{'
op|'('
string|'"testns"'
op|','
string|'"bar"'
op|')'
op|':'
string|'"baz"'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<foo xmlns=\'testns\' xmlns:xn0=\'testns\' xn0:bar=\'baz\'/>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testTwoChilds
dedent|''
name|'def'
name|'testTwoChilds'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"''"
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'child1'
op|'='
name|'e'
op|'.'
name|'addElement'
op|'('
op|'('
string|'"testns"'
op|','
string|'"bar"'
op|')'
op|','
string|'"testns2"'
op|')'
newline|'\n'
name|'child1'
op|'.'
name|'addElement'
op|'('
op|'('
string|"'testns2'"
op|','
string|"'quux'"
op|')'
op|')'
newline|'\n'
name|'child2'
op|'='
name|'e'
op|'.'
name|'addElement'
op|'('
op|'('
string|'"testns3"'
op|','
string|'"baz"'
op|')'
op|','
string|'"testns4"'
op|')'
newline|'\n'
name|'child2'
op|'.'
name|'addElement'
op|'('
op|'('
string|"'testns'"
op|','
string|"'quux'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<foo><xn0:bar xmlns:xn0=\'testns\' xmlns=\'testns2\'><quux/></xn0:bar><xn1:baz xmlns:xn1=\'testns3\' xmlns=\'testns4\'><xn0:quux xmlns:xn0=\'testns\'/></xn1:baz></foo>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testXMLNamespace
dedent|''
name|'def'
name|'testXMLNamespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|'"foo"'
op|')'
op|','
nl|'\n'
name|'attribs'
op|'='
op|'{'
op|'('
string|'"http://www.w3.org/XML/1998/namespace"'
op|','
nl|'\n'
string|'"lang"'
op|')'
op|':'
string|'"en_US"'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<foo xml:lang=\'en_US\'/>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testQualifiedAttributeGivenListOfPrefixes
dedent|''
name|'def'
name|'testQualifiedAttributeGivenListOfPrefixes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|'"foo"'
op|')'
op|','
nl|'\n'
name|'attribs'
op|'='
op|'{'
op|'('
string|'"testns2"'
op|','
string|'"bar"'
op|')'
op|':'
string|'"baz"'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|'{'
string|'"testns2"'
op|':'
string|'"qux"'
op|'}'
op|')'
op|','
nl|'\n'
string|'"<foo xmlns:qux=\'testns2\' qux:bar=\'baz\'/>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNSPrefix
dedent|''
name|'def'
name|'testNSPrefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|'"foo"'
op|')'
op|','
nl|'\n'
name|'attribs'
op|'='
op|'{'
op|'('
string|'"testns2"'
op|','
string|'"bar"'
op|')'
op|':'
string|'"baz"'
op|'}'
op|')'
newline|'\n'
name|'c'
op|'='
name|'e'
op|'.'
name|'addElement'
op|'('
op|'('
string|'"testns2"'
op|','
string|'"qux"'
op|')'
op|')'
newline|'\n'
name|'c'
op|'['
op|'('
string|'"testns2"'
op|','
string|'"bar"'
op|')'
op|']'
op|'='
string|'"quux"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<foo xmlns:xn0=\'testns2\' xn0:bar=\'baz\'><xn0:qux xn0:bar=\'quux\'/></foo>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDefaultNSPrefix
dedent|''
name|'def'
name|'testDefaultNSPrefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|'"foo"'
op|')'
op|','
nl|'\n'
name|'attribs'
op|'='
op|'{'
op|'('
string|'"testns2"'
op|','
string|'"bar"'
op|')'
op|':'
string|'"baz"'
op|'}'
op|')'
newline|'\n'
name|'c'
op|'='
name|'e'
op|'.'
name|'addElement'
op|'('
op|'('
string|'"testns2"'
op|','
string|'"qux"'
op|')'
op|')'
newline|'\n'
name|'c'
op|'['
op|'('
string|'"testns2"'
op|','
string|'"bar"'
op|')'
op|']'
op|'='
string|'"quux"'
newline|'\n'
name|'c'
op|'.'
name|'addElement'
op|'('
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<foo xmlns:xn0=\'testns2\' xn0:bar=\'baz\'><xn0:qux xn0:bar=\'quux\'><xn0:foo/></xn0:qux></foo>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPrefixScope
dedent|''
name|'def'
name|'testPrefixScope'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'testns'"
op|','
string|"'foo'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
name|'prefixes'
op|'='
op|'{'
string|"'testns'"
op|':'
string|"'bar'"
op|'}'
op|','
nl|'\n'
name|'prefixesInScope'
op|'='
op|'['
string|"'bar'"
op|']'
op|')'
op|','
nl|'\n'
string|'"<bar:foo/>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLocalPrefixes
dedent|''
name|'def'
name|'testLocalPrefixes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'testns'"
op|','
string|"'foo'"
op|')'
op|','
name|'localPrefixes'
op|'='
op|'{'
string|"'bar'"
op|':'
string|"'testns'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<bar:foo xmlns:bar=\'testns\'/>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLocalPrefixesWithChild
dedent|''
name|'def'
name|'testLocalPrefixesWithChild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'testns'"
op|','
string|"'foo'"
op|')'
op|','
name|'localPrefixes'
op|'='
op|'{'
string|"'bar'"
op|':'
string|"'testns'"
op|'}'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'addElement'
op|'('
string|"'baz'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'e'
op|'.'
name|'baz'
op|'.'
name|'defaultUri'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<bar:foo xmlns:bar=\'testns\'><baz/></bar:foo>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_prefixesReuse
dedent|''
name|'def'
name|'test_prefixesReuse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that prefixes passed to serialization are not modified.\n\n        This test makes sure that passing a dictionary of prefixes repeatedly\n        to C{toXml} of elements does not cause serialization errors. A\n        previous implementation changed the passed in dictionary internally,\n        causing havoc later on.\n        """'
newline|'\n'
name|'prefixes'
op|'='
op|'{'
string|"'testns'"
op|':'
string|"'foo'"
op|'}'
newline|'\n'
nl|'\n'
comment|'# test passing of dictionary'
nl|'\n'
name|'s'
op|'='
name|'domish'
op|'.'
name|'SerializerClass'
op|'('
name|'prefixes'
op|'='
name|'prefixes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'prefixes'
op|','
name|'s'
op|'.'
name|'prefixes'
op|')'
newline|'\n'
nl|'\n'
comment|'# test proper serialization on prefixes reuse'
nl|'\n'
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'testns2'"
op|','
string|"'foo'"
op|')'
op|','
nl|'\n'
name|'localPrefixes'
op|'='
op|'{'
string|"'quux'"
op|':'
string|"'testns2'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"<quux:foo xmlns:quux=\'testns2\'/>"'
op|','
nl|'\n'
name|'e'
op|'.'
name|'toXml'
op|'('
name|'prefixes'
op|'='
name|'prefixes'
op|')'
op|')'
newline|'\n'
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'testns2'"
op|','
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"<foo xmlns=\'testns2\'/>"'
op|','
nl|'\n'
name|'e'
op|'.'
name|'toXml'
op|'('
name|'prefixes'
op|'='
name|'prefixes'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRawXMLSerialization
dedent|''
name|'def'
name|'testRawXMLSerialization'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'addRawXml'
op|'('
string|'"<abc123>"'
op|')'
newline|'\n'
comment|"# The testcase below should NOT generate valid XML -- that's"
nl|'\n'
comment|"# the whole point of using the raw XML call -- it's the callers"
nl|'\n'
comment|'# responsiblity to ensure that the data inserted is valid'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'"<foo><abc123></foo>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRawXMLWithUnicodeSerialization
dedent|''
name|'def'
name|'testRawXMLWithUnicodeSerialization'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'addRawXml'
op|'('
string|'u"<degree>\\u00B0</degree>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
string|'u"<foo><degree>\\u00B0</degree></foo>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUnicodeSerialization
dedent|''
name|'def'
name|'testUnicodeSerialization'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'e'
op|'['
string|'"test"'
op|']'
op|'='
string|'u"my value\\u0221e"'
newline|'\n'
name|'e'
op|'.'
name|'addContent'
op|'('
string|'u"A degree symbol...\\u00B0"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'e'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
nl|'\n'
string|'u"<foo test=\'my value\\u0221e\'>A degree symbol...\\u00B0</foo>"'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

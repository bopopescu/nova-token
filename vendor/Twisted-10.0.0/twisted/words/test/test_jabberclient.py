begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.words.protocols.jabber.client}\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'hashlib'
name|'import'
name|'sha1'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'protocols'
op|'.'
name|'jabber'
name|'import'
name|'client'
op|','
name|'error'
op|','
name|'jid'
op|','
name|'xmlstream'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'protocols'
op|'.'
name|'jabber'
op|'.'
name|'sasl'
name|'import'
name|'SASLInitiatingInitializer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'xish'
name|'import'
name|'utility'
newline|'\n'
nl|'\n'
name|'IQ_AUTH_GET'
op|'='
string|'\'/iq[@type="get"]/query[@xmlns="jabber:iq:auth"]\''
newline|'\n'
name|'IQ_AUTH_SET'
op|'='
string|'\'/iq[@type="set"]/query[@xmlns="jabber:iq:auth"]\''
newline|'\n'
DECL|variable|NS_BIND
name|'NS_BIND'
op|'='
string|"'urn:ietf:params:xml:ns:xmpp-bind'"
newline|'\n'
name|'IQ_BIND_SET'
op|'='
string|'\'/iq[@type="set"]/bind[@xmlns="%s"]\''
op|'%'
name|'NS_BIND'
newline|'\n'
DECL|variable|NS_SESSION
name|'NS_SESSION'
op|'='
string|"'urn:ietf:params:xml:ns:xmpp-session'"
newline|'\n'
name|'IQ_SESSION_SET'
op|'='
string|'\'/iq[@type="set"]/session[@xmlns="%s"]\''
op|'%'
name|'NS_SESSION'
newline|'\n'
nl|'\n'
DECL|class|CheckVersionInitializerTest
name|'class'
name|'CheckVersionInitializerTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'a'
op|'='
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
newline|'\n'
name|'xs'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'a'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'='
name|'client'
op|'.'
name|'CheckVersionInitializer'
op|'('
name|'xs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testSupported
dedent|''
name|'def'
name|'testSupported'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test supported version number 1.0\n        """'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'xmlstream'
op|'.'
name|'version'
op|'='
op|'('
number|'1'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'initialize'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testNotSupported
dedent|''
name|'def'
name|'testNotSupported'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test unsupported version number 0.0, and check exception.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'xmlstream'
op|'.'
name|'version'
op|'='
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'exc'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'error'
op|'.'
name|'StreamError'
op|','
name|'self'
op|'.'
name|'init'
op|'.'
name|'initialize'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'unsupported-version'"
op|','
name|'exc'
op|'.'
name|'condition'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|InitiatingInitializerHarness
dedent|''
dedent|''
name|'class'
name|'InitiatingInitializerHarness'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Testing harness for interacting with XML stream initializers.\n\n    This sets up an L{utility.XmlPipe} to create a communication channel between\n    the initializer and the stubbed receiving entity. It features a sink and\n    source side that both act similarly to a real L{xmlstream.XmlStream}. The\n    sink is augmented with an authenticator to which initializers can be added.\n\n    The harness also provides some utility methods to work with event observers\n    and deferreds.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'output'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'pipe'
op|'='
name|'utility'
op|'.'
name|'XmlPipe'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'='
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'sink'
newline|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'='
name|'xmlstream'
op|'.'
name|'ConnectAuthenticator'
op|'('
string|"'example.org'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'authenticator'
op|'='
name|'self'
op|'.'
name|'authenticator'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|waitFor
dedent|''
name|'def'
name|'waitFor'
op|'('
name|'self'
op|','
name|'event'
op|','
name|'handler'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Observe an output event, returning a deferred.\n\n        The returned deferred will be fired when the given event has been\n        observed on the source end of the L{XmlPipe} tied to the protocol\n        under test. The handler is added as the first callback.\n\n        @param event: The event to be observed. See\n            L{utility.EventDispatcher.addOnetimeObserver}.\n        @param handler: The handler to be called with the observed event object.\n        @rtype: L{defer.Deferred}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'handler'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'source'
op|'.'
name|'addOnetimeObserver'
op|'('
name|'event'
op|','
name|'d'
op|'.'
name|'callback'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IQAuthInitializerTest
dedent|''
dedent|''
name|'class'
name|'IQAuthInitializerTest'
op|'('
name|'InitiatingInitializerHarness'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{client.IQAuthInitializer}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'IQAuthInitializerTest'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'='
name|'client'
op|'.'
name|'IQAuthInitializer'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'jid'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|"'user@example.com/resource'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'password'
op|'='
string|"'secret'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testPlainText
dedent|''
name|'def'
name|'testPlainText'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test plain-text authentication.\n\n        Act as a server supporting plain-text authentication and expect the\n        C{password} field to be filled with the password. Then act as if\n        authentication succeeds.\n        """'
newline|'\n'
nl|'\n'
DECL|function|onAuthGet
name|'def'
name|'onAuthGet'
op|'('
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Called when the initializer sent a query for authentication methods.\n\n            The response informs the client that plain-text authentication\n            is supported.\n            """'
newline|'\n'
nl|'\n'
comment|'# Create server response'
nl|'\n'
name|'response'
op|'='
name|'xmlstream'
op|'.'
name|'toResponse'
op|'('
name|'iq'
op|','
string|"'result'"
op|')'
newline|'\n'
name|'response'
op|'.'
name|'addElement'
op|'('
op|'('
string|"'jabber:iq:auth'"
op|','
string|"'query'"
op|')'
op|')'
newline|'\n'
name|'response'
op|'.'
name|'query'
op|'.'
name|'addElement'
op|'('
string|"'username'"
op|')'
newline|'\n'
name|'response'
op|'.'
name|'query'
op|'.'
name|'addElement'
op|'('
string|"'password'"
op|')'
newline|'\n'
name|'response'
op|'.'
name|'query'
op|'.'
name|'addElement'
op|'('
string|"'resource'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Set up an observer for the next request we expect.'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'waitFor'
op|'('
name|'IQ_AUTH_SET'
op|','
name|'onAuthSet'
op|')'
newline|'\n'
nl|'\n'
comment|'# Send server response'
nl|'\n'
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'source'
op|'.'
name|'send'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|onAuthSet
dedent|''
name|'def'
name|'onAuthSet'
op|'('
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Called when the initializer sent the authentication request.\n\n            The server checks the credentials and responds with an empty result\n            signalling success.\n            """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'user'"
op|','
name|'unicode'
op|'('
name|'iq'
op|'.'
name|'query'
op|'.'
name|'username'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'secret'"
op|','
name|'unicode'
op|'('
name|'iq'
op|'.'
name|'query'
op|'.'
name|'password'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'resource'"
op|','
name|'unicode'
op|'('
name|'iq'
op|'.'
name|'query'
op|'.'
name|'resource'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Send server response'
nl|'\n'
name|'response'
op|'='
name|'xmlstream'
op|'.'
name|'toResponse'
op|'('
name|'iq'
op|','
string|"'result'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'source'
op|'.'
name|'send'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set up an observer for the request for authentication fields'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'waitFor'
op|'('
name|'IQ_AUTH_GET'
op|','
name|'onAuthGet'
op|')'
newline|'\n'
nl|'\n'
comment|'# Start the initializer'
nl|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'initialize'
op|'('
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testDigest
dedent|''
name|'def'
name|'testDigest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test digest authentication.\n\n        Act as a server supporting digest authentication and expect the\n        C{digest} field to be filled with a sha1 digest of the concatenated\n        stream session identifier and password. Then act as if authentication\n        succeeds.\n        """'
newline|'\n'
nl|'\n'
DECL|function|onAuthGet
name|'def'
name|'onAuthGet'
op|'('
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Called when the initializer sent a query for authentication methods.\n\n            The response informs the client that digest authentication is\n            supported.\n            """'
newline|'\n'
nl|'\n'
comment|'# Create server response'
nl|'\n'
name|'response'
op|'='
name|'xmlstream'
op|'.'
name|'toResponse'
op|'('
name|'iq'
op|','
string|"'result'"
op|')'
newline|'\n'
name|'response'
op|'.'
name|'addElement'
op|'('
op|'('
string|"'jabber:iq:auth'"
op|','
string|"'query'"
op|')'
op|')'
newline|'\n'
name|'response'
op|'.'
name|'query'
op|'.'
name|'addElement'
op|'('
string|"'username'"
op|')'
newline|'\n'
name|'response'
op|'.'
name|'query'
op|'.'
name|'addElement'
op|'('
string|"'digest'"
op|')'
newline|'\n'
name|'response'
op|'.'
name|'query'
op|'.'
name|'addElement'
op|'('
string|"'resource'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Set up an observer for the next request we expect.'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'waitFor'
op|'('
name|'IQ_AUTH_SET'
op|','
name|'onAuthSet'
op|')'
newline|'\n'
nl|'\n'
comment|'# Send server response'
nl|'\n'
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'source'
op|'.'
name|'send'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|onAuthSet
dedent|''
name|'def'
name|'onAuthSet'
op|'('
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Called when the initializer sent the authentication request.\n\n            The server checks the credentials and responds with an empty result\n            signalling success.\n            """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'user'"
op|','
name|'unicode'
op|'('
name|'iq'
op|'.'
name|'query'
op|'.'
name|'username'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sha1'
op|'('
string|"'12345secret'"
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
name|'unicode'
op|'('
name|'iq'
op|'.'
name|'query'
op|'.'
name|'digest'
op|')'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'resource'"
op|','
name|'unicode'
op|'('
name|'iq'
op|'.'
name|'query'
op|'.'
name|'resource'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Send server response'
nl|'\n'
name|'response'
op|'='
name|'xmlstream'
op|'.'
name|'toResponse'
op|'('
name|'iq'
op|','
string|"'result'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'source'
op|'.'
name|'send'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
comment|'# Digest authentication relies on the stream session identifier. Set it.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'sid'
op|'='
string|"u'12345'"
newline|'\n'
nl|'\n'
comment|'# Set up an observer for the request for authentication fields'
nl|'\n'
name|'d1'
op|'='
name|'self'
op|'.'
name|'waitFor'
op|'('
name|'IQ_AUTH_GET'
op|','
name|'onAuthGet'
op|')'
newline|'\n'
nl|'\n'
comment|'# Start the initializer'
nl|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'initialize'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testFailRequestFields
dedent|''
name|'def'
name|'testFailRequestFields'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test initializer failure of request for fields for authentication.\n        """'
newline|'\n'
DECL|function|onAuthGet
name|'def'
name|'onAuthGet'
op|'('
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Called when the initializer sent a query for authentication methods.\n\n            The server responds that the client is not authorized to authenticate.\n            """'
newline|'\n'
name|'response'
op|'='
name|'error'
op|'.'
name|'StanzaError'
op|'('
string|"'not-authorized'"
op|')'
op|'.'
name|'toResponse'
op|'('
name|'iq'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'source'
op|'.'
name|'send'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set up an observer for the request for authentication fields'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'waitFor'
op|'('
name|'IQ_AUTH_GET'
op|','
name|'onAuthGet'
op|')'
newline|'\n'
nl|'\n'
comment|'# Start the initializer'
nl|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'initialize'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# The initialized should fail with a stanza error.'
nl|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d2'
op|','
name|'error'
op|'.'
name|'StanzaError'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testFailAuth
dedent|''
name|'def'
name|'testFailAuth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test initializer failure to authenticate.\n        """'
newline|'\n'
nl|'\n'
DECL|function|onAuthGet
name|'def'
name|'onAuthGet'
op|'('
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Called when the initializer sent a query for authentication methods.\n\n            The response informs the client that plain-text authentication\n            is supported.\n            """'
newline|'\n'
nl|'\n'
comment|'# Send server response'
nl|'\n'
name|'response'
op|'='
name|'xmlstream'
op|'.'
name|'toResponse'
op|'('
name|'iq'
op|','
string|"'result'"
op|')'
newline|'\n'
name|'response'
op|'.'
name|'addElement'
op|'('
op|'('
string|"'jabber:iq:auth'"
op|','
string|"'query'"
op|')'
op|')'
newline|'\n'
name|'response'
op|'.'
name|'query'
op|'.'
name|'addElement'
op|'('
string|"'username'"
op|')'
newline|'\n'
name|'response'
op|'.'
name|'query'
op|'.'
name|'addElement'
op|'('
string|"'password'"
op|')'
newline|'\n'
name|'response'
op|'.'
name|'query'
op|'.'
name|'addElement'
op|'('
string|"'resource'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Set up an observer for the next request we expect.'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'waitFor'
op|'('
name|'IQ_AUTH_SET'
op|','
name|'onAuthSet'
op|')'
newline|'\n'
nl|'\n'
comment|'# Send server response'
nl|'\n'
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'source'
op|'.'
name|'send'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|onAuthSet
dedent|''
name|'def'
name|'onAuthSet'
op|'('
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Called when the initializer sent the authentication request.\n\n            The server checks the credentials and responds with a not-authorized\n            stanza error.\n            """'
newline|'\n'
name|'response'
op|'='
name|'error'
op|'.'
name|'StanzaError'
op|'('
string|"'not-authorized'"
op|')'
op|'.'
name|'toResponse'
op|'('
name|'iq'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'source'
op|'.'
name|'send'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set up an observer for the request for authentication fields'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'waitFor'
op|'('
name|'IQ_AUTH_GET'
op|','
name|'onAuthGet'
op|')'
newline|'\n'
nl|'\n'
comment|'# Start the initializer'
nl|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'initialize'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# The initializer should fail with a stanza error.'
nl|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d2'
op|','
name|'error'
op|'.'
name|'StanzaError'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BindInitializerTest
dedent|''
dedent|''
name|'class'
name|'BindInitializerTest'
op|'('
name|'InitiatingInitializerHarness'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{client.BindInitializer}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BindInitializerTest'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'='
name|'client'
op|'.'
name|'BindInitializer'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'jid'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|"'user@example.com/resource'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testBasic
dedent|''
name|'def'
name|'testBasic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set up a stream, and act as if resource binding succeeds.\n        """'
newline|'\n'
DECL|function|onBind
name|'def'
name|'onBind'
op|'('
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'='
name|'xmlstream'
op|'.'
name|'toResponse'
op|'('
name|'iq'
op|','
string|"'result'"
op|')'
newline|'\n'
name|'response'
op|'.'
name|'addElement'
op|'('
op|'('
name|'NS_BIND'
op|','
string|"'bind'"
op|')'
op|')'
newline|'\n'
name|'response'
op|'.'
name|'bind'
op|'.'
name|'addElement'
op|'('
string|"'jid'"
op|','
nl|'\n'
name|'content'
op|'='
string|"'user@example.com/other resource'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'source'
op|'.'
name|'send'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cb
dedent|''
name|'def'
name|'cb'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'jid'
op|'.'
name|'JID'
op|'('
string|"'user@example.com/other resource'"
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'jid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'waitFor'
op|'('
name|'IQ_BIND_SET'
op|','
name|'onBind'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'d2'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testFailure
dedent|''
name|'def'
name|'testFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set up a stream, and act as if resource binding fails.\n        """'
newline|'\n'
DECL|function|onBind
name|'def'
name|'onBind'
op|'('
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'='
name|'error'
op|'.'
name|'StanzaError'
op|'('
string|"'conflict'"
op|')'
op|'.'
name|'toResponse'
op|'('
name|'iq'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'source'
op|'.'
name|'send'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'waitFor'
op|'('
name|'IQ_BIND_SET'
op|','
name|'onBind'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d2'
op|','
name|'error'
op|'.'
name|'StanzaError'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SessionInitializerTest
dedent|''
dedent|''
name|'class'
name|'SessionInitializerTest'
op|'('
name|'InitiatingInitializerHarness'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{client.SessionInitializer}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'SessionInitializerTest'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'='
name|'client'
op|'.'
name|'SessionInitializer'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testSuccess
dedent|''
name|'def'
name|'testSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set up a stream, and act as if session establishment succeeds.\n        """'
newline|'\n'
nl|'\n'
DECL|function|onSession
name|'def'
name|'onSession'
op|'('
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'='
name|'xmlstream'
op|'.'
name|'toResponse'
op|'('
name|'iq'
op|','
string|"'result'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'source'
op|'.'
name|'send'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'waitFor'
op|'('
name|'IQ_SESSION_SET'
op|','
name|'onSession'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testFailure
dedent|''
name|'def'
name|'testFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set up a stream, and act as if session establishment fails.\n        """'
newline|'\n'
DECL|function|onSession
name|'def'
name|'onSession'
op|'('
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'='
name|'error'
op|'.'
name|'StanzaError'
op|'('
string|"'forbidden'"
op|')'
op|'.'
name|'toResponse'
op|'('
name|'iq'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'source'
op|'.'
name|'send'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d1'
op|'='
name|'self'
op|'.'
name|'waitFor'
op|'('
name|'IQ_SESSION_SET'
op|','
name|'onSession'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d2'
op|','
name|'error'
op|'.'
name|'StanzaError'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMPPAuthenticatorTest
dedent|''
dedent|''
name|'class'
name|'XMPPAuthenticatorTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test for both XMPPAuthenticator and XMPPClientFactory.\n    """'
newline|'\n'
DECL|member|testBasic
name|'def'
name|'testBasic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test basic operations.\n\n        Setup an XMPPClientFactory, which sets up an XMPPAuthenticator, and let\n        it produce a protocol instance. Then inspect the instance variables of\n        the authenticator and XML stream objects.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'client_jid'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|"'user@example.com/resource'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Get an XmlStream instance. Note that it gets initialized with the'
nl|'\n'
comment|'# XMPPAuthenticator (that has its associateWithXmlStream called) that'
nl|'\n'
comment|'# is in turn initialized with the arguments to the factory.'
nl|'\n'
name|'xs'
op|'='
name|'client'
op|'.'
name|'XMPPClientFactory'
op|'('
name|'self'
op|'.'
name|'client_jid'
op|','
nl|'\n'
string|"'secret'"
op|')'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|"# test authenticator's instance variables"
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'example.com'"
op|','
name|'xs'
op|'.'
name|'authenticator'
op|'.'
name|'otherHost'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'client_jid'
op|','
name|'xs'
op|'.'
name|'authenticator'
op|'.'
name|'jid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'secret'"
op|','
name|'xs'
op|'.'
name|'authenticator'
op|'.'
name|'password'
op|')'
newline|'\n'
nl|'\n'
comment|'# test list of initializers'
nl|'\n'
name|'version'
op|','
name|'tls'
op|','
name|'sasl'
op|','
name|'bind'
op|','
name|'session'
op|'='
name|'xs'
op|'.'
name|'initializers'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'tls'
op|','
name|'xmlstream'
op|'.'
name|'TLSInitiatingInitializer'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'sasl'
op|','
name|'SASLInitiatingInitializer'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'bind'
op|','
name|'client'
op|'.'
name|'BindInitializer'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'session'
op|','
name|'client'
op|'.'
name|'SessionInitializer'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'tls'
op|'.'
name|'required'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'sasl'
op|'.'
name|'required'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'bind'
op|'.'
name|'required'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'session'
op|'.'
name|'required'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTest cases for twisted.words.xish.utility\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'OrderedDict'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'xish'
name|'import'
name|'utility'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'xish'
op|'.'
name|'domish'
name|'import'
name|'Element'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'xish'
op|'.'
name|'utility'
name|'import'
name|'EventDispatcher'
newline|'\n'
nl|'\n'
DECL|class|CallbackTracker
name|'class'
name|'CallbackTracker'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test helper for tracking callbacks.\n\n    Increases a counter on each call to L{call} and stores the object\n    passed in the call.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'called'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'obj'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|call
dedent|''
name|'def'
name|'call'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'called'
op|'='
name|'self'
op|'.'
name|'called'
op|'+'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'obj'
op|'='
name|'obj'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|OrderedCallbackTracker
dedent|''
dedent|''
name|'class'
name|'OrderedCallbackTracker'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test helper for tracking callbacks and their order.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'callList'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|call1
dedent|''
name|'def'
name|'call1'
op|'('
name|'self'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'callList'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'call1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|call2
dedent|''
name|'def'
name|'call2'
op|'('
name|'self'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'callList'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'call2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|call3
dedent|''
name|'def'
name|'call3'
op|'('
name|'self'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'callList'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'call3'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|EventDispatcherTest
dedent|''
dedent|''
name|'class'
name|'EventDispatcherTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{EventDispatcher}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|testStuff
name|'def'
name|'testStuff'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'EventDispatcher'
op|'('
op|')'
newline|'\n'
name|'cb1'
op|'='
name|'CallbackTracker'
op|'('
op|')'
newline|'\n'
name|'cb2'
op|'='
name|'CallbackTracker'
op|'('
op|')'
newline|'\n'
name|'cb3'
op|'='
name|'CallbackTracker'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addObserver'
op|'('
string|'"/message/body"'
op|','
name|'cb1'
op|'.'
name|'call'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addObserver'
op|'('
string|'"/message"'
op|','
name|'cb1'
op|'.'
name|'call'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addObserver'
op|'('
string|'"/presence"'
op|','
name|'cb2'
op|'.'
name|'call'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addObserver'
op|'('
string|'"//event/testevent"'
op|','
name|'cb3'
op|'.'
name|'call'
op|')'
newline|'\n'
nl|'\n'
name|'msg'
op|'='
name|'Element'
op|'('
op|'('
string|'"ns"'
op|','
string|'"message"'
op|')'
op|')'
newline|'\n'
name|'msg'
op|'.'
name|'addElement'
op|'('
string|'"body"'
op|')'
newline|'\n'
nl|'\n'
name|'pres'
op|'='
name|'Element'
op|'('
op|'('
string|'"ns"'
op|','
string|'"presence"'
op|')'
op|')'
newline|'\n'
name|'pres'
op|'.'
name|'addElement'
op|'('
string|'"presence"'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb1'
op|'.'
name|'called'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb1'
op|'.'
name|'obj'
op|','
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb2'
op|'.'
name|'called'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'pres'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb1'
op|'.'
name|'called'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb2'
op|'.'
name|'called'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb2'
op|'.'
name|'obj'
op|','
name|'pres'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb3'
op|'.'
name|'called'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'d'
op|','
string|'"//event/testevent"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb3'
op|'.'
name|'called'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb3'
op|'.'
name|'obj'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'removeObserver'
op|'('
string|'"/presence"'
op|','
name|'cb2'
op|'.'
name|'call'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'pres'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb2'
op|'.'
name|'called'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addObserverTwice
dedent|''
name|'def'
name|'test_addObserverTwice'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test adding two observers for the same query.\n\n        When the event is dispath both of the observers need to be called.\n        """'
newline|'\n'
name|'d'
op|'='
name|'EventDispatcher'
op|'('
op|')'
newline|'\n'
name|'cb1'
op|'='
name|'CallbackTracker'
op|'('
op|')'
newline|'\n'
name|'cb2'
op|'='
name|'CallbackTracker'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addObserver'
op|'('
string|'"//event/testevent"'
op|','
name|'cb1'
op|'.'
name|'call'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addObserver'
op|'('
string|'"//event/testevent"'
op|','
name|'cb2'
op|'.'
name|'call'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'d'
op|','
string|'"//event/testevent"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb1'
op|'.'
name|'called'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb1'
op|'.'
name|'obj'
op|','
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb2'
op|'.'
name|'called'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb2'
op|'.'
name|'obj'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addObserverInDispatch
dedent|''
name|'def'
name|'test_addObserverInDispatch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test for registration of an observer during dispatch.\n        """'
newline|'\n'
name|'d'
op|'='
name|'EventDispatcher'
op|'('
op|')'
newline|'\n'
name|'msg'
op|'='
name|'Element'
op|'('
op|'('
string|'"ns"'
op|','
string|'"message"'
op|')'
op|')'
newline|'\n'
name|'cb'
op|'='
name|'CallbackTracker'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|onMessage
name|'def'
name|'onMessage'
op|'('
name|'_'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'addObserver'
op|'('
string|'"/message"'
op|','
name|'cb'
op|'.'
name|'call'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'.'
name|'addOnetimeObserver'
op|'('
string|'"/message"'
op|','
name|'onMessage'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb'
op|'.'
name|'called'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb'
op|'.'
name|'called'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb'
op|'.'
name|'called'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_addOnetimeObserverInDispatch
dedent|''
name|'def'
name|'test_addOnetimeObserverInDispatch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test for registration of a onetime observer during dispatch.\n        """'
newline|'\n'
name|'d'
op|'='
name|'EventDispatcher'
op|'('
op|')'
newline|'\n'
name|'msg'
op|'='
name|'Element'
op|'('
op|'('
string|'"ns"'
op|','
string|'"message"'
op|')'
op|')'
newline|'\n'
name|'cb'
op|'='
name|'CallbackTracker'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|onMessage
name|'def'
name|'onMessage'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'addOnetimeObserver'
op|'('
string|'"/message"'
op|','
name|'cb'
op|'.'
name|'call'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'.'
name|'addOnetimeObserver'
op|'('
string|'"/message"'
op|','
name|'onMessage'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb'
op|'.'
name|'called'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb'
op|'.'
name|'called'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb'
op|'.'
name|'called'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testOnetimeDispatch
dedent|''
name|'def'
name|'testOnetimeDispatch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'EventDispatcher'
op|'('
op|')'
newline|'\n'
name|'msg'
op|'='
name|'Element'
op|'('
op|'('
string|'"ns"'
op|','
string|'"message"'
op|')'
op|')'
newline|'\n'
name|'cb'
op|'='
name|'CallbackTracker'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addOnetimeObserver'
op|'('
string|'"/message"'
op|','
name|'cb'
op|'.'
name|'call'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb'
op|'.'
name|'called'
op|','
number|'1'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb'
op|'.'
name|'called'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testDispatcherResult
dedent|''
name|'def'
name|'testDispatcherResult'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'EventDispatcher'
op|'('
op|')'
newline|'\n'
name|'msg'
op|'='
name|'Element'
op|'('
op|'('
string|'"ns"'
op|','
string|'"message"'
op|')'
op|')'
newline|'\n'
name|'pres'
op|'='
name|'Element'
op|'('
op|'('
string|'"ns"'
op|','
string|'"presence"'
op|')'
op|')'
newline|'\n'
name|'cb'
op|'='
name|'CallbackTracker'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addObserver'
op|'('
string|'"/presence"'
op|','
name|'cb'
op|'.'
name|'call'
op|')'
newline|'\n'
name|'result'
op|'='
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'False'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'pres'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testOrderedXPathDispatch
dedent|''
name|'def'
name|'testOrderedXPathDispatch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'EventDispatcher'
op|'('
op|')'
newline|'\n'
name|'cb'
op|'='
name|'OrderedCallbackTracker'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addObserver'
op|'('
string|'"/message/body"'
op|','
name|'cb'
op|'.'
name|'call2'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addObserver'
op|'('
string|'"/message"'
op|','
name|'cb'
op|'.'
name|'call3'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addObserver'
op|'('
string|'"/message/body"'
op|','
name|'cb'
op|'.'
name|'call1'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'msg'
op|'='
name|'Element'
op|'('
op|'('
string|'"ns"'
op|','
string|'"message"'
op|')'
op|')'
newline|'\n'
name|'msg'
op|'.'
name|'addElement'
op|'('
string|'"body"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cb'
op|'.'
name|'callList'
op|','
op|'['
name|'cb'
op|'.'
name|'call1'
op|','
name|'cb'
op|'.'
name|'call2'
op|','
name|'cb'
op|'.'
name|'call3'
op|']'
op|','
nl|'\n'
string|'"Calls out of order: %s"'
op|'%'
nl|'\n'
name|'repr'
op|'('
op|'['
name|'c'
op|'.'
name|'__name__'
name|'for'
name|'c'
name|'in'
name|'cb'
op|'.'
name|'callList'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Observers are put into CallbackLists that are then put into dictionaries'
nl|'\n'
comment|'# keyed by the event trigger. Upon removal of the last observer for a'
nl|'\n'
comment|'# particular event trigger, the (now empty) CallbackList and corresponding'
nl|'\n'
comment|'# event trigger should be removed from those dictionaries to prevent'
nl|'\n'
comment|'# slowdown and memory leakage.'
nl|'\n'
nl|'\n'
DECL|member|test_cleanUpRemoveEventObserver
dedent|''
name|'def'
name|'test_cleanUpRemoveEventObserver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test observer clean-up after removeObserver for named events.\n        """'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'EventDispatcher'
op|'('
op|')'
newline|'\n'
name|'cb'
op|'='
name|'CallbackTracker'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addObserver'
op|'('
string|"'//event/test'"
op|','
name|'cb'
op|'.'
name|'call'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'None'
op|','
string|"'//event/test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'cb'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'removeObserver'
op|'('
string|"'//event/test'"
op|','
name|'cb'
op|'.'
name|'call'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'d'
op|'.'
name|'_eventObservers'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cleanUpRemoveXPathObserver
dedent|''
name|'def'
name|'test_cleanUpRemoveXPathObserver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test observer clean-up after removeObserver for XPath events.\n        """'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'EventDispatcher'
op|'('
op|')'
newline|'\n'
name|'cb'
op|'='
name|'CallbackTracker'
op|'('
op|')'
newline|'\n'
name|'msg'
op|'='
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|'"message"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addObserver'
op|'('
string|"'/message'"
op|','
name|'cb'
op|'.'
name|'call'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'cb'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'removeObserver'
op|'('
string|"'/message'"
op|','
name|'cb'
op|'.'
name|'call'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'d'
op|'.'
name|'_xpathObservers'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cleanUpOnetimeEventObserver
dedent|''
name|'def'
name|'test_cleanUpOnetimeEventObserver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test observer clean-up after onetime named events.\n        """'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'EventDispatcher'
op|'('
op|')'
newline|'\n'
name|'cb'
op|'='
name|'CallbackTracker'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addOnetimeObserver'
op|'('
string|"'//event/test'"
op|','
name|'cb'
op|'.'
name|'call'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'None'
op|','
string|"'//event/test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'cb'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'d'
op|'.'
name|'_eventObservers'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cleanUpOnetimeXPathObserver
dedent|''
name|'def'
name|'test_cleanUpOnetimeXPathObserver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test observer clean-up after onetime XPath events.\n        """'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'EventDispatcher'
op|'('
op|')'
newline|'\n'
name|'cb'
op|'='
name|'CallbackTracker'
op|'('
op|')'
newline|'\n'
name|'msg'
op|'='
name|'Element'
op|'('
op|'('
name|'None'
op|','
string|'"message"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addOnetimeObserver'
op|'('
string|"'/message'"
op|','
name|'cb'
op|'.'
name|'call'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'cb'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'d'
op|'.'
name|'_xpathObservers'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_observerRaisingException
dedent|''
name|'def'
name|'test_observerRaisingException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that exceptions in observers do not bubble up to dispatch.\n\n        The exceptions raised in observers should be logged and other\n        observers should be called as if nothing happened.\n        """'
newline|'\n'
nl|'\n'
DECL|class|OrderedCallbackList
name|'class'
name|'OrderedCallbackList'
op|'('
name|'utility'
op|'.'
name|'CallbackList'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'callbacks'
op|'='
name|'OrderedDict'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestError
dedent|''
dedent|''
name|'class'
name|'TestError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|raiseError
dedent|''
name|'def'
name|'raiseError'
op|'('
name|'_'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TestError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'EventDispatcher'
op|'('
op|')'
newline|'\n'
name|'cb'
op|'='
name|'CallbackTracker'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'originalCallbackList'
op|'='
name|'utility'
op|'.'
name|'CallbackList'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utility'
op|'.'
name|'CallbackList'
op|'='
name|'OrderedCallbackList'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addObserver'
op|'('
string|"'//event/test'"
op|','
name|'raiseError'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addObserver'
op|'('
string|"'//event/test'"
op|','
name|'cb'
op|'.'
name|'call'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'.'
name|'dispatch'
op|'('
name|'None'
op|','
string|"'//event/test'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TestError'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"TestError raised. Should have been logged instead."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'TestError'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'cb'
op|'.'
name|'called'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'utility'
op|'.'
name|'CallbackList'
op|'='
name|'originalCallbackList'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|XmlPipeTest
dedent|''
dedent|''
dedent|''
name|'class'
name|'XmlPipeTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{twisted.words.xish.utility.XmlPipe}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'pipe'
op|'='
name|'utility'
op|'.'
name|'XmlPipe'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendFromSource
dedent|''
name|'def'
name|'test_sendFromSource'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send an element from the source and observe it from the sink.\n        """'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'.'
name|'append'
op|'('
name|'obj'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'called'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'sink'
op|'.'
name|'addObserver'
op|'('
string|'\'/test[@xmlns="testns"]\''
op|','
name|'cb'
op|')'
newline|'\n'
name|'element'
op|'='
name|'Element'
op|'('
op|'('
string|"'testns'"
op|','
string|"'test'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'source'
op|'.'
name|'send'
op|'('
name|'element'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
name|'element'
op|']'
op|','
name|'called'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendFromSink
dedent|''
name|'def'
name|'test_sendFromSink'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send an element from the sink and observe it from the source.\n        """'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'.'
name|'append'
op|'('
name|'obj'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'called'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'source'
op|'.'
name|'addObserver'
op|'('
string|'\'/test[@xmlns="testns"]\''
op|','
name|'cb'
op|')'
newline|'\n'
name|'element'
op|'='
name|'Element'
op|'('
op|'('
string|"'testns'"
op|','
string|"'test'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pipe'
op|'.'
name|'sink'
op|'.'
name|'send'
op|'('
name|'element'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
name|'element'
op|']'
op|','
name|'called'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

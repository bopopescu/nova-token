begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'protocols'
op|'.'
name|'jabber'
name|'import'
name|'sasl'
op|','
name|'sasl_mechanisms'
op|','
name|'xmlstream'
op|','
name|'jid'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'xish'
name|'import'
name|'domish'
newline|'\n'
nl|'\n'
DECL|variable|NS_XMPP_SASL
name|'NS_XMPP_SASL'
op|'='
string|"'urn:ietf:params:xml:ns:xmpp-sasl'"
newline|'\n'
nl|'\n'
DECL|class|DummySASLMechanism
name|'class'
name|'DummySASLMechanism'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Dummy SASL mechanism.\n\n    This just returns the initialResponse passed on creation, stores any\n    challenges and replies with an empty response.\n\n    @ivar challenge: Last received challenge.\n    @type challenge: C{unicode}.\n    @ivar initialResponse: Initial response to be returned when requested\n                           via C{getInitialResponse} or C{None}.\n    @type initialResponse: C{unicode}\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'sasl_mechanisms'
op|'.'
name|'ISASLMechanism'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|challenge
name|'challenge'
op|'='
name|'None'
newline|'\n'
DECL|variable|name
name|'name'
op|'='
string|'"DUMMY"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'initialResponse'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'initialResponse'
op|'='
name|'initialResponse'
newline|'\n'
nl|'\n'
DECL|member|getInitialResponse
dedent|''
name|'def'
name|'getInitialResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'initialResponse'
newline|'\n'
nl|'\n'
DECL|member|getResponse
dedent|''
name|'def'
name|'getResponse'
op|'('
name|'self'
op|','
name|'challenge'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'challenge'
op|'='
name|'challenge'
newline|'\n'
name|'return'
string|'""'
newline|'\n'
nl|'\n'
DECL|class|DummySASLInitiatingInitializer
dedent|''
dedent|''
name|'class'
name|'DummySASLInitiatingInitializer'
op|'('
name|'sasl'
op|'.'
name|'SASLInitiatingInitializer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Dummy SASL Initializer for initiating entities.\n\n    This hardwires the SASL mechanism to L{DummySASLMechanism}, that is\n    instantiated with the value of C{initialResponse}.\n\n    @ivar initialResponse: The initial response to be returned by the\n                           dummy SASL mechanism or C{None}.\n    @type initialResponse: C{unicode}.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|initialResponse
name|'initialResponse'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|setMechanism
name|'def'
name|'setMechanism'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mechanism'
op|'='
name|'DummySASLMechanism'
op|'('
name|'self'
op|'.'
name|'initialResponse'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SASLInitiatingInitializerTest
dedent|''
dedent|''
name|'class'
name|'SASLInitiatingInitializerTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{sasl.SASLInitiatingInitializer}\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'output'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'='
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'self'
op|'.'
name|'authenticator'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'send'
op|'='
name|'self'
op|'.'
name|'output'
op|'.'
name|'append'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:client\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"from=\'example.com\' id=\'12345\' version=\'1.0\'>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'='
name|'DummySASLInitiatingInitializer'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_onFailure
dedent|''
name|'def'
name|'test_onFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the SASL error condition is correctly extracted.\n        """'
newline|'\n'
name|'failure'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
string|"'urn:ietf:params:xml:ns:xmpp-sasl'"
op|','
nl|'\n'
string|"'failure'"
op|')'
op|')'
newline|'\n'
name|'failure'
op|'.'
name|'addElement'
op|'('
string|"'not-authorized'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'_deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'onFailure'
op|'('
name|'failure'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'self'
op|'.'
name|'init'
op|'.'
name|'_deferred'
op|','
name|'sasl'
op|'.'
name|'SASLAuthError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'_deferred'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'e'
op|':'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'not-authorized'"
op|','
nl|'\n'
name|'e'
op|'.'
name|'condition'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'init'
op|'.'
name|'_deferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendAuthInitialResponse
dedent|''
name|'def'
name|'test_sendAuthInitialResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test starting authentication with an initial response.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'initialResponse'
op|'='
string|'"dummy"'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'auth'
op|'='
name|'self'
op|'.'
name|'output'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'NS_XMPP_SASL'
op|','
name|'auth'
op|'.'
name|'uri'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'auth'"
op|','
name|'auth'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'DUMMY'"
op|','
name|'auth'
op|'['
string|"'mechanism'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'ZHVtbXk='"
op|','
name|'str'
op|'('
name|'auth'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendAuthNoInitialResponse
dedent|''
name|'def'
name|'test_sendAuthNoInitialResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test starting authentication without an initial response.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'initialResponse'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'auth'
op|'='
name|'self'
op|'.'
name|'output'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|','
name|'str'
op|'('
name|'auth'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendAuthEmptyInitialResponse
dedent|''
name|'def'
name|'test_sendAuthEmptyInitialResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test starting authentication where the initial response is empty.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'initialResponse'
op|'='
string|'""'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'auth'
op|'='
name|'self'
op|'.'
name|'output'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'='"
op|','
name|'str'
op|'('
name|'auth'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_onChallenge
dedent|''
name|'def'
name|'test_onChallenge'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test receiving a challenge message.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'challenge'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'NS_XMPP_SASL'
op|','
string|"'challenge'"
op|')'
op|')'
newline|'\n'
name|'challenge'
op|'.'
name|'addContent'
op|'('
string|"'bXkgY2hhbGxlbmdl'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'onChallenge'
op|'('
name|'challenge'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'my challenge'"
op|','
name|'self'
op|'.'
name|'init'
op|'.'
name|'mechanism'
op|'.'
name|'challenge'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'onSuccess'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_onChallengeEmpty
dedent|''
name|'def'
name|'test_onChallengeEmpty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test receiving an empty challenge message.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'challenge'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'NS_XMPP_SASL'
op|','
string|"'challenge'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'onChallenge'
op|'('
name|'challenge'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|','
name|'self'
op|'.'
name|'init'
op|'.'
name|'mechanism'
op|'.'
name|'challenge'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'onSuccess'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_onChallengeIllegalPadding
dedent|''
name|'def'
name|'test_onChallengeIllegalPadding'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test receiving a challenge message with illegal padding.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'challenge'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'NS_XMPP_SASL'
op|','
string|"'challenge'"
op|')'
op|')'
newline|'\n'
name|'challenge'
op|'.'
name|'addContent'
op|'('
string|"'bXkg=Y2hhbGxlbmdl'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'onChallenge'
op|'('
name|'challenge'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'sasl'
op|'.'
name|'SASLIncorrectEncodingError'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_onChallengeIllegalCharacters
dedent|''
name|'def'
name|'test_onChallengeIllegalCharacters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test receiving a challenge message with illegal characters.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'challenge'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'NS_XMPP_SASL'
op|','
string|"'challenge'"
op|')'
op|')'
newline|'\n'
name|'challenge'
op|'.'
name|'addContent'
op|'('
string|"'bXkg*Y2hhbGxlbmdl'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'onChallenge'
op|'('
name|'challenge'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'sasl'
op|'.'
name|'SASLIncorrectEncodingError'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_onChallengeMalformed
dedent|''
name|'def'
name|'test_onChallengeMalformed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test receiving a malformed challenge message.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'init'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'challenge'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'NS_XMPP_SASL'
op|','
string|"'challenge'"
op|')'
op|')'
newline|'\n'
name|'challenge'
op|'.'
name|'addContent'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'onChallenge'
op|'('
name|'challenge'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'sasl'
op|'.'
name|'SASLIncorrectEncodingError'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SASLInitiatingInitializerSetMechanismTest
dedent|''
dedent|''
name|'class'
name|'SASLInitiatingInitializerSetMechanismTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test for L{sasl.SASLInitiatingInitializer.setMechanism}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'output'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'='
name|'xmlstream'
op|'.'
name|'Authenticator'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'='
name|'xmlstream'
op|'.'
name|'XmlStream'
op|'('
name|'self'
op|'.'
name|'authenticator'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'send'
op|'='
name|'self'
op|'.'
name|'output'
op|'.'
name|'append'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dataReceived'
op|'('
string|'"<stream:stream xmlns=\'jabber:client\' "'
nl|'\n'
string|'"xmlns:stream=\'http://etherx.jabber.org/streams\' "'
nl|'\n'
string|'"from=\'example.com\' id=\'12345\' version=\'1.0\'>"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'init'
op|'='
name|'sasl'
op|'.'
name|'SASLInitiatingInitializer'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_setMechanism
dedent|''
name|'def'
name|'_setMechanism'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set up the XML Stream to have a SASL feature with the given mechanism.\n        """'
newline|'\n'
name|'feature'
op|'='
name|'domish'
op|'.'
name|'Element'
op|'('
op|'('
name|'NS_XMPP_SASL'
op|','
string|"'mechanisms'"
op|')'
op|')'
newline|'\n'
name|'feature'
op|'.'
name|'addElement'
op|'('
string|"'mechanism'"
op|','
name|'content'
op|'='
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'features'
op|'['
op|'('
name|'feature'
op|'.'
name|'uri'
op|','
name|'feature'
op|'.'
name|'name'
op|')'
op|']'
op|'='
name|'feature'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'init'
op|'.'
name|'setMechanism'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'init'
op|'.'
name|'mechanism'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_anonymous
dedent|''
name|'def'
name|'test_anonymous'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test setting ANONYMOUS as the authentication mechanism.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'jid'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|"'example.com'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'password'
op|'='
name|'None'
newline|'\n'
name|'name'
op|'='
string|'"ANONYMOUS"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'name'
op|','
name|'self'
op|'.'
name|'_setMechanism'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_plain
dedent|''
name|'def'
name|'test_plain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test setting PLAIN as the authentication mechanism.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'jid'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|"'test@example.com'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'password'
op|'='
string|"'secret'"
newline|'\n'
name|'name'
op|'='
string|'"PLAIN"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'name'
op|','
name|'self'
op|'.'
name|'_setMechanism'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_digest
dedent|''
name|'def'
name|'test_digest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test setting DIGEST-MD5 as the authentication mechanism.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'jid'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|"'test@example.com'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'password'
op|'='
string|"'secret'"
newline|'\n'
name|'name'
op|'='
string|'"DIGEST-MD5"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'name'
op|','
name|'self'
op|'.'
name|'_setMechanism'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_notAcceptable
dedent|''
name|'def'
name|'test_notAcceptable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test using an unacceptable SASL authentication mechanism.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'jid'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|"'test@example.com'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'password'
op|'='
string|"'secret'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'sasl'
op|'.'
name|'SASLNoAcceptableMechanism'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_setMechanism'
op|','
string|"'SOMETHING_UNACCEPTABLE'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_notAcceptableWithoutUser
dedent|''
name|'def'
name|'test_notAcceptableWithoutUser'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test using an unacceptable SASL authentication mechanism with no JID.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'jid'
op|'='
name|'jid'
op|'.'
name|'JID'
op|'('
string|"'example.com'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'authenticator'
op|'.'
name|'password'
op|'='
string|"'secret'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'sasl'
op|'.'
name|'SASLNoAcceptableMechanism'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_setMechanism'
op|','
string|"'SOMETHING_UNACCEPTABLE'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

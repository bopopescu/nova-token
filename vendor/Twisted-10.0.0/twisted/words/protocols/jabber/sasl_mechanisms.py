begin_unit
comment|'# -*- test-case-name: twisted.words.test.test_jabbersaslmechanisms -*-'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nProtocol agnostic implementations of SASL authentication mechanisms.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'binascii'
op|','
name|'random'
op|','
name|'time'
op|','
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'Interface'
op|','
name|'Attribute'
op|','
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
nl|'\n'
DECL|class|ISASLMechanism
name|'class'
name|'ISASLMechanism'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'name'
op|'='
name|'Attribute'
op|'('
string|'"""Common name for the SASL Mechanism."""'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getInitialResponse
name|'def'
name|'getInitialResponse'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the initial client response, if defined for this mechanism.\n\n        @return: initial client response string.\n        @rtype: L{str}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getResponse
dedent|''
name|'def'
name|'getResponse'
op|'('
name|'challenge'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the response to a server challenge.\n\n        @param challenge: server challenge.\n        @type challenge: L{str}.\n        @return: client response.\n        @rtype: L{str}.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Anonymous
dedent|''
dedent|''
name|'class'
name|'Anonymous'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Implements the ANONYMOUS SASL authentication mechanism.\n\n    This mechanism is defined in RFC 2245.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'ISASLMechanism'
op|')'
newline|'\n'
DECL|variable|name
name|'name'
op|'='
string|"'ANONYMOUS'"
newline|'\n'
nl|'\n'
DECL|member|getInitialResponse
name|'def'
name|'getInitialResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Plain
dedent|''
dedent|''
name|'class'
name|'Plain'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Implements the PLAIN SASL authentication mechanism.\n\n    The PLAIN SASL authentication mechanism is defined in RFC 2595.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'ISASLMechanism'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|name
name|'name'
op|'='
string|"'PLAIN'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'authzid'
op|','
name|'authcid'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'authzid'
op|'='
name|'authzid'
name|'or'
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'authcid'
op|'='
name|'authcid'
name|'or'
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'password'
op|'='
name|'password'
name|'or'
string|"''"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getInitialResponse
dedent|''
name|'def'
name|'getInitialResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"%s\\x00%s\\x00%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'authzid'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'authcid'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'password'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DigestMD5
dedent|''
dedent|''
name|'class'
name|'DigestMD5'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Implements the DIGEST-MD5 SASL authentication mechanism.\n\n    The DIGEST-MD5 SASL authentication mechanism is defined in RFC 2831.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'ISASLMechanism'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|name
name|'name'
op|'='
string|"'DIGEST-MD5'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'serv_type'
op|','
name|'host'
op|','
name|'serv_name'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'username'
op|'='
name|'username'
newline|'\n'
name|'self'
op|'.'
name|'password'
op|'='
name|'password'
newline|'\n'
name|'self'
op|'.'
name|'defaultRealm'
op|'='
name|'host'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'digest_uri'
op|'='
string|"'%s/%s'"
op|'%'
op|'('
name|'serv_type'
op|','
name|'host'
op|')'
newline|'\n'
name|'if'
name|'serv_name'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'digest_uri'
op|'+='
string|"'/%s'"
op|'%'
name|'serv_name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getInitialResponse
dedent|''
dedent|''
name|'def'
name|'getInitialResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getResponse
dedent|''
name|'def'
name|'getResponse'
op|'('
name|'self'
op|','
name|'challenge'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'directives'
op|'='
name|'self'
op|'.'
name|'_parse'
op|'('
name|'challenge'
op|')'
newline|'\n'
nl|'\n'
comment|'# Compat for implementations that do not send this along with'
nl|'\n'
comment|'# a succesful authentication.'
nl|'\n'
name|'if'
string|"'rspauth'"
name|'in'
name|'directives'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'realm'
op|'='
name|'directives'
op|'['
string|"'realm'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'realm'
op|'='
name|'self'
op|'.'
name|'defaultRealm'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_gen_response'
op|'('
name|'directives'
op|'['
string|"'charset'"
op|']'
op|','
nl|'\n'
name|'realm'
op|','
nl|'\n'
name|'directives'
op|'['
string|"'nonce'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_parse
dedent|''
name|'def'
name|'_parse'
op|'('
name|'self'
op|','
name|'challenge'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parses the server challenge.\n\n        Splits the challenge into a dictionary of directives with values.\n\n        @return: challenge directives and their values.\n        @rtype: L{dict} of L{str} to L{str}.\n        """'
newline|'\n'
name|'s'
op|'='
name|'challenge'
newline|'\n'
name|'paramDict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'cur'
op|'='
number|'0'
newline|'\n'
name|'remainingParams'
op|'='
name|'True'
newline|'\n'
name|'while'
name|'remainingParams'
op|':'
newline|'\n'
comment|"# Parse a param. We can't just split on commas, because there can"
nl|'\n'
comment|'# be some commas inside (quoted) param values, e.g.:'
nl|'\n'
comment|'# qop="auth,auth-int"'
nl|'\n'
nl|'\n'
indent|'            '
name|'middle'
op|'='
name|'s'
op|'.'
name|'index'
op|'('
string|'"="'
op|','
name|'cur'
op|')'
newline|'\n'
name|'name'
op|'='
name|'s'
op|'['
name|'cur'
op|':'
name|'middle'
op|']'
op|'.'
name|'lstrip'
op|'('
op|')'
newline|'\n'
name|'middle'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'s'
op|'['
name|'middle'
op|']'
op|'=='
string|'\'"\''
op|':'
newline|'\n'
indent|'                '
name|'middle'
op|'+='
number|'1'
newline|'\n'
name|'end'
op|'='
name|'s'
op|'.'
name|'index'
op|'('
string|'\'"\''
op|','
name|'middle'
op|')'
newline|'\n'
name|'value'
op|'='
name|'s'
op|'['
name|'middle'
op|':'
name|'end'
op|']'
newline|'\n'
name|'cur'
op|'='
name|'s'
op|'.'
name|'find'
op|'('
string|"','"
op|','
name|'end'
op|')'
op|'+'
number|'1'
newline|'\n'
name|'if'
name|'cur'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'remainingParams'
op|'='
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'end'
op|'='
name|'s'
op|'.'
name|'find'
op|'('
string|"','"
op|','
name|'middle'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'value'
op|'='
name|'s'
op|'['
name|'middle'
op|':'
op|']'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'remainingParams'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'value'
op|'='
name|'s'
op|'['
name|'middle'
op|':'
name|'end'
op|']'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'cur'
op|'='
name|'end'
op|'+'
number|'1'
newline|'\n'
dedent|''
name|'paramDict'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'param'
name|'in'
op|'('
string|"'qop'"
op|','
string|"'cipher'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'param'
name|'in'
name|'paramDict'
op|':'
newline|'\n'
indent|'                '
name|'paramDict'
op|'['
name|'param'
op|']'
op|'='
name|'paramDict'
op|'['
name|'param'
op|']'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'paramDict'
newline|'\n'
nl|'\n'
DECL|member|_unparse
dedent|''
name|'def'
name|'_unparse'
op|'('
name|'self'
op|','
name|'directives'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create message string from directives.\n\n        @param directives: dictionary of directives (names to their values).\n                           For certain directives, extra quotes are added, as\n                           needed.\n        @type directives: L{dict} of L{str} to L{str}\n        @return: message string.\n        @rtype: L{str}.\n        """'
newline|'\n'
nl|'\n'
name|'directive_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'name'
op|','
name|'value'
name|'in'
name|'directives'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'name'
name|'in'
op|'('
string|"'username'"
op|','
string|"'realm'"
op|','
string|"'cnonce'"
op|','
nl|'\n'
string|"'nonce'"
op|','
string|"'digest-uri'"
op|','
string|"'authzid'"
op|','
string|"'cipher'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'directive'
op|'='
string|'\'%s="%s"\''
op|'%'
op|'('
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'directive'
op|'='
string|"'%s=%s'"
op|'%'
op|'('
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'directive_list'
op|'.'
name|'append'
op|'('
name|'directive'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
string|"','"
op|'.'
name|'join'
op|'('
name|'directive_list'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_gen_response
dedent|''
name|'def'
name|'_gen_response'
op|'('
name|'self'
op|','
name|'charset'
op|','
name|'realm'
op|','
name|'nonce'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate response-value.\n\n        Creates a response to a challenge according to section 2.1.2.1 of\n        RFC 2831 using the L{charset}, L{realm} and L{nonce} directives\n        from the challenge.\n        """'
newline|'\n'
nl|'\n'
DECL|function|H
name|'def'
name|'H'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'md5'
op|'('
name|'s'
op|')'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|HEX
dedent|''
name|'def'
name|'HEX'
op|'('
name|'n'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'binascii'
op|'.'
name|'b2a_hex'
op|'('
name|'n'
op|')'
newline|'\n'
nl|'\n'
DECL|function|KD
dedent|''
name|'def'
name|'KD'
op|'('
name|'k'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'H'
op|'('
string|"'%s:%s'"
op|'%'
op|'('
name|'k'
op|','
name|'s'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'username'
op|'='
name|'self'
op|'.'
name|'username'
op|'.'
name|'encode'
op|'('
name|'charset'
op|')'
newline|'\n'
name|'password'
op|'='
name|'self'
op|'.'
name|'password'
op|'.'
name|'encode'
op|'('
name|'charset'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeError'
op|':'
newline|'\n'
comment|'# TODO - add error checking'
nl|'\n'
indent|'            '
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
name|'nc'
op|'='
string|"'%08x'"
op|'%'
number|'1'
comment|'# TODO: support subsequent auth.'
newline|'\n'
name|'cnonce'
op|'='
name|'self'
op|'.'
name|'_gen_nonce'
op|'('
op|')'
newline|'\n'
name|'qop'
op|'='
string|"'auth'"
newline|'\n'
nl|'\n'
comment|'# TODO - add support for authzid'
nl|'\n'
name|'a1'
op|'='
string|'"%s:%s:%s"'
op|'%'
op|'('
name|'H'
op|'('
string|'"%s:%s:%s"'
op|'%'
op|'('
name|'username'
op|','
name|'realm'
op|','
name|'password'
op|')'
op|')'
op|','
nl|'\n'
name|'nonce'
op|','
nl|'\n'
name|'cnonce'
op|')'
newline|'\n'
name|'a2'
op|'='
string|'"AUTHENTICATE:%s"'
op|'%'
name|'self'
op|'.'
name|'digest_uri'
newline|'\n'
nl|'\n'
name|'response'
op|'='
name|'HEX'
op|'('
name|'KD'
op|'('
name|'HEX'
op|'('
name|'H'
op|'('
name|'a1'
op|')'
op|')'
op|','
nl|'\n'
string|'"%s:%s:%s:%s:%s"'
op|'%'
op|'('
name|'nonce'
op|','
name|'nc'
op|','
nl|'\n'
name|'cnonce'
op|','
string|'"auth"'
op|','
name|'HEX'
op|'('
name|'H'
op|'('
name|'a2'
op|')'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'directives'
op|'='
op|'{'
string|"'username'"
op|':'
name|'username'
op|','
nl|'\n'
string|"'realm'"
op|':'
name|'realm'
op|','
nl|'\n'
string|"'nonce'"
op|':'
name|'nonce'
op|','
nl|'\n'
string|"'cnonce'"
op|':'
name|'cnonce'
op|','
nl|'\n'
string|"'nc'"
op|':'
name|'nc'
op|','
nl|'\n'
string|"'qop'"
op|':'
name|'qop'
op|','
nl|'\n'
string|"'digest-uri'"
op|':'
name|'self'
op|'.'
name|'digest_uri'
op|','
nl|'\n'
string|"'response'"
op|':'
name|'response'
op|','
nl|'\n'
string|"'charset'"
op|':'
name|'charset'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_unparse'
op|'('
name|'directives'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_gen_nonce
dedent|''
name|'def'
name|'_gen_nonce'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'md5'
op|'('
string|'"%s:%s:%s"'
op|'%'
op|'('
name|'str'
op|'('
name|'random'
op|'.'
name|'random'
op|'('
op|')'
op|')'
op|','
name|'str'
op|'('
name|'time'
op|'.'
name|'gmtime'
op|'('
op|')'
op|')'
op|','
name|'str'
op|'('
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
op|')'
op|')'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.words.test.test_jabberjid -*-'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nJabber Identifier support.\n\nThis module provides an object to represent Jabber Identifiers (JIDs) and\nparse string representations into them with proper checking for illegal\ncharacters, case folding and canonicalisation through L{stringprep<twisted.words.protocols.jabber.xmpp_stringprep>}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'protocols'
op|'.'
name|'jabber'
op|'.'
name|'xmpp_stringprep'
name|'import'
name|'nodeprep'
op|','
name|'resourceprep'
op|','
name|'nameprep'
newline|'\n'
nl|'\n'
DECL|class|InvalidFormat
name|'class'
name|'InvalidFormat'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The given string could not be parsed into a valid Jabber Identifier (JID).\n    """'
newline|'\n'
nl|'\n'
DECL|function|parse
dedent|''
name|'def'
name|'parse'
op|'('
name|'jidstring'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Parse given JID string into its respective parts and apply stringprep.\n\n    @param jidstring: string representation of a JID.\n    @type jidstring: C{unicode}\n    @return: tuple of (user, host, resource), each of type C{unicode} as\n             the parsed and stringprep\'d parts of the given JID. If the\n             given string did not have a user or resource part, the respective\n             field in the tuple will hold C{None}.\n    @rtype: C{tuple}\n    """'
newline|'\n'
name|'user'
op|'='
name|'None'
newline|'\n'
name|'host'
op|'='
name|'None'
newline|'\n'
name|'resource'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Search for delimiters'
nl|'\n'
name|'user_sep'
op|'='
name|'jidstring'
op|'.'
name|'find'
op|'('
string|'"@"'
op|')'
newline|'\n'
name|'res_sep'
op|'='
name|'jidstring'
op|'.'
name|'find'
op|'('
string|'"/"'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'user_sep'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'res_sep'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
comment|'# host'
nl|'\n'
indent|'            '
name|'host'
op|'='
name|'jidstring'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# host/resource'
nl|'\n'
indent|'            '
name|'host'
op|'='
name|'jidstring'
op|'['
number|'0'
op|':'
name|'res_sep'
op|']'
newline|'\n'
name|'resource'
op|'='
name|'jidstring'
op|'['
name|'res_sep'
op|'+'
number|'1'
op|':'
op|']'
name|'or'
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'res_sep'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
comment|'# user@host'
nl|'\n'
indent|'            '
name|'user'
op|'='
name|'jidstring'
op|'['
number|'0'
op|':'
name|'user_sep'
op|']'
name|'or'
name|'None'
newline|'\n'
name|'host'
op|'='
name|'jidstring'
op|'['
name|'user_sep'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'user_sep'
op|'<'
name|'res_sep'
op|':'
newline|'\n'
comment|'# user@host/resource'
nl|'\n'
indent|'                '
name|'user'
op|'='
name|'jidstring'
op|'['
number|'0'
op|':'
name|'user_sep'
op|']'
name|'or'
name|'None'
newline|'\n'
name|'host'
op|'='
name|'jidstring'
op|'['
name|'user_sep'
op|'+'
number|'1'
op|':'
name|'user_sep'
op|'+'
op|'('
name|'res_sep'
op|'-'
name|'user_sep'
op|')'
op|']'
newline|'\n'
name|'resource'
op|'='
name|'jidstring'
op|'['
name|'res_sep'
op|'+'
number|'1'
op|':'
op|']'
name|'or'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# host/resource (with an @ in resource)'
nl|'\n'
indent|'                '
name|'host'
op|'='
name|'jidstring'
op|'['
number|'0'
op|':'
name|'res_sep'
op|']'
newline|'\n'
name|'resource'
op|'='
name|'jidstring'
op|'['
name|'res_sep'
op|'+'
number|'1'
op|':'
op|']'
name|'or'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'prep'
op|'('
name|'user'
op|','
name|'host'
op|','
name|'resource'
op|')'
newline|'\n'
nl|'\n'
DECL|function|prep
dedent|''
name|'def'
name|'prep'
op|'('
name|'user'
op|','
name|'host'
op|','
name|'resource'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform stringprep on all JID fragments.\n\n    @param user: The user part of the JID.\n    @type user: C{unicode}\n    @param host: The host part of the JID.\n    @type host: C{unicode}\n    @param resource: The resource part of the JID.\n    @type resource: C{unicode}\n    @return: The given parts with stringprep applied.\n    @rtype: C{tuple}\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'user'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'user'
op|'='
name|'nodeprep'
op|'.'
name|'prepare'
op|'('
name|'unicode'
op|'('
name|'user'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InvalidFormat'
op|','
string|'"Invalid character in username"'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'user'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'host'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'InvalidFormat'
op|','
string|'"Server address required."'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'nameprep'
op|'.'
name|'prepare'
op|'('
name|'unicode'
op|'('
name|'host'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InvalidFormat'
op|','
string|'"Invalid character in hostname"'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'resource'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'resource'
op|'='
name|'resourceprep'
op|'.'
name|'prepare'
op|'('
name|'unicode'
op|'('
name|'resource'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InvalidFormat'
op|','
string|'"Invalid character in resource"'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'resource'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'user'
op|','
name|'host'
op|','
name|'resource'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|__internJIDs
dedent|''
name|'__internJIDs'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|internJID
name|'def'
name|'internJID'
op|'('
name|'jidstring'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return interned JID.\n\n    @rtype: L{JID}\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'jidstring'
name|'in'
name|'__internJIDs'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'__internJIDs'
op|'['
name|'jidstring'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'j'
op|'='
name|'JID'
op|'('
name|'jidstring'
op|')'
newline|'\n'
name|'__internJIDs'
op|'['
name|'jidstring'
op|']'
op|'='
name|'j'
newline|'\n'
name|'return'
name|'j'
newline|'\n'
nl|'\n'
DECL|class|JID
dedent|''
dedent|''
name|'class'
name|'JID'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Represents a stringprep\'d Jabber ID.\n\n    JID objects are hashable so they can be used in sets and as keys in\n    dictionaries.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'str'
op|'='
name|'None'
op|','
name|'tuple'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
op|'('
name|'str'
name|'or'
name|'tuple'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"You must provide a value for either \'str\' or "'
nl|'\n'
string|'"\'tuple\' arguments."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'str'
op|':'
newline|'\n'
indent|'            '
name|'user'
op|','
name|'host'
op|','
name|'res'
op|'='
name|'parse'
op|'('
name|'str'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'user'
op|','
name|'host'
op|','
name|'res'
op|'='
name|'prep'
op|'('
op|'*'
name|'tuple'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'user'
op|'='
name|'user'
newline|'\n'
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
name|'self'
op|'.'
name|'resource'
op|'='
name|'res'
newline|'\n'
nl|'\n'
DECL|member|userhost
dedent|''
name|'def'
name|'userhost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Extract the bare JID as a unicode string.\n\n        A bare JID does not have a resource part, so this returns either\n        C{user@host} or just C{host}.\n\n        @rtype: C{unicode}\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'user'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'u"%s@%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
DECL|member|userhostJID
dedent|''
dedent|''
name|'def'
name|'userhostJID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Extract the bare JID.\n\n        A bare JID does not have a resource part, so this returns a\n        L{JID} object representing either C{user@host} or just C{host}.\n\n        If the object this method is called upon doesn\'t have a resource\n        set, it will return itself. Otherwise, the bare JID object will\n        be created, interned using L{internJID}.\n\n        @rtype: L{JID}\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'resource'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'internJID'
op|'('
name|'self'
op|'.'
name|'userhost'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|full
dedent|''
dedent|''
name|'def'
name|'full'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the string representation of this JID.\n\n        @rtype: C{unicode}\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'user'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'resource'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|'u"%s@%s/%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'resource'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|'u"%s@%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'resource'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|'u"%s/%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'resource'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
dedent|''
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Equality comparison.\n\n        L{JID}s compare equal if their user, host and resource parts all\n        compare equal.  When comparing against instances of other types, it\n        uses the default comparison.\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'other'
op|','
name|'JID'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'self'
op|'.'
name|'user'
op|'=='
name|'other'
op|'.'
name|'user'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'host'
op|'=='
name|'other'
op|'.'
name|'host'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'resource'
op|'=='
name|'other'
op|'.'
name|'resource'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'NotImplemented'
newline|'\n'
nl|'\n'
DECL|member|__ne__
dedent|''
dedent|''
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Inequality comparison.\n\n        This negates L{__eq__} for comparison with JIDs and uses the default\n        comparison for other types.\n        """'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'__eq__'
op|'('
name|'other'
op|')'
newline|'\n'
name|'if'
name|'result'
name|'is'
name|'NotImplemented'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'not'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calculate hash.\n\n        L{JID}s with identical constituent user, host and resource parts have\n        equal hash values.  In combination with the comparison defined on JIDs,\n        this allows for using L{JID}s in sets and as dictionary keys.\n        """'
newline|'\n'
name|'return'
name|'hash'
op|'('
op|'('
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'resource'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__unicode__
dedent|''
name|'def'
name|'__unicode__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get unicode representation.\n\n        Return the string representation of this JID as a unicode string.\n        @see: L{full}\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'full'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get object representation.\n\n        Returns a string that would create a new JID object that compares equal\n        to this one.\n        """'
newline|'\n'
name|'return'
string|"'JID(%r)'"
op|'%'
name|'self'
op|'.'
name|'full'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.words.test.test_jabberclient -*-'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'xish'
name|'import'
name|'domish'
op|','
name|'xpath'
op|','
name|'utility'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'protocols'
op|'.'
name|'jabber'
name|'import'
name|'xmlstream'
op|','
name|'sasl'
op|','
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'protocols'
op|'.'
name|'jabber'
op|'.'
name|'jid'
name|'import'
name|'JID'
newline|'\n'
nl|'\n'
DECL|variable|NS_XMPP_STREAMS
name|'NS_XMPP_STREAMS'
op|'='
string|"'urn:ietf:params:xml:ns:xmpp-streams'"
newline|'\n'
DECL|variable|NS_XMPP_BIND
name|'NS_XMPP_BIND'
op|'='
string|"'urn:ietf:params:xml:ns:xmpp-bind'"
newline|'\n'
DECL|variable|NS_XMPP_SESSION
name|'NS_XMPP_SESSION'
op|'='
string|"'urn:ietf:params:xml:ns:xmpp-session'"
newline|'\n'
DECL|variable|NS_IQ_AUTH_FEATURE
name|'NS_IQ_AUTH_FEATURE'
op|'='
string|"'http://jabber.org/features/iq-auth'"
newline|'\n'
nl|'\n'
DECL|variable|DigestAuthQry
name|'DigestAuthQry'
op|'='
name|'xpath'
op|'.'
name|'internQuery'
op|'('
string|'"/iq/query/digest"'
op|')'
newline|'\n'
DECL|variable|PlaintextAuthQry
name|'PlaintextAuthQry'
op|'='
name|'xpath'
op|'.'
name|'internQuery'
op|'('
string|'"/iq/query/password"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|basicClientFactory
name|'def'
name|'basicClientFactory'
op|'('
name|'jid'
op|','
name|'secret'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'a'
op|'='
name|'BasicAuthenticator'
op|'('
name|'jid'
op|','
name|'secret'
op|')'
newline|'\n'
name|'return'
name|'xmlstream'
op|'.'
name|'XmlStreamFactory'
op|'('
name|'a'
op|')'
newline|'\n'
nl|'\n'
DECL|class|IQ
dedent|''
name|'class'
name|'IQ'
op|'('
name|'domish'
op|'.'
name|'Element'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wrapper for a Info/Query packet.\n\n    This provides the necessary functionality to send IQs and get notified when\n    a result comes back. It\'s a subclass from L{domish.Element}, so you can use\n    the standard DOM manipulation calls to add data to the outbound request.\n\n    @type callbacks: L{utility.CallbackList}\n    @cvar callbacks: Callback list to be notified when response comes back\n\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'xmlstream'
op|','
name|'type'
op|'='
string|'"set"'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @type xmlstream: L{xmlstream.XmlStream}\n        @param xmlstream: XmlStream to use for transmission of this IQ\n\n        @type type: L{str}\n        @param type: IQ type identifier (\'get\' or \'set\')\n        """'
newline|'\n'
nl|'\n'
name|'domish'
op|'.'
name|'Element'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'('
string|'"jabber:client"'
op|','
string|'"iq"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addUniqueId'
op|'('
op|')'
newline|'\n'
name|'self'
op|'['
string|'"type"'
op|']'
op|'='
name|'type'
newline|'\n'
name|'self'
op|'.'
name|'_xmlstream'
op|'='
name|'xmlstream'
newline|'\n'
name|'self'
op|'.'
name|'callbacks'
op|'='
name|'utility'
op|'.'
name|'CallbackList'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|addCallback
dedent|''
name|'def'
name|'addCallback'
op|'('
name|'self'
op|','
name|'fn'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Register a callback for notification when the IQ result is available.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'callbacks'
op|'.'
name|'addCallback'
op|'('
name|'True'
op|','
name|'fn'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|send
dedent|''
name|'def'
name|'send'
op|'('
name|'self'
op|','
name|'to'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call this method to send this IQ request via the associated XmlStream.\n\n        @param to: Jabber ID of the entity to send the request to\n        @type to: L{str}\n\n        @returns: Callback list for this IQ. Any callbacks added to this list\n                  will be fired when the result comes back.\n        """'
newline|'\n'
name|'if'
name|'to'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
string|'"to"'
op|']'
op|'='
name|'to'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_xmlstream'
op|'.'
name|'addOnetimeObserver'
op|'('
string|'"/iq[@id=\'%s\']"'
op|'%'
name|'self'
op|'['
string|'"id"'
op|']'
op|','
name|'self'
op|'.'
name|'_resultEvent'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_xmlstream'
op|'.'
name|'send'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_resultEvent
dedent|''
name|'def'
name|'_resultEvent'
op|'('
name|'self'
op|','
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'callbacks'
op|'.'
name|'callback'
op|'('
name|'iq'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'callbacks'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IQAuthInitializer
dedent|''
dedent|''
name|'class'
name|'IQAuthInitializer'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Non-SASL Authentication initializer for the initiating entity.\n\n    This protocol is defined in\n    U{JEP-0078<http://www.jabber.org/jeps/jep-0078.html>} and mainly serves for\n    compatibility with pre-XMPP-1.0 server implementations.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|INVALID_USER_EVENT
name|'INVALID_USER_EVENT'
op|'='
string|'"//event/client/basicauth/invaliduser"'
newline|'\n'
DECL|variable|AUTH_FAILED_EVENT
name|'AUTH_FAILED_EVENT'
op|'='
string|'"//event/client/basicauth/authfailed"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'xs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'xmlstream'
op|'='
name|'xs'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|initialize
dedent|''
name|'def'
name|'initialize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Send request for auth fields'
nl|'\n'
indent|'        '
name|'iq'
op|'='
name|'xmlstream'
op|'.'
name|'IQ'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|','
string|'"get"'
op|')'
newline|'\n'
name|'iq'
op|'.'
name|'addElement'
op|'('
op|'('
string|'"jabber:iq:auth"'
op|','
string|'"query"'
op|')'
op|')'
newline|'\n'
name|'jid'
op|'='
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'authenticator'
op|'.'
name|'jid'
newline|'\n'
name|'iq'
op|'.'
name|'query'
op|'.'
name|'addElement'
op|'('
string|'"username"'
op|','
name|'content'
op|'='
name|'jid'
op|'.'
name|'user'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'iq'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbAuthQuery'
op|','
name|'self'
op|'.'
name|'_ebAuthQuery'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbAuthQuery
dedent|''
name|'def'
name|'_cbAuthQuery'
op|'('
name|'self'
op|','
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'jid'
op|'='
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'authenticator'
op|'.'
name|'jid'
newline|'\n'
name|'password'
op|'='
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'authenticator'
op|'.'
name|'password'
newline|'\n'
nl|'\n'
comment|'# Construct auth request'
nl|'\n'
name|'reply'
op|'='
name|'xmlstream'
op|'.'
name|'IQ'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|','
string|'"set"'
op|')'
newline|'\n'
name|'reply'
op|'.'
name|'addElement'
op|'('
op|'('
string|'"jabber:iq:auth"'
op|','
string|'"query"'
op|')'
op|')'
newline|'\n'
name|'reply'
op|'.'
name|'query'
op|'.'
name|'addElement'
op|'('
string|'"username"'
op|','
name|'content'
op|'='
name|'jid'
op|'.'
name|'user'
op|')'
newline|'\n'
name|'reply'
op|'.'
name|'query'
op|'.'
name|'addElement'
op|'('
string|'"resource"'
op|','
name|'content'
op|'='
name|'jid'
op|'.'
name|'resource'
op|')'
newline|'\n'
nl|'\n'
comment|'# Prefer digest over plaintext'
nl|'\n'
name|'if'
name|'DigestAuthQry'
op|'.'
name|'matches'
op|'('
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'digest'
op|'='
name|'xmlstream'
op|'.'
name|'hashPassword'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'sid'
op|','
name|'unicode'
op|'('
name|'password'
op|')'
op|')'
newline|'\n'
name|'reply'
op|'.'
name|'query'
op|'.'
name|'addElement'
op|'('
string|'"digest"'
op|','
name|'content'
op|'='
name|'digest'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'reply'
op|'.'
name|'query'
op|'.'
name|'addElement'
op|'('
string|'"password"'
op|','
name|'content'
op|'='
name|'password'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'reply'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbAuth'
op|','
name|'self'
op|'.'
name|'_ebAuth'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_ebAuthQuery
dedent|''
name|'def'
name|'_ebAuthQuery'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'failure'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'StanzaError'
op|')'
newline|'\n'
name|'e'
op|'='
name|'failure'
op|'.'
name|'value'
newline|'\n'
name|'if'
name|'e'
op|'.'
name|'condition'
op|'=='
string|"'not-authorized'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dispatch'
op|'('
name|'e'
op|'.'
name|'stanza'
op|','
name|'self'
op|'.'
name|'INVALID_USER_EVENT'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dispatch'
op|'('
name|'e'
op|'.'
name|'stanza'
op|','
name|'self'
op|'.'
name|'AUTH_FAILED_EVENT'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'failure'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_cbAuth
dedent|''
name|'def'
name|'_cbAuth'
op|'('
name|'self'
op|','
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_ebAuth
dedent|''
name|'def'
name|'_ebAuth'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'failure'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'StanzaError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dispatch'
op|'('
name|'failure'
op|'.'
name|'value'
op|'.'
name|'stanza'
op|','
name|'self'
op|'.'
name|'AUTH_FAILED_EVENT'
op|')'
newline|'\n'
name|'return'
name|'failure'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BasicAuthenticator
dedent|''
dedent|''
name|'class'
name|'BasicAuthenticator'
op|'('
name|'xmlstream'
op|'.'
name|'ConnectAuthenticator'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Authenticates an XmlStream against a Jabber server as a Client.\n\n    This only implements non-SASL authentication, per\n    U{JEP-0078<http://www.jabber.org/jeps/jep-0078.html>}. Additionally, this\n    authenticator provides the ability to perform inline registration, per\n    U{JEP-0077<http://www.jabber.org/jeps/jep-0077.html>}.\n\n    Under normal circumstances, the BasicAuthenticator generates the\n    L{xmlstream.STREAM_AUTHD_EVENT} once the stream has authenticated. However,\n    it can also generate other events, such as:\n      - L{INVALID_USER_EVENT} : Authentication failed, due to invalid username\n      - L{AUTH_FAILED_EVENT} : Authentication failed, due to invalid password\n      - L{REGISTER_FAILED_EVENT} : Registration failed\n\n    If authentication fails for any reason, you can attempt to register by\n    calling the L{registerAccount} method. If the registration succeeds, a\n    L{xmlstream.STREAM_AUTHD_EVENT} will be fired. Otherwise, one of the above\n    errors will be generated (again).\n    """'
newline|'\n'
nl|'\n'
DECL|variable|namespace
name|'namespace'
op|'='
string|'"jabber:client"'
newline|'\n'
nl|'\n'
DECL|variable|INVALID_USER_EVENT
name|'INVALID_USER_EVENT'
op|'='
name|'IQAuthInitializer'
op|'.'
name|'INVALID_USER_EVENT'
newline|'\n'
DECL|variable|AUTH_FAILED_EVENT
name|'AUTH_FAILED_EVENT'
op|'='
name|'IQAuthInitializer'
op|'.'
name|'AUTH_FAILED_EVENT'
newline|'\n'
DECL|variable|REGISTER_FAILED_EVENT
name|'REGISTER_FAILED_EVENT'
op|'='
string|'"//event/client/basicauth/registerfailed"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'jid'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xmlstream'
op|'.'
name|'ConnectAuthenticator'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'jid'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'jid'
op|'='
name|'jid'
newline|'\n'
name|'self'
op|'.'
name|'password'
op|'='
name|'password'
newline|'\n'
nl|'\n'
DECL|member|associateWithStream
dedent|''
name|'def'
name|'associateWithStream'
op|'('
name|'self'
op|','
name|'xs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xs'
op|'.'
name|'version'
op|'='
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'xmlstream'
op|'.'
name|'ConnectAuthenticator'
op|'.'
name|'associateWithStream'
op|'('
name|'self'
op|','
name|'xs'
op|')'
newline|'\n'
nl|'\n'
name|'inits'
op|'='
op|'['
op|'('
name|'xmlstream'
op|'.'
name|'TLSInitiatingInitializer'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
name|'IQAuthInitializer'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'initClass'
op|','
name|'required'
name|'in'
name|'inits'
op|':'
newline|'\n'
indent|'            '
name|'init'
op|'='
name|'initClass'
op|'('
name|'xs'
op|')'
newline|'\n'
name|'init'
op|'.'
name|'required'
op|'='
name|'required'
newline|'\n'
name|'xs'
op|'.'
name|'initializers'
op|'.'
name|'append'
op|'('
name|'init'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO: move registration into an Initializer?'
nl|'\n'
nl|'\n'
DECL|member|registerAccount
dedent|''
dedent|''
name|'def'
name|'registerAccount'
op|'('
name|'self'
op|','
name|'username'
op|'='
name|'None'
op|','
name|'password'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'username'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'jid'
op|'.'
name|'user'
op|'='
name|'username'
newline|'\n'
dedent|''
name|'if'
name|'password'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'password'
op|'='
name|'password'
newline|'\n'
nl|'\n'
dedent|''
name|'iq'
op|'='
name|'IQ'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|','
string|'"set"'
op|')'
newline|'\n'
name|'iq'
op|'.'
name|'addElement'
op|'('
op|'('
string|'"jabber:iq:register"'
op|','
string|'"query"'
op|')'
op|')'
newline|'\n'
name|'iq'
op|'.'
name|'query'
op|'.'
name|'addElement'
op|'('
string|'"username"'
op|','
name|'content'
op|'='
name|'self'
op|'.'
name|'jid'
op|'.'
name|'user'
op|')'
newline|'\n'
name|'iq'
op|'.'
name|'query'
op|'.'
name|'addElement'
op|'('
string|'"password"'
op|','
name|'content'
op|'='
name|'self'
op|'.'
name|'password'
op|')'
newline|'\n'
nl|'\n'
name|'iq'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_registerResultEvent'
op|')'
newline|'\n'
nl|'\n'
name|'iq'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_registerResultEvent
dedent|''
name|'def'
name|'_registerResultEvent'
op|'('
name|'self'
op|','
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'iq'
op|'['
string|'"type"'
op|']'
op|'=='
string|'"result"'
op|':'
newline|'\n'
comment|'# Registration succeeded -- go ahead and auth'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'streamStarted'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Registration failed'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'dispatch'
op|'('
name|'iq'
op|','
name|'self'
op|'.'
name|'REGISTER_FAILED_EVENT'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CheckVersionInitializer
dedent|''
dedent|''
dedent|''
name|'class'
name|'CheckVersionInitializer'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Initializer that checks if the minimum common stream version number is 1.0.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'xs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'xmlstream'
op|'='
name|'xs'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|initialize
dedent|''
name|'def'
name|'initialize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'version'
op|'<'
op|'('
number|'1'
op|','
number|'0'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'StreamError'
op|'('
string|"'unsupported-version'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BindInitializer
dedent|''
dedent|''
dedent|''
name|'class'
name|'BindInitializer'
op|'('
name|'xmlstream'
op|'.'
name|'BaseFeatureInitiatingInitializer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Initializer that implements Resource Binding for the initiating entity.\n\n    This protocol is documented in U{RFC 3920, section\n    7<http://www.xmpp.org/specs/rfc3920.html#bind>}.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|feature
name|'feature'
op|'='
op|'('
name|'NS_XMPP_BIND'
op|','
string|"'bind'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|start
name|'def'
name|'start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'iq'
op|'='
name|'xmlstream'
op|'.'
name|'IQ'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|','
string|"'set'"
op|')'
newline|'\n'
name|'bind'
op|'='
name|'iq'
op|'.'
name|'addElement'
op|'('
op|'('
name|'NS_XMPP_BIND'
op|','
string|"'bind'"
op|')'
op|')'
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'authenticator'
op|'.'
name|'jid'
op|'.'
name|'resource'
newline|'\n'
name|'if'
name|'resource'
op|':'
newline|'\n'
indent|'            '
name|'bind'
op|'.'
name|'addElement'
op|'('
string|"'resource'"
op|','
name|'content'
op|'='
name|'resource'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'iq'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'onBind'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|onBind
dedent|''
name|'def'
name|'onBind'
op|'('
name|'self'
op|','
name|'iq'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'iq'
op|'.'
name|'bind'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'xmlstream'
op|'.'
name|'authenticator'
op|'.'
name|'jid'
op|'='
name|'JID'
op|'('
name|'unicode'
op|'('
name|'iq'
op|'.'
name|'bind'
op|'.'
name|'jid'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SessionInitializer
dedent|''
dedent|''
dedent|''
name|'class'
name|'SessionInitializer'
op|'('
name|'xmlstream'
op|'.'
name|'BaseFeatureInitiatingInitializer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Initializer that implements session establishment for the initiating\n    entity.\n\n    This protocol is defined in U{RFC 3921, section\n    3<http://www.xmpp.org/specs/rfc3921.html#session>}.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|feature
name|'feature'
op|'='
op|'('
name|'NS_XMPP_SESSION'
op|','
string|"'session'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|start
name|'def'
name|'start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'iq'
op|'='
name|'xmlstream'
op|'.'
name|'IQ'
op|'('
name|'self'
op|'.'
name|'xmlstream'
op|','
string|"'set'"
op|')'
newline|'\n'
name|'session'
op|'='
name|'iq'
op|'.'
name|'addElement'
op|'('
op|'('
name|'NS_XMPP_SESSION'
op|','
string|"'session'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'iq'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|XMPPClientFactory
dedent|''
dedent|''
name|'def'
name|'XMPPClientFactory'
op|'('
name|'jid'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Client factory for XMPP 1.0 (only).\n\n    This returns a L{xmlstream.XmlStreamFactory} with an L{XMPPAuthenticator}\n    object to perform the stream initialization steps (such as authentication).\n\n    @see: The notes at L{XMPPAuthenticator} describe how the L{jid} and\n    L{password} parameters are to be used.\n\n    @param jid: Jabber ID to connect with.\n    @type jid: L{jid.JID}\n    @param password: password to authenticate with.\n    @type password: L{unicode}\n    @return: XML stream factory.\n    @rtype: L{xmlstream.XmlStreamFactory}\n    """'
newline|'\n'
name|'a'
op|'='
name|'XMPPAuthenticator'
op|'('
name|'jid'
op|','
name|'password'
op|')'
newline|'\n'
name|'return'
name|'xmlstream'
op|'.'
name|'XmlStreamFactory'
op|'('
name|'a'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMPPAuthenticator
dedent|''
name|'class'
name|'XMPPAuthenticator'
op|'('
name|'xmlstream'
op|'.'
name|'ConnectAuthenticator'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Initializes an XmlStream connecting to an XMPP server as a Client.\n\n    This authenticator performs the initialization steps needed to start\n    exchanging XML stanzas with an XMPP server as an XMPP client. It checks if\n    the server advertises XML stream version 1.0, negotiates TLS (when\n    available), performs SASL authentication, binds a resource and establishes\n    a session.\n\n    Upon successful stream initialization, the L{xmlstream.STREAM_AUTHD_EVENT}\n    event will be dispatched through the XML stream object. Otherwise, the\n    L{xmlstream.INIT_FAILED_EVENT} event will be dispatched with a failure\n    object.\n\n    After inspection of the failure, initialization can then be restarted by\n    calling L{initializeStream}. For example, in case of authentication\n    failure, a user may be given the opportunity to input the correct password.\n    By setting the L{password} instance variable and restarting initialization,\n    the stream authentication step is then retried, and subsequent steps are\n    performed if succesful.\n\n    @ivar jid: Jabber ID to authenticate with. This may contain a resource\n               part, as a suggestion to the server for resource binding. A\n               server may override this, though. If the resource part is left\n               off, the server will generate a unique resource identifier.\n               The server will always return the full Jabber ID in the\n               resource binding step, and this is stored in this instance\n               variable.\n    @type jid: L{jid.JID}\n    @ivar password: password to be used during SASL authentication.\n    @type password: L{unicode}\n    """'
newline|'\n'
nl|'\n'
DECL|variable|namespace
name|'namespace'
op|'='
string|"'jabber:client'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'jid'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xmlstream'
op|'.'
name|'ConnectAuthenticator'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'jid'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'jid'
op|'='
name|'jid'
newline|'\n'
name|'self'
op|'.'
name|'password'
op|'='
name|'password'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|associateWithStream
dedent|''
name|'def'
name|'associateWithStream'
op|'('
name|'self'
op|','
name|'xs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Register with the XML stream.\n\n        Populates stream\'s list of initializers, along with their\n        requiredness. This list is used by\n        L{ConnectAuthenticator.initializeStream} to perform the initalization\n        steps.\n        """'
newline|'\n'
name|'xmlstream'
op|'.'
name|'ConnectAuthenticator'
op|'.'
name|'associateWithStream'
op|'('
name|'self'
op|','
name|'xs'
op|')'
newline|'\n'
nl|'\n'
name|'xs'
op|'.'
name|'initializers'
op|'='
op|'['
name|'CheckVersionInitializer'
op|'('
name|'xs'
op|')'
op|']'
newline|'\n'
name|'inits'
op|'='
op|'['
op|'('
name|'xmlstream'
op|'.'
name|'TLSInitiatingInitializer'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
name|'sasl'
op|'.'
name|'SASLInitiatingInitializer'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
name|'BindInitializer'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
name|'SessionInitializer'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'initClass'
op|','
name|'required'
name|'in'
name|'inits'
op|':'
newline|'\n'
indent|'            '
name|'init'
op|'='
name|'initClass'
op|'('
name|'xs'
op|')'
newline|'\n'
name|'init'
op|'.'
name|'required'
op|'='
name|'required'
newline|'\n'
name|'xs'
op|'.'
name|'initializers'
op|'.'
name|'append'
op|'('
name|'init'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

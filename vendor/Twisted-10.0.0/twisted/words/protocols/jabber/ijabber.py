begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nPublic Jabber Interfaces.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'Attribute'
op|','
name|'Interface'
newline|'\n'
nl|'\n'
DECL|class|IInitializer
name|'class'
name|'IInitializer'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Interface for XML stream initializers.\n\n    Initializers perform a step in getting the XML stream ready to be\n    used for the exchange of XML stanzas.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IInitiatingInitializer
dedent|''
name|'class'
name|'IInitiatingInitializer'
op|'('
name|'IInitializer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Interface for XML stream initializers for the initiating entity.\n    """'
newline|'\n'
nl|'\n'
name|'xmlstream'
op|'='
name|'Attribute'
op|'('
string|'"""The associated XML stream"""'
op|')'
newline|'\n'
nl|'\n'
DECL|member|initialize
name|'def'
name|'initialize'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initiate the initialization step.\n\n        May return a deferred when the initialization is done asynchronously.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IIQResponseTracker
dedent|''
dedent|''
name|'class'
name|'IIQResponseTracker'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    IQ response tracker interface.\n\n    The XMPP stanza C{iq} has a request-response nature that fits\n    naturally with deferreds. You send out a request and when the response\n    comes back a deferred is fired.\n\n    The L{IQ} class implements a C{send} method that returns a deferred. This\n    deferred is put in a dictionary that is kept in an L{XmlStream} object,\n    keyed by the request stanzas C{id} attribute.\n\n    An object providing this interface (usually an instance of L{XmlStream}),\n    keeps the said dictionary and sets observers on the iq stanzas of type\n    C{result} and C{error} and lets the callback fire the associated deferred.\n    """'
newline|'\n'
DECL|variable|iqDeferreds
name|'iqDeferreds'
op|'='
name|'Attribute'
op|'('
string|'"Dictionary of deferreds waiting for an iq "'
nl|'\n'
string|'"response"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IXMPPHandler
dedent|''
name|'class'
name|'IXMPPHandler'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Interface for XMPP protocol handlers.\n\n    Objects that provide this interface can be added to a stream manager to\n    handle of (part of) an XMPP extension protocol.\n    """'
newline|'\n'
nl|'\n'
name|'parent'
op|'='
name|'Attribute'
op|'('
string|'"""XML stream manager for this handler"""'
op|')'
newline|'\n'
name|'xmlstream'
op|'='
name|'Attribute'
op|'('
string|'"""The managed XML stream"""'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setHandlerParent
name|'def'
name|'setHandlerParent'
op|'('
name|'parent'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the parent of the handler.\n\n        @type parent: L{IXMPPHandlerCollection}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|disownHandlerParent
dedent|''
name|'def'
name|'disownHandlerParent'
op|'('
name|'parent'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove the parent of the handler.\n\n        @type parent: L{IXMPPHandlerCollection}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeConnection
dedent|''
name|'def'
name|'makeConnection'
op|'('
name|'xs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A connection over the underlying transport of the XML stream has been\n        established.\n\n        At this point, no traffic has been exchanged over the XML stream\n        given in C{xs}.\n\n        This should setup L{xmlstream} and call L{connectionMade}.\n\n        @type xs: L{XmlStream<twisted.words.protocols.jabber.XmlStream>}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called after a connection has been established.\n\n        This method can be used to change properties of the XML Stream, its\n        authenticator or the stream manager prior to stream initialization\n        (including authentication).\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionInitialized
dedent|''
name|'def'
name|'connectionInitialized'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The XML stream has been initialized.\n\n        At this point, authentication was successful, and XML stanzas can be\n        exchanged over the XML stream L{xmlstream}. This method can be\n        used to setup observers for incoming stanzas.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The XML stream has been closed.\n\n        Subsequent use of L{parent.send} will result in data being queued\n        until a new connection has been established.\n\n        @type reason: L{twisted.python.failure.Failure}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IXMPPHandlerCollection
dedent|''
dedent|''
name|'class'
name|'IXMPPHandlerCollection'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Collection of handlers.\n\n    Contain several handlers and manage their connection.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__iter__
name|'def'
name|'__iter__'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get an iterator over all child handlers.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|addHandler
dedent|''
name|'def'
name|'addHandler'
op|'('
name|'handler'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add a child handler.\n\n        @type handler: L{IXMPPHandler}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|removeHandler
dedent|''
name|'def'
name|'removeHandler'
op|'('
name|'handler'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove a child handler.\n\n        @type handler: L{IXMPPHandler}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IService
dedent|''
dedent|''
name|'class'
name|'IService'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    External server-side component service interface.\n\n    Services that provide this interface can be added to L{ServiceManager} to\n    implement (part of) the functionality of the server-side component.\n    """'
newline|'\n'
nl|'\n'
DECL|member|componentConnected
name|'def'
name|'componentConnected'
op|'('
name|'xs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parent component has established a connection.\n\n        At this point, authentication was succesful, and XML stanzas\n        can be exchanged over the XML stream L{xs}. This method can be used\n        to setup observers for incoming stanzas.\n\n        @param xs: XML Stream that represents the established connection.\n        @type xs: L{xmlstream.XmlStream}\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|componentDisconnected
dedent|''
name|'def'
name|'componentDisconnected'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parent component has lost the connection to the Jabber server.\n\n        Subsequent use of C{self.parent.send} will result in data being\n        queued until a new connection has been established.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|transportConnected
dedent|''
name|'def'
name|'transportConnected'
op|'('
name|'xs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parent component has established a connection over the underlying\n        transport.\n\n        At this point, no traffic has been exchanged over the XML stream. This\n        method can be used to change properties of the XML Stream (in L{xs}),\n        the service manager or it\'s authenticator prior to stream\n        initialization (including authentication).\n        """'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.words.test.test_jabberxmppstringprep -*-'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright (c) 2001-2005 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'warnings'
newline|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'Interface'
op|','
name|'implements'
newline|'\n'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'version_info'
op|'<'
op|'('
number|'2'
op|','
number|'3'
op|','
number|'2'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'re'
newline|'\n'
nl|'\n'
DECL|class|IDNA
name|'class'
name|'IDNA'
op|':'
newline|'\n'
DECL|variable|dots
indent|'        '
name|'dots'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'u"[\\u002E\\u3002\\uFF0E\\uFF61]"'
op|')'
newline|'\n'
DECL|member|nameprep
name|'def'
name|'nameprep'
op|'('
name|'self'
op|','
name|'label'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'label'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|idna
dedent|''
dedent|''
name|'idna'
op|'='
name|'IDNA'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|crippled
name|'crippled'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"Accented and non-Western Jabber IDs will not be properly "'
nl|'\n'
string|'"case-folded with this version of Python, resulting in "'
nl|'\n'
string|'"incorrect protocol-level behavior.  It is strongly "'
nl|'\n'
string|'"recommended you upgrade to Python 2.3.2 or newer if you "'
nl|'\n'
string|'"intend to use Twisted\'s Jabber support."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'stringprep'
newline|'\n'
name|'import'
name|'unicodedata'
newline|'\n'
name|'from'
name|'encodings'
name|'import'
name|'idna'
newline|'\n'
nl|'\n'
DECL|variable|crippled
name|'crippled'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'del'
name|'sys'
op|','
name|'warnings'
newline|'\n'
nl|'\n'
DECL|class|ILookupTable
name|'class'
name|'ILookupTable'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Interface for character lookup classes. """'
newline|'\n'
nl|'\n'
DECL|member|lookup
name|'def'
name|'lookup'
op|'('
name|'c'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Return whether character is in this table. """'
newline|'\n'
nl|'\n'
DECL|class|IMappingTable
dedent|''
dedent|''
name|'class'
name|'IMappingTable'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Interface for character mapping classes. """'
newline|'\n'
nl|'\n'
DECL|member|map
name|'def'
name|'map'
op|'('
name|'c'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Return mapping for character. """'
newline|'\n'
nl|'\n'
DECL|class|LookupTableFromFunction
dedent|''
dedent|''
name|'class'
name|'LookupTableFromFunction'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'implements'
op|'('
name|'ILookupTable'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'in_table_function'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lookup'
op|'='
name|'in_table_function'
newline|'\n'
nl|'\n'
DECL|class|LookupTable
dedent|''
dedent|''
name|'class'
name|'LookupTable'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'implements'
op|'('
name|'ILookupTable'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'table'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_table'
op|'='
name|'table'
newline|'\n'
nl|'\n'
DECL|member|lookup
dedent|''
name|'def'
name|'lookup'
op|'('
name|'self'
op|','
name|'c'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'c'
name|'in'
name|'self'
op|'.'
name|'_table'
newline|'\n'
nl|'\n'
DECL|class|MappingTableFromFunction
dedent|''
dedent|''
name|'class'
name|'MappingTableFromFunction'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'implements'
op|'('
name|'IMappingTable'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'map_table_function'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'map'
op|'='
name|'map_table_function'
newline|'\n'
nl|'\n'
DECL|class|EmptyMappingTable
dedent|''
dedent|''
name|'class'
name|'EmptyMappingTable'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'implements'
op|'('
name|'IMappingTable'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'in_table_function'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_in_table_function'
op|'='
name|'in_table_function'
newline|'\n'
nl|'\n'
DECL|member|map
dedent|''
name|'def'
name|'map'
op|'('
name|'self'
op|','
name|'c'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_in_table_function'
op|'('
name|'c'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'c'
newline|'\n'
nl|'\n'
DECL|class|Profile
dedent|''
dedent|''
dedent|''
name|'class'
name|'Profile'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'mappings'
op|'='
op|'['
op|']'
op|','
name|'normalize'
op|'='
name|'True'
op|','
name|'prohibiteds'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'check_unassigneds'
op|'='
name|'True'
op|','
name|'check_bidi'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mappings'
op|'='
name|'mappings'
newline|'\n'
name|'self'
op|'.'
name|'normalize'
op|'='
name|'normalize'
newline|'\n'
name|'self'
op|'.'
name|'prohibiteds'
op|'='
name|'prohibiteds'
newline|'\n'
name|'self'
op|'.'
name|'do_check_unassigneds'
op|'='
name|'check_unassigneds'
newline|'\n'
name|'self'
op|'.'
name|'do_check_bidi'
op|'='
name|'check_bidi'
newline|'\n'
nl|'\n'
DECL|member|prepare
dedent|''
name|'def'
name|'prepare'
op|'('
name|'self'
op|','
name|'string'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'self'
op|'.'
name|'map'
op|'('
name|'string'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'normalize'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'unicodedata'
op|'.'
name|'normalize'
op|'('
string|'"NFKC"'
op|','
name|'result'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'check_prohibiteds'
op|'('
name|'result'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'do_check_unassigneds'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'check_unassigneds'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'do_check_bidi'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'check_bidirectionals'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|map
dedent|''
name|'def'
name|'map'
op|'('
name|'self'
op|','
name|'string'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'c'
name|'in'
name|'string'
op|':'
newline|'\n'
indent|'            '
name|'result_c'
op|'='
name|'c'
newline|'\n'
nl|'\n'
name|'for'
name|'mapping'
name|'in'
name|'self'
op|'.'
name|'mappings'
op|':'
newline|'\n'
indent|'                '
name|'result_c'
op|'='
name|'mapping'
op|'.'
name|'map'
op|'('
name|'c'
op|')'
newline|'\n'
name|'if'
name|'result_c'
op|'!='
name|'c'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'result_c'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'.'
name|'append'
op|'('
name|'result_c'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
string|'u""'
op|'.'
name|'join'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|check_prohibiteds
dedent|''
name|'def'
name|'check_prohibiteds'
op|'('
name|'self'
op|','
name|'string'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'c'
name|'in'
name|'string'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'table'
name|'in'
name|'self'
op|'.'
name|'prohibiteds'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'table'
op|'.'
name|'lookup'
op|'('
name|'c'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'UnicodeError'
op|','
string|'"Invalid character %s"'
op|'%'
name|'repr'
op|'('
name|'c'
op|')'
newline|'\n'
nl|'\n'
DECL|member|check_unassigneds
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'check_unassigneds'
op|'('
name|'self'
op|','
name|'string'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'c'
name|'in'
name|'string'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'stringprep'
op|'.'
name|'in_table_a1'
op|'('
name|'c'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'UnicodeError'
op|','
string|'"Unassigned code point %s"'
op|'%'
name|'repr'
op|'('
name|'c'
op|')'
newline|'\n'
nl|'\n'
DECL|member|check_bidirectionals
dedent|''
dedent|''
dedent|''
name|'def'
name|'check_bidirectionals'
op|'('
name|'self'
op|','
name|'string'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'found_LCat'
op|'='
name|'False'
newline|'\n'
name|'found_RandALCat'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'for'
name|'c'
name|'in'
name|'string'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'stringprep'
op|'.'
name|'in_table_d1'
op|'('
name|'c'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'found_RandALCat'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'stringprep'
op|'.'
name|'in_table_d2'
op|'('
name|'c'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'found_LCat'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'found_LCat'
name|'and'
name|'found_RandALCat'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'UnicodeError'
op|','
string|'"Violation of BIDI Requirement 2"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'found_RandALCat'
name|'and'
name|'not'
op|'('
name|'stringprep'
op|'.'
name|'in_table_d1'
op|'('
name|'string'
op|'['
number|'0'
op|']'
op|')'
name|'and'
nl|'\n'
name|'stringprep'
op|'.'
name|'in_table_d1'
op|'('
name|'string'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'UnicodeError'
op|','
string|'"Violation of BIDI Requirement 3"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NamePrep
dedent|''
dedent|''
dedent|''
name|'class'
name|'NamePrep'
op|':'
newline|'\n'
indent|'    '
string|'""" Implements preparation of internationalized domain names.\n\n    This class implements preparing internationalized domain names using the\n    rules defined in RFC 3491, section 4 (Conversion operations).\n    \n    We do not perform step 4 since we deal with unicode representations of\n    domain names and do not convert from or to ASCII representations using\n    punycode encoding. When such a conversion is needed, the L{idna} standard\n    library provides the C{ToUnicode()} and C{ToASCII()} functions. Note that\n    L{idna} itself assumes UseSTD3ASCIIRules to be false.\n    \n    The following steps are performed by C{prepare()}:\n    \n      - Split the domain name in labels at the dots (RFC 3490, 3.1)\n      - Apply nameprep proper on each label (RFC 3491)\n      - Enforce the restrictions on ASCII characters in host names by\n        assuming STD3ASCIIRules to be true. (STD 3)\n      - Rejoin the labels using the label separator U+002E (full stop).\n    \n    """'
newline|'\n'
nl|'\n'
comment|'# Prohibited characters.'
nl|'\n'
DECL|variable|prohibiteds
name|'prohibiteds'
op|'='
op|'['
name|'unichr'
op|'('
name|'n'
op|')'
name|'for'
name|'n'
name|'in'
name|'range'
op|'('
number|'0x00'
op|','
number|'0x2c'
op|'+'
number|'1'
op|')'
op|'+'
nl|'\n'
name|'range'
op|'('
number|'0x2e'
op|','
number|'0x2f'
op|'+'
number|'1'
op|')'
op|'+'
nl|'\n'
name|'range'
op|'('
number|'0x3a'
op|','
number|'0x40'
op|'+'
number|'1'
op|')'
op|'+'
nl|'\n'
name|'range'
op|'('
number|'0x5b'
op|','
number|'0x60'
op|'+'
number|'1'
op|')'
op|'+'
nl|'\n'
name|'range'
op|'('
number|'0x7b'
op|','
number|'0x7f'
op|'+'
number|'1'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|prepare
name|'def'
name|'prepare'
op|'('
name|'self'
op|','
name|'string'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'labels'
op|'='
name|'idna'
op|'.'
name|'dots'
op|'.'
name|'split'
op|'('
name|'string'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'labels'
name|'and'
name|'len'
op|'('
name|'labels'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'trailing_dot'
op|'='
string|"'.'"
newline|'\n'
name|'del'
name|'labels'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'trailing_dot'
op|'='
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'label'
name|'in'
name|'labels'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'nameprep'
op|'('
name|'label'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
string|'"."'
op|'.'
name|'join'
op|'('
name|'result'
op|')'
op|'+'
name|'trailing_dot'
newline|'\n'
nl|'\n'
DECL|member|check_prohibiteds
dedent|''
name|'def'
name|'check_prohibiteds'
op|'('
name|'self'
op|','
name|'string'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'c'
name|'in'
name|'string'
op|':'
newline|'\n'
indent|'           '
name|'if'
name|'c'
name|'in'
name|'self'
op|'.'
name|'prohibiteds'
op|':'
newline|'\n'
indent|'               '
name|'raise'
name|'UnicodeError'
op|','
string|'"Invalid character %s"'
op|'%'
name|'repr'
op|'('
name|'c'
op|')'
newline|'\n'
nl|'\n'
DECL|member|nameprep
dedent|''
dedent|''
dedent|''
name|'def'
name|'nameprep'
op|'('
name|'self'
op|','
name|'label'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'label'
op|'='
name|'idna'
op|'.'
name|'nameprep'
op|'('
name|'label'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'check_prohibiteds'
op|'('
name|'label'
op|')'
newline|'\n'
name|'if'
name|'label'
op|'['
number|'0'
op|']'
op|'=='
string|"'-'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'UnicodeError'
op|','
string|'"Invalid leading hyphen-minus"'
newline|'\n'
dedent|''
name|'if'
name|'label'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|"'-'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'UnicodeError'
op|','
string|'"Invalid trailing hyphen-minus"'
newline|'\n'
dedent|''
name|'return'
name|'label'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'crippled'
op|':'
newline|'\n'
DECL|variable|case_map
indent|'    '
name|'case_map'
op|'='
name|'MappingTableFromFunction'
op|'('
name|'lambda'
name|'c'
op|':'
name|'c'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
newline|'\n'
DECL|variable|nodeprep
name|'nodeprep'
op|'='
name|'Profile'
op|'('
name|'mappings'
op|'='
op|'['
name|'case_map'
op|']'
op|','
nl|'\n'
name|'normalize'
op|'='
name|'False'
op|','
nl|'\n'
name|'prohibiteds'
op|'='
op|'['
name|'LookupTable'
op|'('
op|'['
string|"u' '"
op|','
string|'u\'"\''
op|','
string|"u'&'"
op|','
string|'u"\'"'
op|','
string|"u'/'"
op|','
nl|'\n'
string|"u':'"
op|','
string|"u'<'"
op|','
string|"u'>'"
op|','
string|"u'@'"
op|']'
op|')'
op|']'
op|','
nl|'\n'
name|'check_unassigneds'
op|'='
name|'False'
op|','
nl|'\n'
name|'check_bidi'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|resourceprep
name|'resourceprep'
op|'='
name|'Profile'
op|'('
name|'normalize'
op|'='
name|'False'
op|','
nl|'\n'
name|'check_unassigneds'
op|'='
name|'False'
op|','
nl|'\n'
name|'check_bidi'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|C_11
indent|'    '
name|'C_11'
op|'='
name|'LookupTableFromFunction'
op|'('
name|'stringprep'
op|'.'
name|'in_table_c11'
op|')'
newline|'\n'
DECL|variable|C_12
name|'C_12'
op|'='
name|'LookupTableFromFunction'
op|'('
name|'stringprep'
op|'.'
name|'in_table_c12'
op|')'
newline|'\n'
DECL|variable|C_21
name|'C_21'
op|'='
name|'LookupTableFromFunction'
op|'('
name|'stringprep'
op|'.'
name|'in_table_c21'
op|')'
newline|'\n'
DECL|variable|C_22
name|'C_22'
op|'='
name|'LookupTableFromFunction'
op|'('
name|'stringprep'
op|'.'
name|'in_table_c22'
op|')'
newline|'\n'
DECL|variable|C_3
name|'C_3'
op|'='
name|'LookupTableFromFunction'
op|'('
name|'stringprep'
op|'.'
name|'in_table_c3'
op|')'
newline|'\n'
DECL|variable|C_4
name|'C_4'
op|'='
name|'LookupTableFromFunction'
op|'('
name|'stringprep'
op|'.'
name|'in_table_c4'
op|')'
newline|'\n'
DECL|variable|C_5
name|'C_5'
op|'='
name|'LookupTableFromFunction'
op|'('
name|'stringprep'
op|'.'
name|'in_table_c5'
op|')'
newline|'\n'
DECL|variable|C_6
name|'C_6'
op|'='
name|'LookupTableFromFunction'
op|'('
name|'stringprep'
op|'.'
name|'in_table_c6'
op|')'
newline|'\n'
DECL|variable|C_7
name|'C_7'
op|'='
name|'LookupTableFromFunction'
op|'('
name|'stringprep'
op|'.'
name|'in_table_c7'
op|')'
newline|'\n'
DECL|variable|C_8
name|'C_8'
op|'='
name|'LookupTableFromFunction'
op|'('
name|'stringprep'
op|'.'
name|'in_table_c8'
op|')'
newline|'\n'
DECL|variable|C_9
name|'C_9'
op|'='
name|'LookupTableFromFunction'
op|'('
name|'stringprep'
op|'.'
name|'in_table_c9'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|B_1
name|'B_1'
op|'='
name|'EmptyMappingTable'
op|'('
name|'stringprep'
op|'.'
name|'in_table_b1'
op|')'
newline|'\n'
DECL|variable|B_2
name|'B_2'
op|'='
name|'MappingTableFromFunction'
op|'('
name|'stringprep'
op|'.'
name|'map_table_b2'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|nodeprep
name|'nodeprep'
op|'='
name|'Profile'
op|'('
name|'mappings'
op|'='
op|'['
name|'B_1'
op|','
name|'B_2'
op|']'
op|','
nl|'\n'
name|'prohibiteds'
op|'='
op|'['
name|'C_11'
op|','
name|'C_12'
op|','
name|'C_21'
op|','
name|'C_22'
op|','
nl|'\n'
name|'C_3'
op|','
name|'C_4'
op|','
name|'C_5'
op|','
name|'C_6'
op|','
name|'C_7'
op|','
name|'C_8'
op|','
name|'C_9'
op|','
nl|'\n'
name|'LookupTable'
op|'('
op|'['
string|'u\'"\''
op|','
string|"u'&'"
op|','
string|'u"\'"'
op|','
string|"u'/'"
op|','
nl|'\n'
string|"u':'"
op|','
string|"u'<'"
op|','
string|"u'>'"
op|','
string|"u'@'"
op|']'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|resourceprep
name|'resourceprep'
op|'='
name|'Profile'
op|'('
name|'mappings'
op|'='
op|'['
name|'B_1'
op|','
op|']'
op|','
nl|'\n'
name|'prohibiteds'
op|'='
op|'['
name|'C_12'
op|','
name|'C_21'
op|','
name|'C_22'
op|','
nl|'\n'
name|'C_3'
op|','
name|'C_4'
op|','
name|'C_5'
op|','
name|'C_6'
op|','
name|'C_7'
op|','
name|'C_8'
op|','
name|'C_9'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|nameprep
dedent|''
name|'nameprep'
op|'='
name|'NamePrep'
op|'('
op|')'
newline|'\n'
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.words.test.test_irc -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nInternet Relay Chat Protocol for client and server.\n\nFuture Plans\n============\n\nThe way the IRCClient class works here encourages people to implement\nIRC clients by subclassing the ephemeral protocol class, and it tends\nto end up with way more state than it should for an object which will\nbe destroyed as soon as the TCP transport drops.  Someone oughta do\nsomething about that, ya know?\n\nThe DCC support needs to have more hooks for the client for it to be\nable to ask the user things like "Do you want to accept this session?"\nand "Transfer #2 is 67% done." and otherwise manage the DCC sessions.\n\nTest coverage needs to be better.\n\n@author: Kevin Turner\n\n@see: RFC 1459: Internet Relay Chat Protocol\n@see: RFC 2812: Internet Relay Chat: Client Protocol\n@see: U{The Client-To-Client-Protocol\n<http://www.irchelp.org/irchelp/rfc/ctcpspec.html>}\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'errno'
op|','
name|'os'
op|','
name|'random'
op|','
name|'re'
op|','
name|'stat'
op|','
name|'struct'
op|','
name|'sys'
op|','
name|'time'
op|','
name|'types'
op|','
name|'traceback'
newline|'\n'
name|'import'
name|'string'
op|','
name|'socket'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
name|'from'
name|'os'
name|'import'
name|'path'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
op|','
name|'protocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'persisted'
name|'import'
name|'styles'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'reflect'
op|','
name|'text'
newline|'\n'
nl|'\n'
DECL|variable|NUL
name|'NUL'
op|'='
name|'chr'
op|'('
number|'0'
op|')'
newline|'\n'
DECL|variable|CR
name|'CR'
op|'='
name|'chr'
op|'('
number|'015'
op|')'
newline|'\n'
DECL|variable|NL
name|'NL'
op|'='
name|'chr'
op|'('
number|'012'
op|')'
newline|'\n'
DECL|variable|LF
name|'LF'
op|'='
name|'NL'
newline|'\n'
DECL|variable|SPC
name|'SPC'
op|'='
name|'chr'
op|'('
number|'040'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|CHANNEL_PREFIXES
name|'CHANNEL_PREFIXES'
op|'='
string|"'&#!+'"
newline|'\n'
nl|'\n'
DECL|class|IRCBadMessage
name|'class'
name|'IRCBadMessage'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|IRCPasswordMismatch
dedent|''
name|'class'
name|'IRCPasswordMismatch'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IRCBadModes
dedent|''
name|'class'
name|'IRCBadModes'
op|'('
name|'ValueError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A malformed mode was encountered while attempting to parse a mode string.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|parsemsg
dedent|''
name|'def'
name|'parsemsg'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Breaks a message from an IRC server into its prefix, command, and arguments.\n    """'
newline|'\n'
name|'prefix'
op|'='
string|"''"
newline|'\n'
name|'trailing'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'not'
name|'s'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'IRCBadMessage'
op|'('
string|'"Empty line."'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'s'
op|'['
number|'0'
op|']'
op|'=='
string|"':'"
op|':'
newline|'\n'
indent|'        '
name|'prefix'
op|','
name|'s'
op|'='
name|'s'
op|'['
number|'1'
op|':'
op|']'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'s'
op|'.'
name|'find'
op|'('
string|"' :'"
op|')'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|','
name|'trailing'
op|'='
name|'s'
op|'.'
name|'split'
op|'('
string|"' :'"
op|','
number|'1'
op|')'
newline|'\n'
name|'args'
op|'='
name|'s'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'args'
op|'.'
name|'append'
op|'('
name|'trailing'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
name|'s'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
dedent|''
name|'command'
op|'='
name|'args'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'return'
name|'prefix'
op|','
name|'command'
op|','
name|'args'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|split
dedent|''
name|'def'
name|'split'
op|'('
name|'str'
op|','
name|'length'
op|'='
number|'80'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""I break a message into multiple lines.\n\n    I prefer to break at whitespace near str[length].  I also break at \\\\n.\n\n    @returns: list of strings\n    """'
newline|'\n'
name|'if'
name|'length'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|'"Length must be a number greater than zero"'
op|')'
newline|'\n'
dedent|''
name|'r'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'str'
op|')'
op|'>'
name|'length'
op|':'
newline|'\n'
indent|'        '
name|'w'
op|','
name|'n'
op|'='
name|'str'
op|'['
op|':'
name|'length'
op|']'
op|'.'
name|'rfind'
op|'('
string|"' '"
op|')'
op|','
name|'str'
op|'['
op|':'
name|'length'
op|']'
op|'.'
name|'find'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'if'
name|'w'
op|'=='
op|'-'
number|'1'
name|'and'
name|'n'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|','
name|'str'
op|'='
name|'str'
op|'['
op|':'
name|'length'
op|']'
op|','
name|'str'
op|'['
name|'length'
op|':'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'n'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'i'
op|'='
name|'w'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'i'
op|'='
name|'n'
newline|'\n'
dedent|''
name|'if'
name|'i'
op|'=='
number|'0'
op|':'
comment|"# just skip the space or newline. don't append any output."
newline|'\n'
indent|'                '
name|'str'
op|'='
name|'str'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'line'
op|','
name|'str'
op|'='
name|'str'
op|'['
op|':'
name|'i'
op|']'
op|','
name|'str'
op|'['
name|'i'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'r'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'str'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'r'
op|'.'
name|'extend'
op|'('
name|'str'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'r'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_intOrDefault
dedent|''
name|'def'
name|'_intOrDefault'
op|'('
name|'value'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert a value to an integer if possible.\n\n    @rtype: C{int} or type of L{default}\n    @return: An integer when C{value} can be converted to an integer,\n        otherwise return C{default}\n    """'
newline|'\n'
name|'if'
name|'value'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'ValueError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'default'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnhandledCommand
dedent|''
name|'class'
name|'UnhandledCommand'
op|'('
name|'RuntimeError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A command dispatcher could not locate an appropriate command handler.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_CommandDispatcherMixin
dedent|''
name|'class'
name|'_CommandDispatcherMixin'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Dispatch commands to handlers based on their name.\n\n    Command handler names should be of the form C{prefix_commandName},\n    where C{prefix} is the value specified by L{prefix}, and must\n    accept the parameters as given to L{dispatch}.\n\n    Attempting to mix this in more than once for a single class will cause\n    strange behaviour, due to L{prefix} being overwritten.\n\n    @type prefix: C{str}\n    @ivar prefix: Command handler prefix, used to locate handler attributes\n    """'
newline|'\n'
DECL|variable|prefix
name|'prefix'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|dispatch
name|'def'
name|'dispatch'
op|'('
name|'self'
op|','
name|'commandName'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Perform actual command dispatch.\n        """'
newline|'\n'
DECL|function|_getMethodName
name|'def'
name|'_getMethodName'
op|'('
name|'command'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'%s_%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'prefix'
op|','
name|'command'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_getMethod
dedent|''
name|'def'
name|'_getMethod'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'_getMethodName'
op|'('
name|'name'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'method'
op|'='
name|'_getMethod'
op|'('
name|'commandName'
op|')'
newline|'\n'
name|'if'
name|'method'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'method'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'method'
op|'='
name|'_getMethod'
op|'('
string|"'unknown'"
op|')'
newline|'\n'
name|'if'
name|'method'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'UnhandledCommand'
op|'('
string|'"No handler for %r could be found"'
op|'%'
op|'('
name|'_getMethodName'
op|'('
name|'commandName'
op|')'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'method'
op|'('
name|'commandName'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|parseModes
dedent|''
dedent|''
name|'def'
name|'parseModes'
op|'('
name|'modes'
op|','
name|'params'
op|','
name|'paramModes'
op|'='
op|'('
string|"''"
op|','
string|"''"
op|')'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Parse an IRC mode string.\n\n    The mode string is parsed into two lists of mode changes (added and\n    removed), with each mode change represented as C{(mode, param)} where mode\n    is the mode character, and param is the parameter passed for that mode, or\n    C{None} if no parameter is required.\n\n    @type modes: C{str}\n    @param modes: Modes string to parse.\n\n    @type params: C{list}\n    @param params: Parameters specified along with L{modes}.\n\n    @type paramModes: C{(str, str)}\n    @param paramModes: A pair of strings (C{(add, remove)}) that indicate which modes take\n        parameters when added or removed.\n\n    @returns: Two lists of mode changes, one for modes added and the other for\n        modes removed respectively, mode changes in each list are represented as\n        C{(mode, param)}.\n    """'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'modes'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'IRCBadModes'
op|'('
string|"'Empty mode string'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'modes'
op|'['
number|'0'
op|']'
name|'not'
name|'in'
string|"'+-'"
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'IRCBadModes'
op|'('
string|"'Malformed modes string: %r'"
op|'%'
op|'('
name|'modes'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'changes'
op|'='
op|'('
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'direction'
op|'='
name|'None'
newline|'\n'
name|'count'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'for'
name|'ch'
name|'in'
name|'modes'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'ch'
name|'in'
string|"'+-'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'count'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IRCBadModes'
op|'('
string|"'Empty mode sequence: %r'"
op|'%'
op|'('
name|'modes'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'direction'
op|'='
string|"'+-'"
op|'.'
name|'index'
op|'('
name|'ch'
op|')'
newline|'\n'
name|'count'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'param'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'ch'
name|'in'
name|'paramModes'
op|'['
name|'direction'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'param'
op|'='
name|'params'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'IRCBadModes'
op|'('
string|"'Not enough parameters: %r'"
op|'%'
op|'('
name|'ch'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'changes'
op|'['
name|'direction'
op|']'
op|'.'
name|'append'
op|'('
op|'('
name|'ch'
op|','
name|'param'
op|')'
op|')'
newline|'\n'
name|'count'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'len'
op|'('
name|'params'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'IRCBadModes'
op|'('
string|"'Too many parameters: %r %r'"
op|'%'
op|'('
name|'modes'
op|','
name|'params'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'count'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'IRCBadModes'
op|'('
string|"'Empty mode sequence: %r'"
op|'%'
op|'('
name|'modes'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'changes'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IRC
dedent|''
name|'class'
name|'IRC'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Internet Relay Chat server protocol.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|buffer
name|'buffer'
op|'='
string|'""'
newline|'\n'
DECL|variable|hostname
name|'hostname'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|encoding
name|'encoding'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'channels'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'hostname'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'hostname'
op|'='
name|'socket'
op|'.'
name|'getfqdn'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|sendLine
dedent|''
dedent|''
name|'def'
name|'sendLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'encoding'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'line'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'line'
op|'='
name|'line'
op|'.'
name|'encode'
op|'('
name|'self'
op|'.'
name|'encoding'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"%s%s%s"'
op|'%'
op|'('
name|'line'
op|','
name|'CR'
op|','
name|'LF'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|sendMessage
dedent|''
name|'def'
name|'sendMessage'
op|'('
name|'self'
op|','
name|'command'
op|','
op|'*'
name|'parameter_list'
op|','
op|'**'
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a line formatted as an IRC message.\n\n        First argument is the command, all subsequent arguments are parameters\n        to that command.  If a prefix is desired, it may be specified with the\n        keyword argument \'prefix\'.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'command'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|'"IRC message requires a command."'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"' '"
name|'in'
name|'command'
name|'or'
name|'command'
op|'['
number|'0'
op|']'
op|'=='
string|"':'"
op|':'
newline|'\n'
comment|'# Not the ONLY way to screw up, but provides a little'
nl|'\n'
comment|'# sanity checking to catch likely dumb mistakes.'
nl|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|'"Somebody screwed up, \'cuz this doesn\'t"'
string|'" look like a command to me: %s"'
op|'%'
name|'command'
newline|'\n'
nl|'\n'
dedent|''
name|'line'
op|'='
name|'string'
op|'.'
name|'join'
op|'('
op|'['
name|'command'
op|']'
op|'+'
name|'list'
op|'('
name|'parameter_list'
op|')'
op|')'
newline|'\n'
name|'if'
name|'prefix'
op|'.'
name|'has_key'
op|'('
string|"'prefix'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
string|'":%s %s"'
op|'%'
op|'('
name|'prefix'
op|'['
string|"'prefix'"
op|']'
op|','
name|'line'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'parameter_list'
op|')'
op|'>'
number|'15'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Message has %d parameters (RFC allows 15):\\n%s"'
op|'%'
nl|'\n'
op|'('
name|'len'
op|'('
name|'parameter_list'
op|')'
op|','
name|'line'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This hack is to support mIRC, which sends LF only, even though the RFC\n        says CRLF.  (Also, the flexibility of LineReceiver to turn "line mode"\n        on and off was not required.)\n        """'
newline|'\n'
name|'lines'
op|'='
op|'('
name|'self'
op|'.'
name|'buffer'
op|'+'
name|'data'
op|')'
op|'.'
name|'split'
op|'('
name|'LF'
op|')'
newline|'\n'
comment|'# Put the (possibly empty) element after the last LF back in the'
nl|'\n'
comment|'# buffer'
nl|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
name|'lines'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'line'
op|')'
op|'<='
number|'2'
op|':'
newline|'\n'
comment|'# This is a blank line, at best.'
nl|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'line'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
name|'CR'
op|':'
newline|'\n'
indent|'                '
name|'line'
op|'='
name|'line'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'prefix'
op|','
name|'command'
op|','
name|'params'
op|'='
name|'parsemsg'
op|'('
name|'line'
op|')'
newline|'\n'
comment|'# mIRC is a big pile of doo-doo'
nl|'\n'
name|'command'
op|'='
name|'command'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
comment|'# DEBUG: log.msg( "%s %s %s" % (prefix, command, params))'
nl|'\n'
nl|'\n'
name|'self'
op|'.'
name|'handleCommand'
op|'('
name|'command'
op|','
name|'prefix'
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|handleCommand
dedent|''
dedent|''
name|'def'
name|'handleCommand'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Determine the function to call for the given command and call it with\n        the given arguments.\n        """'
newline|'\n'
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"irc_%s"'
op|'%'
name|'command'
op|','
name|'None'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'method'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'method'
op|'('
name|'prefix'
op|','
name|'params'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'irc_unknown'
op|'('
name|'prefix'
op|','
name|'command'
op|','
name|'params'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'deferr'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|irc_unknown
dedent|''
dedent|''
name|'def'
name|'irc_unknown'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'command'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called by L{handleCommand} on a command that doesn\'t have a defined\n        handler. Subclasses should override this method.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
name|'command'
op|','
name|'prefix'
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Helper methods'
nl|'\n'
DECL|member|privmsg
dedent|''
name|'def'
name|'privmsg'
op|'('
name|'self'
op|','
name|'sender'
op|','
name|'recip'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a message to a channel or user\n\n        @type sender: C{str} or C{unicode}\n        @param sender: Who is sending this message.  Should be of the form\n            username!ident@hostmask (unless you know better!).\n\n        @type recip: C{str} or C{unicode}\n        @param recip: The recipient of this message.  If a channel, it must\n            start with a channel prefix.\n\n        @type message: C{str} or C{unicode}\n        @param message: The message being sent.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s PRIVMSG %s :%s"'
op|'%'
op|'('
name|'sender'
op|','
name|'recip'
op|','
name|'lowQuote'
op|'('
name|'message'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|notice
dedent|''
name|'def'
name|'notice'
op|'('
name|'self'
op|','
name|'sender'
op|','
name|'recip'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a "notice" to a channel or user.\n\n        Notices differ from privmsgs in that the RFC claims they are different.\n        Robots are supposed to send notices and not respond to them.  Clients\n        typically display notices differently from privmsgs.\n\n        @type sender: C{str} or C{unicode}\n        @param sender: Who is sending this message.  Should be of the form\n            username!ident@hostmask (unless you know better!).\n\n        @type recip: C{str} or C{unicode}\n        @param recip: The recipient of this message.  If a channel, it must\n            start with a channel prefix.\n\n        @type message: C{str} or C{unicode}\n        @param message: The message being sent.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s NOTICE %s :%s"'
op|'%'
op|'('
name|'sender'
op|','
name|'recip'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|action
dedent|''
name|'def'
name|'action'
op|'('
name|'self'
op|','
name|'sender'
op|','
name|'recip'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send an action to a channel or user.\n\n        @type sender: C{str} or C{unicode}\n        @param sender: Who is sending this message.  Should be of the form\n            username!ident@hostmask (unless you know better!).\n\n        @type recip: C{str} or C{unicode}\n        @param recip: The recipient of this message.  If a channel, it must\n            start with a channel prefix.\n\n        @type message: C{str} or C{unicode}\n        @param message: The action being sent.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s ACTION %s :%s"'
op|'%'
op|'('
name|'sender'
op|','
name|'recip'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|topic
dedent|''
name|'def'
name|'topic'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'topic'
op|','
name|'author'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send the topic to a user.\n\n        @type user: C{str} or C{unicode}\n        @param user: The user receiving the topic.  Only their nick name, not\n            the full hostmask.\n\n        @type channel: C{str} or C{unicode}\n        @param channel: The channel for which this is the topic.\n\n        @type topic: C{str} or C{unicode} or C{None}\n        @param topic: The topic string, unquoted, or None if there is no topic.\n\n        @type author: C{str} or C{unicode}\n        @param author: If the topic is being changed, the full username and\n            hostmask of the person changing it.\n        """'
newline|'\n'
name|'if'
name|'author'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'topic'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"':%s %s %s %s :%s'"
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hostname'
op|','
name|'RPL_NOTOPIC'
op|','
name|'user'
op|','
name|'channel'
op|','
string|"'No topic is set.'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s %s %s %s :%s"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hostname'
op|','
name|'RPL_TOPIC'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'lowQuote'
op|'('
name|'topic'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s TOPIC %s :%s"'
op|'%'
op|'('
name|'author'
op|','
name|'channel'
op|','
name|'lowQuote'
op|'('
name|'topic'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|topicAuthor
dedent|''
dedent|''
name|'def'
name|'topicAuthor'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'author'
op|','
name|'date'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send the author of and time at which a topic was set for the given\n        channel.\n\n        This sends a 333 reply message, which is not part of the IRC RFC.\n\n        @type user: C{str} or C{unicode}\n        @param user: The user receiving the topic.  Only their nick name, not\n            the full hostmask.\n\n        @type channel: C{str} or C{unicode}\n        @param channel: The channel for which this information is relevant.\n\n        @type author: C{str} or C{unicode}\n        @param author: The nickname (without hostmask) of the user who last set\n            the topic.\n\n        @type date: C{int}\n        @param date: A POSIX timestamp (number of seconds since the epoch) at\n            which the topic was last set.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"':%s %d %s %s %s %d'"
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hostname'
op|','
number|'333'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'author'
op|','
name|'date'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|names
dedent|''
name|'def'
name|'names'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'names'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send the names of a channel\'s participants to a user.\n\n        @type user: C{str} or C{unicode}\n        @param user: The user receiving the name list.  Only their nick name,\n            not the full hostmask.\n\n        @type channel: C{str} or C{unicode}\n        @param channel: The channel for which this is the namelist.\n\n        @type names: C{list} of C{str} or C{unicode}\n        @param names: The names to send.\n        """'
newline|'\n'
comment|'# XXX If unicode is given, these limits are not quite correct'
nl|'\n'
name|'prefixLength'
op|'='
name|'len'
op|'('
name|'channel'
op|')'
op|'+'
name|'len'
op|'('
name|'user'
op|')'
op|'+'
number|'10'
newline|'\n'
name|'namesLength'
op|'='
number|'512'
op|'-'
name|'prefixLength'
newline|'\n'
nl|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'count'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'count'
op|'+'
name|'len'
op|'('
name|'n'
op|')'
op|'+'
number|'1'
op|'>'
name|'namesLength'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s %s %s = %s :%s"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hostname'
op|','
name|'RPL_NAMREPLY'
op|','
name|'user'
op|','
name|'channel'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
name|'L'
op|')'
op|')'
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
name|'n'
op|']'
newline|'\n'
name|'count'
op|'='
name|'len'
op|'('
name|'n'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'L'
op|'.'
name|'append'
op|'('
name|'n'
op|')'
newline|'\n'
name|'count'
op|'+='
name|'len'
op|'('
name|'n'
op|')'
op|'+'
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'L'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s %s %s = %s :%s"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hostname'
op|','
name|'RPL_NAMREPLY'
op|','
name|'user'
op|','
name|'channel'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
name|'L'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s %s %s %s :End of /NAMES list"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hostname'
op|','
name|'RPL_ENDOFNAMES'
op|','
name|'user'
op|','
name|'channel'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|who
dedent|''
name|'def'
name|'who'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'memberInfo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a list of users participating in a channel.\n\n        @type user: C{str} or C{unicode}\n        @param user: The user receiving this member information.  Only their\n            nick name, not the full hostmask.\n\n        @type channel: C{str} or C{unicode}\n        @param channel: The channel for which this is the member information.\n\n        @type memberInfo: C{list} of C{tuples}\n        @param memberInfo: For each member of the given channel, a 7-tuple\n            containing their username, their hostmask, the server to which they\n            are connected, their nickname, the letter "H" or "G" (standing for\n            "Here" or "Gone"), the hopcount from C{user} to this member, and\n            this member\'s real name.\n        """'
newline|'\n'
name|'for'
name|'info'
name|'in'
name|'memberInfo'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'username'
op|','
name|'hostmask'
op|','
name|'server'
op|','
name|'nickname'
op|','
name|'flag'
op|','
name|'hops'
op|','
name|'realName'
op|')'
op|'='
name|'info'
newline|'\n'
name|'assert'
name|'flag'
name|'in'
op|'('
string|'"H"'
op|','
string|'"G"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s %s %s %s %s %s %s %s %s :%d %s"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hostname'
op|','
name|'RPL_WHOREPLY'
op|','
name|'user'
op|','
name|'channel'
op|','
nl|'\n'
name|'username'
op|','
name|'hostmask'
op|','
name|'server'
op|','
name|'nickname'
op|','
name|'flag'
op|','
name|'hops'
op|','
name|'realName'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s %s %s %s :End of /WHO list."'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hostname'
op|','
name|'RPL_ENDOFWHO'
op|','
name|'user'
op|','
name|'channel'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|whois
dedent|''
name|'def'
name|'whois'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'nick'
op|','
name|'username'
op|','
name|'hostname'
op|','
name|'realName'
op|','
name|'server'
op|','
name|'serverInfo'
op|','
name|'oper'
op|','
name|'idle'
op|','
name|'signOn'
op|','
name|'channels'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send information about the state of a particular user.\n\n        @type user: C{str} or C{unicode}\n        @param user: The user receiving this information.  Only their nick name,\n            not the full hostmask.\n\n        @type nick: C{str} or C{unicode}\n        @param nick: The nickname of the user this information describes.\n\n        @type username: C{str} or C{unicode}\n        @param username: The user\'s username (eg, ident response)\n\n        @type hostname: C{str}\n        @param hostname: The user\'s hostmask\n\n        @type realName: C{str} or C{unicode}\n        @param realName: The user\'s real name\n\n        @type server: C{str} or C{unicode}\n        @param server: The name of the server to which the user is connected\n\n        @type serverInfo: C{str} or C{unicode}\n        @param serverInfo: A descriptive string about that server\n\n        @type oper: C{bool}\n        @param oper: Indicates whether the user is an IRC operator\n\n        @type idle: C{int}\n        @param idle: The number of seconds since the user last sent a message\n\n        @type signOn: C{int}\n        @param signOn: A POSIX timestamp (number of seconds since the epoch)\n            indicating the time the user signed on\n\n        @type channels: C{list} of C{str} or C{unicode}\n        @param channels: A list of the channels which the user is participating in\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s %s %s %s %s %s * :%s"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hostname'
op|','
name|'RPL_WHOISUSER'
op|','
name|'user'
op|','
name|'nick'
op|','
name|'username'
op|','
name|'hostname'
op|','
name|'realName'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s %s %s %s %s :%s"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hostname'
op|','
name|'RPL_WHOISSERVER'
op|','
name|'user'
op|','
name|'nick'
op|','
name|'server'
op|','
name|'serverInfo'
op|')'
op|')'
newline|'\n'
name|'if'
name|'oper'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s %s %s %s :is an IRC operator"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hostname'
op|','
name|'RPL_WHOISOPERATOR'
op|','
name|'user'
op|','
name|'nick'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s %s %s %s %d %d :seconds idle, signon time"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hostname'
op|','
name|'RPL_WHOISIDLE'
op|','
name|'user'
op|','
name|'nick'
op|','
name|'idle'
op|','
name|'signOn'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s %s %s %s :%s"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hostname'
op|','
name|'RPL_WHOISCHANNELS'
op|','
name|'user'
op|','
name|'nick'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
name|'channels'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s %s %s %s :End of WHOIS list."'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hostname'
op|','
name|'RPL_ENDOFWHOIS'
op|','
name|'user'
op|','
name|'nick'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|join
dedent|''
name|'def'
name|'join'
op|'('
name|'self'
op|','
name|'who'
op|','
name|'where'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a join message.\n\n        @type who: C{str} or C{unicode}\n        @param who: The name of the user joining.  Should be of the form\n            username!ident@hostmask (unless you know better!).\n\n        @type where: C{str} or C{unicode}\n        @param where: The channel the user is joining.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s JOIN %s"'
op|'%'
op|'('
name|'who'
op|','
name|'where'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|part
dedent|''
name|'def'
name|'part'
op|'('
name|'self'
op|','
name|'who'
op|','
name|'where'
op|','
name|'reason'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a part message.\n\n        @type who: C{str} or C{unicode}\n        @param who: The name of the user joining.  Should be of the form\n            username!ident@hostmask (unless you know better!).\n\n        @type where: C{str} or C{unicode}\n        @param where: The channel the user is joining.\n\n        @type reason: C{str} or C{unicode}\n        @param reason: A string describing the misery which caused this poor\n            soul to depart.\n        """'
newline|'\n'
name|'if'
name|'reason'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s PART %s :%s"'
op|'%'
op|'('
name|'who'
op|','
name|'where'
op|','
name|'reason'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s PART %s"'
op|'%'
op|'('
name|'who'
op|','
name|'where'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|channelMode
dedent|''
dedent|''
name|'def'
name|'channelMode'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'mode'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send information about the mode of a channel.\n\n        @type user: C{str} or C{unicode}\n        @param user: The user receiving the name list.  Only their nick name,\n            not the full hostmask.\n\n        @type channel: C{str} or C{unicode}\n        @param channel: The channel for which this is the namelist.\n\n        @type mode: C{str}\n        @param mode: A string describing this channel\'s modes.\n\n        @param args: Any additional arguments required by the modes.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'":%s %s %s %s %s %s"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'hostname'
op|','
name|'RPL_CHANNELMODEIS'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'mode'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
name|'args'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServerSupportedFeatures
dedent|''
dedent|''
name|'class'
name|'ServerSupportedFeatures'
op|'('
name|'_CommandDispatcherMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Handle ISUPPORT messages.\n\n    Feature names match those in the ISUPPORT RFC draft identically.\n\n    Information regarding the specifics of ISUPPORT was gleaned from\n    <http://www.irc.org/tech_docs/draft-brocklesby-irc-isupport-03.txt>.\n    """'
newline|'\n'
DECL|variable|prefix
name|'prefix'
op|'='
string|"'isupport'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_features'
op|'='
op|'{'
nl|'\n'
string|"'CHANNELLEN'"
op|':'
number|'200'
op|','
nl|'\n'
string|"'CHANTYPES'"
op|':'
name|'tuple'
op|'('
string|"'#&'"
op|')'
op|','
nl|'\n'
string|"'MODES'"
op|':'
number|'3'
op|','
nl|'\n'
string|"'NICKLEN'"
op|':'
number|'9'
op|','
nl|'\n'
string|"'PREFIX'"
op|':'
name|'self'
op|'.'
name|'_parsePrefixParam'
op|'('
string|"'(ovh)@+%'"
op|')'
op|','
nl|'\n'
comment|'# The ISUPPORT draft explicitly says that there is no default for'
nl|'\n'
comment|"# CHANMODES, but we're defaulting it here to handle the case where"
nl|'\n'
comment|"# the IRC server doesn't send us any ISUPPORT information, since"
nl|'\n'
comment|'# IRCClient.getChannelModeParams relies on this value.'
nl|'\n'
string|"'CHANMODES'"
op|':'
name|'self'
op|'.'
name|'_parseChanModesParam'
op|'('
op|'['
string|"'b'"
op|','
string|"''"
op|','
string|"'lk'"
op|']'
op|')'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_splitParamArgs
dedent|''
name|'def'
name|'_splitParamArgs'
op|'('
name|'cls'
op|','
name|'params'
op|','
name|'valueProcessor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Split ISUPPORT parameter arguments.\n\n        Values can optionally be processed by C{valueProcessor}.\n\n        For example::\n\n            >>> ServerSupportedFeatures._splitParamArgs([\'A:1\', \'B:2\'])\n            ((\'A\', \'1\'), (\'B\', \'2\'))\n\n        @type params: C{iterable} of C{str}\n\n        @type valueProcessor: C{callable} taking {str}\n        @param valueProcessor: Callable to process argument values, or C{None}\n            to perform no processing\n\n        @rtype: C{list} of C{(str, object)}\n        @return: Sequence of C{(name, processedValue)}\n        """'
newline|'\n'
name|'if'
name|'valueProcessor'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'valueProcessor'
op|'='
name|'lambda'
name|'x'
op|':'
name|'x'
newline|'\n'
nl|'\n'
DECL|function|_parse
dedent|''
name|'def'
name|'_parse'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'param'
name|'in'
name|'params'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"':'"
name|'not'
name|'in'
name|'param'
op|':'
newline|'\n'
indent|'                    '
name|'param'
op|'+='
string|"':'"
newline|'\n'
dedent|''
name|'a'
op|','
name|'b'
op|'='
name|'param'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'yield'
name|'a'
op|','
name|'valueProcessor'
op|'('
name|'b'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'list'
op|'('
name|'_parse'
op|'('
op|')'
op|')'
newline|'\n'
DECL|variable|_splitParamArgs
dedent|''
name|'_splitParamArgs'
op|'='
name|'classmethod'
op|'('
name|'_splitParamArgs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_unescapeParamValue
name|'def'
name|'_unescapeParamValue'
op|'('
name|'cls'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Unescape an ISUPPORT parameter.\n\n        The only form of supported escape is C{\\\\xHH}, where HH must be a valid\n        2-digit hexadecimal number.\n\n        @rtype: C{str}\n        """'
newline|'\n'
DECL|function|_unescape
name|'def'
name|'_unescape'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'parts'
op|'='
name|'value'
op|'.'
name|'split'
op|'('
string|"'\\\\x'"
op|')'
newline|'\n'
comment|'# The first part can never be preceeded by the escape.'
nl|'\n'
name|'yield'
name|'parts'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'for'
name|'s'
name|'in'
name|'parts'
op|':'
newline|'\n'
indent|'                '
name|'octet'
op|','
name|'rest'
op|'='
name|'s'
op|'['
op|':'
number|'2'
op|']'
op|','
name|'s'
op|'['
number|'2'
op|':'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'octet'
op|'='
name|'int'
op|'('
name|'octet'
op|','
number|'16'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ValueError'
op|'('
string|"'Invalid hex octet: %r'"
op|'%'
op|'('
name|'octet'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'yield'
name|'chr'
op|'('
name|'octet'
op|')'
op|'+'
name|'rest'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
string|"'\\\\x'"
name|'not'
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'value'
newline|'\n'
dedent|''
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'_unescape'
op|'('
op|')'
op|')'
newline|'\n'
DECL|variable|_unescapeParamValue
dedent|''
name|'_unescapeParamValue'
op|'='
name|'classmethod'
op|'('
name|'_unescapeParamValue'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_splitParam
name|'def'
name|'_splitParam'
op|'('
name|'cls'
op|','
name|'param'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Split an ISUPPORT parameter.\n\n        @type param: C{str}\n\n        @rtype: C{(str, list)}\n        @return C{(key, arguments)}\n        """'
newline|'\n'
name|'if'
string|"'='"
name|'not'
name|'in'
name|'param'
op|':'
newline|'\n'
indent|'            '
name|'param'
op|'+='
string|"'='"
newline|'\n'
dedent|''
name|'key'
op|','
name|'value'
op|'='
name|'param'
op|'.'
name|'split'
op|'('
string|"'='"
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'key'
op|','
name|'map'
op|'('
name|'cls'
op|'.'
name|'_unescapeParamValue'
op|','
name|'value'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|')'
newline|'\n'
DECL|variable|_splitParam
dedent|''
name|'_splitParam'
op|'='
name|'classmethod'
op|'('
name|'_splitParam'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_parsePrefixParam
name|'def'
name|'_parsePrefixParam'
op|'('
name|'cls'
op|','
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse the ISUPPORT "PREFIX" parameter.\n\n        The order in which the parameter arguments appear is significant, the\n        earlier a mode appears the more privileges it gives.\n\n        @rtype: C{dict} mapping C{str} to C{(str, int)}\n        @return: A dictionary mapping a mode character to a two-tuple of\n            C({symbol, priority)}, the lower a priority (the lowest being\n            C{0}) the more privileges it gives\n        """'
newline|'\n'
name|'if'
name|'not'
name|'prefix'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'prefix'
op|'['
number|'0'
op|']'
op|'!='
string|"'('"
name|'and'
string|"')'"
name|'not'
name|'in'
name|'prefix'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|"'Malformed PREFIX parameter'"
op|')'
newline|'\n'
dedent|''
name|'modes'
op|','
name|'symbols'
op|'='
name|'prefix'
op|'.'
name|'split'
op|'('
string|"')'"
op|','
number|'1'
op|')'
newline|'\n'
name|'symbols'
op|'='
name|'zip'
op|'('
name|'symbols'
op|','
name|'xrange'
op|'('
name|'len'
op|'('
name|'symbols'
op|')'
op|')'
op|')'
newline|'\n'
name|'modes'
op|'='
name|'modes'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'zip'
op|'('
name|'modes'
op|','
name|'symbols'
op|')'
op|')'
newline|'\n'
DECL|variable|_parsePrefixParam
dedent|''
name|'_parsePrefixParam'
op|'='
name|'classmethod'
op|'('
name|'_parsePrefixParam'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_parseChanModesParam
name|'def'
name|'_parseChanModesParam'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse the ISUPPORT "CHANMODES" parameter.\n\n        See L{isupport_CHANMODES} for a detailed explanation of this parameter.\n        """'
newline|'\n'
name|'names'
op|'='
op|'('
string|"'addressModes'"
op|','
string|"'param'"
op|','
string|"'setParam'"
op|','
string|"'noParam'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'params'
op|')'
op|'>'
name|'len'
op|'('
name|'names'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
nl|'\n'
string|"'Expecting a maximum of %d channel mode parameters, got %d'"
op|'%'
op|'('
nl|'\n'
name|'len'
op|'('
name|'names'
op|')'
op|','
name|'len'
op|'('
name|'params'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'items'
op|'='
name|'map'
op|'('
name|'lambda'
name|'key'
op|','
name|'value'
op|':'
op|'('
name|'key'
op|','
name|'value'
name|'or'
string|"''"
op|')'
op|','
name|'names'
op|','
name|'params'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'items'
op|')'
newline|'\n'
DECL|variable|_parseChanModesParam
dedent|''
name|'_parseChanModesParam'
op|'='
name|'classmethod'
op|'('
name|'_parseChanModesParam'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getFeature
name|'def'
name|'getFeature'
op|'('
name|'self'
op|','
name|'feature'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a server supported feature\'s value.\n\n        A feature with the value C{None} is equivalent to the feature being\n        unsupported.\n\n        @type feature: C{str}\n        @param feature: Feature name\n\n        @type default: C{object}\n        @param default: The value to default to, assuming that C{feature}\n            is not supported\n\n        @return: Feature value\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_features'
op|'.'
name|'get'
op|'('
name|'feature'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|hasFeature
dedent|''
name|'def'
name|'hasFeature'
op|'('
name|'self'
op|','
name|'feature'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Determine whether a feature is supported or not.\n\n        @rtype: C{bool}\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'getFeature'
op|'('
name|'feature'
op|')'
name|'is'
name|'not'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|parse
dedent|''
name|'def'
name|'parse'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse ISUPPORT parameters.\n\n        If an unknown parameter is encountered, it is simply added to the\n        dictionary, keyed by its name, as a tuple of the parameters provided.\n\n        @type params: C{iterable} of C{str}\n        @param params: Iterable of ISUPPORT parameters to parse\n        """'
newline|'\n'
name|'for'
name|'param'
name|'in'
name|'params'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|','
name|'value'
op|'='
name|'self'
op|'.'
name|'_splitParam'
op|'('
name|'param'
op|')'
newline|'\n'
name|'if'
name|'key'
op|'.'
name|'startswith'
op|'('
string|"'-'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_features'
op|'.'
name|'pop'
op|'('
name|'key'
op|'['
number|'1'
op|':'
op|']'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_features'
op|'['
name|'key'
op|']'
op|'='
name|'self'
op|'.'
name|'dispatch'
op|'('
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_unknown
dedent|''
dedent|''
dedent|''
name|'def'
name|'isupport_unknown'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Unknown ISUPPORT parameter.\n        """'
newline|'\n'
name|'return'
name|'tuple'
op|'('
name|'params'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_CHANLIMIT
dedent|''
name|'def'
name|'isupport_CHANLIMIT'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The maximum number of each channel type a user may join.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_splitParamArgs'
op|'('
name|'params'
op|','
name|'_intOrDefault'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_CHANMODES
dedent|''
name|'def'
name|'isupport_CHANMODES'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Available channel modes.\n\n        There are 4 categories of channel mode::\n\n            addressModes - Modes that add or remove an address to or from a\n            list, these modes always take a parameter.\n\n            param - Modes that change a setting on a channel, these modes\n            always take a parameter.\n\n            setParam - Modes that change a setting on a channel, these modes\n            only take a parameter when being set.\n\n            noParam - Modes that change a setting on a channel, these modes\n            never take a parameter.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_parseChanModesParam'
op|'('
name|'params'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'getFeature'
op|'('
string|"'CHANMODES'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_CHANNELLEN
dedent|''
dedent|''
name|'def'
name|'isupport_CHANNELLEN'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Maximum length of a channel name a client may create.\n        """'
newline|'\n'
name|'return'
name|'_intOrDefault'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|'.'
name|'getFeature'
op|'('
string|"'CHANNELLEN'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_CHANTYPES
dedent|''
name|'def'
name|'isupport_CHANTYPES'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Valid channel prefixes.\n        """'
newline|'\n'
name|'return'
name|'tuple'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_EXCEPTS
dedent|''
name|'def'
name|'isupport_EXCEPTS'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mode character for "ban exceptions".\n\n        The presence of this parameter indicates that the server supports\n        this functionality.\n        """'
newline|'\n'
name|'return'
name|'params'
op|'['
number|'0'
op|']'
name|'or'
string|"'e'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_IDCHAN
dedent|''
name|'def'
name|'isupport_IDCHAN'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Safe channel identifiers.\n\n        The presence of this parameter indicates that the server supports\n        this functionality.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_splitParamArgs'
op|'('
name|'params'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_INVEX
dedent|''
name|'def'
name|'isupport_INVEX'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mode character for "invite exceptions".\n\n        The presence of this parameter indicates that the server supports\n        this functionality.\n        """'
newline|'\n'
name|'return'
name|'params'
op|'['
number|'0'
op|']'
name|'or'
string|"'I'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_KICKLEN
dedent|''
name|'def'
name|'isupport_KICKLEN'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Maximum length of a kick message a client may provide.\n        """'
newline|'\n'
name|'return'
name|'_intOrDefault'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_MAXLIST
dedent|''
name|'def'
name|'isupport_MAXLIST'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Maximum number of "list modes" a client may set on a channel at once.\n\n        List modes are identified by the "addressModes" key in CHANMODES.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_splitParamArgs'
op|'('
name|'params'
op|','
name|'_intOrDefault'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_MODES
dedent|''
name|'def'
name|'isupport_MODES'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Maximum number of modes accepting parameters that may be sent, by a\n        client, in a single MODE command.\n        """'
newline|'\n'
name|'return'
name|'_intOrDefault'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_NETWORK
dedent|''
name|'def'
name|'isupport_NETWORK'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        IRC network name.\n        """'
newline|'\n'
name|'return'
name|'params'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_NICKLEN
dedent|''
name|'def'
name|'isupport_NICKLEN'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Maximum length of a nickname the client may use.\n        """'
newline|'\n'
name|'return'
name|'_intOrDefault'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|'.'
name|'getFeature'
op|'('
string|"'NICKLEN'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_PREFIX
dedent|''
name|'def'
name|'isupport_PREFIX'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mapping of channel modes that clients may have to status flags.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_parsePrefixParam'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'getFeature'
op|'('
string|"'PREFIX'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_SAFELIST
dedent|''
dedent|''
name|'def'
name|'isupport_SAFELIST'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Flag indicating that a client may request a LIST without being\n        disconnected due to the large amount of data generated.\n        """'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_STATUSMSG
dedent|''
name|'def'
name|'isupport_STATUSMSG'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The server supports sending messages to only to clients on a channel\n        with a specific status.\n        """'
newline|'\n'
name|'return'
name|'params'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_TARGMAX
dedent|''
name|'def'
name|'isupport_TARGMAX'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Maximum number of targets allowable for commands that accept multiple\n        targets.\n        """'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'self'
op|'.'
name|'_splitParamArgs'
op|'('
name|'params'
op|','
name|'_intOrDefault'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|isupport_TOPICLEN
dedent|''
name|'def'
name|'isupport_TOPICLEN'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Maximum length of a topic that may be set.\n        """'
newline|'\n'
name|'return'
name|'_intOrDefault'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IRCClient
dedent|''
dedent|''
name|'class'
name|'IRCClient'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Internet Relay Chat client protocol, with sprinkles.\n\n    In addition to providing an interface for an IRC client protocol,\n    this class also contains reasonable implementations of many common\n    CTCP methods.\n\n    TODO\n    ====\n     - Limit the length of messages sent (because the IRC server probably\n       does).\n     - Add flood protection/rate limiting for my CTCP replies.\n     - NickServ cooperation.  (a mix-in?)\n     - Heartbeat.  The transport may die in such a way that it does not realize\n       it is dead until it is written to.  Sending something (like "PING\n       this.irc-host.net") during idle peroids would alleviate that.  If\n       you\'re concerned with the stability of the host as well as that of the\n       transport, you might care to watch for the corresponding PONG.\n\n    @ivar nickname: Nickname the client will use.\n    @ivar password: Password used to log on to the server.  May be C{None}.\n    @ivar realname: Supplied to the server during login as the "Real name"\n        or "ircname".  May be C{None}.\n    @ivar username: Supplied to the server during login as the "User name".\n        May be C{None}\n\n    @ivar userinfo: Sent in reply to a C{USERINFO} CTCP query.  If C{None}, no\n        USERINFO reply will be sent.\n        "This is used to transmit a string which is settable by\n        the user (and never should be set by the client)."\n    @ivar fingerReply: Sent in reply to a C{FINGER} CTCP query.  If C{None}, no\n        FINGER reply will be sent.\n    @type fingerReply: Callable or String\n\n    @ivar versionName: CTCP VERSION reply, client name.  If C{None}, no VERSION\n        reply will be sent.\n    @type versionName: C{str}, or None.\n    @ivar versionNum: CTCP VERSION reply, client version.\n    @type versionNum: C{str}, or None.\n    @ivar versionEnv: CTCP VERSION reply, environment the client is running in.\n    @type versionEnv: C{str}, or None.\n\n    @ivar sourceURL: CTCP SOURCE reply, a URL where the source code of this\n        client may be found.  If C{None}, no SOURCE reply will be sent.\n\n    @ivar lineRate: Minimum delay between lines sent to the server.  If\n        C{None}, no delay will be imposed.\n    @type lineRate: Number of Seconds.\n\n    @ivar motd: Either L{None} or, between receipt of I{RPL_MOTDSTART} and\n        I{RPL_ENDOFMOTD}, a L{list} of L{str}, each of which is the content\n        of an I{RPL_MOTD} message.\n\n    @ivar erroneousNickFallback: Default nickname assigned when an unregistered\n        client triggers an C{ERR_ERRONEUSNICKNAME} while trying to register\n        with an illegal nickname.\n    @type erroneousNickFallback: C{str}\n\n    @ivar _registered: Whether or not the user is registered. It becomes True\n        once a welcome has been received from the server.\n    @type _registered: C{bool}\n\n    @ivar _attemptedNick: The nickname that will try to get registered. It may\n        change if it is illegal or already taken. L{nickname} becomes the\n        L{_attemptedNick} that is successfully registered.\n    @type _attemptedNick:  C{str}\n\n    @type supported: L{ServerSupportedFeatures}\n    @ivar supported: Available ISUPPORT features on the server\n    """'
newline|'\n'
DECL|variable|motd
name|'motd'
op|'='
name|'None'
newline|'\n'
DECL|variable|nickname
name|'nickname'
op|'='
string|"'irc'"
newline|'\n'
DECL|variable|password
name|'password'
op|'='
name|'None'
newline|'\n'
DECL|variable|realname
name|'realname'
op|'='
name|'None'
newline|'\n'
DECL|variable|username
name|'username'
op|'='
name|'None'
newline|'\n'
comment|'### Responses to various CTCP queries.'
nl|'\n'
nl|'\n'
DECL|variable|userinfo
name|'userinfo'
op|'='
name|'None'
newline|'\n'
comment|'# fingerReply is a callable returning a string, or a str()able object.'
nl|'\n'
DECL|variable|fingerReply
name|'fingerReply'
op|'='
name|'None'
newline|'\n'
DECL|variable|versionName
name|'versionName'
op|'='
name|'None'
newline|'\n'
DECL|variable|versionNum
name|'versionNum'
op|'='
name|'None'
newline|'\n'
DECL|variable|versionEnv
name|'versionEnv'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|sourceURL
name|'sourceURL'
op|'='
string|'"http://twistedmatrix.com/downloads/"'
newline|'\n'
nl|'\n'
DECL|variable|dcc_destdir
name|'dcc_destdir'
op|'='
string|"'.'"
newline|'\n'
DECL|variable|dcc_sessions
name|'dcc_sessions'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# If this is false, no attempt will be made to identify'
nl|'\n'
comment|'# ourself to the server.'
nl|'\n'
DECL|variable|performLogin
name|'performLogin'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|variable|lineRate
name|'lineRate'
op|'='
name|'None'
newline|'\n'
DECL|variable|_queue
name|'_queue'
op|'='
name|'None'
newline|'\n'
DECL|variable|_queueEmptying
name|'_queueEmptying'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|delimiter
name|'delimiter'
op|'='
string|"'\\n'"
comment|"# '\\r\\n' will also work (see dataReceived)"
newline|'\n'
nl|'\n'
name|'__pychecker__'
op|'='
string|"'unusednames=params,prefix,channel'"
newline|'\n'
nl|'\n'
DECL|variable|_registered
name|'_registered'
op|'='
name|'False'
newline|'\n'
DECL|variable|_attemptedNick
name|'_attemptedNick'
op|'='
string|"''"
newline|'\n'
DECL|variable|erroneousNickFallback
name|'erroneousNickFallback'
op|'='
string|"'defaultnick'"
newline|'\n'
nl|'\n'
DECL|member|_reallySendLine
name|'def'
name|'_reallySendLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'basic'
op|'.'
name|'LineReceiver'
op|'.'
name|'sendLine'
op|'('
name|'self'
op|','
name|'lowQuote'
op|'('
name|'line'
op|')'
op|'+'
string|"'\\r'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendLine
dedent|''
name|'def'
name|'sendLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'lineRate'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_reallySendLine'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_queue'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_queueEmptying'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_sendLine'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_sendLine
dedent|''
dedent|''
dedent|''
name|'def'
name|'_sendLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_queue'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_reallySendLine'
op|'('
name|'self'
op|'.'
name|'_queue'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_queueEmptying'
op|'='
name|'reactor'
op|'.'
name|'callLater'
op|'('
name|'self'
op|'.'
name|'lineRate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_sendLine'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_queueEmptying'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'### Interface level client->user output methods'
nl|'\n'
comment|'###'
nl|'\n'
comment|"### You'll want to override these."
nl|'\n'
nl|'\n'
comment|'### Methods relating to the server itself'
nl|'\n'
nl|'\n'
DECL|member|created
dedent|''
dedent|''
name|'def'
name|'created'
op|'('
name|'self'
op|','
name|'when'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called with creation date information about the server, usually at logon.\n\n        @type when: C{str}\n        @param when: A string describing when the server was created, probably.\n        """'
newline|'\n'
nl|'\n'
DECL|member|yourHost
dedent|''
name|'def'
name|'yourHost'
op|'('
name|'self'
op|','
name|'info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called with daemon information about the server, usually at logon.\n\n        @type info: C{str}\n        @param when: A string describing what software the server is running, probably.\n        """'
newline|'\n'
nl|'\n'
DECL|member|myInfo
dedent|''
name|'def'
name|'myInfo'
op|'('
name|'self'
op|','
name|'servername'
op|','
name|'version'
op|','
name|'umodes'
op|','
name|'cmodes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called with information about the server, usually at logon.\n\n        @type servername: C{str}\n        @param servername: The hostname of this server.\n\n        @type version: C{str}\n        @param version: A description of what software this server runs.\n\n        @type umodes: C{str}\n        @param umodes: All the available user modes.\n\n        @type cmodes: C{str}\n        @param cmodes: All the available channel modes.\n        """'
newline|'\n'
nl|'\n'
DECL|member|luserClient
dedent|''
name|'def'
name|'luserClient'
op|'('
name|'self'
op|','
name|'info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called with information about the number of connections, usually at logon.\n\n        @type info: C{str}\n        @param info: A description of the number of clients and servers\n        connected to the network, probably.\n        """'
newline|'\n'
nl|'\n'
DECL|member|bounce
dedent|''
name|'def'
name|'bounce'
op|'('
name|'self'
op|','
name|'info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called with information about where the client should reconnect.\n\n        @type info: C{str}\n        @param info: A plaintext description of the address that should be\n        connected to.\n        """'
newline|'\n'
nl|'\n'
DECL|member|isupport
dedent|''
name|'def'
name|'isupport'
op|'('
name|'self'
op|','
name|'options'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called with various information about what the server supports.\n\n        @type options: C{list} of C{str}\n        @param options: Descriptions of features or limits of the server, possibly\n        in the form "NAME=VALUE".\n        """'
newline|'\n'
nl|'\n'
DECL|member|luserChannels
dedent|''
name|'def'
name|'luserChannels'
op|'('
name|'self'
op|','
name|'channels'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called with the number of channels existant on the server.\n\n        @type channels: C{int}\n        """'
newline|'\n'
nl|'\n'
DECL|member|luserOp
dedent|''
name|'def'
name|'luserOp'
op|'('
name|'self'
op|','
name|'ops'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called with the number of ops logged on to the server.\n\n        @type ops: C{int}\n        """'
newline|'\n'
nl|'\n'
DECL|member|luserMe
dedent|''
name|'def'
name|'luserMe'
op|'('
name|'self'
op|','
name|'info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called with information about the server connected to.\n\n        @type info: C{str}\n        @param info: A plaintext string describing the number of users and servers\n        connected to this server.\n        """'
newline|'\n'
nl|'\n'
comment|'### Methods involving me directly'
nl|'\n'
nl|'\n'
DECL|member|privmsg
dedent|''
name|'def'
name|'privmsg'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when I have a message from a user to me or a channel.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|joined
dedent|''
name|'def'
name|'joined'
op|'('
name|'self'
op|','
name|'channel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when I finish joining a channel.\n\n        channel has the starting character (C{\'#\'}, C{\'&\'}, C{\'!\'}, or C{\'+\'})\n        intact.\n        """'
newline|'\n'
nl|'\n'
DECL|member|left
dedent|''
name|'def'
name|'left'
op|'('
name|'self'
op|','
name|'channel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when I have left a channel.\n\n        channel has the starting character (C{\'#\'}, C{\'&\'}, C{\'!\'}, or C{\'+\'})\n        intact.\n        """'
newline|'\n'
nl|'\n'
DECL|member|noticed
dedent|''
name|'def'
name|'noticed'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when I have a notice from a user to me or a channel.\n\n        By default, this is equivalent to IRCClient.privmsg, but if your\n        client makes any automated replies, you must override this!\n        From the RFC::\n\n            The difference between NOTICE and PRIVMSG is that\n            automatic replies MUST NEVER be sent in response to a\n            NOTICE message. [...] The object of this rule is to avoid\n            loops between clients automatically sending something in\n            response to something it received.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'privmsg'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|modeChanged
dedent|''
name|'def'
name|'modeChanged'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'set'
op|','
name|'modes'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when users or channel\'s modes are changed.\n\n        @type user: C{str}\n        @param user: The user and hostmask which instigated this change.\n\n        @type channel: C{str}\n        @param channel: The channel where the modes are changed. If args is\n        empty the channel for which the modes are changing. If the changes are\n        at server level it could be equal to C{user}.\n\n        @type set: C{bool} or C{int}\n        @param set: True if the mode(s) is being added, False if it is being\n        removed. If some modes are added and others removed at the same time\n        this function will be called twice, the first time with all the added\n        modes, the second with the removed ones. (To change this behaviour\n        override the irc_MODE method)\n\n        @type modes: C{str}\n        @param modes: The mode or modes which are being changed.\n\n        @type args: C{tuple}\n        @param args: Any additional information required for the mode\n        change.\n        """'
newline|'\n'
nl|'\n'
DECL|member|pong
dedent|''
name|'def'
name|'pong'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'secs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called with the results of a CTCP PING query.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|signedOn
dedent|''
name|'def'
name|'signedOn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called after sucessfully signing on to the server.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|kickedFrom
dedent|''
name|'def'
name|'kickedFrom'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'kicker'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when I am kicked from a channel.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|nickChanged
dedent|''
name|'def'
name|'nickChanged'
op|'('
name|'self'
op|','
name|'nick'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when my nick has been changed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'nickname'
op|'='
name|'nick'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'### Things I observe other people doing in a channel.'
nl|'\n'
nl|'\n'
DECL|member|userJoined
dedent|''
name|'def'
name|'userJoined'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when I see another user joining a channel.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|userLeft
dedent|''
name|'def'
name|'userLeft'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when I see another user leaving a channel.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|userQuit
dedent|''
name|'def'
name|'userQuit'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'quitMessage'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when I see another user disconnect from the network.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|userKicked
dedent|''
name|'def'
name|'userKicked'
op|'('
name|'self'
op|','
name|'kickee'
op|','
name|'channel'
op|','
name|'kicker'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when I observe someone else being kicked from a channel.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|action
dedent|''
name|'def'
name|'action'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when I see a user perform an ACTION on a channel.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|topicUpdated
dedent|''
name|'def'
name|'topicUpdated'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'newTopic'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""In channel, user changed the topic to newTopic.\n\n        Also called when first joining a channel.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|userRenamed
dedent|''
name|'def'
name|'userRenamed'
op|'('
name|'self'
op|','
name|'oldname'
op|','
name|'newname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A user changed their name from oldname to newname.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
comment|'### Information from the server.'
nl|'\n'
nl|'\n'
DECL|member|receivedMOTD
dedent|''
name|'def'
name|'receivedMOTD'
op|'('
name|'self'
op|','
name|'motd'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""I received a message-of-the-day banner from the server.\n\n        motd is a list of strings, where each string was sent as a seperate\n        message from the server. To display, you might want to use::\n\n            \'\\\\n\'.join(motd)\n\n        to get a nicely formatted string.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
comment|'### user input commands, client->server'
nl|'\n'
comment|'### Your client will want to invoke these.'
nl|'\n'
nl|'\n'
DECL|member|join
dedent|''
name|'def'
name|'join'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'key'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Join a channel.\n\n        @type channel: C{str}\n        @param channel: The name of the channel to join. If it has no prefix,\n            C{\'#\'} will be prepended to it.\n        @type key: C{str}\n        @param key: If specified, the key used to join the channel.\n        """'
newline|'\n'
name|'if'
name|'channel'
op|'['
number|'0'
op|']'
name|'not'
name|'in'
name|'CHANNEL_PREFIXES'
op|':'
newline|'\n'
indent|'            '
name|'channel'
op|'='
string|"'#'"
op|'+'
name|'channel'
newline|'\n'
dedent|''
name|'if'
name|'key'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"JOIN %s %s"'
op|'%'
op|'('
name|'channel'
op|','
name|'key'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"JOIN %s"'
op|'%'
op|'('
name|'channel'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|leave
dedent|''
dedent|''
name|'def'
name|'leave'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'reason'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Leave a channel.\n\n        @type channel: C{str}\n        @param channel: The name of the channel to leave. If it has no prefix,\n            C{\'#\'} will be prepended to it.\n        @type reason: C{str}\n        @param reason: If given, the reason for leaving.\n        """'
newline|'\n'
name|'if'
name|'channel'
op|'['
number|'0'
op|']'
name|'not'
name|'in'
name|'CHANNEL_PREFIXES'
op|':'
newline|'\n'
indent|'            '
name|'channel'
op|'='
string|"'#'"
op|'+'
name|'channel'
newline|'\n'
dedent|''
name|'if'
name|'reason'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"PART %s :%s"'
op|'%'
op|'('
name|'channel'
op|','
name|'reason'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"PART %s"'
op|'%'
op|'('
name|'channel'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|kick
dedent|''
dedent|''
name|'def'
name|'kick'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'user'
op|','
name|'reason'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Attempt to kick a user from a channel.\n\n        @type channel: C{str}\n        @param channel: The name of the channel to kick the user from. If it has\n            no prefix, C{\'#\'} will be prepended to it.\n        @type user: C{str}\n        @param user: The nick of the user to kick.\n        @type reason: C{str}\n        @param reason: If given, the reason for kicking the user.\n        """'
newline|'\n'
name|'if'
name|'channel'
op|'['
number|'0'
op|']'
name|'not'
name|'in'
name|'CHANNEL_PREFIXES'
op|':'
newline|'\n'
indent|'            '
name|'channel'
op|'='
string|"'#'"
op|'+'
name|'channel'
newline|'\n'
dedent|''
name|'if'
name|'reason'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"KICK %s %s :%s"'
op|'%'
op|'('
name|'channel'
op|','
name|'user'
op|','
name|'reason'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"KICK %s %s"'
op|'%'
op|'('
name|'channel'
op|','
name|'user'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|part
dedent|''
dedent|''
name|'part'
op|'='
name|'leave'
newline|'\n'
nl|'\n'
DECL|member|topic
name|'def'
name|'topic'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'topic'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Attempt to set the topic of the given channel, or ask what it is.\n\n        If topic is None, then I sent a topic query instead of trying to set the\n        topic. The server should respond with a TOPIC message containing the\n        current topic of the given channel.\n\n        @type channel: C{str}\n        @param channel: The name of the channel to change the topic on. If it\n            has no prefix, C{\'#\'} will be prepended to it.\n        @type topic: C{str}\n        @param topic: If specified, what to set the topic to.\n        """'
newline|'\n'
comment|'# << TOPIC #xtestx :fff'
nl|'\n'
name|'if'
name|'channel'
op|'['
number|'0'
op|']'
name|'not'
name|'in'
name|'CHANNEL_PREFIXES'
op|':'
newline|'\n'
indent|'            '
name|'channel'
op|'='
string|"'#'"
op|'+'
name|'channel'
newline|'\n'
dedent|''
name|'if'
name|'topic'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"TOPIC %s :%s"'
op|'%'
op|'('
name|'channel'
op|','
name|'topic'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"TOPIC %s"'
op|'%'
op|'('
name|'channel'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|mode
dedent|''
dedent|''
name|'def'
name|'mode'
op|'('
name|'self'
op|','
name|'chan'
op|','
name|'set'
op|','
name|'modes'
op|','
name|'limit'
op|'='
name|'None'
op|','
name|'user'
op|'='
name|'None'
op|','
name|'mask'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Change the modes on a user or channel.\n\n        The C{limit}, C{user}, and C{mask} parameters are mutually exclusive.\n\n        @type chan: C{str}\n        @param chan: The name of the channel to operate on.\n        @type set: C{bool}\n        @param set: True to give the user or channel permissions and False to\n            remove them.\n        @type modes: C{str}\n        @param modes: The mode flags to set on the user or channel.\n        @type limit: C{int}\n        @param limit: In conjuction with the C{\'l\'} mode flag, limits the\n             number of users on the channel.\n        @type user: C{str}\n        @param user: The user to change the mode on.\n        @type mask: C{str}\n        @param mask: In conjuction with the C{\'b\'} mode flag, sets a mask of\n            users to be banned from the channel.\n        """'
newline|'\n'
name|'if'
name|'set'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
string|"'MODE %s +%s'"
op|'%'
op|'('
name|'chan'
op|','
name|'modes'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
string|"'MODE %s -%s'"
op|'%'
op|'('
name|'chan'
op|','
name|'modes'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'limit'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
string|"'%s %d'"
op|'%'
op|'('
name|'line'
op|','
name|'limit'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'user'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
string|"'%s %s'"
op|'%'
op|'('
name|'line'
op|','
name|'user'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'mask'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
string|"'%s %s'"
op|'%'
op|'('
name|'line'
op|','
name|'mask'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|say
dedent|''
name|'def'
name|'say'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'message'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a message to a channel\n\n        @type channel: C{str}\n        @param channel: The channel to say the message on. If it has no prefix,\n            C{\'#\'} will be prepended to it.\n        @type message: C{str}\n        @param message: The message to say.\n        @type length: C{int}\n        @param length: The maximum number of octets to send at a time.  This has\n            the effect of turning a single call to C{msg()} into multiple\n            commands to the server.  This is useful when long messages may be\n            sent that would otherwise cause the server to kick us off or\n            silently truncate the text we are sending.  If None is passed, the\n            entire message is always send in one command.\n        """'
newline|'\n'
name|'if'
name|'channel'
op|'['
number|'0'
op|']'
name|'not'
name|'in'
name|'CHANNEL_PREFIXES'
op|':'
newline|'\n'
indent|'            '
name|'channel'
op|'='
string|"'#'"
op|'+'
name|'channel'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'msg'
op|'('
name|'channel'
op|','
name|'message'
op|','
name|'length'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|msg
dedent|''
name|'def'
name|'msg'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'message'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a message to a user or channel.\n\n        @type user: C{str}\n        @param user: The username or channel name to which to direct the\n        message.\n\n        @type message: C{str}\n        @param message: The text to send\n\n        @type length: C{int}\n        @param length: The maximum number of octets to send at a time.  This\n        has the effect of turning a single call to msg() into multiple\n        commands to the server.  This is useful when long messages may be\n        sent that would otherwise cause the server to kick us off or silently\n        truncate the text we are sending.  If None is passed, the entire\n        message is always send in one command.\n        """'
newline|'\n'
nl|'\n'
name|'fmt'
op|'='
string|'"PRIVMSG %s :%%s"'
op|'%'
op|'('
name|'user'
op|','
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'length'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'fmt'
op|'%'
op|'('
name|'message'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# NOTE: minimumLength really equals len(fmt) - 2 (for '%s') + n"
nl|'\n'
comment|'# where n is how many bytes sendLine sends to end the line.'
nl|'\n'
comment|'# n was magic numbered to 2, I think incorrectly'
nl|'\n'
indent|'            '
name|'minimumLength'
op|'='
name|'len'
op|'('
name|'fmt'
op|')'
newline|'\n'
name|'if'
name|'length'
op|'<='
name|'minimumLength'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|'"Maximum length must exceed %d for message "'
nl|'\n'
string|'"to %s"'
op|'%'
op|'('
name|'minimumLength'
op|','
name|'user'
op|')'
op|')'
newline|'\n'
dedent|''
name|'lines'
op|'='
name|'split'
op|'('
name|'message'
op|','
name|'length'
op|'-'
name|'minimumLength'
op|')'
newline|'\n'
name|'map'
op|'('
name|'lambda'
name|'line'
op|','
name|'self'
op|'='
name|'self'
op|','
name|'fmt'
op|'='
name|'fmt'
op|':'
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'fmt'
op|'%'
name|'line'
op|')'
op|','
nl|'\n'
name|'lines'
op|')'
newline|'\n'
nl|'\n'
DECL|member|notice
dedent|''
dedent|''
name|'def'
name|'notice'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a notice to a user.\n\n        Notices are like normal message, but should never get automated\n        replies.\n\n        @type user: C{str}\n        @param user: The user to send a notice to.\n        @type message: C{str}\n        @param message: The contents of the notice to send.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"NOTICE %s :%s"'
op|'%'
op|'('
name|'user'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|away
dedent|''
name|'def'
name|'away'
op|'('
name|'self'
op|','
name|'message'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mark this client as away.\n\n        @type message: C{str}\n        @param message: If specified, the away message.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"AWAY :%s"'
op|'%'
name|'message'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|back
dedent|''
name|'def'
name|'back'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Clear the away status.\n        """'
newline|'\n'
comment|'# An empty away marks us as back'
nl|'\n'
name|'self'
op|'.'
name|'away'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|whois
dedent|''
name|'def'
name|'whois'
op|'('
name|'self'
op|','
name|'nickname'
op|','
name|'server'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve user information about the given nick name.\n\n        @type nickname: C{str}\n        @param nickname: The nick name about which to retrieve information.\n\n        @since: 8.2\n        """'
newline|'\n'
name|'if'
name|'server'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'WHOIS '"
op|'+'
name|'nickname'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'WHOIS %s %s'"
op|'%'
op|'('
name|'server'
op|','
name|'nickname'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|register
dedent|''
dedent|''
name|'def'
name|'register'
op|'('
name|'self'
op|','
name|'nickname'
op|','
name|'hostname'
op|'='
string|"'foo'"
op|','
name|'servername'
op|'='
string|"'bar'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Login to the server.\n\n        @type nickname: C{str}\n        @param nickname: The nickname to register.\n        @type hostname: C{str}\n        @param hostname: If specified, the hostname to logon as.\n        @type servername: C{str}\n        @param servername: If specified, the servername to logon as.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'password'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"PASS %s"'
op|'%'
name|'self'
op|'.'
name|'password'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'setNick'
op|'('
name|'nickname'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'username'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'username'
op|'='
name|'nickname'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"USER %s %s %s :%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'username'
op|','
name|'hostname'
op|','
name|'servername'
op|','
name|'self'
op|'.'
name|'realname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setNick
dedent|''
name|'def'
name|'setNick'
op|'('
name|'self'
op|','
name|'nickname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set this client\'s nickname.\n\n        @type nickname: C{str}\n        @param nickname: The nickname to change to.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_attemptedNick'
op|'='
name|'nickname'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"NICK %s"'
op|'%'
name|'nickname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|quit
dedent|''
name|'def'
name|'quit'
op|'('
name|'self'
op|','
name|'message'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Disconnect from the server\n\n        @type message: C{str}\n\n        @param message: If specified, the message to give when quitting the\n            server.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"QUIT :%s"'
op|'%'
name|'message'
op|')'
newline|'\n'
nl|'\n'
comment|'### user input commands, client->client'
nl|'\n'
nl|'\n'
DECL|member|describe
dedent|''
name|'def'
name|'describe'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'action'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Strike a pose.\n\n        @type channel: C{str}\n        @param channel: The name of the channel to have an action on. If it\n            has no prefix, it is sent to the user of that name.\n        @type action: C{str}\n        @param action: The action to preform.\n        @since: 9.0\n        """'
newline|'\n'
name|'self'
op|'.'
name|'ctcpMakeQuery'
op|'('
name|'channel'
op|','
op|'['
op|'('
string|"'ACTION'"
op|','
name|'action'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|me
dedent|''
name|'def'
name|'me'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'action'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Strike a pose.\n\n        This function is deprecated since Twisted 9.0. Use describe().\n\n        @type channel: C{str}\n        @param channel: The name of the channel to have an action on. If it\n            has no prefix, C{\'#\'} will be prepended to it.\n        @type action: C{str}\n        @param action: The action to preform.\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
string|'"me() is deprecated since Twisted 9.0. Use IRCClient.describe()."'
op|','
nl|'\n'
name|'DeprecationWarning'
op|','
name|'stacklevel'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'channel'
op|'['
number|'0'
op|']'
name|'not'
name|'in'
name|'CHANNEL_PREFIXES'
op|':'
newline|'\n'
indent|'            '
name|'channel'
op|'='
string|"'#'"
op|'+'
name|'channel'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'describe'
op|'('
name|'channel'
op|','
name|'action'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_pings
dedent|''
name|'_pings'
op|'='
name|'None'
newline|'\n'
DECL|variable|_MAX_PINGRING
name|'_MAX_PINGRING'
op|'='
number|'12'
newline|'\n'
nl|'\n'
DECL|member|ping
name|'def'
name|'ping'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'text'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Measure round-trip delay to another IRC client.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_pings'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_pings'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'text'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'chars'
op|'='
name|'string'
op|'.'
name|'letters'
op|'+'
name|'string'
op|'.'
name|'digits'
op|'+'
name|'string'
op|'.'
name|'punctuation'
newline|'\n'
name|'key'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'random'
op|'.'
name|'choice'
op|'('
name|'chars'
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'12'
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|'='
name|'str'
op|'('
name|'text'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_pings'
op|'['
op|'('
name|'user'
op|','
name|'key'
op|')'
op|']'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ctcpMakeQuery'
op|'('
name|'user'
op|','
op|'['
op|'('
string|"'PING'"
op|','
name|'key'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'_pings'
op|')'
op|'>'
name|'self'
op|'.'
name|'_MAX_PINGRING'
op|':'
newline|'\n'
comment|'# Remove some of the oldest entries.'
nl|'\n'
indent|'            '
name|'byValue'
op|'='
op|'['
op|'('
name|'v'
op|','
name|'k'
op|')'
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
name|'self'
op|'.'
name|'_pings'
op|'.'
name|'items'
op|'('
op|')'
op|']'
newline|'\n'
name|'byValue'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'excess'
op|'='
name|'self'
op|'.'
name|'_MAX_PINGRING'
op|'-'
name|'len'
op|'('
name|'self'
op|'.'
name|'_pings'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'excess'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'self'
op|'.'
name|'_pings'
op|'['
name|'byValue'
op|'['
name|'i'
op|']'
op|'['
number|'1'
op|']'
op|']'
newline|'\n'
nl|'\n'
DECL|member|dccSend
dedent|''
dedent|''
dedent|''
name|'def'
name|'dccSend'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'file'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'type'
op|'('
name|'file'
op|')'
op|'=='
name|'types'
op|'.'
name|'StringType'
op|':'
newline|'\n'
indent|'            '
name|'file'
op|'='
name|'open'
op|'('
name|'file'
op|','
string|"'r'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'size'
op|'='
name|'fileSize'
op|'('
name|'file'
op|')'
newline|'\n'
nl|'\n'
name|'name'
op|'='
name|'getattr'
op|'('
name|'file'
op|','
string|'"name"'
op|','
string|'"file@%s"'
op|'%'
op|'('
name|'id'
op|'('
name|'file'
op|')'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'factory'
op|'='
name|'DccSendFactory'
op|'('
name|'file'
op|')'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'factory'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'raise'
name|'NotImplementedError'
op|','
op|'('
nl|'\n'
string|'"XXX!!! Help!  I need to bind a socket, have it listen, and tell me its address.  "'
nl|'\n'
string|'"(and stop accepting once we\'ve made a single connection.)"'
op|')'
newline|'\n'
nl|'\n'
name|'my_address'
op|'='
name|'struct'
op|'.'
name|'pack'
op|'('
string|'"!I"'
op|','
name|'my_address'
op|')'
newline|'\n'
nl|'\n'
name|'args'
op|'='
op|'['
string|"'SEND'"
op|','
name|'name'
op|','
name|'my_address'
op|','
name|'str'
op|'('
name|'port'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
op|'('
name|'size'
name|'is'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'.'
name|'append'
op|'('
name|'size'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'args'
op|'='
name|'string'
op|'.'
name|'join'
op|'('
name|'args'
op|','
string|"' '"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ctcpMakeQuery'
op|'('
name|'user'
op|','
op|'['
op|'('
string|"'DCC'"
op|','
name|'args'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dccResume
dedent|''
name|'def'
name|'dccResume'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'fileName'
op|','
name|'port'
op|','
name|'resumePos'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a DCC RESUME request to another user."""'
newline|'\n'
name|'self'
op|'.'
name|'ctcpMakeQuery'
op|'('
name|'user'
op|','
op|'['
nl|'\n'
op|'('
string|"'DCC'"
op|','
op|'['
string|"'RESUME'"
op|','
name|'fileName'
op|','
name|'port'
op|','
name|'resumePos'
op|']'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dccAcceptResume
dedent|''
name|'def'
name|'dccAcceptResume'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'fileName'
op|','
name|'port'
op|','
name|'resumePos'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a DCC ACCEPT response to clients who have requested a resume.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'ctcpMakeQuery'
op|'('
name|'user'
op|','
op|'['
nl|'\n'
op|'('
string|"'DCC'"
op|','
op|'['
string|"'ACCEPT'"
op|','
name|'fileName'
op|','
name|'port'
op|','
name|'resumePos'
op|']'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'### server->client messages'
nl|'\n'
comment|'### You might want to fiddle with these,'
nl|'\n'
comment|'### but it is safe to leave them alone.'
nl|'\n'
nl|'\n'
DECL|member|irc_ERR_NICKNAMEINUSE
dedent|''
name|'def'
name|'irc_ERR_NICKNAMEINUSE'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when we try to register or change to a nickname that is already\n        taken.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_attemptedNick'
op|'='
name|'self'
op|'.'
name|'alterCollidedNick'
op|'('
name|'self'
op|'.'
name|'_attemptedNick'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'setNick'
op|'('
name|'self'
op|'.'
name|'_attemptedNick'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|alterCollidedNick
dedent|''
name|'def'
name|'alterCollidedNick'
op|'('
name|'self'
op|','
name|'nickname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate an altered version of a nickname that caused a collision in an\n        effort to create an unused related name for subsequent registration.\n\n        @param nickname: The nickname a user is attempting to register.\n        @type nickname: C{str}\n\n        @returns: A string that is in some way different from the nickname.\n        @rtype: C{str}\n        """'
newline|'\n'
name|'return'
name|'nickname'
op|'+'
string|"'_'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|irc_ERR_ERRONEUSNICKNAME
dedent|''
name|'def'
name|'irc_ERR_ERRONEUSNICKNAME'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when we try to register or change to an illegal nickname.\n\n        The server should send this reply when the nickname contains any\n        disallowed characters.  The bot will stall, waiting for RPL_WELCOME, if\n        we don\'t handle this during sign-on.\n\n        @note: The method uses the spelling I{erroneus}, as it appears in\n            the RFC, section 6.1.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_registered'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'setNick'
op|'('
name|'self'
op|'.'
name|'erroneousNickFallback'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|irc_ERR_PASSWDMISMATCH
dedent|''
dedent|''
name|'def'
name|'irc_ERR_PASSWDMISMATCH'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the login was incorrect.\n        """'
newline|'\n'
name|'raise'
name|'IRCPasswordMismatch'
op|'('
string|'"Password Incorrect."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_RPL_WELCOME
dedent|''
name|'def'
name|'irc_RPL_WELCOME'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when we have received the welcome from the server.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_registered'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'nickname'
op|'='
name|'self'
op|'.'
name|'_attemptedNick'
newline|'\n'
name|'self'
op|'.'
name|'signedOn'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_JOIN
dedent|''
name|'def'
name|'irc_JOIN'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a user joins a channel.\n        """'
newline|'\n'
name|'nick'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'prefix'
op|','
string|"'!'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'channel'
op|'='
name|'params'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'if'
name|'nick'
op|'=='
name|'self'
op|'.'
name|'nickname'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'joined'
op|'('
name|'channel'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'userJoined'
op|'('
name|'nick'
op|','
name|'channel'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_PART
dedent|''
dedent|''
name|'def'
name|'irc_PART'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a user leaves a channel.\n        """'
newline|'\n'
name|'nick'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'prefix'
op|','
string|"'!'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'channel'
op|'='
name|'params'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'nick'
op|'=='
name|'self'
op|'.'
name|'nickname'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'left'
op|'('
name|'channel'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'userLeft'
op|'('
name|'nick'
op|','
name|'channel'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_QUIT
dedent|''
dedent|''
name|'def'
name|'irc_QUIT'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a user has quit.\n        """'
newline|'\n'
name|'nick'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'prefix'
op|','
string|"'!'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'userQuit'
op|'('
name|'nick'
op|','
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|irc_MODE
dedent|''
name|'def'
name|'irc_MODE'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse a server mode change message.\n        """'
newline|'\n'
name|'channel'
op|','
name|'modes'
op|','
name|'args'
op|'='
name|'params'
op|'['
number|'0'
op|']'
op|','
name|'params'
op|'['
number|'1'
op|']'
op|','
name|'params'
op|'['
number|'2'
op|':'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'modes'
op|'['
number|'0'
op|']'
name|'not'
name|'in'
string|"'-+'"
op|':'
newline|'\n'
indent|'            '
name|'modes'
op|'='
string|"'+'"
op|'+'
name|'modes'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'channel'
op|'=='
name|'self'
op|'.'
name|'nickname'
op|':'
newline|'\n'
comment|'# This is a mode change to our individual user, not a channel mode'
nl|'\n'
comment|'# that involves us.'
nl|'\n'
indent|'            '
name|'paramModes'
op|'='
name|'self'
op|'.'
name|'getUserModeParams'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'paramModes'
op|'='
name|'self'
op|'.'
name|'getChannelModeParams'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'added'
op|','
name|'removed'
op|'='
name|'parseModes'
op|'('
name|'modes'
op|','
name|'args'
op|','
name|'paramModes'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IRCBadModes'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
name|'None'
op|','
string|"'An error occured while parsing the following '"
nl|'\n'
string|"'MODE message: MODE %s'"
op|'%'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
name|'params'
op|')'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'added'
op|':'
newline|'\n'
indent|'                '
name|'modes'
op|','
name|'params'
op|'='
name|'zip'
op|'('
op|'*'
name|'added'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'modeChanged'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'True'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'modes'
op|')'
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'removed'
op|':'
newline|'\n'
indent|'                '
name|'modes'
op|','
name|'params'
op|'='
name|'zip'
op|'('
op|'*'
name|'removed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'modeChanged'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'False'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'modes'
op|')'
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|irc_PING
dedent|''
dedent|''
dedent|''
name|'def'
name|'irc_PING'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when some has pinged us.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"PONG %s"'
op|'%'
name|'params'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_PRIVMSG
dedent|''
name|'def'
name|'irc_PRIVMSG'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when we get a message.\n        """'
newline|'\n'
name|'user'
op|'='
name|'prefix'
newline|'\n'
name|'channel'
op|'='
name|'params'
op|'['
number|'0'
op|']'
newline|'\n'
name|'message'
op|'='
name|'params'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'message'
op|':'
name|'return'
comment|"# don't raise an exception if some idiot sends us a blank message"
newline|'\n'
nl|'\n'
name|'if'
name|'message'
op|'['
number|'0'
op|']'
op|'=='
name|'X_DELIM'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'='
name|'ctcpExtract'
op|'('
name|'message'
op|')'
newline|'\n'
name|'if'
name|'m'
op|'['
string|"'extended'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'ctcpQuery'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'m'
op|'['
string|"'extended'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'m'
op|'['
string|"'normal'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'message'
op|'='
name|'string'
op|'.'
name|'join'
op|'('
name|'m'
op|'['
string|"'normal'"
op|']'
op|','
string|"' '"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'privmsg'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_NOTICE
dedent|''
name|'def'
name|'irc_NOTICE'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a user gets a notice.\n        """'
newline|'\n'
name|'user'
op|'='
name|'prefix'
newline|'\n'
name|'channel'
op|'='
name|'params'
op|'['
number|'0'
op|']'
newline|'\n'
name|'message'
op|'='
name|'params'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'message'
op|'['
number|'0'
op|']'
op|'=='
name|'X_DELIM'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'='
name|'ctcpExtract'
op|'('
name|'message'
op|')'
newline|'\n'
name|'if'
name|'m'
op|'['
string|"'extended'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'ctcpReply'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'m'
op|'['
string|"'extended'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'m'
op|'['
string|"'normal'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'message'
op|'='
name|'string'
op|'.'
name|'join'
op|'('
name|'m'
op|'['
string|"'normal'"
op|']'
op|','
string|"' '"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'noticed'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_NICK
dedent|''
name|'def'
name|'irc_NICK'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a user changes their nickname.\n        """'
newline|'\n'
name|'nick'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'prefix'
op|','
string|"'!'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'nick'
op|'=='
name|'self'
op|'.'
name|'nickname'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'nickChanged'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'userRenamed'
op|'('
name|'nick'
op|','
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_KICK
dedent|''
dedent|''
name|'def'
name|'irc_KICK'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a user is kicked from a channel.\n        """'
newline|'\n'
name|'kicker'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'prefix'
op|','
string|"'!'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'channel'
op|'='
name|'params'
op|'['
number|'0'
op|']'
newline|'\n'
name|'kicked'
op|'='
name|'params'
op|'['
number|'1'
op|']'
newline|'\n'
name|'message'
op|'='
name|'params'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'if'
name|'string'
op|'.'
name|'lower'
op|'('
name|'kicked'
op|')'
op|'=='
name|'string'
op|'.'
name|'lower'
op|'('
name|'self'
op|'.'
name|'nickname'
op|')'
op|':'
newline|'\n'
comment|'# Yikes!'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'kickedFrom'
op|'('
name|'channel'
op|','
name|'kicker'
op|','
name|'message'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'userKicked'
op|'('
name|'kicked'
op|','
name|'channel'
op|','
name|'kicker'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_TOPIC
dedent|''
dedent|''
name|'def'
name|'irc_TOPIC'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Someone in the channel set the topic.\n        """'
newline|'\n'
name|'user'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'prefix'
op|','
string|"'!'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'channel'
op|'='
name|'params'
op|'['
number|'0'
op|']'
newline|'\n'
name|'newtopic'
op|'='
name|'params'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'topicUpdated'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'newtopic'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_RPL_TOPIC
dedent|''
name|'def'
name|'irc_RPL_TOPIC'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the topic for a channel is initially reported or when it\n        subsequently changes.\n        """'
newline|'\n'
name|'user'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'prefix'
op|','
string|"'!'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'channel'
op|'='
name|'params'
op|'['
number|'1'
op|']'
newline|'\n'
name|'newtopic'
op|'='
name|'params'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'topicUpdated'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'newtopic'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_RPL_NOTOPIC
dedent|''
name|'def'
name|'irc_RPL_NOTOPIC'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'prefix'
op|','
string|"'!'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'channel'
op|'='
name|'params'
op|'['
number|'1'
op|']'
newline|'\n'
name|'newtopic'
op|'='
string|'""'
newline|'\n'
name|'self'
op|'.'
name|'topicUpdated'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'newtopic'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_RPL_MOTDSTART
dedent|''
name|'def'
name|'irc_RPL_MOTDSTART'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'params'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'startswith'
op|'('
string|'"- "'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
op|'-'
number|'1'
op|']'
op|'='
name|'params'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'2'
op|':'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'motd'
op|'='
op|'['
name|'params'
op|'['
op|'-'
number|'1'
op|']'
op|']'
newline|'\n'
nl|'\n'
DECL|member|irc_RPL_MOTD
dedent|''
name|'def'
name|'irc_RPL_MOTD'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'params'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'startswith'
op|'('
string|'"- "'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
op|'-'
number|'1'
op|']'
op|'='
name|'params'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'2'
op|':'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'motd'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'motd'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'motd'
op|'.'
name|'append'
op|'('
name|'params'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|irc_RPL_ENDOFMOTD
dedent|''
name|'def'
name|'irc_RPL_ENDOFMOTD'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        I{RPL_ENDOFMOTD} indicates the end of the message of the day\n        messages.  Deliver the accumulated lines to C{receivedMOTD}.\n        """'
newline|'\n'
name|'motd'
op|'='
name|'self'
op|'.'
name|'motd'
newline|'\n'
name|'self'
op|'.'
name|'motd'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'receivedMOTD'
op|'('
name|'motd'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|irc_RPL_CREATED
dedent|''
name|'def'
name|'irc_RPL_CREATED'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'created'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_RPL_YOURHOST
dedent|''
name|'def'
name|'irc_RPL_YOURHOST'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'yourHost'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_RPL_MYINFO
dedent|''
name|'def'
name|'irc_RPL_MYINFO'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'params'
op|'['
number|'1'
op|']'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'3'
op|')'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'info'
op|')'
op|'<'
number|'4'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'myInfo'
op|'('
op|'*'
name|'info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_RPL_BOUNCE
dedent|''
name|'def'
name|'irc_RPL_BOUNCE'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'bounce'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_RPL_ISUPPORT
dedent|''
name|'def'
name|'irc_RPL_ISUPPORT'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
name|'params'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
comment|'# Several ISUPPORT messages, in no particular order, may be sent'
nl|'\n'
comment|'# to the client at any given point in time (usually only on connect,'
nl|'\n'
comment|'# though.) For this reason, ServerSupportedFeatures.parse is intended'
nl|'\n'
comment|'# to mutate the supported feature list.'
nl|'\n'
name|'self'
op|'.'
name|'supported'
op|'.'
name|'parse'
op|'('
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'isupport'
op|'('
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_RPL_LUSERCLIENT
dedent|''
name|'def'
name|'irc_RPL_LUSERCLIENT'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'luserClient'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_RPL_LUSEROP
dedent|''
name|'def'
name|'irc_RPL_LUSEROP'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'luserOp'
op|'('
name|'int'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|irc_RPL_LUSERCHANNELS
dedent|''
dedent|''
name|'def'
name|'irc_RPL_LUSERCHANNELS'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'luserChannels'
op|'('
name|'int'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|irc_RPL_LUSERME
dedent|''
dedent|''
name|'def'
name|'irc_RPL_LUSERME'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'luserMe'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|irc_unknown
dedent|''
name|'def'
name|'irc_unknown'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'command'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
comment|'### Receiving a CTCP query from another party'
nl|'\n'
comment|'### It is safe to leave these alone.'
nl|'\n'
nl|'\n'
DECL|member|ctcpQuery
dedent|''
name|'def'
name|'ctcpQuery'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'messages'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Dispatch method for any CTCP queries received.\n        """'
newline|'\n'
name|'for'
name|'m'
name|'in'
name|'messages'
op|':'
newline|'\n'
indent|'            '
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"ctcpQuery_%s"'
op|'%'
name|'m'
op|'['
number|'0'
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'method'
op|':'
newline|'\n'
indent|'                '
name|'method'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'m'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'ctcpUnknownQuery'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'m'
op|'['
number|'0'
op|']'
op|','
name|'m'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ctcpQuery_ACTION
dedent|''
dedent|''
dedent|''
name|'def'
name|'ctcpQuery_ACTION'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'action'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ctcpQuery_PING
dedent|''
name|'def'
name|'ctcpQuery_PING'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'nick'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'user'
op|','
string|'"!"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'ctcpMakeReply'
op|'('
name|'nick'
op|','
op|'['
op|'('
string|'"PING"'
op|','
name|'data'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ctcpQuery_FINGER
dedent|''
name|'def'
name|'ctcpQuery_FINGER'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'data'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'quirkyMessage'
op|'('
string|'"Why did %s send \'%s\' with a FINGER query?"'
nl|'\n'
op|'%'
op|'('
name|'user'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'fingerReply'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'callable'
op|'('
name|'self'
op|'.'
name|'fingerReply'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reply'
op|'='
name|'self'
op|'.'
name|'fingerReply'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'reply'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'fingerReply'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'nick'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'user'
op|','
string|'"!"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'ctcpMakeReply'
op|'('
name|'nick'
op|','
op|'['
op|'('
string|"'FINGER'"
op|','
name|'reply'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ctcpQuery_VERSION
dedent|''
name|'def'
name|'ctcpQuery_VERSION'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'data'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'quirkyMessage'
op|'('
string|'"Why did %s send \'%s\' with a VERSION query?"'
nl|'\n'
op|'%'
op|'('
name|'user'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'versionName'
op|':'
newline|'\n'
indent|'            '
name|'nick'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'user'
op|','
string|'"!"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'ctcpMakeReply'
op|'('
name|'nick'
op|','
op|'['
op|'('
string|"'VERSION'"
op|','
string|"'%s:%s:%s'"
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'versionName'
op|','
nl|'\n'
name|'self'
op|'.'
name|'versionNum'
name|'or'
string|"''"
op|','
nl|'\n'
name|'self'
op|'.'
name|'versionEnv'
name|'or'
string|"''"
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ctcpQuery_SOURCE
dedent|''
dedent|''
name|'def'
name|'ctcpQuery_SOURCE'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'data'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'quirkyMessage'
op|'('
string|'"Why did %s send \'%s\' with a SOURCE query?"'
nl|'\n'
op|'%'
op|'('
name|'user'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'sourceURL'
op|':'
newline|'\n'
indent|'            '
name|'nick'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'user'
op|','
string|'"!"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
comment|'# The CTCP document (Zeuge, Rollo, Mesander 1994) says that SOURCE'
nl|'\n'
comment|'# replies should be responded to with the location of an anonymous'
nl|'\n'
comment|"# FTP server in host:directory:file format.  I'm taking the liberty"
nl|'\n'
comment|'# of bringing it into the 21st century by sending a URL instead.'
nl|'\n'
name|'self'
op|'.'
name|'ctcpMakeReply'
op|'('
name|'nick'
op|','
op|'['
op|'('
string|"'SOURCE'"
op|','
name|'self'
op|'.'
name|'sourceURL'
op|')'
op|','
nl|'\n'
op|'('
string|"'SOURCE'"
op|','
name|'None'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ctcpQuery_USERINFO
dedent|''
dedent|''
name|'def'
name|'ctcpQuery_USERINFO'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'data'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'quirkyMessage'
op|'('
string|'"Why did %s send \'%s\' with a USERINFO query?"'
nl|'\n'
op|'%'
op|'('
name|'user'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'userinfo'
op|':'
newline|'\n'
indent|'            '
name|'nick'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'user'
op|','
string|'"!"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'ctcpMakeReply'
op|'('
name|'nick'
op|','
op|'['
op|'('
string|"'USERINFO'"
op|','
name|'self'
op|'.'
name|'userinfo'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ctcpQuery_CLIENTINFO
dedent|''
dedent|''
name|'def'
name|'ctcpQuery_CLIENTINFO'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A master index of what CTCP tags this client knows.\n\n        If no arguments are provided, respond with a list of known tags.\n        If an argument is provided, provide human-readable help on\n        the usage of that tag.\n        """'
newline|'\n'
nl|'\n'
name|'nick'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'user'
op|','
string|'"!"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'data'
op|':'
newline|'\n'
comment|'# XXX: prefixedMethodNames gets methods from my *class*,'
nl|'\n'
comment|"# but it's entirely possible that this *instance* has more"
nl|'\n'
comment|'# methods.'
nl|'\n'
indent|'            '
name|'names'
op|'='
name|'reflect'
op|'.'
name|'prefixedMethodNames'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
nl|'\n'
string|"'ctcpQuery_'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ctcpMakeReply'
op|'('
name|'nick'
op|','
op|'['
op|'('
string|"'CLIENTINFO'"
op|','
nl|'\n'
name|'string'
op|'.'
name|'join'
op|'('
name|'names'
op|','
string|"' '"
op|')'
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'data'
op|')'
newline|'\n'
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'ctcpQuery_%s'"
op|'%'
op|'('
name|'args'
op|'['
number|'0'
op|']'
op|','
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'method'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'ctcpMakeReply'
op|'('
name|'nick'
op|','
op|'['
op|'('
string|"'ERRMSG'"
op|','
nl|'\n'
string|'"CLIENTINFO %s :"'
nl|'\n'
string|'"Unknown query \'%s\'"'
nl|'\n'
op|'%'
op|'('
name|'data'
op|','
name|'args'
op|'['
number|'0'
op|']'
op|')'
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'doc'
op|'='
name|'getattr'
op|'('
name|'method'
op|','
string|"'__doc__'"
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ctcpMakeReply'
op|'('
name|'nick'
op|','
op|'['
op|'('
string|"'CLIENTINFO'"
op|','
name|'doc'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ctcpQuery_ERRMSG
dedent|''
dedent|''
name|'def'
name|'ctcpQuery_ERRMSG'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
comment|"# Yeah, this seems strange, but that's what the spec says to do"
nl|'\n'
comment|'# when faced with an ERRMSG query (not a reply).'
nl|'\n'
indent|'        '
name|'nick'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'user'
op|','
string|'"!"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'ctcpMakeReply'
op|'('
name|'nick'
op|','
op|'['
op|'('
string|"'ERRMSG'"
op|','
nl|'\n'
string|'"%s :No error has occoured."'
op|'%'
name|'data'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ctcpQuery_TIME
dedent|''
name|'def'
name|'ctcpQuery_TIME'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'data'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'quirkyMessage'
op|'('
string|'"Why did %s send \'%s\' with a TIME query?"'
nl|'\n'
op|'%'
op|'('
name|'user'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
dedent|''
name|'nick'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'user'
op|','
string|'"!"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'ctcpMakeReply'
op|'('
name|'nick'
op|','
nl|'\n'
op|'['
op|'('
string|"'TIME'"
op|','
string|"':%s'"
op|'%'
nl|'\n'
name|'time'
op|'.'
name|'asctime'
op|'('
name|'time'
op|'.'
name|'localtime'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ctcpQuery_DCC
dedent|''
name|'def'
name|'ctcpQuery_DCC'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initiate a Direct Client Connection\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'data'
op|':'
name|'return'
newline|'\n'
name|'dcctype'
op|'='
name|'data'
op|'.'
name|'split'
op|'('
name|'None'
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'handler'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"dcc_"'
op|'+'
name|'dcctype'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'handler'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'dcc_sessions'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'dcc_sessions'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'data'
op|'='
name|'data'
op|'['
name|'len'
op|'('
name|'dcctype'
op|')'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
name|'handler'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'nick'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'user'
op|','
string|'"!"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'ctcpMakeReply'
op|'('
name|'nick'
op|','
op|'['
op|'('
string|"'ERRMSG'"
op|','
nl|'\n'
string|'"DCC %s :Unknown DCC type \'%s\'"'
nl|'\n'
op|'%'
op|'('
name|'data'
op|','
name|'dcctype'
op|')'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'quirkyMessage'
op|'('
string|'"%s offered unknown DCC type %s"'
nl|'\n'
op|'%'
op|'('
name|'user'
op|','
name|'dcctype'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dcc_SEND
dedent|''
dedent|''
name|'def'
name|'dcc_SEND'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
comment|'# Use splitQuoted for those who send files with spaces in the names.'
nl|'\n'
indent|'        '
name|'data'
op|'='
name|'text'
op|'.'
name|'splitQuoted'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'data'
op|')'
op|'<'
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IRCBadMessage'
op|','
string|'"malformed DCC SEND request: %r"'
op|'%'
op|'('
name|'data'
op|','
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'('
name|'filename'
op|','
name|'address'
op|','
name|'port'
op|')'
op|'='
name|'data'
op|'['
op|':'
number|'3'
op|']'
newline|'\n'
nl|'\n'
name|'address'
op|'='
name|'dccParseAddress'
op|'('
name|'address'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'port'
op|'='
name|'int'
op|'('
name|'port'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IRCBadMessage'
op|','
string|'"Indecipherable port %r"'
op|'%'
op|'('
name|'port'
op|','
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'size'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'data'
op|')'
op|'>='
number|'4'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'size'
op|'='
name|'int'
op|'('
name|'data'
op|'['
number|'3'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# XXX Should we bother passing this data?'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'dccDoSend'
op|'('
name|'user'
op|','
name|'address'
op|','
name|'port'
op|','
name|'filename'
op|','
name|'size'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dcc_ACCEPT
dedent|''
name|'def'
name|'dcc_ACCEPT'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'='
name|'text'
op|'.'
name|'splitQuoted'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'data'
op|')'
op|'<'
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IRCBadMessage'
op|','
string|'"malformed DCC SEND ACCEPT request: %r"'
op|'%'
op|'('
name|'data'
op|','
op|')'
newline|'\n'
dedent|''
op|'('
name|'filename'
op|','
name|'port'
op|','
name|'resumePos'
op|')'
op|'='
name|'data'
op|'['
op|':'
number|'3'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'port'
op|'='
name|'int'
op|'('
name|'port'
op|')'
newline|'\n'
name|'resumePos'
op|'='
name|'int'
op|'('
name|'resumePos'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'dccDoAcceptResume'
op|'('
name|'user'
op|','
name|'filename'
op|','
name|'port'
op|','
name|'resumePos'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dcc_RESUME
dedent|''
name|'def'
name|'dcc_RESUME'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'='
name|'text'
op|'.'
name|'splitQuoted'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'data'
op|')'
op|'<'
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IRCBadMessage'
op|','
string|'"malformed DCC SEND RESUME request: %r"'
op|'%'
op|'('
name|'data'
op|','
op|')'
newline|'\n'
dedent|''
op|'('
name|'filename'
op|','
name|'port'
op|','
name|'resumePos'
op|')'
op|'='
name|'data'
op|'['
op|':'
number|'3'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'port'
op|'='
name|'int'
op|'('
name|'port'
op|')'
newline|'\n'
name|'resumePos'
op|'='
name|'int'
op|'('
name|'resumePos'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'dccDoResume'
op|'('
name|'user'
op|','
name|'filename'
op|','
name|'port'
op|','
name|'resumePos'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dcc_CHAT
dedent|''
name|'def'
name|'dcc_CHAT'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'='
name|'text'
op|'.'
name|'splitQuoted'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'data'
op|')'
op|'<'
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IRCBadMessage'
op|','
string|'"malformed DCC CHAT request: %r"'
op|'%'
op|'('
name|'data'
op|','
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'('
name|'filename'
op|','
name|'address'
op|','
name|'port'
op|')'
op|'='
name|'data'
op|'['
op|':'
number|'3'
op|']'
newline|'\n'
nl|'\n'
name|'address'
op|'='
name|'dccParseAddress'
op|'('
name|'address'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'port'
op|'='
name|'int'
op|'('
name|'port'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IRCBadMessage'
op|','
string|'"Indecipherable port %r"'
op|'%'
op|'('
name|'port'
op|','
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'dccDoChat'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'address'
op|','
name|'port'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
comment|'### The dccDo methods are the slightly higher-level siblings of'
nl|'\n'
comment|'### common dcc_ methods; the arguments have been parsed for them.'
nl|'\n'
nl|'\n'
DECL|member|dccDoSend
dedent|''
name|'def'
name|'dccDoSend'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'address'
op|','
name|'port'
op|','
name|'fileName'
op|','
name|'size'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when I receive a DCC SEND offer from a client.\n\n        By default, I do nothing here."""'
newline|'\n'
comment|'## filename = path.basename(arg)'
nl|'\n'
comment|'## protocol = DccFileReceive(filename, size,'
nl|'\n'
comment|'##                           (user,channel,data),self.dcc_destdir)'
nl|'\n'
comment|'## reactor.clientTCP(address, port, protocol)'
nl|'\n'
comment|'## self.dcc_sessions.append(protocol)'
nl|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|dccDoResume
dedent|''
name|'def'
name|'dccDoResume'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'file'
op|','
name|'port'
op|','
name|'resumePos'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a client is trying to resume an offered file\n        via DCC send.  It should be either replied to with a DCC\n        ACCEPT or ignored (default)."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|dccDoAcceptResume
dedent|''
name|'def'
name|'dccDoAcceptResume'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'file'
op|','
name|'port'
op|','
name|'resumePos'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a client has verified and accepted a DCC resume\n        request made by us.  By default it will do nothing."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|dccDoChat
dedent|''
name|'def'
name|'dccDoChat'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'address'
op|','
name|'port'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
comment|'#factory = DccChatFactory(self, queryData=(user, channel, data))'
nl|'\n'
comment|'#reactor.connectTCP(address, port, factory)'
nl|'\n'
comment|'#self.dcc_sessions.append(factory)'
nl|'\n'
nl|'\n'
comment|'#def ctcpQuery_SED(self, user, data):'
nl|'\n'
comment|'#    """Simple Encryption Doodoo'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Feel free to implement this, but no specification is available.'
nl|'\n'
comment|'#    """'
nl|'\n'
comment|'#    raise NotImplementedError'
nl|'\n'
nl|'\n'
DECL|member|ctcpUnknownQuery
dedent|''
name|'def'
name|'ctcpUnknownQuery'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'tag'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'nick'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'user'
op|','
string|'"!"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'ctcpMakeReply'
op|'('
name|'nick'
op|','
op|'['
op|'('
string|"'ERRMSG'"
op|','
nl|'\n'
string|'"%s %s: Unknown query \'%s\'"'
nl|'\n'
op|'%'
op|'('
name|'tag'
op|','
name|'data'
op|','
name|'tag'
op|')'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Unknown CTCP query from %s: %s %s\\n"'
nl|'\n'
op|'%'
op|'('
name|'user'
op|','
name|'tag'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ctcpMakeReply
dedent|''
name|'def'
name|'ctcpMakeReply'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'messages'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send one or more C{extended messages} as a CTCP reply.\n\n        @type messages: a list of extended messages.  An extended\n        message is a (tag, data) tuple, where \'data\' may be C{None}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'notice'
op|'('
name|'user'
op|','
name|'ctcpStringify'
op|'('
name|'messages'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'### client CTCP query commands'
nl|'\n'
nl|'\n'
DECL|member|ctcpMakeQuery
dedent|''
name|'def'
name|'ctcpMakeQuery'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'messages'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send one or more C{extended messages} as a CTCP query.\n\n        @type messages: a list of extended messages.  An extended\n        message is a (tag, data) tuple, where \'data\' may be C{None}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'msg'
op|'('
name|'user'
op|','
name|'ctcpStringify'
op|'('
name|'messages'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'### Receiving a response to a CTCP query (presumably to one we made)'
nl|'\n'
comment|'### You may want to add methods here, or override UnknownReply.'
nl|'\n'
nl|'\n'
DECL|member|ctcpReply
dedent|''
name|'def'
name|'ctcpReply'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'messages'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Dispatch method for any CTCP replies received.\n        """'
newline|'\n'
name|'for'
name|'m'
name|'in'
name|'messages'
op|':'
newline|'\n'
indent|'            '
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"ctcpReply_%s"'
op|'%'
name|'m'
op|'['
number|'0'
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'method'
op|':'
newline|'\n'
indent|'                '
name|'method'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'m'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'ctcpUnknownReply'
op|'('
name|'user'
op|','
name|'channel'
op|','
name|'m'
op|'['
number|'0'
op|']'
op|','
name|'m'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ctcpReply_PING
dedent|''
dedent|''
dedent|''
name|'def'
name|'ctcpReply_PING'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'nick'
op|'='
name|'user'
op|'.'
name|'split'
op|'('
string|"'!'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
op|'('
name|'not'
name|'self'
op|'.'
name|'_pings'
op|')'
name|'or'
op|'('
name|'not'
name|'self'
op|'.'
name|'_pings'
op|'.'
name|'has_key'
op|'('
op|'('
name|'nick'
op|','
name|'data'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IRCBadMessage'
op|','
string|'"Bogus PING response from %s: %s"'
op|'%'
op|'('
name|'user'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'t0'
op|'='
name|'self'
op|'.'
name|'_pings'
op|'['
op|'('
name|'nick'
op|','
name|'data'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'pong'
op|'('
name|'user'
op|','
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'t0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ctcpUnknownReply
dedent|''
name|'def'
name|'ctcpUnknownReply'
op|'('
name|'self'
op|','
name|'user'
op|','
name|'channel'
op|','
name|'tag'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a fitting ctcpReply_ method is not found.\n\n        XXX: If the client makes arbitrary CTCP queries,\n        this method should probably show the responses to\n        them instead of treating them as anomolies.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Unknown CTCP reply from %s: %s %s\\n"'
nl|'\n'
op|'%'
op|'('
name|'user'
op|','
name|'tag'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'### Error handlers'
nl|'\n'
comment|'### You may override these with something more appropriate to your UI.'
nl|'\n'
nl|'\n'
DECL|member|badMessage
dedent|''
name|'def'
name|'badMessage'
op|'('
name|'self'
op|','
name|'line'
op|','
name|'excType'
op|','
name|'excValue'
op|','
name|'tb'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""When I get a message that\'s so broken I can\'t use it.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
name|'line'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
name|'string'
op|'.'
name|'join'
op|'('
name|'traceback'
op|'.'
name|'format_exception'
op|'('
name|'excType'
op|','
nl|'\n'
name|'excValue'
op|','
nl|'\n'
name|'tb'
op|')'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|quirkyMessage
dedent|''
name|'def'
name|'quirkyMessage'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This is called when I receive a message which is peculiar,\n        but not wholly indecipherable.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
name|'s'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
comment|'### Protocool methods'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'supported'
op|'='
name|'ServerSupportedFeatures'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_queue'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'performLogin'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'register'
op|'('
name|'self'
op|'.'
name|'nickname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'basic'
op|'.'
name|'LineReceiver'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|'.'
name|'replace'
op|'('
string|"'\\r'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'line'
op|'='
name|'lowDequote'
op|'('
name|'line'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'prefix'
op|','
name|'command'
op|','
name|'params'
op|'='
name|'parsemsg'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'numeric_to_symbolic'
op|'.'
name|'has_key'
op|'('
name|'command'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'command'
op|'='
name|'numeric_to_symbolic'
op|'['
name|'command'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'handleCommand'
op|'('
name|'command'
op|','
name|'prefix'
op|','
name|'params'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IRCBadMessage'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'badMessage'
op|'('
name|'line'
op|','
op|'*'
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getUserModeParams
dedent|''
dedent|''
name|'def'
name|'getUserModeParams'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get user modes that require parameters for correct parsing.\n\n        @rtype: C{[str, str]}\n        @return C{[add, remove]}\n        """'
newline|'\n'
name|'return'
op|'['
string|"''"
op|','
string|"''"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getChannelModeParams
dedent|''
name|'def'
name|'getChannelModeParams'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get channel modes that require parameters for correct parsing.\n\n        @rtype: C{[str, str]}\n        @return C{[add, remove]}\n        """'
newline|'\n'
comment|'# PREFIX modes are treated as "type B" CHANMODES, they always take'
nl|'\n'
comment|'# parameter.'
nl|'\n'
name|'params'
op|'='
op|'['
string|"''"
op|','
string|"''"
op|']'
newline|'\n'
name|'prefixes'
op|'='
name|'self'
op|'.'
name|'supported'
op|'.'
name|'getFeature'
op|'('
string|"'PREFIX'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'params'
op|'['
number|'0'
op|']'
op|'='
name|'params'
op|'['
number|'1'
op|']'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'prefixes'
op|'.'
name|'iterkeys'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'chanmodes'
op|'='
name|'self'
op|'.'
name|'supported'
op|'.'
name|'getFeature'
op|'('
string|"'CHANMODES'"
op|')'
newline|'\n'
name|'if'
name|'chanmodes'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
number|'0'
op|']'
op|'+='
name|'chanmodes'
op|'.'
name|'get'
op|'('
string|"'addressModes'"
op|','
string|"''"
op|')'
newline|'\n'
name|'params'
op|'['
number|'0'
op|']'
op|'+='
name|'chanmodes'
op|'.'
name|'get'
op|'('
string|"'param'"
op|','
string|"''"
op|')'
newline|'\n'
name|'params'
op|'['
number|'1'
op|']'
op|'='
name|'params'
op|'['
number|'0'
op|']'
newline|'\n'
name|'params'
op|'['
number|'0'
op|']'
op|'+='
name|'chanmodes'
op|'.'
name|'get'
op|'('
string|"'setParam'"
op|','
string|"''"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'params'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|handleCommand
dedent|''
name|'def'
name|'handleCommand'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'prefix'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine the function to call for the given command and call\n        it with the given arguments.\n        """'
newline|'\n'
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"irc_%s"'
op|'%'
name|'command'
op|','
name|'None'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'method'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'method'
op|'('
name|'prefix'
op|','
name|'params'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'irc_unknown'
op|'('
name|'prefix'
op|','
name|'command'
op|','
name|'params'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'deferr'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dct'
op|'='
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'dct'
op|'['
string|"'dcc_sessions'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'dct'
op|'['
string|"'_pings'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'return'
name|'dct'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|dccParseAddress
dedent|''
dedent|''
name|'def'
name|'dccParseAddress'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
string|"'.'"
name|'in'
name|'address'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'long'
op|'('
name|'address'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IRCBadMessage'
op|','
string|'"Indecipherable address %r"'
op|'%'
op|'('
name|'address'
op|','
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
op|'('
nl|'\n'
op|'('
name|'address'
op|'>>'
number|'24'
op|')'
op|'&'
number|'0xFF'
op|','
nl|'\n'
op|'('
name|'address'
op|'>>'
number|'16'
op|')'
op|'&'
number|'0xFF'
op|','
nl|'\n'
op|'('
name|'address'
op|'>>'
number|'8'
op|')'
op|'&'
number|'0xFF'
op|','
nl|'\n'
name|'address'
op|'&'
number|'0xFF'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'address'
op|'='
string|"'.'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'address'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'address'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DccFileReceiveBasic
dedent|''
name|'class'
name|'DccFileReceiveBasic'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|','
name|'styles'
op|'.'
name|'Ephemeral'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Bare protocol to receive a Direct Client Connection SEND stream.\n\n    This does enough to keep the other guy talking, but you\'ll want to\n    extend my dataReceived method to *do* something with the data I get.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|bytesReceived
name|'bytesReceived'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'resumeOffset'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'bytesReceived'
op|'='
name|'resumeOffset'
newline|'\n'
name|'self'
op|'.'
name|'resume'
op|'='
op|'('
name|'resumeOffset'
op|'!='
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when data is received.\n\n        Warning: This just acknowledges to the remote host that the\n        data has been received; it doesn\'t *do* anything with the\n        data, so you\'ll want to override this.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'bytesReceived'
op|'='
name|'self'
op|'.'
name|'bytesReceived'
op|'+'
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!i'"
op|','
name|'self'
op|'.'
name|'bytesReceived'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DccSendProtocol
dedent|''
dedent|''
name|'class'
name|'DccSendProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|','
name|'styles'
op|'.'
name|'Ephemeral'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Protocol for an outgoing Direct Client Connection SEND.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|blocksize
name|'blocksize'
op|'='
number|'1024'
newline|'\n'
DECL|variable|file
name|'file'
op|'='
name|'None'
newline|'\n'
DECL|variable|bytesSent
name|'bytesSent'
op|'='
number|'0'
newline|'\n'
DECL|variable|completed
name|'completed'
op|'='
number|'0'
newline|'\n'
DECL|variable|connected
name|'connected'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'file'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'type'
op|'('
name|'file'
op|')'
name|'is'
name|'types'
op|'.'
name|'StringType'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'='
name|'open'
op|'('
name|'file'
op|','
string|"'r'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connected'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'sendBlock'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
comment|'# XXX: Do we need to check to see if len(data) != fmtsize?'
nl|'\n'
nl|'\n'
indent|'        '
name|'bytesShesGot'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|'"!I"'
op|','
name|'data'
op|')'
newline|'\n'
name|'if'
name|'bytesShesGot'
op|'<'
name|'self'
op|'.'
name|'bytesSent'
op|':'
newline|'\n'
comment|'# Wait for her.'
nl|'\n'
comment|"# XXX? Add some checks to see if we've stalled out?"
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'elif'
name|'bytesShesGot'
op|'>'
name|'self'
op|'.'
name|'bytesSent'
op|':'
newline|'\n'
comment|'# self.transport.log("DCC SEND %s: She says she has %d bytes "'
nl|'\n'
comment|'#                    "but I\'ve only sent %d.  I\'m stopping "'
nl|'\n'
comment|'#                    "this screwy transfer."'
nl|'\n'
comment|'#                    % (self.file,'
nl|'\n'
comment|'#                       bytesShesGot, self.bytesSent))'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'sendBlock'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendBlock
dedent|''
name|'def'
name|'sendBlock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'block'
op|'='
name|'self'
op|'.'
name|'file'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'blocksize'
op|')'
newline|'\n'
name|'if'
name|'block'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'block'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bytesSent'
op|'='
name|'self'
op|'.'
name|'bytesSent'
op|'+'
name|'len'
op|'('
name|'block'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Nothing more to send, transfer complete.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'completed'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connected'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'file'
op|','
string|'"close"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DccSendFactory
dedent|''
dedent|''
dedent|''
name|'class'
name|'DccSendFactory'
op|'('
name|'protocol'
op|'.'
name|'Factory'
op|')'
op|':'
newline|'\n'
DECL|variable|protocol
indent|'    '
name|'protocol'
op|'='
name|'DccSendProtocol'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'file'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'file'
op|'='
name|'file'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'('
name|'self'
op|'.'
name|'file'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fileSize
dedent|''
dedent|''
name|'def'
name|'fileSize'
op|'('
name|'file'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""I\'ll try my damndest to determine the size of this file object.\n    """'
newline|'\n'
name|'size'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'file'
op|','
string|'"fileno"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fileno'
op|'='
name|'file'
op|'.'
name|'fileno'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'stat_'
op|'='
name|'os'
op|'.'
name|'fstat'
op|'('
name|'fileno'
op|')'
newline|'\n'
name|'size'
op|'='
name|'stat_'
op|'['
name|'stat'
op|'.'
name|'ST_SIZE'
op|']'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'size'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'file'
op|','
string|'"name"'
op|')'
name|'and'
name|'path'
op|'.'
name|'exists'
op|'('
name|'file'
op|'.'
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'path'
op|'.'
name|'getsize'
op|'('
name|'file'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'size'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'file'
op|','
string|'"seek"'
op|')'
name|'and'
name|'hasattr'
op|'('
name|'file'
op|','
string|'"tell"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'file'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'2'
op|')'
newline|'\n'
name|'size'
op|'='
name|'file'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'file'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'size'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'size'
newline|'\n'
nl|'\n'
DECL|class|DccChat
dedent|''
name|'class'
name|'DccChat'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|','
name|'styles'
op|'.'
name|'Ephemeral'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Direct Client Connection protocol type CHAT.\n\n    DCC CHAT is really just your run o\' the mill basic.LineReceiver\n    protocol.  This class only varies from that slightly, accepting\n    either LF or CR LF for a line delimeter for incoming messages\n    while always using CR LF for outgoing.\n\n    The lineReceived method implemented here uses the DCC connection\'s\n    \'client\' attribute (provided upon construction) to deliver incoming\n    lines from the DCC chat via IRCClient\'s normal privmsg interface.\n    That\'s something of a spoof, which you may well want to override.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|queryData
name|'queryData'
op|'='
name|'None'
newline|'\n'
DECL|variable|delimiter
name|'delimiter'
op|'='
name|'CR'
op|'+'
name|'NL'
newline|'\n'
DECL|variable|client
name|'client'
op|'='
name|'None'
newline|'\n'
DECL|variable|remoteParty
name|'remoteParty'
op|'='
name|'None'
newline|'\n'
DECL|variable|buffer
name|'buffer'
op|'='
string|'""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'client'
op|','
name|'queryData'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize a new DCC CHAT session.\n\n        queryData is a 3-tuple of\n        (fromUser, targetUserOrChannel, data)\n        as received by the CTCP query.\n\n        (To be honest, fromUser is the only thing that\'s currently\n        used here. targetUserOrChannel is potentially useful, while\n        the \'data\' argument is soley for informational purposes.)\n        """'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'='
name|'client'
newline|'\n'
name|'if'
name|'queryData'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'queryData'
op|'='
name|'queryData'
newline|'\n'
name|'self'
op|'.'
name|'remoteParty'
op|'='
name|'self'
op|'.'
name|'queryData'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'='
name|'self'
op|'.'
name|'buffer'
op|'+'
name|'data'
newline|'\n'
name|'lines'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'self'
op|'.'
name|'buffer'
op|','
name|'LF'
op|')'
newline|'\n'
comment|'# Put the (possibly empty) element after the last LF back in the'
nl|'\n'
comment|'# buffer'
nl|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
name|'lines'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'line'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
name|'CR'
op|':'
newline|'\n'
indent|'                '
name|'line'
op|'='
name|'line'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'lineReceived'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"DCC CHAT<%s> %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'remoteParty'
op|','
name|'line'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'privmsg'
op|'('
name|'self'
op|'.'
name|'remoteParty'
op|','
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'nickname'
op|','
name|'line'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DccChatFactory
dedent|''
dedent|''
name|'class'
name|'DccChatFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
DECL|variable|protocol
indent|'    '
name|'protocol'
op|'='
name|'DccChat'
newline|'\n'
DECL|variable|noisy
name|'noisy'
op|'='
number|'0'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'client'
op|','
name|'queryData'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'='
name|'client'
newline|'\n'
name|'self'
op|'.'
name|'queryData'
op|'='
name|'queryData'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'('
name|'client'
op|'='
name|'self'
op|'.'
name|'client'
op|','
name|'queryData'
op|'='
name|'self'
op|'.'
name|'queryData'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
dedent|''
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'unused_connector'
op|','
name|'unused_reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'.'
name|'dcc_sessions'
op|'.'
name|'remove'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionLost
dedent|''
name|'def'
name|'clientConnectionLost'
op|'('
name|'self'
op|','
name|'unused_connector'
op|','
name|'unused_reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'.'
name|'dcc_sessions'
op|'.'
name|'remove'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|dccDescribe
dedent|''
dedent|''
name|'def'
name|'dccDescribe'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Given the data chunk from a DCC query, return a descriptive string.\n    """'
newline|'\n'
nl|'\n'
name|'orig_data'
op|'='
name|'data'
newline|'\n'
name|'data'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'data'
op|')'
op|'<'
number|'4'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'orig_data'
newline|'\n'
nl|'\n'
dedent|''
op|'('
name|'dcctype'
op|','
name|'arg'
op|','
name|'address'
op|','
name|'port'
op|')'
op|'='
name|'data'
op|'['
op|':'
number|'4'
op|']'
newline|'\n'
nl|'\n'
name|'if'
string|"'.'"
name|'in'
name|'address'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'long'
op|'('
name|'address'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
op|'('
nl|'\n'
op|'('
name|'address'
op|'>>'
number|'24'
op|')'
op|'&'
number|'0xFF'
op|','
nl|'\n'
op|'('
name|'address'
op|'>>'
number|'16'
op|')'
op|'&'
number|'0xFF'
op|','
nl|'\n'
op|'('
name|'address'
op|'>>'
number|'8'
op|')'
op|'&'
number|'0xFF'
op|','
nl|'\n'
name|'address'
op|'&'
number|'0xFF'
op|','
nl|'\n'
op|')'
newline|'\n'
comment|"# The mapping to 'int' is to get rid of those accursed"
nl|'\n'
comment|'# "L"s which python 1.5.2 puts on the end of longs.'
nl|'\n'
name|'address'
op|'='
name|'string'
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'map'
op|'('
name|'int'
op|','
name|'address'
op|')'
op|')'
op|','
string|'"."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'dcctype'
op|'=='
string|"'SEND'"
op|':'
newline|'\n'
indent|'        '
name|'filename'
op|'='
name|'arg'
newline|'\n'
nl|'\n'
name|'size_txt'
op|'='
string|"''"
newline|'\n'
name|'if'
name|'len'
op|'('
name|'data'
op|')'
op|'>='
number|'5'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'size'
op|'='
name|'int'
op|'('
name|'data'
op|'['
number|'4'
op|']'
op|')'
newline|'\n'
name|'size_txt'
op|'='
string|"' of size %d bytes'"
op|'%'
op|'('
name|'size'
op|','
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'dcc_text'
op|'='
op|'('
string|'"SEND for file \'%s\'%s at host %s, port %s"'
nl|'\n'
op|'%'
op|'('
name|'filename'
op|','
name|'size_txt'
op|','
name|'address'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'dcctype'
op|'=='
string|"'CHAT'"
op|':'
newline|'\n'
indent|'        '
name|'dcc_text'
op|'='
op|'('
string|'"CHAT for host %s, port %s"'
nl|'\n'
op|'%'
op|'('
name|'address'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'dcc_text'
op|'='
name|'orig_data'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'dcc_text'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DccFileReceive
dedent|''
name|'class'
name|'DccFileReceive'
op|'('
name|'DccFileReceiveBasic'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Higher-level coverage for getting a file from DCC SEND.\n\n    I allow you to change the file\'s name and destination directory.\n    I won\'t overwrite an existing file unless I\'ve been told it\'s okay\n    to do so. If passed the resumeOffset keyword argument I will attempt to\n    resume the file from that amount of bytes.\n\n    XXX: I need to let the client know when I am finished.\n    XXX: I need to decide how to keep a progress indicator updated.\n    XXX: Client needs a way to tell me "Do not finish until I say so."\n    XXX: I need to make sure the client understands if the file cannot be written.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|filename
name|'filename'
op|'='
string|"'dcc'"
newline|'\n'
DECL|variable|fileSize
name|'fileSize'
op|'='
op|'-'
number|'1'
newline|'\n'
DECL|variable|destDir
name|'destDir'
op|'='
string|"'.'"
newline|'\n'
DECL|variable|overwrite
name|'overwrite'
op|'='
number|'0'
newline|'\n'
DECL|variable|fromUser
name|'fromUser'
op|'='
name|'None'
newline|'\n'
DECL|variable|queryData
name|'queryData'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'filename'
op|','
name|'fileSize'
op|'='
op|'-'
number|'1'
op|','
name|'queryData'
op|'='
name|'None'
op|','
nl|'\n'
name|'destDir'
op|'='
string|"'.'"
op|','
name|'resumeOffset'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'DccFileReceiveBasic'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'resumeOffset'
op|'='
name|'resumeOffset'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'filename'
op|'='
name|'filename'
newline|'\n'
name|'self'
op|'.'
name|'destDir'
op|'='
name|'destDir'
newline|'\n'
name|'self'
op|'.'
name|'fileSize'
op|'='
name|'fileSize'
newline|'\n'
nl|'\n'
name|'if'
name|'queryData'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'queryData'
op|'='
name|'queryData'
newline|'\n'
name|'self'
op|'.'
name|'fromUser'
op|'='
name|'self'
op|'.'
name|'queryData'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|set_directory
dedent|''
dedent|''
name|'def'
name|'set_directory'
op|'('
name|'self'
op|','
name|'directory'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the directory where the downloaded file will be placed.\n\n        May raise OSError if the supplied directory path is not suitable.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'path'
op|'.'
name|'exists'
op|'('
name|'directory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'ENOENT'
op|','
string|'"You see no directory there."'
op|','
nl|'\n'
name|'directory'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'directory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'ENOTDIR'
op|','
string|'"You cannot put a file into "'
nl|'\n'
string|'"something which is not a directory."'
op|','
nl|'\n'
name|'directory'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'access'
op|'('
name|'directory'
op|','
name|'os'
op|'.'
name|'X_OK'
op|'|'
name|'os'
op|'.'
name|'W_OK'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'EACCES'
op|','
nl|'\n'
string|'"This directory is too hard to write in to."'
op|','
nl|'\n'
name|'directory'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'destDir'
op|'='
name|'directory'
newline|'\n'
nl|'\n'
DECL|member|set_filename
dedent|''
name|'def'
name|'set_filename'
op|'('
name|'self'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Change the name of the file being transferred.\n\n        This replaces the file name provided by the sender.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'filename'
op|'='
name|'filename'
newline|'\n'
nl|'\n'
DECL|member|set_overwrite
dedent|''
name|'def'
name|'set_overwrite'
op|'('
name|'self'
op|','
name|'boolean'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""May I overwrite existing files?\n        """'
newline|'\n'
name|'self'
op|'.'
name|'overwrite'
op|'='
name|'boolean'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Protocol-level methods.'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dst'
op|'='
name|'path'
op|'.'
name|'abspath'
op|'('
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'destDir'
op|','
name|'self'
op|'.'
name|'filename'
op|')'
op|')'
newline|'\n'
name|'exists'
op|'='
name|'path'
op|'.'
name|'exists'
op|'('
name|'dst'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'resume'
name|'and'
name|'exists'
op|':'
newline|'\n'
comment|'# I have been told I want to resume, and a file already'
nl|'\n'
comment|'# exists - Here we go'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'='
name|'open'
op|'('
name|'dst'
op|','
string|"'ab'"
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Attempting to resume %s - starting from %d bytes"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'file'
op|','
name|'self'
op|'.'
name|'file'
op|'.'
name|'tell'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'overwrite'
name|'or'
name|'not'
name|'exists'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'='
name|'open'
op|'('
name|'dst'
op|','
string|"'wb'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'EEXIST'
op|','
nl|'\n'
string|'"There\'s a file in the way.  "'
nl|'\n'
string|'"Perhaps that\'s why you cannot open it."'
op|','
nl|'\n'
name|'dst'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'DccFileReceiveBasic'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
comment|'# XXX: update a progress indicator here?'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""When the connection is lost, I close the file.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
number|'0'
newline|'\n'
name|'logmsg'
op|'='
op|'('
string|'"%s closed."'
op|'%'
op|'('
name|'self'
op|','
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'fileSize'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'logmsg'
op|'='
op|'('
string|'"%s  %d/%d bytes received"'
nl|'\n'
op|'%'
op|'('
name|'logmsg'
op|','
name|'self'
op|'.'
name|'bytesReceived'
op|','
name|'self'
op|'.'
name|'fileSize'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'bytesReceived'
op|'=='
name|'self'
op|'.'
name|'fileSize'
op|':'
newline|'\n'
indent|'                '
name|'pass'
comment|'# Hooray!'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'bytesReceived'
op|'<'
name|'self'
op|'.'
name|'fileSize'
op|':'
newline|'\n'
indent|'                '
name|'logmsg'
op|'='
op|'('
string|'"%s (Warning: %d bytes short)"'
nl|'\n'
op|'%'
op|'('
name|'logmsg'
op|','
name|'self'
op|'.'
name|'fileSize'
op|'-'
name|'self'
op|'.'
name|'bytesReceived'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'logmsg'
op|'='
op|'('
string|'"%s (file larger than expected)"'
nl|'\n'
op|'%'
op|'('
name|'logmsg'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'logmsg'
op|'='
op|'('
string|'"%s  %d bytes received"'
nl|'\n'
op|'%'
op|'('
name|'logmsg'
op|','
name|'self'
op|'.'
name|'bytesReceived'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|"'file'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'logmsg'
op|'='
string|'"%s and written to %s.\\n"'
op|'%'
op|'('
name|'logmsg'
op|','
name|'self'
op|'.'
name|'file'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'file'
op|','
string|"'close'"
op|')'
op|':'
name|'self'
op|'.'
name|'file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# self.transport.log(logmsg)'
nl|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'connected'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"<Unconnected DccFileReceive object at %x>"'
op|'%'
op|'('
name|'id'
op|'('
name|'self'
op|')'
op|','
op|')'
newline|'\n'
dedent|''
name|'from_'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'fromUser'
op|':'
newline|'\n'
indent|'            '
name|'from_'
op|'='
string|'"%s (%s)"'
op|'%'
op|'('
name|'self'
op|'.'
name|'fromUser'
op|','
name|'from_'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'s'
op|'='
op|'('
string|'"DCC transfer of \'%s\' from %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'filename'
op|','
name|'from_'
op|')'
op|')'
newline|'\n'
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
op|'('
string|'"<%s at %x: GET %s>"'
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
name|'id'
op|'('
name|'self'
op|')'
op|','
name|'self'
op|'.'
name|'filename'
op|')'
op|')'
newline|'\n'
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# CTCP constants and helper functions'
nl|'\n'
nl|'\n'
DECL|variable|X_DELIM
dedent|''
dedent|''
name|'X_DELIM'
op|'='
name|'chr'
op|'('
number|'001'
op|')'
newline|'\n'
nl|'\n'
DECL|function|ctcpExtract
name|'def'
name|'ctcpExtract'
op|'('
name|'message'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Extract CTCP data from a string.\n\n    Returns a dictionary with two items:\n\n       - C{\'extended\'}: a list of CTCP (tag, data) tuples\n       - C{\'normal\'}: a list of strings which were not inside a CTCP delimeter\n    """'
newline|'\n'
nl|'\n'
name|'extended_messages'
op|'='
op|'['
op|']'
newline|'\n'
name|'normal_messages'
op|'='
op|'['
op|']'
newline|'\n'
name|'retval'
op|'='
op|'{'
string|"'extended'"
op|':'
name|'extended_messages'
op|','
nl|'\n'
string|"'normal'"
op|':'
name|'normal_messages'
op|'}'
newline|'\n'
nl|'\n'
name|'messages'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'message'
op|','
name|'X_DELIM'
op|')'
newline|'\n'
name|'odd'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'# X1 extended data X2 nomal data X3 extended data X4 normal...'
nl|'\n'
name|'while'
name|'messages'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'odd'
op|':'
newline|'\n'
indent|'            '
name|'extended_messages'
op|'.'
name|'append'
op|'('
name|'messages'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'normal_messages'
op|'.'
name|'append'
op|'('
name|'messages'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'odd'
op|'='
name|'not'
name|'odd'
newline|'\n'
nl|'\n'
dedent|''
name|'extended_messages'
op|'['
op|':'
op|']'
op|'='
name|'filter'
op|'('
name|'None'
op|','
name|'extended_messages'
op|')'
newline|'\n'
name|'normal_messages'
op|'['
op|':'
op|']'
op|'='
name|'filter'
op|'('
name|'None'
op|','
name|'normal_messages'
op|')'
newline|'\n'
nl|'\n'
name|'extended_messages'
op|'['
op|':'
op|']'
op|'='
name|'map'
op|'('
name|'ctcpDequote'
op|','
name|'extended_messages'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'len'
op|'('
name|'extended_messages'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'extended_messages'
op|'['
name|'i'
op|']'
op|','
name|'SPC'
op|','
number|'1'
op|')'
newline|'\n'
name|'tag'
op|'='
name|'m'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'m'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
name|'m'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'extended_messages'
op|'['
name|'i'
op|']'
op|'='
op|'('
name|'tag'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'retval'
newline|'\n'
nl|'\n'
comment|'# CTCP escaping'
nl|'\n'
nl|'\n'
DECL|variable|M_QUOTE
dedent|''
name|'M_QUOTE'
op|'='
name|'chr'
op|'('
number|'020'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|mQuoteTable
name|'mQuoteTable'
op|'='
op|'{'
nl|'\n'
name|'NUL'
op|':'
name|'M_QUOTE'
op|'+'
string|"'0'"
op|','
nl|'\n'
name|'NL'
op|':'
name|'M_QUOTE'
op|'+'
string|"'n'"
op|','
nl|'\n'
name|'CR'
op|':'
name|'M_QUOTE'
op|'+'
string|"'r'"
op|','
nl|'\n'
name|'M_QUOTE'
op|':'
name|'M_QUOTE'
op|'+'
name|'M_QUOTE'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|mDequoteTable
name|'mDequoteTable'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'mQuoteTable'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'mDequoteTable'
op|'['
name|'v'
op|'['
op|'-'
number|'1'
op|']'
op|']'
op|'='
name|'k'
newline|'\n'
dedent|''
name|'del'
name|'k'
op|','
name|'v'
newline|'\n'
nl|'\n'
DECL|variable|mEscape_re
name|'mEscape_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'%s.'"
op|'%'
op|'('
name|'re'
op|'.'
name|'escape'
op|'('
name|'M_QUOTE'
op|')'
op|','
op|')'
op|','
name|'re'
op|'.'
name|'DOTALL'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lowQuote
name|'def'
name|'lowQuote'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'c'
name|'in'
op|'('
name|'M_QUOTE'
op|','
name|'NUL'
op|','
name|'NL'
op|','
name|'CR'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'string'
op|'.'
name|'replace'
op|'('
name|'s'
op|','
name|'c'
op|','
name|'mQuoteTable'
op|'['
name|'c'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|function|lowDequote
dedent|''
name|'def'
name|'lowDequote'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
DECL|function|sub
indent|'    '
name|'def'
name|'sub'
op|'('
name|'matchobj'
op|','
name|'mDequoteTable'
op|'='
name|'mDequoteTable'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'matchobj'
op|'.'
name|'group'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'='
name|'mDequoteTable'
op|'['
name|'s'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'='
name|'s'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'mEscape_re'
op|'.'
name|'sub'
op|'('
name|'sub'
op|','
name|'s'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|X_QUOTE
dedent|''
name|'X_QUOTE'
op|'='
string|"'\\\\'"
newline|'\n'
nl|'\n'
DECL|variable|xQuoteTable
name|'xQuoteTable'
op|'='
op|'{'
nl|'\n'
name|'X_DELIM'
op|':'
name|'X_QUOTE'
op|'+'
string|"'a'"
op|','
nl|'\n'
name|'X_QUOTE'
op|':'
name|'X_QUOTE'
op|'+'
name|'X_QUOTE'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|xDequoteTable
name|'xDequoteTable'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'xQuoteTable'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'xDequoteTable'
op|'['
name|'v'
op|'['
op|'-'
number|'1'
op|']'
op|']'
op|'='
name|'k'
newline|'\n'
nl|'\n'
DECL|variable|xEscape_re
dedent|''
name|'xEscape_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'%s.'"
op|'%'
op|'('
name|'re'
op|'.'
name|'escape'
op|'('
name|'X_QUOTE'
op|')'
op|','
op|')'
op|','
name|'re'
op|'.'
name|'DOTALL'
op|')'
newline|'\n'
nl|'\n'
DECL|function|ctcpQuote
name|'def'
name|'ctcpQuote'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'c'
name|'in'
op|'('
name|'X_QUOTE'
op|','
name|'X_DELIM'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'string'
op|'.'
name|'replace'
op|'('
name|'s'
op|','
name|'c'
op|','
name|'xQuoteTable'
op|'['
name|'c'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|function|ctcpDequote
dedent|''
name|'def'
name|'ctcpDequote'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
DECL|function|sub
indent|'    '
name|'def'
name|'sub'
op|'('
name|'matchobj'
op|','
name|'xDequoteTable'
op|'='
name|'xDequoteTable'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'matchobj'
op|'.'
name|'group'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'='
name|'xDequoteTable'
op|'['
name|'s'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'='
name|'s'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'xEscape_re'
op|'.'
name|'sub'
op|'('
name|'sub'
op|','
name|'s'
op|')'
newline|'\n'
nl|'\n'
DECL|function|ctcpStringify
dedent|''
name|'def'
name|'ctcpStringify'
op|'('
name|'messages'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @type messages: a list of extended messages.  An extended\n    message is a (tag, data) tuple, where \'data\' may be C{None}, a\n    string, or a list of strings to be joined with whitespace.\n\n    @returns: String\n    """'
newline|'\n'
name|'coded_messages'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'tag'
op|','
name|'data'
op|')'
name|'in'
name|'messages'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'data'
op|','
name|'types'
op|'.'
name|'StringType'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
comment|'# data as list-of-strings'
nl|'\n'
indent|'                    '
name|'data'
op|'='
string|'" "'
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
comment|"# No?  Then use it's %s representation."
nl|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'m'
op|'='
string|'"%s %s"'
op|'%'
op|'('
name|'tag'
op|','
name|'data'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'='
name|'str'
op|'('
name|'tag'
op|')'
newline|'\n'
dedent|''
name|'m'
op|'='
name|'ctcpQuote'
op|'('
name|'m'
op|')'
newline|'\n'
name|'m'
op|'='
string|'"%s%s%s"'
op|'%'
op|'('
name|'X_DELIM'
op|','
name|'m'
op|','
name|'X_DELIM'
op|')'
newline|'\n'
name|'coded_messages'
op|'.'
name|'append'
op|'('
name|'m'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'line'
op|'='
name|'string'
op|'.'
name|'join'
op|'('
name|'coded_messages'
op|','
string|"''"
op|')'
newline|'\n'
name|'return'
name|'line'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Constants (from RFC 2812)'
nl|'\n'
DECL|variable|RPL_WELCOME
dedent|''
name|'RPL_WELCOME'
op|'='
string|"'001'"
newline|'\n'
DECL|variable|RPL_YOURHOST
name|'RPL_YOURHOST'
op|'='
string|"'002'"
newline|'\n'
DECL|variable|RPL_CREATED
name|'RPL_CREATED'
op|'='
string|"'003'"
newline|'\n'
DECL|variable|RPL_MYINFO
name|'RPL_MYINFO'
op|'='
string|"'004'"
newline|'\n'
DECL|variable|RPL_ISUPPORT
name|'RPL_ISUPPORT'
op|'='
string|"'005'"
newline|'\n'
DECL|variable|RPL_BOUNCE
name|'RPL_BOUNCE'
op|'='
string|"'010'"
newline|'\n'
DECL|variable|RPL_USERHOST
name|'RPL_USERHOST'
op|'='
string|"'302'"
newline|'\n'
DECL|variable|RPL_ISON
name|'RPL_ISON'
op|'='
string|"'303'"
newline|'\n'
DECL|variable|RPL_AWAY
name|'RPL_AWAY'
op|'='
string|"'301'"
newline|'\n'
DECL|variable|RPL_UNAWAY
name|'RPL_UNAWAY'
op|'='
string|"'305'"
newline|'\n'
DECL|variable|RPL_NOWAWAY
name|'RPL_NOWAWAY'
op|'='
string|"'306'"
newline|'\n'
DECL|variable|RPL_WHOISUSER
name|'RPL_WHOISUSER'
op|'='
string|"'311'"
newline|'\n'
DECL|variable|RPL_WHOISSERVER
name|'RPL_WHOISSERVER'
op|'='
string|"'312'"
newline|'\n'
DECL|variable|RPL_WHOISOPERATOR
name|'RPL_WHOISOPERATOR'
op|'='
string|"'313'"
newline|'\n'
DECL|variable|RPL_WHOISIDLE
name|'RPL_WHOISIDLE'
op|'='
string|"'317'"
newline|'\n'
DECL|variable|RPL_ENDOFWHOIS
name|'RPL_ENDOFWHOIS'
op|'='
string|"'318'"
newline|'\n'
DECL|variable|RPL_WHOISCHANNELS
name|'RPL_WHOISCHANNELS'
op|'='
string|"'319'"
newline|'\n'
DECL|variable|RPL_WHOWASUSER
name|'RPL_WHOWASUSER'
op|'='
string|"'314'"
newline|'\n'
DECL|variable|RPL_ENDOFWHOWAS
name|'RPL_ENDOFWHOWAS'
op|'='
string|"'369'"
newline|'\n'
DECL|variable|RPL_LISTSTART
name|'RPL_LISTSTART'
op|'='
string|"'321'"
newline|'\n'
DECL|variable|RPL_LIST
name|'RPL_LIST'
op|'='
string|"'322'"
newline|'\n'
DECL|variable|RPL_LISTEND
name|'RPL_LISTEND'
op|'='
string|"'323'"
newline|'\n'
DECL|variable|RPL_UNIQOPIS
name|'RPL_UNIQOPIS'
op|'='
string|"'325'"
newline|'\n'
DECL|variable|RPL_CHANNELMODEIS
name|'RPL_CHANNELMODEIS'
op|'='
string|"'324'"
newline|'\n'
DECL|variable|RPL_NOTOPIC
name|'RPL_NOTOPIC'
op|'='
string|"'331'"
newline|'\n'
DECL|variable|RPL_TOPIC
name|'RPL_TOPIC'
op|'='
string|"'332'"
newline|'\n'
DECL|variable|RPL_INVITING
name|'RPL_INVITING'
op|'='
string|"'341'"
newline|'\n'
DECL|variable|RPL_SUMMONING
name|'RPL_SUMMONING'
op|'='
string|"'342'"
newline|'\n'
DECL|variable|RPL_INVITELIST
name|'RPL_INVITELIST'
op|'='
string|"'346'"
newline|'\n'
DECL|variable|RPL_ENDOFINVITELIST
name|'RPL_ENDOFINVITELIST'
op|'='
string|"'347'"
newline|'\n'
DECL|variable|RPL_EXCEPTLIST
name|'RPL_EXCEPTLIST'
op|'='
string|"'348'"
newline|'\n'
DECL|variable|RPL_ENDOFEXCEPTLIST
name|'RPL_ENDOFEXCEPTLIST'
op|'='
string|"'349'"
newline|'\n'
DECL|variable|RPL_VERSION
name|'RPL_VERSION'
op|'='
string|"'351'"
newline|'\n'
DECL|variable|RPL_WHOREPLY
name|'RPL_WHOREPLY'
op|'='
string|"'352'"
newline|'\n'
DECL|variable|RPL_ENDOFWHO
name|'RPL_ENDOFWHO'
op|'='
string|"'315'"
newline|'\n'
DECL|variable|RPL_NAMREPLY
name|'RPL_NAMREPLY'
op|'='
string|"'353'"
newline|'\n'
DECL|variable|RPL_ENDOFNAMES
name|'RPL_ENDOFNAMES'
op|'='
string|"'366'"
newline|'\n'
DECL|variable|RPL_LINKS
name|'RPL_LINKS'
op|'='
string|"'364'"
newline|'\n'
DECL|variable|RPL_ENDOFLINKS
name|'RPL_ENDOFLINKS'
op|'='
string|"'365'"
newline|'\n'
DECL|variable|RPL_BANLIST
name|'RPL_BANLIST'
op|'='
string|"'367'"
newline|'\n'
DECL|variable|RPL_ENDOFBANLIST
name|'RPL_ENDOFBANLIST'
op|'='
string|"'368'"
newline|'\n'
DECL|variable|RPL_INFO
name|'RPL_INFO'
op|'='
string|"'371'"
newline|'\n'
DECL|variable|RPL_ENDOFINFO
name|'RPL_ENDOFINFO'
op|'='
string|"'374'"
newline|'\n'
DECL|variable|RPL_MOTDSTART
name|'RPL_MOTDSTART'
op|'='
string|"'375'"
newline|'\n'
DECL|variable|RPL_MOTD
name|'RPL_MOTD'
op|'='
string|"'372'"
newline|'\n'
DECL|variable|RPL_ENDOFMOTD
name|'RPL_ENDOFMOTD'
op|'='
string|"'376'"
newline|'\n'
DECL|variable|RPL_YOUREOPER
name|'RPL_YOUREOPER'
op|'='
string|"'381'"
newline|'\n'
DECL|variable|RPL_REHASHING
name|'RPL_REHASHING'
op|'='
string|"'382'"
newline|'\n'
DECL|variable|RPL_YOURESERVICE
name|'RPL_YOURESERVICE'
op|'='
string|"'383'"
newline|'\n'
DECL|variable|RPL_TIME
name|'RPL_TIME'
op|'='
string|"'391'"
newline|'\n'
DECL|variable|RPL_USERSSTART
name|'RPL_USERSSTART'
op|'='
string|"'392'"
newline|'\n'
DECL|variable|RPL_USERS
name|'RPL_USERS'
op|'='
string|"'393'"
newline|'\n'
DECL|variable|RPL_ENDOFUSERS
name|'RPL_ENDOFUSERS'
op|'='
string|"'394'"
newline|'\n'
DECL|variable|RPL_NOUSERS
name|'RPL_NOUSERS'
op|'='
string|"'395'"
newline|'\n'
DECL|variable|RPL_TRACELINK
name|'RPL_TRACELINK'
op|'='
string|"'200'"
newline|'\n'
DECL|variable|RPL_TRACECONNECTING
name|'RPL_TRACECONNECTING'
op|'='
string|"'201'"
newline|'\n'
DECL|variable|RPL_TRACEHANDSHAKE
name|'RPL_TRACEHANDSHAKE'
op|'='
string|"'202'"
newline|'\n'
DECL|variable|RPL_TRACEUNKNOWN
name|'RPL_TRACEUNKNOWN'
op|'='
string|"'203'"
newline|'\n'
DECL|variable|RPL_TRACEOPERATOR
name|'RPL_TRACEOPERATOR'
op|'='
string|"'204'"
newline|'\n'
DECL|variable|RPL_TRACEUSER
name|'RPL_TRACEUSER'
op|'='
string|"'205'"
newline|'\n'
DECL|variable|RPL_TRACESERVER
name|'RPL_TRACESERVER'
op|'='
string|"'206'"
newline|'\n'
DECL|variable|RPL_TRACESERVICE
name|'RPL_TRACESERVICE'
op|'='
string|"'207'"
newline|'\n'
DECL|variable|RPL_TRACENEWTYPE
name|'RPL_TRACENEWTYPE'
op|'='
string|"'208'"
newline|'\n'
DECL|variable|RPL_TRACECLASS
name|'RPL_TRACECLASS'
op|'='
string|"'209'"
newline|'\n'
DECL|variable|RPL_TRACERECONNECT
name|'RPL_TRACERECONNECT'
op|'='
string|"'210'"
newline|'\n'
DECL|variable|RPL_TRACELOG
name|'RPL_TRACELOG'
op|'='
string|"'261'"
newline|'\n'
DECL|variable|RPL_TRACEEND
name|'RPL_TRACEEND'
op|'='
string|"'262'"
newline|'\n'
DECL|variable|RPL_STATSLINKINFO
name|'RPL_STATSLINKINFO'
op|'='
string|"'211'"
newline|'\n'
DECL|variable|RPL_STATSCOMMANDS
name|'RPL_STATSCOMMANDS'
op|'='
string|"'212'"
newline|'\n'
DECL|variable|RPL_ENDOFSTATS
name|'RPL_ENDOFSTATS'
op|'='
string|"'219'"
newline|'\n'
DECL|variable|RPL_STATSUPTIME
name|'RPL_STATSUPTIME'
op|'='
string|"'242'"
newline|'\n'
DECL|variable|RPL_STATSOLINE
name|'RPL_STATSOLINE'
op|'='
string|"'243'"
newline|'\n'
DECL|variable|RPL_UMODEIS
name|'RPL_UMODEIS'
op|'='
string|"'221'"
newline|'\n'
DECL|variable|RPL_SERVLIST
name|'RPL_SERVLIST'
op|'='
string|"'234'"
newline|'\n'
DECL|variable|RPL_SERVLISTEND
name|'RPL_SERVLISTEND'
op|'='
string|"'235'"
newline|'\n'
DECL|variable|RPL_LUSERCLIENT
name|'RPL_LUSERCLIENT'
op|'='
string|"'251'"
newline|'\n'
DECL|variable|RPL_LUSEROP
name|'RPL_LUSEROP'
op|'='
string|"'252'"
newline|'\n'
DECL|variable|RPL_LUSERUNKNOWN
name|'RPL_LUSERUNKNOWN'
op|'='
string|"'253'"
newline|'\n'
DECL|variable|RPL_LUSERCHANNELS
name|'RPL_LUSERCHANNELS'
op|'='
string|"'254'"
newline|'\n'
DECL|variable|RPL_LUSERME
name|'RPL_LUSERME'
op|'='
string|"'255'"
newline|'\n'
DECL|variable|RPL_ADMINME
name|'RPL_ADMINME'
op|'='
string|"'256'"
newline|'\n'
DECL|variable|RPL_ADMINLOC
name|'RPL_ADMINLOC'
op|'='
string|"'257'"
newline|'\n'
DECL|variable|RPL_ADMINLOC
name|'RPL_ADMINLOC'
op|'='
string|"'258'"
newline|'\n'
DECL|variable|RPL_ADMINEMAIL
name|'RPL_ADMINEMAIL'
op|'='
string|"'259'"
newline|'\n'
DECL|variable|RPL_TRYAGAIN
name|'RPL_TRYAGAIN'
op|'='
string|"'263'"
newline|'\n'
DECL|variable|ERR_NOSUCHNICK
name|'ERR_NOSUCHNICK'
op|'='
string|"'401'"
newline|'\n'
DECL|variable|ERR_NOSUCHSERVER
name|'ERR_NOSUCHSERVER'
op|'='
string|"'402'"
newline|'\n'
DECL|variable|ERR_NOSUCHCHANNEL
name|'ERR_NOSUCHCHANNEL'
op|'='
string|"'403'"
newline|'\n'
DECL|variable|ERR_CANNOTSENDTOCHAN
name|'ERR_CANNOTSENDTOCHAN'
op|'='
string|"'404'"
newline|'\n'
DECL|variable|ERR_TOOMANYCHANNELS
name|'ERR_TOOMANYCHANNELS'
op|'='
string|"'405'"
newline|'\n'
DECL|variable|ERR_WASNOSUCHNICK
name|'ERR_WASNOSUCHNICK'
op|'='
string|"'406'"
newline|'\n'
DECL|variable|ERR_TOOMANYTARGETS
name|'ERR_TOOMANYTARGETS'
op|'='
string|"'407'"
newline|'\n'
DECL|variable|ERR_NOSUCHSERVICE
name|'ERR_NOSUCHSERVICE'
op|'='
string|"'408'"
newline|'\n'
DECL|variable|ERR_NOORIGIN
name|'ERR_NOORIGIN'
op|'='
string|"'409'"
newline|'\n'
DECL|variable|ERR_NORECIPIENT
name|'ERR_NORECIPIENT'
op|'='
string|"'411'"
newline|'\n'
DECL|variable|ERR_NOTEXTTOSEND
name|'ERR_NOTEXTTOSEND'
op|'='
string|"'412'"
newline|'\n'
DECL|variable|ERR_NOTOPLEVEL
name|'ERR_NOTOPLEVEL'
op|'='
string|"'413'"
newline|'\n'
DECL|variable|ERR_WILDTOPLEVEL
name|'ERR_WILDTOPLEVEL'
op|'='
string|"'414'"
newline|'\n'
DECL|variable|ERR_BADMASK
name|'ERR_BADMASK'
op|'='
string|"'415'"
newline|'\n'
DECL|variable|ERR_UNKNOWNCOMMAND
name|'ERR_UNKNOWNCOMMAND'
op|'='
string|"'421'"
newline|'\n'
DECL|variable|ERR_NOMOTD
name|'ERR_NOMOTD'
op|'='
string|"'422'"
newline|'\n'
DECL|variable|ERR_NOADMININFO
name|'ERR_NOADMININFO'
op|'='
string|"'423'"
newline|'\n'
DECL|variable|ERR_FILEERROR
name|'ERR_FILEERROR'
op|'='
string|"'424'"
newline|'\n'
DECL|variable|ERR_NONICKNAMEGIVEN
name|'ERR_NONICKNAMEGIVEN'
op|'='
string|"'431'"
newline|'\n'
DECL|variable|ERR_ERRONEUSNICKNAME
name|'ERR_ERRONEUSNICKNAME'
op|'='
string|"'432'"
newline|'\n'
DECL|variable|ERR_NICKNAMEINUSE
name|'ERR_NICKNAMEINUSE'
op|'='
string|"'433'"
newline|'\n'
DECL|variable|ERR_NICKCOLLISION
name|'ERR_NICKCOLLISION'
op|'='
string|"'436'"
newline|'\n'
DECL|variable|ERR_UNAVAILRESOURCE
name|'ERR_UNAVAILRESOURCE'
op|'='
string|"'437'"
newline|'\n'
DECL|variable|ERR_USERNOTINCHANNEL
name|'ERR_USERNOTINCHANNEL'
op|'='
string|"'441'"
newline|'\n'
DECL|variable|ERR_NOTONCHANNEL
name|'ERR_NOTONCHANNEL'
op|'='
string|"'442'"
newline|'\n'
DECL|variable|ERR_USERONCHANNEL
name|'ERR_USERONCHANNEL'
op|'='
string|"'443'"
newline|'\n'
DECL|variable|ERR_NOLOGIN
name|'ERR_NOLOGIN'
op|'='
string|"'444'"
newline|'\n'
DECL|variable|ERR_SUMMONDISABLED
name|'ERR_SUMMONDISABLED'
op|'='
string|"'445'"
newline|'\n'
DECL|variable|ERR_USERSDISABLED
name|'ERR_USERSDISABLED'
op|'='
string|"'446'"
newline|'\n'
DECL|variable|ERR_NOTREGISTERED
name|'ERR_NOTREGISTERED'
op|'='
string|"'451'"
newline|'\n'
DECL|variable|ERR_NEEDMOREPARAMS
name|'ERR_NEEDMOREPARAMS'
op|'='
string|"'461'"
newline|'\n'
DECL|variable|ERR_ALREADYREGISTRED
name|'ERR_ALREADYREGISTRED'
op|'='
string|"'462'"
newline|'\n'
DECL|variable|ERR_NOPERMFORHOST
name|'ERR_NOPERMFORHOST'
op|'='
string|"'463'"
newline|'\n'
DECL|variable|ERR_PASSWDMISMATCH
name|'ERR_PASSWDMISMATCH'
op|'='
string|"'464'"
newline|'\n'
DECL|variable|ERR_YOUREBANNEDCREEP
name|'ERR_YOUREBANNEDCREEP'
op|'='
string|"'465'"
newline|'\n'
DECL|variable|ERR_YOUWILLBEBANNED
name|'ERR_YOUWILLBEBANNED'
op|'='
string|"'466'"
newline|'\n'
DECL|variable|ERR_KEYSET
name|'ERR_KEYSET'
op|'='
string|"'467'"
newline|'\n'
DECL|variable|ERR_CHANNELISFULL
name|'ERR_CHANNELISFULL'
op|'='
string|"'471'"
newline|'\n'
DECL|variable|ERR_UNKNOWNMODE
name|'ERR_UNKNOWNMODE'
op|'='
string|"'472'"
newline|'\n'
DECL|variable|ERR_INVITEONLYCHAN
name|'ERR_INVITEONLYCHAN'
op|'='
string|"'473'"
newline|'\n'
DECL|variable|ERR_BANNEDFROMCHAN
name|'ERR_BANNEDFROMCHAN'
op|'='
string|"'474'"
newline|'\n'
DECL|variable|ERR_BADCHANNELKEY
name|'ERR_BADCHANNELKEY'
op|'='
string|"'475'"
newline|'\n'
DECL|variable|ERR_BADCHANMASK
name|'ERR_BADCHANMASK'
op|'='
string|"'476'"
newline|'\n'
DECL|variable|ERR_NOCHANMODES
name|'ERR_NOCHANMODES'
op|'='
string|"'477'"
newline|'\n'
DECL|variable|ERR_BANLISTFULL
name|'ERR_BANLISTFULL'
op|'='
string|"'478'"
newline|'\n'
DECL|variable|ERR_NOPRIVILEGES
name|'ERR_NOPRIVILEGES'
op|'='
string|"'481'"
newline|'\n'
DECL|variable|ERR_CHANOPRIVSNEEDED
name|'ERR_CHANOPRIVSNEEDED'
op|'='
string|"'482'"
newline|'\n'
DECL|variable|ERR_CANTKILLSERVER
name|'ERR_CANTKILLSERVER'
op|'='
string|"'483'"
newline|'\n'
DECL|variable|ERR_RESTRICTED
name|'ERR_RESTRICTED'
op|'='
string|"'484'"
newline|'\n'
DECL|variable|ERR_UNIQOPPRIVSNEEDED
name|'ERR_UNIQOPPRIVSNEEDED'
op|'='
string|"'485'"
newline|'\n'
DECL|variable|ERR_NOOPERHOST
name|'ERR_NOOPERHOST'
op|'='
string|"'491'"
newline|'\n'
DECL|variable|ERR_NOSERVICEHOST
name|'ERR_NOSERVICEHOST'
op|'='
string|"'492'"
newline|'\n'
DECL|variable|ERR_UMODEUNKNOWNFLAG
name|'ERR_UMODEUNKNOWNFLAG'
op|'='
string|"'501'"
newline|'\n'
DECL|variable|ERR_USERSDONTMATCH
name|'ERR_USERSDONTMATCH'
op|'='
string|"'502'"
newline|'\n'
nl|'\n'
comment|"# And hey, as long as the strings are already intern'd..."
nl|'\n'
DECL|variable|symbolic_to_numeric
name|'symbolic_to_numeric'
op|'='
op|'{'
nl|'\n'
string|'"RPL_WELCOME"'
op|':'
string|"'001'"
op|','
nl|'\n'
string|'"RPL_YOURHOST"'
op|':'
string|"'002'"
op|','
nl|'\n'
string|'"RPL_CREATED"'
op|':'
string|"'003'"
op|','
nl|'\n'
string|'"RPL_MYINFO"'
op|':'
string|"'004'"
op|','
nl|'\n'
string|'"RPL_ISUPPORT"'
op|':'
string|"'005'"
op|','
nl|'\n'
string|'"RPL_BOUNCE"'
op|':'
string|"'010'"
op|','
nl|'\n'
string|'"RPL_USERHOST"'
op|':'
string|"'302'"
op|','
nl|'\n'
string|'"RPL_ISON"'
op|':'
string|"'303'"
op|','
nl|'\n'
string|'"RPL_AWAY"'
op|':'
string|"'301'"
op|','
nl|'\n'
string|'"RPL_UNAWAY"'
op|':'
string|"'305'"
op|','
nl|'\n'
string|'"RPL_NOWAWAY"'
op|':'
string|"'306'"
op|','
nl|'\n'
string|'"RPL_WHOISUSER"'
op|':'
string|"'311'"
op|','
nl|'\n'
string|'"RPL_WHOISSERVER"'
op|':'
string|"'312'"
op|','
nl|'\n'
string|'"RPL_WHOISOPERATOR"'
op|':'
string|"'313'"
op|','
nl|'\n'
string|'"RPL_WHOISIDLE"'
op|':'
string|"'317'"
op|','
nl|'\n'
string|'"RPL_ENDOFWHOIS"'
op|':'
string|"'318'"
op|','
nl|'\n'
string|'"RPL_WHOISCHANNELS"'
op|':'
string|"'319'"
op|','
nl|'\n'
string|'"RPL_WHOWASUSER"'
op|':'
string|"'314'"
op|','
nl|'\n'
string|'"RPL_ENDOFWHOWAS"'
op|':'
string|"'369'"
op|','
nl|'\n'
string|'"RPL_LISTSTART"'
op|':'
string|"'321'"
op|','
nl|'\n'
string|'"RPL_LIST"'
op|':'
string|"'322'"
op|','
nl|'\n'
string|'"RPL_LISTEND"'
op|':'
string|"'323'"
op|','
nl|'\n'
string|'"RPL_UNIQOPIS"'
op|':'
string|"'325'"
op|','
nl|'\n'
string|'"RPL_CHANNELMODEIS"'
op|':'
string|"'324'"
op|','
nl|'\n'
string|'"RPL_NOTOPIC"'
op|':'
string|"'331'"
op|','
nl|'\n'
string|'"RPL_TOPIC"'
op|':'
string|"'332'"
op|','
nl|'\n'
string|'"RPL_INVITING"'
op|':'
string|"'341'"
op|','
nl|'\n'
string|'"RPL_SUMMONING"'
op|':'
string|"'342'"
op|','
nl|'\n'
string|'"RPL_INVITELIST"'
op|':'
string|"'346'"
op|','
nl|'\n'
string|'"RPL_ENDOFINVITELIST"'
op|':'
string|"'347'"
op|','
nl|'\n'
string|'"RPL_EXCEPTLIST"'
op|':'
string|"'348'"
op|','
nl|'\n'
string|'"RPL_ENDOFEXCEPTLIST"'
op|':'
string|"'349'"
op|','
nl|'\n'
string|'"RPL_VERSION"'
op|':'
string|"'351'"
op|','
nl|'\n'
string|'"RPL_WHOREPLY"'
op|':'
string|"'352'"
op|','
nl|'\n'
string|'"RPL_ENDOFWHO"'
op|':'
string|"'315'"
op|','
nl|'\n'
string|'"RPL_NAMREPLY"'
op|':'
string|"'353'"
op|','
nl|'\n'
string|'"RPL_ENDOFNAMES"'
op|':'
string|"'366'"
op|','
nl|'\n'
string|'"RPL_LINKS"'
op|':'
string|"'364'"
op|','
nl|'\n'
string|'"RPL_ENDOFLINKS"'
op|':'
string|"'365'"
op|','
nl|'\n'
string|'"RPL_BANLIST"'
op|':'
string|"'367'"
op|','
nl|'\n'
string|'"RPL_ENDOFBANLIST"'
op|':'
string|"'368'"
op|','
nl|'\n'
string|'"RPL_INFO"'
op|':'
string|"'371'"
op|','
nl|'\n'
string|'"RPL_ENDOFINFO"'
op|':'
string|"'374'"
op|','
nl|'\n'
string|'"RPL_MOTDSTART"'
op|':'
string|"'375'"
op|','
nl|'\n'
string|'"RPL_MOTD"'
op|':'
string|"'372'"
op|','
nl|'\n'
string|'"RPL_ENDOFMOTD"'
op|':'
string|"'376'"
op|','
nl|'\n'
string|'"RPL_YOUREOPER"'
op|':'
string|"'381'"
op|','
nl|'\n'
string|'"RPL_REHASHING"'
op|':'
string|"'382'"
op|','
nl|'\n'
string|'"RPL_YOURESERVICE"'
op|':'
string|"'383'"
op|','
nl|'\n'
string|'"RPL_TIME"'
op|':'
string|"'391'"
op|','
nl|'\n'
string|'"RPL_USERSSTART"'
op|':'
string|"'392'"
op|','
nl|'\n'
string|'"RPL_USERS"'
op|':'
string|"'393'"
op|','
nl|'\n'
string|'"RPL_ENDOFUSERS"'
op|':'
string|"'394'"
op|','
nl|'\n'
string|'"RPL_NOUSERS"'
op|':'
string|"'395'"
op|','
nl|'\n'
string|'"RPL_TRACELINK"'
op|':'
string|"'200'"
op|','
nl|'\n'
string|'"RPL_TRACECONNECTING"'
op|':'
string|"'201'"
op|','
nl|'\n'
string|'"RPL_TRACEHANDSHAKE"'
op|':'
string|"'202'"
op|','
nl|'\n'
string|'"RPL_TRACEUNKNOWN"'
op|':'
string|"'203'"
op|','
nl|'\n'
string|'"RPL_TRACEOPERATOR"'
op|':'
string|"'204'"
op|','
nl|'\n'
string|'"RPL_TRACEUSER"'
op|':'
string|"'205'"
op|','
nl|'\n'
string|'"RPL_TRACESERVER"'
op|':'
string|"'206'"
op|','
nl|'\n'
string|'"RPL_TRACESERVICE"'
op|':'
string|"'207'"
op|','
nl|'\n'
string|'"RPL_TRACENEWTYPE"'
op|':'
string|"'208'"
op|','
nl|'\n'
string|'"RPL_TRACECLASS"'
op|':'
string|"'209'"
op|','
nl|'\n'
string|'"RPL_TRACERECONNECT"'
op|':'
string|"'210'"
op|','
nl|'\n'
string|'"RPL_TRACELOG"'
op|':'
string|"'261'"
op|','
nl|'\n'
string|'"RPL_TRACEEND"'
op|':'
string|"'262'"
op|','
nl|'\n'
string|'"RPL_STATSLINKINFO"'
op|':'
string|"'211'"
op|','
nl|'\n'
string|'"RPL_STATSCOMMANDS"'
op|':'
string|"'212'"
op|','
nl|'\n'
string|'"RPL_ENDOFSTATS"'
op|':'
string|"'219'"
op|','
nl|'\n'
string|'"RPL_STATSUPTIME"'
op|':'
string|"'242'"
op|','
nl|'\n'
string|'"RPL_STATSOLINE"'
op|':'
string|"'243'"
op|','
nl|'\n'
string|'"RPL_UMODEIS"'
op|':'
string|"'221'"
op|','
nl|'\n'
string|'"RPL_SERVLIST"'
op|':'
string|"'234'"
op|','
nl|'\n'
string|'"RPL_SERVLISTEND"'
op|':'
string|"'235'"
op|','
nl|'\n'
string|'"RPL_LUSERCLIENT"'
op|':'
string|"'251'"
op|','
nl|'\n'
string|'"RPL_LUSEROP"'
op|':'
string|"'252'"
op|','
nl|'\n'
string|'"RPL_LUSERUNKNOWN"'
op|':'
string|"'253'"
op|','
nl|'\n'
string|'"RPL_LUSERCHANNELS"'
op|':'
string|"'254'"
op|','
nl|'\n'
string|'"RPL_LUSERME"'
op|':'
string|"'255'"
op|','
nl|'\n'
string|'"RPL_ADMINME"'
op|':'
string|"'256'"
op|','
nl|'\n'
string|'"RPL_ADMINLOC"'
op|':'
string|"'257'"
op|','
nl|'\n'
string|'"RPL_ADMINLOC"'
op|':'
string|"'258'"
op|','
nl|'\n'
string|'"RPL_ADMINEMAIL"'
op|':'
string|"'259'"
op|','
nl|'\n'
string|'"RPL_TRYAGAIN"'
op|':'
string|"'263'"
op|','
nl|'\n'
string|'"ERR_NOSUCHNICK"'
op|':'
string|"'401'"
op|','
nl|'\n'
string|'"ERR_NOSUCHSERVER"'
op|':'
string|"'402'"
op|','
nl|'\n'
string|'"ERR_NOSUCHCHANNEL"'
op|':'
string|"'403'"
op|','
nl|'\n'
string|'"ERR_CANNOTSENDTOCHAN"'
op|':'
string|"'404'"
op|','
nl|'\n'
string|'"ERR_TOOMANYCHANNELS"'
op|':'
string|"'405'"
op|','
nl|'\n'
string|'"ERR_WASNOSUCHNICK"'
op|':'
string|"'406'"
op|','
nl|'\n'
string|'"ERR_TOOMANYTARGETS"'
op|':'
string|"'407'"
op|','
nl|'\n'
string|'"ERR_NOSUCHSERVICE"'
op|':'
string|"'408'"
op|','
nl|'\n'
string|'"ERR_NOORIGIN"'
op|':'
string|"'409'"
op|','
nl|'\n'
string|'"ERR_NORECIPIENT"'
op|':'
string|"'411'"
op|','
nl|'\n'
string|'"ERR_NOTEXTTOSEND"'
op|':'
string|"'412'"
op|','
nl|'\n'
string|'"ERR_NOTOPLEVEL"'
op|':'
string|"'413'"
op|','
nl|'\n'
string|'"ERR_WILDTOPLEVEL"'
op|':'
string|"'414'"
op|','
nl|'\n'
string|'"ERR_BADMASK"'
op|':'
string|"'415'"
op|','
nl|'\n'
string|'"ERR_UNKNOWNCOMMAND"'
op|':'
string|"'421'"
op|','
nl|'\n'
string|'"ERR_NOMOTD"'
op|':'
string|"'422'"
op|','
nl|'\n'
string|'"ERR_NOADMININFO"'
op|':'
string|"'423'"
op|','
nl|'\n'
string|'"ERR_FILEERROR"'
op|':'
string|"'424'"
op|','
nl|'\n'
string|'"ERR_NONICKNAMEGIVEN"'
op|':'
string|"'431'"
op|','
nl|'\n'
string|'"ERR_ERRONEUSNICKNAME"'
op|':'
string|"'432'"
op|','
nl|'\n'
string|'"ERR_NICKNAMEINUSE"'
op|':'
string|"'433'"
op|','
nl|'\n'
string|'"ERR_NICKCOLLISION"'
op|':'
string|"'436'"
op|','
nl|'\n'
string|'"ERR_UNAVAILRESOURCE"'
op|':'
string|"'437'"
op|','
nl|'\n'
string|'"ERR_USERNOTINCHANNEL"'
op|':'
string|"'441'"
op|','
nl|'\n'
string|'"ERR_NOTONCHANNEL"'
op|':'
string|"'442'"
op|','
nl|'\n'
string|'"ERR_USERONCHANNEL"'
op|':'
string|"'443'"
op|','
nl|'\n'
string|'"ERR_NOLOGIN"'
op|':'
string|"'444'"
op|','
nl|'\n'
string|'"ERR_SUMMONDISABLED"'
op|':'
string|"'445'"
op|','
nl|'\n'
string|'"ERR_USERSDISABLED"'
op|':'
string|"'446'"
op|','
nl|'\n'
string|'"ERR_NOTREGISTERED"'
op|':'
string|"'451'"
op|','
nl|'\n'
string|'"ERR_NEEDMOREPARAMS"'
op|':'
string|"'461'"
op|','
nl|'\n'
string|'"ERR_ALREADYREGISTRED"'
op|':'
string|"'462'"
op|','
nl|'\n'
string|'"ERR_NOPERMFORHOST"'
op|':'
string|"'463'"
op|','
nl|'\n'
string|'"ERR_PASSWDMISMATCH"'
op|':'
string|"'464'"
op|','
nl|'\n'
string|'"ERR_YOUREBANNEDCREEP"'
op|':'
string|"'465'"
op|','
nl|'\n'
string|'"ERR_YOUWILLBEBANNED"'
op|':'
string|"'466'"
op|','
nl|'\n'
string|'"ERR_KEYSET"'
op|':'
string|"'467'"
op|','
nl|'\n'
string|'"ERR_CHANNELISFULL"'
op|':'
string|"'471'"
op|','
nl|'\n'
string|'"ERR_UNKNOWNMODE"'
op|':'
string|"'472'"
op|','
nl|'\n'
string|'"ERR_INVITEONLYCHAN"'
op|':'
string|"'473'"
op|','
nl|'\n'
string|'"ERR_BANNEDFROMCHAN"'
op|':'
string|"'474'"
op|','
nl|'\n'
string|'"ERR_BADCHANNELKEY"'
op|':'
string|"'475'"
op|','
nl|'\n'
string|'"ERR_BADCHANMASK"'
op|':'
string|"'476'"
op|','
nl|'\n'
string|'"ERR_NOCHANMODES"'
op|':'
string|"'477'"
op|','
nl|'\n'
string|'"ERR_BANLISTFULL"'
op|':'
string|"'478'"
op|','
nl|'\n'
string|'"ERR_NOPRIVILEGES"'
op|':'
string|"'481'"
op|','
nl|'\n'
string|'"ERR_CHANOPRIVSNEEDED"'
op|':'
string|"'482'"
op|','
nl|'\n'
string|'"ERR_CANTKILLSERVER"'
op|':'
string|"'483'"
op|','
nl|'\n'
string|'"ERR_RESTRICTED"'
op|':'
string|"'484'"
op|','
nl|'\n'
string|'"ERR_UNIQOPPRIVSNEEDED"'
op|':'
string|"'485'"
op|','
nl|'\n'
string|'"ERR_NOOPERHOST"'
op|':'
string|"'491'"
op|','
nl|'\n'
string|'"ERR_NOSERVICEHOST"'
op|':'
string|"'492'"
op|','
nl|'\n'
string|'"ERR_UMODEUNKNOWNFLAG"'
op|':'
string|"'501'"
op|','
nl|'\n'
string|'"ERR_USERSDONTMATCH"'
op|':'
string|"'502'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|numeric_to_symbolic
name|'numeric_to_symbolic'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'symbolic_to_numeric'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'numeric_to_symbolic'
op|'['
name|'v'
op|']'
op|'='
name|'k'
newline|'\n'
dedent|''
endmarker|''
end_unit

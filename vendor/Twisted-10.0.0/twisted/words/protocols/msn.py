begin_unit
comment|'# -*- test-case-name: twisted.words.test -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nMSNP8 Protocol (client only) - semi-experimental\n\nThis module provides support for clients using the MSN Protocol (MSNP8).\nThere are basically 3 servers involved in any MSN session:\n\nI{Dispatch server}\n\nThe DispatchClient class handles connections to the\ndispatch server, which basically delegates users to a\nsuitable notification server.\n\nYou will want to subclass this and handle the gotNotificationReferral\nmethod appropriately.\n\nI{Notification Server}\n\nThe NotificationClient class handles connections to the\nnotification server, which acts as a session server\n(state updates, message negotiation etc...)\n\nI{Switcboard Server}\n\nThe SwitchboardClient handles connections to switchboard\nservers which are used to conduct conversations with other users.\n\nThere are also two classes (FileSend and FileReceive) used\nfor file transfers.\n\nClients handle events in two ways.\n\n  - each client request requiring a response will return a Deferred,\n    the callback for same will be fired when the server sends the\n    required response\n  - Events which are not in response to any client request have\n    respective methods which should be overridden and handled in\n    an adequate manner\n\nMost client request callbacks require more than one argument,\nand since Deferreds can only pass the callback one result,\nmost of the time the callback argument will be a tuple of\nvalues (documented in the respective request method).\nTo make reading/writing code easier, callbacks can be defined in\na number of ways to handle this \'cleanly\'. One way would be to\ndefine methods like: def callBack(self, (arg1, arg2, arg)): ...\nanother way would be to do something like:\nd.addCallback(lambda result: myCallback(*result)).\n\nIf the server sends an error response to a client request,\nthe errback of the corresponding Deferred will be called,\nthe argument being the corresponding error code.\n\nB{NOTE}:\nDue to the lack of an official spec for MSNP8, extra checking\nthan may be deemed necessary often takes place considering the\nserver is never \'wrong\'. Thus, if gotBadLine (in any of the 3\nmain clients) is called, or an MSNProtocolError is raised, it\'s\nprobably a good idea to submit a bug report. ;)\nUse of this module requires that PyOpenSSL is installed.\n\nTODO\n====\n- check message hooks with invalid x-msgsinvite messages.\n- font handling\n- switchboard factory\n\n@author: Sam Jordan\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'types'
op|','
name|'operator'
op|','
name|'os'
newline|'\n'
name|'from'
name|'random'
name|'import'
name|'randint'
newline|'\n'
name|'from'
name|'urllib'
name|'import'
name|'quote'
op|','
name|'unquote'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
op|','
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'protocol'
name|'import'
name|'ClientFactory'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'ssl'
name|'import'
name|'ClientContextFactory'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|ClientContextFactory
indent|'    '
name|'ClientContextFactory'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'protocols'
op|'.'
name|'basic'
name|'import'
name|'LineReceiver'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'web'
op|'.'
name|'http'
name|'import'
name|'HTTPClient'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|MSN_PROTOCOL_VERSION
name|'MSN_PROTOCOL_VERSION'
op|'='
string|'"MSNP8 CVR0"'
comment|'# protocol version'
newline|'\n'
DECL|variable|MSN_PORT
name|'MSN_PORT'
op|'='
number|'1863'
comment|'# default dispatch server port'
newline|'\n'
DECL|variable|MSN_MAX_MESSAGE
name|'MSN_MAX_MESSAGE'
op|'='
number|'1664'
comment|'# max message length'
newline|'\n'
DECL|variable|MSN_CHALLENGE_STR
name|'MSN_CHALLENGE_STR'
op|'='
string|'"Q1P7W2E4J9R8U3S5"'
comment|'# used for server challenges'
newline|'\n'
DECL|variable|MSN_CVR_STR
name|'MSN_CVR_STR'
op|'='
string|'"0x0409 win 4.10 i386 MSNMSGR 5.0.0544 MSMSGS"'
comment|'# :('
newline|'\n'
nl|'\n'
comment|'# auth constants'
nl|'\n'
DECL|variable|LOGIN_SUCCESS
name|'LOGIN_SUCCESS'
op|'='
number|'1'
newline|'\n'
DECL|variable|LOGIN_FAILURE
name|'LOGIN_FAILURE'
op|'='
number|'2'
newline|'\n'
DECL|variable|LOGIN_REDIRECT
name|'LOGIN_REDIRECT'
op|'='
number|'3'
newline|'\n'
nl|'\n'
comment|'# list constants'
nl|'\n'
DECL|variable|FORWARD_LIST
name|'FORWARD_LIST'
op|'='
number|'1'
newline|'\n'
DECL|variable|ALLOW_LIST
name|'ALLOW_LIST'
op|'='
number|'2'
newline|'\n'
DECL|variable|BLOCK_LIST
name|'BLOCK_LIST'
op|'='
number|'4'
newline|'\n'
DECL|variable|REVERSE_LIST
name|'REVERSE_LIST'
op|'='
number|'8'
newline|'\n'
nl|'\n'
comment|'# phone constants'
nl|'\n'
DECL|variable|HOME_PHONE
name|'HOME_PHONE'
op|'='
string|'"PHH"'
newline|'\n'
DECL|variable|WORK_PHONE
name|'WORK_PHONE'
op|'='
string|'"PHW"'
newline|'\n'
DECL|variable|MOBILE_PHONE
name|'MOBILE_PHONE'
op|'='
string|'"PHM"'
newline|'\n'
DECL|variable|HAS_PAGER
name|'HAS_PAGER'
op|'='
string|'"MOB"'
newline|'\n'
nl|'\n'
comment|'# status constants'
nl|'\n'
DECL|variable|STATUS_ONLINE
name|'STATUS_ONLINE'
op|'='
string|"'NLN'"
newline|'\n'
DECL|variable|STATUS_OFFLINE
name|'STATUS_OFFLINE'
op|'='
string|"'FLN'"
newline|'\n'
DECL|variable|STATUS_HIDDEN
name|'STATUS_HIDDEN'
op|'='
string|"'HDN'"
newline|'\n'
DECL|variable|STATUS_IDLE
name|'STATUS_IDLE'
op|'='
string|"'IDL'"
newline|'\n'
DECL|variable|STATUS_AWAY
name|'STATUS_AWAY'
op|'='
string|"'AWY'"
newline|'\n'
DECL|variable|STATUS_BUSY
name|'STATUS_BUSY'
op|'='
string|"'BSY'"
newline|'\n'
DECL|variable|STATUS_BRB
name|'STATUS_BRB'
op|'='
string|"'BRB'"
newline|'\n'
DECL|variable|STATUS_PHONE
name|'STATUS_PHONE'
op|'='
string|"'PHN'"
newline|'\n'
DECL|variable|STATUS_LUNCH
name|'STATUS_LUNCH'
op|'='
string|"'LUN'"
newline|'\n'
nl|'\n'
DECL|variable|CR
name|'CR'
op|'='
string|'"\\r"'
newline|'\n'
DECL|variable|LF
name|'LF'
op|'='
string|'"\\n"'
newline|'\n'
nl|'\n'
DECL|function|checkParamLen
name|'def'
name|'checkParamLen'
op|'('
name|'num'
op|','
name|'expected'
op|','
name|'cmd'
op|','
name|'error'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'error'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'error'
op|'='
string|'"Invalid Number of Parameters for %s"'
op|'%'
name|'cmd'
newline|'\n'
dedent|''
name|'if'
name|'num'
op|'!='
name|'expected'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'MSNProtocolError'
op|','
name|'error'
newline|'\n'
nl|'\n'
DECL|function|_parseHeader
dedent|''
dedent|''
name|'def'
name|'_parseHeader'
op|'('
name|'h'
op|','
name|'v'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Split a certin number of known\n    header values with the format:\n    field1=val,field2=val,field3=val into\n    a dict mapping fields to values.\n    @param h: the header\'s key\n    @param v: the header\'s value as a string\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'h'
name|'in'
op|'('
string|"'passporturls'"
op|','
string|"'authentication-info'"
op|','
string|"'www-authenticate'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'v'
op|'='
name|'v'
op|'.'
name|'replace'
op|'('
string|"'Passport1.4'"
op|','
string|"''"
op|')'
op|'.'
name|'lstrip'
op|'('
op|')'
newline|'\n'
name|'fields'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'fieldPair'
name|'in'
name|'v'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'field'
op|','
name|'value'
op|'='
name|'fieldPair'
op|'.'
name|'split'
op|'('
string|"'='"
op|','
number|'1'
op|')'
newline|'\n'
name|'fields'
op|'['
name|'field'
op|'.'
name|'lower'
op|'('
op|')'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'fields'
op|'['
name|'field'
op|'.'
name|'lower'
op|'('
op|')'
op|']'
op|'='
string|"''"
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'fields'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'v'
newline|'\n'
nl|'\n'
DECL|function|_parsePrimitiveHost
dedent|''
dedent|''
name|'def'
name|'_parsePrimitiveHost'
op|'('
name|'host'
op|')'
op|':'
newline|'\n'
comment|'# Ho Ho Ho'
nl|'\n'
indent|'    '
name|'h'
op|','
name|'p'
op|'='
name|'host'
op|'.'
name|'replace'
op|'('
string|"'https://'"
op|','
string|"''"
op|')'
op|'.'
name|'split'
op|'('
string|"'/'"
op|','
number|'1'
op|')'
newline|'\n'
name|'p'
op|'='
string|"'/'"
op|'+'
name|'p'
newline|'\n'
name|'return'
name|'h'
op|','
name|'p'
newline|'\n'
nl|'\n'
DECL|function|_login
dedent|''
name|'def'
name|'_login'
op|'('
name|'userHandle'
op|','
name|'passwd'
op|','
name|'nexusServer'
op|','
name|'cached'
op|'='
number|'0'
op|','
name|'authData'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This function is used internally and should not ever be called\n    directly.\n    """'
newline|'\n'
name|'cb'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|function|_cb
name|'def'
name|'_cb'
op|'('
name|'server'
op|','
name|'auth'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'loginFac'
op|'='
name|'ClientFactory'
op|'('
op|')'
newline|'\n'
name|'loginFac'
op|'.'
name|'protocol'
op|'='
name|'lambda'
op|':'
name|'PassportLogin'
op|'('
name|'cb'
op|','
name|'userHandle'
op|','
name|'passwd'
op|','
name|'server'
op|','
name|'auth'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectSSL'
op|'('
name|'_parsePrimitiveHost'
op|'('
name|'server'
op|')'
op|'['
number|'0'
op|']'
op|','
number|'443'
op|','
name|'loginFac'
op|','
name|'ClientContextFactory'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'cached'
op|':'
newline|'\n'
indent|'        '
name|'_cb'
op|'('
name|'nexusServer'
op|','
name|'authData'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'fac'
op|'='
name|'ClientFactory'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'_cb'
op|','
name|'callbackArgs'
op|'='
op|'('
name|'authData'
op|','
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'lambda'
name|'f'
op|':'
name|'cb'
op|'.'
name|'errback'
op|'('
name|'f'
op|')'
op|')'
newline|'\n'
name|'fac'
op|'.'
name|'protocol'
op|'='
name|'lambda'
op|':'
name|'PassportNexus'
op|'('
name|'d'
op|','
name|'nexusServer'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectSSL'
op|'('
name|'_parsePrimitiveHost'
op|'('
name|'nexusServer'
op|')'
op|'['
number|'0'
op|']'
op|','
number|'443'
op|','
name|'fac'
op|','
name|'ClientContextFactory'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'cb'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PassportNexus
dedent|''
name|'class'
name|'PassportNexus'
op|'('
name|'HTTPClient'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""\n    Used to obtain the URL of a valid passport\n    login HTTPS server.\n\n    This class is used internally and should\n    not be instantiated directly -- that is,\n    The passport logging in process is handled\n    transparantly by NotificationClient.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'deferred'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'='
name|'deferred'
newline|'\n'
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'path'
op|'='
name|'_parsePrimitiveHost'
op|'('
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'HTTPClient'
op|'.'
name|'connectionMade'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendCommand'
op|'('
string|"'GET'"
op|','
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendHeader'
op|'('
string|"'Host'"
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'endHeaders'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'headers'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|handleHeader
dedent|''
name|'def'
name|'handleHeader'
op|'('
name|'self'
op|','
name|'header'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'h'
op|'='
name|'header'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'headers'
op|'['
name|'h'
op|']'
op|'='
name|'_parseHeader'
op|'('
name|'h'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleEndHeaders
dedent|''
name|'def'
name|'handleEndHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'connected'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'headers'
op|'.'
name|'has_key'
op|'('
string|"'passporturls'"
op|')'
name|'or'
name|'not'
name|'self'
op|'.'
name|'headers'
op|'['
string|"'passporturls'"
op|']'
op|'.'
name|'has_key'
op|'('
string|"'dalogin'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'failure'
op|'.'
name|'DefaultException'
op|'('
string|'"Invalid Nexus Reply"'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
string|"'https://'"
op|'+'
name|'self'
op|'.'
name|'headers'
op|'['
string|"'passporturls'"
op|']'
op|'['
string|"'dalogin'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleResponse
dedent|''
name|'def'
name|'handleResponse'
op|'('
name|'self'
op|','
name|'r'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|PassportLogin
dedent|''
dedent|''
name|'class'
name|'PassportLogin'
op|'('
name|'HTTPClient'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class is used internally to obtain\n    a login ticket from a passport HTTPS\n    server -- it should not be used directly.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|_finished
name|'_finished'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'deferred'
op|','
name|'userHandle'
op|','
name|'passwd'
op|','
name|'host'
op|','
name|'authData'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'='
name|'deferred'
newline|'\n'
name|'self'
op|'.'
name|'userHandle'
op|'='
name|'userHandle'
newline|'\n'
name|'self'
op|'.'
name|'passwd'
op|'='
name|'passwd'
newline|'\n'
name|'self'
op|'.'
name|'authData'
op|'='
name|'authData'
newline|'\n'
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'path'
op|'='
name|'_parsePrimitiveHost'
op|'('
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendCommand'
op|'('
string|"'GET'"
op|','
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendHeader'
op|'('
string|"'Authorization'"
op|','
string|"'Passport1.4 OrgVerb=GET,OrgURL=http://messenger.msn.com,'"
op|'+'
nl|'\n'
string|"'sign-in=%s,pwd=%s,%s'"
op|'%'
op|'('
name|'quote'
op|'('
name|'self'
op|'.'
name|'userHandle'
op|')'
op|','
name|'self'
op|'.'
name|'passwd'
op|','
name|'self'
op|'.'
name|'authData'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendHeader'
op|'('
string|"'Host'"
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'endHeaders'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'headers'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|handleHeader
dedent|''
name|'def'
name|'handleHeader'
op|'('
name|'self'
op|','
name|'header'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'h'
op|'='
name|'header'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'headers'
op|'['
name|'h'
op|']'
op|'='
name|'_parseHeader'
op|'('
name|'h'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleEndHeaders
dedent|''
name|'def'
name|'handleEndHeaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_finished'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_finished'
op|'='
number|'1'
comment|'# I think we need this because of HTTPClient'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'connected'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'authHeader'
op|'='
string|"'authentication-info'"
newline|'\n'
name|'_interHeader'
op|'='
string|"'www-authenticate'"
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'headers'
op|'.'
name|'has_key'
op|'('
name|'_interHeader'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'authHeader'
op|'='
name|'_interHeader'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'='
name|'self'
op|'.'
name|'headers'
op|'['
name|'authHeader'
op|']'
newline|'\n'
name|'status'
op|'='
name|'info'
op|'['
string|"'da-status'"
op|']'
newline|'\n'
name|'handler'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'login_%s'"
op|'%'
op|'('
name|'status'
op|','
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'handler'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'('
name|'info'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handleResponse
dedent|''
dedent|''
name|'def'
name|'handleResponse'
op|'('
name|'self'
op|','
name|'r'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|login_success
dedent|''
name|'def'
name|'login_success'
op|'('
name|'self'
op|','
name|'info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ticket'
op|'='
name|'info'
op|'['
string|"'from-pp'"
op|']'
newline|'\n'
name|'ticket'
op|'='
name|'ticket'
op|'['
number|'1'
op|':'
name|'len'
op|'('
name|'ticket'
op|')'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
op|'('
name|'LOGIN_SUCCESS'
op|','
name|'ticket'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|login_failed
dedent|''
name|'def'
name|'login_failed'
op|'('
name|'self'
op|','
name|'info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
op|'('
name|'LOGIN_FAILURE'
op|','
name|'unquote'
op|'('
name|'info'
op|'['
string|"'cbtxt'"
op|']'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|login_redir
dedent|''
name|'def'
name|'login_redir'
op|'('
name|'self'
op|','
name|'info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
op|'('
name|'LOGIN_REDIRECT'
op|','
name|'self'
op|'.'
name|'headers'
op|'['
string|"'location'"
op|']'
op|','
name|'self'
op|'.'
name|'authData'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MSNProtocolError
dedent|''
dedent|''
name|'class'
name|'MSNProtocolError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This Exception is basically used for debugging\n    purposes, as the official MSN server should never\n    send anything _wrong_ and nobody in their right\n    mind would run their B{own} MSN server.\n    If it is raised by default command handlers\n    (handle_BLAH) the error will be logged.\n    """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MSNCommandFailed
dedent|''
name|'class'
name|'MSNCommandFailed'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The server said that the command failed.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'errorCode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'errorCode'
op|'='
name|'errorCode'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|'"Command failed: %s (error code %d)"'
nl|'\n'
op|'%'
op|'('
name|'errorCodes'
op|'['
name|'self'
op|'.'
name|'errorCode'
op|']'
op|','
name|'self'
op|'.'
name|'errorCode'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MSNMessage
dedent|''
dedent|''
name|'class'
name|'MSNMessage'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    I am the class used to represent an \'instant\' message.\n\n    @ivar userHandle: The user handle (passport) of the sender\n                      (this is only used when receiving a message)\n    @ivar screenName: The screen name of the sender (this is only used\n                      when receiving a message)\n    @ivar message: The message\n    @ivar headers: The message headers\n    @type headers: dict\n    @ivar length: The message length (including headers and line endings)\n    @ivar ack: This variable is used to tell the server how to respond\n               once the message has been sent. If set to MESSAGE_ACK\n               (default) the server will respond with an ACK upon receiving\n               the message, if set to MESSAGE_NACK the server will respond\n               with a NACK upon failure to receive the message.\n               If set to MESSAGE_ACK_NONE the server will do nothing.\n               This is relevant for the return value of\n               SwitchboardClient.sendMessage (which will return\n               a Deferred if ack is set to either MESSAGE_ACK or MESSAGE_NACK\n               and will fire when the respective ACK or NACK is received).\n               If set to MESSAGE_ACK_NONE sendMessage will return None.\n    """'
newline|'\n'
DECL|variable|MESSAGE_ACK
name|'MESSAGE_ACK'
op|'='
string|"'A'"
newline|'\n'
DECL|variable|MESSAGE_NACK
name|'MESSAGE_NACK'
op|'='
string|"'N'"
newline|'\n'
DECL|variable|MESSAGE_ACK_NONE
name|'MESSAGE_ACK_NONE'
op|'='
string|"'U'"
newline|'\n'
nl|'\n'
DECL|variable|ack
name|'ack'
op|'='
name|'MESSAGE_ACK'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'length'
op|'='
number|'0'
op|','
name|'userHandle'
op|'='
string|'""'
op|','
name|'screenName'
op|'='
string|'""'
op|','
name|'message'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'userHandle'
op|'='
name|'userHandle'
newline|'\n'
name|'self'
op|'.'
name|'screenName'
op|'='
name|'screenName'
newline|'\n'
name|'self'
op|'.'
name|'message'
op|'='
name|'message'
newline|'\n'
name|'self'
op|'.'
name|'headers'
op|'='
op|'{'
string|"'MIME-Version'"
op|':'
string|"'1.0'"
op|','
string|"'Content-Type'"
op|':'
string|"'text/plain'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'length'
op|'='
name|'length'
newline|'\n'
name|'self'
op|'.'
name|'readPos'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|_calcMessageLen
dedent|''
name|'def'
name|'_calcMessageLen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        used to calculte the number to send\n        as the message length when sending a message.\n        """'
newline|'\n'
name|'return'
name|'reduce'
op|'('
name|'operator'
op|'.'
name|'add'
op|','
op|'['
name|'len'
op|'('
name|'x'
op|'['
number|'0'
op|']'
op|')'
op|'+'
name|'len'
op|'('
name|'x'
op|'['
number|'1'
op|']'
op|')'
op|'+'
number|'4'
name|'for'
name|'x'
name|'in'
name|'self'
op|'.'
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
op|']'
op|')'
op|'+'
name|'len'
op|'('
name|'self'
op|'.'
name|'message'
op|')'
op|'+'
number|'2'
newline|'\n'
nl|'\n'
DECL|member|setHeader
dedent|''
name|'def'
name|'setHeader'
op|'('
name|'self'
op|','
name|'header'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" set the desired header """'
newline|'\n'
name|'self'
op|'.'
name|'headers'
op|'['
name|'header'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|getHeader
dedent|''
name|'def'
name|'getHeader'
op|'('
name|'self'
op|','
name|'header'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        get the desired header value\n        @raise KeyError: if no such header exists.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'headers'
op|'['
name|'header'
op|']'
newline|'\n'
nl|'\n'
DECL|member|hasHeader
dedent|''
name|'def'
name|'hasHeader'
op|'('
name|'self'
op|','
name|'header'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" check to see if the desired header exists """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'headers'
op|'.'
name|'has_key'
op|'('
name|'header'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getMessage
dedent|''
name|'def'
name|'getMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" return the message - not including headers """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'message'
newline|'\n'
nl|'\n'
DECL|member|setMessage
dedent|''
name|'def'
name|'setMessage'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" set the message text """'
newline|'\n'
name|'self'
op|'.'
name|'message'
op|'='
name|'message'
newline|'\n'
nl|'\n'
DECL|class|MSNContact
dedent|''
dedent|''
name|'class'
name|'MSNContact'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""\n    This class represents a contact (user).\n\n    @ivar userHandle: The contact\'s user handle (passport).\n    @ivar screenName: The contact\'s screen name.\n    @ivar groups: A list of all the group IDs which this\n                  contact belongs to.\n    @ivar lists: An integer representing the sum of all lists\n                 that this contact belongs to.\n    @ivar status: The contact\'s status code.\n    @type status: str if contact\'s status is known, None otherwise.\n\n    @ivar homePhone: The contact\'s home phone number.\n    @type homePhone: str if known, otherwise None.\n    @ivar workPhone: The contact\'s work phone number.\n    @type workPhone: str if known, otherwise None.\n    @ivar mobilePhone: The contact\'s mobile phone number.\n    @type mobilePhone: str if known, otherwise None.\n    @ivar hasPager: Whether or not this user has a mobile pager\n                    (true=yes, false=no)\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'userHandle'
op|'='
string|'""'
op|','
name|'screenName'
op|'='
string|'""'
op|','
name|'lists'
op|'='
number|'0'
op|','
name|'groups'
op|'='
op|'['
op|']'
op|','
name|'status'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'userHandle'
op|'='
name|'userHandle'
newline|'\n'
name|'self'
op|'.'
name|'screenName'
op|'='
name|'screenName'
newline|'\n'
name|'self'
op|'.'
name|'lists'
op|'='
name|'lists'
newline|'\n'
name|'self'
op|'.'
name|'groups'
op|'='
op|'['
op|']'
comment|'# if applicable'
newline|'\n'
name|'self'
op|'.'
name|'status'
op|'='
name|'status'
comment|'# current status'
newline|'\n'
nl|'\n'
comment|'# phone details'
nl|'\n'
name|'self'
op|'.'
name|'homePhone'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'workPhone'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'mobilePhone'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'hasPager'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|setPhone
dedent|''
name|'def'
name|'setPhone'
op|'('
name|'self'
op|','
name|'phoneType'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        set phone numbers/values for this specific user.\n        for phoneType check the *_PHONE constants and HAS_PAGER\n        """'
newline|'\n'
nl|'\n'
name|'t'
op|'='
name|'phoneType'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'if'
name|'t'
op|'=='
name|'HOME_PHONE'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'homePhone'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'t'
op|'=='
name|'WORK_PHONE'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'workPhone'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'t'
op|'=='
name|'MOBILE_PHONE'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mobilePhone'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'t'
op|'=='
name|'HAS_PAGER'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'hasPager'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|'"Invalid Phone Type"'
newline|'\n'
nl|'\n'
DECL|member|addToList
dedent|''
dedent|''
name|'def'
name|'addToList'
op|'('
name|'self'
op|','
name|'listType'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Update the lists attribute to\n        reflect being part of the\n        given list.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'lists'
op|'|='
name|'listType'
newline|'\n'
nl|'\n'
DECL|member|removeFromList
dedent|''
name|'def'
name|'removeFromList'
op|'('
name|'self'
op|','
name|'listType'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Update the lists attribute to\n        reflect being removed from the\n        given list.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'lists'
op|'^='
name|'listType'
newline|'\n'
nl|'\n'
DECL|class|MSNContactList
dedent|''
dedent|''
name|'class'
name|'MSNContactList'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class represents a basic MSN contact list.\n\n    @ivar contacts: All contacts on my various lists\n    @type contacts: dict (mapping user handles to MSNContact objects)\n    @ivar version: The current contact list version (used for list syncing)\n    @ivar groups: a mapping of group ids to group names\n                  (groups can only exist on the forward list)\n    @type groups: dict\n\n    B{Note}:\n    This is used only for storage and doesn\'t effect the\n    server\'s contact list.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'contacts'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'version'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'groups'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'autoAdd'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'privacy'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|_getContactsFromList
dedent|''
name|'def'
name|'_getContactsFromList'
op|'('
name|'self'
op|','
name|'listType'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Obtain all contacts which belong\n        to the given list type.\n        """'
newline|'\n'
name|'return'
name|'dict'
op|'('
op|'['
op|'('
name|'uH'
op|','
name|'obj'
op|')'
name|'for'
name|'uH'
op|','
name|'obj'
name|'in'
name|'self'
op|'.'
name|'contacts'
op|'.'
name|'items'
op|'('
op|')'
name|'if'
name|'obj'
op|'.'
name|'lists'
op|'&'
name|'listType'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addContact
dedent|''
name|'def'
name|'addContact'
op|'('
name|'self'
op|','
name|'contact'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add a contact\n        """'
newline|'\n'
name|'self'
op|'.'
name|'contacts'
op|'['
name|'contact'
op|'.'
name|'userHandle'
op|']'
op|'='
name|'contact'
newline|'\n'
nl|'\n'
DECL|member|remContact
dedent|''
name|'def'
name|'remContact'
op|'('
name|'self'
op|','
name|'userHandle'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove a contact\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'contacts'
op|'['
name|'userHandle'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|getContact
dedent|''
dedent|''
name|'def'
name|'getContact'
op|'('
name|'self'
op|','
name|'userHandle'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Obtain the MSNContact object\n        associated with the given\n        userHandle.\n        @return: the MSNContact object if\n                 the user exists, or None.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'contacts'
op|'['
name|'userHandle'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|getBlockedContacts
dedent|''
dedent|''
name|'def'
name|'getBlockedContacts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Obtain all the contacts on my block list\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_getContactsFromList'
op|'('
name|'BLOCK_LIST'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getAuthorizedContacts
dedent|''
name|'def'
name|'getAuthorizedContacts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Obtain all the contacts on my auth list.\n        (These are contacts which I have verified\n        can view my state changes).\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_getContactsFromList'
op|'('
name|'ALLOW_LIST'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getReverseContacts
dedent|''
name|'def'
name|'getReverseContacts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get all contacts on my reverse list.\n        (These are contacts which have added me\n        to their forward list).\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_getContactsFromList'
op|'('
name|'REVERSE_LIST'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getContacts
dedent|''
name|'def'
name|'getContacts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get all contacts on my forward list.\n        (These are the contacts which I have added\n        to my list).\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_getContactsFromList'
op|'('
name|'FORWARD_LIST'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setGroup
dedent|''
name|'def'
name|'setGroup'
op|'('
name|'self'
op|','
name|'id'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Keep a mapping from the given id\n        to the given name.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'groups'
op|'['
name|'id'
op|']'
op|'='
name|'name'
newline|'\n'
nl|'\n'
DECL|member|remGroup
dedent|''
name|'def'
name|'remGroup'
op|'('
name|'self'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Removed the stored group\n        mapping for the given id.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'groups'
op|'['
name|'id'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'for'
name|'c'
name|'in'
name|'self'
op|'.'
name|'contacts'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'id'
name|'in'
name|'c'
op|'.'
name|'groups'
op|':'
newline|'\n'
indent|'                '
name|'c'
op|'.'
name|'groups'
op|'.'
name|'remove'
op|'('
name|'id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MSNEventBase
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'MSNEventBase'
op|'('
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class provides support for handling / dispatching events and is the\n    base class of the three main client protocols (DispatchClient,\n    NotificationClient, SwitchboardClient)\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'ids'
op|'='
op|'{'
op|'}'
comment|'# mapping of ids to Deferreds'
newline|'\n'
name|'self'
op|'.'
name|'currentID'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'setLineMode'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'currentMessage'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'ids'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connected'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|_fireCallback
dedent|''
name|'def'
name|'_fireCallback'
op|'('
name|'self'
op|','
name|'id'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fire the callback for the given id\n        if one exists and return 1, else return false\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'ids'
op|'.'
name|'has_key'
op|'('
name|'id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ids'
op|'['
name|'id'
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'callback'
op|'('
name|'args'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'ids'
op|'['
name|'id'
op|']'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
dedent|''
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|_nextTransactionID
dedent|''
name|'def'
name|'_nextTransactionID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" return a usable transaction ID """'
newline|'\n'
name|'self'
op|'.'
name|'currentID'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'currentID'
op|'>'
number|'1000'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'currentID'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'currentID'
newline|'\n'
nl|'\n'
DECL|member|_createIDMapping
dedent|''
name|'def'
name|'_createIDMapping'
op|'('
name|'self'
op|','
name|'data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        return a unique transaction ID that is mapped internally to a\n        deferred .. also store arbitrary data if it is needed\n        """'
newline|'\n'
name|'id'
op|'='
name|'self'
op|'.'
name|'_nextTransactionID'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ids'
op|'['
name|'id'
op|']'
op|'='
op|'('
name|'d'
op|','
name|'data'
op|')'
newline|'\n'
name|'return'
op|'('
name|'id'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|checkMessage
dedent|''
name|'def'
name|'checkMessage'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        process received messages to check for file invitations and\n        typing notifications and other control type messages\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'currentMessage'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'currentMessage'
op|'.'
name|'readPos'
op|'+='
name|'len'
op|'('
name|'line'
op|'+'
name|'CR'
op|'+'
name|'LF'
op|')'
newline|'\n'
name|'if'
name|'line'
op|'=='
string|'""'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'setRawMode'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'currentMessage'
op|'.'
name|'readPos'
op|'=='
name|'self'
op|'.'
name|'currentMessage'
op|'.'
name|'length'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'rawDataReceived'
op|'('
string|'""'
op|')'
comment|'# :('
newline|'\n'
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'header'
op|','
name|'value'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"Invalid Message Header"'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'currentMessage'
op|'.'
name|'setHeader'
op|'('
name|'header'
op|','
name|'unquote'
op|'('
name|'value'
op|')'
op|'.'
name|'lstrip'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|','
name|'params'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"Invalid Message, %s"'
op|'%'
name|'repr'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'cmd'
op|')'
op|'!='
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"Invalid Command, %s"'
op|'%'
name|'repr'
op|'('
name|'cmd'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'cmd'
op|'.'
name|'isdigit'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'errorCode'
op|'='
name|'int'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'id'
op|'='
name|'int'
op|'('
name|'params'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'id'
name|'in'
name|'self'
op|'.'
name|'ids'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'ids'
op|'['
name|'id'
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'errback'
op|'('
name|'MSNCommandFailed'
op|'('
name|'errorCode'
op|')'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'ids'
op|'['
name|'id'
op|']'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
comment|"# we received an error which doesn't map to a sent command"
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'gotError'
op|'('
name|'errorCode'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'handler'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"handle_%s"'
op|'%'
name|'cmd'
op|'.'
name|'upper'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'handler'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'('
name|'params'
op|'.'
name|'split'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'MSNProtocolError'
op|','
name|'why'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'gotBadLine'
op|'('
name|'line'
op|','
name|'why'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'handle_UNKNOWN'
op|'('
name|'cmd'
op|','
name|'params'
op|'.'
name|'split'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rawDataReceived
dedent|''
dedent|''
name|'def'
name|'rawDataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'extra'
op|'='
string|'""'
newline|'\n'
name|'self'
op|'.'
name|'currentMessage'
op|'.'
name|'readPos'
op|'+='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
name|'diff'
op|'='
name|'self'
op|'.'
name|'currentMessage'
op|'.'
name|'readPos'
op|'-'
name|'self'
op|'.'
name|'currentMessage'
op|'.'
name|'length'
newline|'\n'
name|'if'
name|'diff'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'currentMessage'
op|'.'
name|'message'
op|'+='
name|'data'
op|'['
op|':'
op|'-'
name|'diff'
op|']'
newline|'\n'
name|'extra'
op|'='
name|'data'
op|'['
op|'-'
name|'diff'
op|':'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'diff'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'currentMessage'
op|'.'
name|'message'
op|'+='
name|'data'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'currentMessage'
op|'+='
name|'data'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'currentMessage'
op|'.'
name|'readPos'
newline|'\n'
name|'m'
op|'='
name|'self'
op|'.'
name|'currentMessage'
newline|'\n'
name|'self'
op|'.'
name|'currentMessage'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'setLineMode'
op|'('
name|'extra'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'checkMessage'
op|'('
name|'m'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'gotMessage'
op|'('
name|'m'
op|')'
newline|'\n'
nl|'\n'
comment|'### protocol command handlers - no need to override these.'
nl|'\n'
nl|'\n'
DECL|member|handle_MSG
dedent|''
name|'def'
name|'handle_MSG'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'3'
op|','
string|"'MSG'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'messageLen'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"Invalid Parameter for MSG length argument"'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'currentMessage'
op|'='
name|'MSNMessage'
op|'('
name|'length'
op|'='
name|'messageLen'
op|','
name|'userHandle'
op|'='
name|'params'
op|'['
number|'0'
op|']'
op|','
name|'screenName'
op|'='
name|'unquote'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_UNKNOWN
dedent|''
name|'def'
name|'handle_UNKNOWN'
op|'('
name|'self'
op|','
name|'cmd'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" implement me in subclasses if you want to handle unknown events """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Received unknown command (%s), params: %s"'
op|'%'
op|'('
name|'cmd'
op|','
name|'params'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'### callbacks'
nl|'\n'
nl|'\n'
DECL|member|gotMessage
dedent|''
name|'def'
name|'gotMessage'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        called when we receive a message - override in notification\n        and switchboard clients\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|gotBadLine
dedent|''
name|'def'
name|'gotBadLine'
op|'('
name|'self'
op|','
name|'line'
op|','
name|'why'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" called when a handler notifies me that this line is broken """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'Error in line: %s (%s)'"
op|'%'
op|'('
name|'line'
op|','
name|'why'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|gotError
dedent|''
name|'def'
name|'gotError'
op|'('
name|'self'
op|','
name|'errorCode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        called when the server sends an error which is not in\n        response to a sent command (ie. it has no matching transaction ID)\n        """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'Error %s'"
op|'%'
op|'('
name|'errorCodes'
op|'['
name|'errorCode'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DispatchClient
dedent|''
dedent|''
name|'class'
name|'DispatchClient'
op|'('
name|'MSNEventBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class provides support for clients connecting to the dispatch server\n    @ivar userHandle: your user handle (passport) needed before connecting.\n    """'
newline|'\n'
nl|'\n'
comment|'# eventually this may become an attribute of the'
nl|'\n'
comment|'# factory.'
nl|'\n'
DECL|variable|userHandle
name|'userHandle'
op|'='
string|'""'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MSNEventBase'
op|'.'
name|'connectionMade'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'VER %s %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_nextTransactionID'
op|'('
op|')'
op|','
name|'MSN_PROTOCOL_VERSION'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'### protocol command handlers ( there is no need to override these )'
nl|'\n'
nl|'\n'
DECL|member|handle_VER
dedent|''
name|'def'
name|'handle_VER'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'id'
op|'='
name|'self'
op|'.'
name|'_nextTransactionID'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"CVR %s %s %s"'
op|'%'
op|'('
name|'id'
op|','
name|'MSN_CVR_STR'
op|','
name|'self'
op|'.'
name|'userHandle'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_CVR
dedent|''
name|'def'
name|'handle_CVR'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"USR %s TWN I %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'_nextTransactionID'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'userHandle'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_XFR
dedent|''
name|'def'
name|'handle_XFR'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'params'
op|')'
op|'<'
number|'4'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"Invalid number of parameters for XFR"'
newline|'\n'
dedent|''
name|'id'
op|','
name|'refType'
op|','
name|'addr'
op|'='
name|'params'
op|'['
op|':'
number|'3'
op|']'
newline|'\n'
comment|'# was addr a host:port pair?'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|','
name|'port'
op|'='
name|'addr'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'addr'
newline|'\n'
name|'port'
op|'='
name|'MSN_PORT'
newline|'\n'
dedent|''
name|'if'
name|'refType'
op|'=='
string|'"NS"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'gotNotificationReferral'
op|'('
name|'host'
op|','
name|'int'
op|'('
name|'port'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'### callbacks'
nl|'\n'
nl|'\n'
DECL|member|gotNotificationReferral
dedent|''
dedent|''
name|'def'
name|'gotNotificationReferral'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        called when we get a referral to the notification server.\n\n        @param host: the notification server\'s hostname\n        @param port: the port to connect to\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NotificationClient
dedent|''
dedent|''
name|'class'
name|'NotificationClient'
op|'('
name|'MSNEventBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class provides support for clients connecting\n    to the notification server.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|factory
name|'factory'
op|'='
name|'None'
comment|'# sssh pychecker'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'currentID'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MSNEventBase'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'currentID'
op|'='
name|'currentID'
newline|'\n'
name|'self'
op|'.'
name|'_state'
op|'='
op|'['
string|"'DISCONNECTED'"
op|','
op|'{'
op|'}'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_setState
dedent|''
name|'def'
name|'_setState'
op|'('
name|'self'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_state'
op|'['
number|'0'
op|']'
op|'='
name|'state'
newline|'\n'
nl|'\n'
DECL|member|_getState
dedent|''
name|'def'
name|'_getState'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_state'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_getStateData
dedent|''
name|'def'
name|'_getStateData'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_state'
op|'['
number|'1'
op|']'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_setStateData
dedent|''
name|'def'
name|'_setStateData'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_state'
op|'['
number|'1'
op|']'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|_remStateData
dedent|''
name|'def'
name|'_remStateData'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'key'
name|'in'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'_state'
op|'['
number|'1'
op|']'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MSNEventBase'
op|'.'
name|'connectionMade'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setState'
op|'('
string|"'CONNECTED'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"VER %s %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'_nextTransactionID'
op|'('
op|')'
op|','
name|'MSN_PROTOCOL_VERSION'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_setState'
op|'('
string|"'DISCONNECTED'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_state'
op|'['
number|'1'
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'MSNEventBase'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|checkMessage
dedent|''
name|'def'
name|'checkMessage'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" hook used for detecting specific notification messages """'
newline|'\n'
name|'cTypes'
op|'='
op|'['
name|'s'
op|'.'
name|'lstrip'
op|'('
op|')'
name|'for'
name|'s'
name|'in'
name|'message'
op|'.'
name|'getHeader'
op|'('
string|"'Content-Type'"
op|')'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
op|']'
newline|'\n'
name|'if'
string|"'text/x-msmsgsprofile'"
name|'in'
name|'cTypes'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'gotProfile'
op|'('
name|'message'
op|')'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'return'
number|'1'
newline|'\n'
nl|'\n'
comment|'### protocol command handlers - no need to override these'
nl|'\n'
nl|'\n'
DECL|member|handle_VER
dedent|''
name|'def'
name|'handle_VER'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'id'
op|'='
name|'self'
op|'.'
name|'_nextTransactionID'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"CVR %s %s %s"'
op|'%'
op|'('
name|'id'
op|','
name|'MSN_CVR_STR'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'userHandle'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_CVR
dedent|''
name|'def'
name|'handle_CVR'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"USR %s TWN I %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'_nextTransactionID'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'userHandle'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_USR
dedent|''
name|'def'
name|'handle_USR'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'params'
op|')'
op|'!='
number|'4'
name|'and'
name|'len'
op|'('
name|'params'
op|')'
op|'!='
number|'6'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"Invalid Number of Parameters for USR"'
newline|'\n'
nl|'\n'
dedent|''
name|'mechanism'
op|'='
name|'params'
op|'['
number|'1'
op|']'
newline|'\n'
name|'if'
name|'mechanism'
op|'=='
string|'"OK"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'loggedIn'
op|'('
name|'params'
op|'['
number|'2'
op|']'
op|','
name|'unquote'
op|'('
name|'params'
op|'['
number|'3'
op|']'
op|')'
op|','
name|'int'
op|'('
name|'params'
op|'['
number|'4'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'params'
op|'['
number|'2'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|'"S"'
op|':'
newline|'\n'
comment|'# we need to obtain auth from a passport server'
nl|'\n'
indent|'            '
name|'f'
op|'='
name|'self'
op|'.'
name|'factory'
newline|'\n'
name|'d'
op|'='
name|'_login'
op|'('
name|'f'
op|'.'
name|'userHandle'
op|','
name|'f'
op|'.'
name|'password'
op|','
name|'f'
op|'.'
name|'passportServer'
op|','
name|'authData'
op|'='
name|'params'
op|'['
number|'3'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_passportLogin'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_passportError'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_passportLogin
dedent|''
dedent|''
name|'def'
name|'_passportLogin'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'result'
op|'['
number|'0'
op|']'
op|'=='
name|'LOGIN_REDIRECT'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'_login'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'userHandle'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'password'
op|','
nl|'\n'
name|'result'
op|'['
number|'1'
op|']'
op|','
name|'cached'
op|'='
number|'1'
op|','
name|'authData'
op|'='
name|'result'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_passportLogin'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'_passportError'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'result'
op|'['
number|'0'
op|']'
op|'=='
name|'LOGIN_SUCCESS'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"USR %s TWN S %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'_nextTransactionID'
op|'('
op|')'
op|','
name|'result'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'result'
op|'['
number|'0'
op|']'
op|'=='
name|'LOGIN_FAILURE'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'loginFailure'
op|'('
name|'result'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_passportError
dedent|''
dedent|''
name|'def'
name|'_passportError'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loginFailure'
op|'('
string|'"Exception while authenticating: %s"'
op|'%'
name|'failure'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_CHG
dedent|''
name|'def'
name|'handle_CHG'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'3'
op|','
string|"'CHG'"
op|')'
newline|'\n'
name|'id'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'id'
op|','
name|'params'
op|'['
number|'1'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'statusChanged'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_ILN
dedent|''
dedent|''
name|'def'
name|'handle_ILN'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'5'
op|','
string|"'ILN'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'gotContactStatus'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|','
name|'params'
op|'['
number|'2'
op|']'
op|','
name|'unquote'
op|'('
name|'params'
op|'['
number|'3'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_CHL
dedent|''
name|'def'
name|'handle_CHL'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'2'
op|','
string|"'CHL'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"QRY %s msmsgs@msnmsgr.com 32"'
op|'%'
name|'self'
op|'.'
name|'_nextTransactionID'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'md5'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|'+'
name|'MSN_CHALLENGE_STR'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_QRY
dedent|''
name|'def'
name|'handle_QRY'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|handle_NLN
dedent|''
name|'def'
name|'handle_NLN'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'4'
op|','
string|"'NLN'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'contactStatusChanged'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|','
name|'params'
op|'['
number|'1'
op|']'
op|','
name|'unquote'
op|'('
name|'params'
op|'['
number|'2'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_FLN
dedent|''
name|'def'
name|'handle_FLN'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'1'
op|','
string|"'FLN'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'contactOffline'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_LST
dedent|''
name|'def'
name|'handle_LST'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
comment|'# support no longer exists for manually'
nl|'\n'
comment|'# requesting lists - why do I feel cleaner now?'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_getState'
op|'('
op|')'
op|'!='
string|"'SYNC'"
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'contact'
op|'='
name|'MSNContact'
op|'('
name|'userHandle'
op|'='
name|'params'
op|'['
number|'0'
op|']'
op|','
name|'screenName'
op|'='
name|'unquote'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
op|','
nl|'\n'
name|'lists'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'2'
op|']'
op|')'
op|')'
newline|'\n'
name|'if'
name|'contact'
op|'.'
name|'lists'
op|'&'
name|'FORWARD_LIST'
op|':'
newline|'\n'
indent|'            '
name|'contact'
op|'.'
name|'groups'
op|'.'
name|'extend'
op|'('
name|'map'
op|'('
name|'int'
op|','
name|'params'
op|'['
number|'3'
op|']'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_getStateData'
op|'('
string|"'list'"
op|')'
op|'.'
name|'addContact'
op|'('
name|'contact'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setStateData'
op|'('
string|"'last_contact'"
op|','
name|'contact'
op|')'
newline|'\n'
name|'sofar'
op|'='
name|'self'
op|'.'
name|'_getStateData'
op|'('
string|"'lst_sofar'"
op|')'
op|'+'
number|'1'
newline|'\n'
name|'if'
name|'sofar'
op|'=='
name|'self'
op|'.'
name|'_getStateData'
op|'('
string|"'lst_reply'"
op|')'
op|':'
newline|'\n'
comment|'# this is the best place to determine that'
nl|'\n'
comment|'# a syn realy has finished - msn _may_ send'
nl|'\n'
comment|'# BPR information for the last contact'
nl|'\n'
comment|'# which is unfortunate because it means'
nl|'\n'
comment|'# that the real end of a syn is non-deterministic.'
nl|'\n'
comment|"# to handle this we'll keep 'last_contact' hanging"
nl|'\n'
comment|'# around in the state data and update it if we need'
nl|'\n'
comment|'# to later.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_setState'
op|'('
string|"'SESSION'"
op|')'
newline|'\n'
name|'contacts'
op|'='
name|'self'
op|'.'
name|'_getStateData'
op|'('
string|"'list'"
op|')'
newline|'\n'
name|'phone'
op|'='
name|'self'
op|'.'
name|'_getStateData'
op|'('
string|"'phone'"
op|')'
newline|'\n'
name|'id'
op|'='
name|'self'
op|'.'
name|'_getStateData'
op|'('
string|"'synid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_remStateData'
op|'('
string|"'lst_reply'"
op|','
string|"'lsg_reply'"
op|','
string|"'lst_sofar'"
op|','
string|"'phone'"
op|','
string|"'synid'"
op|','
string|"'list'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'id'
op|','
name|'contacts'
op|','
name|'phone'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_setStateData'
op|'('
string|"'lst_sofar'"
op|','
name|'sofar'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_BLP
dedent|''
dedent|''
name|'def'
name|'handle_BLP'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
comment|'# check to see if this is in response to a SYN'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_getState'
op|'('
op|')'
op|'=='
string|"'SYNC'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_getStateData'
op|'('
string|"'list'"
op|')'
op|'.'
name|'privacy'
op|'='
name|'listCodeToID'
op|'['
name|'params'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'id'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'id'
op|','
name|'int'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
op|','
name|'listCodeToID'
op|'['
name|'params'
op|'['
number|'2'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_GTC
dedent|''
dedent|''
name|'def'
name|'handle_GTC'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
comment|'# check to see if this is in response to a SYN'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_getState'
op|'('
op|')'
op|'=='
string|"'SYNC'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'params'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|'"a"'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_getStateData'
op|'('
string|"'list'"
op|')'
op|'.'
name|'autoAdd'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'elif'
name|'params'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|'"n"'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_getStateData'
op|'('
string|"'list'"
op|')'
op|'.'
name|'autoAdd'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"Invalid Paramater for GTC"'
comment|'# debug'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'id'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'params'
op|'['
number|'1'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|'"a"'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'id'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'params'
op|'['
number|'1'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|'"n"'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'id'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"Invalid Paramater for GTC"'
comment|'# debug'
newline|'\n'
nl|'\n'
DECL|member|handle_SYN
dedent|''
dedent|''
dedent|''
name|'def'
name|'handle_SYN'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'id'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'params'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_setState'
op|'('
string|"'SESSION'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'id'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'contacts'
op|'='
name|'MSNContactList'
op|'('
op|')'
newline|'\n'
name|'contacts'
op|'.'
name|'version'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setStateData'
op|'('
string|"'list'"
op|','
name|'contacts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setStateData'
op|'('
string|"'lst_reply'"
op|','
name|'int'
op|'('
name|'params'
op|'['
number|'2'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setStateData'
op|'('
string|"'lsg_reply'"
op|','
name|'int'
op|'('
name|'params'
op|'['
number|'3'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setStateData'
op|'('
string|"'lst_sofar'"
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setStateData'
op|'('
string|"'phone'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_LSG
dedent|''
dedent|''
name|'def'
name|'handle_LSG'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_getState'
op|'('
op|')'
op|'=='
string|"'SYNC'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_getStateData'
op|'('
string|"'list'"
op|')'
op|'.'
name|'groups'
op|'['
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
op|']'
op|'='
name|'unquote'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Please see the comment above the requestListGroups / requestList methods'
nl|'\n'
comment|'# regarding support for this'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#else:'
nl|'\n'
comment|"#    self._getStateData('groups').append((int(params[4]), unquote(params[5])))"
nl|'\n'
comment|'#    if params[3] == params[4]: # this was the last group'
nl|'\n'
comment|"#        self._fireCallback(int(params[0]), self._getStateData('groups'), int(params[1]))"
nl|'\n'
comment|"#        self._remStateData('groups')"
nl|'\n'
nl|'\n'
DECL|member|handle_PRP
dedent|''
dedent|''
name|'def'
name|'handle_PRP'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_getState'
op|'('
op|')'
op|'=='
string|"'SYNC'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_getStateData'
op|'('
string|"'phone'"
op|')'
op|'.'
name|'append'
op|'('
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|','
name|'unquote'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
op|','
name|'int'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
op|','
name|'unquote'
op|'('
name|'params'
op|'['
number|'3'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_BPR
dedent|''
dedent|''
name|'def'
name|'handle_BPR'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'numParams'
op|'='
name|'len'
op|'('
name|'params'
op|')'
newline|'\n'
name|'if'
name|'numParams'
op|'=='
number|'2'
op|':'
comment|'# part of a syn'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_getStateData'
op|'('
string|"'last_contact'"
op|')'
op|'.'
name|'setPhone'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|','
name|'unquote'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'numParams'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'gotPhoneNumber'
op|'('
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
op|','
name|'params'
op|'['
number|'1'
op|']'
op|','
name|'params'
op|'['
number|'2'
op|']'
op|','
name|'unquote'
op|'('
name|'params'
op|'['
number|'3'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_ADG
dedent|''
dedent|''
name|'def'
name|'handle_ADG'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'5'
op|','
string|"'ADG'"
op|')'
newline|'\n'
name|'id'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'id'
op|','
name|'int'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
op|','
name|'unquote'
op|'('
name|'params'
op|'['
number|'2'
op|']'
op|')'
op|','
name|'int'
op|'('
name|'params'
op|'['
number|'3'
op|']'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"ADG response does not match up to a request"'
comment|'# debug'
newline|'\n'
nl|'\n'
DECL|member|handle_RMG
dedent|''
dedent|''
name|'def'
name|'handle_RMG'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'3'
op|','
string|"'RMG'"
op|')'
newline|'\n'
name|'id'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'id'
op|','
name|'int'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
op|','
name|'int'
op|'('
name|'params'
op|'['
number|'2'
op|']'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"RMG response does not match up to a request"'
comment|'# debug'
newline|'\n'
nl|'\n'
DECL|member|handle_REG
dedent|''
dedent|''
name|'def'
name|'handle_REG'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'5'
op|','
string|"'REG'"
op|')'
newline|'\n'
name|'id'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'id'
op|','
name|'int'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
op|','
name|'int'
op|'('
name|'params'
op|'['
number|'2'
op|']'
op|')'
op|','
name|'unquote'
op|'('
name|'params'
op|'['
number|'3'
op|']'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"REG response does not match up to a request"'
comment|'# debug'
newline|'\n'
nl|'\n'
DECL|member|handle_ADD
dedent|''
dedent|''
name|'def'
name|'handle_ADD'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'numParams'
op|'='
name|'len'
op|'('
name|'params'
op|')'
newline|'\n'
name|'if'
name|'numParams'
op|'<'
number|'5'
name|'or'
name|'params'
op|'['
number|'1'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
name|'not'
name|'in'
op|'('
string|"'AL'"
op|','
string|"'BL'"
op|','
string|"'RL'"
op|','
string|"'FL'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"Invalid Paramaters for ADD"'
comment|'# debug'
newline|'\n'
dedent|''
name|'id'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'listType'
op|'='
name|'params'
op|'['
number|'1'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'listVer'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'userHandle'
op|'='
name|'params'
op|'['
number|'3'
op|']'
newline|'\n'
name|'groupID'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'numParams'
op|'=='
number|'6'
op|':'
comment|'# they sent a group id'
newline|'\n'
indent|'            '
name|'if'
name|'params'
op|'['
number|'1'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|'!='
string|'"FL"'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"Only forward list can contain groups"'
comment|'# debug'
newline|'\n'
dedent|''
name|'groupID'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'5'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'id'
op|','
name|'listCodeToID'
op|'['
name|'listType'
op|']'
op|','
name|'userHandle'
op|','
name|'listVer'
op|','
name|'groupID'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'userAddedMe'
op|'('
name|'userHandle'
op|','
name|'unquote'
op|'('
name|'params'
op|'['
number|'4'
op|']'
op|')'
op|','
name|'listVer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_REM
dedent|''
dedent|''
name|'def'
name|'handle_REM'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'numParams'
op|'='
name|'len'
op|'('
name|'params'
op|')'
newline|'\n'
name|'if'
name|'numParams'
op|'<'
number|'4'
name|'or'
name|'params'
op|'['
number|'1'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
name|'not'
name|'in'
op|'('
string|"'AL'"
op|','
string|"'BL'"
op|','
string|"'FL'"
op|','
string|"'RL'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"Invalid Paramaters for REM"'
comment|'# debug'
newline|'\n'
dedent|''
name|'id'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'listType'
op|'='
name|'params'
op|'['
number|'1'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'listVer'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'userHandle'
op|'='
name|'params'
op|'['
number|'3'
op|']'
newline|'\n'
name|'groupID'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'numParams'
op|'=='
number|'5'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'params'
op|'['
number|'1'
op|']'
op|'!='
string|'"FL"'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"Only forward list can contain groups"'
comment|'# debug'
newline|'\n'
dedent|''
name|'groupID'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'4'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'id'
op|','
name|'listCodeToID'
op|'['
name|'listType'
op|']'
op|','
name|'userHandle'
op|','
name|'listVer'
op|','
name|'groupID'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'listType'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|'"RL"'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'userRemovedMe'
op|'('
name|'userHandle'
op|','
name|'listVer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_REA
dedent|''
dedent|''
dedent|''
name|'def'
name|'handle_REA'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'4'
op|','
string|"'REA'"
op|')'
newline|'\n'
name|'id'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'id'
op|','
name|'int'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
op|','
name|'unquote'
op|'('
name|'params'
op|'['
number|'3'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_XFR
dedent|''
name|'def'
name|'handle_XFR'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'5'
op|','
string|"'XFR'"
op|')'
newline|'\n'
name|'id'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
comment|'# check to see if they sent a host/port pair'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|','
name|'port'
op|'='
name|'params'
op|'['
number|'2'
op|']'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'params'
op|'['
number|'2'
op|']'
newline|'\n'
name|'port'
op|'='
name|'MSN_PORT'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'id'
op|','
name|'host'
op|','
name|'int'
op|'('
name|'port'
op|')'
op|','
name|'params'
op|'['
number|'4'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"Got XFR (referral) that I didn\'t ask for .. should this happen?"'
comment|'# debug'
newline|'\n'
nl|'\n'
DECL|member|handle_RNG
dedent|''
dedent|''
name|'def'
name|'handle_RNG'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'6'
op|','
string|"'RNG'"
op|')'
newline|'\n'
comment|'# check for host:port pair'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|','
name|'port'
op|'='
name|'params'
op|'['
number|'1'
op|']'
op|'.'
name|'split'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'port'
op|'='
name|'int'
op|'('
name|'port'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'params'
op|'['
number|'1'
op|']'
newline|'\n'
name|'port'
op|'='
name|'MSN_PORT'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'gotSwitchboardInvitation'
op|'('
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
op|','
name|'host'
op|','
name|'port'
op|','
name|'params'
op|'['
number|'3'
op|']'
op|','
name|'params'
op|'['
number|'4'
op|']'
op|','
nl|'\n'
name|'unquote'
op|'('
name|'params'
op|'['
number|'5'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_OUT
dedent|''
name|'def'
name|'handle_OUT'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'1'
op|','
string|"'OUT'"
op|')'
newline|'\n'
name|'if'
name|'params'
op|'['
number|'0'
op|']'
op|'=='
string|'"OTH"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'multipleLogin'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'params'
op|'['
number|'0'
op|']'
op|'=='
string|'"SSD"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'serverGoingDown'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MSNProtocolError'
op|','
string|'"Invalid Parameters received for OUT"'
comment|'# debug'
newline|'\n'
nl|'\n'
comment|'# callbacks'
nl|'\n'
nl|'\n'
DECL|member|loggedIn
dedent|''
dedent|''
name|'def'
name|'loggedIn'
op|'('
name|'self'
op|','
name|'userHandle'
op|','
name|'screenName'
op|','
name|'verified'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the client has logged in.\n        The default behaviour of this method is to\n        update the factory with our screenName and\n        to sync the contact list (factory.contacts).\n        When this is complete self.listSynchronized\n        will be called.\n\n        @param userHandle: our userHandle\n        @param screenName: our screenName\n        @param verified: 1 if our passport has been (verified), 0 if not.\n                         (i\'m not sure of the significace of this)\n        @type verified: int\n        """'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'screenName'
op|'='
name|'screenName'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|':'
newline|'\n'
indent|'            '
name|'listVersion'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'listVersion'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'version'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'syncList'
op|'('
name|'listVersion'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'listSynchronized'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loginFailure
dedent|''
name|'def'
name|'loginFailure'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the client fails to login.\n\n        @param message: a message indicating the problem that was encountered\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|gotProfile
dedent|''
name|'def'
name|'gotProfile'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called after logging in when the server sends an initial\n        message with MSN/passport specific profile information\n        such as country, number of kids, etc.\n        Check the message headers for the specific values.\n\n        @param message: The profile message\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|listSynchronized
dedent|''
name|'def'
name|'listSynchronized'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lists are now synchronized by default upon logging in, this\n        method is called after the synchronization has finished\n        and the factory now has the up-to-date contacts.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|statusChanged
dedent|''
name|'def'
name|'statusChanged'
op|'('
name|'self'
op|','
name|'statusCode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when our status changes and it isn\'t in response to\n        a client command. By default we will update the status\n        attribute of the factory.\n\n        @param statusCode: 3-letter status code\n        """'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'status'
op|'='
name|'statusCode'
newline|'\n'
nl|'\n'
DECL|member|gotContactStatus
dedent|''
name|'def'
name|'gotContactStatus'
op|'('
name|'self'
op|','
name|'statusCode'
op|','
name|'userHandle'
op|','
name|'screenName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called after loggin in when the server sends status of online contacts.\n        By default we will update the status attribute of the contact stored\n        on the factory.\n\n        @param statusCode: 3-letter status code\n        @param userHandle: the contact\'s user handle (passport)\n        @param screenName: the contact\'s screen name\n        """'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'getContact'
op|'('
name|'userHandle'
op|')'
op|'.'
name|'status'
op|'='
name|'statusCode'
newline|'\n'
nl|'\n'
DECL|member|contactStatusChanged
dedent|''
name|'def'
name|'contactStatusChanged'
op|'('
name|'self'
op|','
name|'statusCode'
op|','
name|'userHandle'
op|','
name|'screenName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when we\'re notified that a contact\'s status has changed.\n        By default we will update the status attribute of the contact\n        stored on the factory.\n\n        @param statusCode: 3-letter status code\n        @param userHandle: the contact\'s user handle (passport)\n        @param screenName: the contact\'s screen name\n        """'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'getContact'
op|'('
name|'userHandle'
op|')'
op|'.'
name|'status'
op|'='
name|'statusCode'
newline|'\n'
nl|'\n'
DECL|member|contactOffline
dedent|''
name|'def'
name|'contactOffline'
op|'('
name|'self'
op|','
name|'userHandle'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a contact goes offline. By default this method\n        will update the status attribute of the contact stored\n        on the factory.\n\n        @param userHandle: the contact\'s user handle\n        """'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'getContact'
op|'('
name|'userHandle'
op|')'
op|'.'
name|'status'
op|'='
name|'STATUS_OFFLINE'
newline|'\n'
nl|'\n'
DECL|member|gotPhoneNumber
dedent|''
name|'def'
name|'gotPhoneNumber'
op|'('
name|'self'
op|','
name|'listVersion'
op|','
name|'userHandle'
op|','
name|'phoneType'
op|','
name|'number'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the server sends us phone details about\n        a specific user (for example after a user is added\n        the server will send their status, phone details etc.\n        By default we will update the list version for the\n        factory\'s contact list and update the phone details\n        for the specific user.\n\n        @param listVersion: the new list version\n        @param userHandle: the contact\'s user handle (passport)\n        @param phoneType: the specific phoneType\n                          (*_PHONE constants or HAS_PAGER)\n        @param number: the value/phone number.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'version'
op|'='
name|'listVersion'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'getContact'
op|'('
name|'userHandle'
op|')'
op|'.'
name|'setPhone'
op|'('
name|'phoneType'
op|','
name|'number'
op|')'
newline|'\n'
nl|'\n'
DECL|member|userAddedMe
dedent|''
name|'def'
name|'userAddedMe'
op|'('
name|'self'
op|','
name|'userHandle'
op|','
name|'screenName'
op|','
name|'listVersion'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a user adds me to their list. (ie. they have been added to\n        the reverse list. By default this method will update the version of\n        the factory\'s contact list -- that is, if the contact already exists\n        it will update the associated lists attribute, otherwise it will create\n        a new MSNContact object and store it.\n\n        @param userHandle: the userHandle of the user\n        @param screenName: the screen name of the user\n        @param listVersion: the new list version\n        @type listVersion: int\n        """'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'version'
op|'='
name|'listVersion'
newline|'\n'
name|'c'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'getContact'
op|'('
name|'userHandle'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'c'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'='
name|'MSNContact'
op|'('
name|'userHandle'
op|'='
name|'userHandle'
op|','
name|'screenName'
op|'='
name|'screenName'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'addContact'
op|'('
name|'c'
op|')'
newline|'\n'
dedent|''
name|'c'
op|'.'
name|'addToList'
op|'('
name|'REVERSE_LIST'
op|')'
newline|'\n'
nl|'\n'
DECL|member|userRemovedMe
dedent|''
name|'def'
name|'userRemovedMe'
op|'('
name|'self'
op|','
name|'userHandle'
op|','
name|'listVersion'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a user removes us from their contact list\n        (they are no longer on our reverseContacts list.\n        By default this method will update the version of\n        the factory\'s contact list -- that is, the user will\n        be removed from the reverse list and if they are no longer\n        part of any lists they will be removed from the contact\n        list entirely.\n\n        @param userHandle: the contact\'s user handle (passport)\n        @param listVersion: the new list version\n        """'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'version'
op|'='
name|'listVersion'
newline|'\n'
name|'c'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'getContact'
op|'('
name|'userHandle'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'removeFromList'
op|'('
name|'REVERSE_LIST'
op|')'
newline|'\n'
name|'if'
name|'c'
op|'.'
name|'lists'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'remContact'
op|'('
name|'c'
op|'.'
name|'userHandle'
op|')'
newline|'\n'
nl|'\n'
DECL|member|gotSwitchboardInvitation
dedent|''
dedent|''
name|'def'
name|'gotSwitchboardInvitation'
op|'('
name|'self'
op|','
name|'sessionID'
op|','
name|'host'
op|','
name|'port'
op|','
nl|'\n'
name|'key'
op|','
name|'userHandle'
op|','
name|'screenName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when we get an invitation to a switchboard server.\n        This happens when a user requests a chat session with us.\n\n        @param sessionID: session ID number, must be remembered for logging in\n        @param host: the hostname of the switchboard server\n        @param port: the port to connect to\n        @param key: used for authorization when connecting\n        @param userHandle: the user handle of the person who invited us\n        @param screenName: the screen name of the person who invited us\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|multipleLogin
dedent|''
name|'def'
name|'multipleLogin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the server says there has been another login\n        under our account, the server should disconnect us right away.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|serverGoingDown
dedent|''
name|'def'
name|'serverGoingDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when the server has notified us that it is going down for\n        maintenance.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
comment|'# api calls'
nl|'\n'
nl|'\n'
DECL|member|changeStatus
dedent|''
name|'def'
name|'changeStatus'
op|'('
name|'self'
op|','
name|'status'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Change my current status. This method will add\n        a default callback to the returned Deferred\n        which will update the status attribute of the\n        factory.\n\n        @param status: 3-letter status code (as defined by\n                       the STATUS_* constants)\n        @return: A Deferred, the callback of which will be\n                 fired when the server confirms the change\n                 of status.  The callback argument will be\n                 a tuple with the new status code as the\n                 only element.\n        """'
newline|'\n'
nl|'\n'
name|'id'
op|','
name|'d'
op|'='
name|'self'
op|'.'
name|'_createIDMapping'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"CHG %s %s"'
op|'%'
op|'('
name|'id'
op|','
name|'status'
op|')'
op|')'
newline|'\n'
DECL|function|_cb
name|'def'
name|'_cb'
op|'('
name|'r'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'status'
op|'='
name|'r'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'r'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_cb'
op|')'
newline|'\n'
nl|'\n'
comment|'# I am no longer supporting the process of manually requesting'
nl|'\n'
comment|'# lists or list groups -- as far as I can see this has no use'
nl|'\n'
comment|'# if lists are synchronized and updated correctly, which they'
nl|'\n'
comment|'# should be. If someone has a specific justified need for this'
nl|'\n'
comment|"# then please contact me and i'll re-enable/fix support for it."
nl|'\n'
nl|'\n'
comment|'#def requestList(self, listType):'
nl|'\n'
comment|'#    """'
nl|'\n'
comment|'#    request the desired list type'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    @param listType: (as defined by the *_LIST constants)'
nl|'\n'
comment|'#    @return: A Deferred, the callback of which will be'
nl|'\n'
comment|'#             fired when the list has been retrieved.'
nl|'\n'
comment|'#             The callback argument will be a tuple with'
nl|'\n'
comment|'#             the only element being a list of MSNContact'
nl|'\n'
comment|'#             objects.'
nl|'\n'
comment|'#    """'
nl|'\n'
comment|"#    # this doesn't need to ever be used if syncing of the lists takes place"
nl|'\n'
comment|"#    # i.e. please don't use it!"
nl|'\n'
comment|'#    warnings.warn("Please do not use this method - use the list syncing process instead")'
nl|'\n'
comment|'#    id, d = self._createIDMapping()'
nl|'\n'
comment|'#    self.sendLine("LST %s %s" % (id, listIDToCode[listType].upper()))'
nl|'\n'
comment|"#    self._setStateData('list',[])"
nl|'\n'
comment|'#    return d'
nl|'\n'
nl|'\n'
DECL|member|setPrivacyMode
dedent|''
name|'def'
name|'setPrivacyMode'
op|'('
name|'self'
op|','
name|'privLevel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set my privacy mode on the server.\n\n        B{Note}:\n        This only keeps the current privacy setting on\n        the server for later retrieval, it does not\n        effect the way the server works at all.\n\n        @param privLevel: This parameter can be true, in which\n                          case the server will keep the state as\n                          \'al\' which the official client interprets\n                          as -> allow messages from only users on\n                          the allow list.  Alternatively it can be\n                          false, in which case the server will keep\n                          the state as \'bl\' which the official client\n                          interprets as -> allow messages from all\n                          users except those on the block list.\n\n        @return: A Deferred, the callback of which will be fired when\n                 the server replies with the new privacy setting.\n                 The callback argument will be a tuple, the 2 elements\n                 of which being the list version and either \'al\'\n                 or \'bl\' (the new privacy setting).\n        """'
newline|'\n'
nl|'\n'
name|'id'
op|','
name|'d'
op|'='
name|'self'
op|'.'
name|'_createIDMapping'
op|'('
op|')'
newline|'\n'
name|'if'
name|'privLevel'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"BLP %s AL"'
op|'%'
name|'id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"BLP %s BL"'
op|'%'
name|'id'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|syncList
dedent|''
name|'def'
name|'syncList'
op|'('
name|'self'
op|','
name|'version'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Used for keeping an up-to-date contact list.\n        A callback is added to the returned Deferred\n        that updates the contact list on the factory\n        and also sets my state to STATUS_ONLINE.\n\n        B{Note}:\n        This is called automatically upon signing\n        in using the version attribute of\n        factory.contacts, so you may want to persist\n        this object accordingly. Because of this there\n        is no real need to ever call this method\n        directly.\n\n        @param version: The current known list version\n\n        @return: A Deferred, the callback of which will be\n                 fired when the server sends an adequate reply.\n                 The callback argument will be a tuple with two\n                 elements, the new list (MSNContactList) and\n                 your current state (a dictionary).  If the version\n                 you sent _was_ the latest list version, both elements\n                 will be None. To just request the list send a version of 0.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_setState'
op|'('
string|"'SYNC'"
op|')'
newline|'\n'
name|'id'
op|','
name|'d'
op|'='
name|'self'
op|'.'
name|'_createIDMapping'
op|'('
name|'data'
op|'='
name|'str'
op|'('
name|'version'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setStateData'
op|'('
string|"'synid'"
op|','
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"SYN %s %s"'
op|'%'
op|'('
name|'id'
op|','
name|'version'
op|')'
op|')'
newline|'\n'
DECL|function|_cb
name|'def'
name|'_cb'
op|'('
name|'r'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'changeStatus'
op|'('
name|'STATUS_ONLINE'
op|')'
newline|'\n'
name|'if'
name|'r'
op|'['
number|'0'
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'='
name|'r'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'r'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_cb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# I am no longer supporting the process of manually requesting'
nl|'\n'
comment|'# lists or list groups -- as far as I can see this has no use'
nl|'\n'
comment|'# if lists are synchronized and updated correctly, which they'
nl|'\n'
comment|'# should be. If someone has a specific justified need for this'
nl|'\n'
comment|"# then please contact me and i'll re-enable/fix support for it."
nl|'\n'
nl|'\n'
comment|'#def requestListGroups(self):'
nl|'\n'
comment|'#    """'
nl|'\n'
comment|'#    Request (forward) list groups.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    @return: A Deferred, the callback for which will be called'
nl|'\n'
comment|'#             when the server responds with the list groups.'
nl|'\n'
comment|'#             The callback argument will be a tuple with two elements,'
nl|'\n'
comment|'#             a dictionary mapping group IDs to group names and the'
nl|'\n'
comment|'#             current list version.'
nl|'\n'
comment|'#    """'
nl|'\n'
comment|'#'
nl|'\n'
comment|"#    # this doesn't need to be used if syncing of the lists takes place (which it SHOULD!)"
nl|'\n'
comment|"#    # i.e. please don't use it!"
nl|'\n'
comment|'#    warnings.warn("Please do not use this method - use the list syncing process instead")'
nl|'\n'
comment|'#    id, d = self._createIDMapping()'
nl|'\n'
comment|'#    self.sendLine("LSG %s" % id)'
nl|'\n'
comment|"#    self._setStateData('groups',{})"
nl|'\n'
comment|'#    return d'
nl|'\n'
nl|'\n'
DECL|member|setPhoneDetails
dedent|''
name|'def'
name|'setPhoneDetails'
op|'('
name|'self'
op|','
name|'phoneType'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set/change my phone numbers stored on the server.\n\n        @param phoneType: phoneType can be one of the following\n                          constants - HOME_PHONE, WORK_PHONE,\n                          MOBILE_PHONE, HAS_PAGER.\n                          These are pretty self-explanatory, except\n                          maybe HAS_PAGER which refers to whether or\n                          not you have a pager.\n        @param value: for all of the *_PHONE constants the value is a\n                      phone number (str), for HAS_PAGER accepted values\n                      are \'Y\' (for yes) and \'N\' (for no).\n\n        @return: A Deferred, the callback for which will be fired when\n                 the server confirms the change has been made. The\n                 callback argument will be a tuple with 2 elements, the\n                 first being the new list version (int) and the second\n                 being the new phone number value (str).\n        """'
newline|'\n'
comment|'# XXX: Add a default callback which updates'
nl|'\n'
comment|'# factory.contacts.version and the relevant phone'
nl|'\n'
comment|'# number'
nl|'\n'
name|'id'
op|','
name|'d'
op|'='
name|'self'
op|'.'
name|'_createIDMapping'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"PRP %s %s %s"'
op|'%'
op|'('
name|'id'
op|','
name|'phoneType'
op|','
name|'quote'
op|'('
name|'value'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|addListGroup
dedent|''
name|'def'
name|'addListGroup'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Used to create a new list group.\n        A default callback is added to the\n        returned Deferred which updates the\n        contacts attribute of the factory.\n\n        @param name: The desired name of the new group.\n\n        @return: A Deferred, the callbacck for which will be called\n                 when the server clarifies that the new group has been\n                 created.  The callback argument will be a tuple with 3\n                 elements: the new list version (int), the new group name\n                 (str) and the new group ID (int).\n        """'
newline|'\n'
nl|'\n'
name|'id'
op|','
name|'d'
op|'='
name|'self'
op|'.'
name|'_createIDMapping'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"ADG %s %s 0"'
op|'%'
op|'('
name|'id'
op|','
name|'quote'
op|'('
name|'name'
op|')'
op|')'
op|')'
newline|'\n'
DECL|function|_cb
name|'def'
name|'_cb'
op|'('
name|'r'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'version'
op|'='
name|'r'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'setGroup'
op|'('
name|'r'
op|'['
number|'1'
op|']'
op|','
name|'r'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'return'
name|'r'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_cb'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remListGroup
dedent|''
name|'def'
name|'remListGroup'
op|'('
name|'self'
op|','
name|'groupID'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Used to remove a list group.\n        A default callback is added to the\n        returned Deferred which updates the\n        contacts attribute of the factory.\n\n        @param groupID: the ID of the desired group to be removed.\n\n        @return: A Deferred, the callback for which will be called when\n                 the server clarifies the deletion of the group.\n                 The callback argument will be a tuple with 2 elements:\n                 the new list version (int) and the group ID (int) of\n                 the removed group.\n        """'
newline|'\n'
nl|'\n'
name|'id'
op|','
name|'d'
op|'='
name|'self'
op|'.'
name|'_createIDMapping'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"RMG %s %s"'
op|'%'
op|'('
name|'id'
op|','
name|'groupID'
op|')'
op|')'
newline|'\n'
DECL|function|_cb
name|'def'
name|'_cb'
op|'('
name|'r'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'version'
op|'='
name|'r'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'remGroup'
op|'('
name|'r'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'return'
name|'r'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_cb'
op|')'
newline|'\n'
nl|'\n'
DECL|member|renameListGroup
dedent|''
name|'def'
name|'renameListGroup'
op|'('
name|'self'
op|','
name|'groupID'
op|','
name|'newName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Used to rename an existing list group.\n        A default callback is added to the returned\n        Deferred which updates the contacts attribute\n        of the factory.\n\n        @param groupID: the ID of the desired group to rename.\n        @param newName: the desired new name for the group.\n\n        @return: A Deferred, the callback for which will be called\n                 when the server clarifies the renaming.\n                 The callback argument will be a tuple of 3 elements,\n                 the new list version (int), the group id (int) and\n                 the new group name (str).\n        """'
newline|'\n'
nl|'\n'
name|'id'
op|','
name|'d'
op|'='
name|'self'
op|'.'
name|'_createIDMapping'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"REG %s %s %s 0"'
op|'%'
op|'('
name|'id'
op|','
name|'groupID'
op|','
name|'quote'
op|'('
name|'newName'
op|')'
op|')'
op|')'
newline|'\n'
DECL|function|_cb
name|'def'
name|'_cb'
op|'('
name|'r'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'version'
op|'='
name|'r'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'setGroup'
op|'('
name|'r'
op|'['
number|'1'
op|']'
op|','
name|'r'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'return'
name|'r'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_cb'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addContact
dedent|''
name|'def'
name|'addContact'
op|'('
name|'self'
op|','
name|'listType'
op|','
name|'userHandle'
op|','
name|'groupID'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Used to add a contact to the desired list.\n        A default callback is added to the returned\n        Deferred which updates the contacts attribute of\n        the factory with the new contact information.\n        If you are adding a contact to the forward list\n        and you want to associate this contact with multiple\n        groups then you will need to call this method for each\n        group you would like to add them to, changing the groupID\n        parameter. The default callback will take care of updating\n        the group information on the factory\'s contact list.\n\n        @param listType: (as defined by the *_LIST constants)\n        @param userHandle: the user handle (passport) of the contact\n                           that is being added\n        @param groupID: the group ID for which to associate this contact\n                        with. (default 0 - default group). Groups are only\n                        valid for FORWARD_LIST.\n\n        @return: A Deferred, the callback for which will be called when\n                 the server has clarified that the user has been added.\n                 The callback argument will be a tuple with 4 elements:\n                 the list type, the contact\'s user handle, the new list\n                 version, and the group id (if relevant, otherwise it\n                 will be None)\n        """'
newline|'\n'
nl|'\n'
name|'id'
op|','
name|'d'
op|'='
name|'self'
op|'.'
name|'_createIDMapping'
op|'('
op|')'
newline|'\n'
name|'listType'
op|'='
name|'listIDToCode'
op|'['
name|'listType'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'if'
name|'listType'
op|'=='
string|'"FL"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"ADD %s FL %s %s %s"'
op|'%'
op|'('
name|'id'
op|','
name|'userHandle'
op|','
name|'userHandle'
op|','
name|'groupID'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"ADD %s %s %s %s"'
op|'%'
op|'('
name|'id'
op|','
name|'listType'
op|','
name|'userHandle'
op|','
name|'userHandle'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_cb
dedent|''
name|'def'
name|'_cb'
op|'('
name|'r'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'version'
op|'='
name|'r'
op|'['
number|'2'
op|']'
newline|'\n'
name|'c'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'getContact'
op|'('
name|'r'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'c'
op|':'
newline|'\n'
indent|'                '
name|'c'
op|'='
name|'MSNContact'
op|'('
name|'userHandle'
op|'='
name|'r'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'r'
op|'['
number|'3'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'c'
op|'.'
name|'groups'
op|'.'
name|'append'
op|'('
name|'r'
op|'['
number|'3'
op|']'
op|')'
newline|'\n'
dedent|''
name|'c'
op|'.'
name|'addToList'
op|'('
name|'r'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'return'
name|'r'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_cb'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remContact
dedent|''
name|'def'
name|'remContact'
op|'('
name|'self'
op|','
name|'listType'
op|','
name|'userHandle'
op|','
name|'groupID'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Used to remove a contact from the desired list.\n        A default callback is added to the returned deferred\n        which updates the contacts attribute of the factory\n        to reflect the new contact information. If you are\n        removing from the forward list then you will need to\n        supply a groupID, if the contact is in more than one\n        group then they will only be removed from this group\n        and not the entire forward list, but if this is their\n        only group they will be removed from the whole list.\n\n        @param listType: (as defined by the *_LIST constants)\n        @param userHandle: the user handle (passport) of the\n                           contact being removed\n        @param groupID: the ID of the group to which this contact\n                        belongs (only relevant for FORWARD_LIST,\n                        default is 0)\n\n        @return: A Deferred, the callback for which will be called when\n                 the server has clarified that the user has been removed.\n                 The callback argument will be a tuple of 4 elements:\n                 the list type, the contact\'s user handle, the new list\n                 version, and the group id (if relevant, otherwise it will\n                 be None)\n        """'
newline|'\n'
nl|'\n'
name|'id'
op|','
name|'d'
op|'='
name|'self'
op|'.'
name|'_createIDMapping'
op|'('
op|')'
newline|'\n'
name|'listType'
op|'='
name|'listIDToCode'
op|'['
name|'listType'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'if'
name|'listType'
op|'=='
string|'"FL"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"REM %s FL %s %s"'
op|'%'
op|'('
name|'id'
op|','
name|'userHandle'
op|','
name|'groupID'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"REM %s %s %s"'
op|'%'
op|'('
name|'id'
op|','
name|'listType'
op|','
name|'userHandle'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_cb
dedent|''
name|'def'
name|'_cb'
op|'('
name|'r'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
newline|'\n'
name|'l'
op|'.'
name|'version'
op|'='
name|'r'
op|'['
number|'2'
op|']'
newline|'\n'
name|'c'
op|'='
name|'l'
op|'.'
name|'getContact'
op|'('
name|'r'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'group'
op|'='
name|'r'
op|'['
number|'3'
op|']'
newline|'\n'
name|'shouldRemove'
op|'='
number|'1'
newline|'\n'
name|'if'
name|'group'
op|':'
comment|'# they may not have been removed from the list'
newline|'\n'
indent|'                '
name|'c'
op|'.'
name|'groups'
op|'.'
name|'remove'
op|'('
name|'group'
op|')'
newline|'\n'
name|'if'
name|'c'
op|'.'
name|'groups'
op|':'
newline|'\n'
indent|'                    '
name|'shouldRemove'
op|'='
number|'0'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'shouldRemove'
op|':'
newline|'\n'
indent|'                '
name|'c'
op|'.'
name|'removeFromList'
op|'('
name|'r'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'c'
op|'.'
name|'lists'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'l'
op|'.'
name|'remContact'
op|'('
name|'c'
op|'.'
name|'userHandle'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'r'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_cb'
op|')'
newline|'\n'
nl|'\n'
DECL|member|changeScreenName
dedent|''
name|'def'
name|'changeScreenName'
op|'('
name|'self'
op|','
name|'newName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Used to change your current screen name.\n        A default callback is added to the returned\n        Deferred which updates the screenName attribute\n        of the factory and also updates the contact list\n        version.\n\n        @param newName: the new screen name\n\n        @return: A Deferred, the callback for which will be called\n                 when the server sends an adequate reply.\n                 The callback argument will be a tuple of 2 elements:\n                 the new list version and the new screen name.\n        """'
newline|'\n'
nl|'\n'
name|'id'
op|','
name|'d'
op|'='
name|'self'
op|'.'
name|'_createIDMapping'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"REA %s %s %s"'
op|'%'
op|'('
name|'id'
op|','
name|'self'
op|'.'
name|'factory'
op|'.'
name|'userHandle'
op|','
name|'quote'
op|'('
name|'newName'
op|')'
op|')'
op|')'
newline|'\n'
DECL|function|_cb
name|'def'
name|'_cb'
op|'('
name|'r'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'contacts'
op|'.'
name|'version'
op|'='
name|'r'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'screenName'
op|'='
name|'r'
op|'['
number|'1'
op|']'
newline|'\n'
name|'return'
name|'r'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_cb'
op|')'
newline|'\n'
nl|'\n'
DECL|member|requestSwitchboardServer
dedent|''
name|'def'
name|'requestSwitchboardServer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Used to request a switchboard server to use for conversations.\n\n        @return: A Deferred, the callback for which will be called when\n                 the server responds with the switchboard information.\n                 The callback argument will be a tuple with 3 elements:\n                 the host of the switchboard server, the port and a key\n                 used for logging in.\n        """'
newline|'\n'
nl|'\n'
name|'id'
op|','
name|'d'
op|'='
name|'self'
op|'.'
name|'_createIDMapping'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"XFR %s SB"'
op|'%'
name|'id'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|logOut
dedent|''
name|'def'
name|'logOut'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Used to log out of the notification server.\n        After running the method the server is expected\n        to close the connection.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"OUT"'
op|')'
newline|'\n'
nl|'\n'
DECL|class|NotificationFactory
dedent|''
dedent|''
name|'class'
name|'NotificationFactory'
op|'('
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Factory for the NotificationClient protocol.\n    This is basically responsible for keeping\n    the state of the client and thus should be used\n    in a 1:1 situation with clients.\n\n    @ivar contacts: An MSNContactList instance reflecting\n                    the current contact list -- this is\n                    generally kept up to date by the default\n                    command handlers.\n    @ivar userHandle: The client\'s userHandle, this is expected\n                      to be set by the client and is used by the\n                      protocol (for logging in etc).\n    @ivar screenName: The client\'s current screen-name -- this is\n                      generally kept up to date by the default\n                      command handlers.\n    @ivar password: The client\'s password -- this is (obviously)\n                    expected to be set by the client.\n    @ivar passportServer: This must point to an msn passport server\n                          (the whole URL is required)\n    @ivar status: The status of the client -- this is generally kept\n                  up to date by the default command handlers\n    """'
newline|'\n'
nl|'\n'
DECL|variable|contacts
name|'contacts'
op|'='
name|'None'
newline|'\n'
DECL|variable|userHandle
name|'userHandle'
op|'='
string|"''"
newline|'\n'
DECL|variable|screenName
name|'screenName'
op|'='
string|"''"
newline|'\n'
DECL|variable|password
name|'password'
op|'='
string|"''"
newline|'\n'
DECL|variable|passportServer
name|'passportServer'
op|'='
string|"'https://nexus.passport.com/rdr/pprdr.asp'"
newline|'\n'
DECL|variable|status
name|'status'
op|'='
string|"'FLN'"
newline|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'NotificationClient'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# XXX: A lot of the state currently kept in'
nl|'\n'
comment|'# instances of SwitchboardClient is likely to'
nl|'\n'
comment|'# be moved into a factory at some stage in the'
nl|'\n'
comment|'# future'
nl|'\n'
nl|'\n'
DECL|class|SwitchboardClient
dedent|''
name|'class'
name|'SwitchboardClient'
op|'('
name|'MSNEventBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class provides support for clients connecting to a switchboard server.\n\n    Switchboard servers are used for conversations with other people\n    on the MSN network. This means that the number of conversations at\n    any given time will be directly proportional to the number of\n    connections to varioius switchboard servers.\n\n    MSN makes no distinction between single and group conversations,\n    so any number of users may be invited to join a specific conversation\n    taking place on a switchboard server.\n\n    @ivar key: authorization key, obtained when receiving\n               invitation / requesting switchboard server.\n    @ivar userHandle: your user handle (passport)\n    @ivar sessionID: unique session ID, used if you are replying\n                     to a switchboard invitation\n    @ivar reply: set this to 1 in connectionMade or before to signifiy\n                 that you are replying to a switchboard invitation.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|key
name|'key'
op|'='
number|'0'
newline|'\n'
DECL|variable|userHandle
name|'userHandle'
op|'='
string|'""'
newline|'\n'
DECL|variable|sessionID
name|'sessionID'
op|'='
string|'""'
newline|'\n'
DECL|variable|reply
name|'reply'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|variable|_iCookie
name|'_iCookie'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MSNEventBase'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pendingUsers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'cookies'
op|'='
op|'{'
string|"'iCookies'"
op|':'
op|'{'
op|'}'
op|','
string|"'external'"
op|':'
op|'{'
op|'}'
op|'}'
comment|'# will maybe be moved to a factory in the future'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MSNEventBase'
op|'.'
name|'connectionMade'
op|'('
name|'self'
op|')'
newline|'\n'
name|'print'
string|"'sending initial stuff'"
newline|'\n'
name|'self'
op|'.'
name|'_sendInit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cookies'
op|'['
string|"'iCookies'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'cookies'
op|'['
string|"'external'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'MSNEventBase'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_sendInit
dedent|''
name|'def'
name|'_sendInit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        send initial data based on whether we are replying to an invitation\n        or starting one.\n        """'
newline|'\n'
name|'id'
op|'='
name|'self'
op|'.'
name|'_nextTransactionID'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'reply'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"USR %s %s %s"'
op|'%'
op|'('
name|'id'
op|','
name|'self'
op|'.'
name|'userHandle'
op|','
name|'self'
op|'.'
name|'key'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"ANS %s %s %s %s"'
op|'%'
op|'('
name|'id'
op|','
name|'self'
op|'.'
name|'userHandle'
op|','
name|'self'
op|'.'
name|'key'
op|','
name|'self'
op|'.'
name|'sessionID'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_newInvitationCookie
dedent|''
dedent|''
name|'def'
name|'_newInvitationCookie'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_iCookie'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_iCookie'
op|'>'
number|'1000'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_iCookie'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_iCookie'
newline|'\n'
nl|'\n'
DECL|member|_checkTyping
dedent|''
name|'def'
name|'_checkTyping'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'cTypes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" helper method for checkMessage """'
newline|'\n'
name|'if'
string|"'text/x-msmsgscontrol'"
name|'in'
name|'cTypes'
name|'and'
name|'message'
op|'.'
name|'hasHeader'
op|'('
string|"'TypingUser'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'userTyping'
op|'('
name|'message'
op|')'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|_checkFileInvitation
dedent|''
dedent|''
name|'def'
name|'_checkFileInvitation'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" helper method for checkMessage """'
newline|'\n'
name|'guid'
op|'='
name|'info'
op|'.'
name|'get'
op|'('
string|"'Application-GUID'"
op|','
string|"''"
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'name'
op|'='
name|'info'
op|'.'
name|'get'
op|'('
string|"'Application-Name'"
op|','
string|"''"
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# Both fields are required, but we'll let some lazy clients get away"
nl|'\n'
comment|'# with only sending a name, if it is easy for us to recognize the'
nl|'\n'
comment|'# name (the name is localized, so this check might fail for lazy,'
nl|'\n'
comment|'# non-english clients, but I\'m not about to include "file transfer"'
nl|'\n'
comment|'# in 80 different languages here).'
nl|'\n'
nl|'\n'
name|'if'
name|'name'
op|'!='
string|'"file transfer"'
name|'and'
name|'guid'
op|'!='
name|'classNameToGUID'
op|'['
string|'"file transfer"'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'cookie'
op|'='
name|'int'
op|'('
name|'info'
op|'['
string|"'Invitation-Cookie'"
op|']'
op|')'
newline|'\n'
name|'fileName'
op|'='
name|'info'
op|'['
string|"'Application-File'"
op|']'
newline|'\n'
name|'fileSize'
op|'='
name|'int'
op|'('
name|'info'
op|'['
string|"'Application-FileSize'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'Received munged file transfer request ... ignoring.'"
op|')'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'gotSendRequest'
op|'('
name|'fileName'
op|','
name|'fileSize'
op|','
name|'cookie'
op|','
name|'message'
op|')'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|_checkFileResponse
dedent|''
name|'def'
name|'_checkFileResponse'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" helper method for checkMessage """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
name|'info'
op|'['
string|"'Invitation-Command'"
op|']'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'cookie'
op|'='
name|'int'
op|'('
name|'info'
op|'['
string|"'Invitation-Cookie'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'accept'
op|'='
op|'('
name|'cmd'
op|'=='
string|"'ACCEPT'"
op|')'
name|'and'
number|'1'
name|'or'
number|'0'
newline|'\n'
name|'requested'
op|'='
name|'self'
op|'.'
name|'cookies'
op|'['
string|"'iCookies'"
op|']'
op|'.'
name|'get'
op|'('
name|'cookie'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'requested'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'1'
newline|'\n'
dedent|''
name|'requested'
op|'['
number|'0'
op|']'
op|'.'
name|'callback'
op|'('
op|'('
name|'accept'
op|','
name|'cookie'
op|','
name|'info'
op|')'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'cookies'
op|'['
string|"'iCookies'"
op|']'
op|'['
name|'cookie'
op|']'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|_checkFileInfo
dedent|''
name|'def'
name|'_checkFileInfo'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" helper method for checkMessage """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ip'
op|'='
name|'info'
op|'['
string|"'IP-Address'"
op|']'
newline|'\n'
name|'iCookie'
op|'='
name|'int'
op|'('
name|'info'
op|'['
string|"'Invitation-Cookie'"
op|']'
op|')'
newline|'\n'
name|'aCookie'
op|'='
name|'int'
op|'('
name|'info'
op|'['
string|"'AuthCookie'"
op|']'
op|')'
newline|'\n'
name|'cmd'
op|'='
name|'info'
op|'['
string|"'Invitation-Command'"
op|']'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'port'
op|'='
name|'int'
op|'('
name|'info'
op|'['
string|"'Port'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'accept'
op|'='
op|'('
name|'cmd'
op|'=='
string|"'ACCEPT'"
op|')'
name|'and'
number|'1'
name|'or'
number|'0'
newline|'\n'
name|'requested'
op|'='
name|'self'
op|'.'
name|'cookies'
op|'['
string|"'external'"
op|']'
op|'.'
name|'get'
op|'('
name|'iCookie'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'requested'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'1'
comment|"# we didn't ask for this"
newline|'\n'
dedent|''
name|'requested'
op|'['
number|'0'
op|']'
op|'.'
name|'callback'
op|'('
op|'('
name|'accept'
op|','
name|'ip'
op|','
name|'port'
op|','
name|'aCookie'
op|','
name|'info'
op|')'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'cookies'
op|'['
string|"'external'"
op|']'
op|'['
name|'iCookie'
op|']'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|checkMessage
dedent|''
name|'def'
name|'checkMessage'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        hook for detecting any notification type messages\n        (e.g. file transfer)\n        """'
newline|'\n'
name|'cTypes'
op|'='
op|'['
name|'s'
op|'.'
name|'lstrip'
op|'('
op|')'
name|'for'
name|'s'
name|'in'
name|'message'
op|'.'
name|'getHeader'
op|'('
string|"'Content-Type'"
op|')'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_checkTyping'
op|'('
name|'message'
op|','
name|'cTypes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'if'
string|"'text/x-msmsgsinvite'"
name|'in'
name|'cTypes'
op|':'
newline|'\n'
comment|'# header like info is sent as part of the message body.'
nl|'\n'
indent|'            '
name|'info'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'message'
op|'.'
name|'message'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'key'
op|','
name|'val'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'info'
op|'['
name|'key'
op|']'
op|'='
name|'val'
op|'.'
name|'lstrip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'_checkFileInvitation'
op|'('
name|'message'
op|','
name|'info'
op|')'
name|'or'
name|'self'
op|'.'
name|'_checkFileInfo'
op|'('
name|'message'
op|','
name|'info'
op|')'
name|'or'
name|'self'
op|'.'
name|'_checkFileResponse'
op|'('
name|'message'
op|','
name|'info'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
number|'0'
newline|'\n'
dedent|''
dedent|''
name|'elif'
string|"'text/x-clientcaps'"
name|'in'
name|'cTypes'
op|':'
newline|'\n'
comment|'# do something with capabilities'
nl|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'return'
number|'1'
newline|'\n'
nl|'\n'
comment|'# negotiation'
nl|'\n'
DECL|member|handle_USR
dedent|''
name|'def'
name|'handle_USR'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'4'
op|','
string|"'USR'"
op|')'
newline|'\n'
name|'if'
name|'params'
op|'['
number|'1'
op|']'
op|'=='
string|'"OK"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'loggedIn'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# invite a user'
nl|'\n'
DECL|member|handle_CAL
dedent|''
dedent|''
name|'def'
name|'handle_CAL'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'3'
op|','
string|"'CAL'"
op|')'
newline|'\n'
name|'id'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'params'
op|'['
number|'1'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|'"RINGING"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'id'
op|','
name|'int'
op|'('
name|'params'
op|'['
number|'2'
op|']'
op|')'
op|')'
comment|'# session ID as parameter'
newline|'\n'
nl|'\n'
comment|'# user joined'
nl|'\n'
DECL|member|handle_JOI
dedent|''
dedent|''
name|'def'
name|'handle_JOI'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'2'
op|','
string|"'JOI'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'userJoined'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|','
name|'unquote'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# users participating in the current chat'
nl|'\n'
DECL|member|handle_IRO
dedent|''
name|'def'
name|'handle_IRO'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'5'
op|','
string|"'IRO'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pendingUsers'
op|'['
name|'params'
op|'['
number|'3'
op|']'
op|']'
op|'='
name|'unquote'
op|'('
name|'params'
op|'['
number|'4'
op|']'
op|')'
newline|'\n'
name|'if'
name|'params'
op|'['
number|'1'
op|']'
op|'=='
name|'params'
op|'['
number|'2'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'gotChattingUsers'
op|'('
name|'self'
op|'.'
name|'pendingUsers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pendingUsers'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# finished listing users'
nl|'\n'
DECL|member|handle_ANS
dedent|''
dedent|''
name|'def'
name|'handle_ANS'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'2'
op|','
string|"'ANS'"
op|')'
newline|'\n'
name|'if'
name|'params'
op|'['
number|'1'
op|']'
op|'=='
string|'"OK"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'loggedIn'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_ACK
dedent|''
dedent|''
name|'def'
name|'handle_ACK'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'1'
op|','
string|"'ACK'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_NAK
dedent|''
name|'def'
name|'handle_NAK'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'1'
op|','
string|"'NAK'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_fireCallback'
op|'('
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_BYE
dedent|''
name|'def'
name|'handle_BYE'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
comment|"#checkParamLen(len(params), 1, 'BYE') # i've seen more than 1 param passed to this"
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'userLeft'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# callbacks'
nl|'\n'
nl|'\n'
DECL|member|loggedIn
dedent|''
name|'def'
name|'loggedIn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        called when all login details have been negotiated.\n        Messages can now be sent, or new users invited.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|gotChattingUsers
dedent|''
name|'def'
name|'gotChattingUsers'
op|'('
name|'self'
op|','
name|'users'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        called after connecting to an existing chat session.\n\n        @param users: A dict mapping user handles to screen names\n                      (current users taking part in the conversation)\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|userJoined
dedent|''
name|'def'
name|'userJoined'
op|'('
name|'self'
op|','
name|'userHandle'
op|','
name|'screenName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        called when a user has joined the conversation.\n\n        @param userHandle: the user handle (passport) of the user\n        @param screenName: the screen name of the user\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|userLeft
dedent|''
name|'def'
name|'userLeft'
op|'('
name|'self'
op|','
name|'userHandle'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        called when a user has left the conversation.\n\n        @param userHandle: the user handle (passport) of the user.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|gotMessage
dedent|''
name|'def'
name|'gotMessage'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        called when we receive a message.\n\n        @param message: the associated MSNMessage object\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|userTyping
dedent|''
name|'def'
name|'userTyping'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        called when we receive the special type of message notifying\n        us that a user is typing a message.\n\n        @param message: the associated MSNMessage object\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|gotSendRequest
dedent|''
name|'def'
name|'gotSendRequest'
op|'('
name|'self'
op|','
name|'fileName'
op|','
name|'fileSize'
op|','
name|'iCookie'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        called when a contact is trying to send us a file.\n        To accept or reject this transfer see the\n        fileInvitationReply method.\n\n        @param fileName: the name of the file\n        @param fileSize: the size of the file\n        @param iCookie: the invitation cookie, used so the client can\n                        match up your reply with this request.\n        @param message: the MSNMessage object which brought about this\n                        invitation (it may contain more information)\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
comment|'# api calls'
nl|'\n'
nl|'\n'
DECL|member|inviteUser
dedent|''
name|'def'
name|'inviteUser'
op|'('
name|'self'
op|','
name|'userHandle'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        used to invite a user to the current switchboard server.\n\n        @param userHandle: the user handle (passport) of the desired user.\n\n        @return: A Deferred, the callback for which will be called\n                 when the server notifies us that the user has indeed\n                 been invited.  The callback argument will be a tuple\n                 with 1 element, the sessionID given to the invited user.\n                 I\'m not sure if this is useful or not.\n        """'
newline|'\n'
nl|'\n'
name|'id'
op|','
name|'d'
op|'='
name|'self'
op|'.'
name|'_createIDMapping'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"CAL %s %s"'
op|'%'
op|'('
name|'id'
op|','
name|'userHandle'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|sendMessage
dedent|''
name|'def'
name|'sendMessage'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        used to send a message.\n\n        @param message: the corresponding MSNMessage object.\n\n        @return: Depending on the value of message.ack.\n                 If set to MSNMessage.MESSAGE_ACK or\n                 MSNMessage.MESSAGE_NACK a Deferred will be returned,\n                 the callback for which will be fired when an ACK or\n                 NACK is received - the callback argument will be\n                 (None,). If set to MSNMessage.MESSAGE_ACK_NONE then\n                 the return value is None.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'message'
op|'.'
name|'ack'
name|'not'
name|'in'
op|'('
string|"'A'"
op|','
string|"'N'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'id'
op|','
name|'d'
op|'='
name|'self'
op|'.'
name|'_nextTransactionID'
op|'('
op|')'
op|','
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'id'
op|','
name|'d'
op|'='
name|'self'
op|'.'
name|'_createIDMapping'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'message'
op|'.'
name|'length'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'message'
op|'.'
name|'length'
op|'='
name|'message'
op|'.'
name|'_calcMessageLen'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"MSG %s %s %s"'
op|'%'
op|'('
name|'id'
op|','
name|'message'
op|'.'
name|'ack'
op|','
name|'message'
op|'.'
name|'length'
op|')'
op|')'
newline|'\n'
comment|'# apparently order matters with at least MIME-Version and Content-Type'
nl|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'MIME-Version: %s'"
op|'%'
name|'message'
op|'.'
name|'getHeader'
op|'('
string|"'MIME-Version'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'Content-Type: %s'"
op|'%'
name|'message'
op|'.'
name|'getHeader'
op|'('
string|"'Content-Type'"
op|')'
op|')'
newline|'\n'
comment|'# send the rest of the headers'
nl|'\n'
name|'for'
name|'header'
name|'in'
op|'['
name|'h'
name|'for'
name|'h'
name|'in'
name|'message'
op|'.'
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
name|'if'
name|'h'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
name|'not'
name|'in'
op|'('
string|"'mime-version'"
op|','
string|"'content-type'"
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"%s: %s"'
op|'%'
op|'('
name|'header'
op|'['
number|'0'
op|']'
op|','
name|'header'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'CR'
op|'+'
name|'LF'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'message'
op|'.'
name|'message'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|sendTypingNotification
dedent|''
name|'def'
name|'sendTypingNotification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        used to send a typing notification. Upon receiving this\n        message the official client will display a \'user is typing\'\n        message to all other users in the chat session for 10 seconds.\n        The official client sends one of these every 5 seconds (I think)\n        as long as you continue to type.\n        """'
newline|'\n'
name|'m'
op|'='
name|'MSNMessage'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'ack'
op|'='
name|'m'
op|'.'
name|'MESSAGE_ACK_NONE'
newline|'\n'
name|'m'
op|'.'
name|'setHeader'
op|'('
string|"'Content-Type'"
op|','
string|"'text/x-msmsgscontrol'"
op|')'
newline|'\n'
name|'m'
op|'.'
name|'setHeader'
op|'('
string|"'TypingUser'"
op|','
name|'self'
op|'.'
name|'userHandle'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'='
string|'"\\r\\n"'
newline|'\n'
name|'self'
op|'.'
name|'sendMessage'
op|'('
name|'m'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendFileInvitation
dedent|''
name|'def'
name|'sendFileInvitation'
op|'('
name|'self'
op|','
name|'fileName'
op|','
name|'fileSize'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        send an notification that we want to send a file.\n\n        @param fileName: the file name\n        @param fileSize: the file size\n\n        @return: A Deferred, the callback of which will be fired\n                 when the user responds to this invitation with an\n                 appropriate message. The callback argument will be\n                 a tuple with 3 elements, the first being 1 or 0\n                 depending on whether they accepted the transfer\n                 (1=yes, 0=no), the second being an invitation cookie\n                 to identify your follow-up responses and the third being\n                 the message \'info\' which is a dict of information they\n                 sent in their reply (this doesn\'t really need to be used).\n                 If you wish to proceed with the transfer see the\n                 sendTransferInfo method.\n        """'
newline|'\n'
name|'cookie'
op|'='
name|'self'
op|'.'
name|'_newInvitationCookie'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'m'
op|'='
name|'MSNMessage'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'setHeader'
op|'('
string|"'Content-Type'"
op|','
string|"'text/x-msmsgsinvite; charset=UTF-8'"
op|')'
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'+='
string|"'Application-Name: File Transfer\\r\\n'"
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'+='
string|"'Application-GUID: %s\\r\\n'"
op|'%'
op|'('
name|'classNameToGUID'
op|'['
string|'"file transfer"'
op|']'
op|','
op|')'
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'+='
string|"'Invitation-Command: INVITE\\r\\n'"
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'+='
string|"'Invitation-Cookie: %s\\r\\n'"
op|'%'
name|'str'
op|'('
name|'cookie'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'+='
string|"'Application-File: %s\\r\\n'"
op|'%'
name|'fileName'
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'+='
string|"'Application-FileSize: %s\\r\\n\\r\\n'"
op|'%'
name|'str'
op|'('
name|'fileSize'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'ack'
op|'='
name|'m'
op|'.'
name|'MESSAGE_ACK_NONE'
newline|'\n'
name|'self'
op|'.'
name|'sendMessage'
op|'('
name|'m'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cookies'
op|'['
string|"'iCookies'"
op|']'
op|'['
name|'cookie'
op|']'
op|'='
op|'('
name|'d'
op|','
name|'m'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|fileInvitationReply
dedent|''
name|'def'
name|'fileInvitationReply'
op|'('
name|'self'
op|','
name|'iCookie'
op|','
name|'accept'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        used to reply to a file transfer invitation.\n\n        @param iCookie: the invitation cookie of the initial invitation\n        @param accept: whether or not you accept this transfer,\n                       1 = yes, 0 = no, default = 1.\n\n        @return: A Deferred, the callback for which will be fired when\n                 the user responds with the transfer information.\n                 The callback argument will be a tuple with 5 elements,\n                 whether or not they wish to proceed with the transfer\n                 (1=yes, 0=no), their ip, the port, the authentication\n                 cookie (see FileReceive/FileSend) and the message\n                 info (dict) (in case they send extra header-like info\n                 like Internal-IP, this doesn\'t necessarily need to be\n                 used). If you wish to proceed with the transfer see\n                 FileReceive.\n        """'
newline|'\n'
name|'d'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'m'
op|'='
name|'MSNMessage'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'setHeader'
op|'('
string|"'Content-Type'"
op|','
string|"'text/x-msmsgsinvite; charset=UTF-8'"
op|')'
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'+='
string|"'Invitation-Command: %s\\r\\n'"
op|'%'
op|'('
name|'accept'
name|'and'
string|"'ACCEPT'"
name|'or'
string|"'CANCEL'"
op|')'
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'+='
string|"'Invitation-Cookie: %s\\r\\n'"
op|'%'
name|'str'
op|'('
name|'iCookie'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'accept'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'.'
name|'message'
op|'+='
string|"'Cancel-Code: REJECT\\r\\n'"
newline|'\n'
dedent|''
name|'m'
op|'.'
name|'message'
op|'+='
string|"'Launch-Application: FALSE\\r\\n'"
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'+='
string|"'Request-Data: IP-Address:\\r\\n'"
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'+='
string|"'\\r\\n'"
newline|'\n'
name|'m'
op|'.'
name|'ack'
op|'='
name|'m'
op|'.'
name|'MESSAGE_ACK_NONE'
newline|'\n'
name|'self'
op|'.'
name|'sendMessage'
op|'('
name|'m'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cookies'
op|'['
string|"'external'"
op|']'
op|'['
name|'iCookie'
op|']'
op|'='
op|'('
name|'d'
op|','
name|'m'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|sendTransferInfo
dedent|''
name|'def'
name|'sendTransferInfo'
op|'('
name|'self'
op|','
name|'accept'
op|','
name|'iCookie'
op|','
name|'authCookie'
op|','
name|'ip'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        send information relating to a file transfer session.\n\n        @param accept: whether or not to go ahead with the transfer\n                       (1=yes, 0=no)\n        @param iCookie: the invitation cookie of previous replies\n                        relating to this transfer\n        @param authCookie: the authentication cookie obtained from\n                           an FileSend instance\n        @param ip: your ip\n        @param port: the port on which an FileSend protocol is listening.\n        """'
newline|'\n'
name|'m'
op|'='
name|'MSNMessage'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'setHeader'
op|'('
string|"'Content-Type'"
op|','
string|"'text/x-msmsgsinvite; charset=UTF-8'"
op|')'
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'+='
string|"'Invitation-Command: %s\\r\\n'"
op|'%'
op|'('
name|'accept'
name|'and'
string|"'ACCEPT'"
name|'or'
string|"'CANCEL'"
op|')'
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'+='
string|"'Invitation-Cookie: %s\\r\\n'"
op|'%'
name|'iCookie'
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'+='
string|"'IP-Address: %s\\r\\n'"
op|'%'
name|'ip'
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'+='
string|"'Port: %s\\r\\n'"
op|'%'
name|'port'
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'+='
string|"'AuthCookie: %s\\r\\n'"
op|'%'
name|'authCookie'
newline|'\n'
name|'m'
op|'.'
name|'message'
op|'+='
string|"'\\r\\n'"
newline|'\n'
name|'m'
op|'.'
name|'ack'
op|'='
name|'m'
op|'.'
name|'MESSAGE_NACK'
newline|'\n'
name|'self'
op|'.'
name|'sendMessage'
op|'('
name|'m'
op|')'
newline|'\n'
nl|'\n'
DECL|class|FileReceive
dedent|''
dedent|''
name|'class'
name|'FileReceive'
op|'('
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class provides support for receiving files from contacts.\n\n    @ivar fileSize: the size of the receiving file. (you will have to set this)\n    @ivar connected: true if a connection has been established.\n    @ivar completed: true if the transfer is complete.\n    @ivar bytesReceived: number of bytes (of the file) received.\n                         This does not include header data.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'auth'
op|','
name|'myUserHandle'
op|','
name|'file'
op|','
name|'directory'
op|'='
string|'""'
op|','
name|'overwrite'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param auth: auth string received in the file invitation.\n        @param myUserHandle: your userhandle.\n        @param file: A string or file object represnting the file\n                     to save data to.\n        @param directory: optional parameter specifiying the directory.\n                          Defaults to the current directory.\n        @param overwrite: if true and a file of the same name exists on\n                          your system, it will be overwritten. (0 by default)\n        """'
newline|'\n'
name|'self'
op|'.'
name|'auth'
op|'='
name|'auth'
newline|'\n'
name|'self'
op|'.'
name|'myUserHandle'
op|'='
name|'myUserHandle'
newline|'\n'
name|'self'
op|'.'
name|'fileSize'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'completed'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'directory'
op|'='
name|'directory'
newline|'\n'
name|'self'
op|'.'
name|'bytesReceived'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'overwrite'
op|'='
name|'overwrite'
newline|'\n'
nl|'\n'
comment|'# used for handling current received state'
nl|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'CONNECTING'"
newline|'\n'
name|'self'
op|'.'
name|'segmentLength'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
string|"''"
newline|'\n'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'file'
op|','
name|'types'
op|'.'
name|'StringType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'directory'
op|','
name|'file'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'path'
op|')'
name|'and'
name|'not'
name|'self'
op|'.'
name|'overwrite'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'File already exists...'"
op|')'
newline|'\n'
name|'raise'
name|'IOError'
op|','
string|'"File Exists"'
comment|'# is this all we should do here?'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'file'
op|'='
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'directory'
op|','
name|'file'
op|')'
op|','
string|"'wb'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'='
name|'file'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connected'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'INHEADER'"
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'VER MSNFTP'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connected'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|parseHeader
dedent|''
name|'def'
name|'parseHeader'
op|'('
name|'self'
op|','
name|'header'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" parse the header of each \'message\' to obtain the segment length """'
newline|'\n'
nl|'\n'
name|'if'
name|'ord'
op|'('
name|'header'
op|'['
number|'0'
op|']'
op|')'
op|'!='
number|'0'
op|':'
comment|'# they requested that we close the connection'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'extra'
op|','
name|'factor'
op|'='
name|'header'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
comment|'# munged header, ending transfer'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'extra'
op|'='
name|'ord'
op|'('
name|'extra'
op|')'
newline|'\n'
name|'factor'
op|'='
name|'ord'
op|'('
name|'factor'
op|')'
newline|'\n'
name|'return'
name|'factor'
op|'*'
number|'256'
op|'+'
name|'extra'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'temp'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'temp'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'='
name|'temp'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'cmd'
op|'='
name|'temp'
op|'['
number|'0'
op|']'
newline|'\n'
name|'handler'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"handle_%s"'
op|'%'
name|'cmd'
op|'.'
name|'upper'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'handler'
op|':'
newline|'\n'
indent|'            '
name|'handler'
op|'('
name|'params'
op|')'
comment|'# try/except'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'handle_UNKNOWN'
op|'('
name|'cmd'
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rawDataReceived
dedent|''
dedent|''
name|'def'
name|'rawDataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bufferLen'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'buffer'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'INHEADER'"
op|':'
newline|'\n'
indent|'            '
name|'delim'
op|'='
number|'3'
op|'-'
name|'bufferLen'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'+='
name|'data'
op|'['
op|':'
name|'delim'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'buffer'
op|')'
op|'=='
number|'3'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'segmentLength'
op|'='
name|'self'
op|'.'
name|'parseHeader'
op|'('
name|'self'
op|'.'
name|'buffer'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'segmentLength'
op|':'
newline|'\n'
indent|'                    '
name|'return'
comment|'# hrm'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'buffer'
op|'='
string|'""'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
string|"'INSEGMENT'"
newline|'\n'
dedent|''
name|'extra'
op|'='
name|'data'
op|'['
name|'delim'
op|':'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'extra'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'rawDataReceived'
op|'('
name|'extra'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'INSEGMENT'"
op|':'
newline|'\n'
indent|'            '
name|'dataSeg'
op|'='
name|'data'
op|'['
op|':'
op|'('
name|'self'
op|'.'
name|'segmentLength'
op|'-'
name|'bufferLen'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'+='
name|'dataSeg'
newline|'\n'
name|'self'
op|'.'
name|'bytesReceived'
op|'+='
name|'len'
op|'('
name|'dataSeg'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'buffer'
op|')'
op|'=='
name|'self'
op|'.'
name|'segmentLength'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'gotSegment'
op|'('
name|'self'
op|'.'
name|'buffer'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
string|'""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'bytesReceived'
op|'=='
name|'self'
op|'.'
name|'fileSize'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'completed'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
string|'""'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"BYE 16777989"'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'state'
op|'='
string|"'INHEADER'"
newline|'\n'
name|'extra'
op|'='
name|'data'
op|'['
op|'('
name|'self'
op|'.'
name|'segmentLength'
op|'-'
name|'bufferLen'
op|')'
op|':'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'extra'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'rawDataReceived'
op|'('
name|'extra'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
DECL|member|handle_VER
dedent|''
dedent|''
dedent|''
name|'def'
name|'handle_VER'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'1'
op|','
string|"'VER'"
op|')'
newline|'\n'
name|'if'
name|'params'
op|'['
number|'0'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|'"MSNFTP"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"USR %s %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'myUserHandle'
op|','
name|'self'
op|'.'
name|'auth'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'they sent the wrong version, time to quit this transfer'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_FIL
dedent|''
dedent|''
name|'def'
name|'handle_FIL'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'1'
op|','
string|"'FIL'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fileSize'
op|'='
name|'int'
op|'('
name|'params'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
comment|'# they sent the wrong file size - probably want to log this'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'setRawMode'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"TFR"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_UNKNOWN
dedent|''
name|'def'
name|'handle_UNKNOWN'
op|'('
name|'self'
op|','
name|'cmd'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'received unknown command (%s), params: %s'"
op|'%'
op|'('
name|'cmd'
op|','
name|'params'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|gotSegment
dedent|''
name|'def'
name|'gotSegment'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" called when a segment (block) of data arrives. """'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|class|FileSend
dedent|''
dedent|''
name|'class'
name|'FileSend'
op|'('
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class provides support for sending files to other contacts.\n\n    @ivar bytesSent: the number of bytes that have currently been sent.\n    @ivar completed: true if the send has completed.\n    @ivar connected: true if a connection has been established.\n    @ivar targetUser: the target user (contact).\n    @ivar segmentSize: the segment (block) size.\n    @ivar auth: the auth cookie (number) to use when sending the\n                transfer invitation\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'file'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param file: A string or file object represnting the file to send.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'file'
op|','
name|'types'
op|'.'
name|'StringType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'='
name|'open'
op|'('
name|'file'
op|','
string|"'rb'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'='
name|'file'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'fileSize'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'bytesSent'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'completed'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'connected'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'targetUser'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'segmentSize'
op|'='
number|'2045'
newline|'\n'
name|'self'
op|'.'
name|'auth'
op|'='
name|'randint'
op|'('
number|'0'
op|','
number|'2'
op|'**'
number|'30'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_pendingSend'
op|'='
name|'None'
comment|'# :('
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connected'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_pendingSend'
op|'.'
name|'active'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_pendingSend'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_pendingSend'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'bytesSent'
op|'=='
name|'self'
op|'.'
name|'fileSize'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'completed'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connected'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'temp'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'temp'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'='
name|'temp'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'cmd'
op|'='
name|'temp'
op|'['
number|'0'
op|']'
newline|'\n'
name|'handler'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"handle_%s"'
op|'%'
name|'cmd'
op|'.'
name|'upper'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'handler'
op|':'
newline|'\n'
indent|'            '
name|'handler'
op|'('
name|'params'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'handle_UNKNOWN'
op|'('
name|'cmd'
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_VER
dedent|''
dedent|''
name|'def'
name|'handle_VER'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'1'
op|','
string|"'VER'"
op|')'
newline|'\n'
name|'if'
name|'params'
op|'['
number|'0'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|'"MSNFTP"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"VER MSNFTP"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
comment|"# they sent some weird version during negotiation, i'm quitting."
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_USR
dedent|''
dedent|''
name|'def'
name|'handle_USR'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'2'
op|','
string|"'USR'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'targetUser'
op|'='
name|'params'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'auth'
op|'=='
name|'int'
op|'('
name|'params'
op|'['
number|'1'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|'"FIL %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'fileSize'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
comment|'# they failed the auth test, disconnecting.'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_TFR
dedent|''
dedent|''
name|'def'
name|'handle_TFR'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checkParamLen'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|','
number|'0'
op|','
string|"'TFR'"
op|')'
newline|'\n'
comment|'# they are ready for me to start sending'
nl|'\n'
name|'self'
op|'.'
name|'sendPart'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_BYE
dedent|''
name|'def'
name|'handle_BYE'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'completed'
op|'='
op|'('
name|'self'
op|'.'
name|'bytesSent'
op|'=='
name|'self'
op|'.'
name|'fileSize'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_CCL
dedent|''
name|'def'
name|'handle_CCL'
op|'('
name|'self'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'completed'
op|'='
op|'('
name|'self'
op|'.'
name|'bytesSent'
op|'=='
name|'self'
op|'.'
name|'fileSize'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_UNKNOWN
dedent|''
name|'def'
name|'handle_UNKNOWN'
op|'('
name|'self'
op|','
name|'cmd'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|"'received unknown command (%s), params: %s'"
op|'%'
op|'('
name|'cmd'
op|','
name|'params'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|makeHeader
dedent|''
name|'def'
name|'makeHeader'
op|'('
name|'self'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" make the appropriate header given a specific segment size. """'
newline|'\n'
name|'quotient'
op|','
name|'remainder'
op|'='
name|'divmod'
op|'('
name|'size'
op|','
number|'256'
op|')'
newline|'\n'
name|'return'
name|'chr'
op|'('
number|'0'
op|')'
op|'+'
name|'chr'
op|'('
name|'remainder'
op|')'
op|'+'
name|'chr'
op|'('
name|'quotient'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendPart
dedent|''
name|'def'
name|'sendPart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" send a segment of data """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'connected'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_pendingSend'
op|'='
name|'None'
newline|'\n'
name|'return'
comment|'# may be buggy (if handle_CCL/BYE is called but self.connected is still 1)'
newline|'\n'
dedent|''
name|'data'
op|'='
name|'self'
op|'.'
name|'file'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'segmentSize'
op|')'
newline|'\n'
name|'if'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'dataSize'
op|'='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
name|'header'
op|'='
name|'self'
op|'.'
name|'makeHeader'
op|'('
name|'dataSize'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bytesSent'
op|'+='
name|'dataSize'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'header'
op|'+'
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_pendingSend'
op|'='
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'sendPart'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_pendingSend'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'completed'
op|'='
number|'1'
newline|'\n'
nl|'\n'
comment|'# mapping of error codes to error messages'
nl|'\n'
DECL|variable|errorCodes
dedent|''
dedent|''
dedent|''
name|'errorCodes'
op|'='
op|'{'
nl|'\n'
nl|'\n'
number|'200'
op|':'
string|'"Syntax error"'
op|','
nl|'\n'
number|'201'
op|':'
string|'"Invalid parameter"'
op|','
nl|'\n'
number|'205'
op|':'
string|'"Invalid user"'
op|','
nl|'\n'
number|'206'
op|':'
string|'"Domain name missing"'
op|','
nl|'\n'
number|'207'
op|':'
string|'"Already logged in"'
op|','
nl|'\n'
number|'208'
op|':'
string|'"Invalid username"'
op|','
nl|'\n'
number|'209'
op|':'
string|'"Invalid screen name"'
op|','
nl|'\n'
number|'210'
op|':'
string|'"User list full"'
op|','
nl|'\n'
number|'215'
op|':'
string|'"User already there"'
op|','
nl|'\n'
number|'216'
op|':'
string|'"User already on list"'
op|','
nl|'\n'
number|'217'
op|':'
string|'"User not online"'
op|','
nl|'\n'
number|'218'
op|':'
string|'"Already in mode"'
op|','
nl|'\n'
number|'219'
op|':'
string|'"User is in the opposite list"'
op|','
nl|'\n'
number|'223'
op|':'
string|'"Too many groups"'
op|','
nl|'\n'
number|'224'
op|':'
string|'"Invalid group"'
op|','
nl|'\n'
number|'225'
op|':'
string|'"User not in group"'
op|','
nl|'\n'
number|'229'
op|':'
string|'"Group name too long"'
op|','
nl|'\n'
number|'230'
op|':'
string|'"Cannot remove group 0"'
op|','
nl|'\n'
number|'231'
op|':'
string|'"Invalid group"'
op|','
nl|'\n'
number|'280'
op|':'
string|'"Switchboard failed"'
op|','
nl|'\n'
number|'281'
op|':'
string|'"Transfer to switchboard failed"'
op|','
nl|'\n'
nl|'\n'
number|'300'
op|':'
string|'"Required field missing"'
op|','
nl|'\n'
number|'301'
op|':'
string|'"Too many FND responses"'
op|','
nl|'\n'
number|'302'
op|':'
string|'"Not logged in"'
op|','
nl|'\n'
nl|'\n'
number|'500'
op|':'
string|'"Internal server error"'
op|','
nl|'\n'
number|'501'
op|':'
string|'"Database server error"'
op|','
nl|'\n'
number|'502'
op|':'
string|'"Command disabled"'
op|','
nl|'\n'
number|'510'
op|':'
string|'"File operation failed"'
op|','
nl|'\n'
number|'520'
op|':'
string|'"Memory allocation failed"'
op|','
nl|'\n'
number|'540'
op|':'
string|'"Wrong CHL value sent to server"'
op|','
nl|'\n'
nl|'\n'
number|'600'
op|':'
string|'"Server is busy"'
op|','
nl|'\n'
number|'601'
op|':'
string|'"Server is unavaliable"'
op|','
nl|'\n'
number|'602'
op|':'
string|'"Peer nameserver is down"'
op|','
nl|'\n'
number|'603'
op|':'
string|'"Database connection failed"'
op|','
nl|'\n'
number|'604'
op|':'
string|'"Server is going down"'
op|','
nl|'\n'
number|'605'
op|':'
string|'"Server unavailable"'
op|','
nl|'\n'
nl|'\n'
number|'707'
op|':'
string|'"Could not create connection"'
op|','
nl|'\n'
number|'710'
op|':'
string|'"Invalid CVR parameters"'
op|','
nl|'\n'
number|'711'
op|':'
string|'"Write is blocking"'
op|','
nl|'\n'
number|'712'
op|':'
string|'"Session is overloaded"'
op|','
nl|'\n'
number|'713'
op|':'
string|'"Too many active users"'
op|','
nl|'\n'
number|'714'
op|':'
string|'"Too many sessions"'
op|','
nl|'\n'
number|'715'
op|':'
string|'"Not expected"'
op|','
nl|'\n'
number|'717'
op|':'
string|'"Bad friend file"'
op|','
nl|'\n'
number|'731'
op|':'
string|'"Not expected"'
op|','
nl|'\n'
nl|'\n'
number|'800'
op|':'
string|'"Requests too rapid"'
op|','
nl|'\n'
nl|'\n'
number|'910'
op|':'
string|'"Server too busy"'
op|','
nl|'\n'
number|'911'
op|':'
string|'"Authentication failed"'
op|','
nl|'\n'
number|'912'
op|':'
string|'"Server too busy"'
op|','
nl|'\n'
number|'913'
op|':'
string|'"Not allowed when offline"'
op|','
nl|'\n'
number|'914'
op|':'
string|'"Server too busy"'
op|','
nl|'\n'
number|'915'
op|':'
string|'"Server too busy"'
op|','
nl|'\n'
number|'916'
op|':'
string|'"Server too busy"'
op|','
nl|'\n'
number|'917'
op|':'
string|'"Server too busy"'
op|','
nl|'\n'
number|'918'
op|':'
string|'"Server too busy"'
op|','
nl|'\n'
number|'919'
op|':'
string|'"Server too busy"'
op|','
nl|'\n'
number|'920'
op|':'
string|'"Not accepting new users"'
op|','
nl|'\n'
number|'921'
op|':'
string|'"Server too busy"'
op|','
nl|'\n'
number|'922'
op|':'
string|'"Server too busy"'
op|','
nl|'\n'
number|'923'
op|':'
string|'"No parent consent"'
op|','
nl|'\n'
number|'924'
op|':'
string|'"Passport account not yet verified"'
nl|'\n'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# mapping of status codes to readable status format'
nl|'\n'
DECL|variable|statusCodes
name|'statusCodes'
op|'='
op|'{'
nl|'\n'
nl|'\n'
name|'STATUS_ONLINE'
op|':'
string|'"Online"'
op|','
nl|'\n'
name|'STATUS_OFFLINE'
op|':'
string|'"Offline"'
op|','
nl|'\n'
name|'STATUS_HIDDEN'
op|':'
string|'"Appear Offline"'
op|','
nl|'\n'
name|'STATUS_IDLE'
op|':'
string|'"Idle"'
op|','
nl|'\n'
name|'STATUS_AWAY'
op|':'
string|'"Away"'
op|','
nl|'\n'
name|'STATUS_BUSY'
op|':'
string|'"Busy"'
op|','
nl|'\n'
name|'STATUS_BRB'
op|':'
string|'"Be Right Back"'
op|','
nl|'\n'
name|'STATUS_PHONE'
op|':'
string|'"On the Phone"'
op|','
nl|'\n'
name|'STATUS_LUNCH'
op|':'
string|'"Out to Lunch"'
nl|'\n'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# mapping of list ids to list codes'
nl|'\n'
DECL|variable|listIDToCode
name|'listIDToCode'
op|'='
op|'{'
nl|'\n'
nl|'\n'
name|'FORWARD_LIST'
op|':'
string|"'fl'"
op|','
nl|'\n'
name|'BLOCK_LIST'
op|':'
string|"'bl'"
op|','
nl|'\n'
name|'ALLOW_LIST'
op|':'
string|"'al'"
op|','
nl|'\n'
name|'REVERSE_LIST'
op|':'
string|"'rl'"
nl|'\n'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# mapping of list codes to list ids'
nl|'\n'
DECL|variable|listCodeToID
name|'listCodeToID'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'id'
op|','
name|'code'
name|'in'
name|'listIDToCode'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'listCodeToID'
op|'['
name|'code'
op|']'
op|'='
name|'id'
newline|'\n'
nl|'\n'
dedent|''
name|'del'
name|'id'
op|','
name|'code'
newline|'\n'
nl|'\n'
comment|'# Mapping of class GUIDs to simple english names'
nl|'\n'
DECL|variable|guidToClassName
name|'guidToClassName'
op|'='
op|'{'
nl|'\n'
string|'"{5D3E02AB-6190-11d3-BBBB-00C04F795683}"'
op|':'
string|'"file transfer"'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Reverse of the above'
nl|'\n'
DECL|variable|classNameToGUID
name|'classNameToGUID'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'guid'
op|','
name|'name'
name|'in'
name|'guidToClassName'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'classNameToGUID'
op|'['
name|'name'
op|']'
op|'='
name|'guid'
newline|'\n'
dedent|''
endmarker|''
end_unit

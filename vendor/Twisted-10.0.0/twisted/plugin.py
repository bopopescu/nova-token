begin_unit
comment|'# -*- test-case-name: twisted.test.test_plugin -*-'
nl|'\n'
comment|'# Copyright (c) 2005 Divmod, Inc.'
nl|'\n'
comment|'# Copyright (c) 2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nPlugin system for Twisted.\n\n@author: Jp Calderone\n@author: Glyph Lefkowitz\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'Interface'
op|','
name|'providedBy'
newline|'\n'
nl|'\n'
DECL|function|_determinePickleModule
name|'def'
name|'_determinePickleModule'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Determine which \'pickle\' API module to use.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'cPickle'
newline|'\n'
name|'return'
name|'cPickle'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'pickle'
newline|'\n'
name|'return'
name|'pickle'
newline|'\n'
nl|'\n'
DECL|variable|pickle
dedent|''
dedent|''
name|'pickle'
op|'='
name|'_determinePickleModule'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'components'
name|'import'
name|'getAdapterFactory'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'reflect'
name|'import'
name|'namedAny'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'modules'
name|'import'
name|'getModule'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPlugin
name|'class'
name|'IPlugin'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Interface that must be implemented by all plugins.\n\n    Only objects which implement this interface will be considered for return\n    by C{getPlugins}.  To be useful, plugins should also implement some other\n    application-specific interface.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CachedPlugin
dedent|''
name|'class'
name|'CachedPlugin'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'dropin'
op|','
name|'name'
op|','
name|'description'
op|','
name|'provided'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'dropin'
op|'='
name|'dropin'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'description'
op|'='
name|'description'
newline|'\n'
name|'self'
op|'.'
name|'provided'
op|'='
name|'provided'
newline|'\n'
name|'self'
op|'.'
name|'dropin'
op|'.'
name|'plugins'
op|'.'
name|'append'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<CachedPlugin %r/%r (provides %r)>'"
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'dropin'
op|'.'
name|'moduleName'
op|','
nl|'\n'
string|"', '"
op|'.'
name|'join'
op|'('
op|'['
name|'i'
op|'.'
name|'__name__'
name|'for'
name|'i'
name|'in'
name|'self'
op|'.'
name|'provided'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|load
dedent|''
name|'def'
name|'load'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'namedAny'
op|'('
name|'self'
op|'.'
name|'dropin'
op|'.'
name|'moduleName'
op|'+'
string|"'.'"
op|'+'
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__conform__
dedent|''
name|'def'
name|'__conform__'
op|'('
name|'self'
op|','
name|'interface'
op|','
name|'registry'
op|'='
name|'None'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'providedInterface'
name|'in'
name|'self'
op|'.'
name|'provided'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'providedInterface'
op|'.'
name|'isOrExtends'
op|'('
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'load'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'getAdapterFactory'
op|'('
name|'providedInterface'
op|','
name|'interface'
op|','
name|'None'
op|')'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'interface'
op|'('
name|'self'
op|'.'
name|'load'
op|'('
op|')'
op|','
name|'default'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'default'
newline|'\n'
nl|'\n'
comment|'# backwards compat HOORJ'
nl|'\n'
DECL|variable|getComponent
dedent|''
name|'getComponent'
op|'='
name|'__conform__'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CachedDropin
dedent|''
name|'class'
name|'CachedDropin'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A collection of L{CachedPlugin} instances from a particular module in a\n    plugin package.\n\n    @type moduleName: C{str}\n    @ivar moduleName: The fully qualified name of the plugin module this\n        represents.\n\n    @type description: C{str} or C{NoneType}\n    @ivar description: A brief explanation of this collection of plugins\n        (probably the plugin module\'s docstring).\n\n    @type plugins: C{list}\n    @ivar plugins: The L{CachedPlugin} instances which were loaded from this\n        dropin.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'moduleName'
op|','
name|'description'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'moduleName'
op|'='
name|'moduleName'
newline|'\n'
name|'self'
op|'.'
name|'description'
op|'='
name|'description'
newline|'\n'
name|'self'
op|'.'
name|'plugins'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_generateCacheEntry
dedent|''
dedent|''
name|'def'
name|'_generateCacheEntry'
op|'('
name|'provider'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'dropin'
op|'='
name|'CachedDropin'
op|'('
name|'provider'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'provider'
op|'.'
name|'__doc__'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'provider'
op|'.'
name|'__dict__'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'plugin'
op|'='
name|'IPlugin'
op|'('
name|'v'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'plugin'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'cachedPlugin'
op|'='
name|'CachedPlugin'
op|'('
name|'dropin'
op|','
name|'k'
op|','
name|'v'
op|'.'
name|'__doc__'
op|','
name|'list'
op|'('
name|'providedBy'
op|'('
name|'plugin'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'dropin'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
DECL|variable|fromkeys
indent|'    '
name|'fromkeys'
op|'='
name|'dict'
op|'.'
name|'fromkeys'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
DECL|function|fromkeys
indent|'    '
name|'def'
name|'fromkeys'
op|'('
name|'keys'
op|','
name|'value'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'k'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'['
name|'k'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|getCache
dedent|''
dedent|''
name|'def'
name|'getCache'
op|'('
name|'module'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Compute all the possible loadable plugins, while loading as few as\n    possible and hitting the filesystem as little as possible.\n\n    @param module: a Python module object.  This represents a package to search\n    for plugins.\n\n    @return: a dictionary mapping module names to CachedDropin instances.\n    """'
newline|'\n'
name|'allCachesCombined'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'mod'
op|'='
name|'getModule'
op|'('
name|'module'
op|'.'
name|'__name__'
op|')'
newline|'\n'
comment|"# don't want to walk deep, only immediate children."
nl|'\n'
name|'lastPath'
op|'='
name|'None'
newline|'\n'
name|'buckets'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|"# Fill buckets with modules by related entry on the given package's"
nl|'\n'
comment|"# __path__.  There's an abstraction inversion going on here, because this"
nl|'\n'
comment|'# information is already represented internally in twisted.python.modules,'
nl|'\n'
comment|"# but it's simple enough that I'm willing to live with it.  If anyone else"
nl|'\n'
comment|"# wants to fix up this iteration so that it's one path segment at a time,"
nl|'\n'
comment|'# be my guest.  --glyph'
nl|'\n'
name|'for'
name|'plugmod'
name|'in'
name|'mod'
op|'.'
name|'iterModules'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fpp'
op|'='
name|'plugmod'
op|'.'
name|'filePath'
op|'.'
name|'parent'
op|'('
op|')'
newline|'\n'
name|'if'
name|'fpp'
name|'not'
name|'in'
name|'buckets'
op|':'
newline|'\n'
indent|'            '
name|'buckets'
op|'['
name|'fpp'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'bucket'
op|'='
name|'buckets'
op|'['
name|'fpp'
op|']'
newline|'\n'
name|'bucket'
op|'.'
name|'append'
op|'('
name|'plugmod'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'pseudoPackagePath'
op|','
name|'bucket'
name|'in'
name|'buckets'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dropinPath'
op|'='
name|'pseudoPackagePath'
op|'.'
name|'child'
op|'('
string|"'dropin.cache'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'lastCached'
op|'='
name|'dropinPath'
op|'.'
name|'getModificationTime'
op|'('
op|')'
newline|'\n'
name|'dropinDotCache'
op|'='
name|'pickle'
op|'.'
name|'load'
op|'('
name|'dropinPath'
op|'.'
name|'open'
op|'('
string|"'rb'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'dropinDotCache'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'lastCached'
op|'='
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'needsWrite'
op|'='
name|'False'
newline|'\n'
name|'existingKeys'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'pluginModule'
name|'in'
name|'bucket'
op|':'
newline|'\n'
indent|'            '
name|'pluginKey'
op|'='
name|'pluginModule'
op|'.'
name|'name'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'existingKeys'
op|'['
name|'pluginKey'
op|']'
op|'='
name|'True'
newline|'\n'
name|'if'
op|'('
op|'('
name|'pluginKey'
name|'not'
name|'in'
name|'dropinDotCache'
op|')'
name|'or'
nl|'\n'
op|'('
name|'pluginModule'
op|'.'
name|'filePath'
op|'.'
name|'getModificationTime'
op|'('
op|')'
op|'>='
name|'lastCached'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'needsWrite'
op|'='
name|'True'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'provider'
op|'='
name|'pluginModule'
op|'.'
name|'load'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
comment|'# dropinDotCache.pop(pluginKey, None)'
nl|'\n'
indent|'                    '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'entry'
op|'='
name|'_generateCacheEntry'
op|'('
name|'provider'
op|')'
newline|'\n'
name|'dropinDotCache'
op|'['
name|'pluginKey'
op|']'
op|'='
name|'entry'
newline|'\n'
comment|"# Make sure that the cache doesn't contain any stale plugins."
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'for'
name|'pluginKey'
name|'in'
name|'dropinDotCache'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'pluginKey'
name|'not'
name|'in'
name|'existingKeys'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'dropinDotCache'
op|'['
name|'pluginKey'
op|']'
newline|'\n'
name|'needsWrite'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'needsWrite'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'dropinPath'
op|'.'
name|'setContent'
op|'('
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'dropinDotCache'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'allCachesCombined'
op|'.'
name|'update'
op|'('
name|'dropinDotCache'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'allCachesCombined'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|getPlugins
dedent|''
name|'def'
name|'getPlugins'
op|'('
name|'interface'
op|','
name|'package'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Retrieve all plugins implementing the given interface beneath the given module.\n\n    @param interface: An interface class.  Only plugins which implement this\n    interface will be returned.\n\n    @param package: A package beneath which plugins are installed.  For\n    most uses, the default value is correct.\n\n    @return: An iterator of plugins.\n    """'
newline|'\n'
name|'if'
name|'package'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'twisted'
op|'.'
name|'plugins'
name|'as'
name|'package'
newline|'\n'
dedent|''
name|'allDropins'
op|'='
name|'getCache'
op|'('
name|'package'
op|')'
newline|'\n'
name|'for'
name|'dropin'
name|'in'
name|'allDropins'
op|'.'
name|'itervalues'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'plugin'
name|'in'
name|'dropin'
op|'.'
name|'plugins'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'adapted'
op|'='
name|'interface'
op|'('
name|'plugin'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'err'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'adapted'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'adapted'
newline|'\n'
nl|'\n'
nl|'\n'
comment|"# Old, backwards compatible name.  Don't use this."
nl|'\n'
DECL|variable|getPlugIns
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'getPlugIns'
op|'='
name|'getPlugins'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|pluginPackagePaths
name|'def'
name|'pluginPackagePaths'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return a list of additional directories which should be searched for\n    modules to be included as part of the named plugin package.\n\n    @type name: C{str}\n    @param name: The fully-qualified Python name of a plugin package, eg\n        C{\'twisted.plugins\'}.\n\n    @rtype: C{list} of C{str}\n    @return: The absolute paths to other directories which may contain plugin\n        modules for the named plugin package.\n    """'
newline|'\n'
name|'package'
op|'='
name|'name'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
comment|'# Note that this may include directories which do not exist.  It may be'
nl|'\n'
comment|'# preferable to remove such directories at this point, rather than allow'
nl|'\n'
comment|'# them to be searched later on.'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# Note as well that only '__init__.py' will be considered to make a"
nl|'\n'
comment|'# directory a package (and thus exclude it from this list).  This means'
nl|'\n'
comment|'# that if you create a master plugin package which has some other kind of'
nl|'\n'
comment|'# __init__ (eg, __init__.pyc) it will be incorrectly treated as a'
nl|'\n'
comment|'# supplementary plugin directory.'
nl|'\n'
name|'return'
op|'['
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'x'
op|','
op|'*'
name|'package'
op|')'
op|')'
nl|'\n'
name|'for'
name|'x'
nl|'\n'
name|'in'
name|'sys'
op|'.'
name|'path'
nl|'\n'
name|'if'
nl|'\n'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'x'
op|','
op|'*'
name|'package'
op|'+'
op|'['
string|"'__init__.py'"
op|']'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|__all__
dedent|''
name|'__all__'
op|'='
op|'['
string|"'getPlugins'"
op|','
string|"'pluginPackagePaths'"
op|']'
newline|'\n'
endmarker|''
end_unit

begin_unit
comment|'# -*- test-case-name: twisted.test.test_explorer -*-'
nl|'\n'
comment|'# $Id: explorer.py,v 1.6 2003/02/18 21:15:30 acapnotic Exp $'
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""Support for python object introspection and exploration.\n\nNote that Explorers, what with their list of attributes, are much like\nmanhole.coil.Configurables.  Someone should investigate this further. (TODO)\n\nAlso TODO: Determine how much code in here (particularly the function\nsignature stuff) can be replaced with functions available in the\nL{inspect} module available in Python 2.1.\n"""'
newline|'\n'
nl|'\n'
comment|'# System Imports'
nl|'\n'
name|'import'
name|'inspect'
op|','
name|'new'
op|','
name|'string'
op|','
name|'sys'
op|','
name|'types'
newline|'\n'
name|'import'
name|'UserDict'
newline|'\n'
nl|'\n'
comment|'# Twisted Imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
name|'import'
name|'pb'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'reflect'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|True
name|'True'
op|'='
op|'('
number|'1'
op|'=='
number|'1'
op|')'
newline|'\n'
DECL|variable|False
name|'False'
op|'='
name|'not'
name|'True'
newline|'\n'
nl|'\n'
DECL|class|Pool
name|'class'
name|'Pool'
op|'('
name|'UserDict'
op|'.'
name|'UserDict'
op|')'
op|':'
newline|'\n'
DECL|member|getExplorer
indent|'    '
name|'def'
name|'getExplorer'
op|'('
name|'self'
op|','
name|'object'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'oid'
op|'='
name|'id'
op|'('
name|'object'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'data'
op|'.'
name|'has_key'
op|'('
name|'oid'
op|')'
op|':'
newline|'\n'
comment|'# XXX: This potentially returns something with'
nl|'\n'
comment|"# 'identifier' set to a different value."
nl|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'data'
op|'['
name|'oid'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'klass'
op|'='
name|'typeTable'
op|'.'
name|'get'
op|'('
name|'type'
op|'('
name|'object'
op|')'
op|','
name|'ExplorerGeneric'
op|')'
newline|'\n'
name|'e'
op|'='
name|'new'
op|'.'
name|'instance'
op|'('
name|'klass'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'['
name|'oid'
op|']'
op|'='
name|'e'
newline|'\n'
name|'klass'
op|'.'
name|'__init__'
op|'('
name|'e'
op|','
name|'object'
op|','
name|'identifier'
op|')'
newline|'\n'
name|'return'
name|'e'
newline|'\n'
nl|'\n'
DECL|variable|explorerPool
dedent|''
dedent|''
dedent|''
name|'explorerPool'
op|'='
name|'Pool'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|Explorer
name|'class'
name|'Explorer'
op|'('
name|'pb'
op|'.'
name|'Cacheable'
op|')'
op|':'
newline|'\n'
DECL|variable|properties
indent|'    '
name|'properties'
op|'='
op|'['
string|'"id"'
op|','
string|'"identifier"'
op|']'
newline|'\n'
DECL|variable|attributeGroups
name|'attributeGroups'
op|'='
op|'['
op|']'
newline|'\n'
DECL|variable|accessors
name|'accessors'
op|'='
op|'['
string|'"get_refcount"'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|id
name|'id'
op|'='
name|'None'
newline|'\n'
DECL|variable|identifier
name|'identifier'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'object'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'object'
op|'='
name|'object'
newline|'\n'
name|'self'
op|'.'
name|'identifier'
op|'='
name|'identifier'
newline|'\n'
name|'self'
op|'.'
name|'id'
op|'='
name|'id'
op|'('
name|'object'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'properties'
op|'='
op|'['
op|']'
newline|'\n'
name|'reflect'
op|'.'
name|'accumulateClassList'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
string|"'properties'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'properties'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'attributeGroups'
op|'='
op|'['
op|']'
newline|'\n'
name|'reflect'
op|'.'
name|'accumulateClassList'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
string|"'attributeGroups'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'attributeGroups'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'accessors'
op|'='
op|'['
op|']'
newline|'\n'
name|'reflect'
op|'.'
name|'accumulateClassList'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
string|"'accessors'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'accessors'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getStateToCopyFor
dedent|''
name|'def'
name|'getStateToCopyFor'
op|'('
name|'self'
op|','
name|'perspective'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'all'
op|'='
op|'['
string|'"properties"'
op|','
string|'"attributeGroups"'
op|','
string|'"accessors"'
op|']'
newline|'\n'
name|'all'
op|'.'
name|'extend'
op|'('
name|'self'
op|'.'
name|'properties'
op|')'
newline|'\n'
name|'all'
op|'.'
name|'extend'
op|'('
name|'self'
op|'.'
name|'attributeGroups'
op|')'
newline|'\n'
nl|'\n'
name|'state'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'all'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'['
name|'key'
op|']'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'state'
op|'['
string|"'view'"
op|']'
op|'='
name|'pb'
op|'.'
name|'ViewPoint'
op|'('
name|'perspective'
op|','
name|'self'
op|')'
newline|'\n'
name|'state'
op|'['
string|"'explorerClass'"
op|']'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
newline|'\n'
name|'return'
name|'state'
newline|'\n'
nl|'\n'
DECL|member|view_get_refcount
dedent|''
name|'def'
name|'view_get_refcount'
op|'('
name|'self'
op|','
name|'perspective'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'sys'
op|'.'
name|'getrefcount'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ExplorerGeneric
dedent|''
dedent|''
name|'class'
name|'ExplorerGeneric'
op|'('
name|'Explorer'
op|')'
op|':'
newline|'\n'
DECL|variable|properties
indent|'    '
name|'properties'
op|'='
op|'['
string|'"str"'
op|','
string|'"repr"'
op|','
string|'"typename"'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'object'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Explorer'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'object'
op|','
name|'identifier'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'str'
op|'='
name|'str'
op|'('
name|'object'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'repr'
op|'='
name|'repr'
op|'('
name|'object'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'typename'
op|'='
name|'type'
op|'('
name|'object'
op|')'
op|'.'
name|'__name__'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExplorerImmutable
dedent|''
dedent|''
name|'class'
name|'ExplorerImmutable'
op|'('
name|'Explorer'
op|')'
op|':'
newline|'\n'
DECL|variable|properties
indent|'    '
name|'properties'
op|'='
op|'['
string|'"value"'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'object'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Explorer'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'object'
op|','
name|'identifier'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'value'
op|'='
name|'object'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExplorerSequence
dedent|''
dedent|''
name|'class'
name|'ExplorerSequence'
op|'('
name|'Explorer'
op|')'
op|':'
newline|'\n'
DECL|variable|properties
indent|'    '
name|'properties'
op|'='
op|'['
string|'"len"'
op|']'
newline|'\n'
DECL|variable|attributeGroups
name|'attributeGroups'
op|'='
op|'['
string|'"elements"'
op|']'
newline|'\n'
DECL|variable|accessors
name|'accessors'
op|'='
op|'['
string|'"get_elements"'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'seq'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Explorer'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'seq'
op|','
name|'identifier'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'seq'
op|'='
name|'seq'
newline|'\n'
name|'self'
op|'.'
name|'len'
op|'='
name|'len'
op|'('
name|'seq'
op|')'
newline|'\n'
nl|'\n'
comment|'# Use accessor method to fill me in.'
nl|'\n'
name|'self'
op|'.'
name|'elements'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_elements
dedent|''
name|'def'
name|'get_elements'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'len'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'seq'
op|')'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'self'
op|'.'
name|'len'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'identifier'
op|'='
string|'"%s[%s]"'
op|'%'
op|'('
name|'self'
op|'.'
name|'identifier'
op|','
name|'i'
op|')'
newline|'\n'
nl|'\n'
comment|'# GLOBAL: using global explorerPool'
nl|'\n'
name|'l'
op|'.'
name|'append'
op|'('
name|'explorerPool'
op|'.'
name|'getExplorer'
op|'('
name|'self'
op|'.'
name|'seq'
op|'['
name|'i'
op|']'
op|','
name|'identifier'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'l'
newline|'\n'
nl|'\n'
DECL|member|view_get_elements
dedent|''
name|'def'
name|'view_get_elements'
op|'('
name|'self'
op|','
name|'perspective'
op|')'
op|':'
newline|'\n'
comment|'# XXX: set the .elements member of all my remoteCaches'
nl|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'get_elements'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExplorerMapping
dedent|''
dedent|''
name|'class'
name|'ExplorerMapping'
op|'('
name|'Explorer'
op|')'
op|':'
newline|'\n'
DECL|variable|properties
indent|'    '
name|'properties'
op|'='
op|'['
string|'"len"'
op|']'
newline|'\n'
DECL|variable|attributeGroups
name|'attributeGroups'
op|'='
op|'['
string|'"keys"'
op|']'
newline|'\n'
DECL|variable|accessors
name|'accessors'
op|'='
op|'['
string|'"get_keys"'
op|','
string|'"get_item"'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'dct'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Explorer'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'dct'
op|','
name|'identifier'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'dct'
op|'='
name|'dct'
newline|'\n'
name|'self'
op|'.'
name|'len'
op|'='
name|'len'
op|'('
name|'dct'
op|')'
newline|'\n'
nl|'\n'
comment|'# Use accessor method to fill me in.'
nl|'\n'
name|'self'
op|'.'
name|'keys'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_keys
dedent|''
name|'def'
name|'get_keys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'keys'
op|'='
name|'self'
op|'.'
name|'dct'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'len'
op|'='
name|'len'
op|'('
name|'keys'
op|')'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'self'
op|'.'
name|'len'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'identifier'
op|'='
string|'"%s.keys()[%s]"'
op|'%'
op|'('
name|'self'
op|'.'
name|'identifier'
op|','
name|'i'
op|')'
newline|'\n'
nl|'\n'
comment|'# GLOBAL: using global explorerPool'
nl|'\n'
name|'l'
op|'.'
name|'append'
op|'('
name|'explorerPool'
op|'.'
name|'getExplorer'
op|'('
name|'keys'
op|'['
name|'i'
op|']'
op|','
name|'identifier'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'l'
newline|'\n'
nl|'\n'
DECL|member|view_get_keys
dedent|''
name|'def'
name|'view_get_keys'
op|'('
name|'self'
op|','
name|'perspective'
op|')'
op|':'
newline|'\n'
comment|'# XXX: set the .keys member of all my remoteCaches'
nl|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'get_keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|view_get_item
dedent|''
name|'def'
name|'view_get_item'
op|'('
name|'self'
op|','
name|'perspective'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'type'
op|'('
name|'key'
op|')'
name|'is'
name|'types'
op|'.'
name|'InstanceType'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|'='
name|'key'
op|'.'
name|'object'
newline|'\n'
nl|'\n'
dedent|''
name|'item'
op|'='
name|'self'
op|'.'
name|'dct'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
name|'identifier'
op|'='
string|'"%s[%s]"'
op|'%'
op|'('
name|'self'
op|'.'
name|'identifier'
op|','
name|'repr'
op|'('
name|'key'
op|')'
op|')'
newline|'\n'
comment|'# GLOBAL: using global explorerPool'
nl|'\n'
name|'item'
op|'='
name|'explorerPool'
op|'.'
name|'getExplorer'
op|'('
name|'item'
op|','
name|'identifier'
op|')'
newline|'\n'
name|'return'
name|'item'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExplorerBuiltin
dedent|''
dedent|''
name|'class'
name|'ExplorerBuiltin'
op|'('
name|'Explorer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @ivar name: the name the function was defined as\n    @ivar doc: function\'s docstring, or C{None} if unavailable\n    @ivar self: if not C{None}, the function is a method of this object.\n    """'
newline|'\n'
DECL|variable|properties
name|'properties'
op|'='
op|'['
string|'"doc"'
op|','
string|'"name"'
op|','
string|'"self"'
op|']'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'function'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Explorer'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'function'
op|','
name|'identifier'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'doc'
op|'='
name|'function'
op|'.'
name|'__doc__'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'function'
op|'.'
name|'__name__'
newline|'\n'
name|'self'
op|'.'
name|'self'
op|'='
name|'function'
op|'.'
name|'__self__'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExplorerInstance
dedent|''
dedent|''
name|'class'
name|'ExplorerInstance'
op|'('
name|'Explorer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Attribute groups:\n        - B{methods} -- dictionary of methods\n        - B{data} -- dictionary of data members\n\n    Note these are only the *instance* methods and members --\n    if you want the class methods, you\'ll have to look up the class.\n\n    TODO: Detail levels (me, me & class, me & class ancestory)\n\n    @ivar klass: the class this is an instance of.\n    """'
newline|'\n'
DECL|variable|properties
name|'properties'
op|'='
op|'['
string|'"klass"'
op|']'
newline|'\n'
DECL|variable|attributeGroups
name|'attributeGroups'
op|'='
op|'['
string|'"methods"'
op|','
string|'"data"'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Explorer'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'identifier'
op|')'
newline|'\n'
name|'members'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'methods'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'dir'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
comment|'# TODO: Make screening of private attributes configurable.'
nl|'\n'
indent|'            '
name|'if'
name|'i'
op|'['
number|'0'
op|']'
op|'=='
string|"'_'"
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'mIdentifier'
op|'='
name|'string'
op|'.'
name|'join'
op|'('
op|'['
name|'identifier'
op|','
name|'i'
op|']'
op|','
string|'"."'
op|')'
newline|'\n'
name|'member'
op|'='
name|'getattr'
op|'('
name|'instance'
op|','
name|'i'
op|')'
newline|'\n'
name|'mType'
op|'='
name|'type'
op|'('
name|'member'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'mType'
name|'is'
name|'types'
op|'.'
name|'MethodType'
op|':'
newline|'\n'
indent|'                '
name|'methods'
op|'['
name|'i'
op|']'
op|'='
name|'explorerPool'
op|'.'
name|'getExplorer'
op|'('
name|'member'
op|','
name|'mIdentifier'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'members'
op|'['
name|'i'
op|']'
op|'='
name|'explorerPool'
op|'.'
name|'getExplorer'
op|'('
name|'member'
op|','
name|'mIdentifier'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'klass'
op|'='
name|'explorerPool'
op|'.'
name|'getExplorer'
op|'('
name|'instance'
op|'.'
name|'__class__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'identifier'
op|'+'
nl|'\n'
string|"'.__class__'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
name|'members'
newline|'\n'
name|'self'
op|'.'
name|'methods'
op|'='
name|'methods'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExplorerClass
dedent|''
dedent|''
name|'class'
name|'ExplorerClass'
op|'('
name|'Explorer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @ivar name: the name the class was defined with\n    @ivar doc: the class\'s docstring\n    @ivar bases: a list of this class\'s base classes.\n    @ivar module: the module the class is defined in\n\n    Attribute groups:\n        - B{methods} -- class methods\n        - B{data} -- other members of the class\n    """'
newline|'\n'
DECL|variable|properties
name|'properties'
op|'='
op|'['
string|'"name"'
op|','
string|'"doc"'
op|','
string|'"bases"'
op|','
string|'"module"'
op|']'
newline|'\n'
DECL|variable|attributeGroups
name|'attributeGroups'
op|'='
op|'['
string|'"methods"'
op|','
string|'"data"'
op|']'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'theClass'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Explorer'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'theClass'
op|','
name|'identifier'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'identifier'
op|':'
newline|'\n'
indent|'            '
name|'identifier'
op|'='
name|'theClass'
op|'.'
name|'__name__'
newline|'\n'
dedent|''
name|'members'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'methods'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'dir'
op|'('
name|'theClass'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'i'
op|'['
number|'0'
op|']'
op|'=='
string|"'_'"
op|')'
name|'and'
op|'('
name|'i'
op|'!='
string|"'__init__'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'mIdentifier'
op|'='
name|'string'
op|'.'
name|'join'
op|'('
op|'['
name|'identifier'
op|','
name|'i'
op|']'
op|','
string|'"."'
op|')'
newline|'\n'
name|'member'
op|'='
name|'getattr'
op|'('
name|'theClass'
op|','
name|'i'
op|')'
newline|'\n'
name|'mType'
op|'='
name|'type'
op|'('
name|'member'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'mType'
name|'is'
name|'types'
op|'.'
name|'MethodType'
op|':'
newline|'\n'
indent|'                '
name|'methods'
op|'['
name|'i'
op|']'
op|'='
name|'explorerPool'
op|'.'
name|'getExplorer'
op|'('
name|'member'
op|','
name|'mIdentifier'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'members'
op|'['
name|'i'
op|']'
op|'='
name|'explorerPool'
op|'.'
name|'getExplorer'
op|'('
name|'member'
op|','
name|'mIdentifier'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'name'
op|'='
name|'theClass'
op|'.'
name|'__name__'
newline|'\n'
name|'self'
op|'.'
name|'doc'
op|'='
name|'inspect'
op|'.'
name|'getdoc'
op|'('
name|'theClass'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
name|'members'
newline|'\n'
name|'self'
op|'.'
name|'methods'
op|'='
name|'methods'
newline|'\n'
name|'self'
op|'.'
name|'bases'
op|'='
name|'explorerPool'
op|'.'
name|'getExplorer'
op|'('
name|'theClass'
op|'.'
name|'__bases__'
op|','
nl|'\n'
name|'identifier'
op|'+'
string|'".__bases__"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'module'
op|'='
name|'getattr'
op|'('
name|'theClass'
op|','
string|"'__module__'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExplorerFunction
dedent|''
dedent|''
name|'class'
name|'ExplorerFunction'
op|'('
name|'Explorer'
op|')'
op|':'
newline|'\n'
DECL|variable|properties
indent|'    '
name|'properties'
op|'='
op|'['
string|'"name"'
op|','
string|'"doc"'
op|','
string|'"file"'
op|','
string|'"line"'
op|','
string|'"signature"'
op|']'
newline|'\n'
string|'"""\n        name -- the name the function was defined as\n        signature -- the function\'s calling signature (Signature instance)\n        doc -- the function\'s docstring\n        file -- the file the function is defined in\n        line -- the line in the file the function begins on\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'function'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Explorer'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'function'
op|','
name|'identifier'
op|')'
newline|'\n'
name|'code'
op|'='
name|'function'
op|'.'
name|'func_code'
newline|'\n'
name|'argcount'
op|'='
name|'code'
op|'.'
name|'co_argcount'
newline|'\n'
name|'takesList'
op|'='
op|'('
name|'code'
op|'.'
name|'co_flags'
op|'&'
number|'0x04'
op|')'
name|'and'
number|'1'
newline|'\n'
name|'takesKeywords'
op|'='
op|'('
name|'code'
op|'.'
name|'co_flags'
op|'&'
number|'0x08'
op|')'
name|'and'
number|'1'
newline|'\n'
nl|'\n'
name|'n'
op|'='
op|'('
name|'argcount'
op|'+'
name|'takesList'
op|'+'
name|'takesKeywords'
op|')'
newline|'\n'
name|'signature'
op|'='
name|'Signature'
op|'('
name|'code'
op|'.'
name|'co_varnames'
op|'['
op|':'
name|'n'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'function'
op|'.'
name|'func_defaults'
op|':'
newline|'\n'
indent|'            '
name|'i_d'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'argcount'
op|'-'
name|'len'
op|'('
name|'function'
op|'.'
name|'func_defaults'
op|')'
op|','
nl|'\n'
name|'argcount'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'default'
op|'='
name|'function'
op|'.'
name|'func_defaults'
op|'['
name|'i_d'
op|']'
newline|'\n'
name|'default'
op|'='
name|'explorerPool'
op|'.'
name|'getExplorer'
op|'('
nl|'\n'
name|'default'
op|','
string|"'%s.func_defaults[%d]'"
op|'%'
op|'('
name|'identifier'
op|','
name|'i_d'
op|')'
op|')'
newline|'\n'
name|'signature'
op|'.'
name|'set_default'
op|'('
name|'i'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
name|'i_d'
op|'='
name|'i_d'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'takesKeywords'
op|':'
newline|'\n'
indent|'            '
name|'signature'
op|'.'
name|'set_keyword'
op|'('
name|'n'
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'takesList'
op|':'
newline|'\n'
indent|'            '
name|'signature'
op|'.'
name|'set_varlist'
op|'('
name|'n'
op|'-'
number|'1'
op|'-'
name|'takesKeywords'
op|')'
newline|'\n'
nl|'\n'
comment|'# maybe also: function.func_globals,'
nl|'\n'
comment|'# or at least func_globals.__name__?'
nl|'\n'
comment|'# maybe the bytecode, for disassembly-view?'
nl|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'name'
op|'='
name|'function'
op|'.'
name|'__name__'
newline|'\n'
name|'self'
op|'.'
name|'signature'
op|'='
name|'signature'
newline|'\n'
name|'self'
op|'.'
name|'doc'
op|'='
name|'inspect'
op|'.'
name|'getdoc'
op|'('
name|'function'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'='
name|'code'
op|'.'
name|'co_filename'
newline|'\n'
name|'self'
op|'.'
name|'line'
op|'='
name|'code'
op|'.'
name|'co_firstlineno'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExplorerMethod
dedent|''
dedent|''
name|'class'
name|'ExplorerMethod'
op|'('
name|'ExplorerFunction'
op|')'
op|':'
newline|'\n'
DECL|variable|properties
indent|'    '
name|'properties'
op|'='
op|'['
string|'"self"'
op|','
string|'"klass"'
op|']'
newline|'\n'
string|'"""\n    In addition to ExplorerFunction properties:\n        self -- the object I am bound to, or None if unbound\n        klass -- the class I am a method of\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'function'
op|'='
name|'method'
op|'.'
name|'im_func'
newline|'\n'
name|'if'
name|'type'
op|'('
name|'function'
op|')'
name|'is'
name|'types'
op|'.'
name|'InstanceType'
op|':'
newline|'\n'
indent|'            '
name|'function'
op|'='
name|'function'
op|'.'
name|'__call__'
op|'.'
name|'im_func'
newline|'\n'
nl|'\n'
dedent|''
name|'ExplorerFunction'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'function'
op|','
name|'identifier'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'id'
op|'='
name|'id'
op|'('
name|'method'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'klass'
op|'='
name|'explorerPool'
op|'.'
name|'getExplorer'
op|'('
name|'method'
op|'.'
name|'im_class'
op|','
nl|'\n'
name|'identifier'
op|'+'
string|"'.im_class'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'self'
op|'='
name|'explorerPool'
op|'.'
name|'getExplorer'
op|'('
name|'method'
op|'.'
name|'im_self'
op|','
nl|'\n'
name|'identifier'
op|'+'
string|"'.im_self'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'method'
op|'.'
name|'im_self'
op|':'
newline|'\n'
comment|"# I'm a bound method -- eat the 'self' arg."
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'signature'
op|'.'
name|'discardSelf'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExplorerModule
dedent|''
dedent|''
dedent|''
name|'class'
name|'ExplorerModule'
op|'('
name|'Explorer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @ivar name: the name the module was defined as\n    @ivar doc: documentation string for the module\n    @ivar file: the file the module is defined in\n\n    Attribute groups:\n        - B{classes} -- the public classes provided by the module\n        - B{functions} -- the public functions provided by the module\n        - B{data} -- the public data members provided by the module\n\n    (\\"Public\\" is taken to be \\"anything that doesn\'t start with _\\")\n    """'
newline|'\n'
DECL|variable|properties
name|'properties'
op|'='
op|'['
string|'"name"'
op|','
string|'"doc"'
op|','
string|'"file"'
op|']'
newline|'\n'
DECL|variable|attributeGroups
name|'attributeGroups'
op|'='
op|'['
string|'"classes"'
op|','
string|'"functions"'
op|','
string|'"data"'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'module'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Explorer'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'module'
op|','
name|'identifier'
op|')'
newline|'\n'
name|'functions'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'classes'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'module'
op|'.'
name|'__dict__'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'key'
op|'['
number|'0'
op|']'
op|'=='
string|"'_'"
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'mIdentifier'
op|'='
string|'"%s.%s"'
op|'%'
op|'('
name|'identifier'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'type'
op|'('
name|'value'
op|')'
name|'is'
name|'types'
op|'.'
name|'ClassType'
op|':'
newline|'\n'
indent|'                '
name|'classes'
op|'['
name|'key'
op|']'
op|'='
name|'explorerPool'
op|'.'
name|'getExplorer'
op|'('
name|'value'
op|','
nl|'\n'
name|'mIdentifier'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'type'
op|'('
name|'value'
op|')'
name|'is'
name|'types'
op|'.'
name|'FunctionType'
op|':'
newline|'\n'
indent|'                '
name|'functions'
op|'['
name|'key'
op|']'
op|'='
name|'explorerPool'
op|'.'
name|'getExplorer'
op|'('
name|'value'
op|','
nl|'\n'
name|'mIdentifier'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'type'
op|'('
name|'value'
op|')'
name|'is'
name|'types'
op|'.'
name|'ModuleType'
op|':'
newline|'\n'
indent|'                '
name|'pass'
comment|'# pass on imported modules'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'data'
op|'['
name|'key'
op|']'
op|'='
name|'explorerPool'
op|'.'
name|'getExplorer'
op|'('
name|'value'
op|','
name|'mIdentifier'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'name'
op|'='
name|'module'
op|'.'
name|'__name__'
newline|'\n'
name|'self'
op|'.'
name|'doc'
op|'='
name|'inspect'
op|'.'
name|'getdoc'
op|'('
name|'module'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'='
name|'getattr'
op|'('
name|'module'
op|','
string|"'__file__'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'classes'
op|'='
name|'classes'
newline|'\n'
name|'self'
op|'.'
name|'functions'
op|'='
name|'functions'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
name|'data'
newline|'\n'
nl|'\n'
DECL|variable|typeTable
dedent|''
dedent|''
name|'typeTable'
op|'='
op|'{'
name|'types'
op|'.'
name|'InstanceType'
op|':'
name|'ExplorerInstance'
op|','
nl|'\n'
name|'types'
op|'.'
name|'ClassType'
op|':'
name|'ExplorerClass'
op|','
nl|'\n'
name|'types'
op|'.'
name|'MethodType'
op|':'
name|'ExplorerMethod'
op|','
nl|'\n'
name|'types'
op|'.'
name|'FunctionType'
op|':'
name|'ExplorerFunction'
op|','
nl|'\n'
name|'types'
op|'.'
name|'ModuleType'
op|':'
name|'ExplorerModule'
op|','
nl|'\n'
name|'types'
op|'.'
name|'BuiltinFunctionType'
op|':'
name|'ExplorerBuiltin'
op|','
nl|'\n'
name|'types'
op|'.'
name|'ListType'
op|':'
name|'ExplorerSequence'
op|','
nl|'\n'
name|'types'
op|'.'
name|'TupleType'
op|':'
name|'ExplorerSequence'
op|','
nl|'\n'
name|'types'
op|'.'
name|'DictType'
op|':'
name|'ExplorerMapping'
op|','
nl|'\n'
name|'types'
op|'.'
name|'StringType'
op|':'
name|'ExplorerImmutable'
op|','
nl|'\n'
name|'types'
op|'.'
name|'NoneType'
op|':'
name|'ExplorerImmutable'
op|','
nl|'\n'
name|'types'
op|'.'
name|'IntType'
op|':'
name|'ExplorerImmutable'
op|','
nl|'\n'
name|'types'
op|'.'
name|'FloatType'
op|':'
name|'ExplorerImmutable'
op|','
nl|'\n'
name|'types'
op|'.'
name|'LongType'
op|':'
name|'ExplorerImmutable'
op|','
nl|'\n'
name|'types'
op|'.'
name|'ComplexType'
op|':'
name|'ExplorerImmutable'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|class|Signature
name|'class'
name|'Signature'
op|'('
name|'pb'
op|'.'
name|'Copyable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""I represent the signature of a callable.\n\n    Signatures are immutable, so don\'t expect my contents to change once\n    they\'ve been set.\n    """'
newline|'\n'
DECL|variable|_FLAVOURLESS
name|'_FLAVOURLESS'
op|'='
name|'None'
newline|'\n'
DECL|variable|_HAS_DEFAULT
name|'_HAS_DEFAULT'
op|'='
number|'2'
newline|'\n'
DECL|variable|_VAR_LIST
name|'_VAR_LIST'
op|'='
number|'4'
newline|'\n'
DECL|variable|_KEYWORD_DICT
name|'_KEYWORD_DICT'
op|'='
number|'8'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'argNames'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'argNames'
newline|'\n'
name|'self'
op|'.'
name|'default'
op|'='
op|'['
name|'None'
op|']'
op|'*'
name|'len'
op|'('
name|'argNames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flavour'
op|'='
op|'['
name|'None'
op|']'
op|'*'
name|'len'
op|'('
name|'argNames'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_name
dedent|''
name|'def'
name|'get_name'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'name'
op|'['
name|'arg'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_default
dedent|''
name|'def'
name|'get_default'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'arg'
name|'is'
name|'types'
op|'.'
name|'StringType'
op|':'
newline|'\n'
indent|'            '
name|'arg'
op|'='
name|'self'
op|'.'
name|'name'
op|'.'
name|'index'
op|'('
name|'arg'
op|')'
newline|'\n'
nl|'\n'
comment|'# Wouldn\'t it be nice if we just returned "None" when there'
nl|'\n'
comment|'# wasn\'t a default?  Well, yes, but often times "None" *is*'
nl|'\n'
comment|'# the default, so return a tuple instead.'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'flavour'
op|'['
name|'arg'
op|']'
op|'=='
name|'self'
op|'.'
name|'_HAS_DEFAULT'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'True'
op|','
name|'self'
op|'.'
name|'default'
op|'['
name|'arg'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'False'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_default
dedent|''
dedent|''
name|'def'
name|'set_default'
op|'('
name|'self'
op|','
name|'arg'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'arg'
name|'is'
name|'types'
op|'.'
name|'StringType'
op|':'
newline|'\n'
indent|'            '
name|'arg'
op|'='
name|'self'
op|'.'
name|'name'
op|'.'
name|'index'
op|'('
name|'arg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'flavour'
op|'['
name|'arg'
op|']'
op|'='
name|'self'
op|'.'
name|'_HAS_DEFAULT'
newline|'\n'
name|'self'
op|'.'
name|'default'
op|'['
name|'arg'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|set_varlist
dedent|''
name|'def'
name|'set_varlist'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'arg'
name|'is'
name|'types'
op|'.'
name|'StringType'
op|':'
newline|'\n'
indent|'            '
name|'arg'
op|'='
name|'self'
op|'.'
name|'name'
op|'.'
name|'index'
op|'('
name|'arg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'flavour'
op|'['
name|'arg'
op|']'
op|'='
name|'self'
op|'.'
name|'_VAR_LIST'
newline|'\n'
nl|'\n'
DECL|member|set_keyword
dedent|''
name|'def'
name|'set_keyword'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'arg'
name|'is'
name|'types'
op|'.'
name|'StringType'
op|':'
newline|'\n'
indent|'            '
name|'arg'
op|'='
name|'self'
op|'.'
name|'name'
op|'.'
name|'index'
op|'('
name|'arg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'flavour'
op|'['
name|'arg'
op|']'
op|'='
name|'self'
op|'.'
name|'_KEYWORD_DICT'
newline|'\n'
nl|'\n'
DECL|member|is_varlist
dedent|''
name|'def'
name|'is_varlist'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'arg'
name|'is'
name|'types'
op|'.'
name|'StringType'
op|':'
newline|'\n'
indent|'            '
name|'arg'
op|'='
name|'self'
op|'.'
name|'name'
op|'.'
name|'index'
op|'('
name|'arg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'self'
op|'.'
name|'flavour'
op|'['
name|'arg'
op|']'
op|'=='
name|'self'
op|'.'
name|'_VAR_LIST'
op|')'
newline|'\n'
nl|'\n'
DECL|member|is_keyword
dedent|''
name|'def'
name|'is_keyword'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'arg'
name|'is'
name|'types'
op|'.'
name|'StringType'
op|':'
newline|'\n'
indent|'            '
name|'arg'
op|'='
name|'self'
op|'.'
name|'name'
op|'.'
name|'index'
op|'('
name|'arg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'self'
op|'.'
name|'flavour'
op|'['
name|'arg'
op|']'
op|'=='
name|'self'
op|'.'
name|'_KEYWORD_DICT'
op|')'
newline|'\n'
nl|'\n'
DECL|member|discardSelf
dedent|''
name|'def'
name|'discardSelf'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Invoke me to discard the first argument if this is a bound method.\n        """'
newline|'\n'
comment|"## if self.name[0] != 'self':"
nl|'\n'
comment|'##    log.msg("Warning: Told to discard self, but name is %s" %'
nl|'\n'
comment|'##            self.name[0])'
nl|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'self'
op|'.'
name|'name'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'default'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flavour'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getStateToCopy
dedent|''
name|'def'
name|'getStateToCopy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'name'"
op|':'
name|'tuple'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
op|','
nl|'\n'
string|"'flavour'"
op|':'
name|'tuple'
op|'('
name|'self'
op|'.'
name|'flavour'
op|')'
op|','
nl|'\n'
string|"'default'"
op|':'
name|'tuple'
op|'('
name|'self'
op|'.'
name|'default'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'arglist'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'arg'
name|'in'
name|'xrange'
op|'('
name|'len'
op|'('
name|'self'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'self'
op|'.'
name|'get_name'
op|'('
name|'arg'
op|')'
newline|'\n'
name|'hasDefault'
op|','
name|'default'
op|'='
name|'self'
op|'.'
name|'get_default'
op|'('
name|'arg'
op|')'
newline|'\n'
name|'if'
name|'hasDefault'
op|':'
newline|'\n'
indent|'                '
name|'a'
op|'='
string|'"%s=%s"'
op|'%'
op|'('
name|'name'
op|','
name|'default'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'is_varlist'
op|'('
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'a'
op|'='
string|'"*%s"'
op|'%'
op|'('
name|'name'
op|','
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'is_keyword'
op|'('
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'a'
op|'='
string|'"**%s"'
op|'%'
op|'('
name|'name'
op|','
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'a'
op|'='
name|'name'
newline|'\n'
dedent|''
name|'arglist'
op|'.'
name|'append'
op|'('
name|'a'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'string'
op|'.'
name|'join'
op|'('
name|'arglist'
op|','
string|'", "'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CRUFT_WatchyThingie
dedent|''
dedent|''
name|'class'
name|'CRUFT_WatchyThingie'
op|':'
newline|'\n'
comment|'# TODO:'
nl|'\n'
comment|'#'
nl|'\n'
comment|"#  * an exclude mechanism for the watcher's browser, to avoid"
nl|'\n'
comment|'#    sending back large and uninteresting data structures.'
nl|'\n'
comment|'#'
nl|'\n'
comment|"#  * an exclude mechanism for the watcher's trigger, to avoid"
nl|'\n'
comment|"#    triggering on some frequently-called-method-that-doesn't-"
nl|'\n'
comment|'#    actually-change-anything.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#  * XXX! need removeWatch()'
nl|'\n'
nl|'\n'
DECL|member|watchIdentifier
indent|'    '
name|'def'
name|'watchIdentifier'
op|'('
name|'self'
op|','
name|'identifier'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Watch the object returned by evaluating the identifier.\n\n        Whenever I think the object might have changed, I\'ll send an\n        ObjectLink of it to the callback.\n\n        WARNING: This calls eval() on its argument!\n        """'
newline|'\n'
name|'object'
op|'='
name|'eval'
op|'('
name|'identifier'
op|','
nl|'\n'
name|'self'
op|'.'
name|'globalNamespace'
op|','
nl|'\n'
name|'self'
op|'.'
name|'localNamespace'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'watchObject'
op|'('
name|'object'
op|','
name|'identifier'
op|','
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|watchObject
dedent|''
name|'def'
name|'watchObject'
op|'('
name|'self'
op|','
name|'object'
op|','
name|'identifier'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Watch the given object.\n\n        Whenever I think the object might have changed, I\'ll send an\n        ObjectLink of it to the callback.\n\n        The identifier argument is used to generate identifiers for\n        objects which are members of this one.\n        """'
newline|'\n'
name|'if'
name|'type'
op|'('
name|'object'
op|')'
name|'is'
name|'not'
name|'types'
op|'.'
name|'InstanceType'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|','
string|'"Sorry, can only place a watch on Instances."'
newline|'\n'
nl|'\n'
comment|'# uninstallers = []'
nl|'\n'
nl|'\n'
dedent|''
name|'dct'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'reflect'
op|'.'
name|'addMethodNamesToDict'
op|'('
name|'object'
op|'.'
name|'__class__'
op|','
name|'dct'
op|','
string|"''"
op|')'
newline|'\n'
name|'for'
name|'k'
name|'in'
name|'object'
op|'.'
name|'__dict__'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dct'
op|'['
name|'k'
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'members'
op|'='
name|'dct'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'clazzNS'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'clazz'
op|'='
name|'new'
op|'.'
name|'classobj'
op|'('
string|"'Watching%s%X'"
op|'%'
nl|'\n'
op|'('
name|'object'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
name|'id'
op|'('
name|'object'
op|')'
op|')'
op|','
nl|'\n'
op|'('
name|'_MonkeysSetattrMixin'
op|','
name|'object'
op|'.'
name|'__class__'
op|','
op|')'
op|','
nl|'\n'
name|'clazzNS'
op|')'
newline|'\n'
nl|'\n'
name|'clazzNS'
op|'['
string|"'_watchEmitChanged'"
op|']'
op|'='
name|'new'
op|'.'
name|'instancemethod'
op|'('
nl|'\n'
name|'lambda'
name|'slf'
op|','
name|'i'
op|'='
name|'identifier'
op|','
name|'b'
op|'='
name|'self'
op|','
name|'cb'
op|'='
name|'callback'
op|':'
nl|'\n'
name|'cb'
op|'('
name|'b'
op|'.'
name|'browseObject'
op|'('
name|'slf'
op|','
name|'i'
op|')'
op|')'
op|','
nl|'\n'
name|'None'
op|','
name|'clazz'
op|')'
newline|'\n'
nl|'\n'
comment|'# orig_class = object.__class__'
nl|'\n'
name|'object'
op|'.'
name|'__class__'
op|'='
name|'clazz'
newline|'\n'
nl|'\n'
name|'for'
name|'name'
name|'in'
name|'members'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'='
name|'getattr'
op|'('
name|'object'
op|','
name|'name'
op|')'
newline|'\n'
comment|'# Only hook bound methods.'
nl|'\n'
name|'if'
op|'('
op|'('
name|'type'
op|'('
name|'m'
op|')'
name|'is'
name|'types'
op|'.'
name|'MethodType'
op|')'
nl|'\n'
name|'and'
op|'('
name|'m'
op|'.'
name|'im_self'
name|'is'
name|'not'
name|'None'
op|')'
op|')'
op|':'
newline|'\n'
comment|"# What's the use of putting watch monkeys on methods"
nl|'\n'
comment|'# in addition to __setattr__?  Well, um, uh, if the'
nl|'\n'
comment|'# methods modify their attributes (i.e. add a key to'
nl|'\n'
comment|'# a dictionary) instead of [re]setting them, then'
nl|'\n'
comment|"# we wouldn't know about it unless we did this."
nl|'\n'
comment|'# (Is that convincing?)'
nl|'\n'
nl|'\n'
indent|'                '
name|'monkey'
op|'='
name|'_WatchMonkey'
op|'('
name|'object'
op|')'
newline|'\n'
name|'monkey'
op|'.'
name|'install'
op|'('
name|'name'
op|')'
newline|'\n'
comment|'# uninstallers.append(monkey.uninstall)'
nl|'\n'
nl|'\n'
comment|'# XXX: This probably prevents these objects from ever having a'
nl|'\n'
comment|'# zero refcount.  Leak, Leak!'
nl|'\n'
comment|'## self.watchUninstallers[object] = uninstallers'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_WatchMonkey
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'_WatchMonkey'
op|':'
newline|'\n'
indent|'    '
string|'"""I hang on a method and tell you what I see.\n\n    TODO: Aya!  Now I just do browseObject all the time, but I could\n    tell you what got called with what when and returning what.\n    """'
newline|'\n'
DECL|variable|oldMethod
name|'oldMethod'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make a monkey to hang on this instance object.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
name|'instance'
newline|'\n'
nl|'\n'
DECL|member|install
dedent|''
name|'def'
name|'install'
op|'('
name|'self'
op|','
name|'methodIdentifier'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Install myself on my instance in place of this method.\n        """'
newline|'\n'
name|'oldMethod'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'instance'
op|','
name|'methodIdentifier'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|"# XXX: this conditional probably isn't effective."
nl|'\n'
name|'if'
name|'oldMethod'
name|'is'
name|'not'
name|'self'
op|':'
newline|'\n'
comment|'# avoid triggering __setattr__'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'instance'
op|'.'
name|'__dict__'
op|'['
name|'methodIdentifier'
op|']'
op|'='
op|'('
nl|'\n'
name|'new'
op|'.'
name|'instancemethod'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|'.'
name|'__class__'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'oldMethod'
op|'='
op|'('
name|'methodIdentifier'
op|','
name|'oldMethod'
op|')'
newline|'\n'
nl|'\n'
DECL|member|uninstall
dedent|''
dedent|''
name|'def'
name|'uninstall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove myself from this instance and restore the original method.\n\n        (I hope.)\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'oldMethod'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|"# XXX: This probably doesn't work if multiple monkies are hanging"
nl|'\n'
comment|"# on a method and they're not removed in order."
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'oldMethod'
op|'['
number|'1'
op|']'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'delattr'
op|'('
name|'self'
op|'.'
name|'instance'
op|','
name|'self'
op|'.'
name|'oldMethod'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'self'
op|'.'
name|'instance'
op|','
name|'self'
op|'.'
name|'oldMethod'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|'.'
name|'oldMethod'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'instance'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pretend to be the method I replaced, and ring the bell.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'oldMethod'
op|'['
number|'1'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'rval'
op|'='
name|'apply'
op|'('
name|'self'
op|'.'
name|'oldMethod'
op|'['
number|'1'
op|']'
op|','
name|'a'
op|','
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'rval'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'.'
name|'_watchEmitChanged'
op|'('
op|')'
newline|'\n'
name|'return'
name|'rval'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_MonkeysSetattrMixin
dedent|''
dedent|''
name|'class'
name|'_MonkeysSetattrMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""A mix-in class providing __setattr__ for objects being watched.\n    """'
newline|'\n'
DECL|member|__setattr__
name|'def'
name|'__setattr__'
op|'('
name|'self'
op|','
name|'k'
op|','
name|'v'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the attribute and ring the bell.\n        """'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__bases__'
op|'['
number|'1'
op|']'
op|','
string|"'__setattr__'"
op|')'
op|':'
newline|'\n'
comment|'# Hack!  Using __bases__[1] is Bad, but since we created'
nl|'\n'
comment|"# this class, we can be reasonably sure it'll work."
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__bases__'
op|'['
number|'1'
op|']'
op|'.'
name|'__setattr__'
op|'('
name|'self'
op|','
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__dict__'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
nl|'\n'
comment|'# XXX: Hey, waitasec, did someone just hang a new method on me?'
nl|'\n'
comment|'#  Do I need to put a monkey on it?'
nl|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_watchEmitChanged'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2009-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.test.proto_helpers.StringTransport}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
op|'.'
name|'verify'
name|'import'
name|'verifyObject'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'ITransport'
op|','
name|'IPushProducer'
op|','
name|'IConsumer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'StringTransport'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StringTransportTests
name|'class'
name|'StringTransportTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{twisted.test.proto_helpers.StringTransport}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_interfaces
dedent|''
name|'def'
name|'test_interfaces'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringTransport} instances provide L{ITransport}, L{IPushProducer},\n        and L{IConsumer}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'verifyObject'
op|'('
name|'ITransport'
op|','
name|'self'
op|'.'
name|'transport'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'verifyObject'
op|'('
name|'IPushProducer'
op|','
name|'self'
op|'.'
name|'transport'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'verifyObject'
op|'('
name|'IConsumer'
op|','
name|'self'
op|'.'
name|'transport'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_registerProducer
dedent|''
name|'def'
name|'test_registerProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringTransport.registerProducer} records the arguments supplied to\n        it as instance attributes.\n        """'
newline|'\n'
name|'producer'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'streaming'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'registerProducer'
op|'('
name|'producer'
op|','
name|'streaming'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'producer'
op|','
name|'producer'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'streaming'
op|','
name|'streaming'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disallowedRegisterProducer
dedent|''
name|'def'
name|'test_disallowedRegisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringTransport.registerProducer} raises L{RuntimeError} if a\n        producer is already registered.\n        """'
newline|'\n'
name|'producer'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'registerProducer'
op|'('
name|'producer'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'RuntimeError'
op|','
name|'self'
op|'.'
name|'transport'
op|'.'
name|'registerProducer'
op|','
name|'object'
op|'('
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'producer'
op|','
name|'producer'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'streaming'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unregisterProducer
dedent|''
name|'def'
name|'test_unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringTransport.unregisterProducer} causes the transport to forget\n        about the registered producer and makes it possible to register a new\n        one.\n        """'
newline|'\n'
name|'oldProducer'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'newProducer'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'registerProducer'
op|'('
name|'oldProducer'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'producer'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'registerProducer'
op|'('
name|'newProducer'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'producer'
op|','
name|'newProducer'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'streaming'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidUnregisterProducer
dedent|''
name|'def'
name|'test_invalidUnregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringTransport.unregisterProducer} raises L{RuntimeError} if called\n        when no producer is registered.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'self'
op|'.'
name|'transport'
op|'.'
name|'unregisterProducer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_initialProducerState
dedent|''
name|'def'
name|'test_initialProducerState'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringTransport.producerState} is initially C{\'producing\'}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'producerState'
op|','
string|"'producing'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_pauseProducing
dedent|''
name|'def'
name|'test_pauseProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringTransport.pauseProducing} changes the C{producerState} of the\n        transport to C{\'paused\'}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'producerState'
op|','
string|"'paused'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_resumeProducing
dedent|''
name|'def'
name|'test_resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringTransport.resumeProducing} changes the C{producerState} of the\n        transport to C{\'producing\'}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'producerState'
op|','
string|"'producing'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_stopProducing
dedent|''
name|'def'
name|'test_stopProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringTransport.stopProducing} changes the C{\'producerState\'} of the\n        transport to C{\'stopped\'}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'stopProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'producerState'
op|','
string|"'stopped'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_stoppedTransportCannotPause
dedent|''
name|'def'
name|'test_stoppedTransportCannotPause'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringTransport.pauseProducing} raises L{RuntimeError} if the\n        transport has been stopped.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'stopProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'self'
op|'.'
name|'transport'
op|'.'
name|'pauseProducing'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_stoppedTransportCannotResume
dedent|''
name|'def'
name|'test_stoppedTransportCannotResume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringTransport.resumeProducing} raises L{RuntimeError} if the\n        transport has been stopped.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'stopProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'self'
op|'.'
name|'transport'
op|'.'
name|'resumeProducing'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disconnectingTransportCannotPause
dedent|''
name|'def'
name|'test_disconnectingTransportCannotPause'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringTransport.pauseProducing} raises L{RuntimeError} if the\n        transport is being disconnected.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'self'
op|'.'
name|'transport'
op|'.'
name|'pauseProducing'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_disconnectingTransportCannotResume
dedent|''
name|'def'
name|'test_disconnectingTransportCannotResume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringTransport.resumeProducing} raises L{RuntimeError} if the\n        transport is being disconnected.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'self'
op|'.'
name|'transport'
op|'.'
name|'resumeProducing'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_loseConnectionSetsDisconnecting
dedent|''
name|'def'
name|'test_loseConnectionSetsDisconnecting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{StringTransport.loseConnection} toggles the C{disconnecting} instance\n        variable to C{True}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'disconnecting'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'disconnecting'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

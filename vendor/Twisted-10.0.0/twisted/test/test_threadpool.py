begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'pickle'
op|','
name|'time'
op|','
name|'weakref'
op|','
name|'gc'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
op|','
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'threadable'
op|','
name|'failure'
op|','
name|'context'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
op|','
name|'interfaces'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
newline|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# See the end of this module for the remainder of the imports.'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
DECL|class|Synchronization
name|'class'
name|'Synchronization'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|failures
indent|'    '
name|'failures'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'N'
op|','
name|'waiting'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'N'
op|'='
name|'N'
newline|'\n'
name|'self'
op|'.'
name|'waiting'
op|'='
name|'waiting'
newline|'\n'
name|'self'
op|'.'
name|'lock'
op|'='
name|'threading'
op|'.'
name|'Lock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'runs'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# This is the testy part: this is supposed to be invoked'
nl|'\n'
comment|'# serially from multiple threads.  If that is actually the'
nl|'\n'
comment|'# case, we will never fail to acquire this lock.  If it is'
nl|'\n'
comment|'# *not* the case, we might get here while someone else is'
nl|'\n'
comment|'# holding the lock.'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'lock'
op|'.'
name|'acquire'
op|'('
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'len'
op|'('
name|'self'
op|'.'
name|'runs'
op|')'
op|'%'
number|'5'
op|':'
newline|'\n'
indent|'                '
name|'time'
op|'.'
name|'sleep'
op|'('
number|'0.0002'
op|')'
comment|'# Constant selected based on'
newline|'\n'
comment|'# empirical data to maximize the'
nl|'\n'
comment|'# chance of a quick failure if this'
nl|'\n'
comment|'# code is broken.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'lock'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failures'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
comment|'# This is just the only way I can think of to wake up the test'
nl|'\n'
comment|"# method.  It doesn't actually have anything to do with the"
nl|'\n'
comment|'# test.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'lock'
op|'.'
name|'acquire'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'runs'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'runs'
op|')'
op|'=='
name|'self'
op|'.'
name|'N'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'waiting'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'lock'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|synchronized
dedent|''
name|'synchronized'
op|'='
op|'['
string|'"run"'
op|']'
newline|'\n'
dedent|''
name|'threadable'
op|'.'
name|'synchronize'
op|'('
name|'Synchronization'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ThreadPoolTestCase
name|'class'
name|'ThreadPoolTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test threadpools.\n    """'
newline|'\n'
DECL|member|_waitForLock
name|'def'
name|'_waitForLock'
op|'('
name|'self'
op|','
name|'lock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'1000000'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'lock'
op|'.'
name|'acquire'
op|'('
name|'False'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1e-5'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"A long time passed without succeeding"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_attributes
dedent|''
dedent|''
name|'def'
name|'test_attributes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ThreadPool.min} and L{ThreadPool.max} are set to the values passed to\n        L{ThreadPool.__init__}.\n        """'
newline|'\n'
name|'pool'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
number|'12'
op|','
number|'22'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'pool'
op|'.'
name|'min'
op|','
number|'12'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'pool'
op|'.'
name|'max'
op|','
number|'22'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_start
dedent|''
name|'def'
name|'test_start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ThreadPool.start} creates the minimum number of threads specified.\n        """'
newline|'\n'
name|'pool'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
number|'0'
op|','
number|'5'
op|')'
newline|'\n'
name|'pool'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'pool'
op|'.'
name|'stop'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'pool'
op|'.'
name|'threads'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'pool'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
number|'3'
op|','
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'pool'
op|'.'
name|'threads'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'pool'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'pool'
op|'.'
name|'stop'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'pool'
op|'.'
name|'threads'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_threadCreationArguments
dedent|''
name|'def'
name|'test_threadCreationArguments'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that creating threads in the threadpool with application-level\n        objects as arguments doesn\'t results in those objects never being\n        freed, with the thread maintaining a reference to them as long as it\n        exists.\n        """'
newline|'\n'
name|'tp'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'tp'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
comment|'# Sanity check - no threads should have been started yet.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tp'
op|'.'
name|'threads'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# Here's our function"
nl|'\n'
DECL|function|worker
name|'def'
name|'worker'
op|'('
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
comment|'# weakref needs an object subclass'
nl|'\n'
DECL|class|Dumb
dedent|''
name|'class'
name|'Dumb'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
comment|"# And here's the unique object"
nl|'\n'
dedent|''
name|'unique'
op|'='
name|'Dumb'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'workerRef'
op|'='
name|'weakref'
op|'.'
name|'ref'
op|'('
name|'worker'
op|')'
newline|'\n'
name|'uniqueRef'
op|'='
name|'weakref'
op|'.'
name|'ref'
op|'('
name|'unique'
op|')'
newline|'\n'
nl|'\n'
comment|'# Put some work in'
nl|'\n'
name|'tp'
op|'.'
name|'callInThread'
op|'('
name|'worker'
op|','
name|'unique'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add an event to wait completion'
nl|'\n'
name|'event'
op|'='
name|'threading'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'callInThread'
op|'('
name|'event'
op|'.'
name|'set'
op|')'
newline|'\n'
name|'event'
op|'.'
name|'wait'
op|'('
name|'self'
op|'.'
name|'getTimeout'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'del'
name|'worker'
newline|'\n'
name|'del'
name|'unique'
newline|'\n'
name|'gc'
op|'.'
name|'collect'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'uniqueRef'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'workerRef'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_threadCreationArgumentsCallInThreadWithCallback
dedent|''
name|'def'
name|'test_threadCreationArgumentsCallInThreadWithCallback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        As C{test_threadCreationArguments} above, but for\n        callInThreadWithCallback.\n        """'
newline|'\n'
nl|'\n'
name|'tp'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'tp'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
comment|'# Sanity check - no threads should have been started yet.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tp'
op|'.'
name|'threads'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# this holds references obtained in onResult'
nl|'\n'
name|'refdict'
op|'='
op|'{'
op|'}'
comment|'# name -> ref value'
newline|'\n'
nl|'\n'
name|'onResultWait'
op|'='
name|'threading'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'onResultDone'
op|'='
name|'threading'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'resultRef'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# result callback'
nl|'\n'
DECL|function|onResult
name|'def'
name|'onResult'
op|'('
name|'success'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'onResultWait'
op|'.'
name|'wait'
op|'('
name|'self'
op|'.'
name|'getTimeout'
op|'('
op|')'
op|')'
newline|'\n'
name|'refdict'
op|'['
string|"'workerRef'"
op|']'
op|'='
name|'workerRef'
op|'('
op|')'
newline|'\n'
name|'refdict'
op|'['
string|"'uniqueRef'"
op|']'
op|'='
name|'uniqueRef'
op|'('
op|')'
newline|'\n'
name|'onResultDone'
op|'.'
name|'set'
op|'('
op|')'
newline|'\n'
name|'resultRef'
op|'.'
name|'append'
op|'('
name|'weakref'
op|'.'
name|'ref'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# Here's our function"
nl|'\n'
DECL|function|worker
dedent|''
name|'def'
name|'worker'
op|'('
name|'arg'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'Dumb'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# weakref needs an object subclass'
nl|'\n'
DECL|class|Dumb
dedent|''
name|'class'
name|'Dumb'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
comment|"# And here's the unique object"
nl|'\n'
dedent|''
name|'unique'
op|'='
name|'Dumb'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'onResultRef'
op|'='
name|'weakref'
op|'.'
name|'ref'
op|'('
name|'onResult'
op|')'
newline|'\n'
name|'workerRef'
op|'='
name|'weakref'
op|'.'
name|'ref'
op|'('
name|'worker'
op|')'
newline|'\n'
name|'uniqueRef'
op|'='
name|'weakref'
op|'.'
name|'ref'
op|'('
name|'unique'
op|')'
newline|'\n'
nl|'\n'
comment|'# Put some work in'
nl|'\n'
name|'tp'
op|'.'
name|'callInThreadWithCallback'
op|'('
name|'onResult'
op|','
name|'worker'
op|','
name|'unique'
op|','
name|'test'
op|'='
name|'unique'
op|')'
newline|'\n'
nl|'\n'
name|'del'
name|'worker'
newline|'\n'
name|'del'
name|'unique'
newline|'\n'
name|'gc'
op|'.'
name|'collect'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# let onResult collect the refs'
nl|'\n'
name|'onResultWait'
op|'.'
name|'set'
op|'('
op|')'
newline|'\n'
comment|'# wait for onResult'
nl|'\n'
name|'onResultDone'
op|'.'
name|'wait'
op|'('
name|'self'
op|'.'
name|'getTimeout'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'uniqueRef'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'workerRef'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|"# XXX There's a race right here - has onResult in the worker thread"
nl|'\n'
comment|'# returned and the locals in _worker holding it and the result been'
nl|'\n'
comment|'# deleted yet?'
nl|'\n'
nl|'\n'
name|'del'
name|'onResult'
newline|'\n'
name|'gc'
op|'.'
name|'collect'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'onResultRef'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resultRef'
op|'['
number|'0'
op|']'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_persistence
dedent|''
name|'def'
name|'test_persistence'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Threadpools can be pickled and unpickled, which should preserve the\n        number of threads and other parameters.\n        """'
newline|'\n'
name|'pool'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
number|'7'
op|','
number|'20'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'pool'
op|'.'
name|'min'
op|','
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'pool'
op|'.'
name|'max'
op|','
number|'20'
op|')'
newline|'\n'
nl|'\n'
comment|'# check that unpickled threadpool has same number of threads'
nl|'\n'
name|'copy'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'pool'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'copy'
op|'.'
name|'min'
op|','
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'copy'
op|'.'
name|'max'
op|','
number|'20'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_threadpoolTest
dedent|''
name|'def'
name|'_threadpoolTest'
op|'('
name|'self'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test synchronization of calls made with C{method}, which should be\n        one of the mechanisms of the threadpool to execute work in threads.\n        """'
newline|'\n'
comment|'# This is a schizophrenic test: it seems to be trying to test'
nl|'\n'
comment|'# both the callInThread()/dispatch() behavior of the ThreadPool as well'
nl|'\n'
comment|'# as the serialization behavior of threadable.synchronize().  It'
nl|'\n'
comment|'# would probably make more sense as two much simpler tests.'
nl|'\n'
name|'N'
op|'='
number|'10'
newline|'\n'
nl|'\n'
name|'tp'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'tp'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
name|'waiting'
op|'='
name|'threading'
op|'.'
name|'Lock'
op|'('
op|')'
newline|'\n'
name|'waiting'
op|'.'
name|'acquire'
op|'('
op|')'
newline|'\n'
name|'actor'
op|'='
name|'Synchronization'
op|'('
name|'N'
op|','
name|'waiting'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'N'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'method'
op|'('
name|'tp'
op|','
name|'actor'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_waitForLock'
op|'('
name|'waiting'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'actor'
op|'.'
name|'failures'
op|','
string|'"run() re-entered %d times"'
op|'%'
nl|'\n'
op|'('
name|'actor'
op|'.'
name|'failures'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_dispatch
dedent|''
name|'def'
name|'test_dispatch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call C{_threadpoolTest} with C{dispatch}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_threadpoolTest'
op|'('
nl|'\n'
name|'lambda'
name|'tp'
op|','
name|'actor'
op|':'
name|'tp'
op|'.'
name|'dispatch'
op|'('
name|'actor'
op|','
name|'actor'
op|'.'
name|'run'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'test_dispatch'
op|'.'
name|'suppress'
op|'='
op|'['
name|'util'
op|'.'
name|'suppress'
op|'('
nl|'\n'
name|'message'
op|'='
string|'"dispatch\\(\\) is deprecated since Twisted 8.0, "'
nl|'\n'
string|'"use callInThread\\(\\) instead"'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callInThread
name|'def'
name|'test_callInThread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call C{_threadpoolTest} with C{callInThread}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_threadpoolTest'
op|'('
nl|'\n'
name|'lambda'
name|'tp'
op|','
name|'actor'
op|':'
name|'tp'
op|'.'
name|'callInThread'
op|'('
name|'actor'
op|'.'
name|'run'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callInThreadException
dedent|''
name|'def'
name|'test_callInThreadException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ThreadPool.callInThread} logs exceptions raised by the callable it\n        is passed.\n        """'
newline|'\n'
DECL|class|NewError
name|'class'
name|'NewError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|raiseError
dedent|''
name|'def'
name|'raiseError'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NewError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'tp'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'callInThread'
op|'('
name|'raiseError'
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'NewError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callInThreadWithCallback
dedent|''
name|'def'
name|'test_callInThreadWithCallback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ThreadPool.callInThreadWithCallback} calls C{onResult} with a\n        two-tuple of C{(True, result)} where C{result} is the value returned\n        by the callable supplied.\n        """'
newline|'\n'
name|'waiter'
op|'='
name|'threading'
op|'.'
name|'Lock'
op|'('
op|')'
newline|'\n'
name|'waiter'
op|'.'
name|'acquire'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|onResult
name|'def'
name|'onResult'
op|'('
name|'success'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'waiter'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
name|'results'
op|'.'
name|'append'
op|'('
name|'success'
op|')'
newline|'\n'
name|'results'
op|'.'
name|'append'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'tp'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'callInThreadWithCallback'
op|'('
name|'onResult'
op|','
name|'lambda'
op|':'
string|'"test"'
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_waitForLock'
op|'('
name|'waiter'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'tp'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'results'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'results'
op|'['
number|'1'
op|']'
op|','
string|'"test"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callInThreadWithCallbackExceptionInCallback
dedent|''
name|'def'
name|'test_callInThreadWithCallbackExceptionInCallback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ThreadPool.callInThreadWithCallback} calls C{onResult} with a\n        two-tuple of C{(False, failure)} where C{failure} represents the\n        exception raised by the callable supplied.\n        """'
newline|'\n'
DECL|class|NewError
name|'class'
name|'NewError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|raiseError
dedent|''
name|'def'
name|'raiseError'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NewError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'waiter'
op|'='
name|'threading'
op|'.'
name|'Lock'
op|'('
op|')'
newline|'\n'
name|'waiter'
op|'.'
name|'acquire'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|onResult
name|'def'
name|'onResult'
op|'('
name|'success'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'waiter'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
name|'results'
op|'.'
name|'append'
op|'('
name|'success'
op|')'
newline|'\n'
name|'results'
op|'.'
name|'append'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'tp'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'callInThreadWithCallback'
op|'('
name|'onResult'
op|','
name|'raiseError'
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_waitForLock'
op|'('
name|'waiter'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'tp'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'results'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'results'
op|'['
number|'1'
op|']'
op|','
name|'failure'
op|'.'
name|'Failure'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'issubclass'
op|'('
name|'results'
op|'['
number|'1'
op|']'
op|'.'
name|'type'
op|','
name|'NewError'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callInThreadWithCallbackExceptionInOnResult
dedent|''
name|'def'
name|'test_callInThreadWithCallbackExceptionInOnResult'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ThreadPool.callInThreadWithCallback} logs the exception raised by\n        C{onResult}.\n        """'
newline|'\n'
DECL|class|NewError
name|'class'
name|'NewError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'waiter'
op|'='
name|'threading'
op|'.'
name|'Lock'
op|'('
op|')'
newline|'\n'
name|'waiter'
op|'.'
name|'acquire'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|onResult
name|'def'
name|'onResult'
op|'('
name|'success'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'results'
op|'.'
name|'append'
op|'('
name|'success'
op|')'
newline|'\n'
name|'results'
op|'.'
name|'append'
op|'('
name|'result'
op|')'
newline|'\n'
name|'raise'
name|'NewError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'tp'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'callInThreadWithCallback'
op|'('
name|'onResult'
op|','
name|'lambda'
op|':'
name|'None'
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'callInThread'
op|'('
name|'waiter'
op|'.'
name|'release'
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_waitForLock'
op|'('
name|'waiter'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'tp'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'NewError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'results'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'results'
op|'['
number|'1'
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callbackThread
dedent|''
name|'def'
name|'test_callbackThread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ThreadPool.callInThreadWithCallback} calls the function it is\n        given and the C{onResult} callback in the same thread.\n        """'
newline|'\n'
name|'threadIds'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'import'
name|'thread'
newline|'\n'
nl|'\n'
name|'event'
op|'='
name|'threading'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|onResult
name|'def'
name|'onResult'
op|'('
name|'success'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'threadIds'
op|'.'
name|'append'
op|'('
name|'thread'
op|'.'
name|'get_ident'
op|'('
op|')'
op|')'
newline|'\n'
name|'event'
op|'.'
name|'set'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|func
dedent|''
name|'def'
name|'func'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'threadIds'
op|'.'
name|'append'
op|'('
name|'thread'
op|'.'
name|'get_ident'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'tp'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'callInThreadWithCallback'
op|'('
name|'onResult'
op|','
name|'func'
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'tp'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
name|'event'
op|'.'
name|'wait'
op|'('
name|'self'
op|'.'
name|'getTimeout'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'threadIds'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'threadIds'
op|'['
number|'0'
op|']'
op|','
name|'threadIds'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callbackContext
dedent|''
name|'def'
name|'test_callbackContext'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The context L{ThreadPool.callInThreadWithCallback} is invoked in is\n        shared by the context the callable and C{onResult} callback are\n        invoked in.\n        """'
newline|'\n'
name|'myctx'
op|'='
name|'context'
op|'.'
name|'theContextTracker'
op|'.'
name|'currentContext'
op|'('
op|')'
op|'.'
name|'contexts'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'myctx'
op|'['
string|"'testing'"
op|']'
op|'='
string|"'this must be present'"
newline|'\n'
nl|'\n'
name|'contexts'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'event'
op|'='
name|'threading'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|onResult
name|'def'
name|'onResult'
op|'('
name|'success'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ctx'
op|'='
name|'context'
op|'.'
name|'theContextTracker'
op|'.'
name|'currentContext'
op|'('
op|')'
op|'.'
name|'contexts'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'contexts'
op|'.'
name|'append'
op|'('
name|'ctx'
op|')'
newline|'\n'
name|'event'
op|'.'
name|'set'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|func
dedent|''
name|'def'
name|'func'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ctx'
op|'='
name|'context'
op|'.'
name|'theContextTracker'
op|'.'
name|'currentContext'
op|'('
op|')'
op|'.'
name|'contexts'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'contexts'
op|'.'
name|'append'
op|'('
name|'ctx'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'tp'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'callInThreadWithCallback'
op|'('
name|'onResult'
op|','
name|'func'
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'tp'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
name|'event'
op|'.'
name|'wait'
op|'('
name|'self'
op|'.'
name|'getTimeout'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'contexts'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'myctx'
op|','
name|'contexts'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'myctx'
op|','
name|'contexts'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_existingWork
dedent|''
name|'def'
name|'test_existingWork'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Work added to the threadpool before its start should be executed once\n        the threadpool is started: this is ensured by trying to release a lock\n        previously acquired.\n        """'
newline|'\n'
name|'waiter'
op|'='
name|'threading'
op|'.'
name|'Lock'
op|'('
op|')'
newline|'\n'
name|'waiter'
op|'.'
name|'acquire'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'tp'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'callInThread'
op|'('
name|'waiter'
op|'.'
name|'release'
op|')'
comment|'# before start()'
newline|'\n'
name|'tp'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_waitForLock'
op|'('
name|'waiter'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'tp'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_dispatchDeprecation
dedent|''
dedent|''
name|'def'
name|'test_dispatchDeprecation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test for the deprecation of the dispatch method.\n        """'
newline|'\n'
name|'tp'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'tp'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'tp'
op|'.'
name|'dispatch'
op|'('
name|'None'
op|','
name|'lambda'
op|':'
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"dispatch() is deprecated since Twisted 8.0, "'
nl|'\n'
string|'"use callInThread() instead"'
op|','
nl|'\n'
name|'__file__'
op|','
name|'cb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_dispatchWithCallbackDeprecation
dedent|''
name|'def'
name|'test_dispatchWithCallbackDeprecation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test for the deprecation of the dispatchWithCallback method.\n        """'
newline|'\n'
name|'tp'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
op|')'
newline|'\n'
name|'tp'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'tp'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'tp'
op|'.'
name|'dispatchWithCallback'
op|'('
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'lambda'
name|'x'
op|':'
name|'None'
op|','
nl|'\n'
name|'lambda'
name|'x'
op|':'
name|'None'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"dispatchWithCallback() is deprecated since Twisted 8.0, "'
nl|'\n'
string|'"use twisted.internet.threads.deferToThread() instead."'
op|','
nl|'\n'
name|'__file__'
op|','
name|'cb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|RaceConditionTestCase
dedent|''
dedent|''
name|'class'
name|'RaceConditionTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'event'
op|'='
name|'threading'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'='
name|'threadpool'
op|'.'
name|'ThreadPool'
op|'('
number|'0'
op|','
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'self'
op|'.'
name|'event'
newline|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'threadpool'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_synchronization
dedent|''
name|'def'
name|'test_synchronization'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a race condition: ensure that actions run in the pool synchronize\n        with actions run in the main thread.\n        """'
newline|'\n'
name|'timeout'
op|'='
name|'self'
op|'.'
name|'getTimeout'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'callInThread'
op|'('
name|'self'
op|'.'
name|'event'
op|'.'
name|'set'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'event'
op|'.'
name|'wait'
op|'('
name|'timeout'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'event'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'callInThread'
op|'('
name|'self'
op|'.'
name|'event'
op|'.'
name|'wait'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'callInThread'
op|'('
name|'self'
op|'.'
name|'event'
op|'.'
name|'set'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'event'
op|'.'
name|'wait'
op|'('
name|'timeout'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'event'
op|'.'
name|'isSet'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'event'
op|'.'
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Actions not synchronized"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_singleThread
dedent|''
dedent|''
name|'def'
name|'test_singleThread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The submission of a new job to a thread pool in response to the\n        C{onResult} callback does not cause a new thread to be added to the\n        thread pool.\n\n        This requires that the thread which calls C{onResult} to have first\n        marked itself as available so that when the new job is queued, that\n        thread may be considered to run it.  This is desirable so that when\n        only N jobs are ever being executed in the thread pool at once only\n        N threads will ever be created.\n        """'
newline|'\n'
comment|'# Ensure no threads running'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'workers'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'loopDeferred'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|onResult
name|'def'
name|'onResult'
op|'('
name|'success'
op|','
name|'counter'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'callFromThread'
op|'('
name|'submit'
op|','
name|'counter'
op|')'
newline|'\n'
nl|'\n'
DECL|function|submit
dedent|''
name|'def'
name|'submit'
op|'('
name|'counter'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'counter'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'callInThreadWithCallback'
op|'('
nl|'\n'
name|'onResult'
op|','
name|'lambda'
op|':'
name|'counter'
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'loopDeferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbLoop
dedent|''
dedent|''
name|'def'
name|'cbLoop'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
comment|'# Ensure there is only one thread running.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'workers'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'loopDeferred'
op|'.'
name|'addCallback'
op|'('
name|'cbLoop'
op|')'
newline|'\n'
name|'submit'
op|'('
number|'10'
op|')'
newline|'\n'
name|'return'
name|'loopDeferred'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'interfaces'
op|'.'
name|'IReactorThreads'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'cls'
name|'in'
name|'ThreadPoolTestCase'
op|','
name|'RaceConditionTestCase'
op|':'
newline|'\n'
indent|'        '
name|'setattr'
op|'('
name|'cls'
op|','
string|"'skip'"
op|','
string|'"No thread support, nothing to test here"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'threading'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'threadpool'
newline|'\n'
dedent|''
endmarker|''
end_unit

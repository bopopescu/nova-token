begin_unit
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'os'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'Crypto'
op|'.'
name|'Cipher'
op|'.'
name|'AES'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|Crypto
indent|'    '
name|'Crypto'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'persisted'
name|'import'
name|'sob'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'components'
newline|'\n'
nl|'\n'
DECL|class|Dummy
name|'class'
name|'Dummy'
op|'('
name|'components'
op|'.'
name|'Componentized'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|variable|objects
dedent|''
name|'objects'
op|'='
op|'['
nl|'\n'
number|'1'
op|','
nl|'\n'
string|'"hello"'
op|','
nl|'\n'
op|'('
number|'1'
op|','
string|'"hello"'
op|')'
op|','
nl|'\n'
op|'['
number|'1'
op|','
string|'"hello"'
op|']'
op|','
nl|'\n'
op|'{'
number|'1'
op|':'
string|'"hello"'
op|'}'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|class|FakeModule
name|'class'
name|'FakeModule'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|PersistTestCase
dedent|''
name|'class'
name|'PersistTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testStyles
indent|'    '
name|'def'
name|'testStyles'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'o'
name|'in'
name|'objects'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'='
name|'sob'
op|'.'
name|'Persistent'
op|'('
name|'o'
op|','
string|"''"
op|')'
newline|'\n'
name|'for'
name|'style'
name|'in'
string|"'source pickle'"
op|'.'
name|'split'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'p'
op|'.'
name|'setStyle'
op|'('
name|'style'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'save'
op|'('
name|'filename'
op|'='
string|"'persisttest.'"
op|'+'
name|'style'
op|')'
newline|'\n'
name|'o1'
op|'='
name|'sob'
op|'.'
name|'load'
op|'('
string|"'persisttest.'"
op|'+'
name|'style'
op|','
name|'style'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|','
name|'o1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testStylesBeingSet
dedent|''
dedent|''
dedent|''
name|'def'
name|'testStylesBeingSet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'o'
op|'='
name|'Dummy'
op|'('
op|')'
newline|'\n'
name|'o'
op|'.'
name|'foo'
op|'='
number|'5'
newline|'\n'
name|'o'
op|'.'
name|'setComponent'
op|'('
name|'sob'
op|'.'
name|'IPersistable'
op|','
name|'sob'
op|'.'
name|'Persistent'
op|'('
name|'o'
op|','
string|"'lala'"
op|')'
op|')'
newline|'\n'
name|'for'
name|'style'
name|'in'
string|"'source pickle'"
op|'.'
name|'split'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sob'
op|'.'
name|'IPersistable'
op|'('
name|'o'
op|')'
op|'.'
name|'setStyle'
op|'('
name|'style'
op|')'
newline|'\n'
name|'sob'
op|'.'
name|'IPersistable'
op|'('
name|'o'
op|')'
op|'.'
name|'save'
op|'('
name|'filename'
op|'='
string|"'lala.'"
op|'+'
name|'style'
op|')'
newline|'\n'
name|'o1'
op|'='
name|'sob'
op|'.'
name|'load'
op|'('
string|"'lala.'"
op|'+'
name|'style'
op|','
name|'style'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'foo'
op|','
name|'o1'
op|'.'
name|'foo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'sob'
op|'.'
name|'IPersistable'
op|'('
name|'o1'
op|')'
op|'.'
name|'style'
op|','
name|'style'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testNames
dedent|''
dedent|''
name|'def'
name|'testNames'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'o'
op|'='
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
newline|'\n'
name|'p'
op|'='
name|'sob'
op|'.'
name|'Persistent'
op|'('
name|'o'
op|','
string|"'object'"
op|')'
newline|'\n'
name|'for'
name|'style'
name|'in'
string|"'source pickle'"
op|'.'
name|'split'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'setStyle'
op|'('
name|'style'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'o1'
op|'='
name|'sob'
op|'.'
name|'load'
op|'('
string|"'object.ta'"
op|'+'
name|'style'
op|'['
number|'0'
op|']'
op|','
name|'style'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|','
name|'o1'
op|')'
newline|'\n'
name|'for'
name|'tag'
name|'in'
string|"'lala lolo'"
op|'.'
name|'split'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'p'
op|'.'
name|'save'
op|'('
name|'tag'
op|')'
newline|'\n'
name|'o1'
op|'='
name|'sob'
op|'.'
name|'load'
op|'('
string|"'object-'"
op|'+'
name|'tag'
op|'+'
string|"'.ta'"
op|'+'
name|'style'
op|'['
number|'0'
op|']'
op|','
name|'style'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|','
name|'o1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEncryptedStyles
dedent|''
dedent|''
dedent|''
name|'def'
name|'testEncryptedStyles'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'o'
name|'in'
name|'objects'
op|':'
newline|'\n'
indent|'            '
name|'phrase'
op|'='
string|"'once I was the king of spain'"
newline|'\n'
name|'p'
op|'='
name|'sob'
op|'.'
name|'Persistent'
op|'('
name|'o'
op|','
string|"''"
op|')'
newline|'\n'
name|'for'
name|'style'
name|'in'
string|"'source pickle'"
op|'.'
name|'split'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'p'
op|'.'
name|'setStyle'
op|'('
name|'style'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'save'
op|'('
name|'filename'
op|'='
string|"'epersisttest.'"
op|'+'
name|'style'
op|','
name|'passphrase'
op|'='
name|'phrase'
op|')'
newline|'\n'
name|'o1'
op|'='
name|'sob'
op|'.'
name|'load'
op|'('
string|"'epersisttest.'"
op|'+'
name|'style'
op|','
name|'style'
op|','
name|'phrase'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|','
name|'o1'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'Crypto'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'testEncryptedStyles'
op|'.'
name|'skip'
op|'='
string|'"PyCrypto required for encrypted config"'
newline|'\n'
nl|'\n'
DECL|member|testPython
dedent|''
name|'def'
name|'testPython'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'open'
op|'('
string|'"persisttest.python"'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|"'foo=[1,2,3] '"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'o'
op|'='
name|'sob'
op|'.'
name|'loadValueFromFile'
op|'('
string|"'persisttest.python'"
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEncryptedPython
dedent|''
name|'def'
name|'testEncryptedPython'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'phrase'
op|'='
string|"'once I was the king of spain'"
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
string|'"epersisttest.python"'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
nl|'\n'
name|'sob'
op|'.'
name|'_encrypt'
op|'('
name|'phrase'
op|','
string|"'foo=[1,2,3]'"
op|')'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'o'
op|'='
name|'sob'
op|'.'
name|'loadValueFromFile'
op|'('
string|"'epersisttest.python'"
op|','
string|"'foo'"
op|','
name|'phrase'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'Crypto'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'testEncryptedPython'
op|'.'
name|'skip'
op|'='
string|'"PyCrypto required for encrypted config"'
newline|'\n'
nl|'\n'
DECL|member|testTypeGuesser
dedent|''
name|'def'
name|'testTypeGuesser'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'KeyError'
op|','
name|'sob'
op|'.'
name|'guessType'
op|','
string|'"file.blah"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'python'"
op|','
name|'sob'
op|'.'
name|'guessType'
op|'('
string|'"file.py"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'python'"
op|','
name|'sob'
op|'.'
name|'guessType'
op|'('
string|'"file.tac"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'python'"
op|','
name|'sob'
op|'.'
name|'guessType'
op|'('
string|'"file.etac"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'pickle'"
op|','
name|'sob'
op|'.'
name|'guessType'
op|'('
string|'"file.tap"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'pickle'"
op|','
name|'sob'
op|'.'
name|'guessType'
op|'('
string|'"file.etap"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'source'"
op|','
name|'sob'
op|'.'
name|'guessType'
op|'('
string|'"file.tas"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'source'"
op|','
name|'sob'
op|'.'
name|'guessType'
op|'('
string|'"file.etas"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEverythingEphemeralGetattr
dedent|''
name|'def'
name|'testEverythingEphemeralGetattr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that _EverythingEphermal.__getattr__ works.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'fakeMain'
op|'.'
name|'testMainModGetattr'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'dirname'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'dirname'
op|')'
newline|'\n'
nl|'\n'
name|'filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'dirname'
op|','
string|"'persisttest.ee_getattr'"
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'file'
op|'('
name|'filename'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|"'import __main__\\n'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|"'if __main__.testMainModGetattr != 1: raise AssertionError\\n'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|"'app = None\\n'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'sob'
op|'.'
name|'load'
op|'('
name|'filename'
op|','
string|"'source'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEverythingEphemeralSetattr
dedent|''
name|'def'
name|'testEverythingEphemeralSetattr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that _EverythingEphemeral.__setattr__ won\'t affect __main__.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'fakeMain'
op|'.'
name|'testMainModSetattr'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'dirname'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'dirname'
op|')'
newline|'\n'
nl|'\n'
name|'filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'dirname'
op|','
string|"'persisttest.ee_setattr'"
op|')'
newline|'\n'
name|'f'
op|'='
name|'file'
op|'('
name|'filename'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|"'import __main__\\n'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|"'__main__.testMainModSetattr = 2\\n'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|"'app = None\\n'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'sob'
op|'.'
name|'load'
op|'('
name|'filename'
op|','
string|"'source'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'fakeMain'
op|'.'
name|'testMainModSetattr'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEverythingEphemeralException
dedent|''
name|'def'
name|'testEverythingEphemeralException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that an exception during load() won\'t cause _EE to mask __main__\n        """'
newline|'\n'
name|'dirname'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'dirname'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'dirname'
op|','
string|"'persisttest.ee_exception'"
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'file'
op|'('
name|'filename'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|"'raise ValueError\\n'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'sob'
op|'.'
name|'load'
op|','
name|'filename'
op|','
string|"'source'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'type'
op|'('
name|'sys'
op|'.'
name|'modules'
op|'['
string|"'__main__'"
op|']'
op|')'
op|','
name|'FakeModule'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Replace the __main__ module with a fake one, so that it can be mutated\n        in tests\n        """'
newline|'\n'
name|'self'
op|'.'
name|'realMain'
op|'='
name|'sys'
op|'.'
name|'modules'
op|'['
string|"'__main__'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'fakeMain'
op|'='
name|'sys'
op|'.'
name|'modules'
op|'['
string|"'__main__'"
op|']'
op|'='
name|'FakeModule'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Restore __main__ to its original value\n        """'
newline|'\n'
name|'sys'
op|'.'
name|'modules'
op|'['
string|"'__main__'"
op|']'
op|'='
name|'self'
op|'.'
name|'realMain'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

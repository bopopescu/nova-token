begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for Perspective Broker module.\n\nTODO: update protocol level tests to use new connection API, leaving\nonly specific tests for old API.\n"""'
newline|'\n'
nl|'\n'
comment|'# issue1195 TODOs: replace pump.pump() with something involving Deferreds.'
nl|'\n'
comment|'# Clean up warning suppression.'
nl|'\n'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'os'
op|','
name|'time'
op|','
name|'gc'
newline|'\n'
nl|'\n'
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
op|','
name|'Interface'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'versions'
name|'import'
name|'Version'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
name|'import'
name|'pb'
op|','
name|'util'
op|','
name|'publish'
op|','
name|'jelly'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
op|','
name|'main'
op|','
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'ConnectionRefusedError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
op|','
name|'gatherResults'
op|','
name|'succeed'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
op|'.'
name|'policies'
name|'import'
name|'WrappingFactory'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
op|','
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'error'
name|'import'
name|'UnauthorizedLogin'
op|','
name|'UnhandledCredentials'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'portal'
op|','
name|'checkers'
op|','
name|'credentials'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Dummy
name|'class'
name|'Dummy'
op|'('
name|'pb'
op|'.'
name|'Viewable'
op|')'
op|':'
newline|'\n'
DECL|member|view_doNothing
indent|'    '
name|'def'
name|'view_doNothing'
op|'('
name|'self'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'user'
op|','
name|'DummyPerspective'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'hello world!'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'goodbye, cruel world!'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyPerspective
dedent|''
dedent|''
dedent|''
name|'class'
name|'DummyPerspective'
op|'('
name|'pb'
op|'.'
name|'Avatar'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An L{IPerspective} avatar which will be used in some tests.\n    """'
newline|'\n'
DECL|member|perspective_getDummyViewPoint
name|'def'
name|'perspective_getDummyViewPoint'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Dummy'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyRealm
dedent|''
dedent|''
name|'class'
name|'DummyRealm'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'portal'
op|'.'
name|'IRealm'
op|')'
newline|'\n'
nl|'\n'
DECL|member|requestAvatar
name|'def'
name|'requestAvatar'
op|'('
name|'self'
op|','
name|'avatarId'
op|','
name|'mind'
op|','
op|'*'
name|'interfaces'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'iface'
name|'in'
name|'interfaces'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'iface'
name|'is'
name|'pb'
op|'.'
name|'IPerspective'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'iface'
op|','
name|'DummyPerspective'
op|'('
name|'avatarId'
op|')'
op|','
name|'lambda'
op|':'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IOPump
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'IOPump'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Utility to pump data between clients and servers for protocol testing.\n\n    Perhaps this is a utility worthy of being in protocol.py?\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'client'
op|','
name|'server'
op|','
name|'clientIO'
op|','
name|'serverIO'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'='
name|'client'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'='
name|'server'
newline|'\n'
name|'self'
op|'.'
name|'clientIO'
op|'='
name|'clientIO'
newline|'\n'
name|'self'
op|'.'
name|'serverIO'
op|'='
name|'serverIO'
newline|'\n'
nl|'\n'
DECL|member|flush
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Pump until there is no more input or output. This does not run any\n        timers, so don\'t use it with any code that calls reactor.callLater.\n        """'
newline|'\n'
comment|'# failsafe timeout'
nl|'\n'
name|'timeout'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'+'
number|'5'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'pump'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'>'
name|'timeout'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|pump
dedent|''
dedent|''
dedent|''
name|'def'
name|'pump'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Move data back and forth.\n\n        Returns whether any data was moved.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'clientIO'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serverIO'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'cData'
op|'='
name|'self'
op|'.'
name|'clientIO'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'sData'
op|'='
name|'self'
op|'.'
name|'serverIO'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clientIO'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serverIO'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clientIO'
op|'.'
name|'truncate'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serverIO'
op|'.'
name|'truncate'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'_checkProducer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'_checkProducer'
op|'('
op|')'
newline|'\n'
name|'for'
name|'byte'
name|'in'
name|'cData'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'server'
op|'.'
name|'dataReceived'
op|'('
name|'byte'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'byte'
name|'in'
name|'sData'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'client'
op|'.'
name|'dataReceived'
op|'('
name|'byte'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'cData'
name|'or'
name|'sData'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|connectedServerAndClient
dedent|''
dedent|''
dedent|''
name|'def'
name|'connectedServerAndClient'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns a 3-tuple: (client, server, pump).\n    """'
newline|'\n'
name|'clientBroker'
op|'='
name|'pb'
op|'.'
name|'Broker'
op|'('
op|')'
newline|'\n'
name|'checker'
op|'='
name|'checkers'
op|'.'
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
name|'guest'
op|'='
string|"'guest'"
op|')'
newline|'\n'
name|'factory'
op|'='
name|'pb'
op|'.'
name|'PBServerFactory'
op|'('
name|'portal'
op|'.'
name|'Portal'
op|'('
name|'DummyRealm'
op|'('
op|')'
op|','
op|'['
name|'checker'
op|']'
op|')'
op|')'
newline|'\n'
name|'serverBroker'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
op|'('
string|"'127.0.0.1'"
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'clientTransport'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'serverTransport'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'clientBroker'
op|'.'
name|'makeConnection'
op|'('
name|'protocol'
op|'.'
name|'FileWrapper'
op|'('
name|'clientTransport'
op|')'
op|')'
newline|'\n'
name|'serverBroker'
op|'.'
name|'makeConnection'
op|'('
name|'protocol'
op|'.'
name|'FileWrapper'
op|'('
name|'serverTransport'
op|')'
op|')'
newline|'\n'
name|'pump'
op|'='
name|'IOPump'
op|'('
name|'clientBroker'
op|','
name|'serverBroker'
op|','
name|'clientTransport'
op|','
name|'serverTransport'
op|')'
newline|'\n'
comment|'# Challenge-response authentication:'
nl|'\n'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'return'
name|'clientBroker'
op|','
name|'serverBroker'
op|','
name|'pump'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleRemote
dedent|''
name|'class'
name|'SimpleRemote'
op|'('
name|'pb'
op|'.'
name|'Referenceable'
op|')'
op|':'
newline|'\n'
DECL|member|remote_thunk
indent|'    '
name|'def'
name|'remote_thunk'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'arg'
op|'='
name|'arg'
newline|'\n'
name|'return'
name|'arg'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|remote_knuth
dedent|''
name|'def'
name|'remote_knuth'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'Exception'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NestedRemote
dedent|''
dedent|''
name|'class'
name|'NestedRemote'
op|'('
name|'pb'
op|'.'
name|'Referenceable'
op|')'
op|':'
newline|'\n'
DECL|member|remote_getSimple
indent|'    '
name|'def'
name|'remote_getSimple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'SimpleRemote'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleCopy
dedent|''
dedent|''
name|'class'
name|'SimpleCopy'
op|'('
name|'pb'
op|'.'
name|'Copyable'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'x'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'y'
op|'='
op|'{'
string|'"Hello"'
op|':'
string|'"World"'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'z'
op|'='
op|'['
string|"'test'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleLocalCopy
dedent|''
dedent|''
name|'class'
name|'SimpleLocalCopy'
op|'('
name|'pb'
op|'.'
name|'RemoteCopy'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'pb'
op|'.'
name|'setUnjellyableForClass'
op|'('
name|'SimpleCopy'
op|','
name|'SimpleLocalCopy'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleFactoryCopy
name|'class'
name|'SimpleFactoryCopy'
op|'('
name|'pb'
op|'.'
name|'Copyable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @cvar allIDs: hold every created instances of this class.\n    @type allIDs: C{dict}\n    """'
newline|'\n'
DECL|variable|allIDs
name|'allIDs'
op|'='
op|'{'
op|'}'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'id'
op|'='
name|'id'
newline|'\n'
name|'SimpleFactoryCopy'
op|'.'
name|'allIDs'
op|'['
name|'id'
op|']'
op|'='
name|'self'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|createFactoryCopy
dedent|''
dedent|''
name|'def'
name|'createFactoryCopy'
op|'('
name|'state'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Factory of L{SimpleFactoryCopy}, getting a created instance given the\n    C{id} found in C{state}.\n    """'
newline|'\n'
name|'stateId'
op|'='
name|'state'
op|'.'
name|'get'
op|'('
string|'"id"'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'stateId'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'RuntimeError'
op|'('
string|'"factory copy state has no \'id\' member %s"'
op|'%'
nl|'\n'
op|'('
name|'repr'
op|'('
name|'state'
op|')'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'stateId'
name|'in'
name|'SimpleFactoryCopy'
op|'.'
name|'allIDs'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'RuntimeError'
op|'('
string|'"factory class has no ID: %s"'
op|'%'
nl|'\n'
op|'('
name|'SimpleFactoryCopy'
op|'.'
name|'allIDs'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'inst'
op|'='
name|'SimpleFactoryCopy'
op|'.'
name|'allIDs'
op|'['
name|'stateId'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'inst'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'RuntimeError'
op|'('
string|'"factory method found no object with id"'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'inst'
newline|'\n'
nl|'\n'
dedent|''
name|'pb'
op|'.'
name|'setUnjellyableFactoryForClass'
op|'('
name|'SimpleFactoryCopy'
op|','
name|'createFactoryCopy'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NestedCopy
name|'class'
name|'NestedCopy'
op|'('
name|'pb'
op|'.'
name|'Referenceable'
op|')'
op|':'
newline|'\n'
DECL|member|remote_getCopy
indent|'    '
name|'def'
name|'remote_getCopy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'SimpleCopy'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|remote_getFactory
dedent|''
name|'def'
name|'remote_getFactory'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'SimpleFactoryCopy'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleCache
dedent|''
dedent|''
name|'class'
name|'SimpleCache'
op|'('
name|'pb'
op|'.'
name|'Cacheable'
op|')'
op|':'
newline|'\n'
DECL|member|__init___
indent|'    '
name|'def'
name|'__init___'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'x'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'y'
op|'='
op|'{'
string|'"Hello"'
op|':'
string|'"World"'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'z'
op|'='
op|'['
string|"'test'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NestedComplicatedCache
dedent|''
dedent|''
name|'class'
name|'NestedComplicatedCache'
op|'('
name|'pb'
op|'.'
name|'Referenceable'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'c'
op|'='
name|'VeryVeryComplicatedCacheable'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|remote_getCache
dedent|''
name|'def'
name|'remote_getCache'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'c'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VeryVeryComplicatedCacheable
dedent|''
dedent|''
name|'class'
name|'VeryVeryComplicatedCacheable'
op|'('
name|'pb'
op|'.'
name|'Cacheable'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'x'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'y'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'foo'
op|'='
number|'3'
newline|'\n'
nl|'\n'
DECL|member|setFoo4
dedent|''
name|'def'
name|'setFoo4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'foo'
op|'='
number|'4'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'.'
name|'callRemote'
op|'('
string|"'foo'"
op|','
number|'4'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getStateToCacheAndObserveFor
dedent|''
name|'def'
name|'getStateToCacheAndObserveFor'
op|'('
name|'self'
op|','
name|'perspective'
op|','
name|'observer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'observer'
op|'='
name|'observer'
newline|'\n'
name|'return'
op|'{'
string|'"x"'
op|':'
name|'self'
op|'.'
name|'x'
op|','
nl|'\n'
string|'"y"'
op|':'
name|'self'
op|'.'
name|'y'
op|','
nl|'\n'
string|'"foo"'
op|':'
name|'self'
op|'.'
name|'foo'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|stoppedObserving
dedent|''
name|'def'
name|'stoppedObserving'
op|'('
name|'self'
op|','
name|'perspective'
op|','
name|'observer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"stopped observing"'
op|')'
newline|'\n'
name|'observer'
op|'.'
name|'callRemote'
op|'('
string|'"end"'
op|')'
newline|'\n'
name|'if'
name|'observer'
op|'=='
name|'self'
op|'.'
name|'observer'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'observer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RatherBaroqueCache
dedent|''
dedent|''
dedent|''
name|'class'
name|'RatherBaroqueCache'
op|'('
name|'pb'
op|'.'
name|'RemoteCache'
op|')'
op|':'
newline|'\n'
DECL|member|observe_foo
indent|'    '
name|'def'
name|'observe_foo'
op|'('
name|'self'
op|','
name|'newFoo'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'foo'
op|'='
name|'newFoo'
newline|'\n'
nl|'\n'
DECL|member|observe_end
dedent|''
name|'def'
name|'observe_end'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"the end of things"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'pb'
op|'.'
name|'setUnjellyableForClass'
op|'('
name|'VeryVeryComplicatedCacheable'
op|','
name|'RatherBaroqueCache'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleLocalCache
name|'class'
name|'SimpleLocalCache'
op|'('
name|'pb'
op|'.'
name|'RemoteCache'
op|')'
op|':'
newline|'\n'
DECL|member|setCopyableState
indent|'    '
name|'def'
name|'setCopyableState'
op|'('
name|'self'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'update'
op|'('
name|'state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|checkMethod
dedent|''
name|'def'
name|'checkMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'check'
newline|'\n'
nl|'\n'
DECL|member|checkSelf
dedent|''
name|'def'
name|'checkSelf'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|check
dedent|''
name|'def'
name|'check'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'pb'
op|'.'
name|'setUnjellyableForClass'
op|'('
name|'SimpleCache'
op|','
name|'SimpleLocalCache'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NestedCache
name|'class'
name|'NestedCache'
op|'('
name|'pb'
op|'.'
name|'Referenceable'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'x'
op|'='
name|'SimpleCache'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|remote_getCache
dedent|''
name|'def'
name|'remote_getCache'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'self'
op|'.'
name|'x'
op|','
name|'self'
op|'.'
name|'x'
op|']'
newline|'\n'
nl|'\n'
DECL|member|remote_putCache
dedent|''
name|'def'
name|'remote_putCache'
op|'('
name|'self'
op|','
name|'cache'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'self'
op|'.'
name|'x'
name|'is'
name|'cache'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Observable
dedent|''
dedent|''
name|'class'
name|'Observable'
op|'('
name|'pb'
op|'.'
name|'Referenceable'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'observers'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|remote_observe
dedent|''
name|'def'
name|'remote_observe'
op|'('
name|'self'
op|','
name|'obs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'observers'
op|'.'
name|'append'
op|'('
name|'obs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remote_unobserve
dedent|''
name|'def'
name|'remote_unobserve'
op|'('
name|'self'
op|','
name|'obs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'observers'
op|'.'
name|'remove'
op|'('
name|'obs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|notify
dedent|''
name|'def'
name|'notify'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'observer'
name|'in'
name|'self'
op|'.'
name|'observers'
op|':'
newline|'\n'
indent|'            '
name|'observer'
op|'.'
name|'callRemote'
op|'('
string|"'notify'"
op|','
name|'self'
op|','
name|'obj'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DeferredRemote
dedent|''
dedent|''
dedent|''
name|'class'
name|'DeferredRemote'
op|'('
name|'pb'
op|'.'
name|'Referenceable'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'run'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|runMe
dedent|''
name|'def'
name|'runMe'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'run'
op|'='
name|'arg'
newline|'\n'
name|'return'
name|'arg'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|dontRunMe
dedent|''
name|'def'
name|'dontRunMe'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
number|'0'
op|','
string|'"shouldn\'t have been run!"'
newline|'\n'
nl|'\n'
DECL|member|remote_doItLater
dedent|''
name|'def'
name|'remote_doItLater'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a L{Deferred} to be fired on client side. When fired,\n        C{self.runMe} is called.\n        """'
newline|'\n'
name|'d'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'runMe'
op|','
name|'self'
op|'.'
name|'dontRunMe'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'d'
op|'='
name|'d'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Observer
dedent|''
dedent|''
name|'class'
name|'Observer'
op|'('
name|'pb'
op|'.'
name|'Referenceable'
op|')'
op|':'
newline|'\n'
DECL|variable|notified
indent|'    '
name|'notified'
op|'='
number|'0'
newline|'\n'
DECL|variable|obj
name|'obj'
op|'='
name|'None'
newline|'\n'
DECL|member|remote_notify
name|'def'
name|'remote_notify'
op|'('
name|'self'
op|','
name|'other'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'obj'
op|'='
name|'obj'
newline|'\n'
name|'self'
op|'.'
name|'notified'
op|'='
name|'self'
op|'.'
name|'notified'
op|'+'
number|'1'
newline|'\n'
name|'other'
op|'.'
name|'callRemote'
op|'('
string|"'unobserve'"
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NewStyleCopy
dedent|''
dedent|''
name|'class'
name|'NewStyleCopy'
op|'('
name|'pb'
op|'.'
name|'Copyable'
op|','
name|'pb'
op|'.'
name|'RemoteCopy'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'s'
op|'='
name|'s'
newline|'\n'
dedent|''
dedent|''
name|'pb'
op|'.'
name|'setUnjellyableForClass'
op|'('
name|'NewStyleCopy'
op|','
name|'NewStyleCopy'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NewStyleCopy2
name|'class'
name|'NewStyleCopy2'
op|'('
name|'pb'
op|'.'
name|'Copyable'
op|','
name|'pb'
op|'.'
name|'RemoteCopy'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|allocated
indent|'    '
name|'allocated'
op|'='
number|'0'
newline|'\n'
DECL|variable|initialized
name|'initialized'
op|'='
number|'0'
newline|'\n'
DECL|variable|value
name|'value'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|__new__
name|'def'
name|'__new__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'NewStyleCopy2'
op|'.'
name|'allocated'
op|'+='
number|'1'
newline|'\n'
name|'inst'
op|'='
name|'object'
op|'.'
name|'__new__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'value'
op|'='
number|'2'
newline|'\n'
name|'return'
name|'inst'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'NewStyleCopy2'
op|'.'
name|'initialized'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'pb'
op|'.'
name|'setUnjellyableForClass'
op|'('
name|'NewStyleCopy2'
op|','
name|'NewStyleCopy2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NewStyleCacheCopy
name|'class'
name|'NewStyleCacheCopy'
op|'('
name|'pb'
op|'.'
name|'Cacheable'
op|','
name|'pb'
op|'.'
name|'RemoteCache'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|getStateToCacheAndObserveFor
indent|'    '
name|'def'
name|'getStateToCacheAndObserveFor'
op|'('
name|'self'
op|','
name|'perspective'
op|','
name|'observer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__dict__'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'pb'
op|'.'
name|'setUnjellyableForClass'
op|'('
name|'NewStyleCacheCopy'
op|','
name|'NewStyleCacheCopy'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Echoer
name|'class'
name|'Echoer'
op|'('
name|'pb'
op|'.'
name|'Root'
op|')'
op|':'
newline|'\n'
DECL|member|remote_echo
indent|'    '
name|'def'
name|'remote_echo'
op|'('
name|'self'
op|','
name|'st'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'st'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CachedReturner
dedent|''
dedent|''
name|'class'
name|'CachedReturner'
op|'('
name|'pb'
op|'.'
name|'Root'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'cache'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cache'
op|'='
name|'cache'
newline|'\n'
DECL|member|remote_giveMeCache
dedent|''
name|'def'
name|'remote_giveMeCache'
op|'('
name|'self'
op|','
name|'st'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cache'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NewStyleTestCase
dedent|''
dedent|''
name|'class'
name|'NewStyleTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a pb server using L{Echoer} protocol and connect a client to it.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'serverFactory'
op|'='
name|'pb'
op|'.'
name|'PBServerFactory'
op|'('
name|'Echoer'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'wrapper'
op|'='
name|'WrappingFactory'
op|'('
name|'self'
op|'.'
name|'serverFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'wrapper'
op|')'
newline|'\n'
name|'clientFactory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"localhost"'
op|','
name|'self'
op|'.'
name|'server'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
nl|'\n'
name|'clientFactory'
op|')'
newline|'\n'
DECL|function|gotRoot
name|'def'
name|'gotRoot'
op|'('
name|'ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ref'
op|'='
name|'ref'
newline|'\n'
dedent|''
name|'return'
name|'clientFactory'
op|'.'
name|'getRootObject'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'gotRoot'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close client and server connections, reset values of L{NewStyleCopy2}\n        class variables.\n        """'
newline|'\n'
name|'NewStyleCopy2'
op|'.'
name|'allocated'
op|'='
number|'0'
newline|'\n'
name|'NewStyleCopy2'
op|'.'
name|'initialized'
op|'='
number|'0'
newline|'\n'
name|'NewStyleCopy2'
op|'.'
name|'value'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'ref'
op|'.'
name|'broker'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
comment|'# Disconnect any server-side connections too.'
nl|'\n'
name|'for'
name|'proto'
name|'in'
name|'self'
op|'.'
name|'wrapper'
op|'.'
name|'protocols'
op|':'
newline|'\n'
indent|'            '
name|'proto'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'server'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_newStyle
dedent|''
name|'def'
name|'test_newStyle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new style object, send it over the wire, and check the result.\n        """'
newline|'\n'
name|'orig'
op|'='
name|'NewStyleCopy'
op|'('
string|'"value"'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'ref'
op|'.'
name|'callRemote'
op|'('
string|'"echo"'
op|','
name|'orig'
op|')'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'res'
op|','
name|'NewStyleCopy'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'res'
op|'.'
name|'s'
op|','
string|'"value"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'res'
name|'is'
name|'orig'
op|')'
comment|'# no cheating :)'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_alloc
dedent|''
name|'def'
name|'test_alloc'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send a new style object and check the number of allocations.\n        """'
newline|'\n'
name|'orig'
op|'='
name|'NewStyleCopy2'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'NewStyleCopy2'
op|'.'
name|'allocated'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'NewStyleCopy2'
op|'.'
name|'initialized'
op|','
number|'1'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'ref'
op|'.'
name|'callRemote'
op|'('
string|'"echo"'
op|','
name|'orig'
op|')'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
comment|'# receiving the response creates a third one on the way back'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'res'
op|','
name|'NewStyleCopy2'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'res'
op|'.'
name|'value'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'NewStyleCopy2'
op|'.'
name|'allocated'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'NewStyleCopy2'
op|'.'
name|'initialized'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'res'
name|'is'
name|'orig'
op|')'
comment|'# no cheating :)'
newline|'\n'
comment|'# sending the object creates a second one on the far side'
nl|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConnectionNotifyServerFactory
dedent|''
dedent|''
name|'class'
name|'ConnectionNotifyServerFactory'
op|'('
name|'pb'
op|'.'
name|'PBServerFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A server factory which stores the last connection and fires a\n    L{Deferred} on connection made. This factory can handle only one\n    client connection.\n\n    @ivar protocolInstance: the last protocol instance.\n    @type protocolInstance: C{pb.Broker}\n\n    @ivar connectionMade: the deferred fired upon connection.\n    @type connectionMade: C{Deferred}\n    """'
newline|'\n'
DECL|variable|protocolInstance
name|'protocolInstance'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'root'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initialize the factory.\n        """'
newline|'\n'
name|'pb'
op|'.'
name|'PBServerFactory'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'root'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connectionMade'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|clientConnectionMade
dedent|''
name|'def'
name|'clientConnectionMade'
op|'('
name|'self'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store the protocol and fire the connection deferred.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'protocolInstance'
op|'='
name|'protocol'
newline|'\n'
name|'d'
op|','
name|'self'
op|'.'
name|'connectionMade'
op|'='
name|'self'
op|'.'
name|'connectionMade'
op|','
name|'None'
newline|'\n'
name|'if'
name|'d'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NewStyleCachedTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'NewStyleCachedTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a pb server using L{CachedReturner} protocol and connect a\n        client to it.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'orig'
op|'='
name|'NewStyleCacheCopy'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'orig'
op|'.'
name|'s'
op|'='
string|'"value"'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
nl|'\n'
name|'ConnectionNotifyServerFactory'
op|'('
name|'CachedReturner'
op|'('
name|'self'
op|'.'
name|'orig'
op|')'
op|')'
op|')'
newline|'\n'
name|'clientFactory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"localhost"'
op|','
name|'self'
op|'.'
name|'server'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
nl|'\n'
name|'clientFactory'
op|')'
newline|'\n'
DECL|function|gotRoot
name|'def'
name|'gotRoot'
op|'('
name|'ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ref'
op|'='
name|'ref'
newline|'\n'
dedent|''
name|'d1'
op|'='
name|'clientFactory'
op|'.'
name|'getRootObject'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'gotRoot'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'connectionMade'
newline|'\n'
name|'return'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close client and server connections.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'factory'
op|'.'
name|'protocolInstance'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ref'
op|'.'
name|'broker'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'server'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_newStyleCache
dedent|''
name|'def'
name|'test_newStyleCache'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the object from the cache, and checks its properties.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'ref'
op|'.'
name|'callRemote'
op|'('
string|'"giveMeCache"'
op|','
name|'self'
op|'.'
name|'orig'
op|')'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'res'
op|','
name|'NewStyleCacheCopy'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'res'
op|'.'
name|'s'
op|','
string|'"value"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'res'
name|'is'
name|'self'
op|'.'
name|'orig'
op|')'
comment|'# no cheating :)'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BrokerTestCase
dedent|''
dedent|''
name|'class'
name|'BrokerTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|thunkResult
indent|'    '
name|'thunkResult'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|tearDown
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
comment|'# from RemotePublished.getFileName'
nl|'\n'
indent|'            '
name|'os'
op|'.'
name|'unlink'
op|'('
string|"'None-None-TESTING.pub'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|thunkErrorBad
dedent|''
dedent|''
name|'def'
name|'thunkErrorBad'
op|'('
name|'self'
op|','
name|'error'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"This should cause a return value, not %s"'
op|'%'
op|'('
name|'error'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|thunkResultGood
dedent|''
name|'def'
name|'thunkResultGood'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'thunkResult'
op|'='
name|'result'
newline|'\n'
nl|'\n'
DECL|member|thunkErrorGood
dedent|''
name|'def'
name|'thunkErrorGood'
op|'('
name|'self'
op|','
name|'tb'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|thunkResultBad
dedent|''
name|'def'
name|'thunkResultBad'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"This should cause an error, not %s"'
op|'%'
op|'('
name|'result'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reference
dedent|''
name|'def'
name|'test_reference'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|X
name|'class'
name|'X'
op|'('
name|'pb'
op|'.'
name|'Referenceable'
op|')'
op|':'
newline|'\n'
DECL|member|remote_catch
indent|'            '
name|'def'
name|'remote_catch'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'caught'
op|'='
name|'arg'
newline|'\n'
nl|'\n'
DECL|class|Y
dedent|''
dedent|''
name|'class'
name|'Y'
op|'('
name|'pb'
op|'.'
name|'Referenceable'
op|')'
op|':'
newline|'\n'
DECL|member|remote_throw
indent|'            '
name|'def'
name|'remote_throw'
op|'('
name|'self'
op|','
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'a'
op|'.'
name|'callRemote'
op|'('
string|"'catch'"
op|','
name|'b'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"y"'
op|','
name|'Y'
op|'('
op|')'
op|')'
newline|'\n'
name|'y'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"y"'
op|')'
newline|'\n'
name|'x'
op|'='
name|'X'
op|'('
op|')'
newline|'\n'
name|'z'
op|'='
name|'X'
op|'('
op|')'
newline|'\n'
name|'y'
op|'.'
name|'callRemote'
op|'('
string|"'throw'"
op|','
name|'x'
op|','
name|'z'
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'x'
op|'.'
name|'caught'
op|','
name|'z'
op|','
string|'"X should have caught Z"'
op|')'
newline|'\n'
nl|'\n'
comment|'# make sure references to remote methods are equals'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'y'
op|'.'
name|'remoteMethod'
op|'('
string|"'throw'"
op|')'
op|','
name|'y'
op|'.'
name|'remoteMethod'
op|'('
string|"'throw'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_result
dedent|''
name|'def'
name|'test_result'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'for'
name|'x'
op|','
name|'y'
name|'in'
op|'('
name|'c'
op|','
name|'s'
op|')'
op|','
op|'('
name|'s'
op|','
name|'c'
op|')'
op|':'
newline|'\n'
comment|'# test reflexivity'
nl|'\n'
indent|'            '
name|'foo'
op|'='
name|'SimpleRemote'
op|'('
op|')'
newline|'\n'
name|'x'
op|'.'
name|'setNameForLocal'
op|'('
string|'"foo"'
op|','
name|'foo'
op|')'
newline|'\n'
name|'bar'
op|'='
name|'y'
op|'.'
name|'remoteForName'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'expectedThunkResult'
op|'='
number|'8'
newline|'\n'
name|'bar'
op|'.'
name|'callRemote'
op|'('
string|"'thunk'"
op|','
name|'self'
op|'.'
name|'expectedThunkResult'
op|'-'
number|'1'
nl|'\n'
op|')'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'thunkResultGood'
op|','
name|'self'
op|'.'
name|'thunkErrorBad'
op|')'
newline|'\n'
comment|'# Send question.'
nl|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
comment|'# Send response.'
nl|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
comment|"# Shouldn't require any more pumping than that..."
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'thunkResult'
op|','
name|'self'
op|'.'
name|'expectedThunkResult'
op|','
nl|'\n'
string|'"result wasn\'t received."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refcountResult
dedent|''
dedent|''
name|'def'
name|'refcountResult'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'nestedRemote'
op|'='
name|'result'
newline|'\n'
nl|'\n'
DECL|member|test_tooManyRefs
dedent|''
name|'def'
name|'test_tooManyRefs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'e'
op|'='
op|'['
op|']'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'foo'
op|'='
name|'NestedRemote'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"foo"'
op|','
name|'foo'
op|')'
newline|'\n'
name|'x'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'for'
name|'igno'
name|'in'
name|'xrange'
op|'('
name|'pb'
op|'.'
name|'MAX_BROKER_REFS'
op|'+'
number|'10'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'s'
op|'.'
name|'transport'
op|'.'
name|'closed'
name|'or'
name|'c'
op|'.'
name|'transport'
op|'.'
name|'closed'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'x'
op|'.'
name|'callRemote'
op|'('
string|'"getSimple"'
op|')'
op|'.'
name|'addCallbacks'
op|'('
name|'l'
op|'.'
name|'append'
op|','
name|'e'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
dedent|''
name|'expected'
op|'='
op|'('
name|'pb'
op|'.'
name|'MAX_BROKER_REFS'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'s'
op|'.'
name|'transport'
op|'.'
name|'closed'
op|','
string|'"transport was not closed"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'l'
op|')'
op|','
name|'expected'
op|','
nl|'\n'
string|'"expected %s got %s"'
op|'%'
op|'('
name|'expected'
op|','
name|'len'
op|'('
name|'l'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_copy
dedent|''
name|'def'
name|'test_copy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'foo'
op|'='
name|'NestedCopy'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"foo"'
op|','
name|'foo'
op|')'
newline|'\n'
name|'x'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'x'
op|'.'
name|'callRemote'
op|'('
string|"'getCopy'"
nl|'\n'
op|')'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'thunkResultGood'
op|','
name|'self'
op|'.'
name|'thunkErrorBad'
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'thunkResult'
op|'.'
name|'x'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'thunkResult'
op|'.'
name|'y'
op|'['
string|"'Hello'"
op|']'
op|','
string|"'World'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'thunkResult'
op|'.'
name|'z'
op|'['
number|'0'
op|']'
op|','
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_observe
dedent|''
name|'def'
name|'test_observe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# this is really testing the comparison between remote objects, to make'
nl|'\n'
comment|'# sure that you can *UN*observe when you have an observer architecture.'
nl|'\n'
name|'a'
op|'='
name|'Observable'
op|'('
op|')'
newline|'\n'
name|'b'
op|'='
name|'Observer'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"a"'
op|','
name|'a'
op|')'
newline|'\n'
name|'ra'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"a"'
op|')'
newline|'\n'
name|'ra'
op|'.'
name|'callRemote'
op|'('
string|"'observe'"
op|','
name|'b'
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'a'
op|'.'
name|'notify'
op|'('
number|'1'
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'a'
op|'.'
name|'notify'
op|'('
number|'10'
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'b'
op|'.'
name|'obj'
op|','
name|'None'
op|','
string|'"didn\'t notify"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'b'
op|'.'
name|'obj'
op|','
number|'1'
op|','
string|"'notified too much'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_defer
dedent|''
name|'def'
name|'test_defer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'DeferredRemote'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"d"'
op|','
name|'d'
op|')'
newline|'\n'
name|'e'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"d"'
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
op|';'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'e'
op|'.'
name|'callRemote'
op|'('
string|"'doItLater'"
op|')'
op|'.'
name|'addCallback'
op|'('
name|'results'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
op|';'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'d'
op|'.'
name|'run'
op|','
string|'"Deferred method run too early."'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'d'
op|'.'
name|'callback'
op|'('
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'d'
op|'.'
name|'run'
op|','
number|'5'
op|','
string|'"Deferred method run too late."'
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
op|';'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'results'
op|'['
number|'0'
op|']'
op|','
number|'6'
op|','
string|'"Incorrect result."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_refcount
dedent|''
name|'def'
name|'test_refcount'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'foo'
op|'='
name|'NestedRemote'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"foo"'
op|','
name|'foo'
op|')'
newline|'\n'
name|'bar'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'bar'
op|'.'
name|'callRemote'
op|'('
string|"'getSimple'"
nl|'\n'
op|')'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'refcountResult'
op|','
name|'self'
op|'.'
name|'thunkErrorBad'
op|')'
newline|'\n'
nl|'\n'
comment|'# send question'
nl|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
comment|'# send response'
nl|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# delving into internal structures here, because GC is sort of'
nl|'\n'
comment|'# inherently internal.'
nl|'\n'
name|'rluid'
op|'='
name|'self'
op|'.'
name|'nestedRemote'
op|'.'
name|'luid'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'rluid'
op|','
name|'s'
op|'.'
name|'localObjects'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'nestedRemote'
newline|'\n'
comment|'# nudge the gc'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'hexversion'
op|'>='
number|'0x2000000'
name|'and'
name|'os'
op|'.'
name|'name'
op|'!='
string|'"java"'
op|':'
newline|'\n'
indent|'            '
name|'gc'
op|'.'
name|'collect'
op|'('
op|')'
newline|'\n'
comment|"# try to nudge the GC even if we can't really"
nl|'\n'
dedent|''
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'rluid'
op|','
name|'s'
op|'.'
name|'localObjects'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cache
dedent|''
name|'def'
name|'test_cache'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'='
name|'NestedCache'
op|'('
op|')'
newline|'\n'
name|'obj2'
op|'='
name|'NestedComplicatedCache'
op|'('
op|')'
newline|'\n'
name|'vcc'
op|'='
name|'obj2'
op|'.'
name|'c'
newline|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"obj"'
op|','
name|'obj'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"xxx"'
op|','
name|'obj2'
op|')'
newline|'\n'
name|'o2'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"obj"'
op|')'
newline|'\n'
name|'o3'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"xxx"'
op|')'
newline|'\n'
name|'coll'
op|'='
op|'['
op|']'
newline|'\n'
name|'o2'
op|'.'
name|'callRemote'
op|'('
string|'"getCache"'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'coll'
op|'.'
name|'append'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'coll'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'o2'
op|'.'
name|'callRemote'
op|'('
string|'"getCache"'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'coll'
op|'.'
name|'append'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'coll'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'complex'
op|'='
op|'['
op|']'
newline|'\n'
name|'o3'
op|'.'
name|'callRemote'
op|'('
string|'"getCache"'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'complex'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'o3'
op|'.'
name|'callRemote'
op|'('
string|'"getCache"'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'complex'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
comment|"# `worst things first'"
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'complex'
op|'['
number|'0'
op|']'
op|'.'
name|'x'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'complex'
op|'['
number|'0'
op|']'
op|'.'
name|'y'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'complex'
op|'['
number|'0'
op|']'
op|'.'
name|'foo'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
name|'vcc'
op|'.'
name|'setFoo4'
op|'('
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'complex'
op|'['
number|'0'
op|']'
op|'.'
name|'foo'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'coll'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'cp'
op|'='
name|'coll'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'cp'
op|'.'
name|'checkMethod'
op|'('
op|')'
op|'.'
name|'im_self'
op|','
name|'cp'
op|','
nl|'\n'
string|'"potential refcounting issue"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'cp'
op|'.'
name|'checkSelf'
op|'('
op|')'
op|','
name|'cp'
op|','
nl|'\n'
string|'"other potential refcounting issue"'
op|')'
newline|'\n'
name|'col2'
op|'='
op|'['
op|']'
newline|'\n'
name|'o2'
op|'.'
name|'callRemote'
op|'('
string|"'putCache'"
op|','
name|'cp'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'col2'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
comment|'# The objects were the same (testing lcache identity)'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'col2'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
comment|'# test equality of references to methods'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'o2'
op|'.'
name|'remoteMethod'
op|'('
string|'"getCache"'
op|')'
op|','
nl|'\n'
name|'o2'
op|'.'
name|'remoteMethod'
op|'('
string|'"getCache"'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# now, refcounting (similiar to testRefCount)'
nl|'\n'
name|'luid'
op|'='
name|'cp'
op|'.'
name|'luid'
newline|'\n'
name|'baroqueLuid'
op|'='
name|'complex'
op|'['
number|'0'
op|']'
op|'.'
name|'luid'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'luid'
op|','
name|'s'
op|'.'
name|'remotelyCachedObjects'
op|','
nl|'\n'
string|'"remote cache doesn\'t have it"'
op|')'
newline|'\n'
name|'del'
name|'coll'
newline|'\n'
name|'del'
name|'cp'
newline|'\n'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'del'
name|'complex'
newline|'\n'
name|'del'
name|'col2'
newline|'\n'
comment|'# extra nudge...'
nl|'\n'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
comment|'# del vcc.observer'
nl|'\n'
comment|'# nudge the gc'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'hexversion'
op|'>='
number|'0x2000000'
name|'and'
name|'os'
op|'.'
name|'name'
op|'!='
string|'"java"'
op|':'
newline|'\n'
indent|'            '
name|'gc'
op|'.'
name|'collect'
op|'('
op|')'
newline|'\n'
comment|"# try to nudge the GC even if we can't really"
nl|'\n'
dedent|''
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
comment|'# The GC is done with it.'
nl|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'luid'
op|','
name|'s'
op|'.'
name|'remotelyCachedObjects'
op|','
nl|'\n'
string|'"Server still had it after GC"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'luid'
op|','
name|'c'
op|'.'
name|'locallyCachedObjects'
op|','
nl|'\n'
string|'"Client still had it after GC"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'baroqueLuid'
op|','
name|'s'
op|'.'
name|'remotelyCachedObjects'
op|','
nl|'\n'
string|'"Server still had complex after GC"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'baroqueLuid'
op|','
name|'c'
op|'.'
name|'locallyCachedObjects'
op|','
nl|'\n'
string|'"Client still had complex after GC"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'vcc'
op|'.'
name|'observer'
op|','
name|'None'
op|','
string|'"observer was not removed"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_publishable
dedent|''
name|'def'
name|'test_publishable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'unlink'
op|'('
string|"'None-None-TESTING.pub'"
op|')'
comment|'# from RemotePublished.getFileName'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
comment|"# Sometimes it's not there."
newline|'\n'
dedent|''
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'foo'
op|'='
name|'GetPublisher'
op|'('
op|')'
newline|'\n'
comment|'# foo.pub.timestamp = 1.0'
nl|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"foo"'
op|','
name|'foo'
op|')'
newline|'\n'
name|'bar'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'accum'
op|'='
op|'['
op|']'
newline|'\n'
name|'bar'
op|'.'
name|'callRemote'
op|'('
string|"'getPub'"
op|')'
op|'.'
name|'addCallbacks'
op|'('
name|'accum'
op|'.'
name|'append'
op|','
name|'self'
op|'.'
name|'thunkErrorBad'
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'='
name|'accum'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'obj'
op|'.'
name|'activateCalled'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'obj'
op|'.'
name|'isActivated'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'obj'
op|'.'
name|'yayIGotPublished'
op|','
number|'1'
op|')'
newline|'\n'
comment|"# timestamp's dirty, we don't have a cache file"
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'obj'
op|'.'
name|'_wasCleanWhenLoaded'
op|','
number|'0'
op|')'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"foo"'
op|','
name|'foo'
op|')'
newline|'\n'
name|'bar'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'bar'
op|'.'
name|'callRemote'
op|'('
string|"'getPub'"
op|')'
op|'.'
name|'addCallbacks'
op|'('
name|'accum'
op|'.'
name|'append'
op|','
name|'self'
op|'.'
name|'thunkErrorBad'
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'='
name|'accum'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
comment|"# timestamp's clean, our cache file is up-to-date"
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'obj'
op|'.'
name|'_wasCleanWhenLoaded'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|gotCopy
dedent|''
name|'def'
name|'gotCopy'
op|'('
name|'self'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'thunkResult'
op|'='
name|'val'
op|'.'
name|'id'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_factoryCopy
dedent|''
name|'def'
name|'test_factoryCopy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'ID'
op|'='
number|'99'
newline|'\n'
name|'obj'
op|'='
name|'NestedCopy'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"foo"'
op|','
name|'obj'
op|')'
newline|'\n'
name|'x'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'x'
op|'.'
name|'callRemote'
op|'('
string|"'getFactory'"
op|','
name|'ID'
nl|'\n'
op|')'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'gotCopy'
op|','
name|'self'
op|'.'
name|'thunkResultBad'
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'thunkResult'
op|','
name|'ID'
op|','
nl|'\n'
string|'"ID not correct on factory object %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'thunkResult'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|bigString
dedent|''
dedent|''
name|'bigString'
op|'='
string|'"helloworld"'
op|'*'
number|'50'
newline|'\n'
nl|'\n'
DECL|variable|callbackArgs
name|'callbackArgs'
op|'='
name|'None'
newline|'\n'
DECL|variable|callbackKeyword
name|'callbackKeyword'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|finishedCallback
name|'def'
name|'finishedCallback'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'callbackArgs'
op|','
name|'callbackKeyword'
newline|'\n'
name|'callbackArgs'
op|'='
name|'args'
newline|'\n'
name|'callbackKeyword'
op|'='
name|'kw'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Pagerizer
dedent|''
name|'class'
name|'Pagerizer'
op|'('
name|'pb'
op|'.'
name|'Referenceable'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'callback'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'callback'
op|','
name|'self'
op|'.'
name|'args'
op|','
name|'self'
op|'.'
name|'kw'
op|'='
name|'callback'
op|','
name|'args'
op|','
name|'kw'
newline|'\n'
nl|'\n'
DECL|member|remote_getPages
dedent|''
name|'def'
name|'remote_getPages'
op|'('
name|'self'
op|','
name|'collector'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'util'
op|'.'
name|'StringPager'
op|'('
name|'collector'
op|','
name|'bigString'
op|','
number|'100'
op|','
nl|'\n'
name|'self'
op|'.'
name|'callback'
op|','
op|'*'
name|'self'
op|'.'
name|'args'
op|','
op|'**'
name|'self'
op|'.'
name|'kw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
name|'self'
op|'.'
name|'kw'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FilePagerizer
dedent|''
dedent|''
name|'class'
name|'FilePagerizer'
op|'('
name|'pb'
op|'.'
name|'Referenceable'
op|')'
op|':'
newline|'\n'
DECL|variable|pager
indent|'    '
name|'pager'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'filename'
op|','
name|'callback'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'filename'
op|'='
name|'filename'
newline|'\n'
name|'self'
op|'.'
name|'callback'
op|','
name|'self'
op|'.'
name|'args'
op|','
name|'self'
op|'.'
name|'kw'
op|'='
name|'callback'
op|','
name|'args'
op|','
name|'kw'
newline|'\n'
nl|'\n'
DECL|member|remote_getPages
dedent|''
name|'def'
name|'remote_getPages'
op|'('
name|'self'
op|','
name|'collector'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'pager'
op|'='
name|'util'
op|'.'
name|'FilePager'
op|'('
name|'collector'
op|','
name|'file'
op|'('
name|'self'
op|'.'
name|'filename'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'callback'
op|','
op|'*'
name|'self'
op|'.'
name|'args'
op|','
op|'**'
name|'self'
op|'.'
name|'kw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
name|'self'
op|'.'
name|'kw'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PagingTestCase
dedent|''
dedent|''
name|'class'
name|'PagingTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test pb objects sending data by pages.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a file used to test L{util.FilePager}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'fd'
op|'='
name|'file'
op|'('
name|'self'
op|'.'
name|'filename'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'fd'
op|'.'
name|'write'
op|'('
name|'bigString'
op|')'
newline|'\n'
name|'fd'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_pagingWithCallback
dedent|''
name|'def'
name|'test_pagingWithCallback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test L{util.StringPager}, passing a callback to fire when all pages\n        are sent.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"foo"'
op|','
name|'Pagerizer'
op|'('
name|'finishedCallback'
op|','
string|"'hello'"
op|','
name|'value'
op|'='
number|'10'
op|')'
op|')'
newline|'\n'
name|'x'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'util'
op|'.'
name|'getAllPages'
op|'('
name|'x'
op|','
string|'"getPages"'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'l'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'while'
name|'not'
name|'l'
op|':'
newline|'\n'
indent|'            '
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'l'
op|'['
number|'0'
op|']'
op|')'
op|','
name|'bigString'
op|','
nl|'\n'
string|'"Pages received not equal to pages sent!"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'callbackArgs'
op|','
op|'('
string|"'hello'"
op|','
op|')'
op|','
nl|'\n'
string|'"Completed callback not invoked"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'callbackKeyword'
op|','
op|'{'
string|"'value'"
op|':'
number|'10'
op|'}'
op|','
nl|'\n'
string|'"Completed callback not invoked"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_pagingWithoutCallback
dedent|''
name|'def'
name|'test_pagingWithoutCallback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test L{util.StringPager} without a callback.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"foo"'
op|','
name|'Pagerizer'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
name|'x'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'util'
op|'.'
name|'getAllPages'
op|'('
name|'x'
op|','
string|'"getPages"'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'l'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'while'
name|'not'
name|'l'
op|':'
newline|'\n'
indent|'            '
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'l'
op|'['
number|'0'
op|']'
op|')'
op|','
name|'bigString'
op|','
nl|'\n'
string|'"Pages received not equal to pages sent!"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_emptyFilePaging
dedent|''
name|'def'
name|'test_emptyFilePaging'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test L{util.FilePager}, sending an empty file.\n        """'
newline|'\n'
name|'filenameEmpty'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'fd'
op|'='
name|'file'
op|'('
name|'filenameEmpty'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'fd'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'pagerizer'
op|'='
name|'FilePagerizer'
op|'('
name|'filenameEmpty'
op|','
name|'None'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"bar"'
op|','
name|'pagerizer'
op|')'
newline|'\n'
name|'x'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"bar"'
op|')'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'util'
op|'.'
name|'getAllPages'
op|'('
name|'x'
op|','
string|'"getPages"'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'l'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'ttl'
op|'='
number|'10'
newline|'\n'
name|'while'
name|'not'
name|'l'
name|'and'
name|'ttl'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'ttl'
op|'-='
number|'1'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'ttl'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'getAllPages timed out'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'l'
op|'['
number|'0'
op|']'
op|')'
op|','
string|"''"
op|','
nl|'\n'
string|'"Pages received not equal to pages sent!"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_filePagingWithCallback
dedent|''
name|'def'
name|'test_filePagingWithCallback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test L{util.FilePager}, passing a callback to fire when all pages\n        are sent, and verify that the pager doesn\'t keep chunks in memory.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'pagerizer'
op|'='
name|'FilePagerizer'
op|'('
name|'self'
op|'.'
name|'filename'
op|','
name|'finishedCallback'
op|','
nl|'\n'
string|"'frodo'"
op|','
name|'value'
op|'='
number|'9'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"bar"'
op|','
name|'pagerizer'
op|')'
newline|'\n'
name|'x'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"bar"'
op|')'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'util'
op|'.'
name|'getAllPages'
op|'('
name|'x'
op|','
string|'"getPages"'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'l'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'while'
name|'not'
name|'l'
op|':'
newline|'\n'
indent|'            '
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'l'
op|'['
number|'0'
op|']'
op|')'
op|','
name|'bigString'
op|','
nl|'\n'
string|'"Pages received not equal to pages sent!"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'callbackArgs'
op|','
op|'('
string|"'frodo'"
op|','
op|')'
op|','
nl|'\n'
string|'"Completed callback not invoked"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'callbackKeyword'
op|','
op|'{'
string|"'value'"
op|':'
number|'9'
op|'}'
op|','
nl|'\n'
string|'"Completed callback not invoked"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'pagerizer'
op|'.'
name|'pager'
op|'.'
name|'chunks'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_filePagingWithoutCallback
dedent|''
name|'def'
name|'test_filePagingWithoutCallback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test L{util.FilePager} without a callback.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'pagerizer'
op|'='
name|'FilePagerizer'
op|'('
name|'self'
op|'.'
name|'filename'
op|','
name|'None'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"bar"'
op|','
name|'pagerizer'
op|')'
newline|'\n'
name|'x'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"bar"'
op|')'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'util'
op|'.'
name|'getAllPages'
op|'('
name|'x'
op|','
string|'"getPages"'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'l'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'while'
name|'not'
name|'l'
op|':'
newline|'\n'
indent|'            '
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'l'
op|'['
number|'0'
op|']'
op|')'
op|','
name|'bigString'
op|','
nl|'\n'
string|'"Pages received not equal to pages sent!"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'pagerizer'
op|'.'
name|'pager'
op|'.'
name|'chunks'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DumbPublishable
dedent|''
dedent|''
name|'class'
name|'DumbPublishable'
op|'('
name|'publish'
op|'.'
name|'Publishable'
op|')'
op|':'
newline|'\n'
DECL|member|getStateToPublish
indent|'    '
name|'def'
name|'getStateToPublish'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|'"yayIGotPublished"'
op|':'
number|'1'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DumbPub
dedent|''
dedent|''
name|'class'
name|'DumbPub'
op|'('
name|'publish'
op|'.'
name|'RemotePublished'
op|')'
op|':'
newline|'\n'
DECL|member|activated
indent|'    '
name|'def'
name|'activated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'activateCalled'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GetPublisher
dedent|''
dedent|''
name|'class'
name|'GetPublisher'
op|'('
name|'pb'
op|'.'
name|'Referenceable'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'pub'
op|'='
name|'DumbPublishable'
op|'('
string|'"TESTING"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remote_getPub
dedent|''
name|'def'
name|'remote_getPub'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'pub'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'pb'
op|'.'
name|'setUnjellyableForClass'
op|'('
name|'DumbPublishable'
op|','
name|'DumbPub'
op|')'
newline|'\n'
nl|'\n'
DECL|class|DisconnectionTestCase
name|'class'
name|'DisconnectionTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test disconnection callbacks.\n    """'
newline|'\n'
nl|'\n'
DECL|member|error
name|'def'
name|'error'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'RuntimeError'
op|'('
string|'"I shouldn\'t have been called: %s"'
op|'%'
op|'('
name|'args'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|gotDisconnected
dedent|''
name|'def'
name|'gotDisconnected'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called on broker disconnect.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'gotCallback'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|objectDisconnected
dedent|''
name|'def'
name|'objectDisconnected'
op|'('
name|'self'
op|','
name|'o'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called on RemoteReference disconnect.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'o'
op|','
name|'self'
op|'.'
name|'remoteObject'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'objectCallback'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|test_badSerialization
dedent|''
name|'def'
name|'test_badSerialization'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"o"'
op|','
name|'BadCopySet'
op|'('
op|')'
op|')'
newline|'\n'
name|'g'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"o"'
op|')'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'g'
op|'.'
name|'callRemote'
op|'('
string|'"setBadCopy"'
op|','
name|'BadCopyable'
op|'('
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'l'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'l'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disconnection
dedent|''
name|'def'
name|'test_disconnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|','
name|'s'
op|','
name|'pump'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setNameForLocal'
op|'('
string|'"o"'
op|','
name|'SimpleRemote'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# get a client reference to server object'
nl|'\n'
name|'r'
op|'='
name|'c'
op|'.'
name|'remoteForName'
op|'('
string|'"o"'
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
name|'pump'
op|'.'
name|'pump'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# register and then unregister disconnect callbacks'
nl|'\n'
comment|'# making sure they get unregistered'
nl|'\n'
name|'c'
op|'.'
name|'notifyOnDisconnect'
op|'('
name|'self'
op|'.'
name|'error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'self'
op|'.'
name|'error'
op|','
name|'c'
op|'.'
name|'disconnects'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'dontNotifyOnDisconnect'
op|'('
name|'self'
op|'.'
name|'error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'self'
op|'.'
name|'error'
op|','
name|'c'
op|'.'
name|'disconnects'
op|')'
newline|'\n'
nl|'\n'
name|'r'
op|'.'
name|'notifyOnDisconnect'
op|'('
name|'self'
op|'.'
name|'error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'r'
op|'.'
name|'_disconnected'
op|','
name|'c'
op|'.'
name|'disconnects'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'self'
op|'.'
name|'error'
op|','
name|'r'
op|'.'
name|'disconnectCallbacks'
op|')'
newline|'\n'
name|'r'
op|'.'
name|'dontNotifyOnDisconnect'
op|'('
name|'self'
op|'.'
name|'error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'r'
op|'.'
name|'_disconnected'
op|','
name|'c'
op|'.'
name|'disconnects'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'self'
op|'.'
name|'error'
op|','
name|'r'
op|'.'
name|'disconnectCallbacks'
op|')'
newline|'\n'
nl|'\n'
comment|'# register disconnect callbacks'
nl|'\n'
name|'c'
op|'.'
name|'notifyOnDisconnect'
op|'('
name|'self'
op|'.'
name|'gotDisconnected'
op|')'
newline|'\n'
name|'r'
op|'.'
name|'notifyOnDisconnect'
op|'('
name|'self'
op|'.'
name|'objectDisconnected'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'remoteObject'
op|'='
name|'r'
newline|'\n'
nl|'\n'
comment|'# disconnect'
nl|'\n'
name|'c'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'main'
op|'.'
name|'CONNECTION_DONE'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'gotCallback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'objectCallback'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FreakOut
dedent|''
dedent|''
name|'class'
name|'FreakOut'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BadCopyable
dedent|''
name|'class'
name|'BadCopyable'
op|'('
name|'pb'
op|'.'
name|'Copyable'
op|')'
op|':'
newline|'\n'
DECL|member|getStateToCopyFor
indent|'    '
name|'def'
name|'getStateToCopyFor'
op|'('
name|'self'
op|','
name|'p'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'FreakOut'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BadCopySet
dedent|''
dedent|''
name|'class'
name|'BadCopySet'
op|'('
name|'pb'
op|'.'
name|'Referenceable'
op|')'
op|':'
newline|'\n'
DECL|member|remote_setBadCopy
indent|'    '
name|'def'
name|'remote_setBadCopy'
op|'('
name|'self'
op|','
name|'bc'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LocalRemoteTest
dedent|''
dedent|''
name|'class'
name|'LocalRemoteTest'
op|'('
name|'util'
op|'.'
name|'LocalAsRemote'
op|')'
op|':'
newline|'\n'
DECL|variable|reportAllTracebacks
indent|'    '
name|'reportAllTracebacks'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|sync_add1
name|'def'
name|'sync_add1'
op|'('
name|'self'
op|','
name|'x'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'x'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|async_add
dedent|''
name|'def'
name|'async_add'
op|'('
name|'self'
op|','
name|'x'
op|'='
number|'0'
op|','
name|'y'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'x'
op|'+'
name|'y'
newline|'\n'
nl|'\n'
DECL|member|async_fail
dedent|''
name|'def'
name|'async_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'RuntimeError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyPerspective
dedent|''
dedent|''
name|'class'
name|'MyPerspective'
op|'('
name|'pb'
op|'.'
name|'Avatar'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @ivar loggedIn: set to C{True} when the avatar is logged in.\n    @type loggedIn: C{bool}\n\n    @ivar loggedOut: set to C{True} when the avatar is logged out.\n    @type loggedOut: C{bool}\n    """'
newline|'\n'
name|'implements'
op|'('
name|'pb'
op|'.'
name|'IPerspective'
op|')'
newline|'\n'
nl|'\n'
name|'loggedIn'
op|'='
name|'loggedOut'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'avatarId'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'avatarId'
op|'='
name|'avatarId'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|perspective_getAvatarId
dedent|''
name|'def'
name|'perspective_getAvatarId'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the avatar identifier which was used to access this avatar.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'avatarId'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|perspective_getViewPoint
dedent|''
name|'def'
name|'perspective_getViewPoint'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'MyView'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|perspective_add
dedent|''
name|'def'
name|'perspective_add'
op|'('
name|'self'
op|','
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add the given objects and return the result.  This is a method\n        unavailable on L{Echoer}, so it can only be invoked by authenticated\n        users who received their avatar from L{TestRealm}.\n        """'
newline|'\n'
name|'return'
name|'a'
op|'+'
name|'b'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|logout
dedent|''
name|'def'
name|'logout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loggedOut'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestRealm
dedent|''
dedent|''
name|'class'
name|'TestRealm'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A realm which repeatedly gives out a single instance of L{MyPerspective}\n    for non-anonymous logins and which gives out a new instance of L{Echoer}\n    for each anonymous login.\n\n    @ivar lastPerspective: The L{MyPerspective} most recently created and\n        returned from C{requestAvatar}.\n\n    @ivar perspectiveFactory: A one-argument callable which will be used to\n        create avatars to be returned from C{requestAvatar}.\n    """'
newline|'\n'
DECL|variable|perspectiveFactory
name|'perspectiveFactory'
op|'='
name|'MyPerspective'
newline|'\n'
nl|'\n'
DECL|variable|lastPerspective
name|'lastPerspective'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|requestAvatar
name|'def'
name|'requestAvatar'
op|'('
name|'self'
op|','
name|'avatarId'
op|','
name|'mind'
op|','
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that the mind and interface supplied have the expected values\n        (this should really be done somewhere else, like inside a test method)\n        and return an avatar appropriate for the given identifier.\n        """'
newline|'\n'
name|'assert'
name|'interface'
op|'=='
name|'pb'
op|'.'
name|'IPerspective'
newline|'\n'
name|'assert'
name|'mind'
op|'=='
string|'"BRAINS!"'
newline|'\n'
name|'if'
name|'avatarId'
name|'is'
name|'checkers'
op|'.'
name|'ANONYMOUS'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'pb'
op|'.'
name|'IPerspective'
op|','
name|'Echoer'
op|'('
op|')'
op|','
name|'lambda'
op|':'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'lastPerspective'
op|'='
name|'self'
op|'.'
name|'perspectiveFactory'
op|'('
name|'avatarId'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lastPerspective'
op|'.'
name|'loggedIn'
op|'='
name|'True'
newline|'\n'
name|'return'
op|'('
nl|'\n'
name|'pb'
op|'.'
name|'IPerspective'
op|','
name|'self'
op|'.'
name|'lastPerspective'
op|','
nl|'\n'
name|'self'
op|'.'
name|'lastPerspective'
op|'.'
name|'logout'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyView
dedent|''
dedent|''
dedent|''
name|'class'
name|'MyView'
op|'('
name|'pb'
op|'.'
name|'Viewable'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|view_check
indent|'    '
name|'def'
name|'view_check'
op|'('
name|'self'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'isinstance'
op|'('
name|'user'
op|','
name|'MyPerspective'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NewCredTestCase
dedent|''
dedent|''
name|'class'
name|'NewCredTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests related to the L{twisted.cred} support in PB.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a portal with no checkers and wrap it around a simple test\n        realm.  Set up a PB server on a TCP port which serves perspectives\n        using that portal.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'realm'
op|'='
name|'TestRealm'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'='
name|'portal'
op|'.'
name|'Portal'
op|'('
name|'self'
op|'.'
name|'realm'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'='
name|'ConnectionNotifyServerFactory'
op|'('
name|'self'
op|'.'
name|'portal'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'factory'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'portno'
op|'='
name|'self'
op|'.'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Shut down the TCP port created by L{setUp}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'port'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getFactoryAndRootObject
dedent|''
name|'def'
name|'getFactoryAndRootObject'
op|'('
name|'self'
op|','
name|'clientFactory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a connection to the test server.\n\n        @param clientFactory: the factory class used to create the connection.\n\n        @return: a tuple (C{factory}, C{deferred}), where factory is an\n            instance of C{clientFactory} and C{deferred} the L{Deferred} firing\n            with the PB root object.\n        """'
newline|'\n'
name|'factory'
op|'='
name|'clientFactory'
op|'('
op|')'
newline|'\n'
name|'rootObjDeferred'
op|'='
name|'factory'
op|'.'
name|'getRootObject'
op|'('
op|')'
newline|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|"'127.0.0.1'"
op|','
name|'self'
op|'.'
name|'portno'
op|','
name|'factory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
name|'return'
name|'factory'
op|','
name|'rootObjDeferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getRootObject
dedent|''
name|'def'
name|'test_getRootObject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert only that L{PBClientFactory.getRootObject}\'s Deferred fires with\n        a L{RemoteReference}.\n        """'
newline|'\n'
name|'factory'
op|','
name|'rootObjDeferred'
op|'='
name|'self'
op|'.'
name|'getFactoryAndRootObject'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|gotRootObject
name|'def'
name|'gotRootObject'
op|'('
name|'rootObj'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'rootObj'
op|','
name|'pb'
op|'.'
name|'RemoteReference'
op|')'
newline|'\n'
name|'disconnectedDeferred'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'rootObj'
op|'.'
name|'notifyOnDisconnect'
op|'('
name|'disconnectedDeferred'
op|'.'
name|'callback'
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'return'
name|'disconnectedDeferred'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'rootObjDeferred'
op|'.'
name|'addCallback'
op|'('
name|'gotRootObject'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_deadReferenceError
dedent|''
name|'def'
name|'test_deadReferenceError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that when a connection is lost, calling a method on a\n        RemoteReference obtained from it raises DeadReferenceError.\n        """'
newline|'\n'
name|'factory'
op|','
name|'rootObjDeferred'
op|'='
name|'self'
op|'.'
name|'getFactoryAndRootObject'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|gotRootObject
name|'def'
name|'gotRootObject'
op|'('
name|'rootObj'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'disconnectedDeferred'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'rootObj'
op|'.'
name|'notifyOnDisconnect'
op|'('
name|'disconnectedDeferred'
op|'.'
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lostConnection
name|'def'
name|'lostConnection'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'pb'
op|'.'
name|'DeadReferenceError'
op|','
nl|'\n'
name|'rootObj'
op|'.'
name|'callRemote'
op|','
string|"'method'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'disconnectedDeferred'
op|'.'
name|'addCallback'
op|'('
name|'lostConnection'
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'return'
name|'disconnectedDeferred'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'rootObjDeferred'
op|'.'
name|'addCallback'
op|'('
name|'gotRootObject'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_clientConnectionLost
dedent|''
name|'def'
name|'test_clientConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that if the L{reconnecting} flag is passed with a True value then\n        a remote call made from a disconnection notification callback gets a\n        result successfully.\n        """'
newline|'\n'
DECL|class|ReconnectOnce
name|'class'
name|'ReconnectOnce'
op|'('
name|'pb'
op|'.'
name|'PBClientFactory'
op|')'
op|':'
newline|'\n'
DECL|variable|reconnectedAlready
indent|'            '
name|'reconnectedAlready'
op|'='
name|'False'
newline|'\n'
DECL|member|clientConnectionLost
name|'def'
name|'clientConnectionLost'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'reconnecting'
op|'='
name|'not'
name|'self'
op|'.'
name|'reconnectedAlready'
newline|'\n'
name|'self'
op|'.'
name|'reconnectedAlready'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'reconnecting'
op|':'
newline|'\n'
indent|'                    '
name|'connector'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'pb'
op|'.'
name|'PBClientFactory'
op|'.'
name|'clientConnectionLost'
op|'('
nl|'\n'
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|','
name|'reconnecting'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'factory'
op|','
name|'rootObjDeferred'
op|'='
name|'self'
op|'.'
name|'getFactoryAndRootObject'
op|'('
name|'ReconnectOnce'
op|')'
newline|'\n'
nl|'\n'
DECL|function|gotRootObject
name|'def'
name|'gotRootObject'
op|'('
name|'rootObj'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'rootObj'
op|','
name|'pb'
op|'.'
name|'RemoteReference'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'rootObj'
op|'.'
name|'notifyOnDisconnect'
op|'('
name|'d'
op|'.'
name|'callback'
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|disconnected
name|'def'
name|'disconnected'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'='
name|'factory'
op|'.'
name|'getRootObject'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|gotAnotherRootObject
name|'def'
name|'gotAnotherRootObject'
op|'('
name|'anotherRootObj'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'anotherRootObj'
op|','
name|'pb'
op|'.'
name|'RemoteReference'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'anotherRootObj'
op|'.'
name|'notifyOnDisconnect'
op|'('
name|'d'
op|'.'
name|'callback'
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'gotAnotherRootObject'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'disconnected'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'rootObjDeferred'
op|'.'
name|'addCallback'
op|'('
name|'gotRootObject'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_immediateClose
dedent|''
name|'def'
name|'test_immediateClose'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that if a Broker loses its connection without receiving any bytes,\n        it doesn\'t raise any exceptions or log any errors.\n        """'
newline|'\n'
name|'serverProto'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
op|'('
string|"'127.0.0.1'"
op|','
number|'12345'
op|')'
op|')'
newline|'\n'
name|'serverProto'
op|'.'
name|'makeConnection'
op|'('
name|'protocol'
op|'.'
name|'FileWrapper'
op|'('
name|'StringIO'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'serverProto'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'main'
op|'.'
name|'CONNECTION_DONE'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_loginConnectionRefused
dedent|''
name|'def'
name|'test_loginConnectionRefused'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{PBClientFactory.login} returns a L{Deferred} which is errbacked\n        with the L{ConnectionRefusedError} if the underlying connection is\n        refused.\n        """'
newline|'\n'
name|'clientFactory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|'('
op|')'
newline|'\n'
name|'loginDeferred'
op|'='
name|'clientFactory'
op|'.'
name|'login'
op|'('
nl|'\n'
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|'"foo"'
op|','
string|'"bar"'
op|')'
op|')'
newline|'\n'
name|'clientFactory'
op|'.'
name|'clientConnectionFailed'
op|'('
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'failure'
op|'.'
name|'Failure'
op|'('
nl|'\n'
name|'ConnectionRefusedError'
op|'('
string|'"Test simulated refused connection"'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'loginDeferred'
op|','
name|'ConnectionRefusedError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_disconnect
dedent|''
name|'def'
name|'_disconnect'
op|'('
name|'self'
op|','
name|'ignore'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Helper method disconnecting the given client factory and returning a\n        C{Deferred} that will fire when the server connection has noticed the\n        disconnection.\n        """'
newline|'\n'
name|'disconnectedDeferred'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'protocolInstance'
op|'.'
name|'notifyOnDisconnect'
op|'('
nl|'\n'
name|'lambda'
op|':'
name|'disconnectedDeferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'return'
name|'disconnectedDeferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_loginLogout
dedent|''
name|'def'
name|'test_loginLogout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that login can be performed with IUsernamePassword credentials and\n        that when the connection is dropped the avatar is logged out.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
nl|'\n'
name|'checkers'
op|'.'
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
name|'user'
op|'='
string|"'pass'"
op|')'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|'('
op|')'
newline|'\n'
name|'creds'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|'"user"'
op|','
string|'"pass"'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE: real code probably won't need anything where we have the"
nl|'\n'
comment|'# "BRAINS!" argument, passing None is fine. We just do it here to'
nl|'\n'
comment|'# test that it is being passed. It is used to give additional info to'
nl|'\n'
comment|"# the realm to aid perspective creation, if you don't need that,"
nl|'\n'
comment|'# ignore it.'
nl|'\n'
name|'mind'
op|'='
string|'"BRAINS!"'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'factory'
op|'.'
name|'login'
op|'('
name|'creds'
op|','
name|'mind'
op|')'
newline|'\n'
DECL|function|cbLogin
name|'def'
name|'cbLogin'
op|'('
name|'perspective'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'realm'
op|'.'
name|'lastPerspective'
op|'.'
name|'loggedIn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'perspective'
op|','
name|'pb'
op|'.'
name|'RemoteReference'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_disconnect'
op|'('
name|'None'
op|','
name|'factory'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbLogin'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbLogout
name|'def'
name|'cbLogout'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'realm'
op|'.'
name|'lastPerspective'
op|'.'
name|'loggedOut'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbLogout'
op|')'
newline|'\n'
nl|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'self'
op|'.'
name|'portno'
op|','
name|'factory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_logoutAfterDecref
dedent|''
name|'def'
name|'test_logoutAfterDecref'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a L{RemoteReference} to an L{IPerspective} avatar is decrefed and\n        there remain no other references to the avatar on the server, the\n        avatar is garbage collected and the logout method called.\n        """'
newline|'\n'
name|'loggedOut'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|EventPerspective
name|'class'
name|'EventPerspective'
op|'('
name|'pb'
op|'.'
name|'Avatar'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            An avatar which fires a Deferred when it is logged out.\n            """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'avatarId'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|logout
dedent|''
name|'def'
name|'logout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'loggedOut'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'realm'
op|'.'
name|'perspectiveFactory'
op|'='
name|'EventPerspective'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
nl|'\n'
name|'checkers'
op|'.'
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
name|'foo'
op|'='
string|"'bar'"
op|')'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'factory'
op|'.'
name|'login'
op|'('
nl|'\n'
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|')'
op|','
string|'"BRAINS!"'
op|')'
newline|'\n'
DECL|function|cbLoggedIn
name|'def'
name|'cbLoggedIn'
op|'('
name|'avatar'
op|')'
op|':'
newline|'\n'
comment|'# Just wait for the logout to happen, as it should since the'
nl|'\n'
comment|'# reference to the avatar will shortly no longer exists.'
nl|'\n'
indent|'            '
name|'return'
name|'loggedOut'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbLoggedIn'
op|')'
newline|'\n'
DECL|function|cbLoggedOut
name|'def'
name|'cbLoggedOut'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
comment|"# Verify that the server broker's _localCleanup dict isn't growing"
nl|'\n'
comment|'# without bound.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'protocolInstance'
op|'.'
name|'_localCleanup'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbLoggedOut'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_disconnect'
op|','
name|'factory'
op|')'
newline|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'self'
op|'.'
name|'portno'
op|','
name|'factory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_concurrentLogin
dedent|''
name|'def'
name|'test_concurrentLogin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Two different correct login attempts can be made on the same root\n        object at the same time and produce two different resulting avatars.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
nl|'\n'
name|'checkers'
op|'.'
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
nl|'\n'
name|'foo'
op|'='
string|"'bar'"
op|','
name|'baz'
op|'='
string|"'quux'"
op|')'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'firstLogin'
op|'='
name|'factory'
op|'.'
name|'login'
op|'('
nl|'\n'
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|')'
op|','
string|'"BRAINS!"'
op|')'
newline|'\n'
name|'secondLogin'
op|'='
name|'factory'
op|'.'
name|'login'
op|'('
nl|'\n'
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'baz'"
op|','
string|"'quux'"
op|')'
op|','
string|'"BRAINS!"'
op|')'
newline|'\n'
name|'d'
op|'='
name|'gatherResults'
op|'('
op|'['
name|'firstLogin'
op|','
name|'secondLogin'
op|']'
op|')'
newline|'\n'
DECL|function|cbLoggedIn
name|'def'
name|'cbLoggedIn'
op|'('
op|'('
name|'first'
op|','
name|'second'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'first'
op|'.'
name|'callRemote'
op|'('
string|"'getAvatarId'"
op|')'
op|','
nl|'\n'
name|'second'
op|'.'
name|'callRemote'
op|'('
string|"'getAvatarId'"
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbLoggedIn'
op|')'
newline|'\n'
DECL|function|cbAvatarIds
name|'def'
name|'cbAvatarIds'
op|'('
op|'('
name|'first'
op|','
name|'second'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'first'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'second'
op|','
string|"'baz'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbAvatarIds'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_disconnect'
op|','
name|'factory'
op|')'
newline|'\n'
nl|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|"'127.0.0.1'"
op|','
name|'self'
op|'.'
name|'portno'
op|','
name|'factory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_badUsernamePasswordLogin
dedent|''
name|'def'
name|'test_badUsernamePasswordLogin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a login attempt with an invalid user or invalid password\n        fails in the appropriate way.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
nl|'\n'
name|'checkers'
op|'.'
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
name|'user'
op|'='
string|"'pass'"
op|')'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'firstLogin'
op|'='
name|'factory'
op|'.'
name|'login'
op|'('
nl|'\n'
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'nosuchuser'"
op|','
string|"'pass'"
op|')'
op|')'
newline|'\n'
name|'secondLogin'
op|'='
name|'factory'
op|'.'
name|'login'
op|'('
nl|'\n'
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'user'"
op|','
string|"'wrongpass'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'firstLogin'
op|','
name|'UnauthorizedLogin'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'secondLogin'
op|','
name|'UnauthorizedLogin'
op|')'
newline|'\n'
name|'d'
op|'='
name|'gatherResults'
op|'('
op|'['
name|'firstLogin'
op|','
name|'secondLogin'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cleanup
name|'def'
name|'cleanup'
op|'('
name|'ignore'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'UnauthorizedLogin'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_disconnect'
op|'('
name|'None'
op|','
name|'factory'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cleanup'
op|')'
newline|'\n'
nl|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'self'
op|'.'
name|'portno'
op|','
name|'factory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_anonymousLogin
dedent|''
name|'def'
name|'test_anonymousLogin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that a PB server using a portal configured with an checker which\n        allows IAnonymous credentials can be logged into using IAnonymous\n        credentials.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'checkers'
op|'.'
name|'AllowAnonymousAccess'
op|'('
op|')'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'factory'
op|'.'
name|'login'
op|'('
name|'credentials'
op|'.'
name|'Anonymous'
op|'('
op|')'
op|','
string|'"BRAINS!"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbLoggedIn
name|'def'
name|'cbLoggedIn'
op|'('
name|'perspective'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'perspective'
op|'.'
name|'callRemote'
op|'('
string|"'echo'"
op|','
number|'123'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbLoggedIn'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
number|'123'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_disconnect'
op|','
name|'factory'
op|')'
newline|'\n'
nl|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'self'
op|'.'
name|'portno'
op|','
name|'factory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_anonymousLoginNotPermitted
dedent|''
name|'def'
name|'test_anonymousLoginNotPermitted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that without an anonymous checker set up, anonymous login is\n        rejected.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
nl|'\n'
name|'checkers'
op|'.'
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
name|'user'
op|'='
string|"'pass'"
op|')'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'factory'
op|'.'
name|'login'
op|'('
name|'credentials'
op|'.'
name|'Anonymous'
op|'('
op|')'
op|','
string|'"BRAINS!"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'UnhandledCredentials'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cleanup
name|'def'
name|'cleanup'
op|'('
name|'ignore'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'UnhandledCredentials'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_disconnect'
op|'('
name|'None'
op|','
name|'factory'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cleanup'
op|')'
newline|'\n'
nl|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|"'127.0.0.1'"
op|','
name|'self'
op|'.'
name|'portno'
op|','
name|'factory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_anonymousLoginWithMultipleCheckers
dedent|''
name|'def'
name|'test_anonymousLoginWithMultipleCheckers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like L{test_anonymousLogin} but against a portal with a checker for\n        both IAnonymous and IUsernamePassword.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'checkers'
op|'.'
name|'AllowAnonymousAccess'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
nl|'\n'
name|'checkers'
op|'.'
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
name|'user'
op|'='
string|"'pass'"
op|')'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'factory'
op|'.'
name|'login'
op|'('
name|'credentials'
op|'.'
name|'Anonymous'
op|'('
op|')'
op|','
string|'"BRAINS!"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbLogin
name|'def'
name|'cbLogin'
op|'('
name|'perspective'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'perspective'
op|'.'
name|'callRemote'
op|'('
string|"'echo'"
op|','
number|'123'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbLogin'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
number|'123'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_disconnect'
op|','
name|'factory'
op|')'
newline|'\n'
nl|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|"'127.0.0.1'"
op|','
name|'self'
op|'.'
name|'portno'
op|','
name|'factory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_authenticatedLoginWithMultipleCheckers
dedent|''
name|'def'
name|'test_authenticatedLoginWithMultipleCheckers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like L{test_anonymousLoginWithMultipleCheckers} but check that\n        username/password authentication works.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'checkers'
op|'.'
name|'AllowAnonymousAccess'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
nl|'\n'
name|'checkers'
op|'.'
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
name|'user'
op|'='
string|"'pass'"
op|')'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'factory'
op|'.'
name|'login'
op|'('
nl|'\n'
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'user'"
op|','
string|"'pass'"
op|')'
op|','
string|'"BRAINS!"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbLogin
name|'def'
name|'cbLogin'
op|'('
name|'perspective'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'perspective'
op|'.'
name|'callRemote'
op|'('
string|"'add'"
op|','
number|'100'
op|','
number|'23'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbLogin'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
number|'123'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_disconnect'
op|','
name|'factory'
op|')'
newline|'\n'
nl|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|"'127.0.0.1'"
op|','
name|'self'
op|'.'
name|'portno'
op|','
name|'factory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_view
dedent|''
name|'def'
name|'test_view'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that a viewpoint can be retrieved after authenticating with\n        cred.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
nl|'\n'
name|'checkers'
op|'.'
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
name|'user'
op|'='
string|"'pass'"
op|')'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'factory'
op|'.'
name|'login'
op|'('
nl|'\n'
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|'"user"'
op|','
string|'"pass"'
op|')'
op|','
string|'"BRAINS!"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbLogin
name|'def'
name|'cbLogin'
op|'('
name|'perspective'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'perspective'
op|'.'
name|'callRemote'
op|'('
string|'"getViewPoint"'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbLogin'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbView
name|'def'
name|'cbView'
op|'('
name|'viewpoint'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'viewpoint'
op|'.'
name|'callRemote'
op|'('
string|'"check"'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbView'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertTrue'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_disconnect'
op|','
name|'factory'
op|')'
newline|'\n'
nl|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'self'
op|'.'
name|'portno'
op|','
name|'factory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NonSubclassingPerspective
dedent|''
dedent|''
name|'class'
name|'NonSubclassingPerspective'
op|':'
newline|'\n'
indent|'    '
name|'implements'
op|'('
name|'pb'
op|'.'
name|'IPerspective'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'avatarId'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# IPerspective implementation'
nl|'\n'
DECL|member|perspectiveMessageReceived
dedent|''
name|'def'
name|'perspectiveMessageReceived'
op|'('
name|'self'
op|','
name|'broker'
op|','
name|'message'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
name|'broker'
op|'.'
name|'unserialize'
op|'('
name|'args'
op|','
name|'self'
op|')'
newline|'\n'
name|'kwargs'
op|'='
name|'broker'
op|'.'
name|'unserialize'
op|'('
name|'kwargs'
op|','
name|'self'
op|')'
newline|'\n'
name|'return'
name|'broker'
op|'.'
name|'serialize'
op|'('
op|'('
name|'message'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Methods required by TestRealm'
nl|'\n'
DECL|member|logout
dedent|''
name|'def'
name|'logout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'loggedOut'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NSPTestCase
dedent|''
dedent|''
name|'class'
name|'NSPTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for authentication against a realm where the L{IPerspective}\n    implementation is not a subclass of L{Avatar}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'realm'
op|'='
name|'TestRealm'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'realm'
op|'.'
name|'perspectiveFactory'
op|'='
name|'NonSubclassingPerspective'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'='
name|'portal'
op|'.'
name|'Portal'
op|'('
name|'self'
op|'.'
name|'realm'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checker'
op|'='
name|'checkers'
op|'.'
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checker'
op|'.'
name|'addUser'
op|'('
string|'"user"'
op|','
string|'"pass"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'self'
op|'.'
name|'checker'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'='
name|'WrappingFactory'
op|'('
name|'pb'
op|'.'
name|'PBServerFactory'
op|'('
name|'self'
op|'.'
name|'portal'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'factory'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'portno'
op|'='
name|'self'
op|'.'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_NSP
dedent|''
name|'def'
name|'test_NSP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An L{IPerspective} implementation which does not subclass\n        L{Avatar} can expose remote methods for the client to call.\n        """'
newline|'\n'
name|'factory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'factory'
op|'.'
name|'login'
op|'('
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'user'"
op|','
string|"'pass'"
op|')'
op|','
nl|'\n'
string|'"BRAINS!"'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|"'127.0.0.1'"
op|','
name|'self'
op|'.'
name|'portno'
op|','
name|'factory'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'p'
op|':'
name|'p'
op|'.'
name|'callRemote'
op|'('
string|"'ANYTHING'"
op|','
string|"'here'"
op|','
name|'bar'
op|'='
string|"'baz'"
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
nl|'\n'
op|'('
string|"'ANYTHING'"
op|','
op|'('
string|"'here'"
op|','
op|')'
op|','
op|'{'
string|"'bar'"
op|':'
string|"'baz'"
op|'}'
op|')'
op|')'
newline|'\n'
DECL|function|cleanup
name|'def'
name|'cleanup'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'factory'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'for'
name|'p'
name|'in'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'protocols'
op|':'
newline|'\n'
indent|'                '
name|'p'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cleanup'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IForwarded
dedent|''
dedent|''
name|'class'
name|'IForwarded'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Interface used for testing L{util.LocalAsyncForwarder}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|forwardMe
name|'def'
name|'forwardMe'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Simple synchronous method.\n        """'
newline|'\n'
nl|'\n'
DECL|member|forwardDeferred
dedent|''
name|'def'
name|'forwardDeferred'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Simple asynchronous method.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Forwarded
dedent|''
dedent|''
name|'class'
name|'Forwarded'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test implementation of L{IForwarded}.\n\n    @ivar forwarded: set if C{forwardMe} is called.\n    @type forwarded: C{bool}\n    @ivar unforwarded: set if C{dontForwardMe} is called.\n    @type unforwarded: C{bool}\n    """'
newline|'\n'
name|'implements'
op|'('
name|'IForwarded'
op|')'
newline|'\n'
DECL|variable|forwarded
name|'forwarded'
op|'='
name|'False'
newline|'\n'
DECL|variable|unforwarded
name|'unforwarded'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|forwardMe
name|'def'
name|'forwardMe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set a local flag to test afterwards.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'forwarded'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|dontForwardMe
dedent|''
name|'def'
name|'dontForwardMe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set a local flag to test afterwards. This should not be called as it\'s\n        not in the interface.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'unforwarded'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|forwardDeferred
dedent|''
name|'def'
name|'forwardDeferred'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Asynchronously return C{True}.\n        """'
newline|'\n'
name|'return'
name|'succeed'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SpreadUtilTestCase
dedent|''
dedent|''
name|'class'
name|'SpreadUtilTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{twisted.spread.util}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_sync
name|'def'
name|'test_sync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call a synchronous method of a L{util.LocalAsRemote} object and check\n        the result.\n        """'
newline|'\n'
name|'o'
op|'='
name|'LocalRemoteTest'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'o'
op|'.'
name|'callRemote'
op|'('
string|'"add1"'
op|','
number|'2'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_async
dedent|''
name|'def'
name|'test_async'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call an asynchronous method of a L{util.LocalAsRemote} object and check\n        the result.\n        """'
newline|'\n'
name|'o'
op|'='
name|'LocalRemoteTest'
op|'('
op|')'
newline|'\n'
name|'o'
op|'='
name|'LocalRemoteTest'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'o'
op|'.'
name|'callRemote'
op|'('
string|'"add"'
op|','
number|'2'
op|','
name|'y'
op|'='
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'d'
op|','
name|'Deferred'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
number|'6'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_asyncFail
dedent|''
name|'def'
name|'test_asyncFail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a asynchronous failure on a remote method call.\n        """'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'o'
op|'='
name|'LocalRemoteTest'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'o'
op|'.'
name|'callRemote'
op|'('
string|'"fail"'
op|')'
newline|'\n'
DECL|function|eb
name|'def'
name|'eb'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'f'
op|','
name|'failure'
op|'.'
name|'Failure'
op|')'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'trap'
op|'('
name|'RuntimeError'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'lambda'
name|'res'
op|':'
name|'self'
op|'.'
name|'fail'
op|'('
string|'"supposed to fail"'
op|')'
op|','
name|'eb'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_remoteMethod
dedent|''
name|'def'
name|'test_remoteMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the C{remoteMethod} facility of L{util.LocalAsRemote}.\n        """'
newline|'\n'
name|'o'
op|'='
name|'LocalRemoteTest'
op|'('
op|')'
newline|'\n'
name|'m'
op|'='
name|'o'
op|'.'
name|'remoteMethod'
op|'('
string|'"add1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'m'
op|'('
number|'3'
op|')'
op|','
number|'4'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_localAsyncForwarder
dedent|''
name|'def'
name|'test_localAsyncForwarder'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a call to L{util.LocalAsyncForwarder} using L{Forwarded} local\n        object.\n        """'
newline|'\n'
name|'f'
op|'='
name|'Forwarded'
op|'('
op|')'
newline|'\n'
name|'lf'
op|'='
name|'util'
op|'.'
name|'LocalAsyncForwarder'
op|'('
name|'f'
op|','
name|'IForwarded'
op|')'
newline|'\n'
name|'lf'
op|'.'
name|'callRemote'
op|'('
string|'"forwardMe"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'f'
op|'.'
name|'forwarded'
op|')'
newline|'\n'
name|'lf'
op|'.'
name|'callRemote'
op|'('
string|'"dontForwardMe"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'f'
op|'.'
name|'unforwarded'
op|')'
newline|'\n'
name|'rr'
op|'='
name|'lf'
op|'.'
name|'callRemote'
op|'('
string|'"forwardDeferred"'
op|')'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'rr'
op|'.'
name|'addCallback'
op|'('
name|'l'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'l'
op|'['
number|'0'
op|']'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PBWithSecurityOptionsTest
dedent|''
dedent|''
name|'class'
name|'PBWithSecurityOptionsTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test security customization.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_clientDefaultSecurityOptions
name|'def'
name|'test_clientDefaultSecurityOptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        By default, client broker should use C{jelly.globalSecurity} as\n        security settings.\n        """'
newline|'\n'
name|'factory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|'('
op|')'
newline|'\n'
name|'broker'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'broker'
op|'.'
name|'security'
op|','
name|'jelly'
op|'.'
name|'globalSecurity'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_serverDefaultSecurityOptions
dedent|''
name|'def'
name|'test_serverDefaultSecurityOptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        By default, server broker should use C{jelly.globalSecurity} as\n        security settings.\n        """'
newline|'\n'
name|'factory'
op|'='
name|'pb'
op|'.'
name|'PBServerFactory'
op|'('
name|'Echoer'
op|'('
op|')'
op|')'
newline|'\n'
name|'broker'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'broker'
op|'.'
name|'security'
op|','
name|'jelly'
op|'.'
name|'globalSecurity'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_clientSecurityCustomization
dedent|''
name|'def'
name|'test_clientSecurityCustomization'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that the security settings are passed from the client factory to\n        the broker object.\n        """'
newline|'\n'
name|'security'
op|'='
name|'jelly'
op|'.'
name|'SecurityOptions'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|'('
name|'security'
op|'='
name|'security'
op|')'
newline|'\n'
name|'broker'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'broker'
op|'.'
name|'security'
op|','
name|'security'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_serverSecurityCustomization
dedent|''
name|'def'
name|'test_serverSecurityCustomization'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that the security settings are passed from the server factory to\n        the broker object.\n        """'
newline|'\n'
name|'security'
op|'='
name|'jelly'
op|'.'
name|'SecurityOptions'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'='
name|'pb'
op|'.'
name|'PBServerFactory'
op|'('
name|'Echoer'
op|'('
op|')'
op|','
name|'security'
op|'='
name|'security'
op|')'
newline|'\n'
name|'broker'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'broker'
op|'.'
name|'security'
op|','
name|'security'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DeprecationTests
dedent|''
dedent|''
name|'class'
name|'DeprecationTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for certain deprecations of free-functions in L{twisted.spread.pb}.\n    """'
newline|'\n'
DECL|member|test_noOperationDeprecated
name|'def'
name|'test_noOperationDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{pb.noOperation} is deprecated.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'callDeprecated'
op|'('
nl|'\n'
name|'Version'
op|'('
string|'"twisted"'
op|','
number|'8'
op|','
number|'2'
op|','
number|'0'
op|')'
op|','
nl|'\n'
name|'pb'
op|'.'
name|'noOperation'
op|','
number|'1'
op|','
number|'2'
op|','
name|'x'
op|'='
number|'3'
op|','
name|'y'
op|'='
number|'4'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_printTraceback
dedent|''
name|'def'
name|'test_printTraceback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{pb.printTraceback} is deprecated.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'callDeprecated'
op|'('
nl|'\n'
name|'Version'
op|'('
string|'"twisted"'
op|','
number|'8'
op|','
number|'2'
op|','
number|'0'
op|')'
op|','
nl|'\n'
name|'pb'
op|'.'
name|'printTraceback'
op|','
nl|'\n'
string|'"printTraceback deprecation fake traceback value"'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.protocols.finger}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'finger'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'StringTransport'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FingerTestCase
name|'class'
name|'FingerTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{finger.Finger}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create and connect a L{finger.Finger} instance.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'finger'
op|'.'
name|'Finger'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_simple
dedent|''
name|'def'
name|'test_simple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When L{finger.Finger} receives a CR LF terminated line, it responds\n        with the default user status message - that no such user exists.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|'"moshez\\r\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|'"Login: moshez\\nNo such user\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_simpleW
dedent|''
name|'def'
name|'test_simpleW'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The behavior for a query which begins with C{"/w"} is the same as the\n        behavior for one which does not.  The user is reported as not existing.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|'"/w moshez\\r\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|'"Login: moshez\\nNo such user\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_forwarding
dedent|''
name|'def'
name|'test_forwarding'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When L{finger.Finger} receives a request for a remote user, it responds\n        with a message rejecting the request.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|'"moshez@example.com\\r\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|'"Finger forwarding service denied\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_list
dedent|''
name|'def'
name|'test_list'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When L{finger.Finger} receives a blank line, it responds with a message\n        rejecting the request for all online users.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|'"\\r\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|'"Finger online list denied\\n"'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

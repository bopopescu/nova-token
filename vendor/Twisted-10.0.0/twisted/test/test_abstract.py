begin_unit
comment|'# Copyright (c) 2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for generic file descriptor based reactor support code.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'abstract'
name|'import'
name|'isIPAddress'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AddressTests
name|'class'
name|'AddressTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for address-related functionality.\n    """'
newline|'\n'
DECL|member|test_decimalDotted
name|'def'
name|'test_decimalDotted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{isIPAddress} should return C{True} for any decimal dotted\n        representation of an IPv4 address.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isIPAddress'
op|'('
string|"'0.1.2.3'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isIPAddress'
op|'('
string|"'252.253.254.255'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_shortDecimalDotted
dedent|''
name|'def'
name|'test_shortDecimalDotted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{isIPAddress} should return C{False} for a dotted decimal\n        representation with fewer or more than four octets.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'0.1'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'0.1.2'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'0.1.2.3.4'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidLetters
dedent|''
name|'def'
name|'test_invalidLetters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{isIPAddress} should return C{False} for any non-decimal dotted\n        representation including letters.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'a.2.3.4'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'1.b.3.4'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidPunctuation
dedent|''
name|'def'
name|'test_invalidPunctuation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{isIPAddress} should return C{False} for a string containing\n        strange punctuation.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"','"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'1,2'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'1,2,3'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'1.,.3,4'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_emptyString
dedent|''
name|'def'
name|'test_emptyString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{isIPAddress} should return C{False} for the empty string.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidNegative
dedent|''
name|'def'
name|'test_invalidNegative'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{isIPAddress} should return C{False} for negative decimal values.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'-1'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'1.-2'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'1.2.-3'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'1.2.-3.4'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidPositive
dedent|''
name|'def'
name|'test_invalidPositive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{isIPAddress} should return C{False} for a string containing\n        positive decimal values greater than 255.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'256.0.0.0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'0.256.0.0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'0.0.256.0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'0.0.0.256'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isIPAddress'
op|'('
string|"'256.256.256.256'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

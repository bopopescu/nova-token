begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTest cases for twisted.reflect module.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'weakref'
op|','
name|'os'
newline|'\n'
name|'from'
name|'ihooks'
name|'import'
name|'ModuleImporter'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'collections'
name|'import'
name|'deque'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|deque
indent|'    '
name|'deque'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'reflect'
op|','
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'versions'
name|'import'
name|'Version'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SettableTest
name|'class'
name|'SettableTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'setter'
op|'='
name|'reflect'
op|'.'
name|'Settable'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'self'
op|'.'
name|'setter'
newline|'\n'
nl|'\n'
DECL|member|testSet
dedent|''
name|'def'
name|'testSet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'setter'
op|'('
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'setter'
op|'.'
name|'a'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'setter'
op|'.'
name|'b'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AccessorTester
dedent|''
dedent|''
name|'class'
name|'AccessorTester'
op|'('
name|'reflect'
op|'.'
name|'Accessor'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|set_x
indent|'    '
name|'def'
name|'set_x'
op|'('
name|'self'
op|','
name|'x'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'y'
op|'='
name|'x'
newline|'\n'
name|'self'
op|'.'
name|'reallySet'
op|'('
string|"'x'"
op|','
name|'x'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|get_z
dedent|''
name|'def'
name|'get_z'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'q'
op|'='
number|'1'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|del_z
dedent|''
name|'def'
name|'del_z'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reallyDel'
op|'('
string|'"q"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PropertyAccessorTester
dedent|''
dedent|''
name|'class'
name|'PropertyAccessorTester'
op|'('
name|'reflect'
op|'.'
name|'PropertyAccessor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test class to check L{reflect.PropertyAccessor} functionalities.\n    """'
newline|'\n'
DECL|variable|r
name|'r'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|set_r
name|'def'
name|'set_r'
op|'('
name|'self'
op|','
name|'r'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'s'
op|'='
name|'r'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|set_x
dedent|''
name|'def'
name|'set_x'
op|'('
name|'self'
op|','
name|'x'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'y'
op|'='
name|'x'
newline|'\n'
name|'self'
op|'.'
name|'reallySet'
op|'('
string|"'x'"
op|','
name|'x'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|get_z
dedent|''
name|'def'
name|'get_z'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'q'
op|'='
number|'1'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|del_z
dedent|''
name|'def'
name|'del_z'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reallyDel'
op|'('
string|'"q"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AccessorTest
dedent|''
dedent|''
name|'class'
name|'AccessorTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'tester'
op|'='
name|'AccessorTester'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSet
dedent|''
name|'def'
name|'testSet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'tester'
op|'.'
name|'x'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'tester'
op|'.'
name|'x'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'tester'
op|'.'
name|'y'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testGet
dedent|''
name|'def'
name|'testGet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'tester'
op|'.'
name|'z'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'tester'
op|'.'
name|'q'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDel
dedent|''
name|'def'
name|'testDel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'tester'
op|'.'
name|'z'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'tester'
op|'.'
name|'q'
op|','
number|'1'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'tester'
op|'.'
name|'z'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'tester'
op|','
string|'"q"'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tester'
op|'.'
name|'x'
op|'='
number|'1'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'tester'
op|'.'
name|'x'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'tester'
op|','
string|'"x"'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PropertyAccessorTest
dedent|''
dedent|''
name|'class'
name|'PropertyAccessorTest'
op|'('
name|'AccessorTest'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{reflect.PropertyAccessor}, using L{PropertyAccessorTester}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'tester'
op|'='
name|'PropertyAccessorTester'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setWithDefaultValue
dedent|''
name|'def'
name|'test_setWithDefaultValue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an attribute is present in the class, it can be retrieved by\n        default.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'tester'
op|'.'
name|'r'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tester'
op|'.'
name|'r'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'tester'
op|'.'
name|'r'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'tester'
op|'.'
name|'s'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getValueInDict
dedent|''
name|'def'
name|'test_getValueInDict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The attribute value can be overriden by directly modifying the value in\n        C{__dict__}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'tester'
op|'.'
name|'__dict__'
op|'['
string|'"r"'
op|']'
op|'='
number|'10'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'tester'
op|'.'
name|'r'
op|','
number|'10'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_notYetInDict
dedent|''
name|'def'
name|'test_notYetInDict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a getter is defined on an attribute but without any default value,\n        it raises C{AttributeError} when trying to access it.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'getattr'
op|','
name|'self'
op|'.'
name|'tester'
op|','
string|'"x"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LookupsTestCase
dedent|''
dedent|''
name|'class'
name|'LookupsTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{namedClass}, L{namedModule}, and L{namedAny}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_namedClassLookup
name|'def'
name|'test_namedClassLookup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{namedClass} should return the class object for the name it is passed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'namedClass'
op|'('
string|'"twisted.python.reflect.Summer"'
op|')'
op|','
nl|'\n'
name|'reflect'
op|'.'
name|'Summer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_namedModuleLookup
dedent|''
name|'def'
name|'test_namedModuleLookup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{namedModule} should return the module object for the name it is\n        passed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'namedModule'
op|'('
string|'"twisted.python.reflect"'
op|')'
op|','
name|'reflect'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_namedAnyPackageLookup
dedent|''
name|'def'
name|'test_namedAnyPackageLookup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{namedAny} should return the package object for the name it is passed.\n        """'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'python'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'namedAny'
op|'('
string|'"twisted.python"'
op|')'
op|','
name|'twisted'
op|'.'
name|'python'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_namedAnyModuleLookup
dedent|''
name|'def'
name|'test_namedAnyModuleLookup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{namedAny} should return the module object for the name it is passed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'namedAny'
op|'('
string|'"twisted.python.reflect"'
op|')'
op|','
name|'reflect'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_namedAnyClassLookup
dedent|''
name|'def'
name|'test_namedAnyClassLookup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{namedAny} should return the class object for the name it is passed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'namedAny'
op|'('
string|'"twisted.python.reflect.Summer"'
op|')'
op|','
name|'reflect'
op|'.'
name|'Summer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_namedAnyAttributeLookup
dedent|''
name|'def'
name|'test_namedAnyAttributeLookup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{namedAny} should return the object an attribute of a non-module,\n        non-package object is bound to for the name it is passed.\n        """'
newline|'\n'
comment|'# Note - not assertEqual because unbound method lookup creates a new'
nl|'\n'
comment|"# object every time.  This is a foolishness of Python's object"
nl|'\n'
comment|'# implementation, not a bug in Twisted.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'namedAny'
op|'('
string|'"twisted.python.reflect.Summer.reallySet"'
op|')'
op|','
nl|'\n'
name|'reflect'
op|'.'
name|'Summer'
op|'.'
name|'reallySet'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_namedAnySecondAttributeLookup
dedent|''
name|'def'
name|'test_namedAnySecondAttributeLookup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{namedAny} should return the object an attribute of an object which\n        itself was an attribute of a non-module, non-package object is bound to\n        for the name it is passed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'namedAny'
op|'('
nl|'\n'
string|'"twisted.python.reflect.Summer.reallySet.__doc__"'
op|')'
op|','
nl|'\n'
name|'reflect'
op|'.'
name|'Summer'
op|'.'
name|'reallySet'
op|'.'
name|'__doc__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_importExceptions
dedent|''
name|'def'
name|'test_importExceptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Exceptions raised by modules which L{namedAny} causes to be imported\n        should pass through L{namedAny} to the caller.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'ZeroDivisionError'
op|','
nl|'\n'
name|'reflect'
op|'.'
name|'namedAny'
op|','
string|'"twisted.test.reflect_helper_ZDE"'
op|')'
newline|'\n'
comment|'# Make sure that this behavior is *consistent* for 2.3, where there is'
nl|'\n'
comment|'# no post-failed-import cleanup'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'ZeroDivisionError'
op|','
nl|'\n'
name|'reflect'
op|'.'
name|'namedAny'
op|','
string|'"twisted.test.reflect_helper_ZDE"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'ValueError'
op|','
nl|'\n'
name|'reflect'
op|'.'
name|'namedAny'
op|','
string|'"twisted.test.reflect_helper_VE"'
op|')'
newline|'\n'
comment|'# Modules which themselves raise ImportError when imported should result in an ImportError'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'ImportError'
op|','
nl|'\n'
name|'reflect'
op|'.'
name|'namedAny'
op|','
string|'"twisted.test.reflect_helper_IE"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_attributeExceptions
dedent|''
name|'def'
name|'test_attributeExceptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If segments on the end of a fully-qualified Python name represents\n        attributes which aren\'t actually present on the object represented by\n        the earlier segments, L{namedAny} should raise an L{AttributeError}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'AttributeError'
op|','
nl|'\n'
name|'reflect'
op|'.'
name|'namedAny'
op|','
string|'"twisted.nosuchmoduleintheworld"'
op|')'
newline|'\n'
comment|'# ImportError behaves somewhat differently between "import'
nl|'\n'
comment|'# extant.nonextant" and "import extant.nonextant.nonextant", so test'
nl|'\n'
comment|'# the latter as well.'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'AttributeError'
op|','
nl|'\n'
name|'reflect'
op|'.'
name|'namedAny'
op|','
string|'"twisted.nosuch.modulein.theworld"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'AttributeError'
op|','
nl|'\n'
name|'reflect'
op|'.'
name|'namedAny'
op|','
string|'"twisted.python.reflect.Summer.nosuchattributeintheworld"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidNames
dedent|''
name|'def'
name|'test_invalidNames'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Passing a name which isn\'t a fully-qualified Python name to L{namedAny}\n        should result in one of the following exceptions:\n        - L{InvalidName}: the name is not a dot-separated list of Python objects\n        - L{ObjectNotFound}: the object doesn\'t exist\n        - L{ModuleNotFound}: the object doesn\'t exist and there is only one\n          component in the name\n        """'
newline|'\n'
name|'err'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'reflect'
op|'.'
name|'ModuleNotFound'
op|','
name|'reflect'
op|'.'
name|'namedAny'
op|','
nl|'\n'
string|"'nosuchmoduleintheworld'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'err'
op|')'
op|','
string|'"No module named \'nosuchmoduleintheworld\'"'
op|')'
newline|'\n'
nl|'\n'
comment|"# This is a dot-separated list, but it isn't valid!"
nl|'\n'
name|'err'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'reflect'
op|'.'
name|'ObjectNotFound'
op|','
name|'reflect'
op|'.'
name|'namedAny'
op|','
nl|'\n'
string|'"@#$@(#.!@(#!@#"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'err'
op|')'
op|','
string|'"\'@#$@(#.!@(#!@#\' does not name an object"'
op|')'
newline|'\n'
nl|'\n'
name|'err'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'reflect'
op|'.'
name|'ObjectNotFound'
op|','
name|'reflect'
op|'.'
name|'namedAny'
op|','
nl|'\n'
string|'"tcelfer.nohtyp.detsiwt"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'str'
op|'('
name|'err'
op|')'
op|','
nl|'\n'
string|'"\'tcelfer.nohtyp.detsiwt\' does not name an object"'
op|')'
newline|'\n'
nl|'\n'
name|'err'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'reflect'
op|'.'
name|'InvalidName'
op|','
name|'reflect'
op|'.'
name|'namedAny'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'err'
op|')'
op|','
string|"'Empty module name'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'invalidName'
name|'in'
op|'['
string|"'.twisted'"
op|','
string|"'twisted.'"
op|','
string|"'twisted..python'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'err'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'InvalidName'
op|','
name|'reflect'
op|'.'
name|'namedAny'
op|','
name|'invalidName'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'str'
op|'('
name|'err'
op|')'
op|','
nl|'\n'
string|'"name must be a string giving a \'.\'-separated list of Python "'
nl|'\n'
string|'"identifiers, not %r"'
op|'%'
op|'('
name|'invalidName'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ImportHooksLookupTests
dedent|''
dedent|''
dedent|''
name|'class'
name|'ImportHooksLookupTests'
op|'('
name|'LookupsTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for lookup methods in the presence of L{ihooks}-style import hooks.\n    Runs all of the tests from L{LookupsTestCase} after installing a custom\n    import hook.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Perturb the normal import behavior subtly by installing an import\n        hook.  No custom behavior is provided, but this adds some extra\n        frames to the call stack, which L{namedAny} must be able to account\n        for.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'importer'
op|'='
name|'ModuleImporter'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'importer'
op|'.'
name|'install'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Uninstall the custom import hook.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'importer'
op|'.'
name|'uninstall'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ObjectGrep
dedent|''
dedent|''
name|'class'
name|'ObjectGrep'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_dictionary
indent|'    '
name|'def'
name|'test_dictionary'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test references search through a dictionnary, as a key or as a value.\n        """'
newline|'\n'
name|'o'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'d1'
op|'='
op|'{'
name|'None'
op|':'
name|'o'
op|'}'
newline|'\n'
name|'d2'
op|'='
op|'{'
name|'o'
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"[None]"'
op|','
name|'reflect'
op|'.'
name|'objgrep'
op|'('
name|'d1'
op|','
name|'o'
op|','
name|'reflect'
op|'.'
name|'isSame'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"{None}"'
op|','
name|'reflect'
op|'.'
name|'objgrep'
op|'('
name|'d2'
op|','
name|'o'
op|','
name|'reflect'
op|'.'
name|'isSame'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_list
dedent|''
name|'def'
name|'test_list'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test references search through a list.\n        """'
newline|'\n'
name|'o'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
name|'None'
op|','
name|'o'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"[1]"'
op|','
name|'reflect'
op|'.'
name|'objgrep'
op|'('
name|'L'
op|','
name|'o'
op|','
name|'reflect'
op|'.'
name|'isSame'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_tuple
dedent|''
name|'def'
name|'test_tuple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test references search through a tuple.\n        """'
newline|'\n'
name|'o'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'T'
op|'='
op|'('
name|'o'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"[0]"'
op|','
name|'reflect'
op|'.'
name|'objgrep'
op|'('
name|'T'
op|','
name|'o'
op|','
name|'reflect'
op|'.'
name|'isSame'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance
dedent|''
name|'def'
name|'test_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test references search through an object attribute.\n        """'
newline|'\n'
DECL|class|Dummy
name|'class'
name|'Dummy'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'o'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'Dummy'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'o'
op|'='
name|'o'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'".o"'
op|','
name|'reflect'
op|'.'
name|'objgrep'
op|'('
name|'d'
op|','
name|'o'
op|','
name|'reflect'
op|'.'
name|'isSame'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_weakref
dedent|''
name|'def'
name|'test_weakref'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test references search through a weakref object.\n        """'
newline|'\n'
DECL|class|Dummy
name|'class'
name|'Dummy'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'o'
op|'='
name|'Dummy'
op|'('
op|')'
newline|'\n'
name|'w1'
op|'='
name|'weakref'
op|'.'
name|'ref'
op|'('
name|'o'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"()"'
op|','
name|'reflect'
op|'.'
name|'objgrep'
op|'('
name|'w1'
op|','
name|'o'
op|','
name|'reflect'
op|'.'
name|'isSame'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_boundMethod
dedent|''
name|'def'
name|'test_boundMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test references search through method special attributes.\n        """'
newline|'\n'
DECL|class|Dummy
name|'class'
name|'Dummy'
op|':'
newline|'\n'
DECL|member|dummy
indent|'            '
name|'def'
name|'dummy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'o'
op|'='
name|'Dummy'
op|'('
op|')'
newline|'\n'
name|'m'
op|'='
name|'o'
op|'.'
name|'dummy'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'".im_self"'
op|','
name|'reflect'
op|'.'
name|'objgrep'
op|'('
name|'m'
op|','
name|'m'
op|'.'
name|'im_self'
op|','
name|'reflect'
op|'.'
name|'isSame'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'".im_class"'
op|','
name|'reflect'
op|'.'
name|'objgrep'
op|'('
name|'m'
op|','
name|'m'
op|'.'
name|'im_class'
op|','
name|'reflect'
op|'.'
name|'isSame'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'".im_func"'
op|','
name|'reflect'
op|'.'
name|'objgrep'
op|'('
name|'m'
op|','
name|'m'
op|'.'
name|'im_func'
op|','
name|'reflect'
op|'.'
name|'isSame'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_everything
dedent|''
name|'def'
name|'test_everything'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test references search using complex set of objects.\n        """'
newline|'\n'
DECL|class|Dummy
name|'class'
name|'Dummy'
op|':'
newline|'\n'
DECL|member|method
indent|'            '
name|'def'
name|'method'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'o'
op|'='
name|'Dummy'
op|'('
op|')'
newline|'\n'
name|'D1'
op|'='
op|'{'
op|'('
op|')'
op|':'
string|'"baz"'
op|','
name|'None'
op|':'
string|'"Quux"'
op|','
name|'o'
op|':'
string|'"Foosh"'
op|'}'
newline|'\n'
name|'L'
op|'='
op|'['
name|'None'
op|','
op|'('
op|')'
op|','
name|'D1'
op|','
number|'3'
op|']'
newline|'\n'
name|'T'
op|'='
op|'('
name|'L'
op|','
op|'{'
op|'}'
op|','
name|'Dummy'
op|'('
op|')'
op|')'
newline|'\n'
name|'D2'
op|'='
op|'{'
number|'0'
op|':'
string|'"foo"'
op|','
number|'1'
op|':'
string|'"bar"'
op|','
number|'2'
op|':'
name|'T'
op|'}'
newline|'\n'
name|'i'
op|'='
name|'Dummy'
op|'('
op|')'
newline|'\n'
name|'i'
op|'.'
name|'attr'
op|'='
name|'D2'
newline|'\n'
name|'m'
op|'='
name|'i'
op|'.'
name|'method'
newline|'\n'
name|'w'
op|'='
name|'weakref'
op|'.'
name|'ref'
op|'('
name|'m'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"().im_self.attr[2][0][2]{\'Foosh\'}"'
op|','
name|'reflect'
op|'.'
name|'objgrep'
op|'('
name|'w'
op|','
name|'o'
op|','
name|'reflect'
op|'.'
name|'isSame'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_depthLimit
dedent|''
name|'def'
name|'test_depthLimit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the depth of references search.\n        """'
newline|'\n'
name|'a'
op|'='
op|'['
op|']'
newline|'\n'
name|'b'
op|'='
op|'['
name|'a'
op|']'
newline|'\n'
name|'c'
op|'='
op|'['
name|'a'
op|','
name|'b'
op|']'
newline|'\n'
name|'d'
op|'='
op|'['
name|'a'
op|','
name|'c'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'[0]'"
op|']'
op|','
name|'reflect'
op|'.'
name|'objgrep'
op|'('
name|'d'
op|','
name|'a'
op|','
name|'reflect'
op|'.'
name|'isSame'
op|','
name|'maxDepth'
op|'='
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'[0]'"
op|','
string|"'[1][0]'"
op|']'
op|','
name|'reflect'
op|'.'
name|'objgrep'
op|'('
name|'d'
op|','
name|'a'
op|','
name|'reflect'
op|'.'
name|'isSame'
op|','
name|'maxDepth'
op|'='
number|'2'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'[0]'"
op|','
string|"'[1][0]'"
op|','
string|"'[1][1][0]'"
op|']'
op|','
name|'reflect'
op|'.'
name|'objgrep'
op|'('
name|'d'
op|','
name|'a'
op|','
name|'reflect'
op|'.'
name|'isSame'
op|','
name|'maxDepth'
op|'='
number|'3'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deque
dedent|''
name|'def'
name|'test_deque'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test references search through a deque object. Only for Python > 2.3.\n        """'
newline|'\n'
name|'o'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'D'
op|'='
name|'deque'
op|'('
op|')'
newline|'\n'
name|'D'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
name|'D'
op|'.'
name|'append'
op|'('
name|'o'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"[1]"'
op|','
name|'reflect'
op|'.'
name|'objgrep'
op|'('
name|'D'
op|','
name|'o'
op|','
name|'reflect'
op|'.'
name|'isSame'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'deque'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'test_deque'
op|'.'
name|'skip'
op|'='
string|'"Deque not available"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GetClass
dedent|''
dedent|''
name|'class'
name|'GetClass'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testOld
indent|'    '
name|'def'
name|'testOld'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|OldClass
indent|'        '
name|'class'
name|'OldClass'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'old'
op|'='
name|'OldClass'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'reflect'
op|'.'
name|'getClass'
op|'('
name|'OldClass'
op|')'
op|'.'
name|'__name__'
op|','
op|'('
string|"'class'"
op|','
string|"'classobj'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reflect'
op|'.'
name|'getClass'
op|'('
name|'old'
op|')'
op|'.'
name|'__name__'
op|','
string|"'OldClass'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNew
dedent|''
name|'def'
name|'testNew'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|NewClass
indent|'        '
name|'class'
name|'NewClass'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'new'
op|'='
name|'NewClass'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reflect'
op|'.'
name|'getClass'
op|'('
name|'NewClass'
op|')'
op|'.'
name|'__name__'
op|','
string|"'type'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reflect'
op|'.'
name|'getClass'
op|'('
name|'new'
op|')'
op|'.'
name|'__name__'
op|','
string|"'NewClass'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Breakable
dedent|''
dedent|''
name|'class'
name|'Breakable'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|breakRepr
indent|'    '
name|'breakRepr'
op|'='
name|'False'
newline|'\n'
DECL|variable|breakStr
name|'breakStr'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__str__
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'breakStr'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"str!"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'<Breakable>'"
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'breakRepr'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"repr!"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'Breakable()'"
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BrokenType
dedent|''
dedent|''
dedent|''
name|'class'
name|'BrokenType'
op|'('
name|'Breakable'
op|','
name|'type'
op|')'
op|':'
newline|'\n'
DECL|variable|breakName
indent|'    '
name|'breakName'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|get___name__
name|'def'
name|'get___name__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'breakName'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"no name"'
op|')'
newline|'\n'
dedent|''
name|'return'
string|"'BrokenType'"
newline|'\n'
DECL|variable|__name__
dedent|''
name|'__name__'
op|'='
name|'property'
op|'('
name|'get___name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BTBase
dedent|''
name|'class'
name|'BTBase'
op|'('
name|'Breakable'
op|')'
op|':'
newline|'\n'
DECL|variable|__metaclass__
indent|'    '
name|'__metaclass__'
op|'='
name|'BrokenType'
newline|'\n'
DECL|variable|breakRepr
name|'breakRepr'
op|'='
name|'True'
newline|'\n'
DECL|variable|breakStr
name|'breakStr'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoClassAttr
dedent|''
name|'class'
name|'NoClassAttr'
op|'('
name|'Breakable'
op|')'
op|':'
newline|'\n'
DECL|variable|__class__
indent|'    '
name|'__class__'
op|'='
name|'property'
op|'('
name|'lambda'
name|'x'
op|':'
name|'x'
op|'.'
name|'not_class'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SafeRepr
dedent|''
name|'class'
name|'SafeRepr'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{reflect.safe_repr} function.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_workingRepr
name|'def'
name|'test_workingRepr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reflect.safe_repr} produces the same output as C{repr} on a working\n        object.\n        """'
newline|'\n'
name|'x'
op|'='
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'x'
op|')'
op|','
name|'repr'
op|'('
name|'x'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_brokenRepr
dedent|''
name|'def'
name|'test_brokenRepr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reflect.safe_repr} returns a string with class name, address, and\n        traceback when the repr call failed.\n        """'
newline|'\n'
name|'b'
op|'='
name|'Breakable'
op|'('
op|')'
newline|'\n'
name|'b'
op|'.'
name|'breakRepr'
op|'='
name|'True'
newline|'\n'
name|'bRepr'
op|'='
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'b'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"Breakable instance at 0x"'
op|','
name|'bRepr'
op|')'
newline|'\n'
comment|'# Check that the file is in the repr, but without the extension as it'
nl|'\n'
comment|'# can be .py/.pyc'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'__file__'
op|')'
op|'['
number|'0'
op|']'
op|','
name|'bRepr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"RuntimeError: repr!"'
op|','
name|'bRepr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_brokenStr
dedent|''
name|'def'
name|'test_brokenStr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reflect.safe_repr} isn\'t affected by a broken C{__str__} method.\n        """'
newline|'\n'
name|'b'
op|'='
name|'Breakable'
op|'('
op|')'
newline|'\n'
name|'b'
op|'.'
name|'breakStr'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'b'
op|')'
op|','
name|'repr'
op|'('
name|'b'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_brokenClassRepr
dedent|''
name|'def'
name|'test_brokenClassRepr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|X
indent|'        '
name|'class'
name|'X'
op|'('
name|'BTBase'
op|')'
op|':'
newline|'\n'
DECL|variable|breakRepr
indent|'            '
name|'breakRepr'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'X'
op|')'
newline|'\n'
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'X'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unsignedID
dedent|''
name|'def'
name|'test_unsignedID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{unsignedID} is used to print ID of the object in case of error, not\n        standard ID value which can be negative.\n        """'
newline|'\n'
DECL|class|X
name|'class'
name|'X'
op|'('
name|'BTBase'
op|')'
op|':'
newline|'\n'
DECL|variable|breakRepr
indent|'            '
name|'breakRepr'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'ids'
op|'='
op|'{'
name|'X'
op|':'
number|'100'
op|'}'
newline|'\n'
DECL|function|fakeID
name|'def'
name|'fakeID'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'ids'
op|'['
name|'obj'
op|']'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'KeyError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'id'
op|'('
name|'obj'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'util'
op|'.'
name|'setIDFunction'
op|','
name|'util'
op|'.'
name|'setIDFunction'
op|'('
name|'fakeID'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'xRepr'
op|'='
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'X'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"0x64"'
op|','
name|'xRepr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_brokenClassStr
dedent|''
name|'def'
name|'test_brokenClassStr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|X
indent|'        '
name|'class'
name|'X'
op|'('
name|'BTBase'
op|')'
op|':'
newline|'\n'
DECL|variable|breakStr
indent|'            '
name|'breakStr'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'X'
op|')'
newline|'\n'
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'X'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_brokenClassAttribute
dedent|''
name|'def'
name|'test_brokenClassAttribute'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an object raises an exception when accessing its C{__class__}\n        attribute, L{reflect.safe_repr} uses C{type} to retrieve the class\n        object.\n        """'
newline|'\n'
name|'b'
op|'='
name|'NoClassAttr'
op|'('
op|')'
newline|'\n'
name|'b'
op|'.'
name|'breakRepr'
op|'='
name|'True'
newline|'\n'
name|'bRepr'
op|'='
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'b'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"NoClassAttr instance at 0x"'
op|','
name|'bRepr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'__file__'
op|')'
op|'['
number|'0'
op|']'
op|','
name|'bRepr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"RuntimeError: repr!"'
op|','
name|'bRepr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_brokenClassNameAttribute
dedent|''
name|'def'
name|'test_brokenClassNameAttribute'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a class raises an exception when accessing its C{__name__} attribute\n        B{and} when calling its C{__str__} implementation, L{reflect.safe_repr}\n        returns \'BROKEN CLASS\' instead of the class name.\n        """'
newline|'\n'
DECL|class|X
name|'class'
name|'X'
op|'('
name|'BTBase'
op|')'
op|':'
newline|'\n'
DECL|variable|breakName
indent|'            '
name|'breakName'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'xRepr'
op|'='
name|'reflect'
op|'.'
name|'safe_repr'
op|'('
name|'X'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"<BROKEN CLASS AT 0x"'
op|','
name|'xRepr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'__file__'
op|')'
op|'['
number|'0'
op|']'
op|','
name|'xRepr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"RuntimeError: repr!"'
op|','
name|'xRepr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SafeStr
dedent|''
dedent|''
name|'class'
name|'SafeStr'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{reflect.safe_str} function.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_workingStr
name|'def'
name|'test_workingStr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'x'
op|'='
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reflect'
op|'.'
name|'safe_str'
op|'('
name|'x'
op|')'
op|','
name|'str'
op|'('
name|'x'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_brokenStr
dedent|''
name|'def'
name|'test_brokenStr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'b'
op|'='
name|'Breakable'
op|'('
op|')'
newline|'\n'
name|'b'
op|'.'
name|'breakStr'
op|'='
name|'True'
newline|'\n'
name|'reflect'
op|'.'
name|'safe_str'
op|'('
name|'b'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_brokenRepr
dedent|''
name|'def'
name|'test_brokenRepr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'b'
op|'='
name|'Breakable'
op|'('
op|')'
newline|'\n'
name|'b'
op|'.'
name|'breakRepr'
op|'='
name|'True'
newline|'\n'
name|'reflect'
op|'.'
name|'safe_str'
op|'('
name|'b'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_brokenClassStr
dedent|''
name|'def'
name|'test_brokenClassStr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|X
indent|'        '
name|'class'
name|'X'
op|'('
name|'BTBase'
op|')'
op|':'
newline|'\n'
DECL|variable|breakStr
indent|'            '
name|'breakStr'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'reflect'
op|'.'
name|'safe_str'
op|'('
name|'X'
op|')'
newline|'\n'
name|'reflect'
op|'.'
name|'safe_str'
op|'('
name|'X'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_brokenClassRepr
dedent|''
name|'def'
name|'test_brokenClassRepr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|X
indent|'        '
name|'class'
name|'X'
op|'('
name|'BTBase'
op|')'
op|':'
newline|'\n'
DECL|variable|breakRepr
indent|'            '
name|'breakRepr'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'reflect'
op|'.'
name|'safe_str'
op|'('
name|'X'
op|')'
newline|'\n'
name|'reflect'
op|'.'
name|'safe_str'
op|'('
name|'X'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_brokenClassAttribute
dedent|''
name|'def'
name|'test_brokenClassAttribute'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an object raises an exception when accessing its C{__class__}\n        attribute, L{reflect.safe_str} uses C{type} to retrieve the class\n        object.\n        """'
newline|'\n'
name|'b'
op|'='
name|'NoClassAttr'
op|'('
op|')'
newline|'\n'
name|'b'
op|'.'
name|'breakStr'
op|'='
name|'True'
newline|'\n'
name|'bStr'
op|'='
name|'reflect'
op|'.'
name|'safe_str'
op|'('
name|'b'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"NoClassAttr instance at 0x"'
op|','
name|'bStr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'__file__'
op|')'
op|'['
number|'0'
op|']'
op|','
name|'bStr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"RuntimeError: str!"'
op|','
name|'bStr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_brokenClassNameAttribute
dedent|''
name|'def'
name|'test_brokenClassNameAttribute'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a class raises an exception when accessing its C{__name__} attribute\n        B{and} when calling its C{__str__} implementation, L{reflect.safe_str}\n        returns \'BROKEN CLASS\' instead of the class name.\n        """'
newline|'\n'
DECL|class|X
name|'class'
name|'X'
op|'('
name|'BTBase'
op|')'
op|':'
newline|'\n'
DECL|variable|breakName
indent|'            '
name|'breakName'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'xStr'
op|'='
name|'reflect'
op|'.'
name|'safe_str'
op|'('
name|'X'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"<BROKEN CLASS AT 0x"'
op|','
name|'xStr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'__file__'
op|')'
op|'['
number|'0'
op|']'
op|','
name|'xStr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"RuntimeError: str!"'
op|','
name|'xStr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FilenameToModule
dedent|''
dedent|''
name|'class'
name|'FilenameToModule'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test L{reflect.filenameToModuleName} detection.\n    """'
newline|'\n'
DECL|member|test_directory
name|'def'
name|'test_directory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Tests it finds good name for directories/packages.\n        """'
newline|'\n'
name|'module'
op|'='
name|'reflect'
op|'.'
name|'filenameToModuleName'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'twisted'"
op|','
string|"'test'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'module'
op|','
string|"'test'"
op|')'
newline|'\n'
name|'module'
op|'='
name|'reflect'
op|'.'
name|'filenameToModuleName'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'twisted'"
op|','
string|"'test'"
op|')'
nl|'\n'
op|'+'
name|'os'
op|'.'
name|'path'
op|'.'
name|'sep'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'module'
op|','
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_file
dedent|''
name|'def'
name|'test_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test it finds good name for files.\n        """'
newline|'\n'
name|'module'
op|'='
name|'reflect'
op|'.'
name|'filenameToModuleName'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'twisted'"
op|','
string|"'test'"
op|','
string|"'test_reflect.py'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'module'
op|','
string|"'test_reflect'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FullyQualifiedNameTests
dedent|''
dedent|''
name|'class'
name|'FullyQualifiedNameTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test for L{reflect.fullyQualifiedName}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_checkFullyQualifiedName
name|'def'
name|'_checkFullyQualifiedName'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'expected'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Helper to check that fully qualified name of C{obj} results to\n        C{expected}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'reflect'
op|'.'
name|'fullyQualifiedName'
op|'('
name|'obj'
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_package
dedent|''
name|'def'
name|'test_package'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reflect.fullyQualifiedName} returns the full name of a package and\n        a subpackage.\n        """'
newline|'\n'
name|'import'
name|'twisted'
newline|'\n'
name|'self'
op|'.'
name|'_checkFullyQualifiedName'
op|'('
name|'twisted'
op|','
string|"'twisted'"
op|')'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'python'
newline|'\n'
name|'self'
op|'.'
name|'_checkFullyQualifiedName'
op|'('
name|'twisted'
op|'.'
name|'python'
op|','
string|"'twisted.python'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_module
dedent|''
name|'def'
name|'test_module'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reflect.fullyQualifiedName} returns the name of a module inside a a\n        package.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_checkFullyQualifiedName'
op|'('
name|'reflect'
op|','
string|"'twisted.python.reflect'"
op|')'
newline|'\n'
name|'import'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
newline|'\n'
name|'self'
op|'.'
name|'_checkFullyQualifiedName'
op|'('
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
op|','
nl|'\n'
string|"'twisted.trial.unittest'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_class
dedent|''
name|'def'
name|'test_class'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reflect.fullyQualifiedName} returns the name of a class and its\n        module.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_checkFullyQualifiedName'
op|'('
name|'reflect'
op|'.'
name|'Settable'
op|','
nl|'\n'
string|"'twisted.python.reflect.Settable'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_function
dedent|''
name|'def'
name|'test_function'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reflect.fullyQualifiedName} returns the name of a function inside its\n        module.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_checkFullyQualifiedName'
op|'('
name|'reflect'
op|'.'
name|'fullyQualifiedName'
op|','
nl|'\n'
string|'"twisted.python.reflect.fullyQualifiedName"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_method
dedent|''
name|'def'
name|'test_method'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reflect.fullyQualifiedName} returns the name of a method inside its\n        class and its module.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_checkFullyQualifiedName'
op|'('
name|'reflect'
op|'.'
name|'PropertyAccessor'
op|'.'
name|'reallyDel'
op|','
nl|'\n'
string|'"twisted.python.reflect.PropertyAccessor.reallyDel"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkFullyQualifiedName'
op|'('
name|'reflect'
op|'.'
name|'PropertyAccessor'
op|'('
op|')'
op|'.'
name|'reallyDel'
op|','
nl|'\n'
string|'"twisted.python.reflect.PropertyAccessor.reallyDel"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DeprecationTestCase
dedent|''
dedent|''
name|'class'
name|'DeprecationTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test deprecations in twisted.python.reflect\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_macro
name|'def'
name|'test_macro'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test deprecation of L{reflect.macro}.\n        """'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'callDeprecated'
op|'('
name|'Version'
op|'('
string|'"Twisted"'
op|','
number|'8'
op|','
number|'2'
op|','
number|'0'
op|')'
op|','
nl|'\n'
name|'reflect'
op|'.'
name|'macro'
op|','
string|'"test"'
op|','
name|'__file__'
op|','
string|'"test = 1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

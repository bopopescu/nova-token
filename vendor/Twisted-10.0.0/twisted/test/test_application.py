begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.application} and its interaction with\nL{twisted.persisted.sob}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'copy'
op|','
name|'os'
op|','
name|'pickle'
newline|'\n'
name|'from'
name|'StringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
op|','
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'application'
name|'import'
name|'service'
op|','
name|'internet'
op|','
name|'app'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'persisted'
name|'import'
name|'sob'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'usage'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'runtime'
name|'import'
name|'platform'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'interfaces'
op|','
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'wire'
op|','
name|'basic'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
op|','
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'utils'
name|'import'
name|'getProcessOutputAndValue'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'application'
name|'import'
name|'reactors'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'MemoryReactor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|oldAppSuppressions
name|'oldAppSuppressions'
op|'='
op|'['
name|'util'
op|'.'
name|'suppress'
op|'('
name|'message'
op|'='
string|"'twisted.internet.app is deprecated'"
op|','
nl|'\n'
DECL|variable|category
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|skipWindowsNopywin32
name|'skipWindowsNopywin32'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'platform'
op|'.'
name|'isWindows'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'win32process'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|skipWindowsNopywin32
indent|'        '
name|'skipWindowsNopywin32'
op|'='
op|'('
string|'"On windows, spawnProcess is not available "'
nl|'\n'
string|'"in the absence of win32process."'
op|')'
newline|'\n'
nl|'\n'
DECL|class|Dummy
dedent|''
dedent|''
name|'class'
name|'Dummy'
op|':'
newline|'\n'
DECL|variable|processName
indent|'    '
name|'processName'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|class|TestService
dedent|''
name|'class'
name|'TestService'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|testName
indent|'    '
name|'def'
name|'testName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setName'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'s'
op|'.'
name|'name'
op|','
string|'"hello"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testParent
dedent|''
name|'def'
name|'testParent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'service'
op|'.'
name|'MultiService'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setServiceParent'
op|'('
name|'p'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'list'
op|'('
name|'p'
op|')'
op|','
op|'['
name|'s'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'s'
op|'.'
name|'parent'
op|','
name|'p'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testApplicationAsParent
dedent|''
name|'def'
name|'testApplicationAsParent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'service'
op|'.'
name|'Application'
op|'('
string|'""'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setServiceParent'
op|'('
name|'p'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'list'
op|'('
name|'service'
op|'.'
name|'IServiceCollection'
op|'('
name|'p'
op|')'
op|')'
op|','
op|'['
name|'s'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'s'
op|'.'
name|'parent'
op|','
name|'service'
op|'.'
name|'IServiceCollection'
op|'('
name|'p'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNamedChild
dedent|''
name|'def'
name|'testNamedChild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'service'
op|'.'
name|'MultiService'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setName'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setServiceParent'
op|'('
name|'p'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'list'
op|'('
name|'p'
op|')'
op|','
op|'['
name|'s'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'s'
op|'.'
name|'parent'
op|','
name|'p'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'p'
op|'.'
name|'getServiceNamed'
op|'('
string|'"hello"'
op|')'
op|','
name|'s'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDoublyNamedChild
dedent|''
name|'def'
name|'testDoublyNamedChild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'service'
op|'.'
name|'MultiService'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setName'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setServiceParent'
op|'('
name|'p'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'RuntimeError'
op|','
name|'s'
op|'.'
name|'setName'
op|','
string|'"lala"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDuplicateNamedChild
dedent|''
name|'def'
name|'testDuplicateNamedChild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'service'
op|'.'
name|'MultiService'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setName'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setServiceParent'
op|'('
name|'p'
op|')'
newline|'\n'
name|'s'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setName'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'RuntimeError'
op|','
name|'s'
op|'.'
name|'setServiceParent'
op|','
name|'p'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDisowning
dedent|''
name|'def'
name|'testDisowning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'service'
op|'.'
name|'MultiService'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setServiceParent'
op|'('
name|'p'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'list'
op|'('
name|'p'
op|')'
op|','
op|'['
name|'s'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'s'
op|'.'
name|'parent'
op|','
name|'p'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'disownServiceParent'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'list'
op|'('
name|'p'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'s'
op|'.'
name|'parent'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRunning
dedent|''
name|'def'
name|'testRunning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'s'
op|'.'
name|'running'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'s'
op|'.'
name|'running'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'stopService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'s'
op|'.'
name|'running'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRunningChildren1
dedent|''
name|'def'
name|'testRunningChildren1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'service'
op|'.'
name|'MultiService'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setServiceParent'
op|'('
name|'p'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'s'
op|'.'
name|'running'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'p'
op|'.'
name|'running'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'s'
op|'.'
name|'running'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'p'
op|'.'
name|'running'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'stopService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'s'
op|'.'
name|'running'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'p'
op|'.'
name|'running'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRunningChildren2
dedent|''
name|'def'
name|'testRunningChildren2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
DECL|function|checkRunning
name|'def'
name|'checkRunning'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'s'
op|'.'
name|'running'
op|')'
newline|'\n'
dedent|''
name|'t'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
name|'t'
op|'.'
name|'stopService'
op|'='
name|'checkRunning'
newline|'\n'
name|'t'
op|'.'
name|'startService'
op|'='
name|'checkRunning'
newline|'\n'
name|'p'
op|'='
name|'service'
op|'.'
name|'MultiService'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setServiceParent'
op|'('
name|'p'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'setServiceParent'
op|'('
name|'p'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'stopService'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAddingIntoRunning
dedent|''
name|'def'
name|'testAddingIntoRunning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'service'
op|'.'
name|'MultiService'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'s'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'s'
op|'.'
name|'running'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setServiceParent'
op|'('
name|'p'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'s'
op|'.'
name|'running'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'disownServiceParent'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'s'
op|'.'
name|'running'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPrivileged
dedent|''
name|'def'
name|'testPrivileged'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
DECL|function|pss
name|'def'
name|'pss'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'.'
name|'privilegedStarted'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'s'
op|'.'
name|'privilegedStartService'
op|'='
name|'pss'
newline|'\n'
name|'s1'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'service'
op|'.'
name|'MultiService'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'setServiceParent'
op|'('
name|'p'
op|')'
newline|'\n'
name|'s1'
op|'.'
name|'setServiceParent'
op|'('
name|'p'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'privilegedStartService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'s'
op|'.'
name|'privilegedStarted'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCopying
dedent|''
name|'def'
name|'testCopying'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'s1'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'s'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'s1'
op|'.'
name|'running'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'s'
op|'.'
name|'running'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'os'
op|','
string|'"getuid"'
op|')'
op|':'
newline|'\n'
DECL|variable|curuid
indent|'    '
name|'curuid'
op|'='
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
newline|'\n'
DECL|variable|curgid
name|'curgid'
op|'='
name|'os'
op|'.'
name|'getgid'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'curuid'
op|'='
name|'curgid'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestProcess
dedent|''
name|'class'
name|'TestProcess'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|testID
indent|'    '
name|'def'
name|'testID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'service'
op|'.'
name|'Process'
op|'('
number|'5'
op|','
number|'6'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'p'
op|'.'
name|'uid'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'p'
op|'.'
name|'gid'
op|','
number|'6'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDefaults
dedent|''
name|'def'
name|'testDefaults'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'service'
op|'.'
name|'Process'
op|'('
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'p'
op|'.'
name|'uid'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'p'
op|'.'
name|'gid'
op|','
name|'None'
op|')'
newline|'\n'
name|'p'
op|'='
name|'service'
op|'.'
name|'Process'
op|'('
name|'gid'
op|'='
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'p'
op|'.'
name|'uid'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'p'
op|'.'
name|'gid'
op|','
number|'5'
op|')'
newline|'\n'
name|'p'
op|'='
name|'service'
op|'.'
name|'Process'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'p'
op|'.'
name|'uid'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'p'
op|'.'
name|'gid'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testProcessName
dedent|''
name|'def'
name|'testProcessName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'service'
op|'.'
name|'Process'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'p'
op|'.'
name|'processName'
op|','
name|'None'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'processName'
op|'='
string|"'hello'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'p'
op|'.'
name|'processName'
op|','
string|"'hello'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestInterfaces
dedent|''
dedent|''
name|'class'
name|'TestInterfaces'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|testService
indent|'    '
name|'def'
name|'testService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'service'
op|'.'
name|'IService'
op|'.'
name|'providedBy'
op|'('
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMultiService
dedent|''
name|'def'
name|'testMultiService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'service'
op|'.'
name|'IService'
op|'.'
name|'providedBy'
op|'('
name|'service'
op|'.'
name|'MultiService'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'service'
op|'.'
name|'IServiceCollection'
op|'.'
name|'providedBy'
op|'('
name|'service'
op|'.'
name|'MultiService'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testProcess
dedent|''
name|'def'
name|'testProcess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'service'
op|'.'
name|'IProcess'
op|'.'
name|'providedBy'
op|'('
name|'service'
op|'.'
name|'Process'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestApplication
dedent|''
dedent|''
name|'class'
name|'TestApplication'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|testConstructor
indent|'    '
name|'def'
name|'testConstructor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'service'
op|'.'
name|'Application'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'service'
op|'.'
name|'Application'
op|'('
string|'"hello"'
op|','
number|'5'
op|')'
newline|'\n'
name|'service'
op|'.'
name|'Application'
op|'('
string|'"hello"'
op|','
number|'5'
op|','
number|'6'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testProcessComponent
dedent|''
name|'def'
name|'testProcessComponent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'a'
op|'='
name|'service'
op|'.'
name|'Application'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'service'
op|'.'
name|'IProcess'
op|'('
name|'a'
op|')'
op|'.'
name|'uid'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'service'
op|'.'
name|'IProcess'
op|'('
name|'a'
op|')'
op|'.'
name|'gid'
op|','
name|'None'
op|')'
newline|'\n'
name|'a'
op|'='
name|'service'
op|'.'
name|'Application'
op|'('
string|'"hello"'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'service'
op|'.'
name|'IProcess'
op|'('
name|'a'
op|')'
op|'.'
name|'uid'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'service'
op|'.'
name|'IProcess'
op|'('
name|'a'
op|')'
op|'.'
name|'gid'
op|','
name|'None'
op|')'
newline|'\n'
name|'a'
op|'='
name|'service'
op|'.'
name|'Application'
op|'('
string|'"hello"'
op|','
number|'5'
op|','
number|'6'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'service'
op|'.'
name|'IProcess'
op|'('
name|'a'
op|')'
op|'.'
name|'uid'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'service'
op|'.'
name|'IProcess'
op|'('
name|'a'
op|')'
op|'.'
name|'gid'
op|','
number|'6'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testServiceComponent
dedent|''
name|'def'
name|'testServiceComponent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'a'
op|'='
name|'service'
op|'.'
name|'Application'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'service'
op|'.'
name|'IService'
op|'('
name|'a'
op|')'
name|'is'
name|'service'
op|'.'
name|'IServiceCollection'
op|'('
name|'a'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'service'
op|'.'
name|'IService'
op|'('
name|'a'
op|')'
op|'.'
name|'name'
op|','
string|'"hello"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'service'
op|'.'
name|'IService'
op|'('
name|'a'
op|')'
op|'.'
name|'parent'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPersistableComponent
dedent|''
name|'def'
name|'testPersistableComponent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'a'
op|'='
name|'service'
op|'.'
name|'Application'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'p'
op|'='
name|'sob'
op|'.'
name|'IPersistable'
op|'('
name|'a'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'p'
op|'.'
name|'style'
op|','
string|"'pickle'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'p'
op|'.'
name|'name'
op|','
string|"'hello'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'p'
op|'.'
name|'original'
name|'is'
name|'a'
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestLoading
dedent|''
dedent|''
name|'class'
name|'TestLoading'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_simpleStoreAndLoad
indent|'    '
name|'def'
name|'test_simpleStoreAndLoad'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'a'
op|'='
name|'service'
op|'.'
name|'Application'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'p'
op|'='
name|'sob'
op|'.'
name|'IPersistable'
op|'('
name|'a'
op|')'
newline|'\n'
name|'for'
name|'style'
name|'in'
string|"'source pickle'"
op|'.'
name|'split'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'setStyle'
op|'('
name|'style'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'a1'
op|'='
name|'service'
op|'.'
name|'loadApplication'
op|'('
string|'"hello.ta"'
op|'+'
name|'style'
op|'['
number|'0'
op|']'
op|','
name|'style'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'service'
op|'.'
name|'IService'
op|'('
name|'a1'
op|')'
op|'.'
name|'name'
op|','
string|'"hello"'
op|')'
newline|'\n'
dedent|''
name|'f'
op|'='
name|'open'
op|'('
string|'"hello.tac"'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'writelines'
op|'('
op|'['
nl|'\n'
string|'"from twisted.application import service\\n"'
op|','
nl|'\n'
string|'"application = service.Application(\'hello\')\\n"'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'a1'
op|'='
name|'service'
op|'.'
name|'loadApplication'
op|'('
string|'"hello.tac"'
op|','
string|"'python'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'service'
op|'.'
name|'IService'
op|'('
name|'a1'
op|')'
op|'.'
name|'name'
op|','
string|'"hello"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestAppSupport
dedent|''
dedent|''
name|'class'
name|'TestAppSupport'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|testPassphrase
indent|'    '
name|'def'
name|'testPassphrase'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'app'
op|'.'
name|'getPassphrase'
op|'('
number|'0'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLoadApplication
dedent|''
name|'def'
name|'testLoadApplication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test loading an application file in different dump format.\n        """'
newline|'\n'
name|'a'
op|'='
name|'service'
op|'.'
name|'Application'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'baseconfig'
op|'='
op|'{'
string|"'file'"
op|':'
name|'None'
op|','
string|"'source'"
op|':'
name|'None'
op|','
string|"'python'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'for'
name|'style'
name|'in'
string|"'source pickle'"
op|'.'
name|'split'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'config'
op|'='
name|'baseconfig'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
op|'{'
string|"'pickle'"
op|':'
string|"'file'"
op|'}'
op|'.'
name|'get'
op|'('
name|'style'
op|','
name|'style'
op|')'
op|']'
op|'='
string|"'helloapplication'"
newline|'\n'
name|'sob'
op|'.'
name|'IPersistable'
op|'('
name|'a'
op|')'
op|'.'
name|'setStyle'
op|'('
name|'style'
op|')'
newline|'\n'
name|'sob'
op|'.'
name|'IPersistable'
op|'('
name|'a'
op|')'
op|'.'
name|'save'
op|'('
name|'filename'
op|'='
string|"'helloapplication'"
op|')'
newline|'\n'
name|'a1'
op|'='
name|'app'
op|'.'
name|'getApplication'
op|'('
name|'config'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'service'
op|'.'
name|'IService'
op|'('
name|'a1'
op|')'
op|'.'
name|'name'
op|','
string|'"hello"'
op|')'
newline|'\n'
dedent|''
name|'config'
op|'='
name|'baseconfig'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|"'python'"
op|']'
op|'='
string|"'helloapplication'"
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
string|'"helloapplication"'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'writelines'
op|'('
op|'['
nl|'\n'
string|'"from twisted.application import service\\n"'
op|','
nl|'\n'
string|'"application = service.Application(\'hello\')\\n"'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'a1'
op|'='
name|'app'
op|'.'
name|'getApplication'
op|'('
name|'config'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'service'
op|'.'
name|'IService'
op|'('
name|'a1'
op|')'
op|'.'
name|'name'
op|','
string|'"hello"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_convertStyle
dedent|''
name|'def'
name|'test_convertStyle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'appl'
op|'='
name|'service'
op|'.'
name|'Application'
op|'('
string|'"lala"'
op|')'
newline|'\n'
name|'for'
name|'instyle'
name|'in'
string|"'source pickle'"
op|'.'
name|'split'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'outstyle'
name|'in'
string|"'source pickle'"
op|'.'
name|'split'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'sob'
op|'.'
name|'IPersistable'
op|'('
name|'appl'
op|')'
op|'.'
name|'setStyle'
op|'('
name|'instyle'
op|')'
newline|'\n'
name|'sob'
op|'.'
name|'IPersistable'
op|'('
name|'appl'
op|')'
op|'.'
name|'save'
op|'('
name|'filename'
op|'='
string|'"converttest"'
op|')'
newline|'\n'
name|'app'
op|'.'
name|'convertStyle'
op|'('
string|'"converttest"'
op|','
name|'instyle'
op|','
name|'None'
op|','
nl|'\n'
string|'"converttest.out"'
op|','
name|'outstyle'
op|','
number|'0'
op|')'
newline|'\n'
name|'appl2'
op|'='
name|'service'
op|'.'
name|'loadApplication'
op|'('
string|'"converttest.out"'
op|','
name|'outstyle'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'service'
op|'.'
name|'IService'
op|'('
name|'appl2'
op|')'
op|'.'
name|'name'
op|','
string|'"lala"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getLogFile
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_getLogFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test L{app.getLogFile}, veryfying the LogFile instance it returns.\n        """'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
string|'"logfiledir"'
op|')'
newline|'\n'
name|'l'
op|'='
name|'app'
op|'.'
name|'getLogFile'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|'"logfiledir"'
op|','
string|'"lala"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'l'
op|'.'
name|'path'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|'"logfiledir"'
op|','
string|'"lala"'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'l'
op|'.'
name|'name'
op|','
string|'"lala"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'l'
op|'.'
name|'directory'
op|','
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
string|'"logfiledir"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'test_getLogFile'
op|'.'
name|'suppress'
op|'='
op|'['
nl|'\n'
name|'util'
op|'.'
name|'suppress'
op|'('
name|'message'
op|'='
string|'"app.getLogFile is deprecated. Use "'
nl|'\n'
string|'"twisted.python.logfile.LogFile.fromFullPath instead"'
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_startApplication
name|'def'
name|'test_startApplication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'appl'
op|'='
name|'service'
op|'.'
name|'Application'
op|'('
string|'"lala"'
op|')'
newline|'\n'
name|'app'
op|'.'
name|'startApplication'
op|'('
name|'appl'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'service'
op|'.'
name|'IService'
op|'('
name|'appl'
op|')'
op|'.'
name|'running'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Foo
dedent|''
dedent|''
name|'class'
name|'Foo'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
DECL|member|connectionMade
indent|'    '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|"'lalala\\r\\n'"
op|')'
newline|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'line'
op|'='
name|'line'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'callback'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'line'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyApp
dedent|''
dedent|''
name|'class'
name|'DummyApp'
op|':'
newline|'\n'
DECL|variable|processName
indent|'    '
name|'processName'
op|'='
name|'None'
newline|'\n'
DECL|member|addService
name|'def'
name|'addService'
op|'('
name|'self'
op|','
name|'service'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'services'
op|'['
name|'service'
op|'.'
name|'name'
op|']'
op|'='
name|'service'
newline|'\n'
DECL|member|removeService
dedent|''
name|'def'
name|'removeService'
op|'('
name|'self'
op|','
name|'service'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'self'
op|'.'
name|'services'
op|'['
name|'service'
op|'.'
name|'name'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TimerTarget
dedent|''
dedent|''
name|'class'
name|'TimerTarget'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
DECL|member|append
dedent|''
name|'def'
name|'append'
op|'('
name|'self'
op|','
name|'what'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'l'
op|'.'
name|'append'
op|'('
name|'what'
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestEcho
dedent|''
dedent|''
name|'class'
name|'TestEcho'
op|'('
name|'wire'
op|'.'
name|'Echo'
op|')'
op|':'
newline|'\n'
DECL|member|connectionLost
indent|'    '
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'d'
op|'.'
name|'callback'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestInternet2
dedent|''
dedent|''
name|'class'
name|'TestInternet2'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|testTCP
indent|'    '
name|'def'
name|'testTCP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'service'
op|'.'
name|'MultiService'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'='
name|'protocol'
op|'.'
name|'ServerFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'protocol'
op|'='
name|'TestEcho'
newline|'\n'
name|'TestEcho'
op|'.'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'t'
op|'='
name|'internet'
op|'.'
name|'TCPServer'
op|'('
number|'0'
op|','
name|'factory'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'setServiceParent'
op|'('
name|'s'
op|')'
newline|'\n'
name|'num'
op|'='
name|'t'
op|'.'
name|'_port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'factory'
op|'='
name|'protocol'
op|'.'
name|'ClientFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'protocol'
op|'='
name|'Foo'
newline|'\n'
name|'factory'
op|'.'
name|'line'
op|'='
name|'None'
newline|'\n'
name|'internet'
op|'.'
name|'TCPClient'
op|'('
string|"'127.0.0.1'"
op|','
name|'num'
op|','
name|'factory'
op|')'
op|'.'
name|'setServiceParent'
op|'('
name|'s'
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
string|"'lalala'"
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'s'
op|'.'
name|'stopService'
op|'('
op|')'
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'TestEcho'
op|'.'
name|'d'
op|')'
newline|'\n'
name|'return'
name|'factory'
op|'.'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_UDP
dedent|''
name|'def'
name|'test_UDP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test L{internet.UDPServer} with a random port: starting the service\n        should give it valid port, and stopService should free it so that we\n        can start a server on the same port again.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'interfaces'
op|'.'
name|'IReactorUDP'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'unittest'
op|'.'
name|'SkipTest'
op|'('
string|'"This reactor does not support UDP sockets"'
op|')'
newline|'\n'
dedent|''
name|'p'
op|'='
name|'protocol'
op|'.'
name|'DatagramProtocol'
op|'('
op|')'
newline|'\n'
name|'t'
op|'='
name|'internet'
op|'.'
name|'UDPServer'
op|'('
number|'0'
op|','
name|'p'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'num'
op|'='
name|'t'
op|'.'
name|'_port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'num'
op|','
number|'0'
op|')'
newline|'\n'
DECL|function|onStop
name|'def'
name|'onStop'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'t'
op|'='
name|'internet'
op|'.'
name|'UDPServer'
op|'('
name|'num'
op|','
name|'p'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'return'
name|'t'
op|'.'
name|'stopService'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'t'
op|'.'
name|'stopService'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'onStop'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testPrivileged
dedent|''
name|'def'
name|'testPrivileged'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'factory'
op|'='
name|'protocol'
op|'.'
name|'ServerFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'protocol'
op|'='
name|'TestEcho'
newline|'\n'
name|'TestEcho'
op|'.'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'t'
op|'='
name|'internet'
op|'.'
name|'TCPServer'
op|'('
number|'0'
op|','
name|'factory'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'privileged'
op|'='
number|'1'
newline|'\n'
name|'t'
op|'.'
name|'privilegedStartService'
op|'('
op|')'
newline|'\n'
name|'num'
op|'='
name|'t'
op|'.'
name|'_port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'factory'
op|'='
name|'protocol'
op|'.'
name|'ClientFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'protocol'
op|'='
name|'Foo'
newline|'\n'
name|'factory'
op|'.'
name|'line'
op|'='
name|'None'
newline|'\n'
name|'c'
op|'='
name|'internet'
op|'.'
name|'TCPClient'
op|'('
string|"'127.0.0.1'"
op|','
name|'num'
op|','
name|'factory'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
string|"'lalala'"
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'c'
op|'.'
name|'stopService'
op|'('
op|')'
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'t'
op|'.'
name|'stopService'
op|'('
op|')'
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'TestEcho'
op|'.'
name|'d'
op|')'
newline|'\n'
name|'return'
name|'factory'
op|'.'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testConnectionGettingRefused
dedent|''
name|'def'
name|'testConnectionGettingRefused'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'factory'
op|'='
name|'protocol'
op|'.'
name|'ServerFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'protocol'
op|'='
name|'wire'
op|'.'
name|'Echo'
newline|'\n'
name|'t'
op|'='
name|'internet'
op|'.'
name|'TCPServer'
op|'('
number|'0'
op|','
name|'factory'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'num'
op|'='
name|'t'
op|'.'
name|'_port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'t'
op|'.'
name|'stopService'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'='
name|'protocol'
op|'.'
name|'ClientFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'clientConnectionFailed'
op|'='
name|'lambda'
op|'*'
name|'args'
op|':'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'c'
op|'='
name|'internet'
op|'.'
name|'TCPClient'
op|'('
string|"'127.0.0.1'"
op|','
name|'num'
op|','
name|'factory'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testUNIX
dedent|''
name|'def'
name|'testUNIX'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# FIXME: This test is far too dense.  It needs comments.'
nl|'\n'
comment|'#  -- spiv, 2004-11-07'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'interfaces'
op|'.'
name|'IReactorUNIX'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'unittest'
op|'.'
name|'SkipTest'
op|','
string|'"This reactor does not support UNIX domain sockets"'
newline|'\n'
dedent|''
name|'s'
op|'='
name|'service'
op|'.'
name|'MultiService'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'='
name|'protocol'
op|'.'
name|'ServerFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'protocol'
op|'='
name|'TestEcho'
newline|'\n'
name|'TestEcho'
op|'.'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'t'
op|'='
name|'internet'
op|'.'
name|'UNIXServer'
op|'('
string|"'echo.skt'"
op|','
name|'factory'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'setServiceParent'
op|'('
name|'s'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'protocol'
op|'.'
name|'ClientFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'protocol'
op|'='
name|'Foo'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'line'
op|'='
name|'None'
newline|'\n'
name|'internet'
op|'.'
name|'UNIXClient'
op|'('
string|"'echo.skt'"
op|','
name|'factory'
op|')'
op|'.'
name|'setServiceParent'
op|'('
name|'s'
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
string|"'lalala'"
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'s'
op|'.'
name|'stopService'
op|'('
op|')'
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'TestEcho'
op|'.'
name|'d'
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_cbTestUnix'
op|','
name|'factory'
op|','
name|'s'
op|')'
newline|'\n'
name|'return'
name|'factory'
op|'.'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_cbTestUnix
dedent|''
name|'def'
name|'_cbTestUnix'
op|'('
name|'self'
op|','
name|'ignored'
op|','
name|'factory'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'TestEcho'
op|'.'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'line'
op|'='
name|'None'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'s'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
string|"'lalala'"
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'s'
op|'.'
name|'stopService'
op|'('
op|')'
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'TestEcho'
op|'.'
name|'d'
op|')'
newline|'\n'
name|'return'
name|'factory'
op|'.'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testVolatile
dedent|''
name|'def'
name|'testVolatile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'interfaces'
op|'.'
name|'IReactorUNIX'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'unittest'
op|'.'
name|'SkipTest'
op|','
string|'"This reactor does not support UNIX domain sockets"'
newline|'\n'
dedent|''
name|'factory'
op|'='
name|'protocol'
op|'.'
name|'ServerFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'protocol'
op|'='
name|'wire'
op|'.'
name|'Echo'
newline|'\n'
name|'t'
op|'='
name|'internet'
op|'.'
name|'UNIXServer'
op|'('
string|"'echo.skt'"
op|','
name|'factory'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfIdentical'
op|'('
name|'t'
op|'.'
name|'_port'
op|','
name|'None'
op|')'
newline|'\n'
name|'t1'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'t'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'t1'
op|'.'
name|'_port'
op|','
name|'None'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'stopService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'t'
op|'.'
name|'_port'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'t'
op|'.'
name|'running'
op|')'
newline|'\n'
nl|'\n'
name|'factory'
op|'='
name|'protocol'
op|'.'
name|'ClientFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'protocol'
op|'='
name|'wire'
op|'.'
name|'Echo'
newline|'\n'
name|'t'
op|'='
name|'internet'
op|'.'
name|'UNIXClient'
op|'('
string|"'echo.skt'"
op|','
name|'factory'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfIdentical'
op|'('
name|'t'
op|'.'
name|'_connection'
op|','
name|'None'
op|')'
newline|'\n'
name|'t1'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'t'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'t1'
op|'.'
name|'_connection'
op|','
name|'None'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'stopService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'t'
op|'.'
name|'_connection'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'t'
op|'.'
name|'running'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testStoppingServer
dedent|''
name|'def'
name|'testStoppingServer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'interfaces'
op|'.'
name|'IReactorUNIX'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'unittest'
op|'.'
name|'SkipTest'
op|','
string|'"This reactor does not support UNIX domain sockets"'
newline|'\n'
dedent|''
name|'factory'
op|'='
name|'protocol'
op|'.'
name|'ServerFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'protocol'
op|'='
name|'wire'
op|'.'
name|'Echo'
newline|'\n'
name|'t'
op|'='
name|'internet'
op|'.'
name|'UNIXServer'
op|'('
string|"'echo.skt'"
op|','
name|'factory'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'t'
op|'.'
name|'stopService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'t'
op|'.'
name|'running'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'protocol'
op|'.'
name|'ClientFactory'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'clientConnectionFailed'
op|'='
name|'lambda'
op|'*'
name|'args'
op|':'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectUNIX'
op|'('
string|"'echo.skt'"
op|','
name|'factory'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testPickledTimer
dedent|''
name|'def'
name|'testPickledTimer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'target'
op|'='
name|'TimerTarget'
op|'('
op|')'
newline|'\n'
name|'t0'
op|'='
name|'internet'
op|'.'
name|'TimerService'
op|'('
number|'1'
op|','
name|'target'
op|'.'
name|'append'
op|','
string|'"hello"'
op|')'
newline|'\n'
name|'t0'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'s'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'t0'
op|')'
newline|'\n'
name|'t0'
op|'.'
name|'stopService'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'t'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'s'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'t'
op|'.'
name|'running'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testBrokenTimer
dedent|''
name|'def'
name|'testBrokenTimer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'t'
op|'='
name|'internet'
op|'.'
name|'TimerService'
op|'('
number|'1'
op|','
name|'lambda'
op|':'
number|'1'
op|'/'
number|'0'
op|')'
newline|'\n'
name|'oldFailed'
op|'='
name|'t'
op|'.'
name|'_failed'
newline|'\n'
DECL|function|_failed
name|'def'
name|'_failed'
op|'('
name|'why'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'oldFailed'
op|'('
name|'why'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'t'
op|'.'
name|'_failed'
op|'='
name|'_failed'
newline|'\n'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'t'
op|'.'
name|'stopService'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
op|'['
name|'ZeroDivisionError'
op|']'
op|','
nl|'\n'
op|'['
name|'o'
op|'.'
name|'value'
op|'.'
name|'__class__'
name|'for'
name|'o'
name|'in'
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'ZeroDivisionError'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testEverythingThere
dedent|''
name|'def'
name|'testEverythingThere'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'trans'
op|'='
string|"'TCP UNIX SSL UDP UNIXDatagram Multicast'"
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'for'
name|'tran'
name|'in'
name|'trans'
op|'['
op|':'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'getattr'
op|'('
name|'interfaces'
op|','
string|'"IReactor"'
op|'+'
name|'tran'
op|')'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'trans'
op|'.'
name|'remove'
op|'('
name|'tran'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'interfaces'
op|'.'
name|'IReactorArbitrary'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'trans'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
string|'"Generic"'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'tran'
name|'in'
name|'trans'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'side'
name|'in'
string|"'Server Client'"
op|'.'
name|'split'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'tran'
op|'=='
string|'"Multicast"'
name|'and'
name|'side'
op|'=='
string|'"Client"'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assert_'
op|'('
name|'hasattr'
op|'('
name|'internet'
op|','
name|'tran'
op|'+'
name|'side'
op|')'
op|')'
newline|'\n'
name|'method'
op|'='
name|'getattr'
op|'('
name|'internet'
op|','
name|'tran'
op|'+'
name|'side'
op|')'
op|'.'
name|'method'
newline|'\n'
name|'prefix'
op|'='
op|'{'
string|"'Server'"
op|':'
string|"'listen'"
op|','
string|"'Client'"
op|':'
string|"'connect'"
op|'}'
op|'['
name|'side'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'hasattr'
op|'('
name|'reactor'
op|','
name|'prefix'
op|'+'
name|'method'
op|')'
name|'or'
nl|'\n'
op|'('
name|'prefix'
op|'=='
string|'"connect"'
name|'and'
name|'method'
op|'=='
string|'"UDP"'
op|')'
op|')'
newline|'\n'
name|'o'
op|'='
name|'getattr'
op|'('
name|'internet'
op|','
name|'tran'
op|'+'
name|'side'
op|')'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'service'
op|'.'
name|'IService'
op|'('
name|'o'
op|')'
op|','
name|'o'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reactorParametrizationInServer
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_reactorParametrizationInServer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{internet._AbstractServer} supports a C{reactor} keyword argument\n        that can be used to parametrize the reactor used to listen for\n        connections.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'MemoryReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'factory'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'t'
op|'='
name|'internet'
op|'.'
name|'TCPServer'
op|'('
number|'1234'
op|','
name|'factory'
op|','
name|'reactor'
op|'='
name|'reactor'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reactor'
op|'.'
name|'tcpServers'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
op|':'
number|'2'
op|']'
op|','
op|'('
number|'1234'
op|','
name|'factory'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reactorParametrizationInClient
dedent|''
name|'def'
name|'test_reactorParametrizationInClient'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{internet._AbstractClient} supports a C{reactor} keyword arguments\n        that can be used to parametrize the reactor used to create new client\n        connections.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'MemoryReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'factory'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'t'
op|'='
name|'internet'
op|'.'
name|'TCPClient'
op|'('
string|"'127.0.0.1'"
op|','
number|'1234'
op|','
name|'factory'
op|','
name|'reactor'
op|'='
name|'reactor'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'reactor'
op|'.'
name|'tcpClients'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
op|':'
number|'3'
op|']'
op|','
op|'('
string|"'127.0.0.1'"
op|','
number|'1234'
op|','
name|'factory'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reactorParametrizationInServerMultipleStart
dedent|''
name|'def'
name|'test_reactorParametrizationInServerMultipleStart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like L{test_reactorParametrizationInServer}, but stop and restart the\n        service and check that the given reactor is still used.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'MemoryReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'factory'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'t'
op|'='
name|'internet'
op|'.'
name|'TCPServer'
op|'('
number|'1234'
op|','
name|'factory'
op|','
name|'reactor'
op|'='
name|'reactor'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reactor'
op|'.'
name|'tcpServers'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
op|':'
number|'2'
op|']'
op|','
op|'('
number|'1234'
op|','
name|'factory'
op|')'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'stopService'
op|'('
op|')'
newline|'\n'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reactor'
op|'.'
name|'tcpServers'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
op|':'
number|'2'
op|']'
op|','
op|'('
number|'1234'
op|','
name|'factory'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reactorParametrizationInClientMultipleStart
dedent|''
name|'def'
name|'test_reactorParametrizationInClientMultipleStart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like L{test_reactorParametrizationInClient}, but stop and restart the\n        service and check that the given reactor is still used.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'MemoryReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'factory'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'t'
op|'='
name|'internet'
op|'.'
name|'TCPClient'
op|'('
string|"'127.0.0.1'"
op|','
number|'1234'
op|','
name|'factory'
op|','
name|'reactor'
op|'='
name|'reactor'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'reactor'
op|'.'
name|'tcpClients'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
op|':'
number|'3'
op|']'
op|','
op|'('
string|"'127.0.0.1'"
op|','
number|'1234'
op|','
name|'factory'
op|')'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'stopService'
op|'('
op|')'
newline|'\n'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'reactor'
op|'.'
name|'tcpClients'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
op|':'
number|'3'
op|']'
op|','
op|'('
string|"'127.0.0.1'"
op|','
number|'1234'
op|','
name|'factory'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestTimerBasic
dedent|''
dedent|''
name|'class'
name|'TestTimerBasic'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|testTimerRuns
indent|'    '
name|'def'
name|'testTimerRuns'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'t'
op|'='
name|'internet'
op|'.'
name|'TimerService'
op|'('
number|'1'
op|','
name|'d'
op|'.'
name|'callback'
op|','
string|"'hello'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
string|"'hello'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'t'
op|'.'
name|'stopService'
op|'('
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'t'
op|'.'
name|'running'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'t'
op|'.'
name|'stopService'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testTimerRestart
dedent|''
name|'def'
name|'testTimerRestart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# restart the same TimerService'
nl|'\n'
indent|'        '
name|'d1'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d2'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'work'
op|'='
op|'['
op|'('
name|'d2'
op|','
string|'"bar"'
op|')'
op|','
op|'('
name|'d1'
op|','
string|'"foo"'
op|')'
op|']'
newline|'\n'
DECL|function|trigger
name|'def'
name|'trigger'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'arg'
op|'='
name|'work'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'arg'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'t'
op|'='
name|'internet'
op|'.'
name|'TimerService'
op|'('
number|'1'
op|','
name|'trigger'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
DECL|function|onFirstResult
name|'def'
name|'onFirstResult'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'t'
op|'.'
name|'stopService'
op|'('
op|')'
newline|'\n'
DECL|function|onFirstStop
dedent|''
name|'def'
name|'onFirstStop'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'t'
op|'.'
name|'running'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d2'
newline|'\n'
DECL|function|onSecondResult
dedent|''
name|'def'
name|'onSecondResult'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'t'
op|'.'
name|'stopService'
op|'('
op|')'
newline|'\n'
dedent|''
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'onFirstResult'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'onFirstStop'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'onSecondResult'
op|')'
newline|'\n'
name|'return'
name|'d1'
newline|'\n'
nl|'\n'
DECL|member|testTimerLoops
dedent|''
name|'def'
name|'testTimerLoops'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|trigger
name|'def'
name|'trigger'
op|'('
name|'data'
op|','
name|'number'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'l'
op|')'
op|'=='
name|'number'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'.'
name|'callback'
op|'('
name|'l'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'t'
op|'='
name|'internet'
op|'.'
name|'TimerService'
op|'('
number|'0.01'
op|','
name|'trigger'
op|','
string|'"hello"'
op|','
number|'10'
op|','
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'t'
op|'.'
name|'startService'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
op|'['
string|"'hello'"
op|']'
op|'*'
number|'10'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'t'
op|'.'
name|'stopService'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeReactor
dedent|''
dedent|''
name|'class'
name|'FakeReactor'
op|'('
name|'reactors'
op|'.'
name|'Reactor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A fake reactor with a hooked install method.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'install'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param install: any callable that will be used as install method.\n        @type install: C{callable}\n        """'
newline|'\n'
name|'reactors'
op|'.'
name|'Reactor'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'install'
op|'='
name|'install'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PluggableReactorTestCase
dedent|''
dedent|''
name|'class'
name|'PluggableReactorTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the reactor discovery/inspection APIs.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override the L{reactors.getPlugins} function, normally bound to\n        L{twisted.plugin.getPlugins}, in order to control which\n        L{IReactorInstaller} plugins are seen as available.\n\n        C{self.pluginResults} can be customized and will be used as the\n        result of calls to C{reactors.getPlugins}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'pluginCalls'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'pluginResults'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'originalFunction'
op|'='
name|'reactors'
op|'.'
name|'getPlugins'
newline|'\n'
name|'reactors'
op|'.'
name|'getPlugins'
op|'='
name|'self'
op|'.'
name|'_getPlugins'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Restore the original L{reactors.getPlugins}.\n        """'
newline|'\n'
name|'reactors'
op|'.'
name|'getPlugins'
op|'='
name|'self'
op|'.'
name|'originalFunction'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getPlugins
dedent|''
name|'def'
name|'_getPlugins'
op|'('
name|'self'
op|','
name|'interface'
op|','
name|'package'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stand-in for the real getPlugins method which records its arguments\n        and returns a fixed result.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'pluginCalls'
op|'.'
name|'append'
op|'('
op|'('
name|'interface'
op|','
name|'package'
op|')'
op|')'
newline|'\n'
name|'return'
name|'list'
op|'('
name|'self'
op|'.'
name|'pluginResults'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getPluginReactorTypes
dedent|''
name|'def'
name|'test_getPluginReactorTypes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that reactor plugins are returned from L{getReactorTypes}\n        """'
newline|'\n'
name|'name'
op|'='
string|"'fakereactortest'"
newline|'\n'
name|'package'
op|'='
name|'__name__'
op|'+'
string|"'.fakereactor'"
newline|'\n'
name|'description'
op|'='
string|"'description'"
newline|'\n'
name|'self'
op|'.'
name|'pluginResults'
op|'='
op|'['
name|'reactors'
op|'.'
name|'Reactor'
op|'('
name|'name'
op|','
name|'package'
op|','
name|'description'
op|')'
op|']'
newline|'\n'
name|'reactorTypes'
op|'='
name|'reactors'
op|'.'
name|'getReactorTypes'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'pluginCalls'
op|','
nl|'\n'
op|'['
op|'('
name|'reactors'
op|'.'
name|'IReactorInstaller'
op|','
name|'None'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'r'
name|'in'
name|'reactorTypes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'r'
op|'.'
name|'shortName'
op|'=='
name|'name'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'r'
op|'.'
name|'description'
op|','
name|'description'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Reactor plugin not present in getReactorTypes() result"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reactorInstallation
dedent|''
dedent|''
name|'def'
name|'test_reactorInstallation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that L{reactors.Reactor.install} loads the correct module and\n        calls its install attribute.\n        """'
newline|'\n'
name|'installed'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|install
name|'def'
name|'install'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'installed'
op|'.'
name|'append'
op|'('
name|'True'
op|')'
newline|'\n'
dedent|''
name|'installer'
op|'='
name|'FakeReactor'
op|'('
name|'install'
op|','
nl|'\n'
string|"'fakereactortest'"
op|','
name|'__name__'
op|','
string|"'described'"
op|')'
newline|'\n'
name|'installer'
op|'.'
name|'install'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'installed'
op|','
op|'['
name|'True'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_installReactor
dedent|''
name|'def'
name|'test_installReactor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the L{reactors.installReactor} function correctly installs\n        the specified reactor.\n        """'
newline|'\n'
name|'installed'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|install
name|'def'
name|'install'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'installed'
op|'.'
name|'append'
op|'('
name|'True'
op|')'
newline|'\n'
dedent|''
name|'name'
op|'='
string|"'fakereactortest'"
newline|'\n'
name|'package'
op|'='
name|'__name__'
newline|'\n'
name|'description'
op|'='
string|"'description'"
newline|'\n'
name|'self'
op|'.'
name|'pluginResults'
op|'='
op|'['
name|'FakeReactor'
op|'('
name|'install'
op|','
name|'name'
op|','
name|'package'
op|','
name|'description'
op|')'
op|']'
newline|'\n'
name|'reactors'
op|'.'
name|'installReactor'
op|'('
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'installed'
op|','
op|'['
name|'True'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_installNonExistentReactor
dedent|''
name|'def'
name|'test_installNonExistentReactor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that L{reactors.installReactor} raises L{reactors.NoSuchReactor}\n        when asked to install a reactor which it cannot find.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'pluginResults'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'reactors'
op|'.'
name|'NoSuchReactor'
op|','
nl|'\n'
name|'reactors'
op|'.'
name|'installReactor'
op|','
string|"'somereactor'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_installNotAvailableReactor
dedent|''
name|'def'
name|'test_installNotAvailableReactor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that L{reactors.installReactor} raises an exception when asked to\n        install a reactor which doesn\'t work in this environment.\n        """'
newline|'\n'
DECL|function|install
name|'def'
name|'install'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ImportError'
op|'('
string|'"Missing foo bar"'
op|')'
newline|'\n'
dedent|''
name|'name'
op|'='
string|"'fakereactortest'"
newline|'\n'
name|'package'
op|'='
name|'__name__'
newline|'\n'
name|'description'
op|'='
string|"'description'"
newline|'\n'
name|'self'
op|'.'
name|'pluginResults'
op|'='
op|'['
name|'FakeReactor'
op|'('
name|'install'
op|','
name|'name'
op|','
name|'package'
op|','
name|'description'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ImportError'
op|','
name|'reactors'
op|'.'
name|'installReactor'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reactorSelectionMixin
dedent|''
name|'def'
name|'test_reactorSelectionMixin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the reactor selected is installed as soon as possible, ie\n        when the option is parsed.\n        """'
newline|'\n'
name|'executed'
op|'='
op|'['
op|']'
newline|'\n'
name|'INSTALL_EVENT'
op|'='
string|"'reactor installed'"
newline|'\n'
name|'SUBCOMMAND_EVENT'
op|'='
string|"'subcommands loaded'"
newline|'\n'
nl|'\n'
DECL|class|ReactorSelectionOptions
name|'class'
name|'ReactorSelectionOptions'
op|'('
name|'usage'
op|'.'
name|'Options'
op|','
name|'app'
op|'.'
name|'ReactorSelectionMixin'
op|')'
op|':'
newline|'\n'
DECL|member|subCommands
indent|'            '
name|'def'
name|'subCommands'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'executed'
op|'.'
name|'append'
op|'('
name|'SUBCOMMAND_EVENT'
op|')'
newline|'\n'
name|'return'
op|'['
op|'('
string|"'subcommand'"
op|','
name|'None'
op|','
name|'lambda'
op|':'
name|'self'
op|','
string|"'test subcommand'"
op|')'
op|']'
newline|'\n'
DECL|variable|subCommands
dedent|''
name|'subCommands'
op|'='
name|'property'
op|'('
name|'subCommands'
op|')'
newline|'\n'
nl|'\n'
DECL|function|install
dedent|''
name|'def'
name|'install'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'executed'
op|'.'
name|'append'
op|'('
name|'INSTALL_EVENT'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'pluginResults'
op|'='
op|'['
nl|'\n'
name|'FakeReactor'
op|'('
name|'install'
op|','
string|"'fakereactortest'"
op|','
name|'__name__'
op|','
string|"'described'"
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'options'
op|'='
name|'ReactorSelectionOptions'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--reactor'"
op|','
string|"'fakereactortest'"
op|','
string|"'subcommand'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'executed'
op|'['
number|'0'
op|']'
op|','
name|'INSTALL_EVENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'executed'
op|'.'
name|'count'
op|'('
name|'INSTALL_EVENT'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reactorSelectionMixinNonExistent
dedent|''
name|'def'
name|'test_reactorSelectionMixinNonExistent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the usage mixin exits when trying to use a non existent\n        reactor (the name not matching to any reactor), giving an error\n        message.\n        """'
newline|'\n'
DECL|class|ReactorSelectionOptions
name|'class'
name|'ReactorSelectionOptions'
op|'('
name|'usage'
op|'.'
name|'Options'
op|','
name|'app'
op|'.'
name|'ReactorSelectionMixin'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'pluginResults'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'options'
op|'='
name|'ReactorSelectionOptions'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'messageOutput'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'e'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'usage'
op|'.'
name|'UsageError'
op|','
name|'options'
op|'.'
name|'parseOptions'
op|','
nl|'\n'
op|'['
string|"'--reactor'"
op|','
string|"'fakereactortest'"
op|','
string|"'subcommand'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"fakereactortest"'
op|','
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"help-reactors"'
op|','
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reactorSelectionMixinNotAvailable
dedent|''
name|'def'
name|'test_reactorSelectionMixinNotAvailable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the usage mixin exits when trying to use a reactor not\n        available (the reactor raises an error at installation), giving an\n        error message.\n        """'
newline|'\n'
DECL|class|ReactorSelectionOptions
name|'class'
name|'ReactorSelectionOptions'
op|'('
name|'usage'
op|'.'
name|'Options'
op|','
name|'app'
op|'.'
name|'ReactorSelectionMixin'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'message'
op|'='
string|'"Missing foo bar"'
newline|'\n'
DECL|function|install
name|'def'
name|'install'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ImportError'
op|'('
name|'message'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'name'
op|'='
string|"'fakereactortest'"
newline|'\n'
name|'package'
op|'='
name|'__name__'
newline|'\n'
name|'description'
op|'='
string|"'description'"
newline|'\n'
name|'self'
op|'.'
name|'pluginResults'
op|'='
op|'['
name|'FakeReactor'
op|'('
name|'install'
op|','
name|'name'
op|','
name|'package'
op|','
name|'description'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'options'
op|'='
name|'ReactorSelectionOptions'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'messageOutput'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'e'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'usage'
op|'.'
name|'UsageError'
op|','
name|'options'
op|'.'
name|'parseOptions'
op|','
nl|'\n'
op|'['
string|"'--reactor'"
op|','
string|"'fakereactortest'"
op|','
string|"'subcommand'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'message'
op|','
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"help-reactors"'
op|','
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReportProfileTestCase
dedent|''
dedent|''
name|'class'
name|'ReportProfileTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{app.reportProfile}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_deprecation
name|'def'
name|'test_deprecation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that L{app.reportProfile} prints a warning and does nothing else.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"reportProfile is deprecated and a no-op since Twisted 8.0."'
op|','
nl|'\n'
name|'app'
op|'.'
name|'__file__'
op|','
name|'app'
op|'.'
name|'reportProfile'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

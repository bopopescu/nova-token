begin_unit
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nFTP tests.\n\nMaintainer: Andrew Bennetts\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
op|','
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
op|','
name|'task'
op|','
name|'protocol'
op|','
name|'defer'
op|','
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IConsumer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'portal'
op|','
name|'checkers'
op|','
name|'credentials'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
op|','
name|'filepath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
name|'import'
name|'proto_helpers'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'ftp'
op|','
name|'loopback'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_changeDirectorySuppression
name|'_changeDirectorySuppression'
op|'='
name|'util'
op|'.'
name|'suppress'
op|'('
nl|'\n'
DECL|variable|category
name|'category'
op|'='
name|'DeprecationWarning'
op|','
nl|'\n'
DECL|variable|message
name|'message'
op|'='
op|'('
nl|'\n'
string|'r"FTPClient\\.changeDirectory is deprecated in Twisted 8\\.2 and "'
nl|'\n'
string|'r"newer\\.  Use FTPClient\\.cwd instead\\."'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Dummy
name|'class'
name|'Dummy'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
DECL|variable|logname
indent|'    '
name|'logname'
op|'='
name|'None'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lines'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'rawData'
op|'='
op|'['
op|']'
newline|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'f'
op|'='
name|'self'
op|'.'
name|'factory'
comment|'# to save typing in pdb :-)'
newline|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lines'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
DECL|member|rawDataReceived
dedent|''
name|'def'
name|'rawDataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'rawData'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
DECL|member|lineLengthExceeded
dedent|''
name|'def'
name|'lineLengthExceeded'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_BufferingProtocol
dedent|''
dedent|''
name|'class'
name|'_BufferingProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
DECL|member|connectionMade
indent|'    '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'+='
name|'data'
newline|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'d'
op|'.'
name|'callback'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPServerTestCase
dedent|''
dedent|''
name|'class'
name|'FTPServerTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Simple tests for an FTP server with the default settings.\n\n    @ivar clientFactory: class used as ftp client.\n    """'
newline|'\n'
DECL|variable|clientFactory
name|'clientFactory'
op|'='
name|'ftp'
op|'.'
name|'FTPClientBasic'
newline|'\n'
DECL|variable|userAnonymous
name|'userAnonymous'
op|'='
string|'"anonymous"'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create a directory'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'directory'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'directory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dirPath'
op|'='
name|'filepath'
op|'.'
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'directory'
op|')'
newline|'\n'
nl|'\n'
comment|'# Start the server'
nl|'\n'
name|'p'
op|'='
name|'portal'
op|'.'
name|'Portal'
op|'('
name|'ftp'
op|'.'
name|'FTPRealm'
op|'('
name|'self'
op|'.'
name|'directory'
op|')'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'registerChecker'
op|'('
name|'checkers'
op|'.'
name|'AllowAnonymousAccess'
op|'('
op|')'
op|','
nl|'\n'
name|'credentials'
op|'.'
name|'IAnonymous'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'='
name|'ftp'
op|'.'
name|'FTPFactory'
op|'('
name|'portal'
op|'='
name|'p'
op|','
nl|'\n'
name|'userAnonymous'
op|'='
name|'self'
op|'.'
name|'userAnonymous'
op|')'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'factory'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
nl|'\n'
comment|"# Hook the server's buildProtocol to make the protocol instance"
nl|'\n'
comment|'# accessible to tests.'
nl|'\n'
name|'buildProtocol'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
newline|'\n'
name|'d1'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|function|_rememberProtocolInstance
name|'def'
name|'_rememberProtocolInstance'
op|'('
name|'addr'
op|')'
op|':'
newline|'\n'
comment|'# Done hooking this.'
nl|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
newline|'\n'
nl|'\n'
name|'protocol'
op|'='
name|'buildProtocol'
op|'('
name|'addr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serverProtocol'
op|'='
name|'protocol'
op|'.'
name|'wrappedProtocol'
newline|'\n'
DECL|function|cleanupServer
name|'def'
name|'cleanupServer'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'serverProtocol'
op|'.'
name|'transport'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'serverProtocol'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'cleanupServer'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
name|'protocol'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
op|'='
name|'_rememberProtocolInstance'
newline|'\n'
nl|'\n'
comment|'# Connect a client to it'
nl|'\n'
name|'portNum'
op|'='
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'clientCreator'
op|'='
name|'protocol'
op|'.'
name|'ClientCreator'
op|'('
name|'reactor'
op|','
name|'self'
op|'.'
name|'clientFactory'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'clientCreator'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'portNum'
op|')'
newline|'\n'
DECL|function|gotClient
name|'def'
name|'gotClient'
op|'('
name|'client'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'client'
op|'='
name|'client'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|')'
newline|'\n'
dedent|''
name|'d2'
op|'.'
name|'addCallback'
op|'('
name|'gotClient'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertCommandResponse
dedent|''
name|'def'
name|'assertCommandResponse'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'expectedResponseLines'
op|','
nl|'\n'
name|'chainDeferred'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Asserts that a sending an FTP command receives the expected\n        response.\n\n        Returns a Deferred.  Optionally accepts a deferred to chain its actions\n        to.\n        """'
newline|'\n'
name|'if'
name|'chainDeferred'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'chainDeferred'
op|'='
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|queueCommand
dedent|''
name|'def'
name|'queueCommand'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'queueStringCommand'
op|'('
name|'command'
op|')'
newline|'\n'
DECL|function|gotResponse
name|'def'
name|'gotResponse'
op|'('
name|'responseLines'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expectedResponseLines'
op|','
name|'responseLines'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'gotResponse'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'chainDeferred'
op|'.'
name|'addCallback'
op|'('
name|'queueCommand'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertCommandFailed
dedent|''
name|'def'
name|'assertCommandFailed'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'expectedResponse'
op|'='
name|'None'
op|','
nl|'\n'
name|'chainDeferred'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'chainDeferred'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'chainDeferred'
op|'='
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|queueCommand
dedent|''
name|'def'
name|'queueCommand'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'queueStringCommand'
op|'('
name|'command'
op|')'
newline|'\n'
dedent|''
name|'chainDeferred'
op|'.'
name|'addCallback'
op|'('
name|'queueCommand'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'chainDeferred'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
DECL|function|failed
name|'def'
name|'failed'
op|'('
name|'exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'expectedResponse'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
nl|'\n'
name|'expectedResponse'
op|','
name|'exception'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'chainDeferred'
op|'.'
name|'addCallback'
op|'('
name|'failed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_anonymousLogin
dedent|''
name|'def'
name|'_anonymousLogin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'assertCommandResponse'
op|'('
nl|'\n'
string|"'USER anonymous'"
op|','
nl|'\n'
op|'['
string|"'331 Guest login ok, type your email address as password.'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertCommandResponse'
op|'('
nl|'\n'
string|"'PASS test@twistedmatrix.com'"
op|','
nl|'\n'
op|'['
string|"'230 Anonymous login ok, access restrictions apply.'"
op|']'
op|','
nl|'\n'
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPAnonymousTestCase
dedent|''
dedent|''
name|'class'
name|'FTPAnonymousTestCase'
op|'('
name|'FTPServerTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Simple tests for an FTP server with different anonymous username.\n    The new anonymous username used in this test case is "guest"\n    """'
newline|'\n'
DECL|variable|userAnonymous
name|'userAnonymous'
op|'='
string|'"guest"'
newline|'\n'
nl|'\n'
DECL|member|test_anonymousLogin
name|'def'
name|'test_anonymousLogin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Tests whether the changing of the anonymous username is working or not.\n        The FTP server should not comply about the need of password for the\n        username \'guest\', letting it login as anonymous asking just an email\n        address as password.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertCommandResponse'
op|'('
nl|'\n'
string|"'USER guest'"
op|','
nl|'\n'
op|'['
string|"'331 Guest login ok, type your email address as password.'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertCommandResponse'
op|'('
nl|'\n'
string|"'PASS test@twistedmatrix.com'"
op|','
nl|'\n'
op|'['
string|"'230 Anonymous login ok, access restrictions apply.'"
op|']'
op|','
nl|'\n'
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BasicFTPServerTestCase
dedent|''
dedent|''
name|'class'
name|'BasicFTPServerTestCase'
op|'('
name|'FTPServerTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testNotLoggedInReply
indent|'    '
name|'def'
name|'testNotLoggedInReply'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""When not logged in, all commands other than USER and PASS should\n        get NOT_LOGGED_IN errors.\n        """'
newline|'\n'
name|'commandList'
op|'='
op|'['
string|"'CDUP'"
op|','
string|"'CWD'"
op|','
string|"'LIST'"
op|','
string|"'MODE'"
op|','
string|"'PASV'"
op|','
nl|'\n'
string|"'PWD'"
op|','
string|"'RETR'"
op|','
string|"'STRU'"
op|','
string|"'SYST'"
op|','
string|"'TYPE'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Issue commands, check responses'
nl|'\n'
DECL|function|checkResponse
name|'def'
name|'checkResponse'
op|'('
name|'exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'failureResponseLines'
op|'='
name|'exception'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'failureResponseLines'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'startswith'
op|'('
string|'"530"'
op|')'
op|','
nl|'\n'
string|'"Response didn\'t start with 530: %r"'
nl|'\n'
op|'%'
op|'('
name|'failureResponseLines'
op|'['
op|'-'
number|'1'
op|']'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'deferreds'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'command'
name|'in'
name|'commandList'
op|':'
newline|'\n'
indent|'            '
name|'deferred'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'queueStringCommand'
op|'('
name|'command'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'deferred'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'checkResponse'
op|')'
newline|'\n'
name|'deferreds'
op|'.'
name|'append'
op|'('
name|'deferred'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'deferreds'
op|','
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPASSBeforeUSER
dedent|''
name|'def'
name|'testPASSBeforeUSER'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Issuing PASS before USER should give an error."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertCommandFailed'
op|'('
nl|'\n'
string|"'PASS foo'"
op|','
nl|'\n'
op|'['
string|'"503 Incorrect sequence of commands: "'
nl|'\n'
string|'"USER required before PASS"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNoParamsForUSER
dedent|''
name|'def'
name|'testNoParamsForUSER'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Issuing USER without a username is a syntax error."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertCommandFailed'
op|'('
nl|'\n'
string|"'USER'"
op|','
nl|'\n'
op|'['
string|"'500 Syntax error: USER requires an argument.'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNoParamsForPASS
dedent|''
name|'def'
name|'testNoParamsForPASS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Issuing PASS without a password is a syntax error."""'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'queueStringCommand'
op|'('
string|"'USER foo'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertCommandFailed'
op|'('
nl|'\n'
string|"'PASS'"
op|','
nl|'\n'
op|'['
string|"'500 Syntax error: PASS requires an argument.'"
op|']'
op|','
nl|'\n'
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAnonymousLogin
dedent|''
name|'def'
name|'testAnonymousLogin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_anonymousLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testQuit
dedent|''
name|'def'
name|'testQuit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Issuing QUIT should return a 221 message."""'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_anonymousLogin'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertCommandResponse'
op|'('
nl|'\n'
string|"'QUIT'"
op|','
nl|'\n'
op|'['
string|"'221 Goodbye.'"
op|']'
op|','
nl|'\n'
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAnonymousLoginDenied
dedent|''
name|'def'
name|'testAnonymousLoginDenied'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Reconfigure the server to disallow anonymous access, and to have an'
nl|'\n'
comment|'# IUsernamePassword checker that always rejects.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'allowAnonymous'
op|'='
name|'False'
newline|'\n'
name|'denyAlwaysChecker'
op|'='
name|'checkers'
op|'.'
name|'InMemoryUsernamePasswordDatabaseDontUse'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'denyAlwaysChecker'
op|','
nl|'\n'
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|')'
newline|'\n'
nl|'\n'
comment|'# Same response code as allowAnonymous=True, but different text.'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertCommandResponse'
op|'('
nl|'\n'
string|"'USER anonymous'"
op|','
nl|'\n'
op|'['
string|"'331 Password required for anonymous.'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# It will be denied.  No-one can login.'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertCommandFailed'
op|'('
nl|'\n'
string|"'PASS test@twistedmatrix.com'"
op|','
nl|'\n'
op|'['
string|"'530 Sorry, Authentication failed.'"
op|']'
op|','
nl|'\n'
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
nl|'\n'
comment|"# It's not just saying that.  You aren't logged in."
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertCommandFailed'
op|'('
nl|'\n'
string|"'PWD'"
op|','
nl|'\n'
op|'['
string|"'530 Please login with USER and PASS.'"
op|']'
op|','
nl|'\n'
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testUnknownCommand
dedent|''
name|'def'
name|'testUnknownCommand'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'_anonymousLogin'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertCommandFailed'
op|'('
nl|'\n'
string|"'GIBBERISH'"
op|','
nl|'\n'
op|'['
string|'"502 Command \'GIBBERISH\' not implemented"'
op|']'
op|','
nl|'\n'
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRETRBeforePORT
dedent|''
name|'def'
name|'testRETRBeforePORT'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'_anonymousLogin'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertCommandFailed'
op|'('
nl|'\n'
string|"'RETR foo'"
op|','
nl|'\n'
op|'['
string|'"503 Incorrect sequence of commands: "'
nl|'\n'
string|'"PORT or PASV required before RETR"'
op|']'
op|','
nl|'\n'
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSTORBeforePORT
dedent|''
name|'def'
name|'testSTORBeforePORT'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'_anonymousLogin'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertCommandFailed'
op|'('
nl|'\n'
string|"'STOR foo'"
op|','
nl|'\n'
op|'['
string|'"503 Incorrect sequence of commands: "'
nl|'\n'
string|'"PORT or PASV required before STOR"'
op|']'
op|','
nl|'\n'
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testBadCommandArgs
dedent|''
name|'def'
name|'testBadCommandArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'_anonymousLogin'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertCommandFailed'
op|'('
nl|'\n'
string|"'MODE z'"
op|','
nl|'\n'
op|'['
string|'"504 Not implemented for parameter \'z\'."'
op|']'
op|','
nl|'\n'
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertCommandFailed'
op|'('
nl|'\n'
string|"'STRU I'"
op|','
nl|'\n'
op|'['
string|'"504 Not implemented for parameter \'I\'."'
op|']'
op|','
nl|'\n'
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testDecodeHostPort
dedent|''
name|'def'
name|'testDecodeHostPort'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ftp'
op|'.'
name|'decodeHostPort'
op|'('
string|"'25,234,129,22,100,23'"
op|')'
op|','
nl|'\n'
op|'('
string|"'25.234.129.22'"
op|','
number|'25623'
op|')'
op|')'
newline|'\n'
name|'nums'
op|'='
name|'range'
op|'('
number|'6'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'6'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'badValue'
op|'='
name|'list'
op|'('
name|'nums'
op|')'
newline|'\n'
name|'badValue'
op|'['
name|'i'
op|']'
op|'='
number|'256'
newline|'\n'
name|'s'
op|'='
string|"','"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'badValue'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'ftp'
op|'.'
name|'decodeHostPort'
op|','
name|'s'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPASV
dedent|''
dedent|''
name|'def'
name|'testPASV'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Login'
nl|'\n'
indent|'        '
name|'wfd'
op|'='
name|'defer'
op|'.'
name|'waitForDeferred'
op|'('
name|'self'
op|'.'
name|'_anonymousLogin'
op|'('
op|')'
op|')'
newline|'\n'
name|'yield'
name|'wfd'
newline|'\n'
name|'wfd'
op|'.'
name|'getResult'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Issue a PASV command, and extract the host and port from the response'
nl|'\n'
name|'pasvCmd'
op|'='
name|'defer'
op|'.'
name|'waitForDeferred'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'queueStringCommand'
op|'('
string|"'PASV'"
op|')'
op|')'
newline|'\n'
name|'yield'
name|'pasvCmd'
newline|'\n'
name|'responseLines'
op|'='
name|'pasvCmd'
op|'.'
name|'getResult'
op|'('
op|')'
newline|'\n'
name|'host'
op|','
name|'port'
op|'='
name|'ftp'
op|'.'
name|'decodeHostPort'
op|'('
name|'responseLines'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'4'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure the server is listening on the port it claims to be'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'port'
op|','
name|'self'
op|'.'
name|'serverProtocol'
op|'.'
name|'dtpPort'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|')'
newline|'\n'
nl|'\n'
comment|'# Semi-reasonable way to force cleanup'
nl|'\n'
name|'self'
op|'.'
name|'serverProtocol'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
DECL|variable|testPASV
dedent|''
name|'testPASV'
op|'='
name|'defer'
op|'.'
name|'deferredGenerator'
op|'('
name|'testPASV'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSYST
name|'def'
name|'testSYST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'_anonymousLogin'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertCommandResponse'
op|'('
string|"'SYST'"
op|','
op|'['
string|'"215 UNIX Type: L8"'
op|']'
op|','
nl|'\n'
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_portRangeForwardError
dedent|''
name|'def'
name|'test_portRangeForwardError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Exceptions other than L{error.CannotListenError} which are raised by\n        C{listenFactory} should be raised to the caller of L{FTP.getDTPPort}.\n        """'
newline|'\n'
DECL|function|listenFactory
name|'def'
name|'listenFactory'
op|'('
name|'portNumber'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'serverProtocol'
op|'.'
name|'listenFactory'
op|'='
name|'listenFactory'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'self'
op|'.'
name|'serverProtocol'
op|'.'
name|'getDTPPort'
op|','
nl|'\n'
name|'protocol'
op|'.'
name|'Factory'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_portRange
dedent|''
name|'def'
name|'test_portRange'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{FTP.passivePortRange} should determine the ports which\n        L{FTP.getDTPPort} attempts to bind. If no port from that iterator can\n        be bound, L{error.CannotListenError} should be raised, otherwise the\n        first successful result from L{FTP.listenFactory} should be returned.\n        """'
newline|'\n'
DECL|function|listenFactory
name|'def'
name|'listenFactory'
op|'('
name|'portNumber'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'portNumber'
name|'in'
op|'('
number|'22032'
op|','
number|'22033'
op|','
number|'22034'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'error'
op|'.'
name|'CannotListenError'
op|'('
string|"'localhost'"
op|','
name|'portNumber'
op|','
string|"'error'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'portNumber'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'serverProtocol'
op|'.'
name|'listenFactory'
op|'='
name|'listenFactory'
newline|'\n'
nl|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'serverProtocol'
op|'.'
name|'getDTPPort'
op|'('
name|'protocol'
op|'.'
name|'Factory'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'port'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'serverProtocol'
op|'.'
name|'passivePortRange'
op|'='
name|'xrange'
op|'('
number|'22032'
op|','
number|'65536'
op|')'
newline|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'serverProtocol'
op|'.'
name|'getDTPPort'
op|'('
name|'protocol'
op|'.'
name|'Factory'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'port'
op|','
number|'22035'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'serverProtocol'
op|'.'
name|'passivePortRange'
op|'='
name|'xrange'
op|'('
number|'22032'
op|','
number|'22035'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'error'
op|'.'
name|'CannotListenError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'serverProtocol'
op|'.'
name|'getDTPPort'
op|','
nl|'\n'
name|'protocol'
op|'.'
name|'Factory'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_portRangeInheritedFromFactory
dedent|''
name|'def'
name|'test_portRangeInheritedFromFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{FTP} instances created by L{ftp.FTPFactory.buildProtocol} have\n        their C{passivePortRange} attribute set to the same object the\n        factory\'s C{passivePortRange} attribute is set to.\n        """'
newline|'\n'
name|'portRange'
op|'='
name|'xrange'
op|'('
number|'2017'
op|','
number|'2031'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'passivePortRange'
op|'='
name|'portRange'
newline|'\n'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'portRange'
op|','
name|'protocol'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'passivePortRange'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPServerTestCaseAdvancedClient
dedent|''
dedent|''
name|'class'
name|'FTPServerTestCaseAdvancedClient'
op|'('
name|'FTPServerTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test FTP server with the L{ftp.FTPClient} class.\n    """'
newline|'\n'
DECL|variable|clientFactory
name|'clientFactory'
op|'='
name|'ftp'
op|'.'
name|'FTPClient'
newline|'\n'
nl|'\n'
DECL|member|test_anonymousSTOR
name|'def'
name|'test_anonymousSTOR'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to make an STOR as anonymous, and check that we got a permission\n        denied error.\n        """'
newline|'\n'
DECL|function|eb
name|'def'
name|'eb'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'.'
name|'trap'
op|'('
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|'.'
name|'value'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
string|"'550 foo: Permission denied.'"
op|')'
newline|'\n'
dedent|''
name|'d1'
op|','
name|'d2'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'storeFile'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'d2'
op|'.'
name|'addErrback'
op|'('
name|'eb'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPServerPasvDataConnectionTestCase
dedent|''
dedent|''
name|'class'
name|'FTPServerPasvDataConnectionTestCase'
op|'('
name|'FTPServerTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|_makeDataConnection
indent|'    '
name|'def'
name|'_makeDataConnection'
op|'('
name|'self'
op|','
name|'ignored'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# Establish a passive data connection (i.e. client connecting to'
nl|'\n'
comment|'# server).'
nl|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'queueStringCommand'
op|'('
string|"'PASV'"
op|')'
newline|'\n'
DECL|function|gotPASV
name|'def'
name|'gotPASV'
op|'('
name|'responseLines'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|','
name|'port'
op|'='
name|'ftp'
op|'.'
name|'decodeHostPort'
op|'('
name|'responseLines'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'4'
op|':'
op|']'
op|')'
newline|'\n'
name|'cc'
op|'='
name|'protocol'
op|'.'
name|'ClientCreator'
op|'('
name|'reactor'
op|','
name|'_BufferingProtocol'
op|')'
newline|'\n'
name|'return'
name|'cc'
op|'.'
name|'connectTCP'
op|'('
string|"'127.0.0.1'"
op|','
name|'port'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'gotPASV'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_download
dedent|''
name|'def'
name|'_download'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'chainDeferred'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'chainDeferred'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'chainDeferred'
op|'='
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'chainDeferred'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_makeDataConnection'
op|')'
newline|'\n'
DECL|function|queueCommand
name|'def'
name|'queueCommand'
op|'('
name|'downloader'
op|')'
op|':'
newline|'\n'
comment|'# wait for the command to return, and the download connection to be'
nl|'\n'
comment|'# closed.'
nl|'\n'
indent|'            '
name|'d1'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'queueStringCommand'
op|'('
name|'command'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'downloader'
op|'.'
name|'d'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
dedent|''
name|'chainDeferred'
op|'.'
name|'addCallback'
op|'('
name|'queueCommand'
op|')'
newline|'\n'
nl|'\n'
DECL|function|downloadDone
name|'def'
name|'downloadDone'
op|'('
op|'('
name|'ignored'
op|','
name|'downloader'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'downloader'
op|'.'
name|'buffer'
newline|'\n'
dedent|''
name|'return'
name|'chainDeferred'
op|'.'
name|'addCallback'
op|'('
name|'downloadDone'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEmptyLIST
dedent|''
name|'def'
name|'testEmptyLIST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Login'
nl|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'_anonymousLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# No files, so the file listing should be empty'
nl|'\n'
name|'self'
op|'.'
name|'_download'
op|'('
string|"'LIST'"
op|','
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
DECL|function|checkEmpty
name|'def'
name|'checkEmpty'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|','
name|'result'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'checkEmpty'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testTwoDirLIST
dedent|''
name|'def'
name|'testTwoDirLIST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make some directories'
nl|'\n'
indent|'        '
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'directory'
op|','
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'directory'
op|','
string|"'bar'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Login'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_anonymousLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# We expect 2 lines because there are two files.'
nl|'\n'
name|'self'
op|'.'
name|'_download'
op|'('
string|"'LIST'"
op|','
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
DECL|function|checkDownload
name|'def'
name|'checkDownload'
op|'('
name|'download'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'download'
op|'['
op|':'
op|'-'
number|'2'
op|']'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'checkDownload'
op|')'
newline|'\n'
nl|'\n'
comment|'# Download a names-only listing.'
nl|'\n'
name|'self'
op|'.'
name|'_download'
op|'('
string|"'NLST '"
op|','
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
DECL|function|checkDownload
name|'def'
name|'checkDownload'
op|'('
name|'download'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'filenames'
op|'='
name|'download'
op|'['
op|':'
op|'-'
number|'2'
op|']'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
newline|'\n'
name|'filenames'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'bar'"
op|','
string|"'foo'"
op|']'
op|','
name|'filenames'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'checkDownload'
op|')'
newline|'\n'
nl|'\n'
comment|"# Download a listing of the 'foo' subdirectory.  'foo' has no files, so"
nl|'\n'
comment|'# the file listing should be empty.'
nl|'\n'
name|'self'
op|'.'
name|'_download'
op|'('
string|"'LIST foo'"
op|','
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
DECL|function|checkDownload
name|'def'
name|'checkDownload'
op|'('
name|'download'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|','
name|'download'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'checkDownload'
op|')'
newline|'\n'
nl|'\n'
comment|"# Change the current working directory to 'foo'."
nl|'\n'
DECL|function|chdir
name|'def'
name|'chdir'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'queueStringCommand'
op|'('
string|"'CWD foo'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'chdir'
op|')'
newline|'\n'
nl|'\n'
comment|"# Download a listing from within 'foo', and again it should be empty,"
nl|'\n'
comment|'# because LIST uses the working directory by default.'
nl|'\n'
name|'self'
op|'.'
name|'_download'
op|'('
string|"'LIST'"
op|','
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
DECL|function|checkDownload
name|'def'
name|'checkDownload'
op|'('
name|'download'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|','
name|'download'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'checkDownload'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testManyLargeDownloads
dedent|''
name|'def'
name|'testManyLargeDownloads'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Login'
nl|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'_anonymousLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Download a range of different size files'
nl|'\n'
name|'for'
name|'size'
name|'in'
name|'range'
op|'('
number|'100000'
op|','
number|'110000'
op|','
number|'500'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fObj'
op|'='
name|'file'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'directory'
op|','
string|"'%d.txt'"
op|'%'
op|'('
name|'size'
op|','
op|')'
op|')'
op|','
string|"'wb'"
op|')'
newline|'\n'
name|'fObj'
op|'.'
name|'write'
op|'('
string|"'x'"
op|'*'
name|'size'
op|')'
newline|'\n'
name|'fObj'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_download'
op|'('
string|"'RETR %d.txt'"
op|'%'
op|'('
name|'size'
op|','
op|')'
op|','
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
DECL|function|checkDownload
name|'def'
name|'checkDownload'
op|'('
name|'download'
op|','
name|'size'
op|'='
name|'size'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'x'"
op|'*'
name|'size'
op|','
name|'download'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'checkDownload'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_NLSTEmpty
dedent|''
name|'def'
name|'test_NLSTEmpty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        NLST with no argument returns the directory listing for the current\n        working directory.\n        """'
newline|'\n'
comment|'# Login'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_anonymousLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Touch a file in the current working directory'
nl|'\n'
name|'self'
op|'.'
name|'dirPath'
op|'.'
name|'child'
op|'('
string|"'test.txt'"
op|')'
op|'.'
name|'touch'
op|'('
op|')'
newline|'\n'
comment|'# Make a directory in the current working directory'
nl|'\n'
name|'self'
op|'.'
name|'dirPath'
op|'.'
name|'child'
op|'('
string|"'foo'"
op|')'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_download'
op|'('
string|"'NLST '"
op|','
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
DECL|function|checkDownload
name|'def'
name|'checkDownload'
op|'('
name|'download'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'filenames'
op|'='
name|'download'
op|'['
op|':'
op|'-'
number|'2'
op|']'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
newline|'\n'
name|'filenames'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'foo'"
op|','
string|"'test.txt'"
op|']'
op|','
name|'filenames'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'checkDownload'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_NLSTNonexistent
dedent|''
name|'def'
name|'test_NLSTNonexistent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        NLST on a non-existent file/directory returns nothing.\n        """'
newline|'\n'
comment|'# Login'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_anonymousLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_download'
op|'('
string|"'NLST nonexistent.txt'"
op|','
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
DECL|function|checkDownload
name|'def'
name|'checkDownload'
op|'('
name|'download'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|','
name|'download'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'checkDownload'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_NLSTOnPathToFile
dedent|''
name|'def'
name|'test_NLSTOnPathToFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        NLST on an existent file returns only the path to that file.\n        """'
newline|'\n'
comment|'# Login'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_anonymousLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Touch a file in the current working directory'
nl|'\n'
name|'self'
op|'.'
name|'dirPath'
op|'.'
name|'child'
op|'('
string|"'test.txt'"
op|')'
op|'.'
name|'touch'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_download'
op|'('
string|"'NLST test.txt'"
op|','
name|'chainDeferred'
op|'='
name|'d'
op|')'
newline|'\n'
DECL|function|checkDownload
name|'def'
name|'checkDownload'
op|'('
name|'download'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'filenames'
op|'='
name|'download'
op|'['
op|':'
op|'-'
number|'2'
op|']'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'test.txt'"
op|']'
op|','
name|'filenames'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'checkDownload'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPServerPortDataConnectionTestCase
dedent|''
dedent|''
name|'class'
name|'FTPServerPortDataConnectionTestCase'
op|'('
name|'FTPServerPasvDataConnectionTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'dataPorts'
op|'='
op|'['
op|']'
newline|'\n'
name|'return'
name|'FTPServerPasvDataConnectionTestCase'
op|'.'
name|'setUp'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_makeDataConnection
dedent|''
name|'def'
name|'_makeDataConnection'
op|'('
name|'self'
op|','
name|'ignored'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# Establish an active data connection (i.e. server connecting to'
nl|'\n'
comment|'# client).'
nl|'\n'
indent|'        '
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|class|DataFactory
name|'class'
name|'DataFactory'
op|'('
name|'protocol'
op|'.'
name|'ServerFactory'
op|')'
op|':'
newline|'\n'
DECL|variable|protocol
indent|'            '
name|'protocol'
op|'='
name|'_BufferingProtocol'
newline|'\n'
DECL|member|buildProtocol
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'p'
op|'='
name|'protocol'
op|'.'
name|'ServerFactory'
op|'.'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'deferred'
op|'.'
name|'callback'
op|','
name|'p'
op|')'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
dedent|''
dedent|''
name|'dataPort'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'DataFactory'
op|'('
op|')'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dataPorts'
op|'.'
name|'append'
op|'('
name|'dataPort'
op|')'
newline|'\n'
name|'cmd'
op|'='
string|"'PORT '"
op|'+'
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
name|'dataPort'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'queueStringCommand'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'return'
name|'deferred'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
op|'['
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
name|'for'
name|'port'
name|'in'
name|'self'
op|'.'
name|'dataPorts'
op|']'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
nl|'\n'
name|'FTPServerPasvDataConnectionTestCase'
op|'.'
name|'tearDown'
op|','
name|'self'
op|')'
newline|'\n'
name|'l'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'l'
op|','
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPORTCannotConnect
dedent|''
name|'def'
name|'testPORTCannotConnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Login'
nl|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'_anonymousLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Listen on a port, and immediately stop listening as a way to find a'
nl|'\n'
comment|'# port number that is definitely closed.'
nl|'\n'
DECL|function|loggedIn
name|'def'
name|'loggedIn'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'protocol'
op|'.'
name|'Factory'
op|'('
op|')'
op|','
nl|'\n'
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'portNum'
op|'='
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'d'
op|'='
name|'port'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'portNum'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'loggedIn'
op|')'
newline|'\n'
nl|'\n'
comment|'# Tell the server to connect to that port with a PORT command, and'
nl|'\n'
comment|'# verify that it fails with the right error.'
nl|'\n'
DECL|function|gotPortNum
name|'def'
name|'gotPortNum'
op|'('
name|'portNum'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'assertCommandFailed'
op|'('
nl|'\n'
string|"'PORT '"
op|'+'
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
name|'portNum'
op|')'
op|','
nl|'\n'
op|'['
string|'"425 Can\'t open data connection."'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'gotPortNum'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DTPFactoryTests
dedent|''
dedent|''
name|'class'
name|'DTPFactoryTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{ftp.DTPFactory}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a fake protocol interpreter and a L{ftp.DTPFactory} instance to\n        test.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|ProtocolInterpreter
name|'class'
name|'ProtocolInterpreter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|dtpInstance
indent|'            '
name|'dtpInstance'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'protocolInterpreter'
op|'='
name|'ProtocolInterpreter'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'='
name|'ftp'
op|'.'
name|'DTPFactory'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'protocolInterpreter'
op|','
name|'None'
op|','
name|'self'
op|'.'
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_setTimeout
dedent|''
name|'def'
name|'test_setTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ftp.DTPFactory.setTimeout} uses the reactor passed to its initializer\n        to set up a timed event to time out the DTP setup after the specified\n        number of seconds.\n        """'
newline|'\n'
comment|"# Make sure the factory's deferred fails with the right exception, and"
nl|'\n'
comment|'# make it so we can tell exactly when it fires.'
nl|'\n'
name|'finished'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'deferred'
op|','
name|'ftp'
op|'.'
name|'PortConnectionError'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'finished'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'setTimeout'
op|'('
number|'6'
op|')'
newline|'\n'
nl|'\n'
comment|'# Advance the clock almost to the timeout'
nl|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'advance'
op|'('
number|'5'
op|')'
newline|'\n'
nl|'\n'
comment|'# Nothing should have happened yet.'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'finished'
op|')'
newline|'\n'
nl|'\n'
comment|'# Advance it to the configured timeout.'
nl|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'advance'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now the Deferred should have failed with TimeoutError.'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'finished'
op|')'
newline|'\n'
nl|'\n'
comment|'# There should also be no calls left in the reactor.'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'calls'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildProtocolOnce
dedent|''
name|'def'
name|'test_buildProtocolOnce'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A L{ftp.DTPFactory} instance\'s C{buildProtocol} method can be used once\n        to create a L{ftp.DTP} instance.\n        """'
newline|'\n'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'protocol'
op|','
name|'ftp'
op|'.'
name|'DTP'
op|')'
newline|'\n'
nl|'\n'
comment|'# A subsequent call returns None.'
nl|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_timeoutAfterConnection
dedent|''
name|'def'
name|'test_timeoutAfterConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a timeout has been set up using L{ftp.DTPFactory.setTimeout}, it is\n        cancelled by L{ftp.DTPFactory.buildProtocol}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'setTimeout'
op|'('
number|'10'
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
comment|'# Make sure the call is no longer active.'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'calls'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectionAfterTimeout
dedent|''
name|'def'
name|'test_connectionAfterTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If L{ftp.DTPFactory.buildProtocol} is called after the timeout\n        specified by L{ftp.DTPFactory.setTimeout} has elapsed, C{None} is\n        returned.\n        """'
newline|'\n'
comment|"# Handle the error so it doesn't get logged."
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'deferred'
op|','
name|'ftp'
op|'.'
name|'PortConnectionError'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set up the timeout and then cause it to elapse so the Deferred does'
nl|'\n'
comment|'# fail.'
nl|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'setTimeout'
op|'('
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'advance'
op|'('
number|'10'
op|')'
newline|'\n'
nl|'\n'
comment|'# Try to get a protocol - we should not be able to.'
nl|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure the Deferred is doing the right thing.'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_timeoutAfterConnectionFailed
dedent|''
name|'def'
name|'test_timeoutAfterConnectionFailed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ftp.DTPFactory.deferred} fails with L{PortConnectionError} when\n        L{ftp.DTPFactory.clientConnectionFailed} is called.  If the timeout\n        specified with L{ftp.DTPFactory.setTimeout} expires after that, nothing\n        additional happens.\n        """'
newline|'\n'
name|'finished'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'deferred'
op|','
name|'ftp'
op|'.'
name|'PortConnectionError'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'finished'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'setTimeout'
op|'('
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'finished'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'clientConnectionFailed'
op|'('
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'finished'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'advance'
op|'('
number|'10'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectionFailedAfterTimeout
dedent|''
name|'def'
name|'test_connectionFailedAfterTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If L{ftp.DTPFactory.clientConnectionFailed} is called after the timeout\n        specified by L{ftp.DTPFactory.setTimeout} has elapsed, nothing beyond\n        the normal timeout before happens.\n        """'
newline|'\n'
comment|"# Handle the error so it doesn't get logged."
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'deferred'
op|','
name|'ftp'
op|'.'
name|'PortConnectionError'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set up the timeout and then cause it to elapse so the Deferred does'
nl|'\n'
comment|'# fail.'
nl|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'setTimeout'
op|'('
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'advance'
op|'('
number|'10'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now fail the connection attempt.  This should do nothing.  In'
nl|'\n'
comment|'# particular, it should not raise an exception.'
nl|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'clientConnectionFailed'
op|'('
name|'None'
op|','
name|'defer'
op|'.'
name|'TimeoutError'
op|'('
string|'"foo"'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Give the Deferred to trial so it can make sure it did what we'
nl|'\n'
comment|'# expected.'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'# -- Client Tests -----------------------------------------------------------'
nl|'\n'
nl|'\n'
DECL|class|PrintLines
dedent|''
dedent|''
name|'class'
name|'PrintLines'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Helper class used by FTPFileListingTests."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'lines'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_lines'
op|'='
name|'lines'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'_lines'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'line'
op|'+'
string|'"\\r\\n"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyFTPFileListProtocol
dedent|''
dedent|''
name|'class'
name|'MyFTPFileListProtocol'
op|'('
name|'ftp'
op|'.'
name|'FTPFileListProtocol'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'other'
op|'='
op|'['
op|']'
newline|'\n'
name|'ftp'
op|'.'
name|'FTPFileListProtocol'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unknownLine
dedent|''
name|'def'
name|'unknownLine'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'other'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPFileListingTests
dedent|''
dedent|''
name|'class'
name|'FTPFileListingTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|getFilesForLines
indent|'    '
name|'def'
name|'getFilesForLines'
op|'('
name|'self'
op|','
name|'lines'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fileList'
op|'='
name|'MyFTPFileListProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'loopback'
op|'.'
name|'loopbackAsync'
op|'('
name|'PrintLines'
op|'('
name|'lines'
op|')'
op|','
name|'fileList'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
op|'('
name|'fileList'
op|'.'
name|'files'
op|','
name|'fileList'
op|'.'
name|'other'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testOneLine
dedent|''
name|'def'
name|'testOneLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# This example line taken from the docstring for FTPFileListProtocol'
nl|'\n'
indent|'        '
name|'line'
op|'='
string|"'-rw-r--r--   1 root     other        531 Jan 29 03:26 README'"
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
op|'('
op|'('
name|'file'
op|','
op|')'
op|','
name|'other'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'other'
op|','
string|"'unexpect unparsable lines: %s'"
op|'%'
name|'repr'
op|'('
name|'other'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file'
op|'['
string|"'filetype'"
op|']'
op|'=='
string|"'-'"
op|','
string|"'misparsed fileitem'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file'
op|'['
string|"'perms'"
op|']'
op|'=='
string|"'rw-r--r--'"
op|','
string|"'misparsed perms'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file'
op|'['
string|"'owner'"
op|']'
op|'=='
string|"'root'"
op|','
string|"'misparsed fileitem'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file'
op|'['
string|"'group'"
op|']'
op|'=='
string|"'other'"
op|','
string|"'misparsed fileitem'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file'
op|'['
string|"'size'"
op|']'
op|'=='
number|'531'
op|','
string|"'misparsed fileitem'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file'
op|'['
string|"'date'"
op|']'
op|'=='
string|"'Jan 29 03:26'"
op|','
string|"'misparsed fileitem'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file'
op|'['
string|"'filename'"
op|']'
op|'=='
string|"'README'"
op|','
string|"'misparsed fileitem'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file'
op|'['
string|"'nlinks'"
op|']'
op|'=='
number|'1'
op|','
string|"'misparsed nlinks'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'file'
op|'['
string|"'linktarget'"
op|']'
op|','
string|"'misparsed linktarget'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'getFilesForLines'
op|'('
op|'['
name|'line'
op|']'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testVariantLines
dedent|''
name|'def'
name|'testVariantLines'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'line1'
op|'='
string|"'drw-r--r--   2 root     other        531 Jan  9  2003 A'"
newline|'\n'
name|'line2'
op|'='
string|"'lrw-r--r--   1 root     other          1 Jan 29 03:26 B -> A'"
newline|'\n'
name|'line3'
op|'='
string|"'woohoo! '"
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
op|'('
op|'('
name|'file1'
op|','
name|'file2'
op|')'
op|','
op|'('
name|'other'
op|','
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'other'
op|'=='
string|"'woohoo! \\r'"
op|','
string|"'incorrect other line'"
op|')'
newline|'\n'
comment|'# file 1'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file1'
op|'['
string|"'filetype'"
op|']'
op|'=='
string|"'d'"
op|','
string|"'misparsed fileitem'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file1'
op|'['
string|"'perms'"
op|']'
op|'=='
string|"'rw-r--r--'"
op|','
string|"'misparsed perms'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file1'
op|'['
string|"'owner'"
op|']'
op|'=='
string|"'root'"
op|','
string|"'misparsed owner'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file1'
op|'['
string|"'group'"
op|']'
op|'=='
string|"'other'"
op|','
string|"'misparsed group'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file1'
op|'['
string|"'size'"
op|']'
op|'=='
number|'531'
op|','
string|"'misparsed size'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file1'
op|'['
string|"'date'"
op|']'
op|'=='
string|"'Jan  9  2003'"
op|','
string|"'misparsed date'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file1'
op|'['
string|"'filename'"
op|']'
op|'=='
string|"'A'"
op|','
string|"'misparsed filename'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file1'
op|'['
string|"'nlinks'"
op|']'
op|'=='
number|'2'
op|','
string|"'misparsed nlinks'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'file1'
op|'['
string|"'linktarget'"
op|']'
op|','
string|"'misparsed linktarget'"
op|')'
newline|'\n'
comment|'# file 2'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file2'
op|'['
string|"'filetype'"
op|']'
op|'=='
string|"'l'"
op|','
string|"'misparsed fileitem'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file2'
op|'['
string|"'perms'"
op|']'
op|'=='
string|"'rw-r--r--'"
op|','
string|"'misparsed perms'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file2'
op|'['
string|"'owner'"
op|']'
op|'=='
string|"'root'"
op|','
string|"'misparsed owner'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file2'
op|'['
string|"'group'"
op|']'
op|'=='
string|"'other'"
op|','
string|"'misparsed group'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file2'
op|'['
string|"'size'"
op|']'
op|'=='
number|'1'
op|','
string|"'misparsed size'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file2'
op|'['
string|"'date'"
op|']'
op|'=='
string|"'Jan 29 03:26'"
op|','
string|"'misparsed date'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file2'
op|'['
string|"'filename'"
op|']'
op|'=='
string|"'B'"
op|','
string|"'misparsed filename'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file2'
op|'['
string|"'nlinks'"
op|']'
op|'=='
number|'1'
op|','
string|"'misparsed nlinks'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file2'
op|'['
string|"'linktarget'"
op|']'
op|'=='
string|"'A'"
op|','
string|"'misparsed linktarget'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'getFilesForLines'
op|'('
op|'['
name|'line1'
op|','
name|'line2'
op|','
name|'line3'
op|']'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUnknownLine
dedent|''
name|'def'
name|'testUnknownLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|check
indent|'        '
name|'def'
name|'check'
op|'('
op|'('
name|'files'
op|','
name|'others'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'files'
op|','
string|"'unexpected file entries'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'others'
op|'=='
op|'['
string|"'ABC\\r'"
op|','
string|"'not a file\\r'"
op|']'
op|','
nl|'\n'
string|"'incorrect unparsable lines: %s'"
op|'%'
name|'repr'
op|'('
name|'others'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'getFilesForLines'
op|'('
op|'['
string|"'ABC'"
op|','
string|"'not a file'"
op|']'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testYear
dedent|''
name|'def'
name|'testYear'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# This example derived from bug description in issue 514.'
nl|'\n'
indent|'        '
name|'fileList'
op|'='
name|'ftp'
op|'.'
name|'FTPFileListProtocol'
op|'('
op|')'
newline|'\n'
name|'exampleLine'
op|'='
op|'('
nl|'\n'
string|"'-rw-r--r--   1 root     other        531 Jan 29 2003 README\\n'"
op|')'
newline|'\n'
DECL|class|PrintLine
name|'class'
name|'PrintLine'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
DECL|member|connectionMade
indent|'            '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'exampleLine'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|check
dedent|''
dedent|''
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'file'
op|'='
name|'fileList'
op|'.'
name|'files'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file'
op|'['
string|"'size'"
op|']'
op|'=='
number|'531'
op|','
string|"'misparsed fileitem'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file'
op|'['
string|"'date'"
op|']'
op|'=='
string|"'Jan 29 2003'"
op|','
string|"'misparsed fileitem'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'file'
op|'['
string|"'filename'"
op|']'
op|'=='
string|"'README'"
op|','
string|"'misparsed fileitem'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'loopback'
op|'.'
name|'loopbackAsync'
op|'('
name|'PrintLine'
op|'('
op|')'
op|','
name|'fileList'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPClientTests
dedent|''
dedent|''
name|'class'
name|'FTPClientTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|testFailedRETR
indent|'    '
name|'def'
name|'testFailedRETR'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'protocol'
op|'.'
name|'Factory'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'noisy'
op|'='
number|'0'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'portNum'
op|'='
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
comment|'# This test data derived from a bug report by ranty on #twisted'
nl|'\n'
name|'responses'
op|'='
op|'['
string|"'220 ready, dude (vsFTPd 1.0.0: beat me, break me)'"
op|','
nl|'\n'
comment|'# USER anonymous'
nl|'\n'
string|"'331 Please specify the password.'"
op|','
nl|'\n'
comment|'# PASS twisted@twistedmatrix.com'
nl|'\n'
string|"'230 Login successful. Have fun.'"
op|','
nl|'\n'
comment|'# TYPE I'
nl|'\n'
string|"'200 Binary it is, then.'"
op|','
nl|'\n'
comment|'# PASV'
nl|'\n'
string|"'227 Entering Passive Mode (127,0,0,1,%d,%d)'"
op|'%'
nl|'\n'
op|'('
name|'portNum'
op|'>>'
number|'8'
op|','
name|'portNum'
op|'&'
number|'0xff'
op|')'
op|','
nl|'\n'
comment|'# RETR /file/that/doesnt/exist'
nl|'\n'
string|"'550 Failed to open file.'"
op|']'
newline|'\n'
name|'f'
op|'.'
name|'buildProtocol'
op|'='
name|'lambda'
name|'addr'
op|':'
name|'PrintLines'
op|'('
name|'responses'
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'ftp'
op|'.'
name|'FTPClient'
op|'('
name|'passive'
op|'='
number|'1'
op|')'
newline|'\n'
name|'cc'
op|'='
name|'protocol'
op|'.'
name|'ClientCreator'
op|'('
name|'reactor'
op|','
name|'ftp'
op|'.'
name|'FTPClient'
op|','
name|'passive'
op|'='
number|'1'
op|')'
newline|'\n'
name|'d'
op|'='
name|'cc'
op|'.'
name|'connectTCP'
op|'('
string|"'127.0.0.1'"
op|','
name|'portNum'
op|')'
newline|'\n'
DECL|function|gotClient
name|'def'
name|'gotClient'
op|'('
name|'client'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'='
name|'protocol'
op|'.'
name|'Protocol'
op|'('
op|')'
newline|'\n'
name|'return'
name|'client'
op|'.'
name|'retrieveFile'
op|'('
string|"'/file/that/doesnt/exist'"
op|','
name|'p'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'gotClient'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_errbacksUponDisconnect
dedent|''
name|'def'
name|'test_errbacksUponDisconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the ftp command errbacks when a connection lost happens during\n        the operation.\n        """'
newline|'\n'
name|'ftpClient'
op|'='
name|'ftp'
op|'.'
name|'FTPClient'
op|'('
op|')'
newline|'\n'
name|'tr'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransportWithDisconnection'
op|'('
op|')'
newline|'\n'
name|'ftpClient'
op|'.'
name|'makeConnection'
op|'('
name|'tr'
op|')'
newline|'\n'
name|'tr'
op|'.'
name|'protocol'
op|'='
name|'ftpClient'
newline|'\n'
name|'d'
op|'='
name|'ftpClient'
op|'.'
name|'list'
op|'('
string|"'some path'"
op|','
name|'Dummy'
op|'('
op|')'
op|')'
newline|'\n'
name|'m'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|_eb
name|'def'
name|'_eb'
op|'('
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'.'
name|'append'
op|'('
name|'failure'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'_eb'
op|')'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'main'
name|'import'
name|'CONNECTION_LOST'
newline|'\n'
name|'ftpClient'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'CONNECTION_LOST'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'m'
op|','
name|'m'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPClientTestCase
dedent|''
dedent|''
name|'class'
name|'FTPClientTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test advanced FTP client commands.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a FTP client and connect it to fake transport.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'='
name|'ftp'
op|'.'
name|'FTPClient'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransportWithDisconnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'client'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Deliver disconnection notification to the client so that it can\n        perform any cleanup which may be required.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'connectionLost'
op|'('
name|'error'
op|'.'
name|'ConnectionLost'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_testLogin
dedent|''
name|'def'
name|'_testLogin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the login part.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
nl|'\n'
string|"'331 Guest login ok, type your email address as password.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'USER anonymous\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
nl|'\n'
string|"'230 Anonymous login ok, access restrictions apply.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'TYPE I\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'200 Type set to I.'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_CDUP
dedent|''
name|'def'
name|'test_CDUP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the CDUP command.\n\n        L{ftp.FTPClient.cdup} should return a Deferred which fires with a\n        sequence of one element which is the string the server sent\n        indicating that the command was executed successfully.\n\n        (XXX - This is a bad API)\n        """'
newline|'\n'
DECL|function|cbCdup
name|'def'
name|'cbCdup'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|','
string|"'250 Requested File Action Completed OK'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'cdup'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbCdup'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'CDUP\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'250 Requested File Action Completed OK'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failedCDUP
dedent|''
name|'def'
name|'test_failedCDUP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test L{ftp.FTPClient.cdup}\'s handling of a failed CDUP command.\n\n        When the CDUP command fails, the returned Deferred should errback\n        with L{ftp.CommandFailed}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'cdup'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'CDUP\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'550 ..: No such file or directory'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_PWD
dedent|''
name|'def'
name|'test_PWD'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the PWD command.\n\n        L{ftp.FTPClient.pwd} should return a Deferred which fires with a\n        sequence of one element which is a string representing the current\n        working directory on the server.\n\n        (XXX - This is a bad API)\n        """'
newline|'\n'
DECL|function|cbPwd
name|'def'
name|'cbPwd'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ftp'
op|'.'
name|'parsePWDResponse'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|')'
op|','
string|'"/bar/baz"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'pwd'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbPwd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PWD\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|'\'257 "/bar/baz"\''
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failedPWD
dedent|''
name|'def'
name|'test_failedPWD'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a failure in PWD command.\n\n        When the PWD command fails, the returned Deferred should errback\n        with L{ftp.CommandFailed}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'pwd'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PWD\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'550 /bar/baz: No such file or directory'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_CWD
dedent|''
name|'def'
name|'test_CWD'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the CWD command.\n\n        L{ftp.FTPClient.cwd} should return a Deferred which fires with a\n        sequence of one element which is the string the server sent\n        indicating that the command was executed successfully.\n\n        (XXX - This is a bad API)\n        """'
newline|'\n'
DECL|function|cbCwd
name|'def'
name|'cbCwd'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|','
string|"'250 Requested File Action Completed OK'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'cwd'
op|'('
string|'"bar/foo"'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbCwd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'CWD bar/foo\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'250 Requested File Action Completed OK'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failedCWD
dedent|''
name|'def'
name|'test_failedCWD'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a failure in CWD command.\n\n        When the PWD command fails, the returned Deferred should errback\n        with L{ftp.CommandFailed}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'cwd'
op|'('
string|'"bar/foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'CWD bar/foo\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'550 bar/foo: No such file or directory'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_passiveRETR
dedent|''
name|'def'
name|'test_passiveRETR'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the RETR command in passive mode: get a file and verify its\n        content.\n\n        L{ftp.FTPClient.retrieveFile} should return a Deferred which fires\n        with the protocol instance passed to it after the download has\n        completed.\n\n        (XXX - This API should be based on producers and consumers)\n        """'
newline|'\n'
DECL|function|cbRetr
name|'def'
name|'cbRetr'
op|'('
name|'res'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'buffer'
op|','
string|"'x'"
op|'*'
number|'1000'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbConnect
dedent|''
name|'def'
name|'cbConnect'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'host'
op|','
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'port'
op|','
number|'12345'
op|')'
newline|'\n'
name|'proto'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
op|'('
name|'host'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
nl|'\n'
string|"'150 File status okay; about to open data connection.'"
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|'"x"'
op|'*'
number|'1000'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
string|'""'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'connectFactory'
op|'='
name|'cbConnect'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'='
name|'_BufferingProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'retrieveFile'
op|'('
string|'"spam"'
op|','
name|'proto'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRetr'
op|','
name|'proto'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PASV\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'227 Entering Passive Mode (%s).'"
op|'%'
nl|'\n'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'12345'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'RETR spam\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'226 Transfer Complete.'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_RETR
dedent|''
name|'def'
name|'test_RETR'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the RETR command in non-passive mode.\n\n        Like L{test_passiveRETR} but in the configuration where the server\n        establishes the data connection to the client, rather than the other\n        way around.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'passive'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|function|generatePort
name|'def'
name|'generatePort'
op|'('
name|'portCmd'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'portCmd'
op|'.'
name|'text'
op|'='
string|"'PORT %s'"
op|'%'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'9876'
op|')'
op|','
op|')'
newline|'\n'
name|'portCmd'
op|'.'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'portCmd'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|'"x"'
op|'*'
number|'1000'
op|')'
newline|'\n'
name|'portCmd'
op|'.'
name|'protocol'
op|'.'
name|'connectionLost'
op|'('
nl|'\n'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
string|'""'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbRetr
dedent|''
name|'def'
name|'cbRetr'
op|'('
name|'res'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'proto'
op|'.'
name|'buffer'
op|','
string|"'x'"
op|'*'
number|'1000'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'generatePortCommand'
op|'='
name|'generatePort'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'='
name|'_BufferingProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'retrieveFile'
op|'('
string|'"spam"'
op|','
name|'proto'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbRetr'
op|','
name|'proto'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PORT %s\\r\\n'"
op|'%'
nl|'\n'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'9876'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'200 PORT OK'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'RETR spam\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'226 Transfer Complete.'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failedRETR
dedent|''
name|'def'
name|'test_failedRETR'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to RETR an unexisting file.\n\n        L{ftp.FTPClient.retrieveFile} should return a Deferred which\n        errbacks with L{ftp.CommandFailed} if the server indicates the file\n        cannot be transferred for some reason.\n        """'
newline|'\n'
DECL|function|cbConnect
name|'def'
name|'cbConnect'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'host'
op|','
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'port'
op|','
number|'12345'
op|')'
newline|'\n'
name|'proto'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
op|'('
name|'host'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
nl|'\n'
string|"'150 File status okay; about to open data connection.'"
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
string|'""'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'connectFactory'
op|'='
name|'cbConnect'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'='
name|'_BufferingProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'retrieveFile'
op|'('
string|'"spam"'
op|','
name|'proto'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PASV\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'227 Entering Passive Mode (%s).'"
op|'%'
nl|'\n'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'12345'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'RETR spam\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'550 spam: No such file or directory'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_lostRETR
dedent|''
name|'def'
name|'test_lostRETR'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try a RETR, but disconnect during the transfer.\n        L{ftp.FTPClient.retrieveFile} should return a Deferred which\n        errbacks with L{ftp.ConnectionLost)\n        """'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'passive'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|generatePort
name|'def'
name|'generatePort'
op|'('
name|'portCmd'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'portCmd'
op|'.'
name|'text'
op|'='
string|"'PORT %s'"
op|'%'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'9876'
op|')'
op|','
op|')'
newline|'\n'
name|'tr'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransportWithDisconnection'
op|'('
op|')'
newline|'\n'
name|'portCmd'
op|'.'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'tr'
op|')'
newline|'\n'
name|'tr'
op|'.'
name|'protocol'
op|'='
name|'portCmd'
op|'.'
name|'protocol'
newline|'\n'
name|'portCmd'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|'"x"'
op|'*'
number|'500'
op|')'
newline|'\n'
name|'l'
op|'.'
name|'append'
op|'('
name|'tr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'generatePortCommand'
op|'='
name|'generatePort'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'='
name|'_BufferingProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'retrieveFile'
op|'('
string|'"spam"'
op|','
name|'proto'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PORT %s\\r\\n'"
op|'%'
nl|'\n'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'9876'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'200 PORT OK'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'RETR spam\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'l'
op|')'
newline|'\n'
name|'l'
op|'['
number|'0'
op|']'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'ConnectionLost'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_passiveSTOR
dedent|''
name|'def'
name|'test_passiveSTOR'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the STOR command: send a file and verify its content.\n\n        L{ftp.FTPClient.storeFile} should return a two-tuple of Deferreds.\n        The first of which should fire with a protocol instance when the\n        data connection has been established and is responsible for sending\n        the contents of the file.  The second of which should fire when the\n        upload has completed, the data connection has been closed, and the\n        server has acknowledged receipt of the file.\n\n        (XXX - storeFile should take a producer as an argument, instead, and\n        only return a Deferred which fires when the upload has succeeded or\n        failed).\n        """'
newline|'\n'
name|'tr'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
DECL|function|cbStore
name|'def'
name|'cbStore'
op|'('
name|'sender'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
nl|'\n'
string|"'150 File status okay; about to open data connection.'"
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"x"'
op|'*'
number|'1000'
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
string|'""'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbFinish
dedent|''
name|'def'
name|'cbFinish'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tr'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|'"x"'
op|'*'
number|'1000'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbConnect
dedent|''
name|'def'
name|'cbConnect'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'host'
op|','
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'port'
op|','
number|'12345'
op|')'
newline|'\n'
name|'proto'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
op|'('
name|'host'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'tr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'connectFactory'
op|'='
name|'cbConnect'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d1'
op|','
name|'d2'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'storeFile'
op|'('
string|'"spam"'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'cbStore'
op|')'
newline|'\n'
name|'d2'
op|'.'
name|'addCallback'
op|'('
name|'cbFinish'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PASV\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'227 Entering Passive Mode (%s).'"
op|'%'
nl|'\n'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'12345'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'STOR spam\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'226 Transfer Complete.'"
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failedSTOR
dedent|''
name|'def'
name|'test_failedSTOR'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a failure in the STOR command.\n\n        If the server does not acknowledge successful receipt of the\n        uploaded file, the second Deferred returned by\n        L{ftp.FTPClient.storeFile} should errback with L{ftp.CommandFailed}.\n        """'
newline|'\n'
name|'tr'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
DECL|function|cbStore
name|'def'
name|'cbStore'
op|'('
name|'sender'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
nl|'\n'
string|"'150 File status okay; about to open data connection.'"
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"x"'
op|'*'
number|'1000'
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
string|'""'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbConnect
dedent|''
name|'def'
name|'cbConnect'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'host'
op|','
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'port'
op|','
number|'12345'
op|')'
newline|'\n'
name|'proto'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
op|'('
name|'host'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'tr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'connectFactory'
op|'='
name|'cbConnect'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d1'
op|','
name|'d2'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'storeFile'
op|'('
string|'"spam"'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'cbStore'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d2'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PASV\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'227 Entering Passive Mode (%s).'"
op|'%'
nl|'\n'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'12345'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'STOR spam\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
nl|'\n'
string|"'426 Transfer aborted.  Data connection closed.'"
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_STOR
dedent|''
name|'def'
name|'test_STOR'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the STOR command in non-passive mode.\n\n        Like L{test_passiveSTOR} but in the configuration where the server\n        establishes the data connection to the client, rather than the other\n        way around.\n        """'
newline|'\n'
name|'tr'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'passive'
op|'='
name|'False'
newline|'\n'
DECL|function|generatePort
name|'def'
name|'generatePort'
op|'('
name|'portCmd'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'portCmd'
op|'.'
name|'text'
op|'='
string|"'PORT %s'"
op|'%'
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'9876'
op|')'
newline|'\n'
name|'portCmd'
op|'.'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'tr'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbStore
dedent|''
name|'def'
name|'cbStore'
op|'('
name|'sender'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PORT %s\\r\\n'"
op|'%'
nl|'\n'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'9876'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'200 PORT OK'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'STOR spam\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
nl|'\n'
string|"'150 File status okay; about to open data connection.'"
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"x"'
op|'*'
number|'1000'
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
string|'""'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'226 Transfer Complete.'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbFinish
dedent|''
name|'def'
name|'cbFinish'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tr'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|'"x"'
op|'*'
number|'1000'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'generatePortCommand'
op|'='
name|'generatePort'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d1'
op|','
name|'d2'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'storeFile'
op|'('
string|'"spam"'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'cbStore'
op|')'
newline|'\n'
name|'d2'
op|'.'
name|'addCallback'
op|'('
name|'cbFinish'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_passiveLIST
dedent|''
name|'def'
name|'test_passiveLIST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the LIST command.\n\n        L{ftp.FTPClient.list} should return a Deferred which fires with a\n        protocol instance which was passed to list after the command has\n        succeeded.\n\n        (XXX - This is a very unfortunate API; if my understanding is\n        correct, the results are always at least line-oriented, so allowing\n        a per-line parser function to be specified would make this simpler,\n        but a default implementation should really be provided which knows\n        how to deal with all the formats used in real servers, so\n        application developers never have to care about this insanity.  It\n        would also be nice to either get back a Deferred of a list of\n        filenames or to be able to consume the files as they are received\n        (which the current API does allow, but in a somewhat inconvenient\n        fashion) -exarkun)\n        """'
newline|'\n'
DECL|function|cbList
name|'def'
name|'cbList'
op|'('
name|'res'
op|','
name|'fileList'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fls'
op|'='
op|'['
name|'f'
op|'['
string|'"filename"'
op|']'
name|'for'
name|'f'
name|'in'
name|'fileList'
op|'.'
name|'files'
op|']'
newline|'\n'
name|'expected'
op|'='
op|'['
string|'"foo"'
op|','
string|'"bar"'
op|','
string|'"baz"'
op|']'
newline|'\n'
name|'expected'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'fls'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'fls'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbConnect
dedent|''
name|'def'
name|'cbConnect'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'host'
op|','
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'port'
op|','
number|'12345'
op|')'
newline|'\n'
name|'proto'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
op|'('
name|'host'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
nl|'\n'
string|"'150 File status okay; about to open data connection.'"
op|')'
newline|'\n'
name|'sending'
op|'='
op|'['
nl|'\n'
string|"'-rw-r--r--    0 spam      egg      100 Oct 10 2006 foo\\r\\n'"
op|','
nl|'\n'
string|"'-rw-r--r--    3 spam      egg      100 Oct 10 2006 bar\\r\\n'"
op|','
nl|'\n'
string|"'-rw-r--r--    4 spam      egg      100 Oct 10 2006 baz\\r\\n'"
op|','
nl|'\n'
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'sending'
op|':'
newline|'\n'
indent|'                '
name|'proto'
op|'.'
name|'dataReceived'
op|'('
name|'i'
op|')'
newline|'\n'
dedent|''
name|'proto'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
string|'""'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'connectFactory'
op|'='
name|'cbConnect'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'fileList'
op|'='
name|'ftp'
op|'.'
name|'FTPFileListProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'list'
op|'('
string|"'foo/bar'"
op|','
name|'fileList'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbList'
op|','
name|'fileList'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PASV\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'227 Entering Passive Mode (%s).'"
op|'%'
nl|'\n'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'12345'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'LIST foo/bar\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'226 Transfer Complete.'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_LIST
dedent|''
name|'def'
name|'test_LIST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the LIST command in non-passive mode.\n\n        Like L{test_passiveLIST} but in the configuration where the server\n        establishes the data connection to the client, rather than the other\n        way around.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'passive'
op|'='
name|'False'
newline|'\n'
DECL|function|generatePort
name|'def'
name|'generatePort'
op|'('
name|'portCmd'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'portCmd'
op|'.'
name|'text'
op|'='
string|"'PORT %s'"
op|'%'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'9876'
op|')'
op|','
op|')'
newline|'\n'
name|'portCmd'
op|'.'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
nl|'\n'
string|"'150 File status okay; about to open data connection.'"
op|')'
newline|'\n'
name|'sending'
op|'='
op|'['
nl|'\n'
string|"'-rw-r--r--    0 spam      egg      100 Oct 10 2006 foo\\r\\n'"
op|','
nl|'\n'
string|"'-rw-r--r--    3 spam      egg      100 Oct 10 2006 bar\\r\\n'"
op|','
nl|'\n'
string|"'-rw-r--r--    4 spam      egg      100 Oct 10 2006 baz\\r\\n'"
op|','
nl|'\n'
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'sending'
op|':'
newline|'\n'
indent|'                '
name|'portCmd'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
name|'i'
op|')'
newline|'\n'
dedent|''
name|'portCmd'
op|'.'
name|'protocol'
op|'.'
name|'connectionLost'
op|'('
nl|'\n'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
string|'""'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbList
dedent|''
name|'def'
name|'cbList'
op|'('
name|'res'
op|','
name|'fileList'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fls'
op|'='
op|'['
name|'f'
op|'['
string|'"filename"'
op|']'
name|'for'
name|'f'
name|'in'
name|'fileList'
op|'.'
name|'files'
op|']'
newline|'\n'
name|'expected'
op|'='
op|'['
string|'"foo"'
op|','
string|'"bar"'
op|','
string|'"baz"'
op|']'
newline|'\n'
name|'expected'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'fls'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'fls'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'generatePortCommand'
op|'='
name|'generatePort'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'fileList'
op|'='
name|'ftp'
op|'.'
name|'FTPFileListProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'list'
op|'('
string|"'foo/bar'"
op|','
name|'fileList'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbList'
op|','
name|'fileList'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PORT %s\\r\\n'"
op|'%'
nl|'\n'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'9876'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'200 PORT OK'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'LIST foo/bar\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'226 Transfer Complete.'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failedLIST
dedent|''
name|'def'
name|'test_failedLIST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a failure in LIST command.\n\n        L{ftp.FTPClient.list} should return a Deferred which fails with\n        L{ftp.CommandFailed} if the server indicates the indicated path is\n        invalid for some reason.\n        """'
newline|'\n'
DECL|function|cbConnect
name|'def'
name|'cbConnect'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'host'
op|','
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'port'
op|','
number|'12345'
op|')'
newline|'\n'
name|'proto'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
op|'('
name|'host'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
nl|'\n'
string|"'150 File status okay; about to open data connection.'"
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
string|'""'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'connectFactory'
op|'='
name|'cbConnect'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'fileList'
op|'='
name|'ftp'
op|'.'
name|'FTPFileListProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'list'
op|'('
string|"'foo/bar'"
op|','
name|'fileList'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PASV\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'227 Entering Passive Mode (%s).'"
op|'%'
nl|'\n'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'12345'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'LIST foo/bar\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'550 foo/bar: No such file or directory'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_NLST
dedent|''
name|'def'
name|'test_NLST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the NLST command in non-passive mode.\n\n        L{ftp.FTPClient.nlst} should return a Deferred which fires with a\n        list of filenames when the list command has completed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'passive'
op|'='
name|'False'
newline|'\n'
DECL|function|generatePort
name|'def'
name|'generatePort'
op|'('
name|'portCmd'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'portCmd'
op|'.'
name|'text'
op|'='
string|"'PORT %s'"
op|'%'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'9876'
op|')'
op|','
op|')'
newline|'\n'
name|'portCmd'
op|'.'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
nl|'\n'
string|"'150 File status okay; about to open data connection.'"
op|')'
newline|'\n'
name|'portCmd'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'foo\\r\\n'"
op|')'
newline|'\n'
name|'portCmd'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'bar\\r\\n'"
op|')'
newline|'\n'
name|'portCmd'
op|'.'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'baz\\r\\n'"
op|')'
newline|'\n'
name|'portCmd'
op|'.'
name|'protocol'
op|'.'
name|'connectionLost'
op|'('
nl|'\n'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
string|'""'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbList
dedent|''
name|'def'
name|'cbList'
op|'('
name|'res'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fls'
op|'='
name|'proto'
op|'.'
name|'buffer'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
string|'"foo"'
op|','
string|'"bar"'
op|','
string|'"baz"'
op|']'
newline|'\n'
name|'expected'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'fls'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'fls'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'generatePortCommand'
op|'='
name|'generatePort'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'lstproto'
op|'='
name|'_BufferingProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'nlst'
op|'('
string|"'foo/bar'"
op|','
name|'lstproto'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbList'
op|','
name|'lstproto'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PORT %s\\r\\n'"
op|'%'
nl|'\n'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'9876'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'200 PORT OK'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'NLST foo/bar\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'226 Transfer Complete.'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_passiveNLST
dedent|''
name|'def'
name|'test_passiveNLST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the NLST command.\n\n        Like L{test_passiveNLST} but in the configuration where the server\n        establishes the data connection to the client, rather than the other\n        way around.\n        """'
newline|'\n'
DECL|function|cbList
name|'def'
name|'cbList'
op|'('
name|'res'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fls'
op|'='
name|'proto'
op|'.'
name|'buffer'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
string|'"foo"'
op|','
string|'"bar"'
op|','
string|'"baz"'
op|']'
newline|'\n'
name|'expected'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'fls'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'fls'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbConnect
dedent|''
name|'def'
name|'cbConnect'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'host'
op|','
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'port'
op|','
number|'12345'
op|')'
newline|'\n'
name|'proto'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
op|'('
name|'host'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
nl|'\n'
string|"'150 File status okay; about to open data connection.'"
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|"'foo\\r\\n'"
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|"'bar\\r\\n'"
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|"'baz\\r\\n'"
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
string|'""'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'connectFactory'
op|'='
name|'cbConnect'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'lstproto'
op|'='
name|'_BufferingProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'nlst'
op|'('
string|"'foo/bar'"
op|','
name|'lstproto'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbList'
op|','
name|'lstproto'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PASV\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'227 Entering Passive Mode (%s).'"
op|'%'
nl|'\n'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'12345'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'NLST foo/bar\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'226 Transfer Complete.'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failedNLST
dedent|''
name|'def'
name|'test_failedNLST'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a failure in NLST command.\n\n        L{ftp.FTPClient.nlst} should return a Deferred which fails with\n        L{ftp.CommandFailed} if the server indicates the indicated path is\n        invalid for some reason.\n        """'
newline|'\n'
name|'tr'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
DECL|function|cbConnect
name|'def'
name|'cbConnect'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'host'
op|','
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'port'
op|','
number|'12345'
op|')'
newline|'\n'
name|'proto'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
op|'('
name|'host'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'tr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
nl|'\n'
string|"'150 File status okay; about to open data connection.'"
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'connectionLost'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
string|'""'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'client'
op|'.'
name|'connectFactory'
op|'='
name|'cbConnect'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'lstproto'
op|'='
name|'_BufferingProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'nlst'
op|'('
string|"'foo/bar'"
op|','
name|'lstproto'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PASV\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'227 Entering Passive Mode (%s).'"
op|'%'
nl|'\n'
op|'('
name|'ftp'
op|'.'
name|'encodeHostPort'
op|'('
string|"'127.0.0.1'"
op|','
number|'12345'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'NLST foo/bar\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'550 foo/bar: No such file or directory'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_changeDirectoryDeprecated
dedent|''
name|'def'
name|'test_changeDirectoryDeprecated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ftp.FTPClient.changeDirectory} is deprecated and the direct caller of\n        it is warned of this.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
nl|'\n'
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"FTPClient.changeDirectory is deprecated in Twisted 8.2 and "'
nl|'\n'
string|'"newer.  Use FTPClient.cwd instead."'
op|','
nl|'\n'
name|'__file__'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'self'
op|'.'
name|'client'
op|'.'
name|'changeDirectory'
op|'('
string|"'.'"
op|')'
op|')'
newline|'\n'
comment|'# This is necessary to make the Deferred fire.  The Deferred needs'
nl|'\n'
comment|"# to fire so that tearDown doesn't cause it to errback and fail this"
nl|'\n'
comment|'# or (more likely) a later test.'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'250 success'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_changeDirectory
dedent|''
name|'def'
name|'test_changeDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the changeDirectory method.\n\n        L{ftp.FTPClient.changeDirectory} should return a Deferred which fires\n        with True if succeeded.\n        """'
newline|'\n'
DECL|function|cbCd
name|'def'
name|'cbCd'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'changeDirectory'
op|'('
string|'"bar/foo"'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbCd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'CWD bar/foo\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'250 Requested File Action Completed OK'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'test_changeDirectory'
op|'.'
name|'suppress'
op|'='
op|'['
name|'_changeDirectorySuppression'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failedChangeDirectory
name|'def'
name|'test_failedChangeDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a failure in the changeDirectory method.\n\n        The behaviour here is the same as a failed CWD.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'changeDirectory'
op|'('
string|'"bar/foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'CWD bar/foo\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'550 bar/foo: No such file or directory'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'test_failedChangeDirectory'
op|'.'
name|'suppress'
op|'='
op|'['
name|'_changeDirectorySuppression'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_strangeFailedChangeDirectory
name|'def'
name|'test_strangeFailedChangeDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a strange failure in changeDirectory method.\n\n        L{ftp.FTPClient.changeDirectory} is stricter than CWD as it checks\n        code 250 for success.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'changeDirectory'
op|'('
string|'"bar/foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'CWD bar/foo\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'252 I do what I want !'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'test_strangeFailedChangeDirectory'
op|'.'
name|'suppress'
op|'='
op|'['
name|'_changeDirectorySuppression'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_renameFromTo
name|'def'
name|'test_renameFromTo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ftp.FTPClient.rename} issues I{RNTO} and I{RNFR} commands and returns\n        a L{Deferred} which fires when a file has successfully been renamed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'rename'
op|'('
string|'"/spam"'
op|','
string|'"/ham"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'RNFR /spam\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fromResponse'
op|'='
op|'('
nl|'\n'
string|"'350 Requested file action pending further information.\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
name|'fromResponse'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'RNTO /ham\\r\\n'"
op|')'
newline|'\n'
name|'toResponse'
op|'='
op|'('
nl|'\n'
string|"'250 Requested File Action Completed OK'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
name|'toResponse'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
op|'('
op|'['
name|'fromResponse'
op|']'
op|','
op|'['
name|'toResponse'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_renameFromToEscapesPaths
dedent|''
name|'def'
name|'test_renameFromToEscapesPaths'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ftp.FTPClient.rename} issues I{RNTO} and I{RNFR} commands with paths\n        escaped according to U{http://cr.yp.to/ftp/filesystem.html}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fromFile'
op|'='
string|'"/foo/ba\\nr/baz"'
newline|'\n'
name|'toFile'
op|'='
string|'"/qu\\nux"'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'rename'
op|'('
name|'fromFile'
op|','
name|'toFile'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|'"350 "'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|'"250 "'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|'"RNFR /foo/ba\\x00r/baz\\r\\n"'
nl|'\n'
string|'"RNTO /qu\\x00ux\\r\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_renameFromToFailingOnFirstError
dedent|''
name|'def'
name|'test_renameFromToFailingOnFirstError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{Deferred} returned by L{ftp.FTPClient.rename} is errbacked with\n        L{CommandFailed} if the I{RNFR} command receives an error response code\n        (for example, because the file does not exist).\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'rename'
op|'('
string|'"/spam"'
op|','
string|'"/ham"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'RNFR /spam\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'550 Requested file unavailable.\\r\\n'"
op|')'
newline|'\n'
comment|'# The RNTO should not execute since the RNFR failed.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_renameFromToFailingOnRenameTo
dedent|''
name|'def'
name|'test_renameFromToFailingOnRenameTo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{Deferred} returned by L{ftp.FTPClient.rename} is errbacked with\n        L{CommandFailed} if the I{RNTO} command receives an error response code\n        (for example, because the destination directory does not exist).\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'rename'
op|'('
string|'"/spam"'
op|','
string|'"/ham"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'RNFR /spam\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'350 Requested file action pending further information.\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'RNTO /ham\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'550 Requested file unavailable.\\r\\n'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_makeDirectory
dedent|''
name|'def'
name|'test_makeDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ftp.FTPClient.makeDirectory} issues a I{MKD} command and returns a\n        L{Deferred} which is called back with the server\'s response if the\n        directory is created.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'makeDirectory'
op|'('
string|'"/spam"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'MKD /spam\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|'\'257 "/spam" created.\''
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
op|'['
string|'\'257 "/spam" created.\''
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_makeDirectoryPathEscape
dedent|''
name|'def'
name|'test_makeDirectoryPathEscape'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ftp.FTPClient.makeDirectory} escapes the path name it sends according\n        to U{http://cr.yp.to/ftp/filesystem.html}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'makeDirectory'
op|'('
string|'"/sp\\nam"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'MKD /sp\\x00am\\r\\n'"
op|')'
newline|'\n'
comment|'# This is necessary to make the Deferred fire.  The Deferred needs'
nl|'\n'
comment|"# to fire so that tearDown doesn't cause it to errback and fail this"
nl|'\n'
comment|'# or (more likely) a later test.'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'257 win'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failedMakeDirectory
dedent|''
name|'def'
name|'test_failedMakeDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ftp.FTPClient.makeDirectory} returns a L{Deferred} which is errbacked\n        with L{CommandFailed} if the server returns an error response code.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'makeDirectory'
op|'('
string|'"/spam"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'MKD /spam\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'550 PERMISSION DENIED'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getDirectory
dedent|''
name|'def'
name|'test_getDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the getDirectory method.\n\n        L{ftp.FTPClient.getDirectory} should return a Deferred which fires with\n        the current directory on the server. It wraps PWD command.\n        """'
newline|'\n'
DECL|function|cbGet
name|'def'
name|'cbGet'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|','
string|'"/bar/baz"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'getDirectory'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbGet'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PWD\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|'\'257 "/bar/baz"\''
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failedGetDirectory
dedent|''
name|'def'
name|'test_failedGetDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a failure in getDirectory method.\n\n        The behaviour should be the same as PWD.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'getDirectory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PWD\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'550 /bar/baz: No such file or directory'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_anotherFailedGetDirectory
dedent|''
name|'def'
name|'test_anotherFailedGetDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a different failure in getDirectory method.\n\n        The response should be quoted to be parsed, so it returns an error\n        otherwise.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'getDirectory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'PWD\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
string|"'257 /bar/baz'"
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeFile
dedent|''
name|'def'
name|'test_removeFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ftp.FTPClient.removeFile} sends a I{DELE} command to the server for\n        the indicated file and returns a Deferred which fires after the server\n        sends a 250 response code.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'removeFile'
op|'('
string|'"/tmp/test"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'DELE /tmp/test\\r\\n'"
op|')'
newline|'\n'
name|'response'
op|'='
string|"'250 Requested file action okay, completed.'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
name|'response'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEqual'
op|','
op|'['
name|'response'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failedRemoveFile
dedent|''
name|'def'
name|'test_failedRemoveFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server returns a response code other than 250 in response to a\n        I{DELE} sent by L{ftp.FTPClient.removeFile}, the L{Deferred} returned\n        by C{removeFile} is errbacked with a L{Failure} wrapping a\n        L{CommandFailed}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'removeFile'
op|'('
string|'"/tmp/test"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'DELE /tmp/test\\r\\n'"
op|')'
newline|'\n'
name|'response'
op|'='
string|"'501 Syntax error in parameters or arguments.'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
name|'response'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'CommandFailed'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'exc'
op|':'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'exc'
op|'.'
name|'args'
op|','
op|'('
op|'['
name|'response'
op|']'
op|','
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unparsableRemoveFileResponse
dedent|''
name|'def'
name|'test_unparsableRemoveFileResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server returns a response line which cannot be parsed, the\n        L{Deferred} returned by L{ftp.FTPClient.removeFile} is errbacked with a\n        L{BadResponse} containing the response.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'removeFile'
op|'('
string|'"/tmp/test"'
op|')'
newline|'\n'
name|'response'
op|'='
string|"'765 blah blah blah'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|'('
name|'response'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'BadResponse'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'exc'
op|':'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'exc'
op|'.'
name|'args'
op|','
op|'('
op|'['
name|'response'
op|']'
op|','
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multilineRemoveFileResponse
dedent|''
name|'def'
name|'test_multilineRemoveFileResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server returns multiple response lines, the L{Deferred} returned\n        by L{ftp.FTPClient.removeFile} is still fired with a true value if the\n        ultimate response code is 250.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_testLogin'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'removeFile'
op|'('
string|'"/tmp/test"'
op|')'
newline|'\n'
name|'response'
op|'='
op|'['
string|"'250-perhaps a progress report'"
op|','
nl|'\n'
string|"'250 okay'"
op|']'
newline|'\n'
name|'map'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lineReceived'
op|','
name|'response'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertTrue'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPClientBasicTests
dedent|''
dedent|''
name|'class'
name|'FTPClientBasicTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|testGreeting
indent|'    '
name|'def'
name|'testGreeting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# The first response is captured as a greeting.'
nl|'\n'
indent|'        '
name|'ftpClient'
op|'='
name|'ftp'
op|'.'
name|'FTPClientBasic'
op|'('
op|')'
newline|'\n'
name|'ftpClient'
op|'.'
name|'lineReceived'
op|'('
string|"'220 Imaginary FTP.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'['
string|"'220 Imaginary FTP.'"
op|']'
op|','
name|'ftpClient'
op|'.'
name|'greeting'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testResponseWithNoMessage
dedent|''
name|'def'
name|'testResponseWithNoMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Responses with no message are still valid, i.e. three digits followed'
nl|'\n'
comment|'# by a space is complete response.'
nl|'\n'
indent|'        '
name|'ftpClient'
op|'='
name|'ftp'
op|'.'
name|'FTPClientBasic'
op|'('
op|')'
newline|'\n'
name|'ftpClient'
op|'.'
name|'lineReceived'
op|'('
string|"'220 '"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'['
string|"'220 '"
op|']'
op|','
name|'ftpClient'
op|'.'
name|'greeting'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMultilineResponse
dedent|''
name|'def'
name|'testMultilineResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ftpClient'
op|'='
name|'ftp'
op|'.'
name|'FTPClientBasic'
op|'('
op|')'
newline|'\n'
name|'ftpClient'
op|'.'
name|'transport'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'ftpClient'
op|'.'
name|'lineReceived'
op|'('
string|"'220 Imaginary FTP.'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Queue (and send) a dummy command, and set up a callback to capture the'
nl|'\n'
comment|'# result'
nl|'\n'
name|'deferred'
op|'='
name|'ftpClient'
op|'.'
name|'queueStringCommand'
op|'('
string|"'BLAH'"
op|')'
newline|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'result'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'addErrback'
op|'('
name|'self'
op|'.'
name|'fail'
op|')'
newline|'\n'
nl|'\n'
comment|'# Send the first line of a multiline response.'
nl|'\n'
name|'ftpClient'
op|'.'
name|'lineReceived'
op|'('
string|"'210-First line.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'['
op|']'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
comment|'# Send a second line, again prefixed with "nnn-".'
nl|'\n'
name|'ftpClient'
op|'.'
name|'lineReceived'
op|'('
string|"'123-Second line.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'['
op|']'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
comment|'# Send a plain line of text, no prefix.'
nl|'\n'
name|'ftpClient'
op|'.'
name|'lineReceived'
op|'('
string|"'Just some text.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'['
op|']'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now send a short (less than 4 chars) line.'
nl|'\n'
name|'ftpClient'
op|'.'
name|'lineReceived'
op|'('
string|"'Hi'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'['
op|']'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now send an empty line.'
nl|'\n'
name|'ftpClient'
op|'.'
name|'lineReceived'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'['
op|']'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
comment|'# And a line with 3 digits in it, and nothing else.'
nl|'\n'
name|'ftpClient'
op|'.'
name|'lineReceived'
op|'('
string|"'321'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'['
op|']'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now finish it.'
nl|'\n'
name|'ftpClient'
op|'.'
name|'lineReceived'
op|'('
string|"'210 Done.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
nl|'\n'
op|'['
string|"'210-First line.'"
op|','
nl|'\n'
string|"'123-Second line.'"
op|','
nl|'\n'
string|"'Just some text.'"
op|','
nl|'\n'
string|"'Hi'"
op|','
nl|'\n'
string|"''"
op|','
nl|'\n'
string|"'321'"
op|','
nl|'\n'
string|"'210 Done.'"
op|']'
op|','
name|'result'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noPasswordGiven
dedent|''
name|'def'
name|'test_noPasswordGiven'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Passing None as the password avoids sending the PASS command.\n        """'
newline|'\n'
comment|'# Create a client, and give it a greeting.'
nl|'\n'
name|'ftpClient'
op|'='
name|'ftp'
op|'.'
name|'FTPClientBasic'
op|'('
op|')'
newline|'\n'
name|'ftpClient'
op|'.'
name|'transport'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'ftpClient'
op|'.'
name|'lineReceived'
op|'('
string|"'220 Welcome to Imaginary FTP.'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Queue a login with no password'
nl|'\n'
name|'ftpClient'
op|'.'
name|'queueLogin'
op|'('
string|"'bob'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'USER bob\\r\\n'"
op|','
name|'ftpClient'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Clear the test buffer, acknowledge the USER command.'
nl|'\n'
name|'ftpClient'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'ftpClient'
op|'.'
name|'lineReceived'
op|'('
string|"'200 Hello bob.'"
op|')'
newline|'\n'
nl|'\n'
comment|"# The client shouldn't have sent anything more (i.e. it shouldn't have"
nl|'\n'
comment|'# sent a PASS command).'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|','
name|'ftpClient'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noPasswordNeeded
dedent|''
name|'def'
name|'test_noPasswordNeeded'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Receiving a 230 response to USER prevents PASS from being sent.\n        """'
newline|'\n'
comment|'# Create a client, and give it a greeting.'
nl|'\n'
name|'ftpClient'
op|'='
name|'ftp'
op|'.'
name|'FTPClientBasic'
op|'('
op|')'
newline|'\n'
name|'ftpClient'
op|'.'
name|'transport'
op|'='
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'ftpClient'
op|'.'
name|'lineReceived'
op|'('
string|"'220 Welcome to Imaginary FTP.'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Queue a login with no password'
nl|'\n'
name|'ftpClient'
op|'.'
name|'queueLogin'
op|'('
string|"'bob'"
op|','
string|"'secret'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'USER bob\\r\\n'"
op|','
name|'ftpClient'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Clear the test buffer, acknowledge the USER command with a 230'
nl|'\n'
comment|'# response code.'
nl|'\n'
name|'ftpClient'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'ftpClient'
op|'.'
name|'lineReceived'
op|'('
string|"'230 Hello bob.  No password needed.'"
op|')'
newline|'\n'
nl|'\n'
comment|"# The client shouldn't have sent anything more (i.e. it shouldn't have"
nl|'\n'
comment|'# sent a PASS command).'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|','
name|'ftpClient'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PathHandling
dedent|''
dedent|''
name|'class'
name|'PathHandling'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testNormalizer
indent|'    '
name|'def'
name|'testNormalizer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'inp'
op|','
name|'outp'
name|'in'
op|'['
op|'('
string|"'a'"
op|','
op|'['
string|"'a'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/a'"
op|','
op|'['
string|"'a'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/'"
op|','
op|'['
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'a/b/c'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/a/b/c'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/a/'"
op|','
op|'['
string|"'a'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'a/'"
op|','
op|'['
string|"'a'"
op|']'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ftp'
op|'.'
name|'toSegments'
op|'('
op|'['
op|']'
op|','
name|'inp'
op|')'
op|','
name|'outp'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'inp'
op|','
name|'outp'
name|'in'
op|'['
op|'('
string|"'b'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'b/'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/b'"
op|','
op|'['
string|"'b'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/b/'"
op|','
op|'['
string|"'b'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'b/c'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'b/c/'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/b/c'"
op|','
op|'['
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/b/c/'"
op|','
op|'['
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ftp'
op|'.'
name|'toSegments'
op|'('
op|'['
string|"'a'"
op|']'
op|','
name|'inp'
op|')'
op|','
name|'outp'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'inp'
op|','
name|'outp'
name|'in'
op|'['
op|'('
string|"'//'"
op|','
op|'['
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'//a'"
op|','
op|'['
string|"'a'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'a//'"
op|','
op|'['
string|"'a'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'a//b'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ftp'
op|'.'
name|'toSegments'
op|'('
op|'['
op|']'
op|','
name|'inp'
op|')'
op|','
name|'outp'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'inp'
op|','
name|'outp'
name|'in'
op|'['
op|'('
string|"'//'"
op|','
op|'['
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'//b'"
op|','
op|'['
string|"'b'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'b//c'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ftp'
op|'.'
name|'toSegments'
op|'('
op|'['
string|"'a'"
op|']'
op|','
name|'inp'
op|')'
op|','
name|'outp'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'inp'
op|','
name|'outp'
name|'in'
op|'['
op|'('
string|"'..'"
op|','
op|'['
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'../'"
op|','
op|'['
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'a/..'"
op|','
op|'['
string|"'x'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/a/..'"
op|','
op|'['
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/a/b/..'"
op|','
op|'['
string|"'a'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/a/b/../'"
op|','
op|'['
string|"'a'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/a/b/../c'"
op|','
op|'['
string|"'a'"
op|','
string|"'c'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/a/b/../c/'"
op|','
op|'['
string|"'a'"
op|','
string|"'c'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/a/b/../../c'"
op|','
op|'['
string|"'c'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/a/b/../../c/'"
op|','
op|'['
string|"'c'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/a/b/../../c/..'"
op|','
op|'['
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'/a/b/../../c/../'"
op|','
op|'['
op|']'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ftp'
op|'.'
name|'toSegments'
op|'('
op|'['
string|"'x'"
op|']'
op|','
name|'inp'
op|')'
op|','
name|'outp'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'inp'
name|'in'
op|'['
string|"'..'"
op|','
string|"'../'"
op|','
string|"'a/../..'"
op|','
string|"'a/../../'"
op|','
nl|'\n'
string|"'/..'"
op|','
string|"'/../'"
op|','
string|"'/a/../..'"
op|','
string|"'/a/../../'"
op|','
nl|'\n'
string|"'/a/b/../../..'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ftp'
op|'.'
name|'InvalidPath'
op|','
name|'ftp'
op|'.'
name|'toSegments'
op|','
op|'['
op|']'
op|','
name|'inp'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'inp'
name|'in'
op|'['
string|"'../..'"
op|','
string|"'../../'"
op|','
string|"'../a/../..'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ftp'
op|'.'
name|'InvalidPath'
op|','
name|'ftp'
op|'.'
name|'toSegments'
op|','
op|'['
string|"'x'"
op|']'
op|','
name|'inp'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ErrnoToFailureTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'ErrnoToFailureTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{ftp.errnoToFailure} errno checking.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_notFound
name|'def'
name|'test_notFound'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{errno.ENOENT} should be translated to L{ftp.FileNotFoundError}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'ftp'
op|'.'
name|'errnoToFailure'
op|'('
name|'errno'
op|'.'
name|'ENOENT'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'FileNotFoundError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_permissionDenied
dedent|''
name|'def'
name|'test_permissionDenied'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{errno.EPERM} should be translated to L{ftp.PermissionDeniedError}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'ftp'
op|'.'
name|'errnoToFailure'
op|'('
name|'errno'
op|'.'
name|'EPERM'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'PermissionDeniedError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_accessDenied
dedent|''
name|'def'
name|'test_accessDenied'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{errno.EACCES} should be translated to L{ftp.PermissionDeniedError}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'ftp'
op|'.'
name|'errnoToFailure'
op|'('
name|'errno'
op|'.'
name|'EACCES'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'PermissionDeniedError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_notDirectory
dedent|''
name|'def'
name|'test_notDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{errno.ENOTDIR} should be translated to L{ftp.IsNotADirectoryError}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'ftp'
op|'.'
name|'errnoToFailure'
op|'('
name|'errno'
op|'.'
name|'ENOTDIR'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'IsNotADirectoryError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fileExists
dedent|''
name|'def'
name|'test_fileExists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{errno.EEXIST} should be translated to L{ftp.FileExistsError}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'ftp'
op|'.'
name|'errnoToFailure'
op|'('
name|'errno'
op|'.'
name|'EEXIST'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'FileExistsError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_isDirectory
dedent|''
name|'def'
name|'test_isDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{errno.EISDIR} should be translated to L{ftp.IsADirectoryError}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'ftp'
op|'.'
name|'errnoToFailure'
op|'('
name|'errno'
op|'.'
name|'EISDIR'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'IsADirectoryError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_passThrough
dedent|''
name|'def'
name|'test_passThrough'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an unknown errno is passed to L{ftp.errnoToFailure}, it should let\n        the originating exception pass through.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"bar"'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'ftp'
op|'.'
name|'errnoToFailure'
op|'('
op|'-'
number|'1'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'RuntimeError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AnonymousFTPShellTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'AnonymousFTPShellTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test anynomous shell properties.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_anonymousWrite
name|'def'
name|'test_anonymousWrite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that L{ftp.FTPAnonymousShell} returns an error when trying to\n        open it in write mode.\n        """'
newline|'\n'
name|'shell'
op|'='
name|'ftp'
op|'.'
name|'FTPAnonymousShell'
op|'('
string|"''"
op|')'
newline|'\n'
name|'d'
op|'='
name|'shell'
op|'.'
name|'openForWriting'
op|'('
op|'('
string|"'foo'"
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'PermissionDeniedError'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IFTPShellTestsMixin
dedent|''
dedent|''
name|'class'
name|'IFTPShellTestsMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Generic tests for the C{IFTPShell} interface.\n    """'
newline|'\n'
nl|'\n'
DECL|member|directoryExists
name|'def'
name|'directoryExists'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test if the directory exists at C{path}.\n\n        @param path: the relative path to check.\n        @type path: C{str}.\n\n        @return: C{True} if C{path} exists and is a directory, C{False} if\n            it\'s not the case\n        @rtype: C{bool}\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|createDirectory
dedent|''
name|'def'
name|'createDirectory'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a directory in C{path}.\n\n        @param path: the relative path of the directory to create, with one\n            segment.\n        @type path: C{str}\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fileExists
dedent|''
name|'def'
name|'fileExists'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test if the file exists at C{path}.\n\n        @param path: the relative path to check.\n        @type path: C{str}.\n\n        @return: C{True} if C{path} exists and is a file, C{False} if it\'s not\n            the case.\n        @rtype: C{bool}\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|createFile
dedent|''
name|'def'
name|'createFile'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'fileContent'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a file named C{path} with some content.\n\n        @param path: the relative path of the file to create, without\n            directory.\n        @type path: C{str}\n\n        @param fileContent: the content of the file.\n        @type fileContent: C{str}\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_createDirectory
dedent|''
name|'def'
name|'test_createDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{directoryExists} should report correctly about directory existence,\n        and C{createDirectory} should create a directory detectable by\n        C{directoryExists}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'directoryExists'
op|'('
string|"'bar'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'createDirectory'
op|'('
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'directoryExists'
op|'('
string|"'bar'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_createFile
dedent|''
name|'def'
name|'test_createFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        C{fileExists} should report correctly about file existence, and\n        C{createFile} should create a file detectable by C{fileExists}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'fileExists'
op|'('
string|"'file.txt'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'createFile'
op|'('
string|"'file.txt'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'fileExists'
op|'('
string|"'file.txt'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_makeDirectory
dedent|''
name|'def'
name|'test_makeDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a directory and check it ends in the filesystem.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'makeDirectory'
op|'('
op|'('
string|"'foo'"
op|','
op|')'
op|')'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'directoryExists'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_makeDirectoryError
dedent|''
name|'def'
name|'test_makeDirectoryError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Creating a directory that already exists should fail with a\n        C{ftp.FileExistsError}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createDirectory'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'makeDirectory'
op|'('
op|'('
string|"'foo'"
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'FileExistsError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeDirectory
dedent|''
name|'def'
name|'test_removeDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to remove a directory and check it\'s removed from the filesystem.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createDirectory'
op|'('
string|"'bar'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'removeDirectory'
op|'('
op|'('
string|"'bar'"
op|','
op|')'
op|')'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'directoryExists'
op|'('
string|"'bar'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeDirectoryOnFile
dedent|''
name|'def'
name|'test_removeDirectoryOnFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        removeDirectory should not work in file and fail with a\n        C{ftp.IsNotADirectoryError}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createFile'
op|'('
string|"'file.txt'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'removeDirectory'
op|'('
op|'('
string|"'file.txt'"
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'IsNotADirectoryError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeNotExistingDirectory
dedent|''
name|'def'
name|'test_removeNotExistingDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Removing directory that doesn\'t exist should fail with a\n        C{ftp.FileNotFoundError}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'removeDirectory'
op|'('
op|'('
string|"'bar'"
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'FileNotFoundError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeFile
dedent|''
name|'def'
name|'test_removeFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to remove a file and check it\'s removed from the filesystem.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createFile'
op|'('
string|"'file.txt'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'removeFile'
op|'('
op|'('
string|"'file.txt'"
op|','
op|')'
op|')'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'fileExists'
op|'('
string|"'file.txt'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeFileOnDirectory
dedent|''
name|'def'
name|'test_removeFileOnDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        removeFile should not work on directory.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createDirectory'
op|'('
string|"'ned'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'removeFile'
op|'('
op|'('
string|"'ned'"
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'IsADirectoryError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removeNotExistingFile
dedent|''
name|'def'
name|'test_removeNotExistingFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to remove a non existent file, and check it raises a\n        L{ivfs.NotFoundError}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'removeFile'
op|'('
op|'('
string|"'foo'"
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'FileNotFoundError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_list
dedent|''
name|'def'
name|'test_list'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check the output of the list method.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createDirectory'
op|'('
string|"'ned'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'createFile'
op|'('
string|"'file.txt'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'list'
op|'('
op|'('
string|"'.'"
op|','
op|')'
op|')'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'l'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'l'
op|','
nl|'\n'
op|'['
op|'('
string|"'file.txt'"
op|','
op|'['
op|']'
op|')'
op|','
op|'('
string|"'ned'"
op|','
op|'['
op|']'
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_listWithStat
dedent|''
name|'def'
name|'test_listWithStat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check the output of list with asked stats.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createDirectory'
op|'('
string|"'ned'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'createFile'
op|'('
string|"'file.txt'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'list'
op|'('
op|'('
string|"'.'"
op|','
op|')'
op|','
op|'('
string|"'size'"
op|','
string|"'permissions'"
op|','
op|')'
op|')'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'l'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'l'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'l'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
string|"'file.txt'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'l'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
op|','
string|"'ned'"
op|')'
newline|'\n'
comment|'# Size and permissions are reported differently between platforms'
nl|'\n'
comment|'# so just check they are present'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'l'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'l'
op|'['
number|'1'
op|']'
op|'['
number|'1'
op|']'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_listWithInvalidStat
dedent|''
name|'def'
name|'test_listWithInvalidStat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Querying an invalid stat should result to a C{AttributeError}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createDirectory'
op|'('
string|"'ned'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'list'
op|'('
op|'('
string|"'.'"
op|','
op|')'
op|','
op|'('
string|"'size'"
op|','
string|"'whateverstat'"
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'AttributeError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_listFile
dedent|''
name|'def'
name|'test_listFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check the output of the list method on a file.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createFile'
op|'('
string|"'file.txt'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'list'
op|'('
op|'('
string|"'file.txt'"
op|','
op|')'
op|')'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'l'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'l'
op|','
nl|'\n'
op|'['
op|'('
string|"'file.txt'"
op|','
op|'['
op|']'
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_listNotExistingDirectory
dedent|''
name|'def'
name|'test_listNotExistingDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        list on a directory that doesn\'t exist should fail with a\n        L{ftp.FileNotFoundError}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'list'
op|'('
op|'('
string|"'foo'"
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'FileNotFoundError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_access
dedent|''
name|'def'
name|'test_access'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to access a resource.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createDirectory'
op|'('
string|"'ned'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'access'
op|'('
op|'('
string|"'ned'"
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_accessNotFound
dedent|''
name|'def'
name|'test_accessNotFound'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        access should fail on a resource that doesn\'t exist.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'access'
op|'('
op|'('
string|"'foo'"
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'FileNotFoundError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_openForReading
dedent|''
name|'def'
name|'test_openForReading'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that openForReading returns an object providing C{ftp.IReadFile}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createFile'
op|'('
string|"'file.txt'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'openForReading'
op|'('
op|'('
string|"'file.txt'"
op|','
op|')'
op|')'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'ftp'
op|'.'
name|'IReadFile'
op|'.'
name|'providedBy'
op|'('
name|'res'
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_openForReadingNotFound
dedent|''
name|'def'
name|'test_openForReadingNotFound'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        openForReading should fail with a C{ftp.FileNotFoundError} on a file\n        that doesn\'t exist.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'openForReading'
op|'('
op|'('
string|"'ned'"
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'FileNotFoundError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_openForReadingOnDirectory
dedent|''
name|'def'
name|'test_openForReadingOnDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        openForReading should not work on directory.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createDirectory'
op|'('
string|"'ned'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'openForReading'
op|'('
op|'('
string|"'ned'"
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'IsADirectoryError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_openForWriting
dedent|''
name|'def'
name|'test_openForWriting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that openForWriting returns an object providing C{ftp.IWriteFile}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'openForWriting'
op|'('
op|'('
string|"'foo'"
op|','
op|')'
op|')'
newline|'\n'
DECL|function|cb1
name|'def'
name|'cb1'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'ftp'
op|'.'
name|'IWriteFile'
op|'.'
name|'providedBy'
op|'('
name|'res'
op|')'
op|')'
newline|'\n'
name|'return'
name|'res'
op|'.'
name|'receive'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cb2'
op|')'
newline|'\n'
DECL|function|cb2
dedent|''
name|'def'
name|'cb2'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'IConsumer'
op|'.'
name|'providedBy'
op|'('
name|'res'
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb1'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_openForWritingExistingDirectory
dedent|''
name|'def'
name|'test_openForWritingExistingDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        openForWriting should not be able to open a directory that already\n        exists.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createDirectory'
op|'('
string|"'ned'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'openForWriting'
op|'('
op|'('
string|"'ned'"
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'IsADirectoryError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_openForWritingInNotExistingDirectory
dedent|''
name|'def'
name|'test_openForWritingInNotExistingDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        openForWring should fail with a L{ftp.FileNotFoundError} if you specify\n        a file in a directory that doesn\'t exist.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createDirectory'
op|'('
string|"'ned'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'openForWriting'
op|'('
op|'('
string|"'ned'"
op|','
string|"'idonotexist'"
op|','
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'FileNotFoundError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_statFile
dedent|''
name|'def'
name|'test_statFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check the output of the stat method on a file.\n        """'
newline|'\n'
name|'fileContent'
op|'='
string|"'wobble\\n'"
newline|'\n'
name|'self'
op|'.'
name|'createFile'
op|'('
string|"'file.txt'"
op|','
name|'fileContent'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'stat'
op|'('
op|'('
string|"'file.txt'"
op|','
op|')'
op|','
op|'('
string|"'size'"
op|','
string|"'directory'"
op|')'
op|')'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|','
name|'len'
op|'('
name|'fileContent'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'res'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_statDirectory
dedent|''
name|'def'
name|'test_statDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check the output of the stat method on a directory.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createDirectory'
op|'('
string|"'ned'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'stat'
op|'('
op|'('
string|"'ned'"
op|','
op|')'
op|','
op|'('
string|"'size'"
op|','
string|"'directory'"
op|')'
op|')'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'res'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_statOwnerGroup
dedent|''
name|'def'
name|'test_statOwnerGroup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check the owner and groups stats.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createDirectory'
op|'('
string|"'ned'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'stat'
op|'('
op|'('
string|"'ned'"
op|','
op|')'
op|','
op|'('
string|"'owner'"
op|','
string|"'group'"
op|')'
op|')'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'res'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_statNotExisting
dedent|''
name|'def'
name|'test_statNotExisting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        stat should fail with L{ftp.FileNotFoundError} on a file that doesn\'t\n        exist.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'stat'
op|'('
op|'('
string|"'foo'"
op|','
op|')'
op|','
op|'('
string|"'size'"
op|','
string|"'directory'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'FileNotFoundError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidStat
dedent|''
name|'def'
name|'test_invalidStat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Querying an invalid stat should result to a C{AttributeError}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createDirectory'
op|'('
string|"'ned'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'stat'
op|'('
op|'('
string|"'ned'"
op|','
op|')'
op|','
op|'('
string|"'size'"
op|','
string|"'whateverstat'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'AttributeError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_rename
dedent|''
name|'def'
name|'test_rename'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to rename a directory.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'createDirectory'
op|'('
string|"'ned'"
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'rename'
op|'('
op|'('
string|"'ned'"
op|','
op|')'
op|','
op|'('
string|"'foo'"
op|','
op|')'
op|')'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'directoryExists'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'directoryExists'
op|'('
string|"'ned'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_renameNotExisting
dedent|''
name|'def'
name|'test_renameNotExisting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Renaming a directory that doesn\'t exist should fail with\n        L{ftp.FileNotFoundError}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'shell'
op|'.'
name|'rename'
op|'('
op|'('
string|"'foo'"
op|','
op|')'
op|','
op|'('
string|"'bar'"
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ftp'
op|'.'
name|'FileNotFoundError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPShellTestCase
dedent|''
dedent|''
name|'class'
name|'FTPShellTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'IFTPShellTestsMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the C{ftp.FTPShell} object.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a root directory and instantiate a shell.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'root'
op|'='
name|'filepath'
op|'.'
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'root'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'shell'
op|'='
name|'ftp'
op|'.'
name|'FTPShell'
op|'('
name|'self'
op|'.'
name|'root'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|directoryExists
dedent|''
name|'def'
name|'directoryExists'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test if the directory exists at C{path}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'root'
op|'.'
name|'child'
op|'('
name|'path'
op|')'
op|'.'
name|'isdir'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|createDirectory
dedent|''
name|'def'
name|'createDirectory'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a directory in C{path}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'root'
op|'.'
name|'child'
op|'('
name|'path'
op|')'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fileExists
dedent|''
name|'def'
name|'fileExists'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test if the file exists at C{path}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'root'
op|'.'
name|'child'
op|'('
name|'path'
op|')'
op|'.'
name|'isfile'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|createFile
dedent|''
name|'def'
name|'createFile'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'fileContent'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a file named C{path} with some content.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'root'
op|'.'
name|'child'
op|'('
name|'path'
op|')'
op|'.'
name|'setContent'
op|'('
name|'fileContent'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestConsumer
dedent|''
dedent|''
name|'class'
name|'TestConsumer'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A simple consumer for tests. It only works with non-streaming producers.\n\n    @ivar producer: an object providing\n        L{twisted.internet.interfaces.IPullProducer}.\n    """'
newline|'\n'
nl|'\n'
name|'implements'
op|'('
name|'IConsumer'
op|')'
newline|'\n'
DECL|variable|producer
name|'producer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|registerProducer
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Simple register of producer, checks that no register has happened\n        before.\n        """'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'producer'
name|'is'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'='
name|'producer'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Unregister the producer, it should be done after a register.\n        """'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'producer'
name|'is'
name|'not'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Save the data received.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestProducer
dedent|''
dedent|''
name|'class'
name|'TestProducer'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A dumb producer.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'toProduce'
op|','
name|'consumer'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param toProduce: data to write\n        @type toProduce: C{str}\n        @param consumer: the consumer of data.\n        @type consumer: C{IConsumer}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'toProduce'
op|'='
name|'toProduce'
newline|'\n'
name|'self'
op|'.'
name|'consumer'
op|'='
name|'consumer'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|start
dedent|''
name|'def'
name|'start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Send the data to consume.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'toProduce'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IReadWriteTestsMixin
dedent|''
dedent|''
name|'class'
name|'IReadWriteTestsMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Generic tests for the C{IReadFile} and C{IWriteFile} interfaces.\n    """'
newline|'\n'
nl|'\n'
DECL|member|getFileReader
name|'def'
name|'getFileReader'
op|'('
name|'self'
op|','
name|'content'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return an object providing C{IReadFile}, ready to send data C{content}.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getFileWriter
dedent|''
name|'def'
name|'getFileWriter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return an object providing C{IWriteFile}, ready to receive data.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getFileContent
dedent|''
name|'def'
name|'getFileContent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the content of the file used.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_read
dedent|''
name|'def'
name|'test_read'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test L{ftp.IReadFile}: the implementation should have a send method\n        returning a C{Deferred} which fires when all the data has been sent\n        to the consumer, and the data should be correctly send to the consumer.\n        """'
newline|'\n'
name|'content'
op|'='
string|"'wobble\\n'"
newline|'\n'
name|'consumer'
op|'='
name|'TestConsumer'
op|'('
op|')'
newline|'\n'
DECL|function|cbGet
name|'def'
name|'cbGet'
op|'('
name|'reader'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'reader'
op|'.'
name|'send'
op|'('
name|'consumer'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbSend'
op|')'
newline|'\n'
DECL|function|cbSend
dedent|''
name|'def'
name|'cbSend'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'""'
op|'.'
name|'join'
op|'('
name|'consumer'
op|'.'
name|'buffer'
op|')'
op|','
name|'content'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'getFileReader'
op|'('
name|'content'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbGet'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_write
dedent|''
name|'def'
name|'test_write'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test L{ftp.IWriteFile}: the implementation should have a receive method\n        returning a C{Deferred} with fires with a consumer ready to receive\n        data to be written.\n        """'
newline|'\n'
name|'content'
op|'='
string|"'elbbow\\n'"
newline|'\n'
DECL|function|cbGet
name|'def'
name|'cbGet'
op|'('
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'writer'
op|'.'
name|'receive'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbReceive'
op|')'
newline|'\n'
DECL|function|cbReceive
dedent|''
name|'def'
name|'cbReceive'
op|'('
name|'consumer'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'producer'
op|'='
name|'TestProducer'
op|'('
name|'content'
op|','
name|'consumer'
op|')'
newline|'\n'
name|'consumer'
op|'.'
name|'registerProducer'
op|'('
name|'None'
op|','
name|'True'
op|')'
newline|'\n'
name|'producer'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'consumer'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'getFileContent'
op|'('
op|')'
op|','
name|'content'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'getFileWriter'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbGet'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FTPReadWriteTestCase
dedent|''
dedent|''
name|'class'
name|'FTPReadWriteTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'IReadWriteTestsMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for C{ftp._FileReader} and C{ftp._FileWriter}, the objects returned\n    by the shell in C{openForReading}/C{openForWriting}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a temporary file used later.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'root'
op|'='
name|'filepath'
op|'.'
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'root'
op|'.'
name|'createDirectory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'shell'
op|'='
name|'ftp'
op|'.'
name|'FTPShell'
op|'('
name|'self'
op|'.'
name|'root'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'filename'
op|'='
string|'"file.txt"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getFileReader
dedent|''
name|'def'
name|'getFileReader'
op|'('
name|'self'
op|','
name|'content'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a C{ftp._FileReader} instance with a file opened for reading.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'root'
op|'.'
name|'child'
op|'('
name|'self'
op|'.'
name|'filename'
op|')'
op|'.'
name|'setContent'
op|'('
name|'content'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'shell'
op|'.'
name|'openForReading'
op|'('
op|'('
name|'self'
op|'.'
name|'filename'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getFileWriter
dedent|''
name|'def'
name|'getFileWriter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a C{ftp._FileWriter} instance with a file opened for writing.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'shell'
op|'.'
name|'openForWriting'
op|'('
op|'('
name|'self'
op|'.'
name|'filename'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getFileContent
dedent|''
name|'def'
name|'getFileContent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the content of the temporary file.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'root'
op|'.'
name|'child'
op|'('
name|'self'
op|'.'
name|'filename'
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2007-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.cred.strcred}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
name|'import'
name|'plugin'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'credentials'
op|','
name|'checkers'
op|','
name|'error'
op|','
name|'strcred'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'plugins'
name|'import'
name|'cred_file'
op|','
name|'cred_anonymous'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'usage'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'filepath'
name|'import'
name|'FilePath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'fakepwd'
name|'import'
name|'UserDatabase'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'crypt'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|crypt
indent|'    '
name|'crypt'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pwd'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|pwd
indent|'    '
name|'pwd'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'spwd'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|spwd
indent|'    '
name|'spwd'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|getInvalidAuthType
dedent|''
name|'def'
name|'getInvalidAuthType'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper method to produce an auth type that doesn\'t exist.\n    """'
newline|'\n'
name|'invalidAuthType'
op|'='
string|"'ThisPluginDoesNotExist'"
newline|'\n'
name|'while'
op|'('
name|'invalidAuthType'
name|'in'
nl|'\n'
op|'['
name|'factory'
op|'.'
name|'authType'
name|'for'
name|'factory'
name|'in'
name|'strcred'
op|'.'
name|'findCheckerFactories'
op|'('
op|')'
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'invalidAuthType'
op|'+='
string|"'_'"
newline|'\n'
dedent|''
name|'return'
name|'invalidAuthType'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestPublicAPI
dedent|''
name|'class'
name|'TestPublicAPI'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_emptyDescription
indent|'    '
name|'def'
name|'test_emptyDescription'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the description string cannot be empty.\n        """'
newline|'\n'
name|'iat'
op|'='
name|'getInvalidAuthType'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'strcred'
op|'.'
name|'InvalidAuthType'
op|','
name|'strcred'
op|'.'
name|'makeChecker'
op|','
name|'iat'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'strcred'
op|'.'
name|'InvalidAuthType'
op|','
name|'strcred'
op|'.'
name|'findCheckerFactory'
op|','
name|'iat'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidAuthType
dedent|''
name|'def'
name|'test_invalidAuthType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that an unrecognized auth type raises an exception.\n        """'
newline|'\n'
name|'iat'
op|'='
name|'getInvalidAuthType'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'strcred'
op|'.'
name|'InvalidAuthType'
op|','
name|'strcred'
op|'.'
name|'makeChecker'
op|','
name|'iat'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'strcred'
op|'.'
name|'InvalidAuthType'
op|','
name|'strcred'
op|'.'
name|'findCheckerFactory'
op|','
name|'iat'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestStrcredFunctions
dedent|''
dedent|''
name|'class'
name|'TestStrcredFunctions'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_findCheckerFactories
indent|'    '
name|'def'
name|'test_findCheckerFactories'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that findCheckerFactories returns all available plugins.\n        """'
newline|'\n'
name|'availablePlugins'
op|'='
name|'list'
op|'('
name|'strcred'
op|'.'
name|'findCheckerFactories'
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'plg'
name|'in'
name|'plugin'
op|'.'
name|'getPlugins'
op|'('
name|'strcred'
op|'.'
name|'ICheckerFactory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'plg'
op|','
name|'availablePlugins'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_findCheckerFactory
dedent|''
dedent|''
name|'def'
name|'test_findCheckerFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that findCheckerFactory returns the first plugin\n        available for a given authentication type.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'strcred'
op|'.'
name|'findCheckerFactory'
op|'('
string|"'file'"
op|')'
op|','
nl|'\n'
name|'cred_file'
op|'.'
name|'theFileCheckerFactory'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestMemoryChecker
dedent|''
dedent|''
name|'class'
name|'TestMemoryChecker'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'admin'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'admin'"
op|','
string|"'asdf'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'alice'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'alice'"
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'badPass'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'alice'"
op|','
string|"'foobar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'badUser'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'x'"
op|','
string|"'yz'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checker'
op|'='
name|'strcred'
op|'.'
name|'makeChecker'
op|'('
string|"'memory:admin:asdf:alice:foo'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_isChecker
dedent|''
name|'def'
name|'test_isChecker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verifies that strcred.makeChecker(\'memory\') returns an object\n        that implements the L{ICredentialsChecker} interface.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'checkers'
op|'.'
name|'ICredentialsChecker'
op|'.'
name|'providedBy'
op|'('
name|'self'
op|'.'
name|'checker'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|','
nl|'\n'
name|'self'
op|'.'
name|'checker'
op|'.'
name|'credentialInterfaces'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_badFormatArgString
dedent|''
name|'def'
name|'test_badFormatArgString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that an argument string which does not contain user:pass\n        pairs (i.e., an odd number of \':\' characters) raises an exception.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'strcred'
op|'.'
name|'InvalidAuthArgumentString'
op|','
nl|'\n'
name|'strcred'
op|'.'
name|'makeChecker'
op|','
string|"'memory:a:b:c'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_memoryCheckerSucceeds
dedent|''
name|'def'
name|'test_memoryCheckerSucceeds'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the checker works with valid credentials.\n        """'
newline|'\n'
DECL|function|_gotAvatar
name|'def'
name|'_gotAvatar'
op|'('
name|'username'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'username'
op|','
name|'self'
op|'.'
name|'admin'
op|'.'
name|'username'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'self'
op|'.'
name|'checker'
nl|'\n'
op|'.'
name|'requestAvatarId'
op|'('
name|'self'
op|'.'
name|'admin'
op|')'
nl|'\n'
op|'.'
name|'addCallback'
op|'('
name|'_gotAvatar'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_memoryCheckerFailsUsername
dedent|''
name|'def'
name|'test_memoryCheckerFailsUsername'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the checker fails with an invalid username.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'self'
op|'.'
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'self'
op|'.'
name|'badUser'
op|')'
op|','
nl|'\n'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_memoryCheckerFailsPassword
dedent|''
name|'def'
name|'test_memoryCheckerFailsPassword'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the checker fails with an invalid password.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'self'
op|'.'
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'self'
op|'.'
name|'badPass'
op|')'
op|','
nl|'\n'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestAnonymousChecker
dedent|''
dedent|''
name|'class'
name|'TestAnonymousChecker'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_isChecker
indent|'    '
name|'def'
name|'test_isChecker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verifies that strcred.makeChecker(\'anonymous\') returns an object\n        that implements the L{ICredentialsChecker} interface.\n        """'
newline|'\n'
name|'checker'
op|'='
name|'strcred'
op|'.'
name|'makeChecker'
op|'('
string|"'anonymous'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'checkers'
op|'.'
name|'ICredentialsChecker'
op|'.'
name|'providedBy'
op|'('
name|'checker'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'credentials'
op|'.'
name|'IAnonymous'
op|','
name|'checker'
op|'.'
name|'credentialInterfaces'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testAnonymousAccessSucceeds
dedent|''
name|'def'
name|'testAnonymousAccessSucceeds'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that we can log in anonymously using this checker.\n        """'
newline|'\n'
name|'checker'
op|'='
name|'strcred'
op|'.'
name|'makeChecker'
op|'('
string|"'anonymous'"
op|')'
newline|'\n'
name|'request'
op|'='
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'credentials'
op|'.'
name|'Anonymous'
op|'('
op|')'
op|')'
newline|'\n'
DECL|function|_gotAvatar
name|'def'
name|'_gotAvatar'
op|'('
name|'avatar'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'checkers'
op|'.'
name|'ANONYMOUS'
op|','
name|'avatar'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'request'
op|'.'
name|'addCallback'
op|'('
name|'_gotAvatar'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestUnixChecker
dedent|''
dedent|''
name|'class'
name|'TestUnixChecker'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|users
indent|'    '
name|'users'
op|'='
op|'{'
nl|'\n'
string|"'admin'"
op|':'
string|"'asdf'"
op|','
nl|'\n'
string|"'alice'"
op|':'
string|"'foo'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_spwd
name|'def'
name|'_spwd'
op|'('
name|'self'
op|','
name|'username'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'username'
op|','
name|'crypt'
op|'.'
name|'crypt'
op|'('
name|'self'
op|'.'
name|'users'
op|'['
name|'username'
op|']'
op|','
string|"'F/'"
op|')'
op|','
nl|'\n'
number|'0'
op|','
number|'0'
op|','
number|'99999'
op|','
number|'7'
op|','
op|'-'
number|'1'
op|','
op|'-'
number|'1'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'admin'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'admin'"
op|','
string|"'asdf'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'alice'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'alice'"
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'badPass'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'alice'"
op|','
string|"'foobar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'badUser'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'x'"
op|','
string|"'yz'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checker'
op|'='
name|'strcred'
op|'.'
name|'makeChecker'
op|'('
string|"'unix'"
op|')'
newline|'\n'
nl|'\n'
comment|"# Hack around the pwd and spwd modules, since we can't really"
nl|'\n'
comment|'# go about reading your /etc/passwd or /etc/shadow files'
nl|'\n'
name|'if'
name|'pwd'
op|':'
newline|'\n'
indent|'            '
name|'database'
op|'='
name|'UserDatabase'
op|'('
op|')'
newline|'\n'
name|'for'
name|'username'
op|','
name|'password'
name|'in'
name|'self'
op|'.'
name|'users'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'database'
op|'.'
name|'addUser'
op|'('
nl|'\n'
name|'username'
op|','
name|'crypt'
op|'.'
name|'crypt'
op|'('
name|'password'
op|','
string|"'F/'"
op|')'
op|','
nl|'\n'
number|'1000'
op|','
number|'1000'
op|','
name|'username'
op|','
string|"'/home/'"
op|'+'
name|'username'
op|','
string|"'/bin/sh'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'pwd'
op|','
string|"'getpwnam'"
op|','
name|'database'
op|'.'
name|'getpwnam'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'spwd'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_spwd_getspnam'
op|'='
name|'spwd'
op|'.'
name|'getspnam'
newline|'\n'
name|'spwd'
op|'.'
name|'getspnam'
op|'='
name|'self'
op|'.'
name|'_spwd'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'spwd'
op|':'
newline|'\n'
indent|'            '
name|'spwd'
op|'.'
name|'getspnam'
op|'='
name|'self'
op|'.'
name|'_spwd_getspnam'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_isChecker
dedent|''
dedent|''
name|'def'
name|'test_isChecker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verifies that strcred.makeChecker(\'unix\') returns an object\n        that implements the L{ICredentialsChecker} interface.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'checkers'
op|'.'
name|'ICredentialsChecker'
op|'.'
name|'providedBy'
op|'('
name|'self'
op|'.'
name|'checker'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|','
nl|'\n'
name|'self'
op|'.'
name|'checker'
op|'.'
name|'credentialInterfaces'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unixCheckerSucceeds
dedent|''
name|'def'
name|'test_unixCheckerSucceeds'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the checker works with valid credentials.\n        """'
newline|'\n'
DECL|function|_gotAvatar
name|'def'
name|'_gotAvatar'
op|'('
name|'username'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'username'
op|','
name|'self'
op|'.'
name|'admin'
op|'.'
name|'username'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'self'
op|'.'
name|'checker'
nl|'\n'
op|'.'
name|'requestAvatarId'
op|'('
name|'self'
op|'.'
name|'admin'
op|')'
nl|'\n'
op|'.'
name|'addCallback'
op|'('
name|'_gotAvatar'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unixCheckerFailsUsername
dedent|''
name|'def'
name|'test_unixCheckerFailsUsername'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the checker fails with an invalid username.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'self'
op|'.'
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'self'
op|'.'
name|'badUser'
op|')'
op|','
nl|'\n'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unixCheckerFailsPassword
dedent|''
name|'def'
name|'test_unixCheckerFailsPassword'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the checker fails with an invalid password.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'self'
op|'.'
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'self'
op|'.'
name|'badPass'
op|')'
op|','
nl|'\n'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'None'
name|'in'
op|'('
name|'pwd'
op|','
name|'spwd'
op|','
name|'crypt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'method'
name|'in'
op|'('
name|'test_unixCheckerSucceeds'
op|','
nl|'\n'
name|'test_unixCheckerFailsUsername'
op|','
nl|'\n'
name|'test_unixCheckerFailsPassword'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'method'
op|'.'
name|'skip'
op|'='
string|"'pwd and spwd are both unavailable'"
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestFileDBChecker
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestFileDBChecker'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test for the --auth=file:... file checker.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'admin'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'admin'"
op|','
string|"'asdf'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'alice'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'alice'"
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'badPass'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'alice'"
op|','
string|"'foobar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'badUser'
op|'='
name|'credentials'
op|'.'
name|'UsernamePassword'
op|'('
string|"'x'"
op|','
string|"'yz'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'filename'
op|')'
op|'.'
name|'setContent'
op|'('
string|"'admin:asdf\\nalice:foo\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checker'
op|'='
name|'strcred'
op|'.'
name|'makeChecker'
op|'('
string|"'file:'"
op|'+'
name|'self'
op|'.'
name|'filename'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_fakeFilename
dedent|''
name|'def'
name|'_fakeFilename'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'filename'
op|'='
string|"'/DoesNotExist'"
newline|'\n'
name|'while'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'filename'
op|'+='
string|"'_'"
newline|'\n'
dedent|''
name|'return'
name|'filename'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_isChecker
dedent|''
name|'def'
name|'test_isChecker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verifies that strcred.makeChecker(\'memory\') returns an object\n        that implements the L{ICredentialsChecker} interface.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'checkers'
op|'.'
name|'ICredentialsChecker'
op|'.'
name|'providedBy'
op|'('
name|'self'
op|'.'
name|'checker'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|','
nl|'\n'
name|'self'
op|'.'
name|'checker'
op|'.'
name|'credentialInterfaces'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fileCheckerSucceeds
dedent|''
name|'def'
name|'test_fileCheckerSucceeds'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the checker works with valid credentials.\n        """'
newline|'\n'
DECL|function|_gotAvatar
name|'def'
name|'_gotAvatar'
op|'('
name|'username'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'username'
op|','
name|'self'
op|'.'
name|'admin'
op|'.'
name|'username'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'self'
op|'.'
name|'checker'
nl|'\n'
op|'.'
name|'requestAvatarId'
op|'('
name|'self'
op|'.'
name|'admin'
op|')'
nl|'\n'
op|'.'
name|'addCallback'
op|'('
name|'_gotAvatar'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fileCheckerFailsUsername
dedent|''
name|'def'
name|'test_fileCheckerFailsUsername'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the checker fails with an invalid username.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'self'
op|'.'
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'self'
op|'.'
name|'badUser'
op|')'
op|','
nl|'\n'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fileCheckerFailsPassword
dedent|''
name|'def'
name|'test_fileCheckerFailsPassword'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the checker fails with an invalid password.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'self'
op|'.'
name|'checker'
op|'.'
name|'requestAvatarId'
op|'('
name|'self'
op|'.'
name|'badPass'
op|')'
op|','
nl|'\n'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failsWithEmptyFilename
dedent|''
name|'def'
name|'test_failsWithEmptyFilename'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that an empty filename raises an error.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'strcred'
op|'.'
name|'makeChecker'
op|','
string|"'file'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'strcred'
op|'.'
name|'makeChecker'
op|','
string|"'file:'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_warnWithBadFilename
dedent|''
name|'def'
name|'test_warnWithBadFilename'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When the file auth plugin is given a file that doesn\'t exist, it\n        should produce a warning.\n        """'
newline|'\n'
name|'oldOutput'
op|'='
name|'cred_file'
op|'.'
name|'theFileCheckerFactory'
op|'.'
name|'errorOutput'
newline|'\n'
name|'newOutput'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'cred_file'
op|'.'
name|'theFileCheckerFactory'
op|'.'
name|'errorOutput'
op|'='
name|'newOutput'
newline|'\n'
name|'checker'
op|'='
name|'strcred'
op|'.'
name|'makeChecker'
op|'('
string|"'file:'"
op|'+'
name|'self'
op|'.'
name|'_fakeFilename'
op|'('
op|')'
op|')'
newline|'\n'
name|'cred_file'
op|'.'
name|'theFileCheckerFactory'
op|'.'
name|'errorOutput'
op|'='
name|'oldOutput'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'cred_file'
op|'.'
name|'invalidFileWarning'
op|','
name|'newOutput'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyOptions
dedent|''
dedent|''
name|'class'
name|'DummyOptions'
op|'('
name|'usage'
op|'.'
name|'Options'
op|','
name|'strcred'
op|'.'
name|'AuthOptionMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Simple options for testing L{strcred.AuthOptionMixin}.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestCheckerOptions
dedent|''
name|'class'
name|'TestCheckerOptions'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_createsList
indent|'    '
name|'def'
name|'test_createsList'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the --auth command line creates a list in the\n        Options instance and appends values to it.\n        """'
newline|'\n'
name|'options'
op|'='
name|'DummyOptions'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--auth'"
op|','
string|"'memory'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'options'
op|'['
string|"'credCheckers'"
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'options'
op|'='
name|'DummyOptions'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--auth'"
op|','
string|"'memory'"
op|','
string|"'--auth'"
op|','
string|"'memory'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'options'
op|'['
string|"'credCheckers'"
op|']'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidAuthError
dedent|''
name|'def'
name|'test_invalidAuthError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the --auth command line raises an exception when it\n        gets a parameter it doesn\'t understand.\n        """'
newline|'\n'
name|'options'
op|'='
name|'DummyOptions'
op|'('
op|')'
newline|'\n'
comment|"# If someone adds a 'ThisPluginDoesNotExist' then this unit"
nl|'\n'
comment|'# test should still run.'
nl|'\n'
name|'invalidParameter'
op|'='
name|'getInvalidAuthType'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'usage'
op|'.'
name|'UsageError'
op|','
nl|'\n'
name|'options'
op|'.'
name|'parseOptions'
op|','
op|'['
string|"'--auth'"
op|','
name|'invalidParameter'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'usage'
op|'.'
name|'UsageError'
op|','
nl|'\n'
name|'options'
op|'.'
name|'parseOptions'
op|','
op|'['
string|"'--help-auth-type'"
op|','
name|'invalidParameter'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_createsDictionary
dedent|''
name|'def'
name|'test_createsDictionary'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the --auth command line creates a dictionary\n        mapping supported interfaces to the list of credentials\n        checkers that support it.\n        """'
newline|'\n'
name|'options'
op|'='
name|'DummyOptions'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--auth'"
op|','
string|"'memory'"
op|','
string|"'--auth'"
op|','
string|"'anonymous'"
op|']'
op|')'
newline|'\n'
name|'chd'
op|'='
name|'options'
op|'['
string|"'credInterfaces'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'chd'
op|'['
name|'credentials'
op|'.'
name|'IAnonymous'
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'chd'
op|'['
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'chdAnonymous'
op|'='
name|'chd'
op|'['
name|'credentials'
op|'.'
name|'IAnonymous'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'chdUserPass'
op|'='
name|'chd'
op|'['
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'checkers'
op|'.'
name|'ICredentialsChecker'
op|'.'
name|'providedBy'
op|'('
name|'chdAnonymous'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'checkers'
op|'.'
name|'ICredentialsChecker'
op|'.'
name|'providedBy'
op|'('
name|'chdUserPass'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'credentials'
op|'.'
name|'IAnonymous'
op|','
nl|'\n'
name|'chdAnonymous'
op|'.'
name|'credentialInterfaces'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|','
nl|'\n'
name|'chdUserPass'
op|'.'
name|'credentialInterfaces'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_credInterfacesProvidesLists
dedent|''
name|'def'
name|'test_credInterfacesProvidesLists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that when two --auth arguments are passed along which\n        support the same interface, a list with both is created.\n        """'
newline|'\n'
name|'options'
op|'='
name|'DummyOptions'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--auth'"
op|','
string|"'memory'"
op|','
string|"'--auth'"
op|','
string|"'unix'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'options'
op|'['
string|"'credCheckers'"
op|']'
op|','
nl|'\n'
name|'options'
op|'['
string|"'credInterfaces'"
op|']'
op|'['
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_listDoesNotDisplayDuplicates
dedent|''
name|'def'
name|'test_listDoesNotDisplayDuplicates'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the list for --help-auth does not duplicate items.\n        """'
newline|'\n'
name|'authTypes'
op|'='
op|'['
op|']'
newline|'\n'
name|'options'
op|'='
name|'DummyOptions'
op|'('
op|')'
newline|'\n'
name|'for'
name|'cf'
name|'in'
name|'options'
op|'.'
name|'_checkerFactoriesForOptHelpAuth'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'cf'
op|'.'
name|'authType'
op|','
name|'authTypes'
op|')'
newline|'\n'
name|'authTypes'
op|'.'
name|'append'
op|'('
name|'cf'
op|'.'
name|'authType'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_displaysListCorrectly
dedent|''
dedent|''
name|'def'
name|'test_displaysListCorrectly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the --help-auth argument correctly displays all\n        available authentication plugins, then exits.\n        """'
newline|'\n'
name|'newStdout'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'options'
op|'='
name|'DummyOptions'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'authOutput'
op|'='
name|'newStdout'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'options'
op|'.'
name|'parseOptions'
op|','
op|'['
string|"'--help-auth'"
op|']'
op|')'
newline|'\n'
name|'for'
name|'checkerFactory'
name|'in'
name|'strcred'
op|'.'
name|'findCheckerFactories'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'checkerFactory'
op|'.'
name|'authType'
op|','
name|'newStdout'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_displaysHelpCorrectly
dedent|''
dedent|''
name|'def'
name|'test_displaysHelpCorrectly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the --help-auth-for argument will correctly display\n        the help file for a particular authentication plugin.\n        """'
newline|'\n'
name|'newStdout'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'options'
op|'='
name|'DummyOptions'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'authOutput'
op|'='
name|'newStdout'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'SystemExit'
op|','
name|'options'
op|'.'
name|'parseOptions'
op|','
op|'['
string|"'--help-auth-type'"
op|','
string|"'file'"
op|']'
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'cred_file'
op|'.'
name|'theFileCheckerFactory'
op|'.'
name|'authHelp'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
op|','
name|'newStdout'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unexpectedException
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_unexpectedException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When the checker specified by --auth raises an unexpected error, it\n        should be caught and re-raised within a L{usage.UsageError}.\n        """'
newline|'\n'
name|'options'
op|'='
name|'DummyOptions'
op|'('
op|')'
newline|'\n'
name|'err'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'usage'
op|'.'
name|'UsageError'
op|','
name|'options'
op|'.'
name|'parseOptions'
op|','
nl|'\n'
op|'['
string|"'--auth'"
op|','
string|"'file'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'err'
op|')'
op|','
nl|'\n'
string|'"Unexpected error: \'file\' requires a filename"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|OptionsForUsernamePassword
dedent|''
dedent|''
name|'class'
name|'OptionsForUsernamePassword'
op|'('
name|'usage'
op|'.'
name|'Options'
op|','
name|'strcred'
op|'.'
name|'AuthOptionMixin'
op|')'
op|':'
newline|'\n'
DECL|variable|supportedInterfaces
indent|'    '
name|'supportedInterfaces'
op|'='
op|'('
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|OptionsForUsernameHashedPassword
dedent|''
name|'class'
name|'OptionsForUsernameHashedPassword'
op|'('
name|'usage'
op|'.'
name|'Options'
op|','
name|'strcred'
op|'.'
name|'AuthOptionMixin'
op|')'
op|':'
newline|'\n'
DECL|variable|supportedInterfaces
indent|'    '
name|'supportedInterfaces'
op|'='
op|'('
name|'credentials'
op|'.'
name|'IUsernameHashedPassword'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|OptionsSupportsAllInterfaces
dedent|''
name|'class'
name|'OptionsSupportsAllInterfaces'
op|'('
name|'usage'
op|'.'
name|'Options'
op|','
name|'strcred'
op|'.'
name|'AuthOptionMixin'
op|')'
op|':'
newline|'\n'
DECL|variable|supportedInterfaces
indent|'    '
name|'supportedInterfaces'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|OptionsSupportsNoInterfaces
dedent|''
name|'class'
name|'OptionsSupportsNoInterfaces'
op|'('
name|'usage'
op|'.'
name|'Options'
op|','
name|'strcred'
op|'.'
name|'AuthOptionMixin'
op|')'
op|':'
newline|'\n'
DECL|variable|supportedInterfaces
indent|'    '
name|'supportedInterfaces'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestLimitingInterfaces
dedent|''
name|'class'
name|'TestLimitingInterfaces'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests functionality that allows an application to limit the\n    credential interfaces it can support. For the purposes of this\n    test, we use IUsernameHashedPassword, although this will never\n    really be used by the command line.\n\n    (I have, to date, not thought of a half-decent way for a user to\n    specify a hash algorithm via the command-line. Nor do I think it\'s\n    very useful.)\n\n    I should note that, at first, this test is counter-intuitive,\n    because we\'re using the checker with a pre-defined hash function\n    as the \'bad\' checker. See the documentation for\n    L{twisted.cred.checkers.FilePasswordDB.hash} for more details.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'file'
op|'('
name|'self'
op|'.'
name|'filename'
op|','
string|"'w'"
op|')'
op|'.'
name|'write'
op|'('
string|"'admin:asdf\\nalice:foo\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'goodChecker'
op|'='
name|'checkers'
op|'.'
name|'FilePasswordDB'
op|'('
name|'self'
op|'.'
name|'filename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'badChecker'
op|'='
name|'checkers'
op|'.'
name|'FilePasswordDB'
op|'('
name|'self'
op|'.'
name|'filename'
op|','
name|'hash'
op|'='
name|'self'
op|'.'
name|'_hash'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'anonChecker'
op|'='
name|'checkers'
op|'.'
name|'AllowAnonymousAccess'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_hash
dedent|''
name|'def'
name|'_hash'
op|'('
name|'self'
op|','
name|'networkUsername'
op|','
name|'networkPassword'
op|','
name|'storedPassword'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A dumb hash that doesn\'t really do anything.\n        """'
newline|'\n'
name|'return'
name|'networkPassword'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_supportsInterface
dedent|''
name|'def'
name|'test_supportsInterface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the supportsInterface method behaves appropriately.\n        """'
newline|'\n'
name|'options'
op|'='
name|'OptionsForUsernamePassword'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'options'
op|'.'
name|'supportsInterface'
op|'('
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
nl|'\n'
name|'options'
op|'.'
name|'supportsInterface'
op|'('
name|'credentials'
op|'.'
name|'IAnonymous'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'strcred'
op|'.'
name|'UnsupportedInterfaces'
op|','
name|'options'
op|'.'
name|'addChecker'
op|','
name|'self'
op|'.'
name|'anonChecker'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_supportsAllInterfaces
dedent|''
name|'def'
name|'test_supportsAllInterfaces'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the supportsInterface method behaves appropriately\n        when the supportedInterfaces attribute is None.\n        """'
newline|'\n'
name|'options'
op|'='
name|'OptionsSupportsAllInterfaces'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'options'
op|'.'
name|'supportsInterface'
op|'('
name|'credentials'
op|'.'
name|'IUsernamePassword'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'options'
op|'.'
name|'supportsInterface'
op|'('
name|'credentials'
op|'.'
name|'IAnonymous'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_supportsCheckerFactory
dedent|''
name|'def'
name|'test_supportsCheckerFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the supportsCheckerFactory method behaves appropriately.\n        """'
newline|'\n'
name|'options'
op|'='
name|'OptionsForUsernamePassword'
op|'('
op|')'
newline|'\n'
name|'fileCF'
op|'='
name|'cred_file'
op|'.'
name|'theFileCheckerFactory'
newline|'\n'
name|'anonCF'
op|'='
name|'cred_anonymous'
op|'.'
name|'theAnonymousCheckerFactory'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'options'
op|'.'
name|'supportsCheckerFactory'
op|'('
name|'fileCF'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'options'
op|'.'
name|'supportsCheckerFactory'
op|'('
name|'anonCF'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_canAddSupportedChecker
dedent|''
name|'def'
name|'test_canAddSupportedChecker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that when addChecker is called with a checker that\n        implements at least one of the interfaces our application\n        supports, it is successful.\n        """'
newline|'\n'
name|'options'
op|'='
name|'OptionsForUsernamePassword'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'addChecker'
op|'('
name|'self'
op|'.'
name|'goodChecker'
op|')'
newline|'\n'
name|'iface'
op|'='
name|'options'
op|'.'
name|'supportedInterfaces'
op|'['
number|'0'
op|']'
newline|'\n'
comment|'# Test that we did get IUsernamePassword'
nl|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'options'
op|'['
string|"'credInterfaces'"
op|']'
op|'['
name|'iface'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|'.'
name|'goodChecker'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'options'
op|'['
string|"'credCheckers'"
op|']'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|'.'
name|'goodChecker'
op|')'
newline|'\n'
comment|"# Test that we didn't get IUsernameHashedPassword"
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'options'
op|'['
string|"'credInterfaces'"
op|']'
op|'['
name|'iface'
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'options'
op|'['
string|"'credCheckers'"
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failOnAddingUnsupportedChecker
dedent|''
name|'def'
name|'test_failOnAddingUnsupportedChecker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that when addChecker is called with a checker that does\n        not implement any supported interfaces, it fails.\n        """'
newline|'\n'
name|'options'
op|'='
name|'OptionsForUsernameHashedPassword'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'strcred'
op|'.'
name|'UnsupportedInterfaces'
op|','
nl|'\n'
name|'options'
op|'.'
name|'addChecker'
op|','
name|'self'
op|'.'
name|'badChecker'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unsupportedInterfaceError
dedent|''
name|'def'
name|'test_unsupportedInterfaceError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the --auth command line raises an exception when it\n        gets a checker we don\'t support.\n        """'
newline|'\n'
name|'options'
op|'='
name|'OptionsSupportsNoInterfaces'
op|'('
op|')'
newline|'\n'
name|'authType'
op|'='
name|'cred_anonymous'
op|'.'
name|'theAnonymousCheckerFactory'
op|'.'
name|'authType'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'usage'
op|'.'
name|'UsageError'
op|','
nl|'\n'
name|'options'
op|'.'
name|'parseOptions'
op|','
op|'['
string|"'--auth'"
op|','
name|'authType'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_helpAuthLimitsOutput
dedent|''
name|'def'
name|'test_helpAuthLimitsOutput'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that --help-auth will only list checkers that purport to\n        supply at least one of the credential interfaces our\n        application can use.\n        """'
newline|'\n'
name|'options'
op|'='
name|'OptionsForUsernamePassword'
op|'('
op|')'
newline|'\n'
name|'for'
name|'factory'
name|'in'
name|'options'
op|'.'
name|'_checkerFactoriesForOptHelpAuth'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'invalid'
op|'='
name|'True'
newline|'\n'
name|'for'
name|'interface'
name|'in'
name|'factory'
op|'.'
name|'credentialInterfaces'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'options'
op|'.'
name|'supportsInterface'
op|'('
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'invalid'
op|'='
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'invalid'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'strcred'
op|'.'
name|'UnsupportedInterfaces'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_helpAuthTypeLimitsOutput
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_helpAuthTypeLimitsOutput'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that --help-auth-type will display a warning if you get\n        help for an authType that does not supply at least one of the\n        credential interfaces our application can use.\n        """'
newline|'\n'
name|'options'
op|'='
name|'OptionsForUsernamePassword'
op|'('
op|')'
newline|'\n'
comment|'# Find an interface that we can use for our test'
nl|'\n'
name|'invalidFactory'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'factory'
name|'in'
name|'strcred'
op|'.'
name|'findCheckerFactories'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'options'
op|'.'
name|'supportsCheckerFactory'
op|'('
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'invalidFactory'
op|'='
name|'factory'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'invalidFactory'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# Capture output and make sure the warning is there'
nl|'\n'
name|'newStdout'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'authOutput'
op|'='
name|'newStdout'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'options'
op|'.'
name|'parseOptions'
op|','
nl|'\n'
op|'['
string|"'--help-auth-type'"
op|','
string|"'anonymous'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'strcred'
op|'.'
name|'notSupportedWarning'
op|','
name|'newStdout'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTest running processes.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'gzip'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'popen2'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'signal'
newline|'\n'
name|'import'
name|'StringIO'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'gc'
newline|'\n'
name|'import'
name|'stat'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'fcntl'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'fcntl'
op|'='
name|'process'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'process'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'from'
name|'zope'
op|'.'
name|'interface'
op|'.'
name|'verify'
name|'import'
name|'verifyObject'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'log'
name|'import'
name|'msg'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
op|','
name|'protocol'
op|','
name|'error'
op|','
name|'interfaces'
op|','
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'util'
op|','
name|'runtime'
op|','
name|'procutils'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StubProcessProtocol
name|'class'
name|'StubProcessProtocol'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    ProcessProtocol counter-implementation: all methods on this class raise an\n    exception, so instances of this may be used to verify that only certain\n    methods are called.\n    """'
newline|'\n'
DECL|member|outReceived
name|'def'
name|'outReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|errReceived
dedent|''
name|'def'
name|'errReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|inConnectionLost
dedent|''
name|'def'
name|'inConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|outConnectionLost
dedent|''
name|'def'
name|'outConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|errConnectionLost
dedent|''
name|'def'
name|'errConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProcessProtocolTests
dedent|''
dedent|''
name|'class'
name|'ProcessProtocolTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for behavior provided by the process protocol base class,\n    L{protocol.ProcessProtocol}.\n    """'
newline|'\n'
DECL|member|test_interface
name|'def'
name|'test_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ProcessProtocol} implements L{IProcessProtocol}.\n        """'
newline|'\n'
name|'verifyObject'
op|'('
name|'interfaces'
op|'.'
name|'IProcessProtocol'
op|','
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_outReceived
dedent|''
name|'def'
name|'test_outReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that when stdout is delivered to\n        L{ProcessProtocol.childDataReceived}, it is forwarded to\n        L{ProcessProtocol.outReceived}.\n        """'
newline|'\n'
name|'received'
op|'='
op|'['
op|']'
newline|'\n'
DECL|class|OutProtocol
name|'class'
name|'OutProtocol'
op|'('
name|'StubProcessProtocol'
op|')'
op|':'
newline|'\n'
DECL|member|outReceived
indent|'            '
name|'def'
name|'outReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'received'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'bytes'
op|'='
string|'"bytes"'
newline|'\n'
name|'p'
op|'='
name|'OutProtocol'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'childDataReceived'
op|'('
number|'1'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'received'
op|','
op|'['
name|'bytes'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_errReceived
dedent|''
name|'def'
name|'test_errReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Similar to L{test_outReceived}, but for stderr.\n        """'
newline|'\n'
name|'received'
op|'='
op|'['
op|']'
newline|'\n'
DECL|class|ErrProtocol
name|'class'
name|'ErrProtocol'
op|'('
name|'StubProcessProtocol'
op|')'
op|':'
newline|'\n'
DECL|member|errReceived
indent|'            '
name|'def'
name|'errReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'received'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'bytes'
op|'='
string|'"bytes"'
newline|'\n'
name|'p'
op|'='
name|'ErrProtocol'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'childDataReceived'
op|'('
number|'2'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'received'
op|','
op|'['
name|'bytes'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_inConnectionLost
dedent|''
name|'def'
name|'test_inConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that when stdin close notification is delivered to\n        L{ProcessProtocol.childConnectionLost}, it is forwarded to\n        L{ProcessProtocol.inConnectionLost}.\n        """'
newline|'\n'
name|'lost'
op|'='
op|'['
op|']'
newline|'\n'
DECL|class|InLostProtocol
name|'class'
name|'InLostProtocol'
op|'('
name|'StubProcessProtocol'
op|')'
op|':'
newline|'\n'
DECL|member|inConnectionLost
indent|'            '
name|'def'
name|'inConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'lost'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'p'
op|'='
name|'InLostProtocol'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'childConnectionLost'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'lost'
op|','
op|'['
name|'None'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_outConnectionLost
dedent|''
name|'def'
name|'test_outConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Similar to L{test_inConnectionLost}, but for stdout.\n        """'
newline|'\n'
name|'lost'
op|'='
op|'['
op|']'
newline|'\n'
DECL|class|OutLostProtocol
name|'class'
name|'OutLostProtocol'
op|'('
name|'StubProcessProtocol'
op|')'
op|':'
newline|'\n'
DECL|member|outConnectionLost
indent|'            '
name|'def'
name|'outConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'lost'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'p'
op|'='
name|'OutLostProtocol'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'childConnectionLost'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'lost'
op|','
op|'['
name|'None'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_errConnectionLost
dedent|''
name|'def'
name|'test_errConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Similar to L{test_inConnectionLost}, but for stderr.\n        """'
newline|'\n'
name|'lost'
op|'='
op|'['
op|']'
newline|'\n'
DECL|class|ErrLostProtocol
name|'class'
name|'ErrLostProtocol'
op|'('
name|'StubProcessProtocol'
op|')'
op|':'
newline|'\n'
DECL|member|errConnectionLost
indent|'            '
name|'def'
name|'errConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'lost'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'p'
op|'='
name|'ErrLostProtocol'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'childConnectionLost'
op|'('
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'lost'
op|','
op|'['
name|'None'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TrivialProcessProtocol
dedent|''
dedent|''
name|'class'
name|'TrivialProcessProtocol'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Simple process protocol for tests purpose.\n\n    @ivar outData: data received from stdin\n    @ivar errData: data received from stderr\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create the deferred that will be fired at the end, and initialize\n        data structures.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'d'
newline|'\n'
name|'self'
op|'.'
name|'outData'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'errData'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reason'
op|'='
name|'reason'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|outReceived
dedent|''
name|'def'
name|'outReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'outData'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|errReceived
dedent|''
name|'def'
name|'errReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'errData'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestProcessProtocol
dedent|''
dedent|''
name|'class'
name|'TestProcessProtocol'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
indent|'    '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stages'
op|'='
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'err'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"abcd"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|childDataReceived
dedent|''
name|'def'
name|'childDataReceived'
op|'('
name|'self'
op|','
name|'childFD'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override and disable the dispatch provided by the base class to ensure\n        that it is really this method which is being called, and the transport\n        is not going directly to L{outReceived} or L{errReceived}.\n        """'
newline|'\n'
name|'if'
name|'childFD'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'data'
op|'+='
name|'data'
newline|'\n'
dedent|''
name|'elif'
name|'childFD'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'err'
op|'+='
name|'data'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|childConnectionLost
dedent|''
dedent|''
name|'def'
name|'childConnectionLost'
op|'('
name|'self'
op|','
name|'childFD'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Similarly to L{childDataReceived}, disable the automatic dispatch\n        provided by the base implementation to verify that the transport is\n        calling this method directly.\n        """'
newline|'\n'
name|'if'
name|'childFD'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stages'
op|'.'
name|'append'
op|'('
number|'2'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'data'
op|'!='
string|'"abcd"'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RuntimeError'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"1234"'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'childFD'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stages'
op|'.'
name|'append'
op|'('
number|'3'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'err'
op|'!='
string|'"1234"'
op|':'
newline|'\n'
indent|'                '
name|'print'
string|"'err != 1234: '"
op|'+'
name|'repr'
op|'('
name|'self'
op|'.'
name|'err'
op|')'
newline|'\n'
name|'raise'
name|'RuntimeError'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"abcd"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stages'
op|'.'
name|'append'
op|'('
number|'4'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'childFD'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stages'
op|'.'
name|'append'
op|'('
number|'5'
op|')'
newline|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reason'
op|'='
name|'reason'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|EchoProtocol
dedent|''
dedent|''
name|'class'
name|'EchoProtocol'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|s
indent|'    '
name|'s'
op|'='
string|'"1234567"'
op|'*'
number|'1001'
newline|'\n'
DECL|variable|n
name|'n'
op|'='
number|'10'
newline|'\n'
DECL|variable|finished
name|'finished'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|variable|failure
name|'failure'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'onEnded'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'onEnded'
op|'='
name|'onEnded'
newline|'\n'
name|'self'
op|'.'
name|'count'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'self'
op|'.'
name|'n'
op|'>'
number|'2'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'self'
op|'.'
name|'n'
op|'-'
number|'2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'s'
op|')'
newline|'\n'
comment|'# test writeSequence'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'writeSequence'
op|'('
op|'['
name|'self'
op|'.'
name|'s'
op|','
name|'self'
op|'.'
name|'s'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
name|'self'
op|'.'
name|'s'
op|'*'
name|'self'
op|'.'
name|'n'
newline|'\n'
nl|'\n'
DECL|member|outReceived
dedent|''
name|'def'
name|'outReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'buffer'
op|'('
name|'self'
op|'.'
name|'buffer'
op|','
name|'self'
op|'.'
name|'count'
op|','
name|'len'
op|'('
name|'data'
op|')'
op|')'
op|'!='
name|'buffer'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failure'
op|'='
op|'('
string|'"wrong bytes received"'
op|','
name|'data'
op|','
name|'self'
op|'.'
name|'count'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'closeStdin'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'count'
op|'+='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'count'
op|'=='
name|'len'
op|'('
name|'self'
op|'.'
name|'buffer'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'closeStdin'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
dedent|''
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'finished'
op|'='
number|'1'
newline|'\n'
name|'if'
name|'not'
name|'reason'
op|'.'
name|'check'
op|'('
name|'error'
op|'.'
name|'ProcessDone'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failure'
op|'='
string|'"process didn\'t terminate normally: "'
op|'+'
name|'str'
op|'('
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'onEnded'
op|'.'
name|'callback'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SignalProtocol
dedent|''
dedent|''
name|'class'
name|'SignalProtocol'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A process protocol that sends a signal when data is first received.\n\n    @ivar deferred: deferred firing on C{processEnded}.\n    @type deferred: L{defer.Deferred}\n\n    @ivar signal: the signal to send to the process.\n    @type signal: C{str}\n\n    @ivar signaled: A flag tracking whether the signal has been sent to the\n        child or not yet.  C{False} until it is sent, then C{True}.\n    @type signaled: C{bool}\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'deferred'
op|','
name|'sig'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'='
name|'deferred'
newline|'\n'
name|'self'
op|'.'
name|'signal'
op|'='
name|'sig'
newline|'\n'
name|'self'
op|'.'
name|'signaled'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|outReceived
dedent|''
name|'def'
name|'outReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle the first output from the child process (which indicates it\n        is set up and ready to receive the signal) by sending the signal to\n        it.  Also log all output to help with debugging.\n        """'
newline|'\n'
name|'msg'
op|'('
string|'"Received %r from child stdout"'
op|'%'
op|'('
name|'data'
op|','
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'signaled'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'signaled'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'signalProcess'
op|'('
name|'self'
op|'.'
name|'signal'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|errReceived
dedent|''
dedent|''
name|'def'
name|'errReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Log all data received from the child\'s stderr to help with\n        debugging.\n        """'
newline|'\n'
name|'msg'
op|'('
string|'"Received %r from child stderr"'
op|'%'
op|'('
name|'data'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Callback C{self.deferred} with C{None} if C{reason} is a\n        L{error.ProcessTerminated} failure with C{exitCode} set to C{None},\n        C{signal} set to C{self.signal}, and C{status} holding the status code\n        of the exited process. Otherwise, errback with a C{ValueError}\n        describing the problem.\n        """'
newline|'\n'
name|'msg'
op|'('
string|'"Child exited: %r"'
op|'%'
op|'('
name|'reason'
op|'.'
name|'getTraceback'
op|'('
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'reason'
op|'.'
name|'check'
op|'('
name|'error'
op|'.'
name|'ProcessTerminated'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
nl|'\n'
name|'ValueError'
op|'('
string|'"wrong termination: %s"'
op|'%'
op|'('
name|'reason'
op|','
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'v'
op|'='
name|'reason'
op|'.'
name|'value'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'signal'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'signalValue'
op|'='
name|'getattr'
op|'('
name|'signal'
op|','
string|"'SIG'"
op|'+'
name|'self'
op|'.'
name|'signal'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'signalValue'
op|'='
name|'self'
op|'.'
name|'signal'
newline|'\n'
dedent|''
name|'if'
name|'v'
op|'.'
name|'exitCode'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
nl|'\n'
name|'ValueError'
op|'('
string|'"SIG%s: exitCode is %s, not None"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'signal'
op|','
name|'v'
op|'.'
name|'exitCode'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'v'
op|'.'
name|'signal'
op|'!='
name|'signalValue'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
nl|'\n'
name|'ValueError'
op|'('
string|'"SIG%s: .signal was %s, wanted %s"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'signal'
op|','
name|'v'
op|'.'
name|'signal'
op|','
name|'signalValue'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'os'
op|'.'
name|'WTERMSIG'
op|'('
name|'v'
op|'.'
name|'status'
op|')'
op|'!='
name|'signalValue'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
nl|'\n'
name|'ValueError'
op|'('
string|"'SIG%s: %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'signal'
op|','
name|'os'
op|'.'
name|'WTERMSIG'
op|'('
name|'v'
op|'.'
name|'status'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestManyProcessProtocol
dedent|''
dedent|''
name|'class'
name|'TestManyProcessProtocol'
op|'('
name|'TestProcessProtocol'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reason'
op|'='
name|'reason'
newline|'\n'
name|'if'
name|'reason'
op|'.'
name|'check'
op|'('
name|'error'
op|'.'
name|'ProcessDone'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UtilityProcessProtocol
dedent|''
dedent|''
dedent|''
name|'class'
name|'UtilityProcessProtocol'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper class for launching a Python process and getting a result from it.\n\n    @ivar program: A string giving a Python program for the child process to\n    run.\n    """'
newline|'\n'
DECL|variable|program
name|'program'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'cls'
op|','
name|'reactor'
op|','
name|'argv'
op|','
name|'env'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Run a Python process connected to a new instance of this protocol\n        class.  Return the protocol instance.\n\n        The Python process is given C{self.program} on the command line to\n        execute, in addition to anything specified by C{argv}.  C{env} is\n        the complete environment.\n        """'
newline|'\n'
name|'exe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'self'
op|'='
name|'cls'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
nl|'\n'
name|'self'
op|','
name|'exe'
op|','
op|'['
name|'exe'
op|','
string|'"-c"'
op|','
name|'self'
op|'.'
name|'program'
op|']'
op|'+'
name|'argv'
op|','
name|'env'
op|'='
name|'env'
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
DECL|variable|run
dedent|''
name|'run'
op|'='
name|'classmethod'
op|'('
name|'run'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'bytes'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'requests'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|parseChunks
dedent|''
name|'def'
name|'parseChunks'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called with all bytes received on stdout when the process exits.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getResult
dedent|''
name|'def'
name|'getResult'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a Deferred which will fire with the result of L{parseChunks}\n        when the child process exits.\n        """'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'requests'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_fireResultDeferreds
dedent|''
name|'def'
name|'_fireResultDeferreds'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Callback all Deferreds returned up until now by L{getResult}\n        with the given result object.\n        """'
newline|'\n'
name|'requests'
op|'='
name|'self'
op|'.'
name|'requests'
newline|'\n'
name|'self'
op|'.'
name|'requests'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'d'
name|'in'
name|'requests'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'callback'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|outReceived
dedent|''
dedent|''
name|'def'
name|'outReceived'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Accumulate output from the child process in a list.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'bytes'
op|'.'
name|'append'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle process termination by parsing all received output and firing\n        any waiting Deferreds.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_fireResultDeferreds'
op|'('
name|'self'
op|'.'
name|'parseChunks'
op|'('
name|'self'
op|'.'
name|'bytes'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|GetArgumentVector
dedent|''
dedent|''
name|'class'
name|'GetArgumentVector'
op|'('
name|'UtilityProcessProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Protocol which will read a serialized argv from a process and\n    expose it to interested parties.\n    """'
newline|'\n'
DECL|variable|program
name|'program'
op|'='
op|'('
nl|'\n'
string|'"from sys import stdout, argv\\n"'
nl|'\n'
string|'"stdout.write(chr(0).join(argv))\\n"'
nl|'\n'
string|'"stdout.flush()\\n"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|parseChunks
name|'def'
name|'parseChunks'
op|'('
name|'self'
op|','
name|'chunks'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse the output from the process to which this protocol was\n        connected, which is a single unterminated line of \\\\0-separated\n        strings giving the argv of that process.  Return this as a list of\n        str objects.\n        """'
newline|'\n'
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'chunks'
op|')'
op|'.'
name|'split'
op|'('
string|"'\\0'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|GetEnvironmentDictionary
dedent|''
dedent|''
name|'class'
name|'GetEnvironmentDictionary'
op|'('
name|'UtilityProcessProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Protocol which will read a serialized environment dict from a process\n    and expose it to interested parties.\n    """'
newline|'\n'
DECL|variable|program
name|'program'
op|'='
op|'('
nl|'\n'
string|'"from sys import stdout\\n"'
nl|'\n'
string|'"from os import environ\\n"'
nl|'\n'
string|'"items = environ.iteritems()\\n"'
nl|'\n'
string|'"stdout.write(chr(0).join([k + chr(0) + v for k, v in items]))\\n"'
nl|'\n'
string|'"stdout.flush()\\n"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|parseChunks
name|'def'
name|'parseChunks'
op|'('
name|'self'
op|','
name|'chunks'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse the output from the process to which this protocol was\n        connected, which is a single unterminated line of \\\\0-separated\n        strings giving key value pairs of the environment from that process.\n        Return this as a dictionary.\n        """'
newline|'\n'
name|'environString'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'chunks'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'environString'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'environ'
op|'='
name|'iter'
op|'('
name|'environString'
op|'.'
name|'split'
op|'('
string|"'\\0'"
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'k'
op|'='
name|'environ'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'v'
op|'='
name|'environ'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'d'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProcessTestCase
dedent|''
dedent|''
name|'class'
name|'ProcessTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test running a process."""'
newline|'\n'
nl|'\n'
DECL|variable|usePTY
name|'usePTY'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|testStdio
name|'def'
name|'testStdio'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""twisted.internet.stdio test."""'
newline|'\n'
name|'exe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'scriptPath'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"process_twisted.py"'
op|')'
newline|'\n'
name|'p'
op|'='
name|'Accumulator'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'endedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'env'
op|'='
op|'{'
string|'"PYTHONPATH"'
op|':'
name|'os'
op|'.'
name|'pathsep'
op|'.'
name|'join'
op|'('
name|'sys'
op|'.'
name|'path'
op|')'
op|'}'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'exe'
op|','
op|'['
name|'exe'
op|','
string|'"-u"'
op|','
name|'scriptPath'
op|']'
op|','
name|'env'
op|'='
name|'env'
op|','
nl|'\n'
name|'path'
op|'='
name|'None'
op|','
name|'usePTY'
op|'='
name|'self'
op|'.'
name|'usePTY'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"hello, world"'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"abc"'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"123"'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'transport'
op|'.'
name|'closeStdin'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|processEnded
name|'def'
name|'processEnded'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'outF'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"hello, worldabc123"'
op|','
nl|'\n'
string|'"Output follows:\\n"'
nl|'\n'
string|'"%s\\n"'
nl|'\n'
string|'"Error message from process_twisted follows:\\n"'
nl|'\n'
string|'"%s\\n"'
op|'%'
op|'('
name|'p'
op|'.'
name|'outF'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
name|'p'
op|'.'
name|'errF'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'processEnded'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unsetPid
dedent|''
name|'def'
name|'test_unsetPid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test if pid is None/non-None before/after process termination.  This\n        reuses process_echoer.py to get a process that blocks on stdin.\n        """'
newline|'\n'
name|'finished'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'finished'
op|')'
newline|'\n'
name|'exe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'scriptPath'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"process_echoer.py"'
op|')'
newline|'\n'
name|'procTrans'
op|'='
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'exe'
op|','
nl|'\n'
op|'['
name|'exe'
op|','
name|'scriptPath'
op|']'
op|','
name|'env'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'procTrans'
op|'.'
name|'pid'
op|')'
newline|'\n'
nl|'\n'
DECL|function|afterProcessEnd
name|'def'
name|'afterProcessEnd'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'procTrans'
op|'.'
name|'pid'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'p'
op|'.'
name|'transport'
op|'.'
name|'closeStdin'
op|'('
op|')'
newline|'\n'
name|'return'
name|'finished'
op|'.'
name|'addCallback'
op|'('
name|'afterProcessEnd'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_process
dedent|''
name|'def'
name|'test_process'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test running a process: check its output, it exitCode, some property of\n        signalProcess.\n        """'
newline|'\n'
name|'exe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'scriptPath'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"process_tester.py"'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'TestProcessProtocol'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'deferred'
op|'='
name|'d'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'exe'
op|','
op|'['
name|'exe'
op|','
string|'"-u"'
op|','
name|'scriptPath'
op|']'
op|','
name|'env'
op|'='
name|'None'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'stages'
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|']'
op|')'
newline|'\n'
name|'f'
op|'='
name|'p'
op|'.'
name|'reason'
newline|'\n'
name|'f'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ProcessTerminated'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'f'
op|'.'
name|'value'
op|'.'
name|'exitCode'
op|','
number|'23'
op|')'
newline|'\n'
comment|'# would .signal be available on non-posix?'
nl|'\n'
comment|'# self.assertEquals(f.value.signal, None)'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'ProcessExitedAlready'
op|','
name|'p'
op|'.'
name|'transport'
op|'.'
name|'signalProcess'
op|','
string|"'INT'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'import'
name|'process_tester'
op|','
name|'glob'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'glob'
op|'.'
name|'glob'
op|'('
name|'process_tester'
op|'.'
name|'test_file_match'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'os'
op|'.'
name|'remove'
op|'('
name|'f'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testManyProcesses
dedent|''
name|'def'
name|'testManyProcesses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|_check
indent|'        '
name|'def'
name|'_check'
op|'('
name|'results'
op|','
name|'protocols'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'p'
name|'in'
name|'protocols'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'stages'
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|']'
op|','
string|'"[%d] stages = %s"'
op|'%'
op|'('
name|'id'
op|'('
name|'p'
op|'.'
name|'transport'
op|')'
op|','
name|'str'
op|'('
name|'p'
op|'.'
name|'stages'
op|')'
op|')'
op|')'
newline|'\n'
comment|'# test status code'
nl|'\n'
name|'f'
op|'='
name|'p'
op|'.'
name|'reason'
newline|'\n'
name|'f'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ProcessTerminated'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'f'
op|'.'
name|'value'
op|'.'
name|'exitCode'
op|','
number|'23'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'exe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'scriptPath'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"process_tester.py"'
op|')'
newline|'\n'
name|'args'
op|'='
op|'['
name|'exe'
op|','
string|'"-u"'
op|','
name|'scriptPath'
op|']'
newline|'\n'
name|'protocols'
op|'='
op|'['
op|']'
newline|'\n'
name|'deferreds'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'50'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'='
name|'TestManyProcessProtocol'
op|'('
op|')'
newline|'\n'
name|'protocols'
op|'.'
name|'append'
op|'('
name|'p'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'exe'
op|','
name|'args'
op|','
name|'env'
op|'='
name|'None'
op|')'
newline|'\n'
name|'deferreds'
op|'.'
name|'append'
op|'('
name|'p'
op|'.'
name|'deferred'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'deferredList'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'deferreds'
op|','
name|'consumeErrors'
op|'='
name|'True'
op|')'
newline|'\n'
name|'deferredList'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|','
name|'protocols'
op|')'
newline|'\n'
name|'return'
name|'deferredList'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_echo
dedent|''
name|'def'
name|'test_echo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A spawning a subprocess which echoes its stdin to its stdout via\n        C{reactor.spawnProcess} will result in that echoed output being\n        delivered to outReceived.\n        """'
newline|'\n'
name|'finished'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'EchoProtocol'
op|'('
name|'finished'
op|')'
newline|'\n'
nl|'\n'
name|'exe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'scriptPath'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"process_echoer.py"'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'exe'
op|','
op|'['
name|'exe'
op|','
name|'scriptPath'
op|']'
op|','
name|'env'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|asserts
name|'def'
name|'asserts'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'p'
op|'.'
name|'failure'
op|','
name|'p'
op|'.'
name|'failure'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'hasattr'
op|'('
name|'p'
op|','
string|"'buffer'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'p'
op|'.'
name|'buffer'
op|')'
op|')'
op|','
name|'len'
op|'('
name|'p'
op|'.'
name|'s'
op|'*'
name|'p'
op|'.'
name|'n'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|takedownProcess
dedent|''
name|'def'
name|'takedownProcess'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'transport'
op|'.'
name|'closeStdin'
op|'('
op|')'
newline|'\n'
name|'return'
name|'err'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'finished'
op|'.'
name|'addCallback'
op|'('
name|'asserts'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'takedownProcess'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testCommandLine
dedent|''
name|'def'
name|'testCommandLine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'['
string|'r\'a\\"b \''
op|','
string|"r'a\\b '"
op|','
string|'r\' a\\\\"b\''
op|','
string|"r' a\\\\b'"
op|','
string|'r\'"foo bar" "\''
op|','
string|"'\\tab'"
op|','
string|'\'"\\\\\''
op|','
string|'\'a"b\''
op|','
string|'"a\'b"'
op|']'
newline|'\n'
name|'pyExe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'scriptPath'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"process_cmdline.py"'
op|')'
newline|'\n'
name|'p'
op|'='
name|'Accumulator'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'endedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'pyExe'
op|','
op|'['
name|'pyExe'
op|','
string|'"-u"'
op|','
name|'scriptPath'
op|']'
op|'+'
name|'args'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'path'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|processEnded
name|'def'
name|'processEnded'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'errF'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'""'
op|')'
newline|'\n'
name|'recvdArgs'
op|'='
name|'p'
op|'.'
name|'outF'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'recvdArgs'
op|','
name|'args'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'processEnded'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_wrongArguments
dedent|''
name|'def'
name|'test_wrongArguments'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test invalid arguments to spawnProcess: arguments and environment\n        must only contains string or unicode, and not null bytes.\n        """'
newline|'\n'
name|'exe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'p'
op|'='
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'badEnvs'
op|'='
op|'['
nl|'\n'
op|'{'
string|'"foo"'
op|':'
number|'2'
op|'}'
op|','
nl|'\n'
op|'{'
string|'"foo"'
op|':'
string|'"egg\\0a"'
op|'}'
op|','
nl|'\n'
op|'{'
number|'3'
op|':'
string|'"bar"'
op|'}'
op|','
nl|'\n'
op|'{'
string|'"bar\\0foo"'
op|':'
string|'"bar"'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'badArgs'
op|'='
op|'['
nl|'\n'
op|'['
name|'exe'
op|','
number|'2'
op|']'
op|','
nl|'\n'
string|'"spam"'
op|','
nl|'\n'
op|'['
name|'exe'
op|','
string|'"foo\\0bar"'
op|']'
op|']'
newline|'\n'
nl|'\n'
comment|'# Sanity check - this will fail for people who have mucked with'
nl|'\n'
comment|"# their site configuration in a stupid way, but there's nothing we"
nl|'\n'
comment|'# can do about that.'
nl|'\n'
name|'badUnicode'
op|'='
string|"u'\\N{SNOWMAN}'"
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'badUnicode'
op|'.'
name|'encode'
op|'('
name|'sys'
op|'.'
name|'getdefaultencoding'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeEncodeError'
op|':'
newline|'\n'
comment|"# Okay, that unicode doesn't encode, put it in as a bad environment"
nl|'\n'
comment|'# key.'
nl|'\n'
indent|'            '
name|'badEnvs'
op|'.'
name|'append'
op|'('
op|'{'
name|'badUnicode'
op|':'
string|"'value for bad unicode key'"
op|'}'
op|')'
newline|'\n'
name|'badEnvs'
op|'.'
name|'append'
op|'('
op|'{'
string|"'key for bad unicode value'"
op|':'
name|'badUnicode'
op|'}'
op|')'
newline|'\n'
name|'badArgs'
op|'.'
name|'append'
op|'('
op|'['
name|'exe'
op|','
name|'badUnicode'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# It _did_ encode.  Most likely, Gtk2 is being used and the'
nl|'\n'
comment|'# default system encoding is UTF-8, which can encode anything.'
nl|'\n'
comment|'# In any case, if implicit unicode -> str conversion works for'
nl|'\n'
comment|"# that string, we can't test that TypeError gets raised instead,"
nl|'\n'
comment|'# so just leave it off.'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'env'
name|'in'
name|'badEnvs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'TypeError'
op|','
nl|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|','
name|'p'
op|','
name|'exe'
op|','
op|'['
name|'exe'
op|','
string|'"-c"'
op|','
string|'""'
op|']'
op|','
name|'env'
op|'='
name|'env'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'args'
name|'in'
name|'badArgs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'TypeError'
op|','
nl|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|','
name|'p'
op|','
name|'exe'
op|','
name|'args'
op|','
name|'env'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Use upper-case so that the environment key test uses an upper case'
nl|'\n'
comment|'# name: some versions of Windows only support upper case environment'
nl|'\n'
comment|"# variable names, and I think Python (as of 2.5) doesn't use the right"
nl|'\n'
comment|'# syscall for lowercase or mixed case names to work anyway.'
nl|'\n'
DECL|variable|okayUnicode
dedent|''
dedent|''
name|'okayUnicode'
op|'='
string|'u"UNICODE"'
newline|'\n'
DECL|variable|encodedValue
name|'encodedValue'
op|'='
string|'"UNICODE"'
newline|'\n'
nl|'\n'
DECL|member|_deprecatedUnicodeSupportTest
name|'def'
name|'_deprecatedUnicodeSupportTest'
op|'('
name|'self'
op|','
name|'processProtocolClass'
op|','
name|'argv'
op|'='
op|'['
op|']'
op|','
name|'env'
op|'='
op|'{'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that a deprecation warning is emitted when passing unicode to\n        spawnProcess for an argv value or an environment key or value.\n        Check that the warning is of the right type, has the right message,\n        and refers to the correct file.  Unfortunately, don\'t check that the\n        line number is correct, because that is too hard for me to figure\n        out.\n\n        @param processProtocolClass: A L{UtilityProcessProtocol} subclass\n        which will be instantiated to communicate with the child process.\n\n        @param argv: The argv argument to spawnProcess.\n\n        @param env: The env argument to spawnProcess.\n\n        @return: A Deferred which fires when the test is complete.\n        """'
newline|'\n'
comment|'# Sanity to check to make sure we can actually encode this unicode'
nl|'\n'
comment|'# with the default system encoding.  This may be excessively'
nl|'\n'
comment|'# paranoid. -exarkun'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'okayUnicode'
op|'.'
name|'encode'
op|'('
name|'sys'
op|'.'
name|'getdefaultencoding'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'encodedValue'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"Argument strings and environment keys/values passed to "'
nl|'\n'
string|'"reactor.spawnProcess should be str, not unicode."'
op|','
name|'__file__'
op|','
nl|'\n'
name|'processProtocolClass'
op|'.'
name|'run'
op|','
name|'reactor'
op|','
name|'argv'
op|','
name|'env'
op|')'
newline|'\n'
name|'return'
name|'p'
op|'.'
name|'getResult'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_deprecatedUnicodeArgvSupport
dedent|''
name|'def'
name|'test_deprecatedUnicodeArgvSupport'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a unicode string passed for an argument value is allowed\n        if it can be encoded with the default system encoding, but that a\n        deprecation warning is emitted.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_deprecatedUnicodeSupportTest'
op|'('
name|'GetArgumentVector'
op|','
name|'argv'
op|'='
op|'['
name|'self'
op|'.'
name|'okayUnicode'
op|']'
op|')'
newline|'\n'
DECL|function|gotArgVector
name|'def'
name|'gotArgVector'
op|'('
name|'argv'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'argv'
op|','
op|'['
string|"'-c'"
op|','
name|'self'
op|'.'
name|'encodedValue'
op|']'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'gotArgVector'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_deprecatedUnicodeEnvKeySupport
dedent|''
name|'def'
name|'test_deprecatedUnicodeEnvKeySupport'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a unicode string passed for the key of the environment\n        dictionary is allowed if it can be encoded with the default system\n        encoding, but that a deprecation warning is emitted.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_deprecatedUnicodeSupportTest'
op|'('
nl|'\n'
name|'GetEnvironmentDictionary'
op|','
name|'env'
op|'='
op|'{'
name|'self'
op|'.'
name|'okayUnicode'
op|':'
name|'self'
op|'.'
name|'encodedValue'
op|'}'
op|')'
newline|'\n'
DECL|function|gotEnvironment
name|'def'
name|'gotEnvironment'
op|'('
name|'environ'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'environ'
op|'['
name|'self'
op|'.'
name|'encodedValue'
op|']'
op|','
name|'self'
op|'.'
name|'encodedValue'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'gotEnvironment'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_deprecatedUnicodeEnvValueSupport
dedent|''
name|'def'
name|'test_deprecatedUnicodeEnvValueSupport'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a unicode string passed for the value of the environment\n        dictionary is allowed if it can be encoded with the default system\n        encoding, but that a deprecation warning is emitted.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'_deprecatedUnicodeSupportTest'
op|'('
nl|'\n'
name|'GetEnvironmentDictionary'
op|','
name|'env'
op|'='
op|'{'
name|'self'
op|'.'
name|'encodedValue'
op|':'
name|'self'
op|'.'
name|'okayUnicode'
op|'}'
op|')'
newline|'\n'
DECL|function|gotEnvironment
name|'def'
name|'gotEnvironment'
op|'('
name|'environ'
op|')'
op|':'
newline|'\n'
comment|'# On Windows, the environment contains more things than we'
nl|'\n'
comment|'# specified, so only make sure that at least the key we wanted'
nl|'\n'
comment|'# is there, rather than testing the dictionary for exact'
nl|'\n'
comment|'# equality.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'environ'
op|'['
name|'self'
op|'.'
name|'encodedValue'
op|']'
op|','
name|'self'
op|'.'
name|'encodedValue'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'gotEnvironment'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TwoProcessProtocol
dedent|''
dedent|''
name|'class'
name|'TwoProcessProtocol'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
DECL|variable|num
indent|'    '
name|'num'
op|'='
op|'-'
number|'1'
newline|'\n'
DECL|variable|finished
name|'finished'
op|'='
number|'0'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|member|outReceived
dedent|''
name|'def'
name|'outReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'finished'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestTwoProcessesBase
dedent|''
dedent|''
name|'class'
name|'TestTwoProcessesBase'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'processes'
op|'='
op|'['
name|'None'
op|','
name|'None'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'pp'
op|'='
op|'['
name|'None'
op|','
name|'None'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'done'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'verbose'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|createProcesses
dedent|''
name|'def'
name|'createProcesses'
op|'('
name|'self'
op|','
name|'usePTY'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'exe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'scriptPath'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"process_reader.py"'
op|')'
newline|'\n'
name|'for'
name|'num'
name|'in'
op|'('
number|'0'
op|','
number|'1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'pp'
op|'['
name|'num'
op|']'
op|'='
name|'TwoProcessProtocol'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pp'
op|'['
name|'num'
op|']'
op|'.'
name|'num'
op|'='
name|'num'
newline|'\n'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'self'
op|'.'
name|'pp'
op|'['
name|'num'
op|']'
op|','
nl|'\n'
name|'exe'
op|','
op|'['
name|'exe'
op|','
string|'"-u"'
op|','
name|'scriptPath'
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'usePTY'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'processes'
op|'['
name|'num'
op|']'
op|'='
name|'p'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|','
name|'num'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'verbose'
op|':'
name|'print'
string|'"closing stdin [%d]"'
op|'%'
name|'num'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'processes'
op|'['
name|'num'
op|']'
newline|'\n'
name|'pp'
op|'='
name|'self'
op|'.'
name|'pp'
op|'['
name|'num'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'pp'
op|'.'
name|'finished'
op|','
string|'"Process finished too early"'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'verbose'
op|':'
name|'print'
name|'self'
op|'.'
name|'pp'
op|'['
number|'0'
op|']'
op|'.'
name|'finished'
op|','
name|'self'
op|'.'
name|'pp'
op|'['
number|'1'
op|']'
op|'.'
name|'finished'
newline|'\n'
nl|'\n'
DECL|member|_onClose
dedent|''
name|'def'
name|'_onClose'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'p'
op|'.'
name|'deferred'
name|'for'
name|'p'
name|'in'
name|'self'
op|'.'
name|'pp'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testClose
dedent|''
name|'def'
name|'testClose'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'verbose'
op|':'
name|'print'
string|'"starting processes"'
newline|'\n'
name|'self'
op|'.'
name|'createProcesses'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'close'
op|','
number|'0'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'2'
op|','
name|'self'
op|'.'
name|'close'
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_onClose'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestTwoProcessesNonPosix
dedent|''
dedent|''
name|'class'
name|'TestTwoProcessesNonPosix'
op|'('
name|'TestTwoProcessesBase'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|TestTwoProcessesPosix
dedent|''
name|'class'
name|'TestTwoProcessesPosix'
op|'('
name|'TestTwoProcessesBase'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|tearDown
indent|'    '
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'pp'
op|','
name|'pr'
name|'in'
name|'zip'
op|'('
name|'self'
op|'.'
name|'pp'
op|','
name|'self'
op|'.'
name|'processes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'pp'
op|'.'
name|'finished'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'os'
op|'.'
name|'kill'
op|'('
name|'pr'
op|'.'
name|'pid'
op|','
name|'signal'
op|'.'
name|'SIGTERM'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
comment|'# If the test failed the process may already be dead'
nl|'\n'
comment|'# The error here is only noise'
nl|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_onClose'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|kill
dedent|''
name|'def'
name|'kill'
op|'('
name|'self'
op|','
name|'num'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'verbose'
op|':'
name|'print'
string|'"kill [%d] with SIGTERM"'
op|'%'
name|'num'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'processes'
op|'['
name|'num'
op|']'
newline|'\n'
name|'pp'
op|'='
name|'self'
op|'.'
name|'pp'
op|'['
name|'num'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'pp'
op|'.'
name|'finished'
op|','
string|'"Process finished too early"'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'kill'
op|'('
name|'p'
op|'.'
name|'pid'
op|','
name|'signal'
op|'.'
name|'SIGTERM'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'verbose'
op|':'
name|'print'
name|'self'
op|'.'
name|'pp'
op|'['
number|'0'
op|']'
op|'.'
name|'finished'
op|','
name|'self'
op|'.'
name|'pp'
op|'['
number|'1'
op|']'
op|'.'
name|'finished'
newline|'\n'
nl|'\n'
DECL|member|testKill
dedent|''
name|'def'
name|'testKill'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'verbose'
op|':'
name|'print'
string|'"starting processes"'
newline|'\n'
name|'self'
op|'.'
name|'createProcesses'
op|'('
name|'usePTY'
op|'='
number|'0'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'kill'
op|','
number|'0'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'2'
op|','
name|'self'
op|'.'
name|'kill'
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_onClose'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testClosePty
dedent|''
name|'def'
name|'testClosePty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'verbose'
op|':'
name|'print'
string|'"starting processes"'
newline|'\n'
name|'self'
op|'.'
name|'createProcesses'
op|'('
name|'usePTY'
op|'='
number|'1'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'close'
op|','
number|'0'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'2'
op|','
name|'self'
op|'.'
name|'close'
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_onClose'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testKillPty
dedent|''
name|'def'
name|'testKillPty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'verbose'
op|':'
name|'print'
string|'"starting processes"'
newline|'\n'
name|'self'
op|'.'
name|'createProcesses'
op|'('
name|'usePTY'
op|'='
number|'1'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'kill'
op|','
number|'0'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'2'
op|','
name|'self'
op|'.'
name|'kill'
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_onClose'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|FDChecker
dedent|''
dedent|''
name|'class'
name|'FDChecker'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
DECL|variable|state
indent|'    '
name|'state'
op|'='
number|'0'
newline|'\n'
DECL|variable|data
name|'data'
op|'='
string|'""'
newline|'\n'
DECL|variable|failed
name|'failed'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'='
name|'d'
newline|'\n'
nl|'\n'
DECL|member|fail
dedent|''
name|'def'
name|'fail'
op|'('
name|'self'
op|','
name|'why'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failed'
op|'='
name|'why'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'writeToChild'
op|'('
number|'0'
op|','
string|'"abcd"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|childDataReceived
dedent|''
name|'def'
name|'childDataReceived'
op|'('
name|'self'
op|','
name|'childFD'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'childFD'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"read \'%s\' on fd %d (not 1) during state 1"'
op|'%'
op|'('
name|'childFD'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'data'
op|'+='
name|'data'
newline|'\n'
comment|'#print "len", len(self.data)'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'data'
op|')'
op|'=='
number|'6'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'data'
op|'!='
string|'"righto"'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"got \'%s\' on fd1, expected \'righto\'"'
op|'%'
name|'self'
op|'.'
name|'data'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'data'
op|'='
string|'""'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
number|'2'
newline|'\n'
comment|'#print "state2", self.state'
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'writeToChild'
op|'('
number|'3'
op|','
string|'"efgh"'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"read \'%s\' on fd %s during state 2"'
op|'%'
op|'('
name|'childFD'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'childFD'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"read \'%s\' on fd %s (not 1) during state 3"'
op|'%'
op|'('
name|'childFD'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'data'
op|'+='
name|'data'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'data'
op|')'
op|'=='
number|'6'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'data'
op|'!='
string|'"closed"'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"got \'%s\' on fd1, expected \'closed\'"'
op|'%'
name|'self'
op|'.'
name|'data'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'state'
op|'='
number|'4'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"read \'%s\' on fd %s during state 4"'
op|'%'
op|'('
name|'childFD'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
DECL|member|childConnectionLost
dedent|''
dedent|''
name|'def'
name|'childConnectionLost'
op|'('
name|'self'
op|','
name|'childFD'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"got connectionLost(%d) during state 1"'
op|'%'
name|'childFD'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'state'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'childFD'
op|'!='
number|'4'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"got connectionLost(%d) (not 4) during state 2"'
op|'%'
name|'childFD'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'state'
op|'='
number|'3'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'closeChildFD'
op|'('
number|'5'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'status'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rc'
op|'='
name|'status'
op|'.'
name|'value'
op|'.'
name|'exitCode'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'state'
op|'!='
number|'4'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"processEnded early, rc %d"'
op|'%'
name|'rc'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'status'
op|'.'
name|'value'
op|'.'
name|'signal'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"processEnded with signal %s"'
op|'%'
name|'status'
op|'.'
name|'value'
op|'.'
name|'signal'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'rc'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"processEnded with rc %d"'
op|'%'
name|'rc'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FDTest
dedent|''
dedent|''
name|'class'
name|'FDTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|testFD
indent|'    '
name|'def'
name|'testFD'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'exe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'scriptPath'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"process_fds.py"'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'FDChecker'
op|'('
name|'d'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'exe'
op|','
op|'['
name|'exe'
op|','
string|'"-u"'
op|','
name|'scriptPath'
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'path'
op|'='
name|'None'
op|','
nl|'\n'
name|'childFDs'
op|'='
op|'{'
number|'0'
op|':'
string|'"w"'
op|','
number|'1'
op|':'
string|'"r"'
op|','
number|'2'
op|':'
number|'2'
op|','
nl|'\n'
number|'3'
op|':'
string|'"w"'
op|','
number|'4'
op|':'
string|'"r"'
op|','
number|'5'
op|':'
string|'"w"'
op|'}'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'p'
op|'.'
name|'failed'
op|','
name|'p'
op|'.'
name|'failed'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testLinger
dedent|''
name|'def'
name|'testLinger'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# See what happens when all the pipes close before the process'
nl|'\n'
comment|'# actually stops. This test *requires* SIGCHLD catching to work,'
nl|'\n'
comment|'# as there is no other way to find out the process is done.'
nl|'\n'
indent|'        '
name|'exe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'scriptPath'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"process_linger.py"'
op|')'
newline|'\n'
name|'p'
op|'='
name|'Accumulator'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'endedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'exe'
op|','
op|'['
name|'exe'
op|','
string|'"-u"'
op|','
name|'scriptPath'
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'path'
op|'='
name|'None'
op|','
nl|'\n'
name|'childFDs'
op|'='
op|'{'
number|'1'
op|':'
string|'"r"'
op|','
number|'2'
op|':'
number|'2'
op|'}'
op|','
nl|'\n'
op|')'
newline|'\n'
DECL|function|processEnded
name|'def'
name|'processEnded'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'p'
op|'.'
name|'outF'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"here is some text\\ngoodbye\\n"'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'processEnded'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Accumulator
dedent|''
dedent|''
name|'class'
name|'Accumulator'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Accumulate data from a process."""'
newline|'\n'
nl|'\n'
DECL|variable|closed
name|'closed'
op|'='
number|'0'
newline|'\n'
DECL|variable|endedDeferred
name|'endedDeferred'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'outF'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'errF'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|outReceived
dedent|''
name|'def'
name|'outReceived'
op|'('
name|'self'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'outF'
op|'.'
name|'write'
op|'('
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|errReceived
dedent|''
name|'def'
name|'errReceived'
op|'('
name|'self'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'errF'
op|'.'
name|'write'
op|'('
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|outConnectionLost
dedent|''
name|'def'
name|'outConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|errConnectionLost
dedent|''
name|'def'
name|'errConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'closed'
op|'='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'endedDeferred'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'self'
op|'.'
name|'endedDeferred'
op|'='
name|'self'
op|'.'
name|'endedDeferred'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PosixProcessBase
dedent|''
dedent|''
dedent|''
name|'class'
name|'PosixProcessBase'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test running processes.\n    """'
newline|'\n'
DECL|variable|usePTY
name|'usePTY'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|getCommand
name|'def'
name|'getCommand'
op|'('
name|'self'
op|','
name|'commandName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the path of the shell command named C{commandName}, looking at\n        common locations.\n        """'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|"'/bin/%s'"
op|'%'
op|'('
name|'commandName'
op|','
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
string|"'/bin/%s'"
op|'%'
op|'('
name|'commandName'
op|','
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|"'/usr/bin/%s'"
op|'%'
op|'('
name|'commandName'
op|','
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
string|"'/usr/bin/%s'"
op|'%'
op|'('
name|'commandName'
op|','
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
nl|'\n'
string|'"%s not found in /bin or /usr/bin"'
op|'%'
op|'('
name|'commandName'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'cmd'
newline|'\n'
nl|'\n'
DECL|member|testNormalTermination
dedent|''
name|'def'
name|'testNormalTermination'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'='
name|'self'
op|'.'
name|'getCommand'
op|'('
string|"'true'"
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'d'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'cmd'
op|','
op|'['
string|"'true'"
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'self'
op|'.'
name|'usePTY'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ProcessDone'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'reason'
op|'.'
name|'value'
op|'.'
name|'exitCode'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'reason'
op|'.'
name|'value'
op|'.'
name|'signal'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_abnormalTermination
dedent|''
name|'def'
name|'test_abnormalTermination'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When a process terminates with a system exit code set to 1,\n        C{processEnded} is called with a L{error.ProcessTerminated} error,\n        the C{exitCode} attribute reflecting the system exit code.\n        """'
newline|'\n'
name|'exe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'d'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'exe'
op|','
op|'['
name|'exe'
op|','
string|"'-c'"
op|','
string|"'import sys; sys.exit(1)'"
op|']'
op|','
nl|'\n'
name|'env'
op|'='
name|'None'
op|','
name|'usePTY'
op|'='
name|'self'
op|'.'
name|'usePTY'
op|')'
newline|'\n'
nl|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ProcessTerminated'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'reason'
op|'.'
name|'value'
op|'.'
name|'exitCode'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'reason'
op|'.'
name|'value'
op|'.'
name|'signal'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_testSignal
dedent|''
name|'def'
name|'_testSignal'
op|'('
name|'self'
op|','
name|'sig'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'exe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'scriptPath'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"process_signal.py"'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'SignalProtocol'
op|'('
name|'d'
op|','
name|'sig'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'exe'
op|','
op|'['
name|'exe'
op|','
string|'"-u"'
op|','
name|'scriptPath'
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'self'
op|'.'
name|'usePTY'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_signalHUP
dedent|''
name|'def'
name|'test_signalHUP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sending the SIGHUP signal to a running process interrupts it, and\n        C{processEnded} is called with a L{error.ProcessTerminated} instance\n        with the C{exitCode} set to C{None} and the C{signal} attribute set to\n        C{signal.SIGHUP}. C{os.WTERMSIG} can also be used on the C{status}\n        attribute to extract the signal value.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testSignal'
op|'('
string|"'HUP'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_signalINT
dedent|''
name|'def'
name|'test_signalINT'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sending the SIGINT signal to a running process interrupts it, and\n        C{processEnded} is called with a L{error.ProcessTerminated} instance\n        with the C{exitCode} set to C{None} and the C{signal} attribute set to\n        C{signal.SIGINT}. C{os.WTERMSIG} can also be used on the C{status}\n        attribute to extract the signal value.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testSignal'
op|'('
string|"'INT'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_signalKILL
dedent|''
name|'def'
name|'test_signalKILL'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sending the SIGKILL signal to a running process interrupts it, and\n        C{processEnded} is called with a L{error.ProcessTerminated} instance\n        with the C{exitCode} set to C{None} and the C{signal} attribute set to\n        C{signal.SIGKILL}. C{os.WTERMSIG} can also be used on the C{status}\n        attribute to extract the signal value.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testSignal'
op|'('
string|"'KILL'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_signalTERM
dedent|''
name|'def'
name|'test_signalTERM'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sending the SIGTERM signal to a running process interrupts it, and\n        C{processEnded} is called with a L{error.ProcessTerminated} instance\n        with the C{exitCode} set to C{None} and the C{signal} attribute set to\n        C{signal.SIGTERM}. C{os.WTERMSIG} can also be used on the C{status}\n        attribute to extract the signal value.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testSignal'
op|'('
string|"'TERM'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_childSignalHandling
dedent|''
name|'def'
name|'test_childSignalHandling'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The disposition of signals which are ignored in the parent\n        process is reset to the default behavior for the child\n        process.\n        """'
newline|'\n'
comment|'# Somewhat arbitrarily select SIGUSR1 here.  It satisfies our'
nl|'\n'
comment|'# requirements that:'
nl|'\n'
comment|'#    - The interpreter not fiddle around with the handler'
nl|'\n'
comment|'#      behind our backs at startup time (this disqualifies'
nl|'\n'
comment|'#      signals like SIGINT and SIGPIPE).'
nl|'\n'
comment|'#    - The default behavior is to exit.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This lets us send the signal to the child and then verify'
nl|'\n'
comment|'# that it exits with a status code indicating that it was'
nl|'\n'
comment|'# indeed the signal which caused it to exit.'
nl|'\n'
name|'which'
op|'='
name|'signal'
op|'.'
name|'SIGUSR1'
newline|'\n'
nl|'\n'
comment|'# Ignore the signal in the parent (and make sure we clean it'
nl|'\n'
comment|'# up).'
nl|'\n'
name|'handler'
op|'='
name|'signal'
op|'.'
name|'signal'
op|'('
name|'which'
op|','
name|'signal'
op|'.'
name|'SIG_IGN'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'signal'
op|'.'
name|'signal'
op|','
name|'signal'
op|'.'
name|'SIGUSR1'
op|','
name|'handler'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now do the test.'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_testSignal'
op|'('
name|'signal'
op|'.'
name|'SIGUSR1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_executionError
dedent|''
name|'def'
name|'test_executionError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Raise an error during execvpe to check error management.\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'getCommand'
op|'('
string|"'false'"
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'d'
op|')'
newline|'\n'
DECL|function|buggyexecvpe
name|'def'
name|'buggyexecvpe'
op|'('
name|'command'
op|','
name|'args'
op|','
name|'environment'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Ouch"'
op|')'
newline|'\n'
dedent|''
name|'oldexecvpe'
op|'='
name|'os'
op|'.'
name|'execvpe'
newline|'\n'
name|'os'
op|'.'
name|'execvpe'
op|'='
name|'buggyexecvpe'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'cmd'
op|','
op|'['
string|"'false'"
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'self'
op|'.'
name|'usePTY'
op|')'
newline|'\n'
nl|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'errData'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
name|'p'
op|'.'
name|'errData'
op|'+'
name|'p'
op|'.'
name|'outData'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"Upon execvpe"'
op|','
name|'errData'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"Ouch"'
op|','
name|'errData'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'execvpe'
op|'='
name|'oldexecvpe'
newline|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_errorInProcessEnded
dedent|''
name|'def'
name|'test_errorInProcessEnded'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The handler which reaps a process is removed when the process is\n        reaped, even if the protocol\'s C{processEnded} method raises an\n        exception.\n        """'
newline|'\n'
name|'connected'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'ended'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# This script runs until we disconnect its transport.'
nl|'\n'
name|'pythonExecutable'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'scriptPath'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"process_twisted.py"'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ErrorInProcessEnded
name|'class'
name|'ErrorInProcessEnded'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            A protocol that raises an error in C{processEnded}.\n            """'
newline|'\n'
DECL|member|makeConnection
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'connected'
op|'.'
name|'callback'
op|'('
name|'transport'
op|')'
newline|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'ended'
op|'.'
name|'callback'
op|','
name|'None'
op|')'
newline|'\n'
name|'raise'
name|'RuntimeError'
op|'('
string|'"Deliberate error"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Launch the process.'
nl|'\n'
dedent|''
dedent|''
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
nl|'\n'
name|'ErrorInProcessEnded'
op|'('
op|')'
op|','
name|'pythonExecutable'
op|','
nl|'\n'
op|'['
name|'pythonExecutable'
op|','
name|'scriptPath'
op|']'
op|','
nl|'\n'
name|'env'
op|'='
name|'None'
op|','
name|'path'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'pid'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|cbConnected
name|'def'
name|'cbConnected'
op|'('
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pid'
op|'.'
name|'append'
op|'('
name|'transport'
op|'.'
name|'pid'
op|')'
newline|'\n'
comment|"# There's now a reap process handler registered."
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'transport'
op|'.'
name|'pid'
op|','
name|'process'
op|'.'
name|'reapProcessHandlers'
op|')'
newline|'\n'
nl|'\n'
comment|'# Kill the process cleanly, triggering an error in the protocol.'
nl|'\n'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'cbConnected'
op|')'
newline|'\n'
nl|'\n'
DECL|function|checkTerminated
name|'def'
name|'checkTerminated'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
comment|'# The exception was logged.'
nl|'\n'
indent|'            '
name|'excs'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'RuntimeError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'excs'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# The process is no longer scheduled for reaping.'
nl|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'pid'
op|'['
number|'0'
op|']'
op|','
name|'process'
op|'.'
name|'reapProcessHandlers'
op|')'
newline|'\n'
dedent|''
name|'ended'
op|'.'
name|'addCallback'
op|'('
name|'checkTerminated'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'ended'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockSignal
dedent|''
dedent|''
name|'class'
name|'MockSignal'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Neuter L{signal.signal}, but pass other attributes unscathed\n    """'
newline|'\n'
DECL|member|signal
name|'def'
name|'signal'
op|'('
name|'self'
op|','
name|'sig'
op|','
name|'action'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'signal'
op|'.'
name|'getsignal'
op|'('
name|'sig'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'attr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'signal'
op|','
name|'attr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockOS
dedent|''
dedent|''
name|'class'
name|'MockOS'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The mock OS: overwrite L{os}, L{fcntl} and {sys} functions with fake ones.\n\n    @ivar exited: set to True when C{_exit} is called.\n    @type exited: C{bool}\n\n    @ivar O_RDWR: dumb value faking C{os.O_RDWR}.\n    @type O_RDWR: C{int}\n\n    @ivar O_NOCTTY: dumb value faking C{os.O_NOCTTY}.\n    @type O_NOCTTY: C{int}\n\n    @ivar WNOHANG: dumb value faking C{os.WNOHANG}.\n    @type WNOHANG: C{int}\n\n    @ivar raiseFork: if not C{None}, subsequent calls to fork will raise this\n        object.\n    @type raiseFork: C{NoneType} or C{Exception}\n\n    @ivar raiseExec: if set, subsequent calls to execvpe will raise an error.\n    @type raiseExec: C{bool}\n\n    @ivar fdio: fake file object returned by calls to fdopen.\n    @type fdio: C{StringIO.StringIO}\n\n    @ivar actions: hold names of some actions executed by the object, in order\n        of execution.\n\n    @type actions: C{list} of C{str}\n\n    @ivar closed: keep track of the file descriptor closed.\n    @param closed: C{list} of C{int}\n\n    @ivar child: whether fork return for the child or the parent.\n    @type child: C{bool}\n\n    @ivar pipeCount: count the number of time that C{os.pipe} has been called.\n    @type pipeCount: C{int}\n\n    @ivar raiseWaitPid: if set, subsequent calls to waitpid will raise an\n        the error specified.\n    @type raiseWaitPid: C{None} or a class\n\n    @ivar waitChild: if set, subsequent calls to waitpid will return it.\n    @type waitChild: C{None} or a tuple\n\n    @ivar euid: the uid returned by the fake C{os.geteuid}\n    @type euid: C{int}\n\n    @ivar egid: the gid returned by the fake C{os.getegid}\n    @type egid: C{int}\n\n    @ivar seteuidCalls: stored results of C{os.seteuid} calls.\n    @type seteuidCalls: C{list}\n\n    @ivar setegidCalls: stored results of C{os.setegid} calls.\n    @type setegidCalls: C{list}\n\n    @ivar path: the path returned by C{os.path.expanduser}.\n    @type path: C{str}\n    """'
newline|'\n'
DECL|variable|exited
name|'exited'
op|'='
name|'False'
newline|'\n'
DECL|variable|raiseExec
name|'raiseExec'
op|'='
name|'False'
newline|'\n'
DECL|variable|fdio
name|'fdio'
op|'='
name|'None'
newline|'\n'
DECL|variable|child
name|'child'
op|'='
name|'True'
newline|'\n'
DECL|variable|raiseWaitPid
name|'raiseWaitPid'
op|'='
name|'None'
newline|'\n'
DECL|variable|raiseFork
name|'raiseFork'
op|'='
name|'None'
newline|'\n'
DECL|variable|waitChild
name|'waitChild'
op|'='
name|'None'
newline|'\n'
DECL|variable|euid
name|'euid'
op|'='
number|'0'
newline|'\n'
DECL|variable|egid
name|'egid'
op|'='
number|'0'
newline|'\n'
DECL|variable|path
name|'path'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initialize data structures.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'actions'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'closed'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'pipeCount'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'O_RDWR'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'O_NOCTTY'
op|'='
op|'-'
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'WNOHANG'
op|'='
op|'-'
number|'4'
newline|'\n'
name|'self'
op|'.'
name|'WEXITSTATUS'
op|'='
name|'lambda'
name|'x'
op|':'
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'WIFEXITED'
op|'='
name|'lambda'
name|'x'
op|':'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'seteuidCalls'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'setegidCalls'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|open
dedent|''
name|'def'
name|'open'
op|'('
name|'self'
op|','
name|'dev'
op|','
name|'flags'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fake C{os.open}. Return a non fd number to be sure it\'s not used\n        elsewhere.\n        """'
newline|'\n'
name|'return'
op|'-'
number|'3'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fdopen
dedent|''
name|'def'
name|'fdopen'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'flag'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fake C{os.fdopen}. Return a StringIO object whose content can be tested\n        later via C{self.fdio}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'fdio'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'fdio'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setsid
dedent|''
name|'def'
name|'setsid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fake C{os.setsid}. Do nothing.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|fork
dedent|''
name|'def'
name|'fork'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fake C{os.fork}. Save the action in C{self.actions}, and return 0 if\n        C{self.child} is set, or a dumb number.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'actions'
op|'.'
name|'append'
op|'('
op|'('
string|"'fork'"
op|','
name|'gc'
op|'.'
name|'isenabled'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'raiseFork'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'raiseFork'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'child'
op|':'
newline|'\n'
comment|'# Child result is 0'
nl|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'21'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|close
dedent|''
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|','
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fake C{os.close}, saving the closed fd in C{self.closed}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'closed'
op|'.'
name|'append'
op|'('
name|'fd'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dup2
dedent|''
name|'def'
name|'dup2'
op|'('
name|'self'
op|','
name|'fd1'
op|','
name|'fd2'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fake C{os.dup2}. Do nothing.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fake C{os.write}. Do nothing.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|execvpe
dedent|''
name|'def'
name|'execvpe'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'args'
op|','
name|'env'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fake C{os.execvpe}. Save the action, and raise an error if\n        C{self.raiseExec} is set.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'actions'
op|'.'
name|'append'
op|'('
string|"'exec'"
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'raiseExec'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Bar"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|pipe
dedent|''
dedent|''
name|'def'
name|'pipe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fake C{os.pipe}. Return non fd numbers to be sure it\'s not used\n        elsewhere, and increment C{self.pipeCount}. This is used to uniquify\n        the result.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'pipeCount'
op|'+='
number|'1'
newline|'\n'
name|'return'
op|'-'
number|'2'
op|'*'
name|'self'
op|'.'
name|'pipeCount'
op|'+'
number|'1'
op|','
op|'-'
number|'2'
op|'*'
name|'self'
op|'.'
name|'pipeCount'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ttyname
dedent|''
name|'def'
name|'ttyname'
op|'('
name|'self'
op|','
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fake C{os.ttyname}. Return a dumb string.\n        """'
newline|'\n'
name|'return'
string|'"foo"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_exit
dedent|''
name|'def'
name|'_exit'
op|'('
name|'self'
op|','
name|'code'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fake C{os._exit}. Save the action, set the C{self.exited} flag, and\n        raise C{SystemError}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'actions'
op|'.'
name|'append'
op|'('
string|"'exit'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'exited'
op|'='
name|'True'
newline|'\n'
comment|"# Don't forget to raise an error, or you'll end up in parent"
nl|'\n'
comment|'# code path.'
nl|'\n'
name|'raise'
name|'SystemError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ioctl
dedent|''
name|'def'
name|'ioctl'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'flags'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override C{fcntl.ioctl}. Do nothing.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setNonBlocking
dedent|''
name|'def'
name|'setNonBlocking'
op|'('
name|'self'
op|','
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override C{fdesc.setNonBlocking}. Do nothing.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|waitpid
dedent|''
name|'def'
name|'waitpid'
op|'('
name|'self'
op|','
name|'pid'
op|','
name|'options'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override C{os.waitpid}. Return values meaning that the child process\n        has exited, save executed action.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'actions'
op|'.'
name|'append'
op|'('
string|"'waitpid'"
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'raiseWaitPid'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'raiseWaitPid'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'waitChild'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'waitChild'
newline|'\n'
dedent|''
name|'return'
number|'1'
op|','
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|settrace
dedent|''
name|'def'
name|'settrace'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override C{sys.settrace} to keep coverage working.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getgid
dedent|''
name|'def'
name|'getgid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override C{os.getgid}. Return a dumb number.\n        """'
newline|'\n'
name|'return'
number|'1235'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getuid
dedent|''
name|'def'
name|'getuid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override C{os.getuid}. Return a dumb number.\n        """'
newline|'\n'
name|'return'
number|'1237'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setuid
dedent|''
name|'def'
name|'setuid'
op|'('
name|'self'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override C{os.setuid}. Do nothing.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'actions'
op|'.'
name|'append'
op|'('
op|'('
string|"'setuid'"
op|','
name|'val'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setgid
dedent|''
name|'def'
name|'setgid'
op|'('
name|'self'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override C{os.setgid}. Do nothing.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'actions'
op|'.'
name|'append'
op|'('
op|'('
string|"'setgid'"
op|','
name|'val'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setregid
dedent|''
name|'def'
name|'setregid'
op|'('
name|'self'
op|','
name|'val1'
op|','
name|'val2'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override C{os.setregid}. Do nothing.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'actions'
op|'.'
name|'append'
op|'('
op|'('
string|"'setregid'"
op|','
name|'val1'
op|','
name|'val2'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setreuid
dedent|''
name|'def'
name|'setreuid'
op|'('
name|'self'
op|','
name|'val1'
op|','
name|'val2'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override C{os.setreuid}.  Save the action.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'actions'
op|'.'
name|'append'
op|'('
op|'('
string|"'setreuid'"
op|','
name|'val1'
op|','
name|'val2'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|switchUID
dedent|''
name|'def'
name|'switchUID'
op|'('
name|'self'
op|','
name|'uid'
op|','
name|'gid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override C{util.switchuid}. Save the action.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'actions'
op|'.'
name|'append'
op|'('
op|'('
string|"'switchuid'"
op|','
name|'uid'
op|','
name|'gid'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|openpty
dedent|''
name|'def'
name|'openpty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override C{pty.openpty}, returning fake file descriptors.\n        """'
newline|'\n'
name|'return'
op|'-'
number|'12'
op|','
op|'-'
number|'13'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|geteuid
dedent|''
name|'def'
name|'geteuid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mock C{os.geteuid}, returning C{self.euid} instead.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'euid'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getegid
dedent|''
name|'def'
name|'getegid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mock C{os.getegid}, returning C{self.egid} instead.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'egid'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|seteuid
dedent|''
name|'def'
name|'seteuid'
op|'('
name|'self'
op|','
name|'egid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mock C{os.seteuid}, store result.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'seteuidCalls'
op|'.'
name|'append'
op|'('
name|'egid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setegid
dedent|''
name|'def'
name|'setegid'
op|'('
name|'self'
op|','
name|'egid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mock C{os.setegid}, store result.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'setegidCalls'
op|'.'
name|'append'
op|'('
name|'egid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|expanduser
dedent|''
name|'def'
name|'expanduser'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mock C{os.path.expanduser}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'path'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getpwnam
dedent|''
name|'def'
name|'getpwnam'
op|'('
name|'self'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mock C{pwd.getpwnam}.\n        """'
newline|'\n'
name|'return'
number|'0'
op|','
number|'0'
op|','
number|'1'
op|','
number|'2'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'process'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
DECL|class|DumbProcessWriter
indent|'    '
name|'class'
name|'DumbProcessWriter'
op|'('
name|'process'
op|'.'
name|'ProcessWriter'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A fake L{process.ProcessWriter} used for tests.\n        """'
newline|'\n'
nl|'\n'
DECL|member|startReading
name|'def'
name|'startReading'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Here\'s the faking: don\'t do anything here.\n            """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DumbProcessReader
dedent|''
dedent|''
name|'class'
name|'DumbProcessReader'
op|'('
name|'process'
op|'.'
name|'ProcessReader'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A fake L{process.ProcessReader} used for tests.\n        """'
newline|'\n'
nl|'\n'
DECL|member|startReading
name|'def'
name|'startReading'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Here\'s the faking: don\'t do anything here.\n            """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DumbPTYProcess
dedent|''
dedent|''
name|'class'
name|'DumbPTYProcess'
op|'('
name|'process'
op|'.'
name|'PTYProcess'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A fake L{process.PTYProcess} used for tests.\n        """'
newline|'\n'
nl|'\n'
DECL|member|startReading
name|'def'
name|'startReading'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Here\'s the faking: don\'t do anything here.\n            """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockProcessTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'MockProcessTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Mock a process runner to test forked child code path.\n    """'
newline|'\n'
name|'if'
name|'process'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"twisted.internet.process is never used on Windows"'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Replace L{process} os, fcntl, sys, switchUID, fdesc and pty modules\n        with the mock class L{MockOS}.\n        """'
newline|'\n'
name|'if'
name|'gc'
op|'.'
name|'isenabled'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'gc'
op|'.'
name|'enable'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'gc'
op|'.'
name|'disable'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mockos'
op|'='
name|'MockOS'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'euid'
op|'='
number|'1236'
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'egid'
op|'='
number|'1234'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'process'
op|','
string|'"os"'
op|','
name|'self'
op|'.'
name|'mockos'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'process'
op|','
string|'"fcntl"'
op|','
name|'self'
op|'.'
name|'mockos'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'process'
op|','
string|'"sys"'
op|','
name|'self'
op|'.'
name|'mockos'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'process'
op|','
string|'"switchUID"'
op|','
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'switchUID'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'process'
op|','
string|'"fdesc"'
op|','
name|'self'
op|'.'
name|'mockos'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'process'
op|'.'
name|'Process'
op|','
string|'"processReaderFactory"'
op|','
name|'DumbProcessReader'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'process'
op|'.'
name|'Process'
op|','
string|'"processWriterFactory"'
op|','
name|'DumbProcessWriter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'process'
op|','
string|'"pty"'
op|','
name|'self'
op|'.'
name|'mockos'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mocksig'
op|'='
name|'MockSignal'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'process'
op|','
string|'"signal"'
op|','
name|'self'
op|'.'
name|'mocksig'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reset processes registered for reap.\n        """'
newline|'\n'
name|'process'
op|'.'
name|'reapProcessHandlers'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockFork
dedent|''
name|'def'
name|'test_mockFork'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a classic spawnProcess. Check the path of the client code:\n        fork, exec, exit.\n        """'
newline|'\n'
name|'gc'
op|'.'
name|'enable'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'cmd'
op|'='
string|"'/mock/ouch'"
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'d'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'cmd'
op|','
op|'['
string|"'ouch'"
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'SystemError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'exited'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'actions'
op|','
op|'['
op|'('
string|'"fork"'
op|','
name|'False'
op|')'
op|','
string|'"exec"'
op|','
string|'"exit"'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Should not be here"'
op|')'
newline|'\n'
nl|'\n'
comment|'# It should leave the garbage collector disabled.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'gc'
op|'.'
name|'isenabled'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_mockForkInParentTest
dedent|''
name|'def'
name|'_mockForkInParentTest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that in the main process, spawnProcess disables the garbage\n        collector, calls fork, closes the pipe file descriptors it created for\n        the child process, and calls waitpid.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'child'
op|'='
name|'False'
newline|'\n'
name|'cmd'
op|'='
string|"'/mock/ouch'"
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'d'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'cmd'
op|','
op|'['
string|"'ouch'"
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'False'
op|')'
newline|'\n'
comment|'# It should close the first read pipe, and the 2 last write pipes'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'closed'
op|')'
op|','
name|'set'
op|'('
op|'['
op|'-'
number|'1'
op|','
op|'-'
number|'4'
op|','
op|'-'
number|'6'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'actions'
op|','
op|'['
op|'('
string|'"fork"'
op|','
name|'False'
op|')'
op|','
string|'"waitpid"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockForkInParentGarbageCollectorEnabled
dedent|''
name|'def'
name|'test_mockForkInParentGarbageCollectorEnabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The garbage collector should be enabled when L{reactor.spawnProcess}\n        returns if it was initially enabled.\n\n        @see L{_mockForkInParentTest}\n        """'
newline|'\n'
name|'gc'
op|'.'
name|'enable'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mockForkInParentTest'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'gc'
op|'.'
name|'isenabled'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockForkInParentGarbageCollectorDisabled
dedent|''
name|'def'
name|'test_mockForkInParentGarbageCollectorDisabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The garbage collector should be disabled when L{reactor.spawnProcess}\n        returns if it was initially disabled.\n\n        @see L{_mockForkInParentTest}\n        """'
newline|'\n'
name|'gc'
op|'.'
name|'disable'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mockForkInParentTest'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'gc'
op|'.'
name|'isenabled'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockForkTTY
dedent|''
name|'def'
name|'test_mockForkTTY'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test a TTY spawnProcess: check the path of the client code:\n        fork, exec, exit.\n        """'
newline|'\n'
name|'cmd'
op|'='
string|"'/mock/ouch'"
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'d'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'cmd'
op|','
op|'['
string|"'ouch'"
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'SystemError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'exited'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'actions'
op|','
op|'['
op|'('
string|'"fork"'
op|','
name|'False'
op|')'
op|','
string|'"exec"'
op|','
string|'"exit"'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Should not be here"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_mockWithForkError
dedent|''
dedent|''
name|'def'
name|'_mockWithForkError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that if the fork call fails, no other process setup calls are\n        made and that spawnProcess raises the exception fork raised.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'raiseFork'
op|'='
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'EAGAIN'
op|','
name|'None'
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'reactor'
op|'.'
name|'spawnProcess'
op|','
name|'protocol'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'actions'
op|','
op|'['
op|'('
string|'"fork"'
op|','
name|'False'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockWithForkErrorGarbageCollectorEnabled
dedent|''
name|'def'
name|'test_mockWithForkErrorGarbageCollectorEnabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The garbage collector should be enabled when L{reactor.spawnProcess}\n        raises because L{os.fork} raised, if it was initially enabled.\n        """'
newline|'\n'
name|'gc'
op|'.'
name|'enable'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mockWithForkError'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'gc'
op|'.'
name|'isenabled'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockWithForkErrorGarbageCollectorDisabled
dedent|''
name|'def'
name|'test_mockWithForkErrorGarbageCollectorDisabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The garbage collector should be disabled when\n        L{reactor.spawnProcess} raises because L{os.fork} raised, if it was\n        initially disabled.\n        """'
newline|'\n'
name|'gc'
op|'.'
name|'disable'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mockWithForkError'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'gc'
op|'.'
name|'isenabled'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockForkErrorCloseFDs
dedent|''
name|'def'
name|'test_mockForkErrorCloseFDs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When C{os.fork} raises an exception, the file descriptors created\n        before are closed and don\'t leak.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_mockWithForkError'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'closed'
op|')'
op|','
name|'set'
op|'('
op|'['
op|'-'
number|'1'
op|','
op|'-'
number|'4'
op|','
op|'-'
number|'6'
op|','
op|'-'
number|'2'
op|','
op|'-'
number|'3'
op|','
op|'-'
number|'5'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockForkErrorGivenFDs
dedent|''
name|'def'
name|'test_mockForkErrorGivenFDs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When C{os.forks} raises an exception and that file descriptors have\n        been specified with the C{childFDs} arguments of\n        L{reactor.spawnProcess}, they are not closed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'raiseFork'
op|'='
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'EAGAIN'
op|','
name|'None'
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'reactor'
op|'.'
name|'spawnProcess'
op|','
name|'protocol'
op|','
name|'None'
op|','
nl|'\n'
name|'childFDs'
op|'='
op|'{'
number|'0'
op|':'
op|'-'
number|'10'
op|','
number|'1'
op|':'
op|'-'
number|'11'
op|','
number|'2'
op|':'
op|'-'
number|'13'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'actions'
op|','
op|'['
op|'('
string|'"fork"'
op|','
name|'False'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'closed'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# We can also put "r" or "w" to let twisted create the pipes'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'reactor'
op|'.'
name|'spawnProcess'
op|','
name|'protocol'
op|','
name|'None'
op|','
nl|'\n'
name|'childFDs'
op|'='
op|'{'
number|'0'
op|':'
string|'"r"'
op|','
number|'1'
op|':'
op|'-'
number|'11'
op|','
number|'2'
op|':'
op|'-'
number|'13'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'closed'
op|')'
op|','
name|'set'
op|'('
op|'['
op|'-'
number|'1'
op|','
op|'-'
number|'2'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockForkErrorClosePTY
dedent|''
name|'def'
name|'test_mockForkErrorClosePTY'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When C{os.fork} raises an exception, the file descriptors created by\n        C{pty.openpty} are closed and don\'t leak, when C{usePTY} is set to\n        C{True}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'raiseFork'
op|'='
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'EAGAIN'
op|','
name|'None'
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'reactor'
op|'.'
name|'spawnProcess'
op|','
name|'protocol'
op|','
name|'None'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'actions'
op|','
op|'['
op|'('
string|'"fork"'
op|','
name|'False'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'closed'
op|')'
op|','
name|'set'
op|'('
op|'['
op|'-'
number|'12'
op|','
op|'-'
number|'13'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockForkErrorPTYGivenFDs
dedent|''
name|'def'
name|'test_mockForkErrorPTYGivenFDs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a tuple is passed to C{usePTY} to specify slave and master file\n        descriptors and that C{os.fork} raises an exception, these file\n        descriptors aren\'t closed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'raiseFork'
op|'='
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'EAGAIN'
op|','
name|'None'
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'reactor'
op|'.'
name|'spawnProcess'
op|','
name|'protocol'
op|','
name|'None'
op|','
nl|'\n'
name|'usePTY'
op|'='
op|'('
op|'-'
number|'20'
op|','
op|'-'
number|'21'
op|','
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'actions'
op|','
op|'['
op|'('
string|'"fork"'
op|','
name|'False'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'closed'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockWithExecError
dedent|''
name|'def'
name|'test_mockWithExecError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Spawn a process but simulate an error during execution in the client\n        path: C{os.execvpe} raises an error. It should close all the standard\n        fds, try to print the error encountered, and exit cleanly.\n        """'
newline|'\n'
name|'cmd'
op|'='
string|"'/mock/ouch'"
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'raiseExec'
op|'='
name|'True'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'cmd'
op|','
op|'['
string|"'ouch'"
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'SystemError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'exited'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'actions'
op|','
op|'['
op|'('
string|'"fork"'
op|','
name|'False'
op|')'
op|','
string|'"exec"'
op|','
string|'"exit"'
op|']'
op|')'
newline|'\n'
comment|'# Check that fd have been closed'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'closed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'closed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
number|'2'
op|','
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'closed'
op|')'
newline|'\n'
comment|'# Check content of traceback'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"RuntimeError: Bar"'
op|','
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'fdio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Should not be here"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockSetUid
dedent|''
dedent|''
name|'def'
name|'test_mockSetUid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try creating a process with setting its uid: it\'s almost the same path\n        as the standard path, but with a C{switchUID} call before the exec.\n        """'
newline|'\n'
name|'cmd'
op|'='
string|"'/mock/ouch'"
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'d'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'cmd'
op|','
op|'['
string|"'ouch'"
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'False'
op|','
name|'uid'
op|'='
number|'8080'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'SystemError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'exited'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'actions'
op|','
nl|'\n'
op|'['
op|'('
string|"'setuid'"
op|','
number|'0'
op|')'
op|','
op|'('
string|"'setgid'"
op|','
number|'0'
op|')'
op|','
op|'('
string|"'fork'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'switchuid'"
op|','
number|'8080'
op|','
number|'1234'
op|')'
op|','
string|"'exec'"
op|','
string|"'exit'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Should not be here"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockSetUidInParent
dedent|''
dedent|''
name|'def'
name|'test_mockSetUidInParent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try creating a process with setting its uid, in the parent path: it\n        should switch to root before fork, then restore initial uid/gids.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'child'
op|'='
name|'False'
newline|'\n'
name|'cmd'
op|'='
string|"'/mock/ouch'"
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'d'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'cmd'
op|','
op|'['
string|"'ouch'"
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'False'
op|','
name|'uid'
op|'='
number|'8080'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'actions'
op|','
nl|'\n'
op|'['
op|'('
string|"'setuid'"
op|','
number|'0'
op|')'
op|','
op|'('
string|"'setgid'"
op|','
number|'0'
op|')'
op|','
op|'('
string|"'fork'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'setregid'"
op|','
number|'1235'
op|','
number|'1234'
op|')'
op|','
op|'('
string|"'setreuid'"
op|','
number|'1237'
op|','
number|'1236'
op|')'
op|','
string|"'waitpid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockPTYSetUid
dedent|''
name|'def'
name|'test_mockPTYSetUid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try creating a PTY process with setting its uid: it\'s almost the same\n        path as the standard path, but with a C{switchUID} call before the\n        exec.\n        """'
newline|'\n'
name|'cmd'
op|'='
string|"'/mock/ouch'"
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'d'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'cmd'
op|','
op|'['
string|"'ouch'"
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'True'
op|','
name|'uid'
op|'='
number|'8081'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'SystemError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'exited'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'actions'
op|','
nl|'\n'
op|'['
op|'('
string|"'setuid'"
op|','
number|'0'
op|')'
op|','
op|'('
string|"'setgid'"
op|','
number|'0'
op|')'
op|','
op|'('
string|"'fork'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'switchuid'"
op|','
number|'8081'
op|','
number|'1234'
op|')'
op|','
string|"'exec'"
op|','
string|"'exit'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Should not be here"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockPTYSetUidInParent
dedent|''
dedent|''
name|'def'
name|'test_mockPTYSetUidInParent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try creating a PTY process with setting its uid, in the parent path: it\n        should switch to root before fork, then restore initial uid/gids.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'child'
op|'='
name|'False'
newline|'\n'
name|'cmd'
op|'='
string|"'/mock/ouch'"
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'d'
op|')'
newline|'\n'
name|'oldPTYProcess'
op|'='
name|'process'
op|'.'
name|'PTYProcess'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'process'
op|'.'
name|'PTYProcess'
op|'='
name|'DumbPTYProcess'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'cmd'
op|','
op|'['
string|"'ouch'"
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'True'
op|','
name|'uid'
op|'='
number|'8080'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'process'
op|'.'
name|'PTYProcess'
op|'='
name|'oldPTYProcess'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'actions'
op|','
nl|'\n'
op|'['
op|'('
string|"'setuid'"
op|','
number|'0'
op|')'
op|','
op|'('
string|"'setgid'"
op|','
number|'0'
op|')'
op|','
op|'('
string|"'fork'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'setregid'"
op|','
number|'1235'
op|','
number|'1234'
op|')'
op|','
op|'('
string|"'setreuid'"
op|','
number|'1237'
op|','
number|'1236'
op|')'
op|','
string|"'waitpid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockWithWaitError
dedent|''
name|'def'
name|'test_mockWithWaitError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that reapProcess logs errors raised.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'child'
op|'='
name|'False'
newline|'\n'
name|'cmd'
op|'='
string|"'/mock/ouch'"
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'waitChild'
op|'='
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'d'
op|')'
newline|'\n'
name|'proc'
op|'='
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'cmd'
op|','
op|'['
string|"'ouch'"
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'actions'
op|','
op|'['
op|'('
string|'"fork"'
op|','
name|'False'
op|')'
op|','
string|'"waitpid"'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'raiseWaitPid'
op|'='
name|'OSError'
op|'('
op|')'
newline|'\n'
name|'proc'
op|'.'
name|'reapProcess'
op|'('
op|')'
newline|'\n'
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'errors'
op|'['
number|'0'
op|']'
op|'.'
name|'trap'
op|'('
name|'OSError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockErrorECHILDInReapProcess
dedent|''
name|'def'
name|'test_mockErrorECHILDInReapProcess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that reapProcess doesn\'t log anything when waitpid raises a\n        C{OSError} with errno C{ECHILD}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'child'
op|'='
name|'False'
newline|'\n'
name|'cmd'
op|'='
string|"'/mock/ouch'"
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'waitChild'
op|'='
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'d'
op|')'
newline|'\n'
name|'proc'
op|'='
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'cmd'
op|','
op|'['
string|"'ouch'"
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'actions'
op|','
op|'['
op|'('
string|'"fork"'
op|','
name|'False'
op|')'
op|','
string|'"waitpid"'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'raiseWaitPid'
op|'='
name|'OSError'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'raiseWaitPid'
op|'.'
name|'errno'
op|'='
name|'errno'
op|'.'
name|'ECHILD'
newline|'\n'
comment|'# This should not produce any errors'
nl|'\n'
name|'proc'
op|'.'
name|'reapProcess'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockErrorInPipe
dedent|''
name|'def'
name|'test_mockErrorInPipe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If C{os.pipe} raises an exception after some pipes where created, the\n        created pipes are closed and don\'t leak.\n        """'
newline|'\n'
name|'pipes'
op|'='
op|'['
op|'-'
number|'1'
op|','
op|'-'
number|'2'
op|','
op|'-'
number|'3'
op|','
op|'-'
number|'4'
op|']'
newline|'\n'
DECL|function|pipe
name|'def'
name|'pipe'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'pipes'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
name|'pipes'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'OSError'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'pipe'
op|'='
name|'pipe'
newline|'\n'
name|'protocol'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'reactor'
op|'.'
name|'spawnProcess'
op|','
name|'protocol'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'actions'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'closed'
op|')'
op|','
name|'set'
op|'('
op|'['
op|'-'
number|'4'
op|','
op|'-'
number|'3'
op|','
op|'-'
number|'2'
op|','
op|'-'
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mockErrorInForkRestoreUID
dedent|''
name|'def'
name|'test_mockErrorInForkRestoreUID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If C{os.fork} raises an exception and a UID change has been made, the\n        previous UID and GID are restored.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'raiseFork'
op|'='
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'EAGAIN'
op|','
name|'None'
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'reactor'
op|'.'
name|'spawnProcess'
op|','
name|'protocol'
op|','
name|'None'
op|','
nl|'\n'
name|'uid'
op|'='
number|'8080'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'mockos'
op|'.'
name|'actions'
op|','
nl|'\n'
op|'['
op|'('
string|"'setuid'"
op|','
number|'0'
op|')'
op|','
op|'('
string|"'setgid'"
op|','
number|'0'
op|')'
op|','
op|'('
string|'"fork"'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'setregid'"
op|','
number|'1235'
op|','
number|'1234'
op|')'
op|','
op|'('
string|"'setreuid'"
op|','
number|'1237'
op|','
number|'1236'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PosixProcessTestCase
dedent|''
dedent|''
name|'class'
name|'PosixProcessTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'PosixProcessBase'
op|')'
op|':'
newline|'\n'
comment|'# add two non-pty test cases'
nl|'\n'
nl|'\n'
DECL|member|testStderr
indent|'    '
name|'def'
name|'testStderr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# we assume there is no file named ZZXXX..., both in . and in /tmp'
nl|'\n'
indent|'        '
name|'cmd'
op|'='
name|'self'
op|'.'
name|'getCommand'
op|'('
string|"'ls'"
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'='
name|'Accumulator'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'endedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'cmd'
op|','
nl|'\n'
op|'['
name|'cmd'
op|','
nl|'\n'
string|'"ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"'
op|']'
op|','
nl|'\n'
name|'env'
op|'='
name|'None'
op|','
name|'path'
op|'='
string|'"/tmp"'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'self'
op|'.'
name|'usePTY'
op|')'
newline|'\n'
nl|'\n'
DECL|function|processEnded
name|'def'
name|'processEnded'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'lsOut'
op|','
name|'p'
op|'.'
name|'errF'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'processEnded'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testProcess
dedent|''
name|'def'
name|'testProcess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'='
name|'self'
op|'.'
name|'getCommand'
op|'('
string|"'gzip'"
op|')'
newline|'\n'
name|'s'
op|'='
string|'"there\'s no place like home!\\n"'
op|'*'
number|'3'
newline|'\n'
name|'p'
op|'='
name|'Accumulator'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'endedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'cmd'
op|','
op|'['
name|'cmd'
op|','
string|'"-c"'
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
name|'path'
op|'='
string|'"/tmp"'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'self'
op|'.'
name|'usePTY'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'s'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'transport'
op|'.'
name|'closeStdin'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|processEnded
name|'def'
name|'processEnded'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'p'
op|'.'
name|'outF'
newline|'\n'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'gf'
op|'='
name|'gzip'
op|'.'
name|'GzipFile'
op|'('
name|'fileobj'
op|'='
name|'f'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'gf'
op|'.'
name|'read'
op|'('
op|')'
op|','
name|'s'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'processEnded'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PosixProcessTestCasePTY
dedent|''
dedent|''
name|'class'
name|'PosixProcessTestCasePTY'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'PosixProcessBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Just like PosixProcessTestCase, but use ptys instead of pipes.\n    """'
newline|'\n'
DECL|variable|usePTY
name|'usePTY'
op|'='
name|'True'
newline|'\n'
comment|'# PTYs only offer one input and one output. What still makes sense?'
nl|'\n'
comment|'# testNormalTermination'
nl|'\n'
comment|'# test_abnormalTermination'
nl|'\n'
comment|'# testSignal'
nl|'\n'
comment|'# testProcess, but not without p.transport.closeStdin'
nl|'\n'
comment|'#  might be solveable: TODO: add test if so'
nl|'\n'
nl|'\n'
DECL|member|testOpeningTTY
name|'def'
name|'testOpeningTTY'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'exe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'scriptPath'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"process_tty.py"'
op|')'
newline|'\n'
name|'p'
op|'='
name|'Accumulator'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'endedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'exe'
op|','
op|'['
name|'exe'
op|','
string|'"-u"'
op|','
name|'scriptPath'
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'path'
op|'='
name|'None'
op|','
name|'usePTY'
op|'='
name|'self'
op|'.'
name|'usePTY'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"hello world!\\n"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|processEnded
name|'def'
name|'processEnded'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'ProcessExitedAlready'
op|','
name|'p'
op|'.'
name|'transport'
op|'.'
name|'signalProcess'
op|','
string|"'HUP'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'p'
op|'.'
name|'outF'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"hello world!\\r\\nhello world!\\r\\n"'
op|','
nl|'\n'
string|'"Error message from process_tty follows:\\n\\n%s\\n\\n"'
op|'%'
name|'p'
op|'.'
name|'outF'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'processEnded'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testBadArgs
dedent|''
name|'def'
name|'testBadArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pyExe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'pyArgs'
op|'='
op|'['
name|'pyExe'
op|','
string|'"-u"'
op|','
string|'"-c"'
op|','
string|'"print \'hello\'"'
op|']'
newline|'\n'
name|'p'
op|'='
name|'Accumulator'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'reactor'
op|'.'
name|'spawnProcess'
op|','
name|'p'
op|','
name|'pyExe'
op|','
name|'pyArgs'
op|','
nl|'\n'
name|'usePTY'
op|'='
number|'1'
op|','
name|'childFDs'
op|'='
op|'{'
number|'1'
op|':'
string|"'r'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Win32SignalProtocol
dedent|''
dedent|''
name|'class'
name|'Win32SignalProtocol'
op|'('
name|'SignalProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A win32-specific process protocol that handles C{processEnded}\n    differently: processes should exit with exit code 1.\n    """'
newline|'\n'
nl|'\n'
DECL|member|processEnded
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Callback C{self.deferred} with C{None} if C{reason} is a\n        L{error.ProcessTerminated} failure with C{exitCode} set to 1.\n        Otherwise, errback with a C{ValueError} describing the problem.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'reason'
op|'.'
name|'check'
op|'('
name|'error'
op|'.'
name|'ProcessTerminated'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
nl|'\n'
name|'ValueError'
op|'('
string|'"wrong termination: %s"'
op|'%'
op|'('
name|'reason'
op|','
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'v'
op|'='
name|'reason'
op|'.'
name|'value'
newline|'\n'
name|'if'
name|'v'
op|'.'
name|'exitCode'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
nl|'\n'
name|'ValueError'
op|'('
string|'"Wrong exit code: %s"'
op|'%'
op|'('
name|'reason'
op|'.'
name|'exitCode'
op|','
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Win32ProcessTestCase
dedent|''
dedent|''
name|'class'
name|'Win32ProcessTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test process programs that are packaged with twisted.\n    """'
newline|'\n'
nl|'\n'
DECL|member|testStdinReader
name|'def'
name|'testStdinReader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pyExe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'scriptPath'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"process_stdinreader.py"'
op|')'
newline|'\n'
name|'p'
op|'='
name|'Accumulator'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'endedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'pyExe'
op|','
op|'['
name|'pyExe'
op|','
string|'"-u"'
op|','
name|'scriptPath'
op|']'
op|','
name|'env'
op|'='
name|'None'
op|','
nl|'\n'
name|'path'
op|'='
name|'None'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"hello, world"'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'transport'
op|'.'
name|'closeStdin'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|processEnded
name|'def'
name|'processEnded'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'errF'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"err\\nerr\\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'outF'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"out\\nhello, world\\nout\\n"'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'processEnded'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testBadArgs
dedent|''
name|'def'
name|'testBadArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pyExe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'pyArgs'
op|'='
op|'['
name|'pyExe'
op|','
string|'"-u"'
op|','
string|'"-c"'
op|','
string|'"print \'hello\'"'
op|']'
newline|'\n'
name|'p'
op|'='
name|'Accumulator'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|','
name|'p'
op|','
name|'pyExe'
op|','
name|'pyArgs'
op|','
name|'uid'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|','
name|'p'
op|','
name|'pyExe'
op|','
name|'pyArgs'
op|','
name|'gid'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|','
name|'p'
op|','
name|'pyExe'
op|','
name|'pyArgs'
op|','
name|'usePTY'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|','
name|'p'
op|','
name|'pyExe'
op|','
name|'pyArgs'
op|','
name|'childFDs'
op|'='
op|'{'
number|'1'
op|':'
string|"'r'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_testSignal
dedent|''
name|'def'
name|'_testSignal'
op|'('
name|'self'
op|','
name|'sig'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'exe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'scriptPath'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"process_signal.py"'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'Win32SignalProtocol'
op|'('
name|'d'
op|','
name|'sig'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'exe'
op|','
op|'['
name|'exe'
op|','
string|'"-u"'
op|','
name|'scriptPath'
op|']'
op|','
name|'env'
op|'='
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_signalTERM
dedent|''
name|'def'
name|'test_signalTERM'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sending the SIGTERM signal terminates a created process, and\n        C{processEnded} is called with a L{error.ProcessTerminated} instance\n        with the C{exitCode} attribute set to 1.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testSignal'
op|'('
string|"'TERM'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_signalINT
dedent|''
name|'def'
name|'test_signalINT'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sending the SIGINT signal terminates a created process, and\n        C{processEnded} is called with a L{error.ProcessTerminated} instance\n        with the C{exitCode} attribute set to 1.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testSignal'
op|'('
string|"'INT'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_signalKILL
dedent|''
name|'def'
name|'test_signalKILL'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sending the SIGKILL signal terminates a created process, and\n        C{processEnded} is called with a L{error.ProcessTerminated} instance\n        with the C{exitCode} attribute set to 1.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_testSignal'
op|'('
string|"'KILL'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_closeHandles
dedent|''
name|'def'
name|'test_closeHandles'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The win32 handles should be properly closed when the process exits.\n        """'
newline|'\n'
name|'import'
name|'win32api'
newline|'\n'
nl|'\n'
name|'connected'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'ended'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|SimpleProtocol
name|'class'
name|'SimpleProtocol'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            A protocol that fires deferreds when connected and disconnected.\n            """'
newline|'\n'
DECL|member|makeConnection
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'connected'
op|'.'
name|'callback'
op|'('
name|'transport'
op|')'
newline|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ended'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'p'
op|'='
name|'SimpleProtocol'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'pyExe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'pyArgs'
op|'='
op|'['
name|'pyExe'
op|','
string|'"-u"'
op|','
string|'"-c"'
op|','
string|'"print \'hello\'"'
op|']'
newline|'\n'
name|'proc'
op|'='
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'pyExe'
op|','
name|'pyArgs'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbConnected
name|'def'
name|'cbConnected'
op|'('
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'transport'
op|','
name|'proc'
op|')'
newline|'\n'
comment|'# perform a basic validity test on the handles'
nl|'\n'
name|'win32api'
op|'.'
name|'GetHandleInformation'
op|'('
name|'proc'
op|'.'
name|'hProcess'
op|')'
newline|'\n'
name|'win32api'
op|'.'
name|'GetHandleInformation'
op|'('
name|'proc'
op|'.'
name|'hThread'
op|')'
newline|'\n'
comment|'# And save their values for later'
nl|'\n'
name|'self'
op|'.'
name|'hProcess'
op|'='
name|'proc'
op|'.'
name|'hProcess'
newline|'\n'
name|'self'
op|'.'
name|'hThread'
op|'='
name|'proc'
op|'.'
name|'hThread'
newline|'\n'
dedent|''
name|'connected'
op|'.'
name|'addCallback'
op|'('
name|'cbConnected'
op|')'
newline|'\n'
nl|'\n'
DECL|function|checkTerminated
name|'def'
name|'checkTerminated'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
comment|'# The attributes on the process object must be reset...'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'proc'
op|'.'
name|'pid'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'proc'
op|'.'
name|'hProcess'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'proc'
op|'.'
name|'hThread'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# ...and the handles must be closed.'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'win32api'
op|'.'
name|'error'
op|','
nl|'\n'
name|'win32api'
op|'.'
name|'GetHandleInformation'
op|','
name|'self'
op|'.'
name|'hProcess'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'win32api'
op|'.'
name|'error'
op|','
nl|'\n'
name|'win32api'
op|'.'
name|'GetHandleInformation'
op|','
name|'self'
op|'.'
name|'hThread'
op|')'
newline|'\n'
dedent|''
name|'ended'
op|'.'
name|'addCallback'
op|'('
name|'checkTerminated'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'connected'
op|','
name|'ended'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Dumbwin32procPidTest
dedent|''
dedent|''
name|'class'
name|'Dumbwin32procPidTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Simple test for the pid attribute of Process on win32.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_pid
name|'def'
name|'test_pid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Launch process with mock win32process. The only mock aspect of this\n        module is that the pid of the process created will always be 42.\n        """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'_dumbwin32proc'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
name|'import'
name|'mock_win32process'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'_dumbwin32proc'
op|','
string|'"win32process"'
op|','
name|'mock_win32process'
op|')'
newline|'\n'
name|'exe'
op|'='
name|'sys'
op|'.'
name|'executable'
newline|'\n'
name|'scriptPath'
op|'='
name|'util'
op|'.'
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"process_cmdline.py"'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'processProto'
op|'='
name|'TrivialProcessProtocol'
op|'('
name|'d'
op|')'
newline|'\n'
name|'comspec'
op|'='
name|'str'
op|'('
name|'os'
op|'.'
name|'environ'
op|'['
string|'"COMSPEC"'
op|']'
op|')'
newline|'\n'
name|'cmd'
op|'='
op|'['
name|'comspec'
op|','
string|'"/c"'
op|','
name|'exe'
op|','
name|'scriptPath'
op|']'
newline|'\n'
nl|'\n'
name|'p'
op|'='
name|'_dumbwin32proc'
op|'.'
name|'Process'
op|'('
name|'reactor'
op|','
nl|'\n'
name|'processProto'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'cmd'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'42'
op|','
name|'p'
op|'.'
name|'pid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"<Process pid=42>"'
op|','
name|'repr'
op|'('
name|'p'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|pidCompleteCb
name|'def'
name|'pidCompleteCb'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'None'
op|','
name|'p'
op|'.'
name|'pid'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'pidCompleteCb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UtilTestCase
dedent|''
dedent|''
name|'class'
name|'UtilTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for process-related helper functions (currently only\n    L{procutils.which}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create several directories and files, some of which are executable\n        and some of which are not.  Save the current PATH setting.\n        """'
newline|'\n'
name|'j'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
newline|'\n'
nl|'\n'
name|'base'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'foo'
op|'='
name|'j'
op|'('
name|'base'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'baz'
op|'='
name|'j'
op|'('
name|'base'
op|','
string|'"baz"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'foobar'
op|'='
name|'j'
op|'('
name|'self'
op|'.'
name|'foo'
op|','
string|'"bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'foobaz'
op|'='
name|'j'
op|'('
name|'self'
op|'.'
name|'foo'
op|','
string|'"baz"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bazfoo'
op|'='
name|'j'
op|'('
name|'self'
op|'.'
name|'baz'
op|','
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bazbar'
op|'='
name|'j'
op|'('
name|'self'
op|'.'
name|'baz'
op|','
string|'"bar"'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'d'
name|'in'
name|'self'
op|'.'
name|'foobar'
op|','
name|'self'
op|'.'
name|'foobaz'
op|','
name|'self'
op|'.'
name|'bazfoo'
op|','
name|'self'
op|'.'
name|'bazbar'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'d'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'name'
op|','
name|'mode'
name|'in'
op|'['
op|'('
name|'j'
op|'('
name|'self'
op|'.'
name|'foobaz'
op|','
string|'"executable"'
op|')'
op|','
number|'0700'
op|')'
op|','
nl|'\n'
op|'('
name|'j'
op|'('
name|'self'
op|'.'
name|'foo'
op|','
string|'"executable"'
op|')'
op|','
number|'0700'
op|')'
op|','
nl|'\n'
op|'('
name|'j'
op|'('
name|'self'
op|'.'
name|'bazfoo'
op|','
string|'"executable"'
op|')'
op|','
number|'0700'
op|')'
op|','
nl|'\n'
op|'('
name|'j'
op|'('
name|'self'
op|'.'
name|'bazfoo'
op|','
string|'"executable.bin"'
op|')'
op|','
number|'0700'
op|')'
op|','
nl|'\n'
op|'('
name|'j'
op|'('
name|'self'
op|'.'
name|'bazbar'
op|','
string|'"executable"'
op|')'
op|','
number|'0'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'file'
op|'('
name|'name'
op|','
string|'"w"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
name|'name'
op|','
name|'mode'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'oldPath'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'PATH'"
op|','
name|'None'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'PATH'"
op|']'
op|'='
name|'os'
op|'.'
name|'pathsep'
op|'.'
name|'join'
op|'('
op|'('
nl|'\n'
name|'self'
op|'.'
name|'foobar'
op|','
name|'self'
op|'.'
name|'foobaz'
op|','
name|'self'
op|'.'
name|'bazfoo'
op|','
name|'self'
op|'.'
name|'bazbar'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Restore the saved PATH setting, and set all created files readable\n        again so that they can be deleted easily.\n        """'
newline|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'bazbar'
op|','
string|'"executable"'
op|')'
op|','
name|'stat'
op|'.'
name|'S_IWUSR'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'oldPath'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'PATH'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'environ'
op|'['
string|"'PATH'"
op|']'
op|'='
name|'self'
op|'.'
name|'oldPath'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_whichWithoutPATH
dedent|''
dedent|''
name|'def'
name|'test_whichWithoutPATH'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that if C{os.environ} does not have a C{\'PATH\'} key,\n        L{procutils.which} returns an empty list.\n        """'
newline|'\n'
name|'del'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'PATH'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'procutils'
op|'.'
name|'which'
op|'('
string|'"executable"'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testWhich
dedent|''
name|'def'
name|'testWhich'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'j'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
newline|'\n'
name|'paths'
op|'='
name|'procutils'
op|'.'
name|'which'
op|'('
string|'"executable"'
op|')'
newline|'\n'
name|'expectedPaths'
op|'='
op|'['
name|'j'
op|'('
name|'self'
op|'.'
name|'foobaz'
op|','
string|'"executable"'
op|')'
op|','
nl|'\n'
name|'j'
op|'('
name|'self'
op|'.'
name|'bazfoo'
op|','
string|'"executable"'
op|')'
op|']'
newline|'\n'
name|'if'
name|'runtime'
op|'.'
name|'platform'
op|'.'
name|'isWindows'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expectedPaths'
op|'.'
name|'append'
op|'('
name|'j'
op|'('
name|'self'
op|'.'
name|'bazbar'
op|','
string|'"executable"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'paths'
op|','
name|'expectedPaths'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testWhichPathExt
dedent|''
name|'def'
name|'testWhichPathExt'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'j'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
newline|'\n'
name|'old'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'PATHEXT'"
op|','
name|'None'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'PATHEXT'"
op|']'
op|'='
name|'os'
op|'.'
name|'pathsep'
op|'.'
name|'join'
op|'('
op|'('
string|"'.bin'"
op|','
string|"'.exe'"
op|','
string|"'.sh'"
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'paths'
op|'='
name|'procutils'
op|'.'
name|'which'
op|'('
string|'"executable"'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'old'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'PATHEXT'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'environ'
op|'['
string|"'PATHEXT'"
op|']'
op|'='
name|'old'
newline|'\n'
dedent|''
dedent|''
name|'expectedPaths'
op|'='
op|'['
name|'j'
op|'('
name|'self'
op|'.'
name|'foobaz'
op|','
string|'"executable"'
op|')'
op|','
nl|'\n'
name|'j'
op|'('
name|'self'
op|'.'
name|'bazfoo'
op|','
string|'"executable"'
op|')'
op|','
nl|'\n'
name|'j'
op|'('
name|'self'
op|'.'
name|'bazfoo'
op|','
string|'"executable.bin"'
op|')'
op|']'
newline|'\n'
name|'if'
name|'runtime'
op|'.'
name|'platform'
op|'.'
name|'isWindows'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expectedPaths'
op|'.'
name|'append'
op|'('
name|'j'
op|'('
name|'self'
op|'.'
name|'bazbar'
op|','
string|'"executable"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'paths'
op|','
name|'expectedPaths'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ClosingPipesProcessProtocol
dedent|''
dedent|''
name|'class'
name|'ClosingPipesProcessProtocol'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
DECL|variable|output
indent|'    '
name|'output'
op|'='
string|"''"
newline|'\n'
DECL|variable|errput
name|'errput'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'outOrErr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'outOrErr'
op|'='
name|'outOrErr'
newline|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|outReceived
dedent|''
name|'def'
name|'outReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'output'
op|'+='
name|'data'
newline|'\n'
nl|'\n'
DECL|member|errReceived
dedent|''
name|'def'
name|'errReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'errput'
op|'+='
name|'data'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ClosingPipes
dedent|''
dedent|''
name|'class'
name|'ClosingPipes'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|doit
indent|'    '
name|'def'
name|'doit'
op|'('
name|'self'
op|','
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'ClosingPipesProcessProtocol'
op|'('
name|'True'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'deferred'
op|'.'
name|'addCallbacks'
op|'('
nl|'\n'
name|'callback'
op|'='
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'fail'
op|'('
string|'"I wanted an errback."'
op|')'
op|','
nl|'\n'
name|'errback'
op|'='
name|'self'
op|'.'
name|'_endProcess'
op|','
name|'errbackArgs'
op|'='
op|'('
name|'p'
op|','
op|')'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'sys'
op|'.'
name|'executable'
op|','
nl|'\n'
op|'['
name|'sys'
op|'.'
name|'executable'
op|','
string|"'-u'"
op|','
string|"'-c'"
op|','
nl|'\n'
string|'r\'raw_input(); import sys, os; os.write(%d, "foo\\n"); sys.exit(42)\''
op|'%'
name|'fd'
op|']'
op|','
nl|'\n'
name|'env'
op|'='
name|'None'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|"'go\\n'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'fd'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'transport'
op|'.'
name|'closeStdout'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'fd'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'transport'
op|'.'
name|'closeStderr'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
newline|'\n'
nl|'\n'
comment|'# make the buggy case not hang'
nl|'\n'
dedent|''
name|'p'
op|'.'
name|'transport'
op|'.'
name|'closeStdin'
op|'('
op|')'
newline|'\n'
name|'return'
name|'p'
op|'.'
name|'deferred'
newline|'\n'
nl|'\n'
DECL|member|_endProcess
dedent|''
name|'def'
name|'_endProcess'
op|'('
name|'self'
op|','
name|'reason'
op|','
name|'p'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'reason'
op|'.'
name|'check'
op|'('
name|'error'
op|'.'
name|'ProcessDone'
op|')'
op|','
nl|'\n'
string|"'Child should fail due to EPIPE.'"
op|')'
newline|'\n'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ProcessTerminated'
op|')'
newline|'\n'
comment|'# child must not get past that write without raising'
nl|'\n'
name|'self'
op|'.'
name|'failIfEqual'
op|'('
name|'reason'
op|'.'
name|'value'
op|'.'
name|'exitCode'
op|','
number|'42'
op|','
nl|'\n'
string|"'process reason was %r'"
op|'%'
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'p'
op|'.'
name|'output'
op|','
string|"''"
op|')'
newline|'\n'
name|'return'
name|'p'
op|'.'
name|'errput'
newline|'\n'
nl|'\n'
DECL|member|test_stdout
dedent|''
name|'def'
name|'test_stdout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""ProcessProtocol.transport.closeStdout actually closes the pipe."""'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'doit'
op|'('
number|'1'
op|')'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'errput'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIfEqual'
op|'('
name|'errput'
op|'.'
name|'find'
op|'('
string|"'OSError'"
op|')'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'if'
name|'runtime'
op|'.'
name|'platform'
op|'.'
name|'getType'
op|'('
op|')'
op|'!='
string|"'win32'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failIfEqual'
op|'('
name|'errput'
op|'.'
name|'find'
op|'('
string|"'Broken pipe'"
op|')'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|test_stderr
dedent|''
name|'def'
name|'test_stderr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""ProcessProtocol.transport.closeStderr actually closes the pipe."""'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'doit'
op|'('
number|'2'
op|')'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'errput'
op|')'
op|':'
newline|'\n'
comment|'# there should be no stderr open, so nothing for it to'
nl|'\n'
comment|'# write the error to.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'errput'
op|','
string|"''"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|skipMessage
dedent|''
dedent|''
name|'skipMessage'
op|'='
string|'"wrong platform or reactor doesn\'t support IReactorProcess"'
newline|'\n'
name|'if'
op|'('
name|'runtime'
op|'.'
name|'platform'
op|'.'
name|'getType'
op|'('
op|')'
op|'!='
string|"'posix'"
op|')'
name|'or'
op|'('
name|'not'
name|'interfaces'
op|'.'
name|'IReactorProcess'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'PosixProcessTestCase'
op|'.'
name|'skip'
op|'='
name|'skipMessage'
newline|'\n'
name|'PosixProcessTestCasePTY'
op|'.'
name|'skip'
op|'='
name|'skipMessage'
newline|'\n'
name|'TestTwoProcessesPosix'
op|'.'
name|'skip'
op|'='
name|'skipMessage'
newline|'\n'
name|'FDTest'
op|'.'
name|'skip'
op|'='
name|'skipMessage'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# do this before running the tests: it uses SIGCHLD and stuff internally'
nl|'\n'
DECL|variable|lsOut
indent|'    '
name|'lsOut'
op|'='
name|'popen2'
op|'.'
name|'popen3'
op|'('
string|'"/bin/ls ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"'
op|')'
op|'['
number|'2'
op|']'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'runtime'
op|'.'
name|'platform'
op|'.'
name|'getType'
op|'('
op|')'
op|'!='
string|"'win32'"
op|')'
name|'or'
op|'('
name|'not'
name|'interfaces'
op|'.'
name|'IReactorProcess'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'Win32ProcessTestCase'
op|'.'
name|'skip'
op|'='
name|'skipMessage'
newline|'\n'
name|'TestTwoProcessesNonPosix'
op|'.'
name|'skip'
op|'='
name|'skipMessage'
newline|'\n'
name|'Dumbwin32procPidTest'
op|'.'
name|'skip'
op|'='
name|'skipMessage'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'interfaces'
op|'.'
name|'IReactorProcess'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'ProcessTestCase'
op|'.'
name|'skip'
op|'='
name|'skipMessage'
newline|'\n'
name|'ClosingPipes'
op|'.'
name|'skip'
op|'='
name|'skipMessage'
newline|'\n'
nl|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'usage'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WellBehaved
name|'class'
name|'WellBehaved'
op|'('
name|'usage'
op|'.'
name|'Options'
op|')'
op|':'
newline|'\n'
DECL|variable|optParameters
indent|'    '
name|'optParameters'
op|'='
op|'['
op|'['
string|"'long'"
op|','
string|"'w'"
op|','
string|"'default'"
op|','
string|"'and a docstring'"
op|']'
op|','
nl|'\n'
op|'['
string|"'another'"
op|','
string|"'n'"
op|','
string|"'no docstring'"
op|']'
op|','
nl|'\n'
op|'['
string|"'longonly'"
op|','
name|'None'
op|','
string|"'noshort'"
op|']'
op|','
nl|'\n'
op|'['
string|"'shortless'"
op|','
name|'None'
op|','
string|"'except'"
op|','
nl|'\n'
string|"'this one got docstring'"
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
DECL|variable|optFlags
name|'optFlags'
op|'='
op|'['
op|'['
string|"'aflag'"
op|','
string|"'f'"
op|','
nl|'\n'
string|'"""\n\n                 flagallicious docstringness for this here\n\n                 """'
op|']'
op|','
nl|'\n'
op|'['
string|"'flout'"
op|','
string|"'o'"
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|opt_myflag
name|'def'
name|'opt_myflag'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'opts'
op|'['
string|"'myflag'"
op|']'
op|'='
string|'"PONY!"'
newline|'\n'
nl|'\n'
DECL|member|opt_myparam
dedent|''
name|'def'
name|'opt_myparam'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'opts'
op|'['
string|"'myparam'"
op|']'
op|'='
string|'"%s WITH A PONY!"'
op|'%'
op|'('
name|'value'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ParseCorrectnessTest
dedent|''
dedent|''
name|'class'
name|'ParseCorrectnessTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test Options.parseArgs for correct values under good conditions.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Instantiate and parseOptions a well-behaved Options class.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'niceArgV'
op|'='
op|'('
string|'"--long Alpha -n Beta "'
nl|'\n'
string|'"--shortless Gamma -f --myflag "'
nl|'\n'
string|'"--myparam Tofu"'
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'nice'
op|'='
name|'WellBehaved'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'nice'
op|'.'
name|'parseOptions'
op|'('
name|'self'
op|'.'
name|'niceArgV'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_checkParameters
dedent|''
name|'def'
name|'test_checkParameters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Checking that parameters have correct values.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'nice'
op|'.'
name|'opts'
op|'['
string|"'long'"
op|']'
op|','
string|'"Alpha"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'nice'
op|'.'
name|'opts'
op|'['
string|"'another'"
op|']'
op|','
string|'"Beta"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'nice'
op|'.'
name|'opts'
op|'['
string|"'longonly'"
op|']'
op|','
string|'"noshort"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'nice'
op|'.'
name|'opts'
op|'['
string|"'shortless'"
op|']'
op|','
string|'"Gamma"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_checkFlags
dedent|''
name|'def'
name|'test_checkFlags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Checking that flags have correct values.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'nice'
op|'.'
name|'opts'
op|'['
string|"'aflag'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'nice'
op|'.'
name|'opts'
op|'['
string|"'flout'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_checkCustoms
dedent|''
name|'def'
name|'test_checkCustoms'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Checking that custom flags and parameters have correct values.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'nice'
op|'.'
name|'opts'
op|'['
string|"'myflag'"
op|']'
op|','
string|'"PONY!"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'nice'
op|'.'
name|'opts'
op|'['
string|"'myparam'"
op|']'
op|','
string|'"Tofu WITH A PONY!"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TypedOptions
dedent|''
dedent|''
name|'class'
name|'TypedOptions'
op|'('
name|'usage'
op|'.'
name|'Options'
op|')'
op|':'
newline|'\n'
DECL|variable|optParameters
indent|'    '
name|'optParameters'
op|'='
op|'['
nl|'\n'
op|'['
string|"'fooint'"
op|','
name|'None'
op|','
number|'392'
op|','
string|"'Foo int'"
op|','
name|'int'
op|']'
op|','
nl|'\n'
op|'['
string|"'foofloat'"
op|','
name|'None'
op|','
number|'4.23'
op|','
string|"'Foo float'"
op|','
name|'float'
op|']'
op|','
nl|'\n'
op|'['
string|"'eggint'"
op|','
name|'None'
op|','
name|'None'
op|','
string|"'Egg int without default'"
op|','
name|'int'
op|']'
op|','
nl|'\n'
op|'['
string|"'eggfloat'"
op|','
name|'None'
op|','
name|'None'
op|','
string|"'Egg float without default'"
op|','
name|'float'
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TypedTestCase
dedent|''
name|'class'
name|'TypedTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test Options.parseArgs for options with forced types.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'usage'
op|'='
name|'TypedOptions'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_defaultValues
dedent|''
name|'def'
name|'test_defaultValues'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test parsing of default values.\n        """'
newline|'\n'
name|'argV'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'usage'
op|'.'
name|'parseOptions'
op|'('
name|'argV'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'usage'
op|'.'
name|'opts'
op|'['
string|"'fooint'"
op|']'
op|','
number|'392'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'usage'
op|'.'
name|'opts'
op|'['
string|"'fooint'"
op|']'
op|','
name|'int'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'usage'
op|'.'
name|'opts'
op|'['
string|"'foofloat'"
op|']'
op|','
number|'4.23'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'usage'
op|'.'
name|'opts'
op|'['
string|"'foofloat'"
op|']'
op|','
name|'float'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'usage'
op|'.'
name|'opts'
op|'['
string|"'eggint'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'usage'
op|'.'
name|'opts'
op|'['
string|"'eggfloat'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_parsingValues
dedent|''
name|'def'
name|'test_parsingValues'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test basic parsing of int and float values.\n        """'
newline|'\n'
name|'argV'
op|'='
op|'('
string|'"--fooint 912 --foofloat -823.1 "'
nl|'\n'
string|'"--eggint 32 --eggfloat 21"'
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'usage'
op|'.'
name|'parseOptions'
op|'('
name|'argV'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'usage'
op|'.'
name|'opts'
op|'['
string|"'fooint'"
op|']'
op|','
number|'912'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'usage'
op|'.'
name|'opts'
op|'['
string|"'fooint'"
op|']'
op|','
name|'int'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'usage'
op|'.'
name|'opts'
op|'['
string|"'foofloat'"
op|']'
op|','
op|'-'
number|'823.1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'usage'
op|'.'
name|'opts'
op|'['
string|"'foofloat'"
op|']'
op|','
name|'float'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'usage'
op|'.'
name|'opts'
op|'['
string|"'eggint'"
op|']'
op|','
number|'32'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'usage'
op|'.'
name|'opts'
op|'['
string|"'eggint'"
op|']'
op|','
name|'int'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'usage'
op|'.'
name|'opts'
op|'['
string|"'eggfloat'"
op|']'
op|','
number|'21.'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'usage'
op|'.'
name|'opts'
op|'['
string|"'eggfloat'"
op|']'
op|','
name|'float'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalidValues
dedent|''
name|'def'
name|'test_invalidValues'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that passing wrong values raises an error.\n        """'
newline|'\n'
name|'argV'
op|'='
string|'"--fooint egg"'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'usage'
op|'.'
name|'UsageError'
op|','
name|'self'
op|'.'
name|'usage'
op|'.'
name|'parseOptions'
op|','
name|'argV'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WrongTypedOptions
dedent|''
dedent|''
name|'class'
name|'WrongTypedOptions'
op|'('
name|'usage'
op|'.'
name|'Options'
op|')'
op|':'
newline|'\n'
DECL|variable|optParameters
indent|'    '
name|'optParameters'
op|'='
op|'['
nl|'\n'
op|'['
string|"'barwrong'"
op|','
name|'None'
op|','
name|'None'
op|','
string|"'Bar with wrong coerce'"
op|','
string|"'he'"
op|']'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WeirdCallableOptions
dedent|''
name|'class'
name|'WeirdCallableOptions'
op|'('
name|'usage'
op|'.'
name|'Options'
op|')'
op|':'
newline|'\n'
DECL|member|_bar
indent|'    '
name|'def'
name|'_bar'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Ouch"'
op|')'
newline|'\n'
DECL|member|_foo
dedent|''
name|'def'
name|'_foo'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|'"Yay"'
op|')'
newline|'\n'
DECL|variable|optParameters
dedent|''
name|'optParameters'
op|'='
op|'['
nl|'\n'
op|'['
string|"'barwrong'"
op|','
name|'None'
op|','
name|'None'
op|','
string|"'Bar with strange callable'"
op|','
name|'_bar'
op|']'
op|','
nl|'\n'
op|'['
string|"'foowrong'"
op|','
name|'None'
op|','
name|'None'
op|','
string|"'Foo with strange callable'"
op|','
name|'_foo'
op|']'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WrongTypedTestCase
dedent|''
name|'class'
name|'WrongTypedTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test Options.parseArgs for wrong coerce options.\n    """'
newline|'\n'
DECL|member|test_nonCallable
name|'def'
name|'test_nonCallable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that using a non callable type fails.\n        """'
newline|'\n'
name|'us'
op|'='
name|'WrongTypedOptions'
op|'('
op|')'
newline|'\n'
name|'argV'
op|'='
string|'"--barwrong egg"'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'us'
op|'.'
name|'parseOptions'
op|','
name|'argV'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_notCalledInDefault
dedent|''
name|'def'
name|'test_notCalledInDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the coerce functions are not called if no values are\n        provided.\n        """'
newline|'\n'
name|'us'
op|'='
name|'WeirdCallableOptions'
op|'('
op|')'
newline|'\n'
name|'argV'
op|'='
op|'['
op|']'
newline|'\n'
name|'us'
op|'.'
name|'parseOptions'
op|'('
name|'argV'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_weirdCallable
dedent|''
name|'def'
name|'test_weirdCallable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test what happens when coerce functions raise errors.\n        """'
newline|'\n'
name|'us'
op|'='
name|'WeirdCallableOptions'
op|'('
op|')'
newline|'\n'
name|'argV'
op|'='
string|'"--foowrong blah"'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
comment|'# ValueError is swallowed as UsageError'
nl|'\n'
name|'e'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'usage'
op|'.'
name|'UsageError'
op|','
name|'us'
op|'.'
name|'parseOptions'
op|','
name|'argV'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|','
string|'"Parameter type enforcement failed: Yay"'
op|')'
newline|'\n'
nl|'\n'
name|'us'
op|'='
name|'WeirdCallableOptions'
op|'('
op|')'
newline|'\n'
name|'argV'
op|'='
string|'"--barwrong blah"'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
comment|'# RuntimeError is not swallowed'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'us'
op|'.'
name|'parseOptions'
op|','
name|'argV'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|OutputTest
dedent|''
dedent|''
name|'class'
name|'OutputTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_uppercasing
indent|'    '
name|'def'
name|'test_uppercasing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Error output case adjustment does not mangle options\n        """'
newline|'\n'
name|'opt'
op|'='
name|'WellBehaved'
op|'('
op|')'
newline|'\n'
name|'e'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'usage'
op|'.'
name|'UsageError'
op|','
nl|'\n'
name|'opt'
op|'.'
name|'parseOptions'
op|','
op|'['
string|"'-Z'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|','
string|"'option -Z not recognized'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InquisitionOptions
dedent|''
dedent|''
name|'class'
name|'InquisitionOptions'
op|'('
name|'usage'
op|'.'
name|'Options'
op|')'
op|':'
newline|'\n'
DECL|variable|optFlags
indent|'    '
name|'optFlags'
op|'='
op|'['
nl|'\n'
op|'('
string|"'expect'"
op|','
string|"'e'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
DECL|variable|optParameters
name|'optParameters'
op|'='
op|'['
nl|'\n'
op|'('
string|"'torture-device'"
op|','
string|"'t'"
op|','
nl|'\n'
string|"'comfy-chair'"
op|','
nl|'\n'
string|"'set preferred torture device'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HolyQuestOptions
dedent|''
name|'class'
name|'HolyQuestOptions'
op|'('
name|'usage'
op|'.'
name|'Options'
op|')'
op|':'
newline|'\n'
DECL|variable|optFlags
indent|'    '
name|'optFlags'
op|'='
op|'['
op|'('
string|"'horseback'"
op|','
string|"'h'"
op|','
nl|'\n'
string|"'use a horse'"
op|')'
op|','
nl|'\n'
op|'('
string|"'for-grail'"
op|','
string|"'g'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SubCommandOptions
dedent|''
name|'class'
name|'SubCommandOptions'
op|'('
name|'usage'
op|'.'
name|'Options'
op|')'
op|':'
newline|'\n'
DECL|variable|optFlags
indent|'    '
name|'optFlags'
op|'='
op|'['
op|'('
string|"'europian-swallow'"
op|','
name|'None'
op|','
nl|'\n'
string|"'set default swallow type to Europian'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
DECL|variable|subCommands
name|'subCommands'
op|'='
op|'['
nl|'\n'
op|'('
string|"'inquisition'"
op|','
string|"'inquest'"
op|','
name|'InquisitionOptions'
op|','
nl|'\n'
string|"'Perform an inquisition'"
op|')'
op|','
nl|'\n'
op|'('
string|"'holyquest'"
op|','
string|"'quest'"
op|','
name|'HolyQuestOptions'
op|','
nl|'\n'
string|"'Embark upon a holy quest'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SubCommandTest
dedent|''
name|'class'
name|'SubCommandTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_simpleSubcommand
indent|'    '
name|'def'
name|'test_simpleSubcommand'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'o'
op|'='
name|'SubCommandOptions'
op|'('
op|')'
newline|'\n'
name|'o'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--europian-swallow'"
op|','
string|"'inquisition'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'['
string|"'europian-swallow'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subCommand'
op|','
string|"'inquisition'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|','
name|'InquisitionOptions'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|'['
string|"'expect'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|'['
string|"'torture-device'"
op|']'
op|','
string|"'comfy-chair'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_subcommandWithFlagsAndOptions
dedent|''
name|'def'
name|'test_subcommandWithFlagsAndOptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'o'
op|'='
name|'SubCommandOptions'
op|'('
op|')'
newline|'\n'
name|'o'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'inquisition'"
op|','
string|"'--expect'"
op|','
string|"'--torture-device=feather'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'['
string|"'europian-swallow'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subCommand'
op|','
string|"'inquisition'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|','
name|'InquisitionOptions'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|'['
string|"'expect'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|'['
string|"'torture-device'"
op|']'
op|','
string|"'feather'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_subcommandAliasWithFlagsAndOptions
dedent|''
name|'def'
name|'test_subcommandAliasWithFlagsAndOptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'o'
op|'='
name|'SubCommandOptions'
op|'('
op|')'
newline|'\n'
name|'o'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'inquest'"
op|','
string|"'--expect'"
op|','
string|"'--torture-device=feather'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'['
string|"'europian-swallow'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subCommand'
op|','
string|"'inquisition'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|','
name|'InquisitionOptions'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|'['
string|"'expect'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|'['
string|"'torture-device'"
op|']'
op|','
string|"'feather'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_anotherSubcommandWithFlagsAndOptions
dedent|''
name|'def'
name|'test_anotherSubcommandWithFlagsAndOptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'o'
op|'='
name|'SubCommandOptions'
op|'('
op|')'
newline|'\n'
name|'o'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'holyquest'"
op|','
string|"'--for-grail'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'['
string|"'europian-swallow'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subCommand'
op|','
string|"'holyquest'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|','
name|'HolyQuestOptions'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|'['
string|"'horseback'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|'['
string|"'for-grail'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_noSubcommand
dedent|''
name|'def'
name|'test_noSubcommand'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'o'
op|'='
name|'SubCommandOptions'
op|'('
op|')'
newline|'\n'
name|'o'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--europian-swallow'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'['
string|"'europian-swallow'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subCommand'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'hasattr'
op|'('
name|'o'
op|','
string|"'subOptions'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_defaultSubcommand
dedent|''
name|'def'
name|'test_defaultSubcommand'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'o'
op|'='
name|'SubCommandOptions'
op|'('
op|')'
newline|'\n'
name|'o'
op|'.'
name|'defaultSubCommand'
op|'='
string|"'inquest'"
newline|'\n'
name|'o'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--europian-swallow'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'['
string|"'europian-swallow'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subCommand'
op|','
string|"'inquisition'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|','
name|'InquisitionOptions'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|'['
string|"'expect'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|'['
string|"'torture-device'"
op|']'
op|','
string|"'comfy-chair'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_subCommandParseOptionsHasParent
dedent|''
name|'def'
name|'test_subCommandParseOptionsHasParent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|SubOpt
indent|'        '
name|'class'
name|'SubOpt'
op|'('
name|'usage'
op|'.'
name|'Options'
op|')'
op|':'
newline|'\n'
DECL|member|parseOptions
indent|'            '
name|'def'
name|'parseOptions'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sawParent'
op|'='
name|'self'
op|'.'
name|'parent'
newline|'\n'
name|'usage'
op|'.'
name|'Options'
op|'.'
name|'parseOptions'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
DECL|class|Opt
dedent|''
dedent|''
name|'class'
name|'Opt'
op|'('
name|'usage'
op|'.'
name|'Options'
op|')'
op|':'
newline|'\n'
DECL|variable|subCommands
indent|'            '
name|'subCommands'
op|'='
op|'['
nl|'\n'
op|'('
string|"'foo'"
op|','
string|"'f'"
op|','
name|'SubOpt'
op|','
string|"'bar'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
dedent|''
name|'o'
op|'='
name|'Opt'
op|'('
op|')'
newline|'\n'
name|'o'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'hasattr'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|','
string|"'sawParent'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'o'
op|'.'
name|'subOptions'
op|'.'
name|'sawParent'
op|','
name|'o'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_subCommandInTwoPlaces
dedent|''
name|'def'
name|'test_subCommandInTwoPlaces'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The .parent pointer is correct even when the same Options class is\n        used twice.\n        """'
newline|'\n'
DECL|class|SubOpt
name|'class'
name|'SubOpt'
op|'('
name|'usage'
op|'.'
name|'Options'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
DECL|class|OptFoo
dedent|''
name|'class'
name|'OptFoo'
op|'('
name|'usage'
op|'.'
name|'Options'
op|')'
op|':'
newline|'\n'
DECL|variable|subCommands
indent|'            '
name|'subCommands'
op|'='
op|'['
nl|'\n'
op|'('
string|"'foo'"
op|','
string|"'f'"
op|','
name|'SubOpt'
op|','
string|"'quux'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
DECL|class|OptBar
dedent|''
name|'class'
name|'OptBar'
op|'('
name|'usage'
op|'.'
name|'Options'
op|')'
op|':'
newline|'\n'
DECL|variable|subCommands
indent|'            '
name|'subCommands'
op|'='
op|'['
nl|'\n'
op|'('
string|"'bar'"
op|','
string|"'b'"
op|','
name|'SubOpt'
op|','
string|"'quux'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
dedent|''
name|'oFoo'
op|'='
name|'OptFoo'
op|'('
op|')'
newline|'\n'
name|'oFoo'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
newline|'\n'
name|'oBar'
op|'='
name|'OptBar'
op|'('
op|')'
newline|'\n'
name|'oBar'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'bar'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'hasattr'
op|'('
name|'oFoo'
op|'.'
name|'subOptions'
op|','
string|"'parent'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'hasattr'
op|'('
name|'oBar'
op|'.'
name|'subOptions'
op|','
string|"'parent'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessIdentical'
op|'('
name|'oFoo'
op|'.'
name|'subOptions'
op|'.'
name|'parent'
op|','
name|'oFoo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessIdentical'
op|'('
name|'oBar'
op|'.'
name|'subOptions'
op|'.'
name|'parent'
op|','
name|'oBar'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HelpStringTest
dedent|''
dedent|''
name|'class'
name|'HelpStringTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Instantiate a well-behaved Options class.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'niceArgV'
op|'='
op|'('
string|'"--long Alpha -n Beta "'
nl|'\n'
string|'"--shortless Gamma -f --myflag "'
nl|'\n'
string|'"--myparam Tofu"'
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'nice'
op|'='
name|'WellBehaved'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_noGoBoom
dedent|''
name|'def'
name|'test_noGoBoom'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        __str__ shouldn\'t go boom.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'nice'
op|'.'
name|'__str__'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
name|'e'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_whitespaceStripFlagsAndParameters
dedent|''
dedent|''
name|'def'
name|'test_whitespaceStripFlagsAndParameters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Extra whitespace in flag and parameters docs is stripped.\n        """'
newline|'\n'
comment|"# We test this by making sure aflag and it's help string are on the"
nl|'\n'
comment|'# same line.'
nl|'\n'
name|'lines'
op|'='
op|'['
name|'s'
name|'for'
name|'s'
name|'in'
name|'str'
op|'('
name|'self'
op|'.'
name|'nice'
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
name|'if'
name|'s'
op|'.'
name|'find'
op|'('
string|'"aflag"'
op|')'
op|'>='
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'len'
op|'('
name|'lines'
op|')'
op|'>'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'lines'
op|'['
number|'0'
op|']'
op|'.'
name|'find'
op|'('
string|'"flagallicious"'
op|')'
op|'>='
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PortCoerceTestCase
dedent|''
dedent|''
name|'class'
name|'PortCoerceTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test the behavior of L{usage.portCoerce}.\n    """'
newline|'\n'
DECL|member|test_validCoerce
name|'def'
name|'test_validCoerce'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the answers with valid input.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'0'
op|','
name|'usage'
op|'.'
name|'portCoerce'
op|'('
string|'"0"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'3210'
op|','
name|'usage'
op|'.'
name|'portCoerce'
op|'('
string|'"3210"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'65535'
op|','
name|'usage'
op|'.'
name|'portCoerce'
op|'('
string|'"65535"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_errorCoerce
dedent|''
name|'def'
name|'test_errorCoerce'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test error path.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'usage'
op|'.'
name|'portCoerce'
op|','
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'usage'
op|'.'
name|'portCoerce'
op|','
string|'"-21"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'usage'
op|'.'
name|'portCoerce'
op|','
string|'"212189"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'usage'
op|'.'
name|'portCoerce'
op|','
string|'"foo"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'unittest'
op|'.'
name|'main'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
endmarker|''
end_unit

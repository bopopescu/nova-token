begin_unit
comment|'# Copyright (c) 2006 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTest cases for twisted.python.zshcomp\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'os'
op|'.'
name|'path'
newline|'\n'
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'zshcomp'
op|','
name|'usage'
newline|'\n'
nl|'\n'
DECL|class|ZshcompTestCase
name|'class'
name|'ZshcompTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the zsh completion function builder in twisted/python/zshcomp.py\n    """'
newline|'\n'
DECL|member|test_buildAll
name|'def'
name|'test_buildAll'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build all the completion functions for twisted commands - no errors\n        should be raised\n        """'
newline|'\n'
name|'dirname'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'dirname'
op|')'
newline|'\n'
name|'skippedCmds'
op|'='
op|'['
name|'x'
op|'['
number|'0'
op|']'
name|'for'
name|'x'
name|'in'
name|'zshcomp'
op|'.'
name|'makeCompFunctionFiles'
op|'('
name|'dirname'
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'# verify a zsh function was created for each twisted command'
nl|'\n'
name|'for'
name|'info'
name|'in'
name|'zshcomp'
op|'.'
name|'generateFor'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'info'
op|'['
number|'0'
op|']'
name|'in'
name|'skippedCmds'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'funcPath'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'dirname'
op|','
string|"'_'"
op|'+'
name|'info'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'funcPath'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_accumulateMetadata
dedent|''
dedent|''
name|'def'
name|'test_accumulateMetadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the zsh_* variables you can place on Option classes gets\n        picked up correctly\n        """'
newline|'\n'
name|'opts'
op|'='
name|'TestOptions2'
op|'('
op|')'
newline|'\n'
name|'ag'
op|'='
name|'zshcomp'
op|'.'
name|'ArgumentsGenerator'
op|'('
string|"'dummy_cmd'"
op|','
name|'opts'
op|','
string|"'dummy_value'"
op|')'
newline|'\n'
nl|'\n'
name|'altArgDescr'
op|'='
name|'TestOptions'
op|'.'
name|'zsh_altArgDescr'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'altArgDescr'
op|'.'
name|'update'
op|'('
name|'TestOptions2'
op|'.'
name|'zsh_altArgDescr'
op|')'
newline|'\n'
nl|'\n'
name|'actionDescr'
op|'='
name|'TestOptions'
op|'.'
name|'zsh_actionDescr'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'actionDescr'
op|'.'
name|'update'
op|'('
name|'TestOptions2'
op|'.'
name|'zsh_actionDescr'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failUnlessEquals'
op|'('
name|'ag'
op|'.'
name|'altArgDescr'
op|','
name|'altArgDescr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEquals'
op|'('
name|'ag'
op|'.'
name|'actionDescr'
op|','
name|'actionDescr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEquals'
op|'('
name|'ag'
op|'.'
name|'multiUse'
op|','
name|'TestOptions'
op|'.'
name|'zsh_multiUse'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEquals'
op|'('
name|'ag'
op|'.'
name|'mutuallyExclusive'
op|','
nl|'\n'
name|'TestOptions'
op|'.'
name|'zsh_mutuallyExclusive'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEquals'
op|'('
name|'ag'
op|'.'
name|'actions'
op|','
name|'TestOptions'
op|'.'
name|'zsh_actions'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEquals'
op|'('
name|'ag'
op|'.'
name|'extras'
op|','
name|'TestOptions'
op|'.'
name|'zsh_extras'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_accumulateAdditionalOptions
dedent|''
name|'def'
name|'test_accumulateAdditionalOptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that we pick up options that are only defined by having an\n        appropriately named method on your Options class,\n        e.g. def opt_foo(self, foo)\n        """'
newline|'\n'
name|'opts'
op|'='
name|'TestOptions2'
op|'('
op|')'
newline|'\n'
name|'ag'
op|'='
name|'zshcomp'
op|'.'
name|'ArgumentsGenerator'
op|'('
string|"'dummy_cmd'"
op|','
name|'opts'
op|','
string|"'dummy_value'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
string|"'nocrash'"
name|'in'
name|'ag'
op|'.'
name|'optFlags_d'
name|'and'
string|"'nocrash'"
name|'in'
name|'ag'
op|'.'
name|'optAll_d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
string|"'difficulty'"
name|'in'
name|'ag'
op|'.'
name|'optParams_d'
name|'and'
string|"'difficulty'"
name|'in'
name|'ag'
op|'.'
name|'optAll_d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_verifyZshNames
dedent|''
name|'def'
name|'test_verifyZshNames'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that using a parameter/flag name that doesn\'t exist\n        will raise an error\n        """'
newline|'\n'
DECL|class|TmpOptions
name|'class'
name|'TmpOptions'
op|'('
name|'TestOptions2'
op|')'
op|':'
newline|'\n'
DECL|variable|zsh_actions
indent|'            '
name|'zsh_actions'
op|'='
op|'{'
string|"'detaill'"
op|':'
string|"'foo'"
op|'}'
comment|'# Note typo of detail'
newline|'\n'
nl|'\n'
dedent|''
name|'opts'
op|'='
name|'TmpOptions'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'ValueError'
op|','
name|'zshcomp'
op|'.'
name|'ArgumentsGenerator'
op|','
nl|'\n'
string|"'dummy_cmd'"
op|','
name|'opts'
op|','
string|"'dummy_value'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zshCode
dedent|''
name|'def'
name|'test_zshCode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate a completion function, and test the textual output\n        against a known correct output\n        """'
newline|'\n'
name|'cmd_name'
op|'='
string|"'testprog'"
newline|'\n'
name|'opts'
op|'='
name|'CodeTestOptions'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'b'
op|'='
name|'zshcomp'
op|'.'
name|'Builder'
op|'('
name|'cmd_name'
op|','
name|'opts'
op|','
name|'f'
op|')'
newline|'\n'
name|'b'
op|'.'
name|'write'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEquals'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|','
name|'testOutput1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_skipBuild
dedent|''
name|'def'
name|'test_skipBuild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that makeCompFunctionFiles skips building for commands whos\n        script module cannot be imported\n        """'
newline|'\n'
name|'generateFor'
op|'='
op|'['
op|'('
string|"'test_cmd'"
op|','
string|"'no.way.your.gonna.import.this'"
op|','
string|"'Foo'"
op|')'
op|']'
newline|'\n'
name|'skips'
op|'='
name|'zshcomp'
op|'.'
name|'makeCompFunctionFiles'
op|'('
string|"'out_dir'"
op|','
name|'generateFor'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
comment|'# no exceptions should be raised. hooray.'
nl|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'skips'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'skips'
op|'['
number|'0'
op|']'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'skips'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
string|"'test_cmd'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'skips'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|','
name|'ImportError'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'self'
op|','
name|'ImportError'
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestOptions
dedent|''
dedent|''
name|'class'
name|'TestOptions'
op|'('
name|'usage'
op|'.'
name|'Options'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Command-line options for an imaginary game\n    """'
newline|'\n'
DECL|variable|optFlags
name|'optFlags'
op|'='
op|'['
op|'['
string|"'fokker'"
op|','
string|"'f'"
op|','
nl|'\n'
string|"'Select the Fokker Dr.I as your dogfighter aircraft'"
op|']'
op|','
nl|'\n'
op|'['
string|"'albatros'"
op|','
string|"'a'"
op|','
nl|'\n'
string|"'Select the Albatros D-III as your dogfighter aircraft'"
op|']'
op|','
nl|'\n'
op|'['
string|"'spad'"
op|','
string|"'s'"
op|','
nl|'\n'
string|"'Select the SPAD S.VII as your dogfighter aircraft'"
op|']'
op|','
nl|'\n'
op|'['
string|"'bristol'"
op|','
string|"'b'"
op|','
nl|'\n'
string|"'Select the Bristol Scout as your dogfighter aircraft'"
op|']'
op|','
nl|'\n'
op|'['
string|"'physics'"
op|','
string|"'p'"
op|','
nl|'\n'
string|"'Enable secret Twisted physics engine'"
op|']'
op|','
nl|'\n'
op|'['
string|"'jam'"
op|','
string|"'j'"
op|','
nl|'\n'
string|"'Enable a small chance that your machine guns will jam!'"
op|']'
op|','
nl|'\n'
op|'['
string|"'verbose'"
op|','
string|"'v'"
op|','
nl|'\n'
string|"'Verbose logging (may be specified more than once)'"
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|optParameters
name|'optParameters'
op|'='
op|'['
op|'['
string|"'pilot-name'"
op|','
name|'None'
op|','
string|'"What\'s your name, Ace?"'
op|','
nl|'\n'
string|"'Manfred von Richthofen'"
op|']'
op|','
nl|'\n'
op|'['
string|"'detail'"
op|','
string|"'d'"
op|','
nl|'\n'
string|"'Select the level of rendering detail (1-5)'"
op|','
string|"'3'"
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|zsh_altArgDescr
name|'zsh_altArgDescr'
op|'='
op|'{'
string|"'physics'"
op|':'
string|"'Twisted-Physics'"
op|','
nl|'\n'
string|"'detail'"
op|':'
string|"'Rendering detail level'"
op|'}'
newline|'\n'
DECL|variable|zsh_actionDescr
name|'zsh_actionDescr'
op|'='
op|'{'
string|"'detail'"
op|':'
string|"'Pick your detail'"
op|'}'
newline|'\n'
DECL|variable|zsh_multiUse
name|'zsh_multiUse'
op|'='
op|'['
string|"'verbose'"
op|']'
newline|'\n'
DECL|variable|zsh_mutuallyExclusive
name|'zsh_mutuallyExclusive'
op|'='
op|'['
op|'['
string|"'fokker'"
op|','
string|"'albatros'"
op|','
string|"'spad'"
op|','
string|"'bristol'"
op|']'
op|']'
newline|'\n'
DECL|variable|zsh_actions
name|'zsh_actions'
op|'='
op|'{'
string|"'detail'"
op|':'
string|"'(1 2 3 4 5)'"
op|'}'
newline|'\n'
DECL|variable|zsh_extras
name|'zsh_extras'
op|'='
op|'['
string|"':saved game file to load:_files'"
op|']'
newline|'\n'
nl|'\n'
DECL|class|TestOptions2
dedent|''
name|'class'
name|'TestOptions2'
op|'('
name|'TestOptions'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Extend the options and zsh metadata provided by TestOptions. zshcomp must\n    accumulate options and metadata from all classes in the hiearchy so this\n    is important for testing\n    """'
newline|'\n'
DECL|variable|optFlags
name|'optFlags'
op|'='
op|'['
op|'['
string|"'no-stalls'"
op|','
name|'None'
op|','
nl|'\n'
string|"'Turn off the ability to stall your aircraft'"
op|']'
op|']'
newline|'\n'
DECL|variable|optParameters
name|'optParameters'
op|'='
op|'['
op|'['
string|"'reality-level'"
op|','
name|'None'
op|','
nl|'\n'
string|"'Select the level of physics reality (1-5)'"
op|','
string|"'5'"
op|']'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|zsh_altArgDescr
name|'zsh_altArgDescr'
op|'='
op|'{'
string|"'no-stalls'"
op|':'
string|"'Can\\'t stall your plane'"
op|'}'
newline|'\n'
DECL|variable|zsh_actionDescr
name|'zsh_actionDescr'
op|'='
op|'{'
string|"'reality-level'"
op|':'
string|"'Physics reality level'"
op|'}'
newline|'\n'
nl|'\n'
DECL|member|opt_nocrash
name|'def'
name|'opt_nocrash'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Select that you can\'t crash your plane"""'
newline|'\n'
nl|'\n'
DECL|member|opt_difficulty
dedent|''
name|'def'
name|'opt_difficulty'
op|'('
name|'self'
op|','
name|'difficulty'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""How tough are you? (1-10)"""'
newline|'\n'
nl|'\n'
DECL|function|_accuracyAction
dedent|''
dedent|''
name|'def'
name|'_accuracyAction'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'(1 2 3)'"
newline|'\n'
nl|'\n'
DECL|class|CodeTestOptions
dedent|''
name|'class'
name|'CodeTestOptions'
op|'('
name|'usage'
op|'.'
name|'Options'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Command-line options for an imaginary program\n    """'
newline|'\n'
DECL|variable|optFlags
name|'optFlags'
op|'='
op|'['
op|'['
string|"'color'"
op|','
string|"'c'"
op|','
string|"'Turn on color output'"
op|']'
op|','
nl|'\n'
op|'['
string|"'gray'"
op|','
string|"'g'"
op|','
string|"'Turn on gray-scale output'"
op|']'
op|','
nl|'\n'
op|'['
string|"'verbose'"
op|','
string|"'v'"
op|','
nl|'\n'
string|"'Verbose logging (may be specified more than once)'"
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|optParameters
name|'optParameters'
op|'='
op|'['
op|'['
string|"'optimization'"
op|','
name|'None'
op|','
nl|'\n'
string|"'Select the level of optimization (1-5)'"
op|','
string|"'5'"
op|']'
op|','
nl|'\n'
op|'['
string|"'accuracy'"
op|','
string|"'a'"
op|','
nl|'\n'
string|"'Select the level of accuracy (1-3)'"
op|','
string|"'3'"
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|zsh_altArgDescr
name|'zsh_altArgDescr'
op|'='
op|'{'
string|"'color'"
op|':'
string|"'Color on'"
op|','
nl|'\n'
string|"'optimization'"
op|':'
string|"'Optimization level'"
op|'}'
newline|'\n'
DECL|variable|zsh_actionDescr
name|'zsh_actionDescr'
op|'='
op|'{'
string|"'optimization'"
op|':'
string|"'Optimization?'"
op|','
nl|'\n'
string|"'accuracy'"
op|':'
string|"'Accuracy?'"
op|'}'
newline|'\n'
DECL|variable|zsh_multiUse
name|'zsh_multiUse'
op|'='
op|'['
string|"'verbose'"
op|']'
newline|'\n'
DECL|variable|zsh_mutuallyExclusive
name|'zsh_mutuallyExclusive'
op|'='
op|'['
op|'['
string|"'color'"
op|','
string|"'gray'"
op|']'
op|']'
newline|'\n'
DECL|variable|zsh_actions
name|'zsh_actions'
op|'='
op|'{'
string|"'optimization'"
op|':'
string|"'(1 2 3 4 5)'"
op|','
nl|'\n'
string|"'accuracy'"
op|':'
name|'_accuracyAction'
op|'}'
newline|'\n'
DECL|variable|zsh_extras
name|'zsh_extras'
op|'='
op|'['
string|"':output file:_files'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'testOutput1'
op|'='
string|'"""#compdef testprog\n_arguments -s -A "-*" \\\\\n\':output file:_files\' \\\\\n\'(--accuracy)-a[3]:Accuracy?:(1 2 3)\' \\\\\n\'(-a)--accuracy=[3]:Accuracy?:(1 2 3)\' \\\\\n\'(--gray -g --color)-c[Color on]\' \\\\\n\'(--gray -g -c)--color[Color on]\' \\\\\n\'(--color -c --gray)-g[Turn on gray-scale output]\' \\\\\n\'(--color -c -g)--gray[Turn on gray-scale output]\' \\\\\n\'--help[Display this help and exit.]\' \\\\\n\'--optimization=[Optimization level]:Optimization?:(1 2 3 4 5)\' \\\\\n\'*-v[Verbose logging (may be specified more than once)]\' \\\\\n\'*--verbose[Verbose logging (may be specified more than once)]\' \\\\\n\'--version[version]\' \\\\\n&& return 0\n"""'
newline|'\n'
nl|'\n'
endmarker|''
end_unit

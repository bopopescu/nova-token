begin_unit
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'text'
newline|'\n'
name|'import'
name|'string'
newline|'\n'
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
name|'sampleText'
op|'='
string|'"""Every attempt to employ mathematical methods in the study of chemical\nquestions must be considered profoundly irrational and contrary to the\nspirit of chemistry ...  If mathematical analysis should ever hold a\nprominent place in chemistry - an aberration which is happily almost\nimpossible - it would occasion a rapid and widespread degeneration of that\nscience.\n           --  Auguste Comte, Philosophie Positive, Paris, 1838\n"""'
newline|'\n'
nl|'\n'
DECL|variable|lineWidth
name|'lineWidth'
op|'='
number|'72'
newline|'\n'
nl|'\n'
DECL|function|set_lineWidth
name|'def'
name|'set_lineWidth'
op|'('
name|'n'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'lineWidth'
newline|'\n'
name|'lineWidth'
op|'='
name|'n'
newline|'\n'
nl|'\n'
DECL|class|WrapTest
dedent|''
name|'class'
name|'WrapTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sampleSplitText'
op|'='
name|'string'
op|'.'
name|'split'
op|'('
name|'sampleText'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'output'
op|'='
name|'text'
op|'.'
name|'wordWrap'
op|'('
name|'sampleText'
op|','
name|'lineWidth'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_wordCount
dedent|''
name|'def'
name|'test_wordCount'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Compare the number of words."""'
newline|'\n'
name|'words'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'output'
op|':'
newline|'\n'
indent|'            '
name|'words'
op|'.'
name|'extend'
op|'('
name|'string'
op|'.'
name|'split'
op|'('
name|'line'
op|')'
op|')'
newline|'\n'
dedent|''
name|'wordCount'
op|'='
name|'len'
op|'('
name|'words'
op|')'
newline|'\n'
name|'sampleTextWordCount'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'sampleSplitText'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'wordCount'
op|','
name|'sampleTextWordCount'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_wordMatch
dedent|''
name|'def'
name|'test_wordMatch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Compare the lists of words."""'
newline|'\n'
nl|'\n'
name|'words'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'output'
op|':'
newline|'\n'
indent|'            '
name|'words'
op|'.'
name|'extend'
op|'('
name|'string'
op|'.'
name|'split'
op|'('
name|'line'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Using failUnlessEqual here prints out some'
nl|'\n'
comment|'# rather too long lists.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'sampleSplitText'
op|'=='
name|'words'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lineLength
dedent|''
name|'def'
name|'test_lineLength'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check the length of the lines."""'
newline|'\n'
name|'failures'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'output'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'len'
op|'('
name|'line'
op|')'
op|'<='
name|'lineWidth'
op|':'
newline|'\n'
indent|'                '
name|'failures'
op|'.'
name|'append'
op|'('
name|'len'
op|'('
name|'line'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'failures'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"%d of %d lines were too long.\\n"'
nl|'\n'
string|'"%d < %s"'
op|'%'
op|'('
name|'len'
op|'('
name|'failures'
op|')'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'output'
op|')'
op|','
nl|'\n'
name|'lineWidth'
op|','
name|'failures'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SplitTest
dedent|''
dedent|''
dedent|''
name|'class'
name|'SplitTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests for text.splitQuoted()"""'
newline|'\n'
nl|'\n'
DECL|member|test_oneWord
name|'def'
name|'test_oneWord'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Splitting strings with one-word phrases."""'
newline|'\n'
name|'s'
op|'='
string|'\'This code "works."\''
newline|'\n'
name|'r'
op|'='
name|'text'
op|'.'
name|'splitQuoted'
op|'('
name|'s'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'['
string|"'This'"
op|','
string|"'code'"
op|','
string|"'works.'"
op|']'
op|','
name|'r'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_multiWord
dedent|''
name|'def'
name|'test_multiWord'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
string|'\'The "hairy monkey" likes pie.\''
newline|'\n'
name|'r'
op|'='
name|'text'
op|'.'
name|'splitQuoted'
op|'('
name|'s'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'['
string|"'The'"
op|','
string|"'hairy monkey'"
op|','
string|"'likes'"
op|','
string|"'pie.'"
op|']'
op|','
name|'r'
op|')'
newline|'\n'
nl|'\n'
comment|'# Some of the many tests that would fail:'
nl|'\n'
nl|'\n'
comment|'#def test_preserveWhitespace(self):'
nl|'\n'
comment|'#    phrase = \'"MANY     SPACES"\''
nl|'\n'
comment|"#    s = 'With %s between.' % (phrase,)"
nl|'\n'
comment|'#    r = text.splitQuoted(s)'
nl|'\n'
comment|"#    self.failUnlessEqual(['With', phrase, 'between.'], r)"
nl|'\n'
nl|'\n'
comment|'#def test_escapedSpace(self):'
nl|'\n'
comment|'#    s = r"One\\ Phrase"'
nl|'\n'
comment|'#    r = text.splitQuoted(s)'
nl|'\n'
comment|'#    self.failUnlessEqual(["One Phrase"], r)'
nl|'\n'
nl|'\n'
DECL|class|StrFileTest
dedent|''
dedent|''
name|'class'
name|'StrFileTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'io'
op|'='
name|'StringIO'
op|'('
string|'"this is a test string"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|test_1_f
dedent|''
name|'def'
name|'test_1_f'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'False'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"x"'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_1_1
dedent|''
name|'def'
name|'test_1_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"t"'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_1_2
dedent|''
name|'def'
name|'test_1_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"h"'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_1_3
dedent|''
name|'def'
name|'test_1_3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"i"'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_1_4
dedent|''
name|'def'
name|'test_1_4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"s"'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_1_5
dedent|''
name|'def'
name|'test_1_5'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"n"'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_1_6
dedent|''
name|'def'
name|'test_1_6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"g"'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_3_1
dedent|''
name|'def'
name|'test_3_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"thi"'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_3_2
dedent|''
name|'def'
name|'test_3_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"his"'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_3_3
dedent|''
name|'def'
name|'test_3_3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"is "'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_3_4
dedent|''
name|'def'
name|'test_3_4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"ing"'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_3_f
dedent|''
name|'def'
name|'test_3_f'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'False'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"bla"'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_large_1
dedent|''
name|'def'
name|'test_large_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"this is a test"'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_large_2
dedent|''
name|'def'
name|'test_large_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"is a test string"'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_large_f
dedent|''
name|'def'
name|'test_large_f'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'False'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"ds jhfsa k fdas"'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_overlarge_f
dedent|''
name|'def'
name|'test_overlarge_f'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'False'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"djhsakj dhsa fkhsa s,mdbnfsauiw bndasdf hreew"'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_self
dedent|''
name|'def'
name|'test_self'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"this is a test string"'
op|','
name|'self'
op|'.'
name|'io'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_insensitive
dedent|''
name|'def'
name|'test_insensitive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'True'
op|','
name|'text'
op|'.'
name|'strFile'
op|'('
string|'"ThIs is A test STRING"'
op|','
name|'self'
op|'.'
name|'io'
op|','
name|'False'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|testCases
dedent|''
dedent|''
name|'testCases'
op|'='
op|'['
name|'WrapTest'
op|','
name|'SplitTest'
op|','
name|'StrFileTest'
op|']'
newline|'\n'
nl|'\n'
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'os'
newline|'\n'
name|'import'
name|'new'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'rebuild'
newline|'\n'
nl|'\n'
name|'import'
name|'crash_test_dummy'
newline|'\n'
DECL|variable|f
name|'f'
op|'='
name|'crash_test_dummy'
op|'.'
name|'foo'
newline|'\n'
nl|'\n'
DECL|class|Foo
name|'class'
name|'Foo'
op|':'
name|'pass'
newline|'\n'
DECL|class|Bar
name|'class'
name|'Bar'
op|'('
name|'Foo'
op|')'
op|':'
name|'pass'
newline|'\n'
DECL|class|Baz
name|'class'
name|'Baz'
op|'('
name|'object'
op|')'
op|':'
name|'pass'
newline|'\n'
DECL|class|Buz
name|'class'
name|'Buz'
op|'('
name|'Bar'
op|','
name|'Baz'
op|')'
op|':'
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|HashRaisesRuntimeError
name|'class'
name|'HashRaisesRuntimeError'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Things that don\'t hash (raise an Exception) should be ignored by the\n    rebuilder.\n\n    @ivar hashCalled: C{bool} set to True when __hash__ is called.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'hashCalled'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'hashCalled'
op|'='
name|'True'
newline|'\n'
name|'raise'
name|'RuntimeError'
op|'('
string|"'not a TypeError!'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|unhashableObject
dedent|''
dedent|''
name|'unhashableObject'
op|'='
name|'None'
comment|'# set in test_hashException'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|RebuildTestCase
name|'class'
name|'RebuildTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Simple testcase for rebuilding, to at least exercise the code.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'libPath'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'libPath'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fakelibPath'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'libPath'
op|','
string|"'twisted_rebuild_fakelib'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'fakelibPath'
op|')'
newline|'\n'
name|'file'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'fakelibPath'
op|','
string|"'__init__.py'"
op|')'
op|','
string|"'w'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'path'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'libPath'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'path'
op|'.'
name|'remove'
op|'('
name|'self'
op|'.'
name|'libPath'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFileRebuild
dedent|''
name|'def'
name|'testFileRebuild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'sibpath'
newline|'\n'
name|'import'
name|'shutil'
op|','
name|'time'
newline|'\n'
name|'shutil'
op|'.'
name|'copyfile'
op|'('
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"myrebuilder1.py"'
op|')'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'fakelibPath'
op|','
string|'"myrebuilder.py"'
op|')'
op|')'
newline|'\n'
name|'from'
name|'twisted_rebuild_fakelib'
name|'import'
name|'myrebuilder'
newline|'\n'
name|'a'
op|'='
name|'myrebuilder'
op|'.'
name|'A'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'object'
newline|'\n'
dedent|''
name|'except'
name|'NameError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'twisted'
op|'.'
name|'test'
name|'import'
name|'test_rebuild'
newline|'\n'
name|'b'
op|'='
name|'myrebuilder'
op|'.'
name|'B'
op|'('
op|')'
newline|'\n'
DECL|class|C
name|'class'
name|'C'
op|'('
name|'myrebuilder'
op|'.'
name|'B'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'test_rebuild'
op|'.'
name|'C'
op|'='
name|'C'
newline|'\n'
name|'c'
op|'='
name|'C'
op|'('
op|')'
newline|'\n'
dedent|''
name|'i'
op|'='
name|'myrebuilder'
op|'.'
name|'Inherit'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'a'
op|'.'
name|'a'
op|'('
op|')'
op|','
string|"'a'"
op|')'
newline|'\n'
comment|'# necessary because the file has not "changed" if a second has not gone'
nl|'\n'
comment|"# by in unix.  This sucks, but it's not often that you'll be doing more"
nl|'\n'
comment|'# than one reload per second.'
nl|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1.1'
op|')'
newline|'\n'
name|'shutil'
op|'.'
name|'copyfile'
op|'('
name|'sibpath'
op|'('
name|'__file__'
op|','
string|'"myrebuilder2.py"'
op|')'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'fakelibPath'
op|','
string|'"myrebuilder.py"'
op|')'
op|')'
newline|'\n'
name|'rebuild'
op|'.'
name|'rebuild'
op|'('
name|'myrebuilder'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'object'
newline|'\n'
dedent|''
name|'except'
name|'NameError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'b2'
op|'='
name|'myrebuilder'
op|'.'
name|'B'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'b2'
op|'.'
name|'b'
op|'('
op|')'
op|','
string|"'c'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'b'
op|'.'
name|'b'
op|'('
op|')'
op|','
string|"'c'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'i'
op|'.'
name|'a'
op|'('
op|')'
op|','
string|"'d'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'a'
op|'.'
name|'a'
op|'('
op|')'
op|','
string|"'b'"
op|')'
newline|'\n'
comment|'# more work to be done on new-style classes'
nl|'\n'
comment|"# self.assertEquals(c.b(), 'c')"
nl|'\n'
nl|'\n'
DECL|member|testRebuild
dedent|''
name|'def'
name|'testRebuild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Rebuilding an unchanged module.\n        """'
newline|'\n'
comment|'# This test would actually pass if rebuild was a no-op, but it'
nl|'\n'
comment|"# ensures rebuild doesn't break stuff while being a less"
nl|'\n'
comment|'# complex test than testFileRebuild.'
nl|'\n'
nl|'\n'
name|'x'
op|'='
name|'crash_test_dummy'
op|'.'
name|'X'
op|'('
string|"'a'"
op|')'
newline|'\n'
nl|'\n'
name|'rebuild'
op|'.'
name|'rebuild'
op|'('
name|'crash_test_dummy'
op|','
name|'doLog'
op|'='
name|'False'
op|')'
newline|'\n'
comment|'# Instance rebuilding is triggered by attribute access.'
nl|'\n'
name|'x'
op|'.'
name|'do'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessIdentical'
op|'('
name|'x'
op|'.'
name|'__class__'
op|','
name|'crash_test_dummy'
op|'.'
name|'X'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failUnlessIdentical'
op|'('
name|'f'
op|','
name|'crash_test_dummy'
op|'.'
name|'foo'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testComponentInteraction
dedent|''
name|'def'
name|'testComponentInteraction'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'x'
op|'='
name|'crash_test_dummy'
op|'.'
name|'XComponent'
op|'('
op|')'
newline|'\n'
name|'x'
op|'.'
name|'setAdapter'
op|'('
name|'crash_test_dummy'
op|'.'
name|'IX'
op|','
name|'crash_test_dummy'
op|'.'
name|'XA'
op|')'
newline|'\n'
name|'oldComponent'
op|'='
name|'x'
op|'.'
name|'getComponent'
op|'('
name|'crash_test_dummy'
op|'.'
name|'IX'
op|')'
newline|'\n'
name|'rebuild'
op|'.'
name|'rebuild'
op|'('
name|'crash_test_dummy'
op|','
number|'0'
op|')'
newline|'\n'
name|'newComponent'
op|'='
name|'x'
op|'.'
name|'getComponent'
op|'('
name|'crash_test_dummy'
op|'.'
name|'IX'
op|')'
newline|'\n'
nl|'\n'
name|'newComponent'
op|'.'
name|'method'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'newComponent'
op|'.'
name|'__class__'
op|','
name|'crash_test_dummy'
op|'.'
name|'XA'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test that a duplicate registerAdapter is not allowed'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'components'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'ValueError'
op|','
name|'components'
op|'.'
name|'registerAdapter'
op|','
nl|'\n'
name|'crash_test_dummy'
op|'.'
name|'XA'
op|','
name|'crash_test_dummy'
op|'.'
name|'X'
op|','
nl|'\n'
name|'crash_test_dummy'
op|'.'
name|'IX'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUpdateInstance
dedent|''
name|'def'
name|'testUpdateInstance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'global'
name|'Foo'
op|','
name|'Buz'
newline|'\n'
nl|'\n'
name|'b'
op|'='
name|'Buz'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|Foo
name|'class'
name|'Foo'
op|':'
newline|'\n'
DECL|member|foo
indent|'            '
name|'def'
name|'foo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
DECL|class|Buz
dedent|''
dedent|''
name|'class'
name|'Buz'
op|'('
name|'Bar'
op|','
name|'Baz'
op|')'
op|':'
newline|'\n'
DECL|variable|x
indent|'            '
name|'x'
op|'='
number|'10'
newline|'\n'
nl|'\n'
dedent|''
name|'rebuild'
op|'.'
name|'updateInstance'
op|'('
name|'b'
op|')'
newline|'\n'
name|'assert'
name|'hasattr'
op|'('
name|'b'
op|','
string|"'foo'"
op|')'
op|','
string|'"Missing method on rebuilt instance"'
newline|'\n'
name|'assert'
name|'hasattr'
op|'('
name|'b'
op|','
string|"'x'"
op|')'
op|','
string|'"Missing class attribute on rebuilt instance"'
newline|'\n'
nl|'\n'
DECL|member|testBananaInteraction
dedent|''
name|'def'
name|'testBananaInteraction'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'rebuild'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
name|'import'
name|'banana'
newline|'\n'
name|'rebuild'
op|'.'
name|'latestClass'
op|'('
name|'banana'
op|'.'
name|'Banana'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_hashException
dedent|''
name|'def'
name|'test_hashException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Rebuilding something that has a __hash__ that raises a non-TypeError\n        shouldn\'t cause rebuild to die.\n        """'
newline|'\n'
name|'global'
name|'unhashableObject'
newline|'\n'
name|'unhashableObject'
op|'='
name|'HashRaisesRuntimeError'
op|'('
op|')'
newline|'\n'
DECL|function|_cleanup
name|'def'
name|'_cleanup'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'global'
name|'unhashableObject'
newline|'\n'
name|'unhashableObject'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'_cleanup'
op|')'
newline|'\n'
name|'rebuild'
op|'.'
name|'rebuild'
op|'('
name|'rebuild'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'unhashableObject'
op|'.'
name|'hashCalled'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NewStyleTestCase
dedent|''
dedent|''
name|'class'
name|'NewStyleTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for rebuilding new-style classes of various sorts.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'m'
op|'='
name|'new'
op|'.'
name|'module'
op|'('
string|"'whipping'"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'modules'
op|'['
string|"'whipping'"
op|']'
op|'='
name|'self'
op|'.'
name|'m'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'sys'
op|'.'
name|'modules'
op|'['
string|"'whipping'"
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'m'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_slots
dedent|''
name|'def'
name|'test_slots'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to rebuild a new style class with slots defined.\n        """'
newline|'\n'
name|'classDefinition'
op|'='
op|'('
nl|'\n'
string|'"class SlottedClass(object):\\n"'
nl|'\n'
string|'"    __slots__ = [\'a\']\\n"'
op|')'
newline|'\n'
nl|'\n'
name|'exec'
name|'classDefinition'
name|'in'
name|'self'
op|'.'
name|'m'
op|'.'
name|'__dict__'
newline|'\n'
name|'inst'
op|'='
name|'self'
op|'.'
name|'m'
op|'.'
name|'SlottedClass'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'a'
op|'='
number|'7'
newline|'\n'
name|'exec'
name|'classDefinition'
name|'in'
name|'self'
op|'.'
name|'m'
op|'.'
name|'__dict__'
newline|'\n'
name|'rebuild'
op|'.'
name|'updateInstance'
op|'('
name|'inst'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst'
op|'.'
name|'a'
op|','
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'type'
op|'('
name|'inst'
op|')'
op|','
name|'self'
op|'.'
name|'m'
op|'.'
name|'SlottedClass'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'sys'
op|'.'
name|'version_info'
op|'<'
op|'('
number|'2'
op|','
number|'6'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'test_slots'
op|'.'
name|'skip'
op|'='
string|'"__class__ assignment for class with slots is only available starting Python 2.6"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_errorSlots
dedent|''
name|'def'
name|'test_errorSlots'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to rebuild a new style class with slots defined: this should fail.\n        """'
newline|'\n'
name|'classDefinition'
op|'='
op|'('
nl|'\n'
string|'"class SlottedClass(object):\\n"'
nl|'\n'
string|'"    __slots__ = [\'a\']\\n"'
op|')'
newline|'\n'
nl|'\n'
name|'exec'
name|'classDefinition'
name|'in'
name|'self'
op|'.'
name|'m'
op|'.'
name|'__dict__'
newline|'\n'
name|'inst'
op|'='
name|'self'
op|'.'
name|'m'
op|'.'
name|'SlottedClass'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'a'
op|'='
number|'7'
newline|'\n'
name|'exec'
name|'classDefinition'
name|'in'
name|'self'
op|'.'
name|'m'
op|'.'
name|'__dict__'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'rebuild'
op|'.'
name|'RebuildError'
op|','
name|'rebuild'
op|'.'
name|'updateInstance'
op|','
name|'inst'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'sys'
op|'.'
name|'version_info'
op|'>='
op|'('
number|'2'
op|','
number|'6'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'test_errorSlots'
op|'.'
name|'skip'
op|'='
string|'"__class__ assignment for class with slots should work starting Python 2.6"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_typeSubclass
dedent|''
name|'def'
name|'test_typeSubclass'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Try to rebuild a base type subclass.\n        """'
newline|'\n'
name|'classDefinition'
op|'='
op|'('
nl|'\n'
string|'"class ListSubclass(list):\\n"'
nl|'\n'
string|'"    pass\\n"'
op|')'
newline|'\n'
nl|'\n'
name|'exec'
name|'classDefinition'
name|'in'
name|'self'
op|'.'
name|'m'
op|'.'
name|'__dict__'
newline|'\n'
name|'inst'
op|'='
name|'self'
op|'.'
name|'m'
op|'.'
name|'ListSubclass'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'append'
op|'('
number|'2'
op|')'
newline|'\n'
name|'exec'
name|'classDefinition'
name|'in'
name|'self'
op|'.'
name|'m'
op|'.'
name|'__dict__'
newline|'\n'
name|'rebuild'
op|'.'
name|'updateInstance'
op|'('
name|'inst'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst'
op|'['
number|'0'
op|']'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'type'
op|'('
name|'inst'
op|')'
op|','
name|'self'
op|'.'
name|'m'
op|'.'
name|'ListSubclass'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_instanceSlots
dedent|''
name|'def'
name|'test_instanceSlots'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that when rebuilding an instance with a __slots__ attribute, it\n        fails accurately instead of giving a L{rebuild.RebuildError}.\n        """'
newline|'\n'
name|'classDefinition'
op|'='
op|'('
nl|'\n'
string|'"class NotSlottedClass(object):\\n"'
nl|'\n'
string|'"    pass\\n"'
op|')'
newline|'\n'
nl|'\n'
name|'exec'
name|'classDefinition'
name|'in'
name|'self'
op|'.'
name|'m'
op|'.'
name|'__dict__'
newline|'\n'
name|'inst'
op|'='
name|'self'
op|'.'
name|'m'
op|'.'
name|'NotSlottedClass'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'__slots__'
op|'='
op|'['
string|"'a'"
op|']'
newline|'\n'
name|'classDefinition'
op|'='
op|'('
nl|'\n'
string|'"class NotSlottedClass:\\n"'
nl|'\n'
string|'"    pass\\n"'
op|')'
newline|'\n'
name|'exec'
name|'classDefinition'
name|'in'
name|'self'
op|'.'
name|'m'
op|'.'
name|'__dict__'
newline|'\n'
comment|'# Moving from new-style class to old-style should fail.'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'rebuild'
op|'.'
name|'updateInstance'
op|','
name|'inst'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

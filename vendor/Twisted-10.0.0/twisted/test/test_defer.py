begin_unit
nl|'\n'
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nTest cases for defer module.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'gc'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
op|','
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
op|','
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'failure'
op|','
name|'log'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'task'
name|'import'
name|'Clock'
newline|'\n'
nl|'\n'
DECL|class|GenericError
name|'class'
name|'GenericError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_setTimeoutSuppression
dedent|''
name|'_setTimeoutSuppression'
op|'='
name|'util'
op|'.'
name|'suppress'
op|'('
nl|'\n'
DECL|variable|message
name|'message'
op|'='
string|'"Deferred.setTimeout is deprecated.  Look for timeout "'
nl|'\n'
string|'"support specific to the API you are using instead."'
op|','
nl|'\n'
DECL|variable|category
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DeferredTestCase
name|'class'
name|'DeferredTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'callback_results'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'errback_results'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'callback2_results'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_callback
dedent|''
name|'def'
name|'_callback'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'callback_results'
op|'='
name|'args'
op|','
name|'kw'
newline|'\n'
name|'return'
name|'args'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_callback2
dedent|''
name|'def'
name|'_callback2'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'callback2_results'
op|'='
name|'args'
op|','
name|'kw'
newline|'\n'
nl|'\n'
DECL|member|_errback
dedent|''
name|'def'
name|'_errback'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'errback_results'
op|'='
name|'args'
op|','
name|'kw'
newline|'\n'
nl|'\n'
DECL|member|testCallbackWithoutArgs
dedent|''
name|'def'
name|'testCallbackWithoutArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_callback'
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'callback'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'errback_results'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'callback_results'
op|','
op|'('
op|'('
string|"'hello'"
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCallbackWithArgs
dedent|''
name|'def'
name|'testCallbackWithArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_callback'
op|','
string|'"world"'
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'callback'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'errback_results'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'callback_results'
op|','
op|'('
op|'('
string|"'hello'"
op|','
string|"'world'"
op|')'
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCallbackWithKwArgs
dedent|''
name|'def'
name|'testCallbackWithKwArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_callback'
op|','
name|'world'
op|'='
string|'"world"'
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'callback'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'errback_results'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'callback_results'
op|','
nl|'\n'
op|'('
op|'('
string|"'hello'"
op|','
op|')'
op|','
op|'{'
string|"'world'"
op|':'
string|"'world'"
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testTwoCallbacks
dedent|''
name|'def'
name|'testTwoCallbacks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_callback'
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_callback2'
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'callback'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'errback_results'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'callback_results'
op|','
nl|'\n'
op|'('
op|'('
string|"'hello'"
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'callback2_results'
op|','
nl|'\n'
op|'('
op|'('
string|"'hello'"
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDeferredList
dedent|''
name|'def'
name|'testDeferredList'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'defr1'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'defr2'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'defr3'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'dl'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
name|'defr1'
op|','
name|'defr2'
op|','
name|'defr3'
op|']'
op|')'
newline|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'resultList'
op|','
name|'result'
op|'='
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'extend'
op|'('
name|'resultList'
op|')'
newline|'\n'
DECL|function|catch
dedent|''
name|'def'
name|'catch'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'dl'
op|'.'
name|'addCallbacks'
op|'('
name|'cb'
op|','
name|'cb'
op|')'
newline|'\n'
name|'defr1'
op|'.'
name|'callback'
op|'('
string|'"1"'
op|')'
newline|'\n'
name|'defr2'
op|'.'
name|'addErrback'
op|'('
name|'catch'
op|')'
newline|'\n'
comment|'# "catch" is added to eat the GenericError that will be passed on by'
nl|'\n'
comment|"# the DeferredList's callback on defr2. If left unhandled, the"
nl|'\n'
comment|'# Failure object would cause a log.err() warning about "Unhandled'
nl|'\n'
comment|'# error in Deferred". Twisted\'s pyunit watches for log.err calls and'
nl|'\n'
comment|'# treats them as failures. So "catch" must eat the error to prevent'
nl|'\n'
comment|'# it from flunking the test.'
nl|'\n'
name|'defr2'
op|'.'
name|'errback'
op|'('
name|'GenericError'
op|'('
string|'"2"'
op|')'
op|')'
newline|'\n'
name|'defr3'
op|'.'
name|'callback'
op|'('
string|'"3"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'['
name|'result'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
comment|'#result[1][1] is now a Failure instead of an Exception'
nl|'\n'
op|'('
name|'result'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'str'
op|'('
name|'result'
op|'['
number|'1'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'value'
op|')'
op|')'
op|','
nl|'\n'
name|'result'
op|'['
number|'2'
op|']'
op|']'
op|','
nl|'\n'
nl|'\n'
op|'['
op|'('
name|'defer'
op|'.'
name|'SUCCESS'
op|','
string|'"1"'
op|')'
op|','
nl|'\n'
op|'('
name|'defer'
op|'.'
name|'FAILURE'
op|','
string|'"2"'
op|')'
op|','
nl|'\n'
op|'('
name|'defer'
op|'.'
name|'SUCCESS'
op|','
string|'"3"'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEmptyDeferredList
dedent|''
name|'def'
name|'testEmptyDeferredList'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'resultList'
op|','
name|'result'
op|'='
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'append'
op|'('
name|'resultList'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'dl'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'dl'
op|'.'
name|'addCallbacks'
op|'('
name|'cb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'result'
op|','
op|'['
op|'['
op|']'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'['
op|':'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'dl'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
op|']'
op|','
name|'fireOnOneCallback'
op|'='
number|'1'
op|')'
newline|'\n'
name|'dl'
op|'.'
name|'addCallbacks'
op|'('
name|'cb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'result'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDeferredListFireOnOneError
dedent|''
name|'def'
name|'testDeferredListFireOnOneError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'defr1'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'defr2'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'defr3'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'dl'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
name|'defr1'
op|','
name|'defr2'
op|','
name|'defr3'
op|']'
op|','
name|'fireOnOneErrback'
op|'='
number|'1'
op|')'
newline|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'dl'
op|'.'
name|'addErrback'
op|'('
name|'result'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
comment|'# consume errors after they pass through the DeferredList (to avoid'
nl|'\n'
comment|"# 'Unhandled error in Deferred'."
nl|'\n'
DECL|function|catch
name|'def'
name|'catch'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'defr2'
op|'.'
name|'addErrback'
op|'('
name|'catch'
op|')'
newline|'\n'
nl|'\n'
comment|"# fire one Deferred's callback, no result yet"
nl|'\n'
name|'defr1'
op|'.'
name|'callback'
op|'('
string|'"1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'result'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# fire one Deferred's errback -- now we have a result"
nl|'\n'
name|'defr2'
op|'.'
name|'errback'
op|'('
name|'GenericError'
op|'('
string|'"from def2"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# extract the result from the list'
nl|'\n'
name|'failure'
op|'='
name|'result'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
comment|'# the type of the failure is a FirstError'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'issubclass'
op|'('
name|'failure'
op|'.'
name|'type'
op|','
name|'defer'
op|'.'
name|'FirstError'
op|')'
op|','
nl|'\n'
string|"'issubclass(failure.type, defer.FirstError) failed: '"
nl|'\n'
string|"'failure.type is %r'"
op|'%'
op|'('
name|'failure'
op|'.'
name|'type'
op|','
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'firstError'
op|'='
name|'failure'
op|'.'
name|'value'
newline|'\n'
nl|'\n'
comment|'# check that the GenericError("2") from the deferred at index 1'
nl|'\n'
comment|'# (defr2) is intact inside failure.value'
nl|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'firstError'
op|'.'
name|'subFailure'
op|'.'
name|'type'
op|','
name|'GenericError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'firstError'
op|'.'
name|'subFailure'
op|'.'
name|'value'
op|'.'
name|'args'
op|','
op|'('
string|'"from def2"'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'firstError'
op|'.'
name|'index'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testDeferredListDontConsumeErrors
dedent|''
name|'def'
name|'testDeferredListDontConsumeErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d1'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'dl'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
name|'d1'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'errorTrap'
op|'='
op|'['
op|']'
newline|'\n'
name|'d1'
op|'.'
name|'addErrback'
op|'('
name|'errorTrap'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'dl'
op|'.'
name|'addCallback'
op|'('
name|'result'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
name|'d1'
op|'.'
name|'errback'
op|'('
name|'GenericError'
op|'('
string|"'Bang'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
string|"'Bang'"
op|','
name|'errorTrap'
op|'['
number|'0'
op|']'
op|'.'
name|'value'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
string|"'Bang'"
op|','
name|'result'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'value'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDeferredListConsumeErrors
dedent|''
name|'def'
name|'testDeferredListConsumeErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d1'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'dl'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
name|'d1'
op|']'
op|','
name|'consumeErrors'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'errorTrap'
op|'='
op|'['
op|']'
newline|'\n'
name|'d1'
op|'.'
name|'addErrback'
op|'('
name|'errorTrap'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'dl'
op|'.'
name|'addCallback'
op|'('
name|'result'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
name|'d1'
op|'.'
name|'errback'
op|'('
name|'GenericError'
op|'('
string|"'Bang'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'['
op|']'
op|','
name|'errorTrap'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
string|"'Bang'"
op|','
name|'result'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'value'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testDeferredListFireOnOneErrorWithAlreadyFiredDeferreds
dedent|''
name|'def'
name|'testDeferredListFireOnOneErrorWithAlreadyFiredDeferreds'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create some deferreds, and errback one'
nl|'\n'
indent|'        '
name|'d1'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d2'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'errback'
op|'('
name|'GenericError'
op|'('
string|"'Bang'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# *Then* build the DeferredList, with fireOnOneErrback=True'
nl|'\n'
name|'dl'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|','
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'dl'
op|'.'
name|'addErrback'
op|'('
name|'result'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'d1'
op|'.'
name|'addErrback'
op|'('
name|'lambda'
name|'e'
op|':'
name|'None'
op|')'
comment|'# Swallow error'
newline|'\n'
nl|'\n'
DECL|member|testDeferredListWithAlreadyFiredDeferreds
dedent|''
name|'def'
name|'testDeferredListWithAlreadyFiredDeferreds'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create some deferreds, and err one, call the other'
nl|'\n'
indent|'        '
name|'d1'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d2'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'errback'
op|'('
name|'GenericError'
op|'('
string|"'Bang'"
op|')'
op|')'
newline|'\n'
name|'d2'
op|'.'
name|'callback'
op|'('
number|'2'
op|')'
newline|'\n'
nl|'\n'
comment|'# *Then* build the DeferredList'
nl|'\n'
name|'dl'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'dl'
op|'.'
name|'addCallback'
op|'('
name|'result'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'d1'
op|'.'
name|'addErrback'
op|'('
name|'lambda'
name|'e'
op|':'
name|'None'
op|')'
comment|'# Swallow error'
newline|'\n'
nl|'\n'
DECL|member|testTimeOut
dedent|''
name|'def'
name|'testTimeOut'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a Deferred which has setTimeout called on it and never has\n        C{callback} or C{errback} called on it eventually fails with a\n        L{error.TimeoutError}.\n        """'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'setTimeout'
op|'('
number|'0.01'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'defer'
op|'.'
name|'TimeoutError'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'L'
op|','
string|'"Deferred failed too soon."'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'testTimeOut'
op|'.'
name|'suppress'
op|'='
op|'['
name|'_setTimeoutSuppression'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testImmediateSuccess
name|'def'
name|'testImmediateSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'succeed'
op|'('
string|'"success"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'l'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'l'
op|','
op|'['
string|'"success"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_immediateSuccessBeforeTimeout
dedent|''
name|'def'
name|'test_immediateSuccessBeforeTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a synchronously successful Deferred is not affected by a\n        C{setTimeout} call.\n        """'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'succeed'
op|'('
string|'"success"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'setTimeout'
op|'('
number|'1.0'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'l'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'l'
op|','
op|'['
string|'"success"'
op|']'
op|')'
newline|'\n'
dedent|''
name|'test_immediateSuccessBeforeTimeout'
op|'.'
name|'suppress'
op|'='
op|'['
name|'_setTimeoutSuppression'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testImmediateFailure
name|'def'
name|'testImmediateFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'fail'
op|'('
name|'GenericError'
op|'('
string|'"fail"'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'l'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'l'
op|'['
number|'0'
op|']'
op|'.'
name|'value'
op|')'
op|','
string|'"fail"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPausedFailure
dedent|''
name|'def'
name|'testPausedFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'fail'
op|'('
name|'GenericError'
op|'('
string|'"fail"'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'pause'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'l'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'l'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'unpause'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'l'
op|'['
number|'0'
op|']'
op|'.'
name|'value'
op|')'
op|','
string|'"fail"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCallbackErrors
dedent|''
name|'def'
name|'testCallbackErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
number|'1'
op|'/'
number|'0'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'l'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'l'
op|'['
number|'0'
op|']'
op|'.'
name|'value'
op|','
name|'ZeroDivisionError'
op|')'
op|')'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'lambda'
name|'_'
op|':'
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'ZeroDivisionError'
op|'('
op|')'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'l'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'l'
op|'['
number|'0'
op|']'
op|'.'
name|'value'
op|','
name|'ZeroDivisionError'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUnpauseBeforeCallback
dedent|''
name|'def'
name|'testUnpauseBeforeCallback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'pause'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_callback'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'unpause'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testReturnDeferred
dedent|''
name|'def'
name|'testReturnDeferred'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d2'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d2'
op|'.'
name|'pause'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'r'
op|','
name|'d2'
op|'='
name|'d2'
op|':'
name|'d2'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_callback'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
number|'1'
op|')'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'callback_results'
name|'is'
name|'None'
op|','
string|'"Should not have been called yet."'
newline|'\n'
name|'d2'
op|'.'
name|'callback'
op|'('
number|'2'
op|')'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'callback_results'
name|'is'
name|'None'
op|','
string|'"Still should not have been called yet."'
newline|'\n'
name|'d2'
op|'.'
name|'unpause'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'callback_results'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'=='
number|'2'
op|','
string|'"Result should have been from second deferred:%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'callback_results'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|testGatherResults
dedent|''
name|'def'
name|'testGatherResults'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# test successful list of deferreds'
nl|'\n'
indent|'        '
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'defer'
op|'.'
name|'succeed'
op|'('
number|'1'
op|')'
op|','
name|'defer'
op|'.'
name|'succeed'
op|'('
number|'2'
op|')'
op|']'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'l'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'l'
op|','
op|'['
op|'['
number|'1'
op|','
number|'2'
op|']'
op|']'
op|')'
newline|'\n'
comment|'# test failing list of deferreds'
nl|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'dl'
op|'='
op|'['
name|'defer'
op|'.'
name|'succeed'
op|'('
number|'1'
op|')'
op|','
name|'defer'
op|'.'
name|'fail'
op|'('
name|'ValueError'
op|')'
op|']'
newline|'\n'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
name|'dl'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'l'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'l'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'l'
op|'['
number|'0'
op|']'
op|','
name|'failure'
op|'.'
name|'Failure'
op|')'
op|')'
newline|'\n'
comment|'# get rid of error'
nl|'\n'
name|'dl'
op|'['
number|'1'
op|']'
op|'.'
name|'addErrback'
op|'('
name|'lambda'
name|'e'
op|':'
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_maybeDeferredSync
dedent|''
name|'def'
name|'test_maybeDeferredSync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{defer.maybeDeferred} should retrieve the result of a synchronous\n        function and pass it to its resulting L{defer.Deferred}.\n        """'
newline|'\n'
name|'S'
op|','
name|'E'
op|'='
op|'['
op|']'
op|','
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
op|'('
name|'lambda'
name|'x'
op|':'
name|'x'
op|'+'
number|'5'
op|')'
op|','
number|'10'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'S'
op|'.'
name|'append'
op|','
name|'E'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'E'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'S'
op|','
op|'['
number|'15'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_maybeDeferredSyncError
dedent|''
name|'def'
name|'test_maybeDeferredSyncError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{defer.maybeDeferred} should catch exception raised by a synchronous\n        function and errback its resulting L{defer.Deferred} with it.\n        """'
newline|'\n'
name|'S'
op|','
name|'E'
op|'='
op|'['
op|']'
op|','
op|'['
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
string|"'10'"
op|'+'
number|'5'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
name|'str'
op|'('
name|'e'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
op|'('
name|'lambda'
name|'x'
op|':'
name|'x'
op|'+'
number|'5'
op|')'
op|','
string|"'10'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'S'
op|'.'
name|'append'
op|','
name|'E'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'S'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'E'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'E'
op|'['
number|'0'
op|']'
op|'.'
name|'value'
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_maybeDeferredAsync
dedent|''
name|'def'
name|'test_maybeDeferredAsync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{defer.maybeDeferred} should let L{defer.Deferred} instance pass by\n        so that original result is the same.\n        """'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d2'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'lambda'
op|':'
name|'d'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
string|"'Success'"
op|')'
newline|'\n'
name|'return'
name|'d2'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'assertEquals'
op|','
string|"'Success'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_maybeDeferredAsyncError
dedent|''
name|'def'
name|'test_maybeDeferredAsyncError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{defer.maybeDeferred} should let L{defer.Deferred} instance pass by\n        so that L{failure.Failure} returned by the original instance is the\n        same.\n        """'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d2'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'lambda'
op|':'
name|'d'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'RuntimeError'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d2'
op|','
name|'RuntimeError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reentrantRunCallbacks
dedent|''
name|'def'
name|'test_reentrantRunCallbacks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A callback added to a L{Deferred} by a callback on that L{Deferred}\n        should be added to the end of the callback chain.\n        """'
newline|'\n'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'called'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|callback3
name|'def'
name|'callback3'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'.'
name|'append'
op|'('
number|'3'
op|')'
newline|'\n'
DECL|function|callback2
dedent|''
name|'def'
name|'callback2'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'.'
name|'append'
op|'('
number|'2'
op|')'
newline|'\n'
DECL|function|callback1
dedent|''
name|'def'
name|'callback1'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'.'
name|'append'
op|'('
number|'1'
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'callback3'
op|')'
newline|'\n'
dedent|''
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'callback1'
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'callback2'
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'called'
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nonReentrantCallbacks
dedent|''
name|'def'
name|'test_nonReentrantCallbacks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A callback added to a L{Deferred} by a callback on that L{Deferred}\n        should not be executed until the running callback returns.\n        """'
newline|'\n'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'called'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|callback2
name|'def'
name|'callback2'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'.'
name|'append'
op|'('
number|'2'
op|')'
newline|'\n'
DECL|function|callback1
dedent|''
name|'def'
name|'callback1'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'.'
name|'append'
op|'('
number|'1'
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'callback2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'called'
op|','
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'callback1'
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'called'
op|','
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reentrantRunCallbacksWithFailure
dedent|''
name|'def'
name|'test_reentrantRunCallbacksWithFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        After an exception is raised by a callback which was added to a\n        L{Deferred} by a callback on that L{Deferred}, the L{Deferred} should\n        call the first errback with a L{Failure} wrapping that exception.\n        """'
newline|'\n'
name|'exceptionMessage'
op|'='
string|'"callback raised exception"'
newline|'\n'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|function|callback2
name|'def'
name|'callback2'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
name|'exceptionMessage'
op|')'
newline|'\n'
DECL|function|callback1
dedent|''
name|'def'
name|'callback1'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'callback2'
op|')'
newline|'\n'
dedent|''
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'callback1'
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'deferred'
op|','
name|'Exception'
op|')'
newline|'\n'
DECL|function|cbFailed
name|'def'
name|'cbFailed'
op|'('
name|'exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'exception'
op|'.'
name|'args'
op|','
op|'('
name|'exceptionMessage'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'cbFailed'
op|')'
newline|'\n'
name|'return'
name|'deferred'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FirstErrorTests
dedent|''
dedent|''
name|'class'
name|'FirstErrorTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{FirstError}.\n    """'
newline|'\n'
DECL|member|test_repr
name|'def'
name|'test_repr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The repr of a L{FirstError} instance includes the repr of the value of\n        the sub-failure and the index which corresponds to the L{FirstError}.\n        """'
newline|'\n'
name|'exc'
op|'='
name|'ValueError'
op|'('
string|'"some text"'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'error'
op|'='
name|'defer'
op|'.'
name|'FirstError'
op|'('
name|'f'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'error'
op|')'
op|','
nl|'\n'
string|'"FirstError[#3, %s]"'
op|'%'
op|'('
name|'repr'
op|'('
name|'exc'
op|')'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_str
dedent|''
name|'def'
name|'test_str'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The str of a L{FirstError} instance includes the str of the\n        sub-failure and the index which corresponds to the L{FirstError}.\n        """'
newline|'\n'
name|'exc'
op|'='
name|'ValueError'
op|'('
string|'"some text"'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'error'
op|'='
name|'defer'
op|'.'
name|'FirstError'
op|'('
name|'f'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'str'
op|'('
name|'error'
op|')'
op|','
nl|'\n'
string|'"FirstError[#5, %s]"'
op|'%'
op|'('
name|'str'
op|'('
name|'f'
op|')'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_comparison
dedent|''
name|'def'
name|'test_comparison'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{FirstError} instances compare equal to each other if and only if\n        their failure and index compare equal.  L{FirstError} instances do not\n        compare equal to instances of other types.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
number|'1'
op|'/'
number|'0'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'firstFailure'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'one'
op|'='
name|'defer'
op|'.'
name|'FirstError'
op|'('
name|'firstFailure'
op|','
number|'13'
op|')'
newline|'\n'
name|'anotherOne'
op|'='
name|'defer'
op|'.'
name|'FirstError'
op|'('
name|'firstFailure'
op|','
number|'13'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"bar"'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'secondFailure'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'another'
op|'='
name|'defer'
op|'.'
name|'FirstError'
op|'('
name|'secondFailure'
op|','
number|'9'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'one'
op|'=='
name|'anotherOne'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'one'
op|'=='
name|'another'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'one'
op|'!='
name|'another'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'one'
op|'!='
name|'anotherOne'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'one'
op|'=='
number|'10'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AlreadyCalledTestCase
dedent|''
dedent|''
name|'class'
name|'AlreadyCalledTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_deferredWasDebugging'
op|'='
name|'defer'
op|'.'
name|'getDebugging'
op|'('
op|')'
newline|'\n'
name|'defer'
op|'.'
name|'setDebugging'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'defer'
op|'.'
name|'setDebugging'
op|'('
name|'self'
op|'.'
name|'_deferredWasDebugging'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_callback
dedent|''
name|'def'
name|'_callback'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
DECL|member|_errback
dedent|''
name|'def'
name|'_errback'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_call_1
dedent|''
name|'def'
name|'_call_1'
op|'('
name|'self'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'.'
name|'callback'
op|'('
string|'"hello"'
op|')'
newline|'\n'
DECL|member|_call_2
dedent|''
name|'def'
name|'_call_2'
op|'('
name|'self'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'.'
name|'callback'
op|'('
string|'"twice"'
op|')'
newline|'\n'
DECL|member|_err_1
dedent|''
name|'def'
name|'_err_1'
op|'('
name|'self'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'RuntimeError'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
DECL|member|_err_2
dedent|''
name|'def'
name|'_err_2'
op|'('
name|'self'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'RuntimeError'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAlreadyCalled_CC
dedent|''
name|'def'
name|'testAlreadyCalled_CC'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_callback'
op|','
name|'self'
op|'.'
name|'_errback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_call_1'
op|'('
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'defer'
op|'.'
name|'AlreadyCalledError'
op|','
name|'self'
op|'.'
name|'_call_2'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAlreadyCalled_CE
dedent|''
name|'def'
name|'testAlreadyCalled_CE'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_callback'
op|','
name|'self'
op|'.'
name|'_errback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_call_1'
op|'('
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'defer'
op|'.'
name|'AlreadyCalledError'
op|','
name|'self'
op|'.'
name|'_err_2'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAlreadyCalled_EE
dedent|''
name|'def'
name|'testAlreadyCalled_EE'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_callback'
op|','
name|'self'
op|'.'
name|'_errback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_err_1'
op|'('
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'defer'
op|'.'
name|'AlreadyCalledError'
op|','
name|'self'
op|'.'
name|'_err_2'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAlreadyCalled_EC
dedent|''
name|'def'
name|'testAlreadyCalled_EC'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_callback'
op|','
name|'self'
op|'.'
name|'_errback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_err_1'
op|'('
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'defer'
op|'.'
name|'AlreadyCalledError'
op|','
name|'self'
op|'.'
name|'_call_2'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_count
dedent|''
name|'def'
name|'_count'
op|'('
name|'self'
op|','
name|'linetype'
op|','
name|'func'
op|','
name|'lines'
op|','
name|'expected'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'count'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'line'
op|'.'
name|'startswith'
op|'('
string|"' %s:'"
op|'%'
name|'linetype'
op|')'
name|'and'
nl|'\n'
name|'line'
op|'.'
name|'endswith'
op|'('
string|"' %s'"
op|'%'
name|'func'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'count'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'count'
op|'=='
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check
dedent|''
name|'def'
name|'_check'
op|'('
name|'self'
op|','
name|'e'
op|','
name|'caller'
op|','
name|'invoker1'
op|','
name|'invoker2'
op|')'
op|':'
newline|'\n'
comment|'# make sure the debugging information is vaguely correct'
nl|'\n'
indent|'        '
name|'lines'
op|'='
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|'"\\n"'
op|')'
newline|'\n'
comment|'# the creator should list the creator (testAlreadyCalledDebug) but not'
nl|'\n'
comment|'# _call_1 or _call_2 or other invokers'
nl|'\n'
name|'self'
op|'.'
name|'_count'
op|'('
string|"'C'"
op|','
name|'caller'
op|','
name|'lines'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_count'
op|'('
string|"'C'"
op|','
string|"'_call_1'"
op|','
name|'lines'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_count'
op|'('
string|"'C'"
op|','
string|"'_call_2'"
op|','
name|'lines'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_count'
op|'('
string|"'C'"
op|','
string|"'_err_1'"
op|','
name|'lines'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_count'
op|'('
string|"'C'"
op|','
string|"'_err_2'"
op|','
name|'lines'
op|','
number|'0'
op|')'
newline|'\n'
comment|'# invoker should list the first invoker but not the second'
nl|'\n'
name|'self'
op|'.'
name|'_count'
op|'('
string|"'I'"
op|','
name|'invoker1'
op|','
name|'lines'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_count'
op|'('
string|"'I'"
op|','
name|'invoker2'
op|','
name|'lines'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAlreadyCalledDebug_CC
dedent|''
name|'def'
name|'testAlreadyCalledDebug_CC'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_callback'
op|','
name|'self'
op|'.'
name|'_errback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_call_1'
op|'('
name|'d'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_call_2'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'defer'
op|'.'
name|'AlreadyCalledError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_check'
op|'('
name|'e'
op|','
string|'"testAlreadyCalledDebug_CC"'
op|','
string|'"_call_1"'
op|','
string|'"_call_2"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"second callback failed to raise AlreadyCalledError"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAlreadyCalledDebug_CE
dedent|''
dedent|''
name|'def'
name|'testAlreadyCalledDebug_CE'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_callback'
op|','
name|'self'
op|'.'
name|'_errback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_call_1'
op|'('
name|'d'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_err_2'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'defer'
op|'.'
name|'AlreadyCalledError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_check'
op|'('
name|'e'
op|','
string|'"testAlreadyCalledDebug_CE"'
op|','
string|'"_call_1"'
op|','
string|'"_err_2"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"second errback failed to raise AlreadyCalledError"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAlreadyCalledDebug_EC
dedent|''
dedent|''
name|'def'
name|'testAlreadyCalledDebug_EC'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_callback'
op|','
name|'self'
op|'.'
name|'_errback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_err_1'
op|'('
name|'d'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_call_2'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'defer'
op|'.'
name|'AlreadyCalledError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_check'
op|'('
name|'e'
op|','
string|'"testAlreadyCalledDebug_EC"'
op|','
string|'"_err_1"'
op|','
string|'"_call_2"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"second callback failed to raise AlreadyCalledError"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAlreadyCalledDebug_EE
dedent|''
dedent|''
name|'def'
name|'testAlreadyCalledDebug_EE'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_callback'
op|','
name|'self'
op|'.'
name|'_errback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_err_1'
op|'('
name|'d'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_err_2'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'defer'
op|'.'
name|'AlreadyCalledError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_check'
op|'('
name|'e'
op|','
string|'"testAlreadyCalledDebug_EE"'
op|','
string|'"_err_1"'
op|','
string|'"_err_2"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"second errback failed to raise AlreadyCalledError"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNoDebugging
dedent|''
dedent|''
name|'def'
name|'testNoDebugging'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'defer'
op|'.'
name|'setDebugging'
op|'('
name|'False'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_callback'
op|','
name|'self'
op|'.'
name|'_errback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_call_1'
op|'('
name|'d'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_call_2'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'defer'
op|'.'
name|'AlreadyCalledError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'e'
op|'.'
name|'args'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"second callback failed to raise AlreadyCalledError"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testSwitchDebugging
dedent|''
dedent|''
name|'def'
name|'testSwitchDebugging'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure Deferreds can deal with debug state flipping'
nl|'\n'
comment|'# around randomly.  This is covering a particular fixed bug.'
nl|'\n'
indent|'        '
name|'defer'
op|'.'
name|'setDebugging'
op|'('
name|'False'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'lambda'
name|'ign'
op|':'
name|'None'
op|')'
newline|'\n'
name|'defer'
op|'.'
name|'setDebugging'
op|'('
name|'True'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'defer'
op|'.'
name|'setDebugging'
op|'('
name|'False'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'defer'
op|'.'
name|'setDebugging'
op|'('
name|'True'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'lambda'
name|'ign'
op|':'
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LogTestCase
dedent|''
dedent|''
name|'class'
name|'LogTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test logging of unhandled errors.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add a custom observer to observer logging.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'c'
op|'='
op|'['
op|']'
newline|'\n'
name|'log'
op|'.'
name|'addObserver'
op|'('
name|'self'
op|'.'
name|'c'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove the observer.\n        """'
newline|'\n'
name|'log'
op|'.'
name|'removeObserver'
op|'('
name|'self'
op|'.'
name|'c'
op|'.'
name|'append'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check
dedent|''
name|'def'
name|'_check'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check the output of the log observer to see if the error is present.\n        """'
newline|'\n'
name|'c2'
op|'='
op|'['
name|'e'
name|'for'
name|'e'
name|'in'
name|'self'
op|'.'
name|'c'
name|'if'
name|'e'
op|'['
string|'"isError"'
op|']'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'c2'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'c2'
op|'['
number|'1'
op|']'
op|'['
string|'"failure"'
op|']'
op|'.'
name|'trap'
op|'('
name|'ZeroDivisionError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'ZeroDivisionError'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_errorLog
dedent|''
name|'def'
name|'test_errorLog'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that when a Deferred with no references to it is fired, and its\n        final result (the one not handled by any callback) is an exception,\n        that exception will be logged immediately.\n        """'
newline|'\n'
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
number|'1'
op|'/'
number|'0'
op|')'
op|'.'
name|'callback'
op|'('
number|'1'
op|')'
newline|'\n'
name|'gc'
op|'.'
name|'collect'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_errorLogWithInnerFrameRef
dedent|''
name|'def'
name|'test_errorLogWithInnerFrameRef'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Same as L{test_errorLog}, but with an inner frame.\n        """'
newline|'\n'
DECL|function|_subErrorLogWithInnerFrameRef
name|'def'
name|'_subErrorLogWithInnerFrameRef'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
number|'1'
op|'/'
number|'0'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_subErrorLogWithInnerFrameRef'
op|'('
op|')'
newline|'\n'
name|'gc'
op|'.'
name|'collect'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_errorLogWithInnerFrameCycle
dedent|''
name|'def'
name|'test_errorLogWithInnerFrameCycle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Same as L{test_errorLogWithInnerFrameRef}, plus create a cycle.\n        """'
newline|'\n'
DECL|function|_subErrorLogWithInnerFrameCycle
name|'def'
name|'_subErrorLogWithInnerFrameCycle'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|','
name|'d'
op|'='
name|'d'
op|':'
number|'1'
op|'/'
number|'0'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'_d'
op|'='
name|'d'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_subErrorLogWithInnerFrameCycle'
op|'('
op|')'
newline|'\n'
name|'gc'
op|'.'
name|'collect'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DeferredTestCaseII
dedent|''
dedent|''
name|'class'
name|'DeferredTestCaseII'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'callbackRan'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|testDeferredListEmpty
dedent|''
name|'def'
name|'testDeferredListEmpty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Testing empty DeferredList."""'
newline|'\n'
name|'dl'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'dl'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'cb_empty'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cb_empty
dedent|''
name|'def'
name|'cb_empty'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'callbackRan'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
op|'['
op|']'
op|','
name|'res'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'callbackRan'
op|','
string|'"Callback was never run."'
op|')'
newline|'\n'
nl|'\n'
DECL|class|OtherPrimitives
dedent|''
dedent|''
name|'class'
name|'OtherPrimitives'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|_incr
indent|'    '
name|'def'
name|'_incr'
op|'('
name|'self'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'counter'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'counter'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|testLock
dedent|''
name|'def'
name|'testLock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lock'
op|'='
name|'defer'
op|'.'
name|'DeferredLock'
op|'('
op|')'
newline|'\n'
name|'lock'
op|'.'
name|'acquire'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_incr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'lock'
op|'.'
name|'locked'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'counter'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'lock'
op|'.'
name|'acquire'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_incr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'lock'
op|'.'
name|'locked'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'counter'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'lock'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'lock'
op|'.'
name|'locked'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'counter'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'lock'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'lock'
op|'.'
name|'locked'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'counter'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'lock'
op|'.'
name|'run'
op|')'
newline|'\n'
nl|'\n'
name|'firstUnique'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'secondUnique'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'controlDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|function|helper
name|'def'
name|'helper'
op|'('
name|'self'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'b'
op|'='
name|'b'
newline|'\n'
name|'return'
name|'controlDeferred'
newline|'\n'
nl|'\n'
dedent|''
name|'resultDeferred'
op|'='
name|'lock'
op|'.'
name|'run'
op|'('
name|'helper'
op|','
name|'self'
op|'='
name|'self'
op|','
name|'b'
op|'='
name|'firstUnique'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'lock'
op|'.'
name|'locked'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'b'
op|','
name|'firstUnique'
op|')'
newline|'\n'
nl|'\n'
name|'resultDeferred'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'setattr'
op|'('
name|'self'
op|','
string|"'result'"
op|','
name|'x'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'lock'
op|'.'
name|'acquire'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_incr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'lock'
op|'.'
name|'locked'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'counter'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'controlDeferred'
op|'.'
name|'callback'
op|'('
name|'secondUnique'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'result'
op|','
name|'secondUnique'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'lock'
op|'.'
name|'locked'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'counter'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
name|'lock'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'lock'
op|'.'
name|'locked'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSemaphore
dedent|''
name|'def'
name|'testSemaphore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'N'
op|'='
number|'13'
newline|'\n'
name|'sem'
op|'='
name|'defer'
op|'.'
name|'DeferredSemaphore'
op|'('
name|'N'
op|')'
newline|'\n'
nl|'\n'
name|'controlDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|function|helper
name|'def'
name|'helper'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'arg'
op|'='
name|'arg'
newline|'\n'
name|'return'
name|'controlDeferred'
newline|'\n'
nl|'\n'
dedent|''
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'uniqueObject'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'resultDeferred'
op|'='
name|'sem'
op|'.'
name|'run'
op|'('
name|'helper'
op|','
name|'self'
op|'='
name|'self'
op|','
name|'arg'
op|'='
name|'uniqueObject'
op|')'
newline|'\n'
name|'resultDeferred'
op|'.'
name|'addCallback'
op|'('
name|'results'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'resultDeferred'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_incr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'results'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'arg'
op|','
name|'uniqueObject'
op|')'
newline|'\n'
name|'controlDeferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'results'
op|'.'
name|'pop'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'counter'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'counter'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'1'
op|','
number|'1'
op|'+'
name|'N'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sem'
op|'.'
name|'acquire'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_incr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'counter'
op|','
name|'i'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'sem'
op|'.'
name|'acquire'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_incr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'counter'
op|','
name|'N'
op|')'
newline|'\n'
nl|'\n'
name|'sem'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'counter'
op|','
name|'N'
op|'+'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'1'
op|','
number|'1'
op|'+'
name|'N'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sem'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'counter'
op|','
name|'N'
op|'+'
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testQueue
dedent|''
dedent|''
name|'def'
name|'testQueue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'N'
op|','
name|'M'
op|'='
number|'2'
op|','
number|'2'
newline|'\n'
name|'queue'
op|'='
name|'defer'
op|'.'
name|'DeferredQueue'
op|'('
name|'N'
op|','
name|'M'
op|')'
newline|'\n'
nl|'\n'
name|'gotten'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'M'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'queue'
op|'.'
name|'get'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'gotten'
op|'.'
name|'append'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'defer'
op|'.'
name|'QueueUnderflow'
op|','
name|'queue'
op|'.'
name|'get'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'M'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'queue'
op|'.'
name|'put'
op|'('
name|'i'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'gotten'
op|','
name|'range'
op|'('
name|'i'
op|'+'
number|'1'
op|')'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'N'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'queue'
op|'.'
name|'put'
op|'('
name|'N'
op|'+'
name|'i'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'gotten'
op|','
name|'range'
op|'('
name|'M'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'defer'
op|'.'
name|'QueueOverflow'
op|','
name|'queue'
op|'.'
name|'put'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'gotten'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'N'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'queue'
op|'.'
name|'get'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'gotten'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'gotten'
op|','
name|'range'
op|'('
name|'N'
op|','
name|'N'
op|'+'
name|'i'
op|'+'
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'queue'
op|'='
name|'defer'
op|'.'
name|'DeferredQueue'
op|'('
op|')'
newline|'\n'
name|'gotten'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'N'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'queue'
op|'.'
name|'get'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'gotten'
op|'.'
name|'append'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'N'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'queue'
op|'.'
name|'put'
op|'('
name|'i'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'gotten'
op|','
name|'range'
op|'('
name|'N'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'queue'
op|'='
name|'defer'
op|'.'
name|'DeferredQueue'
op|'('
name|'size'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'defer'
op|'.'
name|'QueueOverflow'
op|','
name|'queue'
op|'.'
name|'put'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'queue'
op|'='
name|'defer'
op|'.'
name|'DeferredQueue'
op|'('
name|'backlog'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'defer'
op|'.'
name|'QueueUnderflow'
op|','
name|'queue'
op|'.'
name|'get'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DeferredFilesystemLockTestCase
dedent|''
dedent|''
name|'class'
name|'DeferredFilesystemLockTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test the behavior of L{DeferredFilesystemLock}\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'clock'
op|'='
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lock'
op|'='
name|'defer'
op|'.'
name|'DeferredFilesystemLock'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|','
nl|'\n'
name|'scheduler'
op|'='
name|'self'
op|'.'
name|'clock'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_waitUntilLockedWithNoLock
dedent|''
name|'def'
name|'test_waitUntilLockedWithNoLock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the lock can be acquired when no lock is held\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'lock'
op|'.'
name|'deferUntilLocked'
op|'('
name|'timeout'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_waitUntilLockedWithTimeoutLocked
dedent|''
name|'def'
name|'test_waitUntilLockedWithTimeoutLocked'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the lock can not be acquired when the lock is held\n        for longer than the timeout.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'lock'
op|'.'
name|'lock'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'lock'
op|'.'
name|'deferUntilLocked'
op|'('
name|'timeout'
op|'='
number|'5.5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'defer'
op|'.'
name|'TimeoutError'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'1'
op|']'
op|'*'
number|'10'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_waitUntilLockedWithTimeoutUnlocked
dedent|''
name|'def'
name|'test_waitUntilLockedWithTimeoutUnlocked'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a lock can be acquired while a lock is held\n        but the lock is unlocked before our timeout.\n        """'
newline|'\n'
DECL|function|onTimeout
name|'def'
name|'onTimeout'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'.'
name|'trap'
op|'('
name|'defer'
op|'.'
name|'TimeoutError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Should not have timed out"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'lock'
op|'.'
name|'lock'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'callLater'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'lock'
op|'.'
name|'unlock'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'lock'
op|'.'
name|'deferUntilLocked'
op|'('
name|'timeout'
op|'='
number|'10'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'onTimeout'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'1'
op|']'
op|'*'
number|'10'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_defaultScheduler
dedent|''
name|'def'
name|'test_defaultScheduler'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the default scheduler is set up properly.\n        """'
newline|'\n'
name|'lock'
op|'='
name|'defer'
op|'.'
name|'DeferredFilesystemLock'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'lock'
op|'.'
name|'_scheduler'
op|','
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_concurrentUsage
dedent|''
name|'def'
name|'test_concurrentUsage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that an appropriate exception is raised when attempting\n        to use deferUntilLocked concurrently.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'lock'
op|'.'
name|'lock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'callLater'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'lock'
op|'.'
name|'unlock'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'lock'
op|'.'
name|'deferUntilLocked'
op|'('
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'lock'
op|'.'
name|'deferUntilLocked'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d2'
op|','
name|'defer'
op|'.'
name|'AlreadyTryingToLockError'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multipleUsages
dedent|''
name|'def'
name|'test_multipleUsages'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a DeferredFilesystemLock can be used multiple times\n        """'
newline|'\n'
DECL|function|lockAquired
name|'def'
name|'lockAquired'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'lock'
op|'.'
name|'unlock'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'lock'
op|'.'
name|'deferUntilLocked'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'lock'
op|'.'
name|'lock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'callLater'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'lock'
op|'.'
name|'unlock'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'lock'
op|'.'
name|'deferUntilLocked'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lockAquired'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
comment|'# system imports'
nl|'\n'
name|'import'
name|'os'
op|','
name|'time'
op|','
name|'stat'
newline|'\n'
nl|'\n'
comment|'# twisted imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'logfile'
op|','
name|'runtime'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LogFileTestCase
name|'class'
name|'LogFileTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test the rotating log file.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'dir'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'self'
op|'.'
name|'dir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
string|'"test.log"'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'dir'
op|','
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Restore back write rights on created paths: if tests modified the\n        rights, that will allow the paths to be removed easily afterwards.\n        """'
newline|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
name|'self'
op|'.'
name|'dir'
op|','
number|'0777'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'chmod'
op|'('
name|'self'
op|'.'
name|'path'
op|','
number|'0777'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testWriting
dedent|''
dedent|''
name|'def'
name|'testWriting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'='
name|'logfile'
op|'.'
name|'LogFile'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'dir'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"123"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"456"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"7890"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'self'
op|'.'
name|'path'
op|','
string|'"r"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|'"1234567890"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRotation
dedent|''
name|'def'
name|'testRotation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# this logfile should rotate every 10 bytes'
nl|'\n'
indent|'        '
name|'log'
op|'='
name|'logfile'
op|'.'
name|'LogFile'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'dir'
op|','
name|'rotateLength'
op|'='
number|'10'
op|')'
newline|'\n'
nl|'\n'
comment|'# test automatic rotation'
nl|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"123"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"4567890"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"1"'
op|'*'
number|'11'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|'"%s.1"'
op|'%'
name|'self'
op|'.'
name|'path'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|'"%s.2"'
op|'%'
name|'self'
op|'.'
name|'path'
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|'"%s.1"'
op|'%'
name|'self'
op|'.'
name|'path'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|'"%s.2"'
op|'%'
name|'self'
op|'.'
name|'path'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|'"%s.3"'
op|'%'
name|'self'
op|'.'
name|'path'
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"3"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|'"%s.3"'
op|'%'
name|'self'
op|'.'
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# test manual rotation'
nl|'\n'
name|'log'
op|'.'
name|'rotate'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|'"%s.3"'
op|'%'
name|'self'
op|'.'
name|'path'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|'"%s.4"'
op|'%'
name|'self'
op|'.'
name|'path'
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'log'
op|'.'
name|'listLogs'
op|'('
op|')'
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAppend
dedent|''
name|'def'
name|'testAppend'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'='
name|'logfile'
op|'.'
name|'LogFile'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'dir'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"0123456789"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'log'
op|'='
name|'logfile'
op|'.'
name|'LogFile'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'dir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'log'
op|'.'
name|'size'
op|','
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'log'
op|'.'
name|'_file'
op|'.'
name|'tell'
op|'('
op|')'
op|','
name|'log'
op|'.'
name|'size'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"abc"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'log'
op|'.'
name|'size'
op|','
number|'13'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'log'
op|'.'
name|'_file'
op|'.'
name|'tell'
op|'('
op|')'
op|','
name|'log'
op|'.'
name|'size'
op|')'
newline|'\n'
name|'f'
op|'='
name|'log'
op|'.'
name|'_file'
newline|'\n'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|'"0123456789abc"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLogReader
dedent|''
name|'def'
name|'testLogReader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'='
name|'logfile'
op|'.'
name|'LogFile'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'dir'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"abc\\n"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"def\\n"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'rotate'
op|'('
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"ghi\\n"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# check reading logs'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'log'
op|'.'
name|'listLogs'
op|'('
op|')'
op|','
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'reader'
op|'='
name|'log'
op|'.'
name|'getCurrentLog'
op|'('
op|')'
newline|'\n'
name|'reader'
op|'.'
name|'_file'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reader'
op|'.'
name|'readLines'
op|'('
op|')'
op|','
op|'['
string|'"ghi\\n"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reader'
op|'.'
name|'readLines'
op|'('
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'reader'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'reader'
op|'='
name|'log'
op|'.'
name|'getLog'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reader'
op|'.'
name|'readLines'
op|'('
op|')'
op|','
op|'['
string|'"abc\\n"'
op|','
string|'"def\\n"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reader'
op|'.'
name|'readLines'
op|'('
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'reader'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# check getting illegal log readers'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'log'
op|'.'
name|'getLog'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'log'
op|'.'
name|'getLog'
op|','
string|'"1"'
op|')'
newline|'\n'
nl|'\n'
comment|'# check that log numbers are higher for older logs'
nl|'\n'
name|'log'
op|'.'
name|'rotate'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'log'
op|'.'
name|'listLogs'
op|'('
op|')'
op|','
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
newline|'\n'
name|'reader'
op|'='
name|'log'
op|'.'
name|'getLog'
op|'('
number|'1'
op|')'
newline|'\n'
name|'reader'
op|'.'
name|'_file'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reader'
op|'.'
name|'readLines'
op|'('
op|')'
op|','
op|'['
string|'"ghi\\n"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reader'
op|'.'
name|'readLines'
op|'('
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'reader'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'reader'
op|'='
name|'log'
op|'.'
name|'getLog'
op|'('
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reader'
op|'.'
name|'readLines'
op|'('
op|')'
op|','
op|'['
string|'"abc\\n"'
op|','
string|'"def\\n"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'reader'
op|'.'
name|'readLines'
op|'('
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'reader'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testModePreservation
dedent|''
name|'def'
name|'testModePreservation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check rotated files have same permissions as original.\n        """'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'self'
op|'.'
name|'path'
op|','
string|'"w"'
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
name|'self'
op|'.'
name|'path'
op|','
number|'0707'
op|')'
newline|'\n'
name|'mode'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|'['
name|'stat'
op|'.'
name|'ST_MODE'
op|']'
newline|'\n'
name|'log'
op|'='
name|'logfile'
op|'.'
name|'LogFile'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'dir'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"abc"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'rotate'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mode'
op|','
name|'os'
op|'.'
name|'stat'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|'['
name|'stat'
op|'.'
name|'ST_MODE'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noPermission
dedent|''
name|'def'
name|'test_noPermission'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check it keeps working when permission on dir changes.\n        """'
newline|'\n'
name|'log'
op|'='
name|'logfile'
op|'.'
name|'LogFile'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'dir'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"abc"'
op|')'
newline|'\n'
nl|'\n'
comment|'# change permissions so rotation would fail'
nl|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
name|'self'
op|'.'
name|'dir'
op|','
number|'0555'
op|')'
newline|'\n'
nl|'\n'
comment|"# if this succeeds, chmod doesn't restrict us, so we can't"
nl|'\n'
comment|'# do the test'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'dir'
op|','
string|'"xxx"'
op|')'
op|','
string|'"w"'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'OSError'
op|','
name|'IOError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'log'
op|'.'
name|'rotate'
op|'('
op|')'
comment|'# this should not fail'
newline|'\n'
nl|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"def"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'log'
op|'.'
name|'_file'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'f'
op|'.'
name|'tell'
op|'('
op|')'
op|','
number|'6'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|'"abcdef"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_maxNumberOfLog
dedent|''
name|'def'
name|'test_maxNumberOfLog'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test it respect the limit on the number of files when maxRotatedFiles\n        is not None.\n        """'
newline|'\n'
name|'log'
op|'='
name|'logfile'
op|'.'
name|'LogFile'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'dir'
op|','
name|'rotateLength'
op|'='
number|'10'
op|','
nl|'\n'
name|'maxRotatedFiles'
op|'='
number|'3'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"1"'
op|'*'
number|'11'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"2"'
op|'*'
number|'11'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|'"%s.1"'
op|'%'
name|'self'
op|'.'
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"3"'
op|'*'
number|'11'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|'"%s.2"'
op|'%'
name|'self'
op|'.'
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"4"'
op|'*'
number|'11'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|'"%s.3"'
op|'%'
name|'self'
op|'.'
name|'path'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'file'
op|'('
string|'"%s.3"'
op|'%'
name|'self'
op|'.'
name|'path'
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|'"1"'
op|'*'
number|'11'
op|')'
newline|'\n'
nl|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"5"'
op|'*'
number|'11'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'file'
op|'('
string|'"%s.3"'
op|'%'
name|'self'
op|'.'
name|'path'
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|'"2"'
op|'*'
number|'11'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|'"%s.4"'
op|'%'
name|'self'
op|'.'
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fromFullPath
dedent|''
name|'def'
name|'test_fromFullPath'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the fromFullPath method.\n        """'
newline|'\n'
name|'log1'
op|'='
name|'logfile'
op|'.'
name|'LogFile'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'dir'
op|','
number|'10'
op|','
name|'defaultMode'
op|'='
number|'0777'
op|')'
newline|'\n'
name|'log2'
op|'='
name|'logfile'
op|'.'
name|'LogFile'
op|'.'
name|'fromFullPath'
op|'('
name|'self'
op|'.'
name|'path'
op|','
number|'10'
op|','
name|'defaultMode'
op|'='
number|'0777'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'log1'
op|'.'
name|'name'
op|','
name|'log2'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'log1'
op|'.'
name|'path'
op|')'
op|','
name|'log2'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'log1'
op|'.'
name|'rotateLength'
op|','
name|'log2'
op|'.'
name|'rotateLength'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'log1'
op|'.'
name|'defaultMode'
op|','
name|'log2'
op|'.'
name|'defaultMode'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_defaultPermissions
dedent|''
name|'def'
name|'test_defaultPermissions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the default permission of the log file: if the file exist, it\n        should keep the permission.\n        """'
newline|'\n'
name|'f'
op|'='
name|'file'
op|'('
name|'self'
op|'.'
name|'path'
op|','
string|'"w"'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
name|'self'
op|'.'
name|'path'
op|','
number|'0707'
op|')'
newline|'\n'
name|'currentMode'
op|'='
name|'stat'
op|'.'
name|'S_IMODE'
op|'('
name|'os'
op|'.'
name|'stat'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|'['
name|'stat'
op|'.'
name|'ST_MODE'
op|']'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'log1'
op|'='
name|'logfile'
op|'.'
name|'LogFile'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'dir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'stat'
op|'.'
name|'S_IMODE'
op|'('
name|'os'
op|'.'
name|'stat'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|'['
name|'stat'
op|'.'
name|'ST_MODE'
op|']'
op|')'
op|','
nl|'\n'
name|'currentMode'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_specifiedPermissions
dedent|''
name|'def'
name|'test_specifiedPermissions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test specifying the permissions used on the log file.\n        """'
newline|'\n'
name|'log1'
op|'='
name|'logfile'
op|'.'
name|'LogFile'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'dir'
op|','
name|'defaultMode'
op|'='
number|'0066'
op|')'
newline|'\n'
name|'mode'
op|'='
name|'stat'
op|'.'
name|'S_IMODE'
op|'('
name|'os'
op|'.'
name|'stat'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|'['
name|'stat'
op|'.'
name|'ST_MODE'
op|']'
op|')'
newline|'\n'
name|'if'
name|'runtime'
op|'.'
name|'platform'
op|'.'
name|'isWindows'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# The only thing we can get here is global read-only'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mode'
op|','
number|'0444'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mode'
op|','
number|'0066'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reopen
dedent|''
dedent|''
name|'def'
name|'test_reopen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{logfile.LogFile.reopen} allows to rename the currently used file and\n        make L{logfile.LogFile} create a new file.\n        """'
newline|'\n'
name|'log1'
op|'='
name|'logfile'
op|'.'
name|'LogFile'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'dir'
op|')'
newline|'\n'
name|'log1'
op|'.'
name|'write'
op|'('
string|'"hello1"'
op|')'
newline|'\n'
name|'savePath'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'dir'
op|','
string|'"save.log"'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'rename'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'savePath'
op|')'
newline|'\n'
name|'log1'
op|'.'
name|'reopen'
op|'('
op|')'
newline|'\n'
name|'log1'
op|'.'
name|'write'
op|'('
string|'"hello2"'
op|')'
newline|'\n'
name|'log1'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'self'
op|'.'
name|'path'
op|','
string|'"r"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|'"hello2"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'savePath'
op|','
string|'"r"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|'"hello1"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'runtime'
op|'.'
name|'platform'
op|'.'
name|'isWindows'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'test_reopen'
op|'.'
name|'skip'
op|'='
string|'"Can\'t test reopen on Windows"'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|RiggedDailyLogFile
dedent|''
dedent|''
name|'class'
name|'RiggedDailyLogFile'
op|'('
name|'logfile'
op|'.'
name|'DailyLogFile'
op|')'
op|':'
newline|'\n'
DECL|variable|_clock
indent|'    '
name|'_clock'
op|'='
number|'0.0'
newline|'\n'
nl|'\n'
DECL|member|_openFile
name|'def'
name|'_openFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logfile'
op|'.'
name|'DailyLogFile'
op|'.'
name|'_openFile'
op|'('
name|'self'
op|')'
newline|'\n'
comment|'# rig the date to match _clock, not mtime'
nl|'\n'
name|'self'
op|'.'
name|'lastDate'
op|'='
name|'self'
op|'.'
name|'toDate'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|toDate
dedent|''
name|'def'
name|'toDate'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'time'
op|'.'
name|'gmtime'
op|'('
op|'*'
name|'args'
op|')'
op|'['
op|':'
number|'3'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'time'
op|'.'
name|'gmtime'
op|'('
name|'self'
op|'.'
name|'_clock'
op|')'
op|'['
op|':'
number|'3'
op|']'
newline|'\n'
nl|'\n'
DECL|class|DailyLogFileTestCase
dedent|''
dedent|''
name|'class'
name|'DailyLogFileTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test rotating log file.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'dir'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'self'
op|'.'
name|'dir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
string|'"testdaily.log"'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'dir'
op|','
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testWriting
dedent|''
name|'def'
name|'testWriting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'log'
op|'='
name|'RiggedDailyLogFile'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'dir'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"123"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"456"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"7890"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'self'
op|'.'
name|'path'
op|','
string|'"r"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|'"1234567890"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRotation
dedent|''
name|'def'
name|'testRotation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# this logfile should rotate every 10 bytes'
nl|'\n'
indent|'        '
name|'log'
op|'='
name|'RiggedDailyLogFile'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'dir'
op|')'
newline|'\n'
name|'days'
op|'='
op|'['
op|'('
name|'self'
op|'.'
name|'path'
op|'+'
string|"'.'"
op|'+'
name|'log'
op|'.'
name|'suffix'
op|'('
name|'day'
op|'*'
number|'86400'
op|')'
op|')'
name|'for'
name|'day'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'# test automatic rotation'
nl|'\n'
name|'log'
op|'.'
name|'_clock'
op|'='
number|'0.0'
comment|'# 1970/01/01 00:00.00'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"123"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'_clock'
op|'='
number|'43200'
comment|'# 1970/01/01 12:00.00'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"4567890"'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'_clock'
op|'='
number|'86400'
comment|'# 1970/01/02 00:00.00'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"1"'
op|'*'
number|'11'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'days'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'days'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'_clock'
op|'='
number|'172800'
comment|'# 1970/01/03 00:00.00'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'days'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'days'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'days'
op|'['
number|'2'
op|']'
op|')'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'_clock'
op|'='
number|'259199'
comment|'# 1970/01/03 23:59.59'
newline|'\n'
name|'log'
op|'.'
name|'write'
op|'('
string|'"3"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'days'
op|'['
number|'2'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

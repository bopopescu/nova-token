begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTest code for policies.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'Interface'
op|','
name|'implements'
op|','
name|'implementedBy'
newline|'\n'
nl|'\n'
name|'from'
name|'StringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'StringTransport'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'StringTransportWithDisconnection'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
op|','
name|'reactor'
op|','
name|'address'
op|','
name|'defer'
op|','
name|'task'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'policies'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleProtocol
name|'class'
name|'SimpleProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'connected'
op|'='
name|'disconnected'
op|'='
number|'0'
newline|'\n'
DECL|variable|buffer
name|'buffer'
op|'='
string|'""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'dConnected'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dDisconnected'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connected'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'dConnected'
op|'.'
name|'callback'
op|'('
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'disconnected'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'dDisconnected'
op|'.'
name|'callback'
op|'('
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'+='
name|'data'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SillyFactory
dedent|''
dedent|''
name|'class'
name|'SillyFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'p'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'p'
op|'='
name|'p'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|EchoProtocol
dedent|''
dedent|''
name|'class'
name|'EchoProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
DECL|variable|paused
indent|'    '
name|'paused'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|pauseProducing
name|'def'
name|'pauseProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'paused'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'paused'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|stopProducing
dedent|''
name|'def'
name|'stopProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Server
dedent|''
dedent|''
name|'class'
name|'Server'
op|'('
name|'protocol'
op|'.'
name|'ServerFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A simple server factory using L{EchoProtocol}.\n    """'
newline|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'EchoProtocol'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestableThrottlingFactory
dedent|''
name|'class'
name|'TestableThrottlingFactory'
op|'('
name|'policies'
op|'.'
name|'ThrottlingFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{policies.ThrottlingFactory} using a L{task.Clock} for tests.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'clock'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param clock: object providing a callLater method that can be used\n            for tests.\n        @type clock: C{task.Clock} or alike.\n        """'
newline|'\n'
name|'policies'
op|'.'
name|'ThrottlingFactory'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'='
name|'clock'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callLater
dedent|''
name|'def'
name|'callLater'
op|'('
name|'self'
op|','
name|'period'
op|','
name|'func'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Forward to the testable clock.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'callLater'
op|'('
name|'period'
op|','
name|'func'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestableTimeoutFactory
dedent|''
dedent|''
name|'class'
name|'TestableTimeoutFactory'
op|'('
name|'policies'
op|'.'
name|'TimeoutFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{policies.TimeoutFactory} using a L{task.Clock} for tests.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'clock'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param clock: object providing a callLater method that can be used\n            for tests.\n        @type clock: C{task.Clock} or alike.\n        """'
newline|'\n'
name|'policies'
op|'.'
name|'TimeoutFactory'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'='
name|'clock'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callLater
dedent|''
name|'def'
name|'callLater'
op|'('
name|'self'
op|','
name|'period'
op|','
name|'func'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Forward to the testable clock.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'callLater'
op|'('
name|'period'
op|','
name|'func'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|WrapperTestCase
dedent|''
dedent|''
name|'class'
name|'WrapperTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{WrappingFactory} and L{ProtocolWrapper}.\n    """'
newline|'\n'
DECL|member|test_protocolFactoryAttribute
name|'def'
name|'test_protocolFactoryAttribute'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make sure protocol.factory is the wrapped factory, not the wrapping\n        factory.\n        """'
newline|'\n'
name|'f'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'wf'
op|'='
name|'policies'
op|'.'
name|'WrappingFactory'
op|'('
name|'f'
op|')'
newline|'\n'
name|'p'
op|'='
name|'wf'
op|'.'
name|'buildProtocol'
op|'('
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'127.0.0.1'"
op|','
number|'35'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'p'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'factory'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_transportInterfaces
dedent|''
name|'def'
name|'test_transportInterfaces'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The transport wrapper passed to the wrapped protocol\'s\n        C{makeConnection} provides the same interfaces as are provided by the\n        original transport.\n        """'
newline|'\n'
DECL|class|IStubTransport
name|'class'
name|'IStubTransport'
op|'('
name|'Interface'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|StubTransport
dedent|''
name|'class'
name|'StubTransport'
op|':'
newline|'\n'
indent|'            '
name|'implements'
op|'('
name|'IStubTransport'
op|')'
newline|'\n'
nl|'\n'
comment|'# Looking up what ProtocolWrapper implements also mutates the class.'
nl|'\n'
comment|'# It adds __implemented__ and __providedBy__ attributes to it.  These'
nl|'\n'
comment|'# prevent __getattr__ from causing the IStubTransport.providedBy call'
nl|'\n'
comment|'# below from returning True.  If, by accident, nothing else causes'
nl|'\n'
comment|'# these attributes to be added to ProtocolWrapper, the test will pass,'
nl|'\n'
comment|'# but the interface will only be provided until something does trigger'
nl|'\n'
comment|'# their addition.  So we just trigger it right now to be sure.'
nl|'\n'
dedent|''
name|'implementedBy'
op|'('
name|'policies'
op|'.'
name|'ProtocolWrapper'
op|')'
newline|'\n'
nl|'\n'
name|'proto'
op|'='
name|'protocol'
op|'.'
name|'Protocol'
op|'('
op|')'
newline|'\n'
name|'wrapper'
op|'='
name|'policies'
op|'.'
name|'ProtocolWrapper'
op|'('
name|'policies'
op|'.'
name|'WrappingFactory'
op|'('
name|'None'
op|')'
op|','
name|'proto'
op|')'
newline|'\n'
nl|'\n'
name|'wrapper'
op|'.'
name|'makeConnection'
op|'('
name|'StubTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'IStubTransport'
op|'.'
name|'providedBy'
op|'('
name|'proto'
op|'.'
name|'transport'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|WrappingFactory
dedent|''
dedent|''
name|'class'
name|'WrappingFactory'
op|'('
name|'policies'
op|'.'
name|'WrappingFactory'
op|')'
op|':'
newline|'\n'
DECL|variable|protocol
indent|'    '
name|'protocol'
op|'='
name|'lambda'
name|'s'
op|','
name|'f'
op|','
name|'p'
op|':'
name|'p'
newline|'\n'
nl|'\n'
DECL|member|startFactory
name|'def'
name|'startFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policies'
op|'.'
name|'WrappingFactory'
op|'.'
name|'startFactory'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ThrottlingTestCase
dedent|''
dedent|''
name|'class'
name|'ThrottlingTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{policies.ThrottlingFactory}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_limit
name|'def'
name|'test_limit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Full test using a custom server limiting number of connections.\n        """'
newline|'\n'
name|'server'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'c1'
op|','
name|'c2'
op|','
name|'c3'
op|','
name|'c4'
op|'='
op|'['
name|'SimpleProtocol'
op|'('
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'4'
op|')'
op|']'
newline|'\n'
name|'tServer'
op|'='
name|'policies'
op|'.'
name|'ThrottlingFactory'
op|'('
name|'server'
op|','
number|'2'
op|')'
newline|'\n'
name|'wrapTServer'
op|'='
name|'WrappingFactory'
op|'('
name|'tServer'
op|')'
newline|'\n'
name|'wrapTServer'
op|'.'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Start listening'
nl|'\n'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'wrapTServer'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'n'
op|'='
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
DECL|function|_connect123
name|'def'
name|'_connect123'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'n'
op|','
name|'SillyFactory'
op|'('
name|'c1'
op|')'
op|')'
newline|'\n'
name|'c1'
op|'.'
name|'dConnected'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'lambda'
name|'r'
op|':'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'n'
op|','
name|'SillyFactory'
op|'('
name|'c2'
op|')'
op|')'
op|')'
newline|'\n'
name|'c2'
op|'.'
name|'dConnected'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'lambda'
name|'r'
op|':'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'n'
op|','
name|'SillyFactory'
op|'('
name|'c3'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'c3'
op|'.'
name|'dDisconnected'
newline|'\n'
nl|'\n'
DECL|function|_check123
dedent|''
name|'def'
name|'_check123'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
name|'c'
op|'.'
name|'connected'
name|'for'
name|'c'
name|'in'
name|'c1'
op|','
name|'c2'
op|','
name|'c3'
op|']'
op|','
op|'['
number|'1'
op|','
number|'1'
op|','
number|'1'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
name|'c'
op|'.'
name|'disconnected'
name|'for'
name|'c'
name|'in'
name|'c1'
op|','
name|'c2'
op|','
name|'c3'
op|']'
op|','
op|'['
number|'0'
op|','
number|'0'
op|','
number|'1'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'tServer'
op|'.'
name|'protocols'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'return'
name|'results'
newline|'\n'
nl|'\n'
DECL|function|_lose1
dedent|''
name|'def'
name|'_lose1'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
comment|'# disconnect one protocol and now another should be able to connect'
nl|'\n'
indent|'            '
name|'c1'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
name|'c1'
op|'.'
name|'dDisconnected'
newline|'\n'
nl|'\n'
DECL|function|_connect4
dedent|''
name|'def'
name|'_connect4'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'n'
op|','
name|'SillyFactory'
op|'('
name|'c4'
op|')'
op|')'
newline|'\n'
name|'return'
name|'c4'
op|'.'
name|'dConnected'
newline|'\n'
nl|'\n'
DECL|function|_check4
dedent|''
name|'def'
name|'_check4'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c4'
op|'.'
name|'connected'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'c4'
op|'.'
name|'disconnected'
op|','
number|'0'
op|')'
newline|'\n'
name|'return'
name|'results'
newline|'\n'
nl|'\n'
DECL|function|_cleanup
dedent|''
name|'def'
name|'_cleanup'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'c'
name|'in'
name|'c2'
op|','
name|'c4'
op|':'
newline|'\n'
indent|'                '
name|'c'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
nl|'\n'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'p'
op|'.'
name|'stopListening'
op|')'
op|','
nl|'\n'
name|'c2'
op|'.'
name|'dDisconnected'
op|','
nl|'\n'
name|'c4'
op|'.'
name|'dDisconnected'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'wrapTServer'
op|'.'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'_connect123'
op|')'
newline|'\n'
name|'wrapTServer'
op|'.'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'_check123'
op|')'
newline|'\n'
name|'wrapTServer'
op|'.'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'_lose1'
op|')'
newline|'\n'
name|'wrapTServer'
op|'.'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'_connect4'
op|')'
newline|'\n'
name|'wrapTServer'
op|'.'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'_check4'
op|')'
newline|'\n'
name|'wrapTServer'
op|'.'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'_cleanup'
op|')'
newline|'\n'
name|'return'
name|'wrapTServer'
op|'.'
name|'deferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_writeLimit
dedent|''
name|'def'
name|'test_writeLimit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check the writeLimit parameter: write data, and check for the pause\n        status.\n        """'
newline|'\n'
name|'server'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'tServer'
op|'='
name|'TestableThrottlingFactory'
op|'('
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
op|','
name|'server'
op|','
name|'writeLimit'
op|'='
number|'10'
op|')'
newline|'\n'
name|'port'
op|'='
name|'tServer'
op|'.'
name|'buildProtocol'
op|'('
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'127.0.0.1'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'tr'
op|'='
name|'StringTransportWithDisconnection'
op|'('
op|')'
newline|'\n'
name|'tr'
op|'.'
name|'protocol'
op|'='
name|'port'
newline|'\n'
name|'port'
op|'.'
name|'makeConnection'
op|'('
name|'tr'
op|')'
newline|'\n'
name|'port'
op|'.'
name|'producer'
op|'='
name|'port'
op|'.'
name|'wrappedProtocol'
newline|'\n'
nl|'\n'
name|'port'
op|'.'
name|'dataReceived'
op|'('
string|'"0123456789"'
op|')'
newline|'\n'
name|'port'
op|'.'
name|'dataReceived'
op|'('
string|'"abcdefghij"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tr'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|'"0123456789abcdefghij"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tServer'
op|'.'
name|'writtenThisSecond'
op|','
number|'20'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'port'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'paused'
op|')'
newline|'\n'
nl|'\n'
comment|"# at this point server should've written 20 bytes, 10 bytes"
nl|'\n'
comment|'# above the limit so writing should be paused around 1 second'
nl|'\n'
comment|"# from 'now', and resumed a second after that"
nl|'\n'
name|'tServer'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'1.05'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tServer'
op|'.'
name|'writtenThisSecond'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'port'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'paused'
op|')'
newline|'\n'
nl|'\n'
name|'tServer'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'1.05'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tServer'
op|'.'
name|'writtenThisSecond'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'port'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'paused'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readLimit
dedent|''
name|'def'
name|'test_readLimit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check the readLimit parameter: read data and check for the pause\n        status.\n        """'
newline|'\n'
name|'server'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'tServer'
op|'='
name|'TestableThrottlingFactory'
op|'('
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
op|','
name|'server'
op|','
name|'readLimit'
op|'='
number|'10'
op|')'
newline|'\n'
name|'port'
op|'='
name|'tServer'
op|'.'
name|'buildProtocol'
op|'('
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'127.0.0.1'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'tr'
op|'='
name|'StringTransportWithDisconnection'
op|'('
op|')'
newline|'\n'
name|'tr'
op|'.'
name|'protocol'
op|'='
name|'port'
newline|'\n'
name|'port'
op|'.'
name|'makeConnection'
op|'('
name|'tr'
op|')'
newline|'\n'
nl|'\n'
name|'port'
op|'.'
name|'dataReceived'
op|'('
string|'"0123456789"'
op|')'
newline|'\n'
name|'port'
op|'.'
name|'dataReceived'
op|'('
string|'"abcdefghij"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tr'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|'"0123456789abcdefghij"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tServer'
op|'.'
name|'readThisSecond'
op|','
number|'20'
op|')'
newline|'\n'
nl|'\n'
name|'tServer'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'1.05'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tServer'
op|'.'
name|'readThisSecond'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tr'
op|'.'
name|'producerState'
op|','
string|"'paused'"
op|')'
newline|'\n'
nl|'\n'
name|'tServer'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'1.05'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tServer'
op|'.'
name|'readThisSecond'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tr'
op|'.'
name|'producerState'
op|','
string|"'producing'"
op|')'
newline|'\n'
nl|'\n'
name|'tr'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'port'
op|'.'
name|'dataReceived'
op|'('
string|'"0123456789"'
op|')'
newline|'\n'
name|'port'
op|'.'
name|'dataReceived'
op|'('
string|'"abcdefghij"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tr'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|'"0123456789abcdefghij"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tServer'
op|'.'
name|'readThisSecond'
op|','
number|'20'
op|')'
newline|'\n'
nl|'\n'
name|'tServer'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'1.05'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tServer'
op|'.'
name|'readThisSecond'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tr'
op|'.'
name|'producerState'
op|','
string|"'paused'"
op|')'
newline|'\n'
nl|'\n'
name|'tServer'
op|'.'
name|'clock'
op|'.'
name|'advance'
op|'('
number|'1.05'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tServer'
op|'.'
name|'readThisSecond'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tr'
op|'.'
name|'producerState'
op|','
string|"'producing'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TimeoutTestCase
dedent|''
dedent|''
name|'class'
name|'TimeoutTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{policies.TimeoutFactory}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a testable, deterministic clock, and a set of\n        server factory/protocol/transport.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'wrappedFactory'
op|'='
name|'protocol'
op|'.'
name|'ServerFactory'
op|'('
op|')'
newline|'\n'
name|'wrappedFactory'
op|'.'
name|'protocol'
op|'='
name|'SimpleProtocol'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'='
name|'TestableTimeoutFactory'
op|'('
name|'self'
op|'.'
name|'clock'
op|','
name|'wrappedFactory'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
nl|'\n'
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'127.0.0.1'"
op|','
number|'12345'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'StringTransportWithDisconnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'proto'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_timeout
dedent|''
name|'def'
name|'test_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make sure that when a TimeoutFactory accepts a connection, it will\n        time out that connection if no data is read or written within the\n        timeout period.\n        """'
newline|'\n'
comment|'# Let almost 3 time units pass'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0.0'
op|','
number|'0.5'
op|','
number|'1.0'
op|','
number|'1.0'
op|','
number|'0.4'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now let the timer elapse'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0.0'
op|','
number|'0.2'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendAvoidsTimeout
dedent|''
name|'def'
name|'test_sendAvoidsTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make sure that writing data to a transport from a protocol\n        constructed by a TimeoutFactory resets the timeout countdown.\n        """'
newline|'\n'
comment|'# Let half the countdown period elapse'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0.0'
op|','
number|'0.5'
op|','
number|'1.0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
nl|'\n'
comment|"# Send some data (self.proto is the /real/ proto's transport, so this"
nl|'\n'
comment|'# is the write that gets called)'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'write'
op|'('
string|"'bytes bytes bytes'"
op|')'
newline|'\n'
nl|'\n'
comment|'# More time passes, putting us past the original timeout'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0.0'
op|','
number|'1.0'
op|','
number|'1.0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure writeSequence delays timeout as well'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'writeSequence'
op|'('
op|'['
string|"'bytes'"
op|']'
op|'*'
number|'3'
op|')'
newline|'\n'
nl|'\n'
comment|'# Tick tock'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0.0'
op|','
number|'1.0'
op|','
number|'1.0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
nl|'\n'
comment|"# Don't write anything more, just let the timeout expire"
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0.0'
op|','
number|'2.0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_receiveAvoidsTimeout
dedent|''
name|'def'
name|'test_receiveAvoidsTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make sure that receiving data also resets the timeout countdown.\n        """'
newline|'\n'
comment|'# Let half the countdown period elapse'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0.0'
op|','
number|'1.0'
op|','
number|'0.5'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
nl|'\n'
comment|'# Some bytes arrive, they should reset the counter'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|"'bytes bytes bytes'"
op|')'
newline|'\n'
nl|'\n'
comment|'# We pass the original timeout'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0.0'
op|','
number|'1.0'
op|','
number|'1.0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
nl|'\n'
comment|'# Nothing more arrives though, the new timeout deadline is passed,'
nl|'\n'
comment|'# the connection should be dropped.'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0.0'
op|','
number|'1.0'
op|','
number|'1.0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'wrappedProtocol'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TimeoutTester
dedent|''
dedent|''
name|'class'
name|'TimeoutTester'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|','
name|'policies'
op|'.'
name|'TimeoutMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A testable protocol with timeout facility.\n\n    @ivar timedOut: set to C{True} if a timeout has been detected.\n    @type timedOut: C{bool}\n    """'
newline|'\n'
DECL|variable|timeOut
name|'timeOut'
op|'='
number|'3'
newline|'\n'
DECL|variable|timedOut
name|'timedOut'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'clock'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Initialize the protocol with a C{task.Clock} object.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'='
name|'clock'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Upon connection, set the timeout.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'self'
op|'.'
name|'timeOut'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reset the timeout on data.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'resetTimeout'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'Protocol'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        On connection lost, cancel all timeout operations.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|timeoutConnection
dedent|''
name|'def'
name|'timeoutConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Flags the timedOut variable to indicate the timeout of the connection.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'timedOut'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|callLater
dedent|''
name|'def'
name|'callLater'
op|'('
name|'self'
op|','
name|'timeout'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override callLater to use the deterministic clock.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'callLater'
op|'('
name|'timeout'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestTimeout
dedent|''
dedent|''
name|'class'
name|'TestTimeout'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{policies.TimeoutMixin}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a testable, deterministic clock and a C{TimeoutTester} instance.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'='
name|'task'
op|'.'
name|'Clock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'='
name|'TimeoutTester'
op|'('
name|'self'
op|'.'
name|'clock'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_overriddenCallLater
dedent|''
name|'def'
name|'test_overriddenCallLater'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that the callLater of the clock is used instead of\n        C{reactor.callLater}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'setTimeout'
op|'('
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'clock'
op|'.'
name|'calls'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_timeout
dedent|''
name|'def'
name|'test_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that the protocol does timeout at the time specified by its\n        C{timeOut} attribute.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# timeOut value is 3'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0'
op|','
number|'0.5'
op|','
number|'1.0'
op|','
number|'1.0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'timedOut'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0'
op|','
number|'1.0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'timedOut'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noTimeout
dedent|''
name|'def'
name|'test_noTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that receiving data is delaying the timeout of the connection.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0'
op|','
number|'0.5'
op|','
number|'1.0'
op|','
number|'1.0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'timedOut'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'dataReceived'
op|'('
string|"'hello there'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0'
op|','
number|'1.0'
op|','
number|'1.0'
op|','
number|'0.5'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'timedOut'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0'
op|','
number|'1.0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'timedOut'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_resetTimeout
dedent|''
name|'def'
name|'test_resetTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that setting a new value for timeout cancel the previous value\n        and install a new timeout.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'timeOut'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'setTimeout'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'timeOut'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0'
op|','
number|'0.9'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'timedOut'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0'
op|','
number|'0.2'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'timedOut'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cancelTimeout
dedent|''
name|'def'
name|'test_cancelTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Setting the timeout to C{None} cancel any timeout operations.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'timeOut'
op|'='
number|'5'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'makeConnection'
op|'('
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'timeOut'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'clock'
op|'.'
name|'pump'
op|'('
op|'['
number|'0'
op|','
number|'5'
op|','
number|'5'
op|','
number|'5'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'timedOut'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_return
dedent|''
name|'def'
name|'test_return'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        setTimeout should return the value of the previous timeout.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'timeOut'
op|'='
number|'5'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'setTimeout'
op|'('
number|'10'
op|')'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
op|','
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'setTimeout'
op|'('
number|'1'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'proto'
op|'.'
name|'timeOut'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Clean up the DelayedCall'
nl|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LimitTotalConnectionsFactoryTestCase
dedent|''
dedent|''
name|'class'
name|'LimitTotalConnectionsFactoryTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests for policies.LimitTotalConnectionsFactory"""'
newline|'\n'
DECL|member|testConnectionCounting
name|'def'
name|'testConnectionCounting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make a basic factory'
nl|'\n'
indent|'        '
name|'factory'
op|'='
name|'policies'
op|'.'
name|'LimitTotalConnectionsFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'protocol'
op|'='
name|'protocol'
op|'.'
name|'Protocol'
newline|'\n'
nl|'\n'
comment|'# connectionCount starts at zero'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'factory'
op|'.'
name|'connectionCount'
op|')'
newline|'\n'
nl|'\n'
comment|'# connectionCount increments as connections are made'
nl|'\n'
name|'p1'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'factory'
op|'.'
name|'connectionCount'
op|')'
newline|'\n'
name|'p2'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'factory'
op|'.'
name|'connectionCount'
op|')'
newline|'\n'
nl|'\n'
comment|'# and decrements as they are lost'
nl|'\n'
name|'p1'
op|'.'
name|'connectionLost'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'factory'
op|'.'
name|'connectionCount'
op|')'
newline|'\n'
name|'p2'
op|'.'
name|'connectionLost'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'factory'
op|'.'
name|'connectionCount'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testConnectionLimiting
dedent|''
name|'def'
name|'testConnectionLimiting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make a basic factory with a connection limit of 1'
nl|'\n'
indent|'        '
name|'factory'
op|'='
name|'policies'
op|'.'
name|'LimitTotalConnectionsFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'protocol'
op|'='
name|'protocol'
op|'.'
name|'Protocol'
newline|'\n'
name|'factory'
op|'.'
name|'connectionLimit'
op|'='
number|'1'
newline|'\n'
nl|'\n'
comment|'# Make a connection'
nl|'\n'
name|'p'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'None'
op|','
name|'p'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'factory'
op|'.'
name|'connectionCount'
op|')'
newline|'\n'
nl|'\n'
comment|'# Try to make a second connection, which will exceed the connection'
nl|'\n'
comment|'# limit.  This should return None, because overflowProtocol is None.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'factory'
op|'.'
name|'connectionCount'
op|')'
newline|'\n'
nl|'\n'
comment|'# Define an overflow protocol'
nl|'\n'
DECL|class|OverflowProtocol
name|'class'
name|'OverflowProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
DECL|member|connectionMade
indent|'            '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'factory'
op|'.'
name|'overflowed'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'factory'
op|'.'
name|'overflowProtocol'
op|'='
name|'OverflowProtocol'
newline|'\n'
name|'factory'
op|'.'
name|'overflowed'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# Try to make a second connection again, now that we have an overflow'
nl|'\n'
comment|'# protocol.  Note that overflow connections count towards the connection'
nl|'\n'
comment|'# count.'
nl|'\n'
name|'op'
op|'='
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'None'
op|')'
newline|'\n'
name|'op'
op|'.'
name|'makeConnection'
op|'('
name|'None'
op|')'
comment|'# to trigger connectionMade'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'True'
op|','
name|'factory'
op|'.'
name|'overflowed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'factory'
op|'.'
name|'connectionCount'
op|')'
newline|'\n'
nl|'\n'
comment|'# Close the connections.'
nl|'\n'
name|'p'
op|'.'
name|'connectionLost'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'factory'
op|'.'
name|'connectionCount'
op|')'
newline|'\n'
name|'op'
op|'.'
name|'connectionLost'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'factory'
op|'.'
name|'connectionCount'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WriteSequenceEchoProtocol
dedent|''
dedent|''
name|'class'
name|'WriteSequenceEchoProtocol'
op|'('
name|'EchoProtocol'
op|')'
op|':'
newline|'\n'
DECL|member|dataReceived
indent|'    '
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'bytes'
op|'.'
name|'find'
op|'('
string|"'vector!'"
op|')'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'writeSequence'
op|'('
op|'['
name|'bytes'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'EchoProtocol'
op|'.'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestLoggingFactory
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestLoggingFactory'
op|'('
name|'policies'
op|'.'
name|'TrafficLoggingFactory'
op|')'
op|':'
newline|'\n'
DECL|variable|openFile
indent|'    '
name|'openFile'
op|'='
name|'None'
newline|'\n'
DECL|member|open
name|'def'
name|'open'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'self'
op|'.'
name|'openFile'
name|'is'
name|'None'
op|','
string|'"open() called too many times"'
newline|'\n'
name|'self'
op|'.'
name|'openFile'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'openFile'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoggingFactoryTestCase
dedent|''
dedent|''
name|'class'
name|'LoggingFactoryTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{policies.TrafficLoggingFactory}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_thingsGetLogged
name|'def'
name|'test_thingsGetLogged'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check the output produced by L{policies.TrafficLoggingFactory}.\n        """'
newline|'\n'
name|'wrappedFactory'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'wrappedFactory'
op|'.'
name|'protocol'
op|'='
name|'WriteSequenceEchoProtocol'
newline|'\n'
name|'t'
op|'='
name|'StringTransportWithDisconnection'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'TestLoggingFactory'
op|'('
name|'wrappedFactory'
op|','
string|"'test'"
op|')'
newline|'\n'
name|'p'
op|'='
name|'f'
op|'.'
name|'buildProtocol'
op|'('
op|'('
string|"'1.2.3.4'"
op|','
number|'5678'
op|')'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'protocol'
op|'='
name|'p'
newline|'\n'
name|'p'
op|'.'
name|'makeConnection'
op|'('
name|'t'
op|')'
newline|'\n'
nl|'\n'
name|'v'
op|'='
name|'f'
op|'.'
name|'openFile'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
string|"'*'"
name|'in'
name|'v'
op|','
string|'"* not found in %r"'
op|'%'
op|'('
name|'v'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'dataReceived'
op|'('
string|"'here are some bytes'"
op|')'
newline|'\n'
nl|'\n'
name|'v'
op|'='
name|'f'
op|'.'
name|'openFile'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"C 1: \'here are some bytes\'"'
op|','
name|'v'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"S 1: \'here are some bytes\'"'
op|','
name|'v'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'here are some bytes'"
op|')'
newline|'\n'
nl|'\n'
name|'t'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'dataReceived'
op|'('
string|"'prepare for vector! to the extreme'"
op|')'
newline|'\n'
name|'v'
op|'='
name|'f'
op|'.'
name|'openFile'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"SV 1: [\'prepare for vector! to the extreme\']"'
op|','
name|'v'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'t'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'prepare for vector! to the extreme'"
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'v'
op|'='
name|'f'
op|'.'
name|'openFile'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'ConnectionDone'"
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_counter
dedent|''
name|'def'
name|'test_counter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test counter management with the resetCounter method.\n        """'
newline|'\n'
name|'wrappedFactory'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'TestLoggingFactory'
op|'('
name|'wrappedFactory'
op|','
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'f'
op|'.'
name|'_counter'
op|','
number|'0'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'buildProtocol'
op|'('
op|'('
string|"'1.2.3.4'"
op|','
number|'5678'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'f'
op|'.'
name|'_counter'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# Reset log file'
nl|'\n'
name|'f'
op|'.'
name|'openFile'
op|'='
name|'None'
newline|'\n'
name|'f'
op|'.'
name|'buildProtocol'
op|'('
op|'('
string|"'1.2.3.4'"
op|','
number|'5679'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'f'
op|'.'
name|'_counter'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'.'
name|'resetCounter'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'f'
op|'.'
name|'_counter'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

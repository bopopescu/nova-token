begin_unit
comment|'# -*- test-case-name: twisted.test.test_udp -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for implementations of L{IReactorUDP} and L{IReactorMulticast}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
op|','
name|'util'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
op|','
name|'gatherResults'
op|','
name|'maybeDeferred'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
op|','
name|'reactor'
op|','
name|'error'
op|','
name|'defer'
op|','
name|'interfaces'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'runtime'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Mixin
name|'class'
name|'Mixin'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|started
indent|'    '
name|'started'
op|'='
number|'0'
newline|'\n'
DECL|variable|stopped
name|'stopped'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|variable|startedDeferred
name|'startedDeferred'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'packets'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|startProtocol
dedent|''
name|'def'
name|'startProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'started'
op|'='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'startedDeferred'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'self'
op|'.'
name|'startedDeferred'
op|'='
name|'self'
op|'.'
name|'startedDeferred'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopProtocol
dedent|''
dedent|''
name|'def'
name|'stopProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stopped'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Server
dedent|''
dedent|''
name|'class'
name|'Server'
op|'('
name|'Mixin'
op|','
name|'protocol'
op|'.'
name|'DatagramProtocol'
op|')'
op|':'
newline|'\n'
DECL|variable|packetReceived
indent|'    '
name|'packetReceived'
op|'='
name|'None'
newline|'\n'
DECL|variable|refused
name|'refused'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|datagramReceived
name|'def'
name|'datagramReceived'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'packets'
op|'.'
name|'append'
op|'('
op|'('
name|'data'
op|','
name|'addr'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'packetReceived'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'self'
op|'.'
name|'packetReceived'
op|'='
name|'self'
op|'.'
name|'packetReceived'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Client
dedent|''
dedent|''
dedent|''
name|'class'
name|'Client'
op|'('
name|'Mixin'
op|','
name|'protocol'
op|'.'
name|'ConnectedDatagramProtocol'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|packetReceived
indent|'    '
name|'packetReceived'
op|'='
name|'None'
newline|'\n'
DECL|variable|refused
name|'refused'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|datagramReceived
name|'def'
name|'datagramReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'packets'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'packetReceived'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'self'
op|'.'
name|'packetReceived'
op|'='
name|'self'
op|'.'
name|'packetReceived'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionFailed
dedent|''
dedent|''
name|'def'
name|'connectionFailed'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'startedDeferred'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'self'
op|'.'
name|'startedDeferred'
op|'='
name|'self'
op|'.'
name|'startedDeferred'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'errback'
op|'('
name|'failure'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'failure'
op|'='
name|'failure'
newline|'\n'
nl|'\n'
DECL|member|connectionRefused
dedent|''
name|'def'
name|'connectionRefused'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'startedDeferred'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'self'
op|'.'
name|'startedDeferred'
op|'='
name|'self'
op|'.'
name|'startedDeferred'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'errback'
op|'('
name|'error'
op|'.'
name|'ConnectionRefusedError'
op|'('
string|'"yup"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'refused'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GoodClient
dedent|''
dedent|''
name|'class'
name|'GoodClient'
op|'('
name|'Server'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|connectionRefused
indent|'    '
name|'def'
name|'connectionRefused'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'startedDeferred'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'self'
op|'.'
name|'startedDeferred'
op|'='
name|'self'
op|'.'
name|'startedDeferred'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'errback'
op|'('
name|'error'
op|'.'
name|'ConnectionRefusedError'
op|'('
string|'"yup"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'refused'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BadClientError
dedent|''
dedent|''
name|'class'
name|'BadClientError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Raised by BadClient at the end of every datagramReceived call to try and\n    screw stuff up.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BadClient
dedent|''
name|'class'
name|'BadClient'
op|'('
name|'protocol'
op|'.'
name|'DatagramProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A DatagramProtocol which always raises an exception from datagramReceived.\n    Used to test error handling behavior in the reactor for that method.\n    """'
newline|'\n'
DECL|variable|d
name|'d'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|setDeferred
name|'def'
name|'setDeferred'
op|'('
name|'self'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the Deferred which will be called back when datagramReceived is\n        called.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'d'
op|'='
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|datagramReceived
dedent|''
name|'def'
name|'datagramReceived'
op|'('
name|'self'
op|','
name|'bytes'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'d'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'self'
op|'.'
name|'d'
op|'='
name|'self'
op|'.'
name|'d'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'bytes'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'BadClientError'
op|'('
string|'"Application code is very buggy!"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UDPTestCase
dedent|''
dedent|''
name|'class'
name|'UDPTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|testOldAddress
indent|'    '
name|'def'
name|'testOldAddress'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'server'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'server'
op|'.'
name|'startedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenUDP'
op|'('
number|'0'
op|','
name|'server'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
DECL|function|cbStarted
name|'def'
name|'cbStarted'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'addr'
op|'='
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'addr'
op|','
op|'('
string|"'INET_UDP'"
op|','
name|'addr'
op|'.'
name|'host'
op|','
name|'addr'
op|'.'
name|'port'
op|')'
op|')'
newline|'\n'
name|'return'
name|'p'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbStarted'
op|')'
newline|'\n'
dedent|''
name|'testOldAddress'
op|'.'
name|'suppress'
op|'='
op|'['
nl|'\n'
name|'util'
op|'.'
name|'suppress'
op|'('
name|'message'
op|'='
string|"'IPv4Address.__getitem__'"
op|','
nl|'\n'
name|'category'
op|'='
name|'DeprecationWarning'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testStartStop
name|'def'
name|'testStartStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'server'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'server'
op|'.'
name|'startedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'port1'
op|'='
name|'reactor'
op|'.'
name|'listenUDP'
op|'('
number|'0'
op|','
name|'server'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
DECL|function|cbStarted
name|'def'
name|'cbStarted'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'server'
op|'.'
name|'started'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'server'
op|'.'
name|'stopped'
op|','
number|'0'
op|')'
newline|'\n'
name|'return'
name|'port1'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
DECL|function|cbStopped
dedent|''
name|'def'
name|'cbStopped'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'server'
op|'.'
name|'stopped'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbStarted'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbStopped'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRebind
dedent|''
name|'def'
name|'testRebind'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure binding the same DatagramProtocol repeatedly invokes all'
nl|'\n'
comment|'# the right callbacks.'
nl|'\n'
indent|'        '
name|'server'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'server'
op|'.'
name|'startedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenUDP'
op|'('
number|'0'
op|','
name|'server'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbStarted
name|'def'
name|'cbStarted'
op|'('
name|'ignored'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'port'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbStopped
dedent|''
name|'def'
name|'cbStopped'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'server'
op|'.'
name|'startedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenUDP'
op|'('
number|'0'
op|','
name|'server'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbStarted'
op|','
name|'p'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbStarted'
op|','
name|'p'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testBindError
dedent|''
name|'def'
name|'testBindError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'server'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'server'
op|'.'
name|'startedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenUDP'
op|'('
number|'0'
op|','
name|'server'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbStarted
name|'def'
name|'cbStarted'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|','
name|'server'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'server2'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'CannotListenError'
op|','
nl|'\n'
name|'reactor'
op|'.'
name|'listenUDP'
op|','
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
name|'server2'
op|','
nl|'\n'
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbStarted'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbFinished
name|'def'
name|'cbFinished'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'port'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbFinished'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testSendPackets
dedent|''
name|'def'
name|'testSendPackets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'server'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'serverStarted'
op|'='
name|'server'
op|'.'
name|'startedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'port1'
op|'='
name|'reactor'
op|'.'
name|'listenUDP'
op|'('
number|'0'
op|','
name|'server'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'GoodClient'
op|'('
op|')'
newline|'\n'
name|'clientStarted'
op|'='
name|'client'
op|'.'
name|'startedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbServerStarted
name|'def'
name|'cbServerStarted'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'port2'
op|'='
name|'reactor'
op|'.'
name|'listenUDP'
op|'('
number|'0'
op|','
name|'client'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'return'
name|'clientStarted'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'serverStarted'
op|'.'
name|'addCallback'
op|'('
name|'cbServerStarted'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbClientStarted
name|'def'
name|'cbClientStarted'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'client'
op|'.'
name|'transport'
op|'.'
name|'connect'
op|'('
string|'"127.0.0.1"'
op|','
nl|'\n'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'cAddr'
op|'='
name|'client'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
name|'sAddr'
op|'='
name|'server'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'serverSend'
op|'='
name|'client'
op|'.'
name|'packetReceived'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"hello"'
op|','
op|'('
name|'cAddr'
op|'.'
name|'host'
op|','
name|'cAddr'
op|'.'
name|'port'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'clientWrites'
op|'='
op|'['
nl|'\n'
op|'('
string|'"a"'
op|','
op|')'
op|','
nl|'\n'
op|'('
string|'"b"'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|'"c"'
op|','
op|'('
name|'sAddr'
op|'.'
name|'host'
op|','
name|'sAddr'
op|'.'
name|'port'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|function|cbClientSend
name|'def'
name|'cbClientSend'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'clientWrites'
op|':'
newline|'\n'
indent|'                    '
name|'nextClientWrite'
op|'='
name|'server'
op|'.'
name|'packetReceived'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'nextClientWrite'
op|'.'
name|'addCallback'
op|'('
name|'cbClientSend'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
op|'*'
name|'clientWrites'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
name|'return'
name|'nextClientWrite'
newline|'\n'
nl|'\n'
comment|'# No one will ever call .errback on either of these Deferreds,'
nl|'\n'
comment|'# but there is a non-trivial amount of test code which might'
nl|'\n'
comment|'# cause them to fail somehow.  So fireOnOneErrback=True.'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
nl|'\n'
name|'cbClientSend'
op|'('
name|'None'
op|')'
op|','
nl|'\n'
name|'serverSend'
op|']'
op|','
nl|'\n'
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbClientStarted'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbSendsFinished
name|'def'
name|'cbSendsFinished'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cAddr'
op|'='
name|'client'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
name|'sAddr'
op|'='
name|'server'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'client'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
string|'"hello"'
op|','
op|'('
name|'sAddr'
op|'.'
name|'host'
op|','
name|'sAddr'
op|'.'
name|'port'
op|')'
op|')'
op|']'
op|')'
newline|'\n'
name|'clientAddr'
op|'='
op|'('
name|'cAddr'
op|'.'
name|'host'
op|','
name|'cAddr'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'server'
op|'.'
name|'packets'
op|','
nl|'\n'
op|'['
op|'('
string|'"a"'
op|','
name|'clientAddr'
op|')'
op|','
nl|'\n'
op|'('
string|'"b"'
op|','
name|'clientAddr'
op|')'
op|','
nl|'\n'
op|'('
string|'"c"'
op|','
name|'clientAddr'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbSendsFinished'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbFinished
name|'def'
name|'cbFinished'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
nl|'\n'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'port1'
op|'.'
name|'stopListening'
op|')'
op|','
nl|'\n'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'port2'
op|'.'
name|'stopListening'
op|')'
op|']'
op|','
nl|'\n'
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbFinished'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testConnectionRefused
dedent|''
name|'def'
name|'testConnectionRefused'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# assume no one listening on port 80 UDP'
nl|'\n'
indent|'        '
name|'client'
op|'='
name|'GoodClient'
op|'('
op|')'
newline|'\n'
name|'clientStarted'
op|'='
name|'client'
op|'.'
name|'startedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenUDP'
op|'('
number|'0'
op|','
name|'client'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
nl|'\n'
name|'server'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'serverStarted'
op|'='
name|'server'
op|'.'
name|'startedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'port2'
op|'='
name|'reactor'
op|'.'
name|'listenUDP'
op|'('
number|'0'
op|','
name|'server'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
nl|'\n'
op|'['
name|'clientStarted'
op|','
name|'serverStarted'
op|']'
op|','
nl|'\n'
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbStarted
name|'def'
name|'cbStarted'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'connectionRefused'
op|'='
name|'client'
op|'.'
name|'startedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'connect'
op|'('
string|'"127.0.0.1"'
op|','
number|'80'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'10'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'client'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'str'
op|'('
name|'i'
op|')'
op|')'
newline|'\n'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'str'
op|'('
name|'i'
op|')'
op|','
op|'('
string|'"127.0.0.1"'
op|','
number|'80'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
nl|'\n'
name|'connectionRefused'
op|','
nl|'\n'
name|'error'
op|'.'
name|'ConnectionRefusedError'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbStarted'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbFinished
name|'def'
name|'cbFinished'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
nl|'\n'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
op|','
nl|'\n'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'port2'
op|'.'
name|'stopListening'
op|')'
op|']'
op|','
nl|'\n'
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbFinished'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testBadConnect
dedent|''
name|'def'
name|'testBadConnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'client'
op|'='
name|'GoodClient'
op|'('
op|')'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenUDP'
op|'('
number|'0'
op|','
name|'client'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'client'
op|'.'
name|'transport'
op|'.'
name|'connect'
op|','
nl|'\n'
string|'"localhost"'
op|','
number|'80'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'connect'
op|'('
string|'"127.0.0.1"'
op|','
number|'80'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'client'
op|'.'
name|'transport'
op|'.'
name|'connect'
op|','
nl|'\n'
string|'"127.0.0.1"'
op|','
number|'80'
op|')'
newline|'\n'
name|'return'
name|'port'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|testDatagramReceivedError
dedent|''
name|'def'
name|'testDatagramReceivedError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that when datagramReceived raises an exception it is logged but\n        the port is not disconnected.\n        """'
newline|'\n'
name|'finalDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbCompleted
name|'def'
name|'cbCompleted'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Flush the exceptions which the reactor should have logged and make\n            sure they\'re actually there.\n            """'
newline|'\n'
name|'errs'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'BadClientError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'errs'
op|')'
op|','
number|'2'
op|','
string|'"Incorrectly found %d errors, expected 2"'
op|'%'
op|'('
name|'len'
op|'('
name|'errs'
op|')'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'finalDeferred'
op|'.'
name|'addCallback'
op|'('
name|'cbCompleted'
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'BadClient'
op|'('
op|')'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenUDP'
op|'('
number|'0'
op|','
name|'client'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbCleanup
name|'def'
name|'cbCleanup'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Disconnect the port we started and pass on whatever was given to us\n            in case it was a Failure.\n            """'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
op|'.'
name|'addBoth'
op|'('
name|'lambda'
name|'ign'
op|':'
name|'result'
op|')'
newline|'\n'
dedent|''
name|'finalDeferred'
op|'.'
name|'addBoth'
op|'('
name|'cbCleanup'
op|')'
newline|'\n'
nl|'\n'
name|'addr'
op|'='
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# UDP is not reliable.  Try to send as many as 60 packets before giving'
nl|'\n'
comment|"# up.  Conceivably, all sixty could be lost, but they probably won't be"
nl|'\n'
comment|'# unless all UDP traffic is being dropped, and then the rest of these'
nl|'\n'
comment|'# UDP tests will likely fail as well.  Ideally, this test (and probably'
nl|'\n'
comment|"# others) wouldn't even use actual UDP traffic: instead, they would"
nl|'\n'
comment|'# stub out the socket with a fake one which could be made to behave in'
nl|'\n'
comment|'# whatever way the test desires.  Unfortunately, this is hard because'
nl|'\n'
comment|'# of differences in various reactor implementations.'
nl|'\n'
name|'attempts'
op|'='
name|'range'
op|'('
number|'60'
op|')'
newline|'\n'
name|'succeededAttempts'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|makeAttempt
name|'def'
name|'makeAttempt'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Send one packet to the listening BadClient.  Set up a 0.1 second\n            timeout to do re-transmits in case the packet is dropped.  When two\n            packets have been received by the BadClient, stop sending and let\n            the finalDeferred\'s callbacks do some assertions.\n            """'
newline|'\n'
name|'if'
name|'not'
name|'attempts'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Not enough packets received"'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                    '
name|'finalDeferred'
op|'.'
name|'errback'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'failIfIdentical'
op|'('
name|'client'
op|'.'
name|'transport'
op|','
name|'None'
op|','
string|'"UDP Protocol lost its transport"'
op|')'
newline|'\n'
nl|'\n'
name|'packet'
op|'='
name|'str'
op|'('
name|'attempts'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
name|'packetDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'setDeferred'
op|'('
name|'packetDeferred'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'packet'
op|','
op|'('
name|'addr'
op|'.'
name|'host'
op|','
name|'addr'
op|'.'
name|'port'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbPacketReceived
name|'def'
name|'cbPacketReceived'
op|'('
name|'packet'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""\n                A packet arrived.  Cancel the timeout for it, record it, and\n                maybe finish the test.\n                """'
newline|'\n'
name|'timeoutCall'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
name|'succeededAttempts'
op|'.'
name|'append'
op|'('
name|'packet'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'succeededAttempts'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
comment|'# The second error has not yet been logged, since the'
nl|'\n'
comment|"# exception which causes it hasn't even been raised yet."
nl|'\n'
comment|'# Give the datagramReceived call a chance to finish, then'
nl|'\n'
comment|'# let the test finish asserting things.'
nl|'\n'
indent|'                    '
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'finalDeferred'
op|'.'
name|'callback'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'makeAttempt'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|ebPacketTimeout
dedent|''
dedent|''
name|'def'
name|'ebPacketTimeout'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""\n                The packet wasn\'t received quickly enough.  Try sending another\n                one.  It doesn\'t matter if the packet for which this was the\n                timeout eventually arrives: makeAttempt throws away the\n                Deferred on which this function is the errback, so when\n                datagramReceived callbacks, so it won\'t be on this Deferred, so\n                it won\'t raise an AlreadyCalledError.\n                """'
newline|'\n'
name|'makeAttempt'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'packetDeferred'
op|'.'
name|'addCallbacks'
op|'('
name|'cbPacketReceived'
op|','
name|'ebPacketTimeout'
op|')'
newline|'\n'
name|'packetDeferred'
op|'.'
name|'addErrback'
op|'('
name|'finalDeferred'
op|'.'
name|'errback'
op|')'
newline|'\n'
nl|'\n'
name|'timeoutCall'
op|'='
name|'reactor'
op|'.'
name|'callLater'
op|'('
nl|'\n'
number|'0.1'
op|','
name|'packetDeferred'
op|'.'
name|'errback'
op|','
nl|'\n'
name|'error'
op|'.'
name|'TimeoutError'
op|'('
nl|'\n'
string|'"Timed out in testDatagramReceivedError"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'makeAttempt'
op|'('
op|')'
newline|'\n'
name|'return'
name|'finalDeferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testPortRepr
dedent|''
name|'def'
name|'testPortRepr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'client'
op|'='
name|'GoodClient'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenUDP'
op|'('
number|'0'
op|','
name|'client'
op|')'
newline|'\n'
name|'portNo'
op|'='
name|'str'
op|'('
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'repr'
op|'('
name|'p'
op|')'
op|'.'
name|'find'
op|'('
name|'portNo'
op|')'
op|'=='
op|'-'
number|'1'
op|')'
newline|'\n'
DECL|function|stoppedListening
name|'def'
name|'stoppedListening'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'repr'
op|'('
name|'p'
op|')'
op|'.'
name|'find'
op|'('
name|'portNo'
op|')'
op|'!='
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'p'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'stoppedListening'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReactorShutdownInteraction
dedent|''
dedent|''
name|'class'
name|'ReactorShutdownInteraction'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test reactor shutdown interaction"""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start a UDP port"""'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenUDP'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'server'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stop the UDP port"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'port'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testShutdownFromDatagramReceived
dedent|''
name|'def'
name|'testShutdownFromDatagramReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test reactor shutdown while in a recvfrom() loop"""'
newline|'\n'
nl|'\n'
comment|"# udp.Port's doRead calls recvfrom() in a loop, as an optimization."
nl|'\n'
comment|'# It is important this loop terminate under various conditions.'
nl|'\n'
comment|'# Previously, if datagramReceived synchronously invoked'
nl|'\n'
comment|"# reactor.stop(), under certain reactors, the Port's socket would"
nl|'\n'
comment|'# synchronously disappear, causing an AttributeError inside that'
nl|'\n'
comment|'# loop.  This was mishandled, causing the loop to spin forever.'
nl|'\n'
comment|'# This test is primarily to ensure that the loop never spins'
nl|'\n'
comment|'# forever.'
nl|'\n'
nl|'\n'
name|'finished'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'pr'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'packetReceived'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|pktRece
name|'def'
name|'pktRece'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
comment|'# Simulate reactor.stop() behavior :('
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'connectionLost'
op|'('
op|')'
newline|'\n'
comment|'# Then delay this Deferred chain until the protocol has been'
nl|'\n'
comment|'# disconnected, as the reactor should do in an error condition'
nl|'\n'
comment|'# such as we are inducing.  This is very much a whitebox test.'
nl|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'finished'
op|'.'
name|'callback'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'pr'
op|'.'
name|'addCallback'
op|'('
name|'pktRece'
op|')'
newline|'\n'
nl|'\n'
DECL|function|flushErrors
name|'def'
name|'flushErrors'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
comment|'# We are breaking abstraction and calling private APIs, any'
nl|'\n'
comment|'# number of horrible errors might occur.  As long as the reactor'
nl|'\n'
comment|"# doesn't hang, this test is satisfied.  (There may be room for"
nl|'\n'
comment|'# another, stricter test.)'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finished'
op|'.'
name|'addCallback'
op|'('
name|'flushErrors'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|"'\\0'"
op|'*'
number|'64'
op|','
op|'('
string|"'127.0.0.1'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|')'
op|')'
newline|'\n'
name|'return'
name|'finished'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MulticastTestCase
dedent|''
dedent|''
name|'class'
name|'MulticastTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'server'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'='
name|'Client'
op|'('
op|')'
newline|'\n'
comment|"# multicast won't work if we listen over loopback, apparently"
nl|'\n'
name|'self'
op|'.'
name|'port1'
op|'='
name|'reactor'
op|'.'
name|'listenMulticast'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'server'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port2'
op|'='
name|'reactor'
op|'.'
name|'listenMulticast'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'connect'
op|'('
nl|'\n'
string|'"127.0.0.1"'
op|','
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'port1'
op|'.'
name|'stopListening'
op|')'
op|','
nl|'\n'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'port2'
op|'.'
name|'stopListening'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testTTL
dedent|''
name|'def'
name|'testTTL'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'o'
name|'in'
name|'self'
op|'.'
name|'client'
op|','
name|'self'
op|'.'
name|'server'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'o'
op|'.'
name|'transport'
op|'.'
name|'getTTL'
op|'('
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'o'
op|'.'
name|'transport'
op|'.'
name|'setTTL'
op|'('
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'o'
op|'.'
name|'transport'
op|'.'
name|'getTTL'
op|'('
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_loopback
dedent|''
dedent|''
name|'def'
name|'test_loopback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that after loopback mode has been set, multicast packets are\n        delivered to their sender.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'getLoopbackMode'
op|'('
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'addr'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
name|'joined'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'joinGroup'
op|'('
string|'"225.0.0.250"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbJoined
name|'def'
name|'cbJoined'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'packetReceived'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"hello"'
op|','
op|'('
string|'"225.0.0.250"'
op|','
name|'addr'
op|'.'
name|'port'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'joined'
op|'.'
name|'addCallback'
op|'('
name|'cbJoined'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbPacket
name|'def'
name|'cbPacket'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'packets'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'setLoopbackMode'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'getLoopbackMode'
op|'('
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"hello"'
op|','
op|'('
string|'"225.0.0.250"'
op|','
name|'addr'
op|'.'
name|'port'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# This is fairly lame.'
nl|'\n'
name|'d'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'d'
op|'.'
name|'callback'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'joined'
op|'.'
name|'addCallback'
op|'('
name|'cbPacket'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbNoPacket
name|'def'
name|'cbNoPacket'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'packets'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'joined'
op|'.'
name|'addCallback'
op|'('
name|'cbNoPacket'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'joined'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_interface
dedent|''
name|'def'
name|'test_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test C{getOutgoingInterface} and C{setOutgoingInterface}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'getOutgoingInterface'
op|'('
op|')'
op|','
string|'"0.0.0.0"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'getOutgoingInterface'
op|'('
op|')'
op|','
string|'"0.0.0.0"'
op|')'
newline|'\n'
nl|'\n'
name|'d1'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'setOutgoingInterface'
op|'('
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'setOutgoingInterface'
op|'('
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'result'
op|'='
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbInterfaces
name|'def'
name|'cbInterfaces'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'getOutgoingInterface'
op|'('
op|')'
op|','
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'getOutgoingInterface'
op|'('
op|')'
op|','
string|'"127.0.0.1"'
op|')'
newline|'\n'
dedent|''
name|'result'
op|'.'
name|'addCallback'
op|'('
name|'cbInterfaces'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_joinLeave
dedent|''
name|'def'
name|'test_joinLeave'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that multicast a group can be joined and left.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'joinGroup'
op|'('
string|'"225.0.0.250"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|clientJoined
name|'def'
name|'clientJoined'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'leaveGroup'
op|'('
string|'"225.0.0.250"'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'clientJoined'
op|')'
newline|'\n'
nl|'\n'
DECL|function|clientLeft
name|'def'
name|'clientLeft'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'joinGroup'
op|'('
string|'"225.0.0.250"'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'clientLeft'
op|')'
newline|'\n'
nl|'\n'
DECL|function|serverJoined
name|'def'
name|'serverJoined'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'leaveGroup'
op|'('
string|'"225.0.0.250"'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'serverJoined'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_joinFailure
dedent|''
name|'def'
name|'test_joinFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that an attempt to join an address which is not a multicast\n        address fails with L{error.MulticastJoinError}.\n        """'
newline|'\n'
comment|'# 127.0.0.1 is not a multicast address, so joining it should fail.'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'joinGroup'
op|'('
string|'"127.0.0.1"'
op|')'
op|','
nl|'\n'
name|'error'
op|'.'
name|'MulticastJoinError'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'runtime'
op|'.'
name|'platform'
op|'.'
name|'isWindows'
op|'('
op|')'
name|'and'
name|'not'
name|'runtime'
op|'.'
name|'platform'
op|'.'
name|'isVista'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'test_joinFailure'
op|'.'
name|'todo'
op|'='
string|'"Windows\' multicast is wonky"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multicast
dedent|''
name|'def'
name|'test_multicast'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a multicast group can be joined and messages sent to and\n        received from it.\n        """'
newline|'\n'
name|'c'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenMulticast'
op|'('
number|'0'
op|','
name|'c'
op|')'
newline|'\n'
name|'addr'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'joined'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'joinGroup'
op|'('
string|'"225.0.0.250"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbJoined
name|'def'
name|'cbJoined'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'packetReceived'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'c'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"hello world"'
op|','
op|'('
string|'"225.0.0.250"'
op|','
name|'addr'
op|'.'
name|'port'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'joined'
op|'.'
name|'addCallback'
op|'('
name|'cbJoined'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbPacket
name|'def'
name|'cbPacket'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'server'
op|'.'
name|'packets'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
string|'"hello world"'
op|')'
newline|'\n'
dedent|''
name|'joined'
op|'.'
name|'addCallback'
op|'('
name|'cbPacket'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cleanup
name|'def'
name|'cleanup'
op|'('
name|'passthrough'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'maybeDeferred'
op|'('
name|'p'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ign'
op|':'
name|'passthrough'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'joined'
op|'.'
name|'addCallback'
op|'('
name|'cleanup'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'joined'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multiListen
dedent|''
name|'def'
name|'test_multiListen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that multiple sockets can listen on the same multicast port and\n        that they both receive multicast messages directed to that address.\n        """'
newline|'\n'
name|'firstClient'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'firstPort'
op|'='
name|'reactor'
op|'.'
name|'listenMulticast'
op|'('
nl|'\n'
number|'0'
op|','
name|'firstClient'
op|','
name|'listenMultiple'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'portno'
op|'='
name|'firstPort'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
name|'secondClient'
op|'='
name|'Server'
op|'('
op|')'
newline|'\n'
name|'secondPort'
op|'='
name|'reactor'
op|'.'
name|'listenMulticast'
op|'('
nl|'\n'
name|'portno'
op|','
name|'secondClient'
op|','
name|'listenMultiple'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'joined'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'transport'
op|'.'
name|'joinGroup'
op|'('
string|'"225.0.0.250"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|serverJoined
name|'def'
name|'serverJoined'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d1'
op|'='
name|'firstClient'
op|'.'
name|'packetReceived'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d2'
op|'='
name|'secondClient'
op|'.'
name|'packetReceived'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'firstClient'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"hello world"'
op|','
op|'('
string|'"225.0.0.250"'
op|','
name|'portno'
op|')'
op|')'
newline|'\n'
name|'return'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
dedent|''
name|'joined'
op|'.'
name|'addCallback'
op|'('
name|'serverJoined'
op|')'
newline|'\n'
nl|'\n'
DECL|function|gotPackets
name|'def'
name|'gotPackets'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'firstClient'
op|'.'
name|'packets'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
string|'"hello world"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'secondClient'
op|'.'
name|'packets'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
string|'"hello world"'
op|')'
newline|'\n'
dedent|''
name|'joined'
op|'.'
name|'addCallback'
op|'('
name|'gotPackets'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cleanup
name|'def'
name|'cleanup'
op|'('
name|'passthrough'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'maybeDeferred'
op|'('
name|'firstPort'
op|'.'
name|'stopListening'
op|')'
op|','
nl|'\n'
name|'maybeDeferred'
op|'('
name|'secondPort'
op|'.'
name|'stopListening'
op|')'
op|']'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ign'
op|':'
name|'passthrough'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'joined'
op|'.'
name|'addBoth'
op|'('
name|'cleanup'
op|')'
newline|'\n'
name|'return'
name|'joined'
newline|'\n'
dedent|''
name|'if'
name|'runtime'
op|'.'
name|'platform'
op|'.'
name|'isWindows'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'test_multiListen'
op|'.'
name|'skip'
op|'='
op|'('
string|'"on non-linux platforms it appears multiple "'
nl|'\n'
string|'"processes can listen, but not multiple sockets "'
nl|'\n'
string|'"in same process?"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'interfaces'
op|'.'
name|'IReactorUDP'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'UDPTestCase'
op|'.'
name|'skip'
op|'='
string|'"This reactor does not support UDP"'
newline|'\n'
name|'ReactorShutdownInteraction'
op|'.'
name|'skip'
op|'='
string|'"This reactor does not support UDP"'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'interfaces'
op|'.'
name|'IReactorMulticast'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'MulticastTestCase'
op|'.'
name|'skip'
op|'='
string|'"This reactor does not support multicast"'
newline|'\n'
nl|'\n'
DECL|function|checkForLinux22
dedent|''
name|'def'
name|'checkForLinux22'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'os'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|'"/proc/version"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'open'
op|'('
string|'"/proc/version"'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'if'
name|'s'
op|'.'
name|'startswith'
op|'('
string|'"Linux version"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'='
name|'s'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'if'
name|'s'
op|'.'
name|'split'
op|'('
string|'"."'
op|')'
op|'['
op|':'
number|'2'
op|']'
op|'=='
op|'['
string|'"2"'
op|','
string|'"2"'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'='
name|'MulticastTestCase'
op|'.'
name|'testInterface'
op|'.'
name|'im_func'
newline|'\n'
name|'f'
op|'.'
name|'todo'
op|'='
string|'"figure out why this fails in linux 2.2"'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'checkForLinux22'
op|'('
op|')'
newline|'\n'
endmarker|''
end_unit

begin_unit
comment|'# -*- Python -*-'
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|__version__
name|'__version__'
op|'='
string|"'$Revision: 1.5 $'"
op|'['
number|'11'
op|':'
op|'-'
number|'2'
op|']'
newline|'\n'
nl|'\n'
name|'from'
name|'StringIO'
name|'import'
name|'StringIO'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'pcp'
newline|'\n'
nl|'\n'
comment|'# Goal:'
nl|'\n'
nl|'\n'
comment|'# Take a Protocol instance.  Own all outgoing data - anything that'
nl|'\n'
comment|'# would go to p.transport.write.  Own all incoming data - anything'
nl|'\n'
comment|'# that comes to p.dataReceived.'
nl|'\n'
nl|'\n'
comment|'# I need:'
nl|'\n'
comment|'# Something with the AbstractFileDescriptor interface.'
nl|'\n'
comment|'# That is:'
nl|'\n'
comment|'#  - acts as a Transport'
nl|'\n'
comment|'#    - has a method write()'
nl|'\n'
comment|'#    - which buffers'
nl|'\n'
comment|'#  - acts as a Consumer'
nl|'\n'
comment|'#    - has a registerProducer, unRegisterProducer'
nl|'\n'
comment|'#    - tells the Producer to back off (pauseProducing) when its buffer is full.'
nl|'\n'
comment|'#    - tells the Producer to resumeProducing when its buffer is not so full.'
nl|'\n'
comment|'#  - acts as a Producer'
nl|'\n'
comment|'#    - calls registerProducer'
nl|'\n'
comment|'#    - calls write() on consumers'
nl|'\n'
comment|'#    - honors requests to pause/resume producing'
nl|'\n'
comment|'#    - honors stopProducing, and passes it along to upstream Producers'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyTransport
name|'class'
name|'DummyTransport'
op|':'
newline|'\n'
indent|'    '
string|'"""A dumb transport to wrap around."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_writes'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_writes'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getvalue
dedent|''
name|'def'
name|'getvalue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'_writes'
op|')'
newline|'\n'
nl|'\n'
DECL|class|DummyProducer
dedent|''
dedent|''
name|'class'
name|'DummyProducer'
op|':'
newline|'\n'
DECL|variable|resumed
indent|'    '
name|'resumed'
op|'='
name|'False'
newline|'\n'
DECL|variable|stopped
name|'stopped'
op|'='
name|'False'
newline|'\n'
DECL|variable|paused
name|'paused'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'consumer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'consumer'
op|'='
name|'consumer'
newline|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'resumed'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'paused'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|pauseProducing
dedent|''
name|'def'
name|'pauseProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'paused'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|stopProducing
dedent|''
name|'def'
name|'stopProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stopped'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyConsumer
dedent|''
dedent|''
name|'class'
name|'DummyConsumer'
op|'('
name|'DummyTransport'
op|')'
op|':'
newline|'\n'
DECL|variable|producer
indent|'    '
name|'producer'
op|'='
name|'None'
newline|'\n'
DECL|variable|finished
name|'finished'
op|'='
name|'False'
newline|'\n'
DECL|variable|unregistered
name|'unregistered'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|registerProducer
name|'def'
name|'registerProducer'
op|'('
name|'self'
op|','
name|'producer'
op|','
name|'streaming'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'producer'
op|'='
op|'('
name|'producer'
op|','
name|'streaming'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregisterProducer
dedent|''
name|'def'
name|'unregisterProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'unregistered'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|finish
dedent|''
name|'def'
name|'finish'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'finished'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|class|TransportInterfaceTest
dedent|''
dedent|''
name|'class'
name|'TransportInterfaceTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|proxyClass
indent|'    '
name|'proxyClass'
op|'='
name|'pcp'
op|'.'
name|'BasicProducerConsumerProxy'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'underlying'
op|'='
name|'DummyConsumer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'self'
op|'.'
name|'proxyClass'
op|'('
name|'self'
op|'.'
name|'underlying'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testWrite
dedent|''
name|'def'
name|'testWrite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"some bytes"'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ConsumerInterfaceTest
dedent|''
dedent|''
name|'class'
name|'ConsumerInterfaceTest'
op|':'
newline|'\n'
indent|'    '
string|'"""Test ProducerConsumerProxy as a Consumer.\n\n    Normally we have ProducingServer -> ConsumingTransport.\n\n    If I am to go between (Server -> Shaper -> Transport), I have to\n    play the role of Consumer convincingly for the ProducingServer.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'underlying'
op|'='
name|'DummyConsumer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consumer'
op|'='
name|'self'
op|'.'
name|'proxyClass'
op|'('
name|'self'
op|'.'
name|'underlying'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'='
name|'DummyProducer'
op|'('
name|'self'
op|'.'
name|'consumer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRegisterPush
dedent|''
name|'def'
name|'testRegisterPush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|'.'
name|'producer'
op|','
name|'True'
op|')'
newline|'\n'
comment|'## Consumer should NOT have called PushProducer.resumeProducing'
nl|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumed'
op|')'
newline|'\n'
nl|'\n'
comment|"## I'm I'm just a proxy, should I only do resumeProducing when"
nl|'\n'
comment|'## I get poked myself?'
nl|'\n'
comment|'#def testRegisterPull(self):'
nl|'\n'
comment|'#    self.consumer.registerProducer(self.producer, False)'
nl|'\n'
comment|'#    ## Consumer SHOULD have called PushProducer.resumeProducing'
nl|'\n'
comment|'#    self.failUnless(self.producer.resumed)'
nl|'\n'
nl|'\n'
DECL|member|testUnregister
dedent|''
name|'def'
name|'testUnregister'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|'.'
name|'producer'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
comment|'# Now when the consumer would ordinarily want more data, it'
nl|'\n'
comment|"# shouldn't ask producer for it."
nl|'\n'
comment|'# The most succinct way to trigger "want more data" is to proxy for'
nl|'\n'
comment|'# a PullProducer and have someone ask me for data.'
nl|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumed'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFinish
dedent|''
name|'def'
name|'testFinish'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|'.'
name|'producer'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
comment|'# I guess finish should behave like unregister?'
nl|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumed'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProducerInterfaceTest
dedent|''
dedent|''
name|'class'
name|'ProducerInterfaceTest'
op|':'
newline|'\n'
indent|'    '
string|'"""Test ProducerConsumerProxy as a Producer.\n\n    Normally we have ProducingServer -> ConsumingTransport.\n\n    If I am to go between (Server -> Shaper -> Transport), I have to\n    play the role of Producer convincingly for the ConsumingTransport.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'consumer'
op|'='
name|'DummyConsumer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'='
name|'self'
op|'.'
name|'proxyClass'
op|'('
name|'self'
op|'.'
name|'consumer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRegistersProducer
dedent|''
name|'def'
name|'testRegistersProducer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'producer'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|'.'
name|'producer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPause
dedent|''
name|'def'
name|'testPause'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'write'
op|'('
string|'"yakkity yak"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"Paused producer should not have sent data."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testResume
dedent|''
name|'def'
name|'testResume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'write'
op|'('
string|'"yakkity yak"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"yakkity yak"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testResumeNoEmptyWrite
dedent|''
name|'def'
name|'testResumeNoEmptyWrite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'_writes'
op|')'
op|','
number|'0'
op|','
nl|'\n'
string|'"Resume triggered an empty write."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testResumeBuffer
dedent|''
name|'def'
name|'testResumeBuffer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'write'
op|'('
string|'"buffer this"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"buffer this"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testStop
dedent|''
name|'def'
name|'testStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'producer'
op|'.'
name|'stopProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'write'
op|'('
string|'"yakkity yak"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"Stopped producer should not have sent data."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PCP_ConsumerInterfaceTest
dedent|''
dedent|''
name|'class'
name|'PCP_ConsumerInterfaceTest'
op|'('
name|'ConsumerInterfaceTest'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|proxyClass
indent|'    '
name|'proxyClass'
op|'='
name|'pcp'
op|'.'
name|'BasicProducerConsumerProxy'
newline|'\n'
nl|'\n'
DECL|class|PCPII_ConsumerInterfaceTest
dedent|''
name|'class'
name|'PCPII_ConsumerInterfaceTest'
op|'('
name|'ConsumerInterfaceTest'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|proxyClass
indent|'    '
name|'proxyClass'
op|'='
name|'pcp'
op|'.'
name|'ProducerConsumerProxy'
newline|'\n'
nl|'\n'
DECL|class|PCP_ProducerInterfaceTest
dedent|''
name|'class'
name|'PCP_ProducerInterfaceTest'
op|'('
name|'ProducerInterfaceTest'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|proxyClass
indent|'    '
name|'proxyClass'
op|'='
name|'pcp'
op|'.'
name|'BasicProducerConsumerProxy'
newline|'\n'
nl|'\n'
DECL|class|PCPII_ProducerInterfaceTest
dedent|''
name|'class'
name|'PCPII_ProducerInterfaceTest'
op|'('
name|'ProducerInterfaceTest'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|proxyClass
indent|'    '
name|'proxyClass'
op|'='
name|'pcp'
op|'.'
name|'ProducerConsumerProxy'
newline|'\n'
nl|'\n'
DECL|class|ProducerProxyTest
dedent|''
name|'class'
name|'ProducerProxyTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Producer methods on me should be relayed to the Producer I proxy.\n    """'
newline|'\n'
DECL|variable|proxyClass
name|'proxyClass'
op|'='
name|'pcp'
op|'.'
name|'BasicProducerConsumerProxy'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proxy'
op|'='
name|'self'
op|'.'
name|'proxyClass'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parentProducer'
op|'='
name|'DummyProducer'
op|'('
name|'self'
op|'.'
name|'proxy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|'.'
name|'parentProducer'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testStop
dedent|''
name|'def'
name|'testStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'stopProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'parentProducer'
op|'.'
name|'stopped'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConsumerProxyTest
dedent|''
dedent|''
name|'class'
name|'ConsumerProxyTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Consumer methods on me should be relayed to the Consumer I proxy.\n    """'
newline|'\n'
DECL|variable|proxyClass
name|'proxyClass'
op|'='
name|'pcp'
op|'.'
name|'BasicProducerConsumerProxy'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'underlying'
op|'='
name|'DummyConsumer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consumer'
op|'='
name|'self'
op|'.'
name|'proxyClass'
op|'('
name|'self'
op|'.'
name|'underlying'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testWrite
dedent|''
name|'def'
name|'testWrite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# NOTE: This test only valid for streaming (Push) systems.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'write'
op|'('
string|'"some bytes"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'underlying'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"some bytes"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFinish
dedent|''
name|'def'
name|'testFinish'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'underlying'
op|'.'
name|'finished'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUnregister
dedent|''
name|'def'
name|'testUnregister'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'unregisterProducer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'underlying'
op|'.'
name|'unregistered'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PullProducerTest
dedent|''
dedent|''
name|'class'
name|'PullProducerTest'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'underlying'
op|'='
name|'DummyConsumer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'='
name|'self'
op|'.'
name|'proxyClass'
op|'('
name|'self'
op|'.'
name|'underlying'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parentProducer'
op|'='
name|'DummyProducer'
op|'('
name|'self'
op|'.'
name|'proxy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|'.'
name|'parentProducer'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testHoldWrites
dedent|''
name|'def'
name|'testHoldWrites'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'write'
op|'('
string|'"hello"'
op|')'
newline|'\n'
comment|'# Consumer should get no data before it says resumeProducing.'
nl|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'underlying'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|'"Pulling Consumer got data before it pulled."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPull
dedent|''
name|'def'
name|'testPull'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'write'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'underlying'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"hello"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMergeWrites
dedent|''
name|'def'
name|'testMergeWrites'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'write'
op|'('
string|'"hello "'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'write'
op|'('
string|'"sunshine"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
name|'nwrites'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'underlying'
op|'.'
name|'_writes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'nwrites'
op|','
number|'1'
op|','
string|'"Pull resulted in %d writes instead "'
nl|'\n'
string|'"of 1."'
op|'%'
op|'('
name|'nwrites'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'underlying'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"hello sunshine"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testLateWrite
dedent|''
name|'def'
name|'testLateWrite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# consumer sends its initial pull before we have data'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'write'
op|'('
string|'"data"'
op|')'
newline|'\n'
comment|'# This data should answer that pull request.'
nl|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'underlying'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"data"'
op|')'
newline|'\n'
nl|'\n'
DECL|class|PCP_PullProducerTest
dedent|''
dedent|''
name|'class'
name|'PCP_PullProducerTest'
op|'('
name|'PullProducerTest'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|class|proxyClass
indent|'    '
name|'class'
name|'proxyClass'
op|'('
name|'pcp'
op|'.'
name|'BasicProducerConsumerProxy'
op|')'
op|':'
newline|'\n'
DECL|variable|iAmStreaming
indent|'        '
name|'iAmStreaming'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|class|PCPII_PullProducerTest
dedent|''
dedent|''
name|'class'
name|'PCPII_PullProducerTest'
op|'('
name|'PullProducerTest'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|class|proxyClass
indent|'    '
name|'class'
name|'proxyClass'
op|'('
name|'pcp'
op|'.'
name|'ProducerConsumerProxy'
op|')'
op|':'
newline|'\n'
DECL|variable|iAmStreaming
indent|'        '
name|'iAmStreaming'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# Buffering!'
nl|'\n'
nl|'\n'
DECL|class|BufferedConsumerTest
dedent|''
dedent|''
name|'class'
name|'BufferedConsumerTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""As a consumer, ask the producer to pause after too much data."""'
newline|'\n'
nl|'\n'
DECL|variable|proxyClass
name|'proxyClass'
op|'='
name|'pcp'
op|'.'
name|'ProducerConsumerProxy'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'underlying'
op|'='
name|'DummyConsumer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'='
name|'self'
op|'.'
name|'proxyClass'
op|'('
name|'self'
op|'.'
name|'underlying'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'bufferSize'
op|'='
number|'100'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'parentProducer'
op|'='
name|'DummyProducer'
op|'('
name|'self'
op|'.'
name|'proxy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|'.'
name|'parentProducer'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRegisterPull
dedent|''
name|'def'
name|'testRegisterPull'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|'.'
name|'parentProducer'
op|','
name|'False'
op|')'
newline|'\n'
comment|'## Consumer SHOULD have called PushProducer.resumeProducing'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'parentProducer'
op|'.'
name|'resumed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPauseIntercept
dedent|''
name|'def'
name|'testPauseIntercept'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'parentProducer'
op|'.'
name|'paused'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testResumeIntercept
dedent|''
name|'def'
name|'testResumeIntercept'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
comment|'# With a streaming producer, just because the proxy was resumed is'
nl|'\n'
comment|'# not necessarily a reason to resume the parent producer.  The state'
nl|'\n'
comment|'# of the buffer should decide that.'
nl|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'parentProducer'
op|'.'
name|'resumed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testTriggerPause
dedent|''
name|'def'
name|'testTriggerPause'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure I say \\"when.\\""""'
newline|'\n'
nl|'\n'
comment|'# Pause the proxy so data sent to it builds up in its buffer.'
nl|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'parentProducer'
op|'.'
name|'paused'
op|','
string|'"don\'t pause yet"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'write'
op|'('
string|'"x"'
op|'*'
number|'51'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'parentProducer'
op|'.'
name|'paused'
op|','
string|'"don\'t pause yet"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'write'
op|'('
string|'"x"'
op|'*'
number|'51'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'parentProducer'
op|'.'
name|'paused'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testTriggerResume
dedent|''
name|'def'
name|'testTriggerResume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure I resumeProducing when my buffer empties."""'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'write'
op|'('
string|'"x"'
op|'*'
number|'102'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'parentProducer'
op|'.'
name|'paused'
op|','
string|'"should be paused"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
comment|'# Resuming should have emptied my buffer, so I should tell my'
nl|'\n'
comment|'# parent to resume too.'
nl|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'parentProducer'
op|'.'
name|'paused'
op|','
nl|'\n'
string|'"Producer should have resumed."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'producerPaused'
op|')'
newline|'\n'
nl|'\n'
DECL|class|BufferedPullTests
dedent|''
dedent|''
name|'class'
name|'BufferedPullTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|class|proxyClass
indent|'    '
name|'class'
name|'proxyClass'
op|'('
name|'pcp'
op|'.'
name|'ProducerConsumerProxy'
op|')'
op|':'
newline|'\n'
DECL|variable|iAmStreaming
indent|'        '
name|'iAmStreaming'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_writeSomeData
name|'def'
name|'_writeSomeData'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pcp'
op|'.'
name|'ProducerConsumerProxy'
op|'.'
name|'_writeSomeData'
op|'('
name|'self'
op|','
name|'data'
op|'['
op|':'
number|'100'
op|']'
op|')'
newline|'\n'
name|'return'
name|'min'
op|'('
name|'len'
op|'('
name|'data'
op|')'
op|','
number|'100'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'underlying'
op|'='
name|'DummyConsumer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'='
name|'self'
op|'.'
name|'proxyClass'
op|'('
name|'self'
op|'.'
name|'underlying'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'bufferSize'
op|'='
number|'100'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'parentProducer'
op|'='
name|'DummyProducer'
op|'('
name|'self'
op|'.'
name|'proxy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'registerProducer'
op|'('
name|'self'
op|'.'
name|'parentProducer'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testResumePull
dedent|''
name|'def'
name|'testResumePull'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# If proxy has no data to send on resumeProducing, it had better pull'
nl|'\n'
comment|'# some from its PullProducer.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'parentProducer'
op|'.'
name|'resumed'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'parentProducer'
op|'.'
name|'resumed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testLateWriteBuffering
dedent|''
name|'def'
name|'testLateWriteBuffering'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# consumer sends its initial pull before we have data'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'resumeProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'write'
op|'('
string|'"datum"'
op|'*'
number|'21'
op|')'
newline|'\n'
comment|'# This data should answer that pull request.'
nl|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'underlying'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"datum"'
op|'*'
number|'20'
op|')'
newline|'\n'
comment|'# but there should be some left over'
nl|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'_buffer'
op|','
op|'['
string|'"datum"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# TODO:'
nl|'\n'
comment|"#  test that web request finishing bug (when we weren't proxying"
nl|'\n'
comment|'#    unregisterProducer but were proxying finish, web file transfers'
nl|'\n'
comment|'#    would hang on the last block.)'
nl|'\n'
comment|'#  test what happens if writeSomeBytes decided to write zero bytes.'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

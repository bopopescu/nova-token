begin_unit
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.python.log}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'sys'
op|','
name|'time'
op|','
name|'logging'
op|','
name|'warnings'
newline|'\n'
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'failure'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeWarning
name|'class'
name|'FakeWarning'
op|'('
name|'Warning'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A unique L{Warning} subclass used by tests for interactions of\n    L{twisted.python.log} with the L{warnings} module.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LogTest
dedent|''
name|'class'
name|'LogTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'catcher'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'observer'
op|'='
name|'self'
op|'.'
name|'catcher'
op|'.'
name|'append'
newline|'\n'
name|'log'
op|'.'
name|'addObserver'
op|'('
name|'self'
op|'.'
name|'observer'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'log'
op|'.'
name|'removeObserver'
op|','
name|'self'
op|'.'
name|'observer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testObservation
dedent|''
name|'def'
name|'testObservation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'catcher'
op|'='
name|'self'
op|'.'
name|'catcher'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"test"'
op|','
name|'testShouldCatch'
op|'='
name|'True'
op|')'
newline|'\n'
name|'i'
op|'='
name|'catcher'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'i'
op|'['
string|'"message"'
op|']'
op|'['
number|'0'
op|']'
op|','
string|'"test"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'i'
op|'['
string|'"testShouldCatch"'
op|']'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'i'
op|'.'
name|'has_key'
op|'('
string|'"time"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'catcher'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testContext
dedent|''
name|'def'
name|'testContext'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'catcher'
op|'='
name|'self'
op|'.'
name|'catcher'
newline|'\n'
name|'log'
op|'.'
name|'callWithContext'
op|'('
op|'{'
string|'"subsystem"'
op|':'
string|'"not the default"'
op|','
nl|'\n'
string|'"subsubsystem"'
op|':'
string|'"a"'
op|','
nl|'\n'
string|'"other"'
op|':'
string|'"c"'
op|'}'
op|','
nl|'\n'
name|'log'
op|'.'
name|'callWithContext'
op|','
nl|'\n'
op|'{'
string|'"subsubsystem"'
op|':'
string|'"b"'
op|'}'
op|','
name|'log'
op|'.'
name|'msg'
op|','
string|'"foo"'
op|','
name|'other'
op|'='
string|'"d"'
op|')'
newline|'\n'
name|'i'
op|'='
name|'catcher'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'i'
op|'['
string|"'subsubsystem'"
op|']'
op|','
string|"'b'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'i'
op|'['
string|"'subsystem'"
op|']'
op|','
string|"'not the default'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'i'
op|'['
string|"'other'"
op|']'
op|','
string|"'d'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'i'
op|'['
string|"'message'"
op|']'
op|'['
number|'0'
op|']'
op|','
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testErrors
dedent|''
name|'def'
name|'testErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'e'
op|','
name|'ig'
name|'in'
op|'['
op|'('
string|'"hello world"'
op|','
string|'"hello world"'
op|')'
op|','
nl|'\n'
op|'('
name|'KeyError'
op|'('
op|')'
op|','
name|'KeyError'
op|')'
op|','
nl|'\n'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'RuntimeError'
op|'('
op|')'
op|')'
op|','
name|'RuntimeError'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
name|'e'
op|')'
newline|'\n'
name|'i'
op|'='
name|'self'
op|'.'
name|'catcher'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'i'
op|'['
string|"'isError'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'ig'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testErrorsWithWhy
dedent|''
dedent|''
name|'def'
name|'testErrorsWithWhy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'e'
op|','
name|'ig'
name|'in'
op|'['
op|'('
string|'"hello world"'
op|','
string|'"hello world"'
op|')'
op|','
nl|'\n'
op|'('
name|'KeyError'
op|'('
op|')'
op|','
name|'KeyError'
op|')'
op|','
nl|'\n'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'RuntimeError'
op|'('
op|')'
op|')'
op|','
name|'RuntimeError'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
name|'e'
op|','
string|"'foobar'"
op|')'
newline|'\n'
name|'i'
op|'='
name|'self'
op|'.'
name|'catcher'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'i'
op|'['
string|"'isError'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'i'
op|'['
string|"'why'"
op|']'
op|','
string|"'foobar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'ig'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_erroneousErrors
dedent|''
dedent|''
name|'def'
name|'test_erroneousErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Exceptions raised by log observers are logged but the observer which\n        raised the exception remains registered with the publisher.  These\n        exceptions do not prevent the event from being sent to other observers\n        registered with the publisher.\n        """'
newline|'\n'
name|'L1'
op|'='
op|'['
op|']'
newline|'\n'
name|'L2'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|broken
name|'def'
name|'broken'
op|'('
name|'events'
op|')'
op|':'
newline|'\n'
indent|'            '
number|'1'
op|'/'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'observer'
name|'in'
op|'['
name|'L1'
op|'.'
name|'append'
op|','
name|'broken'
op|','
name|'L2'
op|'.'
name|'append'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'addObserver'
op|'('
name|'observer'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'log'
op|'.'
name|'removeObserver'
op|','
name|'observer'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'3'
op|')'
op|':'
newline|'\n'
comment|'# Reset the lists for simpler comparison.'
nl|'\n'
indent|'            '
name|'L1'
op|'['
op|':'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'L2'
op|'['
op|':'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# Send out the event which will break one of the observers.'
nl|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Howdy, y\'all."'
op|')'
newline|'\n'
nl|'\n'
comment|'# The broken observer should have caused this to be logged.  There'
nl|'\n'
comment|'# is a slight bug with LogPublisher - when it logs an error from an'
nl|'\n'
comment|'# observer, it uses the global "err", which is not necessarily'
nl|'\n'
comment|'# associated with it, but which may be associated with a different'
nl|'\n'
comment|'# LogPublisher!  See #3307.'
nl|'\n'
name|'excs'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'ZeroDivisionError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'excs'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Both other observers should have seen the message.'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'L1'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'L2'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
comment|'# The order is slightly wrong here.  The first event should be'
nl|'\n'
comment|'# delivered to all observers; then, errors should be delivered.'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L1'
op|'['
number|'1'
op|']'
op|'['
string|"'message'"
op|']'
op|','
op|'('
string|'"Howdy, y\'all."'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L2'
op|'['
number|'0'
op|']'
op|'['
string|"'message'"
op|']'
op|','
op|'('
string|'"Howdy, y\'all."'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_showwarning
dedent|''
dedent|''
name|'def'
name|'test_showwarning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{twisted.python.log.showwarning} emits the warning as a message\n        to the Twisted logging system.\n        """'
newline|'\n'
name|'publisher'
op|'='
name|'log'
op|'.'
name|'LogPublisher'
op|'('
op|')'
newline|'\n'
name|'publisher'
op|'.'
name|'addObserver'
op|'('
name|'self'
op|'.'
name|'observer'
op|')'
newline|'\n'
nl|'\n'
name|'publisher'
op|'.'
name|'showwarning'
op|'('
nl|'\n'
name|'FakeWarning'
op|'('
string|'"unique warning message"'
op|')'
op|','
name|'FakeWarning'
op|','
nl|'\n'
string|'"warning-filename.py"'
op|','
number|'27'
op|')'
newline|'\n'
name|'event'
op|'='
name|'self'
op|'.'
name|'catcher'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'event'
op|'['
string|"'format'"
op|']'
op|'%'
name|'event'
op|','
nl|'\n'
string|"'warning-filename.py:27: twisted.test.test_log.FakeWarning: '"
nl|'\n'
string|"'unique warning message'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'catcher'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Python 2.6 requires that any function used to override the'
nl|'\n'
comment|'# warnings.showwarning API accept a "line" parameter or a'
nl|'\n'
comment|'# deprecation warning is emitted.'
nl|'\n'
name|'publisher'
op|'.'
name|'showwarning'
op|'('
nl|'\n'
name|'FakeWarning'
op|'('
string|'"unique warning message"'
op|')'
op|','
name|'FakeWarning'
op|','
nl|'\n'
string|'"warning-filename.py"'
op|','
number|'27'
op|','
name|'line'
op|'='
name|'object'
op|'('
op|')'
op|')'
newline|'\n'
name|'event'
op|'='
name|'self'
op|'.'
name|'catcher'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'event'
op|'['
string|"'format'"
op|']'
op|'%'
name|'event'
op|','
nl|'\n'
string|"'warning-filename.py:27: twisted.test.test_log.FakeWarning: '"
nl|'\n'
string|"'unique warning message'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'catcher'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_warningToFile
dedent|''
name|'def'
name|'test_warningToFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{twisted.python.log.showwarning} passes warnings with an explicit file\n        target on to the underlying Python warning system.\n        """'
newline|'\n'
name|'message'
op|'='
string|'"another unique message"'
newline|'\n'
name|'category'
op|'='
name|'FakeWarning'
newline|'\n'
name|'filename'
op|'='
string|'"warning-filename.py"'
newline|'\n'
name|'lineno'
op|'='
number|'31'
newline|'\n'
nl|'\n'
name|'output'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'log'
op|'.'
name|'showwarning'
op|'('
name|'message'
op|','
name|'category'
op|','
name|'filename'
op|','
name|'lineno'
op|','
name|'file'
op|'='
name|'output'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'output'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
name|'warnings'
op|'.'
name|'formatwarning'
op|'('
name|'message'
op|','
name|'category'
op|','
name|'filename'
op|','
name|'lineno'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# In Python 2.6, warnings.showwarning accepts a "line" argument which'
nl|'\n'
comment|'# gives the source line the warning message is to include.'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'version_info'
op|'>='
op|'('
number|'2'
op|','
number|'6'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
string|'"hello world"'
newline|'\n'
name|'output'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'log'
op|'.'
name|'showwarning'
op|'('
name|'message'
op|','
name|'category'
op|','
name|'filename'
op|','
name|'lineno'
op|','
name|'file'
op|'='
name|'output'
op|','
nl|'\n'
name|'line'
op|'='
name|'line'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'output'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
name|'warnings'
op|'.'
name|'formatwarning'
op|'('
name|'message'
op|','
name|'category'
op|','
name|'filename'
op|','
name|'lineno'
op|','
nl|'\n'
name|'line'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeFile
dedent|''
dedent|''
dedent|''
name|'class'
name|'FakeFile'
op|'('
name|'list'
op|')'
op|':'
newline|'\n'
DECL|member|write
indent|'    '
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'append'
op|'('
name|'bytes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|flush
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|EvilStr
dedent|''
dedent|''
name|'class'
name|'EvilStr'
op|':'
newline|'\n'
DECL|member|__str__
indent|'    '
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
number|'1'
op|'/'
number|'0'
newline|'\n'
nl|'\n'
DECL|class|EvilRepr
dedent|''
dedent|''
name|'class'
name|'EvilRepr'
op|':'
newline|'\n'
DECL|member|__str__
indent|'    '
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"Happy Evil Repr"'
newline|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
number|'1'
op|'/'
number|'0'
newline|'\n'
nl|'\n'
DECL|class|EvilReprStr
dedent|''
dedent|''
name|'class'
name|'EvilReprStr'
op|'('
name|'EvilStr'
op|','
name|'EvilRepr'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|LogPublisherTestCaseMixin
dedent|''
name|'class'
name|'LogPublisherTestCaseMixin'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add a log observer which records log events in C{self.out}.  Also,\n        make sure the default string encoding is ASCII so that\n        L{testSingleUnicode} can test the behavior of logging unencodable\n        unicode messages.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'out'
op|'='
name|'FakeFile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lp'
op|'='
name|'log'
op|'.'
name|'LogPublisher'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flo'
op|'='
name|'log'
op|'.'
name|'FileLogObserver'
op|'('
name|'self'
op|'.'
name|'out'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lp'
op|'.'
name|'addObserver'
op|'('
name|'self'
op|'.'
name|'flo'
op|'.'
name|'emit'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'str'
op|'('
string|"u'\\N{VULGAR FRACTION ONE HALF}'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeEncodeError'
op|':'
newline|'\n'
comment|"# This is the behavior we want - don't change anything."
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_origEncoding'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'reload'
op|'('
name|'sys'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_origEncoding'
op|'='
name|'sys'
op|'.'
name|'getdefaultencoding'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'setdefaultencoding'
op|'('
string|"'ascii'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that everything written to the fake file C{self.out} was a\n        C{str}.  Also, restore the default string encoding to its previous\n        setting, if it was modified by L{setUp}.\n        """'
newline|'\n'
name|'for'
name|'chunk'
name|'in'
name|'self'
op|'.'
name|'out'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'chunk'
op|','
name|'str'
op|')'
op|','
string|'"%r was not a string"'
op|'%'
op|'('
name|'chunk'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_origEncoding'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'setdefaultencoding'
op|'('
name|'self'
op|'.'
name|'_origEncoding'
op|')'
newline|'\n'
name|'del'
name|'sys'
op|'.'
name|'setdefaultencoding'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LogPublisherTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'LogPublisherTestCase'
op|'('
name|'LogPublisherTestCaseMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testSingleString
indent|'    '
name|'def'
name|'testSingleString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
string|'"Hello, world."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'out'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testMultipleString
dedent|''
name|'def'
name|'testMultipleString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test some stupid behavior that will be deprecated real soon.'
nl|'\n'
comment|'# If you are reading this and trying to learn how the logging'
nl|'\n'
comment|'# system works, *do not use this feature*.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
string|'"Hello, "'
op|','
string|'"world."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'out'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testSingleUnicode
dedent|''
name|'def'
name|'testSingleUnicode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
string|'u"Hello, \\N{VULGAR FRACTION ONE HALF} world."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'out'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'with str error'"
op|','
name|'self'
op|'.'
name|'out'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'UnicodeEncodeError'"
op|','
name|'self'
op|'.'
name|'out'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FileObserverTestCase
dedent|''
dedent|''
name|'class'
name|'FileObserverTestCase'
op|'('
name|'LogPublisherTestCaseMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_getTimezoneOffset
indent|'    '
name|'def'
name|'test_getTimezoneOffset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Attempt to verify that L{FileLogObserver.getTimezoneOffset} returns\n        correct values for the current C{TZ} environment setting.  Do this\n        by setting C{TZ} to various well-known values and asserting that the\n        reported offset is correct.\n        """'
newline|'\n'
name|'localDaylightTuple'
op|'='
op|'('
number|'2006'
op|','
number|'6'
op|','
number|'30'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'4'
op|','
number|'181'
op|','
number|'1'
op|')'
newline|'\n'
name|'utcDaylightTimestamp'
op|'='
name|'time'
op|'.'
name|'mktime'
op|'('
name|'localDaylightTuple'
op|')'
newline|'\n'
name|'localStandardTuple'
op|'='
op|'('
number|'2007'
op|','
number|'1'
op|','
number|'31'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'2'
op|','
number|'31'
op|','
number|'0'
op|')'
newline|'\n'
name|'utcStandardTimestamp'
op|'='
name|'time'
op|'.'
name|'mktime'
op|'('
name|'localStandardTuple'
op|')'
newline|'\n'
nl|'\n'
name|'originalTimezone'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'TZ'"
op|','
name|'None'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Test something west of UTC'
nl|'\n'
indent|'            '
name|'os'
op|'.'
name|'environ'
op|'['
string|"'TZ'"
op|']'
op|'='
string|"'America/New_York'"
newline|'\n'
name|'time'
op|'.'
name|'tzset'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'flo'
op|'.'
name|'getTimezoneOffset'
op|'('
name|'utcDaylightTimestamp'
op|')'
op|','
nl|'\n'
number|'14400'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'flo'
op|'.'
name|'getTimezoneOffset'
op|'('
name|'utcStandardTimestamp'
op|')'
op|','
nl|'\n'
number|'18000'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test something east of UTC'
nl|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'TZ'"
op|']'
op|'='
string|"'Europe/Berlin'"
newline|'\n'
name|'time'
op|'.'
name|'tzset'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'flo'
op|'.'
name|'getTimezoneOffset'
op|'('
name|'utcDaylightTimestamp'
op|')'
op|','
nl|'\n'
op|'-'
number|'7200'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'flo'
op|'.'
name|'getTimezoneOffset'
op|'('
name|'utcStandardTimestamp'
op|')'
op|','
nl|'\n'
op|'-'
number|'3600'
op|')'
newline|'\n'
nl|'\n'
comment|"# Test a timezone that doesn't have DST"
nl|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'TZ'"
op|']'
op|'='
string|"'Africa/Johannesburg'"
newline|'\n'
name|'time'
op|'.'
name|'tzset'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'flo'
op|'.'
name|'getTimezoneOffset'
op|'('
name|'utcDaylightTimestamp'
op|')'
op|','
nl|'\n'
op|'-'
number|'7200'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'flo'
op|'.'
name|'getTimezoneOffset'
op|'('
name|'utcStandardTimestamp'
op|')'
op|','
nl|'\n'
op|'-'
number|'7200'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'originalTimezone'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'TZ'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'environ'
op|'['
string|"'TZ'"
op|']'
op|'='
name|'originalTimezone'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'tzset'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'getattr'
op|'('
name|'time'
op|','
string|"'tzset'"
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'test_getTimezoneOffset'
op|'.'
name|'skip'
op|'='
op|'('
nl|'\n'
string|'"Platform cannot change timezone, cannot verify correct offsets "'
nl|'\n'
string|'"in well-known timezones."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_timeFormatting
dedent|''
name|'def'
name|'test_timeFormatting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the method of L{FileLogObserver} which turns a timestamp into a\n        human-readable string.\n        """'
newline|'\n'
comment|'# There is no function in the time module which converts a UTC time'
nl|'\n'
comment|'# tuple to a timestamp.'
nl|'\n'
name|'when'
op|'='
name|'time'
op|'.'
name|'mktime'
op|'('
op|'('
number|'2001'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|','
number|'6'
op|','
number|'7'
op|','
number|'8'
op|','
number|'0'
op|')'
op|')'
op|'-'
name|'time'
op|'.'
name|'timezone'
newline|'\n'
nl|'\n'
comment|'# Pretend to be in US/Eastern for a moment'
nl|'\n'
name|'self'
op|'.'
name|'flo'
op|'.'
name|'getTimezoneOffset'
op|'='
name|'lambda'
name|'when'
op|':'
number|'18000'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'flo'
op|'.'
name|'formatTime'
op|'('
name|'when'
op|')'
op|','
string|"'2001-02-02 23:05:06-0500'"
op|')'
newline|'\n'
nl|'\n'
comment|"# Okay now we're in Eastern Europe somewhere"
nl|'\n'
name|'self'
op|'.'
name|'flo'
op|'.'
name|'getTimezoneOffset'
op|'='
name|'lambda'
name|'when'
op|':'
op|'-'
number|'3600'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'flo'
op|'.'
name|'formatTime'
op|'('
name|'when'
op|')'
op|','
string|"'2001-02-03 05:05:06+0100'"
op|')'
newline|'\n'
nl|'\n'
comment|'# And off in the Pacific or someplace like that'
nl|'\n'
name|'self'
op|'.'
name|'flo'
op|'.'
name|'getTimezoneOffset'
op|'='
name|'lambda'
name|'when'
op|':'
op|'-'
number|'39600'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'flo'
op|'.'
name|'formatTime'
op|'('
name|'when'
op|')'
op|','
string|"'2001-02-03 15:05:06+1100'"
op|')'
newline|'\n'
nl|'\n'
comment|'# One of those weird places with a half-hour offset timezone'
nl|'\n'
name|'self'
op|'.'
name|'flo'
op|'.'
name|'getTimezoneOffset'
op|'='
name|'lambda'
name|'when'
op|':'
number|'5400'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'flo'
op|'.'
name|'formatTime'
op|'('
name|'when'
op|')'
op|','
string|"'2001-02-03 02:35:06-0130'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Half-hour offset in the other direction'
nl|'\n'
name|'self'
op|'.'
name|'flo'
op|'.'
name|'getTimezoneOffset'
op|'='
name|'lambda'
name|'when'
op|':'
op|'-'
number|'5400'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'flo'
op|'.'
name|'formatTime'
op|'('
name|'when'
op|')'
op|','
string|"'2001-02-03 05:35:06+0130'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Test an offset which is between 0 and 60 minutes to make sure the'
nl|'\n'
comment|'# sign comes out properly in that case.'
nl|'\n'
name|'self'
op|'.'
name|'flo'
op|'.'
name|'getTimezoneOffset'
op|'='
name|'lambda'
name|'when'
op|':'
number|'1800'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'flo'
op|'.'
name|'formatTime'
op|'('
name|'when'
op|')'
op|','
string|"'2001-02-03 03:35:06-0030'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Test an offset between 0 and 60 minutes in the other direction.'
nl|'\n'
name|'self'
op|'.'
name|'flo'
op|'.'
name|'getTimezoneOffset'
op|'='
name|'lambda'
name|'when'
op|':'
op|'-'
number|'1800'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'flo'
op|'.'
name|'formatTime'
op|'('
name|'when'
op|')'
op|','
string|"'2001-02-03 04:35:06+0030'"
op|')'
newline|'\n'
nl|'\n'
comment|'# If a strftime-format string is present on the logger, it should'
nl|'\n'
comment|"# use that instead.  Note we don't assert anything about day, hour"
nl|'\n'
comment|'# or minute because we cannot easily control what time.strftime()'
nl|'\n'
comment|'# thinks the local timezone is.'
nl|'\n'
name|'self'
op|'.'
name|'flo'
op|'.'
name|'timeFormat'
op|'='
string|"'%Y %m'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'flo'
op|'.'
name|'formatTime'
op|'('
name|'when'
op|')'
op|','
string|"'2001 02'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_loggingAnObjectWithBroken__str__
dedent|''
name|'def'
name|'test_loggingAnObjectWithBroken__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'#HELLO, MCFLY'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
name|'EvilStr'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'out'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
comment|"# Logging system shouldn't need to crap itself for this trivial case"
nl|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'UNFORMATTABLE'"
op|','
name|'self'
op|'.'
name|'out'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_formattingAnObjectWithBroken__str__
dedent|''
name|'def'
name|'test_formattingAnObjectWithBroken__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
name|'format'
op|'='
string|"'%(blat)s'"
op|','
name|'blat'
op|'='
name|'EvilStr'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'out'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'Invalid format string or unformattable object'"
op|','
name|'self'
op|'.'
name|'out'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_brokenSystem__str__
dedent|''
name|'def'
name|'test_brokenSystem__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
string|"'huh'"
op|','
name|'system'
op|'='
name|'EvilStr'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'out'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'Invalid format string or unformattable object'"
op|','
name|'self'
op|'.'
name|'out'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_formattingAnObjectWithBroken__repr__Indirect
dedent|''
name|'def'
name|'test_formattingAnObjectWithBroken__repr__Indirect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
name|'format'
op|'='
string|"'%(blat)s'"
op|','
name|'blat'
op|'='
op|'['
name|'EvilRepr'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'out'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'UNFORMATTABLE OBJECT'"
op|','
name|'self'
op|'.'
name|'out'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_systemWithBroker__repr__Indirect
dedent|''
name|'def'
name|'test_systemWithBroker__repr__Indirect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
string|"'huh'"
op|','
name|'system'
op|'='
op|'['
name|'EvilRepr'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'out'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'UNFORMATTABLE OBJECT'"
op|','
name|'self'
op|'.'
name|'out'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_simpleBrokenFormat
dedent|''
name|'def'
name|'test_simpleBrokenFormat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
name|'format'
op|'='
string|"'hooj %s %s'"
op|','
name|'blat'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'out'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'Invalid format string or unformattable object'"
op|','
name|'self'
op|'.'
name|'out'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ridiculousFormat
dedent|''
name|'def'
name|'test_ridiculousFormat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
name|'format'
op|'='
number|'42'
op|','
name|'blat'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'out'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'Invalid format string or unformattable object'"
op|','
name|'self'
op|'.'
name|'out'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_evilFormat__repr__And__str__
dedent|''
name|'def'
name|'test_evilFormat__repr__And__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
name|'format'
op|'='
name|'EvilReprStr'
op|'('
op|')'
op|','
name|'blat'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'out'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'PATHOLOGICAL'"
op|','
name|'self'
op|'.'
name|'out'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_strangeEventDict
dedent|''
name|'def'
name|'test_strangeEventDict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This kind of eventDict used to fail silently, so test it does.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
name|'message'
op|'='
string|"''"
op|','
name|'isError'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'out'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_startLoggingTwice
dedent|''
name|'def'
name|'test_startLoggingTwice'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        There are some obscure error conditions that can occur when logging is\n        started twice. See http://twistedmatrix.com/trac/ticket/3289 for more\n        information.\n        """'
newline|'\n'
comment|"# The bug is particular to the way that the t.p.log 'global' function"
nl|'\n'
comment|"# handle stdout. If we use our own stream, the error doesn't occur. If"
nl|'\n'
comment|"# we use our own LogPublisher, the error doesn't occur."
nl|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'setattr'
op|','
name|'sys'
op|','
string|"'stdout'"
op|','
name|'sys'
op|'.'
name|'__stdout__'
op|')'
newline|'\n'
nl|'\n'
DECL|function|showError
name|'def'
name|'showError'
op|'('
name|'eventDict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'eventDict'
op|'['
string|"'isError'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'sys'
op|'.'
name|'__stdout__'
op|'.'
name|'write'
op|'('
name|'eventDict'
op|'['
string|"'failure'"
op|']'
op|'.'
name|'getTraceback'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'log'
op|'.'
name|'addObserver'
op|'('
name|'showError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'log'
op|'.'
name|'removeObserver'
op|','
name|'showError'
op|')'
newline|'\n'
name|'observer'
op|'='
name|'log'
op|'.'
name|'startLogging'
op|'('
name|'sys'
op|'.'
name|'stdout'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'observer'
op|'.'
name|'stop'
op|')'
newline|'\n'
comment|'# At this point, we expect that sys.stdout is a StdioOnnaStick object.'
nl|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'sys'
op|'.'
name|'stdout'
op|','
name|'log'
op|'.'
name|'StdioOnnaStick'
op|')'
newline|'\n'
name|'fakeStdout'
op|'='
name|'sys'
op|'.'
name|'stdout'
newline|'\n'
name|'observer'
op|'='
name|'log'
op|'.'
name|'startLogging'
op|'('
name|'sys'
op|'.'
name|'stdout'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'sys'
op|'.'
name|'stdout'
op|','
name|'fakeStdout'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PythonLoggingObserverTestCase
dedent|''
dedent|''
name|'class'
name|'PythonLoggingObserverTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test the bridge with python logging module.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'out'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'rootLogger'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'originalLevel'
op|'='
name|'rootLogger'
op|'.'
name|'getEffectiveLevel'
op|'('
op|')'
newline|'\n'
name|'rootLogger'
op|'.'
name|'setLevel'
op|'('
name|'logging'
op|'.'
name|'DEBUG'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hdlr'
op|'='
name|'logging'
op|'.'
name|'StreamHandler'
op|'('
name|'self'
op|'.'
name|'out'
op|')'
newline|'\n'
name|'fmt'
op|'='
name|'logging'
op|'.'
name|'Formatter'
op|'('
name|'logging'
op|'.'
name|'BASIC_FORMAT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hdlr'
op|'.'
name|'setFormatter'
op|'('
name|'fmt'
op|')'
newline|'\n'
name|'rootLogger'
op|'.'
name|'addHandler'
op|'('
name|'self'
op|'.'
name|'hdlr'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'lp'
op|'='
name|'log'
op|'.'
name|'LogPublisher'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'obs'
op|'='
name|'log'
op|'.'
name|'PythonLoggingObserver'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lp'
op|'.'
name|'addObserver'
op|'('
name|'self'
op|'.'
name|'obs'
op|'.'
name|'emit'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rootLogger'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'""'
op|')'
newline|'\n'
name|'rootLogger'
op|'.'
name|'removeHandler'
op|'('
name|'self'
op|'.'
name|'hdlr'
op|')'
newline|'\n'
name|'rootLogger'
op|'.'
name|'setLevel'
op|'('
name|'self'
op|'.'
name|'originalLevel'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'shutdown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_singleString
dedent|''
name|'def'
name|'test_singleString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test simple output, and default log level.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
string|'"Hello, world."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"Hello, world."'
op|','
name|'self'
op|'.'
name|'out'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"INFO"'
op|','
name|'self'
op|'.'
name|'out'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_errorString
dedent|''
name|'def'
name|'test_errorString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test error output.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
name|'failure'
op|'='
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'ValueError'
op|'('
string|'"That is bad."'
op|')'
op|')'
op|','
name|'isError'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"ERROR"'
op|','
name|'self'
op|'.'
name|'out'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_formatString
dedent|''
name|'def'
name|'test_formatString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test logging with a format.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
name|'format'
op|'='
string|'"%(bar)s oo %(foo)s"'
op|','
name|'bar'
op|'='
string|'"Hello"'
op|','
name|'foo'
op|'='
string|'"world"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"Hello oo world"'
op|','
name|'self'
op|'.'
name|'out'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_customLevel
dedent|''
name|'def'
name|'test_customLevel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the logLevel keyword for customizing level used.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
string|'"Spam egg."'
op|','
name|'logLevel'
op|'='
name|'logging'
op|'.'
name|'DEBUG'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"Spam egg."'
op|','
name|'self'
op|'.'
name|'out'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"DEBUG"'
op|','
name|'self'
op|'.'
name|'out'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'out'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
string|'"Foo bar."'
op|','
name|'logLevel'
op|'='
name|'logging'
op|'.'
name|'WARNING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"Foo bar."'
op|','
name|'self'
op|'.'
name|'out'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"WARNING"'
op|','
name|'self'
op|'.'
name|'out'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_strangeEventDict
dedent|''
name|'def'
name|'test_strangeEventDict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that an event dictionary which is not an error and has an empty\n        message isn\'t recorded.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'lp'
op|'.'
name|'msg'
op|'('
name|'message'
op|'='
string|"''"
op|','
name|'isError'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'out'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PythonLoggingIntegrationTestCase
dedent|''
dedent|''
name|'class'
name|'PythonLoggingIntegrationTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test integration of python logging bridge.\n    """'
newline|'\n'
DECL|member|test_startStopObserver
name|'def'
name|'test_startStopObserver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that start and stop methods of the observer actually register\n        and unregister to the log system.\n        """'
newline|'\n'
name|'oldAddObserver'
op|'='
name|'log'
op|'.'
name|'addObserver'
newline|'\n'
name|'oldRemoveObserver'
op|'='
name|'log'
op|'.'
name|'removeObserver'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'addObserver'
op|'='
name|'l'
op|'.'
name|'append'
newline|'\n'
name|'log'
op|'.'
name|'removeObserver'
op|'='
name|'l'
op|'.'
name|'remove'
newline|'\n'
name|'obs'
op|'='
name|'log'
op|'.'
name|'PythonLoggingObserver'
op|'('
op|')'
newline|'\n'
name|'obs'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'l'
op|'['
number|'0'
op|']'
op|','
name|'obs'
op|'.'
name|'emit'
op|')'
newline|'\n'
name|'obs'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'l'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'addObserver'
op|'='
name|'oldAddObserver'
newline|'\n'
name|'log'
op|'.'
name|'removeObserver'
op|'='
name|'oldRemoveObserver'
newline|'\n'
nl|'\n'
DECL|member|test_inheritance
dedent|''
dedent|''
name|'def'
name|'test_inheritance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that we can inherit L{log.PythonLoggingObserver} and use super:\n        that\'s basically a validation that L{log.PythonLoggingObserver} is\n        new-style class.\n        """'
newline|'\n'
DECL|class|MyObserver
name|'class'
name|'MyObserver'
op|'('
name|'log'
op|'.'
name|'PythonLoggingObserver'
op|')'
op|':'
newline|'\n'
DECL|member|emit
indent|'            '
name|'def'
name|'emit'
op|'('
name|'self'
op|','
name|'eventDict'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'super'
op|'('
name|'MyObserver'
op|','
name|'self'
op|')'
op|'.'
name|'emit'
op|'('
name|'eventDict'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'obs'
op|'='
name|'MyObserver'
op|'('
op|')'
newline|'\n'
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'oldEmit'
op|'='
name|'log'
op|'.'
name|'PythonLoggingObserver'
op|'.'
name|'emit'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'PythonLoggingObserver'
op|'.'
name|'emit'
op|'='
name|'l'
op|'.'
name|'append'
newline|'\n'
name|'obs'
op|'.'
name|'emit'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'l'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'PythonLoggingObserver'
op|'.'
name|'emit'
op|'='
name|'oldEmit'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

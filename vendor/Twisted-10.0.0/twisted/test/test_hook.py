begin_unit
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nTest cases for twisted.hook module.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'hook'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
DECL|class|BaseClass
name|'class'
name|'BaseClass'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    dummy class to help in testing.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        dummy initializer\n        """'
newline|'\n'
name|'self'
op|'.'
name|'calledBasePre'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'calledBasePost'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'calledBase'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|func
dedent|''
name|'def'
name|'func'
op|'('
name|'self'
op|','
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        dummy method\n        """'
newline|'\n'
name|'assert'
name|'a'
op|'=='
number|'1'
newline|'\n'
name|'assert'
name|'b'
op|'=='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'calledBase'
op|'='
name|'self'
op|'.'
name|'calledBase'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SubClass
dedent|''
dedent|''
name|'class'
name|'SubClass'
op|'('
name|'BaseClass'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    another dummy class\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        another dummy initializer\n        """'
newline|'\n'
name|'BaseClass'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'calledSubPre'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'calledSubPost'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'calledSub'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|func
dedent|''
name|'def'
name|'func'
op|'('
name|'self'
op|','
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        another dummy function\n        """'
newline|'\n'
name|'assert'
name|'a'
op|'=='
number|'1'
newline|'\n'
name|'assert'
name|'b'
op|'=='
number|'2'
newline|'\n'
name|'BaseClass'
op|'.'
name|'func'
op|'('
name|'self'
op|','
name|'a'
op|','
name|'b'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'calledSub'
op|'='
name|'self'
op|'.'
name|'calledSub'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
DECL|variable|_clean_BaseClass
dedent|''
dedent|''
name|'_clean_BaseClass'
op|'='
name|'BaseClass'
op|'.'
name|'__dict__'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
DECL|variable|_clean_SubClass
name|'_clean_SubClass'
op|'='
name|'SubClass'
op|'.'
name|'__dict__'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|basePre
name|'def'
name|'basePre'
op|'('
name|'base'
op|','
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    a pre-hook for the base class\n    """'
newline|'\n'
name|'base'
op|'.'
name|'calledBasePre'
op|'='
name|'base'
op|'.'
name|'calledBasePre'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
DECL|function|basePost
dedent|''
name|'def'
name|'basePost'
op|'('
name|'base'
op|','
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    a post-hook for the base class\n    """'
newline|'\n'
name|'base'
op|'.'
name|'calledBasePost'
op|'='
name|'base'
op|'.'
name|'calledBasePost'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
DECL|function|subPre
dedent|''
name|'def'
name|'subPre'
op|'('
name|'sub'
op|','
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    a pre-hook for the subclass\n    """'
newline|'\n'
name|'sub'
op|'.'
name|'calledSubPre'
op|'='
name|'sub'
op|'.'
name|'calledSubPre'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
DECL|function|subPost
dedent|''
name|'def'
name|'subPost'
op|'('
name|'sub'
op|','
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    a post-hook for the subclass\n    """'
newline|'\n'
name|'sub'
op|'.'
name|'calledSubPost'
op|'='
name|'sub'
op|'.'
name|'calledSubPost'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
DECL|class|HookTestCase
dedent|''
name|'class'
name|'HookTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    test case to make sure hooks are called\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure we have clean versions of our classes."""'
newline|'\n'
name|'BaseClass'
op|'.'
name|'__dict__'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'BaseClass'
op|'.'
name|'__dict__'
op|'.'
name|'update'
op|'('
name|'_clean_BaseClass'
op|')'
newline|'\n'
name|'SubClass'
op|'.'
name|'__dict__'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'SubClass'
op|'.'
name|'__dict__'
op|'.'
name|'update'
op|'('
name|'_clean_SubClass'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testBaseHook
dedent|''
name|'def'
name|'testBaseHook'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""make sure that the base class\'s hook is called reliably\n        """'
newline|'\n'
name|'base'
op|'='
name|'BaseClass'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'base'
op|'.'
name|'calledBase'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'base'
op|'.'
name|'calledBasePre'
op|','
number|'0'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'func'
op|'('
number|'1'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'base'
op|'.'
name|'calledBase'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'base'
op|'.'
name|'calledBasePre'
op|','
number|'0'
op|')'
newline|'\n'
name|'hook'
op|'.'
name|'addPre'
op|'('
name|'BaseClass'
op|','
string|'"func"'
op|','
name|'basePre'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'func'
op|'('
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'base'
op|'.'
name|'calledBase'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'base'
op|'.'
name|'calledBasePre'
op|','
number|'1'
op|')'
newline|'\n'
name|'hook'
op|'.'
name|'addPost'
op|'('
name|'BaseClass'
op|','
string|'"func"'
op|','
name|'basePost'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'func'
op|'('
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'base'
op|'.'
name|'calledBasePost'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'base'
op|'.'
name|'calledBase'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'base'
op|'.'
name|'calledBasePre'
op|','
number|'2'
op|')'
newline|'\n'
name|'hook'
op|'.'
name|'removePre'
op|'('
name|'BaseClass'
op|','
string|'"func"'
op|','
name|'basePre'
op|')'
newline|'\n'
name|'hook'
op|'.'
name|'removePost'
op|'('
name|'BaseClass'
op|','
string|'"func"'
op|','
name|'basePost'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'func'
op|'('
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'base'
op|'.'
name|'calledBasePost'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'base'
op|'.'
name|'calledBase'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'base'
op|'.'
name|'calledBasePre'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSubHook
dedent|''
name|'def'
name|'testSubHook'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""test interactions between base-class hooks and subclass hooks\n        """'
newline|'\n'
name|'sub'
op|'='
name|'SubClass'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledSub'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledBase'
op|','
number|'0'
op|')'
newline|'\n'
name|'sub'
op|'.'
name|'func'
op|'('
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledSub'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledBase'
op|','
number|'1'
op|')'
newline|'\n'
name|'hook'
op|'.'
name|'addPre'
op|'('
name|'SubClass'
op|','
string|"'func'"
op|','
name|'subPre'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledSub'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledBase'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledSubPre'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledBasePre'
op|','
number|'0'
op|')'
newline|'\n'
name|'sub'
op|'.'
name|'func'
op|'('
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledSub'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledBase'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledSubPre'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledBasePre'
op|','
number|'0'
op|')'
newline|'\n'
comment|'# let the pain begin'
nl|'\n'
name|'hook'
op|'.'
name|'addPre'
op|'('
name|'BaseClass'
op|','
string|"'func'"
op|','
name|'basePre'
op|')'
newline|'\n'
name|'BaseClass'
op|'.'
name|'func'
op|'('
name|'sub'
op|','
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
comment|'# sub.func(1, b=2)'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledBase'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledBasePre'
op|','
number|'1'
op|','
name|'str'
op|'('
name|'sub'
op|'.'
name|'calledBasePre'
op|')'
op|')'
newline|'\n'
name|'sub'
op|'.'
name|'func'
op|'('
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledBasePre'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledBase'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledSubPre'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub'
op|'.'
name|'calledSub'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|testCases
dedent|''
dedent|''
name|'testCases'
op|'='
op|'['
name|'HookTestCase'
op|']'
newline|'\n'
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTest cases for L{twisted.python.randbytes}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'randbytes'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'Crypto'
op|'.'
name|'Util'
name|'import'
name|'randpool'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|randpool
indent|'    '
name|'randpool'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecureRandomTestCaseBase
dedent|''
name|'class'
name|'SecureRandomTestCaseBase'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Base class for secureRandom test cases.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_check
name|'def'
name|'_check'
op|'('
name|'self'
op|','
name|'source'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The given random bytes source should return the number of bytes\n        requested each time it is called and should probably not return the\n        same bytes on two consecutive calls (although this is a perfectly\n        legitimate occurrence and rejecting it may generate a spurious failure\n        -- maybe we\'ll get lucky and the heat death with come first).\n        """'
newline|'\n'
name|'for'
name|'nbytes'
name|'in'
name|'range'
op|'('
number|'17'
op|','
number|'25'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'='
name|'source'
op|'('
name|'nbytes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'s'
op|')'
op|','
name|'nbytes'
op|')'
newline|'\n'
name|'s2'
op|'='
name|'source'
op|'('
name|'nbytes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'s2'
op|')'
op|','
name|'nbytes'
op|')'
newline|'\n'
comment|'# This is crude but hey'
nl|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'s2'
op|','
name|'s'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecureRandomTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'SecureRandomTestCase'
op|'('
name|'SecureRandomTestCaseBase'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test secureRandom under normal conditions.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_normal
name|'def'
name|'test_normal'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{randbytes.secureRandom} should return a string of the requested\n        length and make some effort to make its result otherwise unpredictable.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_check'
op|'('
name|'randbytes'
op|'.'
name|'secureRandom'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'ConditionalSecureRandomTestCase'
op|'('
name|'SecureRandomTestCaseBase'
op|','
nl|'\n'
DECL|class|ConditionalSecureRandomTestCase
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test random sources one by one, then remove it to.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a L{randbytes.RandomFactory} to use in the tests.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'='
name|'randbytes'
op|'.'
name|'RandomFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|errorFactory
dedent|''
name|'def'
name|'errorFactory'
op|'('
name|'self'
op|','
name|'nbytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A factory raising an error when a source is not available.\n        """'
newline|'\n'
name|'raise'
name|'randbytes'
op|'.'
name|'SourceNotAvailable'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_osUrandom
dedent|''
name|'def'
name|'test_osUrandom'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{RandomFactory._osUrandom} should work as a random source whenever\n        L{os.urandom} is available.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_check'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'_osUrandom'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'randbytes'
op|'.'
name|'SourceNotAvailable'
op|':'
newline|'\n'
comment|'# Not available on Python 2.3'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'sys'
op|'.'
name|'version_info'
op|'<'
op|'('
number|'2'
op|','
number|'4'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fileUrandom
dedent|''
dedent|''
name|'def'
name|'test_fileUrandom'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{RandomFactory._fileUrandom} should work as a random source whenever\n        C{/dev/urandom} is available.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_check'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'_fileUrandom'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'randbytes'
op|'.'
name|'SourceNotAvailable'
op|':'
newline|'\n'
comment|"# The test should only fail in /dev/urandom doesn't exist"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|"'/dev/urandom'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cryptoRandom
dedent|''
dedent|''
name|'def'
name|'test_cryptoRandom'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{RandomFactory._cryptoRandom} should work as a random source whenever\n        L{PyCrypto} is installed.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_check'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'_cryptoRandom'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'randbytes'
op|'.'
name|'SourceNotAvailable'
op|':'
newline|'\n'
comment|'# It fails if PyCrypto is not here'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'randpool'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_withoutOsUrandom
dedent|''
dedent|''
name|'def'
name|'test_withoutOsUrandom'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If L{os.urandom} is not available but L{PyCrypto} is,\n        L{RandomFactory.secureRandom} should still work as a random source.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'_osUrandom'
op|'='
name|'self'
op|'.'
name|'errorFactory'
newline|'\n'
name|'self'
op|'.'
name|'_check'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'secureRandom'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'randpool'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'test_withoutOsUrandom'
op|'.'
name|'skip'
op|'='
string|'"PyCrypto not available"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_withoutOsAndFileUrandom
dedent|''
name|'def'
name|'test_withoutOsAndFileUrandom'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove C{os.urandom} and /dev/urandom read.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'_osUrandom'
op|'='
name|'self'
op|'.'
name|'errorFactory'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'_fileUrandom'
op|'='
name|'self'
op|'.'
name|'errorFactory'
newline|'\n'
name|'self'
op|'.'
name|'_check'
op|'('
name|'self'
op|'.'
name|'factory'
op|'.'
name|'secureRandom'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'randpool'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'test_withoutOsAndFileUrandom'
op|'.'
name|'skip'
op|'='
string|'"PyCrypto not available"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_withoutAnything
dedent|''
name|'def'
name|'test_withoutAnything'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove all secure sources and assert it raises a failure. Then try the\n        fallback parameter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'_osUrandom'
op|'='
name|'self'
op|'.'
name|'errorFactory'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'_fileUrandom'
op|'='
name|'self'
op|'.'
name|'errorFactory'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'_cryptoRandom'
op|'='
name|'self'
op|'.'
name|'errorFactory'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'randbytes'
op|'.'
name|'SecureRandomNotAvailable'
op|','
nl|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'secureRandom'
op|','
number|'18'
op|')'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'secureRandom'
op|'('
number|'18'
op|','
name|'fallback'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'s'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
nl|'\n'
name|'RuntimeWarning'
op|','
nl|'\n'
string|'"Neither PyCrypto nor urandom available - "'
nl|'\n'
string|'"proceeding with non-cryptographically secure random source"'
op|','
nl|'\n'
name|'__file__'
op|','
nl|'\n'
name|'wrapper'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'s'
op|')'
op|','
number|'18'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|RandomTestCaseBase
dedent|''
dedent|''
name|'class'
name|'RandomTestCaseBase'
op|'('
name|'SecureRandomTestCaseBase'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    \'Normal\' random test cases.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_normal
name|'def'
name|'test_normal'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test basic case.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_check'
op|'('
name|'randbytes'
op|'.'
name|'insecureRandom'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_withoutGetrandbits
dedent|''
name|'def'
name|'test_withoutGetrandbits'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test C{insecureRandom} without C{random.getrandbits}.\n        """'
newline|'\n'
name|'factory'
op|'='
name|'randbytes'
op|'.'
name|'RandomFactory'
op|'('
op|')'
newline|'\n'
name|'factory'
op|'.'
name|'getrandbits'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_check'
op|'('
name|'factory'
op|'.'
name|'insecureRandom'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

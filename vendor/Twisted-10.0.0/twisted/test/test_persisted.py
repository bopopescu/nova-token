begin_unit
nl|'\n'
comment|'# Copyright (c) 2001-2004 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'# System Imports'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'cPickle'
name|'as'
name|'pickle'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pickle'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'cStringIO'
name|'as'
name|'StringIO'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
comment|'# Twisted Imports'
nl|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'persisted'
name|'import'
name|'styles'
op|','
name|'aot'
op|','
name|'crefutil'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VersionTestCase
name|'class'
name|'VersionTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testNullVersionUpgrade
indent|'    '
name|'def'
name|'testNullVersionUpgrade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'global'
name|'NullVersioned'
newline|'\n'
DECL|class|NullVersioned
name|'class'
name|'NullVersioned'
op|':'
newline|'\n'
DECL|variable|ok
indent|'            '
name|'ok'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'pkcl'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'NullVersioned'
op|'('
op|')'
op|')'
newline|'\n'
DECL|class|NullVersioned
name|'class'
name|'NullVersioned'
op|'('
name|'styles'
op|'.'
name|'Versioned'
op|')'
op|':'
newline|'\n'
DECL|variable|persistenceVersion
indent|'            '
name|'persistenceVersion'
op|'='
number|'1'
newline|'\n'
DECL|member|upgradeToVersion1
name|'def'
name|'upgradeToVersion1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'ok'
op|'='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'mnv'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'pkcl'
op|')'
newline|'\n'
name|'styles'
op|'.'
name|'doUpgrade'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'mnv'
op|'.'
name|'ok'
op|','
string|'"initial upgrade not run!"'
newline|'\n'
nl|'\n'
DECL|member|testVersionUpgrade
dedent|''
name|'def'
name|'testVersionUpgrade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'global'
name|'MyVersioned'
newline|'\n'
DECL|class|MyVersioned
name|'class'
name|'MyVersioned'
op|'('
name|'styles'
op|'.'
name|'Versioned'
op|')'
op|':'
newline|'\n'
DECL|variable|persistenceVersion
indent|'            '
name|'persistenceVersion'
op|'='
number|'2'
newline|'\n'
DECL|variable|persistenceForgets
name|'persistenceForgets'
op|'='
op|'['
string|"'garbagedata'"
op|']'
newline|'\n'
DECL|variable|v3
name|'v3'
op|'='
number|'0'
newline|'\n'
DECL|variable|v4
name|'v4'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'somedata'
op|'='
string|"'xxx'"
newline|'\n'
name|'self'
op|'.'
name|'garbagedata'
op|'='
name|'lambda'
name|'q'
op|':'
string|"'cant persist'"
newline|'\n'
nl|'\n'
DECL|member|upgradeToVersion3
dedent|''
name|'def'
name|'upgradeToVersion3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'v3'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|upgradeToVersion4
dedent|''
name|'def'
name|'upgradeToVersion4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'v4'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'mv'
op|'='
name|'MyVersioned'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'not'
op|'('
name|'mv'
op|'.'
name|'v3'
name|'or'
name|'mv'
op|'.'
name|'v4'
op|')'
op|','
string|'"hasn\'t been upgraded yet"'
newline|'\n'
name|'pickl'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'mv'
op|')'
newline|'\n'
name|'MyVersioned'
op|'.'
name|'persistenceVersion'
op|'='
number|'4'
newline|'\n'
name|'obj'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'pickl'
op|')'
newline|'\n'
name|'styles'
op|'.'
name|'doUpgrade'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'obj'
op|'.'
name|'v3'
op|','
string|'"didn\'t do version 3 upgrade"'
newline|'\n'
name|'assert'
name|'obj'
op|'.'
name|'v4'
op|','
string|'"didn\'t do version 4 upgrade"'
newline|'\n'
name|'pickl'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'obj'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'pickl'
op|')'
newline|'\n'
name|'styles'
op|'.'
name|'doUpgrade'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'obj'
op|'.'
name|'v3'
op|'=='
number|'1'
op|','
string|'"upgraded unnecessarily"'
newline|'\n'
name|'assert'
name|'obj'
op|'.'
name|'v4'
op|'=='
number|'1'
op|','
string|'"upgraded unnecessarily"'
newline|'\n'
nl|'\n'
DECL|member|testNonIdentityHash
dedent|''
name|'def'
name|'testNonIdentityHash'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'global'
name|'ClassWithCustomHash'
newline|'\n'
DECL|class|ClassWithCustomHash
name|'class'
name|'ClassWithCustomHash'
op|'('
name|'styles'
op|'.'
name|'Versioned'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'unique'
op|','
name|'hash'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'unique'
op|'='
name|'unique'
newline|'\n'
name|'self'
op|'.'
name|'hash'
op|'='
name|'hash'
newline|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'hash'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'v1'
op|'='
name|'ClassWithCustomHash'
op|'('
string|"'v1'"
op|','
number|'0'
op|')'
newline|'\n'
name|'v2'
op|'='
name|'ClassWithCustomHash'
op|'('
string|"'v2'"
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'pkl'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
op|'('
name|'v1'
op|','
name|'v2'
op|')'
op|')'
newline|'\n'
name|'del'
name|'v1'
op|','
name|'v2'
newline|'\n'
name|'ClassWithCustomHash'
op|'.'
name|'persistenceVersion'
op|'='
number|'1'
newline|'\n'
name|'ClassWithCustomHash'
op|'.'
name|'upgradeToVersion1'
op|'='
name|'lambda'
name|'self'
op|':'
name|'setattr'
op|'('
name|'self'
op|','
string|"'upgraded'"
op|','
name|'True'
op|')'
newline|'\n'
name|'v1'
op|','
name|'v2'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'pkl'
op|')'
newline|'\n'
name|'styles'
op|'.'
name|'doUpgrade'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'v1'
op|'.'
name|'unique'
op|','
string|"'v1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'v2'
op|'.'
name|'unique'
op|','
string|"'v2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'v1'
op|'.'
name|'upgraded'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'v2'
op|'.'
name|'upgraded'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUpgradeDeserializesObjectsRequiringUpgrade
dedent|''
name|'def'
name|'testUpgradeDeserializesObjectsRequiringUpgrade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'global'
name|'ToyClassA'
op|','
name|'ToyClassB'
newline|'\n'
DECL|class|ToyClassA
name|'class'
name|'ToyClassA'
op|'('
name|'styles'
op|'.'
name|'Versioned'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
DECL|class|ToyClassB
dedent|''
name|'class'
name|'ToyClassB'
op|'('
name|'styles'
op|'.'
name|'Versioned'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'x'
op|'='
name|'ToyClassA'
op|'('
op|')'
newline|'\n'
name|'y'
op|'='
name|'ToyClassB'
op|'('
op|')'
newline|'\n'
name|'pklA'
op|','
name|'pklB'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'x'
op|')'
op|','
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'y'
op|')'
newline|'\n'
name|'del'
name|'x'
op|','
name|'y'
newline|'\n'
name|'ToyClassA'
op|'.'
name|'persistenceVersion'
op|'='
number|'1'
newline|'\n'
DECL|function|upgradeToVersion1
name|'def'
name|'upgradeToVersion1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'y'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'pklB'
op|')'
newline|'\n'
name|'styles'
op|'.'
name|'doUpgrade'
op|'('
op|')'
newline|'\n'
dedent|''
name|'ToyClassA'
op|'.'
name|'upgradeToVersion1'
op|'='
name|'upgradeToVersion1'
newline|'\n'
name|'ToyClassB'
op|'.'
name|'persistenceVersion'
op|'='
number|'1'
newline|'\n'
name|'ToyClassB'
op|'.'
name|'upgradeToVersion1'
op|'='
name|'lambda'
name|'self'
op|':'
name|'setattr'
op|'('
name|'self'
op|','
string|"'upgraded'"
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'x'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'pklA'
op|')'
newline|'\n'
name|'styles'
op|'.'
name|'doUpgrade'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'x'
op|'.'
name|'y'
op|'.'
name|'upgraded'
op|')'
newline|'\n'
nl|'\n'
DECL|class|MyEphemeral
dedent|''
dedent|''
name|'class'
name|'MyEphemeral'
op|'('
name|'styles'
op|'.'
name|'Ephemeral'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'x'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'x'
op|'='
name|'x'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|EphemeralTestCase
dedent|''
dedent|''
name|'class'
name|'EphemeralTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|testEphemeral
indent|'    '
name|'def'
name|'testEphemeral'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'o'
op|'='
name|'MyEphemeral'
op|'('
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'o'
op|'.'
name|'__class__'
op|','
name|'MyEphemeral'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'o'
op|'.'
name|'x'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
name|'pickl'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'o'
op|')'
newline|'\n'
name|'o'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'pickl'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'o'
op|'.'
name|'__class__'
op|','
name|'styles'
op|'.'
name|'Ephemeral'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'hasattr'
op|'('
name|'o'
op|','
string|"'x'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Pickleable
dedent|''
dedent|''
name|'class'
name|'Pickleable'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'x'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'x'
op|'='
name|'x'
newline|'\n'
nl|'\n'
DECL|member|getX
dedent|''
name|'def'
name|'getX'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'x'
newline|'\n'
nl|'\n'
DECL|class|A
dedent|''
dedent|''
name|'class'
name|'A'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    dummy class\n    """'
newline|'\n'
DECL|member|amethod
name|'def'
name|'amethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|B
dedent|''
dedent|''
name|'class'
name|'B'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    dummy class\n    """'
newline|'\n'
DECL|member|bmethod
name|'def'
name|'bmethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|funktion
dedent|''
dedent|''
name|'def'
name|'funktion'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|PicklingTestCase
dedent|''
name|'class'
name|'PicklingTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test pickling of extra object types."""'
newline|'\n'
nl|'\n'
DECL|member|testModule
name|'def'
name|'testModule'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pickl'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'styles'
op|')'
newline|'\n'
name|'o'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'pickl'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'o'
op|','
name|'styles'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testClassMethod
dedent|''
name|'def'
name|'testClassMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pickl'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'Pickleable'
op|'.'
name|'getX'
op|')'
newline|'\n'
name|'o'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'pickl'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'o'
op|','
name|'Pickleable'
op|'.'
name|'getX'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInstanceMethod
dedent|''
name|'def'
name|'testInstanceMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'Pickleable'
op|'('
number|'4'
op|')'
newline|'\n'
name|'pickl'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'obj'
op|'.'
name|'getX'
op|')'
newline|'\n'
name|'o'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'pickl'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'o'
op|'('
op|')'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'type'
op|'('
name|'o'
op|')'
op|','
name|'type'
op|'('
name|'obj'
op|'.'
name|'getX'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testStringIO
dedent|''
name|'def'
name|'testStringIO'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|'"abc"'
op|')'
newline|'\n'
name|'pickl'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'f'
op|')'
newline|'\n'
name|'o'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'pickl'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'type'
op|'('
name|'o'
op|')'
op|','
name|'type'
op|'('
name|'f'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'f'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|'"abc"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|EvilSourceror
dedent|''
dedent|''
name|'class'
name|'EvilSourceror'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'x'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'a'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'a'
op|'.'
name|'b'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'a'
op|'.'
name|'b'
op|'.'
name|'c'
op|'='
name|'x'
newline|'\n'
nl|'\n'
DECL|class|NonDictState
dedent|''
dedent|''
name|'class'
name|'NonDictState'
op|':'
newline|'\n'
DECL|member|__getstate__
indent|'    '
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'state'
newline|'\n'
DECL|member|__setstate__
dedent|''
name|'def'
name|'__setstate__'
op|'('
name|'self'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'state'
op|'='
name|'state'
newline|'\n'
nl|'\n'
DECL|class|AOTTestCase
dedent|''
dedent|''
name|'class'
name|'AOTTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testSimpleTypes
indent|'    '
name|'def'
name|'testSimpleTypes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
op|'('
number|'1'
op|','
number|'2.0'
op|','
number|'3j'
op|','
name|'True'
op|','
name|'slice'
op|'('
number|'1'
op|','
number|'2'
op|','
number|'3'
op|')'
op|','
string|"'hello'"
op|','
string|"u'world'"
op|','
name|'sys'
op|'.'
name|'maxint'
op|'+'
number|'1'
op|','
name|'None'
op|','
name|'Ellipsis'
op|')'
newline|'\n'
name|'rtObj'
op|'='
name|'aot'
op|'.'
name|'unjellyFromSource'
op|'('
name|'aot'
op|'.'
name|'jellyToSource'
op|'('
name|'obj'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'obj'
op|','
name|'rtObj'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMethodSelfIdentity
dedent|''
name|'def'
name|'testMethodSelfIdentity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'a'
op|'='
name|'A'
op|'('
op|')'
newline|'\n'
name|'b'
op|'='
name|'B'
op|'('
op|')'
newline|'\n'
name|'a'
op|'.'
name|'bmethod'
op|'='
name|'b'
op|'.'
name|'bmethod'
newline|'\n'
name|'b'
op|'.'
name|'a'
op|'='
name|'a'
newline|'\n'
name|'im_'
op|'='
name|'aot'
op|'.'
name|'unjellyFromSource'
op|'('
name|'aot'
op|'.'
name|'jellyToSource'
op|'('
name|'b'
op|')'
op|')'
op|'.'
name|'a'
op|'.'
name|'bmethod'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'im_'
op|'.'
name|'im_class'
op|','
name|'im_'
op|'.'
name|'im_self'
op|'.'
name|'__class__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_methodNotSelfIdentity
dedent|''
name|'def'
name|'test_methodNotSelfIdentity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a class change after an instance has been created,\n        L{aot.unjellyFromSource} shoud raise a C{TypeError} when trying to\n        unjelly the instance.\n        """'
newline|'\n'
name|'a'
op|'='
name|'A'
op|'('
op|')'
newline|'\n'
name|'b'
op|'='
name|'B'
op|'('
op|')'
newline|'\n'
name|'a'
op|'.'
name|'bmethod'
op|'='
name|'b'
op|'.'
name|'bmethod'
newline|'\n'
name|'b'
op|'.'
name|'a'
op|'='
name|'a'
newline|'\n'
name|'savedbmethod'
op|'='
name|'B'
op|'.'
name|'bmethod'
newline|'\n'
name|'del'
name|'B'
op|'.'
name|'bmethod'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'aot'
op|'.'
name|'unjellyFromSource'
op|','
nl|'\n'
name|'aot'
op|'.'
name|'jellyToSource'
op|'('
name|'b'
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'B'
op|'.'
name|'bmethod'
op|'='
name|'savedbmethod'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unsupportedType
dedent|''
dedent|''
name|'def'
name|'test_unsupportedType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{aot.jellyToSource} should raise a C{TypeError} when trying to jelly\n        an unknown type.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'set'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'sets'
name|'import'
name|'Set'
name|'as'
name|'set'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'aot'
op|'.'
name|'jellyToSource'
op|','
name|'set'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testBasicIdentity
dedent|''
name|'def'
name|'testBasicIdentity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Anyone wanting to make this datastructure more complex, and thus this'
nl|'\n'
comment|'# test more comprehensive, is welcome to do so.'
nl|'\n'
indent|'        '
name|'aj'
op|'='
name|'aot'
op|'.'
name|'AOTJellier'
op|'('
op|')'
op|'.'
name|'jellyToAO'
newline|'\n'
name|'d'
op|'='
op|'{'
string|"'hello'"
op|':'
string|"'world'"
op|','
string|'"method"'
op|':'
name|'aj'
op|'}'
newline|'\n'
name|'l'
op|'='
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
nl|'\n'
string|'"he\\tllo\\n\\n\\"x world!"'
op|','
nl|'\n'
string|'u"goodbye \\n\\t\\u1010 world!"'
op|','
nl|'\n'
number|'1'
op|','
number|'1.0'
op|','
number|'100'
op|'**'
number|'100l'
op|','
name|'unittest'
op|','
name|'aot'
op|'.'
name|'AOTJellier'
op|','
name|'d'
op|','
nl|'\n'
name|'funktion'
nl|'\n'
op|']'
newline|'\n'
name|'t'
op|'='
name|'tuple'
op|'('
name|'l'
op|')'
newline|'\n'
name|'l'
op|'.'
name|'append'
op|'('
name|'l'
op|')'
newline|'\n'
name|'l'
op|'.'
name|'append'
op|'('
name|'t'
op|')'
newline|'\n'
name|'l'
op|'.'
name|'append'
op|'('
name|'t'
op|')'
newline|'\n'
name|'uj'
op|'='
name|'aot'
op|'.'
name|'unjellyFromSource'
op|'('
name|'aot'
op|'.'
name|'jellyToSource'
op|'('
op|'['
name|'l'
op|','
name|'l'
op|']'
op|')'
op|')'
newline|'\n'
name|'assert'
name|'uj'
op|'['
number|'0'
op|']'
name|'is'
name|'uj'
op|'['
number|'1'
op|']'
newline|'\n'
name|'assert'
name|'uj'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|':'
number|'5'
op|']'
op|'=='
name|'l'
op|'['
number|'0'
op|':'
number|'5'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testNonDictState
dedent|''
name|'def'
name|'testNonDictState'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'a'
op|'='
name|'NonDictState'
op|'('
op|')'
newline|'\n'
name|'a'
op|'.'
name|'state'
op|'='
string|'"meringue!"'
newline|'\n'
name|'assert'
name|'aot'
op|'.'
name|'unjellyFromSource'
op|'('
name|'aot'
op|'.'
name|'jellyToSource'
op|'('
name|'a'
op|')'
op|')'
op|'.'
name|'state'
op|'=='
name|'a'
op|'.'
name|'state'
newline|'\n'
nl|'\n'
DECL|member|testCopyReg
dedent|''
name|'def'
name|'testCopyReg'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
string|'"foo_bar"'
newline|'\n'
name|'sio'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'sio'
op|'.'
name|'write'
op|'('
name|'s'
op|')'
newline|'\n'
name|'uj'
op|'='
name|'aot'
op|'.'
name|'unjellyFromSource'
op|'('
name|'aot'
op|'.'
name|'jellyToSource'
op|'('
name|'sio'
op|')'
op|')'
newline|'\n'
comment|'# print repr(uj.__dict__)'
nl|'\n'
name|'assert'
name|'uj'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'=='
name|'s'
newline|'\n'
nl|'\n'
DECL|member|testFunkyReferences
dedent|''
name|'def'
name|'testFunkyReferences'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'o'
op|'='
name|'EvilSourceror'
op|'('
name|'EvilSourceror'
op|'('
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'j1'
op|'='
name|'aot'
op|'.'
name|'jellyToAOT'
op|'('
name|'o'
op|')'
newline|'\n'
name|'oj'
op|'='
name|'aot'
op|'.'
name|'unjellyFromAOT'
op|'('
name|'j1'
op|')'
newline|'\n'
nl|'\n'
name|'assert'
name|'oj'
op|'.'
name|'a'
name|'is'
name|'oj'
newline|'\n'
name|'assert'
name|'oj'
op|'.'
name|'a'
op|'.'
name|'b'
name|'is'
name|'oj'
op|'.'
name|'b'
newline|'\n'
name|'assert'
name|'oj'
op|'.'
name|'c'
name|'is'
name|'not'
name|'oj'
op|'.'
name|'c'
op|'.'
name|'c'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CrefUtilTestCase
dedent|''
dedent|''
name|'class'
name|'CrefUtilTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{crefutil}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_dictUnknownKey
name|'def'
name|'test_dictUnknownKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{crefutil._DictKeyAndValue} only support keys C{0} and C{1}.\n        """'
newline|'\n'
name|'d'
op|'='
name|'crefutil'
op|'.'
name|'_DictKeyAndValue'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'d'
op|'.'
name|'__setitem__'
op|','
number|'2'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_deferSetMultipleTimes
dedent|''
name|'def'
name|'test_deferSetMultipleTimes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{crefutil._Defer} can be assigned a key only one time.\n        """'
newline|'\n'
name|'d'
op|'='
name|'crefutil'
op|'.'
name|'_Defer'
op|'('
op|')'
newline|'\n'
name|'d'
op|'['
number|'0'
op|']'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'d'
op|'.'
name|'__setitem__'
op|','
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|testCases
dedent|''
dedent|''
name|'testCases'
op|'='
op|'['
name|'VersionTestCase'
op|','
name|'EphemeralTestCase'
op|','
name|'PicklingTestCase'
op|']'
newline|'\n'
nl|'\n'
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nTests for twisted.enterprise.adbapi.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'stat'
op|','
name|'new'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'enterprise'
op|'.'
name|'adbapi'
name|'import'
name|'ConnectionPool'
op|','
name|'ConnectionLost'
op|','
name|'safe'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'enterprise'
op|'.'
name|'adbapi'
name|'import'
name|'Connection'
op|','
name|'Transaction'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'enterprise'
op|'.'
name|'adbapi'
name|'import'
name|'_unreleasedVersion'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
op|','
name|'defer'
op|','
name|'interfaces'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'failure'
name|'import'
name|'Failure'
newline|'\n'
nl|'\n'
nl|'\n'
name|'simple_table_schema'
op|'='
string|'"""\nCREATE TABLE simple (\n  x integer\n)\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ADBAPITestBase
name|'class'
name|'ADBAPITestBase'
op|':'
newline|'\n'
indent|'    '
string|'"""Test the asynchronous DB-API code."""'
newline|'\n'
nl|'\n'
DECL|variable|openfun_called
name|'openfun_called'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'interfaces'
op|'.'
name|'IReactorThreads'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"ADB-API requires threads, no way to test without them"'
newline|'\n'
nl|'\n'
DECL|member|extraSetUp
dedent|''
name|'def'
name|'extraSetUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set up the database and create a connection pool pointing at it.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'startDB'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dbpool'
op|'='
name|'self'
op|'.'
name|'makePool'
op|'('
name|'cp_openfun'
op|'='
name|'self'
op|'.'
name|'openfun'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runOperation'
op|'('
string|"'DROP TABLE simple'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'res'
op|':'
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'close'
op|'('
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'res'
op|':'
name|'self'
op|'.'
name|'stopDB'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|openfun
dedent|''
name|'def'
name|'openfun'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'openfun_called'
op|'['
name|'conn'
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|checkOpenfunCalled
dedent|''
name|'def'
name|'checkOpenfunCalled'
op|'('
name|'self'
op|','
name|'conn'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'openfun_called'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'openfun_called'
op|'.'
name|'has_key'
op|'('
name|'conn'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPool
dedent|''
dedent|''
name|'def'
name|'testPool'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runOperation'
op|'('
name|'simple_table_schema'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'test_failures'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_1_1'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_1_2'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_1_3'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_1_4'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'res'
op|':'
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_2'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_3'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_4'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_5'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_6'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_7'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_8'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_9'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_testPool_1_1
dedent|''
name|'def'
name|'_testPool_1_1'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runQuery'
op|','
string|'"select * from NOTABLE"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'lambda'
name|'res'
op|':'
name|'self'
op|'.'
name|'fail'
op|'('
string|"'no exception'"
op|')'
op|','
nl|'\n'
name|'lambda'
name|'f'
op|':'
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_testPool_1_2
dedent|''
name|'def'
name|'_testPool_1_2'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runOperation'
op|','
nl|'\n'
string|'"deletexxx from NOTABLE"'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'lambda'
name|'res'
op|':'
name|'self'
op|'.'
name|'fail'
op|'('
string|"'no exception'"
op|')'
op|','
nl|'\n'
name|'lambda'
name|'f'
op|':'
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_testPool_1_3
dedent|''
name|'def'
name|'_testPool_1_3'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runInteraction'
op|','
nl|'\n'
name|'self'
op|'.'
name|'bad_interaction'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'lambda'
name|'res'
op|':'
name|'self'
op|'.'
name|'fail'
op|'('
string|"'no exception'"
op|')'
op|','
nl|'\n'
name|'lambda'
name|'f'
op|':'
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_testPool_1_4
dedent|''
name|'def'
name|'_testPool_1_4'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runWithConnection'
op|','
nl|'\n'
name|'self'
op|'.'
name|'bad_withConnection'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'lambda'
name|'res'
op|':'
name|'self'
op|'.'
name|'fail'
op|'('
string|"'no exception'"
op|')'
op|','
nl|'\n'
name|'lambda'
name|'f'
op|':'
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_testPool_2
dedent|''
name|'def'
name|'_testPool_2'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
comment|'# verify simple table is empty'
nl|'\n'
indent|'        '
name|'sql'
op|'='
string|'"select count(1) from simple"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runQuery'
op|'('
name|'sql'
op|')'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'row'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'int'
op|'('
name|'row'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|')'
op|'=='
number|'0'
op|','
string|'"Interaction not rolled back"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checkOpenfunCalled'
op|'('
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_testPool_3
dedent|''
name|'def'
name|'_testPool_3'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sql'
op|'='
string|'"select count(1) from simple"'
newline|'\n'
name|'inserts'
op|'='
op|'['
op|']'
newline|'\n'
comment|'# add some rows to simple table (runOperation)'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'self'
op|'.'
name|'num_iterations'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sql'
op|'='
string|'"insert into simple(x) values(%d)"'
op|'%'
name|'i'
newline|'\n'
name|'inserts'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runOperation'
op|'('
name|'sql'
op|')'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
name|'inserts'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_select
name|'def'
name|'_select'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
comment|'# make sure they were added (runQuery)'
nl|'\n'
indent|'            '
name|'sql'
op|'='
string|'"select x from simple order by x"'
op|';'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runQuery'
op|'('
name|'sql'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_select'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'rows'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'len'
op|'('
name|'rows'
op|')'
op|'=='
name|'self'
op|'.'
name|'num_iterations'
op|','
nl|'\n'
string|'"Wrong number of rows"'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'self'
op|'.'
name|'num_iterations'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'len'
op|'('
name|'rows'
op|'['
name|'i'
op|']'
op|')'
op|'=='
number|'1'
op|','
string|'"Wrong size row"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'rows'
op|'['
name|'i'
op|']'
op|'['
number|'0'
op|']'
op|'=='
name|'i'
op|','
string|'"Values not returned."'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_testPool_4
dedent|''
name|'def'
name|'_testPool_4'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
comment|'# runInteraction'
nl|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runInteraction'
op|'('
name|'self'
op|'.'
name|'interaction'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'res'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|','
string|'"done"'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_testPool_5
dedent|''
name|'def'
name|'_testPool_5'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
comment|'# withConnection'
nl|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runWithConnection'
op|'('
name|'self'
op|'.'
name|'withConnection'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'res'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|','
string|'"done"'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_testPool_6
dedent|''
name|'def'
name|'_testPool_6'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
comment|'# Test a withConnection cannot be closed'
nl|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runWithConnection'
op|'('
name|'self'
op|'.'
name|'close_withConnection'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_testPool_7
dedent|''
name|'def'
name|'_testPool_7'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
comment|'# give the pool a workout'
nl|'\n'
indent|'        '
name|'ds'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'self'
op|'.'
name|'num_iterations'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sql'
op|'='
string|'"select x from simple where x = %d"'
op|'%'
name|'i'
newline|'\n'
name|'ds'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runQuery'
op|'('
name|'sql'
op|')'
op|')'
newline|'\n'
dedent|''
name|'dlist'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'ds'
op|','
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'self'
op|'.'
name|'num_iterations'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'result'
op|'['
name|'i'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'=='
name|'i'
op|','
string|'"Value not returned"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'dlist'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
name|'return'
name|'dlist'
newline|'\n'
nl|'\n'
DECL|member|_testPool_8
dedent|''
name|'def'
name|'_testPool_8'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
comment|'# now delete everything'
nl|'\n'
indent|'        '
name|'ds'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'self'
op|'.'
name|'num_iterations'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sql'
op|'='
string|'"delete from simple where x = %d"'
op|'%'
name|'i'
newline|'\n'
name|'ds'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runOperation'
op|'('
name|'sql'
op|')'
op|')'
newline|'\n'
dedent|''
name|'dlist'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
name|'ds'
op|','
name|'fireOnOneErrback'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'dlist'
newline|'\n'
nl|'\n'
DECL|member|_testPool_9
dedent|''
name|'def'
name|'_testPool_9'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
comment|'# verify simple table is empty'
nl|'\n'
indent|'        '
name|'sql'
op|'='
string|'"select count(1) from simple"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runQuery'
op|'('
name|'sql'
op|')'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'row'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'int'
op|'('
name|'row'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|')'
op|'=='
number|'0'
op|','
nl|'\n'
string|'"Didn\'t successfully delete table contents"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checkConnect'
op|'('
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|checkConnect
dedent|''
name|'def'
name|'checkConnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check the connect/disconnect synchronous calls."""'
newline|'\n'
name|'conn'
op|'='
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'checkOpenfunCalled'
op|'('
name|'conn'
op|')'
newline|'\n'
name|'curs'
op|'='
name|'conn'
op|'.'
name|'cursor'
op|'('
op|')'
newline|'\n'
name|'curs'
op|'.'
name|'execute'
op|'('
string|'"insert into simple(x) values(1)"'
op|')'
newline|'\n'
name|'curs'
op|'.'
name|'execute'
op|'('
string|'"select x from simple"'
op|')'
newline|'\n'
name|'res'
op|'='
name|'curs'
op|'.'
name|'fetchall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'res'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'curs'
op|'.'
name|'execute'
op|'('
string|'"delete from simple"'
op|')'
newline|'\n'
name|'curs'
op|'.'
name|'execute'
op|'('
string|'"select x from simple"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'len'
op|'('
name|'curs'
op|'.'
name|'fetchall'
op|'('
op|')'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'curs'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'disconnect'
op|'('
name|'conn'
op|')'
newline|'\n'
nl|'\n'
DECL|member|interaction
dedent|''
name|'def'
name|'interaction'
op|'('
name|'self'
op|','
name|'transaction'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'transaction'
op|'.'
name|'execute'
op|'('
string|'"select x from simple order by x"'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'self'
op|'.'
name|'num_iterations'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'row'
op|'='
name|'transaction'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'len'
op|'('
name|'row'
op|')'
op|'=='
number|'1'
op|','
string|'"Wrong size row"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'row'
op|'['
number|'0'
op|']'
op|'=='
name|'i'
op|','
string|'"Value not returned."'
op|')'
newline|'\n'
comment|'# should test this, but gadfly throws an exception instead'
nl|'\n'
comment|'#self.failUnless(transaction.fetchone() is None, "Too many rows")'
nl|'\n'
dedent|''
name|'return'
string|'"done"'
newline|'\n'
nl|'\n'
DECL|member|bad_interaction
dedent|''
name|'def'
name|'bad_interaction'
op|'('
name|'self'
op|','
name|'transaction'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'can_rollback'
op|':'
newline|'\n'
indent|'            '
name|'transaction'
op|'.'
name|'execute'
op|'('
string|'"insert into simple(x) values(0)"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'transaction'
op|'.'
name|'execute'
op|'('
string|'"select * from NOTABLE"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|withConnection
dedent|''
name|'def'
name|'withConnection'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'curs'
op|'='
name|'conn'
op|'.'
name|'cursor'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'curs'
op|'.'
name|'execute'
op|'('
string|'"select x from simple order by x"'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'self'
op|'.'
name|'num_iterations'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'row'
op|'='
name|'curs'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'len'
op|'('
name|'row'
op|')'
op|'=='
number|'1'
op|','
string|'"Wrong size row"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'row'
op|'['
number|'0'
op|']'
op|'=='
name|'i'
op|','
string|'"Value not returned."'
op|')'
newline|'\n'
comment|'# should test this, but gadfly throws an exception instead'
nl|'\n'
comment|'#self.failUnless(transaction.fetchone() is None, "Too many rows")'
nl|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'curs'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
string|'"done"'
newline|'\n'
nl|'\n'
DECL|member|close_withConnection
dedent|''
name|'def'
name|'close_withConnection'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|bad_withConnection
dedent|''
name|'def'
name|'bad_withConnection'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'curs'
op|'='
name|'conn'
op|'.'
name|'cursor'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'curs'
op|'.'
name|'execute'
op|'('
string|'"select * from NOTABLE"'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'curs'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReconnectTestBase
dedent|''
dedent|''
dedent|''
name|'class'
name|'ReconnectTestBase'
op|':'
newline|'\n'
indent|'    '
string|'"""Test the asynchronous DB-API code with reconnect."""'
newline|'\n'
nl|'\n'
name|'if'
name|'interfaces'
op|'.'
name|'IReactorThreads'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"ADB-API requires threads, no way to test without them"'
newline|'\n'
nl|'\n'
DECL|member|extraSetUp
dedent|''
name|'def'
name|'extraSetUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Skip the test if C{good_sql} is unavailable.  Otherwise, set up the\n        database, create a connection pool pointed at it, and set up a simple\n        schema in it.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'good_sql'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'unittest'
op|'.'
name|'SkipTest'
op|'('
string|"'no good sql for reconnect test'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'startDB'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dbpool'
op|'='
name|'self'
op|'.'
name|'makePool'
op|'('
name|'cp_max'
op|'='
number|'1'
op|','
name|'cp_reconnect'
op|'='
name|'True'
op|','
nl|'\n'
name|'cp_good_sql'
op|'='
name|'self'
op|'.'
name|'good_sql'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runOperation'
op|'('
name|'simple_table_schema'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runOperation'
op|'('
string|"'DROP TABLE simple'"
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'res'
op|':'
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'close'
op|'('
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'res'
op|':'
name|'self'
op|'.'
name|'stopDB'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testPool
dedent|''
name|'def'
name|'testPool'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_1'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_2'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'early_reconnect'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_3'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_4'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_testPool_5'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_testPool_1
dedent|''
name|'def'
name|'_testPool_1'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sql'
op|'='
string|'"select count(1) from simple"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runQuery'
op|'('
name|'sql'
op|')'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'row'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'int'
op|'('
name|'row'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|')'
op|'=='
number|'0'
op|','
string|'"Table not empty"'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_testPool_2
dedent|''
name|'def'
name|'_testPool_2'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
comment|'# reach in and close the connection manually'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'connections'
op|'.'
name|'values'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_testPool_3
dedent|''
name|'def'
name|'_testPool_3'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sql'
op|'='
string|'"select count(1) from simple"'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runQuery'
op|','
name|'sql'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'lambda'
name|'res'
op|':'
name|'self'
op|'.'
name|'fail'
op|'('
string|"'no exception'"
op|')'
op|','
nl|'\n'
name|'lambda'
name|'f'
op|':'
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_testPool_4
dedent|''
name|'def'
name|'_testPool_4'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sql'
op|'='
string|'"select count(1) from simple"'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runQuery'
op|'('
name|'sql'
op|')'
newline|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'row'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'int'
op|'('
name|'row'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|')'
op|'=='
number|'0'
op|','
string|'"Table not empty"'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_testPool_5
dedent|''
name|'def'
name|'_testPool_5'
op|'('
name|'self'
op|','
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
op|')'
newline|'\n'
name|'sql'
op|'='
string|'"select * from NOTABLE"'
comment|'# bad sql'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'dbpool'
op|'.'
name|'runQuery'
op|','
name|'sql'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'lambda'
name|'res'
op|':'
name|'self'
op|'.'
name|'fail'
op|'('
string|"'no exception'"
op|')'
op|','
nl|'\n'
name|'lambda'
name|'f'
op|':'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'f'
op|'.'
name|'check'
op|'('
name|'ConnectionLost'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DBTestConnector
dedent|''
dedent|''
name|'class'
name|'DBTestConnector'
op|':'
newline|'\n'
indent|'    '
string|'"""A class which knows how to test for the presence of\n    and establish a connection to a relational database.\n\n    To enable test cases  which use a central, system database,\n    you must create a database named DB_NAME with a user DB_USER\n    and password DB_PASS with full access rights to database DB_NAME.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|TEST_PREFIX
name|'TEST_PREFIX'
op|'='
name|'None'
comment|'# used for creating new test cases'
newline|'\n'
nl|'\n'
DECL|variable|DB_NAME
name|'DB_NAME'
op|'='
string|'"twisted_test"'
newline|'\n'
DECL|variable|DB_USER
name|'DB_USER'
op|'='
string|"'twisted_test'"
newline|'\n'
DECL|variable|DB_PASS
name|'DB_PASS'
op|'='
string|"'twisted_test'"
newline|'\n'
nl|'\n'
DECL|variable|DB_DIR
name|'DB_DIR'
op|'='
name|'None'
comment|'# directory for database storage'
newline|'\n'
nl|'\n'
DECL|variable|nulls_ok
name|'nulls_ok'
op|'='
name|'True'
comment|'# nulls supported'
newline|'\n'
DECL|variable|trailing_spaces_ok
name|'trailing_spaces_ok'
op|'='
name|'True'
comment|'# trailing spaces in strings preserved'
newline|'\n'
DECL|variable|can_rollback
name|'can_rollback'
op|'='
name|'True'
comment|'# rollback supported'
newline|'\n'
DECL|variable|test_failures
name|'test_failures'
op|'='
name|'True'
comment|'# test bad sql?'
newline|'\n'
DECL|variable|escape_slashes
name|'escape_slashes'
op|'='
name|'True'
comment|'# escape \\ in sql?'
newline|'\n'
DECL|variable|good_sql
name|'good_sql'
op|'='
name|'ConnectionPool'
op|'.'
name|'good_sql'
newline|'\n'
DECL|variable|early_reconnect
name|'early_reconnect'
op|'='
name|'True'
comment|'# cursor() will fail on closed connection'
newline|'\n'
DECL|variable|can_clear
name|'can_clear'
op|'='
name|'True'
comment|'# can try to clear out tables when starting'
newline|'\n'
nl|'\n'
DECL|variable|num_iterations
name|'num_iterations'
op|'='
number|'50'
comment|'# number of iterations for test loops'
newline|'\n'
comment|"# (lower this for slow db's)"
nl|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'DB_DIR'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'DB_DIR'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'can_connect'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'unittest'
op|'.'
name|'SkipTest'
op|'('
string|"'%s: Cannot access db'"
op|'%'
name|'self'
op|'.'
name|'TEST_PREFIX'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'extraSetUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|can_connect
dedent|''
name|'def'
name|'can_connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return true if this database is present on the system\n        and can be used in a test."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|startDB
dedent|''
name|'def'
name|'startDB'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Take any steps needed to bring database up."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|stopDB
dedent|''
name|'def'
name|'stopDB'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Bring database down, if needed."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|makePool
dedent|''
name|'def'
name|'makePool'
op|'('
name|'self'
op|','
op|'**'
name|'newkw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a connection pool with additional keyword arguments."""'
newline|'\n'
name|'args'
op|','
name|'kw'
op|'='
name|'self'
op|'.'
name|'getPoolArgs'
op|'('
op|')'
newline|'\n'
name|'kw'
op|'='
name|'kw'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'kw'
op|'.'
name|'update'
op|'('
name|'newkw'
op|')'
newline|'\n'
name|'return'
name|'ConnectionPool'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getPoolArgs
dedent|''
name|'def'
name|'getPoolArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a tuple (args, kw) of list and keyword arguments\n        that need to be passed to ConnectionPool to create a connection\n        to this database."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|GadflyConnector
dedent|''
dedent|''
name|'class'
name|'GadflyConnector'
op|'('
name|'DBTestConnector'
op|')'
op|':'
newline|'\n'
DECL|variable|TEST_PREFIX
indent|'    '
name|'TEST_PREFIX'
op|'='
string|"'Gadfly'"
newline|'\n'
nl|'\n'
DECL|variable|nulls_ok
name|'nulls_ok'
op|'='
name|'False'
newline|'\n'
DECL|variable|can_rollback
name|'can_rollback'
op|'='
name|'False'
newline|'\n'
DECL|variable|escape_slashes
name|'escape_slashes'
op|'='
name|'False'
newline|'\n'
name|'good_sql'
op|'='
string|"'select * from simple where 1=0'"
newline|'\n'
nl|'\n'
DECL|variable|num_iterations
name|'num_iterations'
op|'='
number|'1'
comment|'# slow'
newline|'\n'
nl|'\n'
DECL|member|can_connect
name|'def'
name|'can_connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
name|'import'
name|'gadfly'
newline|'\n'
name|'except'
op|':'
name|'return'
name|'False'
newline|'\n'
name|'if'
name|'not'
name|'getattr'
op|'('
name|'gadfly'
op|','
string|"'connect'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'gadfly'
op|'.'
name|'connect'
op|'='
name|'gadfly'
op|'.'
name|'gadfly'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|startDB
dedent|''
name|'def'
name|'startDB'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'gadfly'
newline|'\n'
name|'conn'
op|'='
name|'gadfly'
op|'.'
name|'gadfly'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'startup'
op|'('
name|'self'
op|'.'
name|'DB_NAME'
op|','
name|'self'
op|'.'
name|'DB_DIR'
op|')'
newline|'\n'
nl|'\n'
comment|'# gadfly seems to want us to create something to get the db going'
nl|'\n'
name|'cursor'
op|'='
name|'conn'
op|'.'
name|'cursor'
op|'('
op|')'
newline|'\n'
name|'cursor'
op|'.'
name|'execute'
op|'('
string|'"create table x (x integer)"'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getPoolArgs
dedent|''
name|'def'
name|'getPoolArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'('
string|"'gadfly'"
op|','
name|'self'
op|'.'
name|'DB_NAME'
op|','
name|'self'
op|'.'
name|'DB_DIR'
op|')'
newline|'\n'
name|'kw'
op|'='
op|'{'
string|"'cp_max'"
op|':'
number|'1'
op|'}'
newline|'\n'
name|'return'
name|'args'
op|','
name|'kw'
newline|'\n'
nl|'\n'
DECL|class|SQLiteConnector
dedent|''
dedent|''
name|'class'
name|'SQLiteConnector'
op|'('
name|'DBTestConnector'
op|')'
op|':'
newline|'\n'
DECL|variable|TEST_PREFIX
indent|'    '
name|'TEST_PREFIX'
op|'='
string|"'SQLite'"
newline|'\n'
nl|'\n'
DECL|variable|escape_slashes
name|'escape_slashes'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|variable|num_iterations
name|'num_iterations'
op|'='
number|'1'
comment|'# slow'
newline|'\n'
nl|'\n'
DECL|member|can_connect
name|'def'
name|'can_connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
name|'import'
name|'sqlite'
newline|'\n'
name|'except'
op|':'
name|'return'
name|'False'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|startDB
dedent|''
name|'def'
name|'startDB'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'database'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'DB_DIR'
op|','
name|'self'
op|'.'
name|'DB_NAME'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'database'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'self'
op|'.'
name|'database'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getPoolArgs
dedent|''
dedent|''
name|'def'
name|'getPoolArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'('
string|"'sqlite'"
op|','
op|')'
newline|'\n'
name|'kw'
op|'='
op|'{'
string|"'database'"
op|':'
name|'self'
op|'.'
name|'database'
op|','
string|"'cp_max'"
op|':'
number|'1'
op|'}'
newline|'\n'
name|'return'
name|'args'
op|','
name|'kw'
newline|'\n'
nl|'\n'
DECL|class|PyPgSQLConnector
dedent|''
dedent|''
name|'class'
name|'PyPgSQLConnector'
op|'('
name|'DBTestConnector'
op|')'
op|':'
newline|'\n'
DECL|variable|TEST_PREFIX
indent|'    '
name|'TEST_PREFIX'
op|'='
string|'"PyPgSQL"'
newline|'\n'
nl|'\n'
DECL|member|can_connect
name|'def'
name|'can_connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
name|'from'
name|'pyPgSQL'
name|'import'
name|'PgSQL'
newline|'\n'
name|'except'
op|':'
name|'return'
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'='
name|'PgSQL'
op|'.'
name|'connect'
op|'('
name|'database'
op|'='
name|'self'
op|'.'
name|'DB_NAME'
op|','
name|'user'
op|'='
name|'self'
op|'.'
name|'DB_USER'
op|','
nl|'\n'
name|'password'
op|'='
name|'self'
op|'.'
name|'DB_PASS'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|getPoolArgs
dedent|''
dedent|''
name|'def'
name|'getPoolArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'('
string|"'pyPgSQL.PgSQL'"
op|','
op|')'
newline|'\n'
name|'kw'
op|'='
op|'{'
string|"'database'"
op|':'
name|'self'
op|'.'
name|'DB_NAME'
op|','
string|"'user'"
op|':'
name|'self'
op|'.'
name|'DB_USER'
op|','
nl|'\n'
string|"'password'"
op|':'
name|'self'
op|'.'
name|'DB_PASS'
op|','
string|"'cp_min'"
op|':'
number|'0'
op|'}'
newline|'\n'
name|'return'
name|'args'
op|','
name|'kw'
newline|'\n'
nl|'\n'
DECL|class|PsycopgConnector
dedent|''
dedent|''
name|'class'
name|'PsycopgConnector'
op|'('
name|'DBTestConnector'
op|')'
op|':'
newline|'\n'
DECL|variable|TEST_PREFIX
indent|'    '
name|'TEST_PREFIX'
op|'='
string|"'Psycopg'"
newline|'\n'
nl|'\n'
DECL|member|can_connect
name|'def'
name|'can_connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
name|'import'
name|'psycopg'
newline|'\n'
name|'except'
op|':'
name|'return'
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'='
name|'psycopg'
op|'.'
name|'connect'
op|'('
name|'database'
op|'='
name|'self'
op|'.'
name|'DB_NAME'
op|','
name|'user'
op|'='
name|'self'
op|'.'
name|'DB_USER'
op|','
nl|'\n'
name|'password'
op|'='
name|'self'
op|'.'
name|'DB_PASS'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|getPoolArgs
dedent|''
dedent|''
name|'def'
name|'getPoolArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'('
string|"'psycopg'"
op|','
op|')'
newline|'\n'
name|'kw'
op|'='
op|'{'
string|"'database'"
op|':'
name|'self'
op|'.'
name|'DB_NAME'
op|','
string|"'user'"
op|':'
name|'self'
op|'.'
name|'DB_USER'
op|','
nl|'\n'
string|"'password'"
op|':'
name|'self'
op|'.'
name|'DB_PASS'
op|','
string|"'cp_min'"
op|':'
number|'0'
op|'}'
newline|'\n'
name|'return'
name|'args'
op|','
name|'kw'
newline|'\n'
nl|'\n'
DECL|class|MySQLConnector
dedent|''
dedent|''
name|'class'
name|'MySQLConnector'
op|'('
name|'DBTestConnector'
op|')'
op|':'
newline|'\n'
DECL|variable|TEST_PREFIX
indent|'    '
name|'TEST_PREFIX'
op|'='
string|"'MySQL'"
newline|'\n'
nl|'\n'
DECL|variable|trailing_spaces_ok
name|'trailing_spaces_ok'
op|'='
name|'False'
newline|'\n'
DECL|variable|can_rollback
name|'can_rollback'
op|'='
name|'False'
newline|'\n'
DECL|variable|early_reconnect
name|'early_reconnect'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|can_connect
name|'def'
name|'can_connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
name|'import'
name|'MySQLdb'
newline|'\n'
name|'except'
op|':'
name|'return'
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'='
name|'MySQLdb'
op|'.'
name|'connect'
op|'('
name|'db'
op|'='
name|'self'
op|'.'
name|'DB_NAME'
op|','
name|'user'
op|'='
name|'self'
op|'.'
name|'DB_USER'
op|','
nl|'\n'
name|'passwd'
op|'='
name|'self'
op|'.'
name|'DB_PASS'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|getPoolArgs
dedent|''
dedent|''
name|'def'
name|'getPoolArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'('
string|"'MySQLdb'"
op|','
op|')'
newline|'\n'
name|'kw'
op|'='
op|'{'
string|"'db'"
op|':'
name|'self'
op|'.'
name|'DB_NAME'
op|','
string|"'user'"
op|':'
name|'self'
op|'.'
name|'DB_USER'
op|','
string|"'passwd'"
op|':'
name|'self'
op|'.'
name|'DB_PASS'
op|'}'
newline|'\n'
name|'return'
name|'args'
op|','
name|'kw'
newline|'\n'
nl|'\n'
DECL|class|FirebirdConnector
dedent|''
dedent|''
name|'class'
name|'FirebirdConnector'
op|'('
name|'DBTestConnector'
op|')'
op|':'
newline|'\n'
DECL|variable|TEST_PREFIX
indent|'    '
name|'TEST_PREFIX'
op|'='
string|"'Firebird'"
newline|'\n'
nl|'\n'
DECL|variable|test_failures
name|'test_failures'
op|'='
name|'False'
comment|'# failure testing causes problems'
newline|'\n'
DECL|variable|escape_slashes
name|'escape_slashes'
op|'='
name|'False'
newline|'\n'
DECL|variable|good_sql
name|'good_sql'
op|'='
name|'None'
comment|"# firebird doesn't handle failed sql well"
newline|'\n'
DECL|variable|can_clear
name|'can_clear'
op|'='
name|'False'
comment|'# firebird is not so good'
newline|'\n'
nl|'\n'
DECL|variable|num_iterations
name|'num_iterations'
op|'='
number|'5'
comment|'# slow'
newline|'\n'
nl|'\n'
DECL|member|can_connect
name|'def'
name|'can_connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
name|'import'
name|'kinterbasdb'
newline|'\n'
name|'except'
op|':'
name|'return'
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'startDB'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stopDB'
op|'('
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|startDB
dedent|''
dedent|''
name|'def'
name|'startDB'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'kinterbasdb'
newline|'\n'
name|'self'
op|'.'
name|'DB_NAME'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'DB_DIR'
op|','
name|'DBTestConnector'
op|'.'
name|'DB_NAME'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
name|'self'
op|'.'
name|'DB_DIR'
op|','
name|'stat'
op|'.'
name|'S_IRWXU'
op|'+'
name|'stat'
op|'.'
name|'S_IRWXG'
op|'+'
name|'stat'
op|'.'
name|'S_IRWXO'
op|')'
newline|'\n'
name|'sql'
op|'='
string|'\'create database "%s" user "%s" password "%s"\''
newline|'\n'
name|'sql'
op|'%='
op|'('
name|'self'
op|'.'
name|'DB_NAME'
op|','
name|'self'
op|'.'
name|'DB_USER'
op|','
name|'self'
op|'.'
name|'DB_PASS'
op|')'
op|';'
newline|'\n'
name|'conn'
op|'='
name|'kinterbasdb'
op|'.'
name|'create_database'
op|'('
name|'sql'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getPoolArgs
dedent|''
name|'def'
name|'getPoolArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'('
string|"'kinterbasdb'"
op|','
op|')'
newline|'\n'
name|'kw'
op|'='
op|'{'
string|"'database'"
op|':'
name|'self'
op|'.'
name|'DB_NAME'
op|','
string|"'host'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'user'"
op|':'
name|'self'
op|'.'
name|'DB_USER'
op|','
string|"'password'"
op|':'
name|'self'
op|'.'
name|'DB_PASS'
op|'}'
newline|'\n'
name|'return'
name|'args'
op|','
name|'kw'
newline|'\n'
nl|'\n'
DECL|member|stopDB
dedent|''
name|'def'
name|'stopDB'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'kinterbasdb'
newline|'\n'
name|'conn'
op|'='
name|'kinterbasdb'
op|'.'
name|'connect'
op|'('
name|'database'
op|'='
name|'self'
op|'.'
name|'DB_NAME'
op|','
nl|'\n'
name|'host'
op|'='
string|"'127.0.0.1'"
op|','
name|'user'
op|'='
name|'self'
op|'.'
name|'DB_USER'
op|','
nl|'\n'
name|'password'
op|'='
name|'self'
op|'.'
name|'DB_PASS'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'drop_database'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|makeSQLTests
dedent|''
dedent|''
name|'def'
name|'makeSQLTests'
op|'('
name|'base'
op|','
name|'suffix'
op|','
name|'globals'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Make a test case for every db connector which can connect.\n\n    @param base: Base class for test case. Additional base classes\n                 will be a DBConnector subclass and unittest.TestCase\n    @param suffix: A suffix used to create test case names. Prefixes\n                   are defined in the DBConnector subclasses.\n    """'
newline|'\n'
name|'connectors'
op|'='
op|'['
name|'GadflyConnector'
op|','
name|'SQLiteConnector'
op|','
name|'PyPgSQLConnector'
op|','
nl|'\n'
name|'PsycopgConnector'
op|','
name|'MySQLConnector'
op|','
name|'FirebirdConnector'
op|']'
newline|'\n'
name|'for'
name|'connclass'
name|'in'
name|'connectors'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'connclass'
op|'.'
name|'TEST_PREFIX'
op|'+'
name|'suffix'
newline|'\n'
name|'klass'
op|'='
name|'new'
op|'.'
name|'classobj'
op|'('
name|'name'
op|','
op|'('
name|'connclass'
op|','
name|'base'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|','
name|'base'
op|'.'
name|'__dict__'
op|')'
newline|'\n'
name|'globals'
op|'['
name|'name'
op|']'
op|'='
name|'klass'
newline|'\n'
nl|'\n'
comment|'# GadflyADBAPITestCase SQLiteADBAPITestCase PyPgSQLADBAPITestCase'
nl|'\n'
comment|'# PsycopgADBAPITestCase MySQLADBAPITestCase FirebirdADBAPITestCase'
nl|'\n'
dedent|''
dedent|''
name|'makeSQLTests'
op|'('
name|'ADBAPITestBase'
op|','
string|"'ADBAPITestCase'"
op|','
name|'globals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# GadflyReconnectTestCase SQLiteReconnectTestCase PyPgSQLReconnectTestCase'
nl|'\n'
comment|'# PsycopgReconnectTestCase MySQLReconnectTestCase FirebirdReconnectTestCase'
nl|'\n'
name|'makeSQLTests'
op|'('
name|'ReconnectTestBase'
op|','
string|"'ReconnectTestCase'"
op|','
name|'globals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DeprecationTestCase
name|'class'
name|'DeprecationTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test deprecations in twisted.enterprise.adbapi\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_safe
name|'def'
name|'test_safe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test deprecation of twisted.enterprise.adbapi.safe()\n        """'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'callDeprecated'
op|'('
name|'_unreleasedVersion'
op|','
nl|'\n'
name|'safe'
op|','
string|'"test\'"'
op|')'
newline|'\n'
nl|'\n'
comment|'# make sure safe still behaves like the original'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|','
string|'"test\'\'"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakePool
dedent|''
dedent|''
name|'class'
name|'FakePool'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A fake L{ConnectionPool} for tests.\n\n    @ivar connectionFactory: factory for making connections returned by the\n        C{connect} method.\n    @type connectionFactory: any callable\n    """'
newline|'\n'
DECL|variable|reconnect
name|'reconnect'
op|'='
name|'True'
newline|'\n'
DECL|variable|noisy
name|'noisy'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connectionFactory'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connectionFactory'
op|'='
name|'connectionFactory'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connect
dedent|''
name|'def'
name|'connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return an instance of C{self.connectionFactory}.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'connectionFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|disconnect
dedent|''
name|'def'
name|'disconnect'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Do nothing.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConnectionTestCase
dedent|''
dedent|''
name|'class'
name|'ConnectionTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the L{Connection} class.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_rollbackErrorLogged
name|'def'
name|'test_rollbackErrorLogged'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If an error happens during rollback, L{ConnectionLost} is raised but\n        the original error is logged.\n        """'
newline|'\n'
DECL|class|ConnectionRollbackRaise
name|'class'
name|'ConnectionRollbackRaise'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|rollback
indent|'            '
name|'def'
name|'rollback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RuntimeError'
op|'('
string|'"problem!"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'pool'
op|'='
name|'FakePool'
op|'('
name|'ConnectionRollbackRaise'
op|')'
newline|'\n'
name|'connection'
op|'='
name|'Connection'
op|'('
name|'pool'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ConnectionLost'
op|','
name|'connection'
op|'.'
name|'rollback'
op|')'
newline|'\n'
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'RuntimeError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'errors'
op|'['
number|'0'
op|']'
op|'.'
name|'value'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|','
string|'"problem!"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TransactionTestCase
dedent|''
dedent|''
name|'class'
name|'TransactionTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the L{Transaction} class.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_reopenLogErrorIfReconnect
name|'def'
name|'test_reopenLogErrorIfReconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the cursor creation raises an error in L{Transaction.reopen}, it\n        reconnects but log the error occurred.\n        """'
newline|'\n'
DECL|class|ConnectionCursorRaise
name|'class'
name|'ConnectionCursorRaise'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|count
indent|'            '
name|'count'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|reconnect
name|'def'
name|'reconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|cursor
dedent|''
name|'def'
name|'cursor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'count'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'count'
op|'+='
number|'1'
newline|'\n'
name|'raise'
name|'RuntimeError'
op|'('
string|'"problem!"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'pool'
op|'='
name|'FakePool'
op|'('
name|'None'
op|')'
newline|'\n'
name|'transaction'
op|'='
name|'Transaction'
op|'('
name|'pool'
op|','
name|'ConnectionCursorRaise'
op|'('
op|')'
op|')'
newline|'\n'
name|'transaction'
op|'.'
name|'reopen'
op|'('
op|')'
newline|'\n'
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'RuntimeError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'errors'
op|'['
number|'0'
op|']'
op|'.'
name|'value'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|','
string|'"problem!"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NonThreadPool
dedent|''
dedent|''
name|'class'
name|'NonThreadPool'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|callInThreadWithCallback
indent|'    '
name|'def'
name|'callInThreadWithCallback'
op|'('
name|'self'
op|','
name|'onResult'
op|','
name|'f'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'success'
op|'='
name|'True'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'f'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'success'
op|'='
name|'False'
newline|'\n'
name|'result'
op|'='
name|'Failure'
op|'('
op|')'
newline|'\n'
dedent|''
name|'onResult'
op|'('
name|'success'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyConnectionPool
dedent|''
dedent|''
name|'class'
name|'DummyConnectionPool'
op|'('
name|'ConnectionPool'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A testable L{ConnectionPool};\n    """'
newline|'\n'
DECL|variable|threadpool
name|'threadpool'
op|'='
name|'NonThreadPool'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Don\'t forward init call.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConnectionPoolTestCase
dedent|''
dedent|''
name|'class'
name|'ConnectionPoolTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Unit tests for L{ConnectionPool}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_runWithConnectionRaiseOriginalError
name|'def'
name|'test_runWithConnectionRaiseOriginalError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If rollback fails, L{ConnectionPool.runWithConnection} raises the\n        original exception and log the error of the rollback.\n        """'
newline|'\n'
DECL|class|ConnectionRollbackRaise
name|'class'
name|'ConnectionRollbackRaise'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pool'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|rollback
dedent|''
name|'def'
name|'rollback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RuntimeError'
op|'('
string|'"problem!"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|raisingFunction
dedent|''
dedent|''
name|'def'
name|'raisingFunction'
op|'('
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"foo"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'pool'
op|'='
name|'DummyConnectionPool'
op|'('
op|')'
newline|'\n'
name|'pool'
op|'.'
name|'connectionFactory'
op|'='
name|'ConnectionRollbackRaise'
newline|'\n'
name|'d'
op|'='
name|'pool'
op|'.'
name|'runWithConnection'
op|'('
name|'raisingFunction'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ValueError'
op|')'
newline|'\n'
DECL|function|cbFailed
name|'def'
name|'cbFailed'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'RuntimeError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'errors'
op|'['
number|'0'
op|']'
op|'.'
name|'value'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|','
string|'"problem!"'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbFailed'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_closeLogError
dedent|''
name|'def'
name|'test_closeLogError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ConnectionPool._close} logs exceptions.\n        """'
newline|'\n'
DECL|class|ConnectionCloseRaise
name|'class'
name|'ConnectionCloseRaise'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|close
indent|'            '
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RuntimeError'
op|'('
string|'"problem!"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'pool'
op|'='
name|'DummyConnectionPool'
op|'('
op|')'
newline|'\n'
name|'pool'
op|'.'
name|'_close'
op|'('
name|'ConnectionCloseRaise'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'RuntimeError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'errors'
op|'['
number|'0'
op|']'
op|'.'
name|'value'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|','
string|'"problem!"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_runWithInteractionRaiseOriginalError
dedent|''
name|'def'
name|'test_runWithInteractionRaiseOriginalError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If rollback fails, L{ConnectionPool.runInteraction} raises the\n        original exception and log the error of the rollback.\n        """'
newline|'\n'
DECL|class|ConnectionRollbackRaise
name|'class'
name|'ConnectionRollbackRaise'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pool'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|rollback
dedent|''
name|'def'
name|'rollback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RuntimeError'
op|'('
string|'"problem!"'
op|')'
newline|'\n'
nl|'\n'
DECL|class|DummyTransaction
dedent|''
dedent|''
name|'class'
name|'DummyTransaction'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pool'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|raisingFunction
dedent|''
dedent|''
name|'def'
name|'raisingFunction'
op|'('
name|'transaction'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"foo"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'pool'
op|'='
name|'DummyConnectionPool'
op|'('
op|')'
newline|'\n'
name|'pool'
op|'.'
name|'connectionFactory'
op|'='
name|'ConnectionRollbackRaise'
newline|'\n'
name|'pool'
op|'.'
name|'transactionFactory'
op|'='
name|'DummyTransaction'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'pool'
op|'.'
name|'runInteraction'
op|'('
name|'raisingFunction'
op|')'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'ValueError'
op|')'
newline|'\n'
DECL|function|cbFailed
name|'def'
name|'cbFailed'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'RuntimeError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'errors'
op|'['
number|'0'
op|']'
op|'.'
name|'value'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|','
string|'"problem!"'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbFailed'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit
